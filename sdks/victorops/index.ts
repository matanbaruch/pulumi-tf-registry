// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ContactArgs, ContactState } from "./contact";
export type Contact = import("./contact").Contact;
export const Contact: typeof import("./contact").Contact = null as any;
utilities.lazyLoad(exports, ["Contact"], () => require("./contact"));

export { EscalationPolicyArgs, EscalationPolicyState } from "./escalationPolicy";
export type EscalationPolicy = import("./escalationPolicy").EscalationPolicy;
export const EscalationPolicy: typeof import("./escalationPolicy").EscalationPolicy = null as any;
utilities.lazyLoad(exports, ["EscalationPolicy"], () => require("./escalationPolicy"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RoutingKeyArgs, RoutingKeyState } from "./routingKey";
export type RoutingKey = import("./routingKey").RoutingKey;
export const RoutingKey: typeof import("./routingKey").RoutingKey = null as any;
utilities.lazyLoad(exports, ["RoutingKey"], () => require("./routingKey"));

export { TeamArgs, TeamState } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

export { TeamMembershipArgs, TeamMembershipState } from "./teamMembership";
export type TeamMembership = import("./teamMembership").TeamMembership;
export const TeamMembership: typeof import("./teamMembership").TeamMembership = null as any;
utilities.lazyLoad(exports, ["TeamMembership"], () => require("./teamMembership"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "victorops:index/contact:Contact":
                return new Contact(name, <any>undefined, { urn })
            case "victorops:index/escalationPolicy:EscalationPolicy":
                return new EscalationPolicy(name, <any>undefined, { urn })
            case "victorops:index/routingKey:RoutingKey":
                return new RoutingKey(name, <any>undefined, { urn })
            case "victorops:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "victorops:index/teamMembership:TeamMembership":
                return new TeamMembership(name, <any>undefined, { urn })
            case "victorops:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("victorops", "index/contact", _module)
pulumi.runtime.registerResourceModule("victorops", "index/escalationPolicy", _module)
pulumi.runtime.registerResourceModule("victorops", "index/routingKey", _module)
pulumi.runtime.registerResourceModule("victorops", "index/team", _module)
pulumi.runtime.registerResourceModule("victorops", "index/teamMembership", _module)
pulumi.runtime.registerResourceModule("victorops", "index/user", _module)
pulumi.runtime.registerResourcePackage("victorops", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:victorops") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
