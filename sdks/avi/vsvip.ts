// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Vsvip extends pulumi.CustomResource {
    /**
     * Get an existing Vsvip resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VsvipState, opts?: pulumi.CustomResourceOptions): Vsvip {
        return new Vsvip(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'avi:index/vsvip:Vsvip';

    /**
     * Returns true if the given object is an instance of Vsvip.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vsvip {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vsvip.__pulumiType;
    }

    public readonly bgpLocalPreference!: pulumi.Output<string>;
    public readonly bgpNumAsPathPrepend!: pulumi.Output<string>;
    public readonly bgpPeerLabels!: pulumi.Output<string[] | undefined>;
    public readonly cloudRef!: pulumi.Output<string>;
    public readonly configpbAttributes!: pulumi.Output<outputs.VsvipConfigpbAttribute[] | undefined>;
    public readonly dnsInfos!: pulumi.Output<outputs.VsvipDnsInfo[] | undefined>;
    public readonly eastWestPlacement!: pulumi.Output<string | undefined>;
    public readonly ipamSelectors!: pulumi.Output<outputs.VsvipIpamSelector[] | undefined>;
    public readonly markers!: pulumi.Output<outputs.VsvipMarker[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly tenantRef!: pulumi.Output<string>;
    public readonly tier1Lr!: pulumi.Output<string>;
    public readonly useStandardAlb!: pulumi.Output<string>;
    public readonly uuid!: pulumi.Output<string>;
    public readonly vips!: pulumi.Output<outputs.VsvipVip[] | undefined>;
    public readonly vrfContextRef!: pulumi.Output<string>;
    public readonly vsvipCloudConfigCksum!: pulumi.Output<string>;

    /**
     * Create a Vsvip resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VsvipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VsvipArgs | VsvipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VsvipState | undefined;
            resourceInputs["bgpLocalPreference"] = state ? state.bgpLocalPreference : undefined;
            resourceInputs["bgpNumAsPathPrepend"] = state ? state.bgpNumAsPathPrepend : undefined;
            resourceInputs["bgpPeerLabels"] = state ? state.bgpPeerLabels : undefined;
            resourceInputs["cloudRef"] = state ? state.cloudRef : undefined;
            resourceInputs["configpbAttributes"] = state ? state.configpbAttributes : undefined;
            resourceInputs["dnsInfos"] = state ? state.dnsInfos : undefined;
            resourceInputs["eastWestPlacement"] = state ? state.eastWestPlacement : undefined;
            resourceInputs["ipamSelectors"] = state ? state.ipamSelectors : undefined;
            resourceInputs["markers"] = state ? state.markers : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tenantRef"] = state ? state.tenantRef : undefined;
            resourceInputs["tier1Lr"] = state ? state.tier1Lr : undefined;
            resourceInputs["useStandardAlb"] = state ? state.useStandardAlb : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vips"] = state ? state.vips : undefined;
            resourceInputs["vrfContextRef"] = state ? state.vrfContextRef : undefined;
            resourceInputs["vsvipCloudConfigCksum"] = state ? state.vsvipCloudConfigCksum : undefined;
        } else {
            const args = argsOrState as VsvipArgs | undefined;
            resourceInputs["bgpLocalPreference"] = args ? args.bgpLocalPreference : undefined;
            resourceInputs["bgpNumAsPathPrepend"] = args ? args.bgpNumAsPathPrepend : undefined;
            resourceInputs["bgpPeerLabels"] = args ? args.bgpPeerLabels : undefined;
            resourceInputs["cloudRef"] = args ? args.cloudRef : undefined;
            resourceInputs["configpbAttributes"] = args ? args.configpbAttributes : undefined;
            resourceInputs["dnsInfos"] = args ? args.dnsInfos : undefined;
            resourceInputs["eastWestPlacement"] = args ? args.eastWestPlacement : undefined;
            resourceInputs["ipamSelectors"] = args ? args.ipamSelectors : undefined;
            resourceInputs["markers"] = args ? args.markers : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tenantRef"] = args ? args.tenantRef : undefined;
            resourceInputs["tier1Lr"] = args ? args.tier1Lr : undefined;
            resourceInputs["useStandardAlb"] = args ? args.useStandardAlb : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vips"] = args ? args.vips : undefined;
            resourceInputs["vrfContextRef"] = args ? args.vrfContextRef : undefined;
            resourceInputs["vsvipCloudConfigCksum"] = args ? args.vsvipCloudConfigCksum : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vsvip.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Vsvip resources.
 */
export interface VsvipState {
    bgpLocalPreference?: pulumi.Input<string>;
    bgpNumAsPathPrepend?: pulumi.Input<string>;
    bgpPeerLabels?: pulumi.Input<pulumi.Input<string>[]>;
    cloudRef?: pulumi.Input<string>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.VsvipConfigpbAttribute>[]>;
    dnsInfos?: pulumi.Input<pulumi.Input<inputs.VsvipDnsInfo>[]>;
    eastWestPlacement?: pulumi.Input<string>;
    ipamSelectors?: pulumi.Input<pulumi.Input<inputs.VsvipIpamSelector>[]>;
    markers?: pulumi.Input<pulumi.Input<inputs.VsvipMarker>[]>;
    name?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    tier1Lr?: pulumi.Input<string>;
    useStandardAlb?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    vips?: pulumi.Input<pulumi.Input<inputs.VsvipVip>[]>;
    vrfContextRef?: pulumi.Input<string>;
    vsvipCloudConfigCksum?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vsvip resource.
 */
export interface VsvipArgs {
    bgpLocalPreference?: pulumi.Input<string>;
    bgpNumAsPathPrepend?: pulumi.Input<string>;
    bgpPeerLabels?: pulumi.Input<pulumi.Input<string>[]>;
    cloudRef?: pulumi.Input<string>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.VsvipConfigpbAttribute>[]>;
    dnsInfos?: pulumi.Input<pulumi.Input<inputs.VsvipDnsInfo>[]>;
    eastWestPlacement?: pulumi.Input<string>;
    ipamSelectors?: pulumi.Input<pulumi.Input<inputs.VsvipIpamSelector>[]>;
    markers?: pulumi.Input<pulumi.Input<inputs.VsvipMarker>[]>;
    name?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    tier1Lr?: pulumi.Input<string>;
    useStandardAlb?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    vips?: pulumi.Input<pulumi.Input<inputs.VsvipVip>[]>;
    vrfContextRef?: pulumi.Input<string>;
    vsvipCloudConfigCksum?: pulumi.Input<string>;
}
