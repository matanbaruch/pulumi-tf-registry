// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getControllerproperties(args?: GetControllerpropertiesArgs, opts?: pulumi.InvokeOptions): Promise<GetControllerpropertiesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("avi:index/getControllerproperties:getControllerproperties", {
        "id": args.id,
        "uuid": args.uuid,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getControllerproperties.
 */
export interface GetControllerpropertiesArgs {
    id?: string;
    uuid?: string;
}

/**
 * A collection of values returned by getControllerproperties.
 */
export interface GetControllerpropertiesResult {
    readonly alertManagerUseEvms: string;
    readonly allowAdminNetworkUpdates: string;
    readonly allowIpForwarding: string;
    readonly allowUnauthenticatedApis: string;
    readonly allowUnauthenticatedNodes: string;
    readonly apiIdleTimeout: string;
    readonly apiPerfLoggingThreshold: string;
    readonly appviewxCompatMode: string;
    readonly asyncPatchMergePeriod: string;
    readonly asyncPatchRequestCleanupDuration: string;
    readonly attachIpRetryInterval: string;
    readonly attachIpRetryLimit: string;
    readonly bmUseAnsible: string;
    readonly checkVsvipFqdnSyntax: string;
    readonly cleanupExpiredAuthtokenTimeoutPeriod: string;
    readonly cleanupSessionsTimeoutPeriod: string;
    readonly cloudDiscoveryInterval: string;
    readonly cloudReconcile: string;
    readonly cloudReconcileInterval: string;
    readonly clusterIpGratuitousArpPeriod: string;
    readonly configpbAttributes: outputs.GetControllerpropertiesConfigpbAttribute[];
    readonly consistencyCheckTimeoutPeriod: string;
    readonly controllerResourceInfoCollectionPeriod: string;
    readonly crashedSeReboot: string;
    readonly deadSeDetectionTimer: string;
    readonly defaultMinimumApiTimeout: string;
    readonly delOfflineSeAfterRebootDelay: string;
    readonly detachIpRetryInterval: string;
    readonly detachIpRetryLimit: string;
    readonly detachIpTimeout: string;
    readonly dnsRefreshPeriod: string;
    readonly dummy: string;
    readonly editSystemLimits: string;
    readonly enableApiSharding: string;
    readonly enableMemoryBalancer: string;
    readonly enablePerProcessStop: string;
    readonly enableResmgrLogCachePrint: string;
    readonly eventManagerMaxGoroutines: string;
    readonly eventManagerMaxSubscribers: string;
    readonly eventManagerProcessingTimeThreshold: string;
    readonly falsePositiveLearningConfigs: outputs.GetControllerpropertiesFalsePositiveLearningConfig[];
    readonly fatalErrorLeaseTime: string;
    readonly federatedDatastoreCleanupDuration: string;
    readonly fileObjectCleanupPeriod: string;
    readonly fileobjectMaxFileVersions: string;
    readonly gslbPurgeBatchSize: string;
    readonly gslbPurgeSleepTimeMs: string;
    readonly id: string;
    readonly ignoreVrfInNetworksubnetlist: string;
    readonly maxDeadSeInGrp: string;
    readonly maxPcapPerTenant: string;
    readonly maxSeSpawnIntervalDelay: string;
    readonly maxSeqAttachIpFailures: string;
    readonly maxSeqVnicFailures: string;
    readonly maxThreadsCcVipBgWorker: string;
    readonly permissionScopedSharedAdminNetworks: string;
    readonly persistenceKeyRotatePeriod: string;
    readonly portalRequestBurstLimit: string;
    readonly portalRequestRateLimit: string;
    readonly portalToken: string;
    readonly postgresVacuumPeriod: string;
    readonly processLockedUseraccountsTimeoutPeriod: string;
    readonly processPkiProfileTimeoutPeriod: string;
    readonly queryHostFail: string;
    readonly resmgrLogCachingPeriod: string;
    readonly restrictCloudReadAccess: string;
    readonly safenetHsmVersion: string;
    readonly seCreateTimeout: string;
    readonly seFailoverAttemptInterval: string;
    readonly seFromMarketplace: string;
    readonly seOfflineDel: string;
    readonly seSpawnRetryInterval: string;
    readonly seUpgradeFlowCleanupTimeout: string;
    readonly seVnicCooldown: string;
    readonly seVnicGcWaitTime: string;
    readonly secureChannelCleanupTimeout: string;
    readonly secureChannelControllerTokenTimeout: string;
    readonly secureChannelSeTokenTimeout: string;
    readonly seupgradeCopyBufferSize: string;
    readonly seupgradeCopyPoolSize: string;
    readonly seupgradeFabricPoolSize: string;
    readonly seupgradeSegroupMinDeadTimeout: string;
    readonly sharedSslCertificates: string;
    readonly skopeoRetryInterval: string;
    readonly skopeoRetryLimit: string;
    readonly softMinMemPerSeLimit: string;
    readonly sslCertificateExpiryWarningDays: number[];
    readonly systemReportCleanupInterval: string;
    readonly systemReportLimit: string;
    readonly unresponsiveSeReboot: string;
    readonly updateDnsEntryRetryLimit: string;
    readonly updateDnsEntryTimeout: string;
    readonly upgradeDnsTtl: string;
    readonly upgradeFatSeLeaseTime: string;
    readonly upgradeLeaseTime: string;
    readonly upgradeSePerVsScaleOpsTxnTime: string;
    readonly userAgentCacheConfigs: outputs.GetControllerpropertiesUserAgentCacheConfig[];
    readonly uuid: string;
    readonly vnicOpFailTime: string;
    readonly vsAwaitingSeTimeout: string;
    readonly vsKeyRotatePeriod: string;
    readonly vsScaleoutReadyCheckInterval: string;
    readonly vsSeAttachIpFail: string;
    readonly vsSeBootupFail: string;
    readonly vsSeBootupFailPatch: string;
    readonly vsSeCreateFail: string;
    readonly vsSePingFail: string;
    readonly vsSeVnicFail: string;
    readonly vsSeVnicIpFail: string;
    readonly vsphereHaDetectionTimeout: string;
    readonly vsphereHaRecoveryTimeout: string;
    readonly vsphereHaTimerInterval: string;
    readonly warmstartSeReconnectWaitTime: string;
    readonly warmstartVsResyncWaitTime: string;
}
export function getControllerpropertiesOutput(args?: GetControllerpropertiesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetControllerpropertiesResult> {
    return pulumi.output(args).apply((a: any) => getControllerproperties(a, opts))
}

/**
 * A collection of arguments for invoking getControllerproperties.
 */
export interface GetControllerpropertiesOutputArgs {
    id?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}
