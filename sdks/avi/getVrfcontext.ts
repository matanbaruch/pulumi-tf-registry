// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVrfcontext(args?: GetVrfcontextArgs, opts?: pulumi.InvokeOptions): Promise<GetVrfcontextResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("avi:index/getVrfcontext:getVrfcontext", {
        "cloudRef": args.cloudRef,
        "id": args.id,
        "name": args.name,
        "tenantRef": args.tenantRef,
        "uuid": args.uuid,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVrfcontext.
 */
export interface GetVrfcontextArgs {
    cloudRef?: string;
    id?: string;
    name?: string;
    tenantRef?: string;
    uuid?: string;
}

/**
 * A collection of values returned by getVrfcontext.
 */
export interface GetVrfcontextResult {
    readonly attrs: outputs.GetVrfcontextAttr[];
    readonly bfdProfiles: outputs.GetVrfcontextBfdProfile[];
    readonly bgpProfiles: outputs.GetVrfcontextBgpProfile[];
    readonly cloudRef: string;
    readonly configpbAttributes: outputs.GetVrfcontextConfigpbAttribute[];
    readonly debugvrfcontexts: outputs.GetVrfcontextDebugvrfcontext[];
    readonly description: string;
    readonly gatewayMons: outputs.GetVrfcontextGatewayMon[];
    readonly id: string;
    readonly internalGatewayMonitors: outputs.GetVrfcontextInternalGatewayMonitor[];
    readonly lldpEnable: string;
    readonly markers: outputs.GetVrfcontextMarker[];
    readonly name: string;
    readonly staticRoutes: outputs.GetVrfcontextStaticRoute[];
    readonly systemDefault: string;
    readonly tenantRef: string;
    readonly uuid: string;
}
export function getVrfcontextOutput(args?: GetVrfcontextOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVrfcontextResult> {
    return pulumi.output(args).apply((a: any) => getVrfcontext(a, opts))
}

/**
 * A collection of arguments for invoking getVrfcontext.
 */
export interface GetVrfcontextOutputArgs {
    cloudRef?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}
