// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Backupconfiguration extends pulumi.CustomResource {
    /**
     * Get an existing Backupconfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackupconfigurationState, opts?: pulumi.CustomResourceOptions): Backupconfiguration {
        return new Backupconfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'avi:index/backupconfiguration:Backupconfiguration';

    /**
     * Returns true if the given object is an instance of Backupconfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Backupconfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Backupconfiguration.__pulumiType;
    }

    public readonly awsAccessKey!: pulumi.Output<string>;
    public readonly awsBucketId!: pulumi.Output<string>;
    public readonly awsBucketRegion!: pulumi.Output<string>;
    public readonly awsSecretAccess!: pulumi.Output<string>;
    public readonly backupFilePrefix!: pulumi.Output<string>;
    public readonly backupPassphrase!: pulumi.Output<string>;
    public readonly configpbAttributes!: pulumi.Output<outputs.BackupconfigurationConfigpbAttribute[] | undefined>;
    public readonly maximumBackupsStored!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly remoteDirectory!: pulumi.Output<string>;
    public readonly remoteFileTransferProtocol!: pulumi.Output<string | undefined>;
    public readonly remoteHostname!: pulumi.Output<string>;
    public readonly s3BucketFolder!: pulumi.Output<string>;
    public readonly saveLocal!: pulumi.Output<string>;
    public readonly sshUserRef!: pulumi.Output<string>;
    public readonly tenantRef!: pulumi.Output<string>;
    public readonly uploadToRemoteHost!: pulumi.Output<string>;
    public readonly uploadToS3!: pulumi.Output<string>;
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Backupconfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: BackupconfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackupconfigurationArgs | BackupconfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackupconfigurationState | undefined;
            resourceInputs["awsAccessKey"] = state ? state.awsAccessKey : undefined;
            resourceInputs["awsBucketId"] = state ? state.awsBucketId : undefined;
            resourceInputs["awsBucketRegion"] = state ? state.awsBucketRegion : undefined;
            resourceInputs["awsSecretAccess"] = state ? state.awsSecretAccess : undefined;
            resourceInputs["backupFilePrefix"] = state ? state.backupFilePrefix : undefined;
            resourceInputs["backupPassphrase"] = state ? state.backupPassphrase : undefined;
            resourceInputs["configpbAttributes"] = state ? state.configpbAttributes : undefined;
            resourceInputs["maximumBackupsStored"] = state ? state.maximumBackupsStored : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["remoteDirectory"] = state ? state.remoteDirectory : undefined;
            resourceInputs["remoteFileTransferProtocol"] = state ? state.remoteFileTransferProtocol : undefined;
            resourceInputs["remoteHostname"] = state ? state.remoteHostname : undefined;
            resourceInputs["s3BucketFolder"] = state ? state.s3BucketFolder : undefined;
            resourceInputs["saveLocal"] = state ? state.saveLocal : undefined;
            resourceInputs["sshUserRef"] = state ? state.sshUserRef : undefined;
            resourceInputs["tenantRef"] = state ? state.tenantRef : undefined;
            resourceInputs["uploadToRemoteHost"] = state ? state.uploadToRemoteHost : undefined;
            resourceInputs["uploadToS3"] = state ? state.uploadToS3 : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as BackupconfigurationArgs | undefined;
            resourceInputs["awsAccessKey"] = args?.awsAccessKey ? pulumi.secret(args.awsAccessKey) : undefined;
            resourceInputs["awsBucketId"] = args ? args.awsBucketId : undefined;
            resourceInputs["awsBucketRegion"] = args ? args.awsBucketRegion : undefined;
            resourceInputs["awsSecretAccess"] = args?.awsSecretAccess ? pulumi.secret(args.awsSecretAccess) : undefined;
            resourceInputs["backupFilePrefix"] = args ? args.backupFilePrefix : undefined;
            resourceInputs["backupPassphrase"] = args?.backupPassphrase ? pulumi.secret(args.backupPassphrase) : undefined;
            resourceInputs["configpbAttributes"] = args ? args.configpbAttributes : undefined;
            resourceInputs["maximumBackupsStored"] = args ? args.maximumBackupsStored : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["remoteDirectory"] = args ? args.remoteDirectory : undefined;
            resourceInputs["remoteFileTransferProtocol"] = args ? args.remoteFileTransferProtocol : undefined;
            resourceInputs["remoteHostname"] = args ? args.remoteHostname : undefined;
            resourceInputs["s3BucketFolder"] = args ? args.s3BucketFolder : undefined;
            resourceInputs["saveLocal"] = args ? args.saveLocal : undefined;
            resourceInputs["sshUserRef"] = args ? args.sshUserRef : undefined;
            resourceInputs["tenantRef"] = args ? args.tenantRef : undefined;
            resourceInputs["uploadToRemoteHost"] = args ? args.uploadToRemoteHost : undefined;
            resourceInputs["uploadToS3"] = args ? args.uploadToS3 : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["awsAccessKey", "awsSecretAccess", "backupPassphrase"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Backupconfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Backupconfiguration resources.
 */
export interface BackupconfigurationState {
    awsAccessKey?: pulumi.Input<string>;
    awsBucketId?: pulumi.Input<string>;
    awsBucketRegion?: pulumi.Input<string>;
    awsSecretAccess?: pulumi.Input<string>;
    backupFilePrefix?: pulumi.Input<string>;
    backupPassphrase?: pulumi.Input<string>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.BackupconfigurationConfigpbAttribute>[]>;
    maximumBackupsStored?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    remoteDirectory?: pulumi.Input<string>;
    remoteFileTransferProtocol?: pulumi.Input<string>;
    remoteHostname?: pulumi.Input<string>;
    s3BucketFolder?: pulumi.Input<string>;
    saveLocal?: pulumi.Input<string>;
    sshUserRef?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    uploadToRemoteHost?: pulumi.Input<string>;
    uploadToS3?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Backupconfiguration resource.
 */
export interface BackupconfigurationArgs {
    awsAccessKey?: pulumi.Input<string>;
    awsBucketId?: pulumi.Input<string>;
    awsBucketRegion?: pulumi.Input<string>;
    awsSecretAccess?: pulumi.Input<string>;
    backupFilePrefix?: pulumi.Input<string>;
    backupPassphrase?: pulumi.Input<string>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.BackupconfigurationConfigpbAttribute>[]>;
    maximumBackupsStored?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    remoteDirectory?: pulumi.Input<string>;
    remoteFileTransferProtocol?: pulumi.Input<string>;
    remoteHostname?: pulumi.Input<string>;
    s3BucketFolder?: pulumi.Input<string>;
    saveLocal?: pulumi.Input<string>;
    sshUserRef?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    uploadToRemoteHost?: pulumi.Input<string>;
    uploadToS3?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}
