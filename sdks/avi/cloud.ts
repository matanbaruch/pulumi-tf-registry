// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Cloud extends pulumi.CustomResource {
    /**
     * Get an existing Cloud resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudState, opts?: pulumi.CustomResourceOptions): Cloud {
        return new Cloud(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'avi:index/cloud:Cloud';

    /**
     * Returns true if the given object is an instance of Cloud.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cloud {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cloud.__pulumiType;
    }

    public readonly autoscalePollingInterval!: pulumi.Output<string | undefined>;
    public readonly awsConfigurations!: pulumi.Output<outputs.CloudAwsConfiguration[] | undefined>;
    public readonly azureConfigurations!: pulumi.Output<outputs.CloudAzureConfiguration[] | undefined>;
    public readonly cloudstackConfigurations!: pulumi.Output<outputs.CloudCloudstackConfiguration[] | undefined>;
    public readonly configpbAttributes!: pulumi.Output<outputs.CloudConfigpbAttribute[] | undefined>;
    public readonly customTags!: pulumi.Output<outputs.CloudCustomTag[] | undefined>;
    public readonly dhcpEnabled!: pulumi.Output<string | undefined>;
    public readonly dnsProviderRef!: pulumi.Output<string>;
    public readonly dnsResolutionOnSe!: pulumi.Output<string | undefined>;
    public readonly dnsResolvers!: pulumi.Output<outputs.CloudDnsResolver[] | undefined>;
    public readonly dockerConfigurations!: pulumi.Output<outputs.CloudDockerConfiguration[] | undefined>;
    public readonly eastWestDnsProviderRef!: pulumi.Output<string>;
    public readonly eastWestIpamProviderRef!: pulumi.Output<string>;
    public readonly enableVipOnAllInterfaces!: pulumi.Output<string | undefined>;
    public readonly enableVipStaticRoutes!: pulumi.Output<string | undefined>;
    public readonly gcpConfigurations!: pulumi.Output<outputs.CloudGcpConfiguration[] | undefined>;
    public readonly ip6AutocfgEnabled!: pulumi.Output<string | undefined>;
    public readonly ipamProviderRef!: pulumi.Output<string>;
    public readonly licenseTier!: pulumi.Output<string>;
    public readonly licenseType!: pulumi.Output<string>;
    public readonly linuxserverConfigurations!: pulumi.Output<outputs.CloudLinuxserverConfiguration[] | undefined>;
    public readonly maintenanceMode!: pulumi.Output<string | undefined>;
    public readonly markers!: pulumi.Output<outputs.CloudMarker[] | undefined>;
    public readonly metricsPollingInterval!: pulumi.Output<string | undefined>;
    public readonly mgmtIpV4Enabled!: pulumi.Output<string | undefined>;
    public readonly mgmtIpV6Enabled!: pulumi.Output<string | undefined>;
    public readonly mtu!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nsxtConfigurations!: pulumi.Output<outputs.CloudNsxtConfiguration[] | undefined>;
    public readonly ntpConfigurations!: pulumi.Output<outputs.CloudNtpConfiguration[] | undefined>;
    public readonly objNamePrefix!: pulumi.Output<string>;
    public readonly openstackConfigurations!: pulumi.Output<outputs.CloudOpenstackConfiguration[] | undefined>;
    public readonly preferStaticRoutes!: pulumi.Output<string | undefined>;
    public readonly proxyConfigurations!: pulumi.Output<outputs.CloudProxyConfiguration[] | undefined>;
    public readonly rancherConfigurations!: pulumi.Output<outputs.CloudRancherConfiguration[] | undefined>;
    public readonly resolveFqdnToIpv6!: pulumi.Output<string | undefined>;
    public readonly seGroupTemplateRef!: pulumi.Output<string>;
    public readonly stateBasedDnsRegistration!: pulumi.Output<string | undefined>;
    public readonly tenantRef!: pulumi.Output<string>;
    public readonly uuid!: pulumi.Output<string>;
    public readonly vcaConfigurations!: pulumi.Output<outputs.CloudVcaConfiguration[] | undefined>;
    public readonly vcenterConfigurations!: pulumi.Output<outputs.CloudVcenterConfiguration[] | undefined>;
    public readonly vmcDeployment!: pulumi.Output<string | undefined>;
    public readonly vtype!: pulumi.Output<string>;

    /**
     * Create a Cloud resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudArgs | CloudState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudState | undefined;
            resourceInputs["autoscalePollingInterval"] = state ? state.autoscalePollingInterval : undefined;
            resourceInputs["awsConfigurations"] = state ? state.awsConfigurations : undefined;
            resourceInputs["azureConfigurations"] = state ? state.azureConfigurations : undefined;
            resourceInputs["cloudstackConfigurations"] = state ? state.cloudstackConfigurations : undefined;
            resourceInputs["configpbAttributes"] = state ? state.configpbAttributes : undefined;
            resourceInputs["customTags"] = state ? state.customTags : undefined;
            resourceInputs["dhcpEnabled"] = state ? state.dhcpEnabled : undefined;
            resourceInputs["dnsProviderRef"] = state ? state.dnsProviderRef : undefined;
            resourceInputs["dnsResolutionOnSe"] = state ? state.dnsResolutionOnSe : undefined;
            resourceInputs["dnsResolvers"] = state ? state.dnsResolvers : undefined;
            resourceInputs["dockerConfigurations"] = state ? state.dockerConfigurations : undefined;
            resourceInputs["eastWestDnsProviderRef"] = state ? state.eastWestDnsProviderRef : undefined;
            resourceInputs["eastWestIpamProviderRef"] = state ? state.eastWestIpamProviderRef : undefined;
            resourceInputs["enableVipOnAllInterfaces"] = state ? state.enableVipOnAllInterfaces : undefined;
            resourceInputs["enableVipStaticRoutes"] = state ? state.enableVipStaticRoutes : undefined;
            resourceInputs["gcpConfigurations"] = state ? state.gcpConfigurations : undefined;
            resourceInputs["ip6AutocfgEnabled"] = state ? state.ip6AutocfgEnabled : undefined;
            resourceInputs["ipamProviderRef"] = state ? state.ipamProviderRef : undefined;
            resourceInputs["licenseTier"] = state ? state.licenseTier : undefined;
            resourceInputs["licenseType"] = state ? state.licenseType : undefined;
            resourceInputs["linuxserverConfigurations"] = state ? state.linuxserverConfigurations : undefined;
            resourceInputs["maintenanceMode"] = state ? state.maintenanceMode : undefined;
            resourceInputs["markers"] = state ? state.markers : undefined;
            resourceInputs["metricsPollingInterval"] = state ? state.metricsPollingInterval : undefined;
            resourceInputs["mgmtIpV4Enabled"] = state ? state.mgmtIpV4Enabled : undefined;
            resourceInputs["mgmtIpV6Enabled"] = state ? state.mgmtIpV6Enabled : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nsxtConfigurations"] = state ? state.nsxtConfigurations : undefined;
            resourceInputs["ntpConfigurations"] = state ? state.ntpConfigurations : undefined;
            resourceInputs["objNamePrefix"] = state ? state.objNamePrefix : undefined;
            resourceInputs["openstackConfigurations"] = state ? state.openstackConfigurations : undefined;
            resourceInputs["preferStaticRoutes"] = state ? state.preferStaticRoutes : undefined;
            resourceInputs["proxyConfigurations"] = state ? state.proxyConfigurations : undefined;
            resourceInputs["rancherConfigurations"] = state ? state.rancherConfigurations : undefined;
            resourceInputs["resolveFqdnToIpv6"] = state ? state.resolveFqdnToIpv6 : undefined;
            resourceInputs["seGroupTemplateRef"] = state ? state.seGroupTemplateRef : undefined;
            resourceInputs["stateBasedDnsRegistration"] = state ? state.stateBasedDnsRegistration : undefined;
            resourceInputs["tenantRef"] = state ? state.tenantRef : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vcaConfigurations"] = state ? state.vcaConfigurations : undefined;
            resourceInputs["vcenterConfigurations"] = state ? state.vcenterConfigurations : undefined;
            resourceInputs["vmcDeployment"] = state ? state.vmcDeployment : undefined;
            resourceInputs["vtype"] = state ? state.vtype : undefined;
        } else {
            const args = argsOrState as CloudArgs | undefined;
            if ((!args || args.vtype === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vtype'");
            }
            resourceInputs["autoscalePollingInterval"] = args ? args.autoscalePollingInterval : undefined;
            resourceInputs["awsConfigurations"] = args ? args.awsConfigurations : undefined;
            resourceInputs["azureConfigurations"] = args ? args.azureConfigurations : undefined;
            resourceInputs["cloudstackConfigurations"] = args ? args.cloudstackConfigurations : undefined;
            resourceInputs["configpbAttributes"] = args ? args.configpbAttributes : undefined;
            resourceInputs["customTags"] = args ? args.customTags : undefined;
            resourceInputs["dhcpEnabled"] = args ? args.dhcpEnabled : undefined;
            resourceInputs["dnsProviderRef"] = args ? args.dnsProviderRef : undefined;
            resourceInputs["dnsResolutionOnSe"] = args ? args.dnsResolutionOnSe : undefined;
            resourceInputs["dnsResolvers"] = args ? args.dnsResolvers : undefined;
            resourceInputs["dockerConfigurations"] = args ? args.dockerConfigurations : undefined;
            resourceInputs["eastWestDnsProviderRef"] = args ? args.eastWestDnsProviderRef : undefined;
            resourceInputs["eastWestIpamProviderRef"] = args ? args.eastWestIpamProviderRef : undefined;
            resourceInputs["enableVipOnAllInterfaces"] = args ? args.enableVipOnAllInterfaces : undefined;
            resourceInputs["enableVipStaticRoutes"] = args ? args.enableVipStaticRoutes : undefined;
            resourceInputs["gcpConfigurations"] = args ? args.gcpConfigurations : undefined;
            resourceInputs["ip6AutocfgEnabled"] = args ? args.ip6AutocfgEnabled : undefined;
            resourceInputs["ipamProviderRef"] = args ? args.ipamProviderRef : undefined;
            resourceInputs["licenseTier"] = args ? args.licenseTier : undefined;
            resourceInputs["licenseType"] = args ? args.licenseType : undefined;
            resourceInputs["linuxserverConfigurations"] = args ? args.linuxserverConfigurations : undefined;
            resourceInputs["maintenanceMode"] = args ? args.maintenanceMode : undefined;
            resourceInputs["markers"] = args ? args.markers : undefined;
            resourceInputs["metricsPollingInterval"] = args ? args.metricsPollingInterval : undefined;
            resourceInputs["mgmtIpV4Enabled"] = args ? args.mgmtIpV4Enabled : undefined;
            resourceInputs["mgmtIpV6Enabled"] = args ? args.mgmtIpV6Enabled : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nsxtConfigurations"] = args ? args.nsxtConfigurations : undefined;
            resourceInputs["ntpConfigurations"] = args ? args.ntpConfigurations : undefined;
            resourceInputs["objNamePrefix"] = args ? args.objNamePrefix : undefined;
            resourceInputs["openstackConfigurations"] = args ? args.openstackConfigurations : undefined;
            resourceInputs["preferStaticRoutes"] = args ? args.preferStaticRoutes : undefined;
            resourceInputs["proxyConfigurations"] = args ? args.proxyConfigurations : undefined;
            resourceInputs["rancherConfigurations"] = args ? args.rancherConfigurations : undefined;
            resourceInputs["resolveFqdnToIpv6"] = args ? args.resolveFqdnToIpv6 : undefined;
            resourceInputs["seGroupTemplateRef"] = args ? args.seGroupTemplateRef : undefined;
            resourceInputs["stateBasedDnsRegistration"] = args ? args.stateBasedDnsRegistration : undefined;
            resourceInputs["tenantRef"] = args ? args.tenantRef : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vcaConfigurations"] = args ? args.vcaConfigurations : undefined;
            resourceInputs["vcenterConfigurations"] = args ? args.vcenterConfigurations : undefined;
            resourceInputs["vmcDeployment"] = args ? args.vmcDeployment : undefined;
            resourceInputs["vtype"] = args ? args.vtype : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cloud.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cloud resources.
 */
export interface CloudState {
    autoscalePollingInterval?: pulumi.Input<string>;
    awsConfigurations?: pulumi.Input<pulumi.Input<inputs.CloudAwsConfiguration>[]>;
    azureConfigurations?: pulumi.Input<pulumi.Input<inputs.CloudAzureConfiguration>[]>;
    cloudstackConfigurations?: pulumi.Input<pulumi.Input<inputs.CloudCloudstackConfiguration>[]>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.CloudConfigpbAttribute>[]>;
    customTags?: pulumi.Input<pulumi.Input<inputs.CloudCustomTag>[]>;
    dhcpEnabled?: pulumi.Input<string>;
    dnsProviderRef?: pulumi.Input<string>;
    dnsResolutionOnSe?: pulumi.Input<string>;
    dnsResolvers?: pulumi.Input<pulumi.Input<inputs.CloudDnsResolver>[]>;
    dockerConfigurations?: pulumi.Input<pulumi.Input<inputs.CloudDockerConfiguration>[]>;
    eastWestDnsProviderRef?: pulumi.Input<string>;
    eastWestIpamProviderRef?: pulumi.Input<string>;
    enableVipOnAllInterfaces?: pulumi.Input<string>;
    enableVipStaticRoutes?: pulumi.Input<string>;
    gcpConfigurations?: pulumi.Input<pulumi.Input<inputs.CloudGcpConfiguration>[]>;
    ip6AutocfgEnabled?: pulumi.Input<string>;
    ipamProviderRef?: pulumi.Input<string>;
    licenseTier?: pulumi.Input<string>;
    licenseType?: pulumi.Input<string>;
    linuxserverConfigurations?: pulumi.Input<pulumi.Input<inputs.CloudLinuxserverConfiguration>[]>;
    maintenanceMode?: pulumi.Input<string>;
    markers?: pulumi.Input<pulumi.Input<inputs.CloudMarker>[]>;
    metricsPollingInterval?: pulumi.Input<string>;
    mgmtIpV4Enabled?: pulumi.Input<string>;
    mgmtIpV6Enabled?: pulumi.Input<string>;
    mtu?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nsxtConfigurations?: pulumi.Input<pulumi.Input<inputs.CloudNsxtConfiguration>[]>;
    ntpConfigurations?: pulumi.Input<pulumi.Input<inputs.CloudNtpConfiguration>[]>;
    objNamePrefix?: pulumi.Input<string>;
    openstackConfigurations?: pulumi.Input<pulumi.Input<inputs.CloudOpenstackConfiguration>[]>;
    preferStaticRoutes?: pulumi.Input<string>;
    proxyConfigurations?: pulumi.Input<pulumi.Input<inputs.CloudProxyConfiguration>[]>;
    rancherConfigurations?: pulumi.Input<pulumi.Input<inputs.CloudRancherConfiguration>[]>;
    resolveFqdnToIpv6?: pulumi.Input<string>;
    seGroupTemplateRef?: pulumi.Input<string>;
    stateBasedDnsRegistration?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    vcaConfigurations?: pulumi.Input<pulumi.Input<inputs.CloudVcaConfiguration>[]>;
    vcenterConfigurations?: pulumi.Input<pulumi.Input<inputs.CloudVcenterConfiguration>[]>;
    vmcDeployment?: pulumi.Input<string>;
    vtype?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cloud resource.
 */
export interface CloudArgs {
    autoscalePollingInterval?: pulumi.Input<string>;
    awsConfigurations?: pulumi.Input<pulumi.Input<inputs.CloudAwsConfiguration>[]>;
    azureConfigurations?: pulumi.Input<pulumi.Input<inputs.CloudAzureConfiguration>[]>;
    cloudstackConfigurations?: pulumi.Input<pulumi.Input<inputs.CloudCloudstackConfiguration>[]>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.CloudConfigpbAttribute>[]>;
    customTags?: pulumi.Input<pulumi.Input<inputs.CloudCustomTag>[]>;
    dhcpEnabled?: pulumi.Input<string>;
    dnsProviderRef?: pulumi.Input<string>;
    dnsResolutionOnSe?: pulumi.Input<string>;
    dnsResolvers?: pulumi.Input<pulumi.Input<inputs.CloudDnsResolver>[]>;
    dockerConfigurations?: pulumi.Input<pulumi.Input<inputs.CloudDockerConfiguration>[]>;
    eastWestDnsProviderRef?: pulumi.Input<string>;
    eastWestIpamProviderRef?: pulumi.Input<string>;
    enableVipOnAllInterfaces?: pulumi.Input<string>;
    enableVipStaticRoutes?: pulumi.Input<string>;
    gcpConfigurations?: pulumi.Input<pulumi.Input<inputs.CloudGcpConfiguration>[]>;
    ip6AutocfgEnabled?: pulumi.Input<string>;
    ipamProviderRef?: pulumi.Input<string>;
    licenseTier?: pulumi.Input<string>;
    licenseType?: pulumi.Input<string>;
    linuxserverConfigurations?: pulumi.Input<pulumi.Input<inputs.CloudLinuxserverConfiguration>[]>;
    maintenanceMode?: pulumi.Input<string>;
    markers?: pulumi.Input<pulumi.Input<inputs.CloudMarker>[]>;
    metricsPollingInterval?: pulumi.Input<string>;
    mgmtIpV4Enabled?: pulumi.Input<string>;
    mgmtIpV6Enabled?: pulumi.Input<string>;
    mtu?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nsxtConfigurations?: pulumi.Input<pulumi.Input<inputs.CloudNsxtConfiguration>[]>;
    ntpConfigurations?: pulumi.Input<pulumi.Input<inputs.CloudNtpConfiguration>[]>;
    objNamePrefix?: pulumi.Input<string>;
    openstackConfigurations?: pulumi.Input<pulumi.Input<inputs.CloudOpenstackConfiguration>[]>;
    preferStaticRoutes?: pulumi.Input<string>;
    proxyConfigurations?: pulumi.Input<pulumi.Input<inputs.CloudProxyConfiguration>[]>;
    rancherConfigurations?: pulumi.Input<pulumi.Input<inputs.CloudRancherConfiguration>[]>;
    resolveFqdnToIpv6?: pulumi.Input<string>;
    seGroupTemplateRef?: pulumi.Input<string>;
    stateBasedDnsRegistration?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    vcaConfigurations?: pulumi.Input<pulumi.Input<inputs.CloudVcaConfiguration>[]>;
    vcenterConfigurations?: pulumi.Input<pulumi.Input<inputs.CloudVcenterConfiguration>[]>;
    vmcDeployment?: pulumi.Input<string>;
    vtype: pulumi.Input<string>;
}
