// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVirtualservice(args?: GetVirtualserviceArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualserviceResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("avi:index/getVirtualservice:getVirtualservice", {
        "cloudRef": args.cloudRef,
        "id": args.id,
        "name": args.name,
        "tenantRef": args.tenantRef,
        "uuid": args.uuid,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVirtualservice.
 */
export interface GetVirtualserviceArgs {
    cloudRef?: string;
    id?: string;
    name?: string;
    tenantRef?: string;
    uuid?: string;
}

/**
 * A collection of values returned by getVirtualservice.
 */
export interface GetVirtualserviceResult {
    readonly activeStandbySeTag: string;
    readonly advertiseDownVs: string;
    readonly allowInvalidClientCert: string;
    readonly analyticsPolicies: outputs.GetVirtualserviceAnalyticsPolicy[];
    readonly analyticsProfileRef: string;
    readonly applicationProfileRef: string;
    readonly azureAvailabilitySet: string;
    readonly bgpLocalPreference: string;
    readonly bgpNumAsPathPrepend: string;
    readonly bgpPeerLabels: string[];
    readonly botPolicyRef: string;
    readonly bulkSyncKvcache: string;
    readonly closeClientConnOnConfigUpdate: string;
    readonly cloudConfigCksum: string;
    readonly cloudRef: string;
    readonly cloudType: string;
    readonly configpbAttributes: outputs.GetVirtualserviceConfigpbAttribute[];
    readonly connectionsRateLimits: outputs.GetVirtualserviceConnectionsRateLimit[];
    readonly contentRewrites: outputs.GetVirtualserviceContentRewrite[];
    readonly createdBy: string;
    readonly csrfPolicyRef: string;
    readonly delayFairness: string;
    readonly description: string;
    readonly dnsInfos: outputs.GetVirtualserviceDnsInfo[];
    readonly dnsPolicies: outputs.GetVirtualserviceDnsPolicy[];
    readonly eastWestPlacement: string;
    readonly enableAutogw: string;
    readonly enableRhi: string;
    readonly enableRhiSnat: string;
    readonly enableSession: string;
    readonly enabled: string;
    readonly errorPageProfileRef: string;
    readonly flowDist: string;
    readonly flowLabelType: string;
    readonly fqdn: string;
    readonly hostNameXlate: string;
    readonly httpPolicies: outputs.GetVirtualserviceHttpPolicy[];
    readonly icapRequestProfileRefs: string[];
    readonly id: string;
    readonly ignPoolNetReach: string;
    readonly jwtConfigs: outputs.GetVirtualserviceJwtConfig[];
    readonly l4Policies: outputs.GetVirtualserviceL4Policy[];
    readonly ldapVsConfigs: outputs.GetVirtualserviceLdapVsConfig[];
    readonly limitDoser: string;
    readonly markers: outputs.GetVirtualserviceMarker[];
    readonly maxCpsPerClient: string;
    readonly microserviceRef: string;
    readonly minPoolsUp: string;
    readonly name: string;
    readonly networkProfileRef: string;
    readonly networkSecurityPolicyRef: string;
    readonly nsxSecuritygroups: string[];
    readonly oauthVsConfigs: outputs.GetVirtualserviceOauthVsConfig[];
    readonly performanceLimits: outputs.GetVirtualservicePerformanceLimit[];
    readonly poolGroupRef: string;
    readonly poolRef: string;
    readonly removeListeningPortOnVsDown: string;
    readonly requestsRateLimits: outputs.GetVirtualserviceRequestsRateLimit[];
    readonly revokeVipRoute: string;
    readonly samlSpConfigs: outputs.GetVirtualserviceSamlSpConfig[];
    readonly scaleoutEcmp: string;
    readonly seGroupRef: string;
    readonly securityPolicyRef: string;
    readonly serverNetworkProfileRef: string;
    readonly serviceMetadata: string;
    readonly servicePoolSelects: outputs.GetVirtualserviceServicePoolSelect[];
    readonly services: outputs.GetVirtualserviceService[];
    readonly sidebandProfiles: outputs.GetVirtualserviceSidebandProfile[];
    readonly snatIp6Addresses: outputs.GetVirtualserviceSnatIp6Address[];
    readonly snatIps: outputs.GetVirtualserviceSnatIp[];
    readonly spPoolRefs: string[];
    readonly sslKeyAndCertificateRefs: string[];
    readonly sslProfileRef: string;
    readonly sslProfileSelectors: outputs.GetVirtualserviceSslProfileSelector[];
    readonly sslSessCacheAvgSize: string;
    readonly ssoPolicyRef: string;
    readonly staticDnsRecords: outputs.GetVirtualserviceStaticDnsRecord[];
    readonly tenantRef: string;
    readonly testSeDatastoreLevel1Ref: string;
    readonly topologyPolicies: outputs.GetVirtualserviceTopologyPolicy[];
    readonly trafficCloneProfileRef: string;
    readonly trafficEnabled: string;
    readonly type: string;
    readonly useBridgeIpAsVip: string;
    readonly useVipAsSnat: string;
    readonly uuid: string;
    readonly vhDomainNames: string[];
    readonly vhMatches: outputs.GetVirtualserviceVhMatch[];
    readonly vhParentVsRef: string;
    readonly vhType: string;
    readonly vips: outputs.GetVirtualserviceVip[];
    readonly vrfContextRef: string;
    readonly vsDatascripts: outputs.GetVirtualserviceVsDatascript[];
    readonly vsvipCloudConfigCksum: string;
    readonly vsvipRef: string;
    readonly wafPolicyRef: string;
    readonly weight: string;
}
export function getVirtualserviceOutput(args?: GetVirtualserviceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualserviceResult> {
    return pulumi.output(args).apply((a: any) => getVirtualservice(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualservice.
 */
export interface GetVirtualserviceOutputArgs {
    cloudRef?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}
