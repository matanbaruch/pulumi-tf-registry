// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Virtualservice extends pulumi.CustomResource {
    /**
     * Get an existing Virtualservice resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualserviceState, opts?: pulumi.CustomResourceOptions): Virtualservice {
        return new Virtualservice(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'avi:index/virtualservice:Virtualservice';

    /**
     * Returns true if the given object is an instance of Virtualservice.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Virtualservice {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Virtualservice.__pulumiType;
    }

    public readonly activeStandbySeTag!: pulumi.Output<string | undefined>;
    public readonly advertiseDownVs!: pulumi.Output<string | undefined>;
    public readonly allowInvalidClientCert!: pulumi.Output<string | undefined>;
    public readonly analyticsPolicies!: pulumi.Output<outputs.VirtualserviceAnalyticsPolicy[] | undefined>;
    public readonly analyticsProfileRef!: pulumi.Output<string>;
    public readonly applicationProfileRef!: pulumi.Output<string>;
    public readonly azureAvailabilitySet!: pulumi.Output<string>;
    public readonly bgpLocalPreference!: pulumi.Output<string>;
    public readonly bgpNumAsPathPrepend!: pulumi.Output<string>;
    public readonly bgpPeerLabels!: pulumi.Output<string[] | undefined>;
    public readonly botPolicyRef!: pulumi.Output<string>;
    public readonly bulkSyncKvcache!: pulumi.Output<string | undefined>;
    public readonly closeClientConnOnConfigUpdate!: pulumi.Output<string | undefined>;
    public readonly cloudConfigCksum!: pulumi.Output<string>;
    public readonly cloudRef!: pulumi.Output<string>;
    public readonly cloudType!: pulumi.Output<string | undefined>;
    public readonly configpbAttributes!: pulumi.Output<outputs.VirtualserviceConfigpbAttribute[] | undefined>;
    public readonly connectionsRateLimits!: pulumi.Output<outputs.VirtualserviceConnectionsRateLimit[] | undefined>;
    public readonly contentRewrites!: pulumi.Output<outputs.VirtualserviceContentRewrite[] | undefined>;
    public readonly createdBy!: pulumi.Output<string>;
    public readonly csrfPolicyRef!: pulumi.Output<string>;
    public readonly delayFairness!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly dnsInfos!: pulumi.Output<outputs.VirtualserviceDnsInfo[] | undefined>;
    public readonly dnsPolicies!: pulumi.Output<outputs.VirtualserviceDnsPolicy[] | undefined>;
    public readonly eastWestPlacement!: pulumi.Output<string | undefined>;
    public readonly enableAutogw!: pulumi.Output<string | undefined>;
    public readonly enableRhi!: pulumi.Output<string>;
    public readonly enableRhiSnat!: pulumi.Output<string>;
    public readonly enableSession!: pulumi.Output<string | undefined>;
    public readonly enabled!: pulumi.Output<string | undefined>;
    public readonly errorPageProfileRef!: pulumi.Output<string>;
    public readonly flowDist!: pulumi.Output<string | undefined>;
    public readonly flowLabelType!: pulumi.Output<string | undefined>;
    public readonly fqdn!: pulumi.Output<string>;
    public readonly hostNameXlate!: pulumi.Output<string>;
    public readonly httpPolicies!: pulumi.Output<outputs.VirtualserviceHttpPolicy[] | undefined>;
    public readonly icapRequestProfileRefs!: pulumi.Output<string[] | undefined>;
    public readonly ignPoolNetReach!: pulumi.Output<string | undefined>;
    public readonly jwtConfigs!: pulumi.Output<outputs.VirtualserviceJwtConfig[] | undefined>;
    public readonly l4Policies!: pulumi.Output<outputs.VirtualserviceL4Policy[] | undefined>;
    public readonly ldapVsConfigs!: pulumi.Output<outputs.VirtualserviceLdapVsConfig[] | undefined>;
    public readonly limitDoser!: pulumi.Output<string | undefined>;
    public readonly markers!: pulumi.Output<outputs.VirtualserviceMarker[] | undefined>;
    public readonly maxCpsPerClient!: pulumi.Output<string | undefined>;
    public readonly microserviceRef!: pulumi.Output<string>;
    public readonly minPoolsUp!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkProfileRef!: pulumi.Output<string>;
    public readonly networkSecurityPolicyRef!: pulumi.Output<string>;
    public readonly nsxSecuritygroups!: pulumi.Output<string[] | undefined>;
    public readonly oauthVsConfigs!: pulumi.Output<outputs.VirtualserviceOauthVsConfig[] | undefined>;
    public readonly performanceLimits!: pulumi.Output<outputs.VirtualservicePerformanceLimit[] | undefined>;
    public readonly poolGroupRef!: pulumi.Output<string>;
    public readonly poolRef!: pulumi.Output<string>;
    public readonly removeListeningPortOnVsDown!: pulumi.Output<string | undefined>;
    public readonly requestsRateLimits!: pulumi.Output<outputs.VirtualserviceRequestsRateLimit[] | undefined>;
    public readonly revokeVipRoute!: pulumi.Output<string | undefined>;
    public readonly samlSpConfigs!: pulumi.Output<outputs.VirtualserviceSamlSpConfig[] | undefined>;
    public readonly scaleoutEcmp!: pulumi.Output<string | undefined>;
    public readonly seGroupRef!: pulumi.Output<string>;
    public readonly securityPolicyRef!: pulumi.Output<string>;
    public readonly serverNetworkProfileRef!: pulumi.Output<string>;
    public readonly serviceMetadata!: pulumi.Output<string>;
    public readonly servicePoolSelects!: pulumi.Output<outputs.VirtualserviceServicePoolSelect[] | undefined>;
    public readonly services!: pulumi.Output<outputs.VirtualserviceService[] | undefined>;
    public readonly sidebandProfiles!: pulumi.Output<outputs.VirtualserviceSidebandProfile[] | undefined>;
    public readonly snatIp6Addresses!: pulumi.Output<outputs.VirtualserviceSnatIp6Address[] | undefined>;
    public readonly snatIps!: pulumi.Output<outputs.VirtualserviceSnatIp[] | undefined>;
    public readonly spPoolRefs!: pulumi.Output<string[] | undefined>;
    public readonly sslKeyAndCertificateRefs!: pulumi.Output<string[] | undefined>;
    public readonly sslProfileRef!: pulumi.Output<string>;
    public readonly sslProfileSelectors!: pulumi.Output<outputs.VirtualserviceSslProfileSelector[] | undefined>;
    public readonly sslSessCacheAvgSize!: pulumi.Output<string | undefined>;
    public readonly ssoPolicyRef!: pulumi.Output<string>;
    public readonly staticDnsRecords!: pulumi.Output<outputs.VirtualserviceStaticDnsRecord[] | undefined>;
    public readonly tenantRef!: pulumi.Output<string>;
    public readonly testSeDatastoreLevel1Ref!: pulumi.Output<string>;
    public readonly topologyPolicies!: pulumi.Output<outputs.VirtualserviceTopologyPolicy[] | undefined>;
    public readonly trafficCloneProfileRef!: pulumi.Output<string>;
    public readonly trafficEnabled!: pulumi.Output<string | undefined>;
    public readonly type!: pulumi.Output<string | undefined>;
    public readonly useBridgeIpAsVip!: pulumi.Output<string | undefined>;
    public readonly useVipAsSnat!: pulumi.Output<string | undefined>;
    public readonly uuid!: pulumi.Output<string>;
    public readonly vhDomainNames!: pulumi.Output<string[] | undefined>;
    public readonly vhMatches!: pulumi.Output<outputs.VirtualserviceVhMatch[] | undefined>;
    public readonly vhParentVsRef!: pulumi.Output<string>;
    public readonly vhType!: pulumi.Output<string | undefined>;
    public readonly vips!: pulumi.Output<outputs.VirtualserviceVip[] | undefined>;
    public readonly vrfContextRef!: pulumi.Output<string>;
    public readonly vsDatascripts!: pulumi.Output<outputs.VirtualserviceVsDatascript[] | undefined>;
    public readonly vsvipCloudConfigCksum!: pulumi.Output<string>;
    public readonly vsvipRef!: pulumi.Output<string>;
    public readonly wafPolicyRef!: pulumi.Output<string>;
    public readonly weight!: pulumi.Output<string | undefined>;

    /**
     * Create a Virtualservice resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VirtualserviceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualserviceArgs | VirtualserviceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualserviceState | undefined;
            resourceInputs["activeStandbySeTag"] = state ? state.activeStandbySeTag : undefined;
            resourceInputs["advertiseDownVs"] = state ? state.advertiseDownVs : undefined;
            resourceInputs["allowInvalidClientCert"] = state ? state.allowInvalidClientCert : undefined;
            resourceInputs["analyticsPolicies"] = state ? state.analyticsPolicies : undefined;
            resourceInputs["analyticsProfileRef"] = state ? state.analyticsProfileRef : undefined;
            resourceInputs["applicationProfileRef"] = state ? state.applicationProfileRef : undefined;
            resourceInputs["azureAvailabilitySet"] = state ? state.azureAvailabilitySet : undefined;
            resourceInputs["bgpLocalPreference"] = state ? state.bgpLocalPreference : undefined;
            resourceInputs["bgpNumAsPathPrepend"] = state ? state.bgpNumAsPathPrepend : undefined;
            resourceInputs["bgpPeerLabels"] = state ? state.bgpPeerLabels : undefined;
            resourceInputs["botPolicyRef"] = state ? state.botPolicyRef : undefined;
            resourceInputs["bulkSyncKvcache"] = state ? state.bulkSyncKvcache : undefined;
            resourceInputs["closeClientConnOnConfigUpdate"] = state ? state.closeClientConnOnConfigUpdate : undefined;
            resourceInputs["cloudConfigCksum"] = state ? state.cloudConfigCksum : undefined;
            resourceInputs["cloudRef"] = state ? state.cloudRef : undefined;
            resourceInputs["cloudType"] = state ? state.cloudType : undefined;
            resourceInputs["configpbAttributes"] = state ? state.configpbAttributes : undefined;
            resourceInputs["connectionsRateLimits"] = state ? state.connectionsRateLimits : undefined;
            resourceInputs["contentRewrites"] = state ? state.contentRewrites : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["csrfPolicyRef"] = state ? state.csrfPolicyRef : undefined;
            resourceInputs["delayFairness"] = state ? state.delayFairness : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dnsInfos"] = state ? state.dnsInfos : undefined;
            resourceInputs["dnsPolicies"] = state ? state.dnsPolicies : undefined;
            resourceInputs["eastWestPlacement"] = state ? state.eastWestPlacement : undefined;
            resourceInputs["enableAutogw"] = state ? state.enableAutogw : undefined;
            resourceInputs["enableRhi"] = state ? state.enableRhi : undefined;
            resourceInputs["enableRhiSnat"] = state ? state.enableRhiSnat : undefined;
            resourceInputs["enableSession"] = state ? state.enableSession : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["errorPageProfileRef"] = state ? state.errorPageProfileRef : undefined;
            resourceInputs["flowDist"] = state ? state.flowDist : undefined;
            resourceInputs["flowLabelType"] = state ? state.flowLabelType : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["hostNameXlate"] = state ? state.hostNameXlate : undefined;
            resourceInputs["httpPolicies"] = state ? state.httpPolicies : undefined;
            resourceInputs["icapRequestProfileRefs"] = state ? state.icapRequestProfileRefs : undefined;
            resourceInputs["ignPoolNetReach"] = state ? state.ignPoolNetReach : undefined;
            resourceInputs["jwtConfigs"] = state ? state.jwtConfigs : undefined;
            resourceInputs["l4Policies"] = state ? state.l4Policies : undefined;
            resourceInputs["ldapVsConfigs"] = state ? state.ldapVsConfigs : undefined;
            resourceInputs["limitDoser"] = state ? state.limitDoser : undefined;
            resourceInputs["markers"] = state ? state.markers : undefined;
            resourceInputs["maxCpsPerClient"] = state ? state.maxCpsPerClient : undefined;
            resourceInputs["microserviceRef"] = state ? state.microserviceRef : undefined;
            resourceInputs["minPoolsUp"] = state ? state.minPoolsUp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkProfileRef"] = state ? state.networkProfileRef : undefined;
            resourceInputs["networkSecurityPolicyRef"] = state ? state.networkSecurityPolicyRef : undefined;
            resourceInputs["nsxSecuritygroups"] = state ? state.nsxSecuritygroups : undefined;
            resourceInputs["oauthVsConfigs"] = state ? state.oauthVsConfigs : undefined;
            resourceInputs["performanceLimits"] = state ? state.performanceLimits : undefined;
            resourceInputs["poolGroupRef"] = state ? state.poolGroupRef : undefined;
            resourceInputs["poolRef"] = state ? state.poolRef : undefined;
            resourceInputs["removeListeningPortOnVsDown"] = state ? state.removeListeningPortOnVsDown : undefined;
            resourceInputs["requestsRateLimits"] = state ? state.requestsRateLimits : undefined;
            resourceInputs["revokeVipRoute"] = state ? state.revokeVipRoute : undefined;
            resourceInputs["samlSpConfigs"] = state ? state.samlSpConfigs : undefined;
            resourceInputs["scaleoutEcmp"] = state ? state.scaleoutEcmp : undefined;
            resourceInputs["seGroupRef"] = state ? state.seGroupRef : undefined;
            resourceInputs["securityPolicyRef"] = state ? state.securityPolicyRef : undefined;
            resourceInputs["serverNetworkProfileRef"] = state ? state.serverNetworkProfileRef : undefined;
            resourceInputs["serviceMetadata"] = state ? state.serviceMetadata : undefined;
            resourceInputs["servicePoolSelects"] = state ? state.servicePoolSelects : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["sidebandProfiles"] = state ? state.sidebandProfiles : undefined;
            resourceInputs["snatIp6Addresses"] = state ? state.snatIp6Addresses : undefined;
            resourceInputs["snatIps"] = state ? state.snatIps : undefined;
            resourceInputs["spPoolRefs"] = state ? state.spPoolRefs : undefined;
            resourceInputs["sslKeyAndCertificateRefs"] = state ? state.sslKeyAndCertificateRefs : undefined;
            resourceInputs["sslProfileRef"] = state ? state.sslProfileRef : undefined;
            resourceInputs["sslProfileSelectors"] = state ? state.sslProfileSelectors : undefined;
            resourceInputs["sslSessCacheAvgSize"] = state ? state.sslSessCacheAvgSize : undefined;
            resourceInputs["ssoPolicyRef"] = state ? state.ssoPolicyRef : undefined;
            resourceInputs["staticDnsRecords"] = state ? state.staticDnsRecords : undefined;
            resourceInputs["tenantRef"] = state ? state.tenantRef : undefined;
            resourceInputs["testSeDatastoreLevel1Ref"] = state ? state.testSeDatastoreLevel1Ref : undefined;
            resourceInputs["topologyPolicies"] = state ? state.topologyPolicies : undefined;
            resourceInputs["trafficCloneProfileRef"] = state ? state.trafficCloneProfileRef : undefined;
            resourceInputs["trafficEnabled"] = state ? state.trafficEnabled : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["useBridgeIpAsVip"] = state ? state.useBridgeIpAsVip : undefined;
            resourceInputs["useVipAsSnat"] = state ? state.useVipAsSnat : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vhDomainNames"] = state ? state.vhDomainNames : undefined;
            resourceInputs["vhMatches"] = state ? state.vhMatches : undefined;
            resourceInputs["vhParentVsRef"] = state ? state.vhParentVsRef : undefined;
            resourceInputs["vhType"] = state ? state.vhType : undefined;
            resourceInputs["vips"] = state ? state.vips : undefined;
            resourceInputs["vrfContextRef"] = state ? state.vrfContextRef : undefined;
            resourceInputs["vsDatascripts"] = state ? state.vsDatascripts : undefined;
            resourceInputs["vsvipCloudConfigCksum"] = state ? state.vsvipCloudConfigCksum : undefined;
            resourceInputs["vsvipRef"] = state ? state.vsvipRef : undefined;
            resourceInputs["wafPolicyRef"] = state ? state.wafPolicyRef : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as VirtualserviceArgs | undefined;
            resourceInputs["activeStandbySeTag"] = args ? args.activeStandbySeTag : undefined;
            resourceInputs["advertiseDownVs"] = args ? args.advertiseDownVs : undefined;
            resourceInputs["allowInvalidClientCert"] = args ? args.allowInvalidClientCert : undefined;
            resourceInputs["analyticsPolicies"] = args ? args.analyticsPolicies : undefined;
            resourceInputs["analyticsProfileRef"] = args ? args.analyticsProfileRef : undefined;
            resourceInputs["applicationProfileRef"] = args ? args.applicationProfileRef : undefined;
            resourceInputs["azureAvailabilitySet"] = args ? args.azureAvailabilitySet : undefined;
            resourceInputs["bgpLocalPreference"] = args ? args.bgpLocalPreference : undefined;
            resourceInputs["bgpNumAsPathPrepend"] = args ? args.bgpNumAsPathPrepend : undefined;
            resourceInputs["bgpPeerLabels"] = args ? args.bgpPeerLabels : undefined;
            resourceInputs["botPolicyRef"] = args ? args.botPolicyRef : undefined;
            resourceInputs["bulkSyncKvcache"] = args ? args.bulkSyncKvcache : undefined;
            resourceInputs["closeClientConnOnConfigUpdate"] = args ? args.closeClientConnOnConfigUpdate : undefined;
            resourceInputs["cloudConfigCksum"] = args ? args.cloudConfigCksum : undefined;
            resourceInputs["cloudRef"] = args ? args.cloudRef : undefined;
            resourceInputs["cloudType"] = args ? args.cloudType : undefined;
            resourceInputs["configpbAttributes"] = args ? args.configpbAttributes : undefined;
            resourceInputs["connectionsRateLimits"] = args ? args.connectionsRateLimits : undefined;
            resourceInputs["contentRewrites"] = args ? args.contentRewrites : undefined;
            resourceInputs["createdBy"] = args ? args.createdBy : undefined;
            resourceInputs["csrfPolicyRef"] = args ? args.csrfPolicyRef : undefined;
            resourceInputs["delayFairness"] = args ? args.delayFairness : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dnsInfos"] = args ? args.dnsInfos : undefined;
            resourceInputs["dnsPolicies"] = args ? args.dnsPolicies : undefined;
            resourceInputs["eastWestPlacement"] = args ? args.eastWestPlacement : undefined;
            resourceInputs["enableAutogw"] = args ? args.enableAutogw : undefined;
            resourceInputs["enableRhi"] = args ? args.enableRhi : undefined;
            resourceInputs["enableRhiSnat"] = args ? args.enableRhiSnat : undefined;
            resourceInputs["enableSession"] = args ? args.enableSession : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["errorPageProfileRef"] = args ? args.errorPageProfileRef : undefined;
            resourceInputs["flowDist"] = args ? args.flowDist : undefined;
            resourceInputs["flowLabelType"] = args ? args.flowLabelType : undefined;
            resourceInputs["fqdn"] = args ? args.fqdn : undefined;
            resourceInputs["hostNameXlate"] = args ? args.hostNameXlate : undefined;
            resourceInputs["httpPolicies"] = args ? args.httpPolicies : undefined;
            resourceInputs["icapRequestProfileRefs"] = args ? args.icapRequestProfileRefs : undefined;
            resourceInputs["ignPoolNetReach"] = args ? args.ignPoolNetReach : undefined;
            resourceInputs["jwtConfigs"] = args ? args.jwtConfigs : undefined;
            resourceInputs["l4Policies"] = args ? args.l4Policies : undefined;
            resourceInputs["ldapVsConfigs"] = args ? args.ldapVsConfigs : undefined;
            resourceInputs["limitDoser"] = args ? args.limitDoser : undefined;
            resourceInputs["markers"] = args ? args.markers : undefined;
            resourceInputs["maxCpsPerClient"] = args ? args.maxCpsPerClient : undefined;
            resourceInputs["microserviceRef"] = args ? args.microserviceRef : undefined;
            resourceInputs["minPoolsUp"] = args ? args.minPoolsUp : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkProfileRef"] = args ? args.networkProfileRef : undefined;
            resourceInputs["networkSecurityPolicyRef"] = args ? args.networkSecurityPolicyRef : undefined;
            resourceInputs["nsxSecuritygroups"] = args ? args.nsxSecuritygroups : undefined;
            resourceInputs["oauthVsConfigs"] = args ? args.oauthVsConfigs : undefined;
            resourceInputs["performanceLimits"] = args ? args.performanceLimits : undefined;
            resourceInputs["poolGroupRef"] = args ? args.poolGroupRef : undefined;
            resourceInputs["poolRef"] = args ? args.poolRef : undefined;
            resourceInputs["removeListeningPortOnVsDown"] = args ? args.removeListeningPortOnVsDown : undefined;
            resourceInputs["requestsRateLimits"] = args ? args.requestsRateLimits : undefined;
            resourceInputs["revokeVipRoute"] = args ? args.revokeVipRoute : undefined;
            resourceInputs["samlSpConfigs"] = args ? args.samlSpConfigs : undefined;
            resourceInputs["scaleoutEcmp"] = args ? args.scaleoutEcmp : undefined;
            resourceInputs["seGroupRef"] = args ? args.seGroupRef : undefined;
            resourceInputs["securityPolicyRef"] = args ? args.securityPolicyRef : undefined;
            resourceInputs["serverNetworkProfileRef"] = args ? args.serverNetworkProfileRef : undefined;
            resourceInputs["serviceMetadata"] = args ? args.serviceMetadata : undefined;
            resourceInputs["servicePoolSelects"] = args ? args.servicePoolSelects : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["sidebandProfiles"] = args ? args.sidebandProfiles : undefined;
            resourceInputs["snatIp6Addresses"] = args ? args.snatIp6Addresses : undefined;
            resourceInputs["snatIps"] = args ? args.snatIps : undefined;
            resourceInputs["spPoolRefs"] = args ? args.spPoolRefs : undefined;
            resourceInputs["sslKeyAndCertificateRefs"] = args ? args.sslKeyAndCertificateRefs : undefined;
            resourceInputs["sslProfileRef"] = args ? args.sslProfileRef : undefined;
            resourceInputs["sslProfileSelectors"] = args ? args.sslProfileSelectors : undefined;
            resourceInputs["sslSessCacheAvgSize"] = args ? args.sslSessCacheAvgSize : undefined;
            resourceInputs["ssoPolicyRef"] = args ? args.ssoPolicyRef : undefined;
            resourceInputs["staticDnsRecords"] = args ? args.staticDnsRecords : undefined;
            resourceInputs["tenantRef"] = args ? args.tenantRef : undefined;
            resourceInputs["testSeDatastoreLevel1Ref"] = args ? args.testSeDatastoreLevel1Ref : undefined;
            resourceInputs["topologyPolicies"] = args ? args.topologyPolicies : undefined;
            resourceInputs["trafficCloneProfileRef"] = args ? args.trafficCloneProfileRef : undefined;
            resourceInputs["trafficEnabled"] = args ? args.trafficEnabled : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["useBridgeIpAsVip"] = args ? args.useBridgeIpAsVip : undefined;
            resourceInputs["useVipAsSnat"] = args ? args.useVipAsSnat : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vhDomainNames"] = args ? args.vhDomainNames : undefined;
            resourceInputs["vhMatches"] = args ? args.vhMatches : undefined;
            resourceInputs["vhParentVsRef"] = args ? args.vhParentVsRef : undefined;
            resourceInputs["vhType"] = args ? args.vhType : undefined;
            resourceInputs["vips"] = args ? args.vips : undefined;
            resourceInputs["vrfContextRef"] = args ? args.vrfContextRef : undefined;
            resourceInputs["vsDatascripts"] = args ? args.vsDatascripts : undefined;
            resourceInputs["vsvipCloudConfigCksum"] = args ? args.vsvipCloudConfigCksum : undefined;
            resourceInputs["vsvipRef"] = args ? args.vsvipRef : undefined;
            resourceInputs["wafPolicyRef"] = args ? args.wafPolicyRef : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Virtualservice.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Virtualservice resources.
 */
export interface VirtualserviceState {
    activeStandbySeTag?: pulumi.Input<string>;
    advertiseDownVs?: pulumi.Input<string>;
    allowInvalidClientCert?: pulumi.Input<string>;
    analyticsPolicies?: pulumi.Input<pulumi.Input<inputs.VirtualserviceAnalyticsPolicy>[]>;
    analyticsProfileRef?: pulumi.Input<string>;
    applicationProfileRef?: pulumi.Input<string>;
    azureAvailabilitySet?: pulumi.Input<string>;
    bgpLocalPreference?: pulumi.Input<string>;
    bgpNumAsPathPrepend?: pulumi.Input<string>;
    bgpPeerLabels?: pulumi.Input<pulumi.Input<string>[]>;
    botPolicyRef?: pulumi.Input<string>;
    bulkSyncKvcache?: pulumi.Input<string>;
    closeClientConnOnConfigUpdate?: pulumi.Input<string>;
    cloudConfigCksum?: pulumi.Input<string>;
    cloudRef?: pulumi.Input<string>;
    cloudType?: pulumi.Input<string>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.VirtualserviceConfigpbAttribute>[]>;
    connectionsRateLimits?: pulumi.Input<pulumi.Input<inputs.VirtualserviceConnectionsRateLimit>[]>;
    contentRewrites?: pulumi.Input<pulumi.Input<inputs.VirtualserviceContentRewrite>[]>;
    createdBy?: pulumi.Input<string>;
    csrfPolicyRef?: pulumi.Input<string>;
    delayFairness?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dnsInfos?: pulumi.Input<pulumi.Input<inputs.VirtualserviceDnsInfo>[]>;
    dnsPolicies?: pulumi.Input<pulumi.Input<inputs.VirtualserviceDnsPolicy>[]>;
    eastWestPlacement?: pulumi.Input<string>;
    enableAutogw?: pulumi.Input<string>;
    enableRhi?: pulumi.Input<string>;
    enableRhiSnat?: pulumi.Input<string>;
    enableSession?: pulumi.Input<string>;
    enabled?: pulumi.Input<string>;
    errorPageProfileRef?: pulumi.Input<string>;
    flowDist?: pulumi.Input<string>;
    flowLabelType?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    hostNameXlate?: pulumi.Input<string>;
    httpPolicies?: pulumi.Input<pulumi.Input<inputs.VirtualserviceHttpPolicy>[]>;
    icapRequestProfileRefs?: pulumi.Input<pulumi.Input<string>[]>;
    ignPoolNetReach?: pulumi.Input<string>;
    jwtConfigs?: pulumi.Input<pulumi.Input<inputs.VirtualserviceJwtConfig>[]>;
    l4Policies?: pulumi.Input<pulumi.Input<inputs.VirtualserviceL4Policy>[]>;
    ldapVsConfigs?: pulumi.Input<pulumi.Input<inputs.VirtualserviceLdapVsConfig>[]>;
    limitDoser?: pulumi.Input<string>;
    markers?: pulumi.Input<pulumi.Input<inputs.VirtualserviceMarker>[]>;
    maxCpsPerClient?: pulumi.Input<string>;
    microserviceRef?: pulumi.Input<string>;
    minPoolsUp?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkProfileRef?: pulumi.Input<string>;
    networkSecurityPolicyRef?: pulumi.Input<string>;
    nsxSecuritygroups?: pulumi.Input<pulumi.Input<string>[]>;
    oauthVsConfigs?: pulumi.Input<pulumi.Input<inputs.VirtualserviceOauthVsConfig>[]>;
    performanceLimits?: pulumi.Input<pulumi.Input<inputs.VirtualservicePerformanceLimit>[]>;
    poolGroupRef?: pulumi.Input<string>;
    poolRef?: pulumi.Input<string>;
    removeListeningPortOnVsDown?: pulumi.Input<string>;
    requestsRateLimits?: pulumi.Input<pulumi.Input<inputs.VirtualserviceRequestsRateLimit>[]>;
    revokeVipRoute?: pulumi.Input<string>;
    samlSpConfigs?: pulumi.Input<pulumi.Input<inputs.VirtualserviceSamlSpConfig>[]>;
    scaleoutEcmp?: pulumi.Input<string>;
    seGroupRef?: pulumi.Input<string>;
    securityPolicyRef?: pulumi.Input<string>;
    serverNetworkProfileRef?: pulumi.Input<string>;
    serviceMetadata?: pulumi.Input<string>;
    servicePoolSelects?: pulumi.Input<pulumi.Input<inputs.VirtualserviceServicePoolSelect>[]>;
    services?: pulumi.Input<pulumi.Input<inputs.VirtualserviceService>[]>;
    sidebandProfiles?: pulumi.Input<pulumi.Input<inputs.VirtualserviceSidebandProfile>[]>;
    snatIp6Addresses?: pulumi.Input<pulumi.Input<inputs.VirtualserviceSnatIp6Address>[]>;
    snatIps?: pulumi.Input<pulumi.Input<inputs.VirtualserviceSnatIp>[]>;
    spPoolRefs?: pulumi.Input<pulumi.Input<string>[]>;
    sslKeyAndCertificateRefs?: pulumi.Input<pulumi.Input<string>[]>;
    sslProfileRef?: pulumi.Input<string>;
    sslProfileSelectors?: pulumi.Input<pulumi.Input<inputs.VirtualserviceSslProfileSelector>[]>;
    sslSessCacheAvgSize?: pulumi.Input<string>;
    ssoPolicyRef?: pulumi.Input<string>;
    staticDnsRecords?: pulumi.Input<pulumi.Input<inputs.VirtualserviceStaticDnsRecord>[]>;
    tenantRef?: pulumi.Input<string>;
    testSeDatastoreLevel1Ref?: pulumi.Input<string>;
    topologyPolicies?: pulumi.Input<pulumi.Input<inputs.VirtualserviceTopologyPolicy>[]>;
    trafficCloneProfileRef?: pulumi.Input<string>;
    trafficEnabled?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    useBridgeIpAsVip?: pulumi.Input<string>;
    useVipAsSnat?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    vhDomainNames?: pulumi.Input<pulumi.Input<string>[]>;
    vhMatches?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatch>[]>;
    vhParentVsRef?: pulumi.Input<string>;
    vhType?: pulumi.Input<string>;
    vips?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVip>[]>;
    vrfContextRef?: pulumi.Input<string>;
    vsDatascripts?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVsDatascript>[]>;
    vsvipCloudConfigCksum?: pulumi.Input<string>;
    vsvipRef?: pulumi.Input<string>;
    wafPolicyRef?: pulumi.Input<string>;
    weight?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Virtualservice resource.
 */
export interface VirtualserviceArgs {
    activeStandbySeTag?: pulumi.Input<string>;
    advertiseDownVs?: pulumi.Input<string>;
    allowInvalidClientCert?: pulumi.Input<string>;
    analyticsPolicies?: pulumi.Input<pulumi.Input<inputs.VirtualserviceAnalyticsPolicy>[]>;
    analyticsProfileRef?: pulumi.Input<string>;
    applicationProfileRef?: pulumi.Input<string>;
    azureAvailabilitySet?: pulumi.Input<string>;
    bgpLocalPreference?: pulumi.Input<string>;
    bgpNumAsPathPrepend?: pulumi.Input<string>;
    bgpPeerLabels?: pulumi.Input<pulumi.Input<string>[]>;
    botPolicyRef?: pulumi.Input<string>;
    bulkSyncKvcache?: pulumi.Input<string>;
    closeClientConnOnConfigUpdate?: pulumi.Input<string>;
    cloudConfigCksum?: pulumi.Input<string>;
    cloudRef?: pulumi.Input<string>;
    cloudType?: pulumi.Input<string>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.VirtualserviceConfigpbAttribute>[]>;
    connectionsRateLimits?: pulumi.Input<pulumi.Input<inputs.VirtualserviceConnectionsRateLimit>[]>;
    contentRewrites?: pulumi.Input<pulumi.Input<inputs.VirtualserviceContentRewrite>[]>;
    createdBy?: pulumi.Input<string>;
    csrfPolicyRef?: pulumi.Input<string>;
    delayFairness?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dnsInfos?: pulumi.Input<pulumi.Input<inputs.VirtualserviceDnsInfo>[]>;
    dnsPolicies?: pulumi.Input<pulumi.Input<inputs.VirtualserviceDnsPolicy>[]>;
    eastWestPlacement?: pulumi.Input<string>;
    enableAutogw?: pulumi.Input<string>;
    enableRhi?: pulumi.Input<string>;
    enableRhiSnat?: pulumi.Input<string>;
    enableSession?: pulumi.Input<string>;
    enabled?: pulumi.Input<string>;
    errorPageProfileRef?: pulumi.Input<string>;
    flowDist?: pulumi.Input<string>;
    flowLabelType?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    hostNameXlate?: pulumi.Input<string>;
    httpPolicies?: pulumi.Input<pulumi.Input<inputs.VirtualserviceHttpPolicy>[]>;
    icapRequestProfileRefs?: pulumi.Input<pulumi.Input<string>[]>;
    ignPoolNetReach?: pulumi.Input<string>;
    jwtConfigs?: pulumi.Input<pulumi.Input<inputs.VirtualserviceJwtConfig>[]>;
    l4Policies?: pulumi.Input<pulumi.Input<inputs.VirtualserviceL4Policy>[]>;
    ldapVsConfigs?: pulumi.Input<pulumi.Input<inputs.VirtualserviceLdapVsConfig>[]>;
    limitDoser?: pulumi.Input<string>;
    markers?: pulumi.Input<pulumi.Input<inputs.VirtualserviceMarker>[]>;
    maxCpsPerClient?: pulumi.Input<string>;
    microserviceRef?: pulumi.Input<string>;
    minPoolsUp?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkProfileRef?: pulumi.Input<string>;
    networkSecurityPolicyRef?: pulumi.Input<string>;
    nsxSecuritygroups?: pulumi.Input<pulumi.Input<string>[]>;
    oauthVsConfigs?: pulumi.Input<pulumi.Input<inputs.VirtualserviceOauthVsConfig>[]>;
    performanceLimits?: pulumi.Input<pulumi.Input<inputs.VirtualservicePerformanceLimit>[]>;
    poolGroupRef?: pulumi.Input<string>;
    poolRef?: pulumi.Input<string>;
    removeListeningPortOnVsDown?: pulumi.Input<string>;
    requestsRateLimits?: pulumi.Input<pulumi.Input<inputs.VirtualserviceRequestsRateLimit>[]>;
    revokeVipRoute?: pulumi.Input<string>;
    samlSpConfigs?: pulumi.Input<pulumi.Input<inputs.VirtualserviceSamlSpConfig>[]>;
    scaleoutEcmp?: pulumi.Input<string>;
    seGroupRef?: pulumi.Input<string>;
    securityPolicyRef?: pulumi.Input<string>;
    serverNetworkProfileRef?: pulumi.Input<string>;
    serviceMetadata?: pulumi.Input<string>;
    servicePoolSelects?: pulumi.Input<pulumi.Input<inputs.VirtualserviceServicePoolSelect>[]>;
    services?: pulumi.Input<pulumi.Input<inputs.VirtualserviceService>[]>;
    sidebandProfiles?: pulumi.Input<pulumi.Input<inputs.VirtualserviceSidebandProfile>[]>;
    snatIp6Addresses?: pulumi.Input<pulumi.Input<inputs.VirtualserviceSnatIp6Address>[]>;
    snatIps?: pulumi.Input<pulumi.Input<inputs.VirtualserviceSnatIp>[]>;
    spPoolRefs?: pulumi.Input<pulumi.Input<string>[]>;
    sslKeyAndCertificateRefs?: pulumi.Input<pulumi.Input<string>[]>;
    sslProfileRef?: pulumi.Input<string>;
    sslProfileSelectors?: pulumi.Input<pulumi.Input<inputs.VirtualserviceSslProfileSelector>[]>;
    sslSessCacheAvgSize?: pulumi.Input<string>;
    ssoPolicyRef?: pulumi.Input<string>;
    staticDnsRecords?: pulumi.Input<pulumi.Input<inputs.VirtualserviceStaticDnsRecord>[]>;
    tenantRef?: pulumi.Input<string>;
    testSeDatastoreLevel1Ref?: pulumi.Input<string>;
    topologyPolicies?: pulumi.Input<pulumi.Input<inputs.VirtualserviceTopologyPolicy>[]>;
    trafficCloneProfileRef?: pulumi.Input<string>;
    trafficEnabled?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    useBridgeIpAsVip?: pulumi.Input<string>;
    useVipAsSnat?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    vhDomainNames?: pulumi.Input<pulumi.Input<string>[]>;
    vhMatches?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatch>[]>;
    vhParentVsRef?: pulumi.Input<string>;
    vhType?: pulumi.Input<string>;
    vips?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVip>[]>;
    vrfContextRef?: pulumi.Input<string>;
    vsDatascripts?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVsDatascript>[]>;
    vsvipCloudConfigCksum?: pulumi.Input<string>;
    vsvipRef?: pulumi.Input<string>;
    wafPolicyRef?: pulumi.Input<string>;
    weight?: pulumi.Input<string>;
}
