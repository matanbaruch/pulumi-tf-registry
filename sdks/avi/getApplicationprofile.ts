// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getApplicationprofile(args?: GetApplicationprofileArgs, opts?: pulumi.InvokeOptions): Promise<GetApplicationprofileResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("avi:index/getApplicationprofile:getApplicationprofile", {
        "id": args.id,
        "name": args.name,
        "tenantRef": args.tenantRef,
        "uuid": args.uuid,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getApplicationprofile.
 */
export interface GetApplicationprofileArgs {
    id?: string;
    name?: string;
    tenantRef?: string;
    uuid?: string;
}

/**
 * A collection of values returned by getApplicationprofile.
 */
export interface GetApplicationprofileResult {
    readonly appServiceType: string;
    readonly cloudConfigCksum: string;
    readonly configpbAttributes: outputs.GetApplicationprofileConfigpbAttribute[];
    readonly createdBy: string;
    readonly description: string;
    readonly dnsServiceProfiles: outputs.GetApplicationprofileDnsServiceProfile[];
    readonly dosRlProfiles: outputs.GetApplicationprofileDosRlProfile[];
    readonly httpProfiles: outputs.GetApplicationprofileHttpProfile[];
    readonly id: string;
    readonly l4SslProfiles: outputs.GetApplicationprofileL4SslProfile[];
    readonly markers: outputs.GetApplicationprofileMarker[];
    readonly name: string;
    readonly preserveClientIp: string;
    readonly preserveClientPort: string;
    readonly preserveDestIpPort: string;
    readonly sipServiceProfiles: outputs.GetApplicationprofileSipServiceProfile[];
    readonly tcpAppProfiles: outputs.GetApplicationprofileTcpAppProfile[];
    readonly tenantRef: string;
    readonly type: string;
    readonly uuid: string;
}
export function getApplicationprofileOutput(args?: GetApplicationprofileOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetApplicationprofileResult> {
    return pulumi.output(args).apply((a: any) => getApplicationprofile(a, opts))
}

/**
 * A collection of arguments for invoking getApplicationprofile.
 */
export interface GetApplicationprofileOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}
