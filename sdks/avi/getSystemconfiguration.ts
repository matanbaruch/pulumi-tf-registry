// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSystemconfiguration(args?: GetSystemconfigurationArgs, opts?: pulumi.InvokeOptions): Promise<GetSystemconfigurationResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("avi:index/getSystemconfiguration:getSystemconfiguration", {
        "id": args.id,
        "uuid": args.uuid,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSystemconfiguration.
 */
export interface GetSystemconfigurationArgs {
    id?: string;
    uuid?: string;
}

/**
 * A collection of values returned by getSystemconfiguration.
 */
export interface GetSystemconfigurationResult {
    readonly adminAuthConfigurations: outputs.GetSystemconfigurationAdminAuthConfiguration[];
    readonly commonCriteriaMode: string;
    readonly configpbAttributes: outputs.GetSystemconfigurationConfigpbAttribute[];
    readonly controllerAnalyticsPolicies: outputs.GetSystemconfigurationControllerAnalyticsPolicy[];
    readonly defaultLicenseTier: string;
    readonly dnsConfigurations: outputs.GetSystemconfigurationDnsConfiguration[];
    readonly dnsVirtualserviceRefs: string[];
    readonly dockerMode: string;
    readonly emailConfigurations: outputs.GetSystemconfigurationEmailConfiguration[];
    readonly enableCors: string;
    readonly fipsMode: string;
    readonly globalTenantConfigs: outputs.GetSystemconfigurationGlobalTenantConfig[];
    readonly hostKeyAlgorithmExclude: string;
    readonly id: string;
    readonly kexAlgorithmExclude: string;
    readonly linuxConfigurations: outputs.GetSystemconfigurationLinuxConfiguration[];
    readonly mgmtIpAccessControls: outputs.GetSystemconfigurationMgmtIpAccessControl[];
    readonly ntpConfigurations: outputs.GetSystemconfigurationNtpConfiguration[];
    readonly portalConfigurations: outputs.GetSystemconfigurationPortalConfiguration[];
    readonly proxyConfigurations: outputs.GetSystemconfigurationProxyConfiguration[];
    readonly rekeyTimeLimit: string;
    readonly rekeyVolumeLimit: string;
    readonly secureChannelConfigurations: outputs.GetSystemconfigurationSecureChannelConfiguration[];
    readonly snmpConfigurations: outputs.GetSystemconfigurationSnmpConfiguration[];
    readonly sshCiphers: string[];
    readonly sshHmacs: string[];
    readonly uuid: string;
    readonly welcomeWorkflowComplete: string;
}
export function getSystemconfigurationOutput(args?: GetSystemconfigurationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSystemconfigurationResult> {
    return pulumi.output(args).apply((a: any) => getSystemconfiguration(a, opts))
}

/**
 * A collection of arguments for invoking getSystemconfiguration.
 */
export interface GetSystemconfigurationOutputArgs {
    id?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}
