// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Dynamicdnsrecord extends pulumi.CustomResource {
    /**
     * Get an existing Dynamicdnsrecord resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DynamicdnsrecordState, opts?: pulumi.CustomResourceOptions): Dynamicdnsrecord {
        return new Dynamicdnsrecord(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'avi:index/dynamicdnsrecord:Dynamicdnsrecord';

    /**
     * Returns true if the given object is an instance of Dynamicdnsrecord.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Dynamicdnsrecord {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dynamicdnsrecord.__pulumiType;
    }

    public readonly algorithm!: pulumi.Output<string | undefined>;
    public readonly cnames!: pulumi.Output<outputs.DynamicdnsrecordCname[] | undefined>;
    public readonly delegated!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly dnsVsUuid!: pulumi.Output<string>;
    public readonly fqdn!: pulumi.Output<string>;
    public readonly ip6Addresses!: pulumi.Output<outputs.DynamicdnsrecordIp6Address[] | undefined>;
    public readonly ipAddresses!: pulumi.Output<outputs.DynamicdnsrecordIpAddress[] | undefined>;
    public readonly metadata!: pulumi.Output<string>;
    public readonly mxRecords!: pulumi.Output<outputs.DynamicdnsrecordMxRecord[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly ns!: pulumi.Output<outputs.DynamicdnsrecordN[] | undefined>;
    public readonly numRecordsInResponse!: pulumi.Output<string>;
    public readonly serviceLocators!: pulumi.Output<outputs.DynamicdnsrecordServiceLocator[] | undefined>;
    public readonly tenantRef!: pulumi.Output<string>;
    public readonly ttl!: pulumi.Output<string>;
    public readonly txtRecords!: pulumi.Output<outputs.DynamicdnsrecordTxtRecord[] | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly uuid!: pulumi.Output<string>;
    public readonly wildcardMatch!: pulumi.Output<string | undefined>;

    /**
     * Create a Dynamicdnsrecord resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DynamicdnsrecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DynamicdnsrecordArgs | DynamicdnsrecordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DynamicdnsrecordState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["cnames"] = state ? state.cnames : undefined;
            resourceInputs["delegated"] = state ? state.delegated : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dnsVsUuid"] = state ? state.dnsVsUuid : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["ip6Addresses"] = state ? state.ip6Addresses : undefined;
            resourceInputs["ipAddresses"] = state ? state.ipAddresses : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["mxRecords"] = state ? state.mxRecords : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ns"] = state ? state.ns : undefined;
            resourceInputs["numRecordsInResponse"] = state ? state.numRecordsInResponse : undefined;
            resourceInputs["serviceLocators"] = state ? state.serviceLocators : undefined;
            resourceInputs["tenantRef"] = state ? state.tenantRef : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["txtRecords"] = state ? state.txtRecords : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["wildcardMatch"] = state ? state.wildcardMatch : undefined;
        } else {
            const args = argsOrState as DynamicdnsrecordArgs | undefined;
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["cnames"] = args ? args.cnames : undefined;
            resourceInputs["delegated"] = args ? args.delegated : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dnsVsUuid"] = args ? args.dnsVsUuid : undefined;
            resourceInputs["fqdn"] = args ? args.fqdn : undefined;
            resourceInputs["ip6Addresses"] = args ? args.ip6Addresses : undefined;
            resourceInputs["ipAddresses"] = args ? args.ipAddresses : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["mxRecords"] = args ? args.mxRecords : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ns"] = args ? args.ns : undefined;
            resourceInputs["numRecordsInResponse"] = args ? args.numRecordsInResponse : undefined;
            resourceInputs["serviceLocators"] = args ? args.serviceLocators : undefined;
            resourceInputs["tenantRef"] = args ? args.tenantRef : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["txtRecords"] = args ? args.txtRecords : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["wildcardMatch"] = args ? args.wildcardMatch : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Dynamicdnsrecord.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Dynamicdnsrecord resources.
 */
export interface DynamicdnsrecordState {
    algorithm?: pulumi.Input<string>;
    cnames?: pulumi.Input<pulumi.Input<inputs.DynamicdnsrecordCname>[]>;
    delegated?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dnsVsUuid?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    ip6Addresses?: pulumi.Input<pulumi.Input<inputs.DynamicdnsrecordIp6Address>[]>;
    ipAddresses?: pulumi.Input<pulumi.Input<inputs.DynamicdnsrecordIpAddress>[]>;
    metadata?: pulumi.Input<string>;
    mxRecords?: pulumi.Input<pulumi.Input<inputs.DynamicdnsrecordMxRecord>[]>;
    name?: pulumi.Input<string>;
    ns?: pulumi.Input<pulumi.Input<inputs.DynamicdnsrecordN>[]>;
    numRecordsInResponse?: pulumi.Input<string>;
    serviceLocators?: pulumi.Input<pulumi.Input<inputs.DynamicdnsrecordServiceLocator>[]>;
    tenantRef?: pulumi.Input<string>;
    ttl?: pulumi.Input<string>;
    txtRecords?: pulumi.Input<pulumi.Input<inputs.DynamicdnsrecordTxtRecord>[]>;
    type?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    wildcardMatch?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Dynamicdnsrecord resource.
 */
export interface DynamicdnsrecordArgs {
    algorithm?: pulumi.Input<string>;
    cnames?: pulumi.Input<pulumi.Input<inputs.DynamicdnsrecordCname>[]>;
    delegated?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dnsVsUuid?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    ip6Addresses?: pulumi.Input<pulumi.Input<inputs.DynamicdnsrecordIp6Address>[]>;
    ipAddresses?: pulumi.Input<pulumi.Input<inputs.DynamicdnsrecordIpAddress>[]>;
    metadata?: pulumi.Input<string>;
    mxRecords?: pulumi.Input<pulumi.Input<inputs.DynamicdnsrecordMxRecord>[]>;
    name?: pulumi.Input<string>;
    ns?: pulumi.Input<pulumi.Input<inputs.DynamicdnsrecordN>[]>;
    numRecordsInResponse?: pulumi.Input<string>;
    serviceLocators?: pulumi.Input<pulumi.Input<inputs.DynamicdnsrecordServiceLocator>[]>;
    tenantRef?: pulumi.Input<string>;
    ttl?: pulumi.Input<string>;
    txtRecords?: pulumi.Input<pulumi.Input<inputs.DynamicdnsrecordTxtRecord>[]>;
    type?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    wildcardMatch?: pulumi.Input<string>;
}
