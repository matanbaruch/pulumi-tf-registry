// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Albservicesconfig extends pulumi.CustomResource {
    /**
     * Get an existing Albservicesconfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlbservicesconfigState, opts?: pulumi.CustomResourceOptions): Albservicesconfig {
        return new Albservicesconfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'avi:index/albservicesconfig:Albservicesconfig';

    /**
     * Returns true if the given object is an instance of Albservicesconfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Albservicesconfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Albservicesconfig.__pulumiType;
    }

    public readonly appSignatureConfigs!: pulumi.Output<outputs.AlbservicesconfigAppSignatureConfig[]>;
    public readonly assetContacts!: pulumi.Output<outputs.AlbservicesconfigAssetContact[] | undefined>;
    public readonly caseConfigs!: pulumi.Output<outputs.AlbservicesconfigCaseConfig[]>;
    public readonly configpbAttributes!: pulumi.Output<outputs.AlbservicesconfigConfigpbAttribute[] | undefined>;
    public readonly featureOptInStatuses!: pulumi.Output<outputs.AlbservicesconfigFeatureOptInStatus[]>;
    public readonly inventoryConfigs!: pulumi.Output<outputs.AlbservicesconfigInventoryConfig[]>;
    public readonly ipReputationConfigs!: pulumi.Output<outputs.AlbservicesconfigIpReputationConfig[]>;
    public readonly mode!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly pollingInterval!: pulumi.Output<string | undefined>;
    public readonly portalUrl!: pulumi.Output<string>;
    public readonly saasLicensingConfigs!: pulumi.Output<outputs.AlbservicesconfigSaasLicensingConfig[]>;
    public readonly sessionConfigs!: pulumi.Output<outputs.AlbservicesconfigSessionConfig[] | undefined>;
    public readonly splitProxyConfigurations!: pulumi.Output<outputs.AlbservicesconfigSplitProxyConfiguration[] | undefined>;
    public readonly tenantConfigs!: pulumi.Output<outputs.AlbservicesconfigTenantConfig[] | undefined>;
    public readonly tenantRef!: pulumi.Output<string>;
    public readonly useSplitProxy!: pulumi.Output<string | undefined>;
    public readonly useTls!: pulumi.Output<string | undefined>;
    public readonly userAgentDbConfigs!: pulumi.Output<outputs.AlbservicesconfigUserAgentDbConfig[]>;
    public readonly uuid!: pulumi.Output<string>;
    public readonly wafConfigs!: pulumi.Output<outputs.AlbservicesconfigWafConfig[]>;

    /**
     * Create a Albservicesconfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlbservicesconfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlbservicesconfigArgs | AlbservicesconfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlbservicesconfigState | undefined;
            resourceInputs["appSignatureConfigs"] = state ? state.appSignatureConfigs : undefined;
            resourceInputs["assetContacts"] = state ? state.assetContacts : undefined;
            resourceInputs["caseConfigs"] = state ? state.caseConfigs : undefined;
            resourceInputs["configpbAttributes"] = state ? state.configpbAttributes : undefined;
            resourceInputs["featureOptInStatuses"] = state ? state.featureOptInStatuses : undefined;
            resourceInputs["inventoryConfigs"] = state ? state.inventoryConfigs : undefined;
            resourceInputs["ipReputationConfigs"] = state ? state.ipReputationConfigs : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pollingInterval"] = state ? state.pollingInterval : undefined;
            resourceInputs["portalUrl"] = state ? state.portalUrl : undefined;
            resourceInputs["saasLicensingConfigs"] = state ? state.saasLicensingConfigs : undefined;
            resourceInputs["sessionConfigs"] = state ? state.sessionConfigs : undefined;
            resourceInputs["splitProxyConfigurations"] = state ? state.splitProxyConfigurations : undefined;
            resourceInputs["tenantConfigs"] = state ? state.tenantConfigs : undefined;
            resourceInputs["tenantRef"] = state ? state.tenantRef : undefined;
            resourceInputs["useSplitProxy"] = state ? state.useSplitProxy : undefined;
            resourceInputs["useTls"] = state ? state.useTls : undefined;
            resourceInputs["userAgentDbConfigs"] = state ? state.userAgentDbConfigs : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["wafConfigs"] = state ? state.wafConfigs : undefined;
        } else {
            const args = argsOrState as AlbservicesconfigArgs | undefined;
            if ((!args || args.appSignatureConfigs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appSignatureConfigs'");
            }
            if ((!args || args.caseConfigs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'caseConfigs'");
            }
            if ((!args || args.featureOptInStatuses === undefined) && !opts.urn) {
                throw new Error("Missing required property 'featureOptInStatuses'");
            }
            if ((!args || args.inventoryConfigs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inventoryConfigs'");
            }
            if ((!args || args.ipReputationConfigs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipReputationConfigs'");
            }
            if ((!args || args.portalUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portalUrl'");
            }
            if ((!args || args.saasLicensingConfigs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'saasLicensingConfigs'");
            }
            if ((!args || args.userAgentDbConfigs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userAgentDbConfigs'");
            }
            if ((!args || args.wafConfigs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'wafConfigs'");
            }
            resourceInputs["appSignatureConfigs"] = args ? args.appSignatureConfigs : undefined;
            resourceInputs["assetContacts"] = args ? args.assetContacts : undefined;
            resourceInputs["caseConfigs"] = args ? args.caseConfigs : undefined;
            resourceInputs["configpbAttributes"] = args ? args.configpbAttributes : undefined;
            resourceInputs["featureOptInStatuses"] = args ? args.featureOptInStatuses : undefined;
            resourceInputs["inventoryConfigs"] = args ? args.inventoryConfigs : undefined;
            resourceInputs["ipReputationConfigs"] = args ? args.ipReputationConfigs : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pollingInterval"] = args ? args.pollingInterval : undefined;
            resourceInputs["portalUrl"] = args ? args.portalUrl : undefined;
            resourceInputs["saasLicensingConfigs"] = args ? args.saasLicensingConfigs : undefined;
            resourceInputs["sessionConfigs"] = args ? args.sessionConfigs : undefined;
            resourceInputs["splitProxyConfigurations"] = args ? args.splitProxyConfigurations : undefined;
            resourceInputs["tenantConfigs"] = args ? args.tenantConfigs : undefined;
            resourceInputs["tenantRef"] = args ? args.tenantRef : undefined;
            resourceInputs["useSplitProxy"] = args ? args.useSplitProxy : undefined;
            resourceInputs["useTls"] = args ? args.useTls : undefined;
            resourceInputs["userAgentDbConfigs"] = args ? args.userAgentDbConfigs : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["wafConfigs"] = args ? args.wafConfigs : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Albservicesconfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Albservicesconfig resources.
 */
export interface AlbservicesconfigState {
    appSignatureConfigs?: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigAppSignatureConfig>[]>;
    assetContacts?: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigAssetContact>[]>;
    caseConfigs?: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigCaseConfig>[]>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigConfigpbAttribute>[]>;
    featureOptInStatuses?: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigFeatureOptInStatus>[]>;
    inventoryConfigs?: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigInventoryConfig>[]>;
    ipReputationConfigs?: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigIpReputationConfig>[]>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pollingInterval?: pulumi.Input<string>;
    portalUrl?: pulumi.Input<string>;
    saasLicensingConfigs?: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigSaasLicensingConfig>[]>;
    sessionConfigs?: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigSessionConfig>[]>;
    splitProxyConfigurations?: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigSplitProxyConfiguration>[]>;
    tenantConfigs?: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigTenantConfig>[]>;
    tenantRef?: pulumi.Input<string>;
    useSplitProxy?: pulumi.Input<string>;
    useTls?: pulumi.Input<string>;
    userAgentDbConfigs?: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigUserAgentDbConfig>[]>;
    uuid?: pulumi.Input<string>;
    wafConfigs?: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigWafConfig>[]>;
}

/**
 * The set of arguments for constructing a Albservicesconfig resource.
 */
export interface AlbservicesconfigArgs {
    appSignatureConfigs: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigAppSignatureConfig>[]>;
    assetContacts?: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigAssetContact>[]>;
    caseConfigs: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigCaseConfig>[]>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigConfigpbAttribute>[]>;
    featureOptInStatuses: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigFeatureOptInStatus>[]>;
    inventoryConfigs: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigInventoryConfig>[]>;
    ipReputationConfigs: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigIpReputationConfig>[]>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pollingInterval?: pulumi.Input<string>;
    portalUrl: pulumi.Input<string>;
    saasLicensingConfigs: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigSaasLicensingConfig>[]>;
    sessionConfigs?: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigSessionConfig>[]>;
    splitProxyConfigurations?: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigSplitProxyConfiguration>[]>;
    tenantConfigs?: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigTenantConfig>[]>;
    tenantRef?: pulumi.Input<string>;
    useSplitProxy?: pulumi.Input<string>;
    useTls?: pulumi.Input<string>;
    userAgentDbConfigs: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigUserAgentDbConfig>[]>;
    uuid?: pulumi.Input<string>;
    wafConfigs: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigWafConfig>[]>;
}
