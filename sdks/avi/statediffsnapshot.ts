// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Statediffsnapshot extends pulumi.CustomResource {
    /**
     * Get an existing Statediffsnapshot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StatediffsnapshotState, opts?: pulumi.CustomResourceOptions): Statediffsnapshot {
        return new Statediffsnapshot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'avi:index/statediffsnapshot:Statediffsnapshot';

    /**
     * Returns true if the given object is an instance of Statediffsnapshot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Statediffsnapshot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Statediffsnapshot.__pulumiType;
    }

    public readonly gslbName!: pulumi.Output<string>;
    public readonly gslbUuid!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly poolName!: pulumi.Output<string>;
    public readonly poolUuid!: pulumi.Output<string>;
    public readonly postSnapshots!: pulumi.Output<outputs.StatediffsnapshotPostSnapshot[] | undefined>;
    public readonly preSnapshots!: pulumi.Output<outputs.StatediffsnapshotPreSnapshot[] | undefined>;
    public readonly seGroupName!: pulumi.Output<string>;
    public readonly seGroupUuid!: pulumi.Output<string>;
    public readonly seName!: pulumi.Output<string>;
    public readonly seUuid!: pulumi.Output<string>;
    public readonly snapshotType!: pulumi.Output<string>;
    public readonly statediffOperationRef!: pulumi.Output<string>;
    public readonly tenantRef!: pulumi.Output<string>;
    public readonly uuid!: pulumi.Output<string>;
    public readonly vsName!: pulumi.Output<string>;
    public readonly vsUuid!: pulumi.Output<string>;

    /**
     * Create a Statediffsnapshot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: StatediffsnapshotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StatediffsnapshotArgs | StatediffsnapshotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StatediffsnapshotState | undefined;
            resourceInputs["gslbName"] = state ? state.gslbName : undefined;
            resourceInputs["gslbUuid"] = state ? state.gslbUuid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["poolName"] = state ? state.poolName : undefined;
            resourceInputs["poolUuid"] = state ? state.poolUuid : undefined;
            resourceInputs["postSnapshots"] = state ? state.postSnapshots : undefined;
            resourceInputs["preSnapshots"] = state ? state.preSnapshots : undefined;
            resourceInputs["seGroupName"] = state ? state.seGroupName : undefined;
            resourceInputs["seGroupUuid"] = state ? state.seGroupUuid : undefined;
            resourceInputs["seName"] = state ? state.seName : undefined;
            resourceInputs["seUuid"] = state ? state.seUuid : undefined;
            resourceInputs["snapshotType"] = state ? state.snapshotType : undefined;
            resourceInputs["statediffOperationRef"] = state ? state.statediffOperationRef : undefined;
            resourceInputs["tenantRef"] = state ? state.tenantRef : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vsName"] = state ? state.vsName : undefined;
            resourceInputs["vsUuid"] = state ? state.vsUuid : undefined;
        } else {
            const args = argsOrState as StatediffsnapshotArgs | undefined;
            resourceInputs["gslbName"] = args ? args.gslbName : undefined;
            resourceInputs["gslbUuid"] = args ? args.gslbUuid : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["poolName"] = args ? args.poolName : undefined;
            resourceInputs["poolUuid"] = args ? args.poolUuid : undefined;
            resourceInputs["postSnapshots"] = args ? args.postSnapshots : undefined;
            resourceInputs["preSnapshots"] = args ? args.preSnapshots : undefined;
            resourceInputs["seGroupName"] = args ? args.seGroupName : undefined;
            resourceInputs["seGroupUuid"] = args ? args.seGroupUuid : undefined;
            resourceInputs["seName"] = args ? args.seName : undefined;
            resourceInputs["seUuid"] = args ? args.seUuid : undefined;
            resourceInputs["snapshotType"] = args ? args.snapshotType : undefined;
            resourceInputs["statediffOperationRef"] = args ? args.statediffOperationRef : undefined;
            resourceInputs["tenantRef"] = args ? args.tenantRef : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vsName"] = args ? args.vsName : undefined;
            resourceInputs["vsUuid"] = args ? args.vsUuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Statediffsnapshot.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Statediffsnapshot resources.
 */
export interface StatediffsnapshotState {
    gslbName?: pulumi.Input<string>;
    gslbUuid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    poolName?: pulumi.Input<string>;
    poolUuid?: pulumi.Input<string>;
    postSnapshots?: pulumi.Input<pulumi.Input<inputs.StatediffsnapshotPostSnapshot>[]>;
    preSnapshots?: pulumi.Input<pulumi.Input<inputs.StatediffsnapshotPreSnapshot>[]>;
    seGroupName?: pulumi.Input<string>;
    seGroupUuid?: pulumi.Input<string>;
    seName?: pulumi.Input<string>;
    seUuid?: pulumi.Input<string>;
    snapshotType?: pulumi.Input<string>;
    statediffOperationRef?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    vsName?: pulumi.Input<string>;
    vsUuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Statediffsnapshot resource.
 */
export interface StatediffsnapshotArgs {
    gslbName?: pulumi.Input<string>;
    gslbUuid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    poolName?: pulumi.Input<string>;
    poolUuid?: pulumi.Input<string>;
    postSnapshots?: pulumi.Input<pulumi.Input<inputs.StatediffsnapshotPostSnapshot>[]>;
    preSnapshots?: pulumi.Input<pulumi.Input<inputs.StatediffsnapshotPreSnapshot>[]>;
    seGroupName?: pulumi.Input<string>;
    seGroupUuid?: pulumi.Input<string>;
    seName?: pulumi.Input<string>;
    seUuid?: pulumi.Input<string>;
    snapshotType?: pulumi.Input<string>;
    statediffOperationRef?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    vsName?: pulumi.Input<string>;
    vsUuid?: pulumi.Input<string>;
}
