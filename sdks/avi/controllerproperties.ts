// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Controllerproperties extends pulumi.CustomResource {
    /**
     * Get an existing Controllerproperties resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ControllerpropertiesState, opts?: pulumi.CustomResourceOptions): Controllerproperties {
        return new Controllerproperties(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'avi:index/controllerproperties:Controllerproperties';

    /**
     * Returns true if the given object is an instance of Controllerproperties.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Controllerproperties {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Controllerproperties.__pulumiType;
    }

    public readonly alertManagerUseEvms!: pulumi.Output<string | undefined>;
    public readonly allowAdminNetworkUpdates!: pulumi.Output<string | undefined>;
    public readonly allowIpForwarding!: pulumi.Output<string | undefined>;
    public readonly allowUnauthenticatedApis!: pulumi.Output<string | undefined>;
    public readonly allowUnauthenticatedNodes!: pulumi.Output<string | undefined>;
    public readonly apiIdleTimeout!: pulumi.Output<string | undefined>;
    public readonly apiPerfLoggingThreshold!: pulumi.Output<string | undefined>;
    public readonly appviewxCompatMode!: pulumi.Output<string | undefined>;
    public readonly asyncPatchMergePeriod!: pulumi.Output<string | undefined>;
    public readonly asyncPatchRequestCleanupDuration!: pulumi.Output<string | undefined>;
    public readonly attachIpRetryInterval!: pulumi.Output<string | undefined>;
    public readonly attachIpRetryLimit!: pulumi.Output<string | undefined>;
    public readonly bmUseAnsible!: pulumi.Output<string | undefined>;
    public readonly checkVsvipFqdnSyntax!: pulumi.Output<string | undefined>;
    public readonly cleanupExpiredAuthtokenTimeoutPeriod!: pulumi.Output<string | undefined>;
    public readonly cleanupSessionsTimeoutPeriod!: pulumi.Output<string | undefined>;
    public readonly cloudDiscoveryInterval!: pulumi.Output<string | undefined>;
    public readonly cloudReconcile!: pulumi.Output<string | undefined>;
    public readonly cloudReconcileInterval!: pulumi.Output<string | undefined>;
    public readonly clusterIpGratuitousArpPeriod!: pulumi.Output<string | undefined>;
    public readonly configpbAttributes!: pulumi.Output<outputs.ControllerpropertiesConfigpbAttribute[] | undefined>;
    public readonly consistencyCheckTimeoutPeriod!: pulumi.Output<string | undefined>;
    public readonly controllerResourceInfoCollectionPeriod!: pulumi.Output<string | undefined>;
    public readonly crashedSeReboot!: pulumi.Output<string | undefined>;
    public readonly deadSeDetectionTimer!: pulumi.Output<string | undefined>;
    public readonly defaultMinimumApiTimeout!: pulumi.Output<string | undefined>;
    public readonly delOfflineSeAfterRebootDelay!: pulumi.Output<string | undefined>;
    public readonly detachIpRetryInterval!: pulumi.Output<string | undefined>;
    public readonly detachIpRetryLimit!: pulumi.Output<string | undefined>;
    public readonly detachIpTimeout!: pulumi.Output<string | undefined>;
    public readonly dnsRefreshPeriod!: pulumi.Output<string | undefined>;
    public readonly dummy!: pulumi.Output<string>;
    public readonly editSystemLimits!: pulumi.Output<string | undefined>;
    public readonly enableApiSharding!: pulumi.Output<string | undefined>;
    public readonly enableMemoryBalancer!: pulumi.Output<string | undefined>;
    public readonly enablePerProcessStop!: pulumi.Output<string | undefined>;
    public readonly enableResmgrLogCachePrint!: pulumi.Output<string | undefined>;
    public readonly eventManagerMaxGoroutines!: pulumi.Output<string | undefined>;
    public readonly eventManagerMaxSubscribers!: pulumi.Output<string | undefined>;
    public readonly eventManagerProcessingTimeThreshold!: pulumi.Output<string | undefined>;
    public readonly falsePositiveLearningConfigs!: pulumi.Output<outputs.ControllerpropertiesFalsePositiveLearningConfig[] | undefined>;
    public readonly fatalErrorLeaseTime!: pulumi.Output<string | undefined>;
    public readonly federatedDatastoreCleanupDuration!: pulumi.Output<string | undefined>;
    public readonly fileObjectCleanupPeriod!: pulumi.Output<string | undefined>;
    public readonly fileobjectMaxFileVersions!: pulumi.Output<string | undefined>;
    public readonly gslbPurgeBatchSize!: pulumi.Output<string | undefined>;
    public readonly gslbPurgeSleepTimeMs!: pulumi.Output<string | undefined>;
    public readonly ignoreVrfInNetworksubnetlist!: pulumi.Output<string | undefined>;
    public readonly maxDeadSeInGrp!: pulumi.Output<string | undefined>;
    public readonly maxPcapPerTenant!: pulumi.Output<string | undefined>;
    public readonly maxSeSpawnIntervalDelay!: pulumi.Output<string | undefined>;
    public readonly maxSeqAttachIpFailures!: pulumi.Output<string | undefined>;
    public readonly maxSeqVnicFailures!: pulumi.Output<string | undefined>;
    public readonly maxThreadsCcVipBgWorker!: pulumi.Output<string | undefined>;
    public readonly permissionScopedSharedAdminNetworks!: pulumi.Output<string | undefined>;
    public readonly persistenceKeyRotatePeriod!: pulumi.Output<string | undefined>;
    public readonly portalRequestBurstLimit!: pulumi.Output<string | undefined>;
    public readonly portalRequestRateLimit!: pulumi.Output<string | undefined>;
    public readonly portalToken!: pulumi.Output<string>;
    public readonly postgresVacuumPeriod!: pulumi.Output<string | undefined>;
    public readonly processLockedUseraccountsTimeoutPeriod!: pulumi.Output<string | undefined>;
    public readonly processPkiProfileTimeoutPeriod!: pulumi.Output<string | undefined>;
    public readonly queryHostFail!: pulumi.Output<string | undefined>;
    public readonly resmgrLogCachingPeriod!: pulumi.Output<string | undefined>;
    public readonly restrictCloudReadAccess!: pulumi.Output<string | undefined>;
    public readonly safenetHsmVersion!: pulumi.Output<string>;
    public readonly seCreateTimeout!: pulumi.Output<string | undefined>;
    public readonly seFailoverAttemptInterval!: pulumi.Output<string | undefined>;
    public readonly seFromMarketplace!: pulumi.Output<string | undefined>;
    public readonly seOfflineDel!: pulumi.Output<string | undefined>;
    public readonly seSpawnRetryInterval!: pulumi.Output<string | undefined>;
    public readonly seUpgradeFlowCleanupTimeout!: pulumi.Output<string | undefined>;
    public readonly seVnicCooldown!: pulumi.Output<string | undefined>;
    public readonly seVnicGcWaitTime!: pulumi.Output<string | undefined>;
    public readonly secureChannelCleanupTimeout!: pulumi.Output<string | undefined>;
    public readonly secureChannelControllerTokenTimeout!: pulumi.Output<string | undefined>;
    public readonly secureChannelSeTokenTimeout!: pulumi.Output<string | undefined>;
    public readonly seupgradeCopyBufferSize!: pulumi.Output<string | undefined>;
    public readonly seupgradeCopyPoolSize!: pulumi.Output<string | undefined>;
    public readonly seupgradeFabricPoolSize!: pulumi.Output<string | undefined>;
    public readonly seupgradeSegroupMinDeadTimeout!: pulumi.Output<string | undefined>;
    public readonly sharedSslCertificates!: pulumi.Output<string | undefined>;
    public readonly skopeoRetryInterval!: pulumi.Output<string | undefined>;
    public readonly skopeoRetryLimit!: pulumi.Output<string | undefined>;
    public readonly softMinMemPerSeLimit!: pulumi.Output<string | undefined>;
    public readonly sslCertificateExpiryWarningDays!: pulumi.Output<number[] | undefined>;
    public readonly systemReportCleanupInterval!: pulumi.Output<string | undefined>;
    public readonly systemReportLimit!: pulumi.Output<string | undefined>;
    public readonly unresponsiveSeReboot!: pulumi.Output<string | undefined>;
    public readonly updateDnsEntryRetryLimit!: pulumi.Output<string | undefined>;
    public readonly updateDnsEntryTimeout!: pulumi.Output<string | undefined>;
    public readonly upgradeDnsTtl!: pulumi.Output<string | undefined>;
    public readonly upgradeFatSeLeaseTime!: pulumi.Output<string | undefined>;
    public readonly upgradeLeaseTime!: pulumi.Output<string | undefined>;
    public readonly upgradeSePerVsScaleOpsTxnTime!: pulumi.Output<string | undefined>;
    public readonly userAgentCacheConfigs!: pulumi.Output<outputs.ControllerpropertiesUserAgentCacheConfig[] | undefined>;
    public readonly uuid!: pulumi.Output<string>;
    public readonly vnicOpFailTime!: pulumi.Output<string | undefined>;
    public readonly vsAwaitingSeTimeout!: pulumi.Output<string | undefined>;
    public readonly vsKeyRotatePeriod!: pulumi.Output<string | undefined>;
    public readonly vsScaleoutReadyCheckInterval!: pulumi.Output<string | undefined>;
    public readonly vsSeAttachIpFail!: pulumi.Output<string | undefined>;
    public readonly vsSeBootupFail!: pulumi.Output<string | undefined>;
    public readonly vsSeBootupFailPatch!: pulumi.Output<string | undefined>;
    public readonly vsSeCreateFail!: pulumi.Output<string | undefined>;
    public readonly vsSePingFail!: pulumi.Output<string | undefined>;
    public readonly vsSeVnicFail!: pulumi.Output<string | undefined>;
    public readonly vsSeVnicIpFail!: pulumi.Output<string | undefined>;
    public readonly vsphereHaDetectionTimeout!: pulumi.Output<string | undefined>;
    public readonly vsphereHaRecoveryTimeout!: pulumi.Output<string | undefined>;
    public readonly vsphereHaTimerInterval!: pulumi.Output<string | undefined>;
    public readonly warmstartSeReconnectWaitTime!: pulumi.Output<string | undefined>;
    public readonly warmstartVsResyncWaitTime!: pulumi.Output<string | undefined>;

    /**
     * Create a Controllerproperties resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ControllerpropertiesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ControllerpropertiesArgs | ControllerpropertiesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ControllerpropertiesState | undefined;
            resourceInputs["alertManagerUseEvms"] = state ? state.alertManagerUseEvms : undefined;
            resourceInputs["allowAdminNetworkUpdates"] = state ? state.allowAdminNetworkUpdates : undefined;
            resourceInputs["allowIpForwarding"] = state ? state.allowIpForwarding : undefined;
            resourceInputs["allowUnauthenticatedApis"] = state ? state.allowUnauthenticatedApis : undefined;
            resourceInputs["allowUnauthenticatedNodes"] = state ? state.allowUnauthenticatedNodes : undefined;
            resourceInputs["apiIdleTimeout"] = state ? state.apiIdleTimeout : undefined;
            resourceInputs["apiPerfLoggingThreshold"] = state ? state.apiPerfLoggingThreshold : undefined;
            resourceInputs["appviewxCompatMode"] = state ? state.appviewxCompatMode : undefined;
            resourceInputs["asyncPatchMergePeriod"] = state ? state.asyncPatchMergePeriod : undefined;
            resourceInputs["asyncPatchRequestCleanupDuration"] = state ? state.asyncPatchRequestCleanupDuration : undefined;
            resourceInputs["attachIpRetryInterval"] = state ? state.attachIpRetryInterval : undefined;
            resourceInputs["attachIpRetryLimit"] = state ? state.attachIpRetryLimit : undefined;
            resourceInputs["bmUseAnsible"] = state ? state.bmUseAnsible : undefined;
            resourceInputs["checkVsvipFqdnSyntax"] = state ? state.checkVsvipFqdnSyntax : undefined;
            resourceInputs["cleanupExpiredAuthtokenTimeoutPeriod"] = state ? state.cleanupExpiredAuthtokenTimeoutPeriod : undefined;
            resourceInputs["cleanupSessionsTimeoutPeriod"] = state ? state.cleanupSessionsTimeoutPeriod : undefined;
            resourceInputs["cloudDiscoveryInterval"] = state ? state.cloudDiscoveryInterval : undefined;
            resourceInputs["cloudReconcile"] = state ? state.cloudReconcile : undefined;
            resourceInputs["cloudReconcileInterval"] = state ? state.cloudReconcileInterval : undefined;
            resourceInputs["clusterIpGratuitousArpPeriod"] = state ? state.clusterIpGratuitousArpPeriod : undefined;
            resourceInputs["configpbAttributes"] = state ? state.configpbAttributes : undefined;
            resourceInputs["consistencyCheckTimeoutPeriod"] = state ? state.consistencyCheckTimeoutPeriod : undefined;
            resourceInputs["controllerResourceInfoCollectionPeriod"] = state ? state.controllerResourceInfoCollectionPeriod : undefined;
            resourceInputs["crashedSeReboot"] = state ? state.crashedSeReboot : undefined;
            resourceInputs["deadSeDetectionTimer"] = state ? state.deadSeDetectionTimer : undefined;
            resourceInputs["defaultMinimumApiTimeout"] = state ? state.defaultMinimumApiTimeout : undefined;
            resourceInputs["delOfflineSeAfterRebootDelay"] = state ? state.delOfflineSeAfterRebootDelay : undefined;
            resourceInputs["detachIpRetryInterval"] = state ? state.detachIpRetryInterval : undefined;
            resourceInputs["detachIpRetryLimit"] = state ? state.detachIpRetryLimit : undefined;
            resourceInputs["detachIpTimeout"] = state ? state.detachIpTimeout : undefined;
            resourceInputs["dnsRefreshPeriod"] = state ? state.dnsRefreshPeriod : undefined;
            resourceInputs["dummy"] = state ? state.dummy : undefined;
            resourceInputs["editSystemLimits"] = state ? state.editSystemLimits : undefined;
            resourceInputs["enableApiSharding"] = state ? state.enableApiSharding : undefined;
            resourceInputs["enableMemoryBalancer"] = state ? state.enableMemoryBalancer : undefined;
            resourceInputs["enablePerProcessStop"] = state ? state.enablePerProcessStop : undefined;
            resourceInputs["enableResmgrLogCachePrint"] = state ? state.enableResmgrLogCachePrint : undefined;
            resourceInputs["eventManagerMaxGoroutines"] = state ? state.eventManagerMaxGoroutines : undefined;
            resourceInputs["eventManagerMaxSubscribers"] = state ? state.eventManagerMaxSubscribers : undefined;
            resourceInputs["eventManagerProcessingTimeThreshold"] = state ? state.eventManagerProcessingTimeThreshold : undefined;
            resourceInputs["falsePositiveLearningConfigs"] = state ? state.falsePositiveLearningConfigs : undefined;
            resourceInputs["fatalErrorLeaseTime"] = state ? state.fatalErrorLeaseTime : undefined;
            resourceInputs["federatedDatastoreCleanupDuration"] = state ? state.federatedDatastoreCleanupDuration : undefined;
            resourceInputs["fileObjectCleanupPeriod"] = state ? state.fileObjectCleanupPeriod : undefined;
            resourceInputs["fileobjectMaxFileVersions"] = state ? state.fileobjectMaxFileVersions : undefined;
            resourceInputs["gslbPurgeBatchSize"] = state ? state.gslbPurgeBatchSize : undefined;
            resourceInputs["gslbPurgeSleepTimeMs"] = state ? state.gslbPurgeSleepTimeMs : undefined;
            resourceInputs["ignoreVrfInNetworksubnetlist"] = state ? state.ignoreVrfInNetworksubnetlist : undefined;
            resourceInputs["maxDeadSeInGrp"] = state ? state.maxDeadSeInGrp : undefined;
            resourceInputs["maxPcapPerTenant"] = state ? state.maxPcapPerTenant : undefined;
            resourceInputs["maxSeSpawnIntervalDelay"] = state ? state.maxSeSpawnIntervalDelay : undefined;
            resourceInputs["maxSeqAttachIpFailures"] = state ? state.maxSeqAttachIpFailures : undefined;
            resourceInputs["maxSeqVnicFailures"] = state ? state.maxSeqVnicFailures : undefined;
            resourceInputs["maxThreadsCcVipBgWorker"] = state ? state.maxThreadsCcVipBgWorker : undefined;
            resourceInputs["permissionScopedSharedAdminNetworks"] = state ? state.permissionScopedSharedAdminNetworks : undefined;
            resourceInputs["persistenceKeyRotatePeriod"] = state ? state.persistenceKeyRotatePeriod : undefined;
            resourceInputs["portalRequestBurstLimit"] = state ? state.portalRequestBurstLimit : undefined;
            resourceInputs["portalRequestRateLimit"] = state ? state.portalRequestRateLimit : undefined;
            resourceInputs["portalToken"] = state ? state.portalToken : undefined;
            resourceInputs["postgresVacuumPeriod"] = state ? state.postgresVacuumPeriod : undefined;
            resourceInputs["processLockedUseraccountsTimeoutPeriod"] = state ? state.processLockedUseraccountsTimeoutPeriod : undefined;
            resourceInputs["processPkiProfileTimeoutPeriod"] = state ? state.processPkiProfileTimeoutPeriod : undefined;
            resourceInputs["queryHostFail"] = state ? state.queryHostFail : undefined;
            resourceInputs["resmgrLogCachingPeriod"] = state ? state.resmgrLogCachingPeriod : undefined;
            resourceInputs["restrictCloudReadAccess"] = state ? state.restrictCloudReadAccess : undefined;
            resourceInputs["safenetHsmVersion"] = state ? state.safenetHsmVersion : undefined;
            resourceInputs["seCreateTimeout"] = state ? state.seCreateTimeout : undefined;
            resourceInputs["seFailoverAttemptInterval"] = state ? state.seFailoverAttemptInterval : undefined;
            resourceInputs["seFromMarketplace"] = state ? state.seFromMarketplace : undefined;
            resourceInputs["seOfflineDel"] = state ? state.seOfflineDel : undefined;
            resourceInputs["seSpawnRetryInterval"] = state ? state.seSpawnRetryInterval : undefined;
            resourceInputs["seUpgradeFlowCleanupTimeout"] = state ? state.seUpgradeFlowCleanupTimeout : undefined;
            resourceInputs["seVnicCooldown"] = state ? state.seVnicCooldown : undefined;
            resourceInputs["seVnicGcWaitTime"] = state ? state.seVnicGcWaitTime : undefined;
            resourceInputs["secureChannelCleanupTimeout"] = state ? state.secureChannelCleanupTimeout : undefined;
            resourceInputs["secureChannelControllerTokenTimeout"] = state ? state.secureChannelControllerTokenTimeout : undefined;
            resourceInputs["secureChannelSeTokenTimeout"] = state ? state.secureChannelSeTokenTimeout : undefined;
            resourceInputs["seupgradeCopyBufferSize"] = state ? state.seupgradeCopyBufferSize : undefined;
            resourceInputs["seupgradeCopyPoolSize"] = state ? state.seupgradeCopyPoolSize : undefined;
            resourceInputs["seupgradeFabricPoolSize"] = state ? state.seupgradeFabricPoolSize : undefined;
            resourceInputs["seupgradeSegroupMinDeadTimeout"] = state ? state.seupgradeSegroupMinDeadTimeout : undefined;
            resourceInputs["sharedSslCertificates"] = state ? state.sharedSslCertificates : undefined;
            resourceInputs["skopeoRetryInterval"] = state ? state.skopeoRetryInterval : undefined;
            resourceInputs["skopeoRetryLimit"] = state ? state.skopeoRetryLimit : undefined;
            resourceInputs["softMinMemPerSeLimit"] = state ? state.softMinMemPerSeLimit : undefined;
            resourceInputs["sslCertificateExpiryWarningDays"] = state ? state.sslCertificateExpiryWarningDays : undefined;
            resourceInputs["systemReportCleanupInterval"] = state ? state.systemReportCleanupInterval : undefined;
            resourceInputs["systemReportLimit"] = state ? state.systemReportLimit : undefined;
            resourceInputs["unresponsiveSeReboot"] = state ? state.unresponsiveSeReboot : undefined;
            resourceInputs["updateDnsEntryRetryLimit"] = state ? state.updateDnsEntryRetryLimit : undefined;
            resourceInputs["updateDnsEntryTimeout"] = state ? state.updateDnsEntryTimeout : undefined;
            resourceInputs["upgradeDnsTtl"] = state ? state.upgradeDnsTtl : undefined;
            resourceInputs["upgradeFatSeLeaseTime"] = state ? state.upgradeFatSeLeaseTime : undefined;
            resourceInputs["upgradeLeaseTime"] = state ? state.upgradeLeaseTime : undefined;
            resourceInputs["upgradeSePerVsScaleOpsTxnTime"] = state ? state.upgradeSePerVsScaleOpsTxnTime : undefined;
            resourceInputs["userAgentCacheConfigs"] = state ? state.userAgentCacheConfigs : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vnicOpFailTime"] = state ? state.vnicOpFailTime : undefined;
            resourceInputs["vsAwaitingSeTimeout"] = state ? state.vsAwaitingSeTimeout : undefined;
            resourceInputs["vsKeyRotatePeriod"] = state ? state.vsKeyRotatePeriod : undefined;
            resourceInputs["vsScaleoutReadyCheckInterval"] = state ? state.vsScaleoutReadyCheckInterval : undefined;
            resourceInputs["vsSeAttachIpFail"] = state ? state.vsSeAttachIpFail : undefined;
            resourceInputs["vsSeBootupFail"] = state ? state.vsSeBootupFail : undefined;
            resourceInputs["vsSeBootupFailPatch"] = state ? state.vsSeBootupFailPatch : undefined;
            resourceInputs["vsSeCreateFail"] = state ? state.vsSeCreateFail : undefined;
            resourceInputs["vsSePingFail"] = state ? state.vsSePingFail : undefined;
            resourceInputs["vsSeVnicFail"] = state ? state.vsSeVnicFail : undefined;
            resourceInputs["vsSeVnicIpFail"] = state ? state.vsSeVnicIpFail : undefined;
            resourceInputs["vsphereHaDetectionTimeout"] = state ? state.vsphereHaDetectionTimeout : undefined;
            resourceInputs["vsphereHaRecoveryTimeout"] = state ? state.vsphereHaRecoveryTimeout : undefined;
            resourceInputs["vsphereHaTimerInterval"] = state ? state.vsphereHaTimerInterval : undefined;
            resourceInputs["warmstartSeReconnectWaitTime"] = state ? state.warmstartSeReconnectWaitTime : undefined;
            resourceInputs["warmstartVsResyncWaitTime"] = state ? state.warmstartVsResyncWaitTime : undefined;
        } else {
            const args = argsOrState as ControllerpropertiesArgs | undefined;
            resourceInputs["alertManagerUseEvms"] = args ? args.alertManagerUseEvms : undefined;
            resourceInputs["allowAdminNetworkUpdates"] = args ? args.allowAdminNetworkUpdates : undefined;
            resourceInputs["allowIpForwarding"] = args ? args.allowIpForwarding : undefined;
            resourceInputs["allowUnauthenticatedApis"] = args ? args.allowUnauthenticatedApis : undefined;
            resourceInputs["allowUnauthenticatedNodes"] = args ? args.allowUnauthenticatedNodes : undefined;
            resourceInputs["apiIdleTimeout"] = args ? args.apiIdleTimeout : undefined;
            resourceInputs["apiPerfLoggingThreshold"] = args ? args.apiPerfLoggingThreshold : undefined;
            resourceInputs["appviewxCompatMode"] = args ? args.appviewxCompatMode : undefined;
            resourceInputs["asyncPatchMergePeriod"] = args ? args.asyncPatchMergePeriod : undefined;
            resourceInputs["asyncPatchRequestCleanupDuration"] = args ? args.asyncPatchRequestCleanupDuration : undefined;
            resourceInputs["attachIpRetryInterval"] = args ? args.attachIpRetryInterval : undefined;
            resourceInputs["attachIpRetryLimit"] = args ? args.attachIpRetryLimit : undefined;
            resourceInputs["bmUseAnsible"] = args ? args.bmUseAnsible : undefined;
            resourceInputs["checkVsvipFqdnSyntax"] = args ? args.checkVsvipFqdnSyntax : undefined;
            resourceInputs["cleanupExpiredAuthtokenTimeoutPeriod"] = args ? args.cleanupExpiredAuthtokenTimeoutPeriod : undefined;
            resourceInputs["cleanupSessionsTimeoutPeriod"] = args ? args.cleanupSessionsTimeoutPeriod : undefined;
            resourceInputs["cloudDiscoveryInterval"] = args ? args.cloudDiscoveryInterval : undefined;
            resourceInputs["cloudReconcile"] = args ? args.cloudReconcile : undefined;
            resourceInputs["cloudReconcileInterval"] = args ? args.cloudReconcileInterval : undefined;
            resourceInputs["clusterIpGratuitousArpPeriod"] = args ? args.clusterIpGratuitousArpPeriod : undefined;
            resourceInputs["configpbAttributes"] = args ? args.configpbAttributes : undefined;
            resourceInputs["consistencyCheckTimeoutPeriod"] = args ? args.consistencyCheckTimeoutPeriod : undefined;
            resourceInputs["controllerResourceInfoCollectionPeriod"] = args ? args.controllerResourceInfoCollectionPeriod : undefined;
            resourceInputs["crashedSeReboot"] = args ? args.crashedSeReboot : undefined;
            resourceInputs["deadSeDetectionTimer"] = args ? args.deadSeDetectionTimer : undefined;
            resourceInputs["defaultMinimumApiTimeout"] = args ? args.defaultMinimumApiTimeout : undefined;
            resourceInputs["delOfflineSeAfterRebootDelay"] = args ? args.delOfflineSeAfterRebootDelay : undefined;
            resourceInputs["detachIpRetryInterval"] = args ? args.detachIpRetryInterval : undefined;
            resourceInputs["detachIpRetryLimit"] = args ? args.detachIpRetryLimit : undefined;
            resourceInputs["detachIpTimeout"] = args ? args.detachIpTimeout : undefined;
            resourceInputs["dnsRefreshPeriod"] = args ? args.dnsRefreshPeriod : undefined;
            resourceInputs["dummy"] = args ? args.dummy : undefined;
            resourceInputs["editSystemLimits"] = args ? args.editSystemLimits : undefined;
            resourceInputs["enableApiSharding"] = args ? args.enableApiSharding : undefined;
            resourceInputs["enableMemoryBalancer"] = args ? args.enableMemoryBalancer : undefined;
            resourceInputs["enablePerProcessStop"] = args ? args.enablePerProcessStop : undefined;
            resourceInputs["enableResmgrLogCachePrint"] = args ? args.enableResmgrLogCachePrint : undefined;
            resourceInputs["eventManagerMaxGoroutines"] = args ? args.eventManagerMaxGoroutines : undefined;
            resourceInputs["eventManagerMaxSubscribers"] = args ? args.eventManagerMaxSubscribers : undefined;
            resourceInputs["eventManagerProcessingTimeThreshold"] = args ? args.eventManagerProcessingTimeThreshold : undefined;
            resourceInputs["falsePositiveLearningConfigs"] = args ? args.falsePositiveLearningConfigs : undefined;
            resourceInputs["fatalErrorLeaseTime"] = args ? args.fatalErrorLeaseTime : undefined;
            resourceInputs["federatedDatastoreCleanupDuration"] = args ? args.federatedDatastoreCleanupDuration : undefined;
            resourceInputs["fileObjectCleanupPeriod"] = args ? args.fileObjectCleanupPeriod : undefined;
            resourceInputs["fileobjectMaxFileVersions"] = args ? args.fileobjectMaxFileVersions : undefined;
            resourceInputs["gslbPurgeBatchSize"] = args ? args.gslbPurgeBatchSize : undefined;
            resourceInputs["gslbPurgeSleepTimeMs"] = args ? args.gslbPurgeSleepTimeMs : undefined;
            resourceInputs["ignoreVrfInNetworksubnetlist"] = args ? args.ignoreVrfInNetworksubnetlist : undefined;
            resourceInputs["maxDeadSeInGrp"] = args ? args.maxDeadSeInGrp : undefined;
            resourceInputs["maxPcapPerTenant"] = args ? args.maxPcapPerTenant : undefined;
            resourceInputs["maxSeSpawnIntervalDelay"] = args ? args.maxSeSpawnIntervalDelay : undefined;
            resourceInputs["maxSeqAttachIpFailures"] = args ? args.maxSeqAttachIpFailures : undefined;
            resourceInputs["maxSeqVnicFailures"] = args ? args.maxSeqVnicFailures : undefined;
            resourceInputs["maxThreadsCcVipBgWorker"] = args ? args.maxThreadsCcVipBgWorker : undefined;
            resourceInputs["permissionScopedSharedAdminNetworks"] = args ? args.permissionScopedSharedAdminNetworks : undefined;
            resourceInputs["persistenceKeyRotatePeriod"] = args ? args.persistenceKeyRotatePeriod : undefined;
            resourceInputs["portalRequestBurstLimit"] = args ? args.portalRequestBurstLimit : undefined;
            resourceInputs["portalRequestRateLimit"] = args ? args.portalRequestRateLimit : undefined;
            resourceInputs["portalToken"] = args?.portalToken ? pulumi.secret(args.portalToken) : undefined;
            resourceInputs["postgresVacuumPeriod"] = args ? args.postgresVacuumPeriod : undefined;
            resourceInputs["processLockedUseraccountsTimeoutPeriod"] = args ? args.processLockedUseraccountsTimeoutPeriod : undefined;
            resourceInputs["processPkiProfileTimeoutPeriod"] = args ? args.processPkiProfileTimeoutPeriod : undefined;
            resourceInputs["queryHostFail"] = args ? args.queryHostFail : undefined;
            resourceInputs["resmgrLogCachingPeriod"] = args ? args.resmgrLogCachingPeriod : undefined;
            resourceInputs["restrictCloudReadAccess"] = args ? args.restrictCloudReadAccess : undefined;
            resourceInputs["safenetHsmVersion"] = args ? args.safenetHsmVersion : undefined;
            resourceInputs["seCreateTimeout"] = args ? args.seCreateTimeout : undefined;
            resourceInputs["seFailoverAttemptInterval"] = args ? args.seFailoverAttemptInterval : undefined;
            resourceInputs["seFromMarketplace"] = args ? args.seFromMarketplace : undefined;
            resourceInputs["seOfflineDel"] = args ? args.seOfflineDel : undefined;
            resourceInputs["seSpawnRetryInterval"] = args ? args.seSpawnRetryInterval : undefined;
            resourceInputs["seUpgradeFlowCleanupTimeout"] = args ? args.seUpgradeFlowCleanupTimeout : undefined;
            resourceInputs["seVnicCooldown"] = args ? args.seVnicCooldown : undefined;
            resourceInputs["seVnicGcWaitTime"] = args ? args.seVnicGcWaitTime : undefined;
            resourceInputs["secureChannelCleanupTimeout"] = args ? args.secureChannelCleanupTimeout : undefined;
            resourceInputs["secureChannelControllerTokenTimeout"] = args ? args.secureChannelControllerTokenTimeout : undefined;
            resourceInputs["secureChannelSeTokenTimeout"] = args ? args.secureChannelSeTokenTimeout : undefined;
            resourceInputs["seupgradeCopyBufferSize"] = args ? args.seupgradeCopyBufferSize : undefined;
            resourceInputs["seupgradeCopyPoolSize"] = args ? args.seupgradeCopyPoolSize : undefined;
            resourceInputs["seupgradeFabricPoolSize"] = args ? args.seupgradeFabricPoolSize : undefined;
            resourceInputs["seupgradeSegroupMinDeadTimeout"] = args ? args.seupgradeSegroupMinDeadTimeout : undefined;
            resourceInputs["sharedSslCertificates"] = args ? args.sharedSslCertificates : undefined;
            resourceInputs["skopeoRetryInterval"] = args ? args.skopeoRetryInterval : undefined;
            resourceInputs["skopeoRetryLimit"] = args ? args.skopeoRetryLimit : undefined;
            resourceInputs["softMinMemPerSeLimit"] = args ? args.softMinMemPerSeLimit : undefined;
            resourceInputs["sslCertificateExpiryWarningDays"] = args ? args.sslCertificateExpiryWarningDays : undefined;
            resourceInputs["systemReportCleanupInterval"] = args ? args.systemReportCleanupInterval : undefined;
            resourceInputs["systemReportLimit"] = args ? args.systemReportLimit : undefined;
            resourceInputs["unresponsiveSeReboot"] = args ? args.unresponsiveSeReboot : undefined;
            resourceInputs["updateDnsEntryRetryLimit"] = args ? args.updateDnsEntryRetryLimit : undefined;
            resourceInputs["updateDnsEntryTimeout"] = args ? args.updateDnsEntryTimeout : undefined;
            resourceInputs["upgradeDnsTtl"] = args ? args.upgradeDnsTtl : undefined;
            resourceInputs["upgradeFatSeLeaseTime"] = args ? args.upgradeFatSeLeaseTime : undefined;
            resourceInputs["upgradeLeaseTime"] = args ? args.upgradeLeaseTime : undefined;
            resourceInputs["upgradeSePerVsScaleOpsTxnTime"] = args ? args.upgradeSePerVsScaleOpsTxnTime : undefined;
            resourceInputs["userAgentCacheConfigs"] = args ? args.userAgentCacheConfigs : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vnicOpFailTime"] = args ? args.vnicOpFailTime : undefined;
            resourceInputs["vsAwaitingSeTimeout"] = args ? args.vsAwaitingSeTimeout : undefined;
            resourceInputs["vsKeyRotatePeriod"] = args ? args.vsKeyRotatePeriod : undefined;
            resourceInputs["vsScaleoutReadyCheckInterval"] = args ? args.vsScaleoutReadyCheckInterval : undefined;
            resourceInputs["vsSeAttachIpFail"] = args ? args.vsSeAttachIpFail : undefined;
            resourceInputs["vsSeBootupFail"] = args ? args.vsSeBootupFail : undefined;
            resourceInputs["vsSeBootupFailPatch"] = args ? args.vsSeBootupFailPatch : undefined;
            resourceInputs["vsSeCreateFail"] = args ? args.vsSeCreateFail : undefined;
            resourceInputs["vsSePingFail"] = args ? args.vsSePingFail : undefined;
            resourceInputs["vsSeVnicFail"] = args ? args.vsSeVnicFail : undefined;
            resourceInputs["vsSeVnicIpFail"] = args ? args.vsSeVnicIpFail : undefined;
            resourceInputs["vsphereHaDetectionTimeout"] = args ? args.vsphereHaDetectionTimeout : undefined;
            resourceInputs["vsphereHaRecoveryTimeout"] = args ? args.vsphereHaRecoveryTimeout : undefined;
            resourceInputs["vsphereHaTimerInterval"] = args ? args.vsphereHaTimerInterval : undefined;
            resourceInputs["warmstartSeReconnectWaitTime"] = args ? args.warmstartSeReconnectWaitTime : undefined;
            resourceInputs["warmstartVsResyncWaitTime"] = args ? args.warmstartVsResyncWaitTime : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["portalToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Controllerproperties.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Controllerproperties resources.
 */
export interface ControllerpropertiesState {
    alertManagerUseEvms?: pulumi.Input<string>;
    allowAdminNetworkUpdates?: pulumi.Input<string>;
    allowIpForwarding?: pulumi.Input<string>;
    allowUnauthenticatedApis?: pulumi.Input<string>;
    allowUnauthenticatedNodes?: pulumi.Input<string>;
    apiIdleTimeout?: pulumi.Input<string>;
    apiPerfLoggingThreshold?: pulumi.Input<string>;
    appviewxCompatMode?: pulumi.Input<string>;
    asyncPatchMergePeriod?: pulumi.Input<string>;
    asyncPatchRequestCleanupDuration?: pulumi.Input<string>;
    attachIpRetryInterval?: pulumi.Input<string>;
    attachIpRetryLimit?: pulumi.Input<string>;
    bmUseAnsible?: pulumi.Input<string>;
    checkVsvipFqdnSyntax?: pulumi.Input<string>;
    cleanupExpiredAuthtokenTimeoutPeriod?: pulumi.Input<string>;
    cleanupSessionsTimeoutPeriod?: pulumi.Input<string>;
    cloudDiscoveryInterval?: pulumi.Input<string>;
    cloudReconcile?: pulumi.Input<string>;
    cloudReconcileInterval?: pulumi.Input<string>;
    clusterIpGratuitousArpPeriod?: pulumi.Input<string>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.ControllerpropertiesConfigpbAttribute>[]>;
    consistencyCheckTimeoutPeriod?: pulumi.Input<string>;
    controllerResourceInfoCollectionPeriod?: pulumi.Input<string>;
    crashedSeReboot?: pulumi.Input<string>;
    deadSeDetectionTimer?: pulumi.Input<string>;
    defaultMinimumApiTimeout?: pulumi.Input<string>;
    delOfflineSeAfterRebootDelay?: pulumi.Input<string>;
    detachIpRetryInterval?: pulumi.Input<string>;
    detachIpRetryLimit?: pulumi.Input<string>;
    detachIpTimeout?: pulumi.Input<string>;
    dnsRefreshPeriod?: pulumi.Input<string>;
    dummy?: pulumi.Input<string>;
    editSystemLimits?: pulumi.Input<string>;
    enableApiSharding?: pulumi.Input<string>;
    enableMemoryBalancer?: pulumi.Input<string>;
    enablePerProcessStop?: pulumi.Input<string>;
    enableResmgrLogCachePrint?: pulumi.Input<string>;
    eventManagerMaxGoroutines?: pulumi.Input<string>;
    eventManagerMaxSubscribers?: pulumi.Input<string>;
    eventManagerProcessingTimeThreshold?: pulumi.Input<string>;
    falsePositiveLearningConfigs?: pulumi.Input<pulumi.Input<inputs.ControllerpropertiesFalsePositiveLearningConfig>[]>;
    fatalErrorLeaseTime?: pulumi.Input<string>;
    federatedDatastoreCleanupDuration?: pulumi.Input<string>;
    fileObjectCleanupPeriod?: pulumi.Input<string>;
    fileobjectMaxFileVersions?: pulumi.Input<string>;
    gslbPurgeBatchSize?: pulumi.Input<string>;
    gslbPurgeSleepTimeMs?: pulumi.Input<string>;
    ignoreVrfInNetworksubnetlist?: pulumi.Input<string>;
    maxDeadSeInGrp?: pulumi.Input<string>;
    maxPcapPerTenant?: pulumi.Input<string>;
    maxSeSpawnIntervalDelay?: pulumi.Input<string>;
    maxSeqAttachIpFailures?: pulumi.Input<string>;
    maxSeqVnicFailures?: pulumi.Input<string>;
    maxThreadsCcVipBgWorker?: pulumi.Input<string>;
    permissionScopedSharedAdminNetworks?: pulumi.Input<string>;
    persistenceKeyRotatePeriod?: pulumi.Input<string>;
    portalRequestBurstLimit?: pulumi.Input<string>;
    portalRequestRateLimit?: pulumi.Input<string>;
    portalToken?: pulumi.Input<string>;
    postgresVacuumPeriod?: pulumi.Input<string>;
    processLockedUseraccountsTimeoutPeriod?: pulumi.Input<string>;
    processPkiProfileTimeoutPeriod?: pulumi.Input<string>;
    queryHostFail?: pulumi.Input<string>;
    resmgrLogCachingPeriod?: pulumi.Input<string>;
    restrictCloudReadAccess?: pulumi.Input<string>;
    safenetHsmVersion?: pulumi.Input<string>;
    seCreateTimeout?: pulumi.Input<string>;
    seFailoverAttemptInterval?: pulumi.Input<string>;
    seFromMarketplace?: pulumi.Input<string>;
    seOfflineDel?: pulumi.Input<string>;
    seSpawnRetryInterval?: pulumi.Input<string>;
    seUpgradeFlowCleanupTimeout?: pulumi.Input<string>;
    seVnicCooldown?: pulumi.Input<string>;
    seVnicGcWaitTime?: pulumi.Input<string>;
    secureChannelCleanupTimeout?: pulumi.Input<string>;
    secureChannelControllerTokenTimeout?: pulumi.Input<string>;
    secureChannelSeTokenTimeout?: pulumi.Input<string>;
    seupgradeCopyBufferSize?: pulumi.Input<string>;
    seupgradeCopyPoolSize?: pulumi.Input<string>;
    seupgradeFabricPoolSize?: pulumi.Input<string>;
    seupgradeSegroupMinDeadTimeout?: pulumi.Input<string>;
    sharedSslCertificates?: pulumi.Input<string>;
    skopeoRetryInterval?: pulumi.Input<string>;
    skopeoRetryLimit?: pulumi.Input<string>;
    softMinMemPerSeLimit?: pulumi.Input<string>;
    sslCertificateExpiryWarningDays?: pulumi.Input<pulumi.Input<number>[]>;
    systemReportCleanupInterval?: pulumi.Input<string>;
    systemReportLimit?: pulumi.Input<string>;
    unresponsiveSeReboot?: pulumi.Input<string>;
    updateDnsEntryRetryLimit?: pulumi.Input<string>;
    updateDnsEntryTimeout?: pulumi.Input<string>;
    upgradeDnsTtl?: pulumi.Input<string>;
    upgradeFatSeLeaseTime?: pulumi.Input<string>;
    upgradeLeaseTime?: pulumi.Input<string>;
    upgradeSePerVsScaleOpsTxnTime?: pulumi.Input<string>;
    userAgentCacheConfigs?: pulumi.Input<pulumi.Input<inputs.ControllerpropertiesUserAgentCacheConfig>[]>;
    uuid?: pulumi.Input<string>;
    vnicOpFailTime?: pulumi.Input<string>;
    vsAwaitingSeTimeout?: pulumi.Input<string>;
    vsKeyRotatePeriod?: pulumi.Input<string>;
    vsScaleoutReadyCheckInterval?: pulumi.Input<string>;
    vsSeAttachIpFail?: pulumi.Input<string>;
    vsSeBootupFail?: pulumi.Input<string>;
    vsSeBootupFailPatch?: pulumi.Input<string>;
    vsSeCreateFail?: pulumi.Input<string>;
    vsSePingFail?: pulumi.Input<string>;
    vsSeVnicFail?: pulumi.Input<string>;
    vsSeVnicIpFail?: pulumi.Input<string>;
    vsphereHaDetectionTimeout?: pulumi.Input<string>;
    vsphereHaRecoveryTimeout?: pulumi.Input<string>;
    vsphereHaTimerInterval?: pulumi.Input<string>;
    warmstartSeReconnectWaitTime?: pulumi.Input<string>;
    warmstartVsResyncWaitTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Controllerproperties resource.
 */
export interface ControllerpropertiesArgs {
    alertManagerUseEvms?: pulumi.Input<string>;
    allowAdminNetworkUpdates?: pulumi.Input<string>;
    allowIpForwarding?: pulumi.Input<string>;
    allowUnauthenticatedApis?: pulumi.Input<string>;
    allowUnauthenticatedNodes?: pulumi.Input<string>;
    apiIdleTimeout?: pulumi.Input<string>;
    apiPerfLoggingThreshold?: pulumi.Input<string>;
    appviewxCompatMode?: pulumi.Input<string>;
    asyncPatchMergePeriod?: pulumi.Input<string>;
    asyncPatchRequestCleanupDuration?: pulumi.Input<string>;
    attachIpRetryInterval?: pulumi.Input<string>;
    attachIpRetryLimit?: pulumi.Input<string>;
    bmUseAnsible?: pulumi.Input<string>;
    checkVsvipFqdnSyntax?: pulumi.Input<string>;
    cleanupExpiredAuthtokenTimeoutPeriod?: pulumi.Input<string>;
    cleanupSessionsTimeoutPeriod?: pulumi.Input<string>;
    cloudDiscoveryInterval?: pulumi.Input<string>;
    cloudReconcile?: pulumi.Input<string>;
    cloudReconcileInterval?: pulumi.Input<string>;
    clusterIpGratuitousArpPeriod?: pulumi.Input<string>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.ControllerpropertiesConfigpbAttribute>[]>;
    consistencyCheckTimeoutPeriod?: pulumi.Input<string>;
    controllerResourceInfoCollectionPeriod?: pulumi.Input<string>;
    crashedSeReboot?: pulumi.Input<string>;
    deadSeDetectionTimer?: pulumi.Input<string>;
    defaultMinimumApiTimeout?: pulumi.Input<string>;
    delOfflineSeAfterRebootDelay?: pulumi.Input<string>;
    detachIpRetryInterval?: pulumi.Input<string>;
    detachIpRetryLimit?: pulumi.Input<string>;
    detachIpTimeout?: pulumi.Input<string>;
    dnsRefreshPeriod?: pulumi.Input<string>;
    dummy?: pulumi.Input<string>;
    editSystemLimits?: pulumi.Input<string>;
    enableApiSharding?: pulumi.Input<string>;
    enableMemoryBalancer?: pulumi.Input<string>;
    enablePerProcessStop?: pulumi.Input<string>;
    enableResmgrLogCachePrint?: pulumi.Input<string>;
    eventManagerMaxGoroutines?: pulumi.Input<string>;
    eventManagerMaxSubscribers?: pulumi.Input<string>;
    eventManagerProcessingTimeThreshold?: pulumi.Input<string>;
    falsePositiveLearningConfigs?: pulumi.Input<pulumi.Input<inputs.ControllerpropertiesFalsePositiveLearningConfig>[]>;
    fatalErrorLeaseTime?: pulumi.Input<string>;
    federatedDatastoreCleanupDuration?: pulumi.Input<string>;
    fileObjectCleanupPeriod?: pulumi.Input<string>;
    fileobjectMaxFileVersions?: pulumi.Input<string>;
    gslbPurgeBatchSize?: pulumi.Input<string>;
    gslbPurgeSleepTimeMs?: pulumi.Input<string>;
    ignoreVrfInNetworksubnetlist?: pulumi.Input<string>;
    maxDeadSeInGrp?: pulumi.Input<string>;
    maxPcapPerTenant?: pulumi.Input<string>;
    maxSeSpawnIntervalDelay?: pulumi.Input<string>;
    maxSeqAttachIpFailures?: pulumi.Input<string>;
    maxSeqVnicFailures?: pulumi.Input<string>;
    maxThreadsCcVipBgWorker?: pulumi.Input<string>;
    permissionScopedSharedAdminNetworks?: pulumi.Input<string>;
    persistenceKeyRotatePeriod?: pulumi.Input<string>;
    portalRequestBurstLimit?: pulumi.Input<string>;
    portalRequestRateLimit?: pulumi.Input<string>;
    portalToken?: pulumi.Input<string>;
    postgresVacuumPeriod?: pulumi.Input<string>;
    processLockedUseraccountsTimeoutPeriod?: pulumi.Input<string>;
    processPkiProfileTimeoutPeriod?: pulumi.Input<string>;
    queryHostFail?: pulumi.Input<string>;
    resmgrLogCachingPeriod?: pulumi.Input<string>;
    restrictCloudReadAccess?: pulumi.Input<string>;
    safenetHsmVersion?: pulumi.Input<string>;
    seCreateTimeout?: pulumi.Input<string>;
    seFailoverAttemptInterval?: pulumi.Input<string>;
    seFromMarketplace?: pulumi.Input<string>;
    seOfflineDel?: pulumi.Input<string>;
    seSpawnRetryInterval?: pulumi.Input<string>;
    seUpgradeFlowCleanupTimeout?: pulumi.Input<string>;
    seVnicCooldown?: pulumi.Input<string>;
    seVnicGcWaitTime?: pulumi.Input<string>;
    secureChannelCleanupTimeout?: pulumi.Input<string>;
    secureChannelControllerTokenTimeout?: pulumi.Input<string>;
    secureChannelSeTokenTimeout?: pulumi.Input<string>;
    seupgradeCopyBufferSize?: pulumi.Input<string>;
    seupgradeCopyPoolSize?: pulumi.Input<string>;
    seupgradeFabricPoolSize?: pulumi.Input<string>;
    seupgradeSegroupMinDeadTimeout?: pulumi.Input<string>;
    sharedSslCertificates?: pulumi.Input<string>;
    skopeoRetryInterval?: pulumi.Input<string>;
    skopeoRetryLimit?: pulumi.Input<string>;
    softMinMemPerSeLimit?: pulumi.Input<string>;
    sslCertificateExpiryWarningDays?: pulumi.Input<pulumi.Input<number>[]>;
    systemReportCleanupInterval?: pulumi.Input<string>;
    systemReportLimit?: pulumi.Input<string>;
    unresponsiveSeReboot?: pulumi.Input<string>;
    updateDnsEntryRetryLimit?: pulumi.Input<string>;
    updateDnsEntryTimeout?: pulumi.Input<string>;
    upgradeDnsTtl?: pulumi.Input<string>;
    upgradeFatSeLeaseTime?: pulumi.Input<string>;
    upgradeLeaseTime?: pulumi.Input<string>;
    upgradeSePerVsScaleOpsTxnTime?: pulumi.Input<string>;
    userAgentCacheConfigs?: pulumi.Input<pulumi.Input<inputs.ControllerpropertiesUserAgentCacheConfig>[]>;
    uuid?: pulumi.Input<string>;
    vnicOpFailTime?: pulumi.Input<string>;
    vsAwaitingSeTimeout?: pulumi.Input<string>;
    vsKeyRotatePeriod?: pulumi.Input<string>;
    vsScaleoutReadyCheckInterval?: pulumi.Input<string>;
    vsSeAttachIpFail?: pulumi.Input<string>;
    vsSeBootupFail?: pulumi.Input<string>;
    vsSeBootupFailPatch?: pulumi.Input<string>;
    vsSeCreateFail?: pulumi.Input<string>;
    vsSePingFail?: pulumi.Input<string>;
    vsSeVnicFail?: pulumi.Input<string>;
    vsSeVnicIpFail?: pulumi.Input<string>;
    vsphereHaDetectionTimeout?: pulumi.Input<string>;
    vsphereHaRecoveryTimeout?: pulumi.Input<string>;
    vsphereHaTimerInterval?: pulumi.Input<string>;
    warmstartSeReconnectWaitTime?: pulumi.Input<string>;
    warmstartVsResyncWaitTime?: pulumi.Input<string>;
}
