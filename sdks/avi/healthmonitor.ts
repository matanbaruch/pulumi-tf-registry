// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Healthmonitor extends pulumi.CustomResource {
    /**
     * Get an existing Healthmonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HealthmonitorState, opts?: pulumi.CustomResourceOptions): Healthmonitor {
        return new Healthmonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'avi:index/healthmonitor:Healthmonitor';

    /**
     * Returns true if the given object is an instance of Healthmonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Healthmonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Healthmonitor.__pulumiType;
    }

    public readonly allowDuplicateMonitors!: pulumi.Output<string>;
    public readonly authentications!: pulumi.Output<outputs.HealthmonitorAuthentication[] | undefined>;
    public readonly configpbAttributes!: pulumi.Output<outputs.HealthmonitorConfigpbAttribute[] | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly disableQuickstart!: pulumi.Output<string>;
    public readonly dnsMonitors!: pulumi.Output<outputs.HealthmonitorDnsMonitor[] | undefined>;
    public readonly externalMonitors!: pulumi.Output<outputs.HealthmonitorExternalMonitor[] | undefined>;
    public readonly failedChecks!: pulumi.Output<string | undefined>;
    public readonly ftpMonitors!: pulumi.Output<outputs.HealthmonitorFtpMonitor[] | undefined>;
    public readonly ftpsMonitors!: pulumi.Output<outputs.HealthmonitorFtpsMonitor[] | undefined>;
    public readonly httpMonitors!: pulumi.Output<outputs.HealthmonitorHttpMonitor[] | undefined>;
    public readonly httpsMonitors!: pulumi.Output<outputs.HealthmonitorHttpsMonitor[] | undefined>;
    public readonly imapMonitors!: pulumi.Output<outputs.HealthmonitorImapMonitor[] | undefined>;
    public readonly imapsMonitors!: pulumi.Output<outputs.HealthmonitorImapsMonitor[] | undefined>;
    public readonly isFederated!: pulumi.Output<string | undefined>;
    public readonly ldapMonitors!: pulumi.Output<outputs.HealthmonitorLdapMonitor[] | undefined>;
    public readonly ldapsMonitors!: pulumi.Output<outputs.HealthmonitorLdapsMonitor[] | undefined>;
    public readonly markers!: pulumi.Output<outputs.HealthmonitorMarker[] | undefined>;
    public readonly monitorPort!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly pop3Monitors!: pulumi.Output<outputs.HealthmonitorPop3Monitor[] | undefined>;
    public readonly pop3sMonitors!: pulumi.Output<outputs.HealthmonitorPop3sMonitor[] | undefined>;
    public readonly radiusMonitors!: pulumi.Output<outputs.HealthmonitorRadiusMonitor[] | undefined>;
    public readonly receiveTimeout!: pulumi.Output<string | undefined>;
    public readonly sctpMonitors!: pulumi.Output<outputs.HealthmonitorSctpMonitor[] | undefined>;
    public readonly sendInterval!: pulumi.Output<string | undefined>;
    public readonly sipMonitors!: pulumi.Output<outputs.HealthmonitorSipMonitor[] | undefined>;
    public readonly smtpMonitors!: pulumi.Output<outputs.HealthmonitorSmtpMonitor[] | undefined>;
    public readonly smtpsMonitors!: pulumi.Output<outputs.HealthmonitorSmtpsMonitor[] | undefined>;
    public readonly successfulChecks!: pulumi.Output<string | undefined>;
    public readonly tcpMonitors!: pulumi.Output<outputs.HealthmonitorTcpMonitor[] | undefined>;
    public readonly tenantRef!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly udpMonitors!: pulumi.Output<outputs.HealthmonitorUdpMonitor[] | undefined>;
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Healthmonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HealthmonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HealthmonitorArgs | HealthmonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HealthmonitorState | undefined;
            resourceInputs["allowDuplicateMonitors"] = state ? state.allowDuplicateMonitors : undefined;
            resourceInputs["authentications"] = state ? state.authentications : undefined;
            resourceInputs["configpbAttributes"] = state ? state.configpbAttributes : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disableQuickstart"] = state ? state.disableQuickstart : undefined;
            resourceInputs["dnsMonitors"] = state ? state.dnsMonitors : undefined;
            resourceInputs["externalMonitors"] = state ? state.externalMonitors : undefined;
            resourceInputs["failedChecks"] = state ? state.failedChecks : undefined;
            resourceInputs["ftpMonitors"] = state ? state.ftpMonitors : undefined;
            resourceInputs["ftpsMonitors"] = state ? state.ftpsMonitors : undefined;
            resourceInputs["httpMonitors"] = state ? state.httpMonitors : undefined;
            resourceInputs["httpsMonitors"] = state ? state.httpsMonitors : undefined;
            resourceInputs["imapMonitors"] = state ? state.imapMonitors : undefined;
            resourceInputs["imapsMonitors"] = state ? state.imapsMonitors : undefined;
            resourceInputs["isFederated"] = state ? state.isFederated : undefined;
            resourceInputs["ldapMonitors"] = state ? state.ldapMonitors : undefined;
            resourceInputs["ldapsMonitors"] = state ? state.ldapsMonitors : undefined;
            resourceInputs["markers"] = state ? state.markers : undefined;
            resourceInputs["monitorPort"] = state ? state.monitorPort : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pop3Monitors"] = state ? state.pop3Monitors : undefined;
            resourceInputs["pop3sMonitors"] = state ? state.pop3sMonitors : undefined;
            resourceInputs["radiusMonitors"] = state ? state.radiusMonitors : undefined;
            resourceInputs["receiveTimeout"] = state ? state.receiveTimeout : undefined;
            resourceInputs["sctpMonitors"] = state ? state.sctpMonitors : undefined;
            resourceInputs["sendInterval"] = state ? state.sendInterval : undefined;
            resourceInputs["sipMonitors"] = state ? state.sipMonitors : undefined;
            resourceInputs["smtpMonitors"] = state ? state.smtpMonitors : undefined;
            resourceInputs["smtpsMonitors"] = state ? state.smtpsMonitors : undefined;
            resourceInputs["successfulChecks"] = state ? state.successfulChecks : undefined;
            resourceInputs["tcpMonitors"] = state ? state.tcpMonitors : undefined;
            resourceInputs["tenantRef"] = state ? state.tenantRef : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["udpMonitors"] = state ? state.udpMonitors : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as HealthmonitorArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["allowDuplicateMonitors"] = args ? args.allowDuplicateMonitors : undefined;
            resourceInputs["authentications"] = args ? args.authentications : undefined;
            resourceInputs["configpbAttributes"] = args ? args.configpbAttributes : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disableQuickstart"] = args ? args.disableQuickstart : undefined;
            resourceInputs["dnsMonitors"] = args ? args.dnsMonitors : undefined;
            resourceInputs["externalMonitors"] = args ? args.externalMonitors : undefined;
            resourceInputs["failedChecks"] = args ? args.failedChecks : undefined;
            resourceInputs["ftpMonitors"] = args ? args.ftpMonitors : undefined;
            resourceInputs["ftpsMonitors"] = args ? args.ftpsMonitors : undefined;
            resourceInputs["httpMonitors"] = args ? args.httpMonitors : undefined;
            resourceInputs["httpsMonitors"] = args ? args.httpsMonitors : undefined;
            resourceInputs["imapMonitors"] = args ? args.imapMonitors : undefined;
            resourceInputs["imapsMonitors"] = args ? args.imapsMonitors : undefined;
            resourceInputs["isFederated"] = args ? args.isFederated : undefined;
            resourceInputs["ldapMonitors"] = args ? args.ldapMonitors : undefined;
            resourceInputs["ldapsMonitors"] = args ? args.ldapsMonitors : undefined;
            resourceInputs["markers"] = args ? args.markers : undefined;
            resourceInputs["monitorPort"] = args ? args.monitorPort : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pop3Monitors"] = args ? args.pop3Monitors : undefined;
            resourceInputs["pop3sMonitors"] = args ? args.pop3sMonitors : undefined;
            resourceInputs["radiusMonitors"] = args ? args.radiusMonitors : undefined;
            resourceInputs["receiveTimeout"] = args ? args.receiveTimeout : undefined;
            resourceInputs["sctpMonitors"] = args ? args.sctpMonitors : undefined;
            resourceInputs["sendInterval"] = args ? args.sendInterval : undefined;
            resourceInputs["sipMonitors"] = args ? args.sipMonitors : undefined;
            resourceInputs["smtpMonitors"] = args ? args.smtpMonitors : undefined;
            resourceInputs["smtpsMonitors"] = args ? args.smtpsMonitors : undefined;
            resourceInputs["successfulChecks"] = args ? args.successfulChecks : undefined;
            resourceInputs["tcpMonitors"] = args ? args.tcpMonitors : undefined;
            resourceInputs["tenantRef"] = args ? args.tenantRef : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["udpMonitors"] = args ? args.udpMonitors : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Healthmonitor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Healthmonitor resources.
 */
export interface HealthmonitorState {
    allowDuplicateMonitors?: pulumi.Input<string>;
    authentications?: pulumi.Input<pulumi.Input<inputs.HealthmonitorAuthentication>[]>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.HealthmonitorConfigpbAttribute>[]>;
    description?: pulumi.Input<string>;
    disableQuickstart?: pulumi.Input<string>;
    dnsMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorDnsMonitor>[]>;
    externalMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorExternalMonitor>[]>;
    failedChecks?: pulumi.Input<string>;
    ftpMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorFtpMonitor>[]>;
    ftpsMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorFtpsMonitor>[]>;
    httpMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorHttpMonitor>[]>;
    httpsMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorHttpsMonitor>[]>;
    imapMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorImapMonitor>[]>;
    imapsMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorImapsMonitor>[]>;
    isFederated?: pulumi.Input<string>;
    ldapMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorLdapMonitor>[]>;
    ldapsMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorLdapsMonitor>[]>;
    markers?: pulumi.Input<pulumi.Input<inputs.HealthmonitorMarker>[]>;
    monitorPort?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pop3Monitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorPop3Monitor>[]>;
    pop3sMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorPop3sMonitor>[]>;
    radiusMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorRadiusMonitor>[]>;
    receiveTimeout?: pulumi.Input<string>;
    sctpMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorSctpMonitor>[]>;
    sendInterval?: pulumi.Input<string>;
    sipMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorSipMonitor>[]>;
    smtpMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorSmtpMonitor>[]>;
    smtpsMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorSmtpsMonitor>[]>;
    successfulChecks?: pulumi.Input<string>;
    tcpMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorTcpMonitor>[]>;
    tenantRef?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    udpMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorUdpMonitor>[]>;
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Healthmonitor resource.
 */
export interface HealthmonitorArgs {
    allowDuplicateMonitors?: pulumi.Input<string>;
    authentications?: pulumi.Input<pulumi.Input<inputs.HealthmonitorAuthentication>[]>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.HealthmonitorConfigpbAttribute>[]>;
    description?: pulumi.Input<string>;
    disableQuickstart?: pulumi.Input<string>;
    dnsMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorDnsMonitor>[]>;
    externalMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorExternalMonitor>[]>;
    failedChecks?: pulumi.Input<string>;
    ftpMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorFtpMonitor>[]>;
    ftpsMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorFtpsMonitor>[]>;
    httpMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorHttpMonitor>[]>;
    httpsMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorHttpsMonitor>[]>;
    imapMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorImapMonitor>[]>;
    imapsMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorImapsMonitor>[]>;
    isFederated?: pulumi.Input<string>;
    ldapMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorLdapMonitor>[]>;
    ldapsMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorLdapsMonitor>[]>;
    markers?: pulumi.Input<pulumi.Input<inputs.HealthmonitorMarker>[]>;
    monitorPort?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pop3Monitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorPop3Monitor>[]>;
    pop3sMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorPop3sMonitor>[]>;
    radiusMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorRadiusMonitor>[]>;
    receiveTimeout?: pulumi.Input<string>;
    sctpMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorSctpMonitor>[]>;
    sendInterval?: pulumi.Input<string>;
    sipMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorSipMonitor>[]>;
    smtpMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorSmtpMonitor>[]>;
    smtpsMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorSmtpsMonitor>[]>;
    successfulChecks?: pulumi.Input<string>;
    tcpMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorTcpMonitor>[]>;
    tenantRef?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    udpMonitors?: pulumi.Input<pulumi.Input<inputs.HealthmonitorUdpMonitor>[]>;
    uuid?: pulumi.Input<string>;
}
