// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSslkeyandcertificate(args?: GetSslkeyandcertificateArgs, opts?: pulumi.InvokeOptions): Promise<GetSslkeyandcertificateResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("avi:index/getSslkeyandcertificate:getSslkeyandcertificate", {
        "id": args.id,
        "name": args.name,
        "tenantRef": args.tenantRef,
        "uuid": args.uuid,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSslkeyandcertificate.
 */
export interface GetSslkeyandcertificateArgs {
    id?: string;
    name?: string;
    tenantRef?: string;
    uuid?: string;
}

/**
 * A collection of values returned by getSslkeyandcertificate.
 */
export interface GetSslkeyandcertificateResult {
    readonly caCerts: outputs.GetSslkeyandcertificateCaCert[];
    readonly certificateBase64: string;
    readonly certificateManagementProfileRef: string;
    readonly certificates: outputs.GetSslkeyandcertificateCertificate[];
    readonly configpbAttributes: outputs.GetSslkeyandcertificateConfigpbAttribute[];
    readonly createdBy: string;
    readonly dynamicParams: outputs.GetSslkeyandcertificateDynamicParam[];
    readonly enableOcspStapling: string;
    readonly enckeyBase64: string;
    readonly enckeyName: string;
    readonly format: string;
    readonly hardwaresecuritymodulegroupRef: string;
    readonly id: string;
    readonly importKeyToHsm: string;
    readonly isFederated: string;
    readonly key: string;
    readonly keyBase64: string;
    readonly keyParams: outputs.GetSslkeyandcertificateKeyParam[];
    readonly keyPassphrase: string;
    readonly markers: outputs.GetSslkeyandcertificateMarker[];
    readonly name: string;
    readonly ocspConfigs: outputs.GetSslkeyandcertificateOcspConfig[];
    readonly ocspErrorStatus: string;
    readonly ocspResponderUrlListFromCerts: string[];
    readonly ocspResponseInfos: outputs.GetSslkeyandcertificateOcspResponseInfo[];
    readonly status: string;
    readonly tenantRef: string;
    readonly type: string;
    readonly uuid: string;
}
export function getSslkeyandcertificateOutput(args?: GetSslkeyandcertificateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSslkeyandcertificateResult> {
    return pulumi.output(args).apply((a: any) => getSslkeyandcertificate(a, opts))
}

/**
 * A collection of arguments for invoking getSslkeyandcertificate.
 */
export interface GetSslkeyandcertificateOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}
