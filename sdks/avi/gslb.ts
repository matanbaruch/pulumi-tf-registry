// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Gslb extends pulumi.CustomResource {
    /**
     * Get an existing Gslb resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GslbState, opts?: pulumi.CustomResourceOptions): Gslb {
        return new Gslb(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'avi:index/gslb:Gslb';

    /**
     * Returns true if the given object is an instance of Gslb.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Gslb {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Gslb.__pulumiType;
    }

    public readonly asyncInterval!: pulumi.Output<string | undefined>;
    public readonly clearOnMaxRetries!: pulumi.Output<string | undefined>;
    public readonly clientIpAddrGroups!: pulumi.Output<outputs.GslbClientIpAddrGroup[] | undefined>;
    public readonly configpbAttributes!: pulumi.Output<outputs.GslbConfigpbAttribute[] | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly dnsConfigs!: pulumi.Output<outputs.GslbDnsConfig[] | undefined>;
    public readonly enableConfigByMembers!: pulumi.Output<string | undefined>;
    public readonly errorResyncInterval!: pulumi.Output<string | undefined>;
    public readonly fileobjectMaxFileVersions!: pulumi.Output<string | undefined>;
    public readonly isFederated!: pulumi.Output<string | undefined>;
    public readonly leaderClusterUuid!: pulumi.Output<string>;
    public readonly maintenanceMode!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly replicationPolicies!: pulumi.Output<outputs.GslbReplicationPolicy[] | undefined>;
    public readonly sendInterval!: pulumi.Output<string | undefined>;
    public readonly sendIntervalPriorToMaintenanceMode!: pulumi.Output<string>;
    public readonly sites!: pulumi.Output<outputs.GslbSite[]>;
    public readonly tenantRef!: pulumi.Output<string>;
    public readonly tenantScoped!: pulumi.Output<string | undefined>;
    public readonly thirdPartySites!: pulumi.Output<outputs.GslbThirdPartySite[] | undefined>;
    public readonly uuid!: pulumi.Output<string>;
    public readonly viewId!: pulumi.Output<string | undefined>;

    /**
     * Create a Gslb resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GslbArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GslbArgs | GslbState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GslbState | undefined;
            resourceInputs["asyncInterval"] = state ? state.asyncInterval : undefined;
            resourceInputs["clearOnMaxRetries"] = state ? state.clearOnMaxRetries : undefined;
            resourceInputs["clientIpAddrGroups"] = state ? state.clientIpAddrGroups : undefined;
            resourceInputs["configpbAttributes"] = state ? state.configpbAttributes : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dnsConfigs"] = state ? state.dnsConfigs : undefined;
            resourceInputs["enableConfigByMembers"] = state ? state.enableConfigByMembers : undefined;
            resourceInputs["errorResyncInterval"] = state ? state.errorResyncInterval : undefined;
            resourceInputs["fileobjectMaxFileVersions"] = state ? state.fileobjectMaxFileVersions : undefined;
            resourceInputs["isFederated"] = state ? state.isFederated : undefined;
            resourceInputs["leaderClusterUuid"] = state ? state.leaderClusterUuid : undefined;
            resourceInputs["maintenanceMode"] = state ? state.maintenanceMode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["replicationPolicies"] = state ? state.replicationPolicies : undefined;
            resourceInputs["sendInterval"] = state ? state.sendInterval : undefined;
            resourceInputs["sendIntervalPriorToMaintenanceMode"] = state ? state.sendIntervalPriorToMaintenanceMode : undefined;
            resourceInputs["sites"] = state ? state.sites : undefined;
            resourceInputs["tenantRef"] = state ? state.tenantRef : undefined;
            resourceInputs["tenantScoped"] = state ? state.tenantScoped : undefined;
            resourceInputs["thirdPartySites"] = state ? state.thirdPartySites : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["viewId"] = state ? state.viewId : undefined;
        } else {
            const args = argsOrState as GslbArgs | undefined;
            if ((!args || args.leaderClusterUuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'leaderClusterUuid'");
            }
            if ((!args || args.sites === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sites'");
            }
            resourceInputs["asyncInterval"] = args ? args.asyncInterval : undefined;
            resourceInputs["clearOnMaxRetries"] = args ? args.clearOnMaxRetries : undefined;
            resourceInputs["clientIpAddrGroups"] = args ? args.clientIpAddrGroups : undefined;
            resourceInputs["configpbAttributes"] = args ? args.configpbAttributes : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dnsConfigs"] = args ? args.dnsConfigs : undefined;
            resourceInputs["enableConfigByMembers"] = args ? args.enableConfigByMembers : undefined;
            resourceInputs["errorResyncInterval"] = args ? args.errorResyncInterval : undefined;
            resourceInputs["fileobjectMaxFileVersions"] = args ? args.fileobjectMaxFileVersions : undefined;
            resourceInputs["isFederated"] = args ? args.isFederated : undefined;
            resourceInputs["leaderClusterUuid"] = args ? args.leaderClusterUuid : undefined;
            resourceInputs["maintenanceMode"] = args ? args.maintenanceMode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["replicationPolicies"] = args ? args.replicationPolicies : undefined;
            resourceInputs["sendInterval"] = args ? args.sendInterval : undefined;
            resourceInputs["sendIntervalPriorToMaintenanceMode"] = args ? args.sendIntervalPriorToMaintenanceMode : undefined;
            resourceInputs["sites"] = args ? args.sites : undefined;
            resourceInputs["tenantRef"] = args ? args.tenantRef : undefined;
            resourceInputs["tenantScoped"] = args ? args.tenantScoped : undefined;
            resourceInputs["thirdPartySites"] = args ? args.thirdPartySites : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["viewId"] = args ? args.viewId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Gslb.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Gslb resources.
 */
export interface GslbState {
    asyncInterval?: pulumi.Input<string>;
    clearOnMaxRetries?: pulumi.Input<string>;
    clientIpAddrGroups?: pulumi.Input<pulumi.Input<inputs.GslbClientIpAddrGroup>[]>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.GslbConfigpbAttribute>[]>;
    description?: pulumi.Input<string>;
    dnsConfigs?: pulumi.Input<pulumi.Input<inputs.GslbDnsConfig>[]>;
    enableConfigByMembers?: pulumi.Input<string>;
    errorResyncInterval?: pulumi.Input<string>;
    fileobjectMaxFileVersions?: pulumi.Input<string>;
    isFederated?: pulumi.Input<string>;
    leaderClusterUuid?: pulumi.Input<string>;
    maintenanceMode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    replicationPolicies?: pulumi.Input<pulumi.Input<inputs.GslbReplicationPolicy>[]>;
    sendInterval?: pulumi.Input<string>;
    sendIntervalPriorToMaintenanceMode?: pulumi.Input<string>;
    sites?: pulumi.Input<pulumi.Input<inputs.GslbSite>[]>;
    tenantRef?: pulumi.Input<string>;
    tenantScoped?: pulumi.Input<string>;
    thirdPartySites?: pulumi.Input<pulumi.Input<inputs.GslbThirdPartySite>[]>;
    uuid?: pulumi.Input<string>;
    viewId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Gslb resource.
 */
export interface GslbArgs {
    asyncInterval?: pulumi.Input<string>;
    clearOnMaxRetries?: pulumi.Input<string>;
    clientIpAddrGroups?: pulumi.Input<pulumi.Input<inputs.GslbClientIpAddrGroup>[]>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.GslbConfigpbAttribute>[]>;
    description?: pulumi.Input<string>;
    dnsConfigs?: pulumi.Input<pulumi.Input<inputs.GslbDnsConfig>[]>;
    enableConfigByMembers?: pulumi.Input<string>;
    errorResyncInterval?: pulumi.Input<string>;
    fileobjectMaxFileVersions?: pulumi.Input<string>;
    isFederated?: pulumi.Input<string>;
    leaderClusterUuid: pulumi.Input<string>;
    maintenanceMode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    replicationPolicies?: pulumi.Input<pulumi.Input<inputs.GslbReplicationPolicy>[]>;
    sendInterval?: pulumi.Input<string>;
    sendIntervalPriorToMaintenanceMode?: pulumi.Input<string>;
    sites: pulumi.Input<pulumi.Input<inputs.GslbSite>[]>;
    tenantRef?: pulumi.Input<string>;
    tenantScoped?: pulumi.Input<string>;
    thirdPartySites?: pulumi.Input<pulumi.Input<inputs.GslbThirdPartySite>[]>;
    uuid?: pulumi.Input<string>;
    viewId?: pulumi.Input<string>;
}
