// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Gslbservice extends pulumi.CustomResource {
    /**
     * Get an existing Gslbservice resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GslbserviceState, opts?: pulumi.CustomResourceOptions): Gslbservice {
        return new Gslbservice(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'avi:index/gslbservice:Gslbservice';

    /**
     * Returns true if the given object is an instance of Gslbservice.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Gslbservice {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Gslbservice.__pulumiType;
    }

    public readonly applicationPersistenceProfileRef!: pulumi.Output<string>;
    public readonly configpbAttributes!: pulumi.Output<outputs.GslbserviceConfigpbAttribute[] | undefined>;
    public readonly controllerHealthStatusEnabled!: pulumi.Output<string | undefined>;
    public readonly createdBy!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly domainNames!: pulumi.Output<string[]>;
    public readonly downResponses!: pulumi.Output<outputs.GslbserviceDownResponse[] | undefined>;
    public readonly enabled!: pulumi.Output<string | undefined>;
    public readonly groups!: pulumi.Output<outputs.GslbserviceGroup[]>;
    public readonly healthMonitorRefs!: pulumi.Output<string[] | undefined>;
    public readonly healthMonitorScope!: pulumi.Output<string | undefined>;
    public readonly hmOff!: pulumi.Output<string>;
    public readonly isFederated!: pulumi.Output<string | undefined>;
    public readonly markers!: pulumi.Output<outputs.GslbserviceMarker[] | undefined>;
    public readonly minMembers!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly numDnsIp!: pulumi.Output<string>;
    public readonly pkiProfileRef!: pulumi.Output<string>;
    public readonly poolAlgorithm!: pulumi.Output<string | undefined>;
    public readonly resolveCname!: pulumi.Output<string | undefined>;
    public readonly sitePersistenceEnabled!: pulumi.Output<string | undefined>;
    public readonly tenantRef!: pulumi.Output<string>;
    public readonly topologyPolicyEnabled!: pulumi.Output<string | undefined>;
    public readonly ttl!: pulumi.Output<string>;
    public readonly useEdnsClientSubnet!: pulumi.Output<string | undefined>;
    public readonly uuid!: pulumi.Output<string>;
    public readonly wildcardMatch!: pulumi.Output<string | undefined>;

    /**
     * Create a Gslbservice resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GslbserviceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GslbserviceArgs | GslbserviceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GslbserviceState | undefined;
            resourceInputs["applicationPersistenceProfileRef"] = state ? state.applicationPersistenceProfileRef : undefined;
            resourceInputs["configpbAttributes"] = state ? state.configpbAttributes : undefined;
            resourceInputs["controllerHealthStatusEnabled"] = state ? state.controllerHealthStatusEnabled : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domainNames"] = state ? state.domainNames : undefined;
            resourceInputs["downResponses"] = state ? state.downResponses : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["healthMonitorRefs"] = state ? state.healthMonitorRefs : undefined;
            resourceInputs["healthMonitorScope"] = state ? state.healthMonitorScope : undefined;
            resourceInputs["hmOff"] = state ? state.hmOff : undefined;
            resourceInputs["isFederated"] = state ? state.isFederated : undefined;
            resourceInputs["markers"] = state ? state.markers : undefined;
            resourceInputs["minMembers"] = state ? state.minMembers : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numDnsIp"] = state ? state.numDnsIp : undefined;
            resourceInputs["pkiProfileRef"] = state ? state.pkiProfileRef : undefined;
            resourceInputs["poolAlgorithm"] = state ? state.poolAlgorithm : undefined;
            resourceInputs["resolveCname"] = state ? state.resolveCname : undefined;
            resourceInputs["sitePersistenceEnabled"] = state ? state.sitePersistenceEnabled : undefined;
            resourceInputs["tenantRef"] = state ? state.tenantRef : undefined;
            resourceInputs["topologyPolicyEnabled"] = state ? state.topologyPolicyEnabled : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["useEdnsClientSubnet"] = state ? state.useEdnsClientSubnet : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["wildcardMatch"] = state ? state.wildcardMatch : undefined;
        } else {
            const args = argsOrState as GslbserviceArgs | undefined;
            if ((!args || args.domainNames === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainNames'");
            }
            if ((!args || args.groups === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groups'");
            }
            resourceInputs["applicationPersistenceProfileRef"] = args ? args.applicationPersistenceProfileRef : undefined;
            resourceInputs["configpbAttributes"] = args ? args.configpbAttributes : undefined;
            resourceInputs["controllerHealthStatusEnabled"] = args ? args.controllerHealthStatusEnabled : undefined;
            resourceInputs["createdBy"] = args ? args.createdBy : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domainNames"] = args ? args.domainNames : undefined;
            resourceInputs["downResponses"] = args ? args.downResponses : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["healthMonitorRefs"] = args ? args.healthMonitorRefs : undefined;
            resourceInputs["healthMonitorScope"] = args ? args.healthMonitorScope : undefined;
            resourceInputs["hmOff"] = args ? args.hmOff : undefined;
            resourceInputs["isFederated"] = args ? args.isFederated : undefined;
            resourceInputs["markers"] = args ? args.markers : undefined;
            resourceInputs["minMembers"] = args ? args.minMembers : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numDnsIp"] = args ? args.numDnsIp : undefined;
            resourceInputs["pkiProfileRef"] = args ? args.pkiProfileRef : undefined;
            resourceInputs["poolAlgorithm"] = args ? args.poolAlgorithm : undefined;
            resourceInputs["resolveCname"] = args ? args.resolveCname : undefined;
            resourceInputs["sitePersistenceEnabled"] = args ? args.sitePersistenceEnabled : undefined;
            resourceInputs["tenantRef"] = args ? args.tenantRef : undefined;
            resourceInputs["topologyPolicyEnabled"] = args ? args.topologyPolicyEnabled : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["useEdnsClientSubnet"] = args ? args.useEdnsClientSubnet : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["wildcardMatch"] = args ? args.wildcardMatch : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Gslbservice.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Gslbservice resources.
 */
export interface GslbserviceState {
    applicationPersistenceProfileRef?: pulumi.Input<string>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.GslbserviceConfigpbAttribute>[]>;
    controllerHealthStatusEnabled?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainNames?: pulumi.Input<pulumi.Input<string>[]>;
    downResponses?: pulumi.Input<pulumi.Input<inputs.GslbserviceDownResponse>[]>;
    enabled?: pulumi.Input<string>;
    groups?: pulumi.Input<pulumi.Input<inputs.GslbserviceGroup>[]>;
    healthMonitorRefs?: pulumi.Input<pulumi.Input<string>[]>;
    healthMonitorScope?: pulumi.Input<string>;
    hmOff?: pulumi.Input<string>;
    isFederated?: pulumi.Input<string>;
    markers?: pulumi.Input<pulumi.Input<inputs.GslbserviceMarker>[]>;
    minMembers?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    numDnsIp?: pulumi.Input<string>;
    pkiProfileRef?: pulumi.Input<string>;
    poolAlgorithm?: pulumi.Input<string>;
    resolveCname?: pulumi.Input<string>;
    sitePersistenceEnabled?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    topologyPolicyEnabled?: pulumi.Input<string>;
    ttl?: pulumi.Input<string>;
    useEdnsClientSubnet?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    wildcardMatch?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Gslbservice resource.
 */
export interface GslbserviceArgs {
    applicationPersistenceProfileRef?: pulumi.Input<string>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.GslbserviceConfigpbAttribute>[]>;
    controllerHealthStatusEnabled?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainNames: pulumi.Input<pulumi.Input<string>[]>;
    downResponses?: pulumi.Input<pulumi.Input<inputs.GslbserviceDownResponse>[]>;
    enabled?: pulumi.Input<string>;
    groups: pulumi.Input<pulumi.Input<inputs.GslbserviceGroup>[]>;
    healthMonitorRefs?: pulumi.Input<pulumi.Input<string>[]>;
    healthMonitorScope?: pulumi.Input<string>;
    hmOff?: pulumi.Input<string>;
    isFederated?: pulumi.Input<string>;
    markers?: pulumi.Input<pulumi.Input<inputs.GslbserviceMarker>[]>;
    minMembers?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    numDnsIp?: pulumi.Input<string>;
    pkiProfileRef?: pulumi.Input<string>;
    poolAlgorithm?: pulumi.Input<string>;
    resolveCname?: pulumi.Input<string>;
    sitePersistenceEnabled?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    topologyPolicyEnabled?: pulumi.Input<string>;
    ttl?: pulumi.Input<string>;
    useEdnsClientSubnet?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    wildcardMatch?: pulumi.Input<string>;
}
