// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Sslprofile extends pulumi.CustomResource {
    /**
     * Get an existing Sslprofile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SslprofileState, opts?: pulumi.CustomResourceOptions): Sslprofile {
        return new Sslprofile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'avi:index/sslprofile:Sslprofile';

    /**
     * Returns true if the given object is an instance of Sslprofile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Sslprofile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Sslprofile.__pulumiType;
    }

    public readonly acceptedCiphers!: pulumi.Output<string | undefined>;
    public readonly acceptedVersions!: pulumi.Output<outputs.SslprofileAcceptedVersion[]>;
    public readonly cipherEnums!: pulumi.Output<string[] | undefined>;
    public readonly ciphersuites!: pulumi.Output<string | undefined>;
    public readonly configpbAttributes!: pulumi.Output<outputs.SslprofileConfigpbAttribute[] | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly dhparam!: pulumi.Output<string>;
    public readonly ecNamedCurve!: pulumi.Output<string | undefined>;
    public readonly enableEarlyData!: pulumi.Output<string | undefined>;
    public readonly enableSslSessionReuse!: pulumi.Output<string | undefined>;
    public readonly isFederated!: pulumi.Output<string | undefined>;
    public readonly markers!: pulumi.Output<outputs.SslprofileMarker[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly preferClientCipherOrdering!: pulumi.Output<string | undefined>;
    public readonly sendCloseNotify!: pulumi.Output<string | undefined>;
    public readonly signatureAlgorithm!: pulumi.Output<string | undefined>;
    public readonly sslRatings!: pulumi.Output<outputs.SslprofileSslRating[] | undefined>;
    public readonly sslSessionTimeout!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<outputs.SslprofileTag[] | undefined>;
    public readonly tenantRef!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string | undefined>;
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Sslprofile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SslprofileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SslprofileArgs | SslprofileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SslprofileState | undefined;
            resourceInputs["acceptedCiphers"] = state ? state.acceptedCiphers : undefined;
            resourceInputs["acceptedVersions"] = state ? state.acceptedVersions : undefined;
            resourceInputs["cipherEnums"] = state ? state.cipherEnums : undefined;
            resourceInputs["ciphersuites"] = state ? state.ciphersuites : undefined;
            resourceInputs["configpbAttributes"] = state ? state.configpbAttributes : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dhparam"] = state ? state.dhparam : undefined;
            resourceInputs["ecNamedCurve"] = state ? state.ecNamedCurve : undefined;
            resourceInputs["enableEarlyData"] = state ? state.enableEarlyData : undefined;
            resourceInputs["enableSslSessionReuse"] = state ? state.enableSslSessionReuse : undefined;
            resourceInputs["isFederated"] = state ? state.isFederated : undefined;
            resourceInputs["markers"] = state ? state.markers : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["preferClientCipherOrdering"] = state ? state.preferClientCipherOrdering : undefined;
            resourceInputs["sendCloseNotify"] = state ? state.sendCloseNotify : undefined;
            resourceInputs["signatureAlgorithm"] = state ? state.signatureAlgorithm : undefined;
            resourceInputs["sslRatings"] = state ? state.sslRatings : undefined;
            resourceInputs["sslSessionTimeout"] = state ? state.sslSessionTimeout : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenantRef"] = state ? state.tenantRef : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SslprofileArgs | undefined;
            if ((!args || args.acceptedVersions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'acceptedVersions'");
            }
            resourceInputs["acceptedCiphers"] = args ? args.acceptedCiphers : undefined;
            resourceInputs["acceptedVersions"] = args ? args.acceptedVersions : undefined;
            resourceInputs["cipherEnums"] = args ? args.cipherEnums : undefined;
            resourceInputs["ciphersuites"] = args ? args.ciphersuites : undefined;
            resourceInputs["configpbAttributes"] = args ? args.configpbAttributes : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dhparam"] = args ? args.dhparam : undefined;
            resourceInputs["ecNamedCurve"] = args ? args.ecNamedCurve : undefined;
            resourceInputs["enableEarlyData"] = args ? args.enableEarlyData : undefined;
            resourceInputs["enableSslSessionReuse"] = args ? args.enableSslSessionReuse : undefined;
            resourceInputs["isFederated"] = args ? args.isFederated : undefined;
            resourceInputs["markers"] = args ? args.markers : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["preferClientCipherOrdering"] = args ? args.preferClientCipherOrdering : undefined;
            resourceInputs["sendCloseNotify"] = args ? args.sendCloseNotify : undefined;
            resourceInputs["signatureAlgorithm"] = args ? args.signatureAlgorithm : undefined;
            resourceInputs["sslRatings"] = args ? args.sslRatings : undefined;
            resourceInputs["sslSessionTimeout"] = args ? args.sslSessionTimeout : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tenantRef"] = args ? args.tenantRef : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Sslprofile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Sslprofile resources.
 */
export interface SslprofileState {
    acceptedCiphers?: pulumi.Input<string>;
    acceptedVersions?: pulumi.Input<pulumi.Input<inputs.SslprofileAcceptedVersion>[]>;
    cipherEnums?: pulumi.Input<pulumi.Input<string>[]>;
    ciphersuites?: pulumi.Input<string>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.SslprofileConfigpbAttribute>[]>;
    description?: pulumi.Input<string>;
    dhparam?: pulumi.Input<string>;
    ecNamedCurve?: pulumi.Input<string>;
    enableEarlyData?: pulumi.Input<string>;
    enableSslSessionReuse?: pulumi.Input<string>;
    isFederated?: pulumi.Input<string>;
    markers?: pulumi.Input<pulumi.Input<inputs.SslprofileMarker>[]>;
    name?: pulumi.Input<string>;
    preferClientCipherOrdering?: pulumi.Input<string>;
    sendCloseNotify?: pulumi.Input<string>;
    signatureAlgorithm?: pulumi.Input<string>;
    sslRatings?: pulumi.Input<pulumi.Input<inputs.SslprofileSslRating>[]>;
    sslSessionTimeout?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.SslprofileTag>[]>;
    tenantRef?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Sslprofile resource.
 */
export interface SslprofileArgs {
    acceptedCiphers?: pulumi.Input<string>;
    acceptedVersions: pulumi.Input<pulumi.Input<inputs.SslprofileAcceptedVersion>[]>;
    cipherEnums?: pulumi.Input<pulumi.Input<string>[]>;
    ciphersuites?: pulumi.Input<string>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.SslprofileConfigpbAttribute>[]>;
    description?: pulumi.Input<string>;
    dhparam?: pulumi.Input<string>;
    ecNamedCurve?: pulumi.Input<string>;
    enableEarlyData?: pulumi.Input<string>;
    enableSslSessionReuse?: pulumi.Input<string>;
    isFederated?: pulumi.Input<string>;
    markers?: pulumi.Input<pulumi.Input<inputs.SslprofileMarker>[]>;
    name?: pulumi.Input<string>;
    preferClientCipherOrdering?: pulumi.Input<string>;
    sendCloseNotify?: pulumi.Input<string>;
    signatureAlgorithm?: pulumi.Input<string>;
    sslRatings?: pulumi.Input<pulumi.Input<inputs.SslprofileSslRating>[]>;
    sslSessionTimeout?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.SslprofileTag>[]>;
    tenantRef?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}
