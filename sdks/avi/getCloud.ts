// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCloud(args?: GetCloudArgs, opts?: pulumi.InvokeOptions): Promise<GetCloudResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("avi:index/getCloud:getCloud", {
        "id": args.id,
        "name": args.name,
        "tenantRef": args.tenantRef,
        "uuid": args.uuid,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCloud.
 */
export interface GetCloudArgs {
    id?: string;
    name?: string;
    tenantRef?: string;
    uuid?: string;
}

/**
 * A collection of values returned by getCloud.
 */
export interface GetCloudResult {
    readonly autoscalePollingInterval: string;
    readonly awsConfigurations: outputs.GetCloudAwsConfiguration[];
    readonly azureConfigurations: outputs.GetCloudAzureConfiguration[];
    readonly cloudstackConfigurations: outputs.GetCloudCloudstackConfiguration[];
    readonly configpbAttributes: outputs.GetCloudConfigpbAttribute[];
    readonly customTags: outputs.GetCloudCustomTag[];
    readonly dhcpEnabled: string;
    readonly dnsProviderRef: string;
    readonly dnsResolutionOnSe: string;
    readonly dnsResolvers: outputs.GetCloudDnsResolver[];
    readonly dockerConfigurations: outputs.GetCloudDockerConfiguration[];
    readonly eastWestDnsProviderRef: string;
    readonly eastWestIpamProviderRef: string;
    readonly enableVipOnAllInterfaces: string;
    readonly enableVipStaticRoutes: string;
    readonly gcpConfigurations: outputs.GetCloudGcpConfiguration[];
    readonly id: string;
    readonly ip6AutocfgEnabled: string;
    readonly ipamProviderRef: string;
    readonly licenseTier: string;
    readonly licenseType: string;
    readonly linuxserverConfigurations: outputs.GetCloudLinuxserverConfiguration[];
    readonly maintenanceMode: string;
    readonly markers: outputs.GetCloudMarker[];
    readonly metricsPollingInterval: string;
    readonly mgmtIpV4Enabled: string;
    readonly mgmtIpV6Enabled: string;
    readonly mtu: string;
    readonly name: string;
    readonly nsxtConfigurations: outputs.GetCloudNsxtConfiguration[];
    readonly ntpConfigurations: outputs.GetCloudNtpConfiguration[];
    readonly objNamePrefix: string;
    readonly openstackConfigurations: outputs.GetCloudOpenstackConfiguration[];
    readonly preferStaticRoutes: string;
    readonly proxyConfigurations: outputs.GetCloudProxyConfiguration[];
    readonly rancherConfigurations: outputs.GetCloudRancherConfiguration[];
    readonly resolveFqdnToIpv6: string;
    readonly seGroupTemplateRef: string;
    readonly stateBasedDnsRegistration: string;
    readonly tenantRef: string;
    readonly uuid: string;
    readonly vcaConfigurations: outputs.GetCloudVcaConfiguration[];
    readonly vcenterConfigurations: outputs.GetCloudVcenterConfiguration[];
    readonly vmcDeployment: string;
    readonly vtype: string;
}
export function getCloudOutput(args?: GetCloudOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCloudResult> {
    return pulumi.output(args).apply((a: any) => getCloud(a, opts))
}

/**
 * A collection of arguments for invoking getCloud.
 */
export interface GetCloudOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}
