// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ActiongroupconfigConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface AlbservicesconfigAppSignatureConfig {
    appSignatureSyncInterval?: pulumi.Input<string>;
}

export interface AlbservicesconfigAssetContact {
    accountId?: pulumi.Input<string>;
    accountName?: pulumi.Input<string>;
    email: pulumi.Input<string>;
    managedAccounts?: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigAssetContactManagedAccount>[]>;
    name?: pulumi.Input<string>;
    phone?: pulumi.Input<string>;
}

export interface AlbservicesconfigAssetContactManagedAccount {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigAssetContactManagedAccountUser>[]>;
}

export interface AlbservicesconfigAssetContactManagedAccountUser {
    email: pulumi.Input<string>;
    name: pulumi.Input<string>;
    phone: pulumi.Input<string>;
}

export interface AlbservicesconfigCaseConfig {
    additionalEmails?: pulumi.Input<pulumi.Input<string>[]>;
    enableAutoCaseCreationOnControllerFailure?: pulumi.Input<string>;
    enableAutoCaseCreationOnSeFailure?: pulumi.Input<string>;
    enableCleanupOfAttachedFiles?: pulumi.Input<string>;
}

export interface AlbservicesconfigConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface AlbservicesconfigFeatureOptInStatus {
    enableAppsignatureSync?: pulumi.Input<string>;
    enableIpReputation?: pulumi.Input<string>;
    enablePulseCaseManagement?: pulumi.Input<string>;
    enablePulseInventory?: pulumi.Input<string>;
    enablePulseWafManagement?: pulumi.Input<string>;
    enableUserAgentDbSync?: pulumi.Input<string>;
}

export interface AlbservicesconfigInventoryConfig {
    enableSearchInfo?: pulumi.Input<string>;
}

export interface AlbservicesconfigIpReputationConfig {
    ipReputationFileObjectExpiryDuration?: pulumi.Input<string>;
    ipReputationSyncInterval?: pulumi.Input<string>;
}

export interface AlbservicesconfigSaasLicensingConfig {
    maxServiceUnits?: pulumi.Input<string>;
    reserveServiceUnits?: pulumi.Input<string>;
}

export interface AlbservicesconfigSessionConfig {
    sessionHeaders?: pulumi.Input<pulumi.Input<inputs.AlbservicesconfigSessionConfigSessionHeader>[]>;
}

export interface AlbservicesconfigSessionConfigSessionHeader {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AlbservicesconfigSplitProxyConfiguration {
    host: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface AlbservicesconfigTenantConfig {
    heartbeatInterval?: pulumi.Input<string>;
    licenseEscrowInterval?: pulumi.Input<string>;
    licenseExpiryInterval?: pulumi.Input<string>;
    licenseReconcileInterval?: pulumi.Input<string>;
    licenseRefreshInterval?: pulumi.Input<string>;
    licenseRenewalInterval?: pulumi.Input<string>;
    tokenRefreshInterval?: pulumi.Input<string>;
}

export interface AlbservicesconfigUserAgentDbConfig {
    allowedBatchSize?: pulumi.Input<string>;
}

export interface AlbservicesconfigWafConfig {
    enableAutoDownloadWafSignatures?: pulumi.Input<string>;
    enableWafSignaturesNotifications?: pulumi.Input<string>;
}

export interface AlbservicesfiledownloadConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface AlbservicesfiledownloadMetadata {
    checksum?: pulumi.Input<string>;
    checksumType?: pulumi.Input<string>;
    chunkSize?: pulumi.Input<string>;
    isMultiPartDownload: pulumi.Input<string>;
    signedUrl: pulumi.Input<string>;
    totalSize: pulumi.Input<string>;
}

export interface AlbservicesjobConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface AlbservicesjobEndTime {
    secs: pulumi.Input<string>;
    usecs: pulumi.Input<string>;
}

export interface AlbservicesjobParam {
    key?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AlbservicesjobStartTime {
    secs: pulumi.Input<string>;
    usecs: pulumi.Input<string>;
}

export interface AlbservicesjobStatusUpdateTime {
    secs: pulumi.Input<string>;
    usecs: pulumi.Input<string>;
}

export interface AlertconfigAlertRule {
    connAppLogRules?: pulumi.Input<pulumi.Input<inputs.AlertconfigAlertRuleConnAppLogRule>[]>;
    eventMatchFilter?: pulumi.Input<string>;
    metricsRules?: pulumi.Input<pulumi.Input<inputs.AlertconfigAlertRuleMetricsRule>[]>;
    operator?: pulumi.Input<string>;
    sysEventRules?: pulumi.Input<pulumi.Input<inputs.AlertconfigAlertRuleSysEventRule>[]>;
}

export interface AlertconfigAlertRuleConnAppLogRule {
    filterAction?: pulumi.Input<string>;
    filterString: pulumi.Input<string>;
}

export interface AlertconfigAlertRuleMetricsRule {
    duration?: pulumi.Input<string>;
    metricId?: pulumi.Input<string>;
    metricThresholds: pulumi.Input<pulumi.Input<inputs.AlertconfigAlertRuleMetricsRuleMetricThreshold>[]>;
}

export interface AlertconfigAlertRuleMetricsRuleMetricThreshold {
    comparator: pulumi.Input<string>;
    threshold?: pulumi.Input<string>;
}

export interface AlertconfigAlertRuleSysEventRule {
    eventDetails?: pulumi.Input<pulumi.Input<inputs.AlertconfigAlertRuleSysEventRuleEventDetail>[]>;
    eventId?: pulumi.Input<string>;
    notCond?: pulumi.Input<string>;
}

export interface AlertconfigAlertRuleSysEventRuleEventDetail {
    comparator: pulumi.Input<string>;
    eventDetailsKey: pulumi.Input<string>;
    eventDetailsValue: pulumi.Input<string>;
}

export interface AlertconfigConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface AlertemailconfigConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface AlertscriptconfigConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface AlertsyslogconfigConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface AlertsyslogconfigSyslogServer {
    anonAuth?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    pkiprofileRef?: pulumi.Input<string>;
    sslKeyAndCertificateRef?: pulumi.Input<string>;
    strictCertVerify?: pulumi.Input<string>;
    syslogServer: pulumi.Input<string>;
    syslogServerPort?: pulumi.Input<string>;
    tlsEnable?: pulumi.Input<string>;
    udp: pulumi.Input<string>;
}

export interface AnalyticsprofileClientLogConfig {
    enableSignificantLogCollection?: pulumi.Input<string>;
    filteredLogProcessing?: pulumi.Input<string>;
    nonSignificantLogProcessing?: pulumi.Input<string>;
    significantLogProcessing?: pulumi.Input<string>;
}

export interface AnalyticsprofileClientLogStreamingConfig {
    externalServer: pulumi.Input<string>;
    externalServerPort?: pulumi.Input<string>;
    formatConfigs?: pulumi.Input<pulumi.Input<inputs.AnalyticsprofileClientLogStreamingConfigFormatConfig>[]>;
    logTypesToSend?: pulumi.Input<string>;
    markerKeys?: pulumi.Input<pulumi.Input<inputs.AnalyticsprofileClientLogStreamingConfigMarkerKey>[]>;
    maxLogsPerSecond?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    syslogConfigs?: pulumi.Input<pulumi.Input<inputs.AnalyticsprofileClientLogStreamingConfigSyslogConfig>[]>;
}

export interface AnalyticsprofileClientLogStreamingConfigFormatConfig {
    format: pulumi.Input<string>;
    includedFields?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AnalyticsprofileClientLogStreamingConfigMarkerKey {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AnalyticsprofileClientLogStreamingConfigSyslogConfig {
    facility?: pulumi.Input<string>;
    filteredLogSeverity?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    msgId?: pulumi.Input<string>;
    nonSignificantLogSeverity?: pulumi.Input<string>;
    procId?: pulumi.Input<string>;
    significantLogSeverity?: pulumi.Input<string>;
}

export interface AnalyticsprofileConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface AnalyticsprofileLatencyAuditProp {
    connEstAuditMode?: pulumi.Input<string>;
    connEstThreshold?: pulumi.Input<string>;
    latencyAuditMode?: pulumi.Input<string>;
    latencyThreshold?: pulumi.Input<string>;
}

export interface AnalyticsprofileMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AnalyticsprofileRange {
    begin: pulumi.Input<string>;
    end: pulumi.Input<string>;
}

export interface AnalyticsprofileSensitiveLogProfile {
    headerFieldRules?: pulumi.Input<pulumi.Input<inputs.AnalyticsprofileSensitiveLogProfileHeaderFieldRule>[]>;
    uriQueryFieldRules?: pulumi.Input<pulumi.Input<inputs.AnalyticsprofileSensitiveLogProfileUriQueryFieldRule>[]>;
    wafFieldRules?: pulumi.Input<pulumi.Input<inputs.AnalyticsprofileSensitiveLogProfileWafFieldRule>[]>;
}

export interface AnalyticsprofileSensitiveLogProfileHeaderFieldRule {
    action?: pulumi.Input<string>;
    enabled?: pulumi.Input<string>;
    index?: pulumi.Input<string>;
    matches?: pulumi.Input<pulumi.Input<inputs.AnalyticsprofileSensitiveLogProfileHeaderFieldRuleMatch>[]>;
    name?: pulumi.Input<string>;
}

export interface AnalyticsprofileSensitiveLogProfileHeaderFieldRuleMatch {
    matchCriteria: pulumi.Input<string>;
    matchStrs?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AnalyticsprofileSensitiveLogProfileUriQueryFieldRule {
    action?: pulumi.Input<string>;
    enabled?: pulumi.Input<string>;
    index?: pulumi.Input<string>;
    matches?: pulumi.Input<pulumi.Input<inputs.AnalyticsprofileSensitiveLogProfileUriQueryFieldRuleMatch>[]>;
    name?: pulumi.Input<string>;
}

export interface AnalyticsprofileSensitiveLogProfileUriQueryFieldRuleMatch {
    matchCriteria: pulumi.Input<string>;
    matchStrs?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AnalyticsprofileSensitiveLogProfileWafFieldRule {
    action?: pulumi.Input<string>;
    enabled?: pulumi.Input<string>;
    index?: pulumi.Input<string>;
    matches?: pulumi.Input<pulumi.Input<inputs.AnalyticsprofileSensitiveLogProfileWafFieldRuleMatch>[]>;
    name?: pulumi.Input<string>;
}

export interface AnalyticsprofileSensitiveLogProfileWafFieldRuleMatch {
    matchCriteria: pulumi.Input<string>;
    matchStrs?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AnalyticsprofileTimeTrackerProp {
    beConnEstAuditMode?: pulumi.Input<string>;
    beConnEstThreshold?: pulumi.Input<string>;
    feConnEstAuditMode?: pulumi.Input<string>;
    feConnEstThreshold?: pulumi.Input<string>;
    ingressSigLog?: pulumi.Input<string>;
}

export interface ApplicationpersistenceprofileAppCookiePersistenceProfile {
    encryptionKey?: pulumi.Input<string>;
    prstHdrName: pulumi.Input<string>;
    timeout?: pulumi.Input<string>;
}

export interface ApplicationpersistenceprofileConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface ApplicationpersistenceprofileHdrPersistenceProfile {
    prstHdrName?: pulumi.Input<string>;
}

export interface ApplicationpersistenceprofileHttpCookiePersistenceProfile {
    alwaysSendCookie?: pulumi.Input<string>;
    cookieName?: pulumi.Input<string>;
    encryptionKey?: pulumi.Input<string>;
    httpOnly?: pulumi.Input<string>;
    isPersistentCookie?: pulumi.Input<string>;
    keys?: pulumi.Input<pulumi.Input<inputs.ApplicationpersistenceprofileHttpCookiePersistenceProfileKey>[]>;
    timeout?: pulumi.Input<string>;
}

export interface ApplicationpersistenceprofileHttpCookiePersistenceProfileKey {
    aesKey?: pulumi.Input<string>;
    hmacKey?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface ApplicationpersistenceprofileIpPersistenceProfile {
    ipMask?: pulumi.Input<string>;
    ipPersistentTimeout?: pulumi.Input<string>;
}

export interface ApplicationpersistenceprofileMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ApplicationprofileConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface ApplicationprofileDnsServiceProfile {
    aaaaEmptyResponse?: pulumi.Input<string>;
    adminEmail?: pulumi.Input<string>;
    clientDnsTcpRequestTimeout?: pulumi.Input<string>;
    closeTcpConnectionPostResponse?: pulumi.Input<string>;
    dnsOverTcpEnabled?: pulumi.Input<string>;
    dnsZones?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDnsServiceProfileDnsZone>[]>;
    domainNames?: pulumi.Input<pulumi.Input<string>[]>;
    ecsStrippingEnabled?: pulumi.Input<string>;
    edns?: pulumi.Input<string>;
    ednsClientSubnetPrefixLen?: pulumi.Input<string>;
    errorResponse?: pulumi.Input<string>;
    nameServer?: pulumi.Input<string>;
    negativeCachingTtl?: pulumi.Input<string>;
    numDnsIp?: pulumi.Input<string>;
    ttl?: pulumi.Input<string>;
}

export interface ApplicationprofileDnsServiceProfileDnsZone {
    adminEmail?: pulumi.Input<string>;
    domainName: pulumi.Input<string>;
    nameServer?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfile {
    dosProfiles?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileDosProfile>[]>;
    rlProfiles?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfile>[]>;
}

export interface ApplicationprofileDosRlProfileDosProfile {
    threshInfos?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileDosProfileThreshInfo>[]>;
    threshPeriod: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileDosProfileThreshInfo {
    attack: pulumi.Input<string>;
    maxValue: pulumi.Input<string>;
    minValue: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfile {
    clientIpConnectionsRateLimits?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpConnectionsRateLimit>[]>;
    clientIpFailedRequestsRateLimits?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpFailedRequestsRateLimit>[]>;
    clientIpRequestsRateLimits?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpRequestsRateLimit>[]>;
    clientIpScannersRequestsRateLimits?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpScannersRequestsRateLimit>[]>;
    clientIpToUriFailedRequestsRateLimits?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpToUriFailedRequestsRateLimit>[]>;
    clientIpToUriRequestsRateLimits?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpToUriRequestsRateLimit>[]>;
    customRequestsRateLimits?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileCustomRequestsRateLimit>[]>;
    httpHeaderRateLimits?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileHttpHeaderRateLimit>[]>;
    uriFailedRequestsRateLimits?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileUriFailedRequestsRateLimit>[]>;
    uriRequestsRateLimits?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileUriRequestsRateLimit>[]>;
    uriScannersRequestsRateLimits?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileUriScannersRequestsRateLimit>[]>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpConnectionsRateLimit {
    actions: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpConnectionsRateLimitAction>[]>;
    explicitTracking?: pulumi.Input<string>;
    fineGrain?: pulumi.Input<string>;
    httpCookie?: pulumi.Input<string>;
    httpHeader?: pulumi.Input<string>;
    rateLimiters?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpConnectionsRateLimitRateLimiter>[]>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpConnectionsRateLimitAction {
    files?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpConnectionsRateLimitActionFile>[]>;
    redirects?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpConnectionsRateLimitActionRedirect>[]>;
    statusCode?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpConnectionsRateLimitActionFile {
    contentType: pulumi.Input<string>;
    fileContent: pulumi.Input<string>;
    fileLength?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpConnectionsRateLimitActionRedirect {
    addString?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpConnectionsRateLimitActionRedirectHost>[]>;
    keepQuery?: pulumi.Input<string>;
    paths?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpConnectionsRateLimitActionRedirectPath>[]>;
    port?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    statusCode?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpConnectionsRateLimitActionRedirectHost {
    tokens: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpConnectionsRateLimitActionRedirectHostToken>[]>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpConnectionsRateLimitActionRedirectHostToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpConnectionsRateLimitActionRedirectPath {
    tokens: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpConnectionsRateLimitActionRedirectPathToken>[]>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpConnectionsRateLimitActionRedirectPathToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpConnectionsRateLimitRateLimiter {
    burstSz?: pulumi.Input<string>;
    count?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpFailedRequestsRateLimit {
    actions: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpFailedRequestsRateLimitAction>[]>;
    explicitTracking?: pulumi.Input<string>;
    fineGrain?: pulumi.Input<string>;
    httpCookie?: pulumi.Input<string>;
    httpHeader?: pulumi.Input<string>;
    rateLimiters?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpFailedRequestsRateLimitRateLimiter>[]>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpFailedRequestsRateLimitAction {
    files?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpFailedRequestsRateLimitActionFile>[]>;
    redirects?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpFailedRequestsRateLimitActionRedirect>[]>;
    statusCode?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpFailedRequestsRateLimitActionFile {
    contentType: pulumi.Input<string>;
    fileContent: pulumi.Input<string>;
    fileLength?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpFailedRequestsRateLimitActionRedirect {
    addString?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpFailedRequestsRateLimitActionRedirectHost>[]>;
    keepQuery?: pulumi.Input<string>;
    paths?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpFailedRequestsRateLimitActionRedirectPath>[]>;
    port?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    statusCode?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpFailedRequestsRateLimitActionRedirectHost {
    tokens: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpFailedRequestsRateLimitActionRedirectHostToken>[]>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpFailedRequestsRateLimitActionRedirectHostToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpFailedRequestsRateLimitActionRedirectPath {
    tokens: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpFailedRequestsRateLimitActionRedirectPathToken>[]>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpFailedRequestsRateLimitActionRedirectPathToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpFailedRequestsRateLimitRateLimiter {
    burstSz?: pulumi.Input<string>;
    count?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpRequestsRateLimit {
    actions: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpRequestsRateLimitAction>[]>;
    explicitTracking?: pulumi.Input<string>;
    fineGrain?: pulumi.Input<string>;
    httpCookie?: pulumi.Input<string>;
    httpHeader?: pulumi.Input<string>;
    rateLimiters?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpRequestsRateLimitRateLimiter>[]>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpRequestsRateLimitAction {
    files?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpRequestsRateLimitActionFile>[]>;
    redirects?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpRequestsRateLimitActionRedirect>[]>;
    statusCode?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpRequestsRateLimitActionFile {
    contentType: pulumi.Input<string>;
    fileContent: pulumi.Input<string>;
    fileLength?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpRequestsRateLimitActionRedirect {
    addString?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpRequestsRateLimitActionRedirectHost>[]>;
    keepQuery?: pulumi.Input<string>;
    paths?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpRequestsRateLimitActionRedirectPath>[]>;
    port?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    statusCode?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpRequestsRateLimitActionRedirectHost {
    tokens: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpRequestsRateLimitActionRedirectHostToken>[]>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpRequestsRateLimitActionRedirectHostToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpRequestsRateLimitActionRedirectPath {
    tokens: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpRequestsRateLimitActionRedirectPathToken>[]>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpRequestsRateLimitActionRedirectPathToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpRequestsRateLimitRateLimiter {
    burstSz?: pulumi.Input<string>;
    count?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpScannersRequestsRateLimit {
    actions: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpScannersRequestsRateLimitAction>[]>;
    explicitTracking?: pulumi.Input<string>;
    fineGrain?: pulumi.Input<string>;
    httpCookie?: pulumi.Input<string>;
    httpHeader?: pulumi.Input<string>;
    rateLimiters?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpScannersRequestsRateLimitRateLimiter>[]>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpScannersRequestsRateLimitAction {
    files?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpScannersRequestsRateLimitActionFile>[]>;
    redirects?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpScannersRequestsRateLimitActionRedirect>[]>;
    statusCode?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpScannersRequestsRateLimitActionFile {
    contentType: pulumi.Input<string>;
    fileContent: pulumi.Input<string>;
    fileLength?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpScannersRequestsRateLimitActionRedirect {
    addString?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpScannersRequestsRateLimitActionRedirectHost>[]>;
    keepQuery?: pulumi.Input<string>;
    paths?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpScannersRequestsRateLimitActionRedirectPath>[]>;
    port?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    statusCode?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpScannersRequestsRateLimitActionRedirectHost {
    tokens: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpScannersRequestsRateLimitActionRedirectHostToken>[]>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpScannersRequestsRateLimitActionRedirectHostToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpScannersRequestsRateLimitActionRedirectPath {
    tokens: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpScannersRequestsRateLimitActionRedirectPathToken>[]>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpScannersRequestsRateLimitActionRedirectPathToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpScannersRequestsRateLimitRateLimiter {
    burstSz?: pulumi.Input<string>;
    count?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpToUriFailedRequestsRateLimit {
    actions: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpToUriFailedRequestsRateLimitAction>[]>;
    explicitTracking?: pulumi.Input<string>;
    fineGrain?: pulumi.Input<string>;
    httpCookie?: pulumi.Input<string>;
    httpHeader?: pulumi.Input<string>;
    rateLimiters?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpToUriFailedRequestsRateLimitRateLimiter>[]>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpToUriFailedRequestsRateLimitAction {
    files?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpToUriFailedRequestsRateLimitActionFile>[]>;
    redirects?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpToUriFailedRequestsRateLimitActionRedirect>[]>;
    statusCode?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpToUriFailedRequestsRateLimitActionFile {
    contentType: pulumi.Input<string>;
    fileContent: pulumi.Input<string>;
    fileLength?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpToUriFailedRequestsRateLimitActionRedirect {
    addString?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpToUriFailedRequestsRateLimitActionRedirectHost>[]>;
    keepQuery?: pulumi.Input<string>;
    paths?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpToUriFailedRequestsRateLimitActionRedirectPath>[]>;
    port?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    statusCode?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpToUriFailedRequestsRateLimitActionRedirectHost {
    tokens: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpToUriFailedRequestsRateLimitActionRedirectHostToken>[]>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpToUriFailedRequestsRateLimitActionRedirectHostToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpToUriFailedRequestsRateLimitActionRedirectPath {
    tokens: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpToUriFailedRequestsRateLimitActionRedirectPathToken>[]>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpToUriFailedRequestsRateLimitActionRedirectPathToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpToUriFailedRequestsRateLimitRateLimiter {
    burstSz?: pulumi.Input<string>;
    count?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpToUriRequestsRateLimit {
    actions: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpToUriRequestsRateLimitAction>[]>;
    explicitTracking?: pulumi.Input<string>;
    fineGrain?: pulumi.Input<string>;
    httpCookie?: pulumi.Input<string>;
    httpHeader?: pulumi.Input<string>;
    rateLimiters?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpToUriRequestsRateLimitRateLimiter>[]>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpToUriRequestsRateLimitAction {
    files?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpToUriRequestsRateLimitActionFile>[]>;
    redirects?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpToUriRequestsRateLimitActionRedirect>[]>;
    statusCode?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpToUriRequestsRateLimitActionFile {
    contentType: pulumi.Input<string>;
    fileContent: pulumi.Input<string>;
    fileLength?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpToUriRequestsRateLimitActionRedirect {
    addString?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpToUriRequestsRateLimitActionRedirectHost>[]>;
    keepQuery?: pulumi.Input<string>;
    paths?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpToUriRequestsRateLimitActionRedirectPath>[]>;
    port?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    statusCode?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpToUriRequestsRateLimitActionRedirectHost {
    tokens: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpToUriRequestsRateLimitActionRedirectHostToken>[]>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpToUriRequestsRateLimitActionRedirectHostToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpToUriRequestsRateLimitActionRedirectPath {
    tokens: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileClientIpToUriRequestsRateLimitActionRedirectPathToken>[]>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpToUriRequestsRateLimitActionRedirectPathToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileClientIpToUriRequestsRateLimitRateLimiter {
    burstSz?: pulumi.Input<string>;
    count?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileCustomRequestsRateLimit {
    actions: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileCustomRequestsRateLimitAction>[]>;
    explicitTracking?: pulumi.Input<string>;
    fineGrain?: pulumi.Input<string>;
    httpCookie?: pulumi.Input<string>;
    httpHeader?: pulumi.Input<string>;
    rateLimiters?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileCustomRequestsRateLimitRateLimiter>[]>;
}

export interface ApplicationprofileDosRlProfileRlProfileCustomRequestsRateLimitAction {
    files?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileCustomRequestsRateLimitActionFile>[]>;
    redirects?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileCustomRequestsRateLimitActionRedirect>[]>;
    statusCode?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileCustomRequestsRateLimitActionFile {
    contentType: pulumi.Input<string>;
    fileContent: pulumi.Input<string>;
    fileLength?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileCustomRequestsRateLimitActionRedirect {
    addString?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileCustomRequestsRateLimitActionRedirectHost>[]>;
    keepQuery?: pulumi.Input<string>;
    paths?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileCustomRequestsRateLimitActionRedirectPath>[]>;
    port?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    statusCode?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileCustomRequestsRateLimitActionRedirectHost {
    tokens: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileCustomRequestsRateLimitActionRedirectHostToken>[]>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileCustomRequestsRateLimitActionRedirectHostToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileCustomRequestsRateLimitActionRedirectPath {
    tokens: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileCustomRequestsRateLimitActionRedirectPathToken>[]>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileCustomRequestsRateLimitActionRedirectPathToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileCustomRequestsRateLimitRateLimiter {
    burstSz?: pulumi.Input<string>;
    count?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileHttpHeaderRateLimit {
    actions: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileHttpHeaderRateLimitAction>[]>;
    explicitTracking?: pulumi.Input<string>;
    fineGrain?: pulumi.Input<string>;
    httpCookie?: pulumi.Input<string>;
    httpHeader?: pulumi.Input<string>;
    rateLimiters?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileHttpHeaderRateLimitRateLimiter>[]>;
}

export interface ApplicationprofileDosRlProfileRlProfileHttpHeaderRateLimitAction {
    files?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileHttpHeaderRateLimitActionFile>[]>;
    redirects?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileHttpHeaderRateLimitActionRedirect>[]>;
    statusCode?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileHttpHeaderRateLimitActionFile {
    contentType: pulumi.Input<string>;
    fileContent: pulumi.Input<string>;
    fileLength?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileHttpHeaderRateLimitActionRedirect {
    addString?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileHttpHeaderRateLimitActionRedirectHost>[]>;
    keepQuery?: pulumi.Input<string>;
    paths?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileHttpHeaderRateLimitActionRedirectPath>[]>;
    port?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    statusCode?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileHttpHeaderRateLimitActionRedirectHost {
    tokens: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileHttpHeaderRateLimitActionRedirectHostToken>[]>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileHttpHeaderRateLimitActionRedirectHostToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileHttpHeaderRateLimitActionRedirectPath {
    tokens: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileHttpHeaderRateLimitActionRedirectPathToken>[]>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileHttpHeaderRateLimitActionRedirectPathToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileHttpHeaderRateLimitRateLimiter {
    burstSz?: pulumi.Input<string>;
    count?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileUriFailedRequestsRateLimit {
    actions: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileUriFailedRequestsRateLimitAction>[]>;
    explicitTracking?: pulumi.Input<string>;
    fineGrain?: pulumi.Input<string>;
    httpCookie?: pulumi.Input<string>;
    httpHeader?: pulumi.Input<string>;
    rateLimiters?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileUriFailedRequestsRateLimitRateLimiter>[]>;
}

export interface ApplicationprofileDosRlProfileRlProfileUriFailedRequestsRateLimitAction {
    files?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileUriFailedRequestsRateLimitActionFile>[]>;
    redirects?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileUriFailedRequestsRateLimitActionRedirect>[]>;
    statusCode?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileUriFailedRequestsRateLimitActionFile {
    contentType: pulumi.Input<string>;
    fileContent: pulumi.Input<string>;
    fileLength?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileUriFailedRequestsRateLimitActionRedirect {
    addString?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileUriFailedRequestsRateLimitActionRedirectHost>[]>;
    keepQuery?: pulumi.Input<string>;
    paths?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileUriFailedRequestsRateLimitActionRedirectPath>[]>;
    port?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    statusCode?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileUriFailedRequestsRateLimitActionRedirectHost {
    tokens: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileUriFailedRequestsRateLimitActionRedirectHostToken>[]>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileUriFailedRequestsRateLimitActionRedirectHostToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileUriFailedRequestsRateLimitActionRedirectPath {
    tokens: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileUriFailedRequestsRateLimitActionRedirectPathToken>[]>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileUriFailedRequestsRateLimitActionRedirectPathToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileUriFailedRequestsRateLimitRateLimiter {
    burstSz?: pulumi.Input<string>;
    count?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileUriRequestsRateLimit {
    actions: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileUriRequestsRateLimitAction>[]>;
    explicitTracking?: pulumi.Input<string>;
    fineGrain?: pulumi.Input<string>;
    httpCookie?: pulumi.Input<string>;
    httpHeader?: pulumi.Input<string>;
    rateLimiters?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileUriRequestsRateLimitRateLimiter>[]>;
}

export interface ApplicationprofileDosRlProfileRlProfileUriRequestsRateLimitAction {
    files?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileUriRequestsRateLimitActionFile>[]>;
    redirects?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileUriRequestsRateLimitActionRedirect>[]>;
    statusCode?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileUriRequestsRateLimitActionFile {
    contentType: pulumi.Input<string>;
    fileContent: pulumi.Input<string>;
    fileLength?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileUriRequestsRateLimitActionRedirect {
    addString?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileUriRequestsRateLimitActionRedirectHost>[]>;
    keepQuery?: pulumi.Input<string>;
    paths?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileUriRequestsRateLimitActionRedirectPath>[]>;
    port?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    statusCode?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileUriRequestsRateLimitActionRedirectHost {
    tokens: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileUriRequestsRateLimitActionRedirectHostToken>[]>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileUriRequestsRateLimitActionRedirectHostToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileUriRequestsRateLimitActionRedirectPath {
    tokens: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileUriRequestsRateLimitActionRedirectPathToken>[]>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileUriRequestsRateLimitActionRedirectPathToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileUriRequestsRateLimitRateLimiter {
    burstSz?: pulumi.Input<string>;
    count?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileUriScannersRequestsRateLimit {
    actions: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileUriScannersRequestsRateLimitAction>[]>;
    explicitTracking?: pulumi.Input<string>;
    fineGrain?: pulumi.Input<string>;
    httpCookie?: pulumi.Input<string>;
    httpHeader?: pulumi.Input<string>;
    rateLimiters?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileUriScannersRequestsRateLimitRateLimiter>[]>;
}

export interface ApplicationprofileDosRlProfileRlProfileUriScannersRequestsRateLimitAction {
    files?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileUriScannersRequestsRateLimitActionFile>[]>;
    redirects?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileUriScannersRequestsRateLimitActionRedirect>[]>;
    statusCode?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileUriScannersRequestsRateLimitActionFile {
    contentType: pulumi.Input<string>;
    fileContent: pulumi.Input<string>;
    fileLength?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileUriScannersRequestsRateLimitActionRedirect {
    addString?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileUriScannersRequestsRateLimitActionRedirectHost>[]>;
    keepQuery?: pulumi.Input<string>;
    paths?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileUriScannersRequestsRateLimitActionRedirectPath>[]>;
    port?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    statusCode?: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileUriScannersRequestsRateLimitActionRedirectHost {
    tokens: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileUriScannersRequestsRateLimitActionRedirectHostToken>[]>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileUriScannersRequestsRateLimitActionRedirectHostToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileUriScannersRequestsRateLimitActionRedirectPath {
    tokens: pulumi.Input<pulumi.Input<inputs.ApplicationprofileDosRlProfileRlProfileUriScannersRequestsRateLimitActionRedirectPathToken>[]>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileUriScannersRequestsRateLimitActionRedirectPathToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileDosRlProfileRlProfileUriScannersRequestsRateLimitRateLimiter {
    burstSz?: pulumi.Input<string>;
    count?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
}

export interface ApplicationprofileHttpProfile {
    allowDotsInHeaderName?: pulumi.Input<string>;
    cacheConfigs?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileHttpProfileCacheConfig>[]>;
    clientBodyTimeout?: pulumi.Input<string>;
    clientHeaderTimeout?: pulumi.Input<string>;
    clientMaxBodySize?: pulumi.Input<string>;
    clientMaxHeaderSize?: pulumi.Input<string>;
    clientMaxRequestSize?: pulumi.Input<string>;
    closeServerSideConnectionOnError?: pulumi.Input<string>;
    collectClientTlsFingerprint?: pulumi.Input<string>;
    compressionProfiles?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileHttpProfileCompressionProfile>[]>;
    connectionMultiplexingEnabled?: pulumi.Input<string>;
    detectNtlmApp?: pulumi.Input<string>;
    disableKeepalivePostsMsie6?: pulumi.Input<string>;
    disableSniHostnameCheck?: pulumi.Input<string>;
    enableChunkMerge?: pulumi.Input<string>;
    enableFireAndForget?: pulumi.Input<string>;
    enableRequestBodyBuffering?: pulumi.Input<string>;
    enableRequestBodyMetrics?: pulumi.Input<string>;
    fwdCloseHdrForBoundConnections?: pulumi.Input<string>;
    hstsEnabled?: pulumi.Input<string>;
    hstsMaxAge?: pulumi.Input<string>;
    hstsSubdomainsEnabled?: pulumi.Input<string>;
    http2Profiles?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileHttpProfileHttp2Profile>[]>;
    httpToHttps?: pulumi.Input<string>;
    httpUpstreamBufferSize?: pulumi.Input<string>;
    httponlyEnabled?: pulumi.Input<string>;
    keepaliveHeader?: pulumi.Input<string>;
    keepaliveTimeout?: pulumi.Input<string>;
    maxBadRpsCip?: pulumi.Input<string>;
    maxBadRpsCipUri?: pulumi.Input<string>;
    maxBadRpsUri?: pulumi.Input<string>;
    maxHeaderCount?: pulumi.Input<string>;
    maxKeepaliveRequests?: pulumi.Input<string>;
    maxResponseHeadersSize?: pulumi.Input<string>;
    maxRpsCip?: pulumi.Input<string>;
    maxRpsCipUri?: pulumi.Input<string>;
    maxRpsUnknownCip?: pulumi.Input<string>;
    maxRpsUnknownUri?: pulumi.Input<string>;
    maxRpsUri?: pulumi.Input<string>;
    passThroughXAccelHeaders?: pulumi.Input<string>;
    pkiProfileRef?: pulumi.Input<string>;
    postAcceptTimeout?: pulumi.Input<string>;
    resetConnHttpOnSslPort?: pulumi.Input<string>;
    respondWith100Continue?: pulumi.Input<string>;
    secureCookieEnabled?: pulumi.Input<string>;
    serverSideRedirectToHttps?: pulumi.Input<string>;
    sessionConfigs?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileHttpProfileSessionConfig>[]>;
    sslClientCertificateActions?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileHttpProfileSslClientCertificateAction>[]>;
    sslClientCertificateMode?: pulumi.Input<string>;
    trueClientIps?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileHttpProfileTrueClientIp>[]>;
    useAppKeepaliveTimeout?: pulumi.Input<string>;
    useTrueClientIp?: pulumi.Input<string>;
    websocketsEnabled?: pulumi.Input<string>;
    xForwardedProtoEnabled?: pulumi.Input<string>;
    xffAlternateName?: pulumi.Input<string>;
    xffEnabled?: pulumi.Input<string>;
    xffUpdate?: pulumi.Input<string>;
}

export interface ApplicationprofileHttpProfileCacheConfig {
    ageHeader?: pulumi.Input<string>;
    aggressive?: pulumi.Input<string>;
    dateHeader?: pulumi.Input<string>;
    defaultExpire?: pulumi.Input<string>;
    enabled?: pulumi.Input<string>;
    heuristicExpire?: pulumi.Input<string>;
    ignoreRequestCacheControl?: pulumi.Input<string>;
    maxCacheSize?: pulumi.Input<string>;
    maxObjectSize?: pulumi.Input<string>;
    mimeTypesBlockGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    mimeTypesBlockLists?: pulumi.Input<pulumi.Input<string>[]>;
    mimeTypesGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    mimeTypesLists?: pulumi.Input<pulumi.Input<string>[]>;
    minObjectSize?: pulumi.Input<string>;
    queryCacheable?: pulumi.Input<string>;
    uriNonCacheables?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileHttpProfileCacheConfigUriNonCacheable>[]>;
    xcacheHeader?: pulumi.Input<string>;
}

export interface ApplicationprofileHttpProfileCacheConfigUriNonCacheable {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    matchDecodedString?: pulumi.Input<string>;
    matchStrs?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ApplicationprofileHttpProfileCompressionProfile {
    bufNum?: pulumi.Input<string>;
    bufSize?: pulumi.Input<string>;
    compressibleContentRef?: pulumi.Input<string>;
    compression: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileHttpProfileCompressionProfileFilter>[]>;
    hashSize?: pulumi.Input<string>;
    levelAggressive?: pulumi.Input<string>;
    levelNormal?: pulumi.Input<string>;
    maxLowRtt?: pulumi.Input<string>;
    minHighRtt?: pulumi.Input<string>;
    minLength?: pulumi.Input<string>;
    mobileStrRef?: pulumi.Input<string>;
    removeAcceptEncodingHeader: pulumi.Input<string>;
    type: pulumi.Input<string>;
    windowSize?: pulumi.Input<string>;
}

export interface ApplicationprofileHttpProfileCompressionProfileFilter {
    devicesRef?: pulumi.Input<string>;
    index: pulumi.Input<string>;
    ipAddrPrefixes?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileHttpProfileCompressionProfileFilterIpAddrPrefix>[]>;
    ipAddrRanges?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileHttpProfileCompressionProfileFilterIpAddrRange>[]>;
    ipAddrs?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileHttpProfileCompressionProfileFilterIpAddr>[]>;
    ipAddrsRef?: pulumi.Input<string>;
    level: pulumi.Input<string>;
    match?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    userAgents?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ApplicationprofileHttpProfileCompressionProfileFilterIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileHttpProfileCompressionProfileFilterIpAddrPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.ApplicationprofileHttpProfileCompressionProfileFilterIpAddrPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface ApplicationprofileHttpProfileCompressionProfileFilterIpAddrPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileHttpProfileCompressionProfileFilterIpAddrRange {
    begins: pulumi.Input<pulumi.Input<inputs.ApplicationprofileHttpProfileCompressionProfileFilterIpAddrRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.ApplicationprofileHttpProfileCompressionProfileFilterIpAddrRangeEnd>[]>;
}

export interface ApplicationprofileHttpProfileCompressionProfileFilterIpAddrRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileHttpProfileCompressionProfileFilterIpAddrRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ApplicationprofileHttpProfileHttp2Profile {
    enableHttp2ServerPush?: pulumi.Input<string>;
    http2InitialWindowSize?: pulumi.Input<string>;
    maxHttp2ConcurrentPushesPerConnection?: pulumi.Input<string>;
    maxHttp2ConcurrentStreamsPerConnection?: pulumi.Input<string>;
    maxHttp2ControlFramesPerConnection?: pulumi.Input<string>;
    maxHttp2EmptyDataFramesPerConnection?: pulumi.Input<string>;
    maxHttp2HeaderFieldSize?: pulumi.Input<string>;
    maxHttp2QueuedFramesToClientPerConnection?: pulumi.Input<string>;
    maxHttp2RequestsPerConnection?: pulumi.Input<string>;
}

export interface ApplicationprofileHttpProfileSessionConfig {
    sessionCookieHttponly?: pulumi.Input<string>;
    sessionCookieName?: pulumi.Input<string>;
    sessionCookieSamesite?: pulumi.Input<string>;
    sessionCookieSecure?: pulumi.Input<string>;
    sessionEstablishmentTimeout?: pulumi.Input<string>;
    sessionIdleTimeout?: pulumi.Input<string>;
    sessionMaximumTimeout?: pulumi.Input<string>;
}

export interface ApplicationprofileHttpProfileSslClientCertificateAction {
    closeConnection?: pulumi.Input<string>;
    headers?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileHttpProfileSslClientCertificateActionHeader>[]>;
}

export interface ApplicationprofileHttpProfileSslClientCertificateActionHeader {
    requestHeader?: pulumi.Input<string>;
    requestHeaderValue?: pulumi.Input<string>;
}

export interface ApplicationprofileHttpProfileTrueClientIp {
    direction?: pulumi.Input<string>;
    headers?: pulumi.Input<pulumi.Input<string>[]>;
    indexInHeader?: pulumi.Input<string>;
}

export interface ApplicationprofileL4SslProfile {
    sslStreamIdleTimeout?: pulumi.Input<string>;
}

export interface ApplicationprofileMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ApplicationprofileSipServiceProfile {
    transactionTimeout?: pulumi.Input<string>;
}

export interface ApplicationprofileTcpAppProfile {
    ftpProfiles?: pulumi.Input<pulumi.Input<inputs.ApplicationprofileTcpAppProfileFtpProfile>[]>;
    pkiProfileRef?: pulumi.Input<string>;
    proxyProtocolEnabled?: pulumi.Input<string>;
    proxyProtocolVersion?: pulumi.Input<string>;
    sslClientCertificateMode?: pulumi.Input<string>;
}

export interface ApplicationprofileTcpAppProfileFtpProfile {
    deactivateActive?: pulumi.Input<string>;
    deactivatePassive?: pulumi.Input<string>;
}

export interface AuthmappingprofileConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface AuthmappingprofileMappingRule {
    assignPolicy?: pulumi.Input<string>;
    assignRole?: pulumi.Input<string>;
    assignTenant?: pulumi.Input<string>;
    assignUserprofile?: pulumi.Input<string>;
    attributeMatches?: pulumi.Input<pulumi.Input<inputs.AuthmappingprofileMappingRuleAttributeMatch>[]>;
    defaultTenantRef?: pulumi.Input<string>;
    groupMatches?: pulumi.Input<pulumi.Input<inputs.AuthmappingprofileMappingRuleGroupMatch>[]>;
    index: pulumi.Input<string>;
    isSuperuser?: pulumi.Input<string>;
    policyAttributeName?: pulumi.Input<string>;
    roleAttributeName?: pulumi.Input<string>;
    roleRefs?: pulumi.Input<pulumi.Input<string>[]>;
    tenantAttributeName?: pulumi.Input<string>;
    tenantRefs?: pulumi.Input<pulumi.Input<string>[]>;
    userprofileAttributeName?: pulumi.Input<string>;
    userprofileRef?: pulumi.Input<string>;
}

export interface AuthmappingprofileMappingRuleAttributeMatch {
    criteria: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AuthmappingprofileMappingRuleGroupMatch {
    criteria: pulumi.Input<string>;
    groups?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AuthprofileConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface AuthprofileHttp {
    cacheExpirationTime?: pulumi.Input<string>;
    requestHeader?: pulumi.Input<string>;
    requireUserGroups?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AuthprofileLdap {
    baseDn?: pulumi.Input<string>;
    bindAsAdministrator?: pulumi.Input<string>;
    emailAttribute?: pulumi.Input<string>;
    fullNameAttribute?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    securityMode?: pulumi.Input<string>;
    servers: pulumi.Input<pulumi.Input<string>[]>;
    settings?: pulumi.Input<pulumi.Input<inputs.AuthprofileLdapSetting>[]>;
    userBinds?: pulumi.Input<pulumi.Input<inputs.AuthprofileLdapUserBind>[]>;
}

export interface AuthprofileLdapSetting {
    adminBindDn: pulumi.Input<string>;
    groupFilter?: pulumi.Input<string>;
    groupMemberAttribute?: pulumi.Input<string>;
    groupMemberIsFullDn?: pulumi.Input<string>;
    groupSearchDn?: pulumi.Input<string>;
    groupSearchScope?: pulumi.Input<string>;
    ignoreReferrals?: pulumi.Input<string>;
    password: pulumi.Input<string>;
    userAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    userIdAttribute: pulumi.Input<string>;
    userSearchDn?: pulumi.Input<string>;
    userSearchScope?: pulumi.Input<string>;
}

export interface AuthprofileLdapUserBind {
    dnTemplate: pulumi.Input<string>;
    token?: pulumi.Input<string>;
    userAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    userIdAttribute: pulumi.Input<string>;
}

export interface AuthprofileMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AuthprofileOauthProfile {
    authorizationEndpoint: pulumi.Input<string>;
    endSessionEndpoint?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    introspectionEndpoint?: pulumi.Input<string>;
    issuer?: pulumi.Input<string>;
    jwksTimeout?: pulumi.Input<string>;
    jwksUri?: pulumi.Input<string>;
    oauthControllerSettings?: pulumi.Input<pulumi.Input<inputs.AuthprofileOauthProfileOauthControllerSetting>[]>;
    oauthProfileType?: pulumi.Input<string>;
    oauthProvider?: pulumi.Input<string>;
    oauthRespBufferSz?: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
    poolRef?: pulumi.Input<string>;
    redirectUri?: pulumi.Input<string>;
    serviceId?: pulumi.Input<string>;
    serviceName?: pulumi.Input<string>;
    tokenEndpoint?: pulumi.Input<string>;
    userinfoEndpoint?: pulumi.Input<string>;
}

export interface AuthprofileOauthProfileOauthControllerSetting {
    clientId: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    oidcConfigs?: pulumi.Input<pulumi.Input<inputs.AuthprofileOauthProfileOauthControllerSettingOidcConfig>[]>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AuthprofileOauthProfileOauthControllerSettingOidcConfig {
    oidcEnable?: pulumi.Input<string>;
    profile?: pulumi.Input<string>;
    userinfo?: pulumi.Input<string>;
}

export interface AuthprofileSaml {
    idps: pulumi.Input<pulumi.Input<inputs.AuthprofileSamlIdp>[]>;
    sps: pulumi.Input<pulumi.Input<inputs.AuthprofileSamlSp>[]>;
}

export interface AuthprofileSamlIdp {
    metaDataDownloadInterval?: pulumi.Input<string>;
    metadata?: pulumi.Input<string>;
    metadataUrl?: pulumi.Input<string>;
    periodicDownload?: pulumi.Input<string>;
}

export interface AuthprofileSamlSp {
    fqdn?: pulumi.Input<string>;
    orgDisplayName?: pulumi.Input<string>;
    orgName?: pulumi.Input<string>;
    orgUrl?: pulumi.Input<string>;
    samlEntityType?: pulumi.Input<string>;
    spNodes?: pulumi.Input<pulumi.Input<inputs.AuthprofileSamlSpSpNode>[]>;
    techContactEmail?: pulumi.Input<string>;
    techContactName?: pulumi.Input<string>;
}

export interface AuthprofileSamlSpSpNode {
    entityId?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    signingSslKeyAndCertificateRef?: pulumi.Input<string>;
    singleSignonUrl?: pulumi.Input<string>;
}

export interface AuthprofileTacacsPlus {
    authorizationAttrs?: pulumi.Input<pulumi.Input<inputs.AuthprofileTacacsPlusAuthorizationAttr>[]>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    servers: pulumi.Input<pulumi.Input<string>[]>;
    service?: pulumi.Input<string>;
}

export interface AuthprofileTacacsPlusAuthorizationAttr {
    mandatory?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AutoscalelaunchconfigConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface AutoscalelaunchconfigMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AutoscalelaunchconfigMeso {
    force?: pulumi.Input<string>;
}

export interface AutoscalelaunchconfigOpenstack {
    heatScaleDownUrl?: pulumi.Input<string>;
    heatScaleUpUrl?: pulumi.Input<string>;
}

export interface AvailabilityzoneConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface BackupconfigurationConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface BotdetectionpolicyAllowList {
    rules?: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRule>[]>;
}

export interface BotdetectionpolicyAllowListRule {
    action: pulumi.Input<string>;
    conditions: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleCondition>[]>;
    index: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface BotdetectionpolicyAllowListRuleCondition {
    botDetectionResults?: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleConditionBotDetectionResult>[]>;
    clientIps?: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleConditionClientIp>[]>;
    cookies?: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleConditionCookie>[]>;
    geoMatches?: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleConditionGeoMatch>[]>;
    hdrs?: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleConditionHdr>[]>;
    hostHdrs?: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleConditionHostHdr>[]>;
    ipReputationTypes?: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleConditionIpReputationType>[]>;
    methods?: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleConditionMethod>[]>;
    paths?: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleConditionPath>[]>;
    protocols?: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleConditionProtocol>[]>;
    queries?: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleConditionQuery>[]>;
    sourceIps?: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleConditionSourceIp>[]>;
    tlsFingerprintMatches?: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleConditionTlsFingerprintMatch>[]>;
    versions?: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleConditionVersion>[]>;
    vsPorts?: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleConditionVsPort>[]>;
}

export interface BotdetectionpolicyAllowListRuleConditionBotDetectionResult {
    classifications?: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleConditionBotDetectionResultClassification>[]>;
    matchOperation: pulumi.Input<string>;
}

export interface BotdetectionpolicyAllowListRuleConditionBotDetectionResultClassification {
    type: pulumi.Input<string>;
    userDefinedType?: pulumi.Input<string>;
}

export interface BotdetectionpolicyAllowListRuleConditionClientIp {
    addrs?: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleConditionClientIpAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleConditionClientIpPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleConditionClientIpRange>[]>;
}

export interface BotdetectionpolicyAllowListRuleConditionClientIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface BotdetectionpolicyAllowListRuleConditionClientIpPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleConditionClientIpPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface BotdetectionpolicyAllowListRuleConditionClientIpPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface BotdetectionpolicyAllowListRuleConditionClientIpRange {
    begins: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleConditionClientIpRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleConditionClientIpRangeEnd>[]>;
}

export interface BotdetectionpolicyAllowListRuleConditionClientIpRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface BotdetectionpolicyAllowListRuleConditionClientIpRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface BotdetectionpolicyAllowListRuleConditionCookie {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    name: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface BotdetectionpolicyAllowListRuleConditionGeoMatch {
    attribute: pulumi.Input<string>;
    matchOperation: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BotdetectionpolicyAllowListRuleConditionHdr {
    hdr: pulumi.Input<string>;
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BotdetectionpolicyAllowListRuleConditionHostHdr {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BotdetectionpolicyAllowListRuleConditionIpReputationType {
    matchOperation: pulumi.Input<string>;
    reputationTypes: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BotdetectionpolicyAllowListRuleConditionMethod {
    matchCriteria: pulumi.Input<string>;
    methods: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BotdetectionpolicyAllowListRuleConditionPath {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    matchDecodedString?: pulumi.Input<string>;
    matchStrs?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BotdetectionpolicyAllowListRuleConditionProtocol {
    matchCriteria: pulumi.Input<string>;
    protocols: pulumi.Input<string>;
}

export interface BotdetectionpolicyAllowListRuleConditionQuery {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    matchDecodedString?: pulumi.Input<string>;
    matchStrs?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BotdetectionpolicyAllowListRuleConditionSourceIp {
    addrs?: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleConditionSourceIpAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleConditionSourceIpPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleConditionSourceIpRange>[]>;
}

export interface BotdetectionpolicyAllowListRuleConditionSourceIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface BotdetectionpolicyAllowListRuleConditionSourceIpPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleConditionSourceIpPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface BotdetectionpolicyAllowListRuleConditionSourceIpPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface BotdetectionpolicyAllowListRuleConditionSourceIpRange {
    begins: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleConditionSourceIpRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.BotdetectionpolicyAllowListRuleConditionSourceIpRangeEnd>[]>;
}

export interface BotdetectionpolicyAllowListRuleConditionSourceIpRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface BotdetectionpolicyAllowListRuleConditionSourceIpRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface BotdetectionpolicyAllowListRuleConditionTlsFingerprintMatch {
    fingerprints?: pulumi.Input<pulumi.Input<string>[]>;
    matchOperation: pulumi.Input<string>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BotdetectionpolicyAllowListRuleConditionVersion {
    matchCriteria: pulumi.Input<string>;
    versions: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BotdetectionpolicyAllowListRuleConditionVsPort {
    matchCriteria: pulumi.Input<string>;
    ports: pulumi.Input<pulumi.Input<number>[]>;
}

export interface BotdetectionpolicyClientBehaviorDetector {
    badRequestPercent?: pulumi.Input<string>;
    enabled?: pulumi.Input<string>;
    minimumRequests?: pulumi.Input<string>;
    minimumRequestsWithReferer?: pulumi.Input<string>;
}

export interface BotdetectionpolicyIpLocationDetector {
    enabled?: pulumi.Input<string>;
    ipLocationDbRef?: pulumi.Input<string>;
    systemCloudProvidersRef?: pulumi.Input<string>;
    systemSearchEnginesRef?: pulumi.Input<string>;
}

export interface BotdetectionpolicyIpReputationDetector {
    enabled?: pulumi.Input<string>;
    ipReputationDbRef?: pulumi.Input<string>;
    systemIpReputationMappingRef?: pulumi.Input<string>;
}

export interface BotdetectionpolicyUserAgentDetector {
    enabled?: pulumi.Input<string>;
    useTlsFingerprint?: pulumi.Input<string>;
}

export interface BotipreputationtypemappingIpReputationMapping {
    botIdentifications: pulumi.Input<pulumi.Input<inputs.BotipreputationtypemappingIpReputationMappingBotIdentification>[]>;
    ipReputationType: pulumi.Input<string>;
}

export interface BotipreputationtypemappingIpReputationMappingBotIdentification {
    class?: pulumi.Input<string>;
    identifier?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface BotmappingMappingRule {
    classifications: pulumi.Input<pulumi.Input<inputs.BotmappingMappingRuleClassification>[]>;
    index: pulumi.Input<string>;
    matches: pulumi.Input<pulumi.Input<inputs.BotmappingMappingRuleMatch>[]>;
    name: pulumi.Input<string>;
}

export interface BotmappingMappingRuleClassification {
    type: pulumi.Input<string>;
    userDefinedType?: pulumi.Input<string>;
}

export interface BotmappingMappingRuleMatch {
    classMatchers?: pulumi.Input<pulumi.Input<inputs.BotmappingMappingRuleMatchClassMatcher>[]>;
    clientIps?: pulumi.Input<pulumi.Input<inputs.BotmappingMappingRuleMatchClientIp>[]>;
    componentMatcher?: pulumi.Input<string>;
    hdrs?: pulumi.Input<pulumi.Input<inputs.BotmappingMappingRuleMatchHdr>[]>;
    hostHdrs?: pulumi.Input<pulumi.Input<inputs.BotmappingMappingRuleMatchHostHdr>[]>;
    identifierMatchers?: pulumi.Input<pulumi.Input<inputs.BotmappingMappingRuleMatchIdentifierMatcher>[]>;
    methods?: pulumi.Input<pulumi.Input<inputs.BotmappingMappingRuleMatchMethod>[]>;
    paths?: pulumi.Input<pulumi.Input<inputs.BotmappingMappingRuleMatchPath>[]>;
    typeMatchers?: pulumi.Input<pulumi.Input<inputs.BotmappingMappingRuleMatchTypeMatcher>[]>;
}

export interface BotmappingMappingRuleMatchClassMatcher {
    clientClasses: pulumi.Input<pulumi.Input<string>[]>;
    op?: pulumi.Input<string>;
}

export interface BotmappingMappingRuleMatchClientIp {
    addrs?: pulumi.Input<pulumi.Input<inputs.BotmappingMappingRuleMatchClientIpAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.BotmappingMappingRuleMatchClientIpPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.BotmappingMappingRuleMatchClientIpRange>[]>;
}

export interface BotmappingMappingRuleMatchClientIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface BotmappingMappingRuleMatchClientIpPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.BotmappingMappingRuleMatchClientIpPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface BotmappingMappingRuleMatchClientIpPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface BotmappingMappingRuleMatchClientIpRange {
    begins: pulumi.Input<pulumi.Input<inputs.BotmappingMappingRuleMatchClientIpRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.BotmappingMappingRuleMatchClientIpRangeEnd>[]>;
}

export interface BotmappingMappingRuleMatchClientIpRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface BotmappingMappingRuleMatchClientIpRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface BotmappingMappingRuleMatchHdr {
    hdr: pulumi.Input<string>;
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BotmappingMappingRuleMatchHostHdr {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BotmappingMappingRuleMatchIdentifierMatcher {
    matchCriteria: pulumi.Input<string>;
    matchStrs?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BotmappingMappingRuleMatchMethod {
    matchCriteria: pulumi.Input<string>;
    methods: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BotmappingMappingRuleMatchPath {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    matchDecodedString?: pulumi.Input<string>;
    matchStrs?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BotmappingMappingRuleMatchTypeMatcher {
    clientTypes: pulumi.Input<pulumi.Input<string>[]>;
    op?: pulumi.Input<string>;
}

export interface CertificatemanagementprofileConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface CertificatemanagementprofileMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CertificatemanagementprofileScriptParam {
    isDynamic?: pulumi.Input<string>;
    isSensitive?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface CloudAwsConfiguration {
    accessKeyId?: pulumi.Input<string>;
    asgPollInterval?: pulumi.Input<string>;
    ebsEncryptions?: pulumi.Input<pulumi.Input<inputs.CloudAwsConfigurationEbsEncryption>[]>;
    freeElasticips?: pulumi.Input<string>;
    iamAssumeRole?: pulumi.Input<string>;
    publishVipToPublicZone?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    route53Integration?: pulumi.Input<string>;
    s3Encryptions?: pulumi.Input<pulumi.Input<inputs.CloudAwsConfigurationS3Encryption>[]>;
    secretAccessKey?: pulumi.Input<string>;
    sqsEncryptions?: pulumi.Input<pulumi.Input<inputs.CloudAwsConfigurationSqsEncryption>[]>;
    ttl?: pulumi.Input<string>;
    useIamRoles?: pulumi.Input<string>;
    useSnsSqs?: pulumi.Input<string>;
    vpc?: pulumi.Input<string>;
    vpcId: pulumi.Input<string>;
    zones?: pulumi.Input<pulumi.Input<inputs.CloudAwsConfigurationZone>[]>;
}

export interface CloudAwsConfigurationEbsEncryption {
    masterKey?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
}

export interface CloudAwsConfigurationS3Encryption {
    masterKey?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
}

export interface CloudAwsConfigurationSqsEncryption {
    masterKey?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
}

export interface CloudAwsConfigurationZone {
    availabilityZone: pulumi.Input<string>;
    mgmtNetworkName: pulumi.Input<string>;
    mgmtNetworkUuid?: pulumi.Input<string>;
}

export interface CloudAzureConfiguration {
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    cloudCredentialsRef?: pulumi.Input<string>;
    desId?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    networkInfos: pulumi.Input<pulumi.Input<inputs.CloudAzureConfigurationNetworkInfo>[]>;
    resourceGroup?: pulumi.Input<string>;
    seStorageAccount?: pulumi.Input<string>;
    subscriptionId?: pulumi.Input<string>;
    useAzureDns?: pulumi.Input<string>;
    useEnhancedHa?: pulumi.Input<string>;
    useManagedDisks?: pulumi.Input<string>;
    useStandardAlb?: pulumi.Input<string>;
}

export interface CloudAzureConfigurationNetworkInfo {
    managementNetworkId?: pulumi.Input<string>;
    seNetworkId?: pulumi.Input<string>;
    virtualNetworkId?: pulumi.Input<string>;
}

export interface CloudCloudstackConfiguration {
    accessKeyId: pulumi.Input<string>;
    apiUrl: pulumi.Input<string>;
    cntrPublicIp?: pulumi.Input<string>;
    hypervisor?: pulumi.Input<string>;
    mgmtNetworkName: pulumi.Input<string>;
    mgmtNetworkUuid?: pulumi.Input<string>;
    secretAccessKey: pulumi.Input<string>;
}

export interface CloudConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface CloudCustomTag {
    tagKey: pulumi.Input<string>;
    tagVal?: pulumi.Input<string>;
}

export interface CloudDnsResolver {
    fixedTtl?: pulumi.Input<string>;
    minTtl?: pulumi.Input<string>;
    nameserverIps: pulumi.Input<pulumi.Input<inputs.CloudDnsResolverNameserverIp>[]>;
    resolverName: pulumi.Input<string>;
    useMgmt?: pulumi.Input<string>;
}

export interface CloudDnsResolverNameserverIp {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface CloudDockerConfiguration {
    appSyncFrequency?: pulumi.Input<string>;
    caTlsKeyAndCertificateRef?: pulumi.Input<string>;
    clientTlsKeyAndCertificateRef?: pulumi.Input<string>;
    containerPortMatchHttpService?: pulumi.Input<string>;
    coredumpDirectory?: pulumi.Input<string>;
    disableAutoBackendServiceSync?: pulumi.Input<string>;
    disableAutoFrontendServiceSync?: pulumi.Input<string>;
    disableAutoSeCreation?: pulumi.Input<string>;
    dockerRegistrySes?: pulumi.Input<pulumi.Input<inputs.CloudDockerConfigurationDockerRegistrySe>[]>;
    eastWestPlacementSubnets?: pulumi.Input<pulumi.Input<inputs.CloudDockerConfigurationEastWestPlacementSubnet>[]>;
    enableEventSubscription?: pulumi.Input<string>;
    feproxyContainerPortAsService?: pulumi.Input<string>;
    feproxyVipsEnableProxyArp?: pulumi.Input<string>;
    fleetEndpoint?: pulumi.Input<string>;
    httpContainerPorts?: pulumi.Input<pulumi.Input<number>[]>;
    seDeploymentMethod?: pulumi.Input<string>;
    seExcludeAttributes?: pulumi.Input<pulumi.Input<inputs.CloudDockerConfigurationSeExcludeAttribute>[]>;
    seIncludeAttributes?: pulumi.Input<pulumi.Input<inputs.CloudDockerConfigurationSeIncludeAttribute>[]>;
    seSpawnRate?: pulumi.Input<string>;
    seVolume?: pulumi.Input<string>;
    servicesAccessibleAllInterfaces?: pulumi.Input<string>;
    sshUserRef?: pulumi.Input<string>;
    ucpNodes?: pulumi.Input<pulumi.Input<string>[]>;
    useContainerIpPort?: pulumi.Input<string>;
    useControllerImage?: pulumi.Input<string>;
}

export interface CloudDockerConfigurationDockerRegistrySe {
    oshiftRegistries?: pulumi.Input<pulumi.Input<inputs.CloudDockerConfigurationDockerRegistrySeOshiftRegistry>[]>;
    password?: pulumi.Input<string>;
    private?: pulumi.Input<string>;
    registry?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface CloudDockerConfigurationDockerRegistrySeOshiftRegistry {
    registryNamespace?: pulumi.Input<string>;
    registryService?: pulumi.Input<string>;
    registryVips?: pulumi.Input<pulumi.Input<inputs.CloudDockerConfigurationDockerRegistrySeOshiftRegistryRegistryVip>[]>;
}

export interface CloudDockerConfigurationDockerRegistrySeOshiftRegistryRegistryVip {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface CloudDockerConfigurationEastWestPlacementSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.CloudDockerConfigurationEastWestPlacementSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface CloudDockerConfigurationEastWestPlacementSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface CloudDockerConfigurationSeExcludeAttribute {
    attribute: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface CloudDockerConfigurationSeIncludeAttribute {
    attribute: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface CloudGcpConfiguration {
    cloudCredentialsRef?: pulumi.Input<string>;
    encryptionKeys?: pulumi.Input<pulumi.Input<inputs.CloudGcpConfigurationEncryptionKey>[]>;
    firewallTargetTags?: pulumi.Input<pulumi.Input<string>[]>;
    gcpServiceAccountEmail?: pulumi.Input<string>;
    gcsBucketName?: pulumi.Input<string>;
    gcsProjectId?: pulumi.Input<string>;
    networkConfigs: pulumi.Input<pulumi.Input<inputs.CloudGcpConfigurationNetworkConfig>[]>;
    regionName: pulumi.Input<string>;
    seProjectId: pulumi.Input<string>;
    vipAllocationStrategies: pulumi.Input<pulumi.Input<inputs.CloudGcpConfigurationVipAllocationStrategy>[]>;
    zones: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CloudGcpConfigurationEncryptionKey {
    gcsBucketKmsKeyId?: pulumi.Input<string>;
    gcsObjectsKmsKeyId?: pulumi.Input<string>;
    seDiskKmsKeyId?: pulumi.Input<string>;
    seImageKmsKeyId?: pulumi.Input<string>;
}

export interface CloudGcpConfigurationNetworkConfig {
    config: pulumi.Input<string>;
    inbands?: pulumi.Input<pulumi.Input<inputs.CloudGcpConfigurationNetworkConfigInband>[]>;
    oneArms?: pulumi.Input<pulumi.Input<inputs.CloudGcpConfigurationNetworkConfigOneArm>[]>;
    twoArms?: pulumi.Input<pulumi.Input<inputs.CloudGcpConfigurationNetworkConfigTwoArm>[]>;
}

export interface CloudGcpConfigurationNetworkConfigInband {
    vpcNetworkName: pulumi.Input<string>;
    vpcProjectId?: pulumi.Input<string>;
    vpcSubnetName: pulumi.Input<string>;
}

export interface CloudGcpConfigurationNetworkConfigOneArm {
    dataVpcNetworkName: pulumi.Input<string>;
    dataVpcProjectId?: pulumi.Input<string>;
    dataVpcSubnetName: pulumi.Input<string>;
    managementVpcNetworkName: pulumi.Input<string>;
    managementVpcProjectId?: pulumi.Input<string>;
    managementVpcSubnetName: pulumi.Input<string>;
}

export interface CloudGcpConfigurationNetworkConfigTwoArm {
    backendDataVpcNetworkName: pulumi.Input<string>;
    backendDataVpcProjectId?: pulumi.Input<string>;
    backendDataVpcSubnetName: pulumi.Input<string>;
    frontendDataVpcNetworkName: pulumi.Input<string>;
    frontendDataVpcProjectId?: pulumi.Input<string>;
    frontendDataVpcSubnetName: pulumi.Input<string>;
    managementVpcNetworkName: pulumi.Input<string>;
    managementVpcProjectId?: pulumi.Input<string>;
    managementVpcSubnetName: pulumi.Input<string>;
}

export interface CloudGcpConfigurationVipAllocationStrategy {
    ilbs?: pulumi.Input<pulumi.Input<inputs.CloudGcpConfigurationVipAllocationStrategyIlb>[]>;
    mode?: pulumi.Input<string>;
    routes?: pulumi.Input<pulumi.Input<inputs.CloudGcpConfigurationVipAllocationStrategyRoute>[]>;
}

export interface CloudGcpConfigurationVipAllocationStrategyIlb {
    cloudRouterNames?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CloudGcpConfigurationVipAllocationStrategyRoute {
    matchSeGroupSubnet?: pulumi.Input<string>;
    routePriority?: pulumi.Input<string>;
}

export interface CloudLinuxserverConfiguration {
    hosts?: pulumi.Input<pulumi.Input<inputs.CloudLinuxserverConfigurationHost>[]>;
    seInbandMgmt?: pulumi.Input<string>;
    seLogDiskPath?: pulumi.Input<string>;
    seLogDiskSizeGb?: pulumi.Input<string>;
    seSysDiskPath?: pulumi.Input<string>;
    seSysDiskSizeGb?: pulumi.Input<string>;
    sshUserRef?: pulumi.Input<string>;
}

export interface CloudLinuxserverConfigurationHost {
    hostAttrs?: pulumi.Input<pulumi.Input<inputs.CloudLinuxserverConfigurationHostHostAttr>[]>;
    hostIps: pulumi.Input<pulumi.Input<inputs.CloudLinuxserverConfigurationHostHostIp>[]>;
    nodeAvailabilityZone?: pulumi.Input<string>;
    seGroupRef?: pulumi.Input<string>;
}

export interface CloudLinuxserverConfigurationHostHostAttr {
    attrKey: pulumi.Input<string>;
    attrVal?: pulumi.Input<string>;
}

export interface CloudLinuxserverConfigurationHostHostIp {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface CloudMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CloudNsxtConfiguration {
    automateDfwObjects?: pulumi.Input<string>;
    automateDfwRules?: pulumi.Input<string>;
    dataNetworkConfigs?: pulumi.Input<pulumi.Input<inputs.CloudNsxtConfigurationDataNetworkConfig>[]>;
    domainId?: pulumi.Input<string>;
    enforcementpointId?: pulumi.Input<string>;
    managementNetworkConfigs?: pulumi.Input<pulumi.Input<inputs.CloudNsxtConfigurationManagementNetworkConfig>[]>;
    nsxtCredentialsRef?: pulumi.Input<string>;
    nsxtUrl?: pulumi.Input<string>;
    siteId?: pulumi.Input<string>;
    vmcMode?: pulumi.Input<string>;
    vpcMode?: pulumi.Input<string>;
}

export interface CloudNsxtConfigurationDataNetworkConfig {
    tier1SegmentConfigs?: pulumi.Input<pulumi.Input<inputs.CloudNsxtConfigurationDataNetworkConfigTier1SegmentConfig>[]>;
    transportZone?: pulumi.Input<string>;
    tzType?: pulumi.Input<string>;
    vlanSegments?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CloudNsxtConfigurationDataNetworkConfigTier1SegmentConfig {
    automatics?: pulumi.Input<pulumi.Input<inputs.CloudNsxtConfigurationDataNetworkConfigTier1SegmentConfigAutomatic>[]>;
    manuals?: pulumi.Input<pulumi.Input<inputs.CloudNsxtConfigurationDataNetworkConfigTier1SegmentConfigManual>[]>;
    segmentConfigMode?: pulumi.Input<string>;
}

export interface CloudNsxtConfigurationDataNetworkConfigTier1SegmentConfigAutomatic {
    nsxtSegmentSubnets: pulumi.Input<pulumi.Input<inputs.CloudNsxtConfigurationDataNetworkConfigTier1SegmentConfigAutomaticNsxtSegmentSubnet>[]>;
    numSePerSegment?: pulumi.Input<string>;
    tier1LrIds: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CloudNsxtConfigurationDataNetworkConfigTier1SegmentConfigAutomaticNsxtSegmentSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.CloudNsxtConfigurationDataNetworkConfigTier1SegmentConfigAutomaticNsxtSegmentSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface CloudNsxtConfigurationDataNetworkConfigTier1SegmentConfigAutomaticNsxtSegmentSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface CloudNsxtConfigurationDataNetworkConfigTier1SegmentConfigManual {
    tier1Lrs: pulumi.Input<pulumi.Input<inputs.CloudNsxtConfigurationDataNetworkConfigTier1SegmentConfigManualTier1Lr>[]>;
}

export interface CloudNsxtConfigurationDataNetworkConfigTier1SegmentConfigManualTier1Lr {
    localeService?: pulumi.Input<string>;
    segmentId?: pulumi.Input<string>;
    tier1LrId: pulumi.Input<string>;
}

export interface CloudNsxtConfigurationManagementNetworkConfig {
    overlaySegments?: pulumi.Input<pulumi.Input<inputs.CloudNsxtConfigurationManagementNetworkConfigOverlaySegment>[]>;
    transportZone: pulumi.Input<string>;
    tzType: pulumi.Input<string>;
    vlanSegment?: pulumi.Input<string>;
}

export interface CloudNsxtConfigurationManagementNetworkConfigOverlaySegment {
    localeService?: pulumi.Input<string>;
    segmentId?: pulumi.Input<string>;
    tier1LrId: pulumi.Input<string>;
}

export interface CloudNtpConfiguration {
    ntpAuthenticationKeys?: pulumi.Input<pulumi.Input<inputs.CloudNtpConfigurationNtpAuthenticationKey>[]>;
    ntpServerLists?: pulumi.Input<pulumi.Input<inputs.CloudNtpConfigurationNtpServerList>[]>;
    ntpServers?: pulumi.Input<pulumi.Input<inputs.CloudNtpConfigurationNtpServer>[]>;
}

export interface CloudNtpConfigurationNtpAuthenticationKey {
    algorithm?: pulumi.Input<string>;
    key: pulumi.Input<string>;
    keyNumber: pulumi.Input<string>;
}

export interface CloudNtpConfigurationNtpServer {
    keyNumber?: pulumi.Input<string>;
    servers: pulumi.Input<pulumi.Input<inputs.CloudNtpConfigurationNtpServerServer>[]>;
}

export interface CloudNtpConfigurationNtpServerList {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface CloudNtpConfigurationNtpServerServer {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface CloudOpenstackConfiguration {
    adminTenant: pulumi.Input<string>;
    adminTenantUuid?: pulumi.Input<string>;
    allowedAddressPairs?: pulumi.Input<string>;
    antiAffinity?: pulumi.Input<string>;
    authUrl?: pulumi.Input<string>;
    configDrive?: pulumi.Input<string>;
    contrailDisablePolicy?: pulumi.Input<string>;
    contrailEndpoint?: pulumi.Input<string>;
    contrailPlugin?: pulumi.Input<string>;
    customSeImageProperties?: pulumi.Input<pulumi.Input<inputs.CloudOpenstackConfigurationCustomSeImageProperty>[]>;
    enableOsObjectCaching?: pulumi.Input<string>;
    enableTagging?: pulumi.Input<string>;
    externalNetworks?: pulumi.Input<string>;
    freeFloatingips?: pulumi.Input<string>;
    hypervisor?: pulumi.Input<string>;
    hypervisorProperties?: pulumi.Input<pulumi.Input<inputs.CloudOpenstackConfigurationHypervisorProperty>[]>;
    imgFormat?: pulumi.Input<string>;
    importKeystoneTenants?: pulumi.Input<string>;
    insecure?: pulumi.Input<string>;
    keystoneHost?: pulumi.Input<string>;
    mapAdminToCloudadmin?: pulumi.Input<string>;
    mgmtNetworkName: pulumi.Input<string>;
    mgmtNetworkUuid?: pulumi.Input<string>;
    nameOwner?: pulumi.Input<string>;
    neutronRbac?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    privilege: pulumi.Input<string>;
    provNames?: pulumi.Input<pulumi.Input<string>[]>;
    providerVipNetworks?: pulumi.Input<pulumi.Input<inputs.CloudOpenstackConfigurationProviderVipNetwork>[]>;
    region?: pulumi.Input<string>;
    roleMappings?: pulumi.Input<pulumi.Input<inputs.CloudOpenstackConfigurationRoleMapping>[]>;
    securityGroups?: pulumi.Input<string>;
    tenantSe?: pulumi.Input<string>;
    useAdminUrl?: pulumi.Input<string>;
    useInternalEndpoints?: pulumi.Input<string>;
    useKeystoneAuth?: pulumi.Input<string>;
    username: pulumi.Input<string>;
    vipPortInAdminTenant?: pulumi.Input<string>;
}

export interface CloudOpenstackConfigurationCustomSeImageProperty {
    name: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface CloudOpenstackConfigurationHypervisorProperty {
    hypervisor: pulumi.Input<string>;
    imageProperties?: pulumi.Input<pulumi.Input<inputs.CloudOpenstackConfigurationHypervisorPropertyImageProperty>[]>;
}

export interface CloudOpenstackConfigurationHypervisorPropertyImageProperty {
    name: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface CloudOpenstackConfigurationProviderVipNetwork {
    osNetworkUuid?: pulumi.Input<string>;
    osTenantUuids?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CloudOpenstackConfigurationRoleMapping {
    aviRole: pulumi.Input<string>;
    osRole: pulumi.Input<string>;
}

export interface CloudProxyConfiguration {
    host: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface CloudRancherConfiguration {
    accessKey?: pulumi.Input<string>;
    appSyncFrequency?: pulumi.Input<string>;
    containerPortMatchHttpService?: pulumi.Input<string>;
    coredumpDirectory?: pulumi.Input<string>;
    disableAutoBackendServiceSync?: pulumi.Input<string>;
    disableAutoFrontendServiceSync?: pulumi.Input<string>;
    disableAutoSeCreation?: pulumi.Input<string>;
    dockerRegistrySes?: pulumi.Input<pulumi.Input<inputs.CloudRancherConfigurationDockerRegistrySe>[]>;
    eastWestPlacementSubnets?: pulumi.Input<pulumi.Input<inputs.CloudRancherConfigurationEastWestPlacementSubnet>[]>;
    enableEventSubscription?: pulumi.Input<string>;
    feproxyContainerPortAsService?: pulumi.Input<string>;
    feproxyVipsEnableProxyArp?: pulumi.Input<string>;
    fleetEndpoint?: pulumi.Input<string>;
    httpContainerPorts?: pulumi.Input<pulumi.Input<number>[]>;
    nuageControllers?: pulumi.Input<pulumi.Input<inputs.CloudRancherConfigurationNuageController>[]>;
    rancherServers?: pulumi.Input<pulumi.Input<string>[]>;
    seDeploymentMethod?: pulumi.Input<string>;
    seExcludeAttributes?: pulumi.Input<pulumi.Input<inputs.CloudRancherConfigurationSeExcludeAttribute>[]>;
    seIncludeAttributes?: pulumi.Input<pulumi.Input<inputs.CloudRancherConfigurationSeIncludeAttribute>[]>;
    seSpawnRate?: pulumi.Input<string>;
    seVolume?: pulumi.Input<string>;
    secretKey?: pulumi.Input<string>;
    servicesAccessibleAllInterfaces?: pulumi.Input<string>;
    sshUserRef?: pulumi.Input<string>;
    useContainerIpPort?: pulumi.Input<string>;
    useControllerImage?: pulumi.Input<string>;
}

export interface CloudRancherConfigurationDockerRegistrySe {
    oshiftRegistries?: pulumi.Input<pulumi.Input<inputs.CloudRancherConfigurationDockerRegistrySeOshiftRegistry>[]>;
    password?: pulumi.Input<string>;
    private?: pulumi.Input<string>;
    registry?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface CloudRancherConfigurationDockerRegistrySeOshiftRegistry {
    registryNamespace?: pulumi.Input<string>;
    registryService?: pulumi.Input<string>;
    registryVips?: pulumi.Input<pulumi.Input<inputs.CloudRancherConfigurationDockerRegistrySeOshiftRegistryRegistryVip>[]>;
}

export interface CloudRancherConfigurationDockerRegistrySeOshiftRegistryRegistryVip {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface CloudRancherConfigurationEastWestPlacementSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.CloudRancherConfigurationEastWestPlacementSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface CloudRancherConfigurationEastWestPlacementSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface CloudRancherConfigurationNuageController {
    nuageOrganization?: pulumi.Input<string>;
    nuagePassword?: pulumi.Input<string>;
    nuagePort?: pulumi.Input<string>;
    nuageUsername?: pulumi.Input<string>;
    nuageVsdHost?: pulumi.Input<string>;
    seDomain?: pulumi.Input<string>;
    seEnterprise?: pulumi.Input<string>;
    seNetwork?: pulumi.Input<string>;
    sePolicyGroup?: pulumi.Input<string>;
    seUser?: pulumi.Input<string>;
    seZone?: pulumi.Input<string>;
}

export interface CloudRancherConfigurationSeExcludeAttribute {
    attribute: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface CloudRancherConfigurationSeIncludeAttribute {
    attribute: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface CloudVcaConfiguration {
    privilege: pulumi.Input<string>;
    vcaHost: pulumi.Input<string>;
    vcaInstance: pulumi.Input<string>;
    vcaMgmtNetwork: pulumi.Input<string>;
    vcaOrgnization: pulumi.Input<string>;
    vcaPassword: pulumi.Input<string>;
    vcaUsername: pulumi.Input<string>;
    vcaVdc: pulumi.Input<string>;
}

export interface CloudVcenterConfiguration {
    contentLibs?: pulumi.Input<pulumi.Input<inputs.CloudVcenterConfigurationContentLib>[]>;
    datacenter?: pulumi.Input<string>;
    datacenterManagedObjectId?: pulumi.Input<string>;
    isNsxEnvironment?: pulumi.Input<string>;
    managementIpSubnets?: pulumi.Input<pulumi.Input<inputs.CloudVcenterConfigurationManagementIpSubnet>[]>;
    managementNetwork?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    privilege: pulumi.Input<string>;
    useContentLib?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    vcenterTemplateSeLocation?: pulumi.Input<string>;
    vcenterUrl?: pulumi.Input<string>;
}

export interface CloudVcenterConfigurationContentLib {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface CloudVcenterConfigurationManagementIpSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.CloudVcenterConfigurationManagementIpSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface CloudVcenterConfigurationManagementIpSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface CloudconnectoruserAzureServiceprincipal {
    applicationId?: pulumi.Input<string>;
    authenticationToken?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
}

export interface CloudconnectoruserAzureUserpass {
    password?: pulumi.Input<string>;
    tenantName?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface CloudconnectoruserConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface CloudconnectoruserGcpCredential {
    serviceAccountKeyfileData?: pulumi.Input<string>;
}

export interface CloudconnectoruserNsxtCredential {
    password?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface CloudconnectoruserOciCredential {
    fingerprint?: pulumi.Input<string>;
    keyContent?: pulumi.Input<string>;
    passPhrase?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
}

export interface CloudconnectoruserTencentCredential {
    secretId: pulumi.Input<string>;
    secretKey: pulumi.Input<string>;
}

export interface CloudconnectoruserVcenterCredential {
    password?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface CloudpropertiesCcProp {
    rpcPollInterval?: pulumi.Input<string>;
    rpcQueueSize?: pulumi.Input<string>;
}

export interface CloudpropertiesConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface CloudpropertiesHypProp {
    htype: pulumi.Input<string>;
    maxIpsPerNic?: pulumi.Input<string>;
    maxNics?: pulumi.Input<string>;
}

export interface CloudpropertiesInfo {
    ccaProps?: pulumi.Input<pulumi.Input<inputs.CloudpropertiesInfoCcaProp>[]>;
    controllerProps?: pulumi.Input<pulumi.Input<inputs.CloudpropertiesInfoControllerProp>[]>;
    flavorProps?: pulumi.Input<pulumi.Input<inputs.CloudpropertiesInfoFlavorProp>[]>;
    flavorRegexFilter?: pulumi.Input<string>;
    htypes?: pulumi.Input<pulumi.Input<string>[]>;
    vtype: pulumi.Input<string>;
}

export interface CloudpropertiesInfoCcaProp {
    asyncRetries?: pulumi.Input<string>;
    asyncRetriesDelay?: pulumi.Input<string>;
    pollDurationTarget?: pulumi.Input<string>;
    pollFastTarget?: pulumi.Input<string>;
    pollSlowTarget?: pulumi.Input<string>;
    vcenterHostPingInterval?: pulumi.Input<string>;
    vcenterInventoryMaxObjectUpdates?: pulumi.Input<string>;
    vcenterMaxDatastoreGoRoutines?: pulumi.Input<string>;
    vcenterReconcileInterval?: pulumi.Input<string>;
    vnicRetries?: pulumi.Input<string>;
    vnicRetriesDelay?: pulumi.Input<string>;
}

export interface CloudpropertiesInfoControllerProp {
    alertManagerUseEvms?: pulumi.Input<string>;
    allowAdminNetworkUpdates?: pulumi.Input<string>;
    allowIpForwarding?: pulumi.Input<string>;
    allowUnauthenticatedApis?: pulumi.Input<string>;
    allowUnauthenticatedNodes?: pulumi.Input<string>;
    apiIdleTimeout?: pulumi.Input<string>;
    apiPerfLoggingThreshold?: pulumi.Input<string>;
    appviewxCompatMode?: pulumi.Input<string>;
    asyncPatchMergePeriod?: pulumi.Input<string>;
    asyncPatchRequestCleanupDuration?: pulumi.Input<string>;
    attachIpRetryInterval?: pulumi.Input<string>;
    attachIpRetryLimit?: pulumi.Input<string>;
    bmUseAnsible?: pulumi.Input<string>;
    checkVsvipFqdnSyntax?: pulumi.Input<string>;
    cleanupExpiredAuthtokenTimeoutPeriod?: pulumi.Input<string>;
    cleanupSessionsTimeoutPeriod?: pulumi.Input<string>;
    cloudDiscoveryInterval?: pulumi.Input<string>;
    cloudReconcile?: pulumi.Input<string>;
    cloudReconcileInterval?: pulumi.Input<string>;
    clusterIpGratuitousArpPeriod?: pulumi.Input<string>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.CloudpropertiesInfoControllerPropConfigpbAttribute>[]>;
    consistencyCheckTimeoutPeriod?: pulumi.Input<string>;
    controllerResourceInfoCollectionPeriod?: pulumi.Input<string>;
    crashedSeReboot?: pulumi.Input<string>;
    deadSeDetectionTimer?: pulumi.Input<string>;
    defaultMinimumApiTimeout?: pulumi.Input<string>;
    delOfflineSeAfterRebootDelay?: pulumi.Input<string>;
    detachIpRetryInterval?: pulumi.Input<string>;
    detachIpRetryLimit?: pulumi.Input<string>;
    detachIpTimeout?: pulumi.Input<string>;
    dnsRefreshPeriod?: pulumi.Input<string>;
    dummy?: pulumi.Input<string>;
    editSystemLimits?: pulumi.Input<string>;
    enableApiSharding?: pulumi.Input<string>;
    enableMemoryBalancer?: pulumi.Input<string>;
    enablePerProcessStop?: pulumi.Input<string>;
    enableResmgrLogCachePrint?: pulumi.Input<string>;
    eventManagerMaxGoroutines?: pulumi.Input<string>;
    eventManagerMaxSubscribers?: pulumi.Input<string>;
    eventManagerProcessingTimeThreshold?: pulumi.Input<string>;
    falsePositiveLearningConfigs?: pulumi.Input<pulumi.Input<inputs.CloudpropertiesInfoControllerPropFalsePositiveLearningConfig>[]>;
    fatalErrorLeaseTime?: pulumi.Input<string>;
    federatedDatastoreCleanupDuration?: pulumi.Input<string>;
    fileObjectCleanupPeriod?: pulumi.Input<string>;
    fileobjectMaxFileVersions?: pulumi.Input<string>;
    gslbPurgeBatchSize?: pulumi.Input<string>;
    gslbPurgeSleepTimeMs?: pulumi.Input<string>;
    ignoreVrfInNetworksubnetlist?: pulumi.Input<string>;
    maxDeadSeInGrp?: pulumi.Input<string>;
    maxPcapPerTenant?: pulumi.Input<string>;
    maxSeSpawnIntervalDelay?: pulumi.Input<string>;
    maxSeqAttachIpFailures?: pulumi.Input<string>;
    maxSeqVnicFailures?: pulumi.Input<string>;
    maxThreadsCcVipBgWorker?: pulumi.Input<string>;
    permissionScopedSharedAdminNetworks?: pulumi.Input<string>;
    persistenceKeyRotatePeriod?: pulumi.Input<string>;
    portalRequestBurstLimit?: pulumi.Input<string>;
    portalRequestRateLimit?: pulumi.Input<string>;
    portalToken?: pulumi.Input<string>;
    postgresVacuumPeriod?: pulumi.Input<string>;
    processLockedUseraccountsTimeoutPeriod?: pulumi.Input<string>;
    processPkiProfileTimeoutPeriod?: pulumi.Input<string>;
    queryHostFail?: pulumi.Input<string>;
    resmgrLogCachingPeriod?: pulumi.Input<string>;
    restrictCloudReadAccess?: pulumi.Input<string>;
    safenetHsmVersion?: pulumi.Input<string>;
    seCreateTimeout?: pulumi.Input<string>;
    seFailoverAttemptInterval?: pulumi.Input<string>;
    seFromMarketplace?: pulumi.Input<string>;
    seOfflineDel?: pulumi.Input<string>;
    seSpawnRetryInterval?: pulumi.Input<string>;
    seUpgradeFlowCleanupTimeout?: pulumi.Input<string>;
    seVnicCooldown?: pulumi.Input<string>;
    seVnicGcWaitTime?: pulumi.Input<string>;
    secureChannelCleanupTimeout?: pulumi.Input<string>;
    secureChannelControllerTokenTimeout?: pulumi.Input<string>;
    secureChannelSeTokenTimeout?: pulumi.Input<string>;
    seupgradeCopyBufferSize?: pulumi.Input<string>;
    seupgradeCopyPoolSize?: pulumi.Input<string>;
    seupgradeFabricPoolSize?: pulumi.Input<string>;
    seupgradeSegroupMinDeadTimeout?: pulumi.Input<string>;
    sharedSslCertificates?: pulumi.Input<string>;
    skopeoRetryInterval?: pulumi.Input<string>;
    skopeoRetryLimit?: pulumi.Input<string>;
    softMinMemPerSeLimit?: pulumi.Input<string>;
    sslCertificateExpiryWarningDays?: pulumi.Input<pulumi.Input<number>[]>;
    systemReportCleanupInterval?: pulumi.Input<string>;
    systemReportLimit?: pulumi.Input<string>;
    unresponsiveSeReboot?: pulumi.Input<string>;
    updateDnsEntryRetryLimit?: pulumi.Input<string>;
    updateDnsEntryTimeout?: pulumi.Input<string>;
    upgradeDnsTtl?: pulumi.Input<string>;
    upgradeFatSeLeaseTime?: pulumi.Input<string>;
    upgradeLeaseTime?: pulumi.Input<string>;
    upgradeSePerVsScaleOpsTxnTime?: pulumi.Input<string>;
    userAgentCacheConfigs?: pulumi.Input<pulumi.Input<inputs.CloudpropertiesInfoControllerPropUserAgentCacheConfig>[]>;
    uuid?: pulumi.Input<string>;
    vnicOpFailTime?: pulumi.Input<string>;
    vsAwaitingSeTimeout?: pulumi.Input<string>;
    vsKeyRotatePeriod?: pulumi.Input<string>;
    vsScaleoutReadyCheckInterval?: pulumi.Input<string>;
    vsSeAttachIpFail?: pulumi.Input<string>;
    vsSeBootupFail?: pulumi.Input<string>;
    vsSeBootupFailPatch?: pulumi.Input<string>;
    vsSeCreateFail?: pulumi.Input<string>;
    vsSePingFail?: pulumi.Input<string>;
    vsSeVnicFail?: pulumi.Input<string>;
    vsSeVnicIpFail?: pulumi.Input<string>;
    vsphereHaDetectionTimeout?: pulumi.Input<string>;
    vsphereHaRecoveryTimeout?: pulumi.Input<string>;
    vsphereHaTimerInterval?: pulumi.Input<string>;
    warmstartSeReconnectWaitTime?: pulumi.Input<string>;
    warmstartVsResyncWaitTime?: pulumi.Input<string>;
}

export interface CloudpropertiesInfoControllerPropConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface CloudpropertiesInfoControllerPropFalsePositiveLearningConfig {
    maxAppsSupported?: pulumi.Input<string>;
    minMonitorTime?: pulumi.Input<string>;
    minTransPerApplication?: pulumi.Input<string>;
    minTransPerUri?: pulumi.Input<string>;
}

export interface CloudpropertiesInfoControllerPropUserAgentCacheConfig {
    batchSize?: pulumi.Input<string>;
    controllerCacheSize?: pulumi.Input<string>;
    maxAge?: pulumi.Input<string>;
    maxLastHitTime?: pulumi.Input<string>;
    maxUpstreamQueries?: pulumi.Input<string>;
    maxWaitTime?: pulumi.Input<string>;
    numEntriesUpstreamUpdate?: pulumi.Input<string>;
    percentReservedForBadBots?: pulumi.Input<string>;
    percentReservedForBrowsers?: pulumi.Input<string>;
    percentReservedForGoodBots?: pulumi.Input<string>;
    percentReservedForOutstanding?: pulumi.Input<string>;
    seCacheSize?: pulumi.Input<string>;
    upstreamUpdateInterval?: pulumi.Input<string>;
}

export interface CloudpropertiesInfoFlavorProp {
    cost?: pulumi.Input<string>;
    diskGb?: pulumi.Input<string>;
    enhancedNw?: pulumi.Input<string>;
    id: pulumi.Input<string>;
    isRecommended?: pulumi.Input<string>;
    maxIp6sPerNic?: pulumi.Input<string>;
    maxIpsPerNic?: pulumi.Input<string>;
    maxNics?: pulumi.Input<string>;
    metas?: pulumi.Input<pulumi.Input<inputs.CloudpropertiesInfoFlavorPropMeta>[]>;
    name: pulumi.Input<string>;
    public?: pulumi.Input<string>;
    ramMb?: pulumi.Input<string>;
    vcpus?: pulumi.Input<string>;
}

export interface CloudpropertiesInfoFlavorPropMeta {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ClusterClusterState {
    progress?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    upSince?: pulumi.Input<string>;
}

export interface ClusterNode {
    categories?: pulumi.Input<pulumi.Input<string>[]>;
    interfaces?: pulumi.Input<pulumi.Input<inputs.ClusterNodeInterface>[]>;
    ip6s?: pulumi.Input<pulumi.Input<inputs.ClusterNodeIp6>[]>;
    ips?: pulumi.Input<pulumi.Input<inputs.ClusterNodeIp>[]>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    publicIpOrNames?: pulumi.Input<pulumi.Input<inputs.ClusterNodePublicIpOrName>[]>;
    staticRoutes?: pulumi.Input<pulumi.Input<inputs.ClusterNodeStaticRoute>[]>;
    vmHostname?: pulumi.Input<string>;
    vmMor?: pulumi.Input<string>;
    vmName?: pulumi.Input<string>;
    vmUuid?: pulumi.Input<string>;
}

export interface ClusterNodeInterface {
    gateway6s?: pulumi.Input<pulumi.Input<inputs.ClusterNodeInterfaceGateway6>[]>;
    gateways?: pulumi.Input<pulumi.Input<inputs.ClusterNodeInterfaceGateway>[]>;
    ifName?: pulumi.Input<string>;
    ip6s?: pulumi.Input<pulumi.Input<inputs.ClusterNodeInterfaceIp6>[]>;
    ips?: pulumi.Input<pulumi.Input<inputs.ClusterNodeInterfaceIp>[]>;
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    macAddress?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    mode6?: pulumi.Input<string>;
    publicIpOrNames?: pulumi.Input<pulumi.Input<inputs.ClusterNodeInterfacePublicIpOrName>[]>;
    v4Enabled?: pulumi.Input<string>;
    v6Enabled?: pulumi.Input<string>;
}

export interface ClusterNodeInterfaceGateway {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ClusterNodeInterfaceGateway6 {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ClusterNodeInterfaceIp {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.ClusterNodeInterfaceIpIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface ClusterNodeInterfaceIp6 {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.ClusterNodeInterfaceIp6IpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface ClusterNodeInterfaceIp6IpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ClusterNodeInterfaceIpIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ClusterNodeInterfacePublicIpOrName {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ClusterNodeIp {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ClusterNodeIp6 {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ClusterNodePublicIpOrName {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ClusterNodeStaticRoute {
    disableGatewayMonitor?: pulumi.Input<string>;
    ifName?: pulumi.Input<string>;
    labels?: pulumi.Input<pulumi.Input<inputs.ClusterNodeStaticRouteLabel>[]>;
    nextHops: pulumi.Input<pulumi.Input<inputs.ClusterNodeStaticRouteNextHop>[]>;
    prefixes: pulumi.Input<pulumi.Input<inputs.ClusterNodeStaticRoutePrefix>[]>;
    routeId: pulumi.Input<string>;
}

export interface ClusterNodeStaticRouteLabel {
    key: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ClusterNodeStaticRouteNextHop {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ClusterNodeStaticRoutePrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.ClusterNodeStaticRoutePrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface ClusterNodeStaticRoutePrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ClusterVirtualIp {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ClusterVirtualIp6 {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ClusterclouddetailsAzureInfo {
    cloudCredentialRef: pulumi.Input<string>;
    subscriptionId: pulumi.Input<string>;
}

export interface ClusterclouddetailsConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface ControllerportalregistrationAsset {
    assetId?: pulumi.Input<string>;
}

export interface ControllerportalregistrationPortalAuth {
    accessToken?: pulumi.Input<string>;
    grantType?: pulumi.Input<string>;
    instanceUrl?: pulumi.Input<string>;
    jwtToken?: pulumi.Input<string>;
    tenant?: pulumi.Input<string>;
}

export interface ControllerpropertiesConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface ControllerpropertiesFalsePositiveLearningConfig {
    maxAppsSupported?: pulumi.Input<string>;
    minMonitorTime?: pulumi.Input<string>;
    minTransPerApplication?: pulumi.Input<string>;
    minTransPerUri?: pulumi.Input<string>;
}

export interface ControllerpropertiesUserAgentCacheConfig {
    batchSize?: pulumi.Input<string>;
    controllerCacheSize?: pulumi.Input<string>;
    maxAge?: pulumi.Input<string>;
    maxLastHitTime?: pulumi.Input<string>;
    maxUpstreamQueries?: pulumi.Input<string>;
    maxWaitTime?: pulumi.Input<string>;
    numEntriesUpstreamUpdate?: pulumi.Input<string>;
    percentReservedForBadBots?: pulumi.Input<string>;
    percentReservedForBrowsers?: pulumi.Input<string>;
    percentReservedForGoodBots?: pulumi.Input<string>;
    percentReservedForOutstanding?: pulumi.Input<string>;
    seCacheSize?: pulumi.Input<string>;
    upstreamUpdateInterval?: pulumi.Input<string>;
}

export interface ControllersiteConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface CsrfpolicyConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface CsrfpolicyRule {
    action?: pulumi.Input<string>;
    enable?: pulumi.Input<string>;
    index: pulumi.Input<string>;
    matches: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatch>[]>;
    name: pulumi.Input<string>;
}

export interface CsrfpolicyRuleMatch {
    botDetectionResults?: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatchBotDetectionResult>[]>;
    clientIps?: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatchClientIp>[]>;
    cookies?: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatchCookie>[]>;
    geoMatches?: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatchGeoMatch>[]>;
    hdrs?: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatchHdr>[]>;
    hostHdrs?: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatchHostHdr>[]>;
    ipReputationTypes?: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatchIpReputationType>[]>;
    methods?: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatchMethod>[]>;
    paths?: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatchPath>[]>;
    protocols?: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatchProtocol>[]>;
    queries?: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatchQuery>[]>;
    sourceIps?: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatchSourceIp>[]>;
    tlsFingerprintMatches?: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatchTlsFingerprintMatch>[]>;
    versions?: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatchVersion>[]>;
    vsPorts?: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatchVsPort>[]>;
}

export interface CsrfpolicyRuleMatchBotDetectionResult {
    classifications?: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatchBotDetectionResultClassification>[]>;
    matchOperation: pulumi.Input<string>;
}

export interface CsrfpolicyRuleMatchBotDetectionResultClassification {
    type: pulumi.Input<string>;
    userDefinedType?: pulumi.Input<string>;
}

export interface CsrfpolicyRuleMatchClientIp {
    addrs?: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatchClientIpAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatchClientIpPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatchClientIpRange>[]>;
}

export interface CsrfpolicyRuleMatchClientIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface CsrfpolicyRuleMatchClientIpPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatchClientIpPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface CsrfpolicyRuleMatchClientIpPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface CsrfpolicyRuleMatchClientIpRange {
    begins: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatchClientIpRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatchClientIpRangeEnd>[]>;
}

export interface CsrfpolicyRuleMatchClientIpRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface CsrfpolicyRuleMatchClientIpRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface CsrfpolicyRuleMatchCookie {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    name: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface CsrfpolicyRuleMatchGeoMatch {
    attribute: pulumi.Input<string>;
    matchOperation: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CsrfpolicyRuleMatchHdr {
    hdr: pulumi.Input<string>;
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CsrfpolicyRuleMatchHostHdr {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CsrfpolicyRuleMatchIpReputationType {
    matchOperation: pulumi.Input<string>;
    reputationTypes: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CsrfpolicyRuleMatchMethod {
    matchCriteria: pulumi.Input<string>;
    methods: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CsrfpolicyRuleMatchPath {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    matchDecodedString?: pulumi.Input<string>;
    matchStrs?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CsrfpolicyRuleMatchProtocol {
    matchCriteria: pulumi.Input<string>;
    protocols: pulumi.Input<string>;
}

export interface CsrfpolicyRuleMatchQuery {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    matchDecodedString?: pulumi.Input<string>;
    matchStrs?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CsrfpolicyRuleMatchSourceIp {
    addrs?: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatchSourceIpAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatchSourceIpPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatchSourceIpRange>[]>;
}

export interface CsrfpolicyRuleMatchSourceIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface CsrfpolicyRuleMatchSourceIpPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatchSourceIpPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface CsrfpolicyRuleMatchSourceIpPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface CsrfpolicyRuleMatchSourceIpRange {
    begins: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatchSourceIpRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.CsrfpolicyRuleMatchSourceIpRangeEnd>[]>;
}

export interface CsrfpolicyRuleMatchSourceIpRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface CsrfpolicyRuleMatchSourceIpRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface CsrfpolicyRuleMatchTlsFingerprintMatch {
    fingerprints?: pulumi.Input<pulumi.Input<string>[]>;
    matchOperation: pulumi.Input<string>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CsrfpolicyRuleMatchVersion {
    matchCriteria: pulumi.Input<string>;
    versions: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CsrfpolicyRuleMatchVsPort {
    matchCriteria: pulumi.Input<string>;
    ports: pulumi.Input<pulumi.Input<number>[]>;
}

export interface CustomipamdnsprofileConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface CustomipamdnsprofileScriptParam {
    isDynamic?: pulumi.Input<string>;
    isSensitive?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface DnspolicyConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface DnspolicyMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DnspolicyRule {
    actions?: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleAction>[]>;
    enable?: pulumi.Input<string>;
    index: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    matches?: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleMatch>[]>;
    name: pulumi.Input<string>;
}

export interface DnspolicyRuleAction {
    allows?: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleActionAllow>[]>;
    dnsRateLimiters?: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleActionDnsRateLimiter>[]>;
    gsGroupSelections?: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleActionGsGroupSelection>[]>;
    gslbSiteSelections?: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleActionGslbSiteSelection>[]>;
    poolSwitchings?: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleActionPoolSwitching>[]>;
    responses?: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleActionResponse>[]>;
}

export interface DnspolicyRuleActionAllow {
    allow?: pulumi.Input<string>;
    resetConn?: pulumi.Input<string>;
}

export interface DnspolicyRuleActionDnsRateLimiter {
    actions: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleActionDnsRateLimiterAction>[]>;
    rateLimiterObjects: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleActionDnsRateLimiterRateLimiterObject>[]>;
}

export interface DnspolicyRuleActionDnsRateLimiterAction {
    type?: pulumi.Input<string>;
}

export interface DnspolicyRuleActionDnsRateLimiterRateLimiterObject {
    burstSz?: pulumi.Input<string>;
    count?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
}

export interface DnspolicyRuleActionGsGroupSelection {
    groupName: pulumi.Input<string>;
}

export interface DnspolicyRuleActionGslbSiteSelection {
    fallbackSiteNames?: pulumi.Input<pulumi.Input<string>[]>;
    isSitePreferred?: pulumi.Input<string>;
    siteName: pulumi.Input<string>;
}

export interface DnspolicyRuleActionPoolSwitching {
    poolGroupRef?: pulumi.Input<string>;
    poolRef?: pulumi.Input<string>;
}

export interface DnspolicyRuleActionResponse {
    authoritative?: pulumi.Input<string>;
    rcode?: pulumi.Input<string>;
    resourceRecordSets?: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleActionResponseResourceRecordSet>[]>;
    truncation?: pulumi.Input<string>;
}

export interface DnspolicyRuleActionResponseResourceRecordSet {
    resourceRecordSets: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleActionResponseResourceRecordSetResourceRecordSet>[]>;
    section?: pulumi.Input<string>;
}

export interface DnspolicyRuleActionResponseResourceRecordSetResourceRecordSet {
    cnames?: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleActionResponseResourceRecordSetResourceRecordSetCname>[]>;
    fqdn: pulumi.Input<string>;
    ip6Addresses?: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleActionResponseResourceRecordSetResourceRecordSetIp6Address>[]>;
    ipAddresses?: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleActionResponseResourceRecordSetResourceRecordSetIpAddress>[]>;
    nses?: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleActionResponseResourceRecordSetResourceRecordSetNse>[]>;
    ttl: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface DnspolicyRuleActionResponseResourceRecordSetResourceRecordSetCname {
    cname: pulumi.Input<string>;
}

export interface DnspolicyRuleActionResponseResourceRecordSetResourceRecordSetIp6Address {
    ip6Addresses: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleActionResponseResourceRecordSetResourceRecordSetIp6AddressIp6Address>[]>;
}

export interface DnspolicyRuleActionResponseResourceRecordSetResourceRecordSetIp6AddressIp6Address {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface DnspolicyRuleActionResponseResourceRecordSetResourceRecordSetIpAddress {
    ipAddresses: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleActionResponseResourceRecordSetResourceRecordSetIpAddressIpAddress>[]>;
}

export interface DnspolicyRuleActionResponseResourceRecordSetResourceRecordSetIpAddressIpAddress {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface DnspolicyRuleActionResponseResourceRecordSetResourceRecordSetNse {
    ip6Addresses?: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleActionResponseResourceRecordSetResourceRecordSetNseIp6Address>[]>;
    ipAddresses?: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleActionResponseResourceRecordSetResourceRecordSetNseIpAddress>[]>;
    nsname: pulumi.Input<string>;
}

export interface DnspolicyRuleActionResponseResourceRecordSetResourceRecordSetNseIp6Address {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface DnspolicyRuleActionResponseResourceRecordSetResourceRecordSetNseIpAddress {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface DnspolicyRuleMatch {
    clientIpAddresses?: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleMatchClientIpAddress>[]>;
    clientPortNumbers?: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleMatchClientPortNumber>[]>;
    geoLocations?: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleMatchGeoLocation>[]>;
    protocols?: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleMatchProtocol>[]>;
    queryNames?: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleMatchQueryName>[]>;
    queryTypes?: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleMatchQueryType>[]>;
}

export interface DnspolicyRuleMatchClientIpAddress {
    clientIps: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleMatchClientIpAddressClientIp>[]>;
    useEdnsClientSubnetIp?: pulumi.Input<string>;
}

export interface DnspolicyRuleMatchClientIpAddressClientIp {
    addrs?: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleMatchClientIpAddressClientIpAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleMatchClientIpAddressClientIpPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleMatchClientIpAddressClientIpRange>[]>;
}

export interface DnspolicyRuleMatchClientIpAddressClientIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface DnspolicyRuleMatchClientIpAddressClientIpPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleMatchClientIpAddressClientIpPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface DnspolicyRuleMatchClientIpAddressClientIpPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface DnspolicyRuleMatchClientIpAddressClientIpRange {
    begins: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleMatchClientIpAddressClientIpRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleMatchClientIpAddressClientIpRangeEnd>[]>;
}

export interface DnspolicyRuleMatchClientIpAddressClientIpRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface DnspolicyRuleMatchClientIpAddressClientIpRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface DnspolicyRuleMatchClientPortNumber {
    clientPorts: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleMatchClientPortNumberClientPort>[]>;
}

export interface DnspolicyRuleMatchClientPortNumberClientPort {
    matchCriteria: pulumi.Input<string>;
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.DnspolicyRuleMatchClientPortNumberClientPortRange>[]>;
}

export interface DnspolicyRuleMatchClientPortNumberClientPortRange {
    end: pulumi.Input<string>;
    start: pulumi.Input<string>;
}

export interface DnspolicyRuleMatchGeoLocation {
    geolocationName?: pulumi.Input<string>;
    geolocationTag?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    useEdnsClientSubnetIp?: pulumi.Input<string>;
}

export interface DnspolicyRuleMatchProtocol {
    matchCriteria: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
}

export interface DnspolicyRuleMatchQueryName {
    matchCriteria: pulumi.Input<string>;
    queryDomainNames?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DnspolicyRuleMatchQueryType {
    matchCriteria: pulumi.Input<string>;
    queryTypes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DynamicdnsrecordCname {
    cname: pulumi.Input<string>;
}

export interface DynamicdnsrecordIp6Address {
    ip6Addresses: pulumi.Input<pulumi.Input<inputs.DynamicdnsrecordIp6AddressIp6Address>[]>;
}

export interface DynamicdnsrecordIp6AddressIp6Address {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface DynamicdnsrecordIpAddress {
    ipAddresses: pulumi.Input<pulumi.Input<inputs.DynamicdnsrecordIpAddressIpAddress>[]>;
}

export interface DynamicdnsrecordIpAddressIpAddress {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface DynamicdnsrecordMxRecord {
    host: pulumi.Input<string>;
    priority: pulumi.Input<string>;
}

export interface DynamicdnsrecordN {
    ip6Addresses?: pulumi.Input<pulumi.Input<inputs.DynamicdnsrecordNIp6Address>[]>;
    ipAddresses?: pulumi.Input<pulumi.Input<inputs.DynamicdnsrecordNIpAddress>[]>;
    nsname: pulumi.Input<string>;
}

export interface DynamicdnsrecordNIp6Address {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface DynamicdnsrecordNIpAddress {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface DynamicdnsrecordServiceLocator {
    port: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
    weight?: pulumi.Input<string>;
}

export interface DynamicdnsrecordTxtRecord {
    textStr: pulumi.Input<string>;
}

export interface ErrorpagebodyConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface ErrorpagebodyMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ErrorpageprofileConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface ErrorpageprofileErrorPage {
    enable?: pulumi.Input<string>;
    errorPageBodyRef?: pulumi.Input<string>;
    errorRedirect?: pulumi.Input<string>;
    index?: pulumi.Input<string>;
    matches?: pulumi.Input<pulumi.Input<inputs.ErrorpageprofileErrorPageMatch>[]>;
}

export interface ErrorpageprofileErrorPageMatch {
    matchCriteria: pulumi.Input<string>;
    ranges?: pulumi.Input<pulumi.Input<inputs.ErrorpageprofileErrorPageMatchRange>[]>;
    statusCodes?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface ErrorpageprofileErrorPageMatchRange {
    begin: pulumi.Input<string>;
    end: pulumi.Input<string>;
}

export interface ErrorpageprofileMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FederationcheckpointConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface FileobjectConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface FileobjectCrlInfo {
    commonName?: pulumi.Input<string>;
    distinguishedName?: pulumi.Input<string>;
    etag?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    lastRefreshed?: pulumi.Input<string>;
    lastUpdate?: pulumi.Input<string>;
    nextUpdate?: pulumi.Input<string>;
    serverUrl?: pulumi.Input<string>;
    text?: pulumi.Input<string>;
    updateInterval?: pulumi.Input<string>;
}

export interface GeodbFile {
    enabled?: pulumi.Input<string>;
    fileRef: pulumi.Input<string>;
    index: pulumi.Input<string>;
    name: pulumi.Input<string>;
    vendor: pulumi.Input<string>;
}

export interface GeodbMapping {
    description?: pulumi.Input<string>;
    elements: pulumi.Input<pulumi.Input<inputs.GeodbMappingElement>[]>;
    name: pulumi.Input<string>;
}

export interface GeodbMappingElement {
    attribute: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetClusterClusterState {
    progress?: string;
    state?: string;
    upSince?: string;
}

export interface GetClusterClusterStateArgs {
    progress?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    upSince?: pulumi.Input<string>;
}

export interface GslbClientIpAddrGroup {
    addrs?: pulumi.Input<pulumi.Input<inputs.GslbClientIpAddrGroupAddr>[]>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.GslbClientIpAddrGroupPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.GslbClientIpAddrGroupRange>[]>;
    type?: pulumi.Input<string>;
}

export interface GslbClientIpAddrGroupAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface GslbClientIpAddrGroupPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.GslbClientIpAddrGroupPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface GslbClientIpAddrGroupPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface GslbClientIpAddrGroupRange {
    begins: pulumi.Input<pulumi.Input<inputs.GslbClientIpAddrGroupRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.GslbClientIpAddrGroupRangeEnd>[]>;
}

export interface GslbClientIpAddrGroupRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface GslbClientIpAddrGroupRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface GslbConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface GslbDnsConfig {
    domainName: pulumi.Input<string>;
}

export interface GslbReplicationPolicy {
    checkpointRef?: pulumi.Input<string>;
    replicationMode?: pulumi.Input<string>;
}

export interface GslbSite {
    address?: pulumi.Input<string>;
    clusterUuid: pulumi.Input<string>;
    dnsVses?: pulumi.Input<pulumi.Input<inputs.GslbSiteDnsVse>[]>;
    enabled?: pulumi.Input<string>;
    hmProxies?: pulumi.Input<pulumi.Input<inputs.GslbSiteHmProxy>[]>;
    hmShardEnabled?: pulumi.Input<string>;
    ipAddresses?: pulumi.Input<pulumi.Input<inputs.GslbSiteIpAddress>[]>;
    locations?: pulumi.Input<pulumi.Input<inputs.GslbSiteLocation>[]>;
    memberType?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    password: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    ratio?: pulumi.Input<string>;
    suspendMode?: pulumi.Input<string>;
    username: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface GslbSiteDnsVse {
    dnsVsUuid: pulumi.Input<string>;
    domainNames?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GslbSiteHmProxy {
    proxyType?: pulumi.Input<string>;
    siteUuid?: pulumi.Input<string>;
}

export interface GslbSiteIpAddress {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface GslbSiteLocation {
    locations?: pulumi.Input<pulumi.Input<inputs.GslbSiteLocationLocation>[]>;
    source: pulumi.Input<string>;
}

export interface GslbSiteLocationLocation {
    latitude?: pulumi.Input<string>;
    longitude?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface GslbThirdPartySite {
    clusterUuid?: pulumi.Input<string>;
    enabled?: pulumi.Input<string>;
    hmProxies?: pulumi.Input<pulumi.Input<inputs.GslbThirdPartySiteHmProxy>[]>;
    locations?: pulumi.Input<pulumi.Input<inputs.GslbThirdPartySiteLocation>[]>;
    name: pulumi.Input<string>;
    ratio?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface GslbThirdPartySiteHmProxy {
    proxyType?: pulumi.Input<string>;
    siteUuid?: pulumi.Input<string>;
}

export interface GslbThirdPartySiteLocation {
    locations?: pulumi.Input<pulumi.Input<inputs.GslbThirdPartySiteLocationLocation>[]>;
    source: pulumi.Input<string>;
}

export interface GslbThirdPartySiteLocationLocation {
    latitude?: pulumi.Input<string>;
    longitude?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface GslbgeodbprofileConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface GslbgeodbprofileEntry {
    files: pulumi.Input<pulumi.Input<inputs.GslbgeodbprofileEntryFile>[]>;
    priority?: pulumi.Input<string>;
}

export interface GslbgeodbprofileEntryFile {
    checksum?: pulumi.Input<string>;
    fileId?: pulumi.Input<string>;
    fileIdChecksum?: pulumi.Input<string>;
    filename?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    timestamp?: pulumi.Input<string>;
}

export interface GslbgeodbprofileMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GslbserviceConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface GslbserviceDownResponse {
    fallbackCname?: pulumi.Input<string>;
    fallbackIp6s?: pulumi.Input<pulumi.Input<inputs.GslbserviceDownResponseFallbackIp6>[]>;
    fallbackIps?: pulumi.Input<pulumi.Input<inputs.GslbserviceDownResponseFallbackIp>[]>;
    type?: pulumi.Input<string>;
}

export interface GslbserviceDownResponseFallbackIp {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface GslbserviceDownResponseFallbackIp6 {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface GslbserviceGroup {
    algorithm?: pulumi.Input<string>;
    consistentHashMask?: pulumi.Input<string>;
    consistentHashMask6?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<string>;
    fallbackAlgorithm?: pulumi.Input<string>;
    manualResume?: pulumi.Input<string>;
    members: pulumi.Input<pulumi.Input<inputs.GslbserviceGroupMember>[]>;
    minHealthMonitorsUp?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
}

export interface GslbserviceGroupMember {
    cloudUuid?: pulumi.Input<string>;
    clusterUuid?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    ips?: pulumi.Input<pulumi.Input<inputs.GslbserviceGroupMemberIp>[]>;
    locations?: pulumi.Input<pulumi.Input<inputs.GslbserviceGroupMemberLocation>[]>;
    preferenceOrder?: pulumi.Input<string>;
    publicIps?: pulumi.Input<pulumi.Input<inputs.GslbserviceGroupMemberPublicIp>[]>;
    ratio?: pulumi.Input<string>;
    resolveFqdnToV6?: pulumi.Input<string>;
    vsUuid?: pulumi.Input<string>;
}

export interface GslbserviceGroupMemberIp {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface GslbserviceGroupMemberLocation {
    locations?: pulumi.Input<pulumi.Input<inputs.GslbserviceGroupMemberLocationLocation>[]>;
    source: pulumi.Input<string>;
}

export interface GslbserviceGroupMemberLocationLocation {
    latitude?: pulumi.Input<string>;
    longitude?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface GslbserviceGroupMemberPublicIp {
    ips?: pulumi.Input<pulumi.Input<inputs.GslbserviceGroupMemberPublicIpIp>[]>;
}

export interface GslbserviceGroupMemberPublicIpIp {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface GslbserviceMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HardwaresecuritymodulegroupConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface HardwaresecuritymodulegroupHsm {
    cloudhsms?: pulumi.Input<pulumi.Input<inputs.HardwaresecuritymodulegroupHsmCloudhsm>[]>;
    nethsms?: pulumi.Input<pulumi.Input<inputs.HardwaresecuritymodulegroupHsmNethsm>[]>;
    rfs?: pulumi.Input<pulumi.Input<inputs.HardwaresecuritymodulegroupHsmRf>[]>;
    slunas?: pulumi.Input<pulumi.Input<inputs.HardwaresecuritymodulegroupHsmSluna>[]>;
    type: pulumi.Input<string>;
}

export interface HardwaresecuritymodulegroupHsmCloudhsm {
    clientConfig?: pulumi.Input<string>;
    clusterCert?: pulumi.Input<string>;
    cryptoUserName?: pulumi.Input<string>;
    cryptoUserPassword?: pulumi.Input<string>;
    hsmIps?: pulumi.Input<pulumi.Input<string>[]>;
    mgmtConfig?: pulumi.Input<string>;
}

export interface HardwaresecuritymodulegroupHsmNethsm {
    esn: pulumi.Input<string>;
    keyhash: pulumi.Input<string>;
    moduleId?: pulumi.Input<string>;
    priority: pulumi.Input<string>;
    remoteIps: pulumi.Input<pulumi.Input<inputs.HardwaresecuritymodulegroupHsmNethsmRemoteIp>[]>;
    remotePort?: pulumi.Input<string>;
}

export interface HardwaresecuritymodulegroupHsmNethsmRemoteIp {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HardwaresecuritymodulegroupHsmRf {
    ips: pulumi.Input<pulumi.Input<inputs.HardwaresecuritymodulegroupHsmRfIp>[]>;
    port?: pulumi.Input<string>;
}

export interface HardwaresecuritymodulegroupHsmRfIp {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HardwaresecuritymodulegroupHsmSluna {
    haGroupNum?: pulumi.Input<string>;
    isHa: pulumi.Input<string>;
    nodeInfos?: pulumi.Input<pulumi.Input<inputs.HardwaresecuritymodulegroupHsmSlunaNodeInfo>[]>;
    serverPem?: pulumi.Input<string>;
    servers?: pulumi.Input<pulumi.Input<inputs.HardwaresecuritymodulegroupHsmSlunaServer>[]>;
    useDedicatedNetwork?: pulumi.Input<string>;
}

export interface HardwaresecuritymodulegroupHsmSlunaNodeInfo {
    chrystokiConf?: pulumi.Input<string>;
    clientCert?: pulumi.Input<string>;
    clientIp: pulumi.Input<string>;
    clientPrivKey?: pulumi.Input<string>;
    sessionMajorNumber?: pulumi.Input<string>;
    sessionMinorNumber?: pulumi.Input<string>;
}

export interface HardwaresecuritymodulegroupHsmSlunaServer {
    index: pulumi.Input<string>;
    partitionPasswd?: pulumi.Input<string>;
    partitionSerialNumber?: pulumi.Input<string>;
    remoteIp: pulumi.Input<string>;
    serverCert: pulumi.Input<string>;
}

export interface HardwaresecuritymodulegroupMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HealthmonitorAuthentication {
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface HealthmonitorConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface HealthmonitorDnsMonitor {
    qtype?: pulumi.Input<string>;
    queryName: pulumi.Input<string>;
    rcode?: pulumi.Input<string>;
    recordType?: pulumi.Input<string>;
    responseString?: pulumi.Input<string>;
}

export interface HealthmonitorExternalMonitor {
    commandCode: pulumi.Input<string>;
    commandParameters?: pulumi.Input<string>;
    commandPath?: pulumi.Input<string>;
    commandVariables?: pulumi.Input<string>;
}

export interface HealthmonitorFtpMonitor {
    filename: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    sslAttributes?: pulumi.Input<pulumi.Input<inputs.HealthmonitorFtpMonitorSslAttribute>[]>;
}

export interface HealthmonitorFtpMonitorSslAttribute {
    pkiProfileRef?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
    sslKeyAndCertificateRef?: pulumi.Input<string>;
    sslProfileRef: pulumi.Input<string>;
}

export interface HealthmonitorFtpsMonitor {
    filename: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    sslAttributes?: pulumi.Input<pulumi.Input<inputs.HealthmonitorFtpsMonitorSslAttribute>[]>;
}

export interface HealthmonitorFtpsMonitorSslAttribute {
    pkiProfileRef?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
    sslKeyAndCertificateRef?: pulumi.Input<string>;
    sslProfileRef: pulumi.Input<string>;
}

export interface HealthmonitorHttpMonitor {
    authType?: pulumi.Input<string>;
    exactHttpRequest?: pulumi.Input<string>;
    httpRequest?: pulumi.Input<string>;
    httpRequestBody?: pulumi.Input<string>;
    httpResponse?: pulumi.Input<string>;
    httpResponseCodes: pulumi.Input<pulumi.Input<string>[]>;
    maintenanceCodes?: pulumi.Input<pulumi.Input<number>[]>;
    maintenanceResponse?: pulumi.Input<string>;
    responseSize?: pulumi.Input<string>;
    sslAttributes?: pulumi.Input<pulumi.Input<inputs.HealthmonitorHttpMonitorSslAttribute>[]>;
}

export interface HealthmonitorHttpMonitorSslAttribute {
    pkiProfileRef?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
    sslKeyAndCertificateRef?: pulumi.Input<string>;
    sslProfileRef: pulumi.Input<string>;
}

export interface HealthmonitorHttpsMonitor {
    authType?: pulumi.Input<string>;
    exactHttpRequest?: pulumi.Input<string>;
    httpRequest?: pulumi.Input<string>;
    httpRequestBody?: pulumi.Input<string>;
    httpResponse?: pulumi.Input<string>;
    httpResponseCodes: pulumi.Input<pulumi.Input<string>[]>;
    maintenanceCodes?: pulumi.Input<pulumi.Input<number>[]>;
    maintenanceResponse?: pulumi.Input<string>;
    responseSize?: pulumi.Input<string>;
    sslAttributes?: pulumi.Input<pulumi.Input<inputs.HealthmonitorHttpsMonitorSslAttribute>[]>;
}

export interface HealthmonitorHttpsMonitorSslAttribute {
    pkiProfileRef?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
    sslKeyAndCertificateRef?: pulumi.Input<string>;
    sslProfileRef: pulumi.Input<string>;
}

export interface HealthmonitorImapMonitor {
    folder?: pulumi.Input<string>;
    sslAttributes?: pulumi.Input<pulumi.Input<inputs.HealthmonitorImapMonitorSslAttribute>[]>;
}

export interface HealthmonitorImapMonitorSslAttribute {
    pkiProfileRef?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
    sslKeyAndCertificateRef?: pulumi.Input<string>;
    sslProfileRef: pulumi.Input<string>;
}

export interface HealthmonitorImapsMonitor {
    folder?: pulumi.Input<string>;
    sslAttributes?: pulumi.Input<pulumi.Input<inputs.HealthmonitorImapsMonitorSslAttribute>[]>;
}

export interface HealthmonitorImapsMonitorSslAttribute {
    pkiProfileRef?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
    sslKeyAndCertificateRef?: pulumi.Input<string>;
    sslProfileRef: pulumi.Input<string>;
}

export interface HealthmonitorLdapMonitor {
    attributes?: pulumi.Input<string>;
    baseDn: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    sslAttributes?: pulumi.Input<pulumi.Input<inputs.HealthmonitorLdapMonitorSslAttribute>[]>;
}

export interface HealthmonitorLdapMonitorSslAttribute {
    pkiProfileRef?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
    sslKeyAndCertificateRef?: pulumi.Input<string>;
    sslProfileRef: pulumi.Input<string>;
}

export interface HealthmonitorLdapsMonitor {
    attributes?: pulumi.Input<string>;
    baseDn: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    sslAttributes?: pulumi.Input<pulumi.Input<inputs.HealthmonitorLdapsMonitorSslAttribute>[]>;
}

export interface HealthmonitorLdapsMonitorSslAttribute {
    pkiProfileRef?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
    sslKeyAndCertificateRef?: pulumi.Input<string>;
    sslProfileRef: pulumi.Input<string>;
}

export interface HealthmonitorMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HealthmonitorPop3Monitor {
    sslAttributes?: pulumi.Input<pulumi.Input<inputs.HealthmonitorPop3MonitorSslAttribute>[]>;
}

export interface HealthmonitorPop3MonitorSslAttribute {
    pkiProfileRef?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
    sslKeyAndCertificateRef?: pulumi.Input<string>;
    sslProfileRef: pulumi.Input<string>;
}

export interface HealthmonitorPop3sMonitor {
    sslAttributes?: pulumi.Input<pulumi.Input<inputs.HealthmonitorPop3sMonitorSslAttribute>[]>;
}

export interface HealthmonitorPop3sMonitorSslAttribute {
    pkiProfileRef?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
    sslKeyAndCertificateRef?: pulumi.Input<string>;
    sslProfileRef: pulumi.Input<string>;
}

export interface HealthmonitorRadiusMonitor {
    password: pulumi.Input<string>;
    sharedSecret: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface HealthmonitorSctpMonitor {
    sctpRequest?: pulumi.Input<string>;
    sctpResponse?: pulumi.Input<string>;
}

export interface HealthmonitorSipMonitor {
    sipMonitorTransport?: pulumi.Input<string>;
    sipRequestCode?: pulumi.Input<string>;
    sipResponse?: pulumi.Input<string>;
}

export interface HealthmonitorSmtpMonitor {
    domainname?: pulumi.Input<string>;
    mailData?: pulumi.Input<string>;
    recipientsIds?: pulumi.Input<pulumi.Input<string>[]>;
    senderId?: pulumi.Input<string>;
    sslAttributes?: pulumi.Input<pulumi.Input<inputs.HealthmonitorSmtpMonitorSslAttribute>[]>;
}

export interface HealthmonitorSmtpMonitorSslAttribute {
    pkiProfileRef?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
    sslKeyAndCertificateRef?: pulumi.Input<string>;
    sslProfileRef: pulumi.Input<string>;
}

export interface HealthmonitorSmtpsMonitor {
    domainname?: pulumi.Input<string>;
    mailData?: pulumi.Input<string>;
    recipientsIds?: pulumi.Input<pulumi.Input<string>[]>;
    senderId?: pulumi.Input<string>;
    sslAttributes?: pulumi.Input<pulumi.Input<inputs.HealthmonitorSmtpsMonitorSslAttribute>[]>;
}

export interface HealthmonitorSmtpsMonitorSslAttribute {
    pkiProfileRef?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
    sslKeyAndCertificateRef?: pulumi.Input<string>;
    sslProfileRef: pulumi.Input<string>;
}

export interface HealthmonitorTcpMonitor {
    maintenanceResponse?: pulumi.Input<string>;
    tcpHalfOpen?: pulumi.Input<string>;
    tcpRequest?: pulumi.Input<string>;
    tcpResponse?: pulumi.Input<string>;
}

export interface HealthmonitorUdpMonitor {
    maintenanceResponse?: pulumi.Input<string>;
    udpRequest?: pulumi.Input<string>;
    udpResponse?: pulumi.Input<string>;
}

export interface HttppolicysetConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicy {
    rules?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRule>[]>;
}

export interface HttppolicysetHttpRequestPolicyRule {
    allHeaders?: pulumi.Input<string>;
    enable: pulumi.Input<string>;
    hdrActions?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleHdrAction>[]>;
    index: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    matches?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatch>[]>;
    name: pulumi.Input<string>;
    redirectActions?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleRedirectAction>[]>;
    rewriteUrlActions?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleRewriteUrlAction>[]>;
    switchingActions?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleSwitchingAction>[]>;
}

export interface HttppolicysetHttpRequestPolicyRuleHdrAction {
    action: pulumi.Input<string>;
    cookies?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleHdrActionCookie>[]>;
    hdrIndex?: pulumi.Input<string>;
    hdrs?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleHdrActionHdr>[]>;
}

export interface HttppolicysetHttpRequestPolicyRuleHdrActionCookie {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleHdrActionHdr {
    name?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleHdrActionHdrValue>[]>;
}

export interface HttppolicysetHttpRequestPolicyRuleHdrActionHdrValue {
    isSensitive?: pulumi.Input<string>;
    val?: pulumi.Input<string>;
    var?: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatch {
    botDetectionResults?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatchBotDetectionResult>[]>;
    clientIps?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatchClientIp>[]>;
    cookies?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatchCookie>[]>;
    geoMatches?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatchGeoMatch>[]>;
    hdrs?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatchHdr>[]>;
    hostHdrs?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatchHostHdr>[]>;
    ipReputationTypes?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatchIpReputationType>[]>;
    methods?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatchMethod>[]>;
    paths?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatchPath>[]>;
    protocols?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatchProtocol>[]>;
    queries?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatchQuery>[]>;
    sourceIps?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatchSourceIp>[]>;
    tlsFingerprintMatches?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatchTlsFingerprintMatch>[]>;
    versions?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatchVersion>[]>;
    vsPorts?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatchVsPort>[]>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatchBotDetectionResult {
    classifications?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatchBotDetectionResultClassification>[]>;
    matchOperation: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatchBotDetectionResultClassification {
    type: pulumi.Input<string>;
    userDefinedType?: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatchClientIp {
    addrs?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatchClientIpAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatchClientIpPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatchClientIpRange>[]>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatchClientIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatchClientIpPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatchClientIpPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatchClientIpPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatchClientIpRange {
    begins: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatchClientIpRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatchClientIpRangeEnd>[]>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatchClientIpRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatchClientIpRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatchCookie {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    name: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatchGeoMatch {
    attribute: pulumi.Input<string>;
    matchOperation: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatchHdr {
    hdr: pulumi.Input<string>;
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatchHostHdr {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatchIpReputationType {
    matchOperation: pulumi.Input<string>;
    reputationTypes: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatchMethod {
    matchCriteria: pulumi.Input<string>;
    methods: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatchPath {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    matchDecodedString?: pulumi.Input<string>;
    matchStrs?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatchProtocol {
    matchCriteria: pulumi.Input<string>;
    protocols: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatchQuery {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    matchDecodedString?: pulumi.Input<string>;
    matchStrs?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatchSourceIp {
    addrs?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatchSourceIpAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatchSourceIpPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatchSourceIpRange>[]>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatchSourceIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatchSourceIpPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatchSourceIpPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatchSourceIpPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatchSourceIpRange {
    begins: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatchSourceIpRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleMatchSourceIpRangeEnd>[]>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatchSourceIpRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatchSourceIpRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatchTlsFingerprintMatch {
    fingerprints?: pulumi.Input<pulumi.Input<string>[]>;
    matchOperation: pulumi.Input<string>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatchVersion {
    matchCriteria: pulumi.Input<string>;
    versions: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HttppolicysetHttpRequestPolicyRuleMatchVsPort {
    matchCriteria: pulumi.Input<string>;
    ports: pulumi.Input<pulumi.Input<number>[]>;
}

export interface HttppolicysetHttpRequestPolicyRuleRedirectAction {
    addString?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleRedirectActionHost>[]>;
    keepQuery?: pulumi.Input<string>;
    paths?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleRedirectActionPath>[]>;
    port?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    statusCode?: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleRedirectActionHost {
    tokens: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleRedirectActionHostToken>[]>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleRedirectActionHostToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleRedirectActionPath {
    tokens: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleRedirectActionPathToken>[]>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleRedirectActionPathToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleRewriteUrlAction {
    hostHdrs?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleRewriteUrlActionHostHdr>[]>;
    paths?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleRewriteUrlActionPath>[]>;
    queries?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleRewriteUrlActionQuery>[]>;
}

export interface HttppolicysetHttpRequestPolicyRuleRewriteUrlActionHostHdr {
    tokens: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleRewriteUrlActionHostHdrToken>[]>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleRewriteUrlActionHostHdrToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleRewriteUrlActionPath {
    tokens: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleRewriteUrlActionPathToken>[]>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleRewriteUrlActionPathToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleRewriteUrlActionQuery {
    addString?: pulumi.Input<string>;
    keepQuery?: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleSwitchingAction {
    action: pulumi.Input<string>;
    files?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleSwitchingActionFile>[]>;
    otherStatusCode?: pulumi.Input<string>;
    poolGroupRef?: pulumi.Input<string>;
    poolRef?: pulumi.Input<string>;
    servers?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleSwitchingActionServer>[]>;
    statusCode?: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleSwitchingActionFile {
    contentType: pulumi.Input<string>;
    fileContent: pulumi.Input<string>;
    fileLength?: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleSwitchingActionServer {
    hostname?: pulumi.Input<string>;
    ips: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpRequestPolicyRuleSwitchingActionServerIp>[]>;
    port?: pulumi.Input<string>;
}

export interface HttppolicysetHttpRequestPolicyRuleSwitchingActionServerIp {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpResponsePolicy {
    rules?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRule>[]>;
}

export interface HttppolicysetHttpResponsePolicyRule {
    allHeaders?: pulumi.Input<string>;
    enable: pulumi.Input<string>;
    hdrActions?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleHdrAction>[]>;
    index: pulumi.Input<string>;
    locHdrActions?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleLocHdrAction>[]>;
    log?: pulumi.Input<string>;
    matches?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleMatch>[]>;
    name: pulumi.Input<string>;
}

export interface HttppolicysetHttpResponsePolicyRuleHdrAction {
    action: pulumi.Input<string>;
    cookies?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleHdrActionCookie>[]>;
    hdrIndex?: pulumi.Input<string>;
    hdrs?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleHdrActionHdr>[]>;
}

export interface HttppolicysetHttpResponsePolicyRuleHdrActionCookie {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HttppolicysetHttpResponsePolicyRuleHdrActionHdr {
    name?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleHdrActionHdrValue>[]>;
}

export interface HttppolicysetHttpResponsePolicyRuleHdrActionHdrValue {
    isSensitive?: pulumi.Input<string>;
    val?: pulumi.Input<string>;
    var?: pulumi.Input<string>;
}

export interface HttppolicysetHttpResponsePolicyRuleLocHdrAction {
    hosts?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleLocHdrActionHost>[]>;
    keepQuery?: pulumi.Input<string>;
    paths?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleLocHdrActionPath>[]>;
    port?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
}

export interface HttppolicysetHttpResponsePolicyRuleLocHdrActionHost {
    tokens: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleLocHdrActionHostToken>[]>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpResponsePolicyRuleLocHdrActionHostToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpResponsePolicyRuleLocHdrActionPath {
    tokens: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleLocHdrActionPathToken>[]>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpResponsePolicyRuleLocHdrActionPathToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpResponsePolicyRuleMatch {
    clientIps?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleMatchClientIp>[]>;
    cookies?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleMatchCookie>[]>;
    hdrs?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleMatchHdr>[]>;
    hostHdrs?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleMatchHostHdr>[]>;
    locHdrs?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleMatchLocHdr>[]>;
    methods?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleMatchMethod>[]>;
    paths?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleMatchPath>[]>;
    protocols?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleMatchProtocol>[]>;
    queries?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleMatchQuery>[]>;
    rspHdrs?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleMatchRspHdr>[]>;
    sourceIps?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleMatchSourceIp>[]>;
    statuses?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleMatchStatus>[]>;
    versions?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleMatchVersion>[]>;
    vsPorts?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleMatchVsPort>[]>;
}

export interface HttppolicysetHttpResponsePolicyRuleMatchClientIp {
    addrs?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleMatchClientIpAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleMatchClientIpPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleMatchClientIpRange>[]>;
}

export interface HttppolicysetHttpResponsePolicyRuleMatchClientIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpResponsePolicyRuleMatchClientIpPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleMatchClientIpPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface HttppolicysetHttpResponsePolicyRuleMatchClientIpPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpResponsePolicyRuleMatchClientIpRange {
    begins: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleMatchClientIpRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleMatchClientIpRangeEnd>[]>;
}

export interface HttppolicysetHttpResponsePolicyRuleMatchClientIpRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpResponsePolicyRuleMatchClientIpRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpResponsePolicyRuleMatchCookie {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    name: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HttppolicysetHttpResponsePolicyRuleMatchHdr {
    hdr: pulumi.Input<string>;
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HttppolicysetHttpResponsePolicyRuleMatchHostHdr {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HttppolicysetHttpResponsePolicyRuleMatchLocHdr {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HttppolicysetHttpResponsePolicyRuleMatchMethod {
    matchCriteria: pulumi.Input<string>;
    methods: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HttppolicysetHttpResponsePolicyRuleMatchPath {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    matchDecodedString?: pulumi.Input<string>;
    matchStrs?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HttppolicysetHttpResponsePolicyRuleMatchProtocol {
    matchCriteria: pulumi.Input<string>;
    protocols: pulumi.Input<string>;
}

export interface HttppolicysetHttpResponsePolicyRuleMatchQuery {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    matchDecodedString?: pulumi.Input<string>;
    matchStrs?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HttppolicysetHttpResponsePolicyRuleMatchRspHdr {
    hdr: pulumi.Input<string>;
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HttppolicysetHttpResponsePolicyRuleMatchSourceIp {
    addrs?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleMatchSourceIpAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleMatchSourceIpPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleMatchSourceIpRange>[]>;
}

export interface HttppolicysetHttpResponsePolicyRuleMatchSourceIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpResponsePolicyRuleMatchSourceIpPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleMatchSourceIpPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface HttppolicysetHttpResponsePolicyRuleMatchSourceIpPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpResponsePolicyRuleMatchSourceIpRange {
    begins: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleMatchSourceIpRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleMatchSourceIpRangeEnd>[]>;
}

export interface HttppolicysetHttpResponsePolicyRuleMatchSourceIpRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpResponsePolicyRuleMatchSourceIpRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpResponsePolicyRuleMatchStatus {
    matchCriteria: pulumi.Input<string>;
    ranges?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpResponsePolicyRuleMatchStatusRange>[]>;
    statusCodes?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface HttppolicysetHttpResponsePolicyRuleMatchStatusRange {
    begin: pulumi.Input<string>;
    end: pulumi.Input<string>;
}

export interface HttppolicysetHttpResponsePolicyRuleMatchVersion {
    matchCriteria: pulumi.Input<string>;
    versions: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HttppolicysetHttpResponsePolicyRuleMatchVsPort {
    matchCriteria: pulumi.Input<string>;
    ports: pulumi.Input<pulumi.Input<number>[]>;
}

export interface HttppolicysetHttpSecurityPolicy {
    rules?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRule>[]>;
}

export interface HttppolicysetHttpSecurityPolicyRule {
    actions?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleAction>[]>;
    enable: pulumi.Input<string>;
    index: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    matches?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatch>[]>;
    name: pulumi.Input<string>;
}

export interface HttppolicysetHttpSecurityPolicyRuleAction {
    action: pulumi.Input<string>;
    files?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleActionFile>[]>;
    httpsPort?: pulumi.Input<string>;
    rateProfiles?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleActionRateProfile>[]>;
    statusCode?: pulumi.Input<string>;
}

export interface HttppolicysetHttpSecurityPolicyRuleActionFile {
    contentType: pulumi.Input<string>;
    fileContent: pulumi.Input<string>;
    fileLength?: pulumi.Input<string>;
}

export interface HttppolicysetHttpSecurityPolicyRuleActionRateProfile {
    actions: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleActionRateProfileAction>[]>;
    perClientIp?: pulumi.Input<string>;
    perUriPath?: pulumi.Input<string>;
    rateLimiters: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleActionRateProfileRateLimiter>[]>;
}

export interface HttppolicysetHttpSecurityPolicyRuleActionRateProfileAction {
    files?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleActionRateProfileActionFile>[]>;
    redirects?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleActionRateProfileActionRedirect>[]>;
    statusCode?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface HttppolicysetHttpSecurityPolicyRuleActionRateProfileActionFile {
    contentType: pulumi.Input<string>;
    fileContent: pulumi.Input<string>;
    fileLength?: pulumi.Input<string>;
}

export interface HttppolicysetHttpSecurityPolicyRuleActionRateProfileActionRedirect {
    addString?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleActionRateProfileActionRedirectHost>[]>;
    keepQuery?: pulumi.Input<string>;
    paths?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleActionRateProfileActionRedirectPath>[]>;
    port?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    statusCode?: pulumi.Input<string>;
}

export interface HttppolicysetHttpSecurityPolicyRuleActionRateProfileActionRedirectHost {
    tokens: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleActionRateProfileActionRedirectHostToken>[]>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpSecurityPolicyRuleActionRateProfileActionRedirectHostToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpSecurityPolicyRuleActionRateProfileActionRedirectPath {
    tokens: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleActionRateProfileActionRedirectPathToken>[]>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpSecurityPolicyRuleActionRateProfileActionRedirectPathToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpSecurityPolicyRuleActionRateProfileRateLimiter {
    burstSz?: pulumi.Input<string>;
    count?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatch {
    botDetectionResults?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatchBotDetectionResult>[]>;
    clientIps?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatchClientIp>[]>;
    cookies?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatchCookie>[]>;
    geoMatches?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatchGeoMatch>[]>;
    hdrs?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatchHdr>[]>;
    hostHdrs?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatchHostHdr>[]>;
    ipReputationTypes?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatchIpReputationType>[]>;
    methods?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatchMethod>[]>;
    paths?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatchPath>[]>;
    protocols?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatchProtocol>[]>;
    queries?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatchQuery>[]>;
    sourceIps?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatchSourceIp>[]>;
    tlsFingerprintMatches?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatchTlsFingerprintMatch>[]>;
    versions?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatchVersion>[]>;
    vsPorts?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatchVsPort>[]>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatchBotDetectionResult {
    classifications?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatchBotDetectionResultClassification>[]>;
    matchOperation: pulumi.Input<string>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatchBotDetectionResultClassification {
    type: pulumi.Input<string>;
    userDefinedType?: pulumi.Input<string>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatchClientIp {
    addrs?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatchClientIpAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatchClientIpPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatchClientIpRange>[]>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatchClientIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatchClientIpPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatchClientIpPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatchClientIpPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatchClientIpRange {
    begins: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatchClientIpRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatchClientIpRangeEnd>[]>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatchClientIpRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatchClientIpRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatchCookie {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    name: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatchGeoMatch {
    attribute: pulumi.Input<string>;
    matchOperation: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatchHdr {
    hdr: pulumi.Input<string>;
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatchHostHdr {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatchIpReputationType {
    matchOperation: pulumi.Input<string>;
    reputationTypes: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatchMethod {
    matchCriteria: pulumi.Input<string>;
    methods: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatchPath {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    matchDecodedString?: pulumi.Input<string>;
    matchStrs?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatchProtocol {
    matchCriteria: pulumi.Input<string>;
    protocols: pulumi.Input<string>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatchQuery {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    matchDecodedString?: pulumi.Input<string>;
    matchStrs?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatchSourceIp {
    addrs?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatchSourceIpAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatchSourceIpPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatchSourceIpRange>[]>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatchSourceIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatchSourceIpPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatchSourceIpPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatchSourceIpPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatchSourceIpRange {
    begins: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatchSourceIpRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.HttppolicysetHttpSecurityPolicyRuleMatchSourceIpRangeEnd>[]>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatchSourceIpRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatchSourceIpRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatchTlsFingerprintMatch {
    fingerprints?: pulumi.Input<pulumi.Input<string>[]>;
    matchOperation: pulumi.Input<string>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatchVersion {
    matchCriteria: pulumi.Input<string>;
    versions: pulumi.Input<pulumi.Input<string>[]>;
}

export interface HttppolicysetHttpSecurityPolicyRuleMatchVsPort {
    matchCriteria: pulumi.Input<string>;
    ports: pulumi.Input<pulumi.Input<number>[]>;
}

export interface HttppolicysetMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface IcapprofileConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface IcapprofileNsxDefenderConfig {
    statusUrl?: pulumi.Input<string>;
}

export interface ImageCloudInfoValue {
    cloudDataValues?: pulumi.Input<pulumi.Input<inputs.ImageCloudInfoValueCloudDataValue>[]>;
    cloudName?: pulumi.Input<string>;
}

export interface ImageCloudInfoValueCloudDataValue {
    key?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ImageControllerInfo {
    builds?: pulumi.Input<pulumi.Input<inputs.ImageControllerInfoBuild>[]>;
    hash?: pulumi.Input<string>;
    patches?: pulumi.Input<pulumi.Input<inputs.ImageControllerInfoPatch>[]>;
    path?: pulumi.Input<string>;
}

export interface ImageControllerInfoBuild {
    buildNo?: pulumi.Input<string>;
    date?: pulumi.Input<string>;
    minVersion?: pulumi.Input<string>;
    patchVersion?: pulumi.Input<string>;
    product?: pulumi.Input<string>;
    productName?: pulumi.Input<string>;
    remoteImageRef?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface ImageControllerInfoPatch {
    patchType?: pulumi.Input<string>;
    reboot?: pulumi.Input<string>;
    rebootLists?: pulumi.Input<pulumi.Input<inputs.ImageControllerInfoPatchRebootList>[]>;
}

export interface ImageControllerInfoPatchRebootList {
    patchVersion?: pulumi.Input<string>;
    reboot?: pulumi.Input<string>;
}

export interface ImageEvent {
    nodesEvents?: pulumi.Input<pulumi.Input<inputs.ImageEventNodesEvent>[]>;
    subEvents?: pulumi.Input<pulumi.Input<inputs.ImageEventSubEvent>[]>;
    taskName?: pulumi.Input<string>;
}

export interface ImageEventNodesEvent {
    duration?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    ips?: pulumi.Input<pulumi.Input<inputs.ImageEventNodesEventIp>[]>;
    message?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    subTasks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ImageEventNodesEventIp {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ImageEventSubEvent {
    duration?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    ips?: pulumi.Input<pulumi.Input<inputs.ImageEventSubEventIp>[]>;
    message?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    subTasks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ImageEventSubEventIp {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ImageImgState {
    lastChangedTimes?: pulumi.Input<pulumi.Input<inputs.ImageImgStateLastChangedTime>[]>;
    reason?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}

export interface ImageImgStateLastChangedTime {
    secs: pulumi.Input<string>;
    usecs: pulumi.Input<string>;
}

export interface ImageMigration {
    apiVersion?: pulumi.Input<string>;
    controllerHostMinFreeDiskSize?: pulumi.Input<string>;
    controllerMinCores?: pulumi.Input<string>;
    controllerMinDockerVersion?: pulumi.Input<string>;
    controllerMinFreeDiskSize?: pulumi.Input<string>;
    controllerMinMemory?: pulumi.Input<string>;
    controllerMinTotalDisk?: pulumi.Input<string>;
    maxActiveVersions?: pulumi.Input<string>;
    minSupportedApiVersion?: pulumi.Input<string>;
    podmanControllerHostMinFreeDiskSize?: pulumi.Input<string>;
    podmanSeHostMinFreeDiskSize?: pulumi.Input<string>;
    rollbackControllerDiskSpace?: pulumi.Input<string>;
    rollbackSeDiskSpace?: pulumi.Input<string>;
    seHostMinFreeDiskSize?: pulumi.Input<string>;
    seMinCores?: pulumi.Input<string>;
    seMinFreeDiskSize?: pulumi.Input<string>;
    seMinMemory?: pulumi.Input<string>;
    seMinTotalDisk?: pulumi.Input<string>;
    versions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ImageSeInfo {
    builds?: pulumi.Input<pulumi.Input<inputs.ImageSeInfoBuild>[]>;
    hash?: pulumi.Input<string>;
    patches?: pulumi.Input<pulumi.Input<inputs.ImageSeInfoPatch>[]>;
    path?: pulumi.Input<string>;
}

export interface ImageSeInfoBuild {
    buildNo?: pulumi.Input<string>;
    date?: pulumi.Input<string>;
    minVersion?: pulumi.Input<string>;
    patchVersion?: pulumi.Input<string>;
    product?: pulumi.Input<string>;
    productName?: pulumi.Input<string>;
    remoteImageRef?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface ImageSeInfoPatch {
    patchType?: pulumi.Input<string>;
    reboot?: pulumi.Input<string>;
    rebootLists?: pulumi.Input<pulumi.Input<inputs.ImageSeInfoPatchRebootList>[]>;
}

export interface ImageSeInfoPatchRebootList {
    patchVersion?: pulumi.Input<string>;
    reboot?: pulumi.Input<string>;
}

export interface InventoryfaultconfigConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface InventoryfaultconfigControllerFault {
    backupSchedulerFaults?: pulumi.Input<string>;
    clusterFaults?: pulumi.Input<string>;
    deprecatedApiVersionFaults?: pulumi.Input<string>;
    licenseFaults?: pulumi.Input<string>;
    migrationFaults?: pulumi.Input<string>;
    sslprofileFaults?: pulumi.Input<string>;
}

export interface InventoryfaultconfigServiceengineFault {
    debugFaults?: pulumi.Input<string>;
}

export interface InventoryfaultconfigVirtualserviceFault {
    debugFaults?: pulumi.Input<string>;
    poolServerFaults?: pulumi.Input<string>;
    scaleoutFaults?: pulumi.Input<string>;
    sharedVipFaults?: pulumi.Input<string>;
    sslCertExpiryFaults?: pulumi.Input<string>;
    sslCertStatusFaults?: pulumi.Input<string>;
}

export interface IpaddrgroupAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface IpaddrgroupConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface IpaddrgroupIpPort {
    hostname?: pulumi.Input<string>;
    ips?: pulumi.Input<pulumi.Input<inputs.IpaddrgroupIpPortIp>[]>;
    name?: pulumi.Input<string>;
    port: pulumi.Input<string>;
}

export interface IpaddrgroupIpPortIp {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface IpaddrgroupMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface IpaddrgroupPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.IpaddrgroupPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface IpaddrgroupPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface IpaddrgroupRange {
    begins: pulumi.Input<pulumi.Input<inputs.IpaddrgroupRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.IpaddrgroupRangeEnd>[]>;
}

export interface IpaddrgroupRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface IpaddrgroupRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface IpamdnsproviderprofileAwsProfile {
    accessKeyId?: pulumi.Input<string>;
    egressServiceSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    iamAssumeRole?: pulumi.Input<string>;
    publishVipToPublicZone?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    secretAccessKey?: pulumi.Input<string>;
    ttl?: pulumi.Input<string>;
    usableDomains?: pulumi.Input<pulumi.Input<string>[]>;
    usableNetworkUuids?: pulumi.Input<pulumi.Input<string>[]>;
    useIamRoles?: pulumi.Input<string>;
    vpc?: pulumi.Input<string>;
    vpcId: pulumi.Input<string>;
    zones?: pulumi.Input<pulumi.Input<inputs.IpamdnsproviderprofileAwsProfileZone>[]>;
}

export interface IpamdnsproviderprofileAwsProfileZone {
    availabilityZone: pulumi.Input<string>;
    usableNetworkUuids?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface IpamdnsproviderprofileAzureProfile {
    azureServiceprincipals?: pulumi.Input<pulumi.Input<inputs.IpamdnsproviderprofileAzureProfileAzureServiceprincipal>[]>;
    azureUserpasses?: pulumi.Input<pulumi.Input<inputs.IpamdnsproviderprofileAzureProfileAzureUserpass>[]>;
    egressServiceSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    resourceGroup?: pulumi.Input<string>;
    subscriptionId?: pulumi.Input<string>;
    usableDomains?: pulumi.Input<pulumi.Input<string>[]>;
    usableNetworkUuids?: pulumi.Input<pulumi.Input<string>[]>;
    useEnhancedHa?: pulumi.Input<string>;
    useStandardAlb?: pulumi.Input<string>;
    virtualNetworkIds?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface IpamdnsproviderprofileAzureProfileAzureServiceprincipal {
    applicationId?: pulumi.Input<string>;
    authenticationToken?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
}

export interface IpamdnsproviderprofileAzureProfileAzureUserpass {
    password?: pulumi.Input<string>;
    tenantName?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface IpamdnsproviderprofileConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface IpamdnsproviderprofileCustomProfile {
    customIpamDnsProfileRef?: pulumi.Input<string>;
    dynamicParams?: pulumi.Input<pulumi.Input<inputs.IpamdnsproviderprofileCustomProfileDynamicParam>[]>;
    usableAllocSubnets?: pulumi.Input<pulumi.Input<inputs.IpamdnsproviderprofileCustomProfileUsableAllocSubnet>[]>;
    usableDomains?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface IpamdnsproviderprofileCustomProfileDynamicParam {
    isDynamic?: pulumi.Input<string>;
    isSensitive?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface IpamdnsproviderprofileCustomProfileUsableAllocSubnet {
    networkId: pulumi.Input<string>;
    subnet6s?: pulumi.Input<pulumi.Input<inputs.IpamdnsproviderprofileCustomProfileUsableAllocSubnetSubnet6>[]>;
    subnets?: pulumi.Input<pulumi.Input<inputs.IpamdnsproviderprofileCustomProfileUsableAllocSubnetSubnet>[]>;
}

export interface IpamdnsproviderprofileCustomProfileUsableAllocSubnetSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.IpamdnsproviderprofileCustomProfileUsableAllocSubnetSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface IpamdnsproviderprofileCustomProfileUsableAllocSubnetSubnet6 {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.IpamdnsproviderprofileCustomProfileUsableAllocSubnetSubnet6IpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface IpamdnsproviderprofileCustomProfileUsableAllocSubnetSubnet6IpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface IpamdnsproviderprofileCustomProfileUsableAllocSubnetSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface IpamdnsproviderprofileGcpProfile {
    matchSeGroupSubnet?: pulumi.Input<string>;
    networkHostProjectId?: pulumi.Input<string>;
    regionName?: pulumi.Input<string>;
    seProjectId?: pulumi.Input<string>;
    usableNetworkRefs?: pulumi.Input<pulumi.Input<string>[]>;
    useGcpNetwork?: pulumi.Input<string>;
    vpcNetworkName?: pulumi.Input<string>;
}

export interface IpamdnsproviderprofileInfobloxProfile {
    dnsView?: pulumi.Input<string>;
    extensibleAttributes?: pulumi.Input<pulumi.Input<inputs.IpamdnsproviderprofileInfobloxProfileExtensibleAttribute>[]>;
    ip6Addresses?: pulumi.Input<pulumi.Input<inputs.IpamdnsproviderprofileInfobloxProfileIp6Address>[]>;
    ipAddresses?: pulumi.Input<pulumi.Input<inputs.IpamdnsproviderprofileInfobloxProfileIpAddress>[]>;
    networkView?: pulumi.Input<string>;
    password: pulumi.Input<string>;
    profileUrl?: pulumi.Input<string>;
    usableAllocSubnets?: pulumi.Input<pulumi.Input<inputs.IpamdnsproviderprofileInfobloxProfileUsableAllocSubnet>[]>;
    usableDomains?: pulumi.Input<pulumi.Input<string>[]>;
    username: pulumi.Input<string>;
    wapiVersion?: pulumi.Input<string>;
}

export interface IpamdnsproviderprofileInfobloxProfileExtensibleAttribute {
    isDynamic?: pulumi.Input<string>;
    isSensitive?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface IpamdnsproviderprofileInfobloxProfileIp6Address {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface IpamdnsproviderprofileInfobloxProfileIpAddress {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface IpamdnsproviderprofileInfobloxProfileUsableAllocSubnet {
    subnet6s?: pulumi.Input<pulumi.Input<inputs.IpamdnsproviderprofileInfobloxProfileUsableAllocSubnetSubnet6>[]>;
    subnets?: pulumi.Input<pulumi.Input<inputs.IpamdnsproviderprofileInfobloxProfileUsableAllocSubnetSubnet>[]>;
}

export interface IpamdnsproviderprofileInfobloxProfileUsableAllocSubnetSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.IpamdnsproviderprofileInfobloxProfileUsableAllocSubnetSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface IpamdnsproviderprofileInfobloxProfileUsableAllocSubnetSubnet6 {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.IpamdnsproviderprofileInfobloxProfileUsableAllocSubnetSubnet6IpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface IpamdnsproviderprofileInfobloxProfileUsableAllocSubnetSubnet6IpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface IpamdnsproviderprofileInfobloxProfileUsableAllocSubnetSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface IpamdnsproviderprofileInternalProfile {
    dnsServiceDomains?: pulumi.Input<pulumi.Input<inputs.IpamdnsproviderprofileInternalProfileDnsServiceDomain>[]>;
    dnsVirtualserviceRef?: pulumi.Input<string>;
    ttl?: pulumi.Input<string>;
    usableNetworks?: pulumi.Input<pulumi.Input<inputs.IpamdnsproviderprofileInternalProfileUsableNetwork>[]>;
}

export interface IpamdnsproviderprofileInternalProfileDnsServiceDomain {
    domainName: pulumi.Input<string>;
    passThrough?: pulumi.Input<string>;
    recordTtl?: pulumi.Input<string>;
}

export interface IpamdnsproviderprofileInternalProfileUsableNetwork {
    labels?: pulumi.Input<pulumi.Input<inputs.IpamdnsproviderprofileInternalProfileUsableNetworkLabel>[]>;
    nwRef: pulumi.Input<string>;
}

export interface IpamdnsproviderprofileInternalProfileUsableNetworkLabel {
    key: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface IpamdnsproviderprofileMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface IpamdnsproviderprofileOciProfile {
    cloudCredentialsRef?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    tenancy?: pulumi.Input<string>;
    vcnCompartmentId?: pulumi.Input<string>;
    vcnId?: pulumi.Input<string>;
}

export interface IpamdnsproviderprofileOpenstackProfile {
    keystoneHost?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    tenant?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    vipNetworkName?: pulumi.Input<string>;
}

export interface IpamdnsproviderprofileProxyConfiguration {
    host: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface IpamdnsproviderprofileTencentProfile {
    cloudCredentialsRef?: pulumi.Input<string>;
    region: pulumi.Input<string>;
    usableSubnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    vpcId: pulumi.Input<string>;
    zones?: pulumi.Input<pulumi.Input<inputs.IpamdnsproviderprofileTencentProfileZone>[]>;
}

export interface IpamdnsproviderprofileTencentProfileZone {
    availabilityZone: pulumi.Input<string>;
    usableSubnetId: pulumi.Input<string>;
}

export interface IpreputationdbConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface IpreputationdbMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface IpreputationdbServiceStatus {
    error?: pulumi.Input<string>;
    lastSuccessfulUpdateChecks?: pulumi.Input<pulumi.Input<inputs.IpreputationdbServiceStatusLastSuccessfulUpdateCheck>[]>;
}

export interface IpreputationdbServiceStatusLastSuccessfulUpdateCheck {
    secs: pulumi.Input<string>;
    usecs: pulumi.Input<string>;
}

export interface JwtserverprofileConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface JwtserverprofileControllerInternalAuth {
    symmetricJwksKeys: pulumi.Input<pulumi.Input<inputs.JwtserverprofileControllerInternalAuthSymmetricJwksKey>[]>;
}

export interface JwtserverprofileControllerInternalAuthSymmetricJwksKey {
    alg?: pulumi.Input<string>;
    key: pulumi.Input<string>;
    kid: pulumi.Input<string>;
    kty?: pulumi.Input<string>;
}

export interface L4policysetConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface L4policysetL4ConnectionPolicy {
    rules?: pulumi.Input<pulumi.Input<inputs.L4policysetL4ConnectionPolicyRule>[]>;
}

export interface L4policysetL4ConnectionPolicyRule {
    actions?: pulumi.Input<pulumi.Input<inputs.L4policysetL4ConnectionPolicyRuleAction>[]>;
    enable?: pulumi.Input<string>;
    index: pulumi.Input<string>;
    matches?: pulumi.Input<pulumi.Input<inputs.L4policysetL4ConnectionPolicyRuleMatch>[]>;
    name: pulumi.Input<string>;
}

export interface L4policysetL4ConnectionPolicyRuleAction {
    selectPools?: pulumi.Input<pulumi.Input<inputs.L4policysetL4ConnectionPolicyRuleActionSelectPool>[]>;
}

export interface L4policysetL4ConnectionPolicyRuleActionSelectPool {
    actionType: pulumi.Input<string>;
    poolGroupRef?: pulumi.Input<string>;
    poolRef?: pulumi.Input<string>;
}

export interface L4policysetL4ConnectionPolicyRuleMatch {
    clientIps?: pulumi.Input<pulumi.Input<inputs.L4policysetL4ConnectionPolicyRuleMatchClientIp>[]>;
    ports?: pulumi.Input<pulumi.Input<inputs.L4policysetL4ConnectionPolicyRuleMatchPort>[]>;
    protocols?: pulumi.Input<pulumi.Input<inputs.L4policysetL4ConnectionPolicyRuleMatchProtocol>[]>;
}

export interface L4policysetL4ConnectionPolicyRuleMatchClientIp {
    addrs?: pulumi.Input<pulumi.Input<inputs.L4policysetL4ConnectionPolicyRuleMatchClientIpAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.L4policysetL4ConnectionPolicyRuleMatchClientIpPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.L4policysetL4ConnectionPolicyRuleMatchClientIpRange>[]>;
}

export interface L4policysetL4ConnectionPolicyRuleMatchClientIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface L4policysetL4ConnectionPolicyRuleMatchClientIpPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.L4policysetL4ConnectionPolicyRuleMatchClientIpPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface L4policysetL4ConnectionPolicyRuleMatchClientIpPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface L4policysetL4ConnectionPolicyRuleMatchClientIpRange {
    begins: pulumi.Input<pulumi.Input<inputs.L4policysetL4ConnectionPolicyRuleMatchClientIpRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.L4policysetL4ConnectionPolicyRuleMatchClientIpRangeEnd>[]>;
}

export interface L4policysetL4ConnectionPolicyRuleMatchClientIpRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface L4policysetL4ConnectionPolicyRuleMatchClientIpRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface L4policysetL4ConnectionPolicyRuleMatchPort {
    matchCriteria: pulumi.Input<string>;
    portRanges?: pulumi.Input<pulumi.Input<inputs.L4policysetL4ConnectionPolicyRuleMatchPortPortRange>[]>;
    ports?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface L4policysetL4ConnectionPolicyRuleMatchPortPortRange {
    end: pulumi.Input<string>;
    start: pulumi.Input<string>;
}

export interface L4policysetL4ConnectionPolicyRuleMatchProtocol {
    matchCriteria: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
}

export interface L4policysetMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LabelgroupConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface LabelgroupLabel {
    matchLabels: pulumi.Input<pulumi.Input<inputs.LabelgroupLabelMatchLabel>[]>;
    matchOperation?: pulumi.Input<string>;
}

export interface LabelgroupLabelMatchLabel {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LicenseledgerdetailsEscrowInfo {
    lastUpdated: pulumi.Input<string>;
    serviceCores: pulumi.Input<string>;
    tenantUuid?: pulumi.Input<string>;
    tier: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface LicenseledgerdetailsSeInfo {
    lastUpdated: pulumi.Input<string>;
    serviceCores: pulumi.Input<string>;
    tenantUuid?: pulumi.Input<string>;
    tier: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface LicenseledgerdetailsTierUsage {
    tier?: pulumi.Input<string>;
    usages?: pulumi.Input<pulumi.Input<inputs.LicenseledgerdetailsTierUsageUsage>[]>;
}

export interface LicenseledgerdetailsTierUsageUsage {
    available?: pulumi.Input<string>;
    consumed?: pulumi.Input<string>;
    escrow?: pulumi.Input<string>;
    remaining?: pulumi.Input<string>;
}

export interface LicensestatusConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface LicensestatusSaasStatus {
    connected?: pulumi.Input<string>;
    enabled?: pulumi.Input<string>;
    expired?: pulumi.Input<string>;
    message?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    publicKey?: pulumi.Input<string>;
    reserveServiceUnits?: pulumi.Input<string>;
}

export interface LicensestatusServiceUpdate {
    name?: pulumi.Input<string>;
    serviceUnits?: pulumi.Input<pulumi.Input<inputs.LicensestatusServiceUpdateServiceUnit>[]>;
}

export interface LicensestatusServiceUpdateServiceUnit {
    availableServiceUnits?: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
    usedServiceUnits?: pulumi.Input<string>;
}

export interface MemorybalancerrequestConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface MemorybalancerrequestControllerInfo {
    currentControllerMemUsage?: pulumi.Input<string>;
}

export interface MemorybalancerrequestProcessInfo {
    currentProcessId?: pulumi.Input<string>;
    currentProcessMemUsage?: pulumi.Input<string>;
    intimationCount?: pulumi.Input<string>;
    memoryLimit?: pulumi.Input<string>;
    memoryTrendUsage?: pulumi.Input<string>;
    processMode?: pulumi.Input<string>;
    thresholdPercent?: pulumi.Input<string>;
}

export interface MicroservicegroupConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface NatpolicyConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface NatpolicyMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NatpolicyRule {
    actions: pulumi.Input<pulumi.Input<inputs.NatpolicyRuleAction>[]>;
    createdBy?: pulumi.Input<string>;
    enable: pulumi.Input<string>;
    index: pulumi.Input<string>;
    matches: pulumi.Input<pulumi.Input<inputs.NatpolicyRuleMatch>[]>;
    name: pulumi.Input<string>;
}

export interface NatpolicyRuleAction {
    natInfos?: pulumi.Input<pulumi.Input<inputs.NatpolicyRuleActionNatInfo>[]>;
    type: pulumi.Input<string>;
}

export interface NatpolicyRuleActionNatInfo {
    natIpRanges?: pulumi.Input<pulumi.Input<inputs.NatpolicyRuleActionNatInfoNatIpRange>[]>;
    natIps?: pulumi.Input<pulumi.Input<inputs.NatpolicyRuleActionNatInfoNatIp>[]>;
}

export interface NatpolicyRuleActionNatInfoNatIp {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NatpolicyRuleActionNatInfoNatIpRange {
    begins: pulumi.Input<pulumi.Input<inputs.NatpolicyRuleActionNatInfoNatIpRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.NatpolicyRuleActionNatInfoNatIpRangeEnd>[]>;
}

export interface NatpolicyRuleActionNatInfoNatIpRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NatpolicyRuleActionNatInfoNatIpRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NatpolicyRuleMatch {
    destinationIps?: pulumi.Input<pulumi.Input<inputs.NatpolicyRuleMatchDestinationIp>[]>;
    services?: pulumi.Input<pulumi.Input<inputs.NatpolicyRuleMatchService>[]>;
    sourceIps?: pulumi.Input<pulumi.Input<inputs.NatpolicyRuleMatchSourceIp>[]>;
}

export interface NatpolicyRuleMatchDestinationIp {
    addrs?: pulumi.Input<pulumi.Input<inputs.NatpolicyRuleMatchDestinationIpAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.NatpolicyRuleMatchDestinationIpPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.NatpolicyRuleMatchDestinationIpRange>[]>;
}

export interface NatpolicyRuleMatchDestinationIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NatpolicyRuleMatchDestinationIpPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.NatpolicyRuleMatchDestinationIpPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface NatpolicyRuleMatchDestinationIpPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NatpolicyRuleMatchDestinationIpRange {
    begins: pulumi.Input<pulumi.Input<inputs.NatpolicyRuleMatchDestinationIpRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.NatpolicyRuleMatchDestinationIpRangeEnd>[]>;
}

export interface NatpolicyRuleMatchDestinationIpRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NatpolicyRuleMatchDestinationIpRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NatpolicyRuleMatchService {
    destinationPorts?: pulumi.Input<pulumi.Input<inputs.NatpolicyRuleMatchServiceDestinationPort>[]>;
    protocols?: pulumi.Input<pulumi.Input<inputs.NatpolicyRuleMatchServiceProtocol>[]>;
    sourcePorts?: pulumi.Input<pulumi.Input<inputs.NatpolicyRuleMatchServiceSourcePort>[]>;
}

export interface NatpolicyRuleMatchServiceDestinationPort {
    matchCriteria: pulumi.Input<string>;
    ports: pulumi.Input<pulumi.Input<number>[]>;
}

export interface NatpolicyRuleMatchServiceProtocol {
    matchCriteria: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
}

export interface NatpolicyRuleMatchServiceSourcePort {
    matchCriteria: pulumi.Input<string>;
    ports: pulumi.Input<pulumi.Input<number>[]>;
}

export interface NatpolicyRuleMatchSourceIp {
    addrs?: pulumi.Input<pulumi.Input<inputs.NatpolicyRuleMatchSourceIpAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.NatpolicyRuleMatchSourceIpPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.NatpolicyRuleMatchSourceIpRange>[]>;
}

export interface NatpolicyRuleMatchSourceIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NatpolicyRuleMatchSourceIpPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.NatpolicyRuleMatchSourceIpPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface NatpolicyRuleMatchSourceIpPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NatpolicyRuleMatchSourceIpRange {
    begins: pulumi.Input<pulumi.Input<inputs.NatpolicyRuleMatchSourceIpRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.NatpolicyRuleMatchSourceIpRangeEnd>[]>;
}

export interface NatpolicyRuleMatchSourceIpRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NatpolicyRuleMatchSourceIpRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NetworkAttr {
    key: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NetworkConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface NetworkConfiguredSubnet {
    prefixes: pulumi.Input<pulumi.Input<inputs.NetworkConfiguredSubnetPrefix>[]>;
    staticIpRanges?: pulumi.Input<pulumi.Input<inputs.NetworkConfiguredSubnetStaticIpRange>[]>;
}

export interface NetworkConfiguredSubnetPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.NetworkConfiguredSubnetPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface NetworkConfiguredSubnetPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NetworkConfiguredSubnetStaticIpRange {
    ranges: pulumi.Input<pulumi.Input<inputs.NetworkConfiguredSubnetStaticIpRangeRange>[]>;
    type?: pulumi.Input<string>;
}

export interface NetworkConfiguredSubnetStaticIpRangeRange {
    begins: pulumi.Input<pulumi.Input<inputs.NetworkConfiguredSubnetStaticIpRangeRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.NetworkConfiguredSubnetStaticIpRangeRangeEnd>[]>;
}

export interface NetworkConfiguredSubnetStaticIpRangeRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NetworkConfiguredSubnetStaticIpRangeRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NetworkMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkprofileConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface NetworkprofileMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkprofileProfile {
    sctpFastPathProfiles?: pulumi.Input<pulumi.Input<inputs.NetworkprofileProfileSctpFastPathProfile>[]>;
    sctpProxyProfiles?: pulumi.Input<pulumi.Input<inputs.NetworkprofileProfileSctpProxyProfile>[]>;
    tcpFastPathProfiles?: pulumi.Input<pulumi.Input<inputs.NetworkprofileProfileTcpFastPathProfile>[]>;
    tcpProxyProfiles?: pulumi.Input<pulumi.Input<inputs.NetworkprofileProfileTcpProxyProfile>[]>;
    type: pulumi.Input<string>;
    udpFastPathProfiles?: pulumi.Input<pulumi.Input<inputs.NetworkprofileProfileUdpFastPathProfile>[]>;
    udpProxyProfiles?: pulumi.Input<pulumi.Input<inputs.NetworkprofileProfileUdpProxyProfile>[]>;
}

export interface NetworkprofileProfileSctpFastPathProfile {
    enableInitChunkProtection?: pulumi.Input<string>;
    idleTimeout?: pulumi.Input<string>;
}

export interface NetworkprofileProfileSctpProxyProfile {
    cookieExpirationTimeout?: pulumi.Input<string>;
    heartbeatInterval?: pulumi.Input<string>;
    idleTimeout?: pulumi.Input<string>;
    maxRetransmissionsAssociation?: pulumi.Input<string>;
    maxRetransmissionsInitChunks?: pulumi.Input<string>;
    numberOfStreams?: pulumi.Input<string>;
    receiveWindow?: pulumi.Input<string>;
    resetTimeout?: pulumi.Input<string>;
}

export interface NetworkprofileProfileTcpFastPathProfile {
    dsrProfiles?: pulumi.Input<pulumi.Input<inputs.NetworkprofileProfileTcpFastPathProfileDsrProfile>[]>;
    enableSynProtection?: pulumi.Input<string>;
    sessionIdleTimeout?: pulumi.Input<string>;
}

export interface NetworkprofileProfileTcpFastPathProfileDsrProfile {
    dsrEncapType?: pulumi.Input<string>;
    dsrType?: pulumi.Input<string>;
}

export interface NetworkprofileProfileTcpProxyProfile {
    aggressiveCongestionAvoidance?: pulumi.Input<string>;
    autoWindowGrowth?: pulumi.Input<string>;
    automatic?: pulumi.Input<string>;
    ccAlgo?: pulumi.Input<string>;
    congestionRecoveryScalingFactor?: pulumi.Input<string>;
    idleConnectionTimeout?: pulumi.Input<string>;
    idleConnectionType?: pulumi.Input<string>;
    ignoreTimeWait?: pulumi.Input<string>;
    ipDscp?: pulumi.Input<string>;
    keepaliveInHalfcloseState?: pulumi.Input<string>;
    maxRetransmissions?: pulumi.Input<string>;
    maxSegmentSize?: pulumi.Input<string>;
    maxSynRetransmissions?: pulumi.Input<string>;
    minRexmtTimeout?: pulumi.Input<string>;
    naglesAlgorithm?: pulumi.Input<string>;
    reassemblyQueueSize?: pulumi.Input<string>;
    receiveWindow?: pulumi.Input<string>;
    reorderThreshold?: pulumi.Input<string>;
    slowStartScalingFactor?: pulumi.Input<string>;
    timeWaitDelay?: pulumi.Input<string>;
    useInterfaceMtu?: pulumi.Input<string>;
}

export interface NetworkprofileProfileUdpFastPathProfile {
    dsrProfiles?: pulumi.Input<pulumi.Input<inputs.NetworkprofileProfileUdpFastPathProfileDsrProfile>[]>;
    perPktLoadbalance?: pulumi.Input<string>;
    sessionIdleTimeout?: pulumi.Input<string>;
    snat?: pulumi.Input<string>;
}

export interface NetworkprofileProfileUdpFastPathProfileDsrProfile {
    dsrEncapType?: pulumi.Input<string>;
    dsrType?: pulumi.Input<string>;
}

export interface NetworkprofileProfileUdpProxyProfile {
    sessionIdleTimeout?: pulumi.Input<string>;
}

export interface NetworksecuritypolicyConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface NetworksecuritypolicyMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworksecuritypolicyRule {
    action: pulumi.Input<string>;
    age?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    enable: pulumi.Input<string>;
    index: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    matches: pulumi.Input<pulumi.Input<inputs.NetworksecuritypolicyRuleMatch>[]>;
    name: pulumi.Input<string>;
    rlParams?: pulumi.Input<pulumi.Input<inputs.NetworksecuritypolicyRuleRlParam>[]>;
}

export interface NetworksecuritypolicyRuleMatch {
    clientIps?: pulumi.Input<pulumi.Input<inputs.NetworksecuritypolicyRuleMatchClientIp>[]>;
    clientPorts?: pulumi.Input<pulumi.Input<inputs.NetworksecuritypolicyRuleMatchClientPort>[]>;
    geoMatches?: pulumi.Input<pulumi.Input<inputs.NetworksecuritypolicyRuleMatchGeoMatch>[]>;
    ipReputationTypes?: pulumi.Input<pulumi.Input<inputs.NetworksecuritypolicyRuleMatchIpReputationType>[]>;
    microservices?: pulumi.Input<pulumi.Input<inputs.NetworksecuritypolicyRuleMatchMicroservice>[]>;
    vsPorts?: pulumi.Input<pulumi.Input<inputs.NetworksecuritypolicyRuleMatchVsPort>[]>;
}

export interface NetworksecuritypolicyRuleMatchClientIp {
    addrs?: pulumi.Input<pulumi.Input<inputs.NetworksecuritypolicyRuleMatchClientIpAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.NetworksecuritypolicyRuleMatchClientIpPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.NetworksecuritypolicyRuleMatchClientIpRange>[]>;
}

export interface NetworksecuritypolicyRuleMatchClientIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NetworksecuritypolicyRuleMatchClientIpPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.NetworksecuritypolicyRuleMatchClientIpPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface NetworksecuritypolicyRuleMatchClientIpPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NetworksecuritypolicyRuleMatchClientIpRange {
    begins: pulumi.Input<pulumi.Input<inputs.NetworksecuritypolicyRuleMatchClientIpRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.NetworksecuritypolicyRuleMatchClientIpRangeEnd>[]>;
}

export interface NetworksecuritypolicyRuleMatchClientIpRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NetworksecuritypolicyRuleMatchClientIpRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NetworksecuritypolicyRuleMatchClientPort {
    matchCriteria: pulumi.Input<string>;
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.NetworksecuritypolicyRuleMatchClientPortRange>[]>;
}

export interface NetworksecuritypolicyRuleMatchClientPortRange {
    end: pulumi.Input<string>;
    start: pulumi.Input<string>;
}

export interface NetworksecuritypolicyRuleMatchGeoMatch {
    attribute: pulumi.Input<string>;
    matchOperation: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworksecuritypolicyRuleMatchIpReputationType {
    matchOperation: pulumi.Input<string>;
    reputationTypes: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworksecuritypolicyRuleMatchMicroservice {
    groupRef: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
}

export interface NetworksecuritypolicyRuleMatchVsPort {
    matchCriteria: pulumi.Input<string>;
    ports: pulumi.Input<pulumi.Input<number>[]>;
}

export interface NetworksecuritypolicyRuleRlParam {
    burstSize: pulumi.Input<string>;
    maxRate: pulumi.Input<string>;
}

export interface NetworkserviceConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface NetworkserviceMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkserviceRoutingService {
    advertiseBackendNetworks?: pulumi.Input<string>;
    enableAutoGateway?: pulumi.Input<string>;
    enableRouting?: pulumi.Input<string>;
    enableVipOnAllInterfaces?: pulumi.Input<string>;
    enableVmac?: pulumi.Input<string>;
    floatingIntfIp6Addresses?: pulumi.Input<pulumi.Input<inputs.NetworkserviceRoutingServiceFloatingIntfIp6Address>[]>;
    floatingIntfIp6Se2Addresses?: pulumi.Input<pulumi.Input<inputs.NetworkserviceRoutingServiceFloatingIntfIp6Se2Address>[]>;
    floatingIntfIpSe2s?: pulumi.Input<pulumi.Input<inputs.NetworkserviceRoutingServiceFloatingIntfIpSe2>[]>;
    floatingIntfIps?: pulumi.Input<pulumi.Input<inputs.NetworkserviceRoutingServiceFloatingIntfIp>[]>;
    flowtableProfiles?: pulumi.Input<pulumi.Input<inputs.NetworkserviceRoutingServiceFlowtableProfile>[]>;
    gracefulRestart?: pulumi.Input<string>;
    natPolicyRef?: pulumi.Input<string>;
    routingByLinuxIpstack?: pulumi.Input<string>;
}

export interface NetworkserviceRoutingServiceFloatingIntfIp {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NetworkserviceRoutingServiceFloatingIntfIp6Address {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NetworkserviceRoutingServiceFloatingIntfIp6Se2Address {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NetworkserviceRoutingServiceFloatingIntfIpSe2 {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NetworkserviceRoutingServiceFlowtableProfile {
    icmpIdleTimeout?: pulumi.Input<string>;
    tcpClosedTimeout?: pulumi.Input<string>;
    tcpConnectionSetupTimeout?: pulumi.Input<string>;
    tcpHalfClosedTimeout?: pulumi.Input<string>;
    tcpIdleTimeout?: pulumi.Input<string>;
    tcpResetTimeout?: pulumi.Input<string>;
    udpIdleTimeout?: pulumi.Input<string>;
}

export interface PkiprofileCaCert {
    certificate?: pulumi.Input<string>;
    certificateSigningRequest?: pulumi.Input<string>;
    chainVerified?: pulumi.Input<string>;
    daysUntilExpire?: pulumi.Input<string>;
    expiryStatus?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    issuers?: pulumi.Input<pulumi.Input<inputs.PkiprofileCaCertIssuer>[]>;
    keyParams?: pulumi.Input<pulumi.Input<inputs.PkiprofileCaCertKeyParam>[]>;
    notAfter?: pulumi.Input<string>;
    notBefore?: pulumi.Input<string>;
    publicKey?: pulumi.Input<string>;
    selfSigned?: pulumi.Input<string>;
    serialNumber?: pulumi.Input<string>;
    signature?: pulumi.Input<string>;
    signatureAlgorithm?: pulumi.Input<string>;
    subjectAltNames?: pulumi.Input<pulumi.Input<string>[]>;
    subjects?: pulumi.Input<pulumi.Input<inputs.PkiprofileCaCertSubject>[]>;
    text?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface PkiprofileCaCertIssuer {
    commonName?: pulumi.Input<string>;
    country?: pulumi.Input<string>;
    distinguishedName?: pulumi.Input<string>;
    emailAddress?: pulumi.Input<string>;
    locality?: pulumi.Input<string>;
    organization?: pulumi.Input<string>;
    organizationUnit?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}

export interface PkiprofileCaCertKeyParam {
    algorithm: pulumi.Input<string>;
    ecParams?: pulumi.Input<pulumi.Input<inputs.PkiprofileCaCertKeyParamEcParam>[]>;
    rsaParams?: pulumi.Input<pulumi.Input<inputs.PkiprofileCaCertKeyParamRsaParam>[]>;
}

export interface PkiprofileCaCertKeyParamEcParam {
    curve?: pulumi.Input<string>;
}

export interface PkiprofileCaCertKeyParamRsaParam {
    exponent?: pulumi.Input<string>;
    keySize?: pulumi.Input<string>;
}

export interface PkiprofileCaCertSubject {
    commonName?: pulumi.Input<string>;
    country?: pulumi.Input<string>;
    distinguishedName?: pulumi.Input<string>;
    emailAddress?: pulumi.Input<string>;
    locality?: pulumi.Input<string>;
    organization?: pulumi.Input<string>;
    organizationUnit?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}

export interface PkiprofileConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface PkiprofileMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PoolAnalyticsPolicy {
    enableRealtimeMetrics?: pulumi.Input<string>;
}

export interface PoolConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface PoolConnPoolProperty {
    upstreamConnpoolConnIdleTmo?: pulumi.Input<string>;
    upstreamConnpoolConnLifeTmo?: pulumi.Input<string>;
    upstreamConnpoolConnMaxReuse?: pulumi.Input<string>;
    upstreamConnpoolServerMaxCache?: pulumi.Input<string>;
}

export interface PoolFailAction {
    localRsps?: pulumi.Input<pulumi.Input<inputs.PoolFailActionLocalRsp>[]>;
    redirects?: pulumi.Input<pulumi.Input<inputs.PoolFailActionRedirect>[]>;
    type: pulumi.Input<string>;
}

export interface PoolFailActionLocalRsp {
    files?: pulumi.Input<pulumi.Input<inputs.PoolFailActionLocalRspFile>[]>;
    statusCode?: pulumi.Input<string>;
}

export interface PoolFailActionLocalRspFile {
    contentType: pulumi.Input<string>;
    fileContent: pulumi.Input<string>;
    fileLength?: pulumi.Input<string>;
}

export interface PoolFailActionRedirect {
    host: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    query?: pulumi.Input<string>;
    statusCode?: pulumi.Input<string>;
}

export interface PoolHorizonProfile {
    blastPort?: pulumi.Input<string>;
    pcoipPort?: pulumi.Input<string>;
}

export interface PoolHttp2Property {
    maxHttp2ControlFramesPerConnection?: pulumi.Input<string>;
    maxHttp2HeaderFieldSize?: pulumi.Input<string>;
}

export interface PoolMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PoolMaxConnRatePerServer {
    actions: pulumi.Input<pulumi.Input<inputs.PoolMaxConnRatePerServerAction>[]>;
    explicitTracking?: pulumi.Input<string>;
    fineGrain?: pulumi.Input<string>;
    httpCookie?: pulumi.Input<string>;
    httpHeader?: pulumi.Input<string>;
    rateLimiters?: pulumi.Input<pulumi.Input<inputs.PoolMaxConnRatePerServerRateLimiter>[]>;
}

export interface PoolMaxConnRatePerServerAction {
    files?: pulumi.Input<pulumi.Input<inputs.PoolMaxConnRatePerServerActionFile>[]>;
    redirects?: pulumi.Input<pulumi.Input<inputs.PoolMaxConnRatePerServerActionRedirect>[]>;
    statusCode?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface PoolMaxConnRatePerServerActionFile {
    contentType: pulumi.Input<string>;
    fileContent: pulumi.Input<string>;
    fileLength?: pulumi.Input<string>;
}

export interface PoolMaxConnRatePerServerActionRedirect {
    addString?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.PoolMaxConnRatePerServerActionRedirectHost>[]>;
    keepQuery?: pulumi.Input<string>;
    paths?: pulumi.Input<pulumi.Input<inputs.PoolMaxConnRatePerServerActionRedirectPath>[]>;
    port?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    statusCode?: pulumi.Input<string>;
}

export interface PoolMaxConnRatePerServerActionRedirectHost {
    tokens: pulumi.Input<pulumi.Input<inputs.PoolMaxConnRatePerServerActionRedirectHostToken>[]>;
    type: pulumi.Input<string>;
}

export interface PoolMaxConnRatePerServerActionRedirectHostToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface PoolMaxConnRatePerServerActionRedirectPath {
    tokens: pulumi.Input<pulumi.Input<inputs.PoolMaxConnRatePerServerActionRedirectPathToken>[]>;
    type: pulumi.Input<string>;
}

export interface PoolMaxConnRatePerServerActionRedirectPathToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface PoolMaxConnRatePerServerRateLimiter {
    burstSz?: pulumi.Input<string>;
    count?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
}

export interface PoolNetwork {
    networkRef: pulumi.Input<string>;
    serverFilter?: pulumi.Input<string>;
}

export interface PoolPlacementNetwork {
    networkRef: pulumi.Input<string>;
    subnets: pulumi.Input<pulumi.Input<inputs.PoolPlacementNetworkSubnet>[]>;
}

export interface PoolPlacementNetworkSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.PoolPlacementNetworkSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface PoolPlacementNetworkSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface PoolServer {
    autoscalingGroupName?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    discoveredNetworks?: pulumi.Input<pulumi.Input<inputs.PoolServerDiscoveredNetwork>[]>;
    enabled?: pulumi.Input<string>;
    externalOrchestrationId?: pulumi.Input<string>;
    externalUuid?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    ips: pulumi.Input<pulumi.Input<inputs.PoolServerIp>[]>;
    locations?: pulumi.Input<pulumi.Input<inputs.PoolServerLocation>[]>;
    macAddress?: pulumi.Input<string>;
    nwRef?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    preferenceOrder?: pulumi.Input<string>;
    prstHdrVal?: pulumi.Input<string>;
    ratio?: pulumi.Input<string>;
    resolveServerByDns?: pulumi.Input<string>;
    rewriteHostHeader?: pulumi.Input<string>;
    serverNode?: pulumi.Input<string>;
    static?: pulumi.Input<string>;
    verifyNetwork?: pulumi.Input<string>;
    vmRef?: pulumi.Input<string>;
}

export interface PoolServerDiscoveredNetwork {
    networkRef: pulumi.Input<string>;
    subnet6s?: pulumi.Input<pulumi.Input<inputs.PoolServerDiscoveredNetworkSubnet6>[]>;
    subnets?: pulumi.Input<pulumi.Input<inputs.PoolServerDiscoveredNetworkSubnet>[]>;
}

export interface PoolServerDiscoveredNetworkSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.PoolServerDiscoveredNetworkSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface PoolServerDiscoveredNetworkSubnet6 {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.PoolServerDiscoveredNetworkSubnet6IpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface PoolServerDiscoveredNetworkSubnet6IpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface PoolServerDiscoveredNetworkSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface PoolServerIp {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface PoolServerLocation {
    latitude?: pulumi.Input<string>;
    longitude?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PoolServerReselect {
    enabled: pulumi.Input<string>;
    numRetries?: pulumi.Input<string>;
    retryNonidempotent?: pulumi.Input<string>;
    retryTimeout?: pulumi.Input<string>;
    svrRespCodes?: pulumi.Input<pulumi.Input<inputs.PoolServerReselectSvrRespCode>[]>;
}

export interface PoolServerReselectSvrRespCode {
    codes?: pulumi.Input<pulumi.Input<number>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.PoolServerReselectSvrRespCodeRange>[]>;
    respCodeBlocks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PoolServerReselectSvrRespCodeRange {
    begin: pulumi.Input<string>;
    end: pulumi.Input<string>;
}

export interface PoolSpGsInfo {
    fqdns?: pulumi.Input<pulumi.Input<string>[]>;
    gsRef?: pulumi.Input<string>;
}

export interface PoolgroupConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface PoolgroupFailAction {
    localRsps?: pulumi.Input<pulumi.Input<inputs.PoolgroupFailActionLocalRsp>[]>;
    redirects?: pulumi.Input<pulumi.Input<inputs.PoolgroupFailActionRedirect>[]>;
    type: pulumi.Input<string>;
}

export interface PoolgroupFailActionLocalRsp {
    files?: pulumi.Input<pulumi.Input<inputs.PoolgroupFailActionLocalRspFile>[]>;
    statusCode?: pulumi.Input<string>;
}

export interface PoolgroupFailActionLocalRspFile {
    contentType: pulumi.Input<string>;
    fileContent: pulumi.Input<string>;
    fileLength?: pulumi.Input<string>;
}

export interface PoolgroupFailActionRedirect {
    host: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    query?: pulumi.Input<string>;
    statusCode?: pulumi.Input<string>;
}

export interface PoolgroupMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PoolgroupMember {
    deploymentState?: pulumi.Input<string>;
    poolRef: pulumi.Input<string>;
    priorityLabel?: pulumi.Input<string>;
    ratio?: pulumi.Input<string>;
}

export interface PoolgroupdeploymentpolicyConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface PoolgroupdeploymentpolicyMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PoolgroupdeploymentpolicyRule {
    metricId?: pulumi.Input<string>;
    operator?: pulumi.Input<string>;
    threshold?: pulumi.Input<string>;
}

export interface PrioritylabelsConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface PrioritylabelsEquivalentLabel {
    labels?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PrioritylabelsMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ProtocolparserConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface ProtocolparserMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RoleConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface RoleFilter {
    enabled?: pulumi.Input<string>;
    matchLabels: pulumi.Input<pulumi.Input<inputs.RoleFilterMatchLabel>[]>;
    matchOperation?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface RoleFilterMatchLabel {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RolePrivilege {
    resource: pulumi.Input<string>;
    subresources?: pulumi.Input<pulumi.Input<inputs.RolePrivilegeSubresource>[]>;
    type: pulumi.Input<string>;
}

export interface RolePrivilegeSubresource {
    excludeSubresources?: pulumi.Input<string>;
    subresources: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SchedulerConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface SecuritymanagerdataAppLearningInfo {
    appId?: pulumi.Input<string>;
    uriInfos?: pulumi.Input<pulumi.Input<inputs.SecuritymanagerdataAppLearningInfoUriInfo>[]>;
    vsUuid?: pulumi.Input<string>;
}

export interface SecuritymanagerdataAppLearningInfoUriInfo {
    paramInfos?: pulumi.Input<pulumi.Input<inputs.SecuritymanagerdataAppLearningInfoUriInfoParamInfo>[]>;
    uriHits?: pulumi.Input<string>;
    uriKey?: pulumi.Input<string>;
}

export interface SecuritymanagerdataAppLearningInfoUriInfoParamInfo {
    paramHits?: pulumi.Input<string>;
    paramKey?: pulumi.Input<string>;
    paramSizeClasses?: pulumi.Input<pulumi.Input<inputs.SecuritymanagerdataAppLearningInfoUriInfoParamInfoParamSizeClass>[]>;
    paramTypeClasses?: pulumi.Input<pulumi.Input<inputs.SecuritymanagerdataAppLearningInfoUriInfoParamInfoParamTypeClass>[]>;
}

export interface SecuritymanagerdataAppLearningInfoUriInfoParamInfoParamSizeClass {
    hits?: pulumi.Input<string>;
    len?: pulumi.Input<string>;
}

export interface SecuritymanagerdataAppLearningInfoUriInfoParamInfoParamTypeClass {
    hits?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface SecuritypolicyConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface SecuritypolicyDnsAmplificationDenyport {
    matchCriteria: pulumi.Input<string>;
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.SecuritypolicyDnsAmplificationDenyportRange>[]>;
}

export interface SecuritypolicyDnsAmplificationDenyportRange {
    end: pulumi.Input<string>;
    start: pulumi.Input<string>;
}

export interface SecuritypolicyDnsAttack {
    attacks?: pulumi.Input<pulumi.Input<inputs.SecuritypolicyDnsAttackAttack>[]>;
    operMode?: pulumi.Input<string>;
}

export interface SecuritypolicyDnsAttackAttack {
    attackVector: pulumi.Input<string>;
    enabled?: pulumi.Input<string>;
    maxMitigationAge?: pulumi.Input<string>;
    mitigationActions?: pulumi.Input<pulumi.Input<inputs.SecuritypolicyDnsAttackAttackMitigationAction>[]>;
    threshold?: pulumi.Input<string>;
}

export interface SecuritypolicyDnsAttackAttackMitigationAction {
    deny?: pulumi.Input<string>;
}

export interface SecuritypolicyMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SecuritypolicyTcpAttack {
}

export interface SecuritypolicyUdpAttack {
}

export interface SepropertiesConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface SepropertiesSeAgentProperty {
    controllerEchoMissAggressiveLimit?: pulumi.Input<string>;
    controllerEchoMissLimit?: pulumi.Input<string>;
    controllerEchoRpcAggressiveTimeout?: pulumi.Input<string>;
    controllerEchoRpcTimeout?: pulumi.Input<string>;
    controllerHeartbeatMissLimit?: pulumi.Input<string>;
    controllerHeartbeatTimeoutSec?: pulumi.Input<string>;
    controllerRegistrationTimeoutSec?: pulumi.Input<string>;
    controllerRpcTimeout?: pulumi.Input<string>;
    cpustatsInterval?: pulumi.Input<string>;
    ctrlRegPendingMaxWaitTime?: pulumi.Input<string>;
    debugMode?: pulumi.Input<string>;
    dpAggressiveDeqIntervalMsec?: pulumi.Input<string>;
    dpAggressiveEnqIntervalMsec?: pulumi.Input<string>;
    dpBatchSize?: pulumi.Input<string>;
    dpDeqIntervalMsec?: pulumi.Input<string>;
    dpEnqIntervalMsec?: pulumi.Input<string>;
    dpMaxWaitRspTimeSec?: pulumi.Input<string>;
    dpRegPendingMaxWaitTime?: pulumi.Input<string>;
    headlessTimeoutSec?: pulumi.Input<string>;
    ignoreDockerMacChange?: pulumi.Input<string>;
    nsHelperDeqIntervalMsec?: pulumi.Input<string>;
    sdbFlushInterval?: pulumi.Input<string>;
    sdbPipelineSize?: pulumi.Input<string>;
    sdbScanCount?: pulumi.Input<string>;
    seGrpChangeDisruptive?: pulumi.Input<string>;
    seagentStatecacheProperties?: pulumi.Input<pulumi.Input<inputs.SepropertiesSeAgentPropertySeagentStatecacheProperty>[]>;
    sendSeReadyTimeout?: pulumi.Input<string>;
    statesFlushInterval?: pulumi.Input<string>;
    vnicDhcpIpCheckInterval?: pulumi.Input<string>;
    vnicDhcpIpMaxRetries?: pulumi.Input<string>;
    vnicIpDeleteInterval?: pulumi.Input<string>;
    vnicProbeInterval?: pulumi.Input<string>;
    vnicRpcRetryInterval?: pulumi.Input<string>;
    vnicdbCmdHistorySize?: pulumi.Input<string>;
}

export interface SepropertiesSeAgentPropertySeagentStatecacheProperty {
    scBatchBufferFlushLimit?: pulumi.Input<string>;
    scCfgQBatchDequeueLimit?: pulumi.Input<string>;
    scCfgQMaxSize?: pulumi.Input<string>;
    scDnsQBatchDequeueLimit?: pulumi.Input<string>;
    scDnsQMaxSize?: pulumi.Input<string>;
    scShardCleanupMaxTime?: pulumi.Input<string>;
    scStateRingBatchDequeueLimit?: pulumi.Input<string>;
    scStatesFlushInterval?: pulumi.Input<string>;
    scStreamCheckInterval?: pulumi.Input<string>;
    scThreadQBatchDequeueLimit?: pulumi.Input<string>;
    scThreadQMaxSize?: pulumi.Input<string>;
    scThreadSleepInterval?: pulumi.Input<string>;
}

export interface SepropertiesSeBootupProperty {
    dockerBackendPortend?: pulumi.Input<string>;
    dockerBackendPortstart?: pulumi.Input<string>;
    fairQueueingEnabled?: pulumi.Input<string>;
    geoDbGranularity?: pulumi.Input<string>;
    l7ConnsPerCore?: pulumi.Input<string>;
    l7ResvdListenConnsPerCore?: pulumi.Input<string>;
    logAgentDebugEnabled?: pulumi.Input<string>;
    logAgentTraceEnabled?: pulumi.Input<string>;
    seDpCompressions?: pulumi.Input<pulumi.Input<inputs.SepropertiesSeBootupPropertySeDpCompression>[]>;
    seEmulatedCores?: pulumi.Input<string>;
    seIpEncapIpc?: pulumi.Input<string>;
    seL3EncapIpc?: pulumi.Input<string>;
    seLogBufferAppBlockingDequeue?: pulumi.Input<string>;
    seLogBufferApplogSize?: pulumi.Input<string>;
    seLogBufferChunkCount?: pulumi.Input<string>;
    seLogBufferConnBlockingDequeue?: pulumi.Input<string>;
    seLogBufferConnlogSize?: pulumi.Input<string>;
    seLogBufferEventsBlockingDequeue?: pulumi.Input<string>;
    seLogBufferEventsSize?: pulumi.Input<string>;
    sslSessCachePerVs?: pulumi.Input<string>;
    tcpSyncacheHashsize?: pulumi.Input<string>;
}

export interface SepropertiesSeBootupPropertySeDpCompression {
    bufNum?: pulumi.Input<string>;
    bufSize?: pulumi.Input<string>;
    hashSize?: pulumi.Input<string>;
    levelAggressive?: pulumi.Input<string>;
    levelNormal?: pulumi.Input<string>;
    windowSize?: pulumi.Input<string>;
}

export interface SepropertiesSeRuntimeProperty {
    adminSshEnabled?: pulumi.Input<string>;
    appHeaders?: pulumi.Input<pulumi.Input<inputs.SepropertiesSeRuntimePropertyAppHeader>[]>;
    baremetalDispatcherHandlesFlows?: pulumi.Input<string>;
    connectionsLossyLogRateLimiterThreshold?: pulumi.Input<string>;
    connectionsUdfnfLogRateLimiterThreshold?: pulumi.Input<string>;
    disableFlowProbes?: pulumi.Input<string>;
    dosProfiles?: pulumi.Input<pulumi.Input<inputs.SepropertiesSeRuntimePropertyDosProfile>[]>;
    downstreamSendTimeout?: pulumi.Input<string>;
    dpAggressiveHbFrequency?: pulumi.Input<string>;
    dpAggressiveHbTimeoutCount?: pulumi.Input<string>;
    dpHbFrequency?: pulumi.Input<string>;
    dpHbTimeoutCount?: pulumi.Input<string>;
    dupipFrequency?: pulumi.Input<string>;
    dupipTimeoutCount?: pulumi.Input<string>;
    enableHsmLog?: pulumi.Input<string>;
    feproxyVipsEnableProxyArp?: pulumi.Input<string>;
    flowTableBatchPushFrequency?: pulumi.Input<string>;
    globalMtu?: pulumi.Input<string>;
    httpRumConsoleLog?: pulumi.Input<string>;
    httpRumMinContentLength?: pulumi.Input<string>;
    lbactionNumRequestsToDispatch?: pulumi.Input<string>;
    lbactionRqPerRequestMaxRetries?: pulumi.Input<string>;
    logAgentCompressLogs?: pulumi.Input<string>;
    logAgentFileSzAppl?: pulumi.Input<string>;
    logAgentFileSzConn?: pulumi.Input<string>;
    logAgentFileSzDebug?: pulumi.Input<string>;
    logAgentFileSzEvent?: pulumi.Input<string>;
    logAgentLogStorageMinSz?: pulumi.Input<string>;
    logAgentMaxConcurrentRsync?: pulumi.Input<string>;
    logAgentMaxStorageExcessPercent?: pulumi.Input<string>;
    logAgentMaxStorageIgnorePercent?: pulumi.Input<string>;
    logAgentMinStoragePerVs?: pulumi.Input<string>;
    logAgentSleepInterval?: pulumi.Input<string>;
    logAgentUnknownVsTimer?: pulumi.Input<string>;
    logMessageMaxFileListSize?: pulumi.Input<string>;
    ngxFreeConnectionStack?: pulumi.Input<string>;
    persistenceMemMax?: pulumi.Input<string>;
    scaleoutUdpPerPkt?: pulumi.Input<string>;
    seAuthLdapBindTimeout?: pulumi.Input<string>;
    seAuthLdapCacheSize?: pulumi.Input<string>;
    seAuthLdapConnectTimeout?: pulumi.Input<string>;
    seAuthLdapConnsPerServer?: pulumi.Input<string>;
    seAuthLdapReconnectTimeout?: pulumi.Input<string>;
    seAuthLdapRequestTimeout?: pulumi.Input<string>;
    seAuthLdapServersFailoverOnly?: pulumi.Input<string>;
    seDpCompressions?: pulumi.Input<pulumi.Input<inputs.SepropertiesSeRuntimePropertySeDpCompression>[]>;
    seDpHmDrops?: pulumi.Input<string>;
    seDpIfStatePollInterval?: pulumi.Input<string>;
    seDpLogNfEnqueuePercent?: pulumi.Input<string>;
    seDpLogUdfEnqueuePercent?: pulumi.Input<string>;
    seDumpCoreOnAssert?: pulumi.Input<string>;
    seHandleInterfaceRoutes?: pulumi.Input<string>;
    seHbPersistFudgeBits?: pulumi.Input<string>;
    seMacErrorThresholdToDisablePromiscious?: pulumi.Input<string>;
    seMemoryPoison?: pulumi.Input<string>;
    seMetricsInterval?: pulumi.Input<string>;
    seMetricsRtEnabled?: pulumi.Input<string>;
    seMetricsRtInterval?: pulumi.Input<string>;
    sePacketBufferMax?: pulumi.Input<string>;
    seRandomTcpDrops?: pulumi.Input<string>;
    seRateLimiters?: pulumi.Input<pulumi.Input<inputs.SepropertiesSeRuntimePropertySeRateLimiter>[]>;
    serviceIpSubnets?: pulumi.Input<pulumi.Input<inputs.SepropertiesSeRuntimePropertyServiceIpSubnet>[]>;
    servicePortRanges?: pulumi.Input<pulumi.Input<inputs.SepropertiesSeRuntimePropertyServicePortRange>[]>;
    servicesAccessibleAllInterfaces?: pulumi.Input<string>;
    tcpSyncacheMaxRetransmitDefault?: pulumi.Input<string>;
    upstreamConnectTimeout?: pulumi.Input<string>;
    upstreamConnpoolCacheThresh?: pulumi.Input<string>;
    upstreamConnpoolConnIdleThreshTmo?: pulumi.Input<string>;
    upstreamConnpoolCoreMaxCache?: pulumi.Input<string>;
    upstreamConnpoolEnable?: pulumi.Input<string>;
    upstreamKeepalive?: pulumi.Input<string>;
    upstreamReadTimeout?: pulumi.Input<string>;
    upstreamSendTimeout?: pulumi.Input<string>;
    userDefinedMetricAge?: pulumi.Input<string>;
}

export interface SepropertiesSeRuntimePropertyAppHeader {
    hdrMatchCase: pulumi.Input<string>;
    hdrName: pulumi.Input<string>;
    hdrStringOp: pulumi.Input<string>;
}

export interface SepropertiesSeRuntimePropertyDosProfile {
    threshInfos?: pulumi.Input<pulumi.Input<inputs.SepropertiesSeRuntimePropertyDosProfileThreshInfo>[]>;
    threshPeriod: pulumi.Input<string>;
}

export interface SepropertiesSeRuntimePropertyDosProfileThreshInfo {
    attack: pulumi.Input<string>;
    maxValue: pulumi.Input<string>;
    minValue: pulumi.Input<string>;
}

export interface SepropertiesSeRuntimePropertySeDpCompression {
    maxLowRtt?: pulumi.Input<string>;
    minHighRtt?: pulumi.Input<string>;
    minLength?: pulumi.Input<string>;
    mobileStrs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SepropertiesSeRuntimePropertySeRateLimiter {
    arpRl?: pulumi.Input<string>;
    defaultRl?: pulumi.Input<string>;
    flowProbeRl?: pulumi.Input<string>;
    icmpRl?: pulumi.Input<string>;
    icmpRspRl?: pulumi.Input<string>;
    rstRl?: pulumi.Input<string>;
}

export interface SepropertiesSeRuntimePropertyServiceIpSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.SepropertiesSeRuntimePropertyServiceIpSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface SepropertiesSeRuntimePropertyServiceIpSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SepropertiesSeRuntimePropertyServicePortRange {
    end: pulumi.Input<string>;
    start: pulumi.Input<string>;
}

export interface ServerDiscoveredNetwork {
    networkRef: pulumi.Input<string>;
    subnet6s?: pulumi.Input<pulumi.Input<inputs.ServerDiscoveredNetworkSubnet6>[]>;
    subnets?: pulumi.Input<pulumi.Input<inputs.ServerDiscoveredNetworkSubnet>[]>;
}

export interface ServerDiscoveredNetworkSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.ServerDiscoveredNetworkSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface ServerDiscoveredNetworkSubnet6 {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.ServerDiscoveredNetworkSubnet6IpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface ServerDiscoveredNetworkSubnet6IpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ServerDiscoveredNetworkSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ServerLocation {
    latitude?: pulumi.Input<string>;
    longitude?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface ServerautoscalepolicyConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface ServerautoscalepolicyMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ServerautoscalepolicyScheduledScaling {
    autoscalingDuration?: pulumi.Input<string>;
    cronExpression?: pulumi.Input<string>;
    desiredCapacity?: pulumi.Input<string>;
    enable?: pulumi.Input<string>;
    endDate?: pulumi.Input<string>;
    scheduleMaxStep?: pulumi.Input<string>;
    startDate?: pulumi.Input<string>;
}

export interface ServiceauthprofileConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface ServiceauthprofileServiceOauthProfile {
    authorizationEndpoint: pulumi.Input<string>;
    clientId: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
    serviceId?: pulumi.Input<string>;
    serviceName?: pulumi.Input<string>;
}

export interface ServiceengineDataVnic {
    adapter?: pulumi.Input<string>;
    aggregatorChgd?: pulumi.Input<string>;
    canSeDpTakeover?: pulumi.Input<string>;
    connected?: pulumi.Input<string>;
    delPending?: pulumi.Input<string>;
    deleteVnic?: pulumi.Input<string>;
    dhcpEnabled?: pulumi.Input<string>;
    dpDeletionDone?: pulumi.Input<string>;
    enabled?: pulumi.Input<string>;
    ifName?: pulumi.Input<string>;
    ip6AutocfgEnabled?: pulumi.Input<string>;
    isAsm?: pulumi.Input<string>;
    isAviInternalNetwork?: pulumi.Input<string>;
    isHsm?: pulumi.Input<string>;
    isMgmt?: pulumi.Input<string>;
    isPortchannel?: pulumi.Input<string>;
    linkUp?: pulumi.Input<string>;
    linuxName?: pulumi.Input<string>;
    macAddress: pulumi.Input<string>;
    members?: pulumi.Input<pulumi.Input<inputs.ServiceengineDataVnicMember>[]>;
    mtu?: pulumi.Input<string>;
    networkName?: pulumi.Input<string>;
    networkRef?: pulumi.Input<string>;
    numRxDescriptors?: pulumi.Input<string>;
    numTxDescriptors?: pulumi.Input<string>;
    pciId?: pulumi.Input<string>;
    portUuid?: pulumi.Input<string>;
    vlanId?: pulumi.Input<string>;
    vlanInterfaces?: pulumi.Input<pulumi.Input<inputs.ServiceengineDataVnicVlanInterface>[]>;
    vnicNetworks?: pulumi.Input<pulumi.Input<inputs.ServiceengineDataVnicVnicNetwork>[]>;
    vrfId?: pulumi.Input<string>;
    vrfRef?: pulumi.Input<string>;
}

export interface ServiceengineDataVnicMember {
    active?: pulumi.Input<string>;
    ifName: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
}

export interface ServiceengineDataVnicVlanInterface {
    dhcpEnabled?: pulumi.Input<string>;
    enabled?: pulumi.Input<string>;
    ifName: pulumi.Input<string>;
    ip6AutocfgEnabled?: pulumi.Input<string>;
    isMgmt?: pulumi.Input<string>;
    vlanId?: pulumi.Input<string>;
    vnicNetworks?: pulumi.Input<pulumi.Input<inputs.ServiceengineDataVnicVlanInterfaceVnicNetwork>[]>;
    vrfRef?: pulumi.Input<string>;
}

export interface ServiceengineDataVnicVlanInterfaceVnicNetwork {
    ctlrAlloc?: pulumi.Input<string>;
    ips: pulumi.Input<pulumi.Input<inputs.ServiceengineDataVnicVlanInterfaceVnicNetworkIp>[]>;
    mode: pulumi.Input<string>;
}

export interface ServiceengineDataVnicVlanInterfaceVnicNetworkIp {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.ServiceengineDataVnicVlanInterfaceVnicNetworkIpIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface ServiceengineDataVnicVlanInterfaceVnicNetworkIpIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ServiceengineDataVnicVnicNetwork {
    ctlrAlloc?: pulumi.Input<string>;
    ips: pulumi.Input<pulumi.Input<inputs.ServiceengineDataVnicVnicNetworkIp>[]>;
    mode: pulumi.Input<string>;
}

export interface ServiceengineDataVnicVnicNetworkIp {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.ServiceengineDataVnicVnicNetworkIpIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface ServiceengineDataVnicVnicNetworkIpIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ServiceengineMgmtVnic {
    adapter?: pulumi.Input<string>;
    aggregatorChgd?: pulumi.Input<string>;
    canSeDpTakeover?: pulumi.Input<string>;
    connected?: pulumi.Input<string>;
    delPending?: pulumi.Input<string>;
    deleteVnic?: pulumi.Input<string>;
    dhcpEnabled?: pulumi.Input<string>;
    dpDeletionDone?: pulumi.Input<string>;
    enabled?: pulumi.Input<string>;
    ifName?: pulumi.Input<string>;
    ip6AutocfgEnabled?: pulumi.Input<string>;
    isAsm?: pulumi.Input<string>;
    isAviInternalNetwork?: pulumi.Input<string>;
    isHsm?: pulumi.Input<string>;
    isMgmt?: pulumi.Input<string>;
    isPortchannel?: pulumi.Input<string>;
    linkUp?: pulumi.Input<string>;
    linuxName?: pulumi.Input<string>;
    macAddress: pulumi.Input<string>;
    members?: pulumi.Input<pulumi.Input<inputs.ServiceengineMgmtVnicMember>[]>;
    mtu?: pulumi.Input<string>;
    networkName?: pulumi.Input<string>;
    networkRef?: pulumi.Input<string>;
    numRxDescriptors?: pulumi.Input<string>;
    numTxDescriptors?: pulumi.Input<string>;
    pciId?: pulumi.Input<string>;
    portUuid?: pulumi.Input<string>;
    vlanId?: pulumi.Input<string>;
    vlanInterfaces?: pulumi.Input<pulumi.Input<inputs.ServiceengineMgmtVnicVlanInterface>[]>;
    vnicNetworks?: pulumi.Input<pulumi.Input<inputs.ServiceengineMgmtVnicVnicNetwork>[]>;
    vrfId?: pulumi.Input<string>;
    vrfRef?: pulumi.Input<string>;
}

export interface ServiceengineMgmtVnicMember {
    active?: pulumi.Input<string>;
    ifName: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
}

export interface ServiceengineMgmtVnicVlanInterface {
    dhcpEnabled?: pulumi.Input<string>;
    enabled?: pulumi.Input<string>;
    ifName: pulumi.Input<string>;
    ip6AutocfgEnabled?: pulumi.Input<string>;
    isMgmt?: pulumi.Input<string>;
    vlanId?: pulumi.Input<string>;
    vnicNetworks?: pulumi.Input<pulumi.Input<inputs.ServiceengineMgmtVnicVlanInterfaceVnicNetwork>[]>;
    vrfRef?: pulumi.Input<string>;
}

export interface ServiceengineMgmtVnicVlanInterfaceVnicNetwork {
    ctlrAlloc?: pulumi.Input<string>;
    ips: pulumi.Input<pulumi.Input<inputs.ServiceengineMgmtVnicVlanInterfaceVnicNetworkIp>[]>;
    mode: pulumi.Input<string>;
}

export interface ServiceengineMgmtVnicVlanInterfaceVnicNetworkIp {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.ServiceengineMgmtVnicVlanInterfaceVnicNetworkIpIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface ServiceengineMgmtVnicVlanInterfaceVnicNetworkIpIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ServiceengineMgmtVnicVnicNetwork {
    ctlrAlloc?: pulumi.Input<string>;
    ips: pulumi.Input<pulumi.Input<inputs.ServiceengineMgmtVnicVnicNetworkIp>[]>;
    mode: pulumi.Input<string>;
}

export interface ServiceengineMgmtVnicVnicNetworkIp {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.ServiceengineMgmtVnicVnicNetworkIpIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface ServiceengineMgmtVnicVnicNetworkIpIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ServiceengineResource {
    coresPerSocket?: pulumi.Input<string>;
    disk: pulumi.Input<string>;
    hyperThreading?: pulumi.Input<string>;
    hypervisorMode?: pulumi.Input<string>;
    memory: pulumi.Input<string>;
    numDatapathProcesses?: pulumi.Input<string>;
    numVcpus: pulumi.Input<string>;
    sockets?: pulumi.Input<string>;
}

export interface ServiceenginegroupConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface ServiceenginegroupCustomTag {
    tagKey: pulumi.Input<string>;
    tagVal?: pulumi.Input<string>;
}

export interface ServiceenginegroupGcpConfig {
    backendDataVpcNetworkName?: pulumi.Input<string>;
    backendDataVpcProjectId?: pulumi.Input<string>;
    backendDataVpcSubnetName?: pulumi.Input<string>;
}

export interface ServiceenginegroupInstanceFlavorInfo {
    cost?: pulumi.Input<string>;
    diskGb?: pulumi.Input<string>;
    enhancedNw?: pulumi.Input<string>;
    id: pulumi.Input<string>;
    isRecommended?: pulumi.Input<string>;
    maxIp6sPerNic?: pulumi.Input<string>;
    maxIpsPerNic?: pulumi.Input<string>;
    maxNics?: pulumi.Input<string>;
    metas?: pulumi.Input<pulumi.Input<inputs.ServiceenginegroupInstanceFlavorInfoMeta>[]>;
    name: pulumi.Input<string>;
    public?: pulumi.Input<string>;
    ramMb?: pulumi.Input<string>;
    vcpus?: pulumi.Input<string>;
}

export interface ServiceenginegroupInstanceFlavorInfoMeta {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ServiceenginegroupIptable {
    chain: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.ServiceenginegroupIptableRule>[]>;
    table: pulumi.Input<string>;
}

export interface ServiceenginegroupIptableRule {
    action: pulumi.Input<string>;
    dnatIps?: pulumi.Input<pulumi.Input<inputs.ServiceenginegroupIptableRuleDnatIp>[]>;
    dstIps?: pulumi.Input<pulumi.Input<inputs.ServiceenginegroupIptableRuleDstIp>[]>;
    dstPorts?: pulumi.Input<pulumi.Input<inputs.ServiceenginegroupIptableRuleDstPort>[]>;
    inputInterface?: pulumi.Input<string>;
    outputInterface?: pulumi.Input<string>;
    proto?: pulumi.Input<string>;
    srcIps?: pulumi.Input<pulumi.Input<inputs.ServiceenginegroupIptableRuleSrcIp>[]>;
    srcPorts?: pulumi.Input<pulumi.Input<inputs.ServiceenginegroupIptableRuleSrcPort>[]>;
    tag?: pulumi.Input<string>;
}

export interface ServiceenginegroupIptableRuleDnatIp {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ServiceenginegroupIptableRuleDstIp {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.ServiceenginegroupIptableRuleDstIpIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface ServiceenginegroupIptableRuleDstIpIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ServiceenginegroupIptableRuleDstPort {
    end: pulumi.Input<string>;
    start: pulumi.Input<string>;
}

export interface ServiceenginegroupIptableRuleSrcIp {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.ServiceenginegroupIptableRuleSrcIpIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface ServiceenginegroupIptableRuleSrcIpIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ServiceenginegroupIptableRuleSrcPort {
    end: pulumi.Input<string>;
    start: pulumi.Input<string>;
}

export interface ServiceenginegroupKniAllowedServerPort {
    protocol: pulumi.Input<string>;
    ranges: pulumi.Input<pulumi.Input<inputs.ServiceenginegroupKniAllowedServerPortRange>[]>;
}

export interface ServiceenginegroupKniAllowedServerPortRange {
    end: pulumi.Input<string>;
    start: pulumi.Input<string>;
}

export interface ServiceenginegroupLabel {
    key: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServiceenginegroupMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ServiceenginegroupMgmtSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.ServiceenginegroupMgmtSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface ServiceenginegroupMgmtSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ServiceenginegroupObjsyncConfig {
    objsyncCpuLimit?: pulumi.Input<string>;
    objsyncHubElectInterval?: pulumi.Input<string>;
    objsyncReconcileInterval?: pulumi.Input<string>;
}

export interface ServiceenginegroupRealtimeSeMetric {
    duration?: pulumi.Input<string>;
    enabled: pulumi.Input<string>;
}

export interface ServiceenginegroupSeDosProfile {
    threshInfos?: pulumi.Input<pulumi.Input<inputs.ServiceenginegroupSeDosProfileThreshInfo>[]>;
    threshPeriod: pulumi.Input<string>;
}

export interface ServiceenginegroupSeDosProfileThreshInfo {
    attack: pulumi.Input<string>;
    maxValue: pulumi.Input<string>;
    minValue: pulumi.Input<string>;
}

export interface ServiceenginegroupSeGroupAnalyticsPolicy {
    metricsEventThresholds?: pulumi.Input<pulumi.Input<inputs.ServiceenginegroupSeGroupAnalyticsPolicyMetricsEventThreshold>[]>;
}

export interface ServiceenginegroupSeGroupAnalyticsPolicyMetricsEventThreshold {
    metricsEventThresholdType: pulumi.Input<string>;
    resetThreshold?: pulumi.Input<string>;
    watermarkThresholds?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface ServiceenginegroupSeRlProp {
    msfNumStages?: pulumi.Input<string>;
    msfStageSize?: pulumi.Input<string>;
}

export interface ServiceenginegroupSeTimeTrackerProp {
    egressAuditMode?: pulumi.Input<string>;
    egressThreshold?: pulumi.Input<string>;
    eventGenWindow?: pulumi.Input<string>;
    ingressAuditMode?: pulumi.Input<string>;
    ingressThreshold?: pulumi.Input<string>;
}

export interface ServiceenginegroupSeTracertPortRange {
    end: pulumi.Input<string>;
    start: pulumi.Input<string>;
}

export interface ServiceenginegroupServiceIp6Subnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.ServiceenginegroupServiceIp6SubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface ServiceenginegroupServiceIp6SubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ServiceenginegroupServiceIpSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.ServiceenginegroupServiceIpSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface ServiceenginegroupServiceIpSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ServiceenginegroupUserAgentCacheConfig {
    batchSize?: pulumi.Input<string>;
    controllerCacheSize?: pulumi.Input<string>;
    maxAge?: pulumi.Input<string>;
    maxLastHitTime?: pulumi.Input<string>;
    maxUpstreamQueries?: pulumi.Input<string>;
    maxWaitTime?: pulumi.Input<string>;
    numEntriesUpstreamUpdate?: pulumi.Input<string>;
    percentReservedForBadBots?: pulumi.Input<string>;
    percentReservedForBrowsers?: pulumi.Input<string>;
    percentReservedForGoodBots?: pulumi.Input<string>;
    percentReservedForOutstanding?: pulumi.Input<string>;
    seCacheSize?: pulumi.Input<string>;
    upstreamUpdateInterval?: pulumi.Input<string>;
}

export interface ServiceenginegroupVcenter {
    clusters?: pulumi.Input<pulumi.Input<inputs.ServiceenginegroupVcenterCluster>[]>;
    nsxtClusters?: pulumi.Input<pulumi.Input<inputs.ServiceenginegroupVcenterNsxtCluster>[]>;
    nsxtDatastores?: pulumi.Input<pulumi.Input<inputs.ServiceenginegroupVcenterNsxtDatastore>[]>;
    nsxtHosts?: pulumi.Input<pulumi.Input<inputs.ServiceenginegroupVcenterNsxtHost>[]>;
    vcenterFolder?: pulumi.Input<string>;
    vcenterRef: pulumi.Input<string>;
}

export interface ServiceenginegroupVcenterCluster {
    clusterId?: pulumi.Input<string>;
    overrideVsphereHa?: pulumi.Input<string>;
    vmgName?: pulumi.Input<string>;
}

export interface ServiceenginegroupVcenterDatastore {
    datastoreName?: pulumi.Input<string>;
    managedObjectId?: pulumi.Input<string>;
}

export interface ServiceenginegroupVcenterHost {
    hostRefs?: pulumi.Input<pulumi.Input<string>[]>;
    include?: pulumi.Input<string>;
}

export interface ServiceenginegroupVcenterNsxtCluster {
    clusterIds?: pulumi.Input<pulumi.Input<string>[]>;
    include?: pulumi.Input<string>;
}

export interface ServiceenginegroupVcenterNsxtDatastore {
    dsIds?: pulumi.Input<pulumi.Input<string>[]>;
    include?: pulumi.Input<string>;
}

export interface ServiceenginegroupVcenterNsxtHost {
    hostIds?: pulumi.Input<pulumi.Input<string>[]>;
    include?: pulumi.Input<string>;
}

export interface ServiceenginegroupVipAsg {
    configurations?: pulumi.Input<pulumi.Input<inputs.ServiceenginegroupVipAsgConfiguration>[]>;
    policies?: pulumi.Input<pulumi.Input<inputs.ServiceenginegroupVipAsgPolicy>[]>;
}

export interface ServiceenginegroupVipAsgConfiguration {
    zones?: pulumi.Input<pulumi.Input<inputs.ServiceenginegroupVipAsgConfigurationZone>[]>;
}

export interface ServiceenginegroupVipAsgConfigurationZone {
    availabilityZone?: pulumi.Input<string>;
    fipCapable?: pulumi.Input<string>;
    subnetUuid?: pulumi.Input<string>;
}

export interface ServiceenginegroupVipAsgPolicy {
    dnsCooldown?: pulumi.Input<string>;
    maxSize?: pulumi.Input<string>;
    minSize?: pulumi.Input<string>;
    suspend?: pulumi.Input<string>;
}

export interface ServiceenginegroupVssPlacement {
    coreNonaffinity?: pulumi.Input<string>;
    numSubcores?: pulumi.Input<string>;
}

export interface SnmptrapprofileConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface SnmptrapprofileTrapServer {
    community?: pulumi.Input<string>;
    ipAddrs: pulumi.Input<pulumi.Input<inputs.SnmptrapprofileTrapServerIpAddr>[]>;
    port?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<inputs.SnmptrapprofileTrapServerUser>[]>;
    version?: pulumi.Input<string>;
}

export interface SnmptrapprofileTrapServerIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SnmptrapprofileTrapServerUser {
    authPassphrase?: pulumi.Input<string>;
    authType?: pulumi.Input<string>;
    privPassphrase?: pulumi.Input<string>;
    privType?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface SslkeyandcertificateCaCert {
    caRef?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface SslkeyandcertificateCertificate {
    certificate?: pulumi.Input<string>;
    certificateSigningRequest?: pulumi.Input<string>;
    chainVerified?: pulumi.Input<string>;
    daysUntilExpire?: pulumi.Input<string>;
    expiryStatus?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    issuers?: pulumi.Input<pulumi.Input<inputs.SslkeyandcertificateCertificateIssuer>[]>;
    keyParams?: pulumi.Input<pulumi.Input<inputs.SslkeyandcertificateCertificateKeyParam>[]>;
    notAfter?: pulumi.Input<string>;
    notBefore?: pulumi.Input<string>;
    publicKey?: pulumi.Input<string>;
    selfSigned?: pulumi.Input<string>;
    serialNumber?: pulumi.Input<string>;
    signature?: pulumi.Input<string>;
    signatureAlgorithm?: pulumi.Input<string>;
    subjectAltNames?: pulumi.Input<pulumi.Input<string>[]>;
    subjects?: pulumi.Input<pulumi.Input<inputs.SslkeyandcertificateCertificateSubject>[]>;
    text?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface SslkeyandcertificateCertificateIssuer {
    commonName?: pulumi.Input<string>;
    country?: pulumi.Input<string>;
    distinguishedName?: pulumi.Input<string>;
    emailAddress?: pulumi.Input<string>;
    locality?: pulumi.Input<string>;
    organization?: pulumi.Input<string>;
    organizationUnit?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}

export interface SslkeyandcertificateCertificateKeyParam {
    algorithm: pulumi.Input<string>;
    ecParams?: pulumi.Input<pulumi.Input<inputs.SslkeyandcertificateCertificateKeyParamEcParam>[]>;
    rsaParams?: pulumi.Input<pulumi.Input<inputs.SslkeyandcertificateCertificateKeyParamRsaParam>[]>;
}

export interface SslkeyandcertificateCertificateKeyParamEcParam {
    curve?: pulumi.Input<string>;
}

export interface SslkeyandcertificateCertificateKeyParamRsaParam {
    exponent?: pulumi.Input<string>;
    keySize?: pulumi.Input<string>;
}

export interface SslkeyandcertificateCertificateSubject {
    commonName?: pulumi.Input<string>;
    country?: pulumi.Input<string>;
    distinguishedName?: pulumi.Input<string>;
    emailAddress?: pulumi.Input<string>;
    locality?: pulumi.Input<string>;
    organization?: pulumi.Input<string>;
    organizationUnit?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}

export interface SslkeyandcertificateConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface SslkeyandcertificateDynamicParam {
    isDynamic?: pulumi.Input<string>;
    isSensitive?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SslkeyandcertificateKeyParam {
    algorithm: pulumi.Input<string>;
    ecParams?: pulumi.Input<pulumi.Input<inputs.SslkeyandcertificateKeyParamEcParam>[]>;
    rsaParams?: pulumi.Input<pulumi.Input<inputs.SslkeyandcertificateKeyParamRsaParam>[]>;
}

export interface SslkeyandcertificateKeyParamEcParam {
    curve?: pulumi.Input<string>;
}

export interface SslkeyandcertificateKeyParamRsaParam {
    exponent?: pulumi.Input<string>;
    keySize?: pulumi.Input<string>;
}

export interface SslkeyandcertificateMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SslkeyandcertificateOcspConfig {
    failedOcspJobsRetryInterval?: pulumi.Input<string>;
    maxTries?: pulumi.Input<string>;
    ocspReqInterval?: pulumi.Input<string>;
    ocspRespTimeout?: pulumi.Input<string>;
    responderUrlLists?: pulumi.Input<pulumi.Input<string>[]>;
    urlAction?: pulumi.Input<string>;
}

export interface SslkeyandcertificateOcspResponseInfo {
    certStatus: pulumi.Input<string>;
    nextUpdate?: pulumi.Input<string>;
    ocspRespFromResponderUrl: pulumi.Input<string>;
    ocspResponse: pulumi.Input<string>;
    revocationReason?: pulumi.Input<string>;
    revocationTime?: pulumi.Input<string>;
    thisUpdate?: pulumi.Input<string>;
}

export interface SslprofileAcceptedVersion {
    type: pulumi.Input<string>;
}

export interface SslprofileConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface SslprofileMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SslprofileSslRating {
    compatibilityRating?: pulumi.Input<string>;
    performanceRating?: pulumi.Input<string>;
    securityScore?: pulumi.Input<string>;
}

export interface SslprofileTag {
    type?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface SsopolicyAuthenticationPolicy {
    authnRules?: pulumi.Input<pulumi.Input<inputs.SsopolicyAuthenticationPolicyAuthnRule>[]>;
    defaultAuthProfileRef?: pulumi.Input<string>;
}

export interface SsopolicyAuthenticationPolicyAuthnRule {
    actions?: pulumi.Input<pulumi.Input<inputs.SsopolicyAuthenticationPolicyAuthnRuleAction>[]>;
    enable?: pulumi.Input<string>;
    index: pulumi.Input<string>;
    matches?: pulumi.Input<pulumi.Input<inputs.SsopolicyAuthenticationPolicyAuthnRuleMatch>[]>;
    name: pulumi.Input<string>;
}

export interface SsopolicyAuthenticationPolicyAuthnRuleAction {
    type?: pulumi.Input<string>;
}

export interface SsopolicyAuthenticationPolicyAuthnRuleMatch {
    clientIps?: pulumi.Input<pulumi.Input<inputs.SsopolicyAuthenticationPolicyAuthnRuleMatchClientIp>[]>;
    hostHdrs?: pulumi.Input<pulumi.Input<inputs.SsopolicyAuthenticationPolicyAuthnRuleMatchHostHdr>[]>;
    paths?: pulumi.Input<pulumi.Input<inputs.SsopolicyAuthenticationPolicyAuthnRuleMatchPath>[]>;
}

export interface SsopolicyAuthenticationPolicyAuthnRuleMatchClientIp {
    addrs?: pulumi.Input<pulumi.Input<inputs.SsopolicyAuthenticationPolicyAuthnRuleMatchClientIpAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.SsopolicyAuthenticationPolicyAuthnRuleMatchClientIpPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.SsopolicyAuthenticationPolicyAuthnRuleMatchClientIpRange>[]>;
}

export interface SsopolicyAuthenticationPolicyAuthnRuleMatchClientIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SsopolicyAuthenticationPolicyAuthnRuleMatchClientIpPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.SsopolicyAuthenticationPolicyAuthnRuleMatchClientIpPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface SsopolicyAuthenticationPolicyAuthnRuleMatchClientIpPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SsopolicyAuthenticationPolicyAuthnRuleMatchClientIpRange {
    begins: pulumi.Input<pulumi.Input<inputs.SsopolicyAuthenticationPolicyAuthnRuleMatchClientIpRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.SsopolicyAuthenticationPolicyAuthnRuleMatchClientIpRangeEnd>[]>;
}

export interface SsopolicyAuthenticationPolicyAuthnRuleMatchClientIpRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SsopolicyAuthenticationPolicyAuthnRuleMatchClientIpRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SsopolicyAuthenticationPolicyAuthnRuleMatchHostHdr {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SsopolicyAuthenticationPolicyAuthnRuleMatchPath {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    matchDecodedString?: pulumi.Input<string>;
    matchStrs?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SsopolicyAuthorizationPolicy {
    authzRules?: pulumi.Input<pulumi.Input<inputs.SsopolicyAuthorizationPolicyAuthzRule>[]>;
}

export interface SsopolicyAuthorizationPolicyAuthzRule {
    actions: pulumi.Input<pulumi.Input<inputs.SsopolicyAuthorizationPolicyAuthzRuleAction>[]>;
    enable?: pulumi.Input<string>;
    index: pulumi.Input<string>;
    matches: pulumi.Input<pulumi.Input<inputs.SsopolicyAuthorizationPolicyAuthzRuleMatch>[]>;
    name: pulumi.Input<string>;
}

export interface SsopolicyAuthorizationPolicyAuthzRuleAction {
    statusCode?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface SsopolicyAuthorizationPolicyAuthzRuleMatch {
    accessTokens?: pulumi.Input<pulumi.Input<inputs.SsopolicyAuthorizationPolicyAuthzRuleMatchAccessToken>[]>;
    attrMatches?: pulumi.Input<pulumi.Input<inputs.SsopolicyAuthorizationPolicyAuthzRuleMatchAttrMatch>[]>;
    hostHdrs?: pulumi.Input<pulumi.Input<inputs.SsopolicyAuthorizationPolicyAuthzRuleMatchHostHdr>[]>;
    methods?: pulumi.Input<pulumi.Input<inputs.SsopolicyAuthorizationPolicyAuthzRuleMatchMethod>[]>;
    paths?: pulumi.Input<pulumi.Input<inputs.SsopolicyAuthorizationPolicyAuthzRuleMatchPath>[]>;
}

export interface SsopolicyAuthorizationPolicyAuthzRuleMatchAccessToken {
    matches?: pulumi.Input<pulumi.Input<inputs.SsopolicyAuthorizationPolicyAuthzRuleMatchAccessTokenMatch>[]>;
    tokenName?: pulumi.Input<string>;
}

export interface SsopolicyAuthorizationPolicyAuthzRuleMatchAccessTokenMatch {
    boolMatch?: pulumi.Input<string>;
    intMatch?: pulumi.Input<string>;
    isMandatory: pulumi.Input<string>;
    name: pulumi.Input<string>;
    stringMatches?: pulumi.Input<pulumi.Input<inputs.SsopolicyAuthorizationPolicyAuthzRuleMatchAccessTokenMatchStringMatch>[]>;
    type: pulumi.Input<string>;
    validate: pulumi.Input<string>;
}

export interface SsopolicyAuthorizationPolicyAuthzRuleMatchAccessTokenMatchStringMatch {
    matchCriteria: pulumi.Input<string>;
    matchStrs?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SsopolicyAuthorizationPolicyAuthzRuleMatchAttrMatch {
    attributeName: pulumi.Input<string>;
    attributeValueLists: pulumi.Input<pulumi.Input<inputs.SsopolicyAuthorizationPolicyAuthzRuleMatchAttrMatchAttributeValueList>[]>;
}

export interface SsopolicyAuthorizationPolicyAuthzRuleMatchAttrMatchAttributeValueList {
    matchCriteria: pulumi.Input<string>;
    matchStrs?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SsopolicyAuthorizationPolicyAuthzRuleMatchHostHdr {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SsopolicyAuthorizationPolicyAuthzRuleMatchMethod {
    matchCriteria: pulumi.Input<string>;
    methods: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SsopolicyAuthorizationPolicyAuthzRuleMatchPath {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    matchDecodedString?: pulumi.Input<string>;
    matchStrs?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SsopolicyConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface SsopolicyMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface StatediffoperationEvent {
    duration?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    message?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    taskName?: pulumi.Input<string>;
}

export interface StatediffsnapshotPostSnapshot {
    gssnapshots?: pulumi.Input<pulumi.Input<inputs.StatediffsnapshotPostSnapshotGssnapshot>[]>;
    poolsnapshots?: pulumi.Input<pulumi.Input<inputs.StatediffsnapshotPostSnapshotPoolsnapshot>[]>;
    sesnapshots?: pulumi.Input<pulumi.Input<inputs.StatediffsnapshotPostSnapshotSesnapshot>[]>;
    vssnapshots?: pulumi.Input<pulumi.Input<inputs.StatediffsnapshotPostSnapshotVssnapshot>[]>;
}

export interface StatediffsnapshotPostSnapshotGssnapshot {
    operStatuses?: pulumi.Input<pulumi.Input<inputs.StatediffsnapshotPostSnapshotGssnapshotOperStatus>[]>;
}

export interface StatediffsnapshotPostSnapshotGssnapshotOperStatus {
    lastChangedTimes?: pulumi.Input<pulumi.Input<inputs.StatediffsnapshotPostSnapshotGssnapshotOperStatusLastChangedTime>[]>;
    reasonCode?: pulumi.Input<string>;
    reasonCodeString?: pulumi.Input<string>;
    reasons?: pulumi.Input<pulumi.Input<string>[]>;
    state?: pulumi.Input<string>;
}

export interface StatediffsnapshotPostSnapshotGssnapshotOperStatusLastChangedTime {
    secs: pulumi.Input<string>;
    usecs: pulumi.Input<string>;
}

export interface StatediffsnapshotPostSnapshotPoolsnapshot {
    operStatuses?: pulumi.Input<pulumi.Input<inputs.StatediffsnapshotPostSnapshotPoolsnapshotOperStatus>[]>;
}

export interface StatediffsnapshotPostSnapshotPoolsnapshotOperStatus {
    lastChangedTimes?: pulumi.Input<pulumi.Input<inputs.StatediffsnapshotPostSnapshotPoolsnapshotOperStatusLastChangedTime>[]>;
    reasonCode?: pulumi.Input<string>;
    reasonCodeString?: pulumi.Input<string>;
    reasons?: pulumi.Input<pulumi.Input<string>[]>;
    state?: pulumi.Input<string>;
}

export interface StatediffsnapshotPostSnapshotPoolsnapshotOperStatusLastChangedTime {
    secs: pulumi.Input<string>;
    usecs: pulumi.Input<string>;
}

export interface StatediffsnapshotPostSnapshotSesnapshot {
    operStatuses?: pulumi.Input<pulumi.Input<inputs.StatediffsnapshotPostSnapshotSesnapshotOperStatus>[]>;
}

export interface StatediffsnapshotPostSnapshotSesnapshotOperStatus {
    lastChangedTimes?: pulumi.Input<pulumi.Input<inputs.StatediffsnapshotPostSnapshotSesnapshotOperStatusLastChangedTime>[]>;
    reasonCode?: pulumi.Input<string>;
    reasonCodeString?: pulumi.Input<string>;
    reasons?: pulumi.Input<pulumi.Input<string>[]>;
    state?: pulumi.Input<string>;
}

export interface StatediffsnapshotPostSnapshotSesnapshotOperStatusLastChangedTime {
    secs: pulumi.Input<string>;
    usecs: pulumi.Input<string>;
}

export interface StatediffsnapshotPostSnapshotVssnapshot {
    operStatuses?: pulumi.Input<pulumi.Input<inputs.StatediffsnapshotPostSnapshotVssnapshotOperStatus>[]>;
}

export interface StatediffsnapshotPostSnapshotVssnapshotOperStatus {
    lastChangedTimes?: pulumi.Input<pulumi.Input<inputs.StatediffsnapshotPostSnapshotVssnapshotOperStatusLastChangedTime>[]>;
    reasonCode?: pulumi.Input<string>;
    reasonCodeString?: pulumi.Input<string>;
    reasons?: pulumi.Input<pulumi.Input<string>[]>;
    state?: pulumi.Input<string>;
}

export interface StatediffsnapshotPostSnapshotVssnapshotOperStatusLastChangedTime {
    secs: pulumi.Input<string>;
    usecs: pulumi.Input<string>;
}

export interface StatediffsnapshotPreSnapshot {
    gssnapshots?: pulumi.Input<pulumi.Input<inputs.StatediffsnapshotPreSnapshotGssnapshot>[]>;
    poolsnapshots?: pulumi.Input<pulumi.Input<inputs.StatediffsnapshotPreSnapshotPoolsnapshot>[]>;
    sesnapshots?: pulumi.Input<pulumi.Input<inputs.StatediffsnapshotPreSnapshotSesnapshot>[]>;
    vssnapshots?: pulumi.Input<pulumi.Input<inputs.StatediffsnapshotPreSnapshotVssnapshot>[]>;
}

export interface StatediffsnapshotPreSnapshotGssnapshot {
    operStatuses?: pulumi.Input<pulumi.Input<inputs.StatediffsnapshotPreSnapshotGssnapshotOperStatus>[]>;
}

export interface StatediffsnapshotPreSnapshotGssnapshotOperStatus {
    lastChangedTimes?: pulumi.Input<pulumi.Input<inputs.StatediffsnapshotPreSnapshotGssnapshotOperStatusLastChangedTime>[]>;
    reasonCode?: pulumi.Input<string>;
    reasonCodeString?: pulumi.Input<string>;
    reasons?: pulumi.Input<pulumi.Input<string>[]>;
    state?: pulumi.Input<string>;
}

export interface StatediffsnapshotPreSnapshotGssnapshotOperStatusLastChangedTime {
    secs: pulumi.Input<string>;
    usecs: pulumi.Input<string>;
}

export interface StatediffsnapshotPreSnapshotPoolsnapshot {
    operStatuses?: pulumi.Input<pulumi.Input<inputs.StatediffsnapshotPreSnapshotPoolsnapshotOperStatus>[]>;
}

export interface StatediffsnapshotPreSnapshotPoolsnapshotOperStatus {
    lastChangedTimes?: pulumi.Input<pulumi.Input<inputs.StatediffsnapshotPreSnapshotPoolsnapshotOperStatusLastChangedTime>[]>;
    reasonCode?: pulumi.Input<string>;
    reasonCodeString?: pulumi.Input<string>;
    reasons?: pulumi.Input<pulumi.Input<string>[]>;
    state?: pulumi.Input<string>;
}

export interface StatediffsnapshotPreSnapshotPoolsnapshotOperStatusLastChangedTime {
    secs: pulumi.Input<string>;
    usecs: pulumi.Input<string>;
}

export interface StatediffsnapshotPreSnapshotSesnapshot {
    operStatuses?: pulumi.Input<pulumi.Input<inputs.StatediffsnapshotPreSnapshotSesnapshotOperStatus>[]>;
}

export interface StatediffsnapshotPreSnapshotSesnapshotOperStatus {
    lastChangedTimes?: pulumi.Input<pulumi.Input<inputs.StatediffsnapshotPreSnapshotSesnapshotOperStatusLastChangedTime>[]>;
    reasonCode?: pulumi.Input<string>;
    reasonCodeString?: pulumi.Input<string>;
    reasons?: pulumi.Input<pulumi.Input<string>[]>;
    state?: pulumi.Input<string>;
}

export interface StatediffsnapshotPreSnapshotSesnapshotOperStatusLastChangedTime {
    secs: pulumi.Input<string>;
    usecs: pulumi.Input<string>;
}

export interface StatediffsnapshotPreSnapshotVssnapshot {
    operStatuses?: pulumi.Input<pulumi.Input<inputs.StatediffsnapshotPreSnapshotVssnapshotOperStatus>[]>;
}

export interface StatediffsnapshotPreSnapshotVssnapshotOperStatus {
    lastChangedTimes?: pulumi.Input<pulumi.Input<inputs.StatediffsnapshotPreSnapshotVssnapshotOperStatusLastChangedTime>[]>;
    reasonCode?: pulumi.Input<string>;
    reasonCodeString?: pulumi.Input<string>;
    reasons?: pulumi.Input<pulumi.Input<string>[]>;
    state?: pulumi.Input<string>;
}

export interface StatediffsnapshotPreSnapshotVssnapshotOperStatusLastChangedTime {
    secs: pulumi.Input<string>;
    usecs: pulumi.Input<string>;
}

export interface StringgroupConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface StringgroupKv {
    key: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface StringgroupMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SystemconfigurationAdminAuthConfiguration {
    allowLocalUserLogin?: pulumi.Input<string>;
    remoteAuthConfigurations?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationAdminAuthConfigurationRemoteAuthConfiguration>[]>;
    serviceAuthConfigurations?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationAdminAuthConfigurationServiceAuthConfiguration>[]>;
}

export interface SystemconfigurationAdminAuthConfigurationRemoteAuthConfiguration {
    authMappingProfileRef: pulumi.Input<string>;
    authProfileRef: pulumi.Input<string>;
    index: pulumi.Input<string>;
}

export interface SystemconfigurationAdminAuthConfigurationServiceAuthConfiguration {
    index: pulumi.Input<string>;
    serviceAuthMappingProfileRef: pulumi.Input<string>;
    serviceAuthProfileRef: pulumi.Input<string>;
}

export interface SystemconfigurationConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface SystemconfigurationControllerAnalyticsPolicy {
    metricsEventThresholds?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationControllerAnalyticsPolicyMetricsEventThreshold>[]>;
}

export interface SystemconfigurationControllerAnalyticsPolicyMetricsEventThreshold {
    metricsEventThresholdType: pulumi.Input<string>;
    resetThreshold?: pulumi.Input<string>;
    watermarkThresholds?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface SystemconfigurationDnsConfiguration {
    searchDomain?: pulumi.Input<string>;
    serverLists?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationDnsConfigurationServerList>[]>;
}

export interface SystemconfigurationDnsConfigurationServerList {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SystemconfigurationEmailConfiguration {
    authPassword?: pulumi.Input<string>;
    authUsername?: pulumi.Input<string>;
    disableTls?: pulumi.Input<string>;
    emailTimezone?: pulumi.Input<string>;
    fromEmail?: pulumi.Input<string>;
    fromName?: pulumi.Input<string>;
    mailServerName?: pulumi.Input<string>;
    mailServerPort?: pulumi.Input<string>;
    smtpType: pulumi.Input<string>;
}

export interface SystemconfigurationGlobalTenantConfig {
    seInProviderContext?: pulumi.Input<string>;
    tenantAccessToProviderSe?: pulumi.Input<string>;
    tenantVrf?: pulumi.Input<string>;
}

export interface SystemconfigurationLinuxConfiguration {
    banner?: pulumi.Input<string>;
    cisMode?: pulumi.Input<string>;
    motd?: pulumi.Input<string>;
}

export interface SystemconfigurationMgmtIpAccessControl {
    apiAccesses?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlApiAccess>[]>;
    shellServerAccesses?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlShellServerAccess>[]>;
    snmpAccesses?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlSnmpAccess>[]>;
    sshAccesses?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlSshAccess>[]>;
    sysintAccesses?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlSysintAccess>[]>;
}

export interface SystemconfigurationMgmtIpAccessControlApiAccess {
    addrs?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlApiAccessAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlApiAccessPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlApiAccessRange>[]>;
}

export interface SystemconfigurationMgmtIpAccessControlApiAccessAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SystemconfigurationMgmtIpAccessControlApiAccessPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlApiAccessPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface SystemconfigurationMgmtIpAccessControlApiAccessPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SystemconfigurationMgmtIpAccessControlApiAccessRange {
    begins: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlApiAccessRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlApiAccessRangeEnd>[]>;
}

export interface SystemconfigurationMgmtIpAccessControlApiAccessRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SystemconfigurationMgmtIpAccessControlApiAccessRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SystemconfigurationMgmtIpAccessControlShellServerAccess {
    addrs?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlShellServerAccessAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlShellServerAccessPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlShellServerAccessRange>[]>;
}

export interface SystemconfigurationMgmtIpAccessControlShellServerAccessAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SystemconfigurationMgmtIpAccessControlShellServerAccessPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlShellServerAccessPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface SystemconfigurationMgmtIpAccessControlShellServerAccessPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SystemconfigurationMgmtIpAccessControlShellServerAccessRange {
    begins: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlShellServerAccessRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlShellServerAccessRangeEnd>[]>;
}

export interface SystemconfigurationMgmtIpAccessControlShellServerAccessRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SystemconfigurationMgmtIpAccessControlShellServerAccessRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SystemconfigurationMgmtIpAccessControlSnmpAccess {
    addrs?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlSnmpAccessAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlSnmpAccessPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlSnmpAccessRange>[]>;
}

export interface SystemconfigurationMgmtIpAccessControlSnmpAccessAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SystemconfigurationMgmtIpAccessControlSnmpAccessPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlSnmpAccessPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface SystemconfigurationMgmtIpAccessControlSnmpAccessPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SystemconfigurationMgmtIpAccessControlSnmpAccessRange {
    begins: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlSnmpAccessRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlSnmpAccessRangeEnd>[]>;
}

export interface SystemconfigurationMgmtIpAccessControlSnmpAccessRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SystemconfigurationMgmtIpAccessControlSnmpAccessRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SystemconfigurationMgmtIpAccessControlSshAccess {
    addrs?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlSshAccessAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlSshAccessPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlSshAccessRange>[]>;
}

export interface SystemconfigurationMgmtIpAccessControlSshAccessAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SystemconfigurationMgmtIpAccessControlSshAccessPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlSshAccessPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface SystemconfigurationMgmtIpAccessControlSshAccessPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SystemconfigurationMgmtIpAccessControlSshAccessRange {
    begins: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlSshAccessRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlSshAccessRangeEnd>[]>;
}

export interface SystemconfigurationMgmtIpAccessControlSshAccessRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SystemconfigurationMgmtIpAccessControlSshAccessRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SystemconfigurationMgmtIpAccessControlSysintAccess {
    addrs?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlSysintAccessAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlSysintAccessPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlSysintAccessRange>[]>;
}

export interface SystemconfigurationMgmtIpAccessControlSysintAccessAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SystemconfigurationMgmtIpAccessControlSysintAccessPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlSysintAccessPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface SystemconfigurationMgmtIpAccessControlSysintAccessPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SystemconfigurationMgmtIpAccessControlSysintAccessRange {
    begins: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlSysintAccessRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControlSysintAccessRangeEnd>[]>;
}

export interface SystemconfigurationMgmtIpAccessControlSysintAccessRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SystemconfigurationMgmtIpAccessControlSysintAccessRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SystemconfigurationNtpConfiguration {
    ntpAuthenticationKeys?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationNtpConfigurationNtpAuthenticationKey>[]>;
    ntpServerLists?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationNtpConfigurationNtpServerList>[]>;
    ntpServers?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationNtpConfigurationNtpServer>[]>;
}

export interface SystemconfigurationNtpConfigurationNtpAuthenticationKey {
    algorithm?: pulumi.Input<string>;
    key: pulumi.Input<string>;
    keyNumber: pulumi.Input<string>;
}

export interface SystemconfigurationNtpConfigurationNtpServer {
    keyNumber?: pulumi.Input<string>;
    servers: pulumi.Input<pulumi.Input<inputs.SystemconfigurationNtpConfigurationNtpServerServer>[]>;
}

export interface SystemconfigurationNtpConfigurationNtpServerList {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SystemconfigurationNtpConfigurationNtpServerServer {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SystemconfigurationPortalConfiguration {
    allowBasicAuthentication?: pulumi.Input<string>;
    apiForceTimeout?: pulumi.Input<string>;
    disableRemoteCliShell?: pulumi.Input<string>;
    disableSwagger?: pulumi.Input<string>;
    enableClickjackingProtection?: pulumi.Input<string>;
    enableHttp?: pulumi.Input<string>;
    enableHttps?: pulumi.Input<string>;
    httpPort?: pulumi.Input<string>;
    httpsPort?: pulumi.Input<string>;
    minimumPasswordLength?: pulumi.Input<string>;
    passwordStrengthCheck?: pulumi.Input<string>;
    pkiprofileRef?: pulumi.Input<string>;
    redirectToHttps?: pulumi.Input<string>;
    sslkeyandcertificateRefs?: pulumi.Input<pulumi.Input<string>[]>;
    sslprofileRef?: pulumi.Input<string>;
    useUuidFromInput?: pulumi.Input<string>;
}

export interface SystemconfigurationProxyConfiguration {
    host: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface SystemconfigurationSecureChannelConfiguration {
    sslkeyandcertificateRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SystemconfigurationSnmpConfiguration {
    community?: pulumi.Input<string>;
    largeTrapPayload?: pulumi.Input<string>;
    snmpV3Configs?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationSnmpConfigurationSnmpV3Config>[]>;
    sysContact?: pulumi.Input<string>;
    sysLocation?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface SystemconfigurationSnmpConfigurationSnmpV3Config {
    engineId?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationSnmpConfigurationSnmpV3ConfigUser>[]>;
}

export interface SystemconfigurationSnmpConfigurationSnmpV3ConfigUser {
    authPassphrase?: pulumi.Input<string>;
    authType?: pulumi.Input<string>;
    privPassphrase?: pulumi.Input<string>;
    privType?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface SystemlimitsConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface SystemlimitsControllerLimit {
    botLimits?: pulumi.Input<pulumi.Input<inputs.SystemlimitsControllerLimitBotLimit>[]>;
    certificatesPerVirtualservice?: pulumi.Input<string>;
    controllerCloudLimits?: pulumi.Input<pulumi.Input<inputs.SystemlimitsControllerLimitControllerCloudLimit>[]>;
    controllerSizingLimits?: pulumi.Input<pulumi.Input<inputs.SystemlimitsControllerLimitControllerSizingLimit>[]>;
    defaultRoutesPerVrfcontext?: pulumi.Input<string>;
    gatewayMonPerVrf?: pulumi.Input<string>;
    ipaddressLimits?: pulumi.Input<pulumi.Input<inputs.SystemlimitsControllerLimitIpaddressLimit>[]>;
    ipsPerIpgroup?: pulumi.Input<string>;
    l7Limits?: pulumi.Input<pulumi.Input<inputs.SystemlimitsControllerLimitL7Limit>[]>;
    poolgroupsPerVirtualservice?: pulumi.Input<string>;
    poolsPerPoolgroup?: pulumi.Input<string>;
    poolsPerVirtualservice?: pulumi.Input<string>;
    routesPerVrfcontext?: pulumi.Input<string>;
    rulesPerNatPolicy?: pulumi.Input<string>;
    rulesPerNetworksecuritypolicy?: pulumi.Input<string>;
    serversPerPool?: pulumi.Input<string>;
    sniChildrenPerParent?: pulumi.Input<string>;
    stringsPerStringgroup?: pulumi.Input<string>;
    vsBgpScaleout?: pulumi.Input<string>;
    vsL2Scaleout?: pulumi.Input<string>;
    wafLimits?: pulumi.Input<pulumi.Input<inputs.SystemlimitsControllerLimitWafLimit>[]>;
}

export interface SystemlimitsControllerLimitBotLimit {
    allowRules?: pulumi.Input<string>;
    hdrs?: pulumi.Input<string>;
    mappingRules?: pulumi.Input<string>;
}

export interface SystemlimitsControllerLimitControllerCloudLimit {
    numClouds?: pulumi.Input<string>;
    t1LrsPerCloud?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface SystemlimitsControllerLimitControllerSizingLimit {
    controllerSizingCloudLimits?: pulumi.Input<pulumi.Input<inputs.SystemlimitsControllerLimitControllerSizingLimitControllerSizingCloudLimit>[]>;
    flavor?: pulumi.Input<string>;
    numClouds?: pulumi.Input<string>;
    numEastWestVirtualservices?: pulumi.Input<string>;
    numServers?: pulumi.Input<string>;
    numServiceengines?: pulumi.Input<string>;
    numTenants?: pulumi.Input<string>;
    numVirtualservices?: pulumi.Input<string>;
    numVirtualservicesRtMetrics?: pulumi.Input<string>;
    numVrfs?: pulumi.Input<string>;
    numWafVirtualservices?: pulumi.Input<string>;
}

export interface SystemlimitsControllerLimitControllerSizingLimitControllerSizingCloudLimit {
    numClouds?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface SystemlimitsControllerLimitIpaddressLimit {
    ipAddressGroupPerMatchCriteria?: pulumi.Input<string>;
    ipAddressPrefixPerMatchCriteria?: pulumi.Input<string>;
    ipAddressRangePerMatchCriteria?: pulumi.Input<string>;
    ipAddressesPerMatchCriteria?: pulumi.Input<string>;
}

export interface SystemlimitsControllerLimitL7Limit {
    httpPoliciesPerVs?: pulumi.Input<string>;
    numCompressionFilters?: pulumi.Input<string>;
    numCustomStr?: pulumi.Input<string>;
    numMatchesPerRule?: pulumi.Input<string>;
    numRulesPerEvhHost?: pulumi.Input<string>;
    numRulesPerHttpPolicy?: pulumi.Input<string>;
    numStrgroupsPerMatch?: pulumi.Input<string>;
    strCacheMime?: pulumi.Input<string>;
    strGroupsCacheMime?: pulumi.Input<string>;
    strGroupsNoCacheMime?: pulumi.Input<string>;
    strGroupsNoCacheUri?: pulumi.Input<string>;
    strNoCacheMime?: pulumi.Input<string>;
    strNoCacheUri?: pulumi.Input<string>;
}

export interface SystemlimitsControllerLimitWafLimit {
    numAllowedContentTypes?: pulumi.Input<string>;
    numAllowedRequestContentTypeCharsets?: pulumi.Input<string>;
    numAllowlistPolicyRules?: pulumi.Input<string>;
    numApplications?: pulumi.Input<string>;
    numContentTypeMappings?: pulumi.Input<string>;
    numDataFiles?: pulumi.Input<string>;
    numExcludeListPerRuleGroup?: pulumi.Input<string>;
    numPrePostCrsGroups?: pulumi.Input<string>;
    numPsmGroups?: pulumi.Input<string>;
    numPsmMatchElements?: pulumi.Input<string>;
    numPsmMatchRulesPerLoc?: pulumi.Input<string>;
    numPsmTotalLocations?: pulumi.Input<string>;
    numRestrictedExtensions?: pulumi.Input<string>;
    numRestrictedHeaders?: pulumi.Input<string>;
    numRuleTags?: pulumi.Input<string>;
    numRulesPerRulegroup?: pulumi.Input<string>;
    numStaticExtensions?: pulumi.Input<string>;
}

export interface SystemlimitsControllerSize {
    flavor?: pulumi.Input<string>;
    minCpus?: pulumi.Input<string>;
    minMemory?: pulumi.Input<string>;
}

export interface SystemlimitsServiceengineLimit {
    allVirtualservicesPerServiceengine?: pulumi.Input<string>;
    ewVirtualservicesPerServiceengine?: pulumi.Input<string>;
    nsVirtualservicesPerServiceengine?: pulumi.Input<string>;
    numLogicalIntfPerSe?: pulumi.Input<string>;
    numPhyIntfPerSe?: pulumi.Input<string>;
    numVirtualservicesRtMetrics?: pulumi.Input<string>;
    numVlanIntfPerPhyIntf?: pulumi.Input<string>;
    numVlanIntfPerSe?: pulumi.Input<string>;
    serviceengineCloudLimits?: pulumi.Input<pulumi.Input<inputs.SystemlimitsServiceengineLimitServiceengineCloudLimit>[]>;
}

export interface SystemlimitsServiceengineLimitServiceengineCloudLimit {
    type?: pulumi.Input<string>;
    vrfsPerServiceengine?: pulumi.Input<string>;
}

export interface SystemreportEvent {
    duration?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    eventName?: pulumi.Input<string>;
    messages?: pulumi.Input<pulumi.Input<string>[]>;
    startTime?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface SystemreportReadinessReport {
    name?: pulumi.Input<string>;
    nodeRef?: pulumi.Input<string>;
    nodeType?: pulumi.Input<string>;
    objCloudRef?: pulumi.Input<string>;
    systemReadinesses?: pulumi.Input<pulumi.Input<inputs.SystemreportReadinessReportSystemReadiness>[]>;
}

export interface SystemreportReadinessReportSystemReadiness {
    checks?: pulumi.Input<pulumi.Input<inputs.SystemreportReadinessReportSystemReadinessCheck>[]>;
    checksCompleted?: pulumi.Input<string>;
    duration?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    imageRef?: pulumi.Input<string>;
    patchImageRef?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    states?: pulumi.Input<pulumi.Input<inputs.SystemreportReadinessReportSystemReadinessState>[]>;
    totalChecks?: pulumi.Input<string>;
    upgradeOps?: pulumi.Input<string>;
}

export interface SystemreportReadinessReportSystemReadinessCheck {
    checkCode?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    details?: pulumi.Input<pulumi.Input<string>[]>;
    duration?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    errorDetails?: pulumi.Input<pulumi.Input<string>[]>;
    startTime?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}

export interface SystemreportReadinessReportSystemReadinessState {
    lastChangedTimes?: pulumi.Input<pulumi.Input<inputs.SystemreportReadinessReportSystemReadinessStateLastChangedTime>[]>;
    reason?: pulumi.Input<string>;
    rebooted?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}

export interface SystemreportReadinessReportSystemReadinessStateLastChangedTime {
    secs: pulumi.Input<string>;
    usecs: pulumi.Input<string>;
}

export interface SystemreportState {
    lastChangedTimes?: pulumi.Input<pulumi.Input<inputs.SystemreportStateLastChangedTime>[]>;
    reason?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}

export interface SystemreportStateLastChangedTime {
    secs: pulumi.Input<string>;
    usecs: pulumi.Input<string>;
}

export interface SystemreportSummary {
    description?: pulumi.Input<string>;
    previews?: pulumi.Input<pulumi.Input<string>[]>;
    title?: pulumi.Input<string>;
}

export interface SystemreportTask {
    name: pulumi.Input<string>;
    reason?: pulumi.Input<string>;
    summaries?: pulumi.Input<pulumi.Input<inputs.SystemreportTaskSummary>[]>;
    taskJournalRef?: pulumi.Input<string>;
}

export interface SystemreportTaskSummary {
    description?: pulumi.Input<string>;
    duration?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    errorCount?: pulumi.Input<string>;
    reason?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface TaskjournalError {
    details?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    object?: pulumi.Input<string>;
    tenant?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface TaskjournalInfo {
    actions?: pulumi.Input<pulumi.Input<inputs.TaskjournalInfoAction>[]>;
    totalObjects: pulumi.Input<string>;
    versions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface TaskjournalInfoAction {
    objects?: pulumi.Input<pulumi.Input<inputs.TaskjournalInfoActionObject>[]>;
    version?: pulumi.Input<string>;
}

export interface TaskjournalInfoActionObject {
    failed?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    skipped?: pulumi.Input<string>;
    success?: pulumi.Input<string>;
}

export interface TaskjournalSummary {
    description?: pulumi.Input<string>;
    duration?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    errorCount?: pulumi.Input<string>;
    reason?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface TenantAttr {
    key: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface TenantConfigSetting {
    seInProviderContext?: pulumi.Input<string>;
    tenantAccessToProviderSe?: pulumi.Input<string>;
    tenantVrf?: pulumi.Input<string>;
}

export interface TenantConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface TenantsystemconfigurationConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface Testsedatastorelevel1ConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface Testsedatastorelevel2ConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface Testsedatastorelevel3ConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface TrafficcloneprofileCloneServer {
    ipAddresses?: pulumi.Input<pulumi.Input<inputs.TrafficcloneprofileCloneServerIpAddress>[]>;
    mac?: pulumi.Input<string>;
    networkRef?: pulumi.Input<string>;
    subnets?: pulumi.Input<pulumi.Input<inputs.TrafficcloneprofileCloneServerSubnet>[]>;
}

export interface TrafficcloneprofileCloneServerIpAddress {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface TrafficcloneprofileCloneServerSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.TrafficcloneprofileCloneServerSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface TrafficcloneprofileCloneServerSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface TrafficcloneprofileConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface TrafficcloneprofileMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface UpgradestatusinfoHistory {
    duration?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    ops?: pulumi.Input<string>;
    patchVersion?: pulumi.Input<string>;
    seUpgradeEvents?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoHistorySeUpgradeEvent>[]>;
    segStatuses?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoHistorySegStatus>[]>;
    startTime?: pulumi.Input<string>;
    statediffRef?: pulumi.Input<string>;
    states?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoHistoryState>[]>;
    upgradeEvents?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoHistoryUpgradeEvent>[]>;
    version?: pulumi.Input<string>;
}

export interface UpgradestatusinfoHistorySeUpgradeEvent {
    fromSeRef?: pulumi.Input<string>;
    numSe?: pulumi.Input<string>;
    numSeGroup?: pulumi.Input<string>;
    numVs?: pulumi.Input<string>;
    reasons?: pulumi.Input<pulumi.Input<string>[]>;
    seGroupHaMode?: pulumi.Input<string>;
    seGroupRef?: pulumi.Input<string>;
    seRef?: pulumi.Input<string>;
    subTasks?: pulumi.Input<pulumi.Input<string>[]>;
    task?: pulumi.Input<string>;
    toSeRef?: pulumi.Input<string>;
    trafficStatus?: pulumi.Input<string>;
    vsRef?: pulumi.Input<string>;
}

export interface UpgradestatusinfoHistorySegStatus {
    controllerVersion?: pulumi.Input<string>;
    disruptedVsReves?: pulumi.Input<pulumi.Input<string>[]>;
    duration?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    enqueueTime?: pulumi.Input<string>;
    haMode?: pulumi.Input<string>;
    inProgress?: pulumi.Input<string>;
    notes?: pulumi.Input<pulumi.Input<string>[]>;
    numSe?: pulumi.Input<string>;
    numSeWithNoVs?: pulumi.Input<string>;
    numSeWithVsNotScaledout?: pulumi.Input<string>;
    numSeWithVsScaledout?: pulumi.Input<string>;
    numVs?: pulumi.Input<string>;
    numVsDisrupted?: pulumi.Input<string>;
    progress?: pulumi.Input<string>;
    reasons?: pulumi.Input<pulumi.Input<string>[]>;
    requestTime?: pulumi.Input<string>;
    seAlreadyUpgradedAtStarts?: pulumi.Input<pulumi.Input<string>[]>;
    seDisconnectedAtStarts?: pulumi.Input<pulumi.Input<string>[]>;
    seGroupName?: pulumi.Input<string>;
    seGroupUuid?: pulumi.Input<string>;
    seIpMissingAtStarts?: pulumi.Input<pulumi.Input<string>[]>;
    sePoweredoffAtStarts?: pulumi.Input<pulumi.Input<string>[]>;
    seRebootInProgressRef?: pulumi.Input<string>;
    seUpgradeCompleteds?: pulumi.Input<pulumi.Input<string>[]>;
    seUpgradeErrors?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoHistorySegStatusSeUpgradeError>[]>;
    seUpgradeFaileds?: pulumi.Input<pulumi.Input<string>[]>;
    seUpgradeInProgresses?: pulumi.Input<pulumi.Input<string>[]>;
    seUpgradeNotStarteds?: pulumi.Input<pulumi.Input<string>[]>;
    seUpgradeSkipSuspendeds?: pulumi.Input<pulumi.Input<string>[]>;
    seUpgradeSuspendeds?: pulumi.Input<pulumi.Input<string>[]>;
    seWithNoVs?: pulumi.Input<pulumi.Input<string>[]>;
    seWithVsNotScaledouts?: pulumi.Input<pulumi.Input<string>[]>;
    seWithVsScaledouts?: pulumi.Input<pulumi.Input<string>[]>;
    startTime?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    thread?: pulumi.Input<string>;
    trafficStatus?: pulumi.Input<string>;
    vsErrors?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoHistorySegStatusVsError>[]>;
    vsMigrateInProgressReves?: pulumi.Input<pulumi.Input<string>[]>;
    vsScaleinInProgressReves?: pulumi.Input<pulumi.Input<string>[]>;
    vsScaleoutInProgressReves?: pulumi.Input<pulumi.Input<string>[]>;
    worker?: pulumi.Input<string>;
}

export interface UpgradestatusinfoHistorySegStatusSeUpgradeError {
    fromSeRef?: pulumi.Input<string>;
    numSe?: pulumi.Input<string>;
    numSeGroup?: pulumi.Input<string>;
    numVs?: pulumi.Input<string>;
    reasons?: pulumi.Input<pulumi.Input<string>[]>;
    seGroupHaMode?: pulumi.Input<string>;
    seGroupRef?: pulumi.Input<string>;
    seRef?: pulumi.Input<string>;
    subTasks?: pulumi.Input<pulumi.Input<string>[]>;
    task?: pulumi.Input<string>;
    toSeRef?: pulumi.Input<string>;
    trafficStatus?: pulumi.Input<string>;
    vsRef?: pulumi.Input<string>;
}

export interface UpgradestatusinfoHistorySegStatusVsError {
    eventTimestamps?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoHistorySegStatusVsErrorEventTimestamp>[]>;
    reasons?: pulumi.Input<pulumi.Input<string>[]>;
    seGroupHaMode?: pulumi.Input<string>;
    seGroupRef?: pulumi.Input<string>;
    seRef?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    trafficStatus?: pulumi.Input<string>;
    vipId?: pulumi.Input<string>;
    vsRef?: pulumi.Input<string>;
}

export interface UpgradestatusinfoHistorySegStatusVsErrorEventTimestamp {
    secs: pulumi.Input<string>;
    usecs: pulumi.Input<string>;
}

export interface UpgradestatusinfoHistoryState {
    lastChangedTimes?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoHistoryStateLastChangedTime>[]>;
    reason?: pulumi.Input<string>;
    rebooted?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}

export interface UpgradestatusinfoHistoryStateLastChangedTime {
    secs: pulumi.Input<string>;
    usecs: pulumi.Input<string>;
}

export interface UpgradestatusinfoHistoryUpgradeEvent {
    nodesEvents?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoHistoryUpgradeEventNodesEvent>[]>;
    subEvents?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoHistoryUpgradeEventSubEvent>[]>;
    task?: pulumi.Input<string>;
    taskName?: pulumi.Input<string>;
}

export interface UpgradestatusinfoHistoryUpgradeEventNodesEvent {
    duration?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    ips?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoHistoryUpgradeEventNodesEventIp>[]>;
    message?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    subTasks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface UpgradestatusinfoHistoryUpgradeEventNodesEventIp {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface UpgradestatusinfoHistoryUpgradeEventSubEvent {
    duration?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    ips?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoHistoryUpgradeEventSubEventIp>[]>;
    message?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    subTasks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface UpgradestatusinfoHistoryUpgradeEventSubEventIp {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface UpgradestatusinfoParam {
    imageRef?: pulumi.Input<string>;
    patchRef?: pulumi.Input<string>;
    seGroupOptions?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoParamSeGroupOption>[]>;
    seGroupResumeOptions?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoParamSeGroupResumeOption>[]>;
}

export interface UpgradestatusinfoParamSeGroupOption {
    actionOnError?: pulumi.Input<string>;
    disruptive?: pulumi.Input<string>;
}

export interface UpgradestatusinfoParamSeGroupResumeOption {
    actionOnError?: pulumi.Input<string>;
    disruptive?: pulumi.Input<string>;
    skipSuspended?: pulumi.Input<string>;
}

export interface UpgradestatusinfoPatchList {
    patchImagePath?: pulumi.Input<string>;
    patchImageRef?: pulumi.Input<string>;
    patchVersion?: pulumi.Input<string>;
}

export interface UpgradestatusinfoPreviousPatchList {
    patchImagePath?: pulumi.Input<string>;
    patchImageRef?: pulumi.Input<string>;
    patchVersion?: pulumi.Input<string>;
}

export interface UpgradestatusinfoSeUpgradeEvent {
    fromSeRef?: pulumi.Input<string>;
    numSe?: pulumi.Input<string>;
    numSeGroup?: pulumi.Input<string>;
    numVs?: pulumi.Input<string>;
    reasons?: pulumi.Input<pulumi.Input<string>[]>;
    seGroupHaMode?: pulumi.Input<string>;
    seGroupRef?: pulumi.Input<string>;
    seRef?: pulumi.Input<string>;
    subTasks?: pulumi.Input<pulumi.Input<string>[]>;
    task?: pulumi.Input<string>;
    toSeRef?: pulumi.Input<string>;
    trafficStatus?: pulumi.Input<string>;
    vsRef?: pulumi.Input<string>;
}

export interface UpgradestatusinfoSegParam {
    imageRef?: pulumi.Input<string>;
    patchRef?: pulumi.Input<string>;
    seGroupOptions?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoSegParamSeGroupOption>[]>;
    seGroupResumeOptions?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoSegParamSeGroupResumeOption>[]>;
}

export interface UpgradestatusinfoSegParamSeGroupOption {
    actionOnError?: pulumi.Input<string>;
    disruptive?: pulumi.Input<string>;
}

export interface UpgradestatusinfoSegParamSeGroupResumeOption {
    actionOnError?: pulumi.Input<string>;
    disruptive?: pulumi.Input<string>;
    skipSuspended?: pulumi.Input<string>;
}

export interface UpgradestatusinfoSegStatus {
    controllerVersion?: pulumi.Input<string>;
    disruptedVsReves?: pulumi.Input<pulumi.Input<string>[]>;
    duration?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    enqueueTime?: pulumi.Input<string>;
    haMode?: pulumi.Input<string>;
    inProgress?: pulumi.Input<string>;
    notes?: pulumi.Input<pulumi.Input<string>[]>;
    numSe?: pulumi.Input<string>;
    numSeWithNoVs?: pulumi.Input<string>;
    numSeWithVsNotScaledout?: pulumi.Input<string>;
    numSeWithVsScaledout?: pulumi.Input<string>;
    numVs?: pulumi.Input<string>;
    numVsDisrupted?: pulumi.Input<string>;
    progress?: pulumi.Input<string>;
    reasons?: pulumi.Input<pulumi.Input<string>[]>;
    requestTime?: pulumi.Input<string>;
    seAlreadyUpgradedAtStarts?: pulumi.Input<pulumi.Input<string>[]>;
    seDisconnectedAtStarts?: pulumi.Input<pulumi.Input<string>[]>;
    seGroupName?: pulumi.Input<string>;
    seGroupUuid?: pulumi.Input<string>;
    seIpMissingAtStarts?: pulumi.Input<pulumi.Input<string>[]>;
    sePoweredoffAtStarts?: pulumi.Input<pulumi.Input<string>[]>;
    seRebootInProgressRef?: pulumi.Input<string>;
    seUpgradeCompleteds?: pulumi.Input<pulumi.Input<string>[]>;
    seUpgradeErrors?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoSegStatusSeUpgradeError>[]>;
    seUpgradeFaileds?: pulumi.Input<pulumi.Input<string>[]>;
    seUpgradeInProgresses?: pulumi.Input<pulumi.Input<string>[]>;
    seUpgradeNotStarteds?: pulumi.Input<pulumi.Input<string>[]>;
    seUpgradeSkipSuspendeds?: pulumi.Input<pulumi.Input<string>[]>;
    seUpgradeSuspendeds?: pulumi.Input<pulumi.Input<string>[]>;
    seWithNoVs?: pulumi.Input<pulumi.Input<string>[]>;
    seWithVsNotScaledouts?: pulumi.Input<pulumi.Input<string>[]>;
    seWithVsScaledouts?: pulumi.Input<pulumi.Input<string>[]>;
    startTime?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    thread?: pulumi.Input<string>;
    trafficStatus?: pulumi.Input<string>;
    vsErrors?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoSegStatusVsError>[]>;
    vsMigrateInProgressReves?: pulumi.Input<pulumi.Input<string>[]>;
    vsScaleinInProgressReves?: pulumi.Input<pulumi.Input<string>[]>;
    vsScaleoutInProgressReves?: pulumi.Input<pulumi.Input<string>[]>;
    worker?: pulumi.Input<string>;
}

export interface UpgradestatusinfoSegStatusSeUpgradeError {
    fromSeRef?: pulumi.Input<string>;
    numSe?: pulumi.Input<string>;
    numSeGroup?: pulumi.Input<string>;
    numVs?: pulumi.Input<string>;
    reasons?: pulumi.Input<pulumi.Input<string>[]>;
    seGroupHaMode?: pulumi.Input<string>;
    seGroupRef?: pulumi.Input<string>;
    seRef?: pulumi.Input<string>;
    subTasks?: pulumi.Input<pulumi.Input<string>[]>;
    task?: pulumi.Input<string>;
    toSeRef?: pulumi.Input<string>;
    trafficStatus?: pulumi.Input<string>;
    vsRef?: pulumi.Input<string>;
}

export interface UpgradestatusinfoSegStatusVsError {
    eventTimestamps?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoSegStatusVsErrorEventTimestamp>[]>;
    reasons?: pulumi.Input<pulumi.Input<string>[]>;
    seGroupHaMode?: pulumi.Input<string>;
    seGroupRef?: pulumi.Input<string>;
    seRef?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    trafficStatus?: pulumi.Input<string>;
    vipId?: pulumi.Input<string>;
    vsRef?: pulumi.Input<string>;
}

export interface UpgradestatusinfoSegStatusVsErrorEventTimestamp {
    secs: pulumi.Input<string>;
    usecs: pulumi.Input<string>;
}

export interface UpgradestatusinfoState {
    lastChangedTimes?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoStateLastChangedTime>[]>;
    reason?: pulumi.Input<string>;
    rebooted?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}

export interface UpgradestatusinfoStateLastChangedTime {
    secs: pulumi.Input<string>;
    usecs: pulumi.Input<string>;
}

export interface UpgradestatusinfoUpgradeEvent {
    nodesEvents?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoUpgradeEventNodesEvent>[]>;
    subEvents?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoUpgradeEventSubEvent>[]>;
    task?: pulumi.Input<string>;
    taskName?: pulumi.Input<string>;
}

export interface UpgradestatusinfoUpgradeEventNodesEvent {
    duration?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    ips?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoUpgradeEventNodesEventIp>[]>;
    message?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    subTasks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface UpgradestatusinfoUpgradeEventNodesEventIp {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface UpgradestatusinfoUpgradeEventSubEvent {
    duration?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    ips?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoUpgradeEventSubEventIp>[]>;
    message?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    subTasks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface UpgradestatusinfoUpgradeEventSubEventIp {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface UpgradestatusinfoUpgradeReadiness {
    checks?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoUpgradeReadinessCheck>[]>;
    checksCompleted?: pulumi.Input<string>;
    duration?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    imageRef?: pulumi.Input<string>;
    patchImageRef?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    states?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoUpgradeReadinessState>[]>;
    totalChecks?: pulumi.Input<string>;
    upgradeOps?: pulumi.Input<string>;
}

export interface UpgradestatusinfoUpgradeReadinessCheck {
    checkCode?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    details?: pulumi.Input<pulumi.Input<string>[]>;
    duration?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    errorDetails?: pulumi.Input<pulumi.Input<string>[]>;
    startTime?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}

export interface UpgradestatusinfoUpgradeReadinessState {
    lastChangedTimes?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoUpgradeReadinessStateLastChangedTime>[]>;
    reason?: pulumi.Input<string>;
    rebooted?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}

export interface UpgradestatusinfoUpgradeReadinessStateLastChangedTime {
    secs: pulumi.Input<string>;
    usecs: pulumi.Input<string>;
}

export interface UpgradestatussummaryState {
    lastChangedTimes?: pulumi.Input<pulumi.Input<inputs.UpgradestatussummaryStateLastChangedTime>[]>;
    reason?: pulumi.Input<string>;
    rebooted?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}

export interface UpgradestatussummaryStateLastChangedTime {
    secs: pulumi.Input<string>;
    usecs: pulumi.Input<string>;
}

export interface UserAccess {
    allTenants?: pulumi.Input<string>;
    roleRef?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
}

export interface UseraccountprofileConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface VcenterserverConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface VcenterserverContentLib {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface VirtualserviceAnalyticsPolicy {
    allHeaders?: pulumi.Input<string>;
    clientInsights?: pulumi.Input<string>;
    clientInsightsSamplings?: pulumi.Input<pulumi.Input<inputs.VirtualserviceAnalyticsPolicyClientInsightsSampling>[]>;
    clientLogFilters?: pulumi.Input<pulumi.Input<inputs.VirtualserviceAnalyticsPolicyClientLogFilter>[]>;
    fullClientLogs?: pulumi.Input<pulumi.Input<inputs.VirtualserviceAnalyticsPolicyFullClientLog>[]>;
    learningLogPolicies?: pulumi.Input<pulumi.Input<inputs.VirtualserviceAnalyticsPolicyLearningLogPolicy>[]>;
    metricsRealtimeUpdates?: pulumi.Input<pulumi.Input<inputs.VirtualserviceAnalyticsPolicyMetricsRealtimeUpdate>[]>;
    significantLogThrottle?: pulumi.Input<string>;
    udfLogThrottle?: pulumi.Input<string>;
}

export interface VirtualserviceAnalyticsPolicyClientInsightsSampling {
    clientIps?: pulumi.Input<pulumi.Input<inputs.VirtualserviceAnalyticsPolicyClientInsightsSamplingClientIp>[]>;
    sampleUris?: pulumi.Input<pulumi.Input<inputs.VirtualserviceAnalyticsPolicyClientInsightsSamplingSampleUri>[]>;
    skipUris?: pulumi.Input<pulumi.Input<inputs.VirtualserviceAnalyticsPolicyClientInsightsSamplingSkipUri>[]>;
}

export interface VirtualserviceAnalyticsPolicyClientInsightsSamplingClientIp {
    addrs?: pulumi.Input<pulumi.Input<inputs.VirtualserviceAnalyticsPolicyClientInsightsSamplingClientIpAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.VirtualserviceAnalyticsPolicyClientInsightsSamplingClientIpPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.VirtualserviceAnalyticsPolicyClientInsightsSamplingClientIpRange>[]>;
}

export interface VirtualserviceAnalyticsPolicyClientInsightsSamplingClientIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceAnalyticsPolicyClientInsightsSamplingClientIpPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.VirtualserviceAnalyticsPolicyClientInsightsSamplingClientIpPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface VirtualserviceAnalyticsPolicyClientInsightsSamplingClientIpPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceAnalyticsPolicyClientInsightsSamplingClientIpRange {
    begins: pulumi.Input<pulumi.Input<inputs.VirtualserviceAnalyticsPolicyClientInsightsSamplingClientIpRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.VirtualserviceAnalyticsPolicyClientInsightsSamplingClientIpRangeEnd>[]>;
}

export interface VirtualserviceAnalyticsPolicyClientInsightsSamplingClientIpRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceAnalyticsPolicyClientInsightsSamplingClientIpRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceAnalyticsPolicyClientInsightsSamplingSampleUri {
    matchCriteria: pulumi.Input<string>;
    matchStrs?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VirtualserviceAnalyticsPolicyClientInsightsSamplingSkipUri {
    matchCriteria: pulumi.Input<string>;
    matchStrs?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VirtualserviceAnalyticsPolicyClientLogFilter {
    allHeaders?: pulumi.Input<string>;
    clientIps?: pulumi.Input<pulumi.Input<inputs.VirtualserviceAnalyticsPolicyClientLogFilterClientIp>[]>;
    duration?: pulumi.Input<string>;
    enabled: pulumi.Input<string>;
    index: pulumi.Input<string>;
    name: pulumi.Input<string>;
    uris?: pulumi.Input<pulumi.Input<inputs.VirtualserviceAnalyticsPolicyClientLogFilterUri>[]>;
}

export interface VirtualserviceAnalyticsPolicyClientLogFilterClientIp {
    addrs?: pulumi.Input<pulumi.Input<inputs.VirtualserviceAnalyticsPolicyClientLogFilterClientIpAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.VirtualserviceAnalyticsPolicyClientLogFilterClientIpPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.VirtualserviceAnalyticsPolicyClientLogFilterClientIpRange>[]>;
}

export interface VirtualserviceAnalyticsPolicyClientLogFilterClientIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceAnalyticsPolicyClientLogFilterClientIpPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.VirtualserviceAnalyticsPolicyClientLogFilterClientIpPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface VirtualserviceAnalyticsPolicyClientLogFilterClientIpPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceAnalyticsPolicyClientLogFilterClientIpRange {
    begins: pulumi.Input<pulumi.Input<inputs.VirtualserviceAnalyticsPolicyClientLogFilterClientIpRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.VirtualserviceAnalyticsPolicyClientLogFilterClientIpRangeEnd>[]>;
}

export interface VirtualserviceAnalyticsPolicyClientLogFilterClientIpRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceAnalyticsPolicyClientLogFilterClientIpRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceAnalyticsPolicyClientLogFilterUri {
    matchCriteria: pulumi.Input<string>;
    matchStrs?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VirtualserviceAnalyticsPolicyFullClientLog {
    duration?: pulumi.Input<string>;
    enabled: pulumi.Input<string>;
    throttle?: pulumi.Input<string>;
}

export interface VirtualserviceAnalyticsPolicyLearningLogPolicy {
    enabled?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
}

export interface VirtualserviceAnalyticsPolicyMetricsRealtimeUpdate {
    duration?: pulumi.Input<string>;
    enabled: pulumi.Input<string>;
}

export interface VirtualserviceConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface VirtualserviceConnectionsRateLimit {
    actions: pulumi.Input<pulumi.Input<inputs.VirtualserviceConnectionsRateLimitAction>[]>;
    explicitTracking?: pulumi.Input<string>;
    fineGrain?: pulumi.Input<string>;
    httpCookie?: pulumi.Input<string>;
    httpHeader?: pulumi.Input<string>;
    rateLimiters?: pulumi.Input<pulumi.Input<inputs.VirtualserviceConnectionsRateLimitRateLimiter>[]>;
}

export interface VirtualserviceConnectionsRateLimitAction {
    files?: pulumi.Input<pulumi.Input<inputs.VirtualserviceConnectionsRateLimitActionFile>[]>;
    redirects?: pulumi.Input<pulumi.Input<inputs.VirtualserviceConnectionsRateLimitActionRedirect>[]>;
    statusCode?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface VirtualserviceConnectionsRateLimitActionFile {
    contentType: pulumi.Input<string>;
    fileContent: pulumi.Input<string>;
    fileLength?: pulumi.Input<string>;
}

export interface VirtualserviceConnectionsRateLimitActionRedirect {
    addString?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.VirtualserviceConnectionsRateLimitActionRedirectHost>[]>;
    keepQuery?: pulumi.Input<string>;
    paths?: pulumi.Input<pulumi.Input<inputs.VirtualserviceConnectionsRateLimitActionRedirectPath>[]>;
    port?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    statusCode?: pulumi.Input<string>;
}

export interface VirtualserviceConnectionsRateLimitActionRedirectHost {
    tokens: pulumi.Input<pulumi.Input<inputs.VirtualserviceConnectionsRateLimitActionRedirectHostToken>[]>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceConnectionsRateLimitActionRedirectHostToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceConnectionsRateLimitActionRedirectPath {
    tokens: pulumi.Input<pulumi.Input<inputs.VirtualserviceConnectionsRateLimitActionRedirectPathToken>[]>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceConnectionsRateLimitActionRedirectPathToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceConnectionsRateLimitRateLimiter {
    burstSz?: pulumi.Input<string>;
    count?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
}

export interface VirtualserviceContentRewrite {
    rewritableContentRef?: pulumi.Input<string>;
    rspRewriteRules?: pulumi.Input<pulumi.Input<inputs.VirtualserviceContentRewriteRspRewriteRule>[]>;
}

export interface VirtualserviceContentRewriteRspRewriteRule {
    enable?: pulumi.Input<string>;
    index?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pairs?: pulumi.Input<pulumi.Input<inputs.VirtualserviceContentRewriteRspRewriteRulePair>[]>;
}

export interface VirtualserviceContentRewriteRspRewriteRulePair {
    replacementStrings?: pulumi.Input<pulumi.Input<inputs.VirtualserviceContentRewriteRspRewriteRulePairReplacementString>[]>;
    searchStrings: pulumi.Input<pulumi.Input<inputs.VirtualserviceContentRewriteRspRewriteRulePairSearchString>[]>;
}

export interface VirtualserviceContentRewriteRspRewriteRulePairReplacementString {
    type?: pulumi.Input<string>;
    val?: pulumi.Input<string>;
}

export interface VirtualserviceContentRewriteRspRewriteRulePairSearchString {
    type?: pulumi.Input<string>;
    val: pulumi.Input<string>;
}

export interface VirtualserviceDnsInfo {
    algorithm?: pulumi.Input<string>;
    cnames?: pulumi.Input<pulumi.Input<inputs.VirtualserviceDnsInfoCname>[]>;
    fqdn?: pulumi.Input<string>;
    metadata?: pulumi.Input<string>;
    numRecordsInResponse?: pulumi.Input<string>;
    ttl?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface VirtualserviceDnsInfoCname {
    cname: pulumi.Input<string>;
}

export interface VirtualserviceDnsPolicy {
    dnsPolicyRef: pulumi.Input<string>;
    index: pulumi.Input<string>;
}

export interface VirtualserviceHttpPolicy {
    httpPolicySetRef: pulumi.Input<string>;
    index: pulumi.Input<string>;
}

export interface VirtualserviceJwtConfig {
    audience: pulumi.Input<string>;
    jwtLocation?: pulumi.Input<string>;
    jwtName?: pulumi.Input<string>;
}

export interface VirtualserviceL4Policy {
    index: pulumi.Input<string>;
    l4PolicySetRef: pulumi.Input<string>;
}

export interface VirtualserviceLdapVsConfig {
    realm?: pulumi.Input<string>;
    seAuthLdapBindTimeout?: pulumi.Input<string>;
    seAuthLdapCacheSize?: pulumi.Input<string>;
    seAuthLdapConnectTimeout?: pulumi.Input<string>;
    seAuthLdapConnsPerServer?: pulumi.Input<string>;
    seAuthLdapReconnectTimeout?: pulumi.Input<string>;
    seAuthLdapRequestTimeout?: pulumi.Input<string>;
    seAuthLdapServersFailoverOnly?: pulumi.Input<string>;
}

export interface VirtualserviceMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VirtualserviceOauthVsConfig {
    cookieName?: pulumi.Input<string>;
    cookieTimeout?: pulumi.Input<string>;
    keys?: pulumi.Input<pulumi.Input<inputs.VirtualserviceOauthVsConfigKey>[]>;
    logoutUri?: pulumi.Input<string>;
    oauthSettings?: pulumi.Input<pulumi.Input<inputs.VirtualserviceOauthVsConfigOauthSetting>[]>;
    postLogoutRedirectUri?: pulumi.Input<string>;
    redirectUri?: pulumi.Input<string>;
}

export interface VirtualserviceOauthVsConfigKey {
    aesKey?: pulumi.Input<string>;
    hmacKey?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface VirtualserviceOauthVsConfigOauthSetting {
    appSettings?: pulumi.Input<pulumi.Input<inputs.VirtualserviceOauthVsConfigOauthSettingAppSetting>[]>;
    authProfileRef: pulumi.Input<string>;
    resourceServers?: pulumi.Input<pulumi.Input<inputs.VirtualserviceOauthVsConfigOauthSettingResourceServer>[]>;
}

export interface VirtualserviceOauthVsConfigOauthSettingAppSetting {
    clientId: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    oidcConfigs?: pulumi.Input<pulumi.Input<inputs.VirtualserviceOauthVsConfigOauthSettingAppSettingOidcConfig>[]>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VirtualserviceOauthVsConfigOauthSettingAppSettingOidcConfig {
    oidcEnable?: pulumi.Input<string>;
    profile?: pulumi.Input<string>;
    userinfo?: pulumi.Input<string>;
}

export interface VirtualserviceOauthVsConfigOauthSettingResourceServer {
    accessType?: pulumi.Input<string>;
    introspectionDataTimeout?: pulumi.Input<string>;
    jwtParams?: pulumi.Input<pulumi.Input<inputs.VirtualserviceOauthVsConfigOauthSettingResourceServerJwtParam>[]>;
    opaqueTokenParams?: pulumi.Input<pulumi.Input<inputs.VirtualserviceOauthVsConfigOauthSettingResourceServerOpaqueTokenParam>[]>;
}

export interface VirtualserviceOauthVsConfigOauthSettingResourceServerJwtParam {
    audience: pulumi.Input<string>;
}

export interface VirtualserviceOauthVsConfigOauthSettingResourceServerOpaqueTokenParam {
    serverId: pulumi.Input<string>;
    serverSecret: pulumi.Input<string>;
}

export interface VirtualservicePerformanceLimit {
    maxConcurrentConnections?: pulumi.Input<string>;
    maxThroughput?: pulumi.Input<string>;
}

export interface VirtualserviceRequestsRateLimit {
    actions: pulumi.Input<pulumi.Input<inputs.VirtualserviceRequestsRateLimitAction>[]>;
    explicitTracking?: pulumi.Input<string>;
    fineGrain?: pulumi.Input<string>;
    httpCookie?: pulumi.Input<string>;
    httpHeader?: pulumi.Input<string>;
    rateLimiters?: pulumi.Input<pulumi.Input<inputs.VirtualserviceRequestsRateLimitRateLimiter>[]>;
}

export interface VirtualserviceRequestsRateLimitAction {
    files?: pulumi.Input<pulumi.Input<inputs.VirtualserviceRequestsRateLimitActionFile>[]>;
    redirects?: pulumi.Input<pulumi.Input<inputs.VirtualserviceRequestsRateLimitActionRedirect>[]>;
    statusCode?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface VirtualserviceRequestsRateLimitActionFile {
    contentType: pulumi.Input<string>;
    fileContent: pulumi.Input<string>;
    fileLength?: pulumi.Input<string>;
}

export interface VirtualserviceRequestsRateLimitActionRedirect {
    addString?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.VirtualserviceRequestsRateLimitActionRedirectHost>[]>;
    keepQuery?: pulumi.Input<string>;
    paths?: pulumi.Input<pulumi.Input<inputs.VirtualserviceRequestsRateLimitActionRedirectPath>[]>;
    port?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    statusCode?: pulumi.Input<string>;
}

export interface VirtualserviceRequestsRateLimitActionRedirectHost {
    tokens: pulumi.Input<pulumi.Input<inputs.VirtualserviceRequestsRateLimitActionRedirectHostToken>[]>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceRequestsRateLimitActionRedirectHostToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceRequestsRateLimitActionRedirectPath {
    tokens: pulumi.Input<pulumi.Input<inputs.VirtualserviceRequestsRateLimitActionRedirectPathToken>[]>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceRequestsRateLimitActionRedirectPathToken {
    endIndex?: pulumi.Input<string>;
    startIndex?: pulumi.Input<string>;
    strValue?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceRequestsRateLimitRateLimiter {
    burstSz?: pulumi.Input<string>;
    count?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
}

export interface VirtualserviceSamlSpConfig {
    acsIndex?: pulumi.Input<string>;
    authnReqAcsType?: pulumi.Input<string>;
    cookieName?: pulumi.Input<string>;
    cookieTimeout?: pulumi.Input<string>;
    entityId: pulumi.Input<string>;
    keys?: pulumi.Input<pulumi.Input<inputs.VirtualserviceSamlSpConfigKey>[]>;
    signingSslKeyAndCertificateRef?: pulumi.Input<string>;
    singleSignonUrl: pulumi.Input<string>;
    spMetadata?: pulumi.Input<string>;
    useIdpSessionTimeout?: pulumi.Input<string>;
}

export interface VirtualserviceSamlSpConfigKey {
    aesKey?: pulumi.Input<string>;
    hmacKey?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface VirtualserviceService {
    enableHttp2?: pulumi.Input<string>;
    enableSsl?: pulumi.Input<string>;
    horizonInternalPorts?: pulumi.Input<string>;
    isActiveFtpDataPort?: pulumi.Input<string>;
    overrideApplicationProfileRef?: pulumi.Input<string>;
    overrideNetworkProfileRef?: pulumi.Input<string>;
    port: pulumi.Input<string>;
    portRangeEnd?: pulumi.Input<string>;
}

export interface VirtualserviceServicePoolSelect {
    servicePoolGroupRef?: pulumi.Input<string>;
    servicePoolRef?: pulumi.Input<string>;
    servicePort: pulumi.Input<string>;
    servicePortRangeEnd?: pulumi.Input<string>;
    serviceProtocol?: pulumi.Input<string>;
}

export interface VirtualserviceSidebandProfile {
    ips?: pulumi.Input<pulumi.Input<inputs.VirtualserviceSidebandProfileIp>[]>;
    sidebandMaxRequestBodySize?: pulumi.Input<string>;
}

export interface VirtualserviceSidebandProfileIp {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceSnatIp {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceSnatIp6Address {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceSslProfileSelector {
    clientIpLists: pulumi.Input<pulumi.Input<inputs.VirtualserviceSslProfileSelectorClientIpList>[]>;
    sslProfileRef: pulumi.Input<string>;
}

export interface VirtualserviceSslProfileSelectorClientIpList {
    addrs?: pulumi.Input<pulumi.Input<inputs.VirtualserviceSslProfileSelectorClientIpListAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.VirtualserviceSslProfileSelectorClientIpListPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.VirtualserviceSslProfileSelectorClientIpListRange>[]>;
}

export interface VirtualserviceSslProfileSelectorClientIpListAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceSslProfileSelectorClientIpListPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.VirtualserviceSslProfileSelectorClientIpListPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface VirtualserviceSslProfileSelectorClientIpListPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceSslProfileSelectorClientIpListRange {
    begins: pulumi.Input<pulumi.Input<inputs.VirtualserviceSslProfileSelectorClientIpListRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.VirtualserviceSslProfileSelectorClientIpListRangeEnd>[]>;
}

export interface VirtualserviceSslProfileSelectorClientIpListRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceSslProfileSelectorClientIpListRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceStaticDnsRecord {
    algorithm?: pulumi.Input<string>;
    cnames?: pulumi.Input<pulumi.Input<inputs.VirtualserviceStaticDnsRecordCname>[]>;
    delegated?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    fqdns: pulumi.Input<pulumi.Input<string>[]>;
    ip6Addresses?: pulumi.Input<pulumi.Input<inputs.VirtualserviceStaticDnsRecordIp6Address>[]>;
    ipAddresses?: pulumi.Input<pulumi.Input<inputs.VirtualserviceStaticDnsRecordIpAddress>[]>;
    metadata?: pulumi.Input<string>;
    mxRecords?: pulumi.Input<pulumi.Input<inputs.VirtualserviceStaticDnsRecordMxRecord>[]>;
    ns?: pulumi.Input<pulumi.Input<inputs.VirtualserviceStaticDnsRecordN>[]>;
    numRecordsInResponse?: pulumi.Input<string>;
    serviceLocators?: pulumi.Input<pulumi.Input<inputs.VirtualserviceStaticDnsRecordServiceLocator>[]>;
    ttl?: pulumi.Input<string>;
    txtRecords?: pulumi.Input<pulumi.Input<inputs.VirtualserviceStaticDnsRecordTxtRecord>[]>;
    type: pulumi.Input<string>;
    wildcardMatch?: pulumi.Input<string>;
}

export interface VirtualserviceStaticDnsRecordCname {
    cname: pulumi.Input<string>;
}

export interface VirtualserviceStaticDnsRecordIp6Address {
    ip6Addresses: pulumi.Input<pulumi.Input<inputs.VirtualserviceStaticDnsRecordIp6AddressIp6Address>[]>;
}

export interface VirtualserviceStaticDnsRecordIp6AddressIp6Address {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceStaticDnsRecordIpAddress {
    ipAddresses: pulumi.Input<pulumi.Input<inputs.VirtualserviceStaticDnsRecordIpAddressIpAddress>[]>;
}

export interface VirtualserviceStaticDnsRecordIpAddressIpAddress {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceStaticDnsRecordMxRecord {
    host: pulumi.Input<string>;
    priority: pulumi.Input<string>;
}

export interface VirtualserviceStaticDnsRecordN {
    ip6Addresses?: pulumi.Input<pulumi.Input<inputs.VirtualserviceStaticDnsRecordNIp6Address>[]>;
    ipAddresses?: pulumi.Input<pulumi.Input<inputs.VirtualserviceStaticDnsRecordNIpAddress>[]>;
    nsname: pulumi.Input<string>;
}

export interface VirtualserviceStaticDnsRecordNIp6Address {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceStaticDnsRecordNIpAddress {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceStaticDnsRecordServiceLocator {
    port: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
    weight?: pulumi.Input<string>;
}

export interface VirtualserviceStaticDnsRecordTxtRecord {
    textStr: pulumi.Input<string>;
}

export interface VirtualserviceTopologyPolicy {
    dnsPolicyRef: pulumi.Input<string>;
    index: pulumi.Input<string>;
}

export interface VirtualserviceVhMatch {
    host: pulumi.Input<string>;
    rules: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRule>[]>;
}

export interface VirtualserviceVhMatchRule {
    matches: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatch>[]>;
    name: pulumi.Input<string>;
}

export interface VirtualserviceVhMatchRuleMatch {
    botDetectionResults?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatchBotDetectionResult>[]>;
    clientIps?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatchClientIp>[]>;
    cookies?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatchCookie>[]>;
    geoMatches?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatchGeoMatch>[]>;
    hdrs?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatchHdr>[]>;
    hostHdrs?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatchHostHdr>[]>;
    ipReputationTypes?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatchIpReputationType>[]>;
    methods?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatchMethod>[]>;
    paths?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatchPath>[]>;
    protocols?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatchProtocol>[]>;
    queries?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatchQuery>[]>;
    sourceIps?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatchSourceIp>[]>;
    tlsFingerprintMatches?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatchTlsFingerprintMatch>[]>;
    versions?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatchVersion>[]>;
    vsPorts?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatchVsPort>[]>;
}

export interface VirtualserviceVhMatchRuleMatchBotDetectionResult {
    classifications?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatchBotDetectionResultClassification>[]>;
    matchOperation: pulumi.Input<string>;
}

export interface VirtualserviceVhMatchRuleMatchBotDetectionResultClassification {
    type: pulumi.Input<string>;
    userDefinedType?: pulumi.Input<string>;
}

export interface VirtualserviceVhMatchRuleMatchClientIp {
    addrs?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatchClientIpAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatchClientIpPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatchClientIpRange>[]>;
}

export interface VirtualserviceVhMatchRuleMatchClientIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceVhMatchRuleMatchClientIpPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatchClientIpPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface VirtualserviceVhMatchRuleMatchClientIpPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceVhMatchRuleMatchClientIpRange {
    begins: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatchClientIpRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatchClientIpRangeEnd>[]>;
}

export interface VirtualserviceVhMatchRuleMatchClientIpRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceVhMatchRuleMatchClientIpRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceVhMatchRuleMatchCookie {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    name: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface VirtualserviceVhMatchRuleMatchGeoMatch {
    attribute: pulumi.Input<string>;
    matchOperation: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VirtualserviceVhMatchRuleMatchHdr {
    hdr: pulumi.Input<string>;
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VirtualserviceVhMatchRuleMatchHostHdr {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VirtualserviceVhMatchRuleMatchIpReputationType {
    matchOperation: pulumi.Input<string>;
    reputationTypes: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VirtualserviceVhMatchRuleMatchMethod {
    matchCriteria: pulumi.Input<string>;
    methods: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VirtualserviceVhMatchRuleMatchPath {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    matchDecodedString?: pulumi.Input<string>;
    matchStrs?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VirtualserviceVhMatchRuleMatchProtocol {
    matchCriteria: pulumi.Input<string>;
    protocols: pulumi.Input<string>;
}

export interface VirtualserviceVhMatchRuleMatchQuery {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    matchDecodedString?: pulumi.Input<string>;
    matchStrs?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VirtualserviceVhMatchRuleMatchSourceIp {
    addrs?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatchSourceIpAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatchSourceIpPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatchSourceIpRange>[]>;
}

export interface VirtualserviceVhMatchRuleMatchSourceIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceVhMatchRuleMatchSourceIpPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatchSourceIpPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface VirtualserviceVhMatchRuleMatchSourceIpPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceVhMatchRuleMatchSourceIpRange {
    begins: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatchSourceIpRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.VirtualserviceVhMatchRuleMatchSourceIpRangeEnd>[]>;
}

export interface VirtualserviceVhMatchRuleMatchSourceIpRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceVhMatchRuleMatchSourceIpRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceVhMatchRuleMatchTlsFingerprintMatch {
    fingerprints?: pulumi.Input<pulumi.Input<string>[]>;
    matchOperation: pulumi.Input<string>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VirtualserviceVhMatchRuleMatchVersion {
    matchCriteria: pulumi.Input<string>;
    versions: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VirtualserviceVhMatchRuleMatchVsPort {
    matchCriteria: pulumi.Input<string>;
    ports: pulumi.Input<pulumi.Input<number>[]>;
}

export interface VirtualserviceVip {
    autoAllocateFloatingIp?: pulumi.Input<string>;
    autoAllocateIp?: pulumi.Input<string>;
    autoAllocateIpType?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    aviAllocatedFip?: pulumi.Input<string>;
    aviAllocatedVip?: pulumi.Input<string>;
    discoveredNetworks?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVipDiscoveredNetwork>[]>;
    enabled?: pulumi.Input<string>;
    floatingIp6s?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVipFloatingIp6>[]>;
    floatingIps?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVipFloatingIp>[]>;
    floatingSubnet6Uuid?: pulumi.Input<string>;
    floatingSubnetUuid?: pulumi.Input<string>;
    ip6Addresses?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVipIp6Address>[]>;
    ipAddresses?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVipIpAddress>[]>;
    ipamNetworkSubnets?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVipIpamNetworkSubnet>[]>;
    networkRef?: pulumi.Input<string>;
    placementNetworks?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVipPlacementNetwork>[]>;
    portUuid?: pulumi.Input<string>;
    prefixLength?: pulumi.Input<string>;
    subnet6Uuid?: pulumi.Input<string>;
    subnet6s?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVipSubnet6>[]>;
    subnetUuid?: pulumi.Input<string>;
    subnets?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVipSubnet>[]>;
    vipId: pulumi.Input<string>;
}

export interface VirtualserviceVipDiscoveredNetwork {
    networkRef: pulumi.Input<string>;
    subnet6s?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVipDiscoveredNetworkSubnet6>[]>;
    subnets?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVipDiscoveredNetworkSubnet>[]>;
}

export interface VirtualserviceVipDiscoveredNetworkSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.VirtualserviceVipDiscoveredNetworkSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface VirtualserviceVipDiscoveredNetworkSubnet6 {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.VirtualserviceVipDiscoveredNetworkSubnet6IpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface VirtualserviceVipDiscoveredNetworkSubnet6IpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceVipDiscoveredNetworkSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceVipFloatingIp {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceVipFloatingIp6 {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceVipIp6Address {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceVipIpAddress {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceVipIpamNetworkSubnet {
    networkRef?: pulumi.Input<string>;
    subnet6Uuid?: pulumi.Input<string>;
    subnet6s?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVipIpamNetworkSubnetSubnet6>[]>;
    subnetUuid?: pulumi.Input<string>;
    subnets?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVipIpamNetworkSubnetSubnet>[]>;
}

export interface VirtualserviceVipIpamNetworkSubnetSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.VirtualserviceVipIpamNetworkSubnetSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface VirtualserviceVipIpamNetworkSubnetSubnet6 {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.VirtualserviceVipIpamNetworkSubnetSubnet6IpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface VirtualserviceVipIpamNetworkSubnetSubnet6IpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceVipIpamNetworkSubnetSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceVipPlacementNetwork {
    networkRef?: pulumi.Input<string>;
    subnet6s?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVipPlacementNetworkSubnet6>[]>;
    subnets?: pulumi.Input<pulumi.Input<inputs.VirtualserviceVipPlacementNetworkSubnet>[]>;
}

export interface VirtualserviceVipPlacementNetworkSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.VirtualserviceVipPlacementNetworkSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface VirtualserviceVipPlacementNetworkSubnet6 {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.VirtualserviceVipPlacementNetworkSubnet6IpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface VirtualserviceVipPlacementNetworkSubnet6IpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceVipPlacementNetworkSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceVipSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.VirtualserviceVipSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface VirtualserviceVipSubnet6 {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.VirtualserviceVipSubnet6IpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface VirtualserviceVipSubnet6IpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceVipSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualserviceVsDatascript {
    index: pulumi.Input<string>;
    vsDatascriptSetRef: pulumi.Input<string>;
}

export interface VrfcontextAttr {
    key: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface VrfcontextBfdProfile {
    minrx?: pulumi.Input<string>;
    mintx?: pulumi.Input<string>;
    multi?: pulumi.Input<string>;
}

export interface VrfcontextBgpProfile {
    communities?: pulumi.Input<pulumi.Input<string>[]>;
    holdTime?: pulumi.Input<string>;
    ibgp: pulumi.Input<string>;
    ipCommunities?: pulumi.Input<pulumi.Input<inputs.VrfcontextBgpProfileIpCommunity>[]>;
    keepaliveInterval?: pulumi.Input<string>;
    localAs: pulumi.Input<string>;
    localPreference?: pulumi.Input<string>;
    numAsPathPrepend?: pulumi.Input<string>;
    peers?: pulumi.Input<pulumi.Input<inputs.VrfcontextBgpProfilePeer>[]>;
    routingOptions?: pulumi.Input<pulumi.Input<inputs.VrfcontextBgpProfileRoutingOption>[]>;
    sendCommunity?: pulumi.Input<string>;
    shutdown?: pulumi.Input<string>;
}

export interface VrfcontextBgpProfileIpCommunity {
    communities: pulumi.Input<pulumi.Input<string>[]>;
    ipBegins: pulumi.Input<pulumi.Input<inputs.VrfcontextBgpProfileIpCommunityIpBegin>[]>;
    ipEnds?: pulumi.Input<pulumi.Input<inputs.VrfcontextBgpProfileIpCommunityIpEnd>[]>;
}

export interface VrfcontextBgpProfileIpCommunityIpBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VrfcontextBgpProfileIpCommunityIpEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VrfcontextBgpProfilePeer {
    advertiseSnatIp?: pulumi.Input<string>;
    advertiseVip?: pulumi.Input<string>;
    advertisementInterval?: pulumi.Input<string>;
    bfd?: pulumi.Input<string>;
    connectTimer?: pulumi.Input<string>;
    ebgpMultihop?: pulumi.Input<string>;
    holdTime?: pulumi.Input<string>;
    ibgpLocalAsOverride?: pulumi.Input<string>;
    keepaliveInterval?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    localAs?: pulumi.Input<string>;
    md5Secret?: pulumi.Input<string>;
    networkRef?: pulumi.Input<string>;
    peerIp6s?: pulumi.Input<pulumi.Input<inputs.VrfcontextBgpProfilePeerPeerIp6>[]>;
    peerIps?: pulumi.Input<pulumi.Input<inputs.VrfcontextBgpProfilePeerPeerIp>[]>;
    remoteAs?: pulumi.Input<string>;
    shutdown?: pulumi.Input<string>;
    subnet6s?: pulumi.Input<pulumi.Input<inputs.VrfcontextBgpProfilePeerSubnet6>[]>;
    subnets?: pulumi.Input<pulumi.Input<inputs.VrfcontextBgpProfilePeerSubnet>[]>;
}

export interface VrfcontextBgpProfilePeerPeerIp {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VrfcontextBgpProfilePeerPeerIp6 {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VrfcontextBgpProfilePeerSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.VrfcontextBgpProfilePeerSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface VrfcontextBgpProfilePeerSubnet6 {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.VrfcontextBgpProfilePeerSubnet6IpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface VrfcontextBgpProfilePeerSubnet6IpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VrfcontextBgpProfilePeerSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VrfcontextBgpProfileRoutingOption {
    advertiseDefaultRoute?: pulumi.Input<string>;
    advertiseLearnedRoutes?: pulumi.Input<string>;
    label: pulumi.Input<string>;
    learnOnlyDefaultRoute?: pulumi.Input<string>;
    learnRoutes?: pulumi.Input<string>;
    maxLearnLimit?: pulumi.Input<string>;
}

export interface VrfcontextConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface VrfcontextDebugvrfcontext {
    commandBufferInterval?: pulumi.Input<string>;
    commandBufferSize?: pulumi.Input<string>;
    flags?: pulumi.Input<pulumi.Input<inputs.VrfcontextDebugvrfcontextFlag>[]>;
}

export interface VrfcontextDebugvrfcontextFlag {
    flag: pulumi.Input<string>;
}

export interface VrfcontextGatewayMon {
    gatewayIps: pulumi.Input<pulumi.Input<inputs.VrfcontextGatewayMonGatewayIp>[]>;
    gatewayMonitorFailThreshold?: pulumi.Input<string>;
    gatewayMonitorInterval?: pulumi.Input<string>;
    gatewayMonitorSuccessThreshold?: pulumi.Input<string>;
    subnets?: pulumi.Input<pulumi.Input<inputs.VrfcontextGatewayMonSubnet>[]>;
}

export interface VrfcontextGatewayMonGatewayIp {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VrfcontextGatewayMonSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.VrfcontextGatewayMonSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface VrfcontextGatewayMonSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VrfcontextInternalGatewayMonitor {
    disableGatewayMonitor?: pulumi.Input<string>;
    gatewayMonitorFailureThreshold?: pulumi.Input<string>;
    gatewayMonitorInterval?: pulumi.Input<string>;
    gatewayMonitorSuccessThreshold?: pulumi.Input<string>;
}

export interface VrfcontextMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VrfcontextStaticRoute {
    disableGatewayMonitor?: pulumi.Input<string>;
    ifName?: pulumi.Input<string>;
    labels?: pulumi.Input<pulumi.Input<inputs.VrfcontextStaticRouteLabel>[]>;
    nextHops: pulumi.Input<pulumi.Input<inputs.VrfcontextStaticRouteNextHop>[]>;
    prefixes: pulumi.Input<pulumi.Input<inputs.VrfcontextStaticRoutePrefix>[]>;
    routeId: pulumi.Input<string>;
}

export interface VrfcontextStaticRouteLabel {
    key: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface VrfcontextStaticRouteNextHop {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VrfcontextStaticRoutePrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.VrfcontextStaticRoutePrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface VrfcontextStaticRoutePrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VsdatascriptsetConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface VsdatascriptsetDatascript {
    evt: pulumi.Input<string>;
    script: pulumi.Input<string>;
}

export interface VsdatascriptsetMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VsdatascriptsetRateLimiter {
    burstSz?: pulumi.Input<string>;
    count?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
}

export interface VsgsConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface VsvipConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface VsvipDnsInfo {
    algorithm?: pulumi.Input<string>;
    cnames?: pulumi.Input<pulumi.Input<inputs.VsvipDnsInfoCname>[]>;
    fqdn?: pulumi.Input<string>;
    metadata?: pulumi.Input<string>;
    numRecordsInResponse?: pulumi.Input<string>;
    ttl?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface VsvipDnsInfoCname {
    cname: pulumi.Input<string>;
}

export interface VsvipIpamSelector {
    labels: pulumi.Input<pulumi.Input<inputs.VsvipIpamSelectorLabel>[]>;
    type: pulumi.Input<string>;
}

export interface VsvipIpamSelectorLabel {
    key: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface VsvipMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VsvipVip {
    autoAllocateFloatingIp?: pulumi.Input<string>;
    autoAllocateIp?: pulumi.Input<string>;
    autoAllocateIpType?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    aviAllocatedFip?: pulumi.Input<string>;
    aviAllocatedVip?: pulumi.Input<string>;
    discoveredNetworks?: pulumi.Input<pulumi.Input<inputs.VsvipVipDiscoveredNetwork>[]>;
    enabled?: pulumi.Input<string>;
    floatingIp6s?: pulumi.Input<pulumi.Input<inputs.VsvipVipFloatingIp6>[]>;
    floatingIps?: pulumi.Input<pulumi.Input<inputs.VsvipVipFloatingIp>[]>;
    floatingSubnet6Uuid?: pulumi.Input<string>;
    floatingSubnetUuid?: pulumi.Input<string>;
    ip6Addresses?: pulumi.Input<pulumi.Input<inputs.VsvipVipIp6Address>[]>;
    ipAddresses?: pulumi.Input<pulumi.Input<inputs.VsvipVipIpAddress>[]>;
    ipamNetworkSubnets?: pulumi.Input<pulumi.Input<inputs.VsvipVipIpamNetworkSubnet>[]>;
    networkRef?: pulumi.Input<string>;
    placementNetworks?: pulumi.Input<pulumi.Input<inputs.VsvipVipPlacementNetwork>[]>;
    portUuid?: pulumi.Input<string>;
    prefixLength?: pulumi.Input<string>;
    subnet6Uuid?: pulumi.Input<string>;
    subnet6s?: pulumi.Input<pulumi.Input<inputs.VsvipVipSubnet6>[]>;
    subnetUuid?: pulumi.Input<string>;
    subnets?: pulumi.Input<pulumi.Input<inputs.VsvipVipSubnet>[]>;
    vipId: pulumi.Input<string>;
}

export interface VsvipVipDiscoveredNetwork {
    networkRef: pulumi.Input<string>;
    subnet6s?: pulumi.Input<pulumi.Input<inputs.VsvipVipDiscoveredNetworkSubnet6>[]>;
    subnets?: pulumi.Input<pulumi.Input<inputs.VsvipVipDiscoveredNetworkSubnet>[]>;
}

export interface VsvipVipDiscoveredNetworkSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.VsvipVipDiscoveredNetworkSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface VsvipVipDiscoveredNetworkSubnet6 {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.VsvipVipDiscoveredNetworkSubnet6IpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface VsvipVipDiscoveredNetworkSubnet6IpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VsvipVipDiscoveredNetworkSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VsvipVipFloatingIp {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VsvipVipFloatingIp6 {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VsvipVipIp6Address {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VsvipVipIpAddress {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VsvipVipIpamNetworkSubnet {
    networkRef?: pulumi.Input<string>;
    subnet6Uuid?: pulumi.Input<string>;
    subnet6s?: pulumi.Input<pulumi.Input<inputs.VsvipVipIpamNetworkSubnetSubnet6>[]>;
    subnetUuid?: pulumi.Input<string>;
    subnets?: pulumi.Input<pulumi.Input<inputs.VsvipVipIpamNetworkSubnetSubnet>[]>;
}

export interface VsvipVipIpamNetworkSubnetSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.VsvipVipIpamNetworkSubnetSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface VsvipVipIpamNetworkSubnetSubnet6 {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.VsvipVipIpamNetworkSubnetSubnet6IpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface VsvipVipIpamNetworkSubnetSubnet6IpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VsvipVipIpamNetworkSubnetSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VsvipVipPlacementNetwork {
    networkRef?: pulumi.Input<string>;
    subnet6s?: pulumi.Input<pulumi.Input<inputs.VsvipVipPlacementNetworkSubnet6>[]>;
    subnets?: pulumi.Input<pulumi.Input<inputs.VsvipVipPlacementNetworkSubnet>[]>;
}

export interface VsvipVipPlacementNetworkSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.VsvipVipPlacementNetworkSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface VsvipVipPlacementNetworkSubnet6 {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.VsvipVipPlacementNetworkSubnet6IpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface VsvipVipPlacementNetworkSubnet6IpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VsvipVipPlacementNetworkSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VsvipVipSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.VsvipVipSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface VsvipVipSubnet6 {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.VsvipVipSubnet6IpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface VsvipVipSubnet6IpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VsvipVipSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface WafapplicationsignatureproviderAvailableApplication {
    application?: pulumi.Input<string>;
    lastChangedRulesetVersion?: pulumi.Input<string>;
    numberOfRules?: pulumi.Input<string>;
}

export interface WafapplicationsignatureproviderConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface WafapplicationsignatureproviderServiceStatus {
    error?: pulumi.Input<string>;
    lastSuccessfulUpdateChecks?: pulumi.Input<pulumi.Input<inputs.WafapplicationsignatureproviderServiceStatusLastSuccessfulUpdateCheck>[]>;
    upstreamSyncTimestamps?: pulumi.Input<pulumi.Input<inputs.WafapplicationsignatureproviderServiceStatusUpstreamSyncTimestamp>[]>;
}

export interface WafapplicationsignatureproviderServiceStatusLastSuccessfulUpdateCheck {
    secs: pulumi.Input<string>;
    usecs: pulumi.Input<string>;
}

export interface WafapplicationsignatureproviderServiceStatusUpstreamSyncTimestamp {
    secs: pulumi.Input<string>;
    usecs: pulumi.Input<string>;
}

export interface WafapplicationsignatureproviderSignature {
    enable?: pulumi.Input<string>;
    excludeLists?: pulumi.Input<pulumi.Input<inputs.WafapplicationsignatureproviderSignatureExcludeList>[]>;
    index: pulumi.Input<string>;
    isSensitive?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    paranoiaLevel?: pulumi.Input<string>;
    phase?: pulumi.Input<string>;
    rule: pulumi.Input<string>;
    ruleId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WafapplicationsignatureproviderSignatureExcludeList {
    clientSubnets?: pulumi.Input<pulumi.Input<inputs.WafapplicationsignatureproviderSignatureExcludeListClientSubnet>[]>;
    description?: pulumi.Input<string>;
    matchElement?: pulumi.Input<string>;
    matchElementCriterias?: pulumi.Input<pulumi.Input<inputs.WafapplicationsignatureproviderSignatureExcludeListMatchElementCriteria>[]>;
    uriMatchCriterias?: pulumi.Input<pulumi.Input<inputs.WafapplicationsignatureproviderSignatureExcludeListUriMatchCriteria>[]>;
    uriPath?: pulumi.Input<string>;
}

export interface WafapplicationsignatureproviderSignatureExcludeListClientSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.WafapplicationsignatureproviderSignatureExcludeListClientSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface WafapplicationsignatureproviderSignatureExcludeListClientSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface WafapplicationsignatureproviderSignatureExcludeListMatchElementCriteria {
    matchCase?: pulumi.Input<string>;
    matchOp?: pulumi.Input<string>;
}

export interface WafapplicationsignatureproviderSignatureExcludeListUriMatchCriteria {
    matchCase?: pulumi.Input<string>;
    matchOp?: pulumi.Input<string>;
}

export interface WafcrsConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface WafcrsFile {
    data: pulumi.Input<string>;
    name: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface WafcrsGroup {
    enable?: pulumi.Input<string>;
    excludeLists?: pulumi.Input<pulumi.Input<inputs.WafcrsGroupExcludeList>[]>;
    index: pulumi.Input<string>;
    name: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.WafcrsGroupRule>[]>;
}

export interface WafcrsGroupExcludeList {
    clientSubnets?: pulumi.Input<pulumi.Input<inputs.WafcrsGroupExcludeListClientSubnet>[]>;
    description?: pulumi.Input<string>;
    matchElement?: pulumi.Input<string>;
    matchElementCriterias?: pulumi.Input<pulumi.Input<inputs.WafcrsGroupExcludeListMatchElementCriteria>[]>;
    uriMatchCriterias?: pulumi.Input<pulumi.Input<inputs.WafcrsGroupExcludeListUriMatchCriteria>[]>;
    uriPath?: pulumi.Input<string>;
}

export interface WafcrsGroupExcludeListClientSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.WafcrsGroupExcludeListClientSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface WafcrsGroupExcludeListClientSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface WafcrsGroupExcludeListMatchElementCriteria {
    matchCase?: pulumi.Input<string>;
    matchOp?: pulumi.Input<string>;
}

export interface WafcrsGroupExcludeListUriMatchCriteria {
    matchCase?: pulumi.Input<string>;
    matchOp?: pulumi.Input<string>;
}

export interface WafcrsGroupRule {
    enable?: pulumi.Input<string>;
    excludeLists?: pulumi.Input<pulumi.Input<inputs.WafcrsGroupRuleExcludeList>[]>;
    index: pulumi.Input<string>;
    isSensitive?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    paranoiaLevel?: pulumi.Input<string>;
    phase?: pulumi.Input<string>;
    rule: pulumi.Input<string>;
    ruleId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WafcrsGroupRuleExcludeList {
    clientSubnets?: pulumi.Input<pulumi.Input<inputs.WafcrsGroupRuleExcludeListClientSubnet>[]>;
    description?: pulumi.Input<string>;
    matchElement?: pulumi.Input<string>;
    matchElementCriterias?: pulumi.Input<pulumi.Input<inputs.WafcrsGroupRuleExcludeListMatchElementCriteria>[]>;
    uriMatchCriterias?: pulumi.Input<pulumi.Input<inputs.WafcrsGroupRuleExcludeListUriMatchCriteria>[]>;
    uriPath?: pulumi.Input<string>;
}

export interface WafcrsGroupRuleExcludeListClientSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.WafcrsGroupRuleExcludeListClientSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface WafcrsGroupRuleExcludeListClientSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface WafcrsGroupRuleExcludeListMatchElementCriteria {
    matchCase?: pulumi.Input<string>;
    matchOp?: pulumi.Input<string>;
}

export interface WafcrsGroupRuleExcludeListUriMatchCriteria {
    matchCase?: pulumi.Input<string>;
    matchOp?: pulumi.Input<string>;
}

export interface WafcrsMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WafpolicyAllowlist {
    rules?: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRule>[]>;
}

export interface WafpolicyAllowlistRule {
    actions: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    enable?: pulumi.Input<string>;
    index: pulumi.Input<string>;
    matches: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatch>[]>;
    name: pulumi.Input<string>;
    samplingPercent?: pulumi.Input<string>;
}

export interface WafpolicyAllowlistRuleMatch {
    botDetectionResults?: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatchBotDetectionResult>[]>;
    clientIps?: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatchClientIp>[]>;
    cookies?: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatchCookie>[]>;
    geoMatches?: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatchGeoMatch>[]>;
    hdrs?: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatchHdr>[]>;
    hostHdrs?: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatchHostHdr>[]>;
    ipReputationTypes?: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatchIpReputationType>[]>;
    methods?: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatchMethod>[]>;
    paths?: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatchPath>[]>;
    protocols?: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatchProtocol>[]>;
    queries?: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatchQuery>[]>;
    sourceIps?: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatchSourceIp>[]>;
    tlsFingerprintMatches?: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatchTlsFingerprintMatch>[]>;
    versions?: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatchVersion>[]>;
    vsPorts?: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatchVsPort>[]>;
}

export interface WafpolicyAllowlistRuleMatchBotDetectionResult {
    classifications?: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatchBotDetectionResultClassification>[]>;
    matchOperation: pulumi.Input<string>;
}

export interface WafpolicyAllowlistRuleMatchBotDetectionResultClassification {
    type: pulumi.Input<string>;
    userDefinedType?: pulumi.Input<string>;
}

export interface WafpolicyAllowlistRuleMatchClientIp {
    addrs?: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatchClientIpAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatchClientIpPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatchClientIpRange>[]>;
}

export interface WafpolicyAllowlistRuleMatchClientIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface WafpolicyAllowlistRuleMatchClientIpPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatchClientIpPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface WafpolicyAllowlistRuleMatchClientIpPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface WafpolicyAllowlistRuleMatchClientIpRange {
    begins: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatchClientIpRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatchClientIpRangeEnd>[]>;
}

export interface WafpolicyAllowlistRuleMatchClientIpRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface WafpolicyAllowlistRuleMatchClientIpRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface WafpolicyAllowlistRuleMatchCookie {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    name: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface WafpolicyAllowlistRuleMatchGeoMatch {
    attribute: pulumi.Input<string>;
    matchOperation: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WafpolicyAllowlistRuleMatchHdr {
    hdr: pulumi.Input<string>;
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WafpolicyAllowlistRuleMatchHostHdr {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WafpolicyAllowlistRuleMatchIpReputationType {
    matchOperation: pulumi.Input<string>;
    reputationTypes: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WafpolicyAllowlistRuleMatchMethod {
    matchCriteria: pulumi.Input<string>;
    methods: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WafpolicyAllowlistRuleMatchPath {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    matchDecodedString?: pulumi.Input<string>;
    matchStrs?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WafpolicyAllowlistRuleMatchProtocol {
    matchCriteria: pulumi.Input<string>;
    protocols: pulumi.Input<string>;
}

export interface WafpolicyAllowlistRuleMatchQuery {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    matchDecodedString?: pulumi.Input<string>;
    matchStrs?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WafpolicyAllowlistRuleMatchSourceIp {
    addrs?: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatchSourceIpAddr>[]>;
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
    matchCriteria: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatchSourceIpPrefix>[]>;
    ranges?: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatchSourceIpRange>[]>;
}

export interface WafpolicyAllowlistRuleMatchSourceIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface WafpolicyAllowlistRuleMatchSourceIpPrefix {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatchSourceIpPrefixIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface WafpolicyAllowlistRuleMatchSourceIpPrefixIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface WafpolicyAllowlistRuleMatchSourceIpRange {
    begins: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatchSourceIpRangeBegin>[]>;
    ends: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlistRuleMatchSourceIpRangeEnd>[]>;
}

export interface WafpolicyAllowlistRuleMatchSourceIpRangeBegin {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface WafpolicyAllowlistRuleMatchSourceIpRangeEnd {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface WafpolicyAllowlistRuleMatchTlsFingerprintMatch {
    fingerprints?: pulumi.Input<pulumi.Input<string>[]>;
    matchOperation: pulumi.Input<string>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WafpolicyAllowlistRuleMatchVersion {
    matchCriteria: pulumi.Input<string>;
    versions: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WafpolicyAllowlistRuleMatchVsPort {
    matchCriteria: pulumi.Input<string>;
    ports: pulumi.Input<pulumi.Input<number>[]>;
}

export interface WafpolicyApplicationSignature {
    providerRef?: pulumi.Input<string>;
    resolvedRules?: pulumi.Input<pulumi.Input<inputs.WafpolicyApplicationSignatureResolvedRule>[]>;
    ruleOverrides?: pulumi.Input<pulumi.Input<inputs.WafpolicyApplicationSignatureRuleOverride>[]>;
    rulesetVersion?: pulumi.Input<string>;
    selectedApplications?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WafpolicyApplicationSignatureResolvedRule {
    enable?: pulumi.Input<string>;
    excludeLists?: pulumi.Input<pulumi.Input<inputs.WafpolicyApplicationSignatureResolvedRuleExcludeList>[]>;
    index: pulumi.Input<string>;
    isSensitive?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    paranoiaLevel?: pulumi.Input<string>;
    phase?: pulumi.Input<string>;
    rule: pulumi.Input<string>;
    ruleId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WafpolicyApplicationSignatureResolvedRuleExcludeList {
    clientSubnets?: pulumi.Input<pulumi.Input<inputs.WafpolicyApplicationSignatureResolvedRuleExcludeListClientSubnet>[]>;
    description?: pulumi.Input<string>;
    matchElement?: pulumi.Input<string>;
    matchElementCriterias?: pulumi.Input<pulumi.Input<inputs.WafpolicyApplicationSignatureResolvedRuleExcludeListMatchElementCriteria>[]>;
    uriMatchCriterias?: pulumi.Input<pulumi.Input<inputs.WafpolicyApplicationSignatureResolvedRuleExcludeListUriMatchCriteria>[]>;
    uriPath?: pulumi.Input<string>;
}

export interface WafpolicyApplicationSignatureResolvedRuleExcludeListClientSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.WafpolicyApplicationSignatureResolvedRuleExcludeListClientSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface WafpolicyApplicationSignatureResolvedRuleExcludeListClientSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface WafpolicyApplicationSignatureResolvedRuleExcludeListMatchElementCriteria {
    matchCase?: pulumi.Input<string>;
    matchOp?: pulumi.Input<string>;
}

export interface WafpolicyApplicationSignatureResolvedRuleExcludeListUriMatchCriteria {
    matchCase?: pulumi.Input<string>;
    matchOp?: pulumi.Input<string>;
}

export interface WafpolicyApplicationSignatureRuleOverride {
    enable?: pulumi.Input<string>;
    excludeLists?: pulumi.Input<pulumi.Input<inputs.WafpolicyApplicationSignatureRuleOverrideExcludeList>[]>;
    mode?: pulumi.Input<string>;
    ruleId: pulumi.Input<string>;
}

export interface WafpolicyApplicationSignatureRuleOverrideExcludeList {
    clientSubnets?: pulumi.Input<pulumi.Input<inputs.WafpolicyApplicationSignatureRuleOverrideExcludeListClientSubnet>[]>;
    description?: pulumi.Input<string>;
    matchElement?: pulumi.Input<string>;
    matchElementCriterias?: pulumi.Input<pulumi.Input<inputs.WafpolicyApplicationSignatureRuleOverrideExcludeListMatchElementCriteria>[]>;
    uriMatchCriterias?: pulumi.Input<pulumi.Input<inputs.WafpolicyApplicationSignatureRuleOverrideExcludeListUriMatchCriteria>[]>;
    uriPath?: pulumi.Input<string>;
}

export interface WafpolicyApplicationSignatureRuleOverrideExcludeListClientSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.WafpolicyApplicationSignatureRuleOverrideExcludeListClientSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface WafpolicyApplicationSignatureRuleOverrideExcludeListClientSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface WafpolicyApplicationSignatureRuleOverrideExcludeListMatchElementCriteria {
    matchCase?: pulumi.Input<string>;
    matchOp?: pulumi.Input<string>;
}

export interface WafpolicyApplicationSignatureRuleOverrideExcludeListUriMatchCriteria {
    matchCase?: pulumi.Input<string>;
    matchOp?: pulumi.Input<string>;
}

export interface WafpolicyConfidenceOverride {
    confidHighValue?: pulumi.Input<string>;
    confidLowValue?: pulumi.Input<string>;
    confidProbableValue?: pulumi.Input<string>;
    confidVeryHighValue?: pulumi.Input<string>;
}

export interface WafpolicyConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface WafpolicyCrsOverride {
    enable?: pulumi.Input<string>;
    excludeLists?: pulumi.Input<pulumi.Input<inputs.WafpolicyCrsOverrideExcludeList>[]>;
    mode?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    ruleOverrides?: pulumi.Input<pulumi.Input<inputs.WafpolicyCrsOverrideRuleOverride>[]>;
}

export interface WafpolicyCrsOverrideExcludeList {
    clientSubnets?: pulumi.Input<pulumi.Input<inputs.WafpolicyCrsOverrideExcludeListClientSubnet>[]>;
    description?: pulumi.Input<string>;
    matchElement?: pulumi.Input<string>;
    matchElementCriterias?: pulumi.Input<pulumi.Input<inputs.WafpolicyCrsOverrideExcludeListMatchElementCriteria>[]>;
    uriMatchCriterias?: pulumi.Input<pulumi.Input<inputs.WafpolicyCrsOverrideExcludeListUriMatchCriteria>[]>;
    uriPath?: pulumi.Input<string>;
}

export interface WafpolicyCrsOverrideExcludeListClientSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.WafpolicyCrsOverrideExcludeListClientSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface WafpolicyCrsOverrideExcludeListClientSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface WafpolicyCrsOverrideExcludeListMatchElementCriteria {
    matchCase?: pulumi.Input<string>;
    matchOp?: pulumi.Input<string>;
}

export interface WafpolicyCrsOverrideExcludeListUriMatchCriteria {
    matchCase?: pulumi.Input<string>;
    matchOp?: pulumi.Input<string>;
}

export interface WafpolicyCrsOverrideRuleOverride {
    enable?: pulumi.Input<string>;
    excludeLists?: pulumi.Input<pulumi.Input<inputs.WafpolicyCrsOverrideRuleOverrideExcludeList>[]>;
    mode?: pulumi.Input<string>;
    ruleId: pulumi.Input<string>;
}

export interface WafpolicyCrsOverrideRuleOverrideExcludeList {
    clientSubnets?: pulumi.Input<pulumi.Input<inputs.WafpolicyCrsOverrideRuleOverrideExcludeListClientSubnet>[]>;
    description?: pulumi.Input<string>;
    matchElement?: pulumi.Input<string>;
    matchElementCriterias?: pulumi.Input<pulumi.Input<inputs.WafpolicyCrsOverrideRuleOverrideExcludeListMatchElementCriteria>[]>;
    uriMatchCriterias?: pulumi.Input<pulumi.Input<inputs.WafpolicyCrsOverrideRuleOverrideExcludeListUriMatchCriteria>[]>;
    uriPath?: pulumi.Input<string>;
}

export interface WafpolicyCrsOverrideRuleOverrideExcludeListClientSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.WafpolicyCrsOverrideRuleOverrideExcludeListClientSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface WafpolicyCrsOverrideRuleOverrideExcludeListClientSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface WafpolicyCrsOverrideRuleOverrideExcludeListMatchElementCriteria {
    matchCase?: pulumi.Input<string>;
    matchOp?: pulumi.Input<string>;
}

export interface WafpolicyCrsOverrideRuleOverrideExcludeListUriMatchCriteria {
    matchCase?: pulumi.Input<string>;
    matchOp?: pulumi.Input<string>;
}

export interface WafpolicyLearningParam {
    enableLearnFromBots?: pulumi.Input<string>;
    enablePerUriLearning?: pulumi.Input<string>;
    learnFromAuthenticatedClientsOnly?: pulumi.Input<string>;
    learnFromBots?: pulumi.Input<pulumi.Input<inputs.WafpolicyLearningParamLearnFromBot>[]>;
    maxParams?: pulumi.Input<string>;
    maxUris?: pulumi.Input<string>;
    minHitsToLearn?: pulumi.Input<string>;
    samplingPercent?: pulumi.Input<string>;
    trustedIpgroupRef?: pulumi.Input<string>;
    updateInterval?: pulumi.Input<string>;
}

export interface WafpolicyLearningParamLearnFromBot {
    classifications?: pulumi.Input<pulumi.Input<inputs.WafpolicyLearningParamLearnFromBotClassification>[]>;
    matchOperation: pulumi.Input<string>;
}

export interface WafpolicyLearningParamLearnFromBotClassification {
    type: pulumi.Input<string>;
    userDefinedType?: pulumi.Input<string>;
}

export interface WafpolicyMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WafpolicyPositiveSecurityModel {
    groupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WafpolicyPostCrsGroup {
    enable?: pulumi.Input<string>;
    excludeLists?: pulumi.Input<pulumi.Input<inputs.WafpolicyPostCrsGroupExcludeList>[]>;
    index: pulumi.Input<string>;
    name: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.WafpolicyPostCrsGroupRule>[]>;
}

export interface WafpolicyPostCrsGroupExcludeList {
    clientSubnets?: pulumi.Input<pulumi.Input<inputs.WafpolicyPostCrsGroupExcludeListClientSubnet>[]>;
    description?: pulumi.Input<string>;
    matchElement?: pulumi.Input<string>;
    matchElementCriterias?: pulumi.Input<pulumi.Input<inputs.WafpolicyPostCrsGroupExcludeListMatchElementCriteria>[]>;
    uriMatchCriterias?: pulumi.Input<pulumi.Input<inputs.WafpolicyPostCrsGroupExcludeListUriMatchCriteria>[]>;
    uriPath?: pulumi.Input<string>;
}

export interface WafpolicyPostCrsGroupExcludeListClientSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.WafpolicyPostCrsGroupExcludeListClientSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface WafpolicyPostCrsGroupExcludeListClientSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface WafpolicyPostCrsGroupExcludeListMatchElementCriteria {
    matchCase?: pulumi.Input<string>;
    matchOp?: pulumi.Input<string>;
}

export interface WafpolicyPostCrsGroupExcludeListUriMatchCriteria {
    matchCase?: pulumi.Input<string>;
    matchOp?: pulumi.Input<string>;
}

export interface WafpolicyPostCrsGroupRule {
    enable?: pulumi.Input<string>;
    excludeLists?: pulumi.Input<pulumi.Input<inputs.WafpolicyPostCrsGroupRuleExcludeList>[]>;
    index: pulumi.Input<string>;
    isSensitive?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    paranoiaLevel?: pulumi.Input<string>;
    phase?: pulumi.Input<string>;
    rule: pulumi.Input<string>;
    ruleId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WafpolicyPostCrsGroupRuleExcludeList {
    clientSubnets?: pulumi.Input<pulumi.Input<inputs.WafpolicyPostCrsGroupRuleExcludeListClientSubnet>[]>;
    description?: pulumi.Input<string>;
    matchElement?: pulumi.Input<string>;
    matchElementCriterias?: pulumi.Input<pulumi.Input<inputs.WafpolicyPostCrsGroupRuleExcludeListMatchElementCriteria>[]>;
    uriMatchCriterias?: pulumi.Input<pulumi.Input<inputs.WafpolicyPostCrsGroupRuleExcludeListUriMatchCriteria>[]>;
    uriPath?: pulumi.Input<string>;
}

export interface WafpolicyPostCrsGroupRuleExcludeListClientSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.WafpolicyPostCrsGroupRuleExcludeListClientSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface WafpolicyPostCrsGroupRuleExcludeListClientSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface WafpolicyPostCrsGroupRuleExcludeListMatchElementCriteria {
    matchCase?: pulumi.Input<string>;
    matchOp?: pulumi.Input<string>;
}

export interface WafpolicyPostCrsGroupRuleExcludeListUriMatchCriteria {
    matchCase?: pulumi.Input<string>;
    matchOp?: pulumi.Input<string>;
}

export interface WafpolicyPreCrsGroup {
    enable?: pulumi.Input<string>;
    excludeLists?: pulumi.Input<pulumi.Input<inputs.WafpolicyPreCrsGroupExcludeList>[]>;
    index: pulumi.Input<string>;
    name: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.WafpolicyPreCrsGroupRule>[]>;
}

export interface WafpolicyPreCrsGroupExcludeList {
    clientSubnets?: pulumi.Input<pulumi.Input<inputs.WafpolicyPreCrsGroupExcludeListClientSubnet>[]>;
    description?: pulumi.Input<string>;
    matchElement?: pulumi.Input<string>;
    matchElementCriterias?: pulumi.Input<pulumi.Input<inputs.WafpolicyPreCrsGroupExcludeListMatchElementCriteria>[]>;
    uriMatchCriterias?: pulumi.Input<pulumi.Input<inputs.WafpolicyPreCrsGroupExcludeListUriMatchCriteria>[]>;
    uriPath?: pulumi.Input<string>;
}

export interface WafpolicyPreCrsGroupExcludeListClientSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.WafpolicyPreCrsGroupExcludeListClientSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface WafpolicyPreCrsGroupExcludeListClientSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface WafpolicyPreCrsGroupExcludeListMatchElementCriteria {
    matchCase?: pulumi.Input<string>;
    matchOp?: pulumi.Input<string>;
}

export interface WafpolicyPreCrsGroupExcludeListUriMatchCriteria {
    matchCase?: pulumi.Input<string>;
    matchOp?: pulumi.Input<string>;
}

export interface WafpolicyPreCrsGroupRule {
    enable?: pulumi.Input<string>;
    excludeLists?: pulumi.Input<pulumi.Input<inputs.WafpolicyPreCrsGroupRuleExcludeList>[]>;
    index: pulumi.Input<string>;
    isSensitive?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    paranoiaLevel?: pulumi.Input<string>;
    phase?: pulumi.Input<string>;
    rule: pulumi.Input<string>;
    ruleId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WafpolicyPreCrsGroupRuleExcludeList {
    clientSubnets?: pulumi.Input<pulumi.Input<inputs.WafpolicyPreCrsGroupRuleExcludeListClientSubnet>[]>;
    description?: pulumi.Input<string>;
    matchElement?: pulumi.Input<string>;
    matchElementCriterias?: pulumi.Input<pulumi.Input<inputs.WafpolicyPreCrsGroupRuleExcludeListMatchElementCriteria>[]>;
    uriMatchCriterias?: pulumi.Input<pulumi.Input<inputs.WafpolicyPreCrsGroupRuleExcludeListUriMatchCriteria>[]>;
    uriPath?: pulumi.Input<string>;
}

export interface WafpolicyPreCrsGroupRuleExcludeListClientSubnet {
    ipAddrs: pulumi.Input<pulumi.Input<inputs.WafpolicyPreCrsGroupRuleExcludeListClientSubnetIpAddr>[]>;
    mask: pulumi.Input<string>;
}

export interface WafpolicyPreCrsGroupRuleExcludeListClientSubnetIpAddr {
    addr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface WafpolicyPreCrsGroupRuleExcludeListMatchElementCriteria {
    matchCase?: pulumi.Input<string>;
    matchOp?: pulumi.Input<string>;
}

export interface WafpolicyPreCrsGroupRuleExcludeListUriMatchCriteria {
    matchCase?: pulumi.Input<string>;
    matchOp?: pulumi.Input<string>;
}

export interface WafpolicyRequiredDataFile {
    name?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface WafpolicypsmgroupConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface WafpolicypsmgroupLocation {
    description?: pulumi.Input<string>;
    index: pulumi.Input<string>;
    matches?: pulumi.Input<pulumi.Input<inputs.WafpolicypsmgroupLocationMatch>[]>;
    name: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.WafpolicypsmgroupLocationRule>[]>;
}

export interface WafpolicypsmgroupLocationMatch {
    hosts?: pulumi.Input<pulumi.Input<inputs.WafpolicypsmgroupLocationMatchHost>[]>;
    methods?: pulumi.Input<pulumi.Input<inputs.WafpolicypsmgroupLocationMatchMethod>[]>;
    paths?: pulumi.Input<pulumi.Input<inputs.WafpolicypsmgroupLocationMatchPath>[]>;
}

export interface WafpolicypsmgroupLocationMatchHost {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WafpolicypsmgroupLocationMatchMethod {
    matchCriteria: pulumi.Input<string>;
    methods: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WafpolicypsmgroupLocationMatchPath {
    matchCase?: pulumi.Input<string>;
    matchCriteria: pulumi.Input<string>;
    matchDecodedString?: pulumi.Input<string>;
    matchStrs?: pulumi.Input<pulumi.Input<string>[]>;
    stringGroupRefs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WafpolicypsmgroupLocationRule {
    description?: pulumi.Input<string>;
    enable?: pulumi.Input<string>;
    index: pulumi.Input<string>;
    matchCase?: pulumi.Input<string>;
    matchElements?: pulumi.Input<pulumi.Input<inputs.WafpolicypsmgroupLocationRuleMatchElement>[]>;
    matchValueMaxLength?: pulumi.Input<string>;
    matchValuePattern?: pulumi.Input<string>;
    matchValueStringGroupKey?: pulumi.Input<string>;
    matchValueStringGroupRef?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    paranoiaLevel?: pulumi.Input<string>;
    ruleId: pulumi.Input<string>;
}

export interface WafpolicypsmgroupLocationRuleMatchElement {
    excluded?: pulumi.Input<string>;
    index: pulumi.Input<string>;
    matchCase?: pulumi.Input<string>;
    matchOp?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    subElement?: pulumi.Input<string>;
}

export interface WafpolicypsmgroupMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WafprofileConfig {
    allowedHttpVersions?: pulumi.Input<pulumi.Input<string>[]>;
    allowedMethods?: pulumi.Input<pulumi.Input<string>[]>;
    allowedRequestContentTypeCharsets?: pulumi.Input<pulumi.Input<string>[]>;
    argumentSeparator?: pulumi.Input<string>;
    clientRequestMaxBodySize?: pulumi.Input<string>;
    contentTypeMappings?: pulumi.Input<pulumi.Input<inputs.WafprofileConfigContentTypeMapping>[]>;
    cookieFormatVersion?: pulumi.Input<string>;
    ignoreIncompleteRequestBodyError?: pulumi.Input<string>;
    maxExecutionTime?: pulumi.Input<string>;
    regexMatchLimit?: pulumi.Input<string>;
    regexRecursionLimit?: pulumi.Input<string>;
    requestBodyDefaultAction?: pulumi.Input<string>;
    requestHdrDefaultAction?: pulumi.Input<string>;
    responseBodyDefaultAction?: pulumi.Input<string>;
    responseHdrDefaultAction?: pulumi.Input<string>;
    restrictedExtensions?: pulumi.Input<pulumi.Input<string>[]>;
    restrictedHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    sendStatusHeader?: pulumi.Input<string>;
    serverResponseMaxBodySize?: pulumi.Input<string>;
    staticExtensions?: pulumi.Input<pulumi.Input<string>[]>;
    statusCodeForRejectedRequests?: pulumi.Input<string>;
    statusHeaderName?: pulumi.Input<string>;
    xmlXxeProtection?: pulumi.Input<string>;
}

export interface WafprofileConfigContentTypeMapping {
    contentType: pulumi.Input<string>;
    matchOp?: pulumi.Input<string>;
    requestBodyParser: pulumi.Input<string>;
}

export interface WafprofileConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface WafprofileFile {
    data: pulumi.Input<string>;
    name: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface WafprofileMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WebapputConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface WebapputMandatoryTest {
    mandatoryMessage: pulumi.Input<pulumi.Input<inputs.WebapputMandatoryTestMandatoryMessage>[]>;
    mandatoryMessages: pulumi.Input<pulumi.Input<inputs.WebapputMandatoryTestMandatoryMessage>[]>;
    mandatoryString: pulumi.Input<string>;
    mandatoryStrings: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WebapputMandatoryTestMandatoryMessage {
    mandatoryMessage: pulumi.Input<pulumi.Input<inputs.WebapputMandatoryTestMandatoryMessageMandatoryMessage>[]>;
    mandatoryMessages: pulumi.Input<pulumi.Input<inputs.WebapputMandatoryTestMandatoryMessageMandatoryMessage>[]>;
    mandatoryString: pulumi.Input<string>;
    mandatoryStrings: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WebapputMandatoryTestMandatoryMessageMandatoryMessage {
    optionalString?: pulumi.Input<string>;
}

export interface WebapputSensitiveTest {
    sensitiveMessage?: pulumi.Input<pulumi.Input<inputs.WebapputSensitiveTestSensitiveMessage>[]>;
    sensitiveMessages?: pulumi.Input<pulumi.Input<inputs.WebapputSensitiveTestSensitiveMessage>[]>;
    sensitiveString?: pulumi.Input<string>;
}

export interface WebapputSensitiveTestSensitiveMessage {
    sensitiveMessage?: pulumi.Input<pulumi.Input<inputs.WebapputSensitiveTestSensitiveMessageSensitiveMessage>[]>;
    sensitiveMessages?: pulumi.Input<pulumi.Input<inputs.WebapputSensitiveTestSensitiveMessageSensitiveMessage>[]>;
    sensitiveString?: pulumi.Input<string>;
}

export interface WebapputSensitiveTestSensitiveMessageSensitiveMessage {
    optionalSensitiveString?: pulumi.Input<string>;
}

export interface WebapputStringLengthTest {
    stringLengthMessage?: pulumi.Input<pulumi.Input<inputs.WebapputStringLengthTestStringLengthMessage>[]>;
    stringLengthMessages?: pulumi.Input<pulumi.Input<inputs.WebapputStringLengthTestStringLengthMessage>[]>;
    testString?: pulumi.Input<string>;
    testStrings?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WebapputStringLengthTestStringLengthMessage {
    stringLengthMessage?: pulumi.Input<pulumi.Input<inputs.WebapputStringLengthTestStringLengthMessageStringLengthMessage>[]>;
    stringLengthMessages?: pulumi.Input<pulumi.Input<inputs.WebapputStringLengthTestStringLengthMessageStringLengthMessage>[]>;
    testString?: pulumi.Input<string>;
    testStrings?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WebapputStringLengthTestStringLengthMessageStringLengthMessage {
    testString?: pulumi.Input<string>;
}

export interface WebhookConfigpbAttribute {
    version?: pulumi.Input<string>;
}

export interface WebhookMarker {
    key: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}
