// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'avi:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    public readonly accesses!: pulumi.Output<outputs.UserAccess[] | undefined>;
    public readonly anonymousUser!: pulumi.Output<string | undefined>;
    public readonly dateJoined!: pulumi.Output<string>;
    public readonly defaultTenantRef!: pulumi.Output<string>;
    public readonly email!: pulumi.Output<string>;
    public readonly fullName!: pulumi.Output<string>;
    public readonly isActive!: pulumi.Output<string | undefined>;
    public readonly isInternalUser!: pulumi.Output<string | undefined>;
    public readonly isStaff!: pulumi.Output<string | undefined>;
    public readonly isSuperuser!: pulumi.Output<string | undefined>;
    public readonly local!: pulumi.Output<string>;
    public readonly loggedIn!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string>;
    public readonly passwordless!: pulumi.Output<string | undefined>;
    public readonly recoveryToken!: pulumi.Output<string>;
    public readonly serviceUser!: pulumi.Output<string | undefined>;
    public readonly tokenExpirationDate!: pulumi.Output<string>;
    public readonly uiProperty!: pulumi.Output<string>;
    public readonly uid!: pulumi.Output<string>;
    public readonly unixCryptPassword!: pulumi.Output<string>;
    public readonly userProfileRef!: pulumi.Output<string>;
    public readonly username!: pulumi.Output<string>;
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["accesses"] = state ? state.accesses : undefined;
            resourceInputs["anonymousUser"] = state ? state.anonymousUser : undefined;
            resourceInputs["dateJoined"] = state ? state.dateJoined : undefined;
            resourceInputs["defaultTenantRef"] = state ? state.defaultTenantRef : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["fullName"] = state ? state.fullName : undefined;
            resourceInputs["isActive"] = state ? state.isActive : undefined;
            resourceInputs["isInternalUser"] = state ? state.isInternalUser : undefined;
            resourceInputs["isStaff"] = state ? state.isStaff : undefined;
            resourceInputs["isSuperuser"] = state ? state.isSuperuser : undefined;
            resourceInputs["local"] = state ? state.local : undefined;
            resourceInputs["loggedIn"] = state ? state.loggedIn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["passwordless"] = state ? state.passwordless : undefined;
            resourceInputs["recoveryToken"] = state ? state.recoveryToken : undefined;
            resourceInputs["serviceUser"] = state ? state.serviceUser : undefined;
            resourceInputs["tokenExpirationDate"] = state ? state.tokenExpirationDate : undefined;
            resourceInputs["uiProperty"] = state ? state.uiProperty : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["unixCryptPassword"] = state ? state.unixCryptPassword : undefined;
            resourceInputs["userProfileRef"] = state ? state.userProfileRef : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            resourceInputs["accesses"] = args ? args.accesses : undefined;
            resourceInputs["anonymousUser"] = args ? args.anonymousUser : undefined;
            resourceInputs["dateJoined"] = args ? args.dateJoined : undefined;
            resourceInputs["defaultTenantRef"] = args ? args.defaultTenantRef : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["fullName"] = args ? args.fullName : undefined;
            resourceInputs["isActive"] = args ? args.isActive : undefined;
            resourceInputs["isInternalUser"] = args ? args.isInternalUser : undefined;
            resourceInputs["isStaff"] = args ? args.isStaff : undefined;
            resourceInputs["isSuperuser"] = args ? args.isSuperuser : undefined;
            resourceInputs["local"] = args ? args.local : undefined;
            resourceInputs["loggedIn"] = args ? args.loggedIn : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["passwordless"] = args ? args.passwordless : undefined;
            resourceInputs["recoveryToken"] = args ? args.recoveryToken : undefined;
            resourceInputs["serviceUser"] = args ? args.serviceUser : undefined;
            resourceInputs["tokenExpirationDate"] = args ? args.tokenExpirationDate : undefined;
            resourceInputs["uiProperty"] = args ? args.uiProperty : undefined;
            resourceInputs["uid"] = args ? args.uid : undefined;
            resourceInputs["unixCryptPassword"] = args ? args.unixCryptPassword : undefined;
            resourceInputs["userProfileRef"] = args ? args.userProfileRef : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(User.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    accesses?: pulumi.Input<pulumi.Input<inputs.UserAccess>[]>;
    anonymousUser?: pulumi.Input<string>;
    dateJoined?: pulumi.Input<string>;
    defaultTenantRef?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    fullName?: pulumi.Input<string>;
    isActive?: pulumi.Input<string>;
    isInternalUser?: pulumi.Input<string>;
    isStaff?: pulumi.Input<string>;
    isSuperuser?: pulumi.Input<string>;
    local?: pulumi.Input<string>;
    loggedIn?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    passwordless?: pulumi.Input<string>;
    recoveryToken?: pulumi.Input<string>;
    serviceUser?: pulumi.Input<string>;
    tokenExpirationDate?: pulumi.Input<string>;
    uiProperty?: pulumi.Input<string>;
    uid?: pulumi.Input<string>;
    unixCryptPassword?: pulumi.Input<string>;
    userProfileRef?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    accesses?: pulumi.Input<pulumi.Input<inputs.UserAccess>[]>;
    anonymousUser?: pulumi.Input<string>;
    dateJoined?: pulumi.Input<string>;
    defaultTenantRef?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    fullName?: pulumi.Input<string>;
    isActive?: pulumi.Input<string>;
    isInternalUser?: pulumi.Input<string>;
    isStaff?: pulumi.Input<string>;
    isSuperuser?: pulumi.Input<string>;
    local?: pulumi.Input<string>;
    loggedIn?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    passwordless?: pulumi.Input<string>;
    recoveryToken?: pulumi.Input<string>;
    serviceUser?: pulumi.Input<string>;
    tokenExpirationDate?: pulumi.Input<string>;
    uiProperty?: pulumi.Input<string>;
    uid?: pulumi.Input<string>;
    unixCryptPassword?: pulumi.Input<string>;
    userProfileRef?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}
