// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Wafcrs extends pulumi.CustomResource {
    /**
     * Get an existing Wafcrs resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WafcrsState, opts?: pulumi.CustomResourceOptions): Wafcrs {
        return new Wafcrs(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'avi:index/wafcrs:Wafcrs';

    /**
     * Returns true if the given object is an instance of Wafcrs.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Wafcrs {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Wafcrs.__pulumiType;
    }

    public readonly allowedRequestContentTypeCharsets!: pulumi.Output<string[] | undefined>;
    public readonly configpbAttributes!: pulumi.Output<outputs.WafcrsConfigpbAttribute[] | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly files!: pulumi.Output<outputs.WafcrsFile[] | undefined>;
    public readonly groups!: pulumi.Output<outputs.WafcrsGroup[] | undefined>;
    public readonly integrity!: pulumi.Output<string>;
    public readonly integrityValues!: pulumi.Output<string[] | undefined>;
    public readonly markers!: pulumi.Output<outputs.WafcrsMarker[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly releaseDate!: pulumi.Output<string>;
    public readonly restrictedExtensions!: pulumi.Output<string[] | undefined>;
    public readonly restrictedHeaders!: pulumi.Output<string[] | undefined>;
    public readonly tenantRef!: pulumi.Output<string>;
    public readonly uuid!: pulumi.Output<string>;
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a Wafcrs resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WafcrsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WafcrsArgs | WafcrsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WafcrsState | undefined;
            resourceInputs["allowedRequestContentTypeCharsets"] = state ? state.allowedRequestContentTypeCharsets : undefined;
            resourceInputs["configpbAttributes"] = state ? state.configpbAttributes : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["files"] = state ? state.files : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["integrity"] = state ? state.integrity : undefined;
            resourceInputs["integrityValues"] = state ? state.integrityValues : undefined;
            resourceInputs["markers"] = state ? state.markers : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["releaseDate"] = state ? state.releaseDate : undefined;
            resourceInputs["restrictedExtensions"] = state ? state.restrictedExtensions : undefined;
            resourceInputs["restrictedHeaders"] = state ? state.restrictedHeaders : undefined;
            resourceInputs["tenantRef"] = state ? state.tenantRef : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as WafcrsArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.integrity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integrity'");
            }
            if ((!args || args.releaseDate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'releaseDate'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["allowedRequestContentTypeCharsets"] = args ? args.allowedRequestContentTypeCharsets : undefined;
            resourceInputs["configpbAttributes"] = args ? args.configpbAttributes : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["files"] = args ? args.files : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["integrity"] = args ? args.integrity : undefined;
            resourceInputs["integrityValues"] = args ? args.integrityValues : undefined;
            resourceInputs["markers"] = args ? args.markers : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["releaseDate"] = args ? args.releaseDate : undefined;
            resourceInputs["restrictedExtensions"] = args ? args.restrictedExtensions : undefined;
            resourceInputs["restrictedHeaders"] = args ? args.restrictedHeaders : undefined;
            resourceInputs["tenantRef"] = args ? args.tenantRef : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Wafcrs.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Wafcrs resources.
 */
export interface WafcrsState {
    allowedRequestContentTypeCharsets?: pulumi.Input<pulumi.Input<string>[]>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.WafcrsConfigpbAttribute>[]>;
    description?: pulumi.Input<string>;
    files?: pulumi.Input<pulumi.Input<inputs.WafcrsFile>[]>;
    groups?: pulumi.Input<pulumi.Input<inputs.WafcrsGroup>[]>;
    integrity?: pulumi.Input<string>;
    integrityValues?: pulumi.Input<pulumi.Input<string>[]>;
    markers?: pulumi.Input<pulumi.Input<inputs.WafcrsMarker>[]>;
    name?: pulumi.Input<string>;
    releaseDate?: pulumi.Input<string>;
    restrictedExtensions?: pulumi.Input<pulumi.Input<string>[]>;
    restrictedHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    tenantRef?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Wafcrs resource.
 */
export interface WafcrsArgs {
    allowedRequestContentTypeCharsets?: pulumi.Input<pulumi.Input<string>[]>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.WafcrsConfigpbAttribute>[]>;
    description: pulumi.Input<string>;
    files?: pulumi.Input<pulumi.Input<inputs.WafcrsFile>[]>;
    groups?: pulumi.Input<pulumi.Input<inputs.WafcrsGroup>[]>;
    integrity: pulumi.Input<string>;
    integrityValues?: pulumi.Input<pulumi.Input<string>[]>;
    markers?: pulumi.Input<pulumi.Input<inputs.WafcrsMarker>[]>;
    name?: pulumi.Input<string>;
    releaseDate: pulumi.Input<string>;
    restrictedExtensions?: pulumi.Input<pulumi.Input<string>[]>;
    restrictedHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    tenantRef?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    version: pulumi.Input<string>;
}
