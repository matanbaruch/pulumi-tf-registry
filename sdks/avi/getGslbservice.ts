// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getGslbservice(args?: GetGslbserviceArgs, opts?: pulumi.InvokeOptions): Promise<GetGslbserviceResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("avi:index/getGslbservice:getGslbservice", {
        "id": args.id,
        "name": args.name,
        "tenantRef": args.tenantRef,
        "uuid": args.uuid,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getGslbservice.
 */
export interface GetGslbserviceArgs {
    id?: string;
    name?: string;
    tenantRef?: string;
    uuid?: string;
}

/**
 * A collection of values returned by getGslbservice.
 */
export interface GetGslbserviceResult {
    readonly applicationPersistenceProfileRef: string;
    readonly configpbAttributes: outputs.GetGslbserviceConfigpbAttribute[];
    readonly controllerHealthStatusEnabled: string;
    readonly createdBy: string;
    readonly description: string;
    readonly domainNames: string[];
    readonly downResponses: outputs.GetGslbserviceDownResponse[];
    readonly enabled: string;
    readonly groups: outputs.GetGslbserviceGroup[];
    readonly healthMonitorRefs: string[];
    readonly healthMonitorScope: string;
    readonly hmOff: string;
    readonly id: string;
    readonly isFederated: string;
    readonly markers: outputs.GetGslbserviceMarker[];
    readonly minMembers: string;
    readonly name: string;
    readonly numDnsIp: string;
    readonly pkiProfileRef: string;
    readonly poolAlgorithm: string;
    readonly resolveCname: string;
    readonly sitePersistenceEnabled: string;
    readonly tenantRef: string;
    readonly topologyPolicyEnabled: string;
    readonly ttl: string;
    readonly useEdnsClientSubnet: string;
    readonly uuid: string;
    readonly wildcardMatch: string;
}
export function getGslbserviceOutput(args?: GetGslbserviceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGslbserviceResult> {
    return pulumi.output(args).apply((a: any) => getGslbservice(a, opts))
}

/**
 * A collection of arguments for invoking getGslbservice.
 */
export interface GetGslbserviceOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}
