// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getUpgradestatusinfo(args?: GetUpgradestatusinfoArgs, opts?: pulumi.InvokeOptions): Promise<GetUpgradestatusinfoResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("avi:index/getUpgradestatusinfo:getUpgradestatusinfo", {
        "id": args.id,
        "name": args.name,
        "tenantRef": args.tenantRef,
        "uuid": args.uuid,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getUpgradestatusinfo.
 */
export interface GetUpgradestatusinfoArgs {
    id?: string;
    name?: string;
    tenantRef?: string;
    uuid?: string;
}

/**
 * A collection of values returned by getUpgradestatusinfo.
 */
export interface GetUpgradestatusinfoResult {
    readonly afterRebootRollbackFnc: string;
    readonly afterRebootTaskName: string;
    readonly clean: string;
    readonly duration: string;
    readonly enablePatchRollback: string;
    readonly enableRollback: string;
    readonly endTime: string;
    readonly enqueueTime: string;
    readonly fipsMode: string;
    readonly histories: outputs.GetUpgradestatusinfoHistory[];
    readonly id: string;
    readonly imagePath: string;
    readonly imageRef: string;
    readonly name: string;
    readonly nodeType: string;
    readonly objCloudRef: string;
    readonly params: outputs.GetUpgradestatusinfoParam[];
    readonly patchImagePath: string;
    readonly patchImageRef: string;
    readonly patchLists: outputs.GetUpgradestatusinfoPatchList[];
    readonly patchReboot: string;
    readonly patchVersion: string;
    readonly prevImagePath: string;
    readonly prevPatchImagePath: string;
    readonly prevRemoteImageRef: string;
    readonly previousImageRef: string;
    readonly previousPatchImageRef: string;
    readonly previousPatchLists: outputs.GetUpgradestatusinfoPreviousPatchList[];
    readonly previousPatchVersion: string;
    readonly previousVersion: string;
    readonly progress: string;
    readonly reason: string;
    readonly remoteImageRef: string;
    readonly sePatchImagePath: string;
    readonly sePatchImageRef: string;
    readonly seUpgradeEvents: outputs.GetUpgradestatusinfoSeUpgradeEvent[];
    readonly segParams: outputs.GetUpgradestatusinfoSegParam[];
    readonly segStatuses: outputs.GetUpgradestatusinfoSegStatus[];
    readonly startTime: string;
    readonly statediffRef: string;
    readonly states: outputs.GetUpgradestatusinfoState[];
    readonly system: string;
    readonly systemReportRefs: string[];
    readonly tasksCompleted: string;
    readonly tenantRef: string;
    readonly totalTasks: string;
    readonly upgradeEvents: outputs.GetUpgradestatusinfoUpgradeEvent[];
    readonly upgradeOps: string;
    readonly upgradeReadinesses: outputs.GetUpgradestatusinfoUpgradeReadiness[];
    readonly uuid: string;
    readonly version: string;
}
export function getUpgradestatusinfoOutput(args?: GetUpgradestatusinfoOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUpgradestatusinfoResult> {
    return pulumi.output(args).apply((a: any) => getUpgradestatusinfo(a, opts))
}

/**
 * A collection of arguments for invoking getUpgradestatusinfo.
 */
export interface GetUpgradestatusinfoOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}
