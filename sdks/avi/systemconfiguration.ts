// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Systemconfiguration extends pulumi.CustomResource {
    /**
     * Get an existing Systemconfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemconfigurationState, opts?: pulumi.CustomResourceOptions): Systemconfiguration {
        return new Systemconfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'avi:index/systemconfiguration:Systemconfiguration';

    /**
     * Returns true if the given object is an instance of Systemconfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Systemconfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Systemconfiguration.__pulumiType;
    }

    public readonly adminAuthConfigurations!: pulumi.Output<outputs.SystemconfigurationAdminAuthConfiguration[] | undefined>;
    public readonly commonCriteriaMode!: pulumi.Output<string | undefined>;
    public readonly configpbAttributes!: pulumi.Output<outputs.SystemconfigurationConfigpbAttribute[] | undefined>;
    public readonly controllerAnalyticsPolicies!: pulumi.Output<outputs.SystemconfigurationControllerAnalyticsPolicy[] | undefined>;
    public readonly defaultLicenseTier!: pulumi.Output<string | undefined>;
    public readonly dnsConfigurations!: pulumi.Output<outputs.SystemconfigurationDnsConfiguration[] | undefined>;
    public readonly dnsVirtualserviceRefs!: pulumi.Output<string[] | undefined>;
    public readonly dockerMode!: pulumi.Output<string | undefined>;
    public readonly emailConfigurations!: pulumi.Output<outputs.SystemconfigurationEmailConfiguration[] | undefined>;
    public readonly enableCors!: pulumi.Output<string | undefined>;
    public readonly fipsMode!: pulumi.Output<string | undefined>;
    public readonly globalTenantConfigs!: pulumi.Output<outputs.SystemconfigurationGlobalTenantConfig[] | undefined>;
    public readonly hostKeyAlgorithmExclude!: pulumi.Output<string>;
    public readonly kexAlgorithmExclude!: pulumi.Output<string>;
    public readonly linuxConfigurations!: pulumi.Output<outputs.SystemconfigurationLinuxConfiguration[] | undefined>;
    public readonly mgmtIpAccessControls!: pulumi.Output<outputs.SystemconfigurationMgmtIpAccessControl[] | undefined>;
    public readonly ntpConfigurations!: pulumi.Output<outputs.SystemconfigurationNtpConfiguration[] | undefined>;
    public readonly portalConfigurations!: pulumi.Output<outputs.SystemconfigurationPortalConfiguration[] | undefined>;
    public readonly proxyConfigurations!: pulumi.Output<outputs.SystemconfigurationProxyConfiguration[] | undefined>;
    public readonly rekeyTimeLimit!: pulumi.Output<string | undefined>;
    public readonly rekeyVolumeLimit!: pulumi.Output<string | undefined>;
    public readonly secureChannelConfigurations!: pulumi.Output<outputs.SystemconfigurationSecureChannelConfiguration[] | undefined>;
    public readonly snmpConfigurations!: pulumi.Output<outputs.SystemconfigurationSnmpConfiguration[] | undefined>;
    public readonly sshCiphers!: pulumi.Output<string[] | undefined>;
    public readonly sshHmacs!: pulumi.Output<string[] | undefined>;
    public readonly uuid!: pulumi.Output<string>;
    public readonly welcomeWorkflowComplete!: pulumi.Output<string | undefined>;

    /**
     * Create a Systemconfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemconfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemconfigurationArgs | SystemconfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemconfigurationState | undefined;
            resourceInputs["adminAuthConfigurations"] = state ? state.adminAuthConfigurations : undefined;
            resourceInputs["commonCriteriaMode"] = state ? state.commonCriteriaMode : undefined;
            resourceInputs["configpbAttributes"] = state ? state.configpbAttributes : undefined;
            resourceInputs["controllerAnalyticsPolicies"] = state ? state.controllerAnalyticsPolicies : undefined;
            resourceInputs["defaultLicenseTier"] = state ? state.defaultLicenseTier : undefined;
            resourceInputs["dnsConfigurations"] = state ? state.dnsConfigurations : undefined;
            resourceInputs["dnsVirtualserviceRefs"] = state ? state.dnsVirtualserviceRefs : undefined;
            resourceInputs["dockerMode"] = state ? state.dockerMode : undefined;
            resourceInputs["emailConfigurations"] = state ? state.emailConfigurations : undefined;
            resourceInputs["enableCors"] = state ? state.enableCors : undefined;
            resourceInputs["fipsMode"] = state ? state.fipsMode : undefined;
            resourceInputs["globalTenantConfigs"] = state ? state.globalTenantConfigs : undefined;
            resourceInputs["hostKeyAlgorithmExclude"] = state ? state.hostKeyAlgorithmExclude : undefined;
            resourceInputs["kexAlgorithmExclude"] = state ? state.kexAlgorithmExclude : undefined;
            resourceInputs["linuxConfigurations"] = state ? state.linuxConfigurations : undefined;
            resourceInputs["mgmtIpAccessControls"] = state ? state.mgmtIpAccessControls : undefined;
            resourceInputs["ntpConfigurations"] = state ? state.ntpConfigurations : undefined;
            resourceInputs["portalConfigurations"] = state ? state.portalConfigurations : undefined;
            resourceInputs["proxyConfigurations"] = state ? state.proxyConfigurations : undefined;
            resourceInputs["rekeyTimeLimit"] = state ? state.rekeyTimeLimit : undefined;
            resourceInputs["rekeyVolumeLimit"] = state ? state.rekeyVolumeLimit : undefined;
            resourceInputs["secureChannelConfigurations"] = state ? state.secureChannelConfigurations : undefined;
            resourceInputs["snmpConfigurations"] = state ? state.snmpConfigurations : undefined;
            resourceInputs["sshCiphers"] = state ? state.sshCiphers : undefined;
            resourceInputs["sshHmacs"] = state ? state.sshHmacs : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["welcomeWorkflowComplete"] = state ? state.welcomeWorkflowComplete : undefined;
        } else {
            const args = argsOrState as SystemconfigurationArgs | undefined;
            resourceInputs["adminAuthConfigurations"] = args ? args.adminAuthConfigurations : undefined;
            resourceInputs["commonCriteriaMode"] = args ? args.commonCriteriaMode : undefined;
            resourceInputs["configpbAttributes"] = args ? args.configpbAttributes : undefined;
            resourceInputs["controllerAnalyticsPolicies"] = args ? args.controllerAnalyticsPolicies : undefined;
            resourceInputs["defaultLicenseTier"] = args ? args.defaultLicenseTier : undefined;
            resourceInputs["dnsConfigurations"] = args ? args.dnsConfigurations : undefined;
            resourceInputs["dnsVirtualserviceRefs"] = args ? args.dnsVirtualserviceRefs : undefined;
            resourceInputs["dockerMode"] = args ? args.dockerMode : undefined;
            resourceInputs["emailConfigurations"] = args ? args.emailConfigurations : undefined;
            resourceInputs["enableCors"] = args ? args.enableCors : undefined;
            resourceInputs["fipsMode"] = args ? args.fipsMode : undefined;
            resourceInputs["globalTenantConfigs"] = args ? args.globalTenantConfigs : undefined;
            resourceInputs["hostKeyAlgorithmExclude"] = args ? args.hostKeyAlgorithmExclude : undefined;
            resourceInputs["kexAlgorithmExclude"] = args ? args.kexAlgorithmExclude : undefined;
            resourceInputs["linuxConfigurations"] = args ? args.linuxConfigurations : undefined;
            resourceInputs["mgmtIpAccessControls"] = args ? args.mgmtIpAccessControls : undefined;
            resourceInputs["ntpConfigurations"] = args ? args.ntpConfigurations : undefined;
            resourceInputs["portalConfigurations"] = args ? args.portalConfigurations : undefined;
            resourceInputs["proxyConfigurations"] = args ? args.proxyConfigurations : undefined;
            resourceInputs["rekeyTimeLimit"] = args ? args.rekeyTimeLimit : undefined;
            resourceInputs["rekeyVolumeLimit"] = args ? args.rekeyVolumeLimit : undefined;
            resourceInputs["secureChannelConfigurations"] = args ? args.secureChannelConfigurations : undefined;
            resourceInputs["snmpConfigurations"] = args ? args.snmpConfigurations : undefined;
            resourceInputs["sshCiphers"] = args ? args.sshCiphers : undefined;
            resourceInputs["sshHmacs"] = args ? args.sshHmacs : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["welcomeWorkflowComplete"] = args ? args.welcomeWorkflowComplete : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Systemconfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Systemconfiguration resources.
 */
export interface SystemconfigurationState {
    adminAuthConfigurations?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationAdminAuthConfiguration>[]>;
    commonCriteriaMode?: pulumi.Input<string>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationConfigpbAttribute>[]>;
    controllerAnalyticsPolicies?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationControllerAnalyticsPolicy>[]>;
    defaultLicenseTier?: pulumi.Input<string>;
    dnsConfigurations?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationDnsConfiguration>[]>;
    dnsVirtualserviceRefs?: pulumi.Input<pulumi.Input<string>[]>;
    dockerMode?: pulumi.Input<string>;
    emailConfigurations?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationEmailConfiguration>[]>;
    enableCors?: pulumi.Input<string>;
    fipsMode?: pulumi.Input<string>;
    globalTenantConfigs?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationGlobalTenantConfig>[]>;
    hostKeyAlgorithmExclude?: pulumi.Input<string>;
    kexAlgorithmExclude?: pulumi.Input<string>;
    linuxConfigurations?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationLinuxConfiguration>[]>;
    mgmtIpAccessControls?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControl>[]>;
    ntpConfigurations?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationNtpConfiguration>[]>;
    portalConfigurations?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationPortalConfiguration>[]>;
    proxyConfigurations?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationProxyConfiguration>[]>;
    rekeyTimeLimit?: pulumi.Input<string>;
    rekeyVolumeLimit?: pulumi.Input<string>;
    secureChannelConfigurations?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationSecureChannelConfiguration>[]>;
    snmpConfigurations?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationSnmpConfiguration>[]>;
    sshCiphers?: pulumi.Input<pulumi.Input<string>[]>;
    sshHmacs?: pulumi.Input<pulumi.Input<string>[]>;
    uuid?: pulumi.Input<string>;
    welcomeWorkflowComplete?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Systemconfiguration resource.
 */
export interface SystemconfigurationArgs {
    adminAuthConfigurations?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationAdminAuthConfiguration>[]>;
    commonCriteriaMode?: pulumi.Input<string>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationConfigpbAttribute>[]>;
    controllerAnalyticsPolicies?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationControllerAnalyticsPolicy>[]>;
    defaultLicenseTier?: pulumi.Input<string>;
    dnsConfigurations?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationDnsConfiguration>[]>;
    dnsVirtualserviceRefs?: pulumi.Input<pulumi.Input<string>[]>;
    dockerMode?: pulumi.Input<string>;
    emailConfigurations?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationEmailConfiguration>[]>;
    enableCors?: pulumi.Input<string>;
    fipsMode?: pulumi.Input<string>;
    globalTenantConfigs?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationGlobalTenantConfig>[]>;
    hostKeyAlgorithmExclude?: pulumi.Input<string>;
    kexAlgorithmExclude?: pulumi.Input<string>;
    linuxConfigurations?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationLinuxConfiguration>[]>;
    mgmtIpAccessControls?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationMgmtIpAccessControl>[]>;
    ntpConfigurations?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationNtpConfiguration>[]>;
    portalConfigurations?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationPortalConfiguration>[]>;
    proxyConfigurations?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationProxyConfiguration>[]>;
    rekeyTimeLimit?: pulumi.Input<string>;
    rekeyVolumeLimit?: pulumi.Input<string>;
    secureChannelConfigurations?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationSecureChannelConfiguration>[]>;
    snmpConfigurations?: pulumi.Input<pulumi.Input<inputs.SystemconfigurationSnmpConfiguration>[]>;
    sshCiphers?: pulumi.Input<pulumi.Input<string>[]>;
    sshHmacs?: pulumi.Input<pulumi.Input<string>[]>;
    uuid?: pulumi.Input<string>;
    welcomeWorkflowComplete?: pulumi.Input<string>;
}
