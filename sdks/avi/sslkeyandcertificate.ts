// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Sslkeyandcertificate extends pulumi.CustomResource {
    /**
     * Get an existing Sslkeyandcertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SslkeyandcertificateState, opts?: pulumi.CustomResourceOptions): Sslkeyandcertificate {
        return new Sslkeyandcertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'avi:index/sslkeyandcertificate:Sslkeyandcertificate';

    /**
     * Returns true if the given object is an instance of Sslkeyandcertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Sslkeyandcertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Sslkeyandcertificate.__pulumiType;
    }

    public readonly caCerts!: pulumi.Output<outputs.SslkeyandcertificateCaCert[] | undefined>;
    public readonly certificateBase64!: pulumi.Output<string | undefined>;
    public readonly certificateManagementProfileRef!: pulumi.Output<string>;
    public readonly certificates!: pulumi.Output<outputs.SslkeyandcertificateCertificate[]>;
    public readonly configpbAttributes!: pulumi.Output<outputs.SslkeyandcertificateConfigpbAttribute[] | undefined>;
    public readonly createdBy!: pulumi.Output<string>;
    public readonly dynamicParams!: pulumi.Output<outputs.SslkeyandcertificateDynamicParam[] | undefined>;
    public readonly enableOcspStapling!: pulumi.Output<string | undefined>;
    public readonly enckeyBase64!: pulumi.Output<string>;
    public readonly enckeyName!: pulumi.Output<string>;
    public readonly format!: pulumi.Output<string | undefined>;
    public readonly hardwaresecuritymodulegroupRef!: pulumi.Output<string>;
    public readonly importKeyToHsm!: pulumi.Output<string | undefined>;
    public readonly isFederated!: pulumi.Output<string | undefined>;
    public readonly key!: pulumi.Output<string>;
    public readonly keyBase64!: pulumi.Output<string | undefined>;
    public readonly keyParams!: pulumi.Output<outputs.SslkeyandcertificateKeyParam[] | undefined>;
    public readonly keyPassphrase!: pulumi.Output<string>;
    public readonly markers!: pulumi.Output<outputs.SslkeyandcertificateMarker[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly ocspConfigs!: pulumi.Output<outputs.SslkeyandcertificateOcspConfig[] | undefined>;
    public readonly ocspErrorStatus!: pulumi.Output<string>;
    public readonly ocspResponderUrlListFromCerts!: pulumi.Output<string[] | undefined>;
    public readonly ocspResponseInfos!: pulumi.Output<outputs.SslkeyandcertificateOcspResponseInfo[] | undefined>;
    public readonly status!: pulumi.Output<string | undefined>;
    public readonly tenantRef!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Sslkeyandcertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SslkeyandcertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SslkeyandcertificateArgs | SslkeyandcertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SslkeyandcertificateState | undefined;
            resourceInputs["caCerts"] = state ? state.caCerts : undefined;
            resourceInputs["certificateBase64"] = state ? state.certificateBase64 : undefined;
            resourceInputs["certificateManagementProfileRef"] = state ? state.certificateManagementProfileRef : undefined;
            resourceInputs["certificates"] = state ? state.certificates : undefined;
            resourceInputs["configpbAttributes"] = state ? state.configpbAttributes : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["dynamicParams"] = state ? state.dynamicParams : undefined;
            resourceInputs["enableOcspStapling"] = state ? state.enableOcspStapling : undefined;
            resourceInputs["enckeyBase64"] = state ? state.enckeyBase64 : undefined;
            resourceInputs["enckeyName"] = state ? state.enckeyName : undefined;
            resourceInputs["format"] = state ? state.format : undefined;
            resourceInputs["hardwaresecuritymodulegroupRef"] = state ? state.hardwaresecuritymodulegroupRef : undefined;
            resourceInputs["importKeyToHsm"] = state ? state.importKeyToHsm : undefined;
            resourceInputs["isFederated"] = state ? state.isFederated : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["keyBase64"] = state ? state.keyBase64 : undefined;
            resourceInputs["keyParams"] = state ? state.keyParams : undefined;
            resourceInputs["keyPassphrase"] = state ? state.keyPassphrase : undefined;
            resourceInputs["markers"] = state ? state.markers : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ocspConfigs"] = state ? state.ocspConfigs : undefined;
            resourceInputs["ocspErrorStatus"] = state ? state.ocspErrorStatus : undefined;
            resourceInputs["ocspResponderUrlListFromCerts"] = state ? state.ocspResponderUrlListFromCerts : undefined;
            resourceInputs["ocspResponseInfos"] = state ? state.ocspResponseInfos : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tenantRef"] = state ? state.tenantRef : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SslkeyandcertificateArgs | undefined;
            if ((!args || args.certificates === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificates'");
            }
            resourceInputs["caCerts"] = args ? args.caCerts : undefined;
            resourceInputs["certificateBase64"] = args ? args.certificateBase64 : undefined;
            resourceInputs["certificateManagementProfileRef"] = args ? args.certificateManagementProfileRef : undefined;
            resourceInputs["certificates"] = args ? args.certificates : undefined;
            resourceInputs["configpbAttributes"] = args ? args.configpbAttributes : undefined;
            resourceInputs["createdBy"] = args ? args.createdBy : undefined;
            resourceInputs["dynamicParams"] = args ? args.dynamicParams : undefined;
            resourceInputs["enableOcspStapling"] = args ? args.enableOcspStapling : undefined;
            resourceInputs["enckeyBase64"] = args ? args.enckeyBase64 : undefined;
            resourceInputs["enckeyName"] = args ? args.enckeyName : undefined;
            resourceInputs["format"] = args ? args.format : undefined;
            resourceInputs["hardwaresecuritymodulegroupRef"] = args ? args.hardwaresecuritymodulegroupRef : undefined;
            resourceInputs["importKeyToHsm"] = args ? args.importKeyToHsm : undefined;
            resourceInputs["isFederated"] = args ? args.isFederated : undefined;
            resourceInputs["key"] = args?.key ? pulumi.secret(args.key) : undefined;
            resourceInputs["keyBase64"] = args ? args.keyBase64 : undefined;
            resourceInputs["keyParams"] = args ? args.keyParams : undefined;
            resourceInputs["keyPassphrase"] = args?.keyPassphrase ? pulumi.secret(args.keyPassphrase) : undefined;
            resourceInputs["markers"] = args ? args.markers : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ocspConfigs"] = args ? args.ocspConfigs : undefined;
            resourceInputs["ocspErrorStatus"] = args ? args.ocspErrorStatus : undefined;
            resourceInputs["ocspResponderUrlListFromCerts"] = args ? args.ocspResponderUrlListFromCerts : undefined;
            resourceInputs["ocspResponseInfos"] = args ? args.ocspResponseInfos : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tenantRef"] = args ? args.tenantRef : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["key", "keyPassphrase"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Sslkeyandcertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Sslkeyandcertificate resources.
 */
export interface SslkeyandcertificateState {
    caCerts?: pulumi.Input<pulumi.Input<inputs.SslkeyandcertificateCaCert>[]>;
    certificateBase64?: pulumi.Input<string>;
    certificateManagementProfileRef?: pulumi.Input<string>;
    certificates?: pulumi.Input<pulumi.Input<inputs.SslkeyandcertificateCertificate>[]>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.SslkeyandcertificateConfigpbAttribute>[]>;
    createdBy?: pulumi.Input<string>;
    dynamicParams?: pulumi.Input<pulumi.Input<inputs.SslkeyandcertificateDynamicParam>[]>;
    enableOcspStapling?: pulumi.Input<string>;
    enckeyBase64?: pulumi.Input<string>;
    enckeyName?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    hardwaresecuritymodulegroupRef?: pulumi.Input<string>;
    importKeyToHsm?: pulumi.Input<string>;
    isFederated?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    keyBase64?: pulumi.Input<string>;
    keyParams?: pulumi.Input<pulumi.Input<inputs.SslkeyandcertificateKeyParam>[]>;
    keyPassphrase?: pulumi.Input<string>;
    markers?: pulumi.Input<pulumi.Input<inputs.SslkeyandcertificateMarker>[]>;
    name?: pulumi.Input<string>;
    ocspConfigs?: pulumi.Input<pulumi.Input<inputs.SslkeyandcertificateOcspConfig>[]>;
    ocspErrorStatus?: pulumi.Input<string>;
    ocspResponderUrlListFromCerts?: pulumi.Input<pulumi.Input<string>[]>;
    ocspResponseInfos?: pulumi.Input<pulumi.Input<inputs.SslkeyandcertificateOcspResponseInfo>[]>;
    status?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Sslkeyandcertificate resource.
 */
export interface SslkeyandcertificateArgs {
    caCerts?: pulumi.Input<pulumi.Input<inputs.SslkeyandcertificateCaCert>[]>;
    certificateBase64?: pulumi.Input<string>;
    certificateManagementProfileRef?: pulumi.Input<string>;
    certificates: pulumi.Input<pulumi.Input<inputs.SslkeyandcertificateCertificate>[]>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.SslkeyandcertificateConfigpbAttribute>[]>;
    createdBy?: pulumi.Input<string>;
    dynamicParams?: pulumi.Input<pulumi.Input<inputs.SslkeyandcertificateDynamicParam>[]>;
    enableOcspStapling?: pulumi.Input<string>;
    enckeyBase64?: pulumi.Input<string>;
    enckeyName?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    hardwaresecuritymodulegroupRef?: pulumi.Input<string>;
    importKeyToHsm?: pulumi.Input<string>;
    isFederated?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    keyBase64?: pulumi.Input<string>;
    keyParams?: pulumi.Input<pulumi.Input<inputs.SslkeyandcertificateKeyParam>[]>;
    keyPassphrase?: pulumi.Input<string>;
    markers?: pulumi.Input<pulumi.Input<inputs.SslkeyandcertificateMarker>[]>;
    name?: pulumi.Input<string>;
    ocspConfigs?: pulumi.Input<pulumi.Input<inputs.SslkeyandcertificateOcspConfig>[]>;
    ocspErrorStatus?: pulumi.Input<string>;
    ocspResponderUrlListFromCerts?: pulumi.Input<pulumi.Input<string>[]>;
    ocspResponseInfos?: pulumi.Input<pulumi.Input<inputs.SslkeyandcertificateOcspResponseInfo>[]>;
    status?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}
