// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Wafpolicy extends pulumi.CustomResource {
    /**
     * Get an existing Wafpolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WafpolicyState, opts?: pulumi.CustomResourceOptions): Wafpolicy {
        return new Wafpolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'avi:index/wafpolicy:Wafpolicy';

    /**
     * Returns true if the given object is an instance of Wafpolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Wafpolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Wafpolicy.__pulumiType;
    }

    public readonly allowModeDelegation!: pulumi.Output<string | undefined>;
    public readonly allowlists!: pulumi.Output<outputs.WafpolicyAllowlist[] | undefined>;
    public readonly applicationSignatures!: pulumi.Output<outputs.WafpolicyApplicationSignature[] | undefined>;
    public readonly autoUpdateCrs!: pulumi.Output<string | undefined>;
    public readonly bypassStaticExtensions!: pulumi.Output<string | undefined>;
    public readonly confidenceOverrides!: pulumi.Output<outputs.WafpolicyConfidenceOverride[] | undefined>;
    public readonly configpbAttributes!: pulumi.Output<outputs.WafpolicyConfigpbAttribute[] | undefined>;
    public readonly createdBy!: pulumi.Output<string>;
    public readonly crsOverrides!: pulumi.Output<outputs.WafpolicyCrsOverride[] | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly enableAppLearning!: pulumi.Output<string | undefined>;
    public readonly enableAutoRuleUpdates!: pulumi.Output<string | undefined>;
    public readonly enableRegexLearning!: pulumi.Output<string | undefined>;
    public readonly failureMode!: pulumi.Output<string | undefined>;
    public readonly geoDbRef!: pulumi.Output<string>;
    public readonly learningParams!: pulumi.Output<outputs.WafpolicyLearningParam[] | undefined>;
    public readonly markers!: pulumi.Output<outputs.WafpolicyMarker[] | undefined>;
    public readonly minConfidence!: pulumi.Output<string | undefined>;
    public readonly mode!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly paranoiaLevel!: pulumi.Output<string | undefined>;
    public readonly positiveSecurityModels!: pulumi.Output<outputs.WafpolicyPositiveSecurityModel[] | undefined>;
    public readonly postCrsGroups!: pulumi.Output<outputs.WafpolicyPostCrsGroup[] | undefined>;
    public readonly preCrsGroups!: pulumi.Output<outputs.WafpolicyPreCrsGroup[] | undefined>;
    public readonly requiredDataFiles!: pulumi.Output<outputs.WafpolicyRequiredDataFile[] | undefined>;
    public readonly tenantRef!: pulumi.Output<string>;
    public readonly updatedCrsRulesInDetectionMode!: pulumi.Output<string | undefined>;
    public readonly uuid!: pulumi.Output<string>;
    public readonly wafCrsRef!: pulumi.Output<string>;
    public readonly wafProfileRef!: pulumi.Output<string>;

    /**
     * Create a Wafpolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WafpolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WafpolicyArgs | WafpolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WafpolicyState | undefined;
            resourceInputs["allowModeDelegation"] = state ? state.allowModeDelegation : undefined;
            resourceInputs["allowlists"] = state ? state.allowlists : undefined;
            resourceInputs["applicationSignatures"] = state ? state.applicationSignatures : undefined;
            resourceInputs["autoUpdateCrs"] = state ? state.autoUpdateCrs : undefined;
            resourceInputs["bypassStaticExtensions"] = state ? state.bypassStaticExtensions : undefined;
            resourceInputs["confidenceOverrides"] = state ? state.confidenceOverrides : undefined;
            resourceInputs["configpbAttributes"] = state ? state.configpbAttributes : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["crsOverrides"] = state ? state.crsOverrides : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enableAppLearning"] = state ? state.enableAppLearning : undefined;
            resourceInputs["enableAutoRuleUpdates"] = state ? state.enableAutoRuleUpdates : undefined;
            resourceInputs["enableRegexLearning"] = state ? state.enableRegexLearning : undefined;
            resourceInputs["failureMode"] = state ? state.failureMode : undefined;
            resourceInputs["geoDbRef"] = state ? state.geoDbRef : undefined;
            resourceInputs["learningParams"] = state ? state.learningParams : undefined;
            resourceInputs["markers"] = state ? state.markers : undefined;
            resourceInputs["minConfidence"] = state ? state.minConfidence : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["paranoiaLevel"] = state ? state.paranoiaLevel : undefined;
            resourceInputs["positiveSecurityModels"] = state ? state.positiveSecurityModels : undefined;
            resourceInputs["postCrsGroups"] = state ? state.postCrsGroups : undefined;
            resourceInputs["preCrsGroups"] = state ? state.preCrsGroups : undefined;
            resourceInputs["requiredDataFiles"] = state ? state.requiredDataFiles : undefined;
            resourceInputs["tenantRef"] = state ? state.tenantRef : undefined;
            resourceInputs["updatedCrsRulesInDetectionMode"] = state ? state.updatedCrsRulesInDetectionMode : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["wafCrsRef"] = state ? state.wafCrsRef : undefined;
            resourceInputs["wafProfileRef"] = state ? state.wafProfileRef : undefined;
        } else {
            const args = argsOrState as WafpolicyArgs | undefined;
            if ((!args || args.wafProfileRef === undefined) && !opts.urn) {
                throw new Error("Missing required property 'wafProfileRef'");
            }
            resourceInputs["allowModeDelegation"] = args ? args.allowModeDelegation : undefined;
            resourceInputs["allowlists"] = args ? args.allowlists : undefined;
            resourceInputs["applicationSignatures"] = args ? args.applicationSignatures : undefined;
            resourceInputs["autoUpdateCrs"] = args ? args.autoUpdateCrs : undefined;
            resourceInputs["bypassStaticExtensions"] = args ? args.bypassStaticExtensions : undefined;
            resourceInputs["confidenceOverrides"] = args ? args.confidenceOverrides : undefined;
            resourceInputs["configpbAttributes"] = args ? args.configpbAttributes : undefined;
            resourceInputs["createdBy"] = args ? args.createdBy : undefined;
            resourceInputs["crsOverrides"] = args ? args.crsOverrides : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enableAppLearning"] = args ? args.enableAppLearning : undefined;
            resourceInputs["enableAutoRuleUpdates"] = args ? args.enableAutoRuleUpdates : undefined;
            resourceInputs["enableRegexLearning"] = args ? args.enableRegexLearning : undefined;
            resourceInputs["failureMode"] = args ? args.failureMode : undefined;
            resourceInputs["geoDbRef"] = args ? args.geoDbRef : undefined;
            resourceInputs["learningParams"] = args ? args.learningParams : undefined;
            resourceInputs["markers"] = args ? args.markers : undefined;
            resourceInputs["minConfidence"] = args ? args.minConfidence : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["paranoiaLevel"] = args ? args.paranoiaLevel : undefined;
            resourceInputs["positiveSecurityModels"] = args ? args.positiveSecurityModels : undefined;
            resourceInputs["postCrsGroups"] = args ? args.postCrsGroups : undefined;
            resourceInputs["preCrsGroups"] = args ? args.preCrsGroups : undefined;
            resourceInputs["requiredDataFiles"] = args ? args.requiredDataFiles : undefined;
            resourceInputs["tenantRef"] = args ? args.tenantRef : undefined;
            resourceInputs["updatedCrsRulesInDetectionMode"] = args ? args.updatedCrsRulesInDetectionMode : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["wafCrsRef"] = args ? args.wafCrsRef : undefined;
            resourceInputs["wafProfileRef"] = args ? args.wafProfileRef : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Wafpolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Wafpolicy resources.
 */
export interface WafpolicyState {
    allowModeDelegation?: pulumi.Input<string>;
    allowlists?: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlist>[]>;
    applicationSignatures?: pulumi.Input<pulumi.Input<inputs.WafpolicyApplicationSignature>[]>;
    autoUpdateCrs?: pulumi.Input<string>;
    bypassStaticExtensions?: pulumi.Input<string>;
    confidenceOverrides?: pulumi.Input<pulumi.Input<inputs.WafpolicyConfidenceOverride>[]>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.WafpolicyConfigpbAttribute>[]>;
    createdBy?: pulumi.Input<string>;
    crsOverrides?: pulumi.Input<pulumi.Input<inputs.WafpolicyCrsOverride>[]>;
    description?: pulumi.Input<string>;
    enableAppLearning?: pulumi.Input<string>;
    enableAutoRuleUpdates?: pulumi.Input<string>;
    enableRegexLearning?: pulumi.Input<string>;
    failureMode?: pulumi.Input<string>;
    geoDbRef?: pulumi.Input<string>;
    learningParams?: pulumi.Input<pulumi.Input<inputs.WafpolicyLearningParam>[]>;
    markers?: pulumi.Input<pulumi.Input<inputs.WafpolicyMarker>[]>;
    minConfidence?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    paranoiaLevel?: pulumi.Input<string>;
    positiveSecurityModels?: pulumi.Input<pulumi.Input<inputs.WafpolicyPositiveSecurityModel>[]>;
    postCrsGroups?: pulumi.Input<pulumi.Input<inputs.WafpolicyPostCrsGroup>[]>;
    preCrsGroups?: pulumi.Input<pulumi.Input<inputs.WafpolicyPreCrsGroup>[]>;
    requiredDataFiles?: pulumi.Input<pulumi.Input<inputs.WafpolicyRequiredDataFile>[]>;
    tenantRef?: pulumi.Input<string>;
    updatedCrsRulesInDetectionMode?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    wafCrsRef?: pulumi.Input<string>;
    wafProfileRef?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Wafpolicy resource.
 */
export interface WafpolicyArgs {
    allowModeDelegation?: pulumi.Input<string>;
    allowlists?: pulumi.Input<pulumi.Input<inputs.WafpolicyAllowlist>[]>;
    applicationSignatures?: pulumi.Input<pulumi.Input<inputs.WafpolicyApplicationSignature>[]>;
    autoUpdateCrs?: pulumi.Input<string>;
    bypassStaticExtensions?: pulumi.Input<string>;
    confidenceOverrides?: pulumi.Input<pulumi.Input<inputs.WafpolicyConfidenceOverride>[]>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.WafpolicyConfigpbAttribute>[]>;
    createdBy?: pulumi.Input<string>;
    crsOverrides?: pulumi.Input<pulumi.Input<inputs.WafpolicyCrsOverride>[]>;
    description?: pulumi.Input<string>;
    enableAppLearning?: pulumi.Input<string>;
    enableAutoRuleUpdates?: pulumi.Input<string>;
    enableRegexLearning?: pulumi.Input<string>;
    failureMode?: pulumi.Input<string>;
    geoDbRef?: pulumi.Input<string>;
    learningParams?: pulumi.Input<pulumi.Input<inputs.WafpolicyLearningParam>[]>;
    markers?: pulumi.Input<pulumi.Input<inputs.WafpolicyMarker>[]>;
    minConfidence?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    paranoiaLevel?: pulumi.Input<string>;
    positiveSecurityModels?: pulumi.Input<pulumi.Input<inputs.WafpolicyPositiveSecurityModel>[]>;
    postCrsGroups?: pulumi.Input<pulumi.Input<inputs.WafpolicyPostCrsGroup>[]>;
    preCrsGroups?: pulumi.Input<pulumi.Input<inputs.WafpolicyPreCrsGroup>[]>;
    requiredDataFiles?: pulumi.Input<pulumi.Input<inputs.WafpolicyRequiredDataFile>[]>;
    tenantRef?: pulumi.Input<string>;
    updatedCrsRulesInDetectionMode?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    wafCrsRef?: pulumi.Input<string>;
    wafProfileRef: pulumi.Input<string>;
}
