// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Backup extends pulumi.CustomResource {
    /**
     * Get an existing Backup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackupState, opts?: pulumi.CustomResourceOptions): Backup {
        return new Backup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'avi:index/backup:Backup';

    /**
     * Returns true if the given object is an instance of Backup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Backup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Backup.__pulumiType;
    }

    public readonly backupConfigRef!: pulumi.Output<string>;
    public readonly fileName!: pulumi.Output<string>;
    public readonly localFileUrl!: pulumi.Output<string>;
    public readonly remoteFileUrl!: pulumi.Output<string>;
    public readonly schedulerRef!: pulumi.Output<string>;
    public readonly tenantRef!: pulumi.Output<string>;
    public readonly timestamp!: pulumi.Output<string>;
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Backup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackupArgs | BackupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackupState | undefined;
            resourceInputs["backupConfigRef"] = state ? state.backupConfigRef : undefined;
            resourceInputs["fileName"] = state ? state.fileName : undefined;
            resourceInputs["localFileUrl"] = state ? state.localFileUrl : undefined;
            resourceInputs["remoteFileUrl"] = state ? state.remoteFileUrl : undefined;
            resourceInputs["schedulerRef"] = state ? state.schedulerRef : undefined;
            resourceInputs["tenantRef"] = state ? state.tenantRef : undefined;
            resourceInputs["timestamp"] = state ? state.timestamp : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as BackupArgs | undefined;
            if ((!args || args.fileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileName'");
            }
            resourceInputs["backupConfigRef"] = args ? args.backupConfigRef : undefined;
            resourceInputs["fileName"] = args ? args.fileName : undefined;
            resourceInputs["localFileUrl"] = args ? args.localFileUrl : undefined;
            resourceInputs["remoteFileUrl"] = args ? args.remoteFileUrl : undefined;
            resourceInputs["schedulerRef"] = args ? args.schedulerRef : undefined;
            resourceInputs["tenantRef"] = args ? args.tenantRef : undefined;
            resourceInputs["timestamp"] = args ? args.timestamp : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Backup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Backup resources.
 */
export interface BackupState {
    backupConfigRef?: pulumi.Input<string>;
    fileName?: pulumi.Input<string>;
    localFileUrl?: pulumi.Input<string>;
    remoteFileUrl?: pulumi.Input<string>;
    schedulerRef?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    timestamp?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Backup resource.
 */
export interface BackupArgs {
    backupConfigRef?: pulumi.Input<string>;
    fileName: pulumi.Input<string>;
    localFileUrl?: pulumi.Input<string>;
    remoteFileUrl?: pulumi.Input<string>;
    schedulerRef?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    timestamp?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}
