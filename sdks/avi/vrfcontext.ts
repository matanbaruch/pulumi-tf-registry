// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Vrfcontext extends pulumi.CustomResource {
    /**
     * Get an existing Vrfcontext resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VrfcontextState, opts?: pulumi.CustomResourceOptions): Vrfcontext {
        return new Vrfcontext(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'avi:index/vrfcontext:Vrfcontext';

    /**
     * Returns true if the given object is an instance of Vrfcontext.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vrfcontext {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vrfcontext.__pulumiType;
    }

    public readonly attrs!: pulumi.Output<outputs.VrfcontextAttr[] | undefined>;
    public readonly bfdProfiles!: pulumi.Output<outputs.VrfcontextBfdProfile[] | undefined>;
    public readonly bgpProfiles!: pulumi.Output<outputs.VrfcontextBgpProfile[] | undefined>;
    public readonly cloudRef!: pulumi.Output<string>;
    public readonly configpbAttributes!: pulumi.Output<outputs.VrfcontextConfigpbAttribute[] | undefined>;
    public readonly debugvrfcontexts!: pulumi.Output<outputs.VrfcontextDebugvrfcontext[] | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly gatewayMons!: pulumi.Output<outputs.VrfcontextGatewayMon[] | undefined>;
    public readonly internalGatewayMonitors!: pulumi.Output<outputs.VrfcontextInternalGatewayMonitor[] | undefined>;
    public readonly lldpEnable!: pulumi.Output<string | undefined>;
    public readonly markers!: pulumi.Output<outputs.VrfcontextMarker[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly staticRoutes!: pulumi.Output<outputs.VrfcontextStaticRoute[] | undefined>;
    public readonly systemDefault!: pulumi.Output<string | undefined>;
    public readonly tenantRef!: pulumi.Output<string>;
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Vrfcontext resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VrfcontextArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VrfcontextArgs | VrfcontextState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VrfcontextState | undefined;
            resourceInputs["attrs"] = state ? state.attrs : undefined;
            resourceInputs["bfdProfiles"] = state ? state.bfdProfiles : undefined;
            resourceInputs["bgpProfiles"] = state ? state.bgpProfiles : undefined;
            resourceInputs["cloudRef"] = state ? state.cloudRef : undefined;
            resourceInputs["configpbAttributes"] = state ? state.configpbAttributes : undefined;
            resourceInputs["debugvrfcontexts"] = state ? state.debugvrfcontexts : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["gatewayMons"] = state ? state.gatewayMons : undefined;
            resourceInputs["internalGatewayMonitors"] = state ? state.internalGatewayMonitors : undefined;
            resourceInputs["lldpEnable"] = state ? state.lldpEnable : undefined;
            resourceInputs["markers"] = state ? state.markers : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["staticRoutes"] = state ? state.staticRoutes : undefined;
            resourceInputs["systemDefault"] = state ? state.systemDefault : undefined;
            resourceInputs["tenantRef"] = state ? state.tenantRef : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as VrfcontextArgs | undefined;
            resourceInputs["attrs"] = args ? args.attrs : undefined;
            resourceInputs["bfdProfiles"] = args ? args.bfdProfiles : undefined;
            resourceInputs["bgpProfiles"] = args ? args.bgpProfiles : undefined;
            resourceInputs["cloudRef"] = args ? args.cloudRef : undefined;
            resourceInputs["configpbAttributes"] = args ? args.configpbAttributes : undefined;
            resourceInputs["debugvrfcontexts"] = args ? args.debugvrfcontexts : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["gatewayMons"] = args ? args.gatewayMons : undefined;
            resourceInputs["internalGatewayMonitors"] = args ? args.internalGatewayMonitors : undefined;
            resourceInputs["lldpEnable"] = args ? args.lldpEnable : undefined;
            resourceInputs["markers"] = args ? args.markers : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["staticRoutes"] = args ? args.staticRoutes : undefined;
            resourceInputs["systemDefault"] = args ? args.systemDefault : undefined;
            resourceInputs["tenantRef"] = args ? args.tenantRef : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vrfcontext.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Vrfcontext resources.
 */
export interface VrfcontextState {
    attrs?: pulumi.Input<pulumi.Input<inputs.VrfcontextAttr>[]>;
    bfdProfiles?: pulumi.Input<pulumi.Input<inputs.VrfcontextBfdProfile>[]>;
    bgpProfiles?: pulumi.Input<pulumi.Input<inputs.VrfcontextBgpProfile>[]>;
    cloudRef?: pulumi.Input<string>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.VrfcontextConfigpbAttribute>[]>;
    debugvrfcontexts?: pulumi.Input<pulumi.Input<inputs.VrfcontextDebugvrfcontext>[]>;
    description?: pulumi.Input<string>;
    gatewayMons?: pulumi.Input<pulumi.Input<inputs.VrfcontextGatewayMon>[]>;
    internalGatewayMonitors?: pulumi.Input<pulumi.Input<inputs.VrfcontextInternalGatewayMonitor>[]>;
    lldpEnable?: pulumi.Input<string>;
    markers?: pulumi.Input<pulumi.Input<inputs.VrfcontextMarker>[]>;
    name?: pulumi.Input<string>;
    staticRoutes?: pulumi.Input<pulumi.Input<inputs.VrfcontextStaticRoute>[]>;
    systemDefault?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vrfcontext resource.
 */
export interface VrfcontextArgs {
    attrs?: pulumi.Input<pulumi.Input<inputs.VrfcontextAttr>[]>;
    bfdProfiles?: pulumi.Input<pulumi.Input<inputs.VrfcontextBfdProfile>[]>;
    bgpProfiles?: pulumi.Input<pulumi.Input<inputs.VrfcontextBgpProfile>[]>;
    cloudRef?: pulumi.Input<string>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.VrfcontextConfigpbAttribute>[]>;
    debugvrfcontexts?: pulumi.Input<pulumi.Input<inputs.VrfcontextDebugvrfcontext>[]>;
    description?: pulumi.Input<string>;
    gatewayMons?: pulumi.Input<pulumi.Input<inputs.VrfcontextGatewayMon>[]>;
    internalGatewayMonitors?: pulumi.Input<pulumi.Input<inputs.VrfcontextInternalGatewayMonitor>[]>;
    lldpEnable?: pulumi.Input<string>;
    markers?: pulumi.Input<pulumi.Input<inputs.VrfcontextMarker>[]>;
    name?: pulumi.Input<string>;
    staticRoutes?: pulumi.Input<pulumi.Input<inputs.VrfcontextStaticRoute>[]>;
    systemDefault?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}
