// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Fileobject extends pulumi.CustomResource {
    /**
     * Get an existing Fileobject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FileobjectState, opts?: pulumi.CustomResourceOptions): Fileobject {
        return new Fileobject(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'avi:index/fileobject:Fileobject';

    /**
     * Returns true if the given object is an instance of Fileobject.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Fileobject {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Fileobject.__pulumiType;
    }

    public readonly checksum!: pulumi.Output<string>;
    public readonly compressed!: pulumi.Output<string | undefined>;
    public readonly configpbAttributes!: pulumi.Output<outputs.FileobjectConfigpbAttribute[] | undefined>;
    public readonly created!: pulumi.Output<string>;
    public readonly crlInfos!: pulumi.Output<outputs.FileobjectCrlInfo[] | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly expiresAt!: pulumi.Output<string>;
    public readonly isFederated!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly path!: pulumi.Output<string>;
    public readonly readOnly!: pulumi.Output<string>;
    public readonly restrictDownload!: pulumi.Output<string>;
    public readonly size!: pulumi.Output<string>;
    public readonly tenantRef!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly uuid!: pulumi.Output<string>;
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a Fileobject resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FileobjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FileobjectArgs | FileobjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FileobjectState | undefined;
            resourceInputs["checksum"] = state ? state.checksum : undefined;
            resourceInputs["compressed"] = state ? state.compressed : undefined;
            resourceInputs["configpbAttributes"] = state ? state.configpbAttributes : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["crlInfos"] = state ? state.crlInfos : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["expiresAt"] = state ? state.expiresAt : undefined;
            resourceInputs["isFederated"] = state ? state.isFederated : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["readOnly"] = state ? state.readOnly : undefined;
            resourceInputs["restrictDownload"] = state ? state.restrictDownload : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["tenantRef"] = state ? state.tenantRef : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as FileobjectArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["checksum"] = args ? args.checksum : undefined;
            resourceInputs["compressed"] = args ? args.compressed : undefined;
            resourceInputs["configpbAttributes"] = args ? args.configpbAttributes : undefined;
            resourceInputs["created"] = args ? args.created : undefined;
            resourceInputs["crlInfos"] = args ? args.crlInfos : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["expiresAt"] = args ? args.expiresAt : undefined;
            resourceInputs["isFederated"] = args ? args.isFederated : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["readOnly"] = args ? args.readOnly : undefined;
            resourceInputs["restrictDownload"] = args ? args.restrictDownload : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["tenantRef"] = args ? args.tenantRef : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Fileobject.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Fileobject resources.
 */
export interface FileobjectState {
    checksum?: pulumi.Input<string>;
    compressed?: pulumi.Input<string>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.FileobjectConfigpbAttribute>[]>;
    created?: pulumi.Input<string>;
    crlInfos?: pulumi.Input<pulumi.Input<inputs.FileobjectCrlInfo>[]>;
    description?: pulumi.Input<string>;
    expiresAt?: pulumi.Input<string>;
    isFederated?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    readOnly?: pulumi.Input<string>;
    restrictDownload?: pulumi.Input<string>;
    size?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Fileobject resource.
 */
export interface FileobjectArgs {
    checksum?: pulumi.Input<string>;
    compressed?: pulumi.Input<string>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.FileobjectConfigpbAttribute>[]>;
    created?: pulumi.Input<string>;
    crlInfos?: pulumi.Input<pulumi.Input<inputs.FileobjectCrlInfo>[]>;
    description?: pulumi.Input<string>;
    expiresAt?: pulumi.Input<string>;
    isFederated?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    readOnly?: pulumi.Input<string>;
    restrictDownload?: pulumi.Input<string>;
    size?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}
