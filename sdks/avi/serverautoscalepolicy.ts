// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Serverautoscalepolicy extends pulumi.CustomResource {
    /**
     * Get an existing Serverautoscalepolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerautoscalepolicyState, opts?: pulumi.CustomResourceOptions): Serverautoscalepolicy {
        return new Serverautoscalepolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'avi:index/serverautoscalepolicy:Serverautoscalepolicy';

    /**
     * Returns true if the given object is an instance of Serverautoscalepolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Serverautoscalepolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Serverautoscalepolicy.__pulumiType;
    }

    public readonly configpbAttributes!: pulumi.Output<outputs.ServerautoscalepolicyConfigpbAttribute[] | undefined>;
    public readonly delayForServerGarbageCollection!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly intelligentAutoscale!: pulumi.Output<string | undefined>;
    public readonly intelligentScaleinMargin!: pulumi.Output<string | undefined>;
    public readonly intelligentScaleoutMargin!: pulumi.Output<string | undefined>;
    public readonly markers!: pulumi.Output<outputs.ServerautoscalepolicyMarker[] | undefined>;
    public readonly maxScaleinAdjustmentStep!: pulumi.Output<string | undefined>;
    public readonly maxScaleoutAdjustmentStep!: pulumi.Output<string | undefined>;
    public readonly maxSize!: pulumi.Output<string>;
    public readonly minSize!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly scaleinAlertconfigRefs!: pulumi.Output<string[] | undefined>;
    public readonly scaleinCooldown!: pulumi.Output<string | undefined>;
    public readonly scaleoutAlertconfigRefs!: pulumi.Output<string[] | undefined>;
    public readonly scaleoutCooldown!: pulumi.Output<string | undefined>;
    public readonly scheduledScalings!: pulumi.Output<outputs.ServerautoscalepolicyScheduledScaling[] | undefined>;
    public readonly tenantRef!: pulumi.Output<string>;
    public readonly usePredictedLoad!: pulumi.Output<string | undefined>;
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Serverautoscalepolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServerautoscalepolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerautoscalepolicyArgs | ServerautoscalepolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerautoscalepolicyState | undefined;
            resourceInputs["configpbAttributes"] = state ? state.configpbAttributes : undefined;
            resourceInputs["delayForServerGarbageCollection"] = state ? state.delayForServerGarbageCollection : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["intelligentAutoscale"] = state ? state.intelligentAutoscale : undefined;
            resourceInputs["intelligentScaleinMargin"] = state ? state.intelligentScaleinMargin : undefined;
            resourceInputs["intelligentScaleoutMargin"] = state ? state.intelligentScaleoutMargin : undefined;
            resourceInputs["markers"] = state ? state.markers : undefined;
            resourceInputs["maxScaleinAdjustmentStep"] = state ? state.maxScaleinAdjustmentStep : undefined;
            resourceInputs["maxScaleoutAdjustmentStep"] = state ? state.maxScaleoutAdjustmentStep : undefined;
            resourceInputs["maxSize"] = state ? state.maxSize : undefined;
            resourceInputs["minSize"] = state ? state.minSize : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scaleinAlertconfigRefs"] = state ? state.scaleinAlertconfigRefs : undefined;
            resourceInputs["scaleinCooldown"] = state ? state.scaleinCooldown : undefined;
            resourceInputs["scaleoutAlertconfigRefs"] = state ? state.scaleoutAlertconfigRefs : undefined;
            resourceInputs["scaleoutCooldown"] = state ? state.scaleoutCooldown : undefined;
            resourceInputs["scheduledScalings"] = state ? state.scheduledScalings : undefined;
            resourceInputs["tenantRef"] = state ? state.tenantRef : undefined;
            resourceInputs["usePredictedLoad"] = state ? state.usePredictedLoad : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as ServerautoscalepolicyArgs | undefined;
            resourceInputs["configpbAttributes"] = args ? args.configpbAttributes : undefined;
            resourceInputs["delayForServerGarbageCollection"] = args ? args.delayForServerGarbageCollection : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["intelligentAutoscale"] = args ? args.intelligentAutoscale : undefined;
            resourceInputs["intelligentScaleinMargin"] = args ? args.intelligentScaleinMargin : undefined;
            resourceInputs["intelligentScaleoutMargin"] = args ? args.intelligentScaleoutMargin : undefined;
            resourceInputs["markers"] = args ? args.markers : undefined;
            resourceInputs["maxScaleinAdjustmentStep"] = args ? args.maxScaleinAdjustmentStep : undefined;
            resourceInputs["maxScaleoutAdjustmentStep"] = args ? args.maxScaleoutAdjustmentStep : undefined;
            resourceInputs["maxSize"] = args ? args.maxSize : undefined;
            resourceInputs["minSize"] = args ? args.minSize : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scaleinAlertconfigRefs"] = args ? args.scaleinAlertconfigRefs : undefined;
            resourceInputs["scaleinCooldown"] = args ? args.scaleinCooldown : undefined;
            resourceInputs["scaleoutAlertconfigRefs"] = args ? args.scaleoutAlertconfigRefs : undefined;
            resourceInputs["scaleoutCooldown"] = args ? args.scaleoutCooldown : undefined;
            resourceInputs["scheduledScalings"] = args ? args.scheduledScalings : undefined;
            resourceInputs["tenantRef"] = args ? args.tenantRef : undefined;
            resourceInputs["usePredictedLoad"] = args ? args.usePredictedLoad : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Serverautoscalepolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Serverautoscalepolicy resources.
 */
export interface ServerautoscalepolicyState {
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.ServerautoscalepolicyConfigpbAttribute>[]>;
    delayForServerGarbageCollection?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    intelligentAutoscale?: pulumi.Input<string>;
    intelligentScaleinMargin?: pulumi.Input<string>;
    intelligentScaleoutMargin?: pulumi.Input<string>;
    markers?: pulumi.Input<pulumi.Input<inputs.ServerautoscalepolicyMarker>[]>;
    maxScaleinAdjustmentStep?: pulumi.Input<string>;
    maxScaleoutAdjustmentStep?: pulumi.Input<string>;
    maxSize?: pulumi.Input<string>;
    minSize?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    scaleinAlertconfigRefs?: pulumi.Input<pulumi.Input<string>[]>;
    scaleinCooldown?: pulumi.Input<string>;
    scaleoutAlertconfigRefs?: pulumi.Input<pulumi.Input<string>[]>;
    scaleoutCooldown?: pulumi.Input<string>;
    scheduledScalings?: pulumi.Input<pulumi.Input<inputs.ServerautoscalepolicyScheduledScaling>[]>;
    tenantRef?: pulumi.Input<string>;
    usePredictedLoad?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Serverautoscalepolicy resource.
 */
export interface ServerautoscalepolicyArgs {
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.ServerautoscalepolicyConfigpbAttribute>[]>;
    delayForServerGarbageCollection?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    intelligentAutoscale?: pulumi.Input<string>;
    intelligentScaleinMargin?: pulumi.Input<string>;
    intelligentScaleoutMargin?: pulumi.Input<string>;
    markers?: pulumi.Input<pulumi.Input<inputs.ServerautoscalepolicyMarker>[]>;
    maxScaleinAdjustmentStep?: pulumi.Input<string>;
    maxScaleoutAdjustmentStep?: pulumi.Input<string>;
    maxSize?: pulumi.Input<string>;
    minSize?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    scaleinAlertconfigRefs?: pulumi.Input<pulumi.Input<string>[]>;
    scaleinCooldown?: pulumi.Input<string>;
    scaleoutAlertconfigRefs?: pulumi.Input<pulumi.Input<string>[]>;
    scaleoutCooldown?: pulumi.Input<string>;
    scheduledScalings?: pulumi.Input<pulumi.Input<inputs.ServerautoscalepolicyScheduledScaling>[]>;
    tenantRef?: pulumi.Input<string>;
    usePredictedLoad?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}
