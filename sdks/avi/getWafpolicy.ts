// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getWafpolicy(args?: GetWafpolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetWafpolicyResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("avi:index/getWafpolicy:getWafpolicy", {
        "id": args.id,
        "name": args.name,
        "tenantRef": args.tenantRef,
        "uuid": args.uuid,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getWafpolicy.
 */
export interface GetWafpolicyArgs {
    id?: string;
    name?: string;
    tenantRef?: string;
    uuid?: string;
}

/**
 * A collection of values returned by getWafpolicy.
 */
export interface GetWafpolicyResult {
    readonly allowModeDelegation: string;
    readonly allowlists: outputs.GetWafpolicyAllowlist[];
    readonly applicationSignatures: outputs.GetWafpolicyApplicationSignature[];
    readonly autoUpdateCrs: string;
    readonly bypassStaticExtensions: string;
    readonly confidenceOverrides: outputs.GetWafpolicyConfidenceOverride[];
    readonly configpbAttributes: outputs.GetWafpolicyConfigpbAttribute[];
    readonly createdBy: string;
    readonly crsOverrides: outputs.GetWafpolicyCrsOverride[];
    readonly description: string;
    readonly enableAppLearning: string;
    readonly enableAutoRuleUpdates: string;
    readonly enableRegexLearning: string;
    readonly failureMode: string;
    readonly geoDbRef: string;
    readonly id: string;
    readonly learningParams: outputs.GetWafpolicyLearningParam[];
    readonly markers: outputs.GetWafpolicyMarker[];
    readonly minConfidence: string;
    readonly mode: string;
    readonly name: string;
    readonly paranoiaLevel: string;
    readonly positiveSecurityModels: outputs.GetWafpolicyPositiveSecurityModel[];
    readonly postCrsGroups: outputs.GetWafpolicyPostCrsGroup[];
    readonly preCrsGroups: outputs.GetWafpolicyPreCrsGroup[];
    readonly requiredDataFiles: outputs.GetWafpolicyRequiredDataFile[];
    readonly tenantRef: string;
    readonly updatedCrsRulesInDetectionMode: string;
    readonly uuid: string;
    readonly wafCrsRef: string;
    readonly wafProfileRef: string;
}
export function getWafpolicyOutput(args?: GetWafpolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWafpolicyResult> {
    return pulumi.output(args).apply((a: any) => getWafpolicy(a, opts))
}

/**
 * A collection of arguments for invoking getWafpolicy.
 */
export interface GetWafpolicyOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}
