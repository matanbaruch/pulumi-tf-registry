// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Image extends pulumi.CustomResource {
    /**
     * Get an existing Image resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageState, opts?: pulumi.CustomResourceOptions): Image {
        return new Image(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'avi:index/image:Image';

    /**
     * Returns true if the given object is an instance of Image.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Image {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Image.__pulumiType;
    }

    public readonly cloudInfoValues!: pulumi.Output<outputs.ImageCloudInfoValue[] | undefined>;
    public readonly controllerInfos!: pulumi.Output<outputs.ImageControllerInfo[] | undefined>;
    public readonly controllerPatchName!: pulumi.Output<string>;
    public readonly controllerPatchRef!: pulumi.Output<string>;
    public readonly duration!: pulumi.Output<string>;
    public readonly endTime!: pulumi.Output<string>;
    public readonly events!: pulumi.Output<outputs.ImageEvent[] | undefined>;
    public readonly fipsModeTransitionApplicable!: pulumi.Output<string | undefined>;
    public readonly imgStates!: pulumi.Output<outputs.ImageImgState[] | undefined>;
    public readonly migrations!: pulumi.Output<outputs.ImageMigration[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly progress!: pulumi.Output<string | undefined>;
    public readonly seInfos!: pulumi.Output<outputs.ImageSeInfo[] | undefined>;
    public readonly sePatchName!: pulumi.Output<string>;
    public readonly sePatchRef!: pulumi.Output<string>;
    public readonly startTime!: pulumi.Output<string>;
    public readonly tasksCompleted!: pulumi.Output<string | undefined>;
    public readonly tenantRef!: pulumi.Output<string>;
    public readonly totalTasks!: pulumi.Output<string | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly uberBundle!: pulumi.Output<string | undefined>;
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Image resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageArgs | ImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageState | undefined;
            resourceInputs["cloudInfoValues"] = state ? state.cloudInfoValues : undefined;
            resourceInputs["controllerInfos"] = state ? state.controllerInfos : undefined;
            resourceInputs["controllerPatchName"] = state ? state.controllerPatchName : undefined;
            resourceInputs["controllerPatchRef"] = state ? state.controllerPatchRef : undefined;
            resourceInputs["duration"] = state ? state.duration : undefined;
            resourceInputs["endTime"] = state ? state.endTime : undefined;
            resourceInputs["events"] = state ? state.events : undefined;
            resourceInputs["fipsModeTransitionApplicable"] = state ? state.fipsModeTransitionApplicable : undefined;
            resourceInputs["imgStates"] = state ? state.imgStates : undefined;
            resourceInputs["migrations"] = state ? state.migrations : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["progress"] = state ? state.progress : undefined;
            resourceInputs["seInfos"] = state ? state.seInfos : undefined;
            resourceInputs["sePatchName"] = state ? state.sePatchName : undefined;
            resourceInputs["sePatchRef"] = state ? state.sePatchRef : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
            resourceInputs["tasksCompleted"] = state ? state.tasksCompleted : undefined;
            resourceInputs["tenantRef"] = state ? state.tenantRef : undefined;
            resourceInputs["totalTasks"] = state ? state.totalTasks : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uberBundle"] = state ? state.uberBundle : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as ImageArgs | undefined;
            resourceInputs["cloudInfoValues"] = args ? args.cloudInfoValues : undefined;
            resourceInputs["controllerInfos"] = args ? args.controllerInfos : undefined;
            resourceInputs["controllerPatchName"] = args ? args.controllerPatchName : undefined;
            resourceInputs["controllerPatchRef"] = args ? args.controllerPatchRef : undefined;
            resourceInputs["duration"] = args ? args.duration : undefined;
            resourceInputs["endTime"] = args ? args.endTime : undefined;
            resourceInputs["events"] = args ? args.events : undefined;
            resourceInputs["fipsModeTransitionApplicable"] = args ? args.fipsModeTransitionApplicable : undefined;
            resourceInputs["imgStates"] = args ? args.imgStates : undefined;
            resourceInputs["migrations"] = args ? args.migrations : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["progress"] = args ? args.progress : undefined;
            resourceInputs["seInfos"] = args ? args.seInfos : undefined;
            resourceInputs["sePatchName"] = args ? args.sePatchName : undefined;
            resourceInputs["sePatchRef"] = args ? args.sePatchRef : undefined;
            resourceInputs["startTime"] = args ? args.startTime : undefined;
            resourceInputs["tasksCompleted"] = args ? args.tasksCompleted : undefined;
            resourceInputs["tenantRef"] = args ? args.tenantRef : undefined;
            resourceInputs["totalTasks"] = args ? args.totalTasks : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["uberBundle"] = args ? args.uberBundle : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Image.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Image resources.
 */
export interface ImageState {
    cloudInfoValues?: pulumi.Input<pulumi.Input<inputs.ImageCloudInfoValue>[]>;
    controllerInfos?: pulumi.Input<pulumi.Input<inputs.ImageControllerInfo>[]>;
    controllerPatchName?: pulumi.Input<string>;
    controllerPatchRef?: pulumi.Input<string>;
    duration?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    events?: pulumi.Input<pulumi.Input<inputs.ImageEvent>[]>;
    fipsModeTransitionApplicable?: pulumi.Input<string>;
    imgStates?: pulumi.Input<pulumi.Input<inputs.ImageImgState>[]>;
    migrations?: pulumi.Input<pulumi.Input<inputs.ImageMigration>[]>;
    name?: pulumi.Input<string>;
    progress?: pulumi.Input<string>;
    seInfos?: pulumi.Input<pulumi.Input<inputs.ImageSeInfo>[]>;
    sePatchName?: pulumi.Input<string>;
    sePatchRef?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    tasksCompleted?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    totalTasks?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    uberBundle?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Image resource.
 */
export interface ImageArgs {
    cloudInfoValues?: pulumi.Input<pulumi.Input<inputs.ImageCloudInfoValue>[]>;
    controllerInfos?: pulumi.Input<pulumi.Input<inputs.ImageControllerInfo>[]>;
    controllerPatchName?: pulumi.Input<string>;
    controllerPatchRef?: pulumi.Input<string>;
    duration?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    events?: pulumi.Input<pulumi.Input<inputs.ImageEvent>[]>;
    fipsModeTransitionApplicable?: pulumi.Input<string>;
    imgStates?: pulumi.Input<pulumi.Input<inputs.ImageImgState>[]>;
    migrations?: pulumi.Input<pulumi.Input<inputs.ImageMigration>[]>;
    name?: pulumi.Input<string>;
    progress?: pulumi.Input<string>;
    seInfos?: pulumi.Input<pulumi.Input<inputs.ImageSeInfo>[]>;
    sePatchName?: pulumi.Input<string>;
    sePatchRef?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    tasksCompleted?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    totalTasks?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    uberBundle?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}
