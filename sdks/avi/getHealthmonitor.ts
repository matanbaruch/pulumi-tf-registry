// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getHealthmonitor(args?: GetHealthmonitorArgs, opts?: pulumi.InvokeOptions): Promise<GetHealthmonitorResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("avi:index/getHealthmonitor:getHealthmonitor", {
        "id": args.id,
        "name": args.name,
        "tenantRef": args.tenantRef,
        "uuid": args.uuid,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getHealthmonitor.
 */
export interface GetHealthmonitorArgs {
    id?: string;
    name?: string;
    tenantRef?: string;
    uuid?: string;
}

/**
 * A collection of values returned by getHealthmonitor.
 */
export interface GetHealthmonitorResult {
    readonly allowDuplicateMonitors: string;
    readonly authentications: outputs.GetHealthmonitorAuthentication[];
    readonly configpbAttributes: outputs.GetHealthmonitorConfigpbAttribute[];
    readonly description: string;
    readonly disableQuickstart: string;
    readonly dnsMonitors: outputs.GetHealthmonitorDnsMonitor[];
    readonly externalMonitors: outputs.GetHealthmonitorExternalMonitor[];
    readonly failedChecks: string;
    readonly ftpMonitors: outputs.GetHealthmonitorFtpMonitor[];
    readonly ftpsMonitors: outputs.GetHealthmonitorFtpsMonitor[];
    readonly httpMonitors: outputs.GetHealthmonitorHttpMonitor[];
    readonly httpsMonitors: outputs.GetHealthmonitorHttpsMonitor[];
    readonly id: string;
    readonly imapMonitors: outputs.GetHealthmonitorImapMonitor[];
    readonly imapsMonitors: outputs.GetHealthmonitorImapsMonitor[];
    readonly isFederated: string;
    readonly ldapMonitors: outputs.GetHealthmonitorLdapMonitor[];
    readonly ldapsMonitors: outputs.GetHealthmonitorLdapsMonitor[];
    readonly markers: outputs.GetHealthmonitorMarker[];
    readonly monitorPort: string;
    readonly name: string;
    readonly pop3Monitors: outputs.GetHealthmonitorPop3Monitor[];
    readonly pop3sMonitors: outputs.GetHealthmonitorPop3sMonitor[];
    readonly radiusMonitors: outputs.GetHealthmonitorRadiusMonitor[];
    readonly receiveTimeout: string;
    readonly sctpMonitors: outputs.GetHealthmonitorSctpMonitor[];
    readonly sendInterval: string;
    readonly sipMonitors: outputs.GetHealthmonitorSipMonitor[];
    readonly smtpMonitors: outputs.GetHealthmonitorSmtpMonitor[];
    readonly smtpsMonitors: outputs.GetHealthmonitorSmtpsMonitor[];
    readonly successfulChecks: string;
    readonly tcpMonitors: outputs.GetHealthmonitorTcpMonitor[];
    readonly tenantRef: string;
    readonly type: string;
    readonly udpMonitors: outputs.GetHealthmonitorUdpMonitor[];
    readonly uuid: string;
}
export function getHealthmonitorOutput(args?: GetHealthmonitorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetHealthmonitorResult> {
    return pulumi.output(args).apply((a: any) => getHealthmonitor(a, opts))
}

/**
 * A collection of arguments for invoking getHealthmonitor.
 */
export interface GetHealthmonitorOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}
