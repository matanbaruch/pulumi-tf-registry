// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAnalyticsprofile(args?: GetAnalyticsprofileArgs, opts?: pulumi.InvokeOptions): Promise<GetAnalyticsprofileResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("avi:index/getAnalyticsprofile:getAnalyticsprofile", {
        "id": args.id,
        "name": args.name,
        "tenantRef": args.tenantRef,
        "uuid": args.uuid,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAnalyticsprofile.
 */
export interface GetAnalyticsprofileArgs {
    id?: string;
    name?: string;
    tenantRef?: string;
    uuid?: string;
}

/**
 * A collection of values returned by getAnalyticsprofile.
 */
export interface GetAnalyticsprofileResult {
    readonly apdexResponseThreshold: string;
    readonly apdexResponseToleratedFactor: string;
    readonly apdexRttThreshold: string;
    readonly apdexRttToleratedFactor: string;
    readonly apdexRumThreshold: string;
    readonly apdexRumToleratedFactor: string;
    readonly apdexServerResponseThreshold: string;
    readonly apdexServerResponseToleratedFactor: string;
    readonly apdexServerRttThreshold: string;
    readonly apdexServerRttToleratedFactor: string;
    readonly clientLogConfigs: outputs.GetAnalyticsprofileClientLogConfig[];
    readonly clientLogStreamingConfigs: outputs.GetAnalyticsprofileClientLogStreamingConfig[];
    readonly configpbAttributes: outputs.GetAnalyticsprofileConfigpbAttribute[];
    readonly connLossyOooThreshold: string;
    readonly connLossyTimeoRexmtThreshold: string;
    readonly connLossyTotalRexmtThreshold: string;
    readonly connLossyZeroWinSizeEventThreshold: string;
    readonly connServerLossyOooThreshold: string;
    readonly connServerLossyTimeoRexmtThreshold: string;
    readonly connServerLossyTotalRexmtThreshold: string;
    readonly connServerLossyZeroWinSizeEventThreshold: string;
    readonly description: string;
    readonly enableAdaptiveConfig: string;
    readonly enableAdvancedAnalytics: string;
    readonly enableOndemandMetrics: string;
    readonly enableSeAnalytics: string;
    readonly enableServerAnalytics: string;
    readonly enableVsAnalytics: string;
    readonly excludeClientCloseBeforeRequestAsError: string;
    readonly excludeDnsPolicyDropAsSignificant: string;
    readonly excludeGsDownAsError: string;
    readonly excludeHttpErrorCodes: number[];
    readonly excludeInvalidDnsDomainAsError: string;
    readonly excludeInvalidDnsQueryAsError: string;
    readonly excludeIssuerRevokedOcspResponsesAsError: string;
    readonly excludeNoDnsRecordAsError: string;
    readonly excludeNoValidGsMemberAsError: string;
    readonly excludePersistenceChangeAsError: string;
    readonly excludeRevokedOcspResponsesAsError: string;
    readonly excludeServerDnsErrorAsError: string;
    readonly excludeServerTcpResetAsError: string;
    readonly excludeSipErrorCodes: number[];
    readonly excludeStaleOcspResponsesAsError: string;
    readonly excludeSynRetransmitAsError: string;
    readonly excludeTcpResetAsError: string;
    readonly excludeUnavailableOcspResponsesAsError: string;
    readonly excludeUnsupportedDnsQueryAsError: string;
    readonly healthscoreMaxServerLimit: string;
    readonly hsEventThrottleWindow: string;
    readonly hsMaxAnomalyPenalty: string;
    readonly hsMaxResourcesPenalty: string;
    readonly hsMaxSecurityPenalty: string;
    readonly hsMinDosRate: string;
    readonly hsPerformanceBoost: string;
    readonly hsPscoreTrafficThresholdL4Client: string;
    readonly hsPscoreTrafficThresholdL4Server: string;
    readonly hsSecurityCertscoreExpired: string;
    readonly hsSecurityCertscoreGt30d: string;
    readonly hsSecurityCertscoreLe07d: string;
    readonly hsSecurityCertscoreLe30d: string;
    readonly hsSecurityChainInvalidityPenalty: string;
    readonly hsSecurityCipherscoreEq000b: string;
    readonly hsSecurityCipherscoreGe128b: string;
    readonly hsSecurityCipherscoreLt128b: string;
    readonly hsSecurityEncalgoScoreNone: string;
    readonly hsSecurityEncalgoScoreRc4: string;
    readonly hsSecurityHstsPenalty: string;
    readonly hsSecurityNonpfsPenalty: string;
    readonly hsSecurityOcspRevokedScore: string;
    readonly hsSecuritySelfsignedcertPenalty: string;
    readonly hsSecuritySsl30Score: string;
    readonly hsSecurityTls10Score: string;
    readonly hsSecurityTls11Score: string;
    readonly hsSecurityTls12Score: string;
    readonly hsSecurityTls13Score: string;
    readonly hsSecurityWeakSignatureAlgoPenalty: string;
    readonly id: string;
    readonly latencyAuditProps: outputs.GetAnalyticsprofileLatencyAuditProp[];
    readonly markers: outputs.GetAnalyticsprofileMarker[];
    readonly name: string;
    readonly ondemandMetricsIdleTimeout: string;
    readonly ranges: outputs.GetAnalyticsprofileRange[];
    readonly respCodeBlocks: string[];
    readonly sensitiveLogProfiles: outputs.GetAnalyticsprofileSensitiveLogProfile[];
    readonly sipLogDepth: string;
    readonly tenantRef: string;
    readonly timeTrackerProps: outputs.GetAnalyticsprofileTimeTrackerProp[];
    readonly uuid: string;
}
export function getAnalyticsprofileOutput(args?: GetAnalyticsprofileOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAnalyticsprofileResult> {
    return pulumi.output(args).apply((a: any) => getAnalyticsprofile(a, opts))
}

/**
 * A collection of arguments for invoking getAnalyticsprofile.
 */
export interface GetAnalyticsprofileOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}
