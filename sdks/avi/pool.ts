// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Pool extends pulumi.CustomResource {
    /**
     * Get an existing Pool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PoolState, opts?: pulumi.CustomResourceOptions): Pool {
        return new Pool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'avi:index/pool:Pool';

    /**
     * Returns true if the given object is an instance of Pool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Pool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pool.__pulumiType;
    }

    public readonly analyticsPolicies!: pulumi.Output<outputs.PoolAnalyticsPolicy[] | undefined>;
    public readonly analyticsProfileRef!: pulumi.Output<string>;
    public readonly appendPort!: pulumi.Output<string | undefined>;
    public readonly applicationPersistenceProfileRef!: pulumi.Output<string>;
    public readonly autoscaleLaunchConfigRef!: pulumi.Output<string>;
    public readonly autoscaleNetworks!: pulumi.Output<string[] | undefined>;
    public readonly autoscalePolicyRef!: pulumi.Output<string>;
    public readonly capacityEstimation!: pulumi.Output<string | undefined>;
    public readonly capacityEstimationTtfbThresh!: pulumi.Output<string | undefined>;
    public readonly cloudConfigCksum!: pulumi.Output<string>;
    public readonly cloudRef!: pulumi.Output<string>;
    public readonly configpbAttributes!: pulumi.Output<outputs.PoolConfigpbAttribute[] | undefined>;
    public readonly connPoolProperties!: pulumi.Output<outputs.PoolConnPoolProperty[] | undefined>;
    public readonly connectionRampDuration!: pulumi.Output<string | undefined>;
    public readonly createdBy!: pulumi.Output<string>;
    public readonly defaultServerPort!: pulumi.Output<string | undefined>;
    public readonly deleteServerOnDnsRefresh!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly domainNames!: pulumi.Output<string[] | undefined>;
    public readonly eastWest!: pulumi.Output<string>;
    public readonly enableHttp2!: pulumi.Output<string | undefined>;
    public readonly enabled!: pulumi.Output<string | undefined>;
    public readonly externalAutoscaleGroups!: pulumi.Output<string[] | undefined>;
    public readonly failActions!: pulumi.Output<outputs.PoolFailAction[] | undefined>;
    public readonly fewestTasksFeedbackDelay!: pulumi.Output<string | undefined>;
    public readonly gracefulDisableTimeout!: pulumi.Output<string | undefined>;
    public readonly gracefulHmDownDisableTimeout!: pulumi.Output<string | undefined>;
    public readonly gslbSpEnabled!: pulumi.Output<string>;
    public readonly healthMonitorRefs!: pulumi.Output<string[] | undefined>;
    public readonly horizonProfiles!: pulumi.Output<outputs.PoolHorizonProfile[] | undefined>;
    public readonly hostCheckEnabled!: pulumi.Output<string | undefined>;
    public readonly http2Properties!: pulumi.Output<outputs.PoolHttp2Property[] | undefined>;
    public readonly ignoreServerPort!: pulumi.Output<string | undefined>;
    public readonly ignoreServers!: pulumi.Output<boolean | undefined>;
    public readonly inlineHealthMonitor!: pulumi.Output<string | undefined>;
    public readonly ipaddrgroupRef!: pulumi.Output<string>;
    public readonly lbAlgoRrPerSe!: pulumi.Output<string | undefined>;
    public readonly lbAlgorithm!: pulumi.Output<string | undefined>;
    public readonly lbAlgorithmConsistentHashHdr!: pulumi.Output<string>;
    public readonly lbAlgorithmCoreNonaffinity!: pulumi.Output<string | undefined>;
    public readonly lbAlgorithmHash!: pulumi.Output<string | undefined>;
    public readonly lookupServerByName!: pulumi.Output<string | undefined>;
    public readonly markers!: pulumi.Output<outputs.PoolMarker[] | undefined>;
    public readonly maxConcurrentConnectionsPerServer!: pulumi.Output<string | undefined>;
    public readonly maxConnRatePerServers!: pulumi.Output<outputs.PoolMaxConnRatePerServer[] | undefined>;
    public readonly minHealthMonitorsUp!: pulumi.Output<string>;
    public readonly minServersUp!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly networks!: pulumi.Output<outputs.PoolNetwork[] | undefined>;
    public readonly nsxSecuritygroups!: pulumi.Output<string[] | undefined>;
    public readonly pkiProfileRef!: pulumi.Output<string>;
    public readonly placementNetworks!: pulumi.Output<outputs.PoolPlacementNetwork[] | undefined>;
    public readonly poolType!: pulumi.Output<string | undefined>;
    public readonly requestQueueDepth!: pulumi.Output<string | undefined>;
    public readonly requestQueueEnabled!: pulumi.Output<string | undefined>;
    public readonly resolvePoolByDns!: pulumi.Output<string>;
    public readonly rewriteHostHeaderToServerName!: pulumi.Output<string | undefined>;
    public readonly rewriteHostHeaderToSni!: pulumi.Output<string | undefined>;
    public readonly routingPool!: pulumi.Output<string | undefined>;
    public readonly serverDisableType!: pulumi.Output<string | undefined>;
    public readonly serverName!: pulumi.Output<string>;
    public readonly serverReselects!: pulumi.Output<outputs.PoolServerReselect[] | undefined>;
    public readonly serverTimeout!: pulumi.Output<string | undefined>;
    public readonly servers!: pulumi.Output<outputs.PoolServer[] | undefined>;
    public readonly serviceMetadata!: pulumi.Output<string>;
    public readonly sniEnabled!: pulumi.Output<string | undefined>;
    public readonly spGsInfos!: pulumi.Output<outputs.PoolSpGsInfo[] | undefined>;
    public readonly sslKeyAndCertificateRef!: pulumi.Output<string>;
    public readonly sslProfileRef!: pulumi.Output<string>;
    public readonly tenantRef!: pulumi.Output<string>;
    public readonly tier1Lr!: pulumi.Output<string>;
    public readonly useServicePort!: pulumi.Output<string | undefined>;
    public readonly useServiceSslMode!: pulumi.Output<string | undefined>;
    public readonly uuid!: pulumi.Output<string>;
    public readonly vrfRef!: pulumi.Output<string>;

    /**
     * Create a Pool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PoolArgs | PoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PoolState | undefined;
            resourceInputs["analyticsPolicies"] = state ? state.analyticsPolicies : undefined;
            resourceInputs["analyticsProfileRef"] = state ? state.analyticsProfileRef : undefined;
            resourceInputs["appendPort"] = state ? state.appendPort : undefined;
            resourceInputs["applicationPersistenceProfileRef"] = state ? state.applicationPersistenceProfileRef : undefined;
            resourceInputs["autoscaleLaunchConfigRef"] = state ? state.autoscaleLaunchConfigRef : undefined;
            resourceInputs["autoscaleNetworks"] = state ? state.autoscaleNetworks : undefined;
            resourceInputs["autoscalePolicyRef"] = state ? state.autoscalePolicyRef : undefined;
            resourceInputs["capacityEstimation"] = state ? state.capacityEstimation : undefined;
            resourceInputs["capacityEstimationTtfbThresh"] = state ? state.capacityEstimationTtfbThresh : undefined;
            resourceInputs["cloudConfigCksum"] = state ? state.cloudConfigCksum : undefined;
            resourceInputs["cloudRef"] = state ? state.cloudRef : undefined;
            resourceInputs["configpbAttributes"] = state ? state.configpbAttributes : undefined;
            resourceInputs["connPoolProperties"] = state ? state.connPoolProperties : undefined;
            resourceInputs["connectionRampDuration"] = state ? state.connectionRampDuration : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["defaultServerPort"] = state ? state.defaultServerPort : undefined;
            resourceInputs["deleteServerOnDnsRefresh"] = state ? state.deleteServerOnDnsRefresh : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domainNames"] = state ? state.domainNames : undefined;
            resourceInputs["eastWest"] = state ? state.eastWest : undefined;
            resourceInputs["enableHttp2"] = state ? state.enableHttp2 : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["externalAutoscaleGroups"] = state ? state.externalAutoscaleGroups : undefined;
            resourceInputs["failActions"] = state ? state.failActions : undefined;
            resourceInputs["fewestTasksFeedbackDelay"] = state ? state.fewestTasksFeedbackDelay : undefined;
            resourceInputs["gracefulDisableTimeout"] = state ? state.gracefulDisableTimeout : undefined;
            resourceInputs["gracefulHmDownDisableTimeout"] = state ? state.gracefulHmDownDisableTimeout : undefined;
            resourceInputs["gslbSpEnabled"] = state ? state.gslbSpEnabled : undefined;
            resourceInputs["healthMonitorRefs"] = state ? state.healthMonitorRefs : undefined;
            resourceInputs["horizonProfiles"] = state ? state.horizonProfiles : undefined;
            resourceInputs["hostCheckEnabled"] = state ? state.hostCheckEnabled : undefined;
            resourceInputs["http2Properties"] = state ? state.http2Properties : undefined;
            resourceInputs["ignoreServerPort"] = state ? state.ignoreServerPort : undefined;
            resourceInputs["ignoreServers"] = state ? state.ignoreServers : undefined;
            resourceInputs["inlineHealthMonitor"] = state ? state.inlineHealthMonitor : undefined;
            resourceInputs["ipaddrgroupRef"] = state ? state.ipaddrgroupRef : undefined;
            resourceInputs["lbAlgoRrPerSe"] = state ? state.lbAlgoRrPerSe : undefined;
            resourceInputs["lbAlgorithm"] = state ? state.lbAlgorithm : undefined;
            resourceInputs["lbAlgorithmConsistentHashHdr"] = state ? state.lbAlgorithmConsistentHashHdr : undefined;
            resourceInputs["lbAlgorithmCoreNonaffinity"] = state ? state.lbAlgorithmCoreNonaffinity : undefined;
            resourceInputs["lbAlgorithmHash"] = state ? state.lbAlgorithmHash : undefined;
            resourceInputs["lookupServerByName"] = state ? state.lookupServerByName : undefined;
            resourceInputs["markers"] = state ? state.markers : undefined;
            resourceInputs["maxConcurrentConnectionsPerServer"] = state ? state.maxConcurrentConnectionsPerServer : undefined;
            resourceInputs["maxConnRatePerServers"] = state ? state.maxConnRatePerServers : undefined;
            resourceInputs["minHealthMonitorsUp"] = state ? state.minHealthMonitorsUp : undefined;
            resourceInputs["minServersUp"] = state ? state.minServersUp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["nsxSecuritygroups"] = state ? state.nsxSecuritygroups : undefined;
            resourceInputs["pkiProfileRef"] = state ? state.pkiProfileRef : undefined;
            resourceInputs["placementNetworks"] = state ? state.placementNetworks : undefined;
            resourceInputs["poolType"] = state ? state.poolType : undefined;
            resourceInputs["requestQueueDepth"] = state ? state.requestQueueDepth : undefined;
            resourceInputs["requestQueueEnabled"] = state ? state.requestQueueEnabled : undefined;
            resourceInputs["resolvePoolByDns"] = state ? state.resolvePoolByDns : undefined;
            resourceInputs["rewriteHostHeaderToServerName"] = state ? state.rewriteHostHeaderToServerName : undefined;
            resourceInputs["rewriteHostHeaderToSni"] = state ? state.rewriteHostHeaderToSni : undefined;
            resourceInputs["routingPool"] = state ? state.routingPool : undefined;
            resourceInputs["serverDisableType"] = state ? state.serverDisableType : undefined;
            resourceInputs["serverName"] = state ? state.serverName : undefined;
            resourceInputs["serverReselects"] = state ? state.serverReselects : undefined;
            resourceInputs["serverTimeout"] = state ? state.serverTimeout : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
            resourceInputs["serviceMetadata"] = state ? state.serviceMetadata : undefined;
            resourceInputs["sniEnabled"] = state ? state.sniEnabled : undefined;
            resourceInputs["spGsInfos"] = state ? state.spGsInfos : undefined;
            resourceInputs["sslKeyAndCertificateRef"] = state ? state.sslKeyAndCertificateRef : undefined;
            resourceInputs["sslProfileRef"] = state ? state.sslProfileRef : undefined;
            resourceInputs["tenantRef"] = state ? state.tenantRef : undefined;
            resourceInputs["tier1Lr"] = state ? state.tier1Lr : undefined;
            resourceInputs["useServicePort"] = state ? state.useServicePort : undefined;
            resourceInputs["useServiceSslMode"] = state ? state.useServiceSslMode : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vrfRef"] = state ? state.vrfRef : undefined;
        } else {
            const args = argsOrState as PoolArgs | undefined;
            resourceInputs["analyticsPolicies"] = args ? args.analyticsPolicies : undefined;
            resourceInputs["analyticsProfileRef"] = args ? args.analyticsProfileRef : undefined;
            resourceInputs["appendPort"] = args ? args.appendPort : undefined;
            resourceInputs["applicationPersistenceProfileRef"] = args ? args.applicationPersistenceProfileRef : undefined;
            resourceInputs["autoscaleLaunchConfigRef"] = args ? args.autoscaleLaunchConfigRef : undefined;
            resourceInputs["autoscaleNetworks"] = args ? args.autoscaleNetworks : undefined;
            resourceInputs["autoscalePolicyRef"] = args ? args.autoscalePolicyRef : undefined;
            resourceInputs["capacityEstimation"] = args ? args.capacityEstimation : undefined;
            resourceInputs["capacityEstimationTtfbThresh"] = args ? args.capacityEstimationTtfbThresh : undefined;
            resourceInputs["cloudConfigCksum"] = args ? args.cloudConfigCksum : undefined;
            resourceInputs["cloudRef"] = args ? args.cloudRef : undefined;
            resourceInputs["configpbAttributes"] = args ? args.configpbAttributes : undefined;
            resourceInputs["connPoolProperties"] = args ? args.connPoolProperties : undefined;
            resourceInputs["connectionRampDuration"] = args ? args.connectionRampDuration : undefined;
            resourceInputs["createdBy"] = args ? args.createdBy : undefined;
            resourceInputs["defaultServerPort"] = args ? args.defaultServerPort : undefined;
            resourceInputs["deleteServerOnDnsRefresh"] = args ? args.deleteServerOnDnsRefresh : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domainNames"] = args ? args.domainNames : undefined;
            resourceInputs["eastWest"] = args ? args.eastWest : undefined;
            resourceInputs["enableHttp2"] = args ? args.enableHttp2 : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["externalAutoscaleGroups"] = args ? args.externalAutoscaleGroups : undefined;
            resourceInputs["failActions"] = args ? args.failActions : undefined;
            resourceInputs["fewestTasksFeedbackDelay"] = args ? args.fewestTasksFeedbackDelay : undefined;
            resourceInputs["gracefulDisableTimeout"] = args ? args.gracefulDisableTimeout : undefined;
            resourceInputs["gracefulHmDownDisableTimeout"] = args ? args.gracefulHmDownDisableTimeout : undefined;
            resourceInputs["gslbSpEnabled"] = args ? args.gslbSpEnabled : undefined;
            resourceInputs["healthMonitorRefs"] = args ? args.healthMonitorRefs : undefined;
            resourceInputs["horizonProfiles"] = args ? args.horizonProfiles : undefined;
            resourceInputs["hostCheckEnabled"] = args ? args.hostCheckEnabled : undefined;
            resourceInputs["http2Properties"] = args ? args.http2Properties : undefined;
            resourceInputs["ignoreServerPort"] = args ? args.ignoreServerPort : undefined;
            resourceInputs["ignoreServers"] = args ? args.ignoreServers : undefined;
            resourceInputs["inlineHealthMonitor"] = args ? args.inlineHealthMonitor : undefined;
            resourceInputs["ipaddrgroupRef"] = args ? args.ipaddrgroupRef : undefined;
            resourceInputs["lbAlgoRrPerSe"] = args ? args.lbAlgoRrPerSe : undefined;
            resourceInputs["lbAlgorithm"] = args ? args.lbAlgorithm : undefined;
            resourceInputs["lbAlgorithmConsistentHashHdr"] = args ? args.lbAlgorithmConsistentHashHdr : undefined;
            resourceInputs["lbAlgorithmCoreNonaffinity"] = args ? args.lbAlgorithmCoreNonaffinity : undefined;
            resourceInputs["lbAlgorithmHash"] = args ? args.lbAlgorithmHash : undefined;
            resourceInputs["lookupServerByName"] = args ? args.lookupServerByName : undefined;
            resourceInputs["markers"] = args ? args.markers : undefined;
            resourceInputs["maxConcurrentConnectionsPerServer"] = args ? args.maxConcurrentConnectionsPerServer : undefined;
            resourceInputs["maxConnRatePerServers"] = args ? args.maxConnRatePerServers : undefined;
            resourceInputs["minHealthMonitorsUp"] = args ? args.minHealthMonitorsUp : undefined;
            resourceInputs["minServersUp"] = args ? args.minServersUp : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["nsxSecuritygroups"] = args ? args.nsxSecuritygroups : undefined;
            resourceInputs["pkiProfileRef"] = args ? args.pkiProfileRef : undefined;
            resourceInputs["placementNetworks"] = args ? args.placementNetworks : undefined;
            resourceInputs["poolType"] = args ? args.poolType : undefined;
            resourceInputs["requestQueueDepth"] = args ? args.requestQueueDepth : undefined;
            resourceInputs["requestQueueEnabled"] = args ? args.requestQueueEnabled : undefined;
            resourceInputs["resolvePoolByDns"] = args ? args.resolvePoolByDns : undefined;
            resourceInputs["rewriteHostHeaderToServerName"] = args ? args.rewriteHostHeaderToServerName : undefined;
            resourceInputs["rewriteHostHeaderToSni"] = args ? args.rewriteHostHeaderToSni : undefined;
            resourceInputs["routingPool"] = args ? args.routingPool : undefined;
            resourceInputs["serverDisableType"] = args ? args.serverDisableType : undefined;
            resourceInputs["serverName"] = args ? args.serverName : undefined;
            resourceInputs["serverReselects"] = args ? args.serverReselects : undefined;
            resourceInputs["serverTimeout"] = args ? args.serverTimeout : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
            resourceInputs["serviceMetadata"] = args ? args.serviceMetadata : undefined;
            resourceInputs["sniEnabled"] = args ? args.sniEnabled : undefined;
            resourceInputs["spGsInfos"] = args ? args.spGsInfos : undefined;
            resourceInputs["sslKeyAndCertificateRef"] = args ? args.sslKeyAndCertificateRef : undefined;
            resourceInputs["sslProfileRef"] = args ? args.sslProfileRef : undefined;
            resourceInputs["tenantRef"] = args ? args.tenantRef : undefined;
            resourceInputs["tier1Lr"] = args ? args.tier1Lr : undefined;
            resourceInputs["useServicePort"] = args ? args.useServicePort : undefined;
            resourceInputs["useServiceSslMode"] = args ? args.useServiceSslMode : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vrfRef"] = args ? args.vrfRef : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Pool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Pool resources.
 */
export interface PoolState {
    analyticsPolicies?: pulumi.Input<pulumi.Input<inputs.PoolAnalyticsPolicy>[]>;
    analyticsProfileRef?: pulumi.Input<string>;
    appendPort?: pulumi.Input<string>;
    applicationPersistenceProfileRef?: pulumi.Input<string>;
    autoscaleLaunchConfigRef?: pulumi.Input<string>;
    autoscaleNetworks?: pulumi.Input<pulumi.Input<string>[]>;
    autoscalePolicyRef?: pulumi.Input<string>;
    capacityEstimation?: pulumi.Input<string>;
    capacityEstimationTtfbThresh?: pulumi.Input<string>;
    cloudConfigCksum?: pulumi.Input<string>;
    cloudRef?: pulumi.Input<string>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.PoolConfigpbAttribute>[]>;
    connPoolProperties?: pulumi.Input<pulumi.Input<inputs.PoolConnPoolProperty>[]>;
    connectionRampDuration?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    defaultServerPort?: pulumi.Input<string>;
    deleteServerOnDnsRefresh?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainNames?: pulumi.Input<pulumi.Input<string>[]>;
    eastWest?: pulumi.Input<string>;
    enableHttp2?: pulumi.Input<string>;
    enabled?: pulumi.Input<string>;
    externalAutoscaleGroups?: pulumi.Input<pulumi.Input<string>[]>;
    failActions?: pulumi.Input<pulumi.Input<inputs.PoolFailAction>[]>;
    fewestTasksFeedbackDelay?: pulumi.Input<string>;
    gracefulDisableTimeout?: pulumi.Input<string>;
    gracefulHmDownDisableTimeout?: pulumi.Input<string>;
    gslbSpEnabled?: pulumi.Input<string>;
    healthMonitorRefs?: pulumi.Input<pulumi.Input<string>[]>;
    horizonProfiles?: pulumi.Input<pulumi.Input<inputs.PoolHorizonProfile>[]>;
    hostCheckEnabled?: pulumi.Input<string>;
    http2Properties?: pulumi.Input<pulumi.Input<inputs.PoolHttp2Property>[]>;
    ignoreServerPort?: pulumi.Input<string>;
    ignoreServers?: pulumi.Input<boolean>;
    inlineHealthMonitor?: pulumi.Input<string>;
    ipaddrgroupRef?: pulumi.Input<string>;
    lbAlgoRrPerSe?: pulumi.Input<string>;
    lbAlgorithm?: pulumi.Input<string>;
    lbAlgorithmConsistentHashHdr?: pulumi.Input<string>;
    lbAlgorithmCoreNonaffinity?: pulumi.Input<string>;
    lbAlgorithmHash?: pulumi.Input<string>;
    lookupServerByName?: pulumi.Input<string>;
    markers?: pulumi.Input<pulumi.Input<inputs.PoolMarker>[]>;
    maxConcurrentConnectionsPerServer?: pulumi.Input<string>;
    maxConnRatePerServers?: pulumi.Input<pulumi.Input<inputs.PoolMaxConnRatePerServer>[]>;
    minHealthMonitorsUp?: pulumi.Input<string>;
    minServersUp?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.PoolNetwork>[]>;
    nsxSecuritygroups?: pulumi.Input<pulumi.Input<string>[]>;
    pkiProfileRef?: pulumi.Input<string>;
    placementNetworks?: pulumi.Input<pulumi.Input<inputs.PoolPlacementNetwork>[]>;
    poolType?: pulumi.Input<string>;
    requestQueueDepth?: pulumi.Input<string>;
    requestQueueEnabled?: pulumi.Input<string>;
    resolvePoolByDns?: pulumi.Input<string>;
    rewriteHostHeaderToServerName?: pulumi.Input<string>;
    rewriteHostHeaderToSni?: pulumi.Input<string>;
    routingPool?: pulumi.Input<string>;
    serverDisableType?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
    serverReselects?: pulumi.Input<pulumi.Input<inputs.PoolServerReselect>[]>;
    serverTimeout?: pulumi.Input<string>;
    servers?: pulumi.Input<pulumi.Input<inputs.PoolServer>[]>;
    serviceMetadata?: pulumi.Input<string>;
    sniEnabled?: pulumi.Input<string>;
    spGsInfos?: pulumi.Input<pulumi.Input<inputs.PoolSpGsInfo>[]>;
    sslKeyAndCertificateRef?: pulumi.Input<string>;
    sslProfileRef?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    tier1Lr?: pulumi.Input<string>;
    useServicePort?: pulumi.Input<string>;
    useServiceSslMode?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    vrfRef?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Pool resource.
 */
export interface PoolArgs {
    analyticsPolicies?: pulumi.Input<pulumi.Input<inputs.PoolAnalyticsPolicy>[]>;
    analyticsProfileRef?: pulumi.Input<string>;
    appendPort?: pulumi.Input<string>;
    applicationPersistenceProfileRef?: pulumi.Input<string>;
    autoscaleLaunchConfigRef?: pulumi.Input<string>;
    autoscaleNetworks?: pulumi.Input<pulumi.Input<string>[]>;
    autoscalePolicyRef?: pulumi.Input<string>;
    capacityEstimation?: pulumi.Input<string>;
    capacityEstimationTtfbThresh?: pulumi.Input<string>;
    cloudConfigCksum?: pulumi.Input<string>;
    cloudRef?: pulumi.Input<string>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.PoolConfigpbAttribute>[]>;
    connPoolProperties?: pulumi.Input<pulumi.Input<inputs.PoolConnPoolProperty>[]>;
    connectionRampDuration?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    defaultServerPort?: pulumi.Input<string>;
    deleteServerOnDnsRefresh?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainNames?: pulumi.Input<pulumi.Input<string>[]>;
    eastWest?: pulumi.Input<string>;
    enableHttp2?: pulumi.Input<string>;
    enabled?: pulumi.Input<string>;
    externalAutoscaleGroups?: pulumi.Input<pulumi.Input<string>[]>;
    failActions?: pulumi.Input<pulumi.Input<inputs.PoolFailAction>[]>;
    fewestTasksFeedbackDelay?: pulumi.Input<string>;
    gracefulDisableTimeout?: pulumi.Input<string>;
    gracefulHmDownDisableTimeout?: pulumi.Input<string>;
    gslbSpEnabled?: pulumi.Input<string>;
    healthMonitorRefs?: pulumi.Input<pulumi.Input<string>[]>;
    horizonProfiles?: pulumi.Input<pulumi.Input<inputs.PoolHorizonProfile>[]>;
    hostCheckEnabled?: pulumi.Input<string>;
    http2Properties?: pulumi.Input<pulumi.Input<inputs.PoolHttp2Property>[]>;
    ignoreServerPort?: pulumi.Input<string>;
    ignoreServers?: pulumi.Input<boolean>;
    inlineHealthMonitor?: pulumi.Input<string>;
    ipaddrgroupRef?: pulumi.Input<string>;
    lbAlgoRrPerSe?: pulumi.Input<string>;
    lbAlgorithm?: pulumi.Input<string>;
    lbAlgorithmConsistentHashHdr?: pulumi.Input<string>;
    lbAlgorithmCoreNonaffinity?: pulumi.Input<string>;
    lbAlgorithmHash?: pulumi.Input<string>;
    lookupServerByName?: pulumi.Input<string>;
    markers?: pulumi.Input<pulumi.Input<inputs.PoolMarker>[]>;
    maxConcurrentConnectionsPerServer?: pulumi.Input<string>;
    maxConnRatePerServers?: pulumi.Input<pulumi.Input<inputs.PoolMaxConnRatePerServer>[]>;
    minHealthMonitorsUp?: pulumi.Input<string>;
    minServersUp?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.PoolNetwork>[]>;
    nsxSecuritygroups?: pulumi.Input<pulumi.Input<string>[]>;
    pkiProfileRef?: pulumi.Input<string>;
    placementNetworks?: pulumi.Input<pulumi.Input<inputs.PoolPlacementNetwork>[]>;
    poolType?: pulumi.Input<string>;
    requestQueueDepth?: pulumi.Input<string>;
    requestQueueEnabled?: pulumi.Input<string>;
    resolvePoolByDns?: pulumi.Input<string>;
    rewriteHostHeaderToServerName?: pulumi.Input<string>;
    rewriteHostHeaderToSni?: pulumi.Input<string>;
    routingPool?: pulumi.Input<string>;
    serverDisableType?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
    serverReselects?: pulumi.Input<pulumi.Input<inputs.PoolServerReselect>[]>;
    serverTimeout?: pulumi.Input<string>;
    servers?: pulumi.Input<pulumi.Input<inputs.PoolServer>[]>;
    serviceMetadata?: pulumi.Input<string>;
    sniEnabled?: pulumi.Input<string>;
    spGsInfos?: pulumi.Input<pulumi.Input<inputs.PoolSpGsInfo>[]>;
    sslKeyAndCertificateRef?: pulumi.Input<string>;
    sslProfileRef?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    tier1Lr?: pulumi.Input<string>;
    useServicePort?: pulumi.Input<string>;
    useServiceSslMode?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    vrfRef?: pulumi.Input<string>;
}
