// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Nsxtsegmentruntime extends pulumi.CustomResource {
    /**
     * Get an existing Nsxtsegmentruntime resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NsxtsegmentruntimeState, opts?: pulumi.CustomResourceOptions): Nsxtsegmentruntime {
        return new Nsxtsegmentruntime(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'avi:index/nsxtsegmentruntime:Nsxtsegmentruntime';

    /**
     * Returns true if the given object is an instance of Nsxtsegmentruntime.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Nsxtsegmentruntime {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Nsxtsegmentruntime.__pulumiType;
    }

    public readonly cloudRef!: pulumi.Output<string>;
    public readonly dhcp6Ranges!: pulumi.Output<string[] | undefined>;
    public readonly dhcpEnabled!: pulumi.Output<string | undefined>;
    public readonly dhcpRanges!: pulumi.Output<string[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nwName!: pulumi.Output<string>;
    public readonly nwRef!: pulumi.Output<string>;
    public readonly opaqueNetworkId!: pulumi.Output<string>;
    public readonly originId!: pulumi.Output<string>;
    public readonly securityOnlyNsxt!: pulumi.Output<string | undefined>;
    public readonly segmentGw!: pulumi.Output<string>;
    public readonly segmentGw6!: pulumi.Output<string>;
    public readonly segmentId!: pulumi.Output<string>;
    public readonly segname!: pulumi.Output<string>;
    public readonly subnet!: pulumi.Output<string>;
    public readonly subnet6!: pulumi.Output<string>;
    public readonly tenantRef!: pulumi.Output<string>;
    public readonly tier1Id!: pulumi.Output<string>;
    public readonly uuid!: pulumi.Output<string>;
    public readonly vlanIds!: pulumi.Output<string[] | undefined>;
    public readonly vrfContextRef!: pulumi.Output<string>;

    /**
     * Create a Nsxtsegmentruntime resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NsxtsegmentruntimeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NsxtsegmentruntimeArgs | NsxtsegmentruntimeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NsxtsegmentruntimeState | undefined;
            resourceInputs["cloudRef"] = state ? state.cloudRef : undefined;
            resourceInputs["dhcp6Ranges"] = state ? state.dhcp6Ranges : undefined;
            resourceInputs["dhcpEnabled"] = state ? state.dhcpEnabled : undefined;
            resourceInputs["dhcpRanges"] = state ? state.dhcpRanges : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nwName"] = state ? state.nwName : undefined;
            resourceInputs["nwRef"] = state ? state.nwRef : undefined;
            resourceInputs["opaqueNetworkId"] = state ? state.opaqueNetworkId : undefined;
            resourceInputs["originId"] = state ? state.originId : undefined;
            resourceInputs["securityOnlyNsxt"] = state ? state.securityOnlyNsxt : undefined;
            resourceInputs["segmentGw"] = state ? state.segmentGw : undefined;
            resourceInputs["segmentGw6"] = state ? state.segmentGw6 : undefined;
            resourceInputs["segmentId"] = state ? state.segmentId : undefined;
            resourceInputs["segname"] = state ? state.segname : undefined;
            resourceInputs["subnet"] = state ? state.subnet : undefined;
            resourceInputs["subnet6"] = state ? state.subnet6 : undefined;
            resourceInputs["tenantRef"] = state ? state.tenantRef : undefined;
            resourceInputs["tier1Id"] = state ? state.tier1Id : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vlanIds"] = state ? state.vlanIds : undefined;
            resourceInputs["vrfContextRef"] = state ? state.vrfContextRef : undefined;
        } else {
            const args = argsOrState as NsxtsegmentruntimeArgs | undefined;
            resourceInputs["cloudRef"] = args ? args.cloudRef : undefined;
            resourceInputs["dhcp6Ranges"] = args ? args.dhcp6Ranges : undefined;
            resourceInputs["dhcpEnabled"] = args ? args.dhcpEnabled : undefined;
            resourceInputs["dhcpRanges"] = args ? args.dhcpRanges : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nwName"] = args ? args.nwName : undefined;
            resourceInputs["nwRef"] = args ? args.nwRef : undefined;
            resourceInputs["opaqueNetworkId"] = args ? args.opaqueNetworkId : undefined;
            resourceInputs["originId"] = args ? args.originId : undefined;
            resourceInputs["securityOnlyNsxt"] = args ? args.securityOnlyNsxt : undefined;
            resourceInputs["segmentGw"] = args ? args.segmentGw : undefined;
            resourceInputs["segmentGw6"] = args ? args.segmentGw6 : undefined;
            resourceInputs["segmentId"] = args ? args.segmentId : undefined;
            resourceInputs["segname"] = args ? args.segname : undefined;
            resourceInputs["subnet"] = args ? args.subnet : undefined;
            resourceInputs["subnet6"] = args ? args.subnet6 : undefined;
            resourceInputs["tenantRef"] = args ? args.tenantRef : undefined;
            resourceInputs["tier1Id"] = args ? args.tier1Id : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vlanIds"] = args ? args.vlanIds : undefined;
            resourceInputs["vrfContextRef"] = args ? args.vrfContextRef : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Nsxtsegmentruntime.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Nsxtsegmentruntime resources.
 */
export interface NsxtsegmentruntimeState {
    cloudRef?: pulumi.Input<string>;
    dhcp6Ranges?: pulumi.Input<pulumi.Input<string>[]>;
    dhcpEnabled?: pulumi.Input<string>;
    dhcpRanges?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    nwName?: pulumi.Input<string>;
    nwRef?: pulumi.Input<string>;
    opaqueNetworkId?: pulumi.Input<string>;
    originId?: pulumi.Input<string>;
    securityOnlyNsxt?: pulumi.Input<string>;
    segmentGw?: pulumi.Input<string>;
    segmentGw6?: pulumi.Input<string>;
    segmentId?: pulumi.Input<string>;
    segname?: pulumi.Input<string>;
    subnet?: pulumi.Input<string>;
    subnet6?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    tier1Id?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    vlanIds?: pulumi.Input<pulumi.Input<string>[]>;
    vrfContextRef?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Nsxtsegmentruntime resource.
 */
export interface NsxtsegmentruntimeArgs {
    cloudRef?: pulumi.Input<string>;
    dhcp6Ranges?: pulumi.Input<pulumi.Input<string>[]>;
    dhcpEnabled?: pulumi.Input<string>;
    dhcpRanges?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    nwName?: pulumi.Input<string>;
    nwRef?: pulumi.Input<string>;
    opaqueNetworkId?: pulumi.Input<string>;
    originId?: pulumi.Input<string>;
    securityOnlyNsxt?: pulumi.Input<string>;
    segmentGw?: pulumi.Input<string>;
    segmentGw6?: pulumi.Input<string>;
    segmentId?: pulumi.Input<string>;
    segname?: pulumi.Input<string>;
    subnet?: pulumi.Input<string>;
    subnet6?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    tier1Id?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    vlanIds?: pulumi.Input<pulumi.Input<string>[]>;
    vrfContextRef?: pulumi.Input<string>;
}
