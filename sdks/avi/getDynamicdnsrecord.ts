// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDynamicdnsrecord(args?: GetDynamicdnsrecordArgs, opts?: pulumi.InvokeOptions): Promise<GetDynamicdnsrecordResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("avi:index/getDynamicdnsrecord:getDynamicdnsrecord", {
        "id": args.id,
        "name": args.name,
        "tenantRef": args.tenantRef,
        "uuid": args.uuid,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDynamicdnsrecord.
 */
export interface GetDynamicdnsrecordArgs {
    id?: string;
    name?: string;
    tenantRef?: string;
    uuid?: string;
}

/**
 * A collection of values returned by getDynamicdnsrecord.
 */
export interface GetDynamicdnsrecordResult {
    readonly algorithm: string;
    readonly cnames: outputs.GetDynamicdnsrecordCname[];
    readonly delegated: string;
    readonly description: string;
    readonly dnsVsUuid: string;
    readonly fqdn: string;
    readonly id: string;
    readonly ip6Addresses: outputs.GetDynamicdnsrecordIp6Address[];
    readonly ipAddresses: outputs.GetDynamicdnsrecordIpAddress[];
    readonly metadata: string;
    readonly mxRecords: outputs.GetDynamicdnsrecordMxRecord[];
    readonly name: string;
    readonly ns: outputs.GetDynamicdnsrecordN[];
    readonly numRecordsInResponse: string;
    readonly serviceLocators: outputs.GetDynamicdnsrecordServiceLocator[];
    readonly tenantRef: string;
    readonly ttl: string;
    readonly txtRecords: outputs.GetDynamicdnsrecordTxtRecord[];
    readonly type: string;
    readonly uuid: string;
    readonly wildcardMatch: string;
}
export function getDynamicdnsrecordOutput(args?: GetDynamicdnsrecordOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDynamicdnsrecordResult> {
    return pulumi.output(args).apply((a: any) => getDynamicdnsrecord(a, opts))
}

/**
 * A collection of arguments for invoking getDynamicdnsrecord.
 */
export interface GetDynamicdnsrecordOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}
