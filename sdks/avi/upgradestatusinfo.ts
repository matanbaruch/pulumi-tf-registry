// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Upgradestatusinfo extends pulumi.CustomResource {
    /**
     * Get an existing Upgradestatusinfo resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UpgradestatusinfoState, opts?: pulumi.CustomResourceOptions): Upgradestatusinfo {
        return new Upgradestatusinfo(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'avi:index/upgradestatusinfo:Upgradestatusinfo';

    /**
     * Returns true if the given object is an instance of Upgradestatusinfo.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Upgradestatusinfo {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Upgradestatusinfo.__pulumiType;
    }

    public readonly afterRebootRollbackFnc!: pulumi.Output<string>;
    public readonly afterRebootTaskName!: pulumi.Output<string>;
    public readonly clean!: pulumi.Output<string>;
    public readonly duration!: pulumi.Output<string>;
    public readonly enablePatchRollback!: pulumi.Output<string | undefined>;
    public readonly enableRollback!: pulumi.Output<string | undefined>;
    public readonly endTime!: pulumi.Output<string>;
    public readonly enqueueTime!: pulumi.Output<string>;
    public readonly fipsMode!: pulumi.Output<string>;
    public readonly histories!: pulumi.Output<outputs.UpgradestatusinfoHistory[] | undefined>;
    public readonly imagePath!: pulumi.Output<string>;
    public readonly imageRef!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nodeType!: pulumi.Output<string>;
    public readonly objCloudRef!: pulumi.Output<string>;
    public readonly params!: pulumi.Output<outputs.UpgradestatusinfoParam[] | undefined>;
    public readonly patchImagePath!: pulumi.Output<string>;
    public readonly patchImageRef!: pulumi.Output<string>;
    public readonly patchLists!: pulumi.Output<outputs.UpgradestatusinfoPatchList[] | undefined>;
    public readonly patchReboot!: pulumi.Output<string>;
    public readonly patchVersion!: pulumi.Output<string>;
    public readonly prevImagePath!: pulumi.Output<string>;
    public readonly prevPatchImagePath!: pulumi.Output<string>;
    public readonly prevRemoteImageRef!: pulumi.Output<string>;
    public readonly previousImageRef!: pulumi.Output<string>;
    public readonly previousPatchImageRef!: pulumi.Output<string>;
    public readonly previousPatchLists!: pulumi.Output<outputs.UpgradestatusinfoPreviousPatchList[] | undefined>;
    public readonly previousPatchVersion!: pulumi.Output<string>;
    public readonly previousVersion!: pulumi.Output<string>;
    public readonly progress!: pulumi.Output<string | undefined>;
    public readonly reason!: pulumi.Output<string>;
    public readonly remoteImageRef!: pulumi.Output<string>;
    public readonly sePatchImagePath!: pulumi.Output<string>;
    public readonly sePatchImageRef!: pulumi.Output<string>;
    public readonly seUpgradeEvents!: pulumi.Output<outputs.UpgradestatusinfoSeUpgradeEvent[] | undefined>;
    public readonly segParams!: pulumi.Output<outputs.UpgradestatusinfoSegParam[] | undefined>;
    public readonly segStatuses!: pulumi.Output<outputs.UpgradestatusinfoSegStatus[] | undefined>;
    public readonly startTime!: pulumi.Output<string>;
    public readonly statediffRef!: pulumi.Output<string>;
    public readonly states!: pulumi.Output<outputs.UpgradestatusinfoState[] | undefined>;
    public readonly system!: pulumi.Output<string>;
    public readonly systemReportRefs!: pulumi.Output<string[] | undefined>;
    public readonly tasksCompleted!: pulumi.Output<string>;
    public readonly tenantRef!: pulumi.Output<string>;
    public readonly totalTasks!: pulumi.Output<string>;
    public readonly upgradeEvents!: pulumi.Output<outputs.UpgradestatusinfoUpgradeEvent[] | undefined>;
    public readonly upgradeOps!: pulumi.Output<string>;
    public readonly upgradeReadinesses!: pulumi.Output<outputs.UpgradestatusinfoUpgradeReadiness[] | undefined>;
    public readonly uuid!: pulumi.Output<string>;
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a Upgradestatusinfo resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UpgradestatusinfoArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UpgradestatusinfoArgs | UpgradestatusinfoState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UpgradestatusinfoState | undefined;
            resourceInputs["afterRebootRollbackFnc"] = state ? state.afterRebootRollbackFnc : undefined;
            resourceInputs["afterRebootTaskName"] = state ? state.afterRebootTaskName : undefined;
            resourceInputs["clean"] = state ? state.clean : undefined;
            resourceInputs["duration"] = state ? state.duration : undefined;
            resourceInputs["enablePatchRollback"] = state ? state.enablePatchRollback : undefined;
            resourceInputs["enableRollback"] = state ? state.enableRollback : undefined;
            resourceInputs["endTime"] = state ? state.endTime : undefined;
            resourceInputs["enqueueTime"] = state ? state.enqueueTime : undefined;
            resourceInputs["fipsMode"] = state ? state.fipsMode : undefined;
            resourceInputs["histories"] = state ? state.histories : undefined;
            resourceInputs["imagePath"] = state ? state.imagePath : undefined;
            resourceInputs["imageRef"] = state ? state.imageRef : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeType"] = state ? state.nodeType : undefined;
            resourceInputs["objCloudRef"] = state ? state.objCloudRef : undefined;
            resourceInputs["params"] = state ? state.params : undefined;
            resourceInputs["patchImagePath"] = state ? state.patchImagePath : undefined;
            resourceInputs["patchImageRef"] = state ? state.patchImageRef : undefined;
            resourceInputs["patchLists"] = state ? state.patchLists : undefined;
            resourceInputs["patchReboot"] = state ? state.patchReboot : undefined;
            resourceInputs["patchVersion"] = state ? state.patchVersion : undefined;
            resourceInputs["prevImagePath"] = state ? state.prevImagePath : undefined;
            resourceInputs["prevPatchImagePath"] = state ? state.prevPatchImagePath : undefined;
            resourceInputs["prevRemoteImageRef"] = state ? state.prevRemoteImageRef : undefined;
            resourceInputs["previousImageRef"] = state ? state.previousImageRef : undefined;
            resourceInputs["previousPatchImageRef"] = state ? state.previousPatchImageRef : undefined;
            resourceInputs["previousPatchLists"] = state ? state.previousPatchLists : undefined;
            resourceInputs["previousPatchVersion"] = state ? state.previousPatchVersion : undefined;
            resourceInputs["previousVersion"] = state ? state.previousVersion : undefined;
            resourceInputs["progress"] = state ? state.progress : undefined;
            resourceInputs["reason"] = state ? state.reason : undefined;
            resourceInputs["remoteImageRef"] = state ? state.remoteImageRef : undefined;
            resourceInputs["sePatchImagePath"] = state ? state.sePatchImagePath : undefined;
            resourceInputs["sePatchImageRef"] = state ? state.sePatchImageRef : undefined;
            resourceInputs["seUpgradeEvents"] = state ? state.seUpgradeEvents : undefined;
            resourceInputs["segParams"] = state ? state.segParams : undefined;
            resourceInputs["segStatuses"] = state ? state.segStatuses : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
            resourceInputs["statediffRef"] = state ? state.statediffRef : undefined;
            resourceInputs["states"] = state ? state.states : undefined;
            resourceInputs["system"] = state ? state.system : undefined;
            resourceInputs["systemReportRefs"] = state ? state.systemReportRefs : undefined;
            resourceInputs["tasksCompleted"] = state ? state.tasksCompleted : undefined;
            resourceInputs["tenantRef"] = state ? state.tenantRef : undefined;
            resourceInputs["totalTasks"] = state ? state.totalTasks : undefined;
            resourceInputs["upgradeEvents"] = state ? state.upgradeEvents : undefined;
            resourceInputs["upgradeOps"] = state ? state.upgradeOps : undefined;
            resourceInputs["upgradeReadinesses"] = state ? state.upgradeReadinesses : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as UpgradestatusinfoArgs | undefined;
            resourceInputs["afterRebootRollbackFnc"] = args ? args.afterRebootRollbackFnc : undefined;
            resourceInputs["afterRebootTaskName"] = args ? args.afterRebootTaskName : undefined;
            resourceInputs["clean"] = args ? args.clean : undefined;
            resourceInputs["duration"] = args ? args.duration : undefined;
            resourceInputs["enablePatchRollback"] = args ? args.enablePatchRollback : undefined;
            resourceInputs["enableRollback"] = args ? args.enableRollback : undefined;
            resourceInputs["endTime"] = args ? args.endTime : undefined;
            resourceInputs["enqueueTime"] = args ? args.enqueueTime : undefined;
            resourceInputs["fipsMode"] = args ? args.fipsMode : undefined;
            resourceInputs["histories"] = args ? args.histories : undefined;
            resourceInputs["imagePath"] = args ? args.imagePath : undefined;
            resourceInputs["imageRef"] = args ? args.imageRef : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeType"] = args ? args.nodeType : undefined;
            resourceInputs["objCloudRef"] = args ? args.objCloudRef : undefined;
            resourceInputs["params"] = args ? args.params : undefined;
            resourceInputs["patchImagePath"] = args ? args.patchImagePath : undefined;
            resourceInputs["patchImageRef"] = args ? args.patchImageRef : undefined;
            resourceInputs["patchLists"] = args ? args.patchLists : undefined;
            resourceInputs["patchReboot"] = args ? args.patchReboot : undefined;
            resourceInputs["patchVersion"] = args ? args.patchVersion : undefined;
            resourceInputs["prevImagePath"] = args ? args.prevImagePath : undefined;
            resourceInputs["prevPatchImagePath"] = args ? args.prevPatchImagePath : undefined;
            resourceInputs["prevRemoteImageRef"] = args ? args.prevRemoteImageRef : undefined;
            resourceInputs["previousImageRef"] = args ? args.previousImageRef : undefined;
            resourceInputs["previousPatchImageRef"] = args ? args.previousPatchImageRef : undefined;
            resourceInputs["previousPatchLists"] = args ? args.previousPatchLists : undefined;
            resourceInputs["previousPatchVersion"] = args ? args.previousPatchVersion : undefined;
            resourceInputs["previousVersion"] = args ? args.previousVersion : undefined;
            resourceInputs["progress"] = args ? args.progress : undefined;
            resourceInputs["reason"] = args ? args.reason : undefined;
            resourceInputs["remoteImageRef"] = args ? args.remoteImageRef : undefined;
            resourceInputs["sePatchImagePath"] = args ? args.sePatchImagePath : undefined;
            resourceInputs["sePatchImageRef"] = args ? args.sePatchImageRef : undefined;
            resourceInputs["seUpgradeEvents"] = args ? args.seUpgradeEvents : undefined;
            resourceInputs["segParams"] = args ? args.segParams : undefined;
            resourceInputs["segStatuses"] = args ? args.segStatuses : undefined;
            resourceInputs["startTime"] = args ? args.startTime : undefined;
            resourceInputs["statediffRef"] = args ? args.statediffRef : undefined;
            resourceInputs["states"] = args ? args.states : undefined;
            resourceInputs["system"] = args ? args.system : undefined;
            resourceInputs["systemReportRefs"] = args ? args.systemReportRefs : undefined;
            resourceInputs["tasksCompleted"] = args ? args.tasksCompleted : undefined;
            resourceInputs["tenantRef"] = args ? args.tenantRef : undefined;
            resourceInputs["totalTasks"] = args ? args.totalTasks : undefined;
            resourceInputs["upgradeEvents"] = args ? args.upgradeEvents : undefined;
            resourceInputs["upgradeOps"] = args ? args.upgradeOps : undefined;
            resourceInputs["upgradeReadinesses"] = args ? args.upgradeReadinesses : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Upgradestatusinfo.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Upgradestatusinfo resources.
 */
export interface UpgradestatusinfoState {
    afterRebootRollbackFnc?: pulumi.Input<string>;
    afterRebootTaskName?: pulumi.Input<string>;
    clean?: pulumi.Input<string>;
    duration?: pulumi.Input<string>;
    enablePatchRollback?: pulumi.Input<string>;
    enableRollback?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    enqueueTime?: pulumi.Input<string>;
    fipsMode?: pulumi.Input<string>;
    histories?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoHistory>[]>;
    imagePath?: pulumi.Input<string>;
    imageRef?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nodeType?: pulumi.Input<string>;
    objCloudRef?: pulumi.Input<string>;
    params?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoParam>[]>;
    patchImagePath?: pulumi.Input<string>;
    patchImageRef?: pulumi.Input<string>;
    patchLists?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoPatchList>[]>;
    patchReboot?: pulumi.Input<string>;
    patchVersion?: pulumi.Input<string>;
    prevImagePath?: pulumi.Input<string>;
    prevPatchImagePath?: pulumi.Input<string>;
    prevRemoteImageRef?: pulumi.Input<string>;
    previousImageRef?: pulumi.Input<string>;
    previousPatchImageRef?: pulumi.Input<string>;
    previousPatchLists?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoPreviousPatchList>[]>;
    previousPatchVersion?: pulumi.Input<string>;
    previousVersion?: pulumi.Input<string>;
    progress?: pulumi.Input<string>;
    reason?: pulumi.Input<string>;
    remoteImageRef?: pulumi.Input<string>;
    sePatchImagePath?: pulumi.Input<string>;
    sePatchImageRef?: pulumi.Input<string>;
    seUpgradeEvents?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoSeUpgradeEvent>[]>;
    segParams?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoSegParam>[]>;
    segStatuses?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoSegStatus>[]>;
    startTime?: pulumi.Input<string>;
    statediffRef?: pulumi.Input<string>;
    states?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoState>[]>;
    system?: pulumi.Input<string>;
    systemReportRefs?: pulumi.Input<pulumi.Input<string>[]>;
    tasksCompleted?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    totalTasks?: pulumi.Input<string>;
    upgradeEvents?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoUpgradeEvent>[]>;
    upgradeOps?: pulumi.Input<string>;
    upgradeReadinesses?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoUpgradeReadiness>[]>;
    uuid?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Upgradestatusinfo resource.
 */
export interface UpgradestatusinfoArgs {
    afterRebootRollbackFnc?: pulumi.Input<string>;
    afterRebootTaskName?: pulumi.Input<string>;
    clean?: pulumi.Input<string>;
    duration?: pulumi.Input<string>;
    enablePatchRollback?: pulumi.Input<string>;
    enableRollback?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    enqueueTime?: pulumi.Input<string>;
    fipsMode?: pulumi.Input<string>;
    histories?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoHistory>[]>;
    imagePath?: pulumi.Input<string>;
    imageRef?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nodeType?: pulumi.Input<string>;
    objCloudRef?: pulumi.Input<string>;
    params?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoParam>[]>;
    patchImagePath?: pulumi.Input<string>;
    patchImageRef?: pulumi.Input<string>;
    patchLists?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoPatchList>[]>;
    patchReboot?: pulumi.Input<string>;
    patchVersion?: pulumi.Input<string>;
    prevImagePath?: pulumi.Input<string>;
    prevPatchImagePath?: pulumi.Input<string>;
    prevRemoteImageRef?: pulumi.Input<string>;
    previousImageRef?: pulumi.Input<string>;
    previousPatchImageRef?: pulumi.Input<string>;
    previousPatchLists?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoPreviousPatchList>[]>;
    previousPatchVersion?: pulumi.Input<string>;
    previousVersion?: pulumi.Input<string>;
    progress?: pulumi.Input<string>;
    reason?: pulumi.Input<string>;
    remoteImageRef?: pulumi.Input<string>;
    sePatchImagePath?: pulumi.Input<string>;
    sePatchImageRef?: pulumi.Input<string>;
    seUpgradeEvents?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoSeUpgradeEvent>[]>;
    segParams?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoSegParam>[]>;
    segStatuses?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoSegStatus>[]>;
    startTime?: pulumi.Input<string>;
    statediffRef?: pulumi.Input<string>;
    states?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoState>[]>;
    system?: pulumi.Input<string>;
    systemReportRefs?: pulumi.Input<pulumi.Input<string>[]>;
    tasksCompleted?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    totalTasks?: pulumi.Input<string>;
    upgradeEvents?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoUpgradeEvent>[]>;
    upgradeOps?: pulumi.Input<string>;
    upgradeReadinesses?: pulumi.Input<pulumi.Input<inputs.UpgradestatusinfoUpgradeReadiness>[]>;
    uuid?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}
