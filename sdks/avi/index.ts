// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ActiongroupconfigArgs, ActiongroupconfigState } from "./actiongroupconfig";
export type Actiongroupconfig = import("./actiongroupconfig").Actiongroupconfig;
export const Actiongroupconfig: typeof import("./actiongroupconfig").Actiongroupconfig = null as any;
utilities.lazyLoad(exports, ["Actiongroupconfig"], () => require("./actiongroupconfig"));

export { AlbservicesconfigArgs, AlbservicesconfigState } from "./albservicesconfig";
export type Albservicesconfig = import("./albservicesconfig").Albservicesconfig;
export const Albservicesconfig: typeof import("./albservicesconfig").Albservicesconfig = null as any;
utilities.lazyLoad(exports, ["Albservicesconfig"], () => require("./albservicesconfig"));

export { AlbservicesfiledownloadArgs, AlbservicesfiledownloadState } from "./albservicesfiledownload";
export type Albservicesfiledownload = import("./albservicesfiledownload").Albservicesfiledownload;
export const Albservicesfiledownload: typeof import("./albservicesfiledownload").Albservicesfiledownload = null as any;
utilities.lazyLoad(exports, ["Albservicesfiledownload"], () => require("./albservicesfiledownload"));

export { AlbservicesfileuploadArgs, AlbservicesfileuploadState } from "./albservicesfileupload";
export type Albservicesfileupload = import("./albservicesfileupload").Albservicesfileupload;
export const Albservicesfileupload: typeof import("./albservicesfileupload").Albservicesfileupload = null as any;
utilities.lazyLoad(exports, ["Albservicesfileupload"], () => require("./albservicesfileupload"));

export { AlbservicesjobArgs, AlbservicesjobState } from "./albservicesjob";
export type Albservicesjob = import("./albservicesjob").Albservicesjob;
export const Albservicesjob: typeof import("./albservicesjob").Albservicesjob = null as any;
utilities.lazyLoad(exports, ["Albservicesjob"], () => require("./albservicesjob"));

export { AlertconfigArgs, AlertconfigState } from "./alertconfig";
export type Alertconfig = import("./alertconfig").Alertconfig;
export const Alertconfig: typeof import("./alertconfig").Alertconfig = null as any;
utilities.lazyLoad(exports, ["Alertconfig"], () => require("./alertconfig"));

export { AlertemailconfigArgs, AlertemailconfigState } from "./alertemailconfig";
export type Alertemailconfig = import("./alertemailconfig").Alertemailconfig;
export const Alertemailconfig: typeof import("./alertemailconfig").Alertemailconfig = null as any;
utilities.lazyLoad(exports, ["Alertemailconfig"], () => require("./alertemailconfig"));

export { AlertscriptconfigArgs, AlertscriptconfigState } from "./alertscriptconfig";
export type Alertscriptconfig = import("./alertscriptconfig").Alertscriptconfig;
export const Alertscriptconfig: typeof import("./alertscriptconfig").Alertscriptconfig = null as any;
utilities.lazyLoad(exports, ["Alertscriptconfig"], () => require("./alertscriptconfig"));

export { AlertsyslogconfigArgs, AlertsyslogconfigState } from "./alertsyslogconfig";
export type Alertsyslogconfig = import("./alertsyslogconfig").Alertsyslogconfig;
export const Alertsyslogconfig: typeof import("./alertsyslogconfig").Alertsyslogconfig = null as any;
utilities.lazyLoad(exports, ["Alertsyslogconfig"], () => require("./alertsyslogconfig"));

export { AnalyticsprofileArgs, AnalyticsprofileState } from "./analyticsprofile";
export type Analyticsprofile = import("./analyticsprofile").Analyticsprofile;
export const Analyticsprofile: typeof import("./analyticsprofile").Analyticsprofile = null as any;
utilities.lazyLoad(exports, ["Analyticsprofile"], () => require("./analyticsprofile"));

export { ApplicationpersistenceprofileArgs, ApplicationpersistenceprofileState } from "./applicationpersistenceprofile";
export type Applicationpersistenceprofile = import("./applicationpersistenceprofile").Applicationpersistenceprofile;
export const Applicationpersistenceprofile: typeof import("./applicationpersistenceprofile").Applicationpersistenceprofile = null as any;
utilities.lazyLoad(exports, ["Applicationpersistenceprofile"], () => require("./applicationpersistenceprofile"));

export { ApplicationprofileArgs, ApplicationprofileState } from "./applicationprofile";
export type Applicationprofile = import("./applicationprofile").Applicationprofile;
export const Applicationprofile: typeof import("./applicationprofile").Applicationprofile = null as any;
utilities.lazyLoad(exports, ["Applicationprofile"], () => require("./applicationprofile"));

export { AuthmappingprofileArgs, AuthmappingprofileState } from "./authmappingprofile";
export type Authmappingprofile = import("./authmappingprofile").Authmappingprofile;
export const Authmappingprofile: typeof import("./authmappingprofile").Authmappingprofile = null as any;
utilities.lazyLoad(exports, ["Authmappingprofile"], () => require("./authmappingprofile"));

export { AuthprofileArgs, AuthprofileState } from "./authprofile";
export type Authprofile = import("./authprofile").Authprofile;
export const Authprofile: typeof import("./authprofile").Authprofile = null as any;
utilities.lazyLoad(exports, ["Authprofile"], () => require("./authprofile"));

export { AutoscalelaunchconfigArgs, AutoscalelaunchconfigState } from "./autoscalelaunchconfig";
export type Autoscalelaunchconfig = import("./autoscalelaunchconfig").Autoscalelaunchconfig;
export const Autoscalelaunchconfig: typeof import("./autoscalelaunchconfig").Autoscalelaunchconfig = null as any;
utilities.lazyLoad(exports, ["Autoscalelaunchconfig"], () => require("./autoscalelaunchconfig"));

export { AvailabilityzoneArgs, AvailabilityzoneState } from "./availabilityzone";
export type Availabilityzone = import("./availabilityzone").Availabilityzone;
export const Availabilityzone: typeof import("./availabilityzone").Availabilityzone = null as any;
utilities.lazyLoad(exports, ["Availabilityzone"], () => require("./availabilityzone"));

export { BackupArgs, BackupState } from "./backup";
export type Backup = import("./backup").Backup;
export const Backup: typeof import("./backup").Backup = null as any;
utilities.lazyLoad(exports, ["Backup"], () => require("./backup"));

export { BackupconfigurationArgs, BackupconfigurationState } from "./backupconfiguration";
export type Backupconfiguration = import("./backupconfiguration").Backupconfiguration;
export const Backupconfiguration: typeof import("./backupconfiguration").Backupconfiguration = null as any;
utilities.lazyLoad(exports, ["Backupconfiguration"], () => require("./backupconfiguration"));

export { BotconfigconsolidatorArgs, BotconfigconsolidatorState } from "./botconfigconsolidator";
export type Botconfigconsolidator = import("./botconfigconsolidator").Botconfigconsolidator;
export const Botconfigconsolidator: typeof import("./botconfigconsolidator").Botconfigconsolidator = null as any;
utilities.lazyLoad(exports, ["Botconfigconsolidator"], () => require("./botconfigconsolidator"));

export { BotdetectionpolicyArgs, BotdetectionpolicyState } from "./botdetectionpolicy";
export type Botdetectionpolicy = import("./botdetectionpolicy").Botdetectionpolicy;
export const Botdetectionpolicy: typeof import("./botdetectionpolicy").Botdetectionpolicy = null as any;
utilities.lazyLoad(exports, ["Botdetectionpolicy"], () => require("./botdetectionpolicy"));

export { BotipreputationtypemappingArgs, BotipreputationtypemappingState } from "./botipreputationtypemapping";
export type Botipreputationtypemapping = import("./botipreputationtypemapping").Botipreputationtypemapping;
export const Botipreputationtypemapping: typeof import("./botipreputationtypemapping").Botipreputationtypemapping = null as any;
utilities.lazyLoad(exports, ["Botipreputationtypemapping"], () => require("./botipreputationtypemapping"));

export { BotmappingArgs, BotmappingState } from "./botmapping";
export type Botmapping = import("./botmapping").Botmapping;
export const Botmapping: typeof import("./botmapping").Botmapping = null as any;
utilities.lazyLoad(exports, ["Botmapping"], () => require("./botmapping"));

export { CertificatemanagementprofileArgs, CertificatemanagementprofileState } from "./certificatemanagementprofile";
export type Certificatemanagementprofile = import("./certificatemanagementprofile").Certificatemanagementprofile;
export const Certificatemanagementprofile: typeof import("./certificatemanagementprofile").Certificatemanagementprofile = null as any;
utilities.lazyLoad(exports, ["Certificatemanagementprofile"], () => require("./certificatemanagementprofile"));

export { CloudArgs, CloudState } from "./cloud";
export type Cloud = import("./cloud").Cloud;
export const Cloud: typeof import("./cloud").Cloud = null as any;
utilities.lazyLoad(exports, ["Cloud"], () => require("./cloud"));

export { CloudconnectoruserArgs, CloudconnectoruserState } from "./cloudconnectoruser";
export type Cloudconnectoruser = import("./cloudconnectoruser").Cloudconnectoruser;
export const Cloudconnectoruser: typeof import("./cloudconnectoruser").Cloudconnectoruser = null as any;
utilities.lazyLoad(exports, ["Cloudconnectoruser"], () => require("./cloudconnectoruser"));

export { CloudpropertiesArgs, CloudpropertiesState } from "./cloudproperties";
export type Cloudproperties = import("./cloudproperties").Cloudproperties;
export const Cloudproperties: typeof import("./cloudproperties").Cloudproperties = null as any;
utilities.lazyLoad(exports, ["Cloudproperties"], () => require("./cloudproperties"));

export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { ClusterclouddetailsArgs, ClusterclouddetailsState } from "./clusterclouddetails";
export type Clusterclouddetails = import("./clusterclouddetails").Clusterclouddetails;
export const Clusterclouddetails: typeof import("./clusterclouddetails").Clusterclouddetails = null as any;
utilities.lazyLoad(exports, ["Clusterclouddetails"], () => require("./clusterclouddetails"));

export { ControllerportalregistrationArgs, ControllerportalregistrationState } from "./controllerportalregistration";
export type Controllerportalregistration = import("./controllerportalregistration").Controllerportalregistration;
export const Controllerportalregistration: typeof import("./controllerportalregistration").Controllerportalregistration = null as any;
utilities.lazyLoad(exports, ["Controllerportalregistration"], () => require("./controllerportalregistration"));

export { ControllerpropertiesArgs, ControllerpropertiesState } from "./controllerproperties";
export type Controllerproperties = import("./controllerproperties").Controllerproperties;
export const Controllerproperties: typeof import("./controllerproperties").Controllerproperties = null as any;
utilities.lazyLoad(exports, ["Controllerproperties"], () => require("./controllerproperties"));

export { ControllersiteArgs, ControllersiteState } from "./controllersite";
export type Controllersite = import("./controllersite").Controllersite;
export const Controllersite: typeof import("./controllersite").Controllersite = null as any;
utilities.lazyLoad(exports, ["Controllersite"], () => require("./controllersite"));

export { CsrfpolicyArgs, CsrfpolicyState } from "./csrfpolicy";
export type Csrfpolicy = import("./csrfpolicy").Csrfpolicy;
export const Csrfpolicy: typeof import("./csrfpolicy").Csrfpolicy = null as any;
utilities.lazyLoad(exports, ["Csrfpolicy"], () => require("./csrfpolicy"));

export { CustomipamdnsprofileArgs, CustomipamdnsprofileState } from "./customipamdnsprofile";
export type Customipamdnsprofile = import("./customipamdnsprofile").Customipamdnsprofile;
export const Customipamdnsprofile: typeof import("./customipamdnsprofile").Customipamdnsprofile = null as any;
utilities.lazyLoad(exports, ["Customipamdnsprofile"], () => require("./customipamdnsprofile"));

export { DnspolicyArgs, DnspolicyState } from "./dnspolicy";
export type Dnspolicy = import("./dnspolicy").Dnspolicy;
export const Dnspolicy: typeof import("./dnspolicy").Dnspolicy = null as any;
utilities.lazyLoad(exports, ["Dnspolicy"], () => require("./dnspolicy"));

export { DynamicdnsrecordArgs, DynamicdnsrecordState } from "./dynamicdnsrecord";
export type Dynamicdnsrecord = import("./dynamicdnsrecord").Dynamicdnsrecord;
export const Dynamicdnsrecord: typeof import("./dynamicdnsrecord").Dynamicdnsrecord = null as any;
utilities.lazyLoad(exports, ["Dynamicdnsrecord"], () => require("./dynamicdnsrecord"));

export { ErrorpagebodyArgs, ErrorpagebodyState } from "./errorpagebody";
export type Errorpagebody = import("./errorpagebody").Errorpagebody;
export const Errorpagebody: typeof import("./errorpagebody").Errorpagebody = null as any;
utilities.lazyLoad(exports, ["Errorpagebody"], () => require("./errorpagebody"));

export { ErrorpageprofileArgs, ErrorpageprofileState } from "./errorpageprofile";
export type Errorpageprofile = import("./errorpageprofile").Errorpageprofile;
export const Errorpageprofile: typeof import("./errorpageprofile").Errorpageprofile = null as any;
utilities.lazyLoad(exports, ["Errorpageprofile"], () => require("./errorpageprofile"));

export { FederationcheckpointArgs, FederationcheckpointState } from "./federationcheckpoint";
export type Federationcheckpoint = import("./federationcheckpoint").Federationcheckpoint;
export const Federationcheckpoint: typeof import("./federationcheckpoint").Federationcheckpoint = null as any;
utilities.lazyLoad(exports, ["Federationcheckpoint"], () => require("./federationcheckpoint"));

export { FileobjectArgs, FileobjectState } from "./fileobject";
export type Fileobject = import("./fileobject").Fileobject;
export const Fileobject: typeof import("./fileobject").Fileobject = null as any;
utilities.lazyLoad(exports, ["Fileobject"], () => require("./fileobject"));

export { FileserviceArgs, FileserviceState } from "./fileservice";
export type Fileservice = import("./fileservice").Fileservice;
export const Fileservice: typeof import("./fileservice").Fileservice = null as any;
utilities.lazyLoad(exports, ["Fileservice"], () => require("./fileservice"));

export { GeodbArgs, GeodbState } from "./geodb";
export type Geodb = import("./geodb").Geodb;
export const Geodb: typeof import("./geodb").Geodb = null as any;
utilities.lazyLoad(exports, ["Geodb"], () => require("./geodb"));

export { GetActiongroupconfigArgs, GetActiongroupconfigResult, GetActiongroupconfigOutputArgs } from "./getActiongroupconfig";
export const getActiongroupconfig: typeof import("./getActiongroupconfig").getActiongroupconfig = null as any;
export const getActiongroupconfigOutput: typeof import("./getActiongroupconfig").getActiongroupconfigOutput = null as any;
utilities.lazyLoad(exports, ["getActiongroupconfig","getActiongroupconfigOutput"], () => require("./getActiongroupconfig"));

export { GetAlbservicesconfigArgs, GetAlbservicesconfigResult, GetAlbservicesconfigOutputArgs } from "./getAlbservicesconfig";
export const getAlbservicesconfig: typeof import("./getAlbservicesconfig").getAlbservicesconfig = null as any;
export const getAlbservicesconfigOutput: typeof import("./getAlbservicesconfig").getAlbservicesconfigOutput = null as any;
utilities.lazyLoad(exports, ["getAlbservicesconfig","getAlbservicesconfigOutput"], () => require("./getAlbservicesconfig"));

export { GetAlbservicesfiledownloadArgs, GetAlbservicesfiledownloadResult, GetAlbservicesfiledownloadOutputArgs } from "./getAlbservicesfiledownload";
export const getAlbservicesfiledownload: typeof import("./getAlbservicesfiledownload").getAlbservicesfiledownload = null as any;
export const getAlbservicesfiledownloadOutput: typeof import("./getAlbservicesfiledownload").getAlbservicesfiledownloadOutput = null as any;
utilities.lazyLoad(exports, ["getAlbservicesfiledownload","getAlbservicesfiledownloadOutput"], () => require("./getAlbservicesfiledownload"));

export { GetAlbservicesfileuploadArgs, GetAlbservicesfileuploadResult, GetAlbservicesfileuploadOutputArgs } from "./getAlbservicesfileupload";
export const getAlbservicesfileupload: typeof import("./getAlbservicesfileupload").getAlbservicesfileupload = null as any;
export const getAlbservicesfileuploadOutput: typeof import("./getAlbservicesfileupload").getAlbservicesfileuploadOutput = null as any;
utilities.lazyLoad(exports, ["getAlbservicesfileupload","getAlbservicesfileuploadOutput"], () => require("./getAlbservicesfileupload"));

export { GetAlbservicesjobArgs, GetAlbservicesjobResult, GetAlbservicesjobOutputArgs } from "./getAlbservicesjob";
export const getAlbservicesjob: typeof import("./getAlbservicesjob").getAlbservicesjob = null as any;
export const getAlbservicesjobOutput: typeof import("./getAlbservicesjob").getAlbservicesjobOutput = null as any;
utilities.lazyLoad(exports, ["getAlbservicesjob","getAlbservicesjobOutput"], () => require("./getAlbservicesjob"));

export { GetAlertconfigArgs, GetAlertconfigResult, GetAlertconfigOutputArgs } from "./getAlertconfig";
export const getAlertconfig: typeof import("./getAlertconfig").getAlertconfig = null as any;
export const getAlertconfigOutput: typeof import("./getAlertconfig").getAlertconfigOutput = null as any;
utilities.lazyLoad(exports, ["getAlertconfig","getAlertconfigOutput"], () => require("./getAlertconfig"));

export { GetAlertemailconfigArgs, GetAlertemailconfigResult, GetAlertemailconfigOutputArgs } from "./getAlertemailconfig";
export const getAlertemailconfig: typeof import("./getAlertemailconfig").getAlertemailconfig = null as any;
export const getAlertemailconfigOutput: typeof import("./getAlertemailconfig").getAlertemailconfigOutput = null as any;
utilities.lazyLoad(exports, ["getAlertemailconfig","getAlertemailconfigOutput"], () => require("./getAlertemailconfig"));

export { GetAlertscriptconfigArgs, GetAlertscriptconfigResult, GetAlertscriptconfigOutputArgs } from "./getAlertscriptconfig";
export const getAlertscriptconfig: typeof import("./getAlertscriptconfig").getAlertscriptconfig = null as any;
export const getAlertscriptconfigOutput: typeof import("./getAlertscriptconfig").getAlertscriptconfigOutput = null as any;
utilities.lazyLoad(exports, ["getAlertscriptconfig","getAlertscriptconfigOutput"], () => require("./getAlertscriptconfig"));

export { GetAlertsyslogconfigArgs, GetAlertsyslogconfigResult, GetAlertsyslogconfigOutputArgs } from "./getAlertsyslogconfig";
export const getAlertsyslogconfig: typeof import("./getAlertsyslogconfig").getAlertsyslogconfig = null as any;
export const getAlertsyslogconfigOutput: typeof import("./getAlertsyslogconfig").getAlertsyslogconfigOutput = null as any;
utilities.lazyLoad(exports, ["getAlertsyslogconfig","getAlertsyslogconfigOutput"], () => require("./getAlertsyslogconfig"));

export { GetAnalyticsprofileArgs, GetAnalyticsprofileResult, GetAnalyticsprofileOutputArgs } from "./getAnalyticsprofile";
export const getAnalyticsprofile: typeof import("./getAnalyticsprofile").getAnalyticsprofile = null as any;
export const getAnalyticsprofileOutput: typeof import("./getAnalyticsprofile").getAnalyticsprofileOutput = null as any;
utilities.lazyLoad(exports, ["getAnalyticsprofile","getAnalyticsprofileOutput"], () => require("./getAnalyticsprofile"));

export { GetApplicationpersistenceprofileArgs, GetApplicationpersistenceprofileResult, GetApplicationpersistenceprofileOutputArgs } from "./getApplicationpersistenceprofile";
export const getApplicationpersistenceprofile: typeof import("./getApplicationpersistenceprofile").getApplicationpersistenceprofile = null as any;
export const getApplicationpersistenceprofileOutput: typeof import("./getApplicationpersistenceprofile").getApplicationpersistenceprofileOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationpersistenceprofile","getApplicationpersistenceprofileOutput"], () => require("./getApplicationpersistenceprofile"));

export { GetApplicationprofileArgs, GetApplicationprofileResult, GetApplicationprofileOutputArgs } from "./getApplicationprofile";
export const getApplicationprofile: typeof import("./getApplicationprofile").getApplicationprofile = null as any;
export const getApplicationprofileOutput: typeof import("./getApplicationprofile").getApplicationprofileOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationprofile","getApplicationprofileOutput"], () => require("./getApplicationprofile"));

export { GetAuthmappingprofileArgs, GetAuthmappingprofileResult, GetAuthmappingprofileOutputArgs } from "./getAuthmappingprofile";
export const getAuthmappingprofile: typeof import("./getAuthmappingprofile").getAuthmappingprofile = null as any;
export const getAuthmappingprofileOutput: typeof import("./getAuthmappingprofile").getAuthmappingprofileOutput = null as any;
utilities.lazyLoad(exports, ["getAuthmappingprofile","getAuthmappingprofileOutput"], () => require("./getAuthmappingprofile"));

export { GetAuthprofileArgs, GetAuthprofileResult, GetAuthprofileOutputArgs } from "./getAuthprofile";
export const getAuthprofile: typeof import("./getAuthprofile").getAuthprofile = null as any;
export const getAuthprofileOutput: typeof import("./getAuthprofile").getAuthprofileOutput = null as any;
utilities.lazyLoad(exports, ["getAuthprofile","getAuthprofileOutput"], () => require("./getAuthprofile"));

export { GetAutoscalelaunchconfigArgs, GetAutoscalelaunchconfigResult, GetAutoscalelaunchconfigOutputArgs } from "./getAutoscalelaunchconfig";
export const getAutoscalelaunchconfig: typeof import("./getAutoscalelaunchconfig").getAutoscalelaunchconfig = null as any;
export const getAutoscalelaunchconfigOutput: typeof import("./getAutoscalelaunchconfig").getAutoscalelaunchconfigOutput = null as any;
utilities.lazyLoad(exports, ["getAutoscalelaunchconfig","getAutoscalelaunchconfigOutput"], () => require("./getAutoscalelaunchconfig"));

export { GetAvailabilityzoneArgs, GetAvailabilityzoneResult, GetAvailabilityzoneOutputArgs } from "./getAvailabilityzone";
export const getAvailabilityzone: typeof import("./getAvailabilityzone").getAvailabilityzone = null as any;
export const getAvailabilityzoneOutput: typeof import("./getAvailabilityzone").getAvailabilityzoneOutput = null as any;
utilities.lazyLoad(exports, ["getAvailabilityzone","getAvailabilityzoneOutput"], () => require("./getAvailabilityzone"));

export { GetBackupArgs, GetBackupResult, GetBackupOutputArgs } from "./getBackup";
export const getBackup: typeof import("./getBackup").getBackup = null as any;
export const getBackupOutput: typeof import("./getBackup").getBackupOutput = null as any;
utilities.lazyLoad(exports, ["getBackup","getBackupOutput"], () => require("./getBackup"));

export { GetBackupconfigurationArgs, GetBackupconfigurationResult, GetBackupconfigurationOutputArgs } from "./getBackupconfiguration";
export const getBackupconfiguration: typeof import("./getBackupconfiguration").getBackupconfiguration = null as any;
export const getBackupconfigurationOutput: typeof import("./getBackupconfiguration").getBackupconfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getBackupconfiguration","getBackupconfigurationOutput"], () => require("./getBackupconfiguration"));

export { GetBotconfigconsolidatorArgs, GetBotconfigconsolidatorResult, GetBotconfigconsolidatorOutputArgs } from "./getBotconfigconsolidator";
export const getBotconfigconsolidator: typeof import("./getBotconfigconsolidator").getBotconfigconsolidator = null as any;
export const getBotconfigconsolidatorOutput: typeof import("./getBotconfigconsolidator").getBotconfigconsolidatorOutput = null as any;
utilities.lazyLoad(exports, ["getBotconfigconsolidator","getBotconfigconsolidatorOutput"], () => require("./getBotconfigconsolidator"));

export { GetBotdetectionpolicyArgs, GetBotdetectionpolicyResult, GetBotdetectionpolicyOutputArgs } from "./getBotdetectionpolicy";
export const getBotdetectionpolicy: typeof import("./getBotdetectionpolicy").getBotdetectionpolicy = null as any;
export const getBotdetectionpolicyOutput: typeof import("./getBotdetectionpolicy").getBotdetectionpolicyOutput = null as any;
utilities.lazyLoad(exports, ["getBotdetectionpolicy","getBotdetectionpolicyOutput"], () => require("./getBotdetectionpolicy"));

export { GetBotipreputationtypemappingArgs, GetBotipreputationtypemappingResult, GetBotipreputationtypemappingOutputArgs } from "./getBotipreputationtypemapping";
export const getBotipreputationtypemapping: typeof import("./getBotipreputationtypemapping").getBotipreputationtypemapping = null as any;
export const getBotipreputationtypemappingOutput: typeof import("./getBotipreputationtypemapping").getBotipreputationtypemappingOutput = null as any;
utilities.lazyLoad(exports, ["getBotipreputationtypemapping","getBotipreputationtypemappingOutput"], () => require("./getBotipreputationtypemapping"));

export { GetBotmappingArgs, GetBotmappingResult, GetBotmappingOutputArgs } from "./getBotmapping";
export const getBotmapping: typeof import("./getBotmapping").getBotmapping = null as any;
export const getBotmappingOutput: typeof import("./getBotmapping").getBotmappingOutput = null as any;
utilities.lazyLoad(exports, ["getBotmapping","getBotmappingOutput"], () => require("./getBotmapping"));

export { GetCertificatemanagementprofileArgs, GetCertificatemanagementprofileResult, GetCertificatemanagementprofileOutputArgs } from "./getCertificatemanagementprofile";
export const getCertificatemanagementprofile: typeof import("./getCertificatemanagementprofile").getCertificatemanagementprofile = null as any;
export const getCertificatemanagementprofileOutput: typeof import("./getCertificatemanagementprofile").getCertificatemanagementprofileOutput = null as any;
utilities.lazyLoad(exports, ["getCertificatemanagementprofile","getCertificatemanagementprofileOutput"], () => require("./getCertificatemanagementprofile"));

export { GetCloudArgs, GetCloudResult, GetCloudOutputArgs } from "./getCloud";
export const getCloud: typeof import("./getCloud").getCloud = null as any;
export const getCloudOutput: typeof import("./getCloud").getCloudOutput = null as any;
utilities.lazyLoad(exports, ["getCloud","getCloudOutput"], () => require("./getCloud"));

export { GetCloudconnectoruserArgs, GetCloudconnectoruserResult, GetCloudconnectoruserOutputArgs } from "./getCloudconnectoruser";
export const getCloudconnectoruser: typeof import("./getCloudconnectoruser").getCloudconnectoruser = null as any;
export const getCloudconnectoruserOutput: typeof import("./getCloudconnectoruser").getCloudconnectoruserOutput = null as any;
utilities.lazyLoad(exports, ["getCloudconnectoruser","getCloudconnectoruserOutput"], () => require("./getCloudconnectoruser"));

export { GetCloudpropertiesArgs, GetCloudpropertiesResult, GetCloudpropertiesOutputArgs } from "./getCloudproperties";
export const getCloudproperties: typeof import("./getCloudproperties").getCloudproperties = null as any;
export const getCloudpropertiesOutput: typeof import("./getCloudproperties").getCloudpropertiesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudproperties","getCloudpropertiesOutput"], () => require("./getCloudproperties"));

export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { GetClusterclouddetailsArgs, GetClusterclouddetailsResult, GetClusterclouddetailsOutputArgs } from "./getClusterclouddetails";
export const getClusterclouddetails: typeof import("./getClusterclouddetails").getClusterclouddetails = null as any;
export const getClusterclouddetailsOutput: typeof import("./getClusterclouddetails").getClusterclouddetailsOutput = null as any;
utilities.lazyLoad(exports, ["getClusterclouddetails","getClusterclouddetailsOutput"], () => require("./getClusterclouddetails"));

export { GetControllerportalregistrationArgs, GetControllerportalregistrationResult, GetControllerportalregistrationOutputArgs } from "./getControllerportalregistration";
export const getControllerportalregistration: typeof import("./getControllerportalregistration").getControllerportalregistration = null as any;
export const getControllerportalregistrationOutput: typeof import("./getControllerportalregistration").getControllerportalregistrationOutput = null as any;
utilities.lazyLoad(exports, ["getControllerportalregistration","getControllerportalregistrationOutput"], () => require("./getControllerportalregistration"));

export { GetControllerpropertiesArgs, GetControllerpropertiesResult, GetControllerpropertiesOutputArgs } from "./getControllerproperties";
export const getControllerproperties: typeof import("./getControllerproperties").getControllerproperties = null as any;
export const getControllerpropertiesOutput: typeof import("./getControllerproperties").getControllerpropertiesOutput = null as any;
utilities.lazyLoad(exports, ["getControllerproperties","getControllerpropertiesOutput"], () => require("./getControllerproperties"));

export { GetControllersiteArgs, GetControllersiteResult, GetControllersiteOutputArgs } from "./getControllersite";
export const getControllersite: typeof import("./getControllersite").getControllersite = null as any;
export const getControllersiteOutput: typeof import("./getControllersite").getControllersiteOutput = null as any;
utilities.lazyLoad(exports, ["getControllersite","getControllersiteOutput"], () => require("./getControllersite"));

export { GetCsrfpolicyArgs, GetCsrfpolicyResult, GetCsrfpolicyOutputArgs } from "./getCsrfpolicy";
export const getCsrfpolicy: typeof import("./getCsrfpolicy").getCsrfpolicy = null as any;
export const getCsrfpolicyOutput: typeof import("./getCsrfpolicy").getCsrfpolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCsrfpolicy","getCsrfpolicyOutput"], () => require("./getCsrfpolicy"));

export { GetCustomipamdnsprofileArgs, GetCustomipamdnsprofileResult, GetCustomipamdnsprofileOutputArgs } from "./getCustomipamdnsprofile";
export const getCustomipamdnsprofile: typeof import("./getCustomipamdnsprofile").getCustomipamdnsprofile = null as any;
export const getCustomipamdnsprofileOutput: typeof import("./getCustomipamdnsprofile").getCustomipamdnsprofileOutput = null as any;
utilities.lazyLoad(exports, ["getCustomipamdnsprofile","getCustomipamdnsprofileOutput"], () => require("./getCustomipamdnsprofile"));

export { GetDnspolicyArgs, GetDnspolicyResult, GetDnspolicyOutputArgs } from "./getDnspolicy";
export const getDnspolicy: typeof import("./getDnspolicy").getDnspolicy = null as any;
export const getDnspolicyOutput: typeof import("./getDnspolicy").getDnspolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDnspolicy","getDnspolicyOutput"], () => require("./getDnspolicy"));

export { GetDynamicdnsrecordArgs, GetDynamicdnsrecordResult, GetDynamicdnsrecordOutputArgs } from "./getDynamicdnsrecord";
export const getDynamicdnsrecord: typeof import("./getDynamicdnsrecord").getDynamicdnsrecord = null as any;
export const getDynamicdnsrecordOutput: typeof import("./getDynamicdnsrecord").getDynamicdnsrecordOutput = null as any;
utilities.lazyLoad(exports, ["getDynamicdnsrecord","getDynamicdnsrecordOutput"], () => require("./getDynamicdnsrecord"));

export { GetErrorpagebodyArgs, GetErrorpagebodyResult, GetErrorpagebodyOutputArgs } from "./getErrorpagebody";
export const getErrorpagebody: typeof import("./getErrorpagebody").getErrorpagebody = null as any;
export const getErrorpagebodyOutput: typeof import("./getErrorpagebody").getErrorpagebodyOutput = null as any;
utilities.lazyLoad(exports, ["getErrorpagebody","getErrorpagebodyOutput"], () => require("./getErrorpagebody"));

export { GetErrorpageprofileArgs, GetErrorpageprofileResult, GetErrorpageprofileOutputArgs } from "./getErrorpageprofile";
export const getErrorpageprofile: typeof import("./getErrorpageprofile").getErrorpageprofile = null as any;
export const getErrorpageprofileOutput: typeof import("./getErrorpageprofile").getErrorpageprofileOutput = null as any;
utilities.lazyLoad(exports, ["getErrorpageprofile","getErrorpageprofileOutput"], () => require("./getErrorpageprofile"));

export { GetFederationcheckpointArgs, GetFederationcheckpointResult, GetFederationcheckpointOutputArgs } from "./getFederationcheckpoint";
export const getFederationcheckpoint: typeof import("./getFederationcheckpoint").getFederationcheckpoint = null as any;
export const getFederationcheckpointOutput: typeof import("./getFederationcheckpoint").getFederationcheckpointOutput = null as any;
utilities.lazyLoad(exports, ["getFederationcheckpoint","getFederationcheckpointOutput"], () => require("./getFederationcheckpoint"));

export { GetFileobjectArgs, GetFileobjectResult, GetFileobjectOutputArgs } from "./getFileobject";
export const getFileobject: typeof import("./getFileobject").getFileobject = null as any;
export const getFileobjectOutput: typeof import("./getFileobject").getFileobjectOutput = null as any;
utilities.lazyLoad(exports, ["getFileobject","getFileobjectOutput"], () => require("./getFileobject"));

export { GetFileserviceArgs, GetFileserviceResult, GetFileserviceOutputArgs } from "./getFileservice";
export const getFileservice: typeof import("./getFileservice").getFileservice = null as any;
export const getFileserviceOutput: typeof import("./getFileservice").getFileserviceOutput = null as any;
utilities.lazyLoad(exports, ["getFileservice","getFileserviceOutput"], () => require("./getFileservice"));

export { GetGeodbArgs, GetGeodbResult, GetGeodbOutputArgs } from "./getGeodb";
export const getGeodb: typeof import("./getGeodb").getGeodb = null as any;
export const getGeodbOutput: typeof import("./getGeodb").getGeodbOutput = null as any;
utilities.lazyLoad(exports, ["getGeodb","getGeodbOutput"], () => require("./getGeodb"));

export { GetGslbArgs, GetGslbResult, GetGslbOutputArgs } from "./getGslb";
export const getGslb: typeof import("./getGslb").getGslb = null as any;
export const getGslbOutput: typeof import("./getGslb").getGslbOutput = null as any;
utilities.lazyLoad(exports, ["getGslb","getGslbOutput"], () => require("./getGslb"));

export { GetGslbgeodbprofileArgs, GetGslbgeodbprofileResult, GetGslbgeodbprofileOutputArgs } from "./getGslbgeodbprofile";
export const getGslbgeodbprofile: typeof import("./getGslbgeodbprofile").getGslbgeodbprofile = null as any;
export const getGslbgeodbprofileOutput: typeof import("./getGslbgeodbprofile").getGslbgeodbprofileOutput = null as any;
utilities.lazyLoad(exports, ["getGslbgeodbprofile","getGslbgeodbprofileOutput"], () => require("./getGslbgeodbprofile"));

export { GetGslbserviceArgs, GetGslbserviceResult, GetGslbserviceOutputArgs } from "./getGslbservice";
export const getGslbservice: typeof import("./getGslbservice").getGslbservice = null as any;
export const getGslbserviceOutput: typeof import("./getGslbservice").getGslbserviceOutput = null as any;
utilities.lazyLoad(exports, ["getGslbservice","getGslbserviceOutput"], () => require("./getGslbservice"));

export { GetHardwaresecuritymodulegroupArgs, GetHardwaresecuritymodulegroupResult, GetHardwaresecuritymodulegroupOutputArgs } from "./getHardwaresecuritymodulegroup";
export const getHardwaresecuritymodulegroup: typeof import("./getHardwaresecuritymodulegroup").getHardwaresecuritymodulegroup = null as any;
export const getHardwaresecuritymodulegroupOutput: typeof import("./getHardwaresecuritymodulegroup").getHardwaresecuritymodulegroupOutput = null as any;
utilities.lazyLoad(exports, ["getHardwaresecuritymodulegroup","getHardwaresecuritymodulegroupOutput"], () => require("./getHardwaresecuritymodulegroup"));

export { GetHealthmonitorArgs, GetHealthmonitorResult, GetHealthmonitorOutputArgs } from "./getHealthmonitor";
export const getHealthmonitor: typeof import("./getHealthmonitor").getHealthmonitor = null as any;
export const getHealthmonitorOutput: typeof import("./getHealthmonitor").getHealthmonitorOutput = null as any;
utilities.lazyLoad(exports, ["getHealthmonitor","getHealthmonitorOutput"], () => require("./getHealthmonitor"));

export { GetHttppolicysetArgs, GetHttppolicysetResult, GetHttppolicysetOutputArgs } from "./getHttppolicyset";
export const getHttppolicyset: typeof import("./getHttppolicyset").getHttppolicyset = null as any;
export const getHttppolicysetOutput: typeof import("./getHttppolicyset").getHttppolicysetOutput = null as any;
utilities.lazyLoad(exports, ["getHttppolicyset","getHttppolicysetOutput"], () => require("./getHttppolicyset"));

export { GetIcapprofileArgs, GetIcapprofileResult, GetIcapprofileOutputArgs } from "./getIcapprofile";
export const getIcapprofile: typeof import("./getIcapprofile").getIcapprofile = null as any;
export const getIcapprofileOutput: typeof import("./getIcapprofile").getIcapprofileOutput = null as any;
utilities.lazyLoad(exports, ["getIcapprofile","getIcapprofileOutput"], () => require("./getIcapprofile"));

export { GetImageArgs, GetImageResult, GetImageOutputArgs } from "./getImage";
export const getImage: typeof import("./getImage").getImage = null as any;
export const getImageOutput: typeof import("./getImage").getImageOutput = null as any;
utilities.lazyLoad(exports, ["getImage","getImageOutput"], () => require("./getImage"));

export { GetInventoryfaultconfigArgs, GetInventoryfaultconfigResult, GetInventoryfaultconfigOutputArgs } from "./getInventoryfaultconfig";
export const getInventoryfaultconfig: typeof import("./getInventoryfaultconfig").getInventoryfaultconfig = null as any;
export const getInventoryfaultconfigOutput: typeof import("./getInventoryfaultconfig").getInventoryfaultconfigOutput = null as any;
utilities.lazyLoad(exports, ["getInventoryfaultconfig","getInventoryfaultconfigOutput"], () => require("./getInventoryfaultconfig"));

export { GetIpaddrgroupArgs, GetIpaddrgroupResult, GetIpaddrgroupOutputArgs } from "./getIpaddrgroup";
export const getIpaddrgroup: typeof import("./getIpaddrgroup").getIpaddrgroup = null as any;
export const getIpaddrgroupOutput: typeof import("./getIpaddrgroup").getIpaddrgroupOutput = null as any;
utilities.lazyLoad(exports, ["getIpaddrgroup","getIpaddrgroupOutput"], () => require("./getIpaddrgroup"));

export { GetIpamdnsproviderprofileArgs, GetIpamdnsproviderprofileResult, GetIpamdnsproviderprofileOutputArgs } from "./getIpamdnsproviderprofile";
export const getIpamdnsproviderprofile: typeof import("./getIpamdnsproviderprofile").getIpamdnsproviderprofile = null as any;
export const getIpamdnsproviderprofileOutput: typeof import("./getIpamdnsproviderprofile").getIpamdnsproviderprofileOutput = null as any;
utilities.lazyLoad(exports, ["getIpamdnsproviderprofile","getIpamdnsproviderprofileOutput"], () => require("./getIpamdnsproviderprofile"));

export { GetIpreputationdbArgs, GetIpreputationdbResult, GetIpreputationdbOutputArgs } from "./getIpreputationdb";
export const getIpreputationdb: typeof import("./getIpreputationdb").getIpreputationdb = null as any;
export const getIpreputationdbOutput: typeof import("./getIpreputationdb").getIpreputationdbOutput = null as any;
utilities.lazyLoad(exports, ["getIpreputationdb","getIpreputationdbOutput"], () => require("./getIpreputationdb"));

export { GetJwtserverprofileArgs, GetJwtserverprofileResult, GetJwtserverprofileOutputArgs } from "./getJwtserverprofile";
export const getJwtserverprofile: typeof import("./getJwtserverprofile").getJwtserverprofile = null as any;
export const getJwtserverprofileOutput: typeof import("./getJwtserverprofile").getJwtserverprofileOutput = null as any;
utilities.lazyLoad(exports, ["getJwtserverprofile","getJwtserverprofileOutput"], () => require("./getJwtserverprofile"));

export { GetL4policysetArgs, GetL4policysetResult, GetL4policysetOutputArgs } from "./getL4policyset";
export const getL4policyset: typeof import("./getL4policyset").getL4policyset = null as any;
export const getL4policysetOutput: typeof import("./getL4policyset").getL4policysetOutput = null as any;
utilities.lazyLoad(exports, ["getL4policyset","getL4policysetOutput"], () => require("./getL4policyset"));

export { GetLabelgroupArgs, GetLabelgroupResult, GetLabelgroupOutputArgs } from "./getLabelgroup";
export const getLabelgroup: typeof import("./getLabelgroup").getLabelgroup = null as any;
export const getLabelgroupOutput: typeof import("./getLabelgroup").getLabelgroupOutput = null as any;
utilities.lazyLoad(exports, ["getLabelgroup","getLabelgroupOutput"], () => require("./getLabelgroup"));

export { GetLicenseledgerdetailsArgs, GetLicenseledgerdetailsResult, GetLicenseledgerdetailsOutputArgs } from "./getLicenseledgerdetails";
export const getLicenseledgerdetails: typeof import("./getLicenseledgerdetails").getLicenseledgerdetails = null as any;
export const getLicenseledgerdetailsOutput: typeof import("./getLicenseledgerdetails").getLicenseledgerdetailsOutput = null as any;
utilities.lazyLoad(exports, ["getLicenseledgerdetails","getLicenseledgerdetailsOutput"], () => require("./getLicenseledgerdetails"));

export { GetLicensestatusArgs, GetLicensestatusResult, GetLicensestatusOutputArgs } from "./getLicensestatus";
export const getLicensestatus: typeof import("./getLicensestatus").getLicensestatus = null as any;
export const getLicensestatusOutput: typeof import("./getLicensestatus").getLicensestatusOutput = null as any;
utilities.lazyLoad(exports, ["getLicensestatus","getLicensestatusOutput"], () => require("./getLicensestatus"));

export { GetMemorybalancerrequestArgs, GetMemorybalancerrequestResult, GetMemorybalancerrequestOutputArgs } from "./getMemorybalancerrequest";
export const getMemorybalancerrequest: typeof import("./getMemorybalancerrequest").getMemorybalancerrequest = null as any;
export const getMemorybalancerrequestOutput: typeof import("./getMemorybalancerrequest").getMemorybalancerrequestOutput = null as any;
utilities.lazyLoad(exports, ["getMemorybalancerrequest","getMemorybalancerrequestOutput"], () => require("./getMemorybalancerrequest"));

export { GetMicroservicegroupArgs, GetMicroservicegroupResult, GetMicroservicegroupOutputArgs } from "./getMicroservicegroup";
export const getMicroservicegroup: typeof import("./getMicroservicegroup").getMicroservicegroup = null as any;
export const getMicroservicegroupOutput: typeof import("./getMicroservicegroup").getMicroservicegroupOutput = null as any;
utilities.lazyLoad(exports, ["getMicroservicegroup","getMicroservicegroupOutput"], () => require("./getMicroservicegroup"));

export { GetNatpolicyArgs, GetNatpolicyResult, GetNatpolicyOutputArgs } from "./getNatpolicy";
export const getNatpolicy: typeof import("./getNatpolicy").getNatpolicy = null as any;
export const getNatpolicyOutput: typeof import("./getNatpolicy").getNatpolicyOutput = null as any;
utilities.lazyLoad(exports, ["getNatpolicy","getNatpolicyOutput"], () => require("./getNatpolicy"));

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { GetNetworkprofileArgs, GetNetworkprofileResult, GetNetworkprofileOutputArgs } from "./getNetworkprofile";
export const getNetworkprofile: typeof import("./getNetworkprofile").getNetworkprofile = null as any;
export const getNetworkprofileOutput: typeof import("./getNetworkprofile").getNetworkprofileOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkprofile","getNetworkprofileOutput"], () => require("./getNetworkprofile"));

export { GetNetworksecuritypolicyArgs, GetNetworksecuritypolicyResult, GetNetworksecuritypolicyOutputArgs } from "./getNetworksecuritypolicy";
export const getNetworksecuritypolicy: typeof import("./getNetworksecuritypolicy").getNetworksecuritypolicy = null as any;
export const getNetworksecuritypolicyOutput: typeof import("./getNetworksecuritypolicy").getNetworksecuritypolicyOutput = null as any;
utilities.lazyLoad(exports, ["getNetworksecuritypolicy","getNetworksecuritypolicyOutput"], () => require("./getNetworksecuritypolicy"));

export { GetNetworkserviceArgs, GetNetworkserviceResult, GetNetworkserviceOutputArgs } from "./getNetworkservice";
export const getNetworkservice: typeof import("./getNetworkservice").getNetworkservice = null as any;
export const getNetworkserviceOutput: typeof import("./getNetworkservice").getNetworkserviceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkservice","getNetworkserviceOutput"], () => require("./getNetworkservice"));

export { GetNsxtsegmentruntimeArgs, GetNsxtsegmentruntimeResult, GetNsxtsegmentruntimeOutputArgs } from "./getNsxtsegmentruntime";
export const getNsxtsegmentruntime: typeof import("./getNsxtsegmentruntime").getNsxtsegmentruntime = null as any;
export const getNsxtsegmentruntimeOutput: typeof import("./getNsxtsegmentruntime").getNsxtsegmentruntimeOutput = null as any;
utilities.lazyLoad(exports, ["getNsxtsegmentruntime","getNsxtsegmentruntimeOutput"], () => require("./getNsxtsegmentruntime"));

export { GetPkiprofileArgs, GetPkiprofileResult, GetPkiprofileOutputArgs } from "./getPkiprofile";
export const getPkiprofile: typeof import("./getPkiprofile").getPkiprofile = null as any;
export const getPkiprofileOutput: typeof import("./getPkiprofile").getPkiprofileOutput = null as any;
utilities.lazyLoad(exports, ["getPkiprofile","getPkiprofileOutput"], () => require("./getPkiprofile"));

export { GetPoolArgs, GetPoolResult, GetPoolOutputArgs } from "./getPool";
export const getPool: typeof import("./getPool").getPool = null as any;
export const getPoolOutput: typeof import("./getPool").getPoolOutput = null as any;
utilities.lazyLoad(exports, ["getPool","getPoolOutput"], () => require("./getPool"));

export { GetPoolgroupArgs, GetPoolgroupResult, GetPoolgroupOutputArgs } from "./getPoolgroup";
export const getPoolgroup: typeof import("./getPoolgroup").getPoolgroup = null as any;
export const getPoolgroupOutput: typeof import("./getPoolgroup").getPoolgroupOutput = null as any;
utilities.lazyLoad(exports, ["getPoolgroup","getPoolgroupOutput"], () => require("./getPoolgroup"));

export { GetPoolgroupdeploymentpolicyArgs, GetPoolgroupdeploymentpolicyResult, GetPoolgroupdeploymentpolicyOutputArgs } from "./getPoolgroupdeploymentpolicy";
export const getPoolgroupdeploymentpolicy: typeof import("./getPoolgroupdeploymentpolicy").getPoolgroupdeploymentpolicy = null as any;
export const getPoolgroupdeploymentpolicyOutput: typeof import("./getPoolgroupdeploymentpolicy").getPoolgroupdeploymentpolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPoolgroupdeploymentpolicy","getPoolgroupdeploymentpolicyOutput"], () => require("./getPoolgroupdeploymentpolicy"));

export { GetPrioritylabelsArgs, GetPrioritylabelsResult, GetPrioritylabelsOutputArgs } from "./getPrioritylabels";
export const getPrioritylabels: typeof import("./getPrioritylabels").getPrioritylabels = null as any;
export const getPrioritylabelsOutput: typeof import("./getPrioritylabels").getPrioritylabelsOutput = null as any;
utilities.lazyLoad(exports, ["getPrioritylabels","getPrioritylabelsOutput"], () => require("./getPrioritylabels"));

export { GetProtocolparserArgs, GetProtocolparserResult, GetProtocolparserOutputArgs } from "./getProtocolparser";
export const getProtocolparser: typeof import("./getProtocolparser").getProtocolparser = null as any;
export const getProtocolparserOutput: typeof import("./getProtocolparser").getProtocolparserOutput = null as any;
utilities.lazyLoad(exports, ["getProtocolparser","getProtocolparserOutput"], () => require("./getProtocolparser"));

export { GetRmcloudopsprotoArgs, GetRmcloudopsprotoResult, GetRmcloudopsprotoOutputArgs } from "./getRmcloudopsproto";
export const getRmcloudopsproto: typeof import("./getRmcloudopsproto").getRmcloudopsproto = null as any;
export const getRmcloudopsprotoOutput: typeof import("./getRmcloudopsproto").getRmcloudopsprotoOutput = null as any;
utilities.lazyLoad(exports, ["getRmcloudopsproto","getRmcloudopsprotoOutput"], () => require("./getRmcloudopsproto"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetSchedulerArgs, GetSchedulerResult, GetSchedulerOutputArgs } from "./getScheduler";
export const getScheduler: typeof import("./getScheduler").getScheduler = null as any;
export const getSchedulerOutput: typeof import("./getScheduler").getSchedulerOutput = null as any;
utilities.lazyLoad(exports, ["getScheduler","getSchedulerOutput"], () => require("./getScheduler"));

export { GetSecuritymanagerdataArgs, GetSecuritymanagerdataResult, GetSecuritymanagerdataOutputArgs } from "./getSecuritymanagerdata";
export const getSecuritymanagerdata: typeof import("./getSecuritymanagerdata").getSecuritymanagerdata = null as any;
export const getSecuritymanagerdataOutput: typeof import("./getSecuritymanagerdata").getSecuritymanagerdataOutput = null as any;
utilities.lazyLoad(exports, ["getSecuritymanagerdata","getSecuritymanagerdataOutput"], () => require("./getSecuritymanagerdata"));

export { GetSecuritypolicyArgs, GetSecuritypolicyResult, GetSecuritypolicyOutputArgs } from "./getSecuritypolicy";
export const getSecuritypolicy: typeof import("./getSecuritypolicy").getSecuritypolicy = null as any;
export const getSecuritypolicyOutput: typeof import("./getSecuritypolicy").getSecuritypolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSecuritypolicy","getSecuritypolicyOutput"], () => require("./getSecuritypolicy"));

export { GetSepropertiesArgs, GetSepropertiesResult, GetSepropertiesOutputArgs } from "./getSeproperties";
export const getSeproperties: typeof import("./getSeproperties").getSeproperties = null as any;
export const getSepropertiesOutput: typeof import("./getSeproperties").getSepropertiesOutput = null as any;
utilities.lazyLoad(exports, ["getSeproperties","getSepropertiesOutput"], () => require("./getSeproperties"));

export { GetServerArgs, GetServerResult, GetServerOutputArgs } from "./getServer";
export const getServer: typeof import("./getServer").getServer = null as any;
export const getServerOutput: typeof import("./getServer").getServerOutput = null as any;
utilities.lazyLoad(exports, ["getServer","getServerOutput"], () => require("./getServer"));

export { GetServerautoscalepolicyArgs, GetServerautoscalepolicyResult, GetServerautoscalepolicyOutputArgs } from "./getServerautoscalepolicy";
export const getServerautoscalepolicy: typeof import("./getServerautoscalepolicy").getServerautoscalepolicy = null as any;
export const getServerautoscalepolicyOutput: typeof import("./getServerautoscalepolicy").getServerautoscalepolicyOutput = null as any;
utilities.lazyLoad(exports, ["getServerautoscalepolicy","getServerautoscalepolicyOutput"], () => require("./getServerautoscalepolicy"));

export { GetServiceauthprofileArgs, GetServiceauthprofileResult, GetServiceauthprofileOutputArgs } from "./getServiceauthprofile";
export const getServiceauthprofile: typeof import("./getServiceauthprofile").getServiceauthprofile = null as any;
export const getServiceauthprofileOutput: typeof import("./getServiceauthprofile").getServiceauthprofileOutput = null as any;
utilities.lazyLoad(exports, ["getServiceauthprofile","getServiceauthprofileOutput"], () => require("./getServiceauthprofile"));

export { GetServiceengineArgs, GetServiceengineResult, GetServiceengineOutputArgs } from "./getServiceengine";
export const getServiceengine: typeof import("./getServiceengine").getServiceengine = null as any;
export const getServiceengineOutput: typeof import("./getServiceengine").getServiceengineOutput = null as any;
utilities.lazyLoad(exports, ["getServiceengine","getServiceengineOutput"], () => require("./getServiceengine"));

export { GetServiceenginegroupArgs, GetServiceenginegroupResult, GetServiceenginegroupOutputArgs } from "./getServiceenginegroup";
export const getServiceenginegroup: typeof import("./getServiceenginegroup").getServiceenginegroup = null as any;
export const getServiceenginegroupOutput: typeof import("./getServiceenginegroup").getServiceenginegroupOutput = null as any;
utilities.lazyLoad(exports, ["getServiceenginegroup","getServiceenginegroupOutput"], () => require("./getServiceenginegroup"));

export { GetSiteversionArgs, GetSiteversionResult, GetSiteversionOutputArgs } from "./getSiteversion";
export const getSiteversion: typeof import("./getSiteversion").getSiteversion = null as any;
export const getSiteversionOutput: typeof import("./getSiteversion").getSiteversionOutput = null as any;
utilities.lazyLoad(exports, ["getSiteversion","getSiteversionOutput"], () => require("./getSiteversion"));

export { GetSnmptrapprofileArgs, GetSnmptrapprofileResult, GetSnmptrapprofileOutputArgs } from "./getSnmptrapprofile";
export const getSnmptrapprofile: typeof import("./getSnmptrapprofile").getSnmptrapprofile = null as any;
export const getSnmptrapprofileOutput: typeof import("./getSnmptrapprofile").getSnmptrapprofileOutput = null as any;
utilities.lazyLoad(exports, ["getSnmptrapprofile","getSnmptrapprofileOutput"], () => require("./getSnmptrapprofile"));

export { GetSslkeyandcertificateArgs, GetSslkeyandcertificateResult, GetSslkeyandcertificateOutputArgs } from "./getSslkeyandcertificate";
export const getSslkeyandcertificate: typeof import("./getSslkeyandcertificate").getSslkeyandcertificate = null as any;
export const getSslkeyandcertificateOutput: typeof import("./getSslkeyandcertificate").getSslkeyandcertificateOutput = null as any;
utilities.lazyLoad(exports, ["getSslkeyandcertificate","getSslkeyandcertificateOutput"], () => require("./getSslkeyandcertificate"));

export { GetSslprofileArgs, GetSslprofileResult, GetSslprofileOutputArgs } from "./getSslprofile";
export const getSslprofile: typeof import("./getSslprofile").getSslprofile = null as any;
export const getSslprofileOutput: typeof import("./getSslprofile").getSslprofileOutput = null as any;
utilities.lazyLoad(exports, ["getSslprofile","getSslprofileOutput"], () => require("./getSslprofile"));

export { GetSsopolicyArgs, GetSsopolicyResult, GetSsopolicyOutputArgs } from "./getSsopolicy";
export const getSsopolicy: typeof import("./getSsopolicy").getSsopolicy = null as any;
export const getSsopolicyOutput: typeof import("./getSsopolicy").getSsopolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSsopolicy","getSsopolicyOutput"], () => require("./getSsopolicy"));

export { GetStatediffoperationArgs, GetStatediffoperationResult, GetStatediffoperationOutputArgs } from "./getStatediffoperation";
export const getStatediffoperation: typeof import("./getStatediffoperation").getStatediffoperation = null as any;
export const getStatediffoperationOutput: typeof import("./getStatediffoperation").getStatediffoperationOutput = null as any;
utilities.lazyLoad(exports, ["getStatediffoperation","getStatediffoperationOutput"], () => require("./getStatediffoperation"));

export { GetStatediffsnapshotArgs, GetStatediffsnapshotResult, GetStatediffsnapshotOutputArgs } from "./getStatediffsnapshot";
export const getStatediffsnapshot: typeof import("./getStatediffsnapshot").getStatediffsnapshot = null as any;
export const getStatediffsnapshotOutput: typeof import("./getStatediffsnapshot").getStatediffsnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getStatediffsnapshot","getStatediffsnapshotOutput"], () => require("./getStatediffsnapshot"));

export { GetStringgroupArgs, GetStringgroupResult, GetStringgroupOutputArgs } from "./getStringgroup";
export const getStringgroup: typeof import("./getStringgroup").getStringgroup = null as any;
export const getStringgroupOutput: typeof import("./getStringgroup").getStringgroupOutput = null as any;
utilities.lazyLoad(exports, ["getStringgroup","getStringgroupOutput"], () => require("./getStringgroup"));

export { GetSystemconfigurationArgs, GetSystemconfigurationResult, GetSystemconfigurationOutputArgs } from "./getSystemconfiguration";
export const getSystemconfiguration: typeof import("./getSystemconfiguration").getSystemconfiguration = null as any;
export const getSystemconfigurationOutput: typeof import("./getSystemconfiguration").getSystemconfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getSystemconfiguration","getSystemconfigurationOutput"], () => require("./getSystemconfiguration"));

export { GetSystemlimitsArgs, GetSystemlimitsResult, GetSystemlimitsOutputArgs } from "./getSystemlimits";
export const getSystemlimits: typeof import("./getSystemlimits").getSystemlimits = null as any;
export const getSystemlimitsOutput: typeof import("./getSystemlimits").getSystemlimitsOutput = null as any;
utilities.lazyLoad(exports, ["getSystemlimits","getSystemlimitsOutput"], () => require("./getSystemlimits"));

export { GetSystemreportArgs, GetSystemreportResult, GetSystemreportOutputArgs } from "./getSystemreport";
export const getSystemreport: typeof import("./getSystemreport").getSystemreport = null as any;
export const getSystemreportOutput: typeof import("./getSystemreport").getSystemreportOutput = null as any;
utilities.lazyLoad(exports, ["getSystemreport","getSystemreportOutput"], () => require("./getSystemreport"));

export { GetTaskjournalArgs, GetTaskjournalResult, GetTaskjournalOutputArgs } from "./getTaskjournal";
export const getTaskjournal: typeof import("./getTaskjournal").getTaskjournal = null as any;
export const getTaskjournalOutput: typeof import("./getTaskjournal").getTaskjournalOutput = null as any;
utilities.lazyLoad(exports, ["getTaskjournal","getTaskjournalOutput"], () => require("./getTaskjournal"));

export { GetTenantArgs, GetTenantResult, GetTenantOutputArgs } from "./getTenant";
export const getTenant: typeof import("./getTenant").getTenant = null as any;
export const getTenantOutput: typeof import("./getTenant").getTenantOutput = null as any;
utilities.lazyLoad(exports, ["getTenant","getTenantOutput"], () => require("./getTenant"));

export { GetTenantsystemconfigurationArgs, GetTenantsystemconfigurationResult, GetTenantsystemconfigurationOutputArgs } from "./getTenantsystemconfiguration";
export const getTenantsystemconfiguration: typeof import("./getTenantsystemconfiguration").getTenantsystemconfiguration = null as any;
export const getTenantsystemconfigurationOutput: typeof import("./getTenantsystemconfiguration").getTenantsystemconfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getTenantsystemconfiguration","getTenantsystemconfigurationOutput"], () => require("./getTenantsystemconfiguration"));

export { GetTestsedatastorelevel1Args, GetTestsedatastorelevel1Result, GetTestsedatastorelevel1OutputArgs } from "./getTestsedatastorelevel1";
export const getTestsedatastorelevel1: typeof import("./getTestsedatastorelevel1").getTestsedatastorelevel1 = null as any;
export const getTestsedatastorelevel1Output: typeof import("./getTestsedatastorelevel1").getTestsedatastorelevel1Output = null as any;
utilities.lazyLoad(exports, ["getTestsedatastorelevel1","getTestsedatastorelevel1Output"], () => require("./getTestsedatastorelevel1"));

export { GetTestsedatastorelevel2Args, GetTestsedatastorelevel2Result, GetTestsedatastorelevel2OutputArgs } from "./getTestsedatastorelevel2";
export const getTestsedatastorelevel2: typeof import("./getTestsedatastorelevel2").getTestsedatastorelevel2 = null as any;
export const getTestsedatastorelevel2Output: typeof import("./getTestsedatastorelevel2").getTestsedatastorelevel2Output = null as any;
utilities.lazyLoad(exports, ["getTestsedatastorelevel2","getTestsedatastorelevel2Output"], () => require("./getTestsedatastorelevel2"));

export { GetTestsedatastorelevel3Args, GetTestsedatastorelevel3Result, GetTestsedatastorelevel3OutputArgs } from "./getTestsedatastorelevel3";
export const getTestsedatastorelevel3: typeof import("./getTestsedatastorelevel3").getTestsedatastorelevel3 = null as any;
export const getTestsedatastorelevel3Output: typeof import("./getTestsedatastorelevel3").getTestsedatastorelevel3Output = null as any;
utilities.lazyLoad(exports, ["getTestsedatastorelevel3","getTestsedatastorelevel3Output"], () => require("./getTestsedatastorelevel3"));

export { GetTrafficcloneprofileArgs, GetTrafficcloneprofileResult, GetTrafficcloneprofileOutputArgs } from "./getTrafficcloneprofile";
export const getTrafficcloneprofile: typeof import("./getTrafficcloneprofile").getTrafficcloneprofile = null as any;
export const getTrafficcloneprofileOutput: typeof import("./getTrafficcloneprofile").getTrafficcloneprofileOutput = null as any;
utilities.lazyLoad(exports, ["getTrafficcloneprofile","getTrafficcloneprofileOutput"], () => require("./getTrafficcloneprofile"));

export { GetUpgradestatusinfoArgs, GetUpgradestatusinfoResult, GetUpgradestatusinfoOutputArgs } from "./getUpgradestatusinfo";
export const getUpgradestatusinfo: typeof import("./getUpgradestatusinfo").getUpgradestatusinfo = null as any;
export const getUpgradestatusinfoOutput: typeof import("./getUpgradestatusinfo").getUpgradestatusinfoOutput = null as any;
utilities.lazyLoad(exports, ["getUpgradestatusinfo","getUpgradestatusinfoOutput"], () => require("./getUpgradestatusinfo"));

export { GetUpgradestatussummaryArgs, GetUpgradestatussummaryResult, GetUpgradestatussummaryOutputArgs } from "./getUpgradestatussummary";
export const getUpgradestatussummary: typeof import("./getUpgradestatussummary").getUpgradestatussummary = null as any;
export const getUpgradestatussummaryOutput: typeof import("./getUpgradestatussummary").getUpgradestatussummaryOutput = null as any;
utilities.lazyLoad(exports, ["getUpgradestatussummary","getUpgradestatussummaryOutput"], () => require("./getUpgradestatussummary"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUseraccountprofileArgs, GetUseraccountprofileResult, GetUseraccountprofileOutputArgs } from "./getUseraccountprofile";
export const getUseraccountprofile: typeof import("./getUseraccountprofile").getUseraccountprofile = null as any;
export const getUseraccountprofileOutput: typeof import("./getUseraccountprofile").getUseraccountprofileOutput = null as any;
utilities.lazyLoad(exports, ["getUseraccountprofile","getUseraccountprofileOutput"], () => require("./getUseraccountprofile"));

export { GetVcenterserverArgs, GetVcenterserverResult, GetVcenterserverOutputArgs } from "./getVcenterserver";
export const getVcenterserver: typeof import("./getVcenterserver").getVcenterserver = null as any;
export const getVcenterserverOutput: typeof import("./getVcenterserver").getVcenterserverOutput = null as any;
utilities.lazyLoad(exports, ["getVcenterserver","getVcenterserverOutput"], () => require("./getVcenterserver"));

export { GetVirtualserviceArgs, GetVirtualserviceResult, GetVirtualserviceOutputArgs } from "./getVirtualservice";
export const getVirtualservice: typeof import("./getVirtualservice").getVirtualservice = null as any;
export const getVirtualserviceOutput: typeof import("./getVirtualservice").getVirtualserviceOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualservice","getVirtualserviceOutput"], () => require("./getVirtualservice"));

export { GetVrfcontextArgs, GetVrfcontextResult, GetVrfcontextOutputArgs } from "./getVrfcontext";
export const getVrfcontext: typeof import("./getVrfcontext").getVrfcontext = null as any;
export const getVrfcontextOutput: typeof import("./getVrfcontext").getVrfcontextOutput = null as any;
utilities.lazyLoad(exports, ["getVrfcontext","getVrfcontextOutput"], () => require("./getVrfcontext"));

export { GetVsdatascriptsetArgs, GetVsdatascriptsetResult, GetVsdatascriptsetOutputArgs } from "./getVsdatascriptset";
export const getVsdatascriptset: typeof import("./getVsdatascriptset").getVsdatascriptset = null as any;
export const getVsdatascriptsetOutput: typeof import("./getVsdatascriptset").getVsdatascriptsetOutput = null as any;
utilities.lazyLoad(exports, ["getVsdatascriptset","getVsdatascriptsetOutput"], () => require("./getVsdatascriptset"));

export { GetVsgsArgs, GetVsgsResult, GetVsgsOutputArgs } from "./getVsgs";
export const getVsgs: typeof import("./getVsgs").getVsgs = null as any;
export const getVsgsOutput: typeof import("./getVsgs").getVsgsOutput = null as any;
utilities.lazyLoad(exports, ["getVsgs","getVsgsOutput"], () => require("./getVsgs"));

export { GetVsvipArgs, GetVsvipResult, GetVsvipOutputArgs } from "./getVsvip";
export const getVsvip: typeof import("./getVsvip").getVsvip = null as any;
export const getVsvipOutput: typeof import("./getVsvip").getVsvipOutput = null as any;
utilities.lazyLoad(exports, ["getVsvip","getVsvipOutput"], () => require("./getVsvip"));

export { GetWafapplicationsignatureproviderArgs, GetWafapplicationsignatureproviderResult, GetWafapplicationsignatureproviderOutputArgs } from "./getWafapplicationsignatureprovider";
export const getWafapplicationsignatureprovider: typeof import("./getWafapplicationsignatureprovider").getWafapplicationsignatureprovider = null as any;
export const getWafapplicationsignatureproviderOutput: typeof import("./getWafapplicationsignatureprovider").getWafapplicationsignatureproviderOutput = null as any;
utilities.lazyLoad(exports, ["getWafapplicationsignatureprovider","getWafapplicationsignatureproviderOutput"], () => require("./getWafapplicationsignatureprovider"));

export { GetWafcrsArgs, GetWafcrsResult, GetWafcrsOutputArgs } from "./getWafcrs";
export const getWafcrs: typeof import("./getWafcrs").getWafcrs = null as any;
export const getWafcrsOutput: typeof import("./getWafcrs").getWafcrsOutput = null as any;
utilities.lazyLoad(exports, ["getWafcrs","getWafcrsOutput"], () => require("./getWafcrs"));

export { GetWafpolicyArgs, GetWafpolicyResult, GetWafpolicyOutputArgs } from "./getWafpolicy";
export const getWafpolicy: typeof import("./getWafpolicy").getWafpolicy = null as any;
export const getWafpolicyOutput: typeof import("./getWafpolicy").getWafpolicyOutput = null as any;
utilities.lazyLoad(exports, ["getWafpolicy","getWafpolicyOutput"], () => require("./getWafpolicy"));

export { GetWafpolicypsmgroupArgs, GetWafpolicypsmgroupResult, GetWafpolicypsmgroupOutputArgs } from "./getWafpolicypsmgroup";
export const getWafpolicypsmgroup: typeof import("./getWafpolicypsmgroup").getWafpolicypsmgroup = null as any;
export const getWafpolicypsmgroupOutput: typeof import("./getWafpolicypsmgroup").getWafpolicypsmgroupOutput = null as any;
utilities.lazyLoad(exports, ["getWafpolicypsmgroup","getWafpolicypsmgroupOutput"], () => require("./getWafpolicypsmgroup"));

export { GetWafprofileArgs, GetWafprofileResult, GetWafprofileOutputArgs } from "./getWafprofile";
export const getWafprofile: typeof import("./getWafprofile").getWafprofile = null as any;
export const getWafprofileOutput: typeof import("./getWafprofile").getWafprofileOutput = null as any;
utilities.lazyLoad(exports, ["getWafprofile","getWafprofileOutput"], () => require("./getWafprofile"));

export { GetWebapputArgs, GetWebapputResult, GetWebapputOutputArgs } from "./getWebapput";
export const getWebapput: typeof import("./getWebapput").getWebapput = null as any;
export const getWebapputOutput: typeof import("./getWebapput").getWebapputOutput = null as any;
utilities.lazyLoad(exports, ["getWebapput","getWebapputOutput"], () => require("./getWebapput"));

export { GetWebhookArgs, GetWebhookResult, GetWebhookOutputArgs } from "./getWebhook";
export const getWebhook: typeof import("./getWebhook").getWebhook = null as any;
export const getWebhookOutput: typeof import("./getWebhook").getWebhookOutput = null as any;
utilities.lazyLoad(exports, ["getWebhook","getWebhookOutput"], () => require("./getWebhook"));

export { GslbArgs, GslbState } from "./gslb";
export type Gslb = import("./gslb").Gslb;
export const Gslb: typeof import("./gslb").Gslb = null as any;
utilities.lazyLoad(exports, ["Gslb"], () => require("./gslb"));

export { GslbgeodbprofileArgs, GslbgeodbprofileState } from "./gslbgeodbprofile";
export type Gslbgeodbprofile = import("./gslbgeodbprofile").Gslbgeodbprofile;
export const Gslbgeodbprofile: typeof import("./gslbgeodbprofile").Gslbgeodbprofile = null as any;
utilities.lazyLoad(exports, ["Gslbgeodbprofile"], () => require("./gslbgeodbprofile"));

export { GslbserviceArgs, GslbserviceState } from "./gslbservice";
export type Gslbservice = import("./gslbservice").Gslbservice;
export const Gslbservice: typeof import("./gslbservice").Gslbservice = null as any;
utilities.lazyLoad(exports, ["Gslbservice"], () => require("./gslbservice"));

export { HardwaresecuritymodulegroupArgs, HardwaresecuritymodulegroupState } from "./hardwaresecuritymodulegroup";
export type Hardwaresecuritymodulegroup = import("./hardwaresecuritymodulegroup").Hardwaresecuritymodulegroup;
export const Hardwaresecuritymodulegroup: typeof import("./hardwaresecuritymodulegroup").Hardwaresecuritymodulegroup = null as any;
utilities.lazyLoad(exports, ["Hardwaresecuritymodulegroup"], () => require("./hardwaresecuritymodulegroup"));

export { HealthmonitorArgs, HealthmonitorState } from "./healthmonitor";
export type Healthmonitor = import("./healthmonitor").Healthmonitor;
export const Healthmonitor: typeof import("./healthmonitor").Healthmonitor = null as any;
utilities.lazyLoad(exports, ["Healthmonitor"], () => require("./healthmonitor"));

export { HttppolicysetArgs, HttppolicysetState } from "./httppolicyset";
export type Httppolicyset = import("./httppolicyset").Httppolicyset;
export const Httppolicyset: typeof import("./httppolicyset").Httppolicyset = null as any;
utilities.lazyLoad(exports, ["Httppolicyset"], () => require("./httppolicyset"));

export { IcapprofileArgs, IcapprofileState } from "./icapprofile";
export type Icapprofile = import("./icapprofile").Icapprofile;
export const Icapprofile: typeof import("./icapprofile").Icapprofile = null as any;
utilities.lazyLoad(exports, ["Icapprofile"], () => require("./icapprofile"));

export { ImageArgs, ImageState } from "./image";
export type Image = import("./image").Image;
export const Image: typeof import("./image").Image = null as any;
utilities.lazyLoad(exports, ["Image"], () => require("./image"));

export { InventoryfaultconfigArgs, InventoryfaultconfigState } from "./inventoryfaultconfig";
export type Inventoryfaultconfig = import("./inventoryfaultconfig").Inventoryfaultconfig;
export const Inventoryfaultconfig: typeof import("./inventoryfaultconfig").Inventoryfaultconfig = null as any;
utilities.lazyLoad(exports, ["Inventoryfaultconfig"], () => require("./inventoryfaultconfig"));

export { IpaddrgroupArgs, IpaddrgroupState } from "./ipaddrgroup";
export type Ipaddrgroup = import("./ipaddrgroup").Ipaddrgroup;
export const Ipaddrgroup: typeof import("./ipaddrgroup").Ipaddrgroup = null as any;
utilities.lazyLoad(exports, ["Ipaddrgroup"], () => require("./ipaddrgroup"));

export { IpamdnsproviderprofileArgs, IpamdnsproviderprofileState } from "./ipamdnsproviderprofile";
export type Ipamdnsproviderprofile = import("./ipamdnsproviderprofile").Ipamdnsproviderprofile;
export const Ipamdnsproviderprofile: typeof import("./ipamdnsproviderprofile").Ipamdnsproviderprofile = null as any;
utilities.lazyLoad(exports, ["Ipamdnsproviderprofile"], () => require("./ipamdnsproviderprofile"));

export { IpreputationdbArgs, IpreputationdbState } from "./ipreputationdb";
export type Ipreputationdb = import("./ipreputationdb").Ipreputationdb;
export const Ipreputationdb: typeof import("./ipreputationdb").Ipreputationdb = null as any;
utilities.lazyLoad(exports, ["Ipreputationdb"], () => require("./ipreputationdb"));

export { JwtserverprofileArgs, JwtserverprofileState } from "./jwtserverprofile";
export type Jwtserverprofile = import("./jwtserverprofile").Jwtserverprofile;
export const Jwtserverprofile: typeof import("./jwtserverprofile").Jwtserverprofile = null as any;
utilities.lazyLoad(exports, ["Jwtserverprofile"], () => require("./jwtserverprofile"));

export { L4policysetArgs, L4policysetState } from "./l4policyset";
export type L4policyset = import("./l4policyset").L4policyset;
export const L4policyset: typeof import("./l4policyset").L4policyset = null as any;
utilities.lazyLoad(exports, ["L4policyset"], () => require("./l4policyset"));

export { LabelgroupArgs, LabelgroupState } from "./labelgroup";
export type Labelgroup = import("./labelgroup").Labelgroup;
export const Labelgroup: typeof import("./labelgroup").Labelgroup = null as any;
utilities.lazyLoad(exports, ["Labelgroup"], () => require("./labelgroup"));

export { LicenseledgerdetailsArgs, LicenseledgerdetailsState } from "./licenseledgerdetails";
export type Licenseledgerdetails = import("./licenseledgerdetails").Licenseledgerdetails;
export const Licenseledgerdetails: typeof import("./licenseledgerdetails").Licenseledgerdetails = null as any;
utilities.lazyLoad(exports, ["Licenseledgerdetails"], () => require("./licenseledgerdetails"));

export { LicensestatusArgs, LicensestatusState } from "./licensestatus";
export type Licensestatus = import("./licensestatus").Licensestatus;
export const Licensestatus: typeof import("./licensestatus").Licensestatus = null as any;
utilities.lazyLoad(exports, ["Licensestatus"], () => require("./licensestatus"));

export { MemorybalancerrequestArgs, MemorybalancerrequestState } from "./memorybalancerrequest";
export type Memorybalancerrequest = import("./memorybalancerrequest").Memorybalancerrequest;
export const Memorybalancerrequest: typeof import("./memorybalancerrequest").Memorybalancerrequest = null as any;
utilities.lazyLoad(exports, ["Memorybalancerrequest"], () => require("./memorybalancerrequest"));

export { MicroservicegroupArgs, MicroservicegroupState } from "./microservicegroup";
export type Microservicegroup = import("./microservicegroup").Microservicegroup;
export const Microservicegroup: typeof import("./microservicegroup").Microservicegroup = null as any;
utilities.lazyLoad(exports, ["Microservicegroup"], () => require("./microservicegroup"));

export { NatpolicyArgs, NatpolicyState } from "./natpolicy";
export type Natpolicy = import("./natpolicy").Natpolicy;
export const Natpolicy: typeof import("./natpolicy").Natpolicy = null as any;
utilities.lazyLoad(exports, ["Natpolicy"], () => require("./natpolicy"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { NetworkprofileArgs, NetworkprofileState } from "./networkprofile";
export type Networkprofile = import("./networkprofile").Networkprofile;
export const Networkprofile: typeof import("./networkprofile").Networkprofile = null as any;
utilities.lazyLoad(exports, ["Networkprofile"], () => require("./networkprofile"));

export { NetworksecuritypolicyArgs, NetworksecuritypolicyState } from "./networksecuritypolicy";
export type Networksecuritypolicy = import("./networksecuritypolicy").Networksecuritypolicy;
export const Networksecuritypolicy: typeof import("./networksecuritypolicy").Networksecuritypolicy = null as any;
utilities.lazyLoad(exports, ["Networksecuritypolicy"], () => require("./networksecuritypolicy"));

export { NetworkserviceArgs, NetworkserviceState } from "./networkservice";
export type Networkservice = import("./networkservice").Networkservice;
export const Networkservice: typeof import("./networkservice").Networkservice = null as any;
utilities.lazyLoad(exports, ["Networkservice"], () => require("./networkservice"));

export { NsxtsegmentruntimeArgs, NsxtsegmentruntimeState } from "./nsxtsegmentruntime";
export type Nsxtsegmentruntime = import("./nsxtsegmentruntime").Nsxtsegmentruntime;
export const Nsxtsegmentruntime: typeof import("./nsxtsegmentruntime").Nsxtsegmentruntime = null as any;
utilities.lazyLoad(exports, ["Nsxtsegmentruntime"], () => require("./nsxtsegmentruntime"));

export { PkiprofileArgs, PkiprofileState } from "./pkiprofile";
export type Pkiprofile = import("./pkiprofile").Pkiprofile;
export const Pkiprofile: typeof import("./pkiprofile").Pkiprofile = null as any;
utilities.lazyLoad(exports, ["Pkiprofile"], () => require("./pkiprofile"));

export { PoolArgs, PoolState } from "./pool";
export type Pool = import("./pool").Pool;
export const Pool: typeof import("./pool").Pool = null as any;
utilities.lazyLoad(exports, ["Pool"], () => require("./pool"));

export { PoolgroupArgs, PoolgroupState } from "./poolgroup";
export type Poolgroup = import("./poolgroup").Poolgroup;
export const Poolgroup: typeof import("./poolgroup").Poolgroup = null as any;
utilities.lazyLoad(exports, ["Poolgroup"], () => require("./poolgroup"));

export { PoolgroupdeploymentpolicyArgs, PoolgroupdeploymentpolicyState } from "./poolgroupdeploymentpolicy";
export type Poolgroupdeploymentpolicy = import("./poolgroupdeploymentpolicy").Poolgroupdeploymentpolicy;
export const Poolgroupdeploymentpolicy: typeof import("./poolgroupdeploymentpolicy").Poolgroupdeploymentpolicy = null as any;
utilities.lazyLoad(exports, ["Poolgroupdeploymentpolicy"], () => require("./poolgroupdeploymentpolicy"));

export { PrioritylabelsArgs, PrioritylabelsState } from "./prioritylabels";
export type Prioritylabels = import("./prioritylabels").Prioritylabels;
export const Prioritylabels: typeof import("./prioritylabels").Prioritylabels = null as any;
utilities.lazyLoad(exports, ["Prioritylabels"], () => require("./prioritylabels"));

export { ProtocolparserArgs, ProtocolparserState } from "./protocolparser";
export type Protocolparser = import("./protocolparser").Protocolparser;
export const Protocolparser: typeof import("./protocolparser").Protocolparser = null as any;
utilities.lazyLoad(exports, ["Protocolparser"], () => require("./protocolparser"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RmcloudopsprotoArgs, RmcloudopsprotoState } from "./rmcloudopsproto";
export type Rmcloudopsproto = import("./rmcloudopsproto").Rmcloudopsproto;
export const Rmcloudopsproto: typeof import("./rmcloudopsproto").Rmcloudopsproto = null as any;
utilities.lazyLoad(exports, ["Rmcloudopsproto"], () => require("./rmcloudopsproto"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { SchedulerArgs, SchedulerState } from "./scheduler";
export type Scheduler = import("./scheduler").Scheduler;
export const Scheduler: typeof import("./scheduler").Scheduler = null as any;
utilities.lazyLoad(exports, ["Scheduler"], () => require("./scheduler"));

export { SecuritymanagerdataArgs, SecuritymanagerdataState } from "./securitymanagerdata";
export type Securitymanagerdata = import("./securitymanagerdata").Securitymanagerdata;
export const Securitymanagerdata: typeof import("./securitymanagerdata").Securitymanagerdata = null as any;
utilities.lazyLoad(exports, ["Securitymanagerdata"], () => require("./securitymanagerdata"));

export { SecuritypolicyArgs, SecuritypolicyState } from "./securitypolicy";
export type Securitypolicy = import("./securitypolicy").Securitypolicy;
export const Securitypolicy: typeof import("./securitypolicy").Securitypolicy = null as any;
utilities.lazyLoad(exports, ["Securitypolicy"], () => require("./securitypolicy"));

export { SepropertiesArgs, SepropertiesState } from "./seproperties";
export type Seproperties = import("./seproperties").Seproperties;
export const Seproperties: typeof import("./seproperties").Seproperties = null as any;
utilities.lazyLoad(exports, ["Seproperties"], () => require("./seproperties"));

export { ServerArgs, ServerState } from "./server";
export type Server = import("./server").Server;
export const Server: typeof import("./server").Server = null as any;
utilities.lazyLoad(exports, ["Server"], () => require("./server"));

export { ServerautoscalepolicyArgs, ServerautoscalepolicyState } from "./serverautoscalepolicy";
export type Serverautoscalepolicy = import("./serverautoscalepolicy").Serverautoscalepolicy;
export const Serverautoscalepolicy: typeof import("./serverautoscalepolicy").Serverautoscalepolicy = null as any;
utilities.lazyLoad(exports, ["Serverautoscalepolicy"], () => require("./serverautoscalepolicy"));

export { ServiceauthprofileArgs, ServiceauthprofileState } from "./serviceauthprofile";
export type Serviceauthprofile = import("./serviceauthprofile").Serviceauthprofile;
export const Serviceauthprofile: typeof import("./serviceauthprofile").Serviceauthprofile = null as any;
utilities.lazyLoad(exports, ["Serviceauthprofile"], () => require("./serviceauthprofile"));

export { ServiceengineArgs, ServiceengineState } from "./serviceengine";
export type Serviceengine = import("./serviceengine").Serviceengine;
export const Serviceengine: typeof import("./serviceengine").Serviceengine = null as any;
utilities.lazyLoad(exports, ["Serviceengine"], () => require("./serviceengine"));

export { ServiceenginegroupArgs, ServiceenginegroupState } from "./serviceenginegroup";
export type Serviceenginegroup = import("./serviceenginegroup").Serviceenginegroup;
export const Serviceenginegroup: typeof import("./serviceenginegroup").Serviceenginegroup = null as any;
utilities.lazyLoad(exports, ["Serviceenginegroup"], () => require("./serviceenginegroup"));

export { SiteversionArgs, SiteversionState } from "./siteversion";
export type Siteversion = import("./siteversion").Siteversion;
export const Siteversion: typeof import("./siteversion").Siteversion = null as any;
utilities.lazyLoad(exports, ["Siteversion"], () => require("./siteversion"));

export { SnmptrapprofileArgs, SnmptrapprofileState } from "./snmptrapprofile";
export type Snmptrapprofile = import("./snmptrapprofile").Snmptrapprofile;
export const Snmptrapprofile: typeof import("./snmptrapprofile").Snmptrapprofile = null as any;
utilities.lazyLoad(exports, ["Snmptrapprofile"], () => require("./snmptrapprofile"));

export { SslkeyandcertificateArgs, SslkeyandcertificateState } from "./sslkeyandcertificate";
export type Sslkeyandcertificate = import("./sslkeyandcertificate").Sslkeyandcertificate;
export const Sslkeyandcertificate: typeof import("./sslkeyandcertificate").Sslkeyandcertificate = null as any;
utilities.lazyLoad(exports, ["Sslkeyandcertificate"], () => require("./sslkeyandcertificate"));

export { SslprofileArgs, SslprofileState } from "./sslprofile";
export type Sslprofile = import("./sslprofile").Sslprofile;
export const Sslprofile: typeof import("./sslprofile").Sslprofile = null as any;
utilities.lazyLoad(exports, ["Sslprofile"], () => require("./sslprofile"));

export { SsopolicyArgs, SsopolicyState } from "./ssopolicy";
export type Ssopolicy = import("./ssopolicy").Ssopolicy;
export const Ssopolicy: typeof import("./ssopolicy").Ssopolicy = null as any;
utilities.lazyLoad(exports, ["Ssopolicy"], () => require("./ssopolicy"));

export { StatediffoperationArgs, StatediffoperationState } from "./statediffoperation";
export type Statediffoperation = import("./statediffoperation").Statediffoperation;
export const Statediffoperation: typeof import("./statediffoperation").Statediffoperation = null as any;
utilities.lazyLoad(exports, ["Statediffoperation"], () => require("./statediffoperation"));

export { StatediffsnapshotArgs, StatediffsnapshotState } from "./statediffsnapshot";
export type Statediffsnapshot = import("./statediffsnapshot").Statediffsnapshot;
export const Statediffsnapshot: typeof import("./statediffsnapshot").Statediffsnapshot = null as any;
utilities.lazyLoad(exports, ["Statediffsnapshot"], () => require("./statediffsnapshot"));

export { StringgroupArgs, StringgroupState } from "./stringgroup";
export type Stringgroup = import("./stringgroup").Stringgroup;
export const Stringgroup: typeof import("./stringgroup").Stringgroup = null as any;
utilities.lazyLoad(exports, ["Stringgroup"], () => require("./stringgroup"));

export { SystemconfigurationArgs, SystemconfigurationState } from "./systemconfiguration";
export type Systemconfiguration = import("./systemconfiguration").Systemconfiguration;
export const Systemconfiguration: typeof import("./systemconfiguration").Systemconfiguration = null as any;
utilities.lazyLoad(exports, ["Systemconfiguration"], () => require("./systemconfiguration"));

export { SystemlimitsArgs, SystemlimitsState } from "./systemlimits";
export type Systemlimits = import("./systemlimits").Systemlimits;
export const Systemlimits: typeof import("./systemlimits").Systemlimits = null as any;
utilities.lazyLoad(exports, ["Systemlimits"], () => require("./systemlimits"));

export { SystemreportArgs, SystemreportState } from "./systemreport";
export type Systemreport = import("./systemreport").Systemreport;
export const Systemreport: typeof import("./systemreport").Systemreport = null as any;
utilities.lazyLoad(exports, ["Systemreport"], () => require("./systemreport"));

export { TaskjournalArgs, TaskjournalState } from "./taskjournal";
export type Taskjournal = import("./taskjournal").Taskjournal;
export const Taskjournal: typeof import("./taskjournal").Taskjournal = null as any;
utilities.lazyLoad(exports, ["Taskjournal"], () => require("./taskjournal"));

export { TenantArgs, TenantState } from "./tenant";
export type Tenant = import("./tenant").Tenant;
export const Tenant: typeof import("./tenant").Tenant = null as any;
utilities.lazyLoad(exports, ["Tenant"], () => require("./tenant"));

export { TenantsystemconfigurationArgs, TenantsystemconfigurationState } from "./tenantsystemconfiguration";
export type Tenantsystemconfiguration = import("./tenantsystemconfiguration").Tenantsystemconfiguration;
export const Tenantsystemconfiguration: typeof import("./tenantsystemconfiguration").Tenantsystemconfiguration = null as any;
utilities.lazyLoad(exports, ["Tenantsystemconfiguration"], () => require("./tenantsystemconfiguration"));

export { Testsedatastorelevel1Args, Testsedatastorelevel1State } from "./testsedatastorelevel1";
export type Testsedatastorelevel1 = import("./testsedatastorelevel1").Testsedatastorelevel1;
export const Testsedatastorelevel1: typeof import("./testsedatastorelevel1").Testsedatastorelevel1 = null as any;
utilities.lazyLoad(exports, ["Testsedatastorelevel1"], () => require("./testsedatastorelevel1"));

export { Testsedatastorelevel2Args, Testsedatastorelevel2State } from "./testsedatastorelevel2";
export type Testsedatastorelevel2 = import("./testsedatastorelevel2").Testsedatastorelevel2;
export const Testsedatastorelevel2: typeof import("./testsedatastorelevel2").Testsedatastorelevel2 = null as any;
utilities.lazyLoad(exports, ["Testsedatastorelevel2"], () => require("./testsedatastorelevel2"));

export { Testsedatastorelevel3Args, Testsedatastorelevel3State } from "./testsedatastorelevel3";
export type Testsedatastorelevel3 = import("./testsedatastorelevel3").Testsedatastorelevel3;
export const Testsedatastorelevel3: typeof import("./testsedatastorelevel3").Testsedatastorelevel3 = null as any;
utilities.lazyLoad(exports, ["Testsedatastorelevel3"], () => require("./testsedatastorelevel3"));

export { TrafficcloneprofileArgs, TrafficcloneprofileState } from "./trafficcloneprofile";
export type Trafficcloneprofile = import("./trafficcloneprofile").Trafficcloneprofile;
export const Trafficcloneprofile: typeof import("./trafficcloneprofile").Trafficcloneprofile = null as any;
utilities.lazyLoad(exports, ["Trafficcloneprofile"], () => require("./trafficcloneprofile"));

export { UpgradestatusinfoArgs, UpgradestatusinfoState } from "./upgradestatusinfo";
export type Upgradestatusinfo = import("./upgradestatusinfo").Upgradestatusinfo;
export const Upgradestatusinfo: typeof import("./upgradestatusinfo").Upgradestatusinfo = null as any;
utilities.lazyLoad(exports, ["Upgradestatusinfo"], () => require("./upgradestatusinfo"));

export { UpgradestatussummaryArgs, UpgradestatussummaryState } from "./upgradestatussummary";
export type Upgradestatussummary = import("./upgradestatussummary").Upgradestatussummary;
export const Upgradestatussummary: typeof import("./upgradestatussummary").Upgradestatussummary = null as any;
utilities.lazyLoad(exports, ["Upgradestatussummary"], () => require("./upgradestatussummary"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UseraccountArgs, UseraccountState } from "./useraccount";
export type Useraccount = import("./useraccount").Useraccount;
export const Useraccount: typeof import("./useraccount").Useraccount = null as any;
utilities.lazyLoad(exports, ["Useraccount"], () => require("./useraccount"));

export { UseraccountprofileArgs, UseraccountprofileState } from "./useraccountprofile";
export type Useraccountprofile = import("./useraccountprofile").Useraccountprofile;
export const Useraccountprofile: typeof import("./useraccountprofile").Useraccountprofile = null as any;
utilities.lazyLoad(exports, ["Useraccountprofile"], () => require("./useraccountprofile"));

export { VcenterserverArgs, VcenterserverState } from "./vcenterserver";
export type Vcenterserver = import("./vcenterserver").Vcenterserver;
export const Vcenterserver: typeof import("./vcenterserver").Vcenterserver = null as any;
utilities.lazyLoad(exports, ["Vcenterserver"], () => require("./vcenterserver"));

export { VirtualserviceArgs, VirtualserviceState } from "./virtualservice";
export type Virtualservice = import("./virtualservice").Virtualservice;
export const Virtualservice: typeof import("./virtualservice").Virtualservice = null as any;
utilities.lazyLoad(exports, ["Virtualservice"], () => require("./virtualservice"));

export { VrfcontextArgs, VrfcontextState } from "./vrfcontext";
export type Vrfcontext = import("./vrfcontext").Vrfcontext;
export const Vrfcontext: typeof import("./vrfcontext").Vrfcontext = null as any;
utilities.lazyLoad(exports, ["Vrfcontext"], () => require("./vrfcontext"));

export { VsdatascriptsetArgs, VsdatascriptsetState } from "./vsdatascriptset";
export type Vsdatascriptset = import("./vsdatascriptset").Vsdatascriptset;
export const Vsdatascriptset: typeof import("./vsdatascriptset").Vsdatascriptset = null as any;
utilities.lazyLoad(exports, ["Vsdatascriptset"], () => require("./vsdatascriptset"));

export { VsgsArgs, VsgsState } from "./vsgs";
export type Vsgs = import("./vsgs").Vsgs;
export const Vsgs: typeof import("./vsgs").Vsgs = null as any;
utilities.lazyLoad(exports, ["Vsgs"], () => require("./vsgs"));

export { VsvipArgs, VsvipState } from "./vsvip";
export type Vsvip = import("./vsvip").Vsvip;
export const Vsvip: typeof import("./vsvip").Vsvip = null as any;
utilities.lazyLoad(exports, ["Vsvip"], () => require("./vsvip"));

export { WafapplicationsignatureproviderArgs, WafapplicationsignatureproviderState } from "./wafapplicationsignatureprovider";
export type Wafapplicationsignatureprovider = import("./wafapplicationsignatureprovider").Wafapplicationsignatureprovider;
export const Wafapplicationsignatureprovider: typeof import("./wafapplicationsignatureprovider").Wafapplicationsignatureprovider = null as any;
utilities.lazyLoad(exports, ["Wafapplicationsignatureprovider"], () => require("./wafapplicationsignatureprovider"));

export { WafcrsArgs, WafcrsState } from "./wafcrs";
export type Wafcrs = import("./wafcrs").Wafcrs;
export const Wafcrs: typeof import("./wafcrs").Wafcrs = null as any;
utilities.lazyLoad(exports, ["Wafcrs"], () => require("./wafcrs"));

export { WafpolicyArgs, WafpolicyState } from "./wafpolicy";
export type Wafpolicy = import("./wafpolicy").Wafpolicy;
export const Wafpolicy: typeof import("./wafpolicy").Wafpolicy = null as any;
utilities.lazyLoad(exports, ["Wafpolicy"], () => require("./wafpolicy"));

export { WafpolicypsmgroupArgs, WafpolicypsmgroupState } from "./wafpolicypsmgroup";
export type Wafpolicypsmgroup = import("./wafpolicypsmgroup").Wafpolicypsmgroup;
export const Wafpolicypsmgroup: typeof import("./wafpolicypsmgroup").Wafpolicypsmgroup = null as any;
utilities.lazyLoad(exports, ["Wafpolicypsmgroup"], () => require("./wafpolicypsmgroup"));

export { WafprofileArgs, WafprofileState } from "./wafprofile";
export type Wafprofile = import("./wafprofile").Wafprofile;
export const Wafprofile: typeof import("./wafprofile").Wafprofile = null as any;
utilities.lazyLoad(exports, ["Wafprofile"], () => require("./wafprofile"));

export { WebapputArgs, WebapputState } from "./webapput";
export type Webapput = import("./webapput").Webapput;
export const Webapput: typeof import("./webapput").Webapput = null as any;
utilities.lazyLoad(exports, ["Webapput"], () => require("./webapput"));

export { WebhookArgs, WebhookState } from "./webhook";
export type Webhook = import("./webhook").Webhook;
export const Webhook: typeof import("./webhook").Webhook = null as any;
utilities.lazyLoad(exports, ["Webhook"], () => require("./webhook"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "avi:index/actiongroupconfig:Actiongroupconfig":
                return new Actiongroupconfig(name, <any>undefined, { urn })
            case "avi:index/albservicesconfig:Albservicesconfig":
                return new Albservicesconfig(name, <any>undefined, { urn })
            case "avi:index/albservicesfiledownload:Albservicesfiledownload":
                return new Albservicesfiledownload(name, <any>undefined, { urn })
            case "avi:index/albservicesfileupload:Albservicesfileupload":
                return new Albservicesfileupload(name, <any>undefined, { urn })
            case "avi:index/albservicesjob:Albservicesjob":
                return new Albservicesjob(name, <any>undefined, { urn })
            case "avi:index/alertconfig:Alertconfig":
                return new Alertconfig(name, <any>undefined, { urn })
            case "avi:index/alertemailconfig:Alertemailconfig":
                return new Alertemailconfig(name, <any>undefined, { urn })
            case "avi:index/alertscriptconfig:Alertscriptconfig":
                return new Alertscriptconfig(name, <any>undefined, { urn })
            case "avi:index/alertsyslogconfig:Alertsyslogconfig":
                return new Alertsyslogconfig(name, <any>undefined, { urn })
            case "avi:index/analyticsprofile:Analyticsprofile":
                return new Analyticsprofile(name, <any>undefined, { urn })
            case "avi:index/applicationpersistenceprofile:Applicationpersistenceprofile":
                return new Applicationpersistenceprofile(name, <any>undefined, { urn })
            case "avi:index/applicationprofile:Applicationprofile":
                return new Applicationprofile(name, <any>undefined, { urn })
            case "avi:index/authmappingprofile:Authmappingprofile":
                return new Authmappingprofile(name, <any>undefined, { urn })
            case "avi:index/authprofile:Authprofile":
                return new Authprofile(name, <any>undefined, { urn })
            case "avi:index/autoscalelaunchconfig:Autoscalelaunchconfig":
                return new Autoscalelaunchconfig(name, <any>undefined, { urn })
            case "avi:index/availabilityzone:Availabilityzone":
                return new Availabilityzone(name, <any>undefined, { urn })
            case "avi:index/backup:Backup":
                return new Backup(name, <any>undefined, { urn })
            case "avi:index/backupconfiguration:Backupconfiguration":
                return new Backupconfiguration(name, <any>undefined, { urn })
            case "avi:index/botconfigconsolidator:Botconfigconsolidator":
                return new Botconfigconsolidator(name, <any>undefined, { urn })
            case "avi:index/botdetectionpolicy:Botdetectionpolicy":
                return new Botdetectionpolicy(name, <any>undefined, { urn })
            case "avi:index/botipreputationtypemapping:Botipreputationtypemapping":
                return new Botipreputationtypemapping(name, <any>undefined, { urn })
            case "avi:index/botmapping:Botmapping":
                return new Botmapping(name, <any>undefined, { urn })
            case "avi:index/certificatemanagementprofile:Certificatemanagementprofile":
                return new Certificatemanagementprofile(name, <any>undefined, { urn })
            case "avi:index/cloud:Cloud":
                return new Cloud(name, <any>undefined, { urn })
            case "avi:index/cloudconnectoruser:Cloudconnectoruser":
                return new Cloudconnectoruser(name, <any>undefined, { urn })
            case "avi:index/cloudproperties:Cloudproperties":
                return new Cloudproperties(name, <any>undefined, { urn })
            case "avi:index/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "avi:index/clusterclouddetails:Clusterclouddetails":
                return new Clusterclouddetails(name, <any>undefined, { urn })
            case "avi:index/controllerportalregistration:Controllerportalregistration":
                return new Controllerportalregistration(name, <any>undefined, { urn })
            case "avi:index/controllerproperties:Controllerproperties":
                return new Controllerproperties(name, <any>undefined, { urn })
            case "avi:index/controllersite:Controllersite":
                return new Controllersite(name, <any>undefined, { urn })
            case "avi:index/csrfpolicy:Csrfpolicy":
                return new Csrfpolicy(name, <any>undefined, { urn })
            case "avi:index/customipamdnsprofile:Customipamdnsprofile":
                return new Customipamdnsprofile(name, <any>undefined, { urn })
            case "avi:index/dnspolicy:Dnspolicy":
                return new Dnspolicy(name, <any>undefined, { urn })
            case "avi:index/dynamicdnsrecord:Dynamicdnsrecord":
                return new Dynamicdnsrecord(name, <any>undefined, { urn })
            case "avi:index/errorpagebody:Errorpagebody":
                return new Errorpagebody(name, <any>undefined, { urn })
            case "avi:index/errorpageprofile:Errorpageprofile":
                return new Errorpageprofile(name, <any>undefined, { urn })
            case "avi:index/federationcheckpoint:Federationcheckpoint":
                return new Federationcheckpoint(name, <any>undefined, { urn })
            case "avi:index/fileobject:Fileobject":
                return new Fileobject(name, <any>undefined, { urn })
            case "avi:index/fileservice:Fileservice":
                return new Fileservice(name, <any>undefined, { urn })
            case "avi:index/geodb:Geodb":
                return new Geodb(name, <any>undefined, { urn })
            case "avi:index/gslb:Gslb":
                return new Gslb(name, <any>undefined, { urn })
            case "avi:index/gslbgeodbprofile:Gslbgeodbprofile":
                return new Gslbgeodbprofile(name, <any>undefined, { urn })
            case "avi:index/gslbservice:Gslbservice":
                return new Gslbservice(name, <any>undefined, { urn })
            case "avi:index/hardwaresecuritymodulegroup:Hardwaresecuritymodulegroup":
                return new Hardwaresecuritymodulegroup(name, <any>undefined, { urn })
            case "avi:index/healthmonitor:Healthmonitor":
                return new Healthmonitor(name, <any>undefined, { urn })
            case "avi:index/httppolicyset:Httppolicyset":
                return new Httppolicyset(name, <any>undefined, { urn })
            case "avi:index/icapprofile:Icapprofile":
                return new Icapprofile(name, <any>undefined, { urn })
            case "avi:index/image:Image":
                return new Image(name, <any>undefined, { urn })
            case "avi:index/inventoryfaultconfig:Inventoryfaultconfig":
                return new Inventoryfaultconfig(name, <any>undefined, { urn })
            case "avi:index/ipaddrgroup:Ipaddrgroup":
                return new Ipaddrgroup(name, <any>undefined, { urn })
            case "avi:index/ipamdnsproviderprofile:Ipamdnsproviderprofile":
                return new Ipamdnsproviderprofile(name, <any>undefined, { urn })
            case "avi:index/ipreputationdb:Ipreputationdb":
                return new Ipreputationdb(name, <any>undefined, { urn })
            case "avi:index/jwtserverprofile:Jwtserverprofile":
                return new Jwtserverprofile(name, <any>undefined, { urn })
            case "avi:index/l4policyset:L4policyset":
                return new L4policyset(name, <any>undefined, { urn })
            case "avi:index/labelgroup:Labelgroup":
                return new Labelgroup(name, <any>undefined, { urn })
            case "avi:index/licenseledgerdetails:Licenseledgerdetails":
                return new Licenseledgerdetails(name, <any>undefined, { urn })
            case "avi:index/licensestatus:Licensestatus":
                return new Licensestatus(name, <any>undefined, { urn })
            case "avi:index/memorybalancerrequest:Memorybalancerrequest":
                return new Memorybalancerrequest(name, <any>undefined, { urn })
            case "avi:index/microservicegroup:Microservicegroup":
                return new Microservicegroup(name, <any>undefined, { urn })
            case "avi:index/natpolicy:Natpolicy":
                return new Natpolicy(name, <any>undefined, { urn })
            case "avi:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "avi:index/networkprofile:Networkprofile":
                return new Networkprofile(name, <any>undefined, { urn })
            case "avi:index/networksecuritypolicy:Networksecuritypolicy":
                return new Networksecuritypolicy(name, <any>undefined, { urn })
            case "avi:index/networkservice:Networkservice":
                return new Networkservice(name, <any>undefined, { urn })
            case "avi:index/nsxtsegmentruntime:Nsxtsegmentruntime":
                return new Nsxtsegmentruntime(name, <any>undefined, { urn })
            case "avi:index/pkiprofile:Pkiprofile":
                return new Pkiprofile(name, <any>undefined, { urn })
            case "avi:index/pool:Pool":
                return new Pool(name, <any>undefined, { urn })
            case "avi:index/poolgroup:Poolgroup":
                return new Poolgroup(name, <any>undefined, { urn })
            case "avi:index/poolgroupdeploymentpolicy:Poolgroupdeploymentpolicy":
                return new Poolgroupdeploymentpolicy(name, <any>undefined, { urn })
            case "avi:index/prioritylabels:Prioritylabels":
                return new Prioritylabels(name, <any>undefined, { urn })
            case "avi:index/protocolparser:Protocolparser":
                return new Protocolparser(name, <any>undefined, { urn })
            case "avi:index/rmcloudopsproto:Rmcloudopsproto":
                return new Rmcloudopsproto(name, <any>undefined, { urn })
            case "avi:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "avi:index/scheduler:Scheduler":
                return new Scheduler(name, <any>undefined, { urn })
            case "avi:index/securitymanagerdata:Securitymanagerdata":
                return new Securitymanagerdata(name, <any>undefined, { urn })
            case "avi:index/securitypolicy:Securitypolicy":
                return new Securitypolicy(name, <any>undefined, { urn })
            case "avi:index/seproperties:Seproperties":
                return new Seproperties(name, <any>undefined, { urn })
            case "avi:index/server:Server":
                return new Server(name, <any>undefined, { urn })
            case "avi:index/serverautoscalepolicy:Serverautoscalepolicy":
                return new Serverautoscalepolicy(name, <any>undefined, { urn })
            case "avi:index/serviceauthprofile:Serviceauthprofile":
                return new Serviceauthprofile(name, <any>undefined, { urn })
            case "avi:index/serviceengine:Serviceengine":
                return new Serviceengine(name, <any>undefined, { urn })
            case "avi:index/serviceenginegroup:Serviceenginegroup":
                return new Serviceenginegroup(name, <any>undefined, { urn })
            case "avi:index/siteversion:Siteversion":
                return new Siteversion(name, <any>undefined, { urn })
            case "avi:index/snmptrapprofile:Snmptrapprofile":
                return new Snmptrapprofile(name, <any>undefined, { urn })
            case "avi:index/sslkeyandcertificate:Sslkeyandcertificate":
                return new Sslkeyandcertificate(name, <any>undefined, { urn })
            case "avi:index/sslprofile:Sslprofile":
                return new Sslprofile(name, <any>undefined, { urn })
            case "avi:index/ssopolicy:Ssopolicy":
                return new Ssopolicy(name, <any>undefined, { urn })
            case "avi:index/statediffoperation:Statediffoperation":
                return new Statediffoperation(name, <any>undefined, { urn })
            case "avi:index/statediffsnapshot:Statediffsnapshot":
                return new Statediffsnapshot(name, <any>undefined, { urn })
            case "avi:index/stringgroup:Stringgroup":
                return new Stringgroup(name, <any>undefined, { urn })
            case "avi:index/systemconfiguration:Systemconfiguration":
                return new Systemconfiguration(name, <any>undefined, { urn })
            case "avi:index/systemlimits:Systemlimits":
                return new Systemlimits(name, <any>undefined, { urn })
            case "avi:index/systemreport:Systemreport":
                return new Systemreport(name, <any>undefined, { urn })
            case "avi:index/taskjournal:Taskjournal":
                return new Taskjournal(name, <any>undefined, { urn })
            case "avi:index/tenant:Tenant":
                return new Tenant(name, <any>undefined, { urn })
            case "avi:index/tenantsystemconfiguration:Tenantsystemconfiguration":
                return new Tenantsystemconfiguration(name, <any>undefined, { urn })
            case "avi:index/testsedatastorelevel1:Testsedatastorelevel1":
                return new Testsedatastorelevel1(name, <any>undefined, { urn })
            case "avi:index/testsedatastorelevel2:Testsedatastorelevel2":
                return new Testsedatastorelevel2(name, <any>undefined, { urn })
            case "avi:index/testsedatastorelevel3:Testsedatastorelevel3":
                return new Testsedatastorelevel3(name, <any>undefined, { urn })
            case "avi:index/trafficcloneprofile:Trafficcloneprofile":
                return new Trafficcloneprofile(name, <any>undefined, { urn })
            case "avi:index/upgradestatusinfo:Upgradestatusinfo":
                return new Upgradestatusinfo(name, <any>undefined, { urn })
            case "avi:index/upgradestatussummary:Upgradestatussummary":
                return new Upgradestatussummary(name, <any>undefined, { urn })
            case "avi:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "avi:index/useraccount:Useraccount":
                return new Useraccount(name, <any>undefined, { urn })
            case "avi:index/useraccountprofile:Useraccountprofile":
                return new Useraccountprofile(name, <any>undefined, { urn })
            case "avi:index/vcenterserver:Vcenterserver":
                return new Vcenterserver(name, <any>undefined, { urn })
            case "avi:index/virtualservice:Virtualservice":
                return new Virtualservice(name, <any>undefined, { urn })
            case "avi:index/vrfcontext:Vrfcontext":
                return new Vrfcontext(name, <any>undefined, { urn })
            case "avi:index/vsdatascriptset:Vsdatascriptset":
                return new Vsdatascriptset(name, <any>undefined, { urn })
            case "avi:index/vsgs:Vsgs":
                return new Vsgs(name, <any>undefined, { urn })
            case "avi:index/vsvip:Vsvip":
                return new Vsvip(name, <any>undefined, { urn })
            case "avi:index/wafapplicationsignatureprovider:Wafapplicationsignatureprovider":
                return new Wafapplicationsignatureprovider(name, <any>undefined, { urn })
            case "avi:index/wafcrs:Wafcrs":
                return new Wafcrs(name, <any>undefined, { urn })
            case "avi:index/wafpolicy:Wafpolicy":
                return new Wafpolicy(name, <any>undefined, { urn })
            case "avi:index/wafpolicypsmgroup:Wafpolicypsmgroup":
                return new Wafpolicypsmgroup(name, <any>undefined, { urn })
            case "avi:index/wafprofile:Wafprofile":
                return new Wafprofile(name, <any>undefined, { urn })
            case "avi:index/webapput:Webapput":
                return new Webapput(name, <any>undefined, { urn })
            case "avi:index/webhook:Webhook":
                return new Webhook(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("avi", "index/actiongroupconfig", _module)
pulumi.runtime.registerResourceModule("avi", "index/albservicesconfig", _module)
pulumi.runtime.registerResourceModule("avi", "index/albservicesfiledownload", _module)
pulumi.runtime.registerResourceModule("avi", "index/albservicesfileupload", _module)
pulumi.runtime.registerResourceModule("avi", "index/albservicesjob", _module)
pulumi.runtime.registerResourceModule("avi", "index/alertconfig", _module)
pulumi.runtime.registerResourceModule("avi", "index/alertemailconfig", _module)
pulumi.runtime.registerResourceModule("avi", "index/alertscriptconfig", _module)
pulumi.runtime.registerResourceModule("avi", "index/alertsyslogconfig", _module)
pulumi.runtime.registerResourceModule("avi", "index/analyticsprofile", _module)
pulumi.runtime.registerResourceModule("avi", "index/applicationpersistenceprofile", _module)
pulumi.runtime.registerResourceModule("avi", "index/applicationprofile", _module)
pulumi.runtime.registerResourceModule("avi", "index/authmappingprofile", _module)
pulumi.runtime.registerResourceModule("avi", "index/authprofile", _module)
pulumi.runtime.registerResourceModule("avi", "index/autoscalelaunchconfig", _module)
pulumi.runtime.registerResourceModule("avi", "index/availabilityzone", _module)
pulumi.runtime.registerResourceModule("avi", "index/backup", _module)
pulumi.runtime.registerResourceModule("avi", "index/backupconfiguration", _module)
pulumi.runtime.registerResourceModule("avi", "index/botconfigconsolidator", _module)
pulumi.runtime.registerResourceModule("avi", "index/botdetectionpolicy", _module)
pulumi.runtime.registerResourceModule("avi", "index/botipreputationtypemapping", _module)
pulumi.runtime.registerResourceModule("avi", "index/botmapping", _module)
pulumi.runtime.registerResourceModule("avi", "index/certificatemanagementprofile", _module)
pulumi.runtime.registerResourceModule("avi", "index/cloud", _module)
pulumi.runtime.registerResourceModule("avi", "index/cloudconnectoruser", _module)
pulumi.runtime.registerResourceModule("avi", "index/cloudproperties", _module)
pulumi.runtime.registerResourceModule("avi", "index/cluster", _module)
pulumi.runtime.registerResourceModule("avi", "index/clusterclouddetails", _module)
pulumi.runtime.registerResourceModule("avi", "index/controllerportalregistration", _module)
pulumi.runtime.registerResourceModule("avi", "index/controllerproperties", _module)
pulumi.runtime.registerResourceModule("avi", "index/controllersite", _module)
pulumi.runtime.registerResourceModule("avi", "index/csrfpolicy", _module)
pulumi.runtime.registerResourceModule("avi", "index/customipamdnsprofile", _module)
pulumi.runtime.registerResourceModule("avi", "index/dnspolicy", _module)
pulumi.runtime.registerResourceModule("avi", "index/dynamicdnsrecord", _module)
pulumi.runtime.registerResourceModule("avi", "index/errorpagebody", _module)
pulumi.runtime.registerResourceModule("avi", "index/errorpageprofile", _module)
pulumi.runtime.registerResourceModule("avi", "index/federationcheckpoint", _module)
pulumi.runtime.registerResourceModule("avi", "index/fileobject", _module)
pulumi.runtime.registerResourceModule("avi", "index/fileservice", _module)
pulumi.runtime.registerResourceModule("avi", "index/geodb", _module)
pulumi.runtime.registerResourceModule("avi", "index/gslb", _module)
pulumi.runtime.registerResourceModule("avi", "index/gslbgeodbprofile", _module)
pulumi.runtime.registerResourceModule("avi", "index/gslbservice", _module)
pulumi.runtime.registerResourceModule("avi", "index/hardwaresecuritymodulegroup", _module)
pulumi.runtime.registerResourceModule("avi", "index/healthmonitor", _module)
pulumi.runtime.registerResourceModule("avi", "index/httppolicyset", _module)
pulumi.runtime.registerResourceModule("avi", "index/icapprofile", _module)
pulumi.runtime.registerResourceModule("avi", "index/image", _module)
pulumi.runtime.registerResourceModule("avi", "index/inventoryfaultconfig", _module)
pulumi.runtime.registerResourceModule("avi", "index/ipaddrgroup", _module)
pulumi.runtime.registerResourceModule("avi", "index/ipamdnsproviderprofile", _module)
pulumi.runtime.registerResourceModule("avi", "index/ipreputationdb", _module)
pulumi.runtime.registerResourceModule("avi", "index/jwtserverprofile", _module)
pulumi.runtime.registerResourceModule("avi", "index/l4policyset", _module)
pulumi.runtime.registerResourceModule("avi", "index/labelgroup", _module)
pulumi.runtime.registerResourceModule("avi", "index/licenseledgerdetails", _module)
pulumi.runtime.registerResourceModule("avi", "index/licensestatus", _module)
pulumi.runtime.registerResourceModule("avi", "index/memorybalancerrequest", _module)
pulumi.runtime.registerResourceModule("avi", "index/microservicegroup", _module)
pulumi.runtime.registerResourceModule("avi", "index/natpolicy", _module)
pulumi.runtime.registerResourceModule("avi", "index/network", _module)
pulumi.runtime.registerResourceModule("avi", "index/networkprofile", _module)
pulumi.runtime.registerResourceModule("avi", "index/networksecuritypolicy", _module)
pulumi.runtime.registerResourceModule("avi", "index/networkservice", _module)
pulumi.runtime.registerResourceModule("avi", "index/nsxtsegmentruntime", _module)
pulumi.runtime.registerResourceModule("avi", "index/pkiprofile", _module)
pulumi.runtime.registerResourceModule("avi", "index/pool", _module)
pulumi.runtime.registerResourceModule("avi", "index/poolgroup", _module)
pulumi.runtime.registerResourceModule("avi", "index/poolgroupdeploymentpolicy", _module)
pulumi.runtime.registerResourceModule("avi", "index/prioritylabels", _module)
pulumi.runtime.registerResourceModule("avi", "index/protocolparser", _module)
pulumi.runtime.registerResourceModule("avi", "index/rmcloudopsproto", _module)
pulumi.runtime.registerResourceModule("avi", "index/role", _module)
pulumi.runtime.registerResourceModule("avi", "index/scheduler", _module)
pulumi.runtime.registerResourceModule("avi", "index/securitymanagerdata", _module)
pulumi.runtime.registerResourceModule("avi", "index/securitypolicy", _module)
pulumi.runtime.registerResourceModule("avi", "index/seproperties", _module)
pulumi.runtime.registerResourceModule("avi", "index/server", _module)
pulumi.runtime.registerResourceModule("avi", "index/serverautoscalepolicy", _module)
pulumi.runtime.registerResourceModule("avi", "index/serviceauthprofile", _module)
pulumi.runtime.registerResourceModule("avi", "index/serviceengine", _module)
pulumi.runtime.registerResourceModule("avi", "index/serviceenginegroup", _module)
pulumi.runtime.registerResourceModule("avi", "index/siteversion", _module)
pulumi.runtime.registerResourceModule("avi", "index/snmptrapprofile", _module)
pulumi.runtime.registerResourceModule("avi", "index/sslkeyandcertificate", _module)
pulumi.runtime.registerResourceModule("avi", "index/sslprofile", _module)
pulumi.runtime.registerResourceModule("avi", "index/ssopolicy", _module)
pulumi.runtime.registerResourceModule("avi", "index/statediffoperation", _module)
pulumi.runtime.registerResourceModule("avi", "index/statediffsnapshot", _module)
pulumi.runtime.registerResourceModule("avi", "index/stringgroup", _module)
pulumi.runtime.registerResourceModule("avi", "index/systemconfiguration", _module)
pulumi.runtime.registerResourceModule("avi", "index/systemlimits", _module)
pulumi.runtime.registerResourceModule("avi", "index/systemreport", _module)
pulumi.runtime.registerResourceModule("avi", "index/taskjournal", _module)
pulumi.runtime.registerResourceModule("avi", "index/tenant", _module)
pulumi.runtime.registerResourceModule("avi", "index/tenantsystemconfiguration", _module)
pulumi.runtime.registerResourceModule("avi", "index/testsedatastorelevel1", _module)
pulumi.runtime.registerResourceModule("avi", "index/testsedatastorelevel2", _module)
pulumi.runtime.registerResourceModule("avi", "index/testsedatastorelevel3", _module)
pulumi.runtime.registerResourceModule("avi", "index/trafficcloneprofile", _module)
pulumi.runtime.registerResourceModule("avi", "index/upgradestatusinfo", _module)
pulumi.runtime.registerResourceModule("avi", "index/upgradestatussummary", _module)
pulumi.runtime.registerResourceModule("avi", "index/user", _module)
pulumi.runtime.registerResourceModule("avi", "index/useraccount", _module)
pulumi.runtime.registerResourceModule("avi", "index/useraccountprofile", _module)
pulumi.runtime.registerResourceModule("avi", "index/vcenterserver", _module)
pulumi.runtime.registerResourceModule("avi", "index/virtualservice", _module)
pulumi.runtime.registerResourceModule("avi", "index/vrfcontext", _module)
pulumi.runtime.registerResourceModule("avi", "index/vsdatascriptset", _module)
pulumi.runtime.registerResourceModule("avi", "index/vsgs", _module)
pulumi.runtime.registerResourceModule("avi", "index/vsvip", _module)
pulumi.runtime.registerResourceModule("avi", "index/wafapplicationsignatureprovider", _module)
pulumi.runtime.registerResourceModule("avi", "index/wafcrs", _module)
pulumi.runtime.registerResourceModule("avi", "index/wafpolicy", _module)
pulumi.runtime.registerResourceModule("avi", "index/wafpolicypsmgroup", _module)
pulumi.runtime.registerResourceModule("avi", "index/wafprofile", _module)
pulumi.runtime.registerResourceModule("avi", "index/webapput", _module)
pulumi.runtime.registerResourceModule("avi", "index/webhook", _module)
pulumi.runtime.registerResourcePackage("avi", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:avi") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
