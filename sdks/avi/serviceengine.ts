// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Serviceengine extends pulumi.CustomResource {
    /**
     * Get an existing Serviceengine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceengineState, opts?: pulumi.CustomResourceOptions): Serviceengine {
        return new Serviceengine(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'avi:index/serviceengine:Serviceengine';

    /**
     * Returns true if the given object is an instance of Serviceengine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Serviceengine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Serviceengine.__pulumiType;
    }

    public readonly availabilityZone!: pulumi.Output<string>;
    public readonly cloudRef!: pulumi.Output<string>;
    public readonly containerMode!: pulumi.Output<string | undefined>;
    public readonly containerType!: pulumi.Output<string | undefined>;
    public readonly controllerCreated!: pulumi.Output<string | undefined>;
    public readonly controllerIp!: pulumi.Output<string>;
    public readonly dataVnics!: pulumi.Output<outputs.ServiceengineDataVnic[] | undefined>;
    public readonly enableState!: pulumi.Output<string | undefined>;
    public readonly flavor!: pulumi.Output<string>;
    public readonly hostRef!: pulumi.Output<string>;
    public readonly hypervisor!: pulumi.Output<string>;
    public readonly mgmtVnics!: pulumi.Output<outputs.ServiceengineMgmtVnic[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nsxtNoHotplug!: pulumi.Output<string>;
    public readonly resources!: pulumi.Output<outputs.ServiceengineResource[] | undefined>;
    public readonly seGroupRef!: pulumi.Output<string>;
    public readonly tenantRef!: pulumi.Output<string>;
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Serviceengine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServiceengineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceengineArgs | ServiceengineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceengineState | undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["cloudRef"] = state ? state.cloudRef : undefined;
            resourceInputs["containerMode"] = state ? state.containerMode : undefined;
            resourceInputs["containerType"] = state ? state.containerType : undefined;
            resourceInputs["controllerCreated"] = state ? state.controllerCreated : undefined;
            resourceInputs["controllerIp"] = state ? state.controllerIp : undefined;
            resourceInputs["dataVnics"] = state ? state.dataVnics : undefined;
            resourceInputs["enableState"] = state ? state.enableState : undefined;
            resourceInputs["flavor"] = state ? state.flavor : undefined;
            resourceInputs["hostRef"] = state ? state.hostRef : undefined;
            resourceInputs["hypervisor"] = state ? state.hypervisor : undefined;
            resourceInputs["mgmtVnics"] = state ? state.mgmtVnics : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nsxtNoHotplug"] = state ? state.nsxtNoHotplug : undefined;
            resourceInputs["resources"] = state ? state.resources : undefined;
            resourceInputs["seGroupRef"] = state ? state.seGroupRef : undefined;
            resourceInputs["tenantRef"] = state ? state.tenantRef : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as ServiceengineArgs | undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["cloudRef"] = args ? args.cloudRef : undefined;
            resourceInputs["containerMode"] = args ? args.containerMode : undefined;
            resourceInputs["containerType"] = args ? args.containerType : undefined;
            resourceInputs["controllerCreated"] = args ? args.controllerCreated : undefined;
            resourceInputs["controllerIp"] = args ? args.controllerIp : undefined;
            resourceInputs["dataVnics"] = args ? args.dataVnics : undefined;
            resourceInputs["enableState"] = args ? args.enableState : undefined;
            resourceInputs["flavor"] = args ? args.flavor : undefined;
            resourceInputs["hostRef"] = args ? args.hostRef : undefined;
            resourceInputs["hypervisor"] = args ? args.hypervisor : undefined;
            resourceInputs["mgmtVnics"] = args ? args.mgmtVnics : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nsxtNoHotplug"] = args ? args.nsxtNoHotplug : undefined;
            resourceInputs["resources"] = args ? args.resources : undefined;
            resourceInputs["seGroupRef"] = args ? args.seGroupRef : undefined;
            resourceInputs["tenantRef"] = args ? args.tenantRef : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Serviceengine.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Serviceengine resources.
 */
export interface ServiceengineState {
    availabilityZone?: pulumi.Input<string>;
    cloudRef?: pulumi.Input<string>;
    containerMode?: pulumi.Input<string>;
    containerType?: pulumi.Input<string>;
    controllerCreated?: pulumi.Input<string>;
    controllerIp?: pulumi.Input<string>;
    dataVnics?: pulumi.Input<pulumi.Input<inputs.ServiceengineDataVnic>[]>;
    enableState?: pulumi.Input<string>;
    flavor?: pulumi.Input<string>;
    hostRef?: pulumi.Input<string>;
    hypervisor?: pulumi.Input<string>;
    mgmtVnics?: pulumi.Input<pulumi.Input<inputs.ServiceengineMgmtVnic>[]>;
    name?: pulumi.Input<string>;
    nsxtNoHotplug?: pulumi.Input<string>;
    resources?: pulumi.Input<pulumi.Input<inputs.ServiceengineResource>[]>;
    seGroupRef?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Serviceengine resource.
 */
export interface ServiceengineArgs {
    availabilityZone?: pulumi.Input<string>;
    cloudRef?: pulumi.Input<string>;
    containerMode?: pulumi.Input<string>;
    containerType?: pulumi.Input<string>;
    controllerCreated?: pulumi.Input<string>;
    controllerIp?: pulumi.Input<string>;
    dataVnics?: pulumi.Input<pulumi.Input<inputs.ServiceengineDataVnic>[]>;
    enableState?: pulumi.Input<string>;
    flavor?: pulumi.Input<string>;
    hostRef?: pulumi.Input<string>;
    hypervisor?: pulumi.Input<string>;
    mgmtVnics?: pulumi.Input<pulumi.Input<inputs.ServiceengineMgmtVnic>[]>;
    name?: pulumi.Input<string>;
    nsxtNoHotplug?: pulumi.Input<string>;
    resources?: pulumi.Input<pulumi.Input<inputs.ServiceengineResource>[]>;
    seGroupRef?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}
