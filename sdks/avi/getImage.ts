// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getImage(args?: GetImageArgs, opts?: pulumi.InvokeOptions): Promise<GetImageResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("avi:index/getImage:getImage", {
        "id": args.id,
        "name": args.name,
        "tenantRef": args.tenantRef,
        "uuid": args.uuid,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getImage.
 */
export interface GetImageArgs {
    id?: string;
    name?: string;
    tenantRef?: string;
    uuid?: string;
}

/**
 * A collection of values returned by getImage.
 */
export interface GetImageResult {
    readonly cloudInfoValues: outputs.GetImageCloudInfoValue[];
    readonly controllerInfos: outputs.GetImageControllerInfo[];
    readonly controllerPatchName: string;
    readonly controllerPatchRef: string;
    readonly duration: string;
    readonly endTime: string;
    readonly events: outputs.GetImageEvent[];
    readonly fipsModeTransitionApplicable: string;
    readonly id: string;
    readonly imgStates: outputs.GetImageImgState[];
    readonly migrations: outputs.GetImageMigration[];
    readonly name: string;
    readonly progress: string;
    readonly seInfos: outputs.GetImageSeInfo[];
    readonly sePatchName: string;
    readonly sePatchRef: string;
    readonly startTime: string;
    readonly tasksCompleted: string;
    readonly tenantRef: string;
    readonly totalTasks: string;
    readonly type: string;
    readonly uberBundle: string;
    readonly uuid: string;
}
export function getImageOutput(args?: GetImageOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetImageResult> {
    return pulumi.output(args).apply((a: any) => getImage(a, opts))
}

/**
 * A collection of arguments for invoking getImage.
 */
export interface GetImageOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}
