// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Server extends pulumi.CustomResource {
    /**
     * Get an existing Server resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerState, opts?: pulumi.CustomResourceOptions): Server {
        return new Server(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'avi:index/server:Server';

    /**
     * Returns true if the given object is an instance of Server.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Server {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Server.__pulumiType;
    }

    public readonly autoscalingGroupName!: pulumi.Output<string>;
    public readonly availabilityZone!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly discoveredNetworks!: pulumi.Output<outputs.ServerDiscoveredNetwork[] | undefined>;
    public readonly enabled!: pulumi.Output<string | undefined>;
    public readonly externalOrchestrationId!: pulumi.Output<string>;
    public readonly externalUuid!: pulumi.Output<string>;
    public readonly hostname!: pulumi.Output<string>;
    public readonly ip!: pulumi.Output<string>;
    public readonly locations!: pulumi.Output<outputs.ServerLocation[] | undefined>;
    public readonly macAddress!: pulumi.Output<string>;
    public readonly nwRef!: pulumi.Output<string>;
    public readonly poolRef!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<string>;
    public readonly preferenceOrder!: pulumi.Output<string>;
    public readonly prstHdrVal!: pulumi.Output<string>;
    public readonly ratio!: pulumi.Output<string | undefined>;
    public readonly resolveServerByDns!: pulumi.Output<string | undefined>;
    public readonly rewriteHostHeader!: pulumi.Output<string | undefined>;
    public readonly serverNode!: pulumi.Output<string>;
    public readonly static!: pulumi.Output<string | undefined>;
    public readonly type!: pulumi.Output<string | undefined>;
    public readonly verifyNetwork!: pulumi.Output<string | undefined>;
    public readonly vmRef!: pulumi.Output<string>;

    /**
     * Create a Server resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerArgs | ServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerState | undefined;
            resourceInputs["autoscalingGroupName"] = state ? state.autoscalingGroupName : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["discoveredNetworks"] = state ? state.discoveredNetworks : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["externalOrchestrationId"] = state ? state.externalOrchestrationId : undefined;
            resourceInputs["externalUuid"] = state ? state.externalUuid : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["locations"] = state ? state.locations : undefined;
            resourceInputs["macAddress"] = state ? state.macAddress : undefined;
            resourceInputs["nwRef"] = state ? state.nwRef : undefined;
            resourceInputs["poolRef"] = state ? state.poolRef : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["preferenceOrder"] = state ? state.preferenceOrder : undefined;
            resourceInputs["prstHdrVal"] = state ? state.prstHdrVal : undefined;
            resourceInputs["ratio"] = state ? state.ratio : undefined;
            resourceInputs["resolveServerByDns"] = state ? state.resolveServerByDns : undefined;
            resourceInputs["rewriteHostHeader"] = state ? state.rewriteHostHeader : undefined;
            resourceInputs["serverNode"] = state ? state.serverNode : undefined;
            resourceInputs["static"] = state ? state.static : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["verifyNetwork"] = state ? state.verifyNetwork : undefined;
            resourceInputs["vmRef"] = state ? state.vmRef : undefined;
        } else {
            const args = argsOrState as ServerArgs | undefined;
            if ((!args || args.ip === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ip'");
            }
            if ((!args || args.poolRef === undefined) && !opts.urn) {
                throw new Error("Missing required property 'poolRef'");
            }
            resourceInputs["autoscalingGroupName"] = args ? args.autoscalingGroupName : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["discoveredNetworks"] = args ? args.discoveredNetworks : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["externalOrchestrationId"] = args ? args.externalOrchestrationId : undefined;
            resourceInputs["externalUuid"] = args ? args.externalUuid : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["locations"] = args ? args.locations : undefined;
            resourceInputs["macAddress"] = args ? args.macAddress : undefined;
            resourceInputs["nwRef"] = args ? args.nwRef : undefined;
            resourceInputs["poolRef"] = args ? args.poolRef : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["preferenceOrder"] = args ? args.preferenceOrder : undefined;
            resourceInputs["prstHdrVal"] = args ? args.prstHdrVal : undefined;
            resourceInputs["ratio"] = args ? args.ratio : undefined;
            resourceInputs["resolveServerByDns"] = args ? args.resolveServerByDns : undefined;
            resourceInputs["rewriteHostHeader"] = args ? args.rewriteHostHeader : undefined;
            resourceInputs["serverNode"] = args ? args.serverNode : undefined;
            resourceInputs["static"] = args ? args.static : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["verifyNetwork"] = args ? args.verifyNetwork : undefined;
            resourceInputs["vmRef"] = args ? args.vmRef : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Server.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Server resources.
 */
export interface ServerState {
    autoscalingGroupName?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    discoveredNetworks?: pulumi.Input<pulumi.Input<inputs.ServerDiscoveredNetwork>[]>;
    enabled?: pulumi.Input<string>;
    externalOrchestrationId?: pulumi.Input<string>;
    externalUuid?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    locations?: pulumi.Input<pulumi.Input<inputs.ServerLocation>[]>;
    macAddress?: pulumi.Input<string>;
    nwRef?: pulumi.Input<string>;
    poolRef?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    preferenceOrder?: pulumi.Input<string>;
    prstHdrVal?: pulumi.Input<string>;
    ratio?: pulumi.Input<string>;
    resolveServerByDns?: pulumi.Input<string>;
    rewriteHostHeader?: pulumi.Input<string>;
    serverNode?: pulumi.Input<string>;
    static?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    verifyNetwork?: pulumi.Input<string>;
    vmRef?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Server resource.
 */
export interface ServerArgs {
    autoscalingGroupName?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    discoveredNetworks?: pulumi.Input<pulumi.Input<inputs.ServerDiscoveredNetwork>[]>;
    enabled?: pulumi.Input<string>;
    externalOrchestrationId?: pulumi.Input<string>;
    externalUuid?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    ip: pulumi.Input<string>;
    locations?: pulumi.Input<pulumi.Input<inputs.ServerLocation>[]>;
    macAddress?: pulumi.Input<string>;
    nwRef?: pulumi.Input<string>;
    poolRef: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    preferenceOrder?: pulumi.Input<string>;
    prstHdrVal?: pulumi.Input<string>;
    ratio?: pulumi.Input<string>;
    resolveServerByDns?: pulumi.Input<string>;
    rewriteHostHeader?: pulumi.Input<string>;
    serverNode?: pulumi.Input<string>;
    static?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    verifyNetwork?: pulumi.Input<string>;
    vmRef?: pulumi.Input<string>;
}
