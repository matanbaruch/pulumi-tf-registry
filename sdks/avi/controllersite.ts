// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Controllersite extends pulumi.CustomResource {
    /**
     * Get an existing Controllersite resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ControllersiteState, opts?: pulumi.CustomResourceOptions): Controllersite {
        return new Controllersite(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'avi:index/controllersite:Controllersite';

    /**
     * Returns true if the given object is an instance of Controllersite.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Controllersite {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Controllersite.__pulumiType;
    }

    public readonly address!: pulumi.Output<string>;
    public readonly configpbAttributes!: pulumi.Output<outputs.ControllersiteConfigpbAttribute[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<string | undefined>;
    public readonly tenantRef!: pulumi.Output<string>;
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Controllersite resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ControllersiteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ControllersiteArgs | ControllersiteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ControllersiteState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["configpbAttributes"] = state ? state.configpbAttributes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["tenantRef"] = state ? state.tenantRef : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as ControllersiteArgs | undefined;
            if ((!args || args.address === undefined) && !opts.urn) {
                throw new Error("Missing required property 'address'");
            }
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["configpbAttributes"] = args ? args.configpbAttributes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["tenantRef"] = args ? args.tenantRef : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Controllersite.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Controllersite resources.
 */
export interface ControllersiteState {
    address?: pulumi.Input<string>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.ControllersiteConfigpbAttribute>[]>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Controllersite resource.
 */
export interface ControllersiteArgs {
    address: pulumi.Input<string>;
    configpbAttributes?: pulumi.Input<pulumi.Input<inputs.ControllersiteConfigpbAttribute>[]>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    tenantRef?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}
