// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OceanSpark extends pulumi.CustomResource {
    /**
     * Get an existing OceanSpark resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OceanSparkState, opts?: pulumi.CustomResourceOptions): OceanSpark {
        return new OceanSpark(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:index/oceanSpark:OceanSpark';

    /**
     * Returns true if the given object is an instance of OceanSpark.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OceanSpark {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OceanSpark.__pulumiType;
    }

    public readonly compute!: pulumi.Output<outputs.OceanSparkCompute | undefined>;
    public readonly ingress!: pulumi.Output<outputs.OceanSparkIngress | undefined>;
    public readonly logCollection!: pulumi.Output<outputs.OceanSparkLogCollection | undefined>;
    public readonly oceanClusterId!: pulumi.Output<string>;
    public readonly spark!: pulumi.Output<outputs.OceanSparkSpark | undefined>;
    public readonly webhook!: pulumi.Output<outputs.OceanSparkWebhook | undefined>;

    /**
     * Create a OceanSpark resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OceanSparkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OceanSparkArgs | OceanSparkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OceanSparkState | undefined;
            resourceInputs["compute"] = state ? state.compute : undefined;
            resourceInputs["ingress"] = state ? state.ingress : undefined;
            resourceInputs["logCollection"] = state ? state.logCollection : undefined;
            resourceInputs["oceanClusterId"] = state ? state.oceanClusterId : undefined;
            resourceInputs["spark"] = state ? state.spark : undefined;
            resourceInputs["webhook"] = state ? state.webhook : undefined;
        } else {
            const args = argsOrState as OceanSparkArgs | undefined;
            if ((!args || args.oceanClusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'oceanClusterId'");
            }
            resourceInputs["compute"] = args ? args.compute : undefined;
            resourceInputs["ingress"] = args ? args.ingress : undefined;
            resourceInputs["logCollection"] = args ? args.logCollection : undefined;
            resourceInputs["oceanClusterId"] = args ? args.oceanClusterId : undefined;
            resourceInputs["spark"] = args ? args.spark : undefined;
            resourceInputs["webhook"] = args ? args.webhook : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OceanSpark.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OceanSpark resources.
 */
export interface OceanSparkState {
    compute?: pulumi.Input<inputs.OceanSparkCompute>;
    ingress?: pulumi.Input<inputs.OceanSparkIngress>;
    logCollection?: pulumi.Input<inputs.OceanSparkLogCollection>;
    oceanClusterId?: pulumi.Input<string>;
    spark?: pulumi.Input<inputs.OceanSparkSpark>;
    webhook?: pulumi.Input<inputs.OceanSparkWebhook>;
}

/**
 * The set of arguments for constructing a OceanSpark resource.
 */
export interface OceanSparkArgs {
    compute?: pulumi.Input<inputs.OceanSparkCompute>;
    ingress?: pulumi.Input<inputs.OceanSparkIngress>;
    logCollection?: pulumi.Input<inputs.OceanSparkLogCollection>;
    oceanClusterId: pulumi.Input<string>;
    spark?: pulumi.Input<inputs.OceanSparkSpark>;
    webhook?: pulumi.Input<inputs.OceanSparkWebhook>;
}
