// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OceancdVerificationProvider extends pulumi.CustomResource {
    /**
     * Get an existing OceancdVerificationProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OceancdVerificationProviderState, opts?: pulumi.CustomResourceOptions): OceancdVerificationProvider {
        return new OceancdVerificationProvider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:index/oceancdVerificationProvider:OceancdVerificationProvider';

    /**
     * Returns true if the given object is an instance of OceancdVerificationProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OceancdVerificationProvider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OceancdVerificationProvider.__pulumiType;
    }

    public readonly cloudWatch!: pulumi.Output<outputs.OceancdVerificationProviderCloudWatch | undefined>;
    public readonly clusterIds!: pulumi.Output<string[]>;
    public readonly datadog!: pulumi.Output<outputs.OceancdVerificationProviderDatadog | undefined>;
    public readonly jenkins!: pulumi.Output<outputs.OceancdVerificationProviderJenkins | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly newRelic!: pulumi.Output<outputs.OceancdVerificationProviderNewRelic | undefined>;
    public readonly prometheus!: pulumi.Output<outputs.OceancdVerificationProviderPrometheus | undefined>;

    /**
     * Create a OceancdVerificationProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OceancdVerificationProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OceancdVerificationProviderArgs | OceancdVerificationProviderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OceancdVerificationProviderState | undefined;
            resourceInputs["cloudWatch"] = state ? state.cloudWatch : undefined;
            resourceInputs["clusterIds"] = state ? state.clusterIds : undefined;
            resourceInputs["datadog"] = state ? state.datadog : undefined;
            resourceInputs["jenkins"] = state ? state.jenkins : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["newRelic"] = state ? state.newRelic : undefined;
            resourceInputs["prometheus"] = state ? state.prometheus : undefined;
        } else {
            const args = argsOrState as OceancdVerificationProviderArgs | undefined;
            if ((!args || args.clusterIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterIds'");
            }
            resourceInputs["cloudWatch"] = args ? args.cloudWatch : undefined;
            resourceInputs["clusterIds"] = args ? args.clusterIds : undefined;
            resourceInputs["datadog"] = args ? args.datadog : undefined;
            resourceInputs["jenkins"] = args ? args.jenkins : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["newRelic"] = args ? args.newRelic : undefined;
            resourceInputs["prometheus"] = args ? args.prometheus : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OceancdVerificationProvider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OceancdVerificationProvider resources.
 */
export interface OceancdVerificationProviderState {
    cloudWatch?: pulumi.Input<inputs.OceancdVerificationProviderCloudWatch>;
    clusterIds?: pulumi.Input<pulumi.Input<string>[]>;
    datadog?: pulumi.Input<inputs.OceancdVerificationProviderDatadog>;
    jenkins?: pulumi.Input<inputs.OceancdVerificationProviderJenkins>;
    name?: pulumi.Input<string>;
    newRelic?: pulumi.Input<inputs.OceancdVerificationProviderNewRelic>;
    prometheus?: pulumi.Input<inputs.OceancdVerificationProviderPrometheus>;
}

/**
 * The set of arguments for constructing a OceancdVerificationProvider resource.
 */
export interface OceancdVerificationProviderArgs {
    cloudWatch?: pulumi.Input<inputs.OceancdVerificationProviderCloudWatch>;
    clusterIds: pulumi.Input<pulumi.Input<string>[]>;
    datadog?: pulumi.Input<inputs.OceancdVerificationProviderDatadog>;
    jenkins?: pulumi.Input<inputs.OceancdVerificationProviderJenkins>;
    name?: pulumi.Input<string>;
    newRelic?: pulumi.Input<inputs.OceancdVerificationProviderNewRelic>;
    prometheus?: pulumi.Input<inputs.OceancdVerificationProviderPrometheus>;
}
