// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OceanGkeImport extends pulumi.CustomResource {
    /**
     * Get an existing OceanGkeImport resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OceanGkeImportState, opts?: pulumi.CustomResourceOptions): OceanGkeImport {
        return new OceanGkeImport(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:index/oceanGkeImport:OceanGkeImport';

    /**
     * Returns true if the given object is an instance of OceanGkeImport.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OceanGkeImport {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OceanGkeImport.__pulumiType;
    }

    public readonly autoscaler!: pulumi.Output<outputs.OceanGkeImportAutoscaler | undefined>;
    public readonly backendServices!: pulumi.Output<outputs.OceanGkeImportBackendService[] | undefined>;
    public readonly blacklists!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly clusterControllerId!: pulumi.Output<string>;
    public readonly clusterName!: pulumi.Output<string>;
    public readonly controllerClusterId!: pulumi.Output<string>;
    public readonly desiredCapacity!: pulumi.Output<number>;
    public readonly location!: pulumi.Output<string>;
    public readonly maxSize!: pulumi.Output<number>;
    public readonly minSize!: pulumi.Output<number>;
    public readonly rootVolumeType!: pulumi.Output<string | undefined>;
    public readonly scheduledTasks!: pulumi.Output<outputs.OceanGkeImportScheduledTask[] | undefined>;
    public readonly shieldedInstanceConfig!: pulumi.Output<outputs.OceanGkeImportShieldedInstanceConfig | undefined>;
    public readonly strategies!: pulumi.Output<outputs.OceanGkeImportStrategy[] | undefined>;
    public readonly updatePolicy!: pulumi.Output<outputs.OceanGkeImportUpdatePolicy | undefined>;
    public readonly useAsTemplateOnly!: pulumi.Output<boolean | undefined>;
    public readonly whitelists!: pulumi.Output<string[] | undefined>;

    /**
     * Create a OceanGkeImport resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OceanGkeImportArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OceanGkeImportArgs | OceanGkeImportState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OceanGkeImportState | undefined;
            resourceInputs["autoscaler"] = state ? state.autoscaler : undefined;
            resourceInputs["backendServices"] = state ? state.backendServices : undefined;
            resourceInputs["blacklists"] = state ? state.blacklists : undefined;
            resourceInputs["clusterControllerId"] = state ? state.clusterControllerId : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["controllerClusterId"] = state ? state.controllerClusterId : undefined;
            resourceInputs["desiredCapacity"] = state ? state.desiredCapacity : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["maxSize"] = state ? state.maxSize : undefined;
            resourceInputs["minSize"] = state ? state.minSize : undefined;
            resourceInputs["rootVolumeType"] = state ? state.rootVolumeType : undefined;
            resourceInputs["scheduledTasks"] = state ? state.scheduledTasks : undefined;
            resourceInputs["shieldedInstanceConfig"] = state ? state.shieldedInstanceConfig : undefined;
            resourceInputs["strategies"] = state ? state.strategies : undefined;
            resourceInputs["updatePolicy"] = state ? state.updatePolicy : undefined;
            resourceInputs["useAsTemplateOnly"] = state ? state.useAsTemplateOnly : undefined;
            resourceInputs["whitelists"] = state ? state.whitelists : undefined;
        } else {
            const args = argsOrState as OceanGkeImportArgs | undefined;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["autoscaler"] = args ? args.autoscaler : undefined;
            resourceInputs["backendServices"] = args ? args.backendServices : undefined;
            resourceInputs["blacklists"] = args ? args.blacklists : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["controllerClusterId"] = args ? args.controllerClusterId : undefined;
            resourceInputs["desiredCapacity"] = args ? args.desiredCapacity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["maxSize"] = args ? args.maxSize : undefined;
            resourceInputs["minSize"] = args ? args.minSize : undefined;
            resourceInputs["rootVolumeType"] = args ? args.rootVolumeType : undefined;
            resourceInputs["scheduledTasks"] = args ? args.scheduledTasks : undefined;
            resourceInputs["shieldedInstanceConfig"] = args ? args.shieldedInstanceConfig : undefined;
            resourceInputs["strategies"] = args ? args.strategies : undefined;
            resourceInputs["updatePolicy"] = args ? args.updatePolicy : undefined;
            resourceInputs["useAsTemplateOnly"] = args ? args.useAsTemplateOnly : undefined;
            resourceInputs["whitelists"] = args ? args.whitelists : undefined;
            resourceInputs["clusterControllerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OceanGkeImport.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OceanGkeImport resources.
 */
export interface OceanGkeImportState {
    autoscaler?: pulumi.Input<inputs.OceanGkeImportAutoscaler>;
    backendServices?: pulumi.Input<pulumi.Input<inputs.OceanGkeImportBackendService>[]>;
    blacklists?: pulumi.Input<pulumi.Input<string>[]>;
    clusterControllerId?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    controllerClusterId?: pulumi.Input<string>;
    desiredCapacity?: pulumi.Input<number>;
    location?: pulumi.Input<string>;
    maxSize?: pulumi.Input<number>;
    minSize?: pulumi.Input<number>;
    rootVolumeType?: pulumi.Input<string>;
    scheduledTasks?: pulumi.Input<pulumi.Input<inputs.OceanGkeImportScheduledTask>[]>;
    shieldedInstanceConfig?: pulumi.Input<inputs.OceanGkeImportShieldedInstanceConfig>;
    strategies?: pulumi.Input<pulumi.Input<inputs.OceanGkeImportStrategy>[]>;
    updatePolicy?: pulumi.Input<inputs.OceanGkeImportUpdatePolicy>;
    useAsTemplateOnly?: pulumi.Input<boolean>;
    whitelists?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a OceanGkeImport resource.
 */
export interface OceanGkeImportArgs {
    autoscaler?: pulumi.Input<inputs.OceanGkeImportAutoscaler>;
    backendServices?: pulumi.Input<pulumi.Input<inputs.OceanGkeImportBackendService>[]>;
    blacklists?: pulumi.Input<pulumi.Input<string>[]>;
    clusterName: pulumi.Input<string>;
    controllerClusterId?: pulumi.Input<string>;
    desiredCapacity?: pulumi.Input<number>;
    location: pulumi.Input<string>;
    maxSize?: pulumi.Input<number>;
    minSize?: pulumi.Input<number>;
    rootVolumeType?: pulumi.Input<string>;
    scheduledTasks?: pulumi.Input<pulumi.Input<inputs.OceanGkeImportScheduledTask>[]>;
    shieldedInstanceConfig?: pulumi.Input<inputs.OceanGkeImportShieldedInstanceConfig>;
    strategies?: pulumi.Input<pulumi.Input<inputs.OceanGkeImportStrategy>[]>;
    updatePolicy?: pulumi.Input<inputs.OceanGkeImportUpdatePolicy>;
    useAsTemplateOnly?: pulumi.Input<boolean>;
    whitelists?: pulumi.Input<pulumi.Input<string>[]>;
}
