// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OceanAksNpVirtualNodeGroup extends pulumi.CustomResource {
    /**
     * Get an existing OceanAksNpVirtualNodeGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OceanAksNpVirtualNodeGroupState, opts?: pulumi.CustomResourceOptions): OceanAksNpVirtualNodeGroup {
        return new OceanAksNpVirtualNodeGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:index/oceanAksNpVirtualNodeGroup:OceanAksNpVirtualNodeGroup';

    /**
     * Returns true if the given object is an instance of OceanAksNpVirtualNodeGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OceanAksNpVirtualNodeGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OceanAksNpVirtualNodeGroup.__pulumiType;
    }

    public readonly availabilityZones!: pulumi.Output<string[] | undefined>;
    public readonly enableNodePublicIp!: pulumi.Output<boolean | undefined>;
    public readonly fallbackToOndemand!: pulumi.Output<boolean | undefined>;
    public readonly filters!: pulumi.Output<outputs.OceanAksNpVirtualNodeGroupFilters | undefined>;
    public readonly headrooms!: pulumi.Output<outputs.OceanAksNpVirtualNodeGroupHeadroom[] | undefined>;
    public readonly kubernetesVersion!: pulumi.Output<string | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly linuxOsConfigs!: pulumi.Output<outputs.OceanAksNpVirtualNodeGroupLinuxOsConfig[] | undefined>;
    public readonly maxCount!: pulumi.Output<number | undefined>;
    public readonly maxPodsPerNode!: pulumi.Output<number | undefined>;
    public readonly minCount!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly oceanId!: pulumi.Output<string>;
    public readonly osDiskSizeGb!: pulumi.Output<number | undefined>;
    public readonly osDiskType!: pulumi.Output<string | undefined>;
    public readonly osSku!: pulumi.Output<string | undefined>;
    public readonly osType!: pulumi.Output<string | undefined>;
    public readonly podSubnetIds!: pulumi.Output<string[] | undefined>;
    public readonly spotPercentage!: pulumi.Output<number | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly taints!: pulumi.Output<outputs.OceanAksNpVirtualNodeGroupTaint[] | undefined>;
    public readonly updatePolicy!: pulumi.Output<outputs.OceanAksNpVirtualNodeGroupUpdatePolicy | undefined>;
    public readonly vnetSubnetIds!: pulumi.Output<string[] | undefined>;

    /**
     * Create a OceanAksNpVirtualNodeGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OceanAksNpVirtualNodeGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OceanAksNpVirtualNodeGroupArgs | OceanAksNpVirtualNodeGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OceanAksNpVirtualNodeGroupState | undefined;
            resourceInputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            resourceInputs["enableNodePublicIp"] = state ? state.enableNodePublicIp : undefined;
            resourceInputs["fallbackToOndemand"] = state ? state.fallbackToOndemand : undefined;
            resourceInputs["filters"] = state ? state.filters : undefined;
            resourceInputs["headrooms"] = state ? state.headrooms : undefined;
            resourceInputs["kubernetesVersion"] = state ? state.kubernetesVersion : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["linuxOsConfigs"] = state ? state.linuxOsConfigs : undefined;
            resourceInputs["maxCount"] = state ? state.maxCount : undefined;
            resourceInputs["maxPodsPerNode"] = state ? state.maxPodsPerNode : undefined;
            resourceInputs["minCount"] = state ? state.minCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oceanId"] = state ? state.oceanId : undefined;
            resourceInputs["osDiskSizeGb"] = state ? state.osDiskSizeGb : undefined;
            resourceInputs["osDiskType"] = state ? state.osDiskType : undefined;
            resourceInputs["osSku"] = state ? state.osSku : undefined;
            resourceInputs["osType"] = state ? state.osType : undefined;
            resourceInputs["podSubnetIds"] = state ? state.podSubnetIds : undefined;
            resourceInputs["spotPercentage"] = state ? state.spotPercentage : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["taints"] = state ? state.taints : undefined;
            resourceInputs["updatePolicy"] = state ? state.updatePolicy : undefined;
            resourceInputs["vnetSubnetIds"] = state ? state.vnetSubnetIds : undefined;
        } else {
            const args = argsOrState as OceanAksNpVirtualNodeGroupArgs | undefined;
            if ((!args || args.oceanId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'oceanId'");
            }
            resourceInputs["availabilityZones"] = args ? args.availabilityZones : undefined;
            resourceInputs["enableNodePublicIp"] = args ? args.enableNodePublicIp : undefined;
            resourceInputs["fallbackToOndemand"] = args ? args.fallbackToOndemand : undefined;
            resourceInputs["filters"] = args ? args.filters : undefined;
            resourceInputs["headrooms"] = args ? args.headrooms : undefined;
            resourceInputs["kubernetesVersion"] = args ? args.kubernetesVersion : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["linuxOsConfigs"] = args ? args.linuxOsConfigs : undefined;
            resourceInputs["maxCount"] = args ? args.maxCount : undefined;
            resourceInputs["maxPodsPerNode"] = args ? args.maxPodsPerNode : undefined;
            resourceInputs["minCount"] = args ? args.minCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["oceanId"] = args ? args.oceanId : undefined;
            resourceInputs["osDiskSizeGb"] = args ? args.osDiskSizeGb : undefined;
            resourceInputs["osDiskType"] = args ? args.osDiskType : undefined;
            resourceInputs["osSku"] = args ? args.osSku : undefined;
            resourceInputs["osType"] = args ? args.osType : undefined;
            resourceInputs["podSubnetIds"] = args ? args.podSubnetIds : undefined;
            resourceInputs["spotPercentage"] = args ? args.spotPercentage : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["taints"] = args ? args.taints : undefined;
            resourceInputs["updatePolicy"] = args ? args.updatePolicy : undefined;
            resourceInputs["vnetSubnetIds"] = args ? args.vnetSubnetIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OceanAksNpVirtualNodeGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OceanAksNpVirtualNodeGroup resources.
 */
export interface OceanAksNpVirtualNodeGroupState {
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    enableNodePublicIp?: pulumi.Input<boolean>;
    fallbackToOndemand?: pulumi.Input<boolean>;
    filters?: pulumi.Input<inputs.OceanAksNpVirtualNodeGroupFilters>;
    headrooms?: pulumi.Input<pulumi.Input<inputs.OceanAksNpVirtualNodeGroupHeadroom>[]>;
    kubernetesVersion?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    linuxOsConfigs?: pulumi.Input<pulumi.Input<inputs.OceanAksNpVirtualNodeGroupLinuxOsConfig>[]>;
    maxCount?: pulumi.Input<number>;
    maxPodsPerNode?: pulumi.Input<number>;
    minCount?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    oceanId?: pulumi.Input<string>;
    osDiskSizeGb?: pulumi.Input<number>;
    osDiskType?: pulumi.Input<string>;
    osSku?: pulumi.Input<string>;
    osType?: pulumi.Input<string>;
    podSubnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    spotPercentage?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taints?: pulumi.Input<pulumi.Input<inputs.OceanAksNpVirtualNodeGroupTaint>[]>;
    updatePolicy?: pulumi.Input<inputs.OceanAksNpVirtualNodeGroupUpdatePolicy>;
    vnetSubnetIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a OceanAksNpVirtualNodeGroup resource.
 */
export interface OceanAksNpVirtualNodeGroupArgs {
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    enableNodePublicIp?: pulumi.Input<boolean>;
    fallbackToOndemand?: pulumi.Input<boolean>;
    filters?: pulumi.Input<inputs.OceanAksNpVirtualNodeGroupFilters>;
    headrooms?: pulumi.Input<pulumi.Input<inputs.OceanAksNpVirtualNodeGroupHeadroom>[]>;
    kubernetesVersion?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    linuxOsConfigs?: pulumi.Input<pulumi.Input<inputs.OceanAksNpVirtualNodeGroupLinuxOsConfig>[]>;
    maxCount?: pulumi.Input<number>;
    maxPodsPerNode?: pulumi.Input<number>;
    minCount?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    oceanId: pulumi.Input<string>;
    osDiskSizeGb?: pulumi.Input<number>;
    osDiskType?: pulumi.Input<string>;
    osSku?: pulumi.Input<string>;
    osType?: pulumi.Input<string>;
    podSubnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    spotPercentage?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taints?: pulumi.Input<pulumi.Input<inputs.OceanAksNpVirtualNodeGroupTaint>[]>;
    updatePolicy?: pulumi.Input<inputs.OceanAksNpVirtualNodeGroupUpdatePolicy>;
    vnetSubnetIds?: pulumi.Input<pulumi.Input<string>[]>;
}
