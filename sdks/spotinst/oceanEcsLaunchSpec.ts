// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OceanEcsLaunchSpec extends pulumi.CustomResource {
    /**
     * Get an existing OceanEcsLaunchSpec resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OceanEcsLaunchSpecState, opts?: pulumi.CustomResourceOptions): OceanEcsLaunchSpec {
        return new OceanEcsLaunchSpec(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:index/oceanEcsLaunchSpec:OceanEcsLaunchSpec';

    /**
     * Returns true if the given object is an instance of OceanEcsLaunchSpec.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OceanEcsLaunchSpec {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OceanEcsLaunchSpec.__pulumiType;
    }

    public readonly attributes!: pulumi.Output<outputs.OceanEcsLaunchSpecAttribute[] | undefined>;
    public readonly autoscaleHeadrooms!: pulumi.Output<outputs.OceanEcsLaunchSpecAutoscaleHeadroom[] | undefined>;
    public readonly blockDeviceMappings!: pulumi.Output<outputs.OceanEcsLaunchSpecBlockDeviceMapping[] | undefined>;
    public readonly iamInstanceProfile!: pulumi.Output<string | undefined>;
    public readonly imageId!: pulumi.Output<string | undefined>;
    public readonly images!: pulumi.Output<outputs.OceanEcsLaunchSpecImage[] | undefined>;
    public readonly instanceMetadataOptions!: pulumi.Output<outputs.OceanEcsLaunchSpecInstanceMetadataOptions | undefined>;
    public readonly instanceTypes!: pulumi.Output<string[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly oceanId!: pulumi.Output<string>;
    public readonly preferredSpotTypes!: pulumi.Output<string[] | undefined>;
    public readonly restrictScaleDown!: pulumi.Output<boolean | undefined>;
    public readonly schedulingTasks!: pulumi.Output<outputs.OceanEcsLaunchSpecSchedulingTask[] | undefined>;
    public readonly securityGroupIds!: pulumi.Output<string[] | undefined>;
    public readonly strategies!: pulumi.Output<outputs.OceanEcsLaunchSpecStrategy[] | undefined>;
    public readonly subnetIds!: pulumi.Output<string[] | undefined>;
    public readonly tags!: pulumi.Output<outputs.OceanEcsLaunchSpecTag[] | undefined>;
    public readonly userData!: pulumi.Output<string | undefined>;

    /**
     * Create a OceanEcsLaunchSpec resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OceanEcsLaunchSpecArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OceanEcsLaunchSpecArgs | OceanEcsLaunchSpecState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OceanEcsLaunchSpecState | undefined;
            resourceInputs["attributes"] = state ? state.attributes : undefined;
            resourceInputs["autoscaleHeadrooms"] = state ? state.autoscaleHeadrooms : undefined;
            resourceInputs["blockDeviceMappings"] = state ? state.blockDeviceMappings : undefined;
            resourceInputs["iamInstanceProfile"] = state ? state.iamInstanceProfile : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["images"] = state ? state.images : undefined;
            resourceInputs["instanceMetadataOptions"] = state ? state.instanceMetadataOptions : undefined;
            resourceInputs["instanceTypes"] = state ? state.instanceTypes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oceanId"] = state ? state.oceanId : undefined;
            resourceInputs["preferredSpotTypes"] = state ? state.preferredSpotTypes : undefined;
            resourceInputs["restrictScaleDown"] = state ? state.restrictScaleDown : undefined;
            resourceInputs["schedulingTasks"] = state ? state.schedulingTasks : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["strategies"] = state ? state.strategies : undefined;
            resourceInputs["subnetIds"] = state ? state.subnetIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
        } else {
            const args = argsOrState as OceanEcsLaunchSpecArgs | undefined;
            if ((!args || args.oceanId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'oceanId'");
            }
            resourceInputs["attributes"] = args ? args.attributes : undefined;
            resourceInputs["autoscaleHeadrooms"] = args ? args.autoscaleHeadrooms : undefined;
            resourceInputs["blockDeviceMappings"] = args ? args.blockDeviceMappings : undefined;
            resourceInputs["iamInstanceProfile"] = args ? args.iamInstanceProfile : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["images"] = args ? args.images : undefined;
            resourceInputs["instanceMetadataOptions"] = args ? args.instanceMetadataOptions : undefined;
            resourceInputs["instanceTypes"] = args ? args.instanceTypes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["oceanId"] = args ? args.oceanId : undefined;
            resourceInputs["preferredSpotTypes"] = args ? args.preferredSpotTypes : undefined;
            resourceInputs["restrictScaleDown"] = args ? args.restrictScaleDown : undefined;
            resourceInputs["schedulingTasks"] = args ? args.schedulingTasks : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["strategies"] = args ? args.strategies : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OceanEcsLaunchSpec.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OceanEcsLaunchSpec resources.
 */
export interface OceanEcsLaunchSpecState {
    attributes?: pulumi.Input<pulumi.Input<inputs.OceanEcsLaunchSpecAttribute>[]>;
    autoscaleHeadrooms?: pulumi.Input<pulumi.Input<inputs.OceanEcsLaunchSpecAutoscaleHeadroom>[]>;
    blockDeviceMappings?: pulumi.Input<pulumi.Input<inputs.OceanEcsLaunchSpecBlockDeviceMapping>[]>;
    iamInstanceProfile?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    images?: pulumi.Input<pulumi.Input<inputs.OceanEcsLaunchSpecImage>[]>;
    instanceMetadataOptions?: pulumi.Input<inputs.OceanEcsLaunchSpecInstanceMetadataOptions>;
    instanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    oceanId?: pulumi.Input<string>;
    preferredSpotTypes?: pulumi.Input<pulumi.Input<string>[]>;
    restrictScaleDown?: pulumi.Input<boolean>;
    schedulingTasks?: pulumi.Input<pulumi.Input<inputs.OceanEcsLaunchSpecSchedulingTask>[]>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    strategies?: pulumi.Input<pulumi.Input<inputs.OceanEcsLaunchSpecStrategy>[]>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.OceanEcsLaunchSpecTag>[]>;
    userData?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OceanEcsLaunchSpec resource.
 */
export interface OceanEcsLaunchSpecArgs {
    attributes?: pulumi.Input<pulumi.Input<inputs.OceanEcsLaunchSpecAttribute>[]>;
    autoscaleHeadrooms?: pulumi.Input<pulumi.Input<inputs.OceanEcsLaunchSpecAutoscaleHeadroom>[]>;
    blockDeviceMappings?: pulumi.Input<pulumi.Input<inputs.OceanEcsLaunchSpecBlockDeviceMapping>[]>;
    iamInstanceProfile?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    images?: pulumi.Input<pulumi.Input<inputs.OceanEcsLaunchSpecImage>[]>;
    instanceMetadataOptions?: pulumi.Input<inputs.OceanEcsLaunchSpecInstanceMetadataOptions>;
    instanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    oceanId: pulumi.Input<string>;
    preferredSpotTypes?: pulumi.Input<pulumi.Input<string>[]>;
    restrictScaleDown?: pulumi.Input<boolean>;
    schedulingTasks?: pulumi.Input<pulumi.Input<inputs.OceanEcsLaunchSpecSchedulingTask>[]>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    strategies?: pulumi.Input<pulumi.Input<inputs.OceanEcsLaunchSpecStrategy>[]>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.OceanEcsLaunchSpecTag>[]>;
    userData?: pulumi.Input<string>;
}
