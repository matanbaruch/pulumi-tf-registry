// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OceancdRolloutSpec extends pulumi.CustomResource {
    /**
     * Get an existing OceancdRolloutSpec resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OceancdRolloutSpecState, opts?: pulumi.CustomResourceOptions): OceancdRolloutSpec {
        return new OceancdRolloutSpec(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:index/oceancdRolloutSpec:OceancdRolloutSpec';

    /**
     * Returns true if the given object is an instance of OceancdRolloutSpec.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OceancdRolloutSpec {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OceancdRolloutSpec.__pulumiType;
    }

    public readonly failurePolicy!: pulumi.Output<outputs.OceancdRolloutSpecFailurePolicy | undefined>;
    public readonly rolloutSpecName!: pulumi.Output<string>;
    public readonly spotDeployment!: pulumi.Output<outputs.OceancdRolloutSpecSpotDeployment | undefined>;
    public readonly spotDeployments!: pulumi.Output<outputs.OceancdRolloutSpecSpotDeployment[] | undefined>;
    public readonly strategy!: pulumi.Output<outputs.OceancdRolloutSpecStrategy>;
    public readonly traffic!: pulumi.Output<outputs.OceancdRolloutSpecTraffic | undefined>;

    /**
     * Create a OceancdRolloutSpec resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OceancdRolloutSpecArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OceancdRolloutSpecArgs | OceancdRolloutSpecState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OceancdRolloutSpecState | undefined;
            resourceInputs["failurePolicy"] = state ? state.failurePolicy : undefined;
            resourceInputs["rolloutSpecName"] = state ? state.rolloutSpecName : undefined;
            resourceInputs["spotDeployment"] = state ? state.spotDeployment : undefined;
            resourceInputs["spotDeployments"] = state ? state.spotDeployments : undefined;
            resourceInputs["strategy"] = state ? state.strategy : undefined;
            resourceInputs["traffic"] = state ? state.traffic : undefined;
        } else {
            const args = argsOrState as OceancdRolloutSpecArgs | undefined;
            if ((!args || args.rolloutSpecName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rolloutSpecName'");
            }
            if ((!args || args.strategy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'strategy'");
            }
            resourceInputs["failurePolicy"] = args ? args.failurePolicy : undefined;
            resourceInputs["rolloutSpecName"] = args ? args.rolloutSpecName : undefined;
            resourceInputs["spotDeployment"] = args ? args.spotDeployment : undefined;
            resourceInputs["spotDeployments"] = args ? args.spotDeployments : undefined;
            resourceInputs["strategy"] = args ? args.strategy : undefined;
            resourceInputs["traffic"] = args ? args.traffic : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OceancdRolloutSpec.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OceancdRolloutSpec resources.
 */
export interface OceancdRolloutSpecState {
    failurePolicy?: pulumi.Input<inputs.OceancdRolloutSpecFailurePolicy>;
    rolloutSpecName?: pulumi.Input<string>;
    spotDeployment?: pulumi.Input<inputs.OceancdRolloutSpecSpotDeployment>;
    spotDeployments?: pulumi.Input<pulumi.Input<inputs.OceancdRolloutSpecSpotDeployment>[]>;
    strategy?: pulumi.Input<inputs.OceancdRolloutSpecStrategy>;
    traffic?: pulumi.Input<inputs.OceancdRolloutSpecTraffic>;
}

/**
 * The set of arguments for constructing a OceancdRolloutSpec resource.
 */
export interface OceancdRolloutSpecArgs {
    failurePolicy?: pulumi.Input<inputs.OceancdRolloutSpecFailurePolicy>;
    rolloutSpecName: pulumi.Input<string>;
    spotDeployment?: pulumi.Input<inputs.OceancdRolloutSpecSpotDeployment>;
    spotDeployments?: pulumi.Input<pulumi.Input<inputs.OceancdRolloutSpecSpotDeployment>[]>;
    strategy: pulumi.Input<inputs.OceancdRolloutSpecStrategy>;
    traffic?: pulumi.Input<inputs.OceancdRolloutSpecTraffic>;
}
