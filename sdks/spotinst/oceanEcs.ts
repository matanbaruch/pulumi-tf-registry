// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OceanEcs extends pulumi.CustomResource {
    /**
     * Get an existing OceanEcs resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OceanEcsState, opts?: pulumi.CustomResourceOptions): OceanEcs {
        return new OceanEcs(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:index/oceanEcs:OceanEcs';

    /**
     * Returns true if the given object is an instance of OceanEcs.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OceanEcs {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OceanEcs.__pulumiType;
    }

    public readonly associatePublicIpAddress!: pulumi.Output<boolean | undefined>;
    public readonly autoscaler!: pulumi.Output<outputs.OceanEcsAutoscaler | undefined>;
    public readonly blacklists!: pulumi.Output<string[] | undefined>;
    public readonly blockDeviceMappings!: pulumi.Output<outputs.OceanEcsBlockDeviceMapping[] | undefined>;
    public readonly clusterName!: pulumi.Output<string>;
    public readonly clusterOrientations!: pulumi.Output<outputs.OceanEcsClusterOrientation[] | undefined>;
    public readonly desiredCapacity!: pulumi.Output<number>;
    public readonly drainingTimeout!: pulumi.Output<number | undefined>;
    public readonly ebsOptimized!: pulumi.Output<boolean | undefined>;
    public readonly filters!: pulumi.Output<outputs.OceanEcsFilters | undefined>;
    public readonly iamInstanceProfile!: pulumi.Output<string | undefined>;
    public readonly imageId!: pulumi.Output<string>;
    public readonly instanceMetadataOptions!: pulumi.Output<outputs.OceanEcsInstanceMetadataOptions | undefined>;
    public readonly keyPair!: pulumi.Output<string | undefined>;
    public readonly logging!: pulumi.Output<outputs.OceanEcsLogging | undefined>;
    public readonly maxSize!: pulumi.Output<number>;
    public readonly minSize!: pulumi.Output<number>;
    public readonly monitoring!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly optimizeImages!: pulumi.Output<outputs.OceanEcsOptimizeImages | undefined>;
    public readonly region!: pulumi.Output<string>;
    public readonly scheduledTasks!: pulumi.Output<outputs.OceanEcsScheduledTask[] | undefined>;
    public readonly securityGroupIds!: pulumi.Output<string[]>;
    public readonly spotPercentage!: pulumi.Output<number | undefined>;
    public readonly subnetIds!: pulumi.Output<string[]>;
    public readonly tags!: pulumi.Output<outputs.OceanEcsTag[] | undefined>;
    public readonly updatePolicy!: pulumi.Output<outputs.OceanEcsUpdatePolicy | undefined>;
    public readonly useAsTemplateOnly!: pulumi.Output<boolean | undefined>;
    public readonly userData!: pulumi.Output<string | undefined>;
    public readonly utilizeCommitments!: pulumi.Output<boolean | undefined>;
    public readonly utilizeReservedInstances!: pulumi.Output<boolean | undefined>;
    public readonly whitelists!: pulumi.Output<string[] | undefined>;

    /**
     * Create a OceanEcs resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OceanEcsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OceanEcsArgs | OceanEcsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OceanEcsState | undefined;
            resourceInputs["associatePublicIpAddress"] = state ? state.associatePublicIpAddress : undefined;
            resourceInputs["autoscaler"] = state ? state.autoscaler : undefined;
            resourceInputs["blacklists"] = state ? state.blacklists : undefined;
            resourceInputs["blockDeviceMappings"] = state ? state.blockDeviceMappings : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["clusterOrientations"] = state ? state.clusterOrientations : undefined;
            resourceInputs["desiredCapacity"] = state ? state.desiredCapacity : undefined;
            resourceInputs["drainingTimeout"] = state ? state.drainingTimeout : undefined;
            resourceInputs["ebsOptimized"] = state ? state.ebsOptimized : undefined;
            resourceInputs["filters"] = state ? state.filters : undefined;
            resourceInputs["iamInstanceProfile"] = state ? state.iamInstanceProfile : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["instanceMetadataOptions"] = state ? state.instanceMetadataOptions : undefined;
            resourceInputs["keyPair"] = state ? state.keyPair : undefined;
            resourceInputs["logging"] = state ? state.logging : undefined;
            resourceInputs["maxSize"] = state ? state.maxSize : undefined;
            resourceInputs["minSize"] = state ? state.minSize : undefined;
            resourceInputs["monitoring"] = state ? state.monitoring : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["optimizeImages"] = state ? state.optimizeImages : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["scheduledTasks"] = state ? state.scheduledTasks : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["spotPercentage"] = state ? state.spotPercentage : undefined;
            resourceInputs["subnetIds"] = state ? state.subnetIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatePolicy"] = state ? state.updatePolicy : undefined;
            resourceInputs["useAsTemplateOnly"] = state ? state.useAsTemplateOnly : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["utilizeCommitments"] = state ? state.utilizeCommitments : undefined;
            resourceInputs["utilizeReservedInstances"] = state ? state.utilizeReservedInstances : undefined;
            resourceInputs["whitelists"] = state ? state.whitelists : undefined;
        } else {
            const args = argsOrState as OceanEcsArgs | undefined;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.imageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.securityGroupIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupIds'");
            }
            if ((!args || args.subnetIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetIds'");
            }
            resourceInputs["associatePublicIpAddress"] = args ? args.associatePublicIpAddress : undefined;
            resourceInputs["autoscaler"] = args ? args.autoscaler : undefined;
            resourceInputs["blacklists"] = args ? args.blacklists : undefined;
            resourceInputs["blockDeviceMappings"] = args ? args.blockDeviceMappings : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["clusterOrientations"] = args ? args.clusterOrientations : undefined;
            resourceInputs["desiredCapacity"] = args ? args.desiredCapacity : undefined;
            resourceInputs["drainingTimeout"] = args ? args.drainingTimeout : undefined;
            resourceInputs["ebsOptimized"] = args ? args.ebsOptimized : undefined;
            resourceInputs["filters"] = args ? args.filters : undefined;
            resourceInputs["iamInstanceProfile"] = args ? args.iamInstanceProfile : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["instanceMetadataOptions"] = args ? args.instanceMetadataOptions : undefined;
            resourceInputs["keyPair"] = args ? args.keyPair : undefined;
            resourceInputs["logging"] = args ? args.logging : undefined;
            resourceInputs["maxSize"] = args ? args.maxSize : undefined;
            resourceInputs["minSize"] = args ? args.minSize : undefined;
            resourceInputs["monitoring"] = args ? args.monitoring : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["optimizeImages"] = args ? args.optimizeImages : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["scheduledTasks"] = args ? args.scheduledTasks : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["spotPercentage"] = args ? args.spotPercentage : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["updatePolicy"] = args ? args.updatePolicy : undefined;
            resourceInputs["useAsTemplateOnly"] = args ? args.useAsTemplateOnly : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["utilizeCommitments"] = args ? args.utilizeCommitments : undefined;
            resourceInputs["utilizeReservedInstances"] = args ? args.utilizeReservedInstances : undefined;
            resourceInputs["whitelists"] = args ? args.whitelists : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OceanEcs.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OceanEcs resources.
 */
export interface OceanEcsState {
    associatePublicIpAddress?: pulumi.Input<boolean>;
    autoscaler?: pulumi.Input<inputs.OceanEcsAutoscaler>;
    blacklists?: pulumi.Input<pulumi.Input<string>[]>;
    blockDeviceMappings?: pulumi.Input<pulumi.Input<inputs.OceanEcsBlockDeviceMapping>[]>;
    clusterName?: pulumi.Input<string>;
    clusterOrientations?: pulumi.Input<pulumi.Input<inputs.OceanEcsClusterOrientation>[]>;
    desiredCapacity?: pulumi.Input<number>;
    drainingTimeout?: pulumi.Input<number>;
    ebsOptimized?: pulumi.Input<boolean>;
    filters?: pulumi.Input<inputs.OceanEcsFilters>;
    iamInstanceProfile?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    instanceMetadataOptions?: pulumi.Input<inputs.OceanEcsInstanceMetadataOptions>;
    keyPair?: pulumi.Input<string>;
    logging?: pulumi.Input<inputs.OceanEcsLogging>;
    maxSize?: pulumi.Input<number>;
    minSize?: pulumi.Input<number>;
    monitoring?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    optimizeImages?: pulumi.Input<inputs.OceanEcsOptimizeImages>;
    region?: pulumi.Input<string>;
    scheduledTasks?: pulumi.Input<pulumi.Input<inputs.OceanEcsScheduledTask>[]>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    spotPercentage?: pulumi.Input<number>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.OceanEcsTag>[]>;
    updatePolicy?: pulumi.Input<inputs.OceanEcsUpdatePolicy>;
    useAsTemplateOnly?: pulumi.Input<boolean>;
    userData?: pulumi.Input<string>;
    utilizeCommitments?: pulumi.Input<boolean>;
    utilizeReservedInstances?: pulumi.Input<boolean>;
    whitelists?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a OceanEcs resource.
 */
export interface OceanEcsArgs {
    associatePublicIpAddress?: pulumi.Input<boolean>;
    autoscaler?: pulumi.Input<inputs.OceanEcsAutoscaler>;
    blacklists?: pulumi.Input<pulumi.Input<string>[]>;
    blockDeviceMappings?: pulumi.Input<pulumi.Input<inputs.OceanEcsBlockDeviceMapping>[]>;
    clusterName: pulumi.Input<string>;
    clusterOrientations?: pulumi.Input<pulumi.Input<inputs.OceanEcsClusterOrientation>[]>;
    desiredCapacity?: pulumi.Input<number>;
    drainingTimeout?: pulumi.Input<number>;
    ebsOptimized?: pulumi.Input<boolean>;
    filters?: pulumi.Input<inputs.OceanEcsFilters>;
    iamInstanceProfile?: pulumi.Input<string>;
    imageId: pulumi.Input<string>;
    instanceMetadataOptions?: pulumi.Input<inputs.OceanEcsInstanceMetadataOptions>;
    keyPair?: pulumi.Input<string>;
    logging?: pulumi.Input<inputs.OceanEcsLogging>;
    maxSize?: pulumi.Input<number>;
    minSize?: pulumi.Input<number>;
    monitoring?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    optimizeImages?: pulumi.Input<inputs.OceanEcsOptimizeImages>;
    region: pulumi.Input<string>;
    scheduledTasks?: pulumi.Input<pulumi.Input<inputs.OceanEcsScheduledTask>[]>;
    securityGroupIds: pulumi.Input<pulumi.Input<string>[]>;
    spotPercentage?: pulumi.Input<number>;
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.OceanEcsTag>[]>;
    updatePolicy?: pulumi.Input<inputs.OceanEcsUpdatePolicy>;
    useAsTemplateOnly?: pulumi.Input<boolean>;
    userData?: pulumi.Input<string>;
    utilizeCommitments?: pulumi.Input<boolean>;
    utilizeReservedInstances?: pulumi.Input<boolean>;
    whitelists?: pulumi.Input<pulumi.Input<string>[]>;
}
