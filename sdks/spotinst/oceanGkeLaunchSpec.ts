// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OceanGkeLaunchSpec extends pulumi.CustomResource {
    /**
     * Get an existing OceanGkeLaunchSpec resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OceanGkeLaunchSpecState, opts?: pulumi.CustomResourceOptions): OceanGkeLaunchSpec {
        return new OceanGkeLaunchSpec(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:index/oceanGkeLaunchSpec:OceanGkeLaunchSpec';

    /**
     * Returns true if the given object is an instance of OceanGkeLaunchSpec.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OceanGkeLaunchSpec {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OceanGkeLaunchSpec.__pulumiType;
    }

    public readonly autoscaleHeadrooms!: pulumi.Output<outputs.OceanGkeLaunchSpecAutoscaleHeadroom[] | undefined>;
    public readonly autoscaleHeadroomsAutomatics!: pulumi.Output<outputs.OceanGkeLaunchSpecAutoscaleHeadroomsAutomatic[] | undefined>;
    public readonly createOptions!: pulumi.Output<outputs.OceanGkeLaunchSpecCreateOptions | undefined>;
    public readonly instanceTypes!: pulumi.Output<string[]>;
    public readonly labels!: pulumi.Output<outputs.OceanGkeLaunchSpecLabel[] | undefined>;
    public readonly metadatas!: pulumi.Output<outputs.OceanGkeLaunchSpecMetadata[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkInterfaces!: pulumi.Output<outputs.OceanGkeLaunchSpecNetworkInterface[] | undefined>;
    public readonly nodePoolName!: pulumi.Output<string | undefined>;
    public readonly oceanId!: pulumi.Output<string>;
    public readonly resourceLimits!: pulumi.Output<outputs.OceanGkeLaunchSpecResourceLimits | undefined>;
    public readonly restrictScaleDown!: pulumi.Output<boolean>;
    public readonly rootVolumeSize!: pulumi.Output<number>;
    public readonly rootVolumeType!: pulumi.Output<string>;
    public readonly schedulingTasks!: pulumi.Output<outputs.OceanGkeLaunchSpecSchedulingTask[] | undefined>;
    public readonly serviceAccount!: pulumi.Output<string>;
    public readonly shieldedInstanceConfig!: pulumi.Output<outputs.OceanGkeLaunchSpecShieldedInstanceConfig | undefined>;
    public readonly sourceImage!: pulumi.Output<string>;
    public readonly storage!: pulumi.Output<outputs.OceanGkeLaunchSpecStorage | undefined>;
    public readonly strategies!: pulumi.Output<outputs.OceanGkeLaunchSpecStrategy[] | undefined>;
    public readonly tags!: pulumi.Output<string[]>;
    public readonly taints!: pulumi.Output<outputs.OceanGkeLaunchSpecTaint[] | undefined>;
    public readonly updatePolicy!: pulumi.Output<outputs.OceanGkeLaunchSpecUpdatePolicy | undefined>;

    /**
     * Create a OceanGkeLaunchSpec resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OceanGkeLaunchSpecArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OceanGkeLaunchSpecArgs | OceanGkeLaunchSpecState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OceanGkeLaunchSpecState | undefined;
            resourceInputs["autoscaleHeadrooms"] = state ? state.autoscaleHeadrooms : undefined;
            resourceInputs["autoscaleHeadroomsAutomatics"] = state ? state.autoscaleHeadroomsAutomatics : undefined;
            resourceInputs["createOptions"] = state ? state.createOptions : undefined;
            resourceInputs["instanceTypes"] = state ? state.instanceTypes : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["metadatas"] = state ? state.metadatas : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkInterfaces"] = state ? state.networkInterfaces : undefined;
            resourceInputs["nodePoolName"] = state ? state.nodePoolName : undefined;
            resourceInputs["oceanId"] = state ? state.oceanId : undefined;
            resourceInputs["resourceLimits"] = state ? state.resourceLimits : undefined;
            resourceInputs["restrictScaleDown"] = state ? state.restrictScaleDown : undefined;
            resourceInputs["rootVolumeSize"] = state ? state.rootVolumeSize : undefined;
            resourceInputs["rootVolumeType"] = state ? state.rootVolumeType : undefined;
            resourceInputs["schedulingTasks"] = state ? state.schedulingTasks : undefined;
            resourceInputs["serviceAccount"] = state ? state.serviceAccount : undefined;
            resourceInputs["shieldedInstanceConfig"] = state ? state.shieldedInstanceConfig : undefined;
            resourceInputs["sourceImage"] = state ? state.sourceImage : undefined;
            resourceInputs["storage"] = state ? state.storage : undefined;
            resourceInputs["strategies"] = state ? state.strategies : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["taints"] = state ? state.taints : undefined;
            resourceInputs["updatePolicy"] = state ? state.updatePolicy : undefined;
        } else {
            const args = argsOrState as OceanGkeLaunchSpecArgs | undefined;
            if ((!args || args.oceanId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'oceanId'");
            }
            resourceInputs["autoscaleHeadrooms"] = args ? args.autoscaleHeadrooms : undefined;
            resourceInputs["autoscaleHeadroomsAutomatics"] = args ? args.autoscaleHeadroomsAutomatics : undefined;
            resourceInputs["createOptions"] = args ? args.createOptions : undefined;
            resourceInputs["instanceTypes"] = args ? args.instanceTypes : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["metadatas"] = args ? args.metadatas : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkInterfaces"] = args ? args.networkInterfaces : undefined;
            resourceInputs["nodePoolName"] = args ? args.nodePoolName : undefined;
            resourceInputs["oceanId"] = args ? args.oceanId : undefined;
            resourceInputs["resourceLimits"] = args ? args.resourceLimits : undefined;
            resourceInputs["restrictScaleDown"] = args ? args.restrictScaleDown : undefined;
            resourceInputs["rootVolumeSize"] = args ? args.rootVolumeSize : undefined;
            resourceInputs["rootVolumeType"] = args ? args.rootVolumeType : undefined;
            resourceInputs["schedulingTasks"] = args ? args.schedulingTasks : undefined;
            resourceInputs["serviceAccount"] = args ? args.serviceAccount : undefined;
            resourceInputs["shieldedInstanceConfig"] = args ? args.shieldedInstanceConfig : undefined;
            resourceInputs["sourceImage"] = args ? args.sourceImage : undefined;
            resourceInputs["storage"] = args ? args.storage : undefined;
            resourceInputs["strategies"] = args ? args.strategies : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["taints"] = args ? args.taints : undefined;
            resourceInputs["updatePolicy"] = args ? args.updatePolicy : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OceanGkeLaunchSpec.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OceanGkeLaunchSpec resources.
 */
export interface OceanGkeLaunchSpecState {
    autoscaleHeadrooms?: pulumi.Input<pulumi.Input<inputs.OceanGkeLaunchSpecAutoscaleHeadroom>[]>;
    autoscaleHeadroomsAutomatics?: pulumi.Input<pulumi.Input<inputs.OceanGkeLaunchSpecAutoscaleHeadroomsAutomatic>[]>;
    createOptions?: pulumi.Input<inputs.OceanGkeLaunchSpecCreateOptions>;
    instanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    labels?: pulumi.Input<pulumi.Input<inputs.OceanGkeLaunchSpecLabel>[]>;
    metadatas?: pulumi.Input<pulumi.Input<inputs.OceanGkeLaunchSpecMetadata>[]>;
    name?: pulumi.Input<string>;
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.OceanGkeLaunchSpecNetworkInterface>[]>;
    nodePoolName?: pulumi.Input<string>;
    oceanId?: pulumi.Input<string>;
    resourceLimits?: pulumi.Input<inputs.OceanGkeLaunchSpecResourceLimits>;
    restrictScaleDown?: pulumi.Input<boolean>;
    rootVolumeSize?: pulumi.Input<number>;
    rootVolumeType?: pulumi.Input<string>;
    schedulingTasks?: pulumi.Input<pulumi.Input<inputs.OceanGkeLaunchSpecSchedulingTask>[]>;
    serviceAccount?: pulumi.Input<string>;
    shieldedInstanceConfig?: pulumi.Input<inputs.OceanGkeLaunchSpecShieldedInstanceConfig>;
    sourceImage?: pulumi.Input<string>;
    storage?: pulumi.Input<inputs.OceanGkeLaunchSpecStorage>;
    strategies?: pulumi.Input<pulumi.Input<inputs.OceanGkeLaunchSpecStrategy>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    taints?: pulumi.Input<pulumi.Input<inputs.OceanGkeLaunchSpecTaint>[]>;
    updatePolicy?: pulumi.Input<inputs.OceanGkeLaunchSpecUpdatePolicy>;
}

/**
 * The set of arguments for constructing a OceanGkeLaunchSpec resource.
 */
export interface OceanGkeLaunchSpecArgs {
    autoscaleHeadrooms?: pulumi.Input<pulumi.Input<inputs.OceanGkeLaunchSpecAutoscaleHeadroom>[]>;
    autoscaleHeadroomsAutomatics?: pulumi.Input<pulumi.Input<inputs.OceanGkeLaunchSpecAutoscaleHeadroomsAutomatic>[]>;
    createOptions?: pulumi.Input<inputs.OceanGkeLaunchSpecCreateOptions>;
    instanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    labels?: pulumi.Input<pulumi.Input<inputs.OceanGkeLaunchSpecLabel>[]>;
    metadatas?: pulumi.Input<pulumi.Input<inputs.OceanGkeLaunchSpecMetadata>[]>;
    name?: pulumi.Input<string>;
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.OceanGkeLaunchSpecNetworkInterface>[]>;
    nodePoolName?: pulumi.Input<string>;
    oceanId: pulumi.Input<string>;
    resourceLimits?: pulumi.Input<inputs.OceanGkeLaunchSpecResourceLimits>;
    restrictScaleDown?: pulumi.Input<boolean>;
    rootVolumeSize?: pulumi.Input<number>;
    rootVolumeType?: pulumi.Input<string>;
    schedulingTasks?: pulumi.Input<pulumi.Input<inputs.OceanGkeLaunchSpecSchedulingTask>[]>;
    serviceAccount?: pulumi.Input<string>;
    shieldedInstanceConfig?: pulumi.Input<inputs.OceanGkeLaunchSpecShieldedInstanceConfig>;
    sourceImage?: pulumi.Input<string>;
    storage?: pulumi.Input<inputs.OceanGkeLaunchSpecStorage>;
    strategies?: pulumi.Input<pulumi.Input<inputs.OceanGkeLaunchSpecStrategy>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    taints?: pulumi.Input<pulumi.Input<inputs.OceanGkeLaunchSpecTaint>[]>;
    updatePolicy?: pulumi.Input<inputs.OceanGkeLaunchSpecUpdatePolicy>;
}
