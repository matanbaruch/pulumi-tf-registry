// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccountArgs, AccountState } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));

export { AccountAwsArgs, AccountAwsState } from "./accountAws";
export type AccountAws = import("./accountAws").AccountAws;
export const AccountAws: typeof import("./accountAws").AccountAws = null as any;
utilities.lazyLoad(exports, ["AccountAws"], () => require("./accountAws"));

export { CredentialsAwsArgs, CredentialsAwsState } from "./credentialsAws";
export type CredentialsAws = import("./credentialsAws").CredentialsAws;
export const CredentialsAws: typeof import("./credentialsAws").CredentialsAws = null as any;
utilities.lazyLoad(exports, ["CredentialsAws"], () => require("./credentialsAws"));

export { CredentialsGcpArgs, CredentialsGcpState } from "./credentialsGcp";
export type CredentialsGcp = import("./credentialsGcp").CredentialsGcp;
export const CredentialsGcp: typeof import("./credentialsGcp").CredentialsGcp = null as any;
utilities.lazyLoad(exports, ["CredentialsGcp"], () => require("./credentialsGcp"));

export { DataIntegrationArgs, DataIntegrationState } from "./dataIntegration";
export type DataIntegration = import("./dataIntegration").DataIntegration;
export const DataIntegration: typeof import("./dataIntegration").DataIntegration = null as any;
utilities.lazyLoad(exports, ["DataIntegration"], () => require("./dataIntegration"));

export { ElastigroupAwsArgs, ElastigroupAwsState } from "./elastigroupAws";
export type ElastigroupAws = import("./elastigroupAws").ElastigroupAws;
export const ElastigroupAws: typeof import("./elastigroupAws").ElastigroupAws = null as any;
utilities.lazyLoad(exports, ["ElastigroupAws"], () => require("./elastigroupAws"));

export { ElastigroupAwsBeanstalkArgs, ElastigroupAwsBeanstalkState } from "./elastigroupAwsBeanstalk";
export type ElastigroupAwsBeanstalk = import("./elastigroupAwsBeanstalk").ElastigroupAwsBeanstalk;
export const ElastigroupAwsBeanstalk: typeof import("./elastigroupAwsBeanstalk").ElastigroupAwsBeanstalk = null as any;
utilities.lazyLoad(exports, ["ElastigroupAwsBeanstalk"], () => require("./elastigroupAwsBeanstalk"));

export { ElastigroupAwsSuspensionArgs, ElastigroupAwsSuspensionState } from "./elastigroupAwsSuspension";
export type ElastigroupAwsSuspension = import("./elastigroupAwsSuspension").ElastigroupAwsSuspension;
export const ElastigroupAwsSuspension: typeof import("./elastigroupAwsSuspension").ElastigroupAwsSuspension = null as any;
utilities.lazyLoad(exports, ["ElastigroupAwsSuspension"], () => require("./elastigroupAwsSuspension"));

export { ElastigroupAzureV3Args, ElastigroupAzureV3State } from "./elastigroupAzureV3";
export type ElastigroupAzureV3 = import("./elastigroupAzureV3").ElastigroupAzureV3;
export const ElastigroupAzureV3: typeof import("./elastigroupAzureV3").ElastigroupAzureV3 = null as any;
utilities.lazyLoad(exports, ["ElastigroupAzureV3"], () => require("./elastigroupAzureV3"));

export { ElastigroupGcpArgs, ElastigroupGcpState } from "./elastigroupGcp";
export type ElastigroupGcp = import("./elastigroupGcp").ElastigroupGcp;
export const ElastigroupGcp: typeof import("./elastigroupGcp").ElastigroupGcp = null as any;
utilities.lazyLoad(exports, ["ElastigroupGcp"], () => require("./elastigroupGcp"));

export { ElastigroupGkeArgs, ElastigroupGkeState } from "./elastigroupGke";
export type ElastigroupGke = import("./elastigroupGke").ElastigroupGke;
export const ElastigroupGke: typeof import("./elastigroupGke").ElastigroupGke = null as any;
utilities.lazyLoad(exports, ["ElastigroupGke"], () => require("./elastigroupGke"));

export { HealthCheckArgs, HealthCheckState } from "./healthCheck";
export type HealthCheck = import("./healthCheck").HealthCheck;
export const HealthCheck: typeof import("./healthCheck").HealthCheck = null as any;
utilities.lazyLoad(exports, ["HealthCheck"], () => require("./healthCheck"));

export { ManagedInstanceAwsArgs, ManagedInstanceAwsState } from "./managedInstanceAws";
export type ManagedInstanceAws = import("./managedInstanceAws").ManagedInstanceAws;
export const ManagedInstanceAws: typeof import("./managedInstanceAws").ManagedInstanceAws = null as any;
utilities.lazyLoad(exports, ["ManagedInstanceAws"], () => require("./managedInstanceAws"));

export { MrscalerAwsArgs, MrscalerAwsState } from "./mrscalerAws";
export type MrscalerAws = import("./mrscalerAws").MrscalerAws;
export const MrscalerAws: typeof import("./mrscalerAws").MrscalerAws = null as any;
utilities.lazyLoad(exports, ["MrscalerAws"], () => require("./mrscalerAws"));

export { OceanAksNpArgs, OceanAksNpState } from "./oceanAksNp";
export type OceanAksNp = import("./oceanAksNp").OceanAksNp;
export const OceanAksNp: typeof import("./oceanAksNp").OceanAksNp = null as any;
utilities.lazyLoad(exports, ["OceanAksNp"], () => require("./oceanAksNp"));

export { OceanAksNpVirtualNodeGroupArgs, OceanAksNpVirtualNodeGroupState } from "./oceanAksNpVirtualNodeGroup";
export type OceanAksNpVirtualNodeGroup = import("./oceanAksNpVirtualNodeGroup").OceanAksNpVirtualNodeGroup;
export const OceanAksNpVirtualNodeGroup: typeof import("./oceanAksNpVirtualNodeGroup").OceanAksNpVirtualNodeGroup = null as any;
utilities.lazyLoad(exports, ["OceanAksNpVirtualNodeGroup"], () => require("./oceanAksNpVirtualNodeGroup"));

export { OceanAwsArgs, OceanAwsState } from "./oceanAws";
export type OceanAws = import("./oceanAws").OceanAws;
export const OceanAws: typeof import("./oceanAws").OceanAws = null as any;
utilities.lazyLoad(exports, ["OceanAws"], () => require("./oceanAws"));

export { OceanAwsExtendedResourceDefinitionArgs, OceanAwsExtendedResourceDefinitionState } from "./oceanAwsExtendedResourceDefinition";
export type OceanAwsExtendedResourceDefinition = import("./oceanAwsExtendedResourceDefinition").OceanAwsExtendedResourceDefinition;
export const OceanAwsExtendedResourceDefinition: typeof import("./oceanAwsExtendedResourceDefinition").OceanAwsExtendedResourceDefinition = null as any;
utilities.lazyLoad(exports, ["OceanAwsExtendedResourceDefinition"], () => require("./oceanAwsExtendedResourceDefinition"));

export { OceanAwsLaunchSpecArgs, OceanAwsLaunchSpecState } from "./oceanAwsLaunchSpec";
export type OceanAwsLaunchSpec = import("./oceanAwsLaunchSpec").OceanAwsLaunchSpec;
export const OceanAwsLaunchSpec: typeof import("./oceanAwsLaunchSpec").OceanAwsLaunchSpec = null as any;
utilities.lazyLoad(exports, ["OceanAwsLaunchSpec"], () => require("./oceanAwsLaunchSpec"));

export { OceanEcsArgs, OceanEcsState } from "./oceanEcs";
export type OceanEcs = import("./oceanEcs").OceanEcs;
export const OceanEcs: typeof import("./oceanEcs").OceanEcs = null as any;
utilities.lazyLoad(exports, ["OceanEcs"], () => require("./oceanEcs"));

export { OceanEcsLaunchSpecArgs, OceanEcsLaunchSpecState } from "./oceanEcsLaunchSpec";
export type OceanEcsLaunchSpec = import("./oceanEcsLaunchSpec").OceanEcsLaunchSpec;
export const OceanEcsLaunchSpec: typeof import("./oceanEcsLaunchSpec").OceanEcsLaunchSpec = null as any;
utilities.lazyLoad(exports, ["OceanEcsLaunchSpec"], () => require("./oceanEcsLaunchSpec"));

export { OceanGkeImportArgs, OceanGkeImportState } from "./oceanGkeImport";
export type OceanGkeImport = import("./oceanGkeImport").OceanGkeImport;
export const OceanGkeImport: typeof import("./oceanGkeImport").OceanGkeImport = null as any;
utilities.lazyLoad(exports, ["OceanGkeImport"], () => require("./oceanGkeImport"));

export { OceanGkeLaunchSpecArgs, OceanGkeLaunchSpecState } from "./oceanGkeLaunchSpec";
export type OceanGkeLaunchSpec = import("./oceanGkeLaunchSpec").OceanGkeLaunchSpec;
export const OceanGkeLaunchSpec: typeof import("./oceanGkeLaunchSpec").OceanGkeLaunchSpec = null as any;
utilities.lazyLoad(exports, ["OceanGkeLaunchSpec"], () => require("./oceanGkeLaunchSpec"));

export { OceanGkeLaunchSpecImportArgs, OceanGkeLaunchSpecImportState } from "./oceanGkeLaunchSpecImport";
export type OceanGkeLaunchSpecImport = import("./oceanGkeLaunchSpecImport").OceanGkeLaunchSpecImport;
export const OceanGkeLaunchSpecImport: typeof import("./oceanGkeLaunchSpecImport").OceanGkeLaunchSpecImport = null as any;
utilities.lazyLoad(exports, ["OceanGkeLaunchSpecImport"], () => require("./oceanGkeLaunchSpecImport"));

export { OceanRightSizingRuleArgs, OceanRightSizingRuleState } from "./oceanRightSizingRule";
export type OceanRightSizingRule = import("./oceanRightSizingRule").OceanRightSizingRule;
export const OceanRightSizingRule: typeof import("./oceanRightSizingRule").OceanRightSizingRule = null as any;
utilities.lazyLoad(exports, ["OceanRightSizingRule"], () => require("./oceanRightSizingRule"));

export { OceanSparkArgs, OceanSparkState } from "./oceanSpark";
export type OceanSpark = import("./oceanSpark").OceanSpark;
export const OceanSpark: typeof import("./oceanSpark").OceanSpark = null as any;
utilities.lazyLoad(exports, ["OceanSpark"], () => require("./oceanSpark"));

export { OceanSparkVirtualNodeGroupArgs, OceanSparkVirtualNodeGroupState } from "./oceanSparkVirtualNodeGroup";
export type OceanSparkVirtualNodeGroup = import("./oceanSparkVirtualNodeGroup").OceanSparkVirtualNodeGroup;
export const OceanSparkVirtualNodeGroup: typeof import("./oceanSparkVirtualNodeGroup").OceanSparkVirtualNodeGroup = null as any;
utilities.lazyLoad(exports, ["OceanSparkVirtualNodeGroup"], () => require("./oceanSparkVirtualNodeGroup"));

export { OceancdRolloutSpecArgs, OceancdRolloutSpecState } from "./oceancdRolloutSpec";
export type OceancdRolloutSpec = import("./oceancdRolloutSpec").OceancdRolloutSpec;
export const OceancdRolloutSpec: typeof import("./oceancdRolloutSpec").OceancdRolloutSpec = null as any;
utilities.lazyLoad(exports, ["OceancdRolloutSpec"], () => require("./oceancdRolloutSpec"));

export { OceancdStrategyArgs, OceancdStrategyState } from "./oceancdStrategy";
export type OceancdStrategy = import("./oceancdStrategy").OceancdStrategy;
export const OceancdStrategy: typeof import("./oceancdStrategy").OceancdStrategy = null as any;
utilities.lazyLoad(exports, ["OceancdStrategy"], () => require("./oceancdStrategy"));

export { OceancdVerificationProviderArgs, OceancdVerificationProviderState } from "./oceancdVerificationProvider";
export type OceancdVerificationProvider = import("./oceancdVerificationProvider").OceancdVerificationProvider;
export const OceancdVerificationProvider: typeof import("./oceancdVerificationProvider").OceancdVerificationProvider = null as any;
utilities.lazyLoad(exports, ["OceancdVerificationProvider"], () => require("./oceancdVerificationProvider"));

export { OceancdVerificationTemplateArgs, OceancdVerificationTemplateState } from "./oceancdVerificationTemplate";
export type OceancdVerificationTemplate = import("./oceancdVerificationTemplate").OceancdVerificationTemplate;
export const OceancdVerificationTemplate: typeof import("./oceancdVerificationTemplate").OceancdVerificationTemplate = null as any;
utilities.lazyLoad(exports, ["OceancdVerificationTemplate"], () => require("./oceancdVerificationTemplate"));

export { OrganizationPolicyArgs, OrganizationPolicyState } from "./organizationPolicy";
export type OrganizationPolicy = import("./organizationPolicy").OrganizationPolicy;
export const OrganizationPolicy: typeof import("./organizationPolicy").OrganizationPolicy = null as any;
utilities.lazyLoad(exports, ["OrganizationPolicy"], () => require("./organizationPolicy"));

export { OrganizationProgrammaticUserArgs, OrganizationProgrammaticUserState } from "./organizationProgrammaticUser";
export type OrganizationProgrammaticUser = import("./organizationProgrammaticUser").OrganizationProgrammaticUser;
export const OrganizationProgrammaticUser: typeof import("./organizationProgrammaticUser").OrganizationProgrammaticUser = null as any;
utilities.lazyLoad(exports, ["OrganizationProgrammaticUser"], () => require("./organizationProgrammaticUser"));

export { OrganizationUserArgs, OrganizationUserState } from "./organizationUser";
export type OrganizationUser = import("./organizationUser").OrganizationUser;
export const OrganizationUser: typeof import("./organizationUser").OrganizationUser = null as any;
utilities.lazyLoad(exports, ["OrganizationUser"], () => require("./organizationUser"));

export { OrganizationUserGroupArgs, OrganizationUserGroupState } from "./organizationUserGroup";
export type OrganizationUserGroup = import("./organizationUserGroup").OrganizationUserGroup;
export const OrganizationUserGroup: typeof import("./organizationUserGroup").OrganizationUserGroup = null as any;
utilities.lazyLoad(exports, ["OrganizationUserGroup"], () => require("./organizationUserGroup"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { StatefulNodeAzureArgs, StatefulNodeAzureState } from "./statefulNodeAzure";
export type StatefulNodeAzure = import("./statefulNodeAzure").StatefulNodeAzure;
export const StatefulNodeAzure: typeof import("./statefulNodeAzure").StatefulNodeAzure = null as any;
utilities.lazyLoad(exports, ["StatefulNodeAzure"], () => require("./statefulNodeAzure"));

export { SubscriptionArgs, SubscriptionState } from "./subscription";
export type Subscription = import("./subscription").Subscription;
export const Subscription: typeof import("./subscription").Subscription = null as any;
utilities.lazyLoad(exports, ["Subscription"], () => require("./subscription"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "spotinst:index/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "spotinst:index/accountAws:AccountAws":
                return new AccountAws(name, <any>undefined, { urn })
            case "spotinst:index/credentialsAws:CredentialsAws":
                return new CredentialsAws(name, <any>undefined, { urn })
            case "spotinst:index/credentialsGcp:CredentialsGcp":
                return new CredentialsGcp(name, <any>undefined, { urn })
            case "spotinst:index/dataIntegration:DataIntegration":
                return new DataIntegration(name, <any>undefined, { urn })
            case "spotinst:index/elastigroupAws:ElastigroupAws":
                return new ElastigroupAws(name, <any>undefined, { urn })
            case "spotinst:index/elastigroupAwsBeanstalk:ElastigroupAwsBeanstalk":
                return new ElastigroupAwsBeanstalk(name, <any>undefined, { urn })
            case "spotinst:index/elastigroupAwsSuspension:ElastigroupAwsSuspension":
                return new ElastigroupAwsSuspension(name, <any>undefined, { urn })
            case "spotinst:index/elastigroupAzureV3:ElastigroupAzureV3":
                return new ElastigroupAzureV3(name, <any>undefined, { urn })
            case "spotinst:index/elastigroupGcp:ElastigroupGcp":
                return new ElastigroupGcp(name, <any>undefined, { urn })
            case "spotinst:index/elastigroupGke:ElastigroupGke":
                return new ElastigroupGke(name, <any>undefined, { urn })
            case "spotinst:index/healthCheck:HealthCheck":
                return new HealthCheck(name, <any>undefined, { urn })
            case "spotinst:index/managedInstanceAws:ManagedInstanceAws":
                return new ManagedInstanceAws(name, <any>undefined, { urn })
            case "spotinst:index/mrscalerAws:MrscalerAws":
                return new MrscalerAws(name, <any>undefined, { urn })
            case "spotinst:index/oceanAksNp:OceanAksNp":
                return new OceanAksNp(name, <any>undefined, { urn })
            case "spotinst:index/oceanAksNpVirtualNodeGroup:OceanAksNpVirtualNodeGroup":
                return new OceanAksNpVirtualNodeGroup(name, <any>undefined, { urn })
            case "spotinst:index/oceanAws:OceanAws":
                return new OceanAws(name, <any>undefined, { urn })
            case "spotinst:index/oceanAwsExtendedResourceDefinition:OceanAwsExtendedResourceDefinition":
                return new OceanAwsExtendedResourceDefinition(name, <any>undefined, { urn })
            case "spotinst:index/oceanAwsLaunchSpec:OceanAwsLaunchSpec":
                return new OceanAwsLaunchSpec(name, <any>undefined, { urn })
            case "spotinst:index/oceanEcs:OceanEcs":
                return new OceanEcs(name, <any>undefined, { urn })
            case "spotinst:index/oceanEcsLaunchSpec:OceanEcsLaunchSpec":
                return new OceanEcsLaunchSpec(name, <any>undefined, { urn })
            case "spotinst:index/oceanGkeImport:OceanGkeImport":
                return new OceanGkeImport(name, <any>undefined, { urn })
            case "spotinst:index/oceanGkeLaunchSpec:OceanGkeLaunchSpec":
                return new OceanGkeLaunchSpec(name, <any>undefined, { urn })
            case "spotinst:index/oceanGkeLaunchSpecImport:OceanGkeLaunchSpecImport":
                return new OceanGkeLaunchSpecImport(name, <any>undefined, { urn })
            case "spotinst:index/oceanRightSizingRule:OceanRightSizingRule":
                return new OceanRightSizingRule(name, <any>undefined, { urn })
            case "spotinst:index/oceanSpark:OceanSpark":
                return new OceanSpark(name, <any>undefined, { urn })
            case "spotinst:index/oceanSparkVirtualNodeGroup:OceanSparkVirtualNodeGroup":
                return new OceanSparkVirtualNodeGroup(name, <any>undefined, { urn })
            case "spotinst:index/oceancdRolloutSpec:OceancdRolloutSpec":
                return new OceancdRolloutSpec(name, <any>undefined, { urn })
            case "spotinst:index/oceancdStrategy:OceancdStrategy":
                return new OceancdStrategy(name, <any>undefined, { urn })
            case "spotinst:index/oceancdVerificationProvider:OceancdVerificationProvider":
                return new OceancdVerificationProvider(name, <any>undefined, { urn })
            case "spotinst:index/oceancdVerificationTemplate:OceancdVerificationTemplate":
                return new OceancdVerificationTemplate(name, <any>undefined, { urn })
            case "spotinst:index/organizationPolicy:OrganizationPolicy":
                return new OrganizationPolicy(name, <any>undefined, { urn })
            case "spotinst:index/organizationProgrammaticUser:OrganizationProgrammaticUser":
                return new OrganizationProgrammaticUser(name, <any>undefined, { urn })
            case "spotinst:index/organizationUser:OrganizationUser":
                return new OrganizationUser(name, <any>undefined, { urn })
            case "spotinst:index/organizationUserGroup:OrganizationUserGroup":
                return new OrganizationUserGroup(name, <any>undefined, { urn })
            case "spotinst:index/statefulNodeAzure:StatefulNodeAzure":
                return new StatefulNodeAzure(name, <any>undefined, { urn })
            case "spotinst:index/subscription:Subscription":
                return new Subscription(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("spotinst", "index/account", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/accountAws", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/credentialsAws", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/credentialsGcp", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/dataIntegration", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/elastigroupAws", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/elastigroupAwsBeanstalk", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/elastigroupAwsSuspension", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/elastigroupAzureV3", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/elastigroupGcp", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/elastigroupGke", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/healthCheck", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/managedInstanceAws", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/mrscalerAws", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/oceanAksNp", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/oceanAksNpVirtualNodeGroup", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/oceanAws", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/oceanAwsExtendedResourceDefinition", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/oceanAwsLaunchSpec", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/oceanEcs", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/oceanEcsLaunchSpec", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/oceanGkeImport", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/oceanGkeLaunchSpec", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/oceanGkeLaunchSpecImport", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/oceanRightSizingRule", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/oceanSpark", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/oceanSparkVirtualNodeGroup", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/oceancdRolloutSpec", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/oceancdStrategy", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/oceancdVerificationProvider", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/oceancdVerificationTemplate", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/organizationPolicy", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/organizationProgrammaticUser", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/organizationUser", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/organizationUserGroup", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/statefulNodeAzure", _module)
pulumi.runtime.registerResourceModule("spotinst", "index/subscription", _module)
pulumi.runtime.registerResourcePackage("spotinst", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:spotinst") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
