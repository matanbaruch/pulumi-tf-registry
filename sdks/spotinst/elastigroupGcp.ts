// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ElastigroupGcp extends pulumi.CustomResource {
    /**
     * Get an existing ElastigroupGcp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ElastigroupGcpState, opts?: pulumi.CustomResourceOptions): ElastigroupGcp {
        return new ElastigroupGcp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spotinst:index/elastigroupGcp:ElastigroupGcp';

    /**
     * Returns true if the given object is an instance of ElastigroupGcp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ElastigroupGcp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ElastigroupGcp.__pulumiType;
    }

    public readonly autoHealing!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly availabilityZones!: pulumi.Output<string[] | undefined>;
    public readonly backendServices!: pulumi.Output<outputs.ElastigroupGcpBackendService[] | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly desiredCapacity!: pulumi.Output<number>;
    public readonly disks!: pulumi.Output<outputs.ElastigroupGcpDisk[] | undefined>;
    public readonly drainingTimeout!: pulumi.Output<number | undefined>;
    public readonly fallbackToOndemand!: pulumi.Output<boolean | undefined>;
    public readonly gpus!: pulumi.Output<outputs.ElastigroupGcpGpus[] | undefined>;
    public readonly healthCheckGracePeriod!: pulumi.Output<number | undefined>;
    public readonly healthCheckType!: pulumi.Output<string | undefined>;
    public readonly instanceNamePrefix!: pulumi.Output<string | undefined>;
    public readonly instanceTypesCustoms!: pulumi.Output<outputs.ElastigroupGcpInstanceTypesCustom[] | undefined>;
    public readonly instanceTypesOndemand!: pulumi.Output<string | undefined>;
    public readonly instanceTypesPreemptibles!: pulumi.Output<string[] | undefined>;
    public readonly integrationDockerSwarm!: pulumi.Output<outputs.ElastigroupGcpIntegrationDockerSwarm | undefined>;
    public readonly integrationGke!: pulumi.Output<outputs.ElastigroupGcpIntegrationGke | undefined>;
    public readonly ipForwarding!: pulumi.Output<boolean | undefined>;
    public readonly labels!: pulumi.Output<outputs.ElastigroupGcpLabel[] | undefined>;
    public readonly maxSize!: pulumi.Output<number>;
    public readonly metadatas!: pulumi.Output<outputs.ElastigroupGcpMetadata[] | undefined>;
    public readonly minSize!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkInterfaces!: pulumi.Output<outputs.ElastigroupGcpNetworkInterface[] | undefined>;
    public readonly ondemandCount!: pulumi.Output<number | undefined>;
    public readonly optimizationWindows!: pulumi.Output<string[] | undefined>;
    public readonly preemptiblePercentage!: pulumi.Output<number | undefined>;
    public readonly provisioningModel!: pulumi.Output<string | undefined>;
    public readonly revertToPreemptibles!: pulumi.Output<outputs.ElastigroupGcpRevertToPreemptible[] | undefined>;
    public readonly scalingDownPolicies!: pulumi.Output<outputs.ElastigroupGcpScalingDownPolicy[] | undefined>;
    public readonly scalingUpPolicies!: pulumi.Output<outputs.ElastigroupGcpScalingUpPolicy[] | undefined>;
    public readonly scheduledTasks!: pulumi.Output<outputs.ElastigroupGcpScheduledTask[] | undefined>;
    public readonly serviceAccount!: pulumi.Output<string | undefined>;
    public readonly shutdownScript!: pulumi.Output<string | undefined>;
    public readonly startupScript!: pulumi.Output<string | undefined>;
    public readonly subnets!: pulumi.Output<outputs.ElastigroupGcpSubnet[] | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly unhealthyDuration!: pulumi.Output<number | undefined>;

    /**
     * Create a ElastigroupGcp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ElastigroupGcpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ElastigroupGcpArgs | ElastigroupGcpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ElastigroupGcpState | undefined;
            resourceInputs["autoHealing"] = state ? state.autoHealing : undefined;
            resourceInputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            resourceInputs["backendServices"] = state ? state.backendServices : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["desiredCapacity"] = state ? state.desiredCapacity : undefined;
            resourceInputs["disks"] = state ? state.disks : undefined;
            resourceInputs["drainingTimeout"] = state ? state.drainingTimeout : undefined;
            resourceInputs["fallbackToOndemand"] = state ? state.fallbackToOndemand : undefined;
            resourceInputs["gpus"] = state ? state.gpus : undefined;
            resourceInputs["healthCheckGracePeriod"] = state ? state.healthCheckGracePeriod : undefined;
            resourceInputs["healthCheckType"] = state ? state.healthCheckType : undefined;
            resourceInputs["instanceNamePrefix"] = state ? state.instanceNamePrefix : undefined;
            resourceInputs["instanceTypesCustoms"] = state ? state.instanceTypesCustoms : undefined;
            resourceInputs["instanceTypesOndemand"] = state ? state.instanceTypesOndemand : undefined;
            resourceInputs["instanceTypesPreemptibles"] = state ? state.instanceTypesPreemptibles : undefined;
            resourceInputs["integrationDockerSwarm"] = state ? state.integrationDockerSwarm : undefined;
            resourceInputs["integrationGke"] = state ? state.integrationGke : undefined;
            resourceInputs["ipForwarding"] = state ? state.ipForwarding : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["maxSize"] = state ? state.maxSize : undefined;
            resourceInputs["metadatas"] = state ? state.metadatas : undefined;
            resourceInputs["minSize"] = state ? state.minSize : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkInterfaces"] = state ? state.networkInterfaces : undefined;
            resourceInputs["ondemandCount"] = state ? state.ondemandCount : undefined;
            resourceInputs["optimizationWindows"] = state ? state.optimizationWindows : undefined;
            resourceInputs["preemptiblePercentage"] = state ? state.preemptiblePercentage : undefined;
            resourceInputs["provisioningModel"] = state ? state.provisioningModel : undefined;
            resourceInputs["revertToPreemptibles"] = state ? state.revertToPreemptibles : undefined;
            resourceInputs["scalingDownPolicies"] = state ? state.scalingDownPolicies : undefined;
            resourceInputs["scalingUpPolicies"] = state ? state.scalingUpPolicies : undefined;
            resourceInputs["scheduledTasks"] = state ? state.scheduledTasks : undefined;
            resourceInputs["serviceAccount"] = state ? state.serviceAccount : undefined;
            resourceInputs["shutdownScript"] = state ? state.shutdownScript : undefined;
            resourceInputs["startupScript"] = state ? state.startupScript : undefined;
            resourceInputs["subnets"] = state ? state.subnets : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["unhealthyDuration"] = state ? state.unhealthyDuration : undefined;
        } else {
            const args = argsOrState as ElastigroupGcpArgs | undefined;
            if ((!args || args.desiredCapacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'desiredCapacity'");
            }
            resourceInputs["autoHealing"] = args ? args.autoHealing : undefined;
            resourceInputs["availabilityZones"] = args ? args.availabilityZones : undefined;
            resourceInputs["backendServices"] = args ? args.backendServices : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["desiredCapacity"] = args ? args.desiredCapacity : undefined;
            resourceInputs["disks"] = args ? args.disks : undefined;
            resourceInputs["drainingTimeout"] = args ? args.drainingTimeout : undefined;
            resourceInputs["fallbackToOndemand"] = args ? args.fallbackToOndemand : undefined;
            resourceInputs["gpus"] = args ? args.gpus : undefined;
            resourceInputs["healthCheckGracePeriod"] = args ? args.healthCheckGracePeriod : undefined;
            resourceInputs["healthCheckType"] = args ? args.healthCheckType : undefined;
            resourceInputs["instanceNamePrefix"] = args ? args.instanceNamePrefix : undefined;
            resourceInputs["instanceTypesCustoms"] = args ? args.instanceTypesCustoms : undefined;
            resourceInputs["instanceTypesOndemand"] = args ? args.instanceTypesOndemand : undefined;
            resourceInputs["instanceTypesPreemptibles"] = args ? args.instanceTypesPreemptibles : undefined;
            resourceInputs["integrationDockerSwarm"] = args ? args.integrationDockerSwarm : undefined;
            resourceInputs["integrationGke"] = args ? args.integrationGke : undefined;
            resourceInputs["ipForwarding"] = args ? args.ipForwarding : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["maxSize"] = args ? args.maxSize : undefined;
            resourceInputs["metadatas"] = args ? args.metadatas : undefined;
            resourceInputs["minSize"] = args ? args.minSize : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkInterfaces"] = args ? args.networkInterfaces : undefined;
            resourceInputs["ondemandCount"] = args ? args.ondemandCount : undefined;
            resourceInputs["optimizationWindows"] = args ? args.optimizationWindows : undefined;
            resourceInputs["preemptiblePercentage"] = args ? args.preemptiblePercentage : undefined;
            resourceInputs["provisioningModel"] = args ? args.provisioningModel : undefined;
            resourceInputs["revertToPreemptibles"] = args ? args.revertToPreemptibles : undefined;
            resourceInputs["scalingDownPolicies"] = args ? args.scalingDownPolicies : undefined;
            resourceInputs["scalingUpPolicies"] = args ? args.scalingUpPolicies : undefined;
            resourceInputs["scheduledTasks"] = args ? args.scheduledTasks : undefined;
            resourceInputs["serviceAccount"] = args ? args.serviceAccount : undefined;
            resourceInputs["shutdownScript"] = args ? args.shutdownScript : undefined;
            resourceInputs["startupScript"] = args ? args.startupScript : undefined;
            resourceInputs["subnets"] = args ? args.subnets : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["unhealthyDuration"] = args ? args.unhealthyDuration : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ElastigroupGcp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ElastigroupGcp resources.
 */
export interface ElastigroupGcpState {
    autoHealing?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    backendServices?: pulumi.Input<pulumi.Input<inputs.ElastigroupGcpBackendService>[]>;
    description?: pulumi.Input<string>;
    desiredCapacity?: pulumi.Input<number>;
    disks?: pulumi.Input<pulumi.Input<inputs.ElastigroupGcpDisk>[]>;
    drainingTimeout?: pulumi.Input<number>;
    fallbackToOndemand?: pulumi.Input<boolean>;
    gpus?: pulumi.Input<pulumi.Input<inputs.ElastigroupGcpGpus>[]>;
    healthCheckGracePeriod?: pulumi.Input<number>;
    healthCheckType?: pulumi.Input<string>;
    instanceNamePrefix?: pulumi.Input<string>;
    instanceTypesCustoms?: pulumi.Input<pulumi.Input<inputs.ElastigroupGcpInstanceTypesCustom>[]>;
    instanceTypesOndemand?: pulumi.Input<string>;
    instanceTypesPreemptibles?: pulumi.Input<pulumi.Input<string>[]>;
    integrationDockerSwarm?: pulumi.Input<inputs.ElastigroupGcpIntegrationDockerSwarm>;
    integrationGke?: pulumi.Input<inputs.ElastigroupGcpIntegrationGke>;
    ipForwarding?: pulumi.Input<boolean>;
    labels?: pulumi.Input<pulumi.Input<inputs.ElastigroupGcpLabel>[]>;
    maxSize?: pulumi.Input<number>;
    metadatas?: pulumi.Input<pulumi.Input<inputs.ElastigroupGcpMetadata>[]>;
    minSize?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.ElastigroupGcpNetworkInterface>[]>;
    ondemandCount?: pulumi.Input<number>;
    optimizationWindows?: pulumi.Input<pulumi.Input<string>[]>;
    preemptiblePercentage?: pulumi.Input<number>;
    provisioningModel?: pulumi.Input<string>;
    revertToPreemptibles?: pulumi.Input<pulumi.Input<inputs.ElastigroupGcpRevertToPreemptible>[]>;
    scalingDownPolicies?: pulumi.Input<pulumi.Input<inputs.ElastigroupGcpScalingDownPolicy>[]>;
    scalingUpPolicies?: pulumi.Input<pulumi.Input<inputs.ElastigroupGcpScalingUpPolicy>[]>;
    scheduledTasks?: pulumi.Input<pulumi.Input<inputs.ElastigroupGcpScheduledTask>[]>;
    serviceAccount?: pulumi.Input<string>;
    shutdownScript?: pulumi.Input<string>;
    startupScript?: pulumi.Input<string>;
    subnets?: pulumi.Input<pulumi.Input<inputs.ElastigroupGcpSubnet>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    unhealthyDuration?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ElastigroupGcp resource.
 */
export interface ElastigroupGcpArgs {
    autoHealing?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    backendServices?: pulumi.Input<pulumi.Input<inputs.ElastigroupGcpBackendService>[]>;
    description?: pulumi.Input<string>;
    desiredCapacity: pulumi.Input<number>;
    disks?: pulumi.Input<pulumi.Input<inputs.ElastigroupGcpDisk>[]>;
    drainingTimeout?: pulumi.Input<number>;
    fallbackToOndemand?: pulumi.Input<boolean>;
    gpus?: pulumi.Input<pulumi.Input<inputs.ElastigroupGcpGpus>[]>;
    healthCheckGracePeriod?: pulumi.Input<number>;
    healthCheckType?: pulumi.Input<string>;
    instanceNamePrefix?: pulumi.Input<string>;
    instanceTypesCustoms?: pulumi.Input<pulumi.Input<inputs.ElastigroupGcpInstanceTypesCustom>[]>;
    instanceTypesOndemand?: pulumi.Input<string>;
    instanceTypesPreemptibles?: pulumi.Input<pulumi.Input<string>[]>;
    integrationDockerSwarm?: pulumi.Input<inputs.ElastigroupGcpIntegrationDockerSwarm>;
    integrationGke?: pulumi.Input<inputs.ElastigroupGcpIntegrationGke>;
    ipForwarding?: pulumi.Input<boolean>;
    labels?: pulumi.Input<pulumi.Input<inputs.ElastigroupGcpLabel>[]>;
    maxSize?: pulumi.Input<number>;
    metadatas?: pulumi.Input<pulumi.Input<inputs.ElastigroupGcpMetadata>[]>;
    minSize?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.ElastigroupGcpNetworkInterface>[]>;
    ondemandCount?: pulumi.Input<number>;
    optimizationWindows?: pulumi.Input<pulumi.Input<string>[]>;
    preemptiblePercentage?: pulumi.Input<number>;
    provisioningModel?: pulumi.Input<string>;
    revertToPreemptibles?: pulumi.Input<pulumi.Input<inputs.ElastigroupGcpRevertToPreemptible>[]>;
    scalingDownPolicies?: pulumi.Input<pulumi.Input<inputs.ElastigroupGcpScalingDownPolicy>[]>;
    scalingUpPolicies?: pulumi.Input<pulumi.Input<inputs.ElastigroupGcpScalingUpPolicy>[]>;
    scheduledTasks?: pulumi.Input<pulumi.Input<inputs.ElastigroupGcpScheduledTask>[]>;
    serviceAccount?: pulumi.Input<string>;
    shutdownScript?: pulumi.Input<string>;
    startupScript?: pulumi.Input<string>;
    subnets?: pulumi.Input<pulumi.Input<inputs.ElastigroupGcpSubnet>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    unhealthyDuration?: pulumi.Input<number>;
}
