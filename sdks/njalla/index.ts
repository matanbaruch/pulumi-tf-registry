// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RecordAArgs, RecordAState } from "./recordA";
export type RecordA = import("./recordA").RecordA;
export const RecordA: typeof import("./recordA").RecordA = null as any;
utilities.lazyLoad(exports, ["RecordA"], () => require("./recordA"));

export { RecordAaaaArgs, RecordAaaaState } from "./recordAaaa";
export type RecordAaaa = import("./recordAaaa").RecordAaaa;
export const RecordAaaa: typeof import("./recordAaaa").RecordAaaa = null as any;
utilities.lazyLoad(exports, ["RecordAaaa"], () => require("./recordAaaa"));

export { RecordCaaArgs, RecordCaaState } from "./recordCaa";
export type RecordCaa = import("./recordCaa").RecordCaa;
export const RecordCaa: typeof import("./recordCaa").RecordCaa = null as any;
utilities.lazyLoad(exports, ["RecordCaa"], () => require("./recordCaa"));

export { RecordCnameArgs, RecordCnameState } from "./recordCname";
export type RecordCname = import("./recordCname").RecordCname;
export const RecordCname: typeof import("./recordCname").RecordCname = null as any;
utilities.lazyLoad(exports, ["RecordCname"], () => require("./recordCname"));

export { RecordMxArgs, RecordMxState } from "./recordMx";
export type RecordMx = import("./recordMx").RecordMx;
export const RecordMx: typeof import("./recordMx").RecordMx = null as any;
utilities.lazyLoad(exports, ["RecordMx"], () => require("./recordMx"));

export { RecordNaptrArgs, RecordNaptrState } from "./recordNaptr";
export type RecordNaptr = import("./recordNaptr").RecordNaptr;
export const RecordNaptr: typeof import("./recordNaptr").RecordNaptr = null as any;
utilities.lazyLoad(exports, ["RecordNaptr"], () => require("./recordNaptr"));

export { RecordNsArgs, RecordNsState } from "./recordNs";
export type RecordNs = import("./recordNs").RecordNs;
export const RecordNs: typeof import("./recordNs").RecordNs = null as any;
utilities.lazyLoad(exports, ["RecordNs"], () => require("./recordNs"));

export { RecordPtrArgs, RecordPtrState } from "./recordPtr";
export type RecordPtr = import("./recordPtr").RecordPtr;
export const RecordPtr: typeof import("./recordPtr").RecordPtr = null as any;
utilities.lazyLoad(exports, ["RecordPtr"], () => require("./recordPtr"));

export { RecordTlsaArgs, RecordTlsaState } from "./recordTlsa";
export type RecordTlsa = import("./recordTlsa").RecordTlsa;
export const RecordTlsa: typeof import("./recordTlsa").RecordTlsa = null as any;
utilities.lazyLoad(exports, ["RecordTlsa"], () => require("./recordTlsa"));

export { RecordTxtArgs, RecordTxtState } from "./recordTxt";
export type RecordTxt = import("./recordTxt").RecordTxt;
export const RecordTxt: typeof import("./recordTxt").RecordTxt = null as any;
utilities.lazyLoad(exports, ["RecordTxt"], () => require("./recordTxt"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "njalla:index/recordA:RecordA":
                return new RecordA(name, <any>undefined, { urn })
            case "njalla:index/recordAaaa:RecordAaaa":
                return new RecordAaaa(name, <any>undefined, { urn })
            case "njalla:index/recordCaa:RecordCaa":
                return new RecordCaa(name, <any>undefined, { urn })
            case "njalla:index/recordCname:RecordCname":
                return new RecordCname(name, <any>undefined, { urn })
            case "njalla:index/recordMx:RecordMx":
                return new RecordMx(name, <any>undefined, { urn })
            case "njalla:index/recordNaptr:RecordNaptr":
                return new RecordNaptr(name, <any>undefined, { urn })
            case "njalla:index/recordNs:RecordNs":
                return new RecordNs(name, <any>undefined, { urn })
            case "njalla:index/recordPtr:RecordPtr":
                return new RecordPtr(name, <any>undefined, { urn })
            case "njalla:index/recordTlsa:RecordTlsa":
                return new RecordTlsa(name, <any>undefined, { urn })
            case "njalla:index/recordTxt:RecordTxt":
                return new RecordTxt(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("njalla", "index/recordA", _module)
pulumi.runtime.registerResourceModule("njalla", "index/recordAaaa", _module)
pulumi.runtime.registerResourceModule("njalla", "index/recordCaa", _module)
pulumi.runtime.registerResourceModule("njalla", "index/recordCname", _module)
pulumi.runtime.registerResourceModule("njalla", "index/recordMx", _module)
pulumi.runtime.registerResourceModule("njalla", "index/recordNaptr", _module)
pulumi.runtime.registerResourceModule("njalla", "index/recordNs", _module)
pulumi.runtime.registerResourceModule("njalla", "index/recordPtr", _module)
pulumi.runtime.registerResourceModule("njalla", "index/recordTlsa", _module)
pulumi.runtime.registerResourceModule("njalla", "index/recordTxt", _module)
pulumi.runtime.registerResourcePackage("njalla", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:njalla") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
