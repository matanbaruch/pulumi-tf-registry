// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CaArgs, CaState } from "./ca";
export type Ca = import("./ca").Ca;
export const Ca: typeof import("./ca").Ca = null as any;
utilities.lazyLoad(exports, ["Ca"], () => require("./ca"));

export { EcdsaCaArgs, EcdsaCaState } from "./ecdsaCa";
export type EcdsaCa = import("./ecdsaCa").EcdsaCa;
export const EcdsaCa: typeof import("./ecdsaCa").EcdsaCa = null as any;
utilities.lazyLoad(exports, ["EcdsaCa"], () => require("./ecdsaCa"));

export { GetKmsPublicKeyArgs, GetKmsPublicKeyResult, GetKmsPublicKeyOutputArgs } from "./getKmsPublicKey";
export const getKmsPublicKey: typeof import("./getKmsPublicKey").getKmsPublicKey = null as any;
export const getKmsPublicKeyOutput: typeof import("./getKmsPublicKey").getKmsPublicKeyOutput = null as any;
utilities.lazyLoad(exports, ["getKmsPublicKey","getKmsPublicKeyOutput"], () => require("./getKmsPublicKey"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "bless:index/ca:Ca":
                return new Ca(name, <any>undefined, { urn })
            case "bless:index/ecdsaCa:EcdsaCa":
                return new EcdsaCa(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("bless", "index/ca", _module)
pulumi.runtime.registerResourceModule("bless", "index/ecdsaCa", _module)
pulumi.runtime.registerResourcePackage("bless", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:bless") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
