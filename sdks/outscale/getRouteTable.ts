// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRouteTable(args?: GetRouteTableArgs, opts?: pulumi.InvokeOptions): Promise<GetRouteTableResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("outscale:index/getRouteTable:getRouteTable", {
        "filters": args.filters,
        "id": args.id,
        "routeTableId": args.routeTableId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRouteTable.
 */
export interface GetRouteTableArgs {
    filters?: inputs.GetRouteTableFilter[];
    id?: string;
    routeTableId?: string;
}

/**
 * A collection of values returned by getRouteTable.
 */
export interface GetRouteTableResult {
    readonly filters?: outputs.GetRouteTableFilter[];
    readonly id: string;
    readonly linkRouteTables: outputs.GetRouteTableLinkRouteTable[];
    readonly netId: string;
    readonly requestId: string;
    readonly routePropagatingVirtualGateways: outputs.GetRouteTableRoutePropagatingVirtualGateway[];
    readonly routeTableId: string;
    readonly routes: outputs.GetRouteTableRoute[];
    readonly tags: outputs.GetRouteTableTag[];
}
export function getRouteTableOutput(args?: GetRouteTableOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRouteTableResult> {
    return pulumi.output(args).apply((a: any) => getRouteTable(a, opts))
}

/**
 * A collection of arguments for invoking getRouteTable.
 */
export interface GetRouteTableOutputArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.GetRouteTableFilterArgs>[]>;
    id?: pulumi.Input<string>;
    routeTableId?: pulumi.Input<string>;
}
