// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLoadBalancer(args?: GetLoadBalancerArgs, opts?: pulumi.InvokeOptions): Promise<GetLoadBalancerResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("outscale:index/getLoadBalancer:getLoadBalancer", {
        "accessLog": args.accessLog,
        "backendVmIds": args.backendVmIds,
        "dnsName": args.dnsName,
        "filters": args.filters,
        "healthCheck": args.healthCheck,
        "id": args.id,
        "listeners": args.listeners,
        "loadBalancerName": args.loadBalancerName,
        "loadBalancerType": args.loadBalancerType,
        "netId": args.netId,
        "securityGroups": args.securityGroups,
        "subnets": args.subnets,
        "tags": args.tags,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLoadBalancer.
 */
export interface GetLoadBalancerArgs {
    accessLog?: {[key: string]: string};
    backendVmIds?: string[];
    dnsName?: string;
    filters?: inputs.GetLoadBalancerFilter[];
    healthCheck?: {[key: string]: string};
    id?: string;
    listeners?: inputs.GetLoadBalancerListener[];
    loadBalancerName?: string;
    loadBalancerType?: string;
    netId?: string;
    securityGroups?: string[];
    subnets?: string[];
    tags?: inputs.GetLoadBalancerTag[];
}

/**
 * A collection of values returned by getLoadBalancer.
 */
export interface GetLoadBalancerResult {
    readonly accessLog: {[key: string]: string};
    readonly applicationStickyCookiePolicies: outputs.GetLoadBalancerApplicationStickyCookiePolicy[];
    readonly backendVmIds: string[];
    readonly dnsName: string;
    readonly filters?: outputs.GetLoadBalancerFilter[];
    readonly healthCheck: {[key: string]: string};
    readonly id: string;
    readonly listeners?: outputs.GetLoadBalancerListener[];
    readonly loadBalancerName: string;
    readonly loadBalancerStickyCookiePolicies: outputs.GetLoadBalancerLoadBalancerStickyCookiePolicy[];
    readonly loadBalancerType: string;
    readonly netId: string;
    readonly publicIp: string;
    readonly requestId: string;
    readonly securedCookies: boolean;
    readonly securityGroups: string[];
    readonly sourceSecurityGroup: {[key: string]: string};
    readonly subnets: string[];
    readonly subregionNames: string[];
    readonly tags?: outputs.GetLoadBalancerTag[];
}
export function getLoadBalancerOutput(args?: GetLoadBalancerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLoadBalancerResult> {
    return pulumi.output(args).apply((a: any) => getLoadBalancer(a, opts))
}

/**
 * A collection of arguments for invoking getLoadBalancer.
 */
export interface GetLoadBalancerOutputArgs {
    accessLog?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    backendVmIds?: pulumi.Input<pulumi.Input<string>[]>;
    dnsName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetLoadBalancerFilterArgs>[]>;
    healthCheck?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    id?: pulumi.Input<string>;
    listeners?: pulumi.Input<pulumi.Input<inputs.GetLoadBalancerListenerArgs>[]>;
    loadBalancerName?: pulumi.Input<string>;
    loadBalancerType?: pulumi.Input<string>;
    netId?: pulumi.Input<string>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetLoadBalancerTagArgs>[]>;
}
