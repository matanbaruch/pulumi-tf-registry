// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetPeeringAcceptation extends pulumi.CustomResource {
    /**
     * Get an existing NetPeeringAcceptation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetPeeringAcceptationState, opts?: pulumi.CustomResourceOptions): NetPeeringAcceptation {
        return new NetPeeringAcceptation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'outscale:index/netPeeringAcceptation:NetPeeringAcceptation';

    /**
     * Returns true if the given object is an instance of NetPeeringAcceptation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetPeeringAcceptation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetPeeringAcceptation.__pulumiType;
    }

    public /*out*/ readonly accepterNet!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly accepterNetId!: pulumi.Output<string>;
    public readonly netPeeringId!: pulumi.Output<string>;
    public /*out*/ readonly requestId!: pulumi.Output<string>;
    public /*out*/ readonly sourceNet!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly sourceNetId!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly tags!: pulumi.Output<outputs.NetPeeringAcceptationTag[]>;

    /**
     * Create a NetPeeringAcceptation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetPeeringAcceptationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetPeeringAcceptationArgs | NetPeeringAcceptationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetPeeringAcceptationState | undefined;
            resourceInputs["accepterNet"] = state ? state.accepterNet : undefined;
            resourceInputs["accepterNetId"] = state ? state.accepterNetId : undefined;
            resourceInputs["netPeeringId"] = state ? state.netPeeringId : undefined;
            resourceInputs["requestId"] = state ? state.requestId : undefined;
            resourceInputs["sourceNet"] = state ? state.sourceNet : undefined;
            resourceInputs["sourceNetId"] = state ? state.sourceNetId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as NetPeeringAcceptationArgs | undefined;
            if ((!args || args.netPeeringId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'netPeeringId'");
            }
            resourceInputs["netPeeringId"] = args ? args.netPeeringId : undefined;
            resourceInputs["accepterNet"] = undefined /*out*/;
            resourceInputs["accepterNetId"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
            resourceInputs["sourceNet"] = undefined /*out*/;
            resourceInputs["sourceNetId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetPeeringAcceptation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetPeeringAcceptation resources.
 */
export interface NetPeeringAcceptationState {
    accepterNet?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    accepterNetId?: pulumi.Input<string>;
    netPeeringId?: pulumi.Input<string>;
    requestId?: pulumi.Input<string>;
    sourceNet?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sourceNetId?: pulumi.Input<string>;
    state?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tags?: pulumi.Input<pulumi.Input<inputs.NetPeeringAcceptationTag>[]>;
}

/**
 * The set of arguments for constructing a NetPeeringAcceptation resource.
 */
export interface NetPeeringAcceptationArgs {
    netPeeringId: pulumi.Input<string>;
}
