// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getApiAccessPolicy(args?: GetApiAccessPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetApiAccessPolicyResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("outscale:index/getApiAccessPolicy:getApiAccessPolicy", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getApiAccessPolicy.
 */
export interface GetApiAccessPolicyArgs {
    id?: string;
}

/**
 * A collection of values returned by getApiAccessPolicy.
 */
export interface GetApiAccessPolicyResult {
    readonly id: string;
    readonly maxAccessKeyExpirationSeconds: number;
    readonly requestId: string;
    readonly requireTrustedEnv: boolean;
}
export function getApiAccessPolicyOutput(args?: GetApiAccessPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetApiAccessPolicyResult> {
    return pulumi.output(args).apply((a: any) => getApiAccessPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getApiAccessPolicy.
 */
export interface GetApiAccessPolicyOutputArgs {
    id?: pulumi.Input<string>;
}
