// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ClusterSettingsArgs, ClusterSettingsState } from "./clusterSettings";
export type ClusterSettings = import("./clusterSettings").ClusterSettings;
export const ClusterSettings: typeof import("./clusterSettings").ClusterSettings = null as any;
utilities.lazyLoad(exports, ["ClusterSettings"], () => require("./clusterSettings"));

export { ComponentTemplateArgs, ComponentTemplateState } from "./componentTemplate";
export type ComponentTemplate = import("./componentTemplate").ComponentTemplate;
export const ComponentTemplate: typeof import("./componentTemplate").ComponentTemplate = null as any;
utilities.lazyLoad(exports, ["ComponentTemplate"], () => require("./componentTemplate"));

export { ComposableIndexTemplateArgs, ComposableIndexTemplateState } from "./composableIndexTemplate";
export type ComposableIndexTemplate = import("./composableIndexTemplate").ComposableIndexTemplate;
export const ComposableIndexTemplate: typeof import("./composableIndexTemplate").ComposableIndexTemplate = null as any;
utilities.lazyLoad(exports, ["ComposableIndexTemplate"], () => require("./composableIndexTemplate"));

export { DataStreamArgs, DataStreamState } from "./dataStream";
export type DataStream = import("./dataStream").DataStream;
export const DataStream: typeof import("./dataStream").DataStream = null as any;
utilities.lazyLoad(exports, ["DataStream"], () => require("./dataStream"));

export { GetHostArgs, GetHostResult, GetHostOutputArgs } from "./getHost";
export const getHost: typeof import("./getHost").getHost = null as any;
export const getHostOutput: typeof import("./getHost").getHostOutput = null as any;
utilities.lazyLoad(exports, ["getHost","getHostOutput"], () => require("./getHost"));

export { GetOpendistroDestinationArgs, GetOpendistroDestinationResult, GetOpendistroDestinationOutputArgs } from "./getOpendistroDestination";
export const getOpendistroDestination: typeof import("./getOpendistroDestination").getOpendistroDestination = null as any;
export const getOpendistroDestinationOutput: typeof import("./getOpendistroDestination").getOpendistroDestinationOutput = null as any;
utilities.lazyLoad(exports, ["getOpendistroDestination","getOpendistroDestinationOutput"], () => require("./getOpendistroDestination"));

export { GetOpensearchDestinationArgs, GetOpensearchDestinationResult, GetOpensearchDestinationOutputArgs } from "./getOpensearchDestination";
export const getOpensearchDestination: typeof import("./getOpensearchDestination").getOpensearchDestination = null as any;
export const getOpensearchDestinationOutput: typeof import("./getOpensearchDestination").getOpensearchDestinationOutput = null as any;
utilities.lazyLoad(exports, ["getOpensearchDestination","getOpensearchDestinationOutput"], () => require("./getOpensearchDestination"));

export { IndexTemplateArgs, IndexTemplateState } from "./indexTemplate";
export type IndexTemplate = import("./indexTemplate").IndexTemplate;
export const IndexTemplate: typeof import("./indexTemplate").IndexTemplate = null as any;
utilities.lazyLoad(exports, ["IndexTemplate"], () => require("./indexTemplate"));

export { IndexArgs, IndexState } from "./index_";
export type Index = import("./index_").Index;
export const Index: typeof import("./index_").Index = null as any;
utilities.lazyLoad(exports, ["Index"], () => require("./index_"));

export { IngestPipelineArgs, IngestPipelineState } from "./ingestPipeline";
export type IngestPipeline = import("./ingestPipeline").IngestPipeline;
export const IngestPipeline: typeof import("./ingestPipeline").IngestPipeline = null as any;
utilities.lazyLoad(exports, ["IngestPipeline"], () => require("./ingestPipeline"));

export { KibanaAlertArgs, KibanaAlertState } from "./kibanaAlert";
export type KibanaAlert = import("./kibanaAlert").KibanaAlert;
export const KibanaAlert: typeof import("./kibanaAlert").KibanaAlert = null as any;
utilities.lazyLoad(exports, ["KibanaAlert"], () => require("./kibanaAlert"));

export { KibanaObjectArgs, KibanaObjectState } from "./kibanaObject";
export type KibanaObject = import("./kibanaObject").KibanaObject;
export const KibanaObject: typeof import("./kibanaObject").KibanaObject = null as any;
utilities.lazyLoad(exports, ["KibanaObject"], () => require("./kibanaObject"));

export { OpendistroDestinationArgs, OpendistroDestinationState } from "./opendistroDestination";
export type OpendistroDestination = import("./opendistroDestination").OpendistroDestination;
export const OpendistroDestination: typeof import("./opendistroDestination").OpendistroDestination = null as any;
utilities.lazyLoad(exports, ["OpendistroDestination"], () => require("./opendistroDestination"));

export { OpendistroIsmPolicyArgs, OpendistroIsmPolicyState } from "./opendistroIsmPolicy";
export type OpendistroIsmPolicy = import("./opendistroIsmPolicy").OpendistroIsmPolicy;
export const OpendistroIsmPolicy: typeof import("./opendistroIsmPolicy").OpendistroIsmPolicy = null as any;
utilities.lazyLoad(exports, ["OpendistroIsmPolicy"], () => require("./opendistroIsmPolicy"));

export { OpendistroIsmPolicyMappingArgs, OpendistroIsmPolicyMappingState } from "./opendistroIsmPolicyMapping";
export type OpendistroIsmPolicyMapping = import("./opendistroIsmPolicyMapping").OpendistroIsmPolicyMapping;
export const OpendistroIsmPolicyMapping: typeof import("./opendistroIsmPolicyMapping").OpendistroIsmPolicyMapping = null as any;
utilities.lazyLoad(exports, ["OpendistroIsmPolicyMapping"], () => require("./opendistroIsmPolicyMapping"));

export { OpendistroKibanaTenantArgs, OpendistroKibanaTenantState } from "./opendistroKibanaTenant";
export type OpendistroKibanaTenant = import("./opendistroKibanaTenant").OpendistroKibanaTenant;
export const OpendistroKibanaTenant: typeof import("./opendistroKibanaTenant").OpendistroKibanaTenant = null as any;
utilities.lazyLoad(exports, ["OpendistroKibanaTenant"], () => require("./opendistroKibanaTenant"));

export { OpendistroMonitorArgs, OpendistroMonitorState } from "./opendistroMonitor";
export type OpendistroMonitor = import("./opendistroMonitor").OpendistroMonitor;
export const OpendistroMonitor: typeof import("./opendistroMonitor").OpendistroMonitor = null as any;
utilities.lazyLoad(exports, ["OpendistroMonitor"], () => require("./opendistroMonitor"));

export { OpendistroRoleArgs, OpendistroRoleState } from "./opendistroRole";
export type OpendistroRole = import("./opendistroRole").OpendistroRole;
export const OpendistroRole: typeof import("./opendistroRole").OpendistroRole = null as any;
utilities.lazyLoad(exports, ["OpendistroRole"], () => require("./opendistroRole"));

export { OpendistroRolesMappingArgs, OpendistroRolesMappingState } from "./opendistroRolesMapping";
export type OpendistroRolesMapping = import("./opendistroRolesMapping").OpendistroRolesMapping;
export const OpendistroRolesMapping: typeof import("./opendistroRolesMapping").OpendistroRolesMapping = null as any;
utilities.lazyLoad(exports, ["OpendistroRolesMapping"], () => require("./opendistroRolesMapping"));

export { OpendistroUserArgs, OpendistroUserState } from "./opendistroUser";
export type OpendistroUser = import("./opendistroUser").OpendistroUser;
export const OpendistroUser: typeof import("./opendistroUser").OpendistroUser = null as any;
utilities.lazyLoad(exports, ["OpendistroUser"], () => require("./opendistroUser"));

export { OpensearchAuditConfigArgs, OpensearchAuditConfigState } from "./opensearchAuditConfig";
export type OpensearchAuditConfig = import("./opensearchAuditConfig").OpensearchAuditConfig;
export const OpensearchAuditConfig: typeof import("./opensearchAuditConfig").OpensearchAuditConfig = null as any;
utilities.lazyLoad(exports, ["OpensearchAuditConfig"], () => require("./opensearchAuditConfig"));

export { OpensearchDestinationArgs, OpensearchDestinationState } from "./opensearchDestination";
export type OpensearchDestination = import("./opensearchDestination").OpensearchDestination;
export const OpensearchDestination: typeof import("./opensearchDestination").OpensearchDestination = null as any;
utilities.lazyLoad(exports, ["OpensearchDestination"], () => require("./opensearchDestination"));

export { OpensearchIsmPolicyArgs, OpensearchIsmPolicyState } from "./opensearchIsmPolicy";
export type OpensearchIsmPolicy = import("./opensearchIsmPolicy").OpensearchIsmPolicy;
export const OpensearchIsmPolicy: typeof import("./opensearchIsmPolicy").OpensearchIsmPolicy = null as any;
utilities.lazyLoad(exports, ["OpensearchIsmPolicy"], () => require("./opensearchIsmPolicy"));

export { OpensearchIsmPolicyMappingArgs, OpensearchIsmPolicyMappingState } from "./opensearchIsmPolicyMapping";
export type OpensearchIsmPolicyMapping = import("./opensearchIsmPolicyMapping").OpensearchIsmPolicyMapping;
export const OpensearchIsmPolicyMapping: typeof import("./opensearchIsmPolicyMapping").OpensearchIsmPolicyMapping = null as any;
utilities.lazyLoad(exports, ["OpensearchIsmPolicyMapping"], () => require("./opensearchIsmPolicyMapping"));

export { OpensearchKibanaTenantArgs, OpensearchKibanaTenantState } from "./opensearchKibanaTenant";
export type OpensearchKibanaTenant = import("./opensearchKibanaTenant").OpensearchKibanaTenant;
export const OpensearchKibanaTenant: typeof import("./opensearchKibanaTenant").OpensearchKibanaTenant = null as any;
utilities.lazyLoad(exports, ["OpensearchKibanaTenant"], () => require("./opensearchKibanaTenant"));

export { OpensearchMonitorArgs, OpensearchMonitorState } from "./opensearchMonitor";
export type OpensearchMonitor = import("./opensearchMonitor").OpensearchMonitor;
export const OpensearchMonitor: typeof import("./opensearchMonitor").OpensearchMonitor = null as any;
utilities.lazyLoad(exports, ["OpensearchMonitor"], () => require("./opensearchMonitor"));

export { OpensearchRoleArgs, OpensearchRoleState } from "./opensearchRole";
export type OpensearchRole = import("./opensearchRole").OpensearchRole;
export const OpensearchRole: typeof import("./opensearchRole").OpensearchRole = null as any;
utilities.lazyLoad(exports, ["OpensearchRole"], () => require("./opensearchRole"));

export { OpensearchRolesMappingArgs, OpensearchRolesMappingState } from "./opensearchRolesMapping";
export type OpensearchRolesMapping = import("./opensearchRolesMapping").OpensearchRolesMapping;
export const OpensearchRolesMapping: typeof import("./opensearchRolesMapping").OpensearchRolesMapping = null as any;
utilities.lazyLoad(exports, ["OpensearchRolesMapping"], () => require("./opensearchRolesMapping"));

export { OpensearchUserArgs, OpensearchUserState } from "./opensearchUser";
export type OpensearchUser = import("./opensearchUser").OpensearchUser;
export const OpensearchUser: typeof import("./opensearchUser").OpensearchUser = null as any;
utilities.lazyLoad(exports, ["OpensearchUser"], () => require("./opensearchUser"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ScriptArgs, ScriptState } from "./script";
export type Script = import("./script").Script;
export const Script: typeof import("./script").Script = null as any;
utilities.lazyLoad(exports, ["Script"], () => require("./script"));

export { SnapshotRepositoryArgs, SnapshotRepositoryState } from "./snapshotRepository";
export type SnapshotRepository = import("./snapshotRepository").SnapshotRepository;
export const SnapshotRepository: typeof import("./snapshotRepository").SnapshotRepository = null as any;
utilities.lazyLoad(exports, ["SnapshotRepository"], () => require("./snapshotRepository"));

export { XpackIndexLifecyclePolicyArgs, XpackIndexLifecyclePolicyState } from "./xpackIndexLifecyclePolicy";
export type XpackIndexLifecyclePolicy = import("./xpackIndexLifecyclePolicy").XpackIndexLifecyclePolicy;
export const XpackIndexLifecyclePolicy: typeof import("./xpackIndexLifecyclePolicy").XpackIndexLifecyclePolicy = null as any;
utilities.lazyLoad(exports, ["XpackIndexLifecyclePolicy"], () => require("./xpackIndexLifecyclePolicy"));

export { XpackLicenseArgs, XpackLicenseState } from "./xpackLicense";
export type XpackLicense = import("./xpackLicense").XpackLicense;
export const XpackLicense: typeof import("./xpackLicense").XpackLicense = null as any;
utilities.lazyLoad(exports, ["XpackLicense"], () => require("./xpackLicense"));

export { XpackRoleArgs, XpackRoleState } from "./xpackRole";
export type XpackRole = import("./xpackRole").XpackRole;
export const XpackRole: typeof import("./xpackRole").XpackRole = null as any;
utilities.lazyLoad(exports, ["XpackRole"], () => require("./xpackRole"));

export { XpackRoleMappingArgs, XpackRoleMappingState } from "./xpackRoleMapping";
export type XpackRoleMapping = import("./xpackRoleMapping").XpackRoleMapping;
export const XpackRoleMapping: typeof import("./xpackRoleMapping").XpackRoleMapping = null as any;
utilities.lazyLoad(exports, ["XpackRoleMapping"], () => require("./xpackRoleMapping"));

export { XpackSnapshotLifecyclePolicyArgs, XpackSnapshotLifecyclePolicyState } from "./xpackSnapshotLifecyclePolicy";
export type XpackSnapshotLifecyclePolicy = import("./xpackSnapshotLifecyclePolicy").XpackSnapshotLifecyclePolicy;
export const XpackSnapshotLifecyclePolicy: typeof import("./xpackSnapshotLifecyclePolicy").XpackSnapshotLifecyclePolicy = null as any;
utilities.lazyLoad(exports, ["XpackSnapshotLifecyclePolicy"], () => require("./xpackSnapshotLifecyclePolicy"));

export { XpackUserArgs, XpackUserState } from "./xpackUser";
export type XpackUser = import("./xpackUser").XpackUser;
export const XpackUser: typeof import("./xpackUser").XpackUser = null as any;
utilities.lazyLoad(exports, ["XpackUser"], () => require("./xpackUser"));

export { XpackWatchArgs, XpackWatchState } from "./xpackWatch";
export type XpackWatch = import("./xpackWatch").XpackWatch;
export const XpackWatch: typeof import("./xpackWatch").XpackWatch = null as any;
utilities.lazyLoad(exports, ["XpackWatch"], () => require("./xpackWatch"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "elasticsearch:index/clusterSettings:ClusterSettings":
                return new ClusterSettings(name, <any>undefined, { urn })
            case "elasticsearch:index/componentTemplate:ComponentTemplate":
                return new ComponentTemplate(name, <any>undefined, { urn })
            case "elasticsearch:index/composableIndexTemplate:ComposableIndexTemplate":
                return new ComposableIndexTemplate(name, <any>undefined, { urn })
            case "elasticsearch:index/dataStream:DataStream":
                return new DataStream(name, <any>undefined, { urn })
            case "elasticsearch:index/index:Index":
                return new Index(name, <any>undefined, { urn })
            case "elasticsearch:index/indexTemplate:IndexTemplate":
                return new IndexTemplate(name, <any>undefined, { urn })
            case "elasticsearch:index/ingestPipeline:IngestPipeline":
                return new IngestPipeline(name, <any>undefined, { urn })
            case "elasticsearch:index/kibanaAlert:KibanaAlert":
                return new KibanaAlert(name, <any>undefined, { urn })
            case "elasticsearch:index/kibanaObject:KibanaObject":
                return new KibanaObject(name, <any>undefined, { urn })
            case "elasticsearch:index/opendistroDestination:OpendistroDestination":
                return new OpendistroDestination(name, <any>undefined, { urn })
            case "elasticsearch:index/opendistroIsmPolicy:OpendistroIsmPolicy":
                return new OpendistroIsmPolicy(name, <any>undefined, { urn })
            case "elasticsearch:index/opendistroIsmPolicyMapping:OpendistroIsmPolicyMapping":
                return new OpendistroIsmPolicyMapping(name, <any>undefined, { urn })
            case "elasticsearch:index/opendistroKibanaTenant:OpendistroKibanaTenant":
                return new OpendistroKibanaTenant(name, <any>undefined, { urn })
            case "elasticsearch:index/opendistroMonitor:OpendistroMonitor":
                return new OpendistroMonitor(name, <any>undefined, { urn })
            case "elasticsearch:index/opendistroRole:OpendistroRole":
                return new OpendistroRole(name, <any>undefined, { urn })
            case "elasticsearch:index/opendistroRolesMapping:OpendistroRolesMapping":
                return new OpendistroRolesMapping(name, <any>undefined, { urn })
            case "elasticsearch:index/opendistroUser:OpendistroUser":
                return new OpendistroUser(name, <any>undefined, { urn })
            case "elasticsearch:index/opensearchAuditConfig:OpensearchAuditConfig":
                return new OpensearchAuditConfig(name, <any>undefined, { urn })
            case "elasticsearch:index/opensearchDestination:OpensearchDestination":
                return new OpensearchDestination(name, <any>undefined, { urn })
            case "elasticsearch:index/opensearchIsmPolicy:OpensearchIsmPolicy":
                return new OpensearchIsmPolicy(name, <any>undefined, { urn })
            case "elasticsearch:index/opensearchIsmPolicyMapping:OpensearchIsmPolicyMapping":
                return new OpensearchIsmPolicyMapping(name, <any>undefined, { urn })
            case "elasticsearch:index/opensearchKibanaTenant:OpensearchKibanaTenant":
                return new OpensearchKibanaTenant(name, <any>undefined, { urn })
            case "elasticsearch:index/opensearchMonitor:OpensearchMonitor":
                return new OpensearchMonitor(name, <any>undefined, { urn })
            case "elasticsearch:index/opensearchRole:OpensearchRole":
                return new OpensearchRole(name, <any>undefined, { urn })
            case "elasticsearch:index/opensearchRolesMapping:OpensearchRolesMapping":
                return new OpensearchRolesMapping(name, <any>undefined, { urn })
            case "elasticsearch:index/opensearchUser:OpensearchUser":
                return new OpensearchUser(name, <any>undefined, { urn })
            case "elasticsearch:index/script:Script":
                return new Script(name, <any>undefined, { urn })
            case "elasticsearch:index/snapshotRepository:SnapshotRepository":
                return new SnapshotRepository(name, <any>undefined, { urn })
            case "elasticsearch:index/xpackIndexLifecyclePolicy:XpackIndexLifecyclePolicy":
                return new XpackIndexLifecyclePolicy(name, <any>undefined, { urn })
            case "elasticsearch:index/xpackLicense:XpackLicense":
                return new XpackLicense(name, <any>undefined, { urn })
            case "elasticsearch:index/xpackRole:XpackRole":
                return new XpackRole(name, <any>undefined, { urn })
            case "elasticsearch:index/xpackRoleMapping:XpackRoleMapping":
                return new XpackRoleMapping(name, <any>undefined, { urn })
            case "elasticsearch:index/xpackSnapshotLifecyclePolicy:XpackSnapshotLifecyclePolicy":
                return new XpackSnapshotLifecyclePolicy(name, <any>undefined, { urn })
            case "elasticsearch:index/xpackUser:XpackUser":
                return new XpackUser(name, <any>undefined, { urn })
            case "elasticsearch:index/xpackWatch:XpackWatch":
                return new XpackWatch(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("elasticsearch", "index/clusterSettings", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/componentTemplate", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/composableIndexTemplate", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/dataStream", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/index", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/indexTemplate", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/ingestPipeline", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/kibanaAlert", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/kibanaObject", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/opendistroDestination", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/opendistroIsmPolicy", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/opendistroIsmPolicyMapping", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/opendistroKibanaTenant", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/opendistroMonitor", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/opendistroRole", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/opendistroRolesMapping", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/opendistroUser", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/opensearchAuditConfig", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/opensearchDestination", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/opensearchIsmPolicy", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/opensearchIsmPolicyMapping", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/opensearchKibanaTenant", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/opensearchMonitor", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/opensearchRole", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/opensearchRolesMapping", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/opensearchUser", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/script", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/snapshotRepository", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/xpackIndexLifecyclePolicy", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/xpackLicense", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/xpackRole", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/xpackRoleMapping", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/xpackSnapshotLifecyclePolicy", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/xpackUser", _module)
pulumi.runtime.registerResourceModule("elasticsearch", "index/xpackWatch", _module)
pulumi.runtime.registerResourcePackage("elasticsearch", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:elasticsearch") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
