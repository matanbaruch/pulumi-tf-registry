// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class XpackLicense extends pulumi.CustomResource {
    /**
     * Get an existing XpackLicense resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: XpackLicenseState, opts?: pulumi.CustomResourceOptions): XpackLicense {
        return new XpackLicense(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'elasticsearch:index/xpackLicense:XpackLicense';

    /**
     * Returns true if the given object is an instance of XpackLicense.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is XpackLicense {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === XpackLicense.__pulumiType;
    }

    public readonly license!: pulumi.Output<string | undefined>;
    public /*out*/ readonly licenseJson!: pulumi.Output<string>;
    public readonly useBasicLicense!: pulumi.Output<boolean>;

    /**
     * Create a XpackLicense resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: XpackLicenseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: XpackLicenseArgs | XpackLicenseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as XpackLicenseState | undefined;
            resourceInputs["license"] = state ? state.license : undefined;
            resourceInputs["licenseJson"] = state ? state.licenseJson : undefined;
            resourceInputs["useBasicLicense"] = state ? state.useBasicLicense : undefined;
        } else {
            const args = argsOrState as XpackLicenseArgs | undefined;
            if ((!args || args.useBasicLicense === undefined) && !opts.urn) {
                throw new Error("Missing required property 'useBasicLicense'");
            }
            resourceInputs["license"] = args ? args.license : undefined;
            resourceInputs["useBasicLicense"] = args ? args.useBasicLicense : undefined;
            resourceInputs["licenseJson"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(XpackLicense.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering XpackLicense resources.
 */
export interface XpackLicenseState {
    license?: pulumi.Input<string>;
    licenseJson?: pulumi.Input<string>;
    useBasicLicense?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a XpackLicense resource.
 */
export interface XpackLicenseArgs {
    license?: pulumi.Input<string>;
    useBasicLicense: pulumi.Input<boolean>;
}
