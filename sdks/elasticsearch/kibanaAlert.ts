// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KibanaAlert extends pulumi.CustomResource {
    /**
     * Get an existing KibanaAlert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KibanaAlertState, opts?: pulumi.CustomResourceOptions): KibanaAlert {
        return new KibanaAlert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'elasticsearch:index/kibanaAlert:KibanaAlert';

    /**
     * Returns true if the given object is an instance of KibanaAlert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KibanaAlert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KibanaAlert.__pulumiType;
    }

    /**
     * Actions are invocations of Kibana services or integrations with third-party systems, that run as background tasks on the
     * Kibana server when alert conditions are met.
     */
    public readonly actions!: pulumi.Output<outputs.KibanaAlertAction[] | undefined>;
    /**
     * The ID of the alert type that you want to call when the alert is scheduled to run, defaults to `.index-threshold`.
     */
    public readonly alertTypeId!: pulumi.Output<string | undefined>;
    /**
     * The conditions under which the alert is active, they create an expression to be evaluated by the alert type executor.
     * These parameters are passed to the executor `params`. There may be specific attributes for different alert types. Either
     * `params_json` or `conditions` must be specified.
     */
    public readonly conditions!: pulumi.Output<outputs.KibanaAlertConditions | undefined>;
    /**
     * The name of the application that owns the alert. This name has to match the Kibana Feature name, as that dictates the
     * required RBAC privileges. Defaults to `alerts`.
     */
    public readonly consumer!: pulumi.Output<string | undefined>;
    /**
     * Whether the alert is scheduled for evaluation.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the alert, does not have to be unique, used to identify and find an alert.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The condition for throttling the notification: `onActionGroupChange`, `onActiveAlert`, or `onThrottleInterval`. Only
     * available in Kibana >= 7.11
     */
    public readonly notifyWhen!: pulumi.Output<string | undefined>;
    /**
     * JSON body of alert `params`. Either `params_json` or `conditions` must be specified.
     */
    public readonly paramsJson!: pulumi.Output<string | undefined>;
    /**
     * How frequently the alert conditions are checked. Note that the timing of evaluating alerts is not guaranteed,
     * particularly for intervals of less than 10 seconds
     */
    public readonly schedule!: pulumi.Output<outputs.KibanaAlertSchedule | undefined>;
    /**
     * A list of tag names, they appear in the alert listing in the UI which is searchable by tag.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * How often this alert should fire the same action, this reduces repeated notifications.
     */
    public readonly throttle!: pulumi.Output<string | undefined>;

    /**
     * Create a KibanaAlert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: KibanaAlertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KibanaAlertArgs | KibanaAlertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KibanaAlertState | undefined;
            resourceInputs["actions"] = state ? state.actions : undefined;
            resourceInputs["alertTypeId"] = state ? state.alertTypeId : undefined;
            resourceInputs["conditions"] = state ? state.conditions : undefined;
            resourceInputs["consumer"] = state ? state.consumer : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifyWhen"] = state ? state.notifyWhen : undefined;
            resourceInputs["paramsJson"] = state ? state.paramsJson : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["throttle"] = state ? state.throttle : undefined;
        } else {
            const args = argsOrState as KibanaAlertArgs | undefined;
            resourceInputs["actions"] = args ? args.actions : undefined;
            resourceInputs["alertTypeId"] = args ? args.alertTypeId : undefined;
            resourceInputs["conditions"] = args ? args.conditions : undefined;
            resourceInputs["consumer"] = args ? args.consumer : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notifyWhen"] = args ? args.notifyWhen : undefined;
            resourceInputs["paramsJson"] = args ? args.paramsJson : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["throttle"] = args ? args.throttle : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KibanaAlert.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KibanaAlert resources.
 */
export interface KibanaAlertState {
    /**
     * Actions are invocations of Kibana services or integrations with third-party systems, that run as background tasks on the
     * Kibana server when alert conditions are met.
     */
    actions?: pulumi.Input<pulumi.Input<inputs.KibanaAlertAction>[]>;
    /**
     * The ID of the alert type that you want to call when the alert is scheduled to run, defaults to `.index-threshold`.
     */
    alertTypeId?: pulumi.Input<string>;
    /**
     * The conditions under which the alert is active, they create an expression to be evaluated by the alert type executor.
     * These parameters are passed to the executor `params`. There may be specific attributes for different alert types. Either
     * `params_json` or `conditions` must be specified.
     */
    conditions?: pulumi.Input<inputs.KibanaAlertConditions>;
    /**
     * The name of the application that owns the alert. This name has to match the Kibana Feature name, as that dictates the
     * required RBAC privileges. Defaults to `alerts`.
     */
    consumer?: pulumi.Input<string>;
    /**
     * Whether the alert is scheduled for evaluation.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The name of the alert, does not have to be unique, used to identify and find an alert.
     */
    name?: pulumi.Input<string>;
    /**
     * The condition for throttling the notification: `onActionGroupChange`, `onActiveAlert`, or `onThrottleInterval`. Only
     * available in Kibana >= 7.11
     */
    notifyWhen?: pulumi.Input<string>;
    /**
     * JSON body of alert `params`. Either `params_json` or `conditions` must be specified.
     */
    paramsJson?: pulumi.Input<string>;
    /**
     * How frequently the alert conditions are checked. Note that the timing of evaluating alerts is not guaranteed,
     * particularly for intervals of less than 10 seconds
     */
    schedule?: pulumi.Input<inputs.KibanaAlertSchedule>;
    /**
     * A list of tag names, they appear in the alert listing in the UI which is searchable by tag.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * How often this alert should fire the same action, this reduces repeated notifications.
     */
    throttle?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KibanaAlert resource.
 */
export interface KibanaAlertArgs {
    /**
     * Actions are invocations of Kibana services or integrations with third-party systems, that run as background tasks on the
     * Kibana server when alert conditions are met.
     */
    actions?: pulumi.Input<pulumi.Input<inputs.KibanaAlertAction>[]>;
    /**
     * The ID of the alert type that you want to call when the alert is scheduled to run, defaults to `.index-threshold`.
     */
    alertTypeId?: pulumi.Input<string>;
    /**
     * The conditions under which the alert is active, they create an expression to be evaluated by the alert type executor.
     * These parameters are passed to the executor `params`. There may be specific attributes for different alert types. Either
     * `params_json` or `conditions` must be specified.
     */
    conditions?: pulumi.Input<inputs.KibanaAlertConditions>;
    /**
     * The name of the application that owns the alert. This name has to match the Kibana Feature name, as that dictates the
     * required RBAC privileges. Defaults to `alerts`.
     */
    consumer?: pulumi.Input<string>;
    /**
     * Whether the alert is scheduled for evaluation.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The name of the alert, does not have to be unique, used to identify and find an alert.
     */
    name?: pulumi.Input<string>;
    /**
     * The condition for throttling the notification: `onActionGroupChange`, `onActiveAlert`, or `onThrottleInterval`. Only
     * available in Kibana >= 7.11
     */
    notifyWhen?: pulumi.Input<string>;
    /**
     * JSON body of alert `params`. Either `params_json` or `conditions` must be specified.
     */
    paramsJson?: pulumi.Input<string>;
    /**
     * How frequently the alert conditions are checked. Note that the timing of evaluating alerts is not guaranteed,
     * particularly for intervals of less than 10 seconds
     */
    schedule?: pulumi.Input<inputs.KibanaAlertSchedule>;
    /**
     * A list of tag names, they appear in the alert listing in the UI which is searchable by tag.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * How often this alert should fire the same action, this reduces repeated notifications.
     */
    throttle?: pulumi.Input<string>;
}
