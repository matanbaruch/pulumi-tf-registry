// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class XpackRole extends pulumi.CustomResource {
    /**
     * Get an existing XpackRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: XpackRoleState, opts?: pulumi.CustomResourceOptions): XpackRole {
        return new XpackRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'elasticsearch:index/xpackRole:XpackRole';

    /**
     * Returns true if the given object is an instance of XpackRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is XpackRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === XpackRole.__pulumiType;
    }

    public readonly applications!: pulumi.Output<outputs.XpackRoleApplication[] | undefined>;
    public readonly clusters!: pulumi.Output<string[] | undefined>;
    public readonly global!: pulumi.Output<string | undefined>;
    public readonly indices!: pulumi.Output<outputs.XpackRoleIndex[] | undefined>;
    public readonly metadata!: pulumi.Output<string | undefined>;
    public readonly roleName!: pulumi.Output<string>;
    public readonly runAs!: pulumi.Output<string[] | undefined>;

    /**
     * Create a XpackRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: XpackRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: XpackRoleArgs | XpackRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as XpackRoleState | undefined;
            resourceInputs["applications"] = state ? state.applications : undefined;
            resourceInputs["clusters"] = state ? state.clusters : undefined;
            resourceInputs["global"] = state ? state.global : undefined;
            resourceInputs["indices"] = state ? state.indices : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["roleName"] = state ? state.roleName : undefined;
            resourceInputs["runAs"] = state ? state.runAs : undefined;
        } else {
            const args = argsOrState as XpackRoleArgs | undefined;
            if ((!args || args.roleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleName'");
            }
            resourceInputs["applications"] = args ? args.applications : undefined;
            resourceInputs["clusters"] = args ? args.clusters : undefined;
            resourceInputs["global"] = args ? args.global : undefined;
            resourceInputs["indices"] = args ? args.indices : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["roleName"] = args ? args.roleName : undefined;
            resourceInputs["runAs"] = args ? args.runAs : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(XpackRole.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering XpackRole resources.
 */
export interface XpackRoleState {
    applications?: pulumi.Input<pulumi.Input<inputs.XpackRoleApplication>[]>;
    clusters?: pulumi.Input<pulumi.Input<string>[]>;
    global?: pulumi.Input<string>;
    indices?: pulumi.Input<pulumi.Input<inputs.XpackRoleIndex>[]>;
    metadata?: pulumi.Input<string>;
    roleName?: pulumi.Input<string>;
    runAs?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a XpackRole resource.
 */
export interface XpackRoleArgs {
    applications?: pulumi.Input<pulumi.Input<inputs.XpackRoleApplication>[]>;
    clusters?: pulumi.Input<pulumi.Input<string>[]>;
    global?: pulumi.Input<string>;
    indices?: pulumi.Input<pulumi.Input<inputs.XpackRoleIndex>[]>;
    metadata?: pulumi.Input<string>;
    roleName: pulumi.Input<string>;
    runAs?: pulumi.Input<pulumi.Input<string>[]>;
}
