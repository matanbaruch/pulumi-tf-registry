// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface KibanaAlertAction {
    /**
     * The type of the action, e.g. `.index`, `.webhook`, etc.
     */
    actionTypeId: string;
    /**
     * When to execute the action, e.g. `threshold met` or `recovered`.
     */
    group?: string;
    /**
     * The identifier of the saved action object, a UUID.
     */
    id: string;
    /**
     * Key value pairs passed to the action executor, e.g. a Mustache formatted `message`.
     */
    params?: {[key: string]: string};
}

export interface KibanaAlertConditions {
    aggregationField?: string;
    aggregationType?: string;
    groupBy?: string;
    indices: string[];
    termField?: string;
    termSize?: number;
    thresholdComparator: string;
    thresholds: number[];
    timeField: string;
    timeWindowSize: number;
    timeWindowUnit: string;
}

export interface KibanaAlertSchedule {
    /**
     * Specifies the interval in seconds, minutes, hours or days at which the alert should execute, e.g. 10s, 5m, 1h.
     */
    interval: string;
}

export interface OpendistroIsmPolicyMappingTimeouts {
    create?: string;
    update?: string;
}

export interface OpendistroRoleIndexPermission {
    allowedActions?: string[];
    documentLevelSecurity?: string;
    fieldLevelSecurities?: string[];
    indexPatterns?: string[];
    maskedFields?: string[];
}

export interface OpendistroRoleTenantPermission {
    allowedActions?: string[];
    tenantPatterns?: string[];
}

export interface OpensearchAuditConfigAudit {
    disabledRestCategories?: string[];
    disabledTransportCategories?: string[];
    enableRest?: boolean;
    enableTransport?: boolean;
    excludeSensitiveHeaders?: boolean;
    ignoreRequests?: string[];
    ignoreUsers?: string[];
    logRequestBody?: boolean;
    resolveBulkRequests?: boolean;
    resolveIndices?: boolean;
}

export interface OpensearchAuditConfigCompliance {
    enabled?: boolean;
    externalConfig?: boolean;
    internalConfig?: boolean;
    readIgnoreUsers?: string[];
    readMetadataOnly?: boolean;
    readWatchedFields?: outputs.OpensearchAuditConfigComplianceReadWatchedField[];
    writeIgnoreUsers?: string[];
    writeLogDiffs?: boolean;
    writeMetadataOnly?: boolean;
    writeWatchedIndices?: string[];
}

export interface OpensearchAuditConfigComplianceReadWatchedField {
    fields: string[];
    index: string;
}

export interface OpensearchIsmPolicyMappingTimeouts {
    create?: string;
    update?: string;
}

export interface OpensearchRoleIndexPermission {
    allowedActions?: string[];
    documentLevelSecurity?: string;
    fieldLevelSecurities?: string[];
    indexPatterns?: string[];
    maskedFields?: string[];
}

export interface OpensearchRoleTenantPermission {
    allowedActions?: string[];
    tenantPatterns?: string[];
}

export interface XpackRoleApplication {
    application: string;
    privileges?: string[];
    resources?: string[];
}

export interface XpackRoleIndex {
    fieldSecurity?: outputs.XpackRoleIndexFieldSecurity;
    names: string[];
    privileges: string[];
    query?: string;
}

export interface XpackRoleIndexFieldSecurity {
    excepts?: string[];
    grants?: string[];
}

