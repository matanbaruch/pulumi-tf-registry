// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class XpackUser extends pulumi.CustomResource {
    /**
     * Get an existing XpackUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: XpackUserState, opts?: pulumi.CustomResourceOptions): XpackUser {
        return new XpackUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'elasticsearch:index/xpackUser:XpackUser';

    /**
     * Returns true if the given object is an instance of XpackUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is XpackUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === XpackUser.__pulumiType;
    }

    /**
     * The email of the user
     */
    public readonly email!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether the user is enabled, defaults to true.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The full name of the user
     */
    public readonly fullname!: pulumi.Output<string | undefined>;
    /**
     * Arbitrary metadata that you want to associate with the user
     */
    public readonly metadata!: pulumi.Output<string | undefined>;
    /**
     * The user’s password. Passwords must be at least 6 characters long. Mutually exclusive with `password_hash`, one of
     * which must be provided at creation.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for
     * password storage. Mutually exclusive with `password`, one of which must be provided at creation.
     */
    public readonly passwordHash!: pulumi.Output<string | undefined>;
    /**
     * A set of roles the user has. The roles determine the user’s access permissions
     */
    public readonly roles!: pulumi.Output<string[]>;
    /**
     * An identifier for the user. Usernames must be at least 1 and no more than 1024 characters. They can contain alphanumeric
     * characters (a-z, A-Z, 0-9), spaces, punctuation, and printable symbols in the Basic Latin (ASCII) block. Leading or
     * trailing whitespace is not allowed.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a XpackUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: XpackUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: XpackUserArgs | XpackUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as XpackUserState | undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["fullname"] = state ? state.fullname : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["passwordHash"] = state ? state.passwordHash : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as XpackUserArgs | undefined;
            if ((!args || args.roles === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roles'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["fullname"] = args ? args.fullname : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["passwordHash"] = args?.passwordHash ? pulumi.secret(args.passwordHash) : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "passwordHash"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(XpackUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering XpackUser resources.
 */
export interface XpackUserState {
    /**
     * The email of the user
     */
    email?: pulumi.Input<string>;
    /**
     * Specifies whether the user is enabled, defaults to true.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The full name of the user
     */
    fullname?: pulumi.Input<string>;
    /**
     * Arbitrary metadata that you want to associate with the user
     */
    metadata?: pulumi.Input<string>;
    /**
     * The user’s password. Passwords must be at least 6 characters long. Mutually exclusive with `password_hash`, one of
     * which must be provided at creation.
     */
    password?: pulumi.Input<string>;
    /**
     * A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for
     * password storage. Mutually exclusive with `password`, one of which must be provided at creation.
     */
    passwordHash?: pulumi.Input<string>;
    /**
     * A set of roles the user has. The roles determine the user’s access permissions
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An identifier for the user. Usernames must be at least 1 and no more than 1024 characters. They can contain alphanumeric
     * characters (a-z, A-Z, 0-9), spaces, punctuation, and printable symbols in the Basic Latin (ASCII) block. Leading or
     * trailing whitespace is not allowed.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a XpackUser resource.
 */
export interface XpackUserArgs {
    /**
     * The email of the user
     */
    email?: pulumi.Input<string>;
    /**
     * Specifies whether the user is enabled, defaults to true.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The full name of the user
     */
    fullname?: pulumi.Input<string>;
    /**
     * Arbitrary metadata that you want to associate with the user
     */
    metadata?: pulumi.Input<string>;
    /**
     * The user’s password. Passwords must be at least 6 characters long. Mutually exclusive with `password_hash`, one of
     * which must be provided at creation.
     */
    password?: pulumi.Input<string>;
    /**
     * A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for
     * password storage. Mutually exclusive with `password`, one of which must be provided at creation.
     */
    passwordHash?: pulumi.Input<string>;
    /**
     * A set of roles the user has. The roles determine the user’s access permissions
     */
    roles: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An identifier for the user. Usernames must be at least 1 and no more than 1024 characters. They can contain alphanumeric
     * characters (a-z, A-Z, 0-9), spaces, punctuation, and printable symbols in the Basic Latin (ASCII) block. Leading or
     * trailing whitespace is not allowed.
     */
    username: pulumi.Input<string>;
}
