// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ArchitectGrammarLanguage extends pulumi.CustomResource {
    /**
     * Get an existing ArchitectGrammarLanguage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ArchitectGrammarLanguageState, opts?: pulumi.CustomResourceOptions): ArchitectGrammarLanguage {
        return new ArchitectGrammarLanguage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'genesyscloud:index/architectGrammarLanguage:ArchitectGrammarLanguage';

    /**
     * Returns true if the given object is an instance of ArchitectGrammarLanguage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ArchitectGrammarLanguage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ArchitectGrammarLanguage.__pulumiType;
    }

    /**
     * Information about the associated dtmf file.
     */
    public readonly dtmfFileData!: pulumi.Output<outputs.ArchitectGrammarLanguageDtmfFileData | undefined>;
    /**
     * The id of the grammar this language belongs too. If this is changed a new language is created.
     */
    public readonly grammarId!: pulumi.Output<string>;
    /**
     * Language name. (eg. en-us). If this is changed a new language is created.
     */
    public readonly language!: pulumi.Output<string>;
    /**
     * Information about the associated voice file.
     */
    public readonly voiceFileData!: pulumi.Output<outputs.ArchitectGrammarLanguageVoiceFileData | undefined>;

    /**
     * Create a ArchitectGrammarLanguage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ArchitectGrammarLanguageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ArchitectGrammarLanguageArgs | ArchitectGrammarLanguageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ArchitectGrammarLanguageState | undefined;
            resourceInputs["dtmfFileData"] = state ? state.dtmfFileData : undefined;
            resourceInputs["grammarId"] = state ? state.grammarId : undefined;
            resourceInputs["language"] = state ? state.language : undefined;
            resourceInputs["voiceFileData"] = state ? state.voiceFileData : undefined;
        } else {
            const args = argsOrState as ArchitectGrammarLanguageArgs | undefined;
            if ((!args || args.grammarId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'grammarId'");
            }
            if ((!args || args.language === undefined) && !opts.urn) {
                throw new Error("Missing required property 'language'");
            }
            resourceInputs["dtmfFileData"] = args ? args.dtmfFileData : undefined;
            resourceInputs["grammarId"] = args ? args.grammarId : undefined;
            resourceInputs["language"] = args ? args.language : undefined;
            resourceInputs["voiceFileData"] = args ? args.voiceFileData : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ArchitectGrammarLanguage.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ArchitectGrammarLanguage resources.
 */
export interface ArchitectGrammarLanguageState {
    /**
     * Information about the associated dtmf file.
     */
    dtmfFileData?: pulumi.Input<inputs.ArchitectGrammarLanguageDtmfFileData>;
    /**
     * The id of the grammar this language belongs too. If this is changed a new language is created.
     */
    grammarId?: pulumi.Input<string>;
    /**
     * Language name. (eg. en-us). If this is changed a new language is created.
     */
    language?: pulumi.Input<string>;
    /**
     * Information about the associated voice file.
     */
    voiceFileData?: pulumi.Input<inputs.ArchitectGrammarLanguageVoiceFileData>;
}

/**
 * The set of arguments for constructing a ArchitectGrammarLanguage resource.
 */
export interface ArchitectGrammarLanguageArgs {
    /**
     * Information about the associated dtmf file.
     */
    dtmfFileData?: pulumi.Input<inputs.ArchitectGrammarLanguageDtmfFileData>;
    /**
     * The id of the grammar this language belongs too. If this is changed a new language is created.
     */
    grammarId: pulumi.Input<string>;
    /**
     * Language name. (eg. en-us). If this is changed a new language is created.
     */
    language: pulumi.Input<string>;
    /**
     * Information about the associated voice file.
     */
    voiceFileData?: pulumi.Input<inputs.ArchitectGrammarLanguageVoiceFileData>;
}
