// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ArchitectDatatable extends pulumi.CustomResource {
    /**
     * Get an existing ArchitectDatatable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ArchitectDatatableState, opts?: pulumi.CustomResourceOptions): ArchitectDatatable {
        return new ArchitectDatatable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'genesyscloud:index/architectDatatable:ArchitectDatatable';

    /**
     * Returns true if the given object is an instance of ArchitectDatatable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ArchitectDatatable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ArchitectDatatable.__pulumiType;
    }

    /**
     * Description of the architect_datatable.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The division to which this architect_datatable will belong. If not set, the home division will be used.
     */
    public readonly divisionId!: pulumi.Output<string>;
    /**
     * Name of the architect_datatable.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Schema properties of the architect_datatable. This must at a minimum contain a string property 'key' that will serve as
     * the row key. Properties cannot be removed from a schema once they have been added
     */
    public readonly properties!: pulumi.Output<outputs.ArchitectDatatableProperty[]>;

    /**
     * Create a ArchitectDatatable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ArchitectDatatableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ArchitectDatatableArgs | ArchitectDatatableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ArchitectDatatableState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["divisionId"] = state ? state.divisionId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
        } else {
            const args = argsOrState as ArchitectDatatableArgs | undefined;
            if ((!args || args.properties === undefined) && !opts.urn) {
                throw new Error("Missing required property 'properties'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["divisionId"] = args ? args.divisionId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ArchitectDatatable.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ArchitectDatatable resources.
 */
export interface ArchitectDatatableState {
    /**
     * Description of the architect_datatable.
     */
    description?: pulumi.Input<string>;
    /**
     * The division to which this architect_datatable will belong. If not set, the home division will be used.
     */
    divisionId?: pulumi.Input<string>;
    /**
     * Name of the architect_datatable.
     */
    name?: pulumi.Input<string>;
    /**
     * Schema properties of the architect_datatable. This must at a minimum contain a string property 'key' that will serve as
     * the row key. Properties cannot be removed from a schema once they have been added
     */
    properties?: pulumi.Input<pulumi.Input<inputs.ArchitectDatatableProperty>[]>;
}

/**
 * The set of arguments for constructing a ArchitectDatatable resource.
 */
export interface ArchitectDatatableArgs {
    /**
     * Description of the architect_datatable.
     */
    description?: pulumi.Input<string>;
    /**
     * The division to which this architect_datatable will belong. If not set, the home division will be used.
     */
    divisionId?: pulumi.Input<string>;
    /**
     * Name of the architect_datatable.
     */
    name?: pulumi.Input<string>;
    /**
     * Schema properties of the architect_datatable. This must at a minimum contain a string property 'key' that will serve as
     * the row key. Properties cannot be removed from a schema once they have been added
     */
    properties: pulumi.Input<pulumi.Input<inputs.ArchitectDatatableProperty>[]>;
}
