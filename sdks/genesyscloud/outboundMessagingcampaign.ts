// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OutboundMessagingcampaign extends pulumi.CustomResource {
    /**
     * Get an existing OutboundMessagingcampaign resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OutboundMessagingcampaignState, opts?: pulumi.CustomResourceOptions): OutboundMessagingcampaign {
        return new OutboundMessagingcampaign(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'genesyscloud:index/outboundMessagingcampaign:OutboundMessagingcampaign';

    /**
     * Returns true if the given object is an instance of OutboundMessagingcampaign.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OutboundMessagingcampaign {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OutboundMessagingcampaign.__pulumiType;
    }

    /**
     * Whether this messaging campaign is always running Defaults to `false`.
     */
    public readonly alwaysRunning!: pulumi.Output<boolean | undefined>;
    /**
     * The callable time set for this messaging campaign.
     */
    public readonly callableTimeSetId!: pulumi.Output<string | undefined>;
    /**
     * The current status of the messaging campaign. A messaging campaign may be turned 'on' or 'off'.
     */
    public readonly campaignStatus!: pulumi.Output<string>;
    /**
     * The contact list filter to check before sending a message for this messaging campaign.
     */
    public readonly contactListFilterIds!: pulumi.Output<string[] | undefined>;
    /**
     * The contact list that this messaging campaign will send messages for.
     */
    public readonly contactListId!: pulumi.Output<string>;
    /**
     * The order in which to sort contacts for dialing, based on up to four columns.
     */
    public readonly contactSorts!: pulumi.Output<outputs.OutboundMessagingcampaignContactSort[] | undefined>;
    /**
     * The division this entity belongs to.
     */
    public readonly divisionId!: pulumi.Output<string>;
    /**
     * The dnc lists to check before sending a message for this messaging campaign.
     */
    public readonly dncListIds!: pulumi.Output<string[] | undefined>;
    /**
     * How many messages this messaging campaign will send per minute.
     */
    public readonly messagesPerMinute!: pulumi.Output<number>;
    /**
     * The campaign name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Configuration for this messaging campaign to send SMS messages.
     */
    public readonly smsConfig!: pulumi.Output<outputs.OutboundMessagingcampaignSmsConfig>;

    /**
     * Create a OutboundMessagingcampaign resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OutboundMessagingcampaignArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OutboundMessagingcampaignArgs | OutboundMessagingcampaignState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OutboundMessagingcampaignState | undefined;
            resourceInputs["alwaysRunning"] = state ? state.alwaysRunning : undefined;
            resourceInputs["callableTimeSetId"] = state ? state.callableTimeSetId : undefined;
            resourceInputs["campaignStatus"] = state ? state.campaignStatus : undefined;
            resourceInputs["contactListFilterIds"] = state ? state.contactListFilterIds : undefined;
            resourceInputs["contactListId"] = state ? state.contactListId : undefined;
            resourceInputs["contactSorts"] = state ? state.contactSorts : undefined;
            resourceInputs["divisionId"] = state ? state.divisionId : undefined;
            resourceInputs["dncListIds"] = state ? state.dncListIds : undefined;
            resourceInputs["messagesPerMinute"] = state ? state.messagesPerMinute : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["smsConfig"] = state ? state.smsConfig : undefined;
        } else {
            const args = argsOrState as OutboundMessagingcampaignArgs | undefined;
            if ((!args || args.contactListId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contactListId'");
            }
            if ((!args || args.messagesPerMinute === undefined) && !opts.urn) {
                throw new Error("Missing required property 'messagesPerMinute'");
            }
            if ((!args || args.smsConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'smsConfig'");
            }
            resourceInputs["alwaysRunning"] = args ? args.alwaysRunning : undefined;
            resourceInputs["callableTimeSetId"] = args ? args.callableTimeSetId : undefined;
            resourceInputs["campaignStatus"] = args ? args.campaignStatus : undefined;
            resourceInputs["contactListFilterIds"] = args ? args.contactListFilterIds : undefined;
            resourceInputs["contactListId"] = args ? args.contactListId : undefined;
            resourceInputs["contactSorts"] = args ? args.contactSorts : undefined;
            resourceInputs["divisionId"] = args ? args.divisionId : undefined;
            resourceInputs["dncListIds"] = args ? args.dncListIds : undefined;
            resourceInputs["messagesPerMinute"] = args ? args.messagesPerMinute : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["smsConfig"] = args ? args.smsConfig : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OutboundMessagingcampaign.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OutboundMessagingcampaign resources.
 */
export interface OutboundMessagingcampaignState {
    /**
     * Whether this messaging campaign is always running Defaults to `false`.
     */
    alwaysRunning?: pulumi.Input<boolean>;
    /**
     * The callable time set for this messaging campaign.
     */
    callableTimeSetId?: pulumi.Input<string>;
    /**
     * The current status of the messaging campaign. A messaging campaign may be turned 'on' or 'off'.
     */
    campaignStatus?: pulumi.Input<string>;
    /**
     * The contact list filter to check before sending a message for this messaging campaign.
     */
    contactListFilterIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The contact list that this messaging campaign will send messages for.
     */
    contactListId?: pulumi.Input<string>;
    /**
     * The order in which to sort contacts for dialing, based on up to four columns.
     */
    contactSorts?: pulumi.Input<pulumi.Input<inputs.OutboundMessagingcampaignContactSort>[]>;
    /**
     * The division this entity belongs to.
     */
    divisionId?: pulumi.Input<string>;
    /**
     * The dnc lists to check before sending a message for this messaging campaign.
     */
    dncListIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * How many messages this messaging campaign will send per minute.
     */
    messagesPerMinute?: pulumi.Input<number>;
    /**
     * The campaign name.
     */
    name?: pulumi.Input<string>;
    /**
     * Configuration for this messaging campaign to send SMS messages.
     */
    smsConfig?: pulumi.Input<inputs.OutboundMessagingcampaignSmsConfig>;
}

/**
 * The set of arguments for constructing a OutboundMessagingcampaign resource.
 */
export interface OutboundMessagingcampaignArgs {
    /**
     * Whether this messaging campaign is always running Defaults to `false`.
     */
    alwaysRunning?: pulumi.Input<boolean>;
    /**
     * The callable time set for this messaging campaign.
     */
    callableTimeSetId?: pulumi.Input<string>;
    /**
     * The current status of the messaging campaign. A messaging campaign may be turned 'on' or 'off'.
     */
    campaignStatus?: pulumi.Input<string>;
    /**
     * The contact list filter to check before sending a message for this messaging campaign.
     */
    contactListFilterIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The contact list that this messaging campaign will send messages for.
     */
    contactListId: pulumi.Input<string>;
    /**
     * The order in which to sort contacts for dialing, based on up to four columns.
     */
    contactSorts?: pulumi.Input<pulumi.Input<inputs.OutboundMessagingcampaignContactSort>[]>;
    /**
     * The division this entity belongs to.
     */
    divisionId?: pulumi.Input<string>;
    /**
     * The dnc lists to check before sending a message for this messaging campaign.
     */
    dncListIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * How many messages this messaging campaign will send per minute.
     */
    messagesPerMinute: pulumi.Input<number>;
    /**
     * The campaign name.
     */
    name?: pulumi.Input<string>;
    /**
     * Configuration for this messaging campaign to send SMS messages.
     */
    smsConfig: pulumi.Input<inputs.OutboundMessagingcampaignSmsConfig>;
}
