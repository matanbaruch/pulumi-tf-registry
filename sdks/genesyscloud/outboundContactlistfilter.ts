// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OutboundContactlistfilter extends pulumi.CustomResource {
    /**
     * Get an existing OutboundContactlistfilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OutboundContactlistfilterState, opts?: pulumi.CustomResourceOptions): OutboundContactlistfilter {
        return new OutboundContactlistfilter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'genesyscloud:index/outboundContactlistfilter:OutboundContactlistfilter';

    /**
     * Returns true if the given object is an instance of OutboundContactlistfilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OutboundContactlistfilter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OutboundContactlistfilter.__pulumiType;
    }

    /**
     * Groups of conditions to filter the contacts by.
     */
    public readonly clauses!: pulumi.Output<outputs.OutboundContactlistfilterClause[] | undefined>;
    /**
     * The contact list the filter is based on. Mutually exclusive to 'contact_list_template_id', however, one of the two must
     * be specified
     */
    public readonly contactListId!: pulumi.Output<string | undefined>;
    /**
     * The contact list template the filter is based on. Mutually exclusive to 'contact_list_id', however, one of the two must
     * be specified.
     */
    public readonly contactListTemplateId!: pulumi.Output<string | undefined>;
    /**
     * How to join clauses together.
     */
    public readonly filterType!: pulumi.Output<string>;
    /**
     * The name of the list.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a OutboundContactlistfilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: OutboundContactlistfilterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OutboundContactlistfilterArgs | OutboundContactlistfilterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OutboundContactlistfilterState | undefined;
            resourceInputs["clauses"] = state ? state.clauses : undefined;
            resourceInputs["contactListId"] = state ? state.contactListId : undefined;
            resourceInputs["contactListTemplateId"] = state ? state.contactListTemplateId : undefined;
            resourceInputs["filterType"] = state ? state.filterType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as OutboundContactlistfilterArgs | undefined;
            resourceInputs["clauses"] = args ? args.clauses : undefined;
            resourceInputs["contactListId"] = args ? args.contactListId : undefined;
            resourceInputs["contactListTemplateId"] = args ? args.contactListTemplateId : undefined;
            resourceInputs["filterType"] = args ? args.filterType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OutboundContactlistfilter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OutboundContactlistfilter resources.
 */
export interface OutboundContactlistfilterState {
    /**
     * Groups of conditions to filter the contacts by.
     */
    clauses?: pulumi.Input<pulumi.Input<inputs.OutboundContactlistfilterClause>[]>;
    /**
     * The contact list the filter is based on. Mutually exclusive to 'contact_list_template_id', however, one of the two must
     * be specified
     */
    contactListId?: pulumi.Input<string>;
    /**
     * The contact list template the filter is based on. Mutually exclusive to 'contact_list_id', however, one of the two must
     * be specified.
     */
    contactListTemplateId?: pulumi.Input<string>;
    /**
     * How to join clauses together.
     */
    filterType?: pulumi.Input<string>;
    /**
     * The name of the list.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OutboundContactlistfilter resource.
 */
export interface OutboundContactlistfilterArgs {
    /**
     * Groups of conditions to filter the contacts by.
     */
    clauses?: pulumi.Input<pulumi.Input<inputs.OutboundContactlistfilterClause>[]>;
    /**
     * The contact list the filter is based on. Mutually exclusive to 'contact_list_template_id', however, one of the two must
     * be specified
     */
    contactListId?: pulumi.Input<string>;
    /**
     * The contact list template the filter is based on. Mutually exclusive to 'contact_list_id', however, one of the two must
     * be specified.
     */
    contactListTemplateId?: pulumi.Input<string>;
    /**
     * How to join clauses together.
     */
    filterType?: pulumi.Input<string>;
    /**
     * The name of the list.
     */
    name?: pulumi.Input<string>;
}
