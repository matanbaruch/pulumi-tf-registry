// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RecordingMediaRetentionPolicy extends pulumi.CustomResource {
    /**
     * Get an existing RecordingMediaRetentionPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RecordingMediaRetentionPolicyState, opts?: pulumi.CustomResourceOptions): RecordingMediaRetentionPolicy {
        return new RecordingMediaRetentionPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'genesyscloud:index/recordingMediaRetentionPolicy:RecordingMediaRetentionPolicy';

    /**
     * Returns true if the given object is an instance of RecordingMediaRetentionPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RecordingMediaRetentionPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RecordingMediaRetentionPolicy.__pulumiType;
    }

    /**
     * Actions
     */
    public readonly actions!: pulumi.Output<outputs.RecordingMediaRetentionPolicyActions | undefined>;
    /**
     * Conditions
     */
    public readonly conditions!: pulumi.Output<outputs.RecordingMediaRetentionPolicyConditions | undefined>;
    /**
     * The description for the policy
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The policy will be enabled if true, otherwise it will be disabled
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Conditions and actions per media type
     */
    public readonly mediaPolicies!: pulumi.Output<outputs.RecordingMediaRetentionPolicyMediaPolicies | undefined>;
    /**
     * The policy name. Changing the policy_name attribute will cause the recording_media_retention_policy to be dropped and
     * recreated with a new ID.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ordinal number for the policy
     */
    public readonly order!: pulumi.Output<number | undefined>;
    /**
     * A list of errors in the policy configuration
     */
    public readonly policyErrors!: pulumi.Output<outputs.RecordingMediaRetentionPolicyPolicyErrors | undefined>;

    /**
     * Create a RecordingMediaRetentionPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RecordingMediaRetentionPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RecordingMediaRetentionPolicyArgs | RecordingMediaRetentionPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RecordingMediaRetentionPolicyState | undefined;
            resourceInputs["actions"] = state ? state.actions : undefined;
            resourceInputs["conditions"] = state ? state.conditions : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["mediaPolicies"] = state ? state.mediaPolicies : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["policyErrors"] = state ? state.policyErrors : undefined;
        } else {
            const args = argsOrState as RecordingMediaRetentionPolicyArgs | undefined;
            resourceInputs["actions"] = args ? args.actions : undefined;
            resourceInputs["conditions"] = args ? args.conditions : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["mediaPolicies"] = args ? args.mediaPolicies : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["order"] = args ? args.order : undefined;
            resourceInputs["policyErrors"] = args ? args.policyErrors : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RecordingMediaRetentionPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RecordingMediaRetentionPolicy resources.
 */
export interface RecordingMediaRetentionPolicyState {
    /**
     * Actions
     */
    actions?: pulumi.Input<inputs.RecordingMediaRetentionPolicyActions>;
    /**
     * Conditions
     */
    conditions?: pulumi.Input<inputs.RecordingMediaRetentionPolicyConditions>;
    /**
     * The description for the policy
     */
    description?: pulumi.Input<string>;
    /**
     * The policy will be enabled if true, otherwise it will be disabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Conditions and actions per media type
     */
    mediaPolicies?: pulumi.Input<inputs.RecordingMediaRetentionPolicyMediaPolicies>;
    /**
     * The policy name. Changing the policy_name attribute will cause the recording_media_retention_policy to be dropped and
     * recreated with a new ID.
     */
    name?: pulumi.Input<string>;
    /**
     * The ordinal number for the policy
     */
    order?: pulumi.Input<number>;
    /**
     * A list of errors in the policy configuration
     */
    policyErrors?: pulumi.Input<inputs.RecordingMediaRetentionPolicyPolicyErrors>;
}

/**
 * The set of arguments for constructing a RecordingMediaRetentionPolicy resource.
 */
export interface RecordingMediaRetentionPolicyArgs {
    /**
     * Actions
     */
    actions?: pulumi.Input<inputs.RecordingMediaRetentionPolicyActions>;
    /**
     * Conditions
     */
    conditions?: pulumi.Input<inputs.RecordingMediaRetentionPolicyConditions>;
    /**
     * The description for the policy
     */
    description?: pulumi.Input<string>;
    /**
     * The policy will be enabled if true, otherwise it will be disabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Conditions and actions per media type
     */
    mediaPolicies?: pulumi.Input<inputs.RecordingMediaRetentionPolicyMediaPolicies>;
    /**
     * The policy name. Changing the policy_name attribute will cause the recording_media_retention_policy to be dropped and
     * recreated with a new ID.
     */
    name?: pulumi.Input<string>;
    /**
     * The ordinal number for the policy
     */
    order?: pulumi.Input<number>;
    /**
     * A list of errors in the policy configuration
     */
    policyErrors?: pulumi.Input<inputs.RecordingMediaRetentionPolicyPolicyErrors>;
}
