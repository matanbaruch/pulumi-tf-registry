// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KnowledgeV1Document extends pulumi.CustomResource {
    /**
     * Get an existing KnowledgeV1Document resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KnowledgeV1DocumentState, opts?: pulumi.CustomResourceOptions): KnowledgeV1Document {
        return new KnowledgeV1Document(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'genesyscloud:index/knowledgeV1Document:KnowledgeV1Document';

    /**
     * Returns true if the given object is an instance of KnowledgeV1Document.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KnowledgeV1Document {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KnowledgeV1Document.__pulumiType;
    }

    /**
     * Knowledge base id
     */
    public readonly knowledgeBaseId!: pulumi.Output<string>;
    /**
     * Knowledge document request body
     */
    public readonly knowledgeDocument!: pulumi.Output<outputs.KnowledgeV1DocumentKnowledgeDocument>;
    /**
     * Language code
     */
    public readonly languageCode!: pulumi.Output<string>;

    /**
     * Create a KnowledgeV1Document resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KnowledgeV1DocumentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KnowledgeV1DocumentArgs | KnowledgeV1DocumentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KnowledgeV1DocumentState | undefined;
            resourceInputs["knowledgeBaseId"] = state ? state.knowledgeBaseId : undefined;
            resourceInputs["knowledgeDocument"] = state ? state.knowledgeDocument : undefined;
            resourceInputs["languageCode"] = state ? state.languageCode : undefined;
        } else {
            const args = argsOrState as KnowledgeV1DocumentArgs | undefined;
            if ((!args || args.knowledgeBaseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'knowledgeBaseId'");
            }
            if ((!args || args.knowledgeDocument === undefined) && !opts.urn) {
                throw new Error("Missing required property 'knowledgeDocument'");
            }
            if ((!args || args.languageCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'languageCode'");
            }
            resourceInputs["knowledgeBaseId"] = args ? args.knowledgeBaseId : undefined;
            resourceInputs["knowledgeDocument"] = args ? args.knowledgeDocument : undefined;
            resourceInputs["languageCode"] = args ? args.languageCode : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KnowledgeV1Document.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KnowledgeV1Document resources.
 */
export interface KnowledgeV1DocumentState {
    /**
     * Knowledge base id
     */
    knowledgeBaseId?: pulumi.Input<string>;
    /**
     * Knowledge document request body
     */
    knowledgeDocument?: pulumi.Input<inputs.KnowledgeV1DocumentKnowledgeDocument>;
    /**
     * Language code
     */
    languageCode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KnowledgeV1Document resource.
 */
export interface KnowledgeV1DocumentArgs {
    /**
     * Knowledge base id
     */
    knowledgeBaseId: pulumi.Input<string>;
    /**
     * Knowledge document request body
     */
    knowledgeDocument: pulumi.Input<inputs.KnowledgeV1DocumentKnowledgeDocument>;
    /**
     * Language code
     */
    languageCode: pulumi.Input<string>;
}
