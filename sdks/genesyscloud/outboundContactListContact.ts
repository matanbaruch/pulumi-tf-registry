// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OutboundContactListContact extends pulumi.CustomResource {
    /**
     * Get an existing OutboundContactListContact resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OutboundContactListContactState, opts?: pulumi.CustomResourceOptions): OutboundContactListContact {
        return new OutboundContactListContact(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'genesyscloud:index/outboundContactListContact:OutboundContactListContact';

    /**
     * Returns true if the given object is an instance of OutboundContactListContact.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OutboundContactListContact {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OutboundContactListContact.__pulumiType;
    }

    /**
     * Indicates whether or not the contact can be called. Defaults to `false`.
     */
    public readonly callable!: pulumi.Output<boolean | undefined>;
    /**
     * Clear system data. True means the system columns (attempts, callable status, etc) stored on the contact will be cleared
     * if the contact already exists; false means they won't. Only applicable on the creation of a contact, so updating this
     * field will force the contact to be deleted from the contact list and re-uploaded.
     */
    public readonly clearSystemData!: pulumi.Output<boolean | undefined>;
    /**
     * The identifier of the contact list containing this contact.
     */
    public readonly contactListId!: pulumi.Output<string>;
    /**
     * A map of media types (Voice, SMS and Email) to ContactableStatus, which indicates if the contact can be contacted using
     * the specified media type.
     */
    public readonly contactableStatuses!: pulumi.Output<outputs.OutboundContactListContactContactableStatus[] | undefined>;
    /**
     * An ordered map of the contact's columns and corresponding values.
     */
    public readonly data!: pulumi.Output<{[key: string]: string}>;
    /**
     * Do not queue. True means that updated contacts will not have their positions in the queue altered, so contacts that have
     * already been dialed will not be redialed. For new contacts, this parameter has no effect; False means that updated
     * contacts will be re-queued, according to the 'priority' parameter. Only applicable on the creation of a contact, so
     * updating this field will force the contact to be deleted from the contact list and re-uploaded.
     */
    public readonly doNotQueue!: pulumi.Output<boolean | undefined>;
    /**
     * A map of phone number columns to PhoneNumberStatuses, which indicate if the phone number is callable or not.
     */
    public readonly phoneNumberStatuses!: pulumi.Output<outputs.OutboundContactListContactPhoneNumberStatus[] | undefined>;
    /**
     * Contact priority. True means the contact(s) will be dialed next; false means the contact will go to the end of the
     * contact queue. Only applicable on the creation of a contact, so updating this field will force the contact to be deleted
     * from the contact list and re-uploaded.
     */
    public readonly priority!: pulumi.Output<boolean | undefined>;

    /**
     * Create a OutboundContactListContact resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OutboundContactListContactArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OutboundContactListContactArgs | OutboundContactListContactState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OutboundContactListContactState | undefined;
            resourceInputs["callable"] = state ? state.callable : undefined;
            resourceInputs["clearSystemData"] = state ? state.clearSystemData : undefined;
            resourceInputs["contactListId"] = state ? state.contactListId : undefined;
            resourceInputs["contactableStatuses"] = state ? state.contactableStatuses : undefined;
            resourceInputs["data"] = state ? state.data : undefined;
            resourceInputs["doNotQueue"] = state ? state.doNotQueue : undefined;
            resourceInputs["phoneNumberStatuses"] = state ? state.phoneNumberStatuses : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
        } else {
            const args = argsOrState as OutboundContactListContactArgs | undefined;
            if ((!args || args.contactListId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contactListId'");
            }
            if ((!args || args.data === undefined) && !opts.urn) {
                throw new Error("Missing required property 'data'");
            }
            resourceInputs["callable"] = args ? args.callable : undefined;
            resourceInputs["clearSystemData"] = args ? args.clearSystemData : undefined;
            resourceInputs["contactListId"] = args ? args.contactListId : undefined;
            resourceInputs["contactableStatuses"] = args ? args.contactableStatuses : undefined;
            resourceInputs["data"] = args ? args.data : undefined;
            resourceInputs["doNotQueue"] = args ? args.doNotQueue : undefined;
            resourceInputs["phoneNumberStatuses"] = args ? args.phoneNumberStatuses : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OutboundContactListContact.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OutboundContactListContact resources.
 */
export interface OutboundContactListContactState {
    /**
     * Indicates whether or not the contact can be called. Defaults to `false`.
     */
    callable?: pulumi.Input<boolean>;
    /**
     * Clear system data. True means the system columns (attempts, callable status, etc) stored on the contact will be cleared
     * if the contact already exists; false means they won't. Only applicable on the creation of a contact, so updating this
     * field will force the contact to be deleted from the contact list and re-uploaded.
     */
    clearSystemData?: pulumi.Input<boolean>;
    /**
     * The identifier of the contact list containing this contact.
     */
    contactListId?: pulumi.Input<string>;
    /**
     * A map of media types (Voice, SMS and Email) to ContactableStatus, which indicates if the contact can be contacted using
     * the specified media type.
     */
    contactableStatuses?: pulumi.Input<pulumi.Input<inputs.OutboundContactListContactContactableStatus>[]>;
    /**
     * An ordered map of the contact's columns and corresponding values.
     */
    data?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Do not queue. True means that updated contacts will not have their positions in the queue altered, so contacts that have
     * already been dialed will not be redialed. For new contacts, this parameter has no effect; False means that updated
     * contacts will be re-queued, according to the 'priority' parameter. Only applicable on the creation of a contact, so
     * updating this field will force the contact to be deleted from the contact list and re-uploaded.
     */
    doNotQueue?: pulumi.Input<boolean>;
    /**
     * A map of phone number columns to PhoneNumberStatuses, which indicate if the phone number is callable or not.
     */
    phoneNumberStatuses?: pulumi.Input<pulumi.Input<inputs.OutboundContactListContactPhoneNumberStatus>[]>;
    /**
     * Contact priority. True means the contact(s) will be dialed next; false means the contact will go to the end of the
     * contact queue. Only applicable on the creation of a contact, so updating this field will force the contact to be deleted
     * from the contact list and re-uploaded.
     */
    priority?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a OutboundContactListContact resource.
 */
export interface OutboundContactListContactArgs {
    /**
     * Indicates whether or not the contact can be called. Defaults to `false`.
     */
    callable?: pulumi.Input<boolean>;
    /**
     * Clear system data. True means the system columns (attempts, callable status, etc) stored on the contact will be cleared
     * if the contact already exists; false means they won't. Only applicable on the creation of a contact, so updating this
     * field will force the contact to be deleted from the contact list and re-uploaded.
     */
    clearSystemData?: pulumi.Input<boolean>;
    /**
     * The identifier of the contact list containing this contact.
     */
    contactListId: pulumi.Input<string>;
    /**
     * A map of media types (Voice, SMS and Email) to ContactableStatus, which indicates if the contact can be contacted using
     * the specified media type.
     */
    contactableStatuses?: pulumi.Input<pulumi.Input<inputs.OutboundContactListContactContactableStatus>[]>;
    /**
     * An ordered map of the contact's columns and corresponding values.
     */
    data: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Do not queue. True means that updated contacts will not have their positions in the queue altered, so contacts that have
     * already been dialed will not be redialed. For new contacts, this parameter has no effect; False means that updated
     * contacts will be re-queued, according to the 'priority' parameter. Only applicable on the creation of a contact, so
     * updating this field will force the contact to be deleted from the contact list and re-uploaded.
     */
    doNotQueue?: pulumi.Input<boolean>;
    /**
     * A map of phone number columns to PhoneNumberStatuses, which indicate if the phone number is callable or not.
     */
    phoneNumberStatuses?: pulumi.Input<pulumi.Input<inputs.OutboundContactListContactPhoneNumberStatus>[]>;
    /**
     * Contact priority. True means the contact(s) will be dialed next; false means the contact will go to the end of the
     * contact queue. Only applicable on the creation of a contact, so updating this field will force the contact to be deleted
     * from the contact list and re-uploaded.
     */
    priority?: pulumi.Input<boolean>;
}
