// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AuthRole extends pulumi.CustomResource {
    /**
     * Get an existing AuthRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthRoleState, opts?: pulumi.CustomResourceOptions): AuthRole {
        return new AuthRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'genesyscloud:index/authRole:AuthRole';

    /**
     * Returns true if the given object is an instance of AuthRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthRole.__pulumiType;
    }

    /**
     * Internal ID for an existing default role, e.g. 'employee'. This can be set to manage permissions on existing default
     * roles. Note: Changing the default_role_id attribute will cause this auth_role to be dropped and recreated with a new ID.
     */
    public readonly defaultRoleId!: pulumi.Output<string | undefined>;
    /**
     * Role description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Role name. This cannot be modified for default roles.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Role permission policies.
     */
    public readonly permissionPolicies!: pulumi.Output<outputs.AuthRolePermissionPolicy[] | undefined>;
    /**
     * General role permissions. e.g. 'group_creation'
     */
    public readonly permissions!: pulumi.Output<string[] | undefined>;

    /**
     * Create a AuthRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AuthRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthRoleArgs | AuthRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthRoleState | undefined;
            resourceInputs["defaultRoleId"] = state ? state.defaultRoleId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["permissionPolicies"] = state ? state.permissionPolicies : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
        } else {
            const args = argsOrState as AuthRoleArgs | undefined;
            resourceInputs["defaultRoleId"] = args ? args.defaultRoleId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permissionPolicies"] = args ? args.permissionPolicies : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AuthRole.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AuthRole resources.
 */
export interface AuthRoleState {
    /**
     * Internal ID for an existing default role, e.g. 'employee'. This can be set to manage permissions on existing default
     * roles. Note: Changing the default_role_id attribute will cause this auth_role to be dropped and recreated with a new ID.
     */
    defaultRoleId?: pulumi.Input<string>;
    /**
     * Role description.
     */
    description?: pulumi.Input<string>;
    /**
     * Role name. This cannot be modified for default roles.
     */
    name?: pulumi.Input<string>;
    /**
     * Role permission policies.
     */
    permissionPolicies?: pulumi.Input<pulumi.Input<inputs.AuthRolePermissionPolicy>[]>;
    /**
     * General role permissions. e.g. 'group_creation'
     */
    permissions?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a AuthRole resource.
 */
export interface AuthRoleArgs {
    /**
     * Internal ID for an existing default role, e.g. 'employee'. This can be set to manage permissions on existing default
     * roles. Note: Changing the default_role_id attribute will cause this auth_role to be dropped and recreated with a new ID.
     */
    defaultRoleId?: pulumi.Input<string>;
    /**
     * Role description.
     */
    description?: pulumi.Input<string>;
    /**
     * Role name. This cannot be modified for default roles.
     */
    name?: pulumi.Input<string>;
    /**
     * Role permission policies.
     */
    permissionPolicies?: pulumi.Input<pulumi.Input<inputs.AuthRolePermissionPolicy>[]>;
    /**
     * General role permissions. e.g. 'group_creation'
     */
    permissions?: pulumi.Input<pulumi.Input<string>[]>;
}
