// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Flow extends pulumi.CustomResource {
    /**
     * Get an existing Flow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FlowState, opts?: pulumi.CustomResourceOptions): Flow {
        return new Flow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'genesyscloud:index/flow:Flow';

    /**
     * Returns true if the given object is an instance of Flow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Flow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Flow.__pulumiType;
    }

    /**
     * Hash value of the YAML file content. Used to detect changes.
     */
    public readonly fileContentHash!: pulumi.Output<string>;
    /**
     * YAML file path for flow configuration. Note: Changing the flow name will result in the creation of a new flow with a new
     * GUID, while the original flow will persist in your org.
     */
    public readonly filepath!: pulumi.Output<string>;
    /**
     * Will perform a force unlock on an architect flow before beginning the publication process. NOTE: The force unlock
     * publishes the 'draft' architect flow and then publishes the flow named in this resource. This mirrors the behavior found
     * in the archy CLI tool.
     */
    public readonly forceUnlock!: pulumi.Output<boolean | undefined>;
    /**
     * A substitution is a key value pair where the key is the value you want to replace, and the value is the value to
     * substitute in its place.
     */
    public readonly substitutions!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Flow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FlowArgs | FlowState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FlowState | undefined;
            resourceInputs["fileContentHash"] = state ? state.fileContentHash : undefined;
            resourceInputs["filepath"] = state ? state.filepath : undefined;
            resourceInputs["forceUnlock"] = state ? state.forceUnlock : undefined;
            resourceInputs["substitutions"] = state ? state.substitutions : undefined;
        } else {
            const args = argsOrState as FlowArgs | undefined;
            if ((!args || args.fileContentHash === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileContentHash'");
            }
            if ((!args || args.filepath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filepath'");
            }
            resourceInputs["fileContentHash"] = args ? args.fileContentHash : undefined;
            resourceInputs["filepath"] = args ? args.filepath : undefined;
            resourceInputs["forceUnlock"] = args ? args.forceUnlock : undefined;
            resourceInputs["substitutions"] = args ? args.substitutions : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Flow.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Flow resources.
 */
export interface FlowState {
    /**
     * Hash value of the YAML file content. Used to detect changes.
     */
    fileContentHash?: pulumi.Input<string>;
    /**
     * YAML file path for flow configuration. Note: Changing the flow name will result in the creation of a new flow with a new
     * GUID, while the original flow will persist in your org.
     */
    filepath?: pulumi.Input<string>;
    /**
     * Will perform a force unlock on an architect flow before beginning the publication process. NOTE: The force unlock
     * publishes the 'draft' architect flow and then publishes the flow named in this resource. This mirrors the behavior found
     * in the archy CLI tool.
     */
    forceUnlock?: pulumi.Input<boolean>;
    /**
     * A substitution is a key value pair where the key is the value you want to replace, and the value is the value to
     * substitute in its place.
     */
    substitutions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Flow resource.
 */
export interface FlowArgs {
    /**
     * Hash value of the YAML file content. Used to detect changes.
     */
    fileContentHash: pulumi.Input<string>;
    /**
     * YAML file path for flow configuration. Note: Changing the flow name will result in the creation of a new flow with a new
     * GUID, while the original flow will persist in your org.
     */
    filepath: pulumi.Input<string>;
    /**
     * Will perform a force unlock on an architect flow before beginning the publication process. NOTE: The force unlock
     * publishes the 'draft' architect flow and then publishes the flow named in this resource. This mirrors the behavior found
     * in the archy CLI tool.
     */
    forceUnlock?: pulumi.Input<boolean>;
    /**
     * A substitution is a key value pair where the key is the value you want to replace, and the value is the value to
     * substitute in its place.
     */
    substitutions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
