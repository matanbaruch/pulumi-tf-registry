// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IntegrationCredential extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationCredentialState, opts?: pulumi.CustomResourceOptions): IntegrationCredential {
        return new IntegrationCredential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'genesyscloud:index/integrationCredential:IntegrationCredential';

    /**
     * Returns true if the given object is an instance of IntegrationCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationCredential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationCredential.__pulumiType;
    }

    /**
     * Credential type name. Use [GET
     * /api/v2/integrations/credentials/types](https://developer.genesys.cloud/api/rest/v2/integrations/#get-api-v2-integrations-credentials-types)
     * to see the list of available integration credential types.
     */
    public readonly credentialTypeName!: pulumi.Output<string>;
    /**
     * Credential fields. Different credential types require different fields. Missing any correct required fields will result
     * API request failure. Use [GET
     * /api/v2/integrations/credentials/types](https://developer.genesys.cloud/api/rest/v2/integrations/#get-api-v2-integrations-credentials-types)
     * to check out the specific credential type schema to find out what fields are required.
     */
    public readonly fields!: pulumi.Output<{[key: string]: string}>;
    /**
     * Credential name.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a IntegrationCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationCredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationCredentialArgs | IntegrationCredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationCredentialState | undefined;
            resourceInputs["credentialTypeName"] = state ? state.credentialTypeName : undefined;
            resourceInputs["fields"] = state ? state.fields : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as IntegrationCredentialArgs | undefined;
            if ((!args || args.credentialTypeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credentialTypeName'");
            }
            resourceInputs["credentialTypeName"] = args ? args.credentialTypeName : undefined;
            resourceInputs["fields"] = args?.fields ? pulumi.secret(args.fields) : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["fields"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(IntegrationCredential.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IntegrationCredential resources.
 */
export interface IntegrationCredentialState {
    /**
     * Credential type name. Use [GET
     * /api/v2/integrations/credentials/types](https://developer.genesys.cloud/api/rest/v2/integrations/#get-api-v2-integrations-credentials-types)
     * to see the list of available integration credential types.
     */
    credentialTypeName?: pulumi.Input<string>;
    /**
     * Credential fields. Different credential types require different fields. Missing any correct required fields will result
     * API request failure. Use [GET
     * /api/v2/integrations/credentials/types](https://developer.genesys.cloud/api/rest/v2/integrations/#get-api-v2-integrations-credentials-types)
     * to check out the specific credential type schema to find out what fields are required.
     */
    fields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Credential name.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IntegrationCredential resource.
 */
export interface IntegrationCredentialArgs {
    /**
     * Credential type name. Use [GET
     * /api/v2/integrations/credentials/types](https://developer.genesys.cloud/api/rest/v2/integrations/#get-api-v2-integrations-credentials-types)
     * to see the list of available integration credential types.
     */
    credentialTypeName: pulumi.Input<string>;
    /**
     * Credential fields. Different credential types require different fields. Missing any correct required fields will result
     * API request failure. Use [GET
     * /api/v2/integrations/credentials/types](https://developer.genesys.cloud/api/rest/v2/integrations/#get-api-v2-integrations-credentials-types)
     * to check out the specific credential type schema to find out what fields are required.
     */
    fields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Credential name.
     */
    name?: pulumi.Input<string>;
}
