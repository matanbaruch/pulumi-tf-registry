// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IntegrationCustomAuthAction extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationCustomAuthAction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationCustomAuthActionState, opts?: pulumi.CustomResourceOptions): IntegrationCustomAuthAction {
        return new IntegrationCustomAuthAction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'genesyscloud:index/integrationCustomAuthAction:IntegrationCustomAuthAction';

    /**
     * Returns true if the given object is an instance of IntegrationCustomAuthAction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationCustomAuthAction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationCustomAuthAction.__pulumiType;
    }

    /**
     * Configuration of outbound request.
     */
    public readonly configRequest!: pulumi.Output<outputs.IntegrationCustomAuthActionConfigRequest | undefined>;
    /**
     * Configuration of response processing.
     */
    public readonly configResponse!: pulumi.Output<outputs.IntegrationCustomAuthActionConfigResponse | undefined>;
    /**
     * The ID of the integration this action is associated with. The integration is required to be of type
     * `custom-rest-actions` and its credentials type set as `userDefinedOAuth`.
     */
    public readonly integrationId!: pulumi.Output<string>;
    /**
     * Name of the action to override the default name. Can be up to 256 characters long
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a IntegrationCustomAuthAction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationCustomAuthActionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationCustomAuthActionArgs | IntegrationCustomAuthActionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationCustomAuthActionState | undefined;
            resourceInputs["configRequest"] = state ? state.configRequest : undefined;
            resourceInputs["configResponse"] = state ? state.configResponse : undefined;
            resourceInputs["integrationId"] = state ? state.integrationId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as IntegrationCustomAuthActionArgs | undefined;
            if ((!args || args.integrationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integrationId'");
            }
            resourceInputs["configRequest"] = args ? args.configRequest : undefined;
            resourceInputs["configResponse"] = args ? args.configResponse : undefined;
            resourceInputs["integrationId"] = args ? args.integrationId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IntegrationCustomAuthAction.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IntegrationCustomAuthAction resources.
 */
export interface IntegrationCustomAuthActionState {
    /**
     * Configuration of outbound request.
     */
    configRequest?: pulumi.Input<inputs.IntegrationCustomAuthActionConfigRequest>;
    /**
     * Configuration of response processing.
     */
    configResponse?: pulumi.Input<inputs.IntegrationCustomAuthActionConfigResponse>;
    /**
     * The ID of the integration this action is associated with. The integration is required to be of type
     * `custom-rest-actions` and its credentials type set as `userDefinedOAuth`.
     */
    integrationId?: pulumi.Input<string>;
    /**
     * Name of the action to override the default name. Can be up to 256 characters long
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IntegrationCustomAuthAction resource.
 */
export interface IntegrationCustomAuthActionArgs {
    /**
     * Configuration of outbound request.
     */
    configRequest?: pulumi.Input<inputs.IntegrationCustomAuthActionConfigRequest>;
    /**
     * Configuration of response processing.
     */
    configResponse?: pulumi.Input<inputs.IntegrationCustomAuthActionConfigResponse>;
    /**
     * The ID of the integration this action is associated with. The integration is required to be of type
     * `custom-rest-actions` and its credentials type set as `userDefinedOAuth`.
     */
    integrationId: pulumi.Input<string>;
    /**
     * Name of the action to override the default name. Can be up to 256 characters long
     */
    name?: pulumi.Input<string>;
}
