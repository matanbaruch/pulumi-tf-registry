// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class JourneySegment extends pulumi.CustomResource {
    /**
     * Get an existing JourneySegment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: JourneySegmentState, opts?: pulumi.CustomResourceOptions): JourneySegment {
        return new JourneySegment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'genesyscloud:index/journeySegment:JourneySegment';

    /**
     * Returns true if the given object is an instance of JourneySegment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is JourneySegment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === JourneySegment.__pulumiType;
    }

    /**
     * The hexadecimal color value of the segment.
     */
    public readonly color!: pulumi.Output<string>;
    /**
     * The context of the segment.
     */
    public readonly context!: pulumi.Output<outputs.JourneySegmentContext | undefined>;
    /**
     * A description of the segment.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The display name of the segment.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Whether or not the segment is active. Defaults to `true`.
     */
    public readonly isActive!: pulumi.Output<boolean | undefined>;
    /**
     * The pattern of rules defining the segment.
     */
    public readonly journey!: pulumi.Output<outputs.JourneySegmentJourney | undefined>;
    /**
     * The target entity that a segment applies to. Valid values: Session
     */
    public readonly scope!: pulumi.Output<string>;
    /**
     * Whether or not the segment should be displayed to agent/supervisor users.
     */
    public readonly shouldDisplayToAgent!: pulumi.Output<boolean | undefined>;

    /**
     * Create a JourneySegment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: JourneySegmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: JourneySegmentArgs | JourneySegmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as JourneySegmentState | undefined;
            resourceInputs["color"] = state ? state.color : undefined;
            resourceInputs["context"] = state ? state.context : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["isActive"] = state ? state.isActive : undefined;
            resourceInputs["journey"] = state ? state.journey : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["shouldDisplayToAgent"] = state ? state.shouldDisplayToAgent : undefined;
        } else {
            const args = argsOrState as JourneySegmentArgs | undefined;
            if ((!args || args.color === undefined) && !opts.urn) {
                throw new Error("Missing required property 'color'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            resourceInputs["color"] = args ? args.color : undefined;
            resourceInputs["context"] = args ? args.context : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["isActive"] = args ? args.isActive : undefined;
            resourceInputs["journey"] = args ? args.journey : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["shouldDisplayToAgent"] = args ? args.shouldDisplayToAgent : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(JourneySegment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering JourneySegment resources.
 */
export interface JourneySegmentState {
    /**
     * The hexadecimal color value of the segment.
     */
    color?: pulumi.Input<string>;
    /**
     * The context of the segment.
     */
    context?: pulumi.Input<inputs.JourneySegmentContext>;
    /**
     * A description of the segment.
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the segment.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Whether or not the segment is active. Defaults to `true`.
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * The pattern of rules defining the segment.
     */
    journey?: pulumi.Input<inputs.JourneySegmentJourney>;
    /**
     * The target entity that a segment applies to. Valid values: Session
     */
    scope?: pulumi.Input<string>;
    /**
     * Whether or not the segment should be displayed to agent/supervisor users.
     */
    shouldDisplayToAgent?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a JourneySegment resource.
 */
export interface JourneySegmentArgs {
    /**
     * The hexadecimal color value of the segment.
     */
    color: pulumi.Input<string>;
    /**
     * The context of the segment.
     */
    context?: pulumi.Input<inputs.JourneySegmentContext>;
    /**
     * A description of the segment.
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the segment.
     */
    displayName: pulumi.Input<string>;
    /**
     * Whether or not the segment is active. Defaults to `true`.
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * The pattern of rules defining the segment.
     */
    journey?: pulumi.Input<inputs.JourneySegmentJourney>;
    /**
     * The target entity that a segment applies to. Valid values: Session
     */
    scope: pulumi.Input<string>;
    /**
     * Whether or not the segment should be displayed to agent/supervisor users.
     */
    shouldDisplayToAgent?: pulumi.Input<boolean>;
}
