// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OutboundFilespecificationtemplate extends pulumi.CustomResource {
    /**
     * Get an existing OutboundFilespecificationtemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OutboundFilespecificationtemplateState, opts?: pulumi.CustomResourceOptions): OutboundFilespecificationtemplate {
        return new OutboundFilespecificationtemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'genesyscloud:index/outboundFilespecificationtemplate:OutboundFilespecificationtemplate';

    /**
     * Returns true if the given object is an instance of OutboundFilespecificationtemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OutboundFilespecificationtemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OutboundFilespecificationtemplate.__pulumiType;
    }

    /**
     * Columns specification
     */
    public readonly columnInformations!: pulumi.Output<outputs.OutboundFilespecificationtemplateColumnInformation[] | undefined>;
    /**
     * Kind of delimiter Defaults to `Comma`.
     */
    public readonly delimiter!: pulumi.Output<string | undefined>;
    /**
     * Delimiter character, used only when delimiter="Custom"
     */
    public readonly delimiterValue!: pulumi.Output<string | undefined>;
    /**
     * Description of the file specification template
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * File format
     */
    public readonly format!: pulumi.Output<string>;
    /**
     * If true indicates that delimited file has a header row, which can provide column names
     */
    public readonly header!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the File Specification template.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Number of heading lines to be skipped
     */
    public readonly numberOfHeaderLinesSkipped!: pulumi.Output<number | undefined>;
    /**
     * Number of trailing lines to be skipped
     */
    public readonly numberOfTrailerLinesSkipped!: pulumi.Output<number | undefined>;
    /**
     * Preprocessing rule
     */
    public readonly preprocessingRules!: pulumi.Output<outputs.OutboundFilespecificationtemplatePreprocessingRule[] | undefined>;

    /**
     * Create a OutboundFilespecificationtemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OutboundFilespecificationtemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OutboundFilespecificationtemplateArgs | OutboundFilespecificationtemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OutboundFilespecificationtemplateState | undefined;
            resourceInputs["columnInformations"] = state ? state.columnInformations : undefined;
            resourceInputs["delimiter"] = state ? state.delimiter : undefined;
            resourceInputs["delimiterValue"] = state ? state.delimiterValue : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["format"] = state ? state.format : undefined;
            resourceInputs["header"] = state ? state.header : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numberOfHeaderLinesSkipped"] = state ? state.numberOfHeaderLinesSkipped : undefined;
            resourceInputs["numberOfTrailerLinesSkipped"] = state ? state.numberOfTrailerLinesSkipped : undefined;
            resourceInputs["preprocessingRules"] = state ? state.preprocessingRules : undefined;
        } else {
            const args = argsOrState as OutboundFilespecificationtemplateArgs | undefined;
            if ((!args || args.format === undefined) && !opts.urn) {
                throw new Error("Missing required property 'format'");
            }
            resourceInputs["columnInformations"] = args ? args.columnInformations : undefined;
            resourceInputs["delimiter"] = args ? args.delimiter : undefined;
            resourceInputs["delimiterValue"] = args ? args.delimiterValue : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["format"] = args ? args.format : undefined;
            resourceInputs["header"] = args ? args.header : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numberOfHeaderLinesSkipped"] = args ? args.numberOfHeaderLinesSkipped : undefined;
            resourceInputs["numberOfTrailerLinesSkipped"] = args ? args.numberOfTrailerLinesSkipped : undefined;
            resourceInputs["preprocessingRules"] = args ? args.preprocessingRules : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OutboundFilespecificationtemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OutboundFilespecificationtemplate resources.
 */
export interface OutboundFilespecificationtemplateState {
    /**
     * Columns specification
     */
    columnInformations?: pulumi.Input<pulumi.Input<inputs.OutboundFilespecificationtemplateColumnInformation>[]>;
    /**
     * Kind of delimiter Defaults to `Comma`.
     */
    delimiter?: pulumi.Input<string>;
    /**
     * Delimiter character, used only when delimiter="Custom"
     */
    delimiterValue?: pulumi.Input<string>;
    /**
     * Description of the file specification template
     */
    description?: pulumi.Input<string>;
    /**
     * File format
     */
    format?: pulumi.Input<string>;
    /**
     * If true indicates that delimited file has a header row, which can provide column names
     */
    header?: pulumi.Input<boolean>;
    /**
     * The name of the File Specification template.
     */
    name?: pulumi.Input<string>;
    /**
     * Number of heading lines to be skipped
     */
    numberOfHeaderLinesSkipped?: pulumi.Input<number>;
    /**
     * Number of trailing lines to be skipped
     */
    numberOfTrailerLinesSkipped?: pulumi.Input<number>;
    /**
     * Preprocessing rule
     */
    preprocessingRules?: pulumi.Input<pulumi.Input<inputs.OutboundFilespecificationtemplatePreprocessingRule>[]>;
}

/**
 * The set of arguments for constructing a OutboundFilespecificationtemplate resource.
 */
export interface OutboundFilespecificationtemplateArgs {
    /**
     * Columns specification
     */
    columnInformations?: pulumi.Input<pulumi.Input<inputs.OutboundFilespecificationtemplateColumnInformation>[]>;
    /**
     * Kind of delimiter Defaults to `Comma`.
     */
    delimiter?: pulumi.Input<string>;
    /**
     * Delimiter character, used only when delimiter="Custom"
     */
    delimiterValue?: pulumi.Input<string>;
    /**
     * Description of the file specification template
     */
    description?: pulumi.Input<string>;
    /**
     * File format
     */
    format: pulumi.Input<string>;
    /**
     * If true indicates that delimited file has a header row, which can provide column names
     */
    header?: pulumi.Input<boolean>;
    /**
     * The name of the File Specification template.
     */
    name?: pulumi.Input<string>;
    /**
     * Number of heading lines to be skipped
     */
    numberOfHeaderLinesSkipped?: pulumi.Input<number>;
    /**
     * Number of trailing lines to be skipped
     */
    numberOfTrailerLinesSkipped?: pulumi.Input<number>;
    /**
     * Preprocessing rule
     */
    preprocessingRules?: pulumi.Input<pulumi.Input<inputs.OutboundFilespecificationtemplatePreprocessingRule>[]>;
}
