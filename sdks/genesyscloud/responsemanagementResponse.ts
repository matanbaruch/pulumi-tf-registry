// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ResponsemanagementResponse extends pulumi.CustomResource {
    /**
     * Get an existing ResponsemanagementResponse resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResponsemanagementResponseState, opts?: pulumi.CustomResourceOptions): ResponsemanagementResponse {
        return new ResponsemanagementResponse(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'genesyscloud:index/responsemanagementResponse:ResponsemanagementResponse';

    /**
     * Returns true if the given object is an instance of ResponsemanagementResponse.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResponsemanagementResponse {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResponsemanagementResponse.__pulumiType;
    }

    /**
     * Assets used in the response
     */
    public readonly assetIds!: pulumi.Output<string[] | undefined>;
    /**
     * Footer template identifies the Footer type and its footerUsage
     */
    public readonly footer!: pulumi.Output<outputs.ResponsemanagementResponseFooter | undefined>;
    /**
     * The interaction type for this response.
     */
    public readonly interactionType!: pulumi.Output<string | undefined>;
    /**
     * One or more libraries response is associated with. Changing the library IDs will result in the resource being recreated
     */
    public readonly libraryIds!: pulumi.Output<string[]>;
    /**
     * An optional messaging template definition for responseType.MessagingTemplate.
     */
    public readonly messagingTemplate!: pulumi.Output<outputs.ResponsemanagementResponseMessagingTemplate | undefined>;
    /**
     * Name of the responsemanagement response
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The response type represented by the response.
     */
    public readonly responseType!: pulumi.Output<string | undefined>;
    /**
     * Details about any text substitutions used in the texts for this response.
     */
    public readonly substitutions!: pulumi.Output<outputs.ResponsemanagementResponseSubstitution[] | undefined>;
    /**
     * Metadata about the text substitutions in json schema format.
     */
    public readonly substitutionsSchemaId!: pulumi.Output<string | undefined>;
    /**
     * One or more texts associated with the response.
     */
    public readonly texts!: pulumi.Output<outputs.ResponsemanagementResponseText[]>;

    /**
     * Create a ResponsemanagementResponse resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResponsemanagementResponseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResponsemanagementResponseArgs | ResponsemanagementResponseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResponsemanagementResponseState | undefined;
            resourceInputs["assetIds"] = state ? state.assetIds : undefined;
            resourceInputs["footer"] = state ? state.footer : undefined;
            resourceInputs["interactionType"] = state ? state.interactionType : undefined;
            resourceInputs["libraryIds"] = state ? state.libraryIds : undefined;
            resourceInputs["messagingTemplate"] = state ? state.messagingTemplate : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["responseType"] = state ? state.responseType : undefined;
            resourceInputs["substitutions"] = state ? state.substitutions : undefined;
            resourceInputs["substitutionsSchemaId"] = state ? state.substitutionsSchemaId : undefined;
            resourceInputs["texts"] = state ? state.texts : undefined;
        } else {
            const args = argsOrState as ResponsemanagementResponseArgs | undefined;
            if ((!args || args.libraryIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'libraryIds'");
            }
            if ((!args || args.texts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'texts'");
            }
            resourceInputs["assetIds"] = args ? args.assetIds : undefined;
            resourceInputs["footer"] = args ? args.footer : undefined;
            resourceInputs["interactionType"] = args ? args.interactionType : undefined;
            resourceInputs["libraryIds"] = args ? args.libraryIds : undefined;
            resourceInputs["messagingTemplate"] = args ? args.messagingTemplate : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["responseType"] = args ? args.responseType : undefined;
            resourceInputs["substitutions"] = args ? args.substitutions : undefined;
            resourceInputs["substitutionsSchemaId"] = args ? args.substitutionsSchemaId : undefined;
            resourceInputs["texts"] = args ? args.texts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResponsemanagementResponse.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ResponsemanagementResponse resources.
 */
export interface ResponsemanagementResponseState {
    /**
     * Assets used in the response
     */
    assetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Footer template identifies the Footer type and its footerUsage
     */
    footer?: pulumi.Input<inputs.ResponsemanagementResponseFooter>;
    /**
     * The interaction type for this response.
     */
    interactionType?: pulumi.Input<string>;
    /**
     * One or more libraries response is associated with. Changing the library IDs will result in the resource being recreated
     */
    libraryIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An optional messaging template definition for responseType.MessagingTemplate.
     */
    messagingTemplate?: pulumi.Input<inputs.ResponsemanagementResponseMessagingTemplate>;
    /**
     * Name of the responsemanagement response
     */
    name?: pulumi.Input<string>;
    /**
     * The response type represented by the response.
     */
    responseType?: pulumi.Input<string>;
    /**
     * Details about any text substitutions used in the texts for this response.
     */
    substitutions?: pulumi.Input<pulumi.Input<inputs.ResponsemanagementResponseSubstitution>[]>;
    /**
     * Metadata about the text substitutions in json schema format.
     */
    substitutionsSchemaId?: pulumi.Input<string>;
    /**
     * One or more texts associated with the response.
     */
    texts?: pulumi.Input<pulumi.Input<inputs.ResponsemanagementResponseText>[]>;
}

/**
 * The set of arguments for constructing a ResponsemanagementResponse resource.
 */
export interface ResponsemanagementResponseArgs {
    /**
     * Assets used in the response
     */
    assetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Footer template identifies the Footer type and its footerUsage
     */
    footer?: pulumi.Input<inputs.ResponsemanagementResponseFooter>;
    /**
     * The interaction type for this response.
     */
    interactionType?: pulumi.Input<string>;
    /**
     * One or more libraries response is associated with. Changing the library IDs will result in the resource being recreated
     */
    libraryIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An optional messaging template definition for responseType.MessagingTemplate.
     */
    messagingTemplate?: pulumi.Input<inputs.ResponsemanagementResponseMessagingTemplate>;
    /**
     * Name of the responsemanagement response
     */
    name?: pulumi.Input<string>;
    /**
     * The response type represented by the response.
     */
    responseType?: pulumi.Input<string>;
    /**
     * Details about any text substitutions used in the texts for this response.
     */
    substitutions?: pulumi.Input<pulumi.Input<inputs.ResponsemanagementResponseSubstitution>[]>;
    /**
     * Metadata about the text substitutions in json schema format.
     */
    substitutionsSchemaId?: pulumi.Input<string>;
    /**
     * One or more texts associated with the response.
     */
    texts: pulumi.Input<pulumi.Input<inputs.ResponsemanagementResponseText>[]>;
}
