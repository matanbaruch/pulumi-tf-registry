// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OauthClient extends pulumi.CustomResource {
    /**
     * Get an existing OauthClient resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OauthClientState, opts?: pulumi.CustomResourceOptions): OauthClient {
        return new OauthClient(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'genesyscloud:index/oauthClient:OauthClient';

    /**
     * Returns true if the given object is an instance of OauthClient.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OauthClient {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OauthClient.__pulumiType;
    }

    /**
     * The number of seconds, between 5mins and 48hrs, until tokens created with this client expire. Only clients using Genesys
     * Cloud SCIM (Identity Management) can have a maximum duration of 38880000secs/450 days. Defaults to `86400`.
     */
    public readonly accessTokenValiditySeconds!: pulumi.Output<number | undefined>;
    /**
     * The OAuth Grant/Client type supported by this client (CODE | TOKEN | SAML2BEARER | PASSWORD | CLIENT-CREDENTIALS).
     */
    public readonly authorizedGrantType!: pulumi.Output<string>;
    /**
     * The description of the OAuth client.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The Id of the created Integration Credential using this new OAuth Client.
     */
    public /*out*/ readonly integrationCredentialId!: pulumi.Output<string>;
    /**
     * Optionally, a Name of a Integration Credential (with credential type pureCloudOAuthClient) to be created using this new
     * OAuth Client.
     */
    public readonly integrationCredentialName!: pulumi.Output<string>;
    /**
     * The name of the OAuth client.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of allowed callbacks for this client. For example: https://myapp.example.com/auth/callback.
     */
    public readonly registeredRedirectUris!: pulumi.Output<string[] | undefined>;
    public readonly roles!: pulumi.Output<outputs.OauthClientRole[] | undefined>;
    /**
     * The scopes requested by this client. Scopes must be set for clients not using the CLIENT-CREDENTIALS grant.
     */
    public readonly scopes!: pulumi.Output<string[] | undefined>;
    /**
     * The state of the OAuth client (active | inactive). Access tokens cannot be created with inactive clients. Defaults to
     * `active`.
     */
    public readonly state!: pulumi.Output<string | undefined>;

    /**
     * Create a OauthClient resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OauthClientArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OauthClientArgs | OauthClientState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OauthClientState | undefined;
            resourceInputs["accessTokenValiditySeconds"] = state ? state.accessTokenValiditySeconds : undefined;
            resourceInputs["authorizedGrantType"] = state ? state.authorizedGrantType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["integrationCredentialId"] = state ? state.integrationCredentialId : undefined;
            resourceInputs["integrationCredentialName"] = state ? state.integrationCredentialName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["registeredRedirectUris"] = state ? state.registeredRedirectUris : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as OauthClientArgs | undefined;
            if ((!args || args.authorizedGrantType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizedGrantType'");
            }
            resourceInputs["accessTokenValiditySeconds"] = args ? args.accessTokenValiditySeconds : undefined;
            resourceInputs["authorizedGrantType"] = args ? args.authorizedGrantType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["integrationCredentialName"] = args ? args.integrationCredentialName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["registeredRedirectUris"] = args ? args.registeredRedirectUris : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["integrationCredentialId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OauthClient.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OauthClient resources.
 */
export interface OauthClientState {
    /**
     * The number of seconds, between 5mins and 48hrs, until tokens created with this client expire. Only clients using Genesys
     * Cloud SCIM (Identity Management) can have a maximum duration of 38880000secs/450 days. Defaults to `86400`.
     */
    accessTokenValiditySeconds?: pulumi.Input<number>;
    /**
     * The OAuth Grant/Client type supported by this client (CODE | TOKEN | SAML2BEARER | PASSWORD | CLIENT-CREDENTIALS).
     */
    authorizedGrantType?: pulumi.Input<string>;
    /**
     * The description of the OAuth client.
     */
    description?: pulumi.Input<string>;
    /**
     * The Id of the created Integration Credential using this new OAuth Client.
     */
    integrationCredentialId?: pulumi.Input<string>;
    /**
     * Optionally, a Name of a Integration Credential (with credential type pureCloudOAuthClient) to be created using this new
     * OAuth Client.
     */
    integrationCredentialName?: pulumi.Input<string>;
    /**
     * The name of the OAuth client.
     */
    name?: pulumi.Input<string>;
    /**
     * List of allowed callbacks for this client. For example: https://myapp.example.com/auth/callback.
     */
    registeredRedirectUris?: pulumi.Input<pulumi.Input<string>[]>;
    roles?: pulumi.Input<pulumi.Input<inputs.OauthClientRole>[]>;
    /**
     * The scopes requested by this client. Scopes must be set for clients not using the CLIENT-CREDENTIALS grant.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The state of the OAuth client (active | inactive). Access tokens cannot be created with inactive clients. Defaults to
     * `active`.
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OauthClient resource.
 */
export interface OauthClientArgs {
    /**
     * The number of seconds, between 5mins and 48hrs, until tokens created with this client expire. Only clients using Genesys
     * Cloud SCIM (Identity Management) can have a maximum duration of 38880000secs/450 days. Defaults to `86400`.
     */
    accessTokenValiditySeconds?: pulumi.Input<number>;
    /**
     * The OAuth Grant/Client type supported by this client (CODE | TOKEN | SAML2BEARER | PASSWORD | CLIENT-CREDENTIALS).
     */
    authorizedGrantType: pulumi.Input<string>;
    /**
     * The description of the OAuth client.
     */
    description?: pulumi.Input<string>;
    /**
     * Optionally, a Name of a Integration Credential (with credential type pureCloudOAuthClient) to be created using this new
     * OAuth Client.
     */
    integrationCredentialName?: pulumi.Input<string>;
    /**
     * The name of the OAuth client.
     */
    name?: pulumi.Input<string>;
    /**
     * List of allowed callbacks for this client. For example: https://myapp.example.com/auth/callback.
     */
    registeredRedirectUris?: pulumi.Input<pulumi.Input<string>[]>;
    roles?: pulumi.Input<pulumi.Input<inputs.OauthClientRole>[]>;
    /**
     * The scopes requested by this client. Scopes must be set for clients not using the CLIENT-CREDENTIALS grant.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The state of the OAuth client (active | inactive). Access tokens cannot be created with inactive clients. Defaults to
     * `active`.
     */
    state?: pulumi.Input<string>;
}
