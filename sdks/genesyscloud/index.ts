// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ArchitectDatatableArgs, ArchitectDatatableState } from "./architectDatatable";
export type ArchitectDatatable = import("./architectDatatable").ArchitectDatatable;
export const ArchitectDatatable: typeof import("./architectDatatable").ArchitectDatatable = null as any;
utilities.lazyLoad(exports, ["ArchitectDatatable"], () => require("./architectDatatable"));

export { ArchitectDatatableRowArgs, ArchitectDatatableRowState } from "./architectDatatableRow";
export type ArchitectDatatableRow = import("./architectDatatableRow").ArchitectDatatableRow;
export const ArchitectDatatableRow: typeof import("./architectDatatableRow").ArchitectDatatableRow = null as any;
utilities.lazyLoad(exports, ["ArchitectDatatableRow"], () => require("./architectDatatableRow"));

export { ArchitectEmergencygroupArgs, ArchitectEmergencygroupState } from "./architectEmergencygroup";
export type ArchitectEmergencygroup = import("./architectEmergencygroup").ArchitectEmergencygroup;
export const ArchitectEmergencygroup: typeof import("./architectEmergencygroup").ArchitectEmergencygroup = null as any;
utilities.lazyLoad(exports, ["ArchitectEmergencygroup"], () => require("./architectEmergencygroup"));

export { ArchitectGrammarArgs, ArchitectGrammarState } from "./architectGrammar";
export type ArchitectGrammar = import("./architectGrammar").ArchitectGrammar;
export const ArchitectGrammar: typeof import("./architectGrammar").ArchitectGrammar = null as any;
utilities.lazyLoad(exports, ["ArchitectGrammar"], () => require("./architectGrammar"));

export { ArchitectGrammarLanguageArgs, ArchitectGrammarLanguageState } from "./architectGrammarLanguage";
export type ArchitectGrammarLanguage = import("./architectGrammarLanguage").ArchitectGrammarLanguage;
export const ArchitectGrammarLanguage: typeof import("./architectGrammarLanguage").ArchitectGrammarLanguage = null as any;
utilities.lazyLoad(exports, ["ArchitectGrammarLanguage"], () => require("./architectGrammarLanguage"));

export { ArchitectIvrArgs, ArchitectIvrState } from "./architectIvr";
export type ArchitectIvr = import("./architectIvr").ArchitectIvr;
export const ArchitectIvr: typeof import("./architectIvr").ArchitectIvr = null as any;
utilities.lazyLoad(exports, ["ArchitectIvr"], () => require("./architectIvr"));

export { ArchitectSchedulegroupsArgs, ArchitectSchedulegroupsState } from "./architectSchedulegroups";
export type ArchitectSchedulegroups = import("./architectSchedulegroups").ArchitectSchedulegroups;
export const ArchitectSchedulegroups: typeof import("./architectSchedulegroups").ArchitectSchedulegroups = null as any;
utilities.lazyLoad(exports, ["ArchitectSchedulegroups"], () => require("./architectSchedulegroups"));

export { ArchitectSchedulesArgs, ArchitectSchedulesState } from "./architectSchedules";
export type ArchitectSchedules = import("./architectSchedules").ArchitectSchedules;
export const ArchitectSchedules: typeof import("./architectSchedules").ArchitectSchedules = null as any;
utilities.lazyLoad(exports, ["ArchitectSchedules"], () => require("./architectSchedules"));

export { ArchitectUserPromptArgs, ArchitectUserPromptState } from "./architectUserPrompt";
export type ArchitectUserPrompt = import("./architectUserPrompt").ArchitectUserPrompt;
export const ArchitectUserPrompt: typeof import("./architectUserPrompt").ArchitectUserPrompt = null as any;
utilities.lazyLoad(exports, ["ArchitectUserPrompt"], () => require("./architectUserPrompt"));

export { AuthDivisionArgs, AuthDivisionState } from "./authDivision";
export type AuthDivision = import("./authDivision").AuthDivision;
export const AuthDivision: typeof import("./authDivision").AuthDivision = null as any;
utilities.lazyLoad(exports, ["AuthDivision"], () => require("./authDivision"));

export { AuthRoleArgs, AuthRoleState } from "./authRole";
export type AuthRole = import("./authRole").AuthRole;
export const AuthRole: typeof import("./authRole").AuthRole = null as any;
utilities.lazyLoad(exports, ["AuthRole"], () => require("./authRole"));

export { ConversationsMessagingIntegrationsInstagramArgs, ConversationsMessagingIntegrationsInstagramState } from "./conversationsMessagingIntegrationsInstagram";
export type ConversationsMessagingIntegrationsInstagram = import("./conversationsMessagingIntegrationsInstagram").ConversationsMessagingIntegrationsInstagram;
export const ConversationsMessagingIntegrationsInstagram: typeof import("./conversationsMessagingIntegrationsInstagram").ConversationsMessagingIntegrationsInstagram = null as any;
utilities.lazyLoad(exports, ["ConversationsMessagingIntegrationsInstagram"], () => require("./conversationsMessagingIntegrationsInstagram"));

export { ConversationsMessagingSettingsArgs, ConversationsMessagingSettingsState } from "./conversationsMessagingSettings";
export type ConversationsMessagingSettings = import("./conversationsMessagingSettings").ConversationsMessagingSettings;
export const ConversationsMessagingSettings: typeof import("./conversationsMessagingSettings").ConversationsMessagingSettings = null as any;
utilities.lazyLoad(exports, ["ConversationsMessagingSettings"], () => require("./conversationsMessagingSettings"));

export { ConversationsMessagingSettingsDefaultArgs, ConversationsMessagingSettingsDefaultState } from "./conversationsMessagingSettingsDefault";
export type ConversationsMessagingSettingsDefault = import("./conversationsMessagingSettingsDefault").ConversationsMessagingSettingsDefault;
export const ConversationsMessagingSettingsDefault: typeof import("./conversationsMessagingSettingsDefault").ConversationsMessagingSettingsDefault = null as any;
utilities.lazyLoad(exports, ["ConversationsMessagingSettingsDefault"], () => require("./conversationsMessagingSettingsDefault"));

export { ConversationsMessagingSupportedcontentArgs, ConversationsMessagingSupportedcontentState } from "./conversationsMessagingSupportedcontent";
export type ConversationsMessagingSupportedcontent = import("./conversationsMessagingSupportedcontent").ConversationsMessagingSupportedcontent;
export const ConversationsMessagingSupportedcontent: typeof import("./conversationsMessagingSupportedcontent").ConversationsMessagingSupportedcontent = null as any;
utilities.lazyLoad(exports, ["ConversationsMessagingSupportedcontent"], () => require("./conversationsMessagingSupportedcontent"));

export { EmployeeperformanceExternalmetricsDefinitionsArgs, EmployeeperformanceExternalmetricsDefinitionsState } from "./employeeperformanceExternalmetricsDefinitions";
export type EmployeeperformanceExternalmetricsDefinitions = import("./employeeperformanceExternalmetricsDefinitions").EmployeeperformanceExternalmetricsDefinitions;
export const EmployeeperformanceExternalmetricsDefinitions: typeof import("./employeeperformanceExternalmetricsDefinitions").EmployeeperformanceExternalmetricsDefinitions = null as any;
utilities.lazyLoad(exports, ["EmployeeperformanceExternalmetricsDefinitions"], () => require("./employeeperformanceExternalmetricsDefinitions"));

export { ExternalcontactsContactArgs, ExternalcontactsContactState } from "./externalcontactsContact";
export type ExternalcontactsContact = import("./externalcontactsContact").ExternalcontactsContact;
export const ExternalcontactsContact: typeof import("./externalcontactsContact").ExternalcontactsContact = null as any;
utilities.lazyLoad(exports, ["ExternalcontactsContact"], () => require("./externalcontactsContact"));

export { FlowArgs, FlowState } from "./flow";
export type Flow = import("./flow").Flow;
export const Flow: typeof import("./flow").Flow = null as any;
utilities.lazyLoad(exports, ["Flow"], () => require("./flow"));

export { FlowLoglevelArgs, FlowLoglevelState } from "./flowLoglevel";
export type FlowLoglevel = import("./flowLoglevel").FlowLoglevel;
export const FlowLoglevel: typeof import("./flowLoglevel").FlowLoglevel = null as any;
utilities.lazyLoad(exports, ["FlowLoglevel"], () => require("./flowLoglevel"));

export { FlowMilestoneArgs, FlowMilestoneState } from "./flowMilestone";
export type FlowMilestone = import("./flowMilestone").FlowMilestone;
export const FlowMilestone: typeof import("./flowMilestone").FlowMilestone = null as any;
utilities.lazyLoad(exports, ["FlowMilestone"], () => require("./flowMilestone"));

export { FlowOutcomeArgs, FlowOutcomeState } from "./flowOutcome";
export type FlowOutcome = import("./flowOutcome").FlowOutcome;
export const FlowOutcome: typeof import("./flowOutcome").FlowOutcome = null as any;
utilities.lazyLoad(exports, ["FlowOutcome"], () => require("./flowOutcome"));

export { GetArchitectDatatableArgs, GetArchitectDatatableResult, GetArchitectDatatableOutputArgs } from "./getArchitectDatatable";
export const getArchitectDatatable: typeof import("./getArchitectDatatable").getArchitectDatatable = null as any;
export const getArchitectDatatableOutput: typeof import("./getArchitectDatatable").getArchitectDatatableOutput = null as any;
utilities.lazyLoad(exports, ["getArchitectDatatable","getArchitectDatatableOutput"], () => require("./getArchitectDatatable"));

export { GetArchitectEmergencygroupArgs, GetArchitectEmergencygroupResult, GetArchitectEmergencygroupOutputArgs } from "./getArchitectEmergencygroup";
export const getArchitectEmergencygroup: typeof import("./getArchitectEmergencygroup").getArchitectEmergencygroup = null as any;
export const getArchitectEmergencygroupOutput: typeof import("./getArchitectEmergencygroup").getArchitectEmergencygroupOutput = null as any;
utilities.lazyLoad(exports, ["getArchitectEmergencygroup","getArchitectEmergencygroupOutput"], () => require("./getArchitectEmergencygroup"));

export { GetArchitectGrammarArgs, GetArchitectGrammarResult, GetArchitectGrammarOutputArgs } from "./getArchitectGrammar";
export const getArchitectGrammar: typeof import("./getArchitectGrammar").getArchitectGrammar = null as any;
export const getArchitectGrammarOutput: typeof import("./getArchitectGrammar").getArchitectGrammarOutput = null as any;
utilities.lazyLoad(exports, ["getArchitectGrammar","getArchitectGrammarOutput"], () => require("./getArchitectGrammar"));

export { GetArchitectIvrArgs, GetArchitectIvrResult, GetArchitectIvrOutputArgs } from "./getArchitectIvr";
export const getArchitectIvr: typeof import("./getArchitectIvr").getArchitectIvr = null as any;
export const getArchitectIvrOutput: typeof import("./getArchitectIvr").getArchitectIvrOutput = null as any;
utilities.lazyLoad(exports, ["getArchitectIvr","getArchitectIvrOutput"], () => require("./getArchitectIvr"));

export { GetArchitectSchedulegroupsArgs, GetArchitectSchedulegroupsResult, GetArchitectSchedulegroupsOutputArgs } from "./getArchitectSchedulegroups";
export const getArchitectSchedulegroups: typeof import("./getArchitectSchedulegroups").getArchitectSchedulegroups = null as any;
export const getArchitectSchedulegroupsOutput: typeof import("./getArchitectSchedulegroups").getArchitectSchedulegroupsOutput = null as any;
utilities.lazyLoad(exports, ["getArchitectSchedulegroups","getArchitectSchedulegroupsOutput"], () => require("./getArchitectSchedulegroups"));

export { GetArchitectSchedulesArgs, GetArchitectSchedulesResult, GetArchitectSchedulesOutputArgs } from "./getArchitectSchedules";
export const getArchitectSchedules: typeof import("./getArchitectSchedules").getArchitectSchedules = null as any;
export const getArchitectSchedulesOutput: typeof import("./getArchitectSchedules").getArchitectSchedulesOutput = null as any;
utilities.lazyLoad(exports, ["getArchitectSchedules","getArchitectSchedulesOutput"], () => require("./getArchitectSchedules"));

export { GetArchitectUserPromptArgs, GetArchitectUserPromptResult, GetArchitectUserPromptOutputArgs } from "./getArchitectUserPrompt";
export const getArchitectUserPrompt: typeof import("./getArchitectUserPrompt").getArchitectUserPrompt = null as any;
export const getArchitectUserPromptOutput: typeof import("./getArchitectUserPrompt").getArchitectUserPromptOutput = null as any;
utilities.lazyLoad(exports, ["getArchitectUserPrompt","getArchitectUserPromptOutput"], () => require("./getArchitectUserPrompt"));

export { GetAuthDivisionArgs, GetAuthDivisionResult, GetAuthDivisionOutputArgs } from "./getAuthDivision";
export const getAuthDivision: typeof import("./getAuthDivision").getAuthDivision = null as any;
export const getAuthDivisionOutput: typeof import("./getAuthDivision").getAuthDivisionOutput = null as any;
utilities.lazyLoad(exports, ["getAuthDivision","getAuthDivisionOutput"], () => require("./getAuthDivision"));

export { GetAuthDivisionHomeArgs, GetAuthDivisionHomeResult, GetAuthDivisionHomeOutputArgs } from "./getAuthDivisionHome";
export const getAuthDivisionHome: typeof import("./getAuthDivisionHome").getAuthDivisionHome = null as any;
export const getAuthDivisionHomeOutput: typeof import("./getAuthDivisionHome").getAuthDivisionHomeOutput = null as any;
utilities.lazyLoad(exports, ["getAuthDivisionHome","getAuthDivisionHomeOutput"], () => require("./getAuthDivisionHome"));

export { GetAuthRoleArgs, GetAuthRoleResult, GetAuthRoleOutputArgs } from "./getAuthRole";
export const getAuthRole: typeof import("./getAuthRole").getAuthRole = null as any;
export const getAuthRoleOutput: typeof import("./getAuthRole").getAuthRoleOutput = null as any;
utilities.lazyLoad(exports, ["getAuthRole","getAuthRoleOutput"], () => require("./getAuthRole"));

export { GetAuthorizationProductArgs, GetAuthorizationProductResult, GetAuthorizationProductOutputArgs } from "./getAuthorizationProduct";
export const getAuthorizationProduct: typeof import("./getAuthorizationProduct").getAuthorizationProduct = null as any;
export const getAuthorizationProductOutput: typeof import("./getAuthorizationProduct").getAuthorizationProductOutput = null as any;
utilities.lazyLoad(exports, ["getAuthorizationProduct","getAuthorizationProductOutput"], () => require("./getAuthorizationProduct"));

export { GetConversationsMessagingIntegrationsInstagramArgs, GetConversationsMessagingIntegrationsInstagramResult, GetConversationsMessagingIntegrationsInstagramOutputArgs } from "./getConversationsMessagingIntegrationsInstagram";
export const getConversationsMessagingIntegrationsInstagram: typeof import("./getConversationsMessagingIntegrationsInstagram").getConversationsMessagingIntegrationsInstagram = null as any;
export const getConversationsMessagingIntegrationsInstagramOutput: typeof import("./getConversationsMessagingIntegrationsInstagram").getConversationsMessagingIntegrationsInstagramOutput = null as any;
utilities.lazyLoad(exports, ["getConversationsMessagingIntegrationsInstagram","getConversationsMessagingIntegrationsInstagramOutput"], () => require("./getConversationsMessagingIntegrationsInstagram"));

export { GetConversationsMessagingSettingsArgs, GetConversationsMessagingSettingsResult, GetConversationsMessagingSettingsOutputArgs } from "./getConversationsMessagingSettings";
export const getConversationsMessagingSettings: typeof import("./getConversationsMessagingSettings").getConversationsMessagingSettings = null as any;
export const getConversationsMessagingSettingsOutput: typeof import("./getConversationsMessagingSettings").getConversationsMessagingSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getConversationsMessagingSettings","getConversationsMessagingSettingsOutput"], () => require("./getConversationsMessagingSettings"));

export { GetConversationsMessagingSupportedcontentArgs, GetConversationsMessagingSupportedcontentResult, GetConversationsMessagingSupportedcontentOutputArgs } from "./getConversationsMessagingSupportedcontent";
export const getConversationsMessagingSupportedcontent: typeof import("./getConversationsMessagingSupportedcontent").getConversationsMessagingSupportedcontent = null as any;
export const getConversationsMessagingSupportedcontentOutput: typeof import("./getConversationsMessagingSupportedcontent").getConversationsMessagingSupportedcontentOutput = null as any;
utilities.lazyLoad(exports, ["getConversationsMessagingSupportedcontent","getConversationsMessagingSupportedcontentOutput"], () => require("./getConversationsMessagingSupportedcontent"));

export { GetEmployeeperformanceExternalmetricsDefinitionsArgs, GetEmployeeperformanceExternalmetricsDefinitionsResult, GetEmployeeperformanceExternalmetricsDefinitionsOutputArgs } from "./getEmployeeperformanceExternalmetricsDefinitions";
export const getEmployeeperformanceExternalmetricsDefinitions: typeof import("./getEmployeeperformanceExternalmetricsDefinitions").getEmployeeperformanceExternalmetricsDefinitions = null as any;
export const getEmployeeperformanceExternalmetricsDefinitionsOutput: typeof import("./getEmployeeperformanceExternalmetricsDefinitions").getEmployeeperformanceExternalmetricsDefinitionsOutput = null as any;
utilities.lazyLoad(exports, ["getEmployeeperformanceExternalmetricsDefinitions","getEmployeeperformanceExternalmetricsDefinitionsOutput"], () => require("./getEmployeeperformanceExternalmetricsDefinitions"));

export { GetExternalcontactsContactArgs, GetExternalcontactsContactResult, GetExternalcontactsContactOutputArgs } from "./getExternalcontactsContact";
export const getExternalcontactsContact: typeof import("./getExternalcontactsContact").getExternalcontactsContact = null as any;
export const getExternalcontactsContactOutput: typeof import("./getExternalcontactsContact").getExternalcontactsContactOutput = null as any;
utilities.lazyLoad(exports, ["getExternalcontactsContact","getExternalcontactsContactOutput"], () => require("./getExternalcontactsContact"));

export { GetFlowArgs, GetFlowResult, GetFlowOutputArgs } from "./getFlow";
export const getFlow: typeof import("./getFlow").getFlow = null as any;
export const getFlowOutput: typeof import("./getFlow").getFlowOutput = null as any;
utilities.lazyLoad(exports, ["getFlow","getFlowOutput"], () => require("./getFlow"));

export { GetFlowMilestoneArgs, GetFlowMilestoneResult, GetFlowMilestoneOutputArgs } from "./getFlowMilestone";
export const getFlowMilestone: typeof import("./getFlowMilestone").getFlowMilestone = null as any;
export const getFlowMilestoneOutput: typeof import("./getFlowMilestone").getFlowMilestoneOutput = null as any;
utilities.lazyLoad(exports, ["getFlowMilestone","getFlowMilestoneOutput"], () => require("./getFlowMilestone"));

export { GetFlowOutcomeArgs, GetFlowOutcomeResult, GetFlowOutcomeOutputArgs } from "./getFlowOutcome";
export const getFlowOutcome: typeof import("./getFlowOutcome").getFlowOutcome = null as any;
export const getFlowOutcomeOutput: typeof import("./getFlowOutcome").getFlowOutcomeOutput = null as any;
utilities.lazyLoad(exports, ["getFlowOutcome","getFlowOutcomeOutput"], () => require("./getFlowOutcome"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetIntegrationArgs, GetIntegrationResult, GetIntegrationOutputArgs } from "./getIntegration";
export const getIntegration: typeof import("./getIntegration").getIntegration = null as any;
export const getIntegrationOutput: typeof import("./getIntegration").getIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getIntegration","getIntegrationOutput"], () => require("./getIntegration"));

export { GetIntegrationActionArgs, GetIntegrationActionResult, GetIntegrationActionOutputArgs } from "./getIntegrationAction";
export const getIntegrationAction: typeof import("./getIntegrationAction").getIntegrationAction = null as any;
export const getIntegrationActionOutput: typeof import("./getIntegrationAction").getIntegrationActionOutput = null as any;
utilities.lazyLoad(exports, ["getIntegrationAction","getIntegrationActionOutput"], () => require("./getIntegrationAction"));

export { GetIntegrationCredentialArgs, GetIntegrationCredentialResult, GetIntegrationCredentialOutputArgs } from "./getIntegrationCredential";
export const getIntegrationCredential: typeof import("./getIntegrationCredential").getIntegrationCredential = null as any;
export const getIntegrationCredentialOutput: typeof import("./getIntegrationCredential").getIntegrationCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getIntegrationCredential","getIntegrationCredentialOutput"], () => require("./getIntegrationCredential"));

export { GetIntegrationCustomAuthActionArgs, GetIntegrationCustomAuthActionResult, GetIntegrationCustomAuthActionOutputArgs } from "./getIntegrationCustomAuthAction";
export const getIntegrationCustomAuthAction: typeof import("./getIntegrationCustomAuthAction").getIntegrationCustomAuthAction = null as any;
export const getIntegrationCustomAuthActionOutput: typeof import("./getIntegrationCustomAuthAction").getIntegrationCustomAuthActionOutput = null as any;
utilities.lazyLoad(exports, ["getIntegrationCustomAuthAction","getIntegrationCustomAuthActionOutput"], () => require("./getIntegrationCustomAuthAction"));

export { GetIntegrationFacebookArgs, GetIntegrationFacebookResult, GetIntegrationFacebookOutputArgs } from "./getIntegrationFacebook";
export const getIntegrationFacebook: typeof import("./getIntegrationFacebook").getIntegrationFacebook = null as any;
export const getIntegrationFacebookOutput: typeof import("./getIntegrationFacebook").getIntegrationFacebookOutput = null as any;
utilities.lazyLoad(exports, ["getIntegrationFacebook","getIntegrationFacebookOutput"], () => require("./getIntegrationFacebook"));

export { GetJourneyActionMapArgs, GetJourneyActionMapResult, GetJourneyActionMapOutputArgs } from "./getJourneyActionMap";
export const getJourneyActionMap: typeof import("./getJourneyActionMap").getJourneyActionMap = null as any;
export const getJourneyActionMapOutput: typeof import("./getJourneyActionMap").getJourneyActionMapOutput = null as any;
utilities.lazyLoad(exports, ["getJourneyActionMap","getJourneyActionMapOutput"], () => require("./getJourneyActionMap"));

export { GetJourneyActionTemplateArgs, GetJourneyActionTemplateResult, GetJourneyActionTemplateOutputArgs } from "./getJourneyActionTemplate";
export const getJourneyActionTemplate: typeof import("./getJourneyActionTemplate").getJourneyActionTemplate = null as any;
export const getJourneyActionTemplateOutput: typeof import("./getJourneyActionTemplate").getJourneyActionTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getJourneyActionTemplate","getJourneyActionTemplateOutput"], () => require("./getJourneyActionTemplate"));

export { GetJourneyOutcomeArgs, GetJourneyOutcomeResult, GetJourneyOutcomeOutputArgs } from "./getJourneyOutcome";
export const getJourneyOutcome: typeof import("./getJourneyOutcome").getJourneyOutcome = null as any;
export const getJourneyOutcomeOutput: typeof import("./getJourneyOutcome").getJourneyOutcomeOutput = null as any;
utilities.lazyLoad(exports, ["getJourneyOutcome","getJourneyOutcomeOutput"], () => require("./getJourneyOutcome"));

export { GetJourneySegmentArgs, GetJourneySegmentResult, GetJourneySegmentOutputArgs } from "./getJourneySegment";
export const getJourneySegment: typeof import("./getJourneySegment").getJourneySegment = null as any;
export const getJourneySegmentOutput: typeof import("./getJourneySegment").getJourneySegmentOutput = null as any;
utilities.lazyLoad(exports, ["getJourneySegment","getJourneySegmentOutput"], () => require("./getJourneySegment"));

export { GetKnowledgeCategoryArgs, GetKnowledgeCategoryResult, GetKnowledgeCategoryOutputArgs } from "./getKnowledgeCategory";
export const getKnowledgeCategory: typeof import("./getKnowledgeCategory").getKnowledgeCategory = null as any;
export const getKnowledgeCategoryOutput: typeof import("./getKnowledgeCategory").getKnowledgeCategoryOutput = null as any;
utilities.lazyLoad(exports, ["getKnowledgeCategory","getKnowledgeCategoryOutput"], () => require("./getKnowledgeCategory"));

export { GetKnowledgeKnowledgebaseArgs, GetKnowledgeKnowledgebaseResult, GetKnowledgeKnowledgebaseOutputArgs } from "./getKnowledgeKnowledgebase";
export const getKnowledgeKnowledgebase: typeof import("./getKnowledgeKnowledgebase").getKnowledgeKnowledgebase = null as any;
export const getKnowledgeKnowledgebaseOutput: typeof import("./getKnowledgeKnowledgebase").getKnowledgeKnowledgebaseOutput = null as any;
utilities.lazyLoad(exports, ["getKnowledgeKnowledgebase","getKnowledgeKnowledgebaseOutput"], () => require("./getKnowledgeKnowledgebase"));

export { GetKnowledgeLabelArgs, GetKnowledgeLabelResult, GetKnowledgeLabelOutputArgs } from "./getKnowledgeLabel";
export const getKnowledgeLabel: typeof import("./getKnowledgeLabel").getKnowledgeLabel = null as any;
export const getKnowledgeLabelOutput: typeof import("./getKnowledgeLabel").getKnowledgeLabelOutput = null as any;
utilities.lazyLoad(exports, ["getKnowledgeLabel","getKnowledgeLabelOutput"], () => require("./getKnowledgeLabel"));

export { GetLocationArgs, GetLocationResult, GetLocationOutputArgs } from "./getLocation";
export const getLocation: typeof import("./getLocation").getLocation = null as any;
export const getLocationOutput: typeof import("./getLocation").getLocationOutput = null as any;
utilities.lazyLoad(exports, ["getLocation","getLocationOutput"], () => require("./getLocation"));

export { GetOauthClientArgs, GetOauthClientResult, GetOauthClientOutputArgs } from "./getOauthClient";
export const getOauthClient: typeof import("./getOauthClient").getOauthClient = null as any;
export const getOauthClientOutput: typeof import("./getOauthClient").getOauthClientOutput = null as any;
utilities.lazyLoad(exports, ["getOauthClient","getOauthClientOutput"], () => require("./getOauthClient"));

export { GetOrganizationsMeArgs, GetOrganizationsMeResult, GetOrganizationsMeOutputArgs } from "./getOrganizationsMe";
export const getOrganizationsMe: typeof import("./getOrganizationsMe").getOrganizationsMe = null as any;
export const getOrganizationsMeOutput: typeof import("./getOrganizationsMe").getOrganizationsMeOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationsMe","getOrganizationsMeOutput"], () => require("./getOrganizationsMe"));

export { GetOutboundAttemptLimitArgs, GetOutboundAttemptLimitResult, GetOutboundAttemptLimitOutputArgs } from "./getOutboundAttemptLimit";
export const getOutboundAttemptLimit: typeof import("./getOutboundAttemptLimit").getOutboundAttemptLimit = null as any;
export const getOutboundAttemptLimitOutput: typeof import("./getOutboundAttemptLimit").getOutboundAttemptLimitOutput = null as any;
utilities.lazyLoad(exports, ["getOutboundAttemptLimit","getOutboundAttemptLimitOutput"], () => require("./getOutboundAttemptLimit"));

export { GetOutboundCallabletimesetArgs, GetOutboundCallabletimesetResult, GetOutboundCallabletimesetOutputArgs } from "./getOutboundCallabletimeset";
export const getOutboundCallabletimeset: typeof import("./getOutboundCallabletimeset").getOutboundCallabletimeset = null as any;
export const getOutboundCallabletimesetOutput: typeof import("./getOutboundCallabletimeset").getOutboundCallabletimesetOutput = null as any;
utilities.lazyLoad(exports, ["getOutboundCallabletimeset","getOutboundCallabletimesetOutput"], () => require("./getOutboundCallabletimeset"));

export { GetOutboundCallanalysisresponsesetArgs, GetOutboundCallanalysisresponsesetResult, GetOutboundCallanalysisresponsesetOutputArgs } from "./getOutboundCallanalysisresponseset";
export const getOutboundCallanalysisresponseset: typeof import("./getOutboundCallanalysisresponseset").getOutboundCallanalysisresponseset = null as any;
export const getOutboundCallanalysisresponsesetOutput: typeof import("./getOutboundCallanalysisresponseset").getOutboundCallanalysisresponsesetOutput = null as any;
utilities.lazyLoad(exports, ["getOutboundCallanalysisresponseset","getOutboundCallanalysisresponsesetOutput"], () => require("./getOutboundCallanalysisresponseset"));

export { GetOutboundCampaignArgs, GetOutboundCampaignResult, GetOutboundCampaignOutputArgs } from "./getOutboundCampaign";
export const getOutboundCampaign: typeof import("./getOutboundCampaign").getOutboundCampaign = null as any;
export const getOutboundCampaignOutput: typeof import("./getOutboundCampaign").getOutboundCampaignOutput = null as any;
utilities.lazyLoad(exports, ["getOutboundCampaign","getOutboundCampaignOutput"], () => require("./getOutboundCampaign"));

export { GetOutboundCampaignruleArgs, GetOutboundCampaignruleResult, GetOutboundCampaignruleOutputArgs } from "./getOutboundCampaignrule";
export const getOutboundCampaignrule: typeof import("./getOutboundCampaignrule").getOutboundCampaignrule = null as any;
export const getOutboundCampaignruleOutput: typeof import("./getOutboundCampaignrule").getOutboundCampaignruleOutput = null as any;
utilities.lazyLoad(exports, ["getOutboundCampaignrule","getOutboundCampaignruleOutput"], () => require("./getOutboundCampaignrule"));

export { GetOutboundContactListArgs, GetOutboundContactListResult, GetOutboundContactListOutputArgs } from "./getOutboundContactList";
export const getOutboundContactList: typeof import("./getOutboundContactList").getOutboundContactList = null as any;
export const getOutboundContactListOutput: typeof import("./getOutboundContactList").getOutboundContactListOutput = null as any;
utilities.lazyLoad(exports, ["getOutboundContactList","getOutboundContactListOutput"], () => require("./getOutboundContactList"));

export { GetOutboundContactListTemplateArgs, GetOutboundContactListTemplateResult, GetOutboundContactListTemplateOutputArgs } from "./getOutboundContactListTemplate";
export const getOutboundContactListTemplate: typeof import("./getOutboundContactListTemplate").getOutboundContactListTemplate = null as any;
export const getOutboundContactListTemplateOutput: typeof import("./getOutboundContactListTemplate").getOutboundContactListTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getOutboundContactListTemplate","getOutboundContactListTemplateOutput"], () => require("./getOutboundContactListTemplate"));

export { GetOutboundContactlistfilterArgs, GetOutboundContactlistfilterResult, GetOutboundContactlistfilterOutputArgs } from "./getOutboundContactlistfilter";
export const getOutboundContactlistfilter: typeof import("./getOutboundContactlistfilter").getOutboundContactlistfilter = null as any;
export const getOutboundContactlistfilterOutput: typeof import("./getOutboundContactlistfilter").getOutboundContactlistfilterOutput = null as any;
utilities.lazyLoad(exports, ["getOutboundContactlistfilter","getOutboundContactlistfilterOutput"], () => require("./getOutboundContactlistfilter"));

export { GetOutboundDnclistArgs, GetOutboundDnclistResult, GetOutboundDnclistOutputArgs } from "./getOutboundDnclist";
export const getOutboundDnclist: typeof import("./getOutboundDnclist").getOutboundDnclist = null as any;
export const getOutboundDnclistOutput: typeof import("./getOutboundDnclist").getOutboundDnclistOutput = null as any;
utilities.lazyLoad(exports, ["getOutboundDnclist","getOutboundDnclistOutput"], () => require("./getOutboundDnclist"));

export { GetOutboundFilespecificationtemplateArgs, GetOutboundFilespecificationtemplateResult, GetOutboundFilespecificationtemplateOutputArgs } from "./getOutboundFilespecificationtemplate";
export const getOutboundFilespecificationtemplate: typeof import("./getOutboundFilespecificationtemplate").getOutboundFilespecificationtemplate = null as any;
export const getOutboundFilespecificationtemplateOutput: typeof import("./getOutboundFilespecificationtemplate").getOutboundFilespecificationtemplateOutput = null as any;
utilities.lazyLoad(exports, ["getOutboundFilespecificationtemplate","getOutboundFilespecificationtemplateOutput"], () => require("./getOutboundFilespecificationtemplate"));

export { GetOutboundMessagingcampaignArgs, GetOutboundMessagingcampaignResult, GetOutboundMessagingcampaignOutputArgs } from "./getOutboundMessagingcampaign";
export const getOutboundMessagingcampaign: typeof import("./getOutboundMessagingcampaign").getOutboundMessagingcampaign = null as any;
export const getOutboundMessagingcampaignOutput: typeof import("./getOutboundMessagingcampaign").getOutboundMessagingcampaignOutput = null as any;
utilities.lazyLoad(exports, ["getOutboundMessagingcampaign","getOutboundMessagingcampaignOutput"], () => require("./getOutboundMessagingcampaign"));

export { GetOutboundRulesetArgs, GetOutboundRulesetResult, GetOutboundRulesetOutputArgs } from "./getOutboundRuleset";
export const getOutboundRuleset: typeof import("./getOutboundRuleset").getOutboundRuleset = null as any;
export const getOutboundRulesetOutput: typeof import("./getOutboundRuleset").getOutboundRulesetOutput = null as any;
utilities.lazyLoad(exports, ["getOutboundRuleset","getOutboundRulesetOutput"], () => require("./getOutboundRuleset"));

export { GetOutboundSequenceArgs, GetOutboundSequenceResult, GetOutboundSequenceOutputArgs } from "./getOutboundSequence";
export const getOutboundSequence: typeof import("./getOutboundSequence").getOutboundSequence = null as any;
export const getOutboundSequenceOutput: typeof import("./getOutboundSequence").getOutboundSequenceOutput = null as any;
utilities.lazyLoad(exports, ["getOutboundSequence","getOutboundSequenceOutput"], () => require("./getOutboundSequence"));

export { GetProcessautomationTriggerArgs, GetProcessautomationTriggerResult, GetProcessautomationTriggerOutputArgs } from "./getProcessautomationTrigger";
export const getProcessautomationTrigger: typeof import("./getProcessautomationTrigger").getProcessautomationTrigger = null as any;
export const getProcessautomationTriggerOutput: typeof import("./getProcessautomationTrigger").getProcessautomationTriggerOutput = null as any;
utilities.lazyLoad(exports, ["getProcessautomationTrigger","getProcessautomationTriggerOutput"], () => require("./getProcessautomationTrigger"));

export { GetQualityFormsEvaluationArgs, GetQualityFormsEvaluationResult, GetQualityFormsEvaluationOutputArgs } from "./getQualityFormsEvaluation";
export const getQualityFormsEvaluation: typeof import("./getQualityFormsEvaluation").getQualityFormsEvaluation = null as any;
export const getQualityFormsEvaluationOutput: typeof import("./getQualityFormsEvaluation").getQualityFormsEvaluationOutput = null as any;
utilities.lazyLoad(exports, ["getQualityFormsEvaluation","getQualityFormsEvaluationOutput"], () => require("./getQualityFormsEvaluation"));

export { GetQualityFormsSurveyArgs, GetQualityFormsSurveyResult, GetQualityFormsSurveyOutputArgs } from "./getQualityFormsSurvey";
export const getQualityFormsSurvey: typeof import("./getQualityFormsSurvey").getQualityFormsSurvey = null as any;
export const getQualityFormsSurveyOutput: typeof import("./getQualityFormsSurvey").getQualityFormsSurveyOutput = null as any;
utilities.lazyLoad(exports, ["getQualityFormsSurvey","getQualityFormsSurveyOutput"], () => require("./getQualityFormsSurvey"));

export { GetRecordingMediaRetentionPolicyArgs, GetRecordingMediaRetentionPolicyResult, GetRecordingMediaRetentionPolicyOutputArgs } from "./getRecordingMediaRetentionPolicy";
export const getRecordingMediaRetentionPolicy: typeof import("./getRecordingMediaRetentionPolicy").getRecordingMediaRetentionPolicy = null as any;
export const getRecordingMediaRetentionPolicyOutput: typeof import("./getRecordingMediaRetentionPolicy").getRecordingMediaRetentionPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getRecordingMediaRetentionPolicy","getRecordingMediaRetentionPolicyOutput"], () => require("./getRecordingMediaRetentionPolicy"));

export { GetResponsemanagementLibraryArgs, GetResponsemanagementLibraryResult, GetResponsemanagementLibraryOutputArgs } from "./getResponsemanagementLibrary";
export const getResponsemanagementLibrary: typeof import("./getResponsemanagementLibrary").getResponsemanagementLibrary = null as any;
export const getResponsemanagementLibraryOutput: typeof import("./getResponsemanagementLibrary").getResponsemanagementLibraryOutput = null as any;
utilities.lazyLoad(exports, ["getResponsemanagementLibrary","getResponsemanagementLibraryOutput"], () => require("./getResponsemanagementLibrary"));

export { GetResponsemanagementResponseArgs, GetResponsemanagementResponseResult, GetResponsemanagementResponseOutputArgs } from "./getResponsemanagementResponse";
export const getResponsemanagementResponse: typeof import("./getResponsemanagementResponse").getResponsemanagementResponse = null as any;
export const getResponsemanagementResponseOutput: typeof import("./getResponsemanagementResponse").getResponsemanagementResponseOutput = null as any;
utilities.lazyLoad(exports, ["getResponsemanagementResponse","getResponsemanagementResponseOutput"], () => require("./getResponsemanagementResponse"));

export { GetResponsemanagementResponseassetArgs, GetResponsemanagementResponseassetResult, GetResponsemanagementResponseassetOutputArgs } from "./getResponsemanagementResponseasset";
export const getResponsemanagementResponseasset: typeof import("./getResponsemanagementResponseasset").getResponsemanagementResponseasset = null as any;
export const getResponsemanagementResponseassetOutput: typeof import("./getResponsemanagementResponseasset").getResponsemanagementResponseassetOutput = null as any;
utilities.lazyLoad(exports, ["getResponsemanagementResponseasset","getResponsemanagementResponseassetOutput"], () => require("./getResponsemanagementResponseasset"));

export { GetRoutingEmailDomainArgs, GetRoutingEmailDomainResult, GetRoutingEmailDomainOutputArgs } from "./getRoutingEmailDomain";
export const getRoutingEmailDomain: typeof import("./getRoutingEmailDomain").getRoutingEmailDomain = null as any;
export const getRoutingEmailDomainOutput: typeof import("./getRoutingEmailDomain").getRoutingEmailDomainOutput = null as any;
utilities.lazyLoad(exports, ["getRoutingEmailDomain","getRoutingEmailDomainOutput"], () => require("./getRoutingEmailDomain"));

export { GetRoutingEmailRouteArgs, GetRoutingEmailRouteResult, GetRoutingEmailRouteOutputArgs } from "./getRoutingEmailRoute";
export const getRoutingEmailRoute: typeof import("./getRoutingEmailRoute").getRoutingEmailRoute = null as any;
export const getRoutingEmailRouteOutput: typeof import("./getRoutingEmailRoute").getRoutingEmailRouteOutput = null as any;
utilities.lazyLoad(exports, ["getRoutingEmailRoute","getRoutingEmailRouteOutput"], () => require("./getRoutingEmailRoute"));

export { GetRoutingLanguageArgs, GetRoutingLanguageResult, GetRoutingLanguageOutputArgs } from "./getRoutingLanguage";
export const getRoutingLanguage: typeof import("./getRoutingLanguage").getRoutingLanguage = null as any;
export const getRoutingLanguageOutput: typeof import("./getRoutingLanguage").getRoutingLanguageOutput = null as any;
utilities.lazyLoad(exports, ["getRoutingLanguage","getRoutingLanguageOutput"], () => require("./getRoutingLanguage"));

export { GetRoutingQueueArgs, GetRoutingQueueResult, GetRoutingQueueOutputArgs } from "./getRoutingQueue";
export const getRoutingQueue: typeof import("./getRoutingQueue").getRoutingQueue = null as any;
export const getRoutingQueueOutput: typeof import("./getRoutingQueue").getRoutingQueueOutput = null as any;
utilities.lazyLoad(exports, ["getRoutingQueue","getRoutingQueueOutput"], () => require("./getRoutingQueue"));

export { GetRoutingSkillArgs, GetRoutingSkillResult, GetRoutingSkillOutputArgs } from "./getRoutingSkill";
export const getRoutingSkill: typeof import("./getRoutingSkill").getRoutingSkill = null as any;
export const getRoutingSkillOutput: typeof import("./getRoutingSkill").getRoutingSkillOutput = null as any;
utilities.lazyLoad(exports, ["getRoutingSkill","getRoutingSkillOutput"], () => require("./getRoutingSkill"));

export { GetRoutingSkillGroupArgs, GetRoutingSkillGroupResult, GetRoutingSkillGroupOutputArgs } from "./getRoutingSkillGroup";
export const getRoutingSkillGroup: typeof import("./getRoutingSkillGroup").getRoutingSkillGroup = null as any;
export const getRoutingSkillGroupOutput: typeof import("./getRoutingSkillGroup").getRoutingSkillGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRoutingSkillGroup","getRoutingSkillGroupOutput"], () => require("./getRoutingSkillGroup"));

export { GetRoutingSmsAddressArgs, GetRoutingSmsAddressResult, GetRoutingSmsAddressOutputArgs } from "./getRoutingSmsAddress";
export const getRoutingSmsAddress: typeof import("./getRoutingSmsAddress").getRoutingSmsAddress = null as any;
export const getRoutingSmsAddressOutput: typeof import("./getRoutingSmsAddress").getRoutingSmsAddressOutput = null as any;
utilities.lazyLoad(exports, ["getRoutingSmsAddress","getRoutingSmsAddressOutput"], () => require("./getRoutingSmsAddress"));

export { GetRoutingUtilizationLabelArgs, GetRoutingUtilizationLabelResult, GetRoutingUtilizationLabelOutputArgs } from "./getRoutingUtilizationLabel";
export const getRoutingUtilizationLabel: typeof import("./getRoutingUtilizationLabel").getRoutingUtilizationLabel = null as any;
export const getRoutingUtilizationLabelOutput: typeof import("./getRoutingUtilizationLabel").getRoutingUtilizationLabelOutput = null as any;
utilities.lazyLoad(exports, ["getRoutingUtilizationLabel","getRoutingUtilizationLabelOutput"], () => require("./getRoutingUtilizationLabel"));

export { GetRoutingWrapupcodeArgs, GetRoutingWrapupcodeResult, GetRoutingWrapupcodeOutputArgs } from "./getRoutingWrapupcode";
export const getRoutingWrapupcode: typeof import("./getRoutingWrapupcode").getRoutingWrapupcode = null as any;
export const getRoutingWrapupcodeOutput: typeof import("./getRoutingWrapupcode").getRoutingWrapupcodeOutput = null as any;
utilities.lazyLoad(exports, ["getRoutingWrapupcode","getRoutingWrapupcodeOutput"], () => require("./getRoutingWrapupcode"));

export { GetScriptArgs, GetScriptResult, GetScriptOutputArgs } from "./getScript";
export const getScript: typeof import("./getScript").getScript = null as any;
export const getScriptOutput: typeof import("./getScript").getScriptOutput = null as any;
utilities.lazyLoad(exports, ["getScript","getScriptOutput"], () => require("./getScript"));

export { GetStationArgs, GetStationResult, GetStationOutputArgs } from "./getStation";
export const getStation: typeof import("./getStation").getStation = null as any;
export const getStationOutput: typeof import("./getStation").getStationOutput = null as any;
utilities.lazyLoad(exports, ["getStation","getStationOutput"], () => require("./getStation"));

export { GetTaskManagementWorkbinArgs, GetTaskManagementWorkbinResult, GetTaskManagementWorkbinOutputArgs } from "./getTaskManagementWorkbin";
export const getTaskManagementWorkbin: typeof import("./getTaskManagementWorkbin").getTaskManagementWorkbin = null as any;
export const getTaskManagementWorkbinOutput: typeof import("./getTaskManagementWorkbin").getTaskManagementWorkbinOutput = null as any;
utilities.lazyLoad(exports, ["getTaskManagementWorkbin","getTaskManagementWorkbinOutput"], () => require("./getTaskManagementWorkbin"));

export { GetTaskManagementWorkitemArgs, GetTaskManagementWorkitemResult, GetTaskManagementWorkitemOutputArgs } from "./getTaskManagementWorkitem";
export const getTaskManagementWorkitem: typeof import("./getTaskManagementWorkitem").getTaskManagementWorkitem = null as any;
export const getTaskManagementWorkitemOutput: typeof import("./getTaskManagementWorkitem").getTaskManagementWorkitemOutput = null as any;
utilities.lazyLoad(exports, ["getTaskManagementWorkitem","getTaskManagementWorkitemOutput"], () => require("./getTaskManagementWorkitem"));

export { GetTaskManagementWorkitemSchemaArgs, GetTaskManagementWorkitemSchemaResult, GetTaskManagementWorkitemSchemaOutputArgs } from "./getTaskManagementWorkitemSchema";
export const getTaskManagementWorkitemSchema: typeof import("./getTaskManagementWorkitemSchema").getTaskManagementWorkitemSchema = null as any;
export const getTaskManagementWorkitemSchemaOutput: typeof import("./getTaskManagementWorkitemSchema").getTaskManagementWorkitemSchemaOutput = null as any;
utilities.lazyLoad(exports, ["getTaskManagementWorkitemSchema","getTaskManagementWorkitemSchemaOutput"], () => require("./getTaskManagementWorkitemSchema"));

export { GetTaskManagementWorktypeArgs, GetTaskManagementWorktypeResult, GetTaskManagementWorktypeOutputArgs } from "./getTaskManagementWorktype";
export const getTaskManagementWorktype: typeof import("./getTaskManagementWorktype").getTaskManagementWorktype = null as any;
export const getTaskManagementWorktypeOutput: typeof import("./getTaskManagementWorktype").getTaskManagementWorktypeOutput = null as any;
utilities.lazyLoad(exports, ["getTaskManagementWorktype","getTaskManagementWorktypeOutput"], () => require("./getTaskManagementWorktype"));

export { GetTaskManagementWorktypeStatusArgs, GetTaskManagementWorktypeStatusResult, GetTaskManagementWorktypeStatusOutputArgs } from "./getTaskManagementWorktypeStatus";
export const getTaskManagementWorktypeStatus: typeof import("./getTaskManagementWorktypeStatus").getTaskManagementWorktypeStatus = null as any;
export const getTaskManagementWorktypeStatusOutput: typeof import("./getTaskManagementWorktypeStatus").getTaskManagementWorktypeStatusOutput = null as any;
utilities.lazyLoad(exports, ["getTaskManagementWorktypeStatus","getTaskManagementWorktypeStatusOutput"], () => require("./getTaskManagementWorktypeStatus"));

export { GetTeamArgs, GetTeamResult, GetTeamOutputArgs } from "./getTeam";
export const getTeam: typeof import("./getTeam").getTeam = null as any;
export const getTeamOutput: typeof import("./getTeam").getTeamOutput = null as any;
utilities.lazyLoad(exports, ["getTeam","getTeamOutput"], () => require("./getTeam"));

export { GetTelephonyProvidersEdgesDidArgs, GetTelephonyProvidersEdgesDidResult, GetTelephonyProvidersEdgesDidOutputArgs } from "./getTelephonyProvidersEdgesDid";
export const getTelephonyProvidersEdgesDid: typeof import("./getTelephonyProvidersEdgesDid").getTelephonyProvidersEdgesDid = null as any;
export const getTelephonyProvidersEdgesDidOutput: typeof import("./getTelephonyProvidersEdgesDid").getTelephonyProvidersEdgesDidOutput = null as any;
utilities.lazyLoad(exports, ["getTelephonyProvidersEdgesDid","getTelephonyProvidersEdgesDidOutput"], () => require("./getTelephonyProvidersEdgesDid"));

export { GetTelephonyProvidersEdgesDidPoolArgs, GetTelephonyProvidersEdgesDidPoolResult, GetTelephonyProvidersEdgesDidPoolOutputArgs } from "./getTelephonyProvidersEdgesDidPool";
export const getTelephonyProvidersEdgesDidPool: typeof import("./getTelephonyProvidersEdgesDidPool").getTelephonyProvidersEdgesDidPool = null as any;
export const getTelephonyProvidersEdgesDidPoolOutput: typeof import("./getTelephonyProvidersEdgesDidPool").getTelephonyProvidersEdgesDidPoolOutput = null as any;
utilities.lazyLoad(exports, ["getTelephonyProvidersEdgesDidPool","getTelephonyProvidersEdgesDidPoolOutput"], () => require("./getTelephonyProvidersEdgesDidPool"));

export { GetTelephonyProvidersEdgesEdgeGroupArgs, GetTelephonyProvidersEdgesEdgeGroupResult, GetTelephonyProvidersEdgesEdgeGroupOutputArgs } from "./getTelephonyProvidersEdgesEdgeGroup";
export const getTelephonyProvidersEdgesEdgeGroup: typeof import("./getTelephonyProvidersEdgesEdgeGroup").getTelephonyProvidersEdgesEdgeGroup = null as any;
export const getTelephonyProvidersEdgesEdgeGroupOutput: typeof import("./getTelephonyProvidersEdgesEdgeGroup").getTelephonyProvidersEdgesEdgeGroupOutput = null as any;
utilities.lazyLoad(exports, ["getTelephonyProvidersEdgesEdgeGroup","getTelephonyProvidersEdgesEdgeGroupOutput"], () => require("./getTelephonyProvidersEdgesEdgeGroup"));

export { GetTelephonyProvidersEdgesExtensionPoolArgs, GetTelephonyProvidersEdgesExtensionPoolResult, GetTelephonyProvidersEdgesExtensionPoolOutputArgs } from "./getTelephonyProvidersEdgesExtensionPool";
export const getTelephonyProvidersEdgesExtensionPool: typeof import("./getTelephonyProvidersEdgesExtensionPool").getTelephonyProvidersEdgesExtensionPool = null as any;
export const getTelephonyProvidersEdgesExtensionPoolOutput: typeof import("./getTelephonyProvidersEdgesExtensionPool").getTelephonyProvidersEdgesExtensionPoolOutput = null as any;
utilities.lazyLoad(exports, ["getTelephonyProvidersEdgesExtensionPool","getTelephonyProvidersEdgesExtensionPoolOutput"], () => require("./getTelephonyProvidersEdgesExtensionPool"));

export { GetTelephonyProvidersEdgesLinebasesettingsArgs, GetTelephonyProvidersEdgesLinebasesettingsResult, GetTelephonyProvidersEdgesLinebasesettingsOutputArgs } from "./getTelephonyProvidersEdgesLinebasesettings";
export const getTelephonyProvidersEdgesLinebasesettings: typeof import("./getTelephonyProvidersEdgesLinebasesettings").getTelephonyProvidersEdgesLinebasesettings = null as any;
export const getTelephonyProvidersEdgesLinebasesettingsOutput: typeof import("./getTelephonyProvidersEdgesLinebasesettings").getTelephonyProvidersEdgesLinebasesettingsOutput = null as any;
utilities.lazyLoad(exports, ["getTelephonyProvidersEdgesLinebasesettings","getTelephonyProvidersEdgesLinebasesettingsOutput"], () => require("./getTelephonyProvidersEdgesLinebasesettings"));

export { GetTelephonyProvidersEdgesPhoneArgs, GetTelephonyProvidersEdgesPhoneResult, GetTelephonyProvidersEdgesPhoneOutputArgs } from "./getTelephonyProvidersEdgesPhone";
export const getTelephonyProvidersEdgesPhone: typeof import("./getTelephonyProvidersEdgesPhone").getTelephonyProvidersEdgesPhone = null as any;
export const getTelephonyProvidersEdgesPhoneOutput: typeof import("./getTelephonyProvidersEdgesPhone").getTelephonyProvidersEdgesPhoneOutput = null as any;
utilities.lazyLoad(exports, ["getTelephonyProvidersEdgesPhone","getTelephonyProvidersEdgesPhoneOutput"], () => require("./getTelephonyProvidersEdgesPhone"));

export { GetTelephonyProvidersEdgesPhonebasesettingsArgs, GetTelephonyProvidersEdgesPhonebasesettingsResult, GetTelephonyProvidersEdgesPhonebasesettingsOutputArgs } from "./getTelephonyProvidersEdgesPhonebasesettings";
export const getTelephonyProvidersEdgesPhonebasesettings: typeof import("./getTelephonyProvidersEdgesPhonebasesettings").getTelephonyProvidersEdgesPhonebasesettings = null as any;
export const getTelephonyProvidersEdgesPhonebasesettingsOutput: typeof import("./getTelephonyProvidersEdgesPhonebasesettings").getTelephonyProvidersEdgesPhonebasesettingsOutput = null as any;
utilities.lazyLoad(exports, ["getTelephonyProvidersEdgesPhonebasesettings","getTelephonyProvidersEdgesPhonebasesettingsOutput"], () => require("./getTelephonyProvidersEdgesPhonebasesettings"));

export { GetTelephonyProvidersEdgesSiteArgs, GetTelephonyProvidersEdgesSiteResult, GetTelephonyProvidersEdgesSiteOutputArgs } from "./getTelephonyProvidersEdgesSite";
export const getTelephonyProvidersEdgesSite: typeof import("./getTelephonyProvidersEdgesSite").getTelephonyProvidersEdgesSite = null as any;
export const getTelephonyProvidersEdgesSiteOutput: typeof import("./getTelephonyProvidersEdgesSite").getTelephonyProvidersEdgesSiteOutput = null as any;
utilities.lazyLoad(exports, ["getTelephonyProvidersEdgesSite","getTelephonyProvidersEdgesSiteOutput"], () => require("./getTelephonyProvidersEdgesSite"));

export { GetTelephonyProvidersEdgesTrunkArgs, GetTelephonyProvidersEdgesTrunkResult, GetTelephonyProvidersEdgesTrunkOutputArgs } from "./getTelephonyProvidersEdgesTrunk";
export const getTelephonyProvidersEdgesTrunk: typeof import("./getTelephonyProvidersEdgesTrunk").getTelephonyProvidersEdgesTrunk = null as any;
export const getTelephonyProvidersEdgesTrunkOutput: typeof import("./getTelephonyProvidersEdgesTrunk").getTelephonyProvidersEdgesTrunkOutput = null as any;
utilities.lazyLoad(exports, ["getTelephonyProvidersEdgesTrunk","getTelephonyProvidersEdgesTrunkOutput"], () => require("./getTelephonyProvidersEdgesTrunk"));

export { GetTelephonyProvidersEdgesTrunkbasesettingsArgs, GetTelephonyProvidersEdgesTrunkbasesettingsResult, GetTelephonyProvidersEdgesTrunkbasesettingsOutputArgs } from "./getTelephonyProvidersEdgesTrunkbasesettings";
export const getTelephonyProvidersEdgesTrunkbasesettings: typeof import("./getTelephonyProvidersEdgesTrunkbasesettings").getTelephonyProvidersEdgesTrunkbasesettings = null as any;
export const getTelephonyProvidersEdgesTrunkbasesettingsOutput: typeof import("./getTelephonyProvidersEdgesTrunkbasesettings").getTelephonyProvidersEdgesTrunkbasesettingsOutput = null as any;
utilities.lazyLoad(exports, ["getTelephonyProvidersEdgesTrunkbasesettings","getTelephonyProvidersEdgesTrunkbasesettingsOutput"], () => require("./getTelephonyProvidersEdgesTrunkbasesettings"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetWebdeploymentsConfigurationArgs, GetWebdeploymentsConfigurationResult, GetWebdeploymentsConfigurationOutputArgs } from "./getWebdeploymentsConfiguration";
export const getWebdeploymentsConfiguration: typeof import("./getWebdeploymentsConfiguration").getWebdeploymentsConfiguration = null as any;
export const getWebdeploymentsConfigurationOutput: typeof import("./getWebdeploymentsConfiguration").getWebdeploymentsConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getWebdeploymentsConfiguration","getWebdeploymentsConfigurationOutput"], () => require("./getWebdeploymentsConfiguration"));

export { GetWebdeploymentsDeploymentArgs, GetWebdeploymentsDeploymentResult, GetWebdeploymentsDeploymentOutputArgs } from "./getWebdeploymentsDeployment";
export const getWebdeploymentsDeployment: typeof import("./getWebdeploymentsDeployment").getWebdeploymentsDeployment = null as any;
export const getWebdeploymentsDeploymentOutput: typeof import("./getWebdeploymentsDeployment").getWebdeploymentsDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getWebdeploymentsDeployment","getWebdeploymentsDeploymentOutput"], () => require("./getWebdeploymentsDeployment"));

export { GetWidgetDeploymentArgs, GetWidgetDeploymentResult, GetWidgetDeploymentOutputArgs } from "./getWidgetDeployment";
export const getWidgetDeployment: typeof import("./getWidgetDeployment").getWidgetDeployment = null as any;
export const getWidgetDeploymentOutput: typeof import("./getWidgetDeployment").getWidgetDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getWidgetDeployment","getWidgetDeploymentOutput"], () => require("./getWidgetDeployment"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupRolesArgs, GroupRolesState } from "./groupRoles";
export type GroupRoles = import("./groupRoles").GroupRoles;
export const GroupRoles: typeof import("./groupRoles").GroupRoles = null as any;
utilities.lazyLoad(exports, ["GroupRoles"], () => require("./groupRoles"));

export { IdpAdfsArgs, IdpAdfsState } from "./idpAdfs";
export type IdpAdfs = import("./idpAdfs").IdpAdfs;
export const IdpAdfs: typeof import("./idpAdfs").IdpAdfs = null as any;
utilities.lazyLoad(exports, ["IdpAdfs"], () => require("./idpAdfs"));

export { IdpGenericArgs, IdpGenericState } from "./idpGeneric";
export type IdpGeneric = import("./idpGeneric").IdpGeneric;
export const IdpGeneric: typeof import("./idpGeneric").IdpGeneric = null as any;
utilities.lazyLoad(exports, ["IdpGeneric"], () => require("./idpGeneric"));

export { IdpGsuiteArgs, IdpGsuiteState } from "./idpGsuite";
export type IdpGsuite = import("./idpGsuite").IdpGsuite;
export const IdpGsuite: typeof import("./idpGsuite").IdpGsuite = null as any;
utilities.lazyLoad(exports, ["IdpGsuite"], () => require("./idpGsuite"));

export { IdpOktaArgs, IdpOktaState } from "./idpOkta";
export type IdpOkta = import("./idpOkta").IdpOkta;
export const IdpOkta: typeof import("./idpOkta").IdpOkta = null as any;
utilities.lazyLoad(exports, ["IdpOkta"], () => require("./idpOkta"));

export { IdpOneloginArgs, IdpOneloginState } from "./idpOnelogin";
export type IdpOnelogin = import("./idpOnelogin").IdpOnelogin;
export const IdpOnelogin: typeof import("./idpOnelogin").IdpOnelogin = null as any;
utilities.lazyLoad(exports, ["IdpOnelogin"], () => require("./idpOnelogin"));

export { IdpPingArgs, IdpPingState } from "./idpPing";
export type IdpPing = import("./idpPing").IdpPing;
export const IdpPing: typeof import("./idpPing").IdpPing = null as any;
utilities.lazyLoad(exports, ["IdpPing"], () => require("./idpPing"));

export { IdpSalesforceArgs, IdpSalesforceState } from "./idpSalesforce";
export type IdpSalesforce = import("./idpSalesforce").IdpSalesforce;
export const IdpSalesforce: typeof import("./idpSalesforce").IdpSalesforce = null as any;
utilities.lazyLoad(exports, ["IdpSalesforce"], () => require("./idpSalesforce"));

export { IntegrationArgs, IntegrationState } from "./integration";
export type Integration = import("./integration").Integration;
export const Integration: typeof import("./integration").Integration = null as any;
utilities.lazyLoad(exports, ["Integration"], () => require("./integration"));

export { IntegrationActionArgs, IntegrationActionState } from "./integrationAction";
export type IntegrationAction = import("./integrationAction").IntegrationAction;
export const IntegrationAction: typeof import("./integrationAction").IntegrationAction = null as any;
utilities.lazyLoad(exports, ["IntegrationAction"], () => require("./integrationAction"));

export { IntegrationCredentialArgs, IntegrationCredentialState } from "./integrationCredential";
export type IntegrationCredential = import("./integrationCredential").IntegrationCredential;
export const IntegrationCredential: typeof import("./integrationCredential").IntegrationCredential = null as any;
utilities.lazyLoad(exports, ["IntegrationCredential"], () => require("./integrationCredential"));

export { IntegrationCustomAuthActionArgs, IntegrationCustomAuthActionState } from "./integrationCustomAuthAction";
export type IntegrationCustomAuthAction = import("./integrationCustomAuthAction").IntegrationCustomAuthAction;
export const IntegrationCustomAuthAction: typeof import("./integrationCustomAuthAction").IntegrationCustomAuthAction = null as any;
utilities.lazyLoad(exports, ["IntegrationCustomAuthAction"], () => require("./integrationCustomAuthAction"));

export { IntegrationFacebookArgs, IntegrationFacebookState } from "./integrationFacebook";
export type IntegrationFacebook = import("./integrationFacebook").IntegrationFacebook;
export const IntegrationFacebook: typeof import("./integrationFacebook").IntegrationFacebook = null as any;
utilities.lazyLoad(exports, ["IntegrationFacebook"], () => require("./integrationFacebook"));

export { JourneyActionMapArgs, JourneyActionMapState } from "./journeyActionMap";
export type JourneyActionMap = import("./journeyActionMap").JourneyActionMap;
export const JourneyActionMap: typeof import("./journeyActionMap").JourneyActionMap = null as any;
utilities.lazyLoad(exports, ["JourneyActionMap"], () => require("./journeyActionMap"));

export { JourneyActionTemplateArgs, JourneyActionTemplateState } from "./journeyActionTemplate";
export type JourneyActionTemplate = import("./journeyActionTemplate").JourneyActionTemplate;
export const JourneyActionTemplate: typeof import("./journeyActionTemplate").JourneyActionTemplate = null as any;
utilities.lazyLoad(exports, ["JourneyActionTemplate"], () => require("./journeyActionTemplate"));

export { JourneyOutcomeArgs, JourneyOutcomeState } from "./journeyOutcome";
export type JourneyOutcome = import("./journeyOutcome").JourneyOutcome;
export const JourneyOutcome: typeof import("./journeyOutcome").JourneyOutcome = null as any;
utilities.lazyLoad(exports, ["JourneyOutcome"], () => require("./journeyOutcome"));

export { JourneyOutcomePredictorArgs, JourneyOutcomePredictorState } from "./journeyOutcomePredictor";
export type JourneyOutcomePredictor = import("./journeyOutcomePredictor").JourneyOutcomePredictor;
export const JourneyOutcomePredictor: typeof import("./journeyOutcomePredictor").JourneyOutcomePredictor = null as any;
utilities.lazyLoad(exports, ["JourneyOutcomePredictor"], () => require("./journeyOutcomePredictor"));

export { JourneySegmentArgs, JourneySegmentState } from "./journeySegment";
export type JourneySegment = import("./journeySegment").JourneySegment;
export const JourneySegment: typeof import("./journeySegment").JourneySegment = null as any;
utilities.lazyLoad(exports, ["JourneySegment"], () => require("./journeySegment"));

export { JourneyViewsArgs, JourneyViewsState } from "./journeyViews";
export type JourneyViews = import("./journeyViews").JourneyViews;
export const JourneyViews: typeof import("./journeyViews").JourneyViews = null as any;
utilities.lazyLoad(exports, ["JourneyViews"], () => require("./journeyViews"));

export { KnowledgeCategoryArgs, KnowledgeCategoryState } from "./knowledgeCategory";
export type KnowledgeCategory = import("./knowledgeCategory").KnowledgeCategory;
export const KnowledgeCategory: typeof import("./knowledgeCategory").KnowledgeCategory = null as any;
utilities.lazyLoad(exports, ["KnowledgeCategory"], () => require("./knowledgeCategory"));

export { KnowledgeDocumentArgs, KnowledgeDocumentState } from "./knowledgeDocument";
export type KnowledgeDocument = import("./knowledgeDocument").KnowledgeDocument;
export const KnowledgeDocument: typeof import("./knowledgeDocument").KnowledgeDocument = null as any;
utilities.lazyLoad(exports, ["KnowledgeDocument"], () => require("./knowledgeDocument"));

export { KnowledgeDocumentVariationArgs, KnowledgeDocumentVariationState } from "./knowledgeDocumentVariation";
export type KnowledgeDocumentVariation = import("./knowledgeDocumentVariation").KnowledgeDocumentVariation;
export const KnowledgeDocumentVariation: typeof import("./knowledgeDocumentVariation").KnowledgeDocumentVariation = null as any;
utilities.lazyLoad(exports, ["KnowledgeDocumentVariation"], () => require("./knowledgeDocumentVariation"));

export { KnowledgeKnowledgebaseArgs, KnowledgeKnowledgebaseState } from "./knowledgeKnowledgebase";
export type KnowledgeKnowledgebase = import("./knowledgeKnowledgebase").KnowledgeKnowledgebase;
export const KnowledgeKnowledgebase: typeof import("./knowledgeKnowledgebase").KnowledgeKnowledgebase = null as any;
utilities.lazyLoad(exports, ["KnowledgeKnowledgebase"], () => require("./knowledgeKnowledgebase"));

export { KnowledgeLabelArgs, KnowledgeLabelState } from "./knowledgeLabel";
export type KnowledgeLabel = import("./knowledgeLabel").KnowledgeLabel;
export const KnowledgeLabel: typeof import("./knowledgeLabel").KnowledgeLabel = null as any;
utilities.lazyLoad(exports, ["KnowledgeLabel"], () => require("./knowledgeLabel"));

export { KnowledgeV1CategoryArgs, KnowledgeV1CategoryState } from "./knowledgeV1Category";
export type KnowledgeV1Category = import("./knowledgeV1Category").KnowledgeV1Category;
export const KnowledgeV1Category: typeof import("./knowledgeV1Category").KnowledgeV1Category = null as any;
utilities.lazyLoad(exports, ["KnowledgeV1Category"], () => require("./knowledgeV1Category"));

export { KnowledgeV1DocumentArgs, KnowledgeV1DocumentState } from "./knowledgeV1Document";
export type KnowledgeV1Document = import("./knowledgeV1Document").KnowledgeV1Document;
export const KnowledgeV1Document: typeof import("./knowledgeV1Document").KnowledgeV1Document = null as any;
utilities.lazyLoad(exports, ["KnowledgeV1Document"], () => require("./knowledgeV1Document"));

export { LocationArgs, LocationState } from "./location";
export type Location = import("./location").Location;
export const Location: typeof import("./location").Location = null as any;
utilities.lazyLoad(exports, ["Location"], () => require("./location"));

export { OauthClientArgs, OauthClientState } from "./oauthClient";
export type OauthClient = import("./oauthClient").OauthClient;
export const OauthClient: typeof import("./oauthClient").OauthClient = null as any;
utilities.lazyLoad(exports, ["OauthClient"], () => require("./oauthClient"));

export { OrganizationAuthenticationSettingsArgs, OrganizationAuthenticationSettingsState } from "./organizationAuthenticationSettings";
export type OrganizationAuthenticationSettings = import("./organizationAuthenticationSettings").OrganizationAuthenticationSettings;
export const OrganizationAuthenticationSettings: typeof import("./organizationAuthenticationSettings").OrganizationAuthenticationSettings = null as any;
utilities.lazyLoad(exports, ["OrganizationAuthenticationSettings"], () => require("./organizationAuthenticationSettings"));

export { OrgauthorizationPairingArgs, OrgauthorizationPairingState } from "./orgauthorizationPairing";
export type OrgauthorizationPairing = import("./orgauthorizationPairing").OrgauthorizationPairing;
export const OrgauthorizationPairing: typeof import("./orgauthorizationPairing").OrgauthorizationPairing = null as any;
utilities.lazyLoad(exports, ["OrgauthorizationPairing"], () => require("./orgauthorizationPairing"));

export { OutboundAttemptLimitArgs, OutboundAttemptLimitState } from "./outboundAttemptLimit";
export type OutboundAttemptLimit = import("./outboundAttemptLimit").OutboundAttemptLimit;
export const OutboundAttemptLimit: typeof import("./outboundAttemptLimit").OutboundAttemptLimit = null as any;
utilities.lazyLoad(exports, ["OutboundAttemptLimit"], () => require("./outboundAttemptLimit"));

export { OutboundCallabletimesetArgs, OutboundCallabletimesetState } from "./outboundCallabletimeset";
export type OutboundCallabletimeset = import("./outboundCallabletimeset").OutboundCallabletimeset;
export const OutboundCallabletimeset: typeof import("./outboundCallabletimeset").OutboundCallabletimeset = null as any;
utilities.lazyLoad(exports, ["OutboundCallabletimeset"], () => require("./outboundCallabletimeset"));

export { OutboundCallanalysisresponsesetArgs, OutboundCallanalysisresponsesetState } from "./outboundCallanalysisresponseset";
export type OutboundCallanalysisresponseset = import("./outboundCallanalysisresponseset").OutboundCallanalysisresponseset;
export const OutboundCallanalysisresponseset: typeof import("./outboundCallanalysisresponseset").OutboundCallanalysisresponseset = null as any;
utilities.lazyLoad(exports, ["OutboundCallanalysisresponseset"], () => require("./outboundCallanalysisresponseset"));

export { OutboundCampaignArgs, OutboundCampaignState } from "./outboundCampaign";
export type OutboundCampaign = import("./outboundCampaign").OutboundCampaign;
export const OutboundCampaign: typeof import("./outboundCampaign").OutboundCampaign = null as any;
utilities.lazyLoad(exports, ["OutboundCampaign"], () => require("./outboundCampaign"));

export { OutboundCampaignruleArgs, OutboundCampaignruleState } from "./outboundCampaignrule";
export type OutboundCampaignrule = import("./outboundCampaignrule").OutboundCampaignrule;
export const OutboundCampaignrule: typeof import("./outboundCampaignrule").OutboundCampaignrule = null as any;
utilities.lazyLoad(exports, ["OutboundCampaignrule"], () => require("./outboundCampaignrule"));

export { OutboundContactListArgs, OutboundContactListState } from "./outboundContactList";
export type OutboundContactList = import("./outboundContactList").OutboundContactList;
export const OutboundContactList: typeof import("./outboundContactList").OutboundContactList = null as any;
utilities.lazyLoad(exports, ["OutboundContactList"], () => require("./outboundContactList"));

export { OutboundContactListContactArgs, OutboundContactListContactState } from "./outboundContactListContact";
export type OutboundContactListContact = import("./outboundContactListContact").OutboundContactListContact;
export const OutboundContactListContact: typeof import("./outboundContactListContact").OutboundContactListContact = null as any;
utilities.lazyLoad(exports, ["OutboundContactListContact"], () => require("./outboundContactListContact"));

export { OutboundContactListTemplateArgs, OutboundContactListTemplateState } from "./outboundContactListTemplate";
export type OutboundContactListTemplate = import("./outboundContactListTemplate").OutboundContactListTemplate;
export const OutboundContactListTemplate: typeof import("./outboundContactListTemplate").OutboundContactListTemplate = null as any;
utilities.lazyLoad(exports, ["OutboundContactListTemplate"], () => require("./outboundContactListTemplate"));

export { OutboundContactlistfilterArgs, OutboundContactlistfilterState } from "./outboundContactlistfilter";
export type OutboundContactlistfilter = import("./outboundContactlistfilter").OutboundContactlistfilter;
export const OutboundContactlistfilter: typeof import("./outboundContactlistfilter").OutboundContactlistfilter = null as any;
utilities.lazyLoad(exports, ["OutboundContactlistfilter"], () => require("./outboundContactlistfilter"));

export { OutboundDnclistArgs, OutboundDnclistState } from "./outboundDnclist";
export type OutboundDnclist = import("./outboundDnclist").OutboundDnclist;
export const OutboundDnclist: typeof import("./outboundDnclist").OutboundDnclist = null as any;
utilities.lazyLoad(exports, ["OutboundDnclist"], () => require("./outboundDnclist"));

export { OutboundFilespecificationtemplateArgs, OutboundFilespecificationtemplateState } from "./outboundFilespecificationtemplate";
export type OutboundFilespecificationtemplate = import("./outboundFilespecificationtemplate").OutboundFilespecificationtemplate;
export const OutboundFilespecificationtemplate: typeof import("./outboundFilespecificationtemplate").OutboundFilespecificationtemplate = null as any;
utilities.lazyLoad(exports, ["OutboundFilespecificationtemplate"], () => require("./outboundFilespecificationtemplate"));

export { OutboundMessagingcampaignArgs, OutboundMessagingcampaignState } from "./outboundMessagingcampaign";
export type OutboundMessagingcampaign = import("./outboundMessagingcampaign").OutboundMessagingcampaign;
export const OutboundMessagingcampaign: typeof import("./outboundMessagingcampaign").OutboundMessagingcampaign = null as any;
utilities.lazyLoad(exports, ["OutboundMessagingcampaign"], () => require("./outboundMessagingcampaign"));

export { OutboundRulesetArgs, OutboundRulesetState } from "./outboundRuleset";
export type OutboundRuleset = import("./outboundRuleset").OutboundRuleset;
export const OutboundRuleset: typeof import("./outboundRuleset").OutboundRuleset = null as any;
utilities.lazyLoad(exports, ["OutboundRuleset"], () => require("./outboundRuleset"));

export { OutboundSequenceArgs, OutboundSequenceState } from "./outboundSequence";
export type OutboundSequence = import("./outboundSequence").OutboundSequence;
export const OutboundSequence: typeof import("./outboundSequence").OutboundSequence = null as any;
utilities.lazyLoad(exports, ["OutboundSequence"], () => require("./outboundSequence"));

export { OutboundSettingsArgs, OutboundSettingsState } from "./outboundSettings";
export type OutboundSettings = import("./outboundSettings").OutboundSettings;
export const OutboundSettings: typeof import("./outboundSettings").OutboundSettings = null as any;
utilities.lazyLoad(exports, ["OutboundSettings"], () => require("./outboundSettings"));

export { OutboundWrapupcodemappingsArgs, OutboundWrapupcodemappingsState } from "./outboundWrapupcodemappings";
export type OutboundWrapupcodemappings = import("./outboundWrapupcodemappings").OutboundWrapupcodemappings;
export const OutboundWrapupcodemappings: typeof import("./outboundWrapupcodemappings").OutboundWrapupcodemappings = null as any;
utilities.lazyLoad(exports, ["OutboundWrapupcodemappings"], () => require("./outboundWrapupcodemappings"));

export { ProcessautomationTriggerArgs, ProcessautomationTriggerState } from "./processautomationTrigger";
export type ProcessautomationTrigger = import("./processautomationTrigger").ProcessautomationTrigger;
export const ProcessautomationTrigger: typeof import("./processautomationTrigger").ProcessautomationTrigger = null as any;
utilities.lazyLoad(exports, ["ProcessautomationTrigger"], () => require("./processautomationTrigger"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { QualityFormsEvaluationArgs, QualityFormsEvaluationState } from "./qualityFormsEvaluation";
export type QualityFormsEvaluation = import("./qualityFormsEvaluation").QualityFormsEvaluation;
export const QualityFormsEvaluation: typeof import("./qualityFormsEvaluation").QualityFormsEvaluation = null as any;
utilities.lazyLoad(exports, ["QualityFormsEvaluation"], () => require("./qualityFormsEvaluation"));

export { QualityFormsSurveyArgs, QualityFormsSurveyState } from "./qualityFormsSurvey";
export type QualityFormsSurvey = import("./qualityFormsSurvey").QualityFormsSurvey;
export const QualityFormsSurvey: typeof import("./qualityFormsSurvey").QualityFormsSurvey = null as any;
utilities.lazyLoad(exports, ["QualityFormsSurvey"], () => require("./qualityFormsSurvey"));

export { RecordingMediaRetentionPolicyArgs, RecordingMediaRetentionPolicyState } from "./recordingMediaRetentionPolicy";
export type RecordingMediaRetentionPolicy = import("./recordingMediaRetentionPolicy").RecordingMediaRetentionPolicy;
export const RecordingMediaRetentionPolicy: typeof import("./recordingMediaRetentionPolicy").RecordingMediaRetentionPolicy = null as any;
utilities.lazyLoad(exports, ["RecordingMediaRetentionPolicy"], () => require("./recordingMediaRetentionPolicy"));

export { ResponsemanagementLibraryArgs, ResponsemanagementLibraryState } from "./responsemanagementLibrary";
export type ResponsemanagementLibrary = import("./responsemanagementLibrary").ResponsemanagementLibrary;
export const ResponsemanagementLibrary: typeof import("./responsemanagementLibrary").ResponsemanagementLibrary = null as any;
utilities.lazyLoad(exports, ["ResponsemanagementLibrary"], () => require("./responsemanagementLibrary"));

export { ResponsemanagementResponseArgs, ResponsemanagementResponseState } from "./responsemanagementResponse";
export type ResponsemanagementResponse = import("./responsemanagementResponse").ResponsemanagementResponse;
export const ResponsemanagementResponse: typeof import("./responsemanagementResponse").ResponsemanagementResponse = null as any;
utilities.lazyLoad(exports, ["ResponsemanagementResponse"], () => require("./responsemanagementResponse"));

export { ResponsemanagementResponseassetArgs, ResponsemanagementResponseassetState } from "./responsemanagementResponseasset";
export type ResponsemanagementResponseasset = import("./responsemanagementResponseasset").ResponsemanagementResponseasset;
export const ResponsemanagementResponseasset: typeof import("./responsemanagementResponseasset").ResponsemanagementResponseasset = null as any;
utilities.lazyLoad(exports, ["ResponsemanagementResponseasset"], () => require("./responsemanagementResponseasset"));

export { RoutingEmailDomainArgs, RoutingEmailDomainState } from "./routingEmailDomain";
export type RoutingEmailDomain = import("./routingEmailDomain").RoutingEmailDomain;
export const RoutingEmailDomain: typeof import("./routingEmailDomain").RoutingEmailDomain = null as any;
utilities.lazyLoad(exports, ["RoutingEmailDomain"], () => require("./routingEmailDomain"));

export { RoutingEmailRouteArgs, RoutingEmailRouteState } from "./routingEmailRoute";
export type RoutingEmailRoute = import("./routingEmailRoute").RoutingEmailRoute;
export const RoutingEmailRoute: typeof import("./routingEmailRoute").RoutingEmailRoute = null as any;
utilities.lazyLoad(exports, ["RoutingEmailRoute"], () => require("./routingEmailRoute"));

export { RoutingLanguageArgs, RoutingLanguageState } from "./routingLanguage";
export type RoutingLanguage = import("./routingLanguage").RoutingLanguage;
export const RoutingLanguage: typeof import("./routingLanguage").RoutingLanguage = null as any;
utilities.lazyLoad(exports, ["RoutingLanguage"], () => require("./routingLanguage"));

export { RoutingQueueArgs, RoutingQueueState } from "./routingQueue";
export type RoutingQueue = import("./routingQueue").RoutingQueue;
export const RoutingQueue: typeof import("./routingQueue").RoutingQueue = null as any;
utilities.lazyLoad(exports, ["RoutingQueue"], () => require("./routingQueue"));

export { RoutingQueueConditionalGroupRoutingArgs, RoutingQueueConditionalGroupRoutingState } from "./routingQueueConditionalGroupRouting";
export type RoutingQueueConditionalGroupRouting = import("./routingQueueConditionalGroupRouting").RoutingQueueConditionalGroupRouting;
export const RoutingQueueConditionalGroupRouting: typeof import("./routingQueueConditionalGroupRouting").RoutingQueueConditionalGroupRouting = null as any;
utilities.lazyLoad(exports, ["RoutingQueueConditionalGroupRouting"], () => require("./routingQueueConditionalGroupRouting"));

export { RoutingQueueOutboundEmailAddressArgs, RoutingQueueOutboundEmailAddressState } from "./routingQueueOutboundEmailAddress";
export type RoutingQueueOutboundEmailAddress = import("./routingQueueOutboundEmailAddress").RoutingQueueOutboundEmailAddress;
export const RoutingQueueOutboundEmailAddress: typeof import("./routingQueueOutboundEmailAddress").RoutingQueueOutboundEmailAddress = null as any;
utilities.lazyLoad(exports, ["RoutingQueueOutboundEmailAddress"], () => require("./routingQueueOutboundEmailAddress"));

export { RoutingSettingsArgs, RoutingSettingsState } from "./routingSettings";
export type RoutingSettings = import("./routingSettings").RoutingSettings;
export const RoutingSettings: typeof import("./routingSettings").RoutingSettings = null as any;
utilities.lazyLoad(exports, ["RoutingSettings"], () => require("./routingSettings"));

export { RoutingSkillArgs, RoutingSkillState } from "./routingSkill";
export type RoutingSkill = import("./routingSkill").RoutingSkill;
export const RoutingSkill: typeof import("./routingSkill").RoutingSkill = null as any;
utilities.lazyLoad(exports, ["RoutingSkill"], () => require("./routingSkill"));

export { RoutingSkillGroupArgs, RoutingSkillGroupState } from "./routingSkillGroup";
export type RoutingSkillGroup = import("./routingSkillGroup").RoutingSkillGroup;
export const RoutingSkillGroup: typeof import("./routingSkillGroup").RoutingSkillGroup = null as any;
utilities.lazyLoad(exports, ["RoutingSkillGroup"], () => require("./routingSkillGroup"));

export { RoutingSmsAddressArgs, RoutingSmsAddressState } from "./routingSmsAddress";
export type RoutingSmsAddress = import("./routingSmsAddress").RoutingSmsAddress;
export const RoutingSmsAddress: typeof import("./routingSmsAddress").RoutingSmsAddress = null as any;
utilities.lazyLoad(exports, ["RoutingSmsAddress"], () => require("./routingSmsAddress"));

export { RoutingUtilizationArgs, RoutingUtilizationState } from "./routingUtilization";
export type RoutingUtilization = import("./routingUtilization").RoutingUtilization;
export const RoutingUtilization: typeof import("./routingUtilization").RoutingUtilization = null as any;
utilities.lazyLoad(exports, ["RoutingUtilization"], () => require("./routingUtilization"));

export { RoutingUtilizationLabelArgs, RoutingUtilizationLabelState } from "./routingUtilizationLabel";
export type RoutingUtilizationLabel = import("./routingUtilizationLabel").RoutingUtilizationLabel;
export const RoutingUtilizationLabel: typeof import("./routingUtilizationLabel").RoutingUtilizationLabel = null as any;
utilities.lazyLoad(exports, ["RoutingUtilizationLabel"], () => require("./routingUtilizationLabel"));

export { RoutingWrapupcodeArgs, RoutingWrapupcodeState } from "./routingWrapupcode";
export type RoutingWrapupcode = import("./routingWrapupcode").RoutingWrapupcode;
export const RoutingWrapupcode: typeof import("./routingWrapupcode").RoutingWrapupcode = null as any;
utilities.lazyLoad(exports, ["RoutingWrapupcode"], () => require("./routingWrapupcode"));

export { ScriptArgs, ScriptState } from "./script";
export type Script = import("./script").Script;
export const Script: typeof import("./script").Script = null as any;
utilities.lazyLoad(exports, ["Script"], () => require("./script"));

export { TaskManagementWorkbinArgs, TaskManagementWorkbinState } from "./taskManagementWorkbin";
export type TaskManagementWorkbin = import("./taskManagementWorkbin").TaskManagementWorkbin;
export const TaskManagementWorkbin: typeof import("./taskManagementWorkbin").TaskManagementWorkbin = null as any;
utilities.lazyLoad(exports, ["TaskManagementWorkbin"], () => require("./taskManagementWorkbin"));

export { TaskManagementWorkitemArgs, TaskManagementWorkitemState } from "./taskManagementWorkitem";
export type TaskManagementWorkitem = import("./taskManagementWorkitem").TaskManagementWorkitem;
export const TaskManagementWorkitem: typeof import("./taskManagementWorkitem").TaskManagementWorkitem = null as any;
utilities.lazyLoad(exports, ["TaskManagementWorkitem"], () => require("./taskManagementWorkitem"));

export { TaskManagementWorkitemSchemaArgs, TaskManagementWorkitemSchemaState } from "./taskManagementWorkitemSchema";
export type TaskManagementWorkitemSchema = import("./taskManagementWorkitemSchema").TaskManagementWorkitemSchema;
export const TaskManagementWorkitemSchema: typeof import("./taskManagementWorkitemSchema").TaskManagementWorkitemSchema = null as any;
utilities.lazyLoad(exports, ["TaskManagementWorkitemSchema"], () => require("./taskManagementWorkitemSchema"));

export { TaskManagementWorktypeArgs, TaskManagementWorktypeState } from "./taskManagementWorktype";
export type TaskManagementWorktype = import("./taskManagementWorktype").TaskManagementWorktype;
export const TaskManagementWorktype: typeof import("./taskManagementWorktype").TaskManagementWorktype = null as any;
utilities.lazyLoad(exports, ["TaskManagementWorktype"], () => require("./taskManagementWorktype"));

export { TaskManagementWorktypeStatusArgs, TaskManagementWorktypeStatusState } from "./taskManagementWorktypeStatus";
export type TaskManagementWorktypeStatus = import("./taskManagementWorktypeStatus").TaskManagementWorktypeStatus;
export const TaskManagementWorktypeStatus: typeof import("./taskManagementWorktypeStatus").TaskManagementWorktypeStatus = null as any;
utilities.lazyLoad(exports, ["TaskManagementWorktypeStatus"], () => require("./taskManagementWorktypeStatus"));

export { TeamArgs, TeamState } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

export { TelephonyProvidersEdgesDidPoolArgs, TelephonyProvidersEdgesDidPoolState } from "./telephonyProvidersEdgesDidPool";
export type TelephonyProvidersEdgesDidPool = import("./telephonyProvidersEdgesDidPool").TelephonyProvidersEdgesDidPool;
export const TelephonyProvidersEdgesDidPool: typeof import("./telephonyProvidersEdgesDidPool").TelephonyProvidersEdgesDidPool = null as any;
utilities.lazyLoad(exports, ["TelephonyProvidersEdgesDidPool"], () => require("./telephonyProvidersEdgesDidPool"));

export { TelephonyProvidersEdgesEdgeGroupArgs, TelephonyProvidersEdgesEdgeGroupState } from "./telephonyProvidersEdgesEdgeGroup";
export type TelephonyProvidersEdgesEdgeGroup = import("./telephonyProvidersEdgesEdgeGroup").TelephonyProvidersEdgesEdgeGroup;
export const TelephonyProvidersEdgesEdgeGroup: typeof import("./telephonyProvidersEdgesEdgeGroup").TelephonyProvidersEdgesEdgeGroup = null as any;
utilities.lazyLoad(exports, ["TelephonyProvidersEdgesEdgeGroup"], () => require("./telephonyProvidersEdgesEdgeGroup"));

export { TelephonyProvidersEdgesExtensionPoolArgs, TelephonyProvidersEdgesExtensionPoolState } from "./telephonyProvidersEdgesExtensionPool";
export type TelephonyProvidersEdgesExtensionPool = import("./telephonyProvidersEdgesExtensionPool").TelephonyProvidersEdgesExtensionPool;
export const TelephonyProvidersEdgesExtensionPool: typeof import("./telephonyProvidersEdgesExtensionPool").TelephonyProvidersEdgesExtensionPool = null as any;
utilities.lazyLoad(exports, ["TelephonyProvidersEdgesExtensionPool"], () => require("./telephonyProvidersEdgesExtensionPool"));

export { TelephonyProvidersEdgesPhoneArgs, TelephonyProvidersEdgesPhoneState } from "./telephonyProvidersEdgesPhone";
export type TelephonyProvidersEdgesPhone = import("./telephonyProvidersEdgesPhone").TelephonyProvidersEdgesPhone;
export const TelephonyProvidersEdgesPhone: typeof import("./telephonyProvidersEdgesPhone").TelephonyProvidersEdgesPhone = null as any;
utilities.lazyLoad(exports, ["TelephonyProvidersEdgesPhone"], () => require("./telephonyProvidersEdgesPhone"));

export { TelephonyProvidersEdgesPhonebasesettingsArgs, TelephonyProvidersEdgesPhonebasesettingsState } from "./telephonyProvidersEdgesPhonebasesettings";
export type TelephonyProvidersEdgesPhonebasesettings = import("./telephonyProvidersEdgesPhonebasesettings").TelephonyProvidersEdgesPhonebasesettings;
export const TelephonyProvidersEdgesPhonebasesettings: typeof import("./telephonyProvidersEdgesPhonebasesettings").TelephonyProvidersEdgesPhonebasesettings = null as any;
utilities.lazyLoad(exports, ["TelephonyProvidersEdgesPhonebasesettings"], () => require("./telephonyProvidersEdgesPhonebasesettings"));

export { TelephonyProvidersEdgesSiteArgs, TelephonyProvidersEdgesSiteState } from "./telephonyProvidersEdgesSite";
export type TelephonyProvidersEdgesSite = import("./telephonyProvidersEdgesSite").TelephonyProvidersEdgesSite;
export const TelephonyProvidersEdgesSite: typeof import("./telephonyProvidersEdgesSite").TelephonyProvidersEdgesSite = null as any;
utilities.lazyLoad(exports, ["TelephonyProvidersEdgesSite"], () => require("./telephonyProvidersEdgesSite"));

export { TelephonyProvidersEdgesSiteOutboundRouteArgs, TelephonyProvidersEdgesSiteOutboundRouteState } from "./telephonyProvidersEdgesSiteOutboundRoute";
export type TelephonyProvidersEdgesSiteOutboundRoute = import("./telephonyProvidersEdgesSiteOutboundRoute").TelephonyProvidersEdgesSiteOutboundRoute;
export const TelephonyProvidersEdgesSiteOutboundRoute: typeof import("./telephonyProvidersEdgesSiteOutboundRoute").TelephonyProvidersEdgesSiteOutboundRoute = null as any;
utilities.lazyLoad(exports, ["TelephonyProvidersEdgesSiteOutboundRoute"], () => require("./telephonyProvidersEdgesSiteOutboundRoute"));

export { TelephonyProvidersEdgesTrunkArgs, TelephonyProvidersEdgesTrunkState } from "./telephonyProvidersEdgesTrunk";
export type TelephonyProvidersEdgesTrunk = import("./telephonyProvidersEdgesTrunk").TelephonyProvidersEdgesTrunk;
export const TelephonyProvidersEdgesTrunk: typeof import("./telephonyProvidersEdgesTrunk").TelephonyProvidersEdgesTrunk = null as any;
utilities.lazyLoad(exports, ["TelephonyProvidersEdgesTrunk"], () => require("./telephonyProvidersEdgesTrunk"));

export { TelephonyProvidersEdgesTrunkbasesettingsArgs, TelephonyProvidersEdgesTrunkbasesettingsState } from "./telephonyProvidersEdgesTrunkbasesettings";
export type TelephonyProvidersEdgesTrunkbasesettings = import("./telephonyProvidersEdgesTrunkbasesettings").TelephonyProvidersEdgesTrunkbasesettings;
export const TelephonyProvidersEdgesTrunkbasesettings: typeof import("./telephonyProvidersEdgesTrunkbasesettings").TelephonyProvidersEdgesTrunkbasesettings = null as any;
utilities.lazyLoad(exports, ["TelephonyProvidersEdgesTrunkbasesettings"], () => require("./telephonyProvidersEdgesTrunkbasesettings"));

export { TfExportArgs, TfExportState } from "./tfExport";
export type TfExport = import("./tfExport").TfExport;
export const TfExport: typeof import("./tfExport").TfExport = null as any;
utilities.lazyLoad(exports, ["TfExport"], () => require("./tfExport"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserRolesArgs, UserRolesState } from "./userRoles";
export type UserRoles = import("./userRoles").UserRoles;
export const UserRoles: typeof import("./userRoles").UserRoles = null as any;
utilities.lazyLoad(exports, ["UserRoles"], () => require("./userRoles"));

export { WebdeploymentsConfigurationArgs, WebdeploymentsConfigurationState } from "./webdeploymentsConfiguration";
export type WebdeploymentsConfiguration = import("./webdeploymentsConfiguration").WebdeploymentsConfiguration;
export const WebdeploymentsConfiguration: typeof import("./webdeploymentsConfiguration").WebdeploymentsConfiguration = null as any;
utilities.lazyLoad(exports, ["WebdeploymentsConfiguration"], () => require("./webdeploymentsConfiguration"));

export { WebdeploymentsDeploymentArgs, WebdeploymentsDeploymentState } from "./webdeploymentsDeployment";
export type WebdeploymentsDeployment = import("./webdeploymentsDeployment").WebdeploymentsDeployment;
export const WebdeploymentsDeployment: typeof import("./webdeploymentsDeployment").WebdeploymentsDeployment = null as any;
utilities.lazyLoad(exports, ["WebdeploymentsDeployment"], () => require("./webdeploymentsDeployment"));

export { WidgetDeploymentArgs, WidgetDeploymentState } from "./widgetDeployment";
export type WidgetDeployment = import("./widgetDeployment").WidgetDeployment;
export const WidgetDeployment: typeof import("./widgetDeployment").WidgetDeployment = null as any;
utilities.lazyLoad(exports, ["WidgetDeployment"], () => require("./widgetDeployment"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "genesyscloud:index/architectDatatable:ArchitectDatatable":
                return new ArchitectDatatable(name, <any>undefined, { urn })
            case "genesyscloud:index/architectDatatableRow:ArchitectDatatableRow":
                return new ArchitectDatatableRow(name, <any>undefined, { urn })
            case "genesyscloud:index/architectEmergencygroup:ArchitectEmergencygroup":
                return new ArchitectEmergencygroup(name, <any>undefined, { urn })
            case "genesyscloud:index/architectGrammar:ArchitectGrammar":
                return new ArchitectGrammar(name, <any>undefined, { urn })
            case "genesyscloud:index/architectGrammarLanguage:ArchitectGrammarLanguage":
                return new ArchitectGrammarLanguage(name, <any>undefined, { urn })
            case "genesyscloud:index/architectIvr:ArchitectIvr":
                return new ArchitectIvr(name, <any>undefined, { urn })
            case "genesyscloud:index/architectSchedulegroups:ArchitectSchedulegroups":
                return new ArchitectSchedulegroups(name, <any>undefined, { urn })
            case "genesyscloud:index/architectSchedules:ArchitectSchedules":
                return new ArchitectSchedules(name, <any>undefined, { urn })
            case "genesyscloud:index/architectUserPrompt:ArchitectUserPrompt":
                return new ArchitectUserPrompt(name, <any>undefined, { urn })
            case "genesyscloud:index/authDivision:AuthDivision":
                return new AuthDivision(name, <any>undefined, { urn })
            case "genesyscloud:index/authRole:AuthRole":
                return new AuthRole(name, <any>undefined, { urn })
            case "genesyscloud:index/conversationsMessagingIntegrationsInstagram:ConversationsMessagingIntegrationsInstagram":
                return new ConversationsMessagingIntegrationsInstagram(name, <any>undefined, { urn })
            case "genesyscloud:index/conversationsMessagingSettings:ConversationsMessagingSettings":
                return new ConversationsMessagingSettings(name, <any>undefined, { urn })
            case "genesyscloud:index/conversationsMessagingSettingsDefault:ConversationsMessagingSettingsDefault":
                return new ConversationsMessagingSettingsDefault(name, <any>undefined, { urn })
            case "genesyscloud:index/conversationsMessagingSupportedcontent:ConversationsMessagingSupportedcontent":
                return new ConversationsMessagingSupportedcontent(name, <any>undefined, { urn })
            case "genesyscloud:index/employeeperformanceExternalmetricsDefinitions:EmployeeperformanceExternalmetricsDefinitions":
                return new EmployeeperformanceExternalmetricsDefinitions(name, <any>undefined, { urn })
            case "genesyscloud:index/externalcontactsContact:ExternalcontactsContact":
                return new ExternalcontactsContact(name, <any>undefined, { urn })
            case "genesyscloud:index/flow:Flow":
                return new Flow(name, <any>undefined, { urn })
            case "genesyscloud:index/flowLoglevel:FlowLoglevel":
                return new FlowLoglevel(name, <any>undefined, { urn })
            case "genesyscloud:index/flowMilestone:FlowMilestone":
                return new FlowMilestone(name, <any>undefined, { urn })
            case "genesyscloud:index/flowOutcome:FlowOutcome":
                return new FlowOutcome(name, <any>undefined, { urn })
            case "genesyscloud:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "genesyscloud:index/groupRoles:GroupRoles":
                return new GroupRoles(name, <any>undefined, { urn })
            case "genesyscloud:index/idpAdfs:IdpAdfs":
                return new IdpAdfs(name, <any>undefined, { urn })
            case "genesyscloud:index/idpGeneric:IdpGeneric":
                return new IdpGeneric(name, <any>undefined, { urn })
            case "genesyscloud:index/idpGsuite:IdpGsuite":
                return new IdpGsuite(name, <any>undefined, { urn })
            case "genesyscloud:index/idpOkta:IdpOkta":
                return new IdpOkta(name, <any>undefined, { urn })
            case "genesyscloud:index/idpOnelogin:IdpOnelogin":
                return new IdpOnelogin(name, <any>undefined, { urn })
            case "genesyscloud:index/idpPing:IdpPing":
                return new IdpPing(name, <any>undefined, { urn })
            case "genesyscloud:index/idpSalesforce:IdpSalesforce":
                return new IdpSalesforce(name, <any>undefined, { urn })
            case "genesyscloud:index/integration:Integration":
                return new Integration(name, <any>undefined, { urn })
            case "genesyscloud:index/integrationAction:IntegrationAction":
                return new IntegrationAction(name, <any>undefined, { urn })
            case "genesyscloud:index/integrationCredential:IntegrationCredential":
                return new IntegrationCredential(name, <any>undefined, { urn })
            case "genesyscloud:index/integrationCustomAuthAction:IntegrationCustomAuthAction":
                return new IntegrationCustomAuthAction(name, <any>undefined, { urn })
            case "genesyscloud:index/integrationFacebook:IntegrationFacebook":
                return new IntegrationFacebook(name, <any>undefined, { urn })
            case "genesyscloud:index/journeyActionMap:JourneyActionMap":
                return new JourneyActionMap(name, <any>undefined, { urn })
            case "genesyscloud:index/journeyActionTemplate:JourneyActionTemplate":
                return new JourneyActionTemplate(name, <any>undefined, { urn })
            case "genesyscloud:index/journeyOutcome:JourneyOutcome":
                return new JourneyOutcome(name, <any>undefined, { urn })
            case "genesyscloud:index/journeyOutcomePredictor:JourneyOutcomePredictor":
                return new JourneyOutcomePredictor(name, <any>undefined, { urn })
            case "genesyscloud:index/journeySegment:JourneySegment":
                return new JourneySegment(name, <any>undefined, { urn })
            case "genesyscloud:index/journeyViews:JourneyViews":
                return new JourneyViews(name, <any>undefined, { urn })
            case "genesyscloud:index/knowledgeCategory:KnowledgeCategory":
                return new KnowledgeCategory(name, <any>undefined, { urn })
            case "genesyscloud:index/knowledgeDocument:KnowledgeDocument":
                return new KnowledgeDocument(name, <any>undefined, { urn })
            case "genesyscloud:index/knowledgeDocumentVariation:KnowledgeDocumentVariation":
                return new KnowledgeDocumentVariation(name, <any>undefined, { urn })
            case "genesyscloud:index/knowledgeKnowledgebase:KnowledgeKnowledgebase":
                return new KnowledgeKnowledgebase(name, <any>undefined, { urn })
            case "genesyscloud:index/knowledgeLabel:KnowledgeLabel":
                return new KnowledgeLabel(name, <any>undefined, { urn })
            case "genesyscloud:index/knowledgeV1Category:KnowledgeV1Category":
                return new KnowledgeV1Category(name, <any>undefined, { urn })
            case "genesyscloud:index/knowledgeV1Document:KnowledgeV1Document":
                return new KnowledgeV1Document(name, <any>undefined, { urn })
            case "genesyscloud:index/location:Location":
                return new Location(name, <any>undefined, { urn })
            case "genesyscloud:index/oauthClient:OauthClient":
                return new OauthClient(name, <any>undefined, { urn })
            case "genesyscloud:index/organizationAuthenticationSettings:OrganizationAuthenticationSettings":
                return new OrganizationAuthenticationSettings(name, <any>undefined, { urn })
            case "genesyscloud:index/orgauthorizationPairing:OrgauthorizationPairing":
                return new OrgauthorizationPairing(name, <any>undefined, { urn })
            case "genesyscloud:index/outboundAttemptLimit:OutboundAttemptLimit":
                return new OutboundAttemptLimit(name, <any>undefined, { urn })
            case "genesyscloud:index/outboundCallabletimeset:OutboundCallabletimeset":
                return new OutboundCallabletimeset(name, <any>undefined, { urn })
            case "genesyscloud:index/outboundCallanalysisresponseset:OutboundCallanalysisresponseset":
                return new OutboundCallanalysisresponseset(name, <any>undefined, { urn })
            case "genesyscloud:index/outboundCampaign:OutboundCampaign":
                return new OutboundCampaign(name, <any>undefined, { urn })
            case "genesyscloud:index/outboundCampaignrule:OutboundCampaignrule":
                return new OutboundCampaignrule(name, <any>undefined, { urn })
            case "genesyscloud:index/outboundContactList:OutboundContactList":
                return new OutboundContactList(name, <any>undefined, { urn })
            case "genesyscloud:index/outboundContactListContact:OutboundContactListContact":
                return new OutboundContactListContact(name, <any>undefined, { urn })
            case "genesyscloud:index/outboundContactListTemplate:OutboundContactListTemplate":
                return new OutboundContactListTemplate(name, <any>undefined, { urn })
            case "genesyscloud:index/outboundContactlistfilter:OutboundContactlistfilter":
                return new OutboundContactlistfilter(name, <any>undefined, { urn })
            case "genesyscloud:index/outboundDnclist:OutboundDnclist":
                return new OutboundDnclist(name, <any>undefined, { urn })
            case "genesyscloud:index/outboundFilespecificationtemplate:OutboundFilespecificationtemplate":
                return new OutboundFilespecificationtemplate(name, <any>undefined, { urn })
            case "genesyscloud:index/outboundMessagingcampaign:OutboundMessagingcampaign":
                return new OutboundMessagingcampaign(name, <any>undefined, { urn })
            case "genesyscloud:index/outboundRuleset:OutboundRuleset":
                return new OutboundRuleset(name, <any>undefined, { urn })
            case "genesyscloud:index/outboundSequence:OutboundSequence":
                return new OutboundSequence(name, <any>undefined, { urn })
            case "genesyscloud:index/outboundSettings:OutboundSettings":
                return new OutboundSettings(name, <any>undefined, { urn })
            case "genesyscloud:index/outboundWrapupcodemappings:OutboundWrapupcodemappings":
                return new OutboundWrapupcodemappings(name, <any>undefined, { urn })
            case "genesyscloud:index/processautomationTrigger:ProcessautomationTrigger":
                return new ProcessautomationTrigger(name, <any>undefined, { urn })
            case "genesyscloud:index/qualityFormsEvaluation:QualityFormsEvaluation":
                return new QualityFormsEvaluation(name, <any>undefined, { urn })
            case "genesyscloud:index/qualityFormsSurvey:QualityFormsSurvey":
                return new QualityFormsSurvey(name, <any>undefined, { urn })
            case "genesyscloud:index/recordingMediaRetentionPolicy:RecordingMediaRetentionPolicy":
                return new RecordingMediaRetentionPolicy(name, <any>undefined, { urn })
            case "genesyscloud:index/responsemanagementLibrary:ResponsemanagementLibrary":
                return new ResponsemanagementLibrary(name, <any>undefined, { urn })
            case "genesyscloud:index/responsemanagementResponse:ResponsemanagementResponse":
                return new ResponsemanagementResponse(name, <any>undefined, { urn })
            case "genesyscloud:index/responsemanagementResponseasset:ResponsemanagementResponseasset":
                return new ResponsemanagementResponseasset(name, <any>undefined, { urn })
            case "genesyscloud:index/routingEmailDomain:RoutingEmailDomain":
                return new RoutingEmailDomain(name, <any>undefined, { urn })
            case "genesyscloud:index/routingEmailRoute:RoutingEmailRoute":
                return new RoutingEmailRoute(name, <any>undefined, { urn })
            case "genesyscloud:index/routingLanguage:RoutingLanguage":
                return new RoutingLanguage(name, <any>undefined, { urn })
            case "genesyscloud:index/routingQueue:RoutingQueue":
                return new RoutingQueue(name, <any>undefined, { urn })
            case "genesyscloud:index/routingQueueConditionalGroupRouting:RoutingQueueConditionalGroupRouting":
                return new RoutingQueueConditionalGroupRouting(name, <any>undefined, { urn })
            case "genesyscloud:index/routingQueueOutboundEmailAddress:RoutingQueueOutboundEmailAddress":
                return new RoutingQueueOutboundEmailAddress(name, <any>undefined, { urn })
            case "genesyscloud:index/routingSettings:RoutingSettings":
                return new RoutingSettings(name, <any>undefined, { urn })
            case "genesyscloud:index/routingSkill:RoutingSkill":
                return new RoutingSkill(name, <any>undefined, { urn })
            case "genesyscloud:index/routingSkillGroup:RoutingSkillGroup":
                return new RoutingSkillGroup(name, <any>undefined, { urn })
            case "genesyscloud:index/routingSmsAddress:RoutingSmsAddress":
                return new RoutingSmsAddress(name, <any>undefined, { urn })
            case "genesyscloud:index/routingUtilization:RoutingUtilization":
                return new RoutingUtilization(name, <any>undefined, { urn })
            case "genesyscloud:index/routingUtilizationLabel:RoutingUtilizationLabel":
                return new RoutingUtilizationLabel(name, <any>undefined, { urn })
            case "genesyscloud:index/routingWrapupcode:RoutingWrapupcode":
                return new RoutingWrapupcode(name, <any>undefined, { urn })
            case "genesyscloud:index/script:Script":
                return new Script(name, <any>undefined, { urn })
            case "genesyscloud:index/taskManagementWorkbin:TaskManagementWorkbin":
                return new TaskManagementWorkbin(name, <any>undefined, { urn })
            case "genesyscloud:index/taskManagementWorkitem:TaskManagementWorkitem":
                return new TaskManagementWorkitem(name, <any>undefined, { urn })
            case "genesyscloud:index/taskManagementWorkitemSchema:TaskManagementWorkitemSchema":
                return new TaskManagementWorkitemSchema(name, <any>undefined, { urn })
            case "genesyscloud:index/taskManagementWorktype:TaskManagementWorktype":
                return new TaskManagementWorktype(name, <any>undefined, { urn })
            case "genesyscloud:index/taskManagementWorktypeStatus:TaskManagementWorktypeStatus":
                return new TaskManagementWorktypeStatus(name, <any>undefined, { urn })
            case "genesyscloud:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "genesyscloud:index/telephonyProvidersEdgesDidPool:TelephonyProvidersEdgesDidPool":
                return new TelephonyProvidersEdgesDidPool(name, <any>undefined, { urn })
            case "genesyscloud:index/telephonyProvidersEdgesEdgeGroup:TelephonyProvidersEdgesEdgeGroup":
                return new TelephonyProvidersEdgesEdgeGroup(name, <any>undefined, { urn })
            case "genesyscloud:index/telephonyProvidersEdgesExtensionPool:TelephonyProvidersEdgesExtensionPool":
                return new TelephonyProvidersEdgesExtensionPool(name, <any>undefined, { urn })
            case "genesyscloud:index/telephonyProvidersEdgesPhone:TelephonyProvidersEdgesPhone":
                return new TelephonyProvidersEdgesPhone(name, <any>undefined, { urn })
            case "genesyscloud:index/telephonyProvidersEdgesPhonebasesettings:TelephonyProvidersEdgesPhonebasesettings":
                return new TelephonyProvidersEdgesPhonebasesettings(name, <any>undefined, { urn })
            case "genesyscloud:index/telephonyProvidersEdgesSite:TelephonyProvidersEdgesSite":
                return new TelephonyProvidersEdgesSite(name, <any>undefined, { urn })
            case "genesyscloud:index/telephonyProvidersEdgesSiteOutboundRoute:TelephonyProvidersEdgesSiteOutboundRoute":
                return new TelephonyProvidersEdgesSiteOutboundRoute(name, <any>undefined, { urn })
            case "genesyscloud:index/telephonyProvidersEdgesTrunk:TelephonyProvidersEdgesTrunk":
                return new TelephonyProvidersEdgesTrunk(name, <any>undefined, { urn })
            case "genesyscloud:index/telephonyProvidersEdgesTrunkbasesettings:TelephonyProvidersEdgesTrunkbasesettings":
                return new TelephonyProvidersEdgesTrunkbasesettings(name, <any>undefined, { urn })
            case "genesyscloud:index/tfExport:TfExport":
                return new TfExport(name, <any>undefined, { urn })
            case "genesyscloud:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "genesyscloud:index/userRoles:UserRoles":
                return new UserRoles(name, <any>undefined, { urn })
            case "genesyscloud:index/webdeploymentsConfiguration:WebdeploymentsConfiguration":
                return new WebdeploymentsConfiguration(name, <any>undefined, { urn })
            case "genesyscloud:index/webdeploymentsDeployment:WebdeploymentsDeployment":
                return new WebdeploymentsDeployment(name, <any>undefined, { urn })
            case "genesyscloud:index/widgetDeployment:WidgetDeployment":
                return new WidgetDeployment(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("genesyscloud", "index/architectDatatable", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/architectDatatableRow", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/architectEmergencygroup", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/architectGrammar", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/architectGrammarLanguage", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/architectIvr", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/architectSchedulegroups", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/architectSchedules", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/architectUserPrompt", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/authDivision", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/authRole", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/conversationsMessagingIntegrationsInstagram", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/conversationsMessagingSettings", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/conversationsMessagingSettingsDefault", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/conversationsMessagingSupportedcontent", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/employeeperformanceExternalmetricsDefinitions", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/externalcontactsContact", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/flow", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/flowLoglevel", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/flowMilestone", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/flowOutcome", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/group", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/groupRoles", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/idpAdfs", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/idpGeneric", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/idpGsuite", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/idpOkta", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/idpOnelogin", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/idpPing", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/idpSalesforce", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/integration", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/integrationAction", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/integrationCredential", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/integrationCustomAuthAction", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/integrationFacebook", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/journeyActionMap", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/journeyActionTemplate", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/journeyOutcome", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/journeyOutcomePredictor", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/journeySegment", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/journeyViews", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/knowledgeCategory", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/knowledgeDocument", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/knowledgeDocumentVariation", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/knowledgeKnowledgebase", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/knowledgeLabel", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/knowledgeV1Category", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/knowledgeV1Document", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/location", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/oauthClient", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/organizationAuthenticationSettings", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/orgauthorizationPairing", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/outboundAttemptLimit", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/outboundCallabletimeset", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/outboundCallanalysisresponseset", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/outboundCampaign", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/outboundCampaignrule", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/outboundContactList", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/outboundContactListContact", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/outboundContactListTemplate", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/outboundContactlistfilter", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/outboundDnclist", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/outboundFilespecificationtemplate", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/outboundMessagingcampaign", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/outboundRuleset", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/outboundSequence", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/outboundSettings", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/outboundWrapupcodemappings", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/processautomationTrigger", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/qualityFormsEvaluation", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/qualityFormsSurvey", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/recordingMediaRetentionPolicy", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/responsemanagementLibrary", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/responsemanagementResponse", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/responsemanagementResponseasset", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/routingEmailDomain", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/routingEmailRoute", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/routingLanguage", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/routingQueue", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/routingQueueConditionalGroupRouting", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/routingQueueOutboundEmailAddress", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/routingSettings", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/routingSkill", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/routingSkillGroup", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/routingSmsAddress", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/routingUtilization", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/routingUtilizationLabel", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/routingWrapupcode", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/script", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/taskManagementWorkbin", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/taskManagementWorkitem", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/taskManagementWorkitemSchema", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/taskManagementWorktype", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/taskManagementWorktypeStatus", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/team", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/telephonyProvidersEdgesDidPool", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/telephonyProvidersEdgesEdgeGroup", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/telephonyProvidersEdgesExtensionPool", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/telephonyProvidersEdgesPhone", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/telephonyProvidersEdgesPhonebasesettings", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/telephonyProvidersEdgesSite", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/telephonyProvidersEdgesSiteOutboundRoute", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/telephonyProvidersEdgesTrunk", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/telephonyProvidersEdgesTrunkbasesettings", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/tfExport", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/user", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/userRoles", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/webdeploymentsConfiguration", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/webdeploymentsDeployment", _module)
pulumi.runtime.registerResourceModule("genesyscloud", "index/widgetDeployment", _module)
pulumi.runtime.registerResourcePackage("genesyscloud", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:genesyscloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
