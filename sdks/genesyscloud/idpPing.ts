// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IdpPing extends pulumi.CustomResource {
    /**
     * Get an existing IdpPing resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdpPingState, opts?: pulumi.CustomResourceOptions): IdpPing {
        return new IdpPing(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'genesyscloud:index/idpPing:IdpPing';

    /**
     * Returns true if the given object is an instance of IdpPing.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdpPing {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdpPing.__pulumiType;
    }

    /**
     * PEM or DER encoded public X.509 certificates for SAML signature validation.
     */
    public readonly certificates!: pulumi.Output<string[]>;
    /**
     * True if Ping is disabled. Defaults to `false`.
     */
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * Issuer URI provided by Ping.
     */
    public readonly issuerUri!: pulumi.Output<string>;
    /**
     * Name of the provider
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * String used to identify Genesys Cloud to Ping.
     */
    public readonly relyingPartyIdentifier!: pulumi.Output<string | undefined>;
    /**
     * Valid values: HTTP Redirect, HTTP Post
     */
    public readonly sloBinding!: pulumi.Output<string | undefined>;
    /**
     * Provided on app creation.
     */
    public readonly sloUri!: pulumi.Output<string | undefined>;
    /**
     * Target URI provided by Ping.
     */
    public readonly targetUri!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.IdpPingTimeouts | undefined>;

    /**
     * Create a IdpPing resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdpPingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdpPingArgs | IdpPingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdpPingState | undefined;
            resourceInputs["certificates"] = state ? state.certificates : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["issuerUri"] = state ? state.issuerUri : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["relyingPartyIdentifier"] = state ? state.relyingPartyIdentifier : undefined;
            resourceInputs["sloBinding"] = state ? state.sloBinding : undefined;
            resourceInputs["sloUri"] = state ? state.sloUri : undefined;
            resourceInputs["targetUri"] = state ? state.targetUri : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as IdpPingArgs | undefined;
            if ((!args || args.certificates === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificates'");
            }
            if ((!args || args.issuerUri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'issuerUri'");
            }
            resourceInputs["certificates"] = args ? args.certificates : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["issuerUri"] = args ? args.issuerUri : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["relyingPartyIdentifier"] = args ? args.relyingPartyIdentifier : undefined;
            resourceInputs["sloBinding"] = args ? args.sloBinding : undefined;
            resourceInputs["sloUri"] = args ? args.sloUri : undefined;
            resourceInputs["targetUri"] = args ? args.targetUri : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IdpPing.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IdpPing resources.
 */
export interface IdpPingState {
    /**
     * PEM or DER encoded public X.509 certificates for SAML signature validation.
     */
    certificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * True if Ping is disabled. Defaults to `false`.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Issuer URI provided by Ping.
     */
    issuerUri?: pulumi.Input<string>;
    /**
     * Name of the provider
     */
    name?: pulumi.Input<string>;
    /**
     * String used to identify Genesys Cloud to Ping.
     */
    relyingPartyIdentifier?: pulumi.Input<string>;
    /**
     * Valid values: HTTP Redirect, HTTP Post
     */
    sloBinding?: pulumi.Input<string>;
    /**
     * Provided on app creation.
     */
    sloUri?: pulumi.Input<string>;
    /**
     * Target URI provided by Ping.
     */
    targetUri?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.IdpPingTimeouts>;
}

/**
 * The set of arguments for constructing a IdpPing resource.
 */
export interface IdpPingArgs {
    /**
     * PEM or DER encoded public X.509 certificates for SAML signature validation.
     */
    certificates: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * True if Ping is disabled. Defaults to `false`.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Issuer URI provided by Ping.
     */
    issuerUri: pulumi.Input<string>;
    /**
     * Name of the provider
     */
    name?: pulumi.Input<string>;
    /**
     * String used to identify Genesys Cloud to Ping.
     */
    relyingPartyIdentifier?: pulumi.Input<string>;
    /**
     * Valid values: HTTP Redirect, HTTP Post
     */
    sloBinding?: pulumi.Input<string>;
    /**
     * Provided on app creation.
     */
    sloUri?: pulumi.Input<string>;
    /**
     * Target URI provided by Ping.
     */
    targetUri?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.IdpPingTimeouts>;
}
