// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ArchitectEmergencygroup extends pulumi.CustomResource {
    /**
     * Get an existing ArchitectEmergencygroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ArchitectEmergencygroupState, opts?: pulumi.CustomResourceOptions): ArchitectEmergencygroup {
        return new ArchitectEmergencygroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'genesyscloud:index/architectEmergencygroup:ArchitectEmergencygroup';

    /**
     * Returns true if the given object is an instance of ArchitectEmergencygroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ArchitectEmergencygroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ArchitectEmergencygroup.__pulumiType;
    }

    /**
     * Description of the emergency group.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The division to which this emergency group will belong. If not set, the home division will be used.
     */
    public readonly divisionId!: pulumi.Output<string>;
    /**
     * The emergency call flows for this emergency group.
     */
    public readonly emergencyCallFlows!: pulumi.Output<outputs.ArchitectEmergencygroupEmergencyCallFlow[] | undefined>;
    /**
     * The state of the emergency group. Defaults to false/inactive. Defaults to `false`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the emergency group. Note: If the name is changed, the emergency group is dropped and recreated with a new ID.
     * This can cause an Architect flow to be invalid if it references the old emergency group
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a ArchitectEmergencygroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ArchitectEmergencygroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ArchitectEmergencygroupArgs | ArchitectEmergencygroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ArchitectEmergencygroupState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["divisionId"] = state ? state.divisionId : undefined;
            resourceInputs["emergencyCallFlows"] = state ? state.emergencyCallFlows : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as ArchitectEmergencygroupArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["divisionId"] = args ? args.divisionId : undefined;
            resourceInputs["emergencyCallFlows"] = args ? args.emergencyCallFlows : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ArchitectEmergencygroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ArchitectEmergencygroup resources.
 */
export interface ArchitectEmergencygroupState {
    /**
     * Description of the emergency group.
     */
    description?: pulumi.Input<string>;
    /**
     * The division to which this emergency group will belong. If not set, the home division will be used.
     */
    divisionId?: pulumi.Input<string>;
    /**
     * The emergency call flows for this emergency group.
     */
    emergencyCallFlows?: pulumi.Input<pulumi.Input<inputs.ArchitectEmergencygroupEmergencyCallFlow>[]>;
    /**
     * The state of the emergency group. Defaults to false/inactive. Defaults to `false`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Name of the emergency group. Note: If the name is changed, the emergency group is dropped and recreated with a new ID.
     * This can cause an Architect flow to be invalid if it references the old emergency group
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ArchitectEmergencygroup resource.
 */
export interface ArchitectEmergencygroupArgs {
    /**
     * Description of the emergency group.
     */
    description?: pulumi.Input<string>;
    /**
     * The division to which this emergency group will belong. If not set, the home division will be used.
     */
    divisionId?: pulumi.Input<string>;
    /**
     * The emergency call flows for this emergency group.
     */
    emergencyCallFlows?: pulumi.Input<pulumi.Input<inputs.ArchitectEmergencygroupEmergencyCallFlow>[]>;
    /**
     * The state of the emergency group. Defaults to false/inactive. Defaults to `false`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Name of the emergency group. Note: If the name is changed, the emergency group is dropped and recreated with a new ID.
     * This can cause an Architect flow to be invalid if it references the old emergency group
     */
    name?: pulumi.Input<string>;
}
