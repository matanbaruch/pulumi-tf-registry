// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpcTrafficMirrorSession extends pulumi.CustomResource {
    /**
     * Get an existing VpcTrafficMirrorSession resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcTrafficMirrorSessionState, opts?: pulumi.CustomResourceOptions): VpcTrafficMirrorSession {
        return new VpcTrafficMirrorSession(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/vpcTrafficMirrorSession:VpcTrafficMirrorSession';

    /**
     * Returns true if the given object is an instance of VpcTrafficMirrorSession.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcTrafficMirrorSession {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcTrafficMirrorSession.__pulumiType;
    }

    public readonly dryRun!: pulumi.Output<boolean | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly packetLength!: pulumi.Output<number>;
    public readonly priority!: pulumi.Output<number>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.VpcTrafficMirrorSessionTimeouts | undefined>;
    public readonly trafficMirrorFilterId!: pulumi.Output<string>;
    public readonly trafficMirrorSessionDescription!: pulumi.Output<string | undefined>;
    public readonly trafficMirrorSessionName!: pulumi.Output<string | undefined>;
    public readonly trafficMirrorSourceIds!: pulumi.Output<string[]>;
    public readonly trafficMirrorTargetId!: pulumi.Output<string>;
    public readonly trafficMirrorTargetType!: pulumi.Output<string>;
    public readonly virtualNetworkId!: pulumi.Output<number>;

    /**
     * Create a VpcTrafficMirrorSession resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcTrafficMirrorSessionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcTrafficMirrorSessionArgs | VpcTrafficMirrorSessionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcTrafficMirrorSessionState | undefined;
            resourceInputs["dryRun"] = state ? state.dryRun : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["packetLength"] = state ? state.packetLength : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["trafficMirrorFilterId"] = state ? state.trafficMirrorFilterId : undefined;
            resourceInputs["trafficMirrorSessionDescription"] = state ? state.trafficMirrorSessionDescription : undefined;
            resourceInputs["trafficMirrorSessionName"] = state ? state.trafficMirrorSessionName : undefined;
            resourceInputs["trafficMirrorSourceIds"] = state ? state.trafficMirrorSourceIds : undefined;
            resourceInputs["trafficMirrorTargetId"] = state ? state.trafficMirrorTargetId : undefined;
            resourceInputs["trafficMirrorTargetType"] = state ? state.trafficMirrorTargetType : undefined;
            resourceInputs["virtualNetworkId"] = state ? state.virtualNetworkId : undefined;
        } else {
            const args = argsOrState as VpcTrafficMirrorSessionArgs | undefined;
            if ((!args || args.priority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            if ((!args || args.trafficMirrorFilterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trafficMirrorFilterId'");
            }
            if ((!args || args.trafficMirrorSourceIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trafficMirrorSourceIds'");
            }
            if ((!args || args.trafficMirrorTargetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trafficMirrorTargetId'");
            }
            if ((!args || args.trafficMirrorTargetType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trafficMirrorTargetType'");
            }
            resourceInputs["dryRun"] = args ? args.dryRun : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["packetLength"] = args ? args.packetLength : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["trafficMirrorFilterId"] = args ? args.trafficMirrorFilterId : undefined;
            resourceInputs["trafficMirrorSessionDescription"] = args ? args.trafficMirrorSessionDescription : undefined;
            resourceInputs["trafficMirrorSessionName"] = args ? args.trafficMirrorSessionName : undefined;
            resourceInputs["trafficMirrorSourceIds"] = args ? args.trafficMirrorSourceIds : undefined;
            resourceInputs["trafficMirrorTargetId"] = args ? args.trafficMirrorTargetId : undefined;
            resourceInputs["trafficMirrorTargetType"] = args ? args.trafficMirrorTargetType : undefined;
            resourceInputs["virtualNetworkId"] = args ? args.virtualNetworkId : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcTrafficMirrorSession.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpcTrafficMirrorSession resources.
 */
export interface VpcTrafficMirrorSessionState {
    dryRun?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    packetLength?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    resourceGroupId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VpcTrafficMirrorSessionTimeouts>;
    trafficMirrorFilterId?: pulumi.Input<string>;
    trafficMirrorSessionDescription?: pulumi.Input<string>;
    trafficMirrorSessionName?: pulumi.Input<string>;
    trafficMirrorSourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    trafficMirrorTargetId?: pulumi.Input<string>;
    trafficMirrorTargetType?: pulumi.Input<string>;
    virtualNetworkId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a VpcTrafficMirrorSession resource.
 */
export interface VpcTrafficMirrorSessionArgs {
    dryRun?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    packetLength?: pulumi.Input<number>;
    priority: pulumi.Input<number>;
    resourceGroupId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VpcTrafficMirrorSessionTimeouts>;
    trafficMirrorFilterId: pulumi.Input<string>;
    trafficMirrorSessionDescription?: pulumi.Input<string>;
    trafficMirrorSessionName?: pulumi.Input<string>;
    trafficMirrorSourceIds: pulumi.Input<pulumi.Input<string>[]>;
    trafficMirrorTargetId: pulumi.Input<string>;
    trafficMirrorTargetType: pulumi.Input<string>;
    virtualNetworkId?: pulumi.Input<number>;
}
