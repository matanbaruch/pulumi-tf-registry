// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ExpressConnectEcFailoverTestJob extends pulumi.CustomResource {
    /**
     * Get an existing ExpressConnectEcFailoverTestJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExpressConnectEcFailoverTestJobState, opts?: pulumi.CustomResourceOptions): ExpressConnectEcFailoverTestJob {
        return new ExpressConnectEcFailoverTestJob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/expressConnectEcFailoverTestJob:ExpressConnectEcFailoverTestJob';

    /**
     * Returns true if the given object is an instance of ExpressConnectEcFailoverTestJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExpressConnectEcFailoverTestJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExpressConnectEcFailoverTestJob.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly ecFailoverTestJobName!: pulumi.Output<string | undefined>;
    public readonly jobDuration!: pulumi.Output<number>;
    public readonly jobType!: pulumi.Output<string>;
    public readonly resourceIds!: pulumi.Output<string[]>;
    public readonly resourceType!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ExpressConnectEcFailoverTestJobTimeouts | undefined>;

    /**
     * Create a ExpressConnectEcFailoverTestJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExpressConnectEcFailoverTestJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExpressConnectEcFailoverTestJobArgs | ExpressConnectEcFailoverTestJobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExpressConnectEcFailoverTestJobState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ecFailoverTestJobName"] = state ? state.ecFailoverTestJobName : undefined;
            resourceInputs["jobDuration"] = state ? state.jobDuration : undefined;
            resourceInputs["jobType"] = state ? state.jobType : undefined;
            resourceInputs["resourceIds"] = state ? state.resourceIds : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ExpressConnectEcFailoverTestJobArgs | undefined;
            if ((!args || args.jobDuration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'jobDuration'");
            }
            if ((!args || args.jobType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'jobType'");
            }
            if ((!args || args.resourceIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceIds'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ecFailoverTestJobName"] = args ? args.ecFailoverTestJobName : undefined;
            resourceInputs["jobDuration"] = args ? args.jobDuration : undefined;
            resourceInputs["jobType"] = args ? args.jobType : undefined;
            resourceInputs["resourceIds"] = args ? args.resourceIds : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExpressConnectEcFailoverTestJob.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ExpressConnectEcFailoverTestJob resources.
 */
export interface ExpressConnectEcFailoverTestJobState {
    description?: pulumi.Input<string>;
    ecFailoverTestJobName?: pulumi.Input<string>;
    jobDuration?: pulumi.Input<number>;
    jobType?: pulumi.Input<string>;
    resourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    resourceType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ExpressConnectEcFailoverTestJobTimeouts>;
}

/**
 * The set of arguments for constructing a ExpressConnectEcFailoverTestJob resource.
 */
export interface ExpressConnectEcFailoverTestJobArgs {
    description?: pulumi.Input<string>;
    ecFailoverTestJobName?: pulumi.Input<string>;
    jobDuration: pulumi.Input<number>;
    jobType: pulumi.Input<string>;
    resourceIds: pulumi.Input<pulumi.Input<string>[]>;
    resourceType: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ExpressConnectEcFailoverTestJobTimeouts>;
}
