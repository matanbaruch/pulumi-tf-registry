// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VideoSurveillanceSystemGroup extends pulumi.CustomResource {
    /**
     * Get an existing VideoSurveillanceSystemGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VideoSurveillanceSystemGroupState, opts?: pulumi.CustomResourceOptions): VideoSurveillanceSystemGroup {
        return new VideoSurveillanceSystemGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/videoSurveillanceSystemGroup:VideoSurveillanceSystemGroup';

    /**
     * Returns true if the given object is an instance of VideoSurveillanceSystemGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VideoSurveillanceSystemGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VideoSurveillanceSystemGroup.__pulumiType;
    }

    public readonly callback!: pulumi.Output<string | undefined>;
    public /*out*/ readonly captureImage!: pulumi.Output<number>;
    public /*out*/ readonly captureInterval!: pulumi.Output<number>;
    public /*out*/ readonly captureOssBucket!: pulumi.Output<string>;
    public /*out*/ readonly captureOssPath!: pulumi.Output<string>;
    public /*out*/ readonly captureVideo!: pulumi.Output<number>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly enabled!: pulumi.Output<boolean>;
    public readonly groupName!: pulumi.Output<string>;
    public readonly inProtocol!: pulumi.Output<string>;
    public /*out*/ readonly lazyPull!: pulumi.Output<boolean>;
    public readonly outProtocol!: pulumi.Output<string>;
    public readonly playDomain!: pulumi.Output<string>;
    public readonly pushDomain!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<boolean>;

    /**
     * Create a VideoSurveillanceSystemGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VideoSurveillanceSystemGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VideoSurveillanceSystemGroupArgs | VideoSurveillanceSystemGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VideoSurveillanceSystemGroupState | undefined;
            resourceInputs["callback"] = state ? state.callback : undefined;
            resourceInputs["captureImage"] = state ? state.captureImage : undefined;
            resourceInputs["captureInterval"] = state ? state.captureInterval : undefined;
            resourceInputs["captureOssBucket"] = state ? state.captureOssBucket : undefined;
            resourceInputs["captureOssPath"] = state ? state.captureOssPath : undefined;
            resourceInputs["captureVideo"] = state ? state.captureVideo : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["inProtocol"] = state ? state.inProtocol : undefined;
            resourceInputs["lazyPull"] = state ? state.lazyPull : undefined;
            resourceInputs["outProtocol"] = state ? state.outProtocol : undefined;
            resourceInputs["playDomain"] = state ? state.playDomain : undefined;
            resourceInputs["pushDomain"] = state ? state.pushDomain : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as VideoSurveillanceSystemGroupArgs | undefined;
            if ((!args || args.groupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupName'");
            }
            if ((!args || args.inProtocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inProtocol'");
            }
            if ((!args || args.outProtocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'outProtocol'");
            }
            if ((!args || args.playDomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'playDomain'");
            }
            if ((!args || args.pushDomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pushDomain'");
            }
            resourceInputs["callback"] = args ? args.callback : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["groupName"] = args ? args.groupName : undefined;
            resourceInputs["inProtocol"] = args ? args.inProtocol : undefined;
            resourceInputs["outProtocol"] = args ? args.outProtocol : undefined;
            resourceInputs["playDomain"] = args ? args.playDomain : undefined;
            resourceInputs["pushDomain"] = args ? args.pushDomain : undefined;
            resourceInputs["captureImage"] = undefined /*out*/;
            resourceInputs["captureInterval"] = undefined /*out*/;
            resourceInputs["captureOssBucket"] = undefined /*out*/;
            resourceInputs["captureOssPath"] = undefined /*out*/;
            resourceInputs["captureVideo"] = undefined /*out*/;
            resourceInputs["lazyPull"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VideoSurveillanceSystemGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VideoSurveillanceSystemGroup resources.
 */
export interface VideoSurveillanceSystemGroupState {
    callback?: pulumi.Input<string>;
    captureImage?: pulumi.Input<number>;
    captureInterval?: pulumi.Input<number>;
    captureOssBucket?: pulumi.Input<string>;
    captureOssPath?: pulumi.Input<string>;
    captureVideo?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    groupName?: pulumi.Input<string>;
    inProtocol?: pulumi.Input<string>;
    lazyPull?: pulumi.Input<boolean>;
    outProtocol?: pulumi.Input<string>;
    playDomain?: pulumi.Input<string>;
    pushDomain?: pulumi.Input<string>;
    status?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a VideoSurveillanceSystemGroup resource.
 */
export interface VideoSurveillanceSystemGroupArgs {
    callback?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    groupName: pulumi.Input<string>;
    inProtocol: pulumi.Input<string>;
    outProtocol: pulumi.Input<string>;
    playDomain: pulumi.Input<string>;
    pushDomain: pulumi.Input<string>;
}
