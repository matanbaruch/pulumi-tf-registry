// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AligreenImageLib extends pulumi.CustomResource {
    /**
     * Get an existing AligreenImageLib resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AligreenImageLibState, opts?: pulumi.CustomResourceOptions): AligreenImageLib {
        return new AligreenImageLib(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/aligreenImageLib:AligreenImageLib';

    /**
     * Returns true if the given object is an instance of AligreenImageLib.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AligreenImageLib {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AligreenImageLib.__pulumiType;
    }

    public readonly bizTypes!: pulumi.Output<string[] | undefined>;
    public readonly category!: pulumi.Output<string>;
    public readonly enable!: pulumi.Output<boolean>;
    public readonly imageLibName!: pulumi.Output<string>;
    public readonly scene!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.AligreenImageLibTimeouts | undefined>;

    /**
     * Create a AligreenImageLib resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AligreenImageLibArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AligreenImageLibArgs | AligreenImageLibState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AligreenImageLibState | undefined;
            resourceInputs["bizTypes"] = state ? state.bizTypes : undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["imageLibName"] = state ? state.imageLibName : undefined;
            resourceInputs["scene"] = state ? state.scene : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as AligreenImageLibArgs | undefined;
            if ((!args || args.category === undefined) && !opts.urn) {
                throw new Error("Missing required property 'category'");
            }
            if ((!args || args.imageLibName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageLibName'");
            }
            if ((!args || args.scene === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scene'");
            }
            resourceInputs["bizTypes"] = args ? args.bizTypes : undefined;
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["imageLibName"] = args ? args.imageLibName : undefined;
            resourceInputs["scene"] = args ? args.scene : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AligreenImageLib.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AligreenImageLib resources.
 */
export interface AligreenImageLibState {
    bizTypes?: pulumi.Input<pulumi.Input<string>[]>;
    category?: pulumi.Input<string>;
    enable?: pulumi.Input<boolean>;
    imageLibName?: pulumi.Input<string>;
    scene?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.AligreenImageLibTimeouts>;
}

/**
 * The set of arguments for constructing a AligreenImageLib resource.
 */
export interface AligreenImageLibArgs {
    bizTypes?: pulumi.Input<pulumi.Input<string>[]>;
    category: pulumi.Input<string>;
    enable?: pulumi.Input<boolean>;
    imageLibName: pulumi.Input<string>;
    scene: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.AligreenImageLibTimeouts>;
}
