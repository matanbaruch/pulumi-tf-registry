// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudFirewallNatFirewall extends pulumi.CustomResource {
    /**
     * Get an existing CloudFirewallNatFirewall resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudFirewallNatFirewallState, opts?: pulumi.CustomResourceOptions): CloudFirewallNatFirewall {
        return new CloudFirewallNatFirewall(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/cloudFirewallNatFirewall:CloudFirewallNatFirewall';

    /**
     * Returns true if the given object is an instance of CloudFirewallNatFirewall.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudFirewallNatFirewall {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudFirewallNatFirewall.__pulumiType;
    }

    public readonly firewallSwitch!: pulumi.Output<string | undefined>;
    public readonly lang!: pulumi.Output<string | undefined>;
    public readonly natGatewayId!: pulumi.Output<string>;
    public readonly natRouteEntryLists!: pulumi.Output<outputs.CloudFirewallNatFirewallNatRouteEntryList[]>;
    public readonly proxyName!: pulumi.Output<string>;
    public readonly regionNo!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly strictMode!: pulumi.Output<number | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.CloudFirewallNatFirewallTimeouts | undefined>;
    public readonly vpcId!: pulumi.Output<string>;
    public readonly vswitchAuto!: pulumi.Output<string | undefined>;
    public readonly vswitchCidr!: pulumi.Output<string | undefined>;
    public readonly vswitchId!: pulumi.Output<string | undefined>;

    /**
     * Create a CloudFirewallNatFirewall resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudFirewallNatFirewallArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudFirewallNatFirewallArgs | CloudFirewallNatFirewallState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudFirewallNatFirewallState | undefined;
            resourceInputs["firewallSwitch"] = state ? state.firewallSwitch : undefined;
            resourceInputs["lang"] = state ? state.lang : undefined;
            resourceInputs["natGatewayId"] = state ? state.natGatewayId : undefined;
            resourceInputs["natRouteEntryLists"] = state ? state.natRouteEntryLists : undefined;
            resourceInputs["proxyName"] = state ? state.proxyName : undefined;
            resourceInputs["regionNo"] = state ? state.regionNo : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["strictMode"] = state ? state.strictMode : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchAuto"] = state ? state.vswitchAuto : undefined;
            resourceInputs["vswitchCidr"] = state ? state.vswitchCidr : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
        } else {
            const args = argsOrState as CloudFirewallNatFirewallArgs | undefined;
            if ((!args || args.natGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'natGatewayId'");
            }
            if ((!args || args.natRouteEntryLists === undefined) && !opts.urn) {
                throw new Error("Missing required property 'natRouteEntryLists'");
            }
            if ((!args || args.proxyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'proxyName'");
            }
            if ((!args || args.regionNo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regionNo'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["firewallSwitch"] = args ? args.firewallSwitch : undefined;
            resourceInputs["lang"] = args ? args.lang : undefined;
            resourceInputs["natGatewayId"] = args ? args.natGatewayId : undefined;
            resourceInputs["natRouteEntryLists"] = args ? args.natRouteEntryLists : undefined;
            resourceInputs["proxyName"] = args ? args.proxyName : undefined;
            resourceInputs["regionNo"] = args ? args.regionNo : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["strictMode"] = args ? args.strictMode : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vswitchAuto"] = args ? args.vswitchAuto : undefined;
            resourceInputs["vswitchCidr"] = args ? args.vswitchCidr : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudFirewallNatFirewall.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudFirewallNatFirewall resources.
 */
export interface CloudFirewallNatFirewallState {
    firewallSwitch?: pulumi.Input<string>;
    lang?: pulumi.Input<string>;
    natGatewayId?: pulumi.Input<string>;
    natRouteEntryLists?: pulumi.Input<pulumi.Input<inputs.CloudFirewallNatFirewallNatRouteEntryList>[]>;
    proxyName?: pulumi.Input<string>;
    regionNo?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    strictMode?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.CloudFirewallNatFirewallTimeouts>;
    vpcId?: pulumi.Input<string>;
    vswitchAuto?: pulumi.Input<string>;
    vswitchCidr?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudFirewallNatFirewall resource.
 */
export interface CloudFirewallNatFirewallArgs {
    firewallSwitch?: pulumi.Input<string>;
    lang?: pulumi.Input<string>;
    natGatewayId: pulumi.Input<string>;
    natRouteEntryLists: pulumi.Input<pulumi.Input<inputs.CloudFirewallNatFirewallNatRouteEntryList>[]>;
    proxyName: pulumi.Input<string>;
    regionNo: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    strictMode?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.CloudFirewallNatFirewallTimeouts>;
    vpcId: pulumi.Input<string>;
    vswitchAuto?: pulumi.Input<string>;
    vswitchCidr?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
}
