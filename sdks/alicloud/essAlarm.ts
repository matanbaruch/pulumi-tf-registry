// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EssAlarm extends pulumi.CustomResource {
    /**
     * Get an existing EssAlarm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EssAlarmState, opts?: pulumi.CustomResourceOptions): EssAlarm {
        return new EssAlarm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/essAlarm:EssAlarm';

    /**
     * Returns true if the given object is an instance of EssAlarm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EssAlarm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EssAlarm.__pulumiType;
    }

    public readonly alarmActions!: pulumi.Output<string[]>;
    public readonly cloudMonitorGroupId!: pulumi.Output<number | undefined>;
    public readonly comparisonOperator!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dimensions!: pulumi.Output<{[key: string]: string}>;
    public readonly enable!: pulumi.Output<boolean | undefined>;
    public readonly evaluationCount!: pulumi.Output<number | undefined>;
    public readonly expressions!: pulumi.Output<outputs.EssAlarmExpression[] | undefined>;
    public readonly expressionsLogicOperator!: pulumi.Output<string>;
    public readonly metricName!: pulumi.Output<string>;
    public readonly metricType!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly period!: pulumi.Output<number>;
    public readonly scalingGroupId!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly statistics!: pulumi.Output<string>;
    public readonly threshold!: pulumi.Output<string>;

    /**
     * Create a EssAlarm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EssAlarmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EssAlarmArgs | EssAlarmState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EssAlarmState | undefined;
            resourceInputs["alarmActions"] = state ? state.alarmActions : undefined;
            resourceInputs["cloudMonitorGroupId"] = state ? state.cloudMonitorGroupId : undefined;
            resourceInputs["comparisonOperator"] = state ? state.comparisonOperator : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dimensions"] = state ? state.dimensions : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["evaluationCount"] = state ? state.evaluationCount : undefined;
            resourceInputs["expressions"] = state ? state.expressions : undefined;
            resourceInputs["expressionsLogicOperator"] = state ? state.expressionsLogicOperator : undefined;
            resourceInputs["metricName"] = state ? state.metricName : undefined;
            resourceInputs["metricType"] = state ? state.metricType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["scalingGroupId"] = state ? state.scalingGroupId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["statistics"] = state ? state.statistics : undefined;
            resourceInputs["threshold"] = state ? state.threshold : undefined;
        } else {
            const args = argsOrState as EssAlarmArgs | undefined;
            if ((!args || args.alarmActions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alarmActions'");
            }
            if ((!args || args.scalingGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scalingGroupId'");
            }
            resourceInputs["alarmActions"] = args ? args.alarmActions : undefined;
            resourceInputs["cloudMonitorGroupId"] = args ? args.cloudMonitorGroupId : undefined;
            resourceInputs["comparisonOperator"] = args ? args.comparisonOperator : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dimensions"] = args ? args.dimensions : undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["evaluationCount"] = args ? args.evaluationCount : undefined;
            resourceInputs["expressions"] = args ? args.expressions : undefined;
            resourceInputs["expressionsLogicOperator"] = args ? args.expressionsLogicOperator : undefined;
            resourceInputs["metricName"] = args ? args.metricName : undefined;
            resourceInputs["metricType"] = args ? args.metricType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["scalingGroupId"] = args ? args.scalingGroupId : undefined;
            resourceInputs["statistics"] = args ? args.statistics : undefined;
            resourceInputs["threshold"] = args ? args.threshold : undefined;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EssAlarm.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EssAlarm resources.
 */
export interface EssAlarmState {
    alarmActions?: pulumi.Input<pulumi.Input<string>[]>;
    cloudMonitorGroupId?: pulumi.Input<number>;
    comparisonOperator?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dimensions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    enable?: pulumi.Input<boolean>;
    evaluationCount?: pulumi.Input<number>;
    expressions?: pulumi.Input<pulumi.Input<inputs.EssAlarmExpression>[]>;
    expressionsLogicOperator?: pulumi.Input<string>;
    metricName?: pulumi.Input<string>;
    metricType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    scalingGroupId?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    statistics?: pulumi.Input<string>;
    threshold?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EssAlarm resource.
 */
export interface EssAlarmArgs {
    alarmActions: pulumi.Input<pulumi.Input<string>[]>;
    cloudMonitorGroupId?: pulumi.Input<number>;
    comparisonOperator?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dimensions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    enable?: pulumi.Input<boolean>;
    evaluationCount?: pulumi.Input<number>;
    expressions?: pulumi.Input<pulumi.Input<inputs.EssAlarmExpression>[]>;
    expressionsLogicOperator?: pulumi.Input<string>;
    metricName?: pulumi.Input<string>;
    metricType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    scalingGroupId: pulumi.Input<string>;
    statistics?: pulumi.Input<string>;
    threshold?: pulumi.Input<string>;
}
