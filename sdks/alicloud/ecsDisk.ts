// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EcsDisk extends pulumi.CustomResource {
    /**
     * Get an existing EcsDisk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcsDiskState, opts?: pulumi.CustomResourceOptions): EcsDisk {
        return new EcsDisk(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/ecsDisk:EcsDisk';

    /**
     * Returns true if the given object is an instance of EcsDisk.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcsDisk {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcsDisk.__pulumiType;
    }

    public readonly advancedFeatures!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    public readonly category!: pulumi.Output<string | undefined>;
    public readonly dedicatedBlockStorageClusterId!: pulumi.Output<string | undefined>;
    public readonly deleteAutoSnapshot!: pulumi.Output<boolean | undefined>;
    public readonly deleteWithInstance!: pulumi.Output<boolean>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly diskName!: pulumi.Output<string>;
    public readonly dryRun!: pulumi.Output<boolean | undefined>;
    public readonly enableAutoSnapshot!: pulumi.Output<boolean>;
    public readonly encryptAlgorithm!: pulumi.Output<string | undefined>;
    public readonly encrypted!: pulumi.Output<boolean | undefined>;
    public readonly instanceId!: pulumi.Output<string>;
    public readonly kmsKeyId!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly name!: pulumi.Output<string>;
    public readonly paymentType!: pulumi.Output<string>;
    public readonly performanceLevel!: pulumi.Output<string>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly size!: pulumi.Output<number>;
    public readonly snapshotId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly storageSetId!: pulumi.Output<string | undefined>;
    public readonly storageSetPartitionNumber!: pulumi.Output<number | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.EcsDiskTimeouts | undefined>;
    public readonly type!: pulumi.Output<string | undefined>;
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a EcsDisk resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: EcsDiskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcsDiskArgs | EcsDiskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcsDiskState | undefined;
            resourceInputs["advancedFeatures"] = state ? state.advancedFeatures : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["dedicatedBlockStorageClusterId"] = state ? state.dedicatedBlockStorageClusterId : undefined;
            resourceInputs["deleteAutoSnapshot"] = state ? state.deleteAutoSnapshot : undefined;
            resourceInputs["deleteWithInstance"] = state ? state.deleteWithInstance : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diskName"] = state ? state.diskName : undefined;
            resourceInputs["dryRun"] = state ? state.dryRun : undefined;
            resourceInputs["enableAutoSnapshot"] = state ? state.enableAutoSnapshot : undefined;
            resourceInputs["encryptAlgorithm"] = state ? state.encryptAlgorithm : undefined;
            resourceInputs["encrypted"] = state ? state.encrypted : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["paymentType"] = state ? state.paymentType : undefined;
            resourceInputs["performanceLevel"] = state ? state.performanceLevel : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storageSetId"] = state ? state.storageSetId : undefined;
            resourceInputs["storageSetPartitionNumber"] = state ? state.storageSetPartitionNumber : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as EcsDiskArgs | undefined;
            resourceInputs["advancedFeatures"] = args ? args.advancedFeatures : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["dedicatedBlockStorageClusterId"] = args ? args.dedicatedBlockStorageClusterId : undefined;
            resourceInputs["deleteAutoSnapshot"] = args ? args.deleteAutoSnapshot : undefined;
            resourceInputs["deleteWithInstance"] = args ? args.deleteWithInstance : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["diskName"] = args ? args.diskName : undefined;
            resourceInputs["dryRun"] = args ? args.dryRun : undefined;
            resourceInputs["enableAutoSnapshot"] = args ? args.enableAutoSnapshot : undefined;
            resourceInputs["encryptAlgorithm"] = args ? args.encryptAlgorithm : undefined;
            resourceInputs["encrypted"] = args ? args.encrypted : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["paymentType"] = args ? args.paymentType : undefined;
            resourceInputs["performanceLevel"] = args ? args.performanceLevel : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["storageSetId"] = args ? args.storageSetId : undefined;
            resourceInputs["storageSetPartitionNumber"] = args ? args.storageSetPartitionNumber : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EcsDisk.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EcsDisk resources.
 */
export interface EcsDiskState {
    advancedFeatures?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    availabilityZone?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    dedicatedBlockStorageClusterId?: pulumi.Input<string>;
    deleteAutoSnapshot?: pulumi.Input<boolean>;
    deleteWithInstance?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    diskName?: pulumi.Input<string>;
    dryRun?: pulumi.Input<boolean>;
    enableAutoSnapshot?: pulumi.Input<boolean>;
    encryptAlgorithm?: pulumi.Input<string>;
    encrypted?: pulumi.Input<boolean>;
    instanceId?: pulumi.Input<string>;
    kmsKeyId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    name?: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    performanceLevel?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    snapshotId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    storageSetId?: pulumi.Input<string>;
    storageSetPartitionNumber?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.EcsDiskTimeouts>;
    type?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EcsDisk resource.
 */
export interface EcsDiskArgs {
    advancedFeatures?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    availabilityZone?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    dedicatedBlockStorageClusterId?: pulumi.Input<string>;
    deleteAutoSnapshot?: pulumi.Input<boolean>;
    deleteWithInstance?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    diskName?: pulumi.Input<string>;
    dryRun?: pulumi.Input<boolean>;
    enableAutoSnapshot?: pulumi.Input<boolean>;
    encryptAlgorithm?: pulumi.Input<string>;
    encrypted?: pulumi.Input<boolean>;
    instanceId?: pulumi.Input<string>;
    kmsKeyId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    name?: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    performanceLevel?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    snapshotId?: pulumi.Input<string>;
    storageSetId?: pulumi.Input<string>;
    storageSetPartitionNumber?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.EcsDiskTimeouts>;
    type?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}
