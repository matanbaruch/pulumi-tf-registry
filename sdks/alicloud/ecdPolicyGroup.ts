// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EcdPolicyGroup extends pulumi.CustomResource {
    /**
     * Get an existing EcdPolicyGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcdPolicyGroupState, opts?: pulumi.CustomResourceOptions): EcdPolicyGroup {
        return new EcdPolicyGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/ecdPolicyGroup:EcdPolicyGroup';

    /**
     * Returns true if the given object is an instance of EcdPolicyGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcdPolicyGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcdPolicyGroup.__pulumiType;
    }

    public readonly authorizeAccessPolicyRules!: pulumi.Output<outputs.EcdPolicyGroupAuthorizeAccessPolicyRule[] | undefined>;
    public readonly authorizeSecurityPolicyRules!: pulumi.Output<outputs.EcdPolicyGroupAuthorizeSecurityPolicyRule[] | undefined>;
    public readonly cameraRedirect!: pulumi.Output<string>;
    public readonly clipboard!: pulumi.Output<string>;
    public readonly domainList!: pulumi.Output<string | undefined>;
    public readonly htmlAccess!: pulumi.Output<string>;
    public readonly htmlFileTransfer!: pulumi.Output<string>;
    public readonly localDrive!: pulumi.Output<string>;
    public readonly policyGroupName!: pulumi.Output<string | undefined>;
    public readonly recording!: pulumi.Output<string>;
    public readonly recordingEndTime!: pulumi.Output<string | undefined>;
    public readonly recordingExpires!: pulumi.Output<number>;
    public readonly recordingFps!: pulumi.Output<number>;
    public readonly recordingStartTime!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly usbRedirect!: pulumi.Output<string>;
    public readonly visualQuality!: pulumi.Output<string>;
    public readonly watermark!: pulumi.Output<string>;
    public readonly watermarkTransparency!: pulumi.Output<string>;
    public readonly watermarkType!: pulumi.Output<string>;

    /**
     * Create a EcdPolicyGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: EcdPolicyGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcdPolicyGroupArgs | EcdPolicyGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcdPolicyGroupState | undefined;
            resourceInputs["authorizeAccessPolicyRules"] = state ? state.authorizeAccessPolicyRules : undefined;
            resourceInputs["authorizeSecurityPolicyRules"] = state ? state.authorizeSecurityPolicyRules : undefined;
            resourceInputs["cameraRedirect"] = state ? state.cameraRedirect : undefined;
            resourceInputs["clipboard"] = state ? state.clipboard : undefined;
            resourceInputs["domainList"] = state ? state.domainList : undefined;
            resourceInputs["htmlAccess"] = state ? state.htmlAccess : undefined;
            resourceInputs["htmlFileTransfer"] = state ? state.htmlFileTransfer : undefined;
            resourceInputs["localDrive"] = state ? state.localDrive : undefined;
            resourceInputs["policyGroupName"] = state ? state.policyGroupName : undefined;
            resourceInputs["recording"] = state ? state.recording : undefined;
            resourceInputs["recordingEndTime"] = state ? state.recordingEndTime : undefined;
            resourceInputs["recordingExpires"] = state ? state.recordingExpires : undefined;
            resourceInputs["recordingFps"] = state ? state.recordingFps : undefined;
            resourceInputs["recordingStartTime"] = state ? state.recordingStartTime : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["usbRedirect"] = state ? state.usbRedirect : undefined;
            resourceInputs["visualQuality"] = state ? state.visualQuality : undefined;
            resourceInputs["watermark"] = state ? state.watermark : undefined;
            resourceInputs["watermarkTransparency"] = state ? state.watermarkTransparency : undefined;
            resourceInputs["watermarkType"] = state ? state.watermarkType : undefined;
        } else {
            const args = argsOrState as EcdPolicyGroupArgs | undefined;
            resourceInputs["authorizeAccessPolicyRules"] = args ? args.authorizeAccessPolicyRules : undefined;
            resourceInputs["authorizeSecurityPolicyRules"] = args ? args.authorizeSecurityPolicyRules : undefined;
            resourceInputs["cameraRedirect"] = args ? args.cameraRedirect : undefined;
            resourceInputs["clipboard"] = args ? args.clipboard : undefined;
            resourceInputs["domainList"] = args ? args.domainList : undefined;
            resourceInputs["htmlAccess"] = args ? args.htmlAccess : undefined;
            resourceInputs["htmlFileTransfer"] = args ? args.htmlFileTransfer : undefined;
            resourceInputs["localDrive"] = args ? args.localDrive : undefined;
            resourceInputs["policyGroupName"] = args ? args.policyGroupName : undefined;
            resourceInputs["recording"] = args ? args.recording : undefined;
            resourceInputs["recordingEndTime"] = args ? args.recordingEndTime : undefined;
            resourceInputs["recordingExpires"] = args ? args.recordingExpires : undefined;
            resourceInputs["recordingFps"] = args ? args.recordingFps : undefined;
            resourceInputs["recordingStartTime"] = args ? args.recordingStartTime : undefined;
            resourceInputs["usbRedirect"] = args ? args.usbRedirect : undefined;
            resourceInputs["visualQuality"] = args ? args.visualQuality : undefined;
            resourceInputs["watermark"] = args ? args.watermark : undefined;
            resourceInputs["watermarkTransparency"] = args ? args.watermarkTransparency : undefined;
            resourceInputs["watermarkType"] = args ? args.watermarkType : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EcdPolicyGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EcdPolicyGroup resources.
 */
export interface EcdPolicyGroupState {
    authorizeAccessPolicyRules?: pulumi.Input<pulumi.Input<inputs.EcdPolicyGroupAuthorizeAccessPolicyRule>[]>;
    authorizeSecurityPolicyRules?: pulumi.Input<pulumi.Input<inputs.EcdPolicyGroupAuthorizeSecurityPolicyRule>[]>;
    cameraRedirect?: pulumi.Input<string>;
    clipboard?: pulumi.Input<string>;
    domainList?: pulumi.Input<string>;
    htmlAccess?: pulumi.Input<string>;
    htmlFileTransfer?: pulumi.Input<string>;
    localDrive?: pulumi.Input<string>;
    policyGroupName?: pulumi.Input<string>;
    recording?: pulumi.Input<string>;
    recordingEndTime?: pulumi.Input<string>;
    recordingExpires?: pulumi.Input<number>;
    recordingFps?: pulumi.Input<number>;
    recordingStartTime?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    usbRedirect?: pulumi.Input<string>;
    visualQuality?: pulumi.Input<string>;
    watermark?: pulumi.Input<string>;
    watermarkTransparency?: pulumi.Input<string>;
    watermarkType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EcdPolicyGroup resource.
 */
export interface EcdPolicyGroupArgs {
    authorizeAccessPolicyRules?: pulumi.Input<pulumi.Input<inputs.EcdPolicyGroupAuthorizeAccessPolicyRule>[]>;
    authorizeSecurityPolicyRules?: pulumi.Input<pulumi.Input<inputs.EcdPolicyGroupAuthorizeSecurityPolicyRule>[]>;
    cameraRedirect?: pulumi.Input<string>;
    clipboard?: pulumi.Input<string>;
    domainList?: pulumi.Input<string>;
    htmlAccess?: pulumi.Input<string>;
    htmlFileTransfer?: pulumi.Input<string>;
    localDrive?: pulumi.Input<string>;
    policyGroupName?: pulumi.Input<string>;
    recording?: pulumi.Input<string>;
    recordingEndTime?: pulumi.Input<string>;
    recordingExpires?: pulumi.Input<number>;
    recordingFps?: pulumi.Input<number>;
    recordingStartTime?: pulumi.Input<string>;
    usbRedirect?: pulumi.Input<string>;
    visualQuality?: pulumi.Input<string>;
    watermark?: pulumi.Input<string>;
    watermarkTransparency?: pulumi.Input<string>;
    watermarkType?: pulumi.Input<string>;
}
