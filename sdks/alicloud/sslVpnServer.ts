// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SslVpnServer extends pulumi.CustomResource {
    /**
     * Get an existing SslVpnServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SslVpnServerState, opts?: pulumi.CustomResourceOptions): SslVpnServer {
        return new SslVpnServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/sslVpnServer:SslVpnServer';

    /**
     * Returns true if the given object is an instance of SslVpnServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SslVpnServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SslVpnServer.__pulumiType;
    }

    public readonly cipher!: pulumi.Output<string | undefined>;
    public readonly clientIpPool!: pulumi.Output<string>;
    public readonly compress!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly connections!: pulumi.Output<number>;
    public /*out*/ readonly internetIp!: pulumi.Output<string>;
    public readonly localSubnet!: pulumi.Output<string>;
    public /*out*/ readonly maxConnections!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number | undefined>;
    public readonly protocol!: pulumi.Output<string | undefined>;
    public readonly vpnGatewayId!: pulumi.Output<string>;

    /**
     * Create a SslVpnServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SslVpnServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SslVpnServerArgs | SslVpnServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SslVpnServerState | undefined;
            resourceInputs["cipher"] = state ? state.cipher : undefined;
            resourceInputs["clientIpPool"] = state ? state.clientIpPool : undefined;
            resourceInputs["compress"] = state ? state.compress : undefined;
            resourceInputs["connections"] = state ? state.connections : undefined;
            resourceInputs["internetIp"] = state ? state.internetIp : undefined;
            resourceInputs["localSubnet"] = state ? state.localSubnet : undefined;
            resourceInputs["maxConnections"] = state ? state.maxConnections : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["vpnGatewayId"] = state ? state.vpnGatewayId : undefined;
        } else {
            const args = argsOrState as SslVpnServerArgs | undefined;
            if ((!args || args.clientIpPool === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientIpPool'");
            }
            if ((!args || args.localSubnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localSubnet'");
            }
            if ((!args || args.vpnGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpnGatewayId'");
            }
            resourceInputs["cipher"] = args ? args.cipher : undefined;
            resourceInputs["clientIpPool"] = args ? args.clientIpPool : undefined;
            resourceInputs["compress"] = args ? args.compress : undefined;
            resourceInputs["localSubnet"] = args ? args.localSubnet : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["vpnGatewayId"] = args ? args.vpnGatewayId : undefined;
            resourceInputs["connections"] = undefined /*out*/;
            resourceInputs["internetIp"] = undefined /*out*/;
            resourceInputs["maxConnections"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SslVpnServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SslVpnServer resources.
 */
export interface SslVpnServerState {
    cipher?: pulumi.Input<string>;
    clientIpPool?: pulumi.Input<string>;
    compress?: pulumi.Input<boolean>;
    connections?: pulumi.Input<number>;
    internetIp?: pulumi.Input<string>;
    localSubnet?: pulumi.Input<string>;
    maxConnections?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    vpnGatewayId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SslVpnServer resource.
 */
export interface SslVpnServerArgs {
    cipher?: pulumi.Input<string>;
    clientIpPool: pulumi.Input<string>;
    compress?: pulumi.Input<boolean>;
    localSubnet: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    vpnGatewayId: pulumi.Input<string>;
}
