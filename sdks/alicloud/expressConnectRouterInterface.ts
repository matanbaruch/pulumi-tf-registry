// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ExpressConnectRouterInterface extends pulumi.CustomResource {
    /**
     * Get an existing ExpressConnectRouterInterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExpressConnectRouterInterfaceState, opts?: pulumi.CustomResourceOptions): ExpressConnectRouterInterface {
        return new ExpressConnectRouterInterface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/expressConnectRouterInterface:ExpressConnectRouterInterface';

    /**
     * Returns true if the given object is an instance of ExpressConnectRouterInterface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExpressConnectRouterInterface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExpressConnectRouterInterface.__pulumiType;
    }

    public readonly accessPointId!: pulumi.Output<string | undefined>;
    public readonly autoPay!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly bandwidth!: pulumi.Output<number>;
    public /*out*/ readonly businessStatus!: pulumi.Output<string>;
    public /*out*/ readonly connectedTime!: pulumi.Output<string>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public /*out*/ readonly crossBorder!: pulumi.Output<boolean>;
    public readonly deleteHealthCheckIp!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly endTime!: pulumi.Output<string>;
    public /*out*/ readonly hasReservationData!: pulumi.Output<string>;
    public readonly hcRate!: pulumi.Output<number | undefined>;
    public readonly hcThreshold!: pulumi.Output<string | undefined>;
    public readonly healthCheckSourceIp!: pulumi.Output<string | undefined>;
    public readonly healthCheckTargetIp!: pulumi.Output<string | undefined>;
    public readonly oppositeAccessPointId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly oppositeBandwidth!: pulumi.Output<number>;
    public /*out*/ readonly oppositeInterfaceBusinessStatus!: pulumi.Output<string>;
    public readonly oppositeInterfaceId!: pulumi.Output<string | undefined>;
    public readonly oppositeInterfaceOwnerId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly oppositeInterfaceSpec!: pulumi.Output<string>;
    public /*out*/ readonly oppositeInterfaceStatus!: pulumi.Output<string>;
    public readonly oppositeRegionId!: pulumi.Output<string>;
    public readonly oppositeRouterId!: pulumi.Output<string | undefined>;
    public readonly oppositeRouterType!: pulumi.Output<string>;
    public /*out*/ readonly oppositeVpcInstanceId!: pulumi.Output<string>;
    public readonly paymentType!: pulumi.Output<string | undefined>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly pricingCycle!: pulumi.Output<string | undefined>;
    public /*out*/ readonly reservationActiveTime!: pulumi.Output<string>;
    public /*out*/ readonly reservationBandwidth!: pulumi.Output<string>;
    public /*out*/ readonly reservationInternetChargeType!: pulumi.Output<string>;
    public /*out*/ readonly reservationOrderType!: pulumi.Output<string>;
    public readonly role!: pulumi.Output<string>;
    public readonly routerId!: pulumi.Output<string>;
    public readonly routerInterfaceId!: pulumi.Output<string>;
    public readonly routerInterfaceName!: pulumi.Output<string | undefined>;
    public readonly routerType!: pulumi.Output<string>;
    public readonly spec!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ExpressConnectRouterInterfaceTimeouts | undefined>;
    public /*out*/ readonly vpcInstanceId!: pulumi.Output<string>;

    /**
     * Create a ExpressConnectRouterInterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExpressConnectRouterInterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExpressConnectRouterInterfaceArgs | ExpressConnectRouterInterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExpressConnectRouterInterfaceState | undefined;
            resourceInputs["accessPointId"] = state ? state.accessPointId : undefined;
            resourceInputs["autoPay"] = state ? state.autoPay : undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["businessStatus"] = state ? state.businessStatus : undefined;
            resourceInputs["connectedTime"] = state ? state.connectedTime : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["crossBorder"] = state ? state.crossBorder : undefined;
            resourceInputs["deleteHealthCheckIp"] = state ? state.deleteHealthCheckIp : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["endTime"] = state ? state.endTime : undefined;
            resourceInputs["hasReservationData"] = state ? state.hasReservationData : undefined;
            resourceInputs["hcRate"] = state ? state.hcRate : undefined;
            resourceInputs["hcThreshold"] = state ? state.hcThreshold : undefined;
            resourceInputs["healthCheckSourceIp"] = state ? state.healthCheckSourceIp : undefined;
            resourceInputs["healthCheckTargetIp"] = state ? state.healthCheckTargetIp : undefined;
            resourceInputs["oppositeAccessPointId"] = state ? state.oppositeAccessPointId : undefined;
            resourceInputs["oppositeBandwidth"] = state ? state.oppositeBandwidth : undefined;
            resourceInputs["oppositeInterfaceBusinessStatus"] = state ? state.oppositeInterfaceBusinessStatus : undefined;
            resourceInputs["oppositeInterfaceId"] = state ? state.oppositeInterfaceId : undefined;
            resourceInputs["oppositeInterfaceOwnerId"] = state ? state.oppositeInterfaceOwnerId : undefined;
            resourceInputs["oppositeInterfaceSpec"] = state ? state.oppositeInterfaceSpec : undefined;
            resourceInputs["oppositeInterfaceStatus"] = state ? state.oppositeInterfaceStatus : undefined;
            resourceInputs["oppositeRegionId"] = state ? state.oppositeRegionId : undefined;
            resourceInputs["oppositeRouterId"] = state ? state.oppositeRouterId : undefined;
            resourceInputs["oppositeRouterType"] = state ? state.oppositeRouterType : undefined;
            resourceInputs["oppositeVpcInstanceId"] = state ? state.oppositeVpcInstanceId : undefined;
            resourceInputs["paymentType"] = state ? state.paymentType : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["pricingCycle"] = state ? state.pricingCycle : undefined;
            resourceInputs["reservationActiveTime"] = state ? state.reservationActiveTime : undefined;
            resourceInputs["reservationBandwidth"] = state ? state.reservationBandwidth : undefined;
            resourceInputs["reservationInternetChargeType"] = state ? state.reservationInternetChargeType : undefined;
            resourceInputs["reservationOrderType"] = state ? state.reservationOrderType : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["routerId"] = state ? state.routerId : undefined;
            resourceInputs["routerInterfaceId"] = state ? state.routerInterfaceId : undefined;
            resourceInputs["routerInterfaceName"] = state ? state.routerInterfaceName : undefined;
            resourceInputs["routerType"] = state ? state.routerType : undefined;
            resourceInputs["spec"] = state ? state.spec : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcInstanceId"] = state ? state.vpcInstanceId : undefined;
        } else {
            const args = argsOrState as ExpressConnectRouterInterfaceArgs | undefined;
            if ((!args || args.oppositeRegionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'oppositeRegionId'");
            }
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            if ((!args || args.routerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routerId'");
            }
            if ((!args || args.routerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routerType'");
            }
            if ((!args || args.spec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'spec'");
            }
            resourceInputs["accessPointId"] = args ? args.accessPointId : undefined;
            resourceInputs["autoPay"] = args ? args.autoPay : undefined;
            resourceInputs["deleteHealthCheckIp"] = args ? args.deleteHealthCheckIp : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["hcRate"] = args ? args.hcRate : undefined;
            resourceInputs["hcThreshold"] = args ? args.hcThreshold : undefined;
            resourceInputs["healthCheckSourceIp"] = args ? args.healthCheckSourceIp : undefined;
            resourceInputs["healthCheckTargetIp"] = args ? args.healthCheckTargetIp : undefined;
            resourceInputs["oppositeAccessPointId"] = args ? args.oppositeAccessPointId : undefined;
            resourceInputs["oppositeInterfaceId"] = args ? args.oppositeInterfaceId : undefined;
            resourceInputs["oppositeInterfaceOwnerId"] = args ? args.oppositeInterfaceOwnerId : undefined;
            resourceInputs["oppositeRegionId"] = args ? args.oppositeRegionId : undefined;
            resourceInputs["oppositeRouterId"] = args ? args.oppositeRouterId : undefined;
            resourceInputs["oppositeRouterType"] = args ? args.oppositeRouterType : undefined;
            resourceInputs["paymentType"] = args ? args.paymentType : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["pricingCycle"] = args ? args.pricingCycle : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["routerId"] = args ? args.routerId : undefined;
            resourceInputs["routerInterfaceId"] = args ? args.routerInterfaceId : undefined;
            resourceInputs["routerInterfaceName"] = args ? args.routerInterfaceName : undefined;
            resourceInputs["routerType"] = args ? args.routerType : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["bandwidth"] = undefined /*out*/;
            resourceInputs["businessStatus"] = undefined /*out*/;
            resourceInputs["connectedTime"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["crossBorder"] = undefined /*out*/;
            resourceInputs["endTime"] = undefined /*out*/;
            resourceInputs["hasReservationData"] = undefined /*out*/;
            resourceInputs["oppositeBandwidth"] = undefined /*out*/;
            resourceInputs["oppositeInterfaceBusinessStatus"] = undefined /*out*/;
            resourceInputs["oppositeInterfaceSpec"] = undefined /*out*/;
            resourceInputs["oppositeInterfaceStatus"] = undefined /*out*/;
            resourceInputs["oppositeVpcInstanceId"] = undefined /*out*/;
            resourceInputs["reservationActiveTime"] = undefined /*out*/;
            resourceInputs["reservationBandwidth"] = undefined /*out*/;
            resourceInputs["reservationInternetChargeType"] = undefined /*out*/;
            resourceInputs["reservationOrderType"] = undefined /*out*/;
            resourceInputs["vpcInstanceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExpressConnectRouterInterface.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ExpressConnectRouterInterface resources.
 */
export interface ExpressConnectRouterInterfaceState {
    accessPointId?: pulumi.Input<string>;
    autoPay?: pulumi.Input<boolean>;
    bandwidth?: pulumi.Input<number>;
    businessStatus?: pulumi.Input<string>;
    connectedTime?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    crossBorder?: pulumi.Input<boolean>;
    deleteHealthCheckIp?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    hasReservationData?: pulumi.Input<string>;
    hcRate?: pulumi.Input<number>;
    hcThreshold?: pulumi.Input<string>;
    healthCheckSourceIp?: pulumi.Input<string>;
    healthCheckTargetIp?: pulumi.Input<string>;
    oppositeAccessPointId?: pulumi.Input<string>;
    oppositeBandwidth?: pulumi.Input<number>;
    oppositeInterfaceBusinessStatus?: pulumi.Input<string>;
    oppositeInterfaceId?: pulumi.Input<string>;
    oppositeInterfaceOwnerId?: pulumi.Input<string>;
    oppositeInterfaceSpec?: pulumi.Input<string>;
    oppositeInterfaceStatus?: pulumi.Input<string>;
    oppositeRegionId?: pulumi.Input<string>;
    oppositeRouterId?: pulumi.Input<string>;
    oppositeRouterType?: pulumi.Input<string>;
    oppositeVpcInstanceId?: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    pricingCycle?: pulumi.Input<string>;
    reservationActiveTime?: pulumi.Input<string>;
    reservationBandwidth?: pulumi.Input<string>;
    reservationInternetChargeType?: pulumi.Input<string>;
    reservationOrderType?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    routerId?: pulumi.Input<string>;
    routerInterfaceId?: pulumi.Input<string>;
    routerInterfaceName?: pulumi.Input<string>;
    routerType?: pulumi.Input<string>;
    spec?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ExpressConnectRouterInterfaceTimeouts>;
    vpcInstanceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ExpressConnectRouterInterface resource.
 */
export interface ExpressConnectRouterInterfaceArgs {
    accessPointId?: pulumi.Input<string>;
    autoPay?: pulumi.Input<boolean>;
    deleteHealthCheckIp?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    hcRate?: pulumi.Input<number>;
    hcThreshold?: pulumi.Input<string>;
    healthCheckSourceIp?: pulumi.Input<string>;
    healthCheckTargetIp?: pulumi.Input<string>;
    oppositeAccessPointId?: pulumi.Input<string>;
    oppositeInterfaceId?: pulumi.Input<string>;
    oppositeInterfaceOwnerId?: pulumi.Input<string>;
    oppositeRegionId: pulumi.Input<string>;
    oppositeRouterId?: pulumi.Input<string>;
    oppositeRouterType?: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    pricingCycle?: pulumi.Input<string>;
    role: pulumi.Input<string>;
    routerId: pulumi.Input<string>;
    routerInterfaceId?: pulumi.Input<string>;
    routerInterfaceName?: pulumi.Input<string>;
    routerType: pulumi.Input<string>;
    spec: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ExpressConnectRouterInterfaceTimeouts>;
}
