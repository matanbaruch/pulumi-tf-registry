// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MongodbServerlessInstance extends pulumi.CustomResource {
    /**
     * Get an existing MongodbServerlessInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MongodbServerlessInstanceState, opts?: pulumi.CustomResourceOptions): MongodbServerlessInstance {
        return new MongodbServerlessInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/mongodbServerlessInstance:MongodbServerlessInstance';

    /**
     * Returns true if the given object is an instance of MongodbServerlessInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MongodbServerlessInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MongodbServerlessInstance.__pulumiType;
    }

    public readonly accountPassword!: pulumi.Output<string>;
    public readonly autoRenew!: pulumi.Output<boolean | undefined>;
    public readonly capacityUnit!: pulumi.Output<number>;
    public readonly dbInstanceDescription!: pulumi.Output<string | undefined>;
    public readonly dbInstanceStorage!: pulumi.Output<number>;
    public readonly engine!: pulumi.Output<string>;
    public readonly engineVersion!: pulumi.Output<string>;
    public readonly maintainEndTime!: pulumi.Output<string>;
    public readonly maintainStartTime!: pulumi.Output<string>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly periodPriceType!: pulumi.Output<string | undefined>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly securityIpGroups!: pulumi.Output<outputs.MongodbServerlessInstanceSecurityIpGroup[] | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly storageEngine!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.MongodbServerlessInstanceTimeouts | undefined>;
    public readonly vpcId!: pulumi.Output<string>;
    public readonly vswitchId!: pulumi.Output<string>;
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a MongodbServerlessInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MongodbServerlessInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MongodbServerlessInstanceArgs | MongodbServerlessInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MongodbServerlessInstanceState | undefined;
            resourceInputs["accountPassword"] = state ? state.accountPassword : undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["capacityUnit"] = state ? state.capacityUnit : undefined;
            resourceInputs["dbInstanceDescription"] = state ? state.dbInstanceDescription : undefined;
            resourceInputs["dbInstanceStorage"] = state ? state.dbInstanceStorage : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["maintainEndTime"] = state ? state.maintainEndTime : undefined;
            resourceInputs["maintainStartTime"] = state ? state.maintainStartTime : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodPriceType"] = state ? state.periodPriceType : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["securityIpGroups"] = state ? state.securityIpGroups : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storageEngine"] = state ? state.storageEngine : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as MongodbServerlessInstanceArgs | undefined;
            if ((!args || args.accountPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountPassword'");
            }
            if ((!args || args.capacityUnit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'capacityUnit'");
            }
            if ((!args || args.dbInstanceStorage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbInstanceStorage'");
            }
            if ((!args || args.engineVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engineVersion'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            if ((!args || args.vswitchId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vswitchId'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["accountPassword"] = args?.accountPassword ? pulumi.secret(args.accountPassword) : undefined;
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["capacityUnit"] = args ? args.capacityUnit : undefined;
            resourceInputs["dbInstanceDescription"] = args ? args.dbInstanceDescription : undefined;
            resourceInputs["dbInstanceStorage"] = args ? args.dbInstanceStorage : undefined;
            resourceInputs["engine"] = args ? args.engine : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["maintainEndTime"] = args ? args.maintainEndTime : undefined;
            resourceInputs["maintainStartTime"] = args ? args.maintainStartTime : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodPriceType"] = args ? args.periodPriceType : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["securityIpGroups"] = args ? args.securityIpGroups : undefined;
            resourceInputs["storageEngine"] = args ? args.storageEngine : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accountPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MongodbServerlessInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MongodbServerlessInstance resources.
 */
export interface MongodbServerlessInstanceState {
    accountPassword?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<boolean>;
    capacityUnit?: pulumi.Input<number>;
    dbInstanceDescription?: pulumi.Input<string>;
    dbInstanceStorage?: pulumi.Input<number>;
    engine?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    maintainEndTime?: pulumi.Input<string>;
    maintainStartTime?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodPriceType?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    securityIpGroups?: pulumi.Input<pulumi.Input<inputs.MongodbServerlessInstanceSecurityIpGroup>[]>;
    status?: pulumi.Input<string>;
    storageEngine?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.MongodbServerlessInstanceTimeouts>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MongodbServerlessInstance resource.
 */
export interface MongodbServerlessInstanceArgs {
    accountPassword: pulumi.Input<string>;
    autoRenew?: pulumi.Input<boolean>;
    capacityUnit: pulumi.Input<number>;
    dbInstanceDescription?: pulumi.Input<string>;
    dbInstanceStorage: pulumi.Input<number>;
    engine?: pulumi.Input<string>;
    engineVersion: pulumi.Input<string>;
    maintainEndTime?: pulumi.Input<string>;
    maintainStartTime?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodPriceType?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    securityIpGroups?: pulumi.Input<pulumi.Input<inputs.MongodbServerlessInstanceSecurityIpGroup>[]>;
    storageEngine?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.MongodbServerlessInstanceTimeouts>;
    vpcId: pulumi.Input<string>;
    vswitchId: pulumi.Input<string>;
    zoneId: pulumi.Input<string>;
}
