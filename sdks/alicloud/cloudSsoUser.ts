// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CloudSsoUser extends pulumi.CustomResource {
    /**
     * Get an existing CloudSsoUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudSsoUserState, opts?: pulumi.CustomResourceOptions): CloudSsoUser {
        return new CloudSsoUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/cloudSsoUser:CloudSsoUser';

    /**
     * Returns true if the given object is an instance of CloudSsoUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudSsoUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudSsoUser.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly directoryId!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string | undefined>;
    public readonly email!: pulumi.Output<string | undefined>;
    public readonly firstName!: pulumi.Output<string | undefined>;
    public readonly lastName!: pulumi.Output<string | undefined>;
    public readonly status!: pulumi.Output<string>;
    public /*out*/ readonly userId!: pulumi.Output<string>;
    public readonly userName!: pulumi.Output<string>;

    /**
     * Create a CloudSsoUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudSsoUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudSsoUserArgs | CloudSsoUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudSsoUserState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["directoryId"] = state ? state.directoryId : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["firstName"] = state ? state.firstName : undefined;
            resourceInputs["lastName"] = state ? state.lastName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
        } else {
            const args = argsOrState as CloudSsoUserArgs | undefined;
            if ((!args || args.directoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'directoryId'");
            }
            if ((!args || args.userName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["directoryId"] = args ? args.directoryId : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["firstName"] = args ? args.firstName : undefined;
            resourceInputs["lastName"] = args ? args.lastName : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["userId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudSsoUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudSsoUser resources.
 */
export interface CloudSsoUserState {
    description?: pulumi.Input<string>;
    directoryId?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    firstName?: pulumi.Input<string>;
    lastName?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudSsoUser resource.
 */
export interface CloudSsoUserArgs {
    description?: pulumi.Input<string>;
    directoryId: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    firstName?: pulumi.Input<string>;
    lastName?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    userName: pulumi.Input<string>;
}
