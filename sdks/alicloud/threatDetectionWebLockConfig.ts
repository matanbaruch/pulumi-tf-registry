// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ThreatDetectionWebLockConfig extends pulumi.CustomResource {
    /**
     * Get an existing ThreatDetectionWebLockConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ThreatDetectionWebLockConfigState, opts?: pulumi.CustomResourceOptions): ThreatDetectionWebLockConfig {
        return new ThreatDetectionWebLockConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/threatDetectionWebLockConfig:ThreatDetectionWebLockConfig';

    /**
     * Returns true if the given object is an instance of ThreatDetectionWebLockConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ThreatDetectionWebLockConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ThreatDetectionWebLockConfig.__pulumiType;
    }

    public readonly defenceMode!: pulumi.Output<string>;
    public readonly dir!: pulumi.Output<string>;
    public readonly exclusiveDir!: pulumi.Output<string | undefined>;
    public readonly exclusiveFile!: pulumi.Output<string | undefined>;
    public readonly exclusiveFileType!: pulumi.Output<string | undefined>;
    public readonly inclusiveFileType!: pulumi.Output<string | undefined>;
    public readonly localBackupDir!: pulumi.Output<string>;
    public readonly mode!: pulumi.Output<string>;
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a ThreatDetectionWebLockConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ThreatDetectionWebLockConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ThreatDetectionWebLockConfigArgs | ThreatDetectionWebLockConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ThreatDetectionWebLockConfigState | undefined;
            resourceInputs["defenceMode"] = state ? state.defenceMode : undefined;
            resourceInputs["dir"] = state ? state.dir : undefined;
            resourceInputs["exclusiveDir"] = state ? state.exclusiveDir : undefined;
            resourceInputs["exclusiveFile"] = state ? state.exclusiveFile : undefined;
            resourceInputs["exclusiveFileType"] = state ? state.exclusiveFileType : undefined;
            resourceInputs["inclusiveFileType"] = state ? state.inclusiveFileType : undefined;
            resourceInputs["localBackupDir"] = state ? state.localBackupDir : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as ThreatDetectionWebLockConfigArgs | undefined;
            if ((!args || args.defenceMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defenceMode'");
            }
            if ((!args || args.dir === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dir'");
            }
            if ((!args || args.localBackupDir === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localBackupDir'");
            }
            if ((!args || args.mode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mode'");
            }
            if ((!args || args.uuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'uuid'");
            }
            resourceInputs["defenceMode"] = args ? args.defenceMode : undefined;
            resourceInputs["dir"] = args ? args.dir : undefined;
            resourceInputs["exclusiveDir"] = args ? args.exclusiveDir : undefined;
            resourceInputs["exclusiveFile"] = args ? args.exclusiveFile : undefined;
            resourceInputs["exclusiveFileType"] = args ? args.exclusiveFileType : undefined;
            resourceInputs["inclusiveFileType"] = args ? args.inclusiveFileType : undefined;
            resourceInputs["localBackupDir"] = args ? args.localBackupDir : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ThreatDetectionWebLockConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ThreatDetectionWebLockConfig resources.
 */
export interface ThreatDetectionWebLockConfigState {
    defenceMode?: pulumi.Input<string>;
    dir?: pulumi.Input<string>;
    exclusiveDir?: pulumi.Input<string>;
    exclusiveFile?: pulumi.Input<string>;
    exclusiveFileType?: pulumi.Input<string>;
    inclusiveFileType?: pulumi.Input<string>;
    localBackupDir?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ThreatDetectionWebLockConfig resource.
 */
export interface ThreatDetectionWebLockConfigArgs {
    defenceMode: pulumi.Input<string>;
    dir: pulumi.Input<string>;
    exclusiveDir?: pulumi.Input<string>;
    exclusiveFile?: pulumi.Input<string>;
    exclusiveFileType?: pulumi.Input<string>;
    inclusiveFileType?: pulumi.Input<string>;
    localBackupDir: pulumi.Input<string>;
    mode: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}
