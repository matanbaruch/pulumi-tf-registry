// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ThreatDetectionAntiBruteForceRule extends pulumi.CustomResource {
    /**
     * Get an existing ThreatDetectionAntiBruteForceRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ThreatDetectionAntiBruteForceRuleState, opts?: pulumi.CustomResourceOptions): ThreatDetectionAntiBruteForceRule {
        return new ThreatDetectionAntiBruteForceRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/threatDetectionAntiBruteForceRule:ThreatDetectionAntiBruteForceRule';

    /**
     * Returns true if the given object is an instance of ThreatDetectionAntiBruteForceRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ThreatDetectionAntiBruteForceRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ThreatDetectionAntiBruteForceRule.__pulumiType;
    }

    public /*out*/ readonly antiBruteForceRuleId!: pulumi.Output<string>;
    public readonly antiBruteForceRuleName!: pulumi.Output<string>;
    public readonly defaultRule!: pulumi.Output<boolean>;
    public readonly failCount!: pulumi.Output<number>;
    public readonly forbiddenTime!: pulumi.Output<number>;
    public readonly span!: pulumi.Output<number>;
    public readonly uuidLists!: pulumi.Output<string[]>;

    /**
     * Create a ThreatDetectionAntiBruteForceRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ThreatDetectionAntiBruteForceRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ThreatDetectionAntiBruteForceRuleArgs | ThreatDetectionAntiBruteForceRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ThreatDetectionAntiBruteForceRuleState | undefined;
            resourceInputs["antiBruteForceRuleId"] = state ? state.antiBruteForceRuleId : undefined;
            resourceInputs["antiBruteForceRuleName"] = state ? state.antiBruteForceRuleName : undefined;
            resourceInputs["defaultRule"] = state ? state.defaultRule : undefined;
            resourceInputs["failCount"] = state ? state.failCount : undefined;
            resourceInputs["forbiddenTime"] = state ? state.forbiddenTime : undefined;
            resourceInputs["span"] = state ? state.span : undefined;
            resourceInputs["uuidLists"] = state ? state.uuidLists : undefined;
        } else {
            const args = argsOrState as ThreatDetectionAntiBruteForceRuleArgs | undefined;
            if ((!args || args.antiBruteForceRuleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'antiBruteForceRuleName'");
            }
            if ((!args || args.failCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'failCount'");
            }
            if ((!args || args.forbiddenTime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'forbiddenTime'");
            }
            if ((!args || args.span === undefined) && !opts.urn) {
                throw new Error("Missing required property 'span'");
            }
            if ((!args || args.uuidLists === undefined) && !opts.urn) {
                throw new Error("Missing required property 'uuidLists'");
            }
            resourceInputs["antiBruteForceRuleName"] = args ? args.antiBruteForceRuleName : undefined;
            resourceInputs["defaultRule"] = args ? args.defaultRule : undefined;
            resourceInputs["failCount"] = args ? args.failCount : undefined;
            resourceInputs["forbiddenTime"] = args ? args.forbiddenTime : undefined;
            resourceInputs["span"] = args ? args.span : undefined;
            resourceInputs["uuidLists"] = args ? args.uuidLists : undefined;
            resourceInputs["antiBruteForceRuleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ThreatDetectionAntiBruteForceRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ThreatDetectionAntiBruteForceRule resources.
 */
export interface ThreatDetectionAntiBruteForceRuleState {
    antiBruteForceRuleId?: pulumi.Input<string>;
    antiBruteForceRuleName?: pulumi.Input<string>;
    defaultRule?: pulumi.Input<boolean>;
    failCount?: pulumi.Input<number>;
    forbiddenTime?: pulumi.Input<number>;
    span?: pulumi.Input<number>;
    uuidLists?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ThreatDetectionAntiBruteForceRule resource.
 */
export interface ThreatDetectionAntiBruteForceRuleArgs {
    antiBruteForceRuleName: pulumi.Input<string>;
    defaultRule?: pulumi.Input<boolean>;
    failCount: pulumi.Input<number>;
    forbiddenTime: pulumi.Input<number>;
    span: pulumi.Input<number>;
    uuidLists: pulumi.Input<pulumi.Input<string>[]>;
}
