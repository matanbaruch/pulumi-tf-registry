// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ThreatDetectionHoneypotProbe extends pulumi.CustomResource {
    /**
     * Get an existing ThreatDetectionHoneypotProbe resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ThreatDetectionHoneypotProbeState, opts?: pulumi.CustomResourceOptions): ThreatDetectionHoneypotProbe {
        return new ThreatDetectionHoneypotProbe(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/threatDetectionHoneypotProbe:ThreatDetectionHoneypotProbe';

    /**
     * Returns true if the given object is an instance of ThreatDetectionHoneypotProbe.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ThreatDetectionHoneypotProbe {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ThreatDetectionHoneypotProbe.__pulumiType;
    }

    public readonly arp!: pulumi.Output<boolean | undefined>;
    public readonly controlNodeId!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly honeypotBindLists!: pulumi.Output<outputs.ThreatDetectionHoneypotProbeHoneypotBindList[] | undefined>;
    public /*out*/ readonly honeypotProbeId!: pulumi.Output<string>;
    public readonly ping!: pulumi.Output<boolean | undefined>;
    public readonly probeType!: pulumi.Output<string>;
    public readonly probeVersion!: pulumi.Output<string>;
    public readonly proxyIp!: pulumi.Output<string | undefined>;
    public readonly serviceIpLists!: pulumi.Output<string[]>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ThreatDetectionHoneypotProbeTimeouts | undefined>;
    public readonly uuid!: pulumi.Output<string | undefined>;
    public readonly vpcId!: pulumi.Output<string | undefined>;

    /**
     * Create a ThreatDetectionHoneypotProbe resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ThreatDetectionHoneypotProbeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ThreatDetectionHoneypotProbeArgs | ThreatDetectionHoneypotProbeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ThreatDetectionHoneypotProbeState | undefined;
            resourceInputs["arp"] = state ? state.arp : undefined;
            resourceInputs["controlNodeId"] = state ? state.controlNodeId : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["honeypotBindLists"] = state ? state.honeypotBindLists : undefined;
            resourceInputs["honeypotProbeId"] = state ? state.honeypotProbeId : undefined;
            resourceInputs["ping"] = state ? state.ping : undefined;
            resourceInputs["probeType"] = state ? state.probeType : undefined;
            resourceInputs["probeVersion"] = state ? state.probeVersion : undefined;
            resourceInputs["proxyIp"] = state ? state.proxyIp : undefined;
            resourceInputs["serviceIpLists"] = state ? state.serviceIpLists : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as ThreatDetectionHoneypotProbeArgs | undefined;
            if ((!args || args.controlNodeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'controlNodeId'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.probeType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'probeType'");
            }
            resourceInputs["arp"] = args ? args.arp : undefined;
            resourceInputs["controlNodeId"] = args ? args.controlNodeId : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["honeypotBindLists"] = args ? args.honeypotBindLists : undefined;
            resourceInputs["ping"] = args ? args.ping : undefined;
            resourceInputs["probeType"] = args ? args.probeType : undefined;
            resourceInputs["probeVersion"] = args ? args.probeVersion : undefined;
            resourceInputs["proxyIp"] = args ? args.proxyIp : undefined;
            resourceInputs["serviceIpLists"] = args ? args.serviceIpLists : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["honeypotProbeId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ThreatDetectionHoneypotProbe.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ThreatDetectionHoneypotProbe resources.
 */
export interface ThreatDetectionHoneypotProbeState {
    arp?: pulumi.Input<boolean>;
    controlNodeId?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    honeypotBindLists?: pulumi.Input<pulumi.Input<inputs.ThreatDetectionHoneypotProbeHoneypotBindList>[]>;
    honeypotProbeId?: pulumi.Input<string>;
    ping?: pulumi.Input<boolean>;
    probeType?: pulumi.Input<string>;
    probeVersion?: pulumi.Input<string>;
    proxyIp?: pulumi.Input<string>;
    serviceIpLists?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ThreatDetectionHoneypotProbeTimeouts>;
    uuid?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ThreatDetectionHoneypotProbe resource.
 */
export interface ThreatDetectionHoneypotProbeArgs {
    arp?: pulumi.Input<boolean>;
    controlNodeId: pulumi.Input<string>;
    displayName: pulumi.Input<string>;
    honeypotBindLists?: pulumi.Input<pulumi.Input<inputs.ThreatDetectionHoneypotProbeHoneypotBindList>[]>;
    ping?: pulumi.Input<boolean>;
    probeType: pulumi.Input<string>;
    probeVersion?: pulumi.Input<string>;
    proxyIp?: pulumi.Input<string>;
    serviceIpLists?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ThreatDetectionHoneypotProbeTimeouts>;
    uuid?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
}
