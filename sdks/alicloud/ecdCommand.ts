// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class EcdCommand extends pulumi.CustomResource {
    /**
     * Get an existing EcdCommand resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcdCommandState, opts?: pulumi.CustomResourceOptions): EcdCommand {
        return new EcdCommand(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/ecdCommand:EcdCommand';

    /**
     * Returns true if the given object is an instance of EcdCommand.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcdCommand {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcdCommand.__pulumiType;
    }

    public readonly commandContent!: pulumi.Output<string>;
    public readonly commandType!: pulumi.Output<string>;
    public readonly contentEncoding!: pulumi.Output<string | undefined>;
    public readonly desktopId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeout!: pulumi.Output<string | undefined>;

    /**
     * Create a EcdCommand resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EcdCommandArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcdCommandArgs | EcdCommandState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcdCommandState | undefined;
            resourceInputs["commandContent"] = state ? state.commandContent : undefined;
            resourceInputs["commandType"] = state ? state.commandType : undefined;
            resourceInputs["contentEncoding"] = state ? state.contentEncoding : undefined;
            resourceInputs["desktopId"] = state ? state.desktopId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
        } else {
            const args = argsOrState as EcdCommandArgs | undefined;
            if ((!args || args.commandContent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commandContent'");
            }
            if ((!args || args.commandType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commandType'");
            }
            if ((!args || args.desktopId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'desktopId'");
            }
            resourceInputs["commandContent"] = args ? args.commandContent : undefined;
            resourceInputs["commandType"] = args ? args.commandType : undefined;
            resourceInputs["contentEncoding"] = args ? args.contentEncoding : undefined;
            resourceInputs["desktopId"] = args ? args.desktopId : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EcdCommand.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EcdCommand resources.
 */
export interface EcdCommandState {
    commandContent?: pulumi.Input<string>;
    commandType?: pulumi.Input<string>;
    contentEncoding?: pulumi.Input<string>;
    desktopId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeout?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EcdCommand resource.
 */
export interface EcdCommandArgs {
    commandContent: pulumi.Input<string>;
    commandType: pulumi.Input<string>;
    contentEncoding?: pulumi.Input<string>;
    desktopId: pulumi.Input<string>;
    timeout?: pulumi.Input<string>;
}
