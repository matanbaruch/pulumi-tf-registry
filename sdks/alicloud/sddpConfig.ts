// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SddpConfig extends pulumi.CustomResource {
    /**
     * Get an existing SddpConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SddpConfigState, opts?: pulumi.CustomResourceOptions): SddpConfig {
        return new SddpConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/sddpConfig:SddpConfig';

    /**
     * Returns true if the given object is an instance of SddpConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SddpConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SddpConfig.__pulumiType;
    }

    public readonly code!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly lang!: pulumi.Output<string | undefined>;
    public readonly value!: pulumi.Output<string | undefined>;

    /**
     * Create a SddpConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SddpConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SddpConfigArgs | SddpConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SddpConfigState | undefined;
            resourceInputs["code"] = state ? state.code : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["lang"] = state ? state.lang : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as SddpConfigArgs | undefined;
            resourceInputs["code"] = args ? args.code : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["lang"] = args ? args.lang : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SddpConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SddpConfig resources.
 */
export interface SddpConfigState {
    code?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    lang?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SddpConfig resource.
 */
export interface SddpConfigArgs {
    code?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    lang?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}
