// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpcPeerConnection extends pulumi.CustomResource {
    /**
     * Get an existing VpcPeerConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcPeerConnectionState, opts?: pulumi.CustomResourceOptions): VpcPeerConnection {
        return new VpcPeerConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/vpcPeerConnection:VpcPeerConnection';

    /**
     * Returns true if the given object is an instance of VpcPeerConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcPeerConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcPeerConnection.__pulumiType;
    }

    public readonly acceptingAliUid!: pulumi.Output<number | undefined>;
    public readonly acceptingRegionId!: pulumi.Output<string>;
    public readonly acceptingVpcId!: pulumi.Output<string>;
    public readonly bandwidth!: pulumi.Output<number>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dryRun!: pulumi.Output<boolean | undefined>;
    public readonly peerConnectionName!: pulumi.Output<string | undefined>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.VpcPeerConnectionTimeouts | undefined>;
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a VpcPeerConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcPeerConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcPeerConnectionArgs | VpcPeerConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcPeerConnectionState | undefined;
            resourceInputs["acceptingAliUid"] = state ? state.acceptingAliUid : undefined;
            resourceInputs["acceptingRegionId"] = state ? state.acceptingRegionId : undefined;
            resourceInputs["acceptingVpcId"] = state ? state.acceptingVpcId : undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dryRun"] = state ? state.dryRun : undefined;
            resourceInputs["peerConnectionName"] = state ? state.peerConnectionName : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as VpcPeerConnectionArgs | undefined;
            if ((!args || args.acceptingRegionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'acceptingRegionId'");
            }
            if ((!args || args.acceptingVpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'acceptingVpcId'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["acceptingAliUid"] = args ? args.acceptingAliUid : undefined;
            resourceInputs["acceptingRegionId"] = args ? args.acceptingRegionId : undefined;
            resourceInputs["acceptingVpcId"] = args ? args.acceptingVpcId : undefined;
            resourceInputs["bandwidth"] = args ? args.bandwidth : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dryRun"] = args ? args.dryRun : undefined;
            resourceInputs["peerConnectionName"] = args ? args.peerConnectionName : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcPeerConnection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpcPeerConnection resources.
 */
export interface VpcPeerConnectionState {
    acceptingAliUid?: pulumi.Input<number>;
    acceptingRegionId?: pulumi.Input<string>;
    acceptingVpcId?: pulumi.Input<string>;
    bandwidth?: pulumi.Input<number>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dryRun?: pulumi.Input<boolean>;
    peerConnectionName?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VpcPeerConnectionTimeouts>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpcPeerConnection resource.
 */
export interface VpcPeerConnectionArgs {
    acceptingAliUid?: pulumi.Input<number>;
    acceptingRegionId: pulumi.Input<string>;
    acceptingVpcId: pulumi.Input<string>;
    bandwidth?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    dryRun?: pulumi.Input<boolean>;
    peerConnectionName?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VpcPeerConnectionTimeouts>;
    vpcId: pulumi.Input<string>;
}
