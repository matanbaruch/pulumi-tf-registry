// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CsAutoscalingConfig extends pulumi.CustomResource {
    /**
     * Get an existing CsAutoscalingConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CsAutoscalingConfigState, opts?: pulumi.CustomResourceOptions): CsAutoscalingConfig {
        return new CsAutoscalingConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/csAutoscalingConfig:CsAutoscalingConfig';

    /**
     * Returns true if the given object is an instance of CsAutoscalingConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CsAutoscalingConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CsAutoscalingConfig.__pulumiType;
    }

    public readonly clusterId!: pulumi.Output<string | undefined>;
    public readonly coolDownDuration!: pulumi.Output<string | undefined>;
    public readonly daemonsetEvictionForNodes!: pulumi.Output<boolean | undefined>;
    public readonly expander!: pulumi.Output<string | undefined>;
    public readonly gpuUtilizationThreshold!: pulumi.Output<string | undefined>;
    public readonly maxGracefulTerminationSec!: pulumi.Output<number | undefined>;
    public readonly minReplicaCount!: pulumi.Output<number | undefined>;
    public readonly recycleNodeDeletionEnabled!: pulumi.Output<boolean | undefined>;
    public readonly scaleDownEnabled!: pulumi.Output<boolean | undefined>;
    public readonly scaleUpFromZero!: pulumi.Output<boolean | undefined>;
    public readonly scanInterval!: pulumi.Output<string | undefined>;
    public readonly skipNodesWithLocalStorage!: pulumi.Output<boolean | undefined>;
    public readonly skipNodesWithSystemPods!: pulumi.Output<boolean | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.CsAutoscalingConfigTimeouts | undefined>;
    public readonly unneededDuration!: pulumi.Output<string | undefined>;
    public readonly utilizationThreshold!: pulumi.Output<string | undefined>;

    /**
     * Create a CsAutoscalingConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CsAutoscalingConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CsAutoscalingConfigArgs | CsAutoscalingConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CsAutoscalingConfigState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["coolDownDuration"] = state ? state.coolDownDuration : undefined;
            resourceInputs["daemonsetEvictionForNodes"] = state ? state.daemonsetEvictionForNodes : undefined;
            resourceInputs["expander"] = state ? state.expander : undefined;
            resourceInputs["gpuUtilizationThreshold"] = state ? state.gpuUtilizationThreshold : undefined;
            resourceInputs["maxGracefulTerminationSec"] = state ? state.maxGracefulTerminationSec : undefined;
            resourceInputs["minReplicaCount"] = state ? state.minReplicaCount : undefined;
            resourceInputs["recycleNodeDeletionEnabled"] = state ? state.recycleNodeDeletionEnabled : undefined;
            resourceInputs["scaleDownEnabled"] = state ? state.scaleDownEnabled : undefined;
            resourceInputs["scaleUpFromZero"] = state ? state.scaleUpFromZero : undefined;
            resourceInputs["scanInterval"] = state ? state.scanInterval : undefined;
            resourceInputs["skipNodesWithLocalStorage"] = state ? state.skipNodesWithLocalStorage : undefined;
            resourceInputs["skipNodesWithSystemPods"] = state ? state.skipNodesWithSystemPods : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["unneededDuration"] = state ? state.unneededDuration : undefined;
            resourceInputs["utilizationThreshold"] = state ? state.utilizationThreshold : undefined;
        } else {
            const args = argsOrState as CsAutoscalingConfigArgs | undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["coolDownDuration"] = args ? args.coolDownDuration : undefined;
            resourceInputs["daemonsetEvictionForNodes"] = args ? args.daemonsetEvictionForNodes : undefined;
            resourceInputs["expander"] = args ? args.expander : undefined;
            resourceInputs["gpuUtilizationThreshold"] = args ? args.gpuUtilizationThreshold : undefined;
            resourceInputs["maxGracefulTerminationSec"] = args ? args.maxGracefulTerminationSec : undefined;
            resourceInputs["minReplicaCount"] = args ? args.minReplicaCount : undefined;
            resourceInputs["recycleNodeDeletionEnabled"] = args ? args.recycleNodeDeletionEnabled : undefined;
            resourceInputs["scaleDownEnabled"] = args ? args.scaleDownEnabled : undefined;
            resourceInputs["scaleUpFromZero"] = args ? args.scaleUpFromZero : undefined;
            resourceInputs["scanInterval"] = args ? args.scanInterval : undefined;
            resourceInputs["skipNodesWithLocalStorage"] = args ? args.skipNodesWithLocalStorage : undefined;
            resourceInputs["skipNodesWithSystemPods"] = args ? args.skipNodesWithSystemPods : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["unneededDuration"] = args ? args.unneededDuration : undefined;
            resourceInputs["utilizationThreshold"] = args ? args.utilizationThreshold : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CsAutoscalingConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CsAutoscalingConfig resources.
 */
export interface CsAutoscalingConfigState {
    clusterId?: pulumi.Input<string>;
    coolDownDuration?: pulumi.Input<string>;
    daemonsetEvictionForNodes?: pulumi.Input<boolean>;
    expander?: pulumi.Input<string>;
    gpuUtilizationThreshold?: pulumi.Input<string>;
    maxGracefulTerminationSec?: pulumi.Input<number>;
    minReplicaCount?: pulumi.Input<number>;
    recycleNodeDeletionEnabled?: pulumi.Input<boolean>;
    scaleDownEnabled?: pulumi.Input<boolean>;
    scaleUpFromZero?: pulumi.Input<boolean>;
    scanInterval?: pulumi.Input<string>;
    skipNodesWithLocalStorage?: pulumi.Input<boolean>;
    skipNodesWithSystemPods?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.CsAutoscalingConfigTimeouts>;
    unneededDuration?: pulumi.Input<string>;
    utilizationThreshold?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CsAutoscalingConfig resource.
 */
export interface CsAutoscalingConfigArgs {
    clusterId?: pulumi.Input<string>;
    coolDownDuration?: pulumi.Input<string>;
    daemonsetEvictionForNodes?: pulumi.Input<boolean>;
    expander?: pulumi.Input<string>;
    gpuUtilizationThreshold?: pulumi.Input<string>;
    maxGracefulTerminationSec?: pulumi.Input<number>;
    minReplicaCount?: pulumi.Input<number>;
    recycleNodeDeletionEnabled?: pulumi.Input<boolean>;
    scaleDownEnabled?: pulumi.Input<boolean>;
    scaleUpFromZero?: pulumi.Input<boolean>;
    scanInterval?: pulumi.Input<string>;
    skipNodesWithLocalStorage?: pulumi.Input<boolean>;
    skipNodesWithSystemPods?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.CsAutoscalingConfigTimeouts>;
    unneededDuration?: pulumi.Input<string>;
    utilizationThreshold?: pulumi.Input<string>;
}
