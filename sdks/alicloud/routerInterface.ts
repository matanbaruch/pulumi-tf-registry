// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RouterInterface extends pulumi.CustomResource {
    /**
     * Get an existing RouterInterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouterInterfaceState, opts?: pulumi.CustomResourceOptions): RouterInterface {
        return new RouterInterface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/routerInterface:RouterInterface';

    /**
     * Returns true if the given object is an instance of RouterInterface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouterInterface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouterInterface.__pulumiType;
    }

    /**
     * @deprecated Deprecated
     */
    public /*out*/ readonly accessPointId!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly healthCheckSourceIp!: pulumi.Output<string | undefined>;
    public readonly healthCheckTargetIp!: pulumi.Output<string | undefined>;
    public readonly instanceChargeType!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly oppositeAccessPointId!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    public /*out*/ readonly oppositeInterfaceId!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public /*out*/ readonly oppositeInterfaceOwnerId!: pulumi.Output<string>;
    public readonly oppositeRegion!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public /*out*/ readonly oppositeRouterId!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public /*out*/ readonly oppositeRouterType!: pulumi.Output<string>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly role!: pulumi.Output<string>;
    public readonly routerId!: pulumi.Output<string>;
    public readonly routerType!: pulumi.Output<string>;
    public readonly specification!: pulumi.Output<string | undefined>;

    /**
     * Create a RouterInterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouterInterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouterInterfaceArgs | RouterInterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouterInterfaceState | undefined;
            resourceInputs["accessPointId"] = state ? state.accessPointId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["healthCheckSourceIp"] = state ? state.healthCheckSourceIp : undefined;
            resourceInputs["healthCheckTargetIp"] = state ? state.healthCheckTargetIp : undefined;
            resourceInputs["instanceChargeType"] = state ? state.instanceChargeType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oppositeAccessPointId"] = state ? state.oppositeAccessPointId : undefined;
            resourceInputs["oppositeInterfaceId"] = state ? state.oppositeInterfaceId : undefined;
            resourceInputs["oppositeInterfaceOwnerId"] = state ? state.oppositeInterfaceOwnerId : undefined;
            resourceInputs["oppositeRegion"] = state ? state.oppositeRegion : undefined;
            resourceInputs["oppositeRouterId"] = state ? state.oppositeRouterId : undefined;
            resourceInputs["oppositeRouterType"] = state ? state.oppositeRouterType : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["routerId"] = state ? state.routerId : undefined;
            resourceInputs["routerType"] = state ? state.routerType : undefined;
            resourceInputs["specification"] = state ? state.specification : undefined;
        } else {
            const args = argsOrState as RouterInterfaceArgs | undefined;
            if ((!args || args.oppositeRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'oppositeRegion'");
            }
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            if ((!args || args.routerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routerId'");
            }
            if ((!args || args.routerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routerType'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["healthCheckSourceIp"] = args ? args.healthCheckSourceIp : undefined;
            resourceInputs["healthCheckTargetIp"] = args ? args.healthCheckTargetIp : undefined;
            resourceInputs["instanceChargeType"] = args ? args.instanceChargeType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["oppositeAccessPointId"] = args ? args.oppositeAccessPointId : undefined;
            resourceInputs["oppositeRegion"] = args ? args.oppositeRegion : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["routerId"] = args ? args.routerId : undefined;
            resourceInputs["routerType"] = args ? args.routerType : undefined;
            resourceInputs["specification"] = args ? args.specification : undefined;
            resourceInputs["accessPointId"] = undefined /*out*/;
            resourceInputs["oppositeInterfaceId"] = undefined /*out*/;
            resourceInputs["oppositeInterfaceOwnerId"] = undefined /*out*/;
            resourceInputs["oppositeRouterId"] = undefined /*out*/;
            resourceInputs["oppositeRouterType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouterInterface.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RouterInterface resources.
 */
export interface RouterInterfaceState {
    /**
     * @deprecated Deprecated
     */
    accessPointId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    healthCheckSourceIp?: pulumi.Input<string>;
    healthCheckTargetIp?: pulumi.Input<string>;
    instanceChargeType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    oppositeAccessPointId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    oppositeInterfaceId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    oppositeInterfaceOwnerId?: pulumi.Input<string>;
    oppositeRegion?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    oppositeRouterId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    oppositeRouterType?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    role?: pulumi.Input<string>;
    routerId?: pulumi.Input<string>;
    routerType?: pulumi.Input<string>;
    specification?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RouterInterface resource.
 */
export interface RouterInterfaceArgs {
    description?: pulumi.Input<string>;
    healthCheckSourceIp?: pulumi.Input<string>;
    healthCheckTargetIp?: pulumi.Input<string>;
    instanceChargeType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    oppositeAccessPointId?: pulumi.Input<string>;
    oppositeRegion: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    role: pulumi.Input<string>;
    routerId: pulumi.Input<string>;
    routerType: pulumi.Input<string>;
    specification?: pulumi.Input<string>;
}
