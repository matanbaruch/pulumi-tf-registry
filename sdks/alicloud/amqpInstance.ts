// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AmqpInstance extends pulumi.CustomResource {
    /**
     * Get an existing AmqpInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AmqpInstanceState, opts?: pulumi.CustomResourceOptions): AmqpInstance {
        return new AmqpInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/amqpInstance:AmqpInstance';

    /**
     * Returns true if the given object is an instance of AmqpInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AmqpInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AmqpInstance.__pulumiType;
    }

    public readonly autoRenew!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly createTime!: pulumi.Output<number>;
    public readonly instanceName!: pulumi.Output<string>;
    public readonly instanceType!: pulumi.Output<string>;
    public readonly maxConnections!: pulumi.Output<number>;
    public readonly maxEipTps!: pulumi.Output<string | undefined>;
    public readonly maxTps!: pulumi.Output<string>;
    public readonly modifyType!: pulumi.Output<string | undefined>;
    public readonly paymentType!: pulumi.Output<string>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly periodCycle!: pulumi.Output<string | undefined>;
    public readonly queueCapacity!: pulumi.Output<string>;
    public readonly renewalDuration!: pulumi.Output<number>;
    public readonly renewalDurationUnit!: pulumi.Output<string>;
    public readonly renewalStatus!: pulumi.Output<string>;
    public readonly serverlessChargeType!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly storageSize!: pulumi.Output<string>;
    public readonly supportEip!: pulumi.Output<boolean | undefined>;
    public readonly supportTracing!: pulumi.Output<boolean>;
    public readonly timeouts!: pulumi.Output<outputs.AmqpInstanceTimeouts | undefined>;
    public readonly tracingStorageTime!: pulumi.Output<number>;

    /**
     * Create a AmqpInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AmqpInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AmqpInstanceArgs | AmqpInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AmqpInstanceState | undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["maxConnections"] = state ? state.maxConnections : undefined;
            resourceInputs["maxEipTps"] = state ? state.maxEipTps : undefined;
            resourceInputs["maxTps"] = state ? state.maxTps : undefined;
            resourceInputs["modifyType"] = state ? state.modifyType : undefined;
            resourceInputs["paymentType"] = state ? state.paymentType : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodCycle"] = state ? state.periodCycle : undefined;
            resourceInputs["queueCapacity"] = state ? state.queueCapacity : undefined;
            resourceInputs["renewalDuration"] = state ? state.renewalDuration : undefined;
            resourceInputs["renewalDurationUnit"] = state ? state.renewalDurationUnit : undefined;
            resourceInputs["renewalStatus"] = state ? state.renewalStatus : undefined;
            resourceInputs["serverlessChargeType"] = state ? state.serverlessChargeType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storageSize"] = state ? state.storageSize : undefined;
            resourceInputs["supportEip"] = state ? state.supportEip : undefined;
            resourceInputs["supportTracing"] = state ? state.supportTracing : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["tracingStorageTime"] = state ? state.tracingStorageTime : undefined;
        } else {
            const args = argsOrState as AmqpInstanceArgs | undefined;
            if ((!args || args.paymentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'paymentType'");
            }
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["maxConnections"] = args ? args.maxConnections : undefined;
            resourceInputs["maxEipTps"] = args ? args.maxEipTps : undefined;
            resourceInputs["maxTps"] = args ? args.maxTps : undefined;
            resourceInputs["modifyType"] = args ? args.modifyType : undefined;
            resourceInputs["paymentType"] = args ? args.paymentType : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodCycle"] = args ? args.periodCycle : undefined;
            resourceInputs["queueCapacity"] = args ? args.queueCapacity : undefined;
            resourceInputs["renewalDuration"] = args ? args.renewalDuration : undefined;
            resourceInputs["renewalDurationUnit"] = args ? args.renewalDurationUnit : undefined;
            resourceInputs["renewalStatus"] = args ? args.renewalStatus : undefined;
            resourceInputs["serverlessChargeType"] = args ? args.serverlessChargeType : undefined;
            resourceInputs["storageSize"] = args ? args.storageSize : undefined;
            resourceInputs["supportEip"] = args ? args.supportEip : undefined;
            resourceInputs["supportTracing"] = args ? args.supportTracing : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["tracingStorageTime"] = args ? args.tracingStorageTime : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AmqpInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AmqpInstance resources.
 */
export interface AmqpInstanceState {
    autoRenew?: pulumi.Input<boolean>;
    createTime?: pulumi.Input<number>;
    instanceName?: pulumi.Input<string>;
    instanceType?: pulumi.Input<string>;
    maxConnections?: pulumi.Input<number>;
    maxEipTps?: pulumi.Input<string>;
    maxTps?: pulumi.Input<string>;
    modifyType?: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodCycle?: pulumi.Input<string>;
    queueCapacity?: pulumi.Input<string>;
    renewalDuration?: pulumi.Input<number>;
    renewalDurationUnit?: pulumi.Input<string>;
    renewalStatus?: pulumi.Input<string>;
    serverlessChargeType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    storageSize?: pulumi.Input<string>;
    supportEip?: pulumi.Input<boolean>;
    supportTracing?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.AmqpInstanceTimeouts>;
    tracingStorageTime?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AmqpInstance resource.
 */
export interface AmqpInstanceArgs {
    autoRenew?: pulumi.Input<boolean>;
    instanceName?: pulumi.Input<string>;
    instanceType?: pulumi.Input<string>;
    maxConnections?: pulumi.Input<number>;
    maxEipTps?: pulumi.Input<string>;
    maxTps?: pulumi.Input<string>;
    modifyType?: pulumi.Input<string>;
    paymentType: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodCycle?: pulumi.Input<string>;
    queueCapacity?: pulumi.Input<string>;
    renewalDuration?: pulumi.Input<number>;
    renewalDurationUnit?: pulumi.Input<string>;
    renewalStatus?: pulumi.Input<string>;
    serverlessChargeType?: pulumi.Input<string>;
    storageSize?: pulumi.Input<string>;
    supportEip?: pulumi.Input<boolean>;
    supportTracing?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.AmqpInstanceTimeouts>;
    tracingStorageTime?: pulumi.Input<number>;
}
