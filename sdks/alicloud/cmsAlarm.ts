// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CmsAlarm extends pulumi.CustomResource {
    /**
     * Get an existing CmsAlarm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CmsAlarmState, opts?: pulumi.CustomResourceOptions): CmsAlarm {
        return new CmsAlarm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/cmsAlarm:CmsAlarm';

    /**
     * Returns true if the given object is an instance of CmsAlarm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CmsAlarm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CmsAlarm.__pulumiType;
    }

    public readonly compositeExpression!: pulumi.Output<outputs.CmsAlarmCompositeExpression | undefined>;
    public readonly contactGroups!: pulumi.Output<string[]>;
    /**
     * @deprecated Deprecated
     */
    public readonly dimensions!: pulumi.Output<{[key: string]: string}>;
    public readonly effectiveInterval!: pulumi.Output<string | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly endTime!: pulumi.Output<number | undefined>;
    public readonly escalationsCritical!: pulumi.Output<outputs.CmsAlarmEscalationsCritical | undefined>;
    public readonly escalationsInfo!: pulumi.Output<outputs.CmsAlarmEscalationsInfo | undefined>;
    public readonly escalationsWarn!: pulumi.Output<outputs.CmsAlarmEscalationsWarn | undefined>;
    public readonly metric!: pulumi.Output<string>;
    public readonly metricDimensions!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly notifyType!: pulumi.Output<number | undefined>;
    public readonly operator!: pulumi.Output<string>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly project!: pulumi.Output<string>;
    public readonly prometheuses!: pulumi.Output<outputs.CmsAlarmPrometheus[] | undefined>;
    public readonly silenceTime!: pulumi.Output<number | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly startTime!: pulumi.Output<number | undefined>;
    public readonly statistics!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly targets!: pulumi.Output<outputs.CmsAlarmTarget[] | undefined>;
    public readonly threshold!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CmsAlarmTimeouts | undefined>;
    public readonly triggeredCount!: pulumi.Output<number>;
    public readonly webhook!: pulumi.Output<string | undefined>;

    /**
     * Create a CmsAlarm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CmsAlarmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CmsAlarmArgs | CmsAlarmState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CmsAlarmState | undefined;
            resourceInputs["compositeExpression"] = state ? state.compositeExpression : undefined;
            resourceInputs["contactGroups"] = state ? state.contactGroups : undefined;
            resourceInputs["dimensions"] = state ? state.dimensions : undefined;
            resourceInputs["effectiveInterval"] = state ? state.effectiveInterval : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["endTime"] = state ? state.endTime : undefined;
            resourceInputs["escalationsCritical"] = state ? state.escalationsCritical : undefined;
            resourceInputs["escalationsInfo"] = state ? state.escalationsInfo : undefined;
            resourceInputs["escalationsWarn"] = state ? state.escalationsWarn : undefined;
            resourceInputs["metric"] = state ? state.metric : undefined;
            resourceInputs["metricDimensions"] = state ? state.metricDimensions : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifyType"] = state ? state.notifyType : undefined;
            resourceInputs["operator"] = state ? state.operator : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["prometheuses"] = state ? state.prometheuses : undefined;
            resourceInputs["silenceTime"] = state ? state.silenceTime : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
            resourceInputs["statistics"] = state ? state.statistics : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
            resourceInputs["threshold"] = state ? state.threshold : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["triggeredCount"] = state ? state.triggeredCount : undefined;
            resourceInputs["webhook"] = state ? state.webhook : undefined;
        } else {
            const args = argsOrState as CmsAlarmArgs | undefined;
            if ((!args || args.contactGroups === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contactGroups'");
            }
            if ((!args || args.metric === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metric'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["compositeExpression"] = args ? args.compositeExpression : undefined;
            resourceInputs["contactGroups"] = args ? args.contactGroups : undefined;
            resourceInputs["dimensions"] = args ? args.dimensions : undefined;
            resourceInputs["effectiveInterval"] = args ? args.effectiveInterval : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["endTime"] = args ? args.endTime : undefined;
            resourceInputs["escalationsCritical"] = args ? args.escalationsCritical : undefined;
            resourceInputs["escalationsInfo"] = args ? args.escalationsInfo : undefined;
            resourceInputs["escalationsWarn"] = args ? args.escalationsWarn : undefined;
            resourceInputs["metric"] = args ? args.metric : undefined;
            resourceInputs["metricDimensions"] = args ? args.metricDimensions : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notifyType"] = args ? args.notifyType : undefined;
            resourceInputs["operator"] = args ? args.operator : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["prometheuses"] = args ? args.prometheuses : undefined;
            resourceInputs["silenceTime"] = args ? args.silenceTime : undefined;
            resourceInputs["startTime"] = args ? args.startTime : undefined;
            resourceInputs["statistics"] = args ? args.statistics : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["threshold"] = args ? args.threshold : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["triggeredCount"] = args ? args.triggeredCount : undefined;
            resourceInputs["webhook"] = args ? args.webhook : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CmsAlarm.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CmsAlarm resources.
 */
export interface CmsAlarmState {
    compositeExpression?: pulumi.Input<inputs.CmsAlarmCompositeExpression>;
    contactGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * @deprecated Deprecated
     */
    dimensions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    effectiveInterval?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    endTime?: pulumi.Input<number>;
    escalationsCritical?: pulumi.Input<inputs.CmsAlarmEscalationsCritical>;
    escalationsInfo?: pulumi.Input<inputs.CmsAlarmEscalationsInfo>;
    escalationsWarn?: pulumi.Input<inputs.CmsAlarmEscalationsWarn>;
    metric?: pulumi.Input<string>;
    metricDimensions?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notifyType?: pulumi.Input<number>;
    operator?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    project?: pulumi.Input<string>;
    prometheuses?: pulumi.Input<pulumi.Input<inputs.CmsAlarmPrometheus>[]>;
    silenceTime?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    startTime?: pulumi.Input<number>;
    statistics?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    targets?: pulumi.Input<pulumi.Input<inputs.CmsAlarmTarget>[]>;
    threshold?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CmsAlarmTimeouts>;
    triggeredCount?: pulumi.Input<number>;
    webhook?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CmsAlarm resource.
 */
export interface CmsAlarmArgs {
    compositeExpression?: pulumi.Input<inputs.CmsAlarmCompositeExpression>;
    contactGroups: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * @deprecated Deprecated
     */
    dimensions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    effectiveInterval?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    endTime?: pulumi.Input<number>;
    escalationsCritical?: pulumi.Input<inputs.CmsAlarmEscalationsCritical>;
    escalationsInfo?: pulumi.Input<inputs.CmsAlarmEscalationsInfo>;
    escalationsWarn?: pulumi.Input<inputs.CmsAlarmEscalationsWarn>;
    metric: pulumi.Input<string>;
    metricDimensions?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notifyType?: pulumi.Input<number>;
    operator?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    project: pulumi.Input<string>;
    prometheuses?: pulumi.Input<pulumi.Input<inputs.CmsAlarmPrometheus>[]>;
    silenceTime?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    startTime?: pulumi.Input<number>;
    statistics?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    targets?: pulumi.Input<pulumi.Input<inputs.CmsAlarmTarget>[]>;
    threshold?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CmsAlarmTimeouts>;
    triggeredCount?: pulumi.Input<number>;
    webhook?: pulumi.Input<string>;
}
