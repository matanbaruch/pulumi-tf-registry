// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DmsEnterpriseInstance extends pulumi.CustomResource {
    /**
     * Get an existing DmsEnterpriseInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DmsEnterpriseInstanceState, opts?: pulumi.CustomResourceOptions): DmsEnterpriseInstance {
        return new DmsEnterpriseInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/dmsEnterpriseInstance:DmsEnterpriseInstance';

    /**
     * Returns true if the given object is an instance of DmsEnterpriseInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DmsEnterpriseInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DmsEnterpriseInstance.__pulumiType;
    }

    public readonly dataLinkName!: pulumi.Output<string>;
    public readonly databasePassword!: pulumi.Output<string>;
    public readonly databaseUser!: pulumi.Output<string>;
    public readonly dbaId!: pulumi.Output<string>;
    public /*out*/ readonly dbaNickName!: pulumi.Output<string>;
    public readonly dbaUid!: pulumi.Output<number>;
    public readonly ddlOnline!: pulumi.Output<number | undefined>;
    public readonly ecsInstanceId!: pulumi.Output<string>;
    public readonly ecsRegion!: pulumi.Output<string | undefined>;
    public readonly envType!: pulumi.Output<string>;
    public readonly exportTimeout!: pulumi.Output<number>;
    public readonly host!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly instanceAlias!: pulumi.Output<string>;
    public readonly instanceId!: pulumi.Output<string>;
    public readonly instanceName!: pulumi.Output<string>;
    public readonly instanceSource!: pulumi.Output<string>;
    public readonly instanceType!: pulumi.Output<string>;
    public readonly networkType!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number>;
    public readonly queryTimeout!: pulumi.Output<number>;
    public readonly safeRule!: pulumi.Output<string>;
    public readonly safeRuleId!: pulumi.Output<string>;
    public readonly sid!: pulumi.Output<string | undefined>;
    public readonly skipTest!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated Deprecated
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tid!: pulumi.Output<number | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.DmsEnterpriseInstanceTimeouts | undefined>;
    public readonly useDsql!: pulumi.Output<number>;
    public readonly vpcId!: pulumi.Output<string | undefined>;

    /**
     * Create a DmsEnterpriseInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DmsEnterpriseInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DmsEnterpriseInstanceArgs | DmsEnterpriseInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DmsEnterpriseInstanceState | undefined;
            resourceInputs["dataLinkName"] = state ? state.dataLinkName : undefined;
            resourceInputs["databasePassword"] = state ? state.databasePassword : undefined;
            resourceInputs["databaseUser"] = state ? state.databaseUser : undefined;
            resourceInputs["dbaId"] = state ? state.dbaId : undefined;
            resourceInputs["dbaNickName"] = state ? state.dbaNickName : undefined;
            resourceInputs["dbaUid"] = state ? state.dbaUid : undefined;
            resourceInputs["ddlOnline"] = state ? state.ddlOnline : undefined;
            resourceInputs["ecsInstanceId"] = state ? state.ecsInstanceId : undefined;
            resourceInputs["ecsRegion"] = state ? state.ecsRegion : undefined;
            resourceInputs["envType"] = state ? state.envType : undefined;
            resourceInputs["exportTimeout"] = state ? state.exportTimeout : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["instanceAlias"] = state ? state.instanceAlias : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["instanceSource"] = state ? state.instanceSource : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["networkType"] = state ? state.networkType : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["queryTimeout"] = state ? state.queryTimeout : undefined;
            resourceInputs["safeRule"] = state ? state.safeRule : undefined;
            resourceInputs["safeRuleId"] = state ? state.safeRuleId : undefined;
            resourceInputs["sid"] = state ? state.sid : undefined;
            resourceInputs["skipTest"] = state ? state.skipTest : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tid"] = state ? state.tid : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["useDsql"] = state ? state.useDsql : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as DmsEnterpriseInstanceArgs | undefined;
            if ((!args || args.databasePassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databasePassword'");
            }
            if ((!args || args.databaseUser === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseUser'");
            }
            if ((!args || args.dbaUid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbaUid'");
            }
            if ((!args || args.envType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'envType'");
            }
            if ((!args || args.exportTimeout === undefined) && !opts.urn) {
                throw new Error("Missing required property 'exportTimeout'");
            }
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if ((!args || args.instanceSource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceSource'");
            }
            if ((!args || args.instanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceType'");
            }
            if ((!args || args.networkType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkType'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.queryTimeout === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queryTimeout'");
            }
            if ((!args || args.safeRule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'safeRule'");
            }
            resourceInputs["dataLinkName"] = args ? args.dataLinkName : undefined;
            resourceInputs["databasePassword"] = args?.databasePassword ? pulumi.secret(args.databasePassword) : undefined;
            resourceInputs["databaseUser"] = args ? args.databaseUser : undefined;
            resourceInputs["dbaId"] = args ? args.dbaId : undefined;
            resourceInputs["dbaUid"] = args ? args.dbaUid : undefined;
            resourceInputs["ddlOnline"] = args ? args.ddlOnline : undefined;
            resourceInputs["ecsInstanceId"] = args ? args.ecsInstanceId : undefined;
            resourceInputs["ecsRegion"] = args ? args.ecsRegion : undefined;
            resourceInputs["envType"] = args ? args.envType : undefined;
            resourceInputs["exportTimeout"] = args ? args.exportTimeout : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["instanceAlias"] = args ? args.instanceAlias : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["instanceSource"] = args ? args.instanceSource : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["networkType"] = args ? args.networkType : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["queryTimeout"] = args ? args.queryTimeout : undefined;
            resourceInputs["safeRule"] = args ? args.safeRule : undefined;
            resourceInputs["safeRuleId"] = args ? args.safeRuleId : undefined;
            resourceInputs["sid"] = args ? args.sid : undefined;
            resourceInputs["skipTest"] = args ? args.skipTest : undefined;
            resourceInputs["tid"] = args ? args.tid : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["useDsql"] = args ? args.useDsql : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["dbaNickName"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["databasePassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DmsEnterpriseInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DmsEnterpriseInstance resources.
 */
export interface DmsEnterpriseInstanceState {
    dataLinkName?: pulumi.Input<string>;
    databasePassword?: pulumi.Input<string>;
    databaseUser?: pulumi.Input<string>;
    dbaId?: pulumi.Input<string>;
    dbaNickName?: pulumi.Input<string>;
    dbaUid?: pulumi.Input<number>;
    ddlOnline?: pulumi.Input<number>;
    ecsInstanceId?: pulumi.Input<string>;
    ecsRegion?: pulumi.Input<string>;
    envType?: pulumi.Input<string>;
    exportTimeout?: pulumi.Input<number>;
    host?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    instanceAlias?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    instanceName?: pulumi.Input<string>;
    instanceSource?: pulumi.Input<string>;
    instanceType?: pulumi.Input<string>;
    networkType?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    queryTimeout?: pulumi.Input<number>;
    safeRule?: pulumi.Input<string>;
    safeRuleId?: pulumi.Input<string>;
    sid?: pulumi.Input<string>;
    skipTest?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    state?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tid?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.DmsEnterpriseInstanceTimeouts>;
    useDsql?: pulumi.Input<number>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DmsEnterpriseInstance resource.
 */
export interface DmsEnterpriseInstanceArgs {
    dataLinkName?: pulumi.Input<string>;
    databasePassword: pulumi.Input<string>;
    databaseUser: pulumi.Input<string>;
    dbaId?: pulumi.Input<string>;
    dbaUid: pulumi.Input<number>;
    ddlOnline?: pulumi.Input<number>;
    ecsInstanceId?: pulumi.Input<string>;
    ecsRegion?: pulumi.Input<string>;
    envType: pulumi.Input<string>;
    exportTimeout: pulumi.Input<number>;
    host: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    instanceAlias?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    instanceName?: pulumi.Input<string>;
    instanceSource: pulumi.Input<string>;
    instanceType: pulumi.Input<string>;
    networkType: pulumi.Input<string>;
    port: pulumi.Input<number>;
    queryTimeout: pulumi.Input<number>;
    safeRule: pulumi.Input<string>;
    safeRuleId?: pulumi.Input<string>;
    sid?: pulumi.Input<string>;
    skipTest?: pulumi.Input<boolean>;
    tid?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.DmsEnterpriseInstanceTimeouts>;
    useDsql?: pulumi.Input<number>;
    vpcId?: pulumi.Input<string>;
}
