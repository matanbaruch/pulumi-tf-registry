// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CenTransitRouterVpcAttachment extends pulumi.CustomResource {
    /**
     * Get an existing CenTransitRouterVpcAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CenTransitRouterVpcAttachmentState, opts?: pulumi.CustomResourceOptions): CenTransitRouterVpcAttachment {
        return new CenTransitRouterVpcAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/cenTransitRouterVpcAttachment:CenTransitRouterVpcAttachment';

    /**
     * Returns true if the given object is an instance of CenTransitRouterVpcAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CenTransitRouterVpcAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CenTransitRouterVpcAttachment.__pulumiType;
    }

    public readonly autoPublishRouteEnabled!: pulumi.Output<boolean | undefined>;
    public readonly cenId!: pulumi.Output<string>;
    public readonly dryRun!: pulumi.Output<boolean | undefined>;
    public readonly paymentType!: pulumi.Output<string>;
    public readonly resourceType!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly routeTableAssociationEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly routeTablePropagationEnabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.CenTransitRouterVpcAttachmentTimeouts | undefined>;
    public readonly transitRouterAttachmentDescription!: pulumi.Output<string | undefined>;
    public /*out*/ readonly transitRouterAttachmentId!: pulumi.Output<string>;
    public readonly transitRouterAttachmentName!: pulumi.Output<string | undefined>;
    public readonly transitRouterId!: pulumi.Output<string>;
    public readonly vpcId!: pulumi.Output<string>;
    public readonly vpcOwnerId!: pulumi.Output<string>;
    public readonly zoneMappings!: pulumi.Output<outputs.CenTransitRouterVpcAttachmentZoneMapping[]>;

    /**
     * Create a CenTransitRouterVpcAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CenTransitRouterVpcAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CenTransitRouterVpcAttachmentArgs | CenTransitRouterVpcAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CenTransitRouterVpcAttachmentState | undefined;
            resourceInputs["autoPublishRouteEnabled"] = state ? state.autoPublishRouteEnabled : undefined;
            resourceInputs["cenId"] = state ? state.cenId : undefined;
            resourceInputs["dryRun"] = state ? state.dryRun : undefined;
            resourceInputs["paymentType"] = state ? state.paymentType : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["routeTableAssociationEnabled"] = state ? state.routeTableAssociationEnabled : undefined;
            resourceInputs["routeTablePropagationEnabled"] = state ? state.routeTablePropagationEnabled : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["transitRouterAttachmentDescription"] = state ? state.transitRouterAttachmentDescription : undefined;
            resourceInputs["transitRouterAttachmentId"] = state ? state.transitRouterAttachmentId : undefined;
            resourceInputs["transitRouterAttachmentName"] = state ? state.transitRouterAttachmentName : undefined;
            resourceInputs["transitRouterId"] = state ? state.transitRouterId : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vpcOwnerId"] = state ? state.vpcOwnerId : undefined;
            resourceInputs["zoneMappings"] = state ? state.zoneMappings : undefined;
        } else {
            const args = argsOrState as CenTransitRouterVpcAttachmentArgs | undefined;
            if ((!args || args.cenId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cenId'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            if ((!args || args.zoneMappings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneMappings'");
            }
            resourceInputs["autoPublishRouteEnabled"] = args ? args.autoPublishRouteEnabled : undefined;
            resourceInputs["cenId"] = args ? args.cenId : undefined;
            resourceInputs["dryRun"] = args ? args.dryRun : undefined;
            resourceInputs["paymentType"] = args ? args.paymentType : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["routeTableAssociationEnabled"] = args ? args.routeTableAssociationEnabled : undefined;
            resourceInputs["routeTablePropagationEnabled"] = args ? args.routeTablePropagationEnabled : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["transitRouterAttachmentDescription"] = args ? args.transitRouterAttachmentDescription : undefined;
            resourceInputs["transitRouterAttachmentName"] = args ? args.transitRouterAttachmentName : undefined;
            resourceInputs["transitRouterId"] = args ? args.transitRouterId : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vpcOwnerId"] = args ? args.vpcOwnerId : undefined;
            resourceInputs["zoneMappings"] = args ? args.zoneMappings : undefined;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["transitRouterAttachmentId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CenTransitRouterVpcAttachment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CenTransitRouterVpcAttachment resources.
 */
export interface CenTransitRouterVpcAttachmentState {
    autoPublishRouteEnabled?: pulumi.Input<boolean>;
    cenId?: pulumi.Input<string>;
    dryRun?: pulumi.Input<boolean>;
    paymentType?: pulumi.Input<string>;
    resourceType?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    routeTableAssociationEnabled?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    routeTablePropagationEnabled?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.CenTransitRouterVpcAttachmentTimeouts>;
    transitRouterAttachmentDescription?: pulumi.Input<string>;
    transitRouterAttachmentId?: pulumi.Input<string>;
    transitRouterAttachmentName?: pulumi.Input<string>;
    transitRouterId?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
    vpcOwnerId?: pulumi.Input<string>;
    zoneMappings?: pulumi.Input<pulumi.Input<inputs.CenTransitRouterVpcAttachmentZoneMapping>[]>;
}

/**
 * The set of arguments for constructing a CenTransitRouterVpcAttachment resource.
 */
export interface CenTransitRouterVpcAttachmentArgs {
    autoPublishRouteEnabled?: pulumi.Input<boolean>;
    cenId: pulumi.Input<string>;
    dryRun?: pulumi.Input<boolean>;
    paymentType?: pulumi.Input<string>;
    resourceType?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    routeTableAssociationEnabled?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    routeTablePropagationEnabled?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.CenTransitRouterVpcAttachmentTimeouts>;
    transitRouterAttachmentDescription?: pulumi.Input<string>;
    transitRouterAttachmentName?: pulumi.Input<string>;
    transitRouterId?: pulumi.Input<string>;
    vpcId: pulumi.Input<string>;
    vpcOwnerId?: pulumi.Input<string>;
    zoneMappings: pulumi.Input<pulumi.Input<inputs.CenTransitRouterVpcAttachmentZoneMapping>[]>;
}
