// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AlbListener extends pulumi.CustomResource {
    /**
     * Get an existing AlbListener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlbListenerState, opts?: pulumi.CustomResourceOptions): AlbListener {
        return new AlbListener(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/albListener:AlbListener';

    /**
     * Returns true if the given object is an instance of AlbListener.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlbListener {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlbListener.__pulumiType;
    }

    public readonly accessLogRecordCustomizedHeadersEnabled!: pulumi.Output<boolean>;
    public readonly accessLogTracingConfig!: pulumi.Output<outputs.AlbListenerAccessLogTracingConfig | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly aclConfig!: pulumi.Output<outputs.AlbListenerAclConfig | undefined>;
    public readonly certificates!: pulumi.Output<outputs.AlbListenerCertificates | undefined>;
    public readonly defaultActions!: pulumi.Output<outputs.AlbListenerDefaultAction[] | undefined>;
    public readonly dryRun!: pulumi.Output<boolean | undefined>;
    public readonly gzipEnabled!: pulumi.Output<boolean>;
    public readonly http2Enabled!: pulumi.Output<boolean>;
    public readonly idleTimeout!: pulumi.Output<number>;
    public readonly listenerDescription!: pulumi.Output<string | undefined>;
    public readonly listenerPort!: pulumi.Output<number>;
    public readonly listenerProtocol!: pulumi.Output<string>;
    public readonly loadBalancerId!: pulumi.Output<string>;
    public readonly quicConfig!: pulumi.Output<outputs.AlbListenerQuicConfig | undefined>;
    public readonly requestTimeout!: pulumi.Output<number>;
    public readonly securityPolicyId!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.AlbListenerTimeouts | undefined>;
    public readonly xForwardedForConfig!: pulumi.Output<outputs.AlbListenerXForwardedForConfig | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly xforwardedForConfig!: pulumi.Output<outputs.AlbListenerXforwardedForConfig | undefined>;

    /**
     * Create a AlbListener resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlbListenerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlbListenerArgs | AlbListenerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlbListenerState | undefined;
            resourceInputs["accessLogRecordCustomizedHeadersEnabled"] = state ? state.accessLogRecordCustomizedHeadersEnabled : undefined;
            resourceInputs["accessLogTracingConfig"] = state ? state.accessLogTracingConfig : undefined;
            resourceInputs["aclConfig"] = state ? state.aclConfig : undefined;
            resourceInputs["certificates"] = state ? state.certificates : undefined;
            resourceInputs["defaultActions"] = state ? state.defaultActions : undefined;
            resourceInputs["dryRun"] = state ? state.dryRun : undefined;
            resourceInputs["gzipEnabled"] = state ? state.gzipEnabled : undefined;
            resourceInputs["http2Enabled"] = state ? state.http2Enabled : undefined;
            resourceInputs["idleTimeout"] = state ? state.idleTimeout : undefined;
            resourceInputs["listenerDescription"] = state ? state.listenerDescription : undefined;
            resourceInputs["listenerPort"] = state ? state.listenerPort : undefined;
            resourceInputs["listenerProtocol"] = state ? state.listenerProtocol : undefined;
            resourceInputs["loadBalancerId"] = state ? state.loadBalancerId : undefined;
            resourceInputs["quicConfig"] = state ? state.quicConfig : undefined;
            resourceInputs["requestTimeout"] = state ? state.requestTimeout : undefined;
            resourceInputs["securityPolicyId"] = state ? state.securityPolicyId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["xForwardedForConfig"] = state ? state.xForwardedForConfig : undefined;
            resourceInputs["xforwardedForConfig"] = state ? state.xforwardedForConfig : undefined;
        } else {
            const args = argsOrState as AlbListenerArgs | undefined;
            if ((!args || args.listenerPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenerPort'");
            }
            if ((!args || args.listenerProtocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenerProtocol'");
            }
            if ((!args || args.loadBalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerId'");
            }
            resourceInputs["accessLogRecordCustomizedHeadersEnabled"] = args ? args.accessLogRecordCustomizedHeadersEnabled : undefined;
            resourceInputs["accessLogTracingConfig"] = args ? args.accessLogTracingConfig : undefined;
            resourceInputs["aclConfig"] = args ? args.aclConfig : undefined;
            resourceInputs["certificates"] = args ? args.certificates : undefined;
            resourceInputs["defaultActions"] = args ? args.defaultActions : undefined;
            resourceInputs["dryRun"] = args ? args.dryRun : undefined;
            resourceInputs["gzipEnabled"] = args ? args.gzipEnabled : undefined;
            resourceInputs["http2Enabled"] = args ? args.http2Enabled : undefined;
            resourceInputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            resourceInputs["listenerDescription"] = args ? args.listenerDescription : undefined;
            resourceInputs["listenerPort"] = args ? args.listenerPort : undefined;
            resourceInputs["listenerProtocol"] = args ? args.listenerProtocol : undefined;
            resourceInputs["loadBalancerId"] = args ? args.loadBalancerId : undefined;
            resourceInputs["quicConfig"] = args ? args.quicConfig : undefined;
            resourceInputs["requestTimeout"] = args ? args.requestTimeout : undefined;
            resourceInputs["securityPolicyId"] = args ? args.securityPolicyId : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["xForwardedForConfig"] = args ? args.xForwardedForConfig : undefined;
            resourceInputs["xforwardedForConfig"] = args ? args.xforwardedForConfig : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlbListener.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AlbListener resources.
 */
export interface AlbListenerState {
    accessLogRecordCustomizedHeadersEnabled?: pulumi.Input<boolean>;
    accessLogTracingConfig?: pulumi.Input<inputs.AlbListenerAccessLogTracingConfig>;
    /**
     * @deprecated Deprecated
     */
    aclConfig?: pulumi.Input<inputs.AlbListenerAclConfig>;
    certificates?: pulumi.Input<inputs.AlbListenerCertificates>;
    defaultActions?: pulumi.Input<pulumi.Input<inputs.AlbListenerDefaultAction>[]>;
    dryRun?: pulumi.Input<boolean>;
    gzipEnabled?: pulumi.Input<boolean>;
    http2Enabled?: pulumi.Input<boolean>;
    idleTimeout?: pulumi.Input<number>;
    listenerDescription?: pulumi.Input<string>;
    listenerPort?: pulumi.Input<number>;
    listenerProtocol?: pulumi.Input<string>;
    loadBalancerId?: pulumi.Input<string>;
    quicConfig?: pulumi.Input<inputs.AlbListenerQuicConfig>;
    requestTimeout?: pulumi.Input<number>;
    securityPolicyId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.AlbListenerTimeouts>;
    xForwardedForConfig?: pulumi.Input<inputs.AlbListenerXForwardedForConfig>;
    /**
     * @deprecated Deprecated
     */
    xforwardedForConfig?: pulumi.Input<inputs.AlbListenerXforwardedForConfig>;
}

/**
 * The set of arguments for constructing a AlbListener resource.
 */
export interface AlbListenerArgs {
    accessLogRecordCustomizedHeadersEnabled?: pulumi.Input<boolean>;
    accessLogTracingConfig?: pulumi.Input<inputs.AlbListenerAccessLogTracingConfig>;
    /**
     * @deprecated Deprecated
     */
    aclConfig?: pulumi.Input<inputs.AlbListenerAclConfig>;
    certificates?: pulumi.Input<inputs.AlbListenerCertificates>;
    defaultActions?: pulumi.Input<pulumi.Input<inputs.AlbListenerDefaultAction>[]>;
    dryRun?: pulumi.Input<boolean>;
    gzipEnabled?: pulumi.Input<boolean>;
    http2Enabled?: pulumi.Input<boolean>;
    idleTimeout?: pulumi.Input<number>;
    listenerDescription?: pulumi.Input<string>;
    listenerPort: pulumi.Input<number>;
    listenerProtocol: pulumi.Input<string>;
    loadBalancerId: pulumi.Input<string>;
    quicConfig?: pulumi.Input<inputs.AlbListenerQuicConfig>;
    requestTimeout?: pulumi.Input<number>;
    securityPolicyId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.AlbListenerTimeouts>;
    xForwardedForConfig?: pulumi.Input<inputs.AlbListenerXForwardedForConfig>;
    /**
     * @deprecated Deprecated
     */
    xforwardedForConfig?: pulumi.Input<inputs.AlbListenerXforwardedForConfig>;
}
