// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ExpressConnectTrafficQosRule extends pulumi.CustomResource {
    /**
     * Get an existing ExpressConnectTrafficQosRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExpressConnectTrafficQosRuleState, opts?: pulumi.CustomResourceOptions): ExpressConnectTrafficQosRule {
        return new ExpressConnectTrafficQosRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/expressConnectTrafficQosRule:ExpressConnectTrafficQosRule';

    /**
     * Returns true if the given object is an instance of ExpressConnectTrafficQosRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExpressConnectTrafficQosRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExpressConnectTrafficQosRule.__pulumiType;
    }

    public readonly dstCidr!: pulumi.Output<string | undefined>;
    public readonly dstIpv6Cidr!: pulumi.Output<string | undefined>;
    public readonly dstPortRange!: pulumi.Output<string>;
    public readonly matchDscp!: pulumi.Output<number>;
    public readonly priority!: pulumi.Output<number>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly qosId!: pulumi.Output<string>;
    public readonly queueId!: pulumi.Output<string>;
    public readonly remarkingDscp!: pulumi.Output<number>;
    public readonly ruleDescription!: pulumi.Output<string | undefined>;
    public /*out*/ readonly ruleId!: pulumi.Output<string>;
    public readonly ruleName!: pulumi.Output<string | undefined>;
    public readonly srcCidr!: pulumi.Output<string | undefined>;
    public readonly srcIpv6Cidr!: pulumi.Output<string | undefined>;
    public readonly srcPortRange!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ExpressConnectTrafficQosRuleTimeouts | undefined>;

    /**
     * Create a ExpressConnectTrafficQosRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExpressConnectTrafficQosRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExpressConnectTrafficQosRuleArgs | ExpressConnectTrafficQosRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExpressConnectTrafficQosRuleState | undefined;
            resourceInputs["dstCidr"] = state ? state.dstCidr : undefined;
            resourceInputs["dstIpv6Cidr"] = state ? state.dstIpv6Cidr : undefined;
            resourceInputs["dstPortRange"] = state ? state.dstPortRange : undefined;
            resourceInputs["matchDscp"] = state ? state.matchDscp : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["qosId"] = state ? state.qosId : undefined;
            resourceInputs["queueId"] = state ? state.queueId : undefined;
            resourceInputs["remarkingDscp"] = state ? state.remarkingDscp : undefined;
            resourceInputs["ruleDescription"] = state ? state.ruleDescription : undefined;
            resourceInputs["ruleId"] = state ? state.ruleId : undefined;
            resourceInputs["ruleName"] = state ? state.ruleName : undefined;
            resourceInputs["srcCidr"] = state ? state.srcCidr : undefined;
            resourceInputs["srcIpv6Cidr"] = state ? state.srcIpv6Cidr : undefined;
            resourceInputs["srcPortRange"] = state ? state.srcPortRange : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ExpressConnectTrafficQosRuleArgs | undefined;
            if ((!args || args.priority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.qosId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'qosId'");
            }
            if ((!args || args.queueId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queueId'");
            }
            resourceInputs["dstCidr"] = args ? args.dstCidr : undefined;
            resourceInputs["dstIpv6Cidr"] = args ? args.dstIpv6Cidr : undefined;
            resourceInputs["dstPortRange"] = args ? args.dstPortRange : undefined;
            resourceInputs["matchDscp"] = args ? args.matchDscp : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["qosId"] = args ? args.qosId : undefined;
            resourceInputs["queueId"] = args ? args.queueId : undefined;
            resourceInputs["remarkingDscp"] = args ? args.remarkingDscp : undefined;
            resourceInputs["ruleDescription"] = args ? args.ruleDescription : undefined;
            resourceInputs["ruleName"] = args ? args.ruleName : undefined;
            resourceInputs["srcCidr"] = args ? args.srcCidr : undefined;
            resourceInputs["srcIpv6Cidr"] = args ? args.srcIpv6Cidr : undefined;
            resourceInputs["srcPortRange"] = args ? args.srcPortRange : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["ruleId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExpressConnectTrafficQosRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ExpressConnectTrafficQosRule resources.
 */
export interface ExpressConnectTrafficQosRuleState {
    dstCidr?: pulumi.Input<string>;
    dstIpv6Cidr?: pulumi.Input<string>;
    dstPortRange?: pulumi.Input<string>;
    matchDscp?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    qosId?: pulumi.Input<string>;
    queueId?: pulumi.Input<string>;
    remarkingDscp?: pulumi.Input<number>;
    ruleDescription?: pulumi.Input<string>;
    ruleId?: pulumi.Input<string>;
    ruleName?: pulumi.Input<string>;
    srcCidr?: pulumi.Input<string>;
    srcIpv6Cidr?: pulumi.Input<string>;
    srcPortRange?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ExpressConnectTrafficQosRuleTimeouts>;
}

/**
 * The set of arguments for constructing a ExpressConnectTrafficQosRule resource.
 */
export interface ExpressConnectTrafficQosRuleArgs {
    dstCidr?: pulumi.Input<string>;
    dstIpv6Cidr?: pulumi.Input<string>;
    dstPortRange?: pulumi.Input<string>;
    matchDscp?: pulumi.Input<number>;
    priority: pulumi.Input<number>;
    protocol: pulumi.Input<string>;
    qosId: pulumi.Input<string>;
    queueId: pulumi.Input<string>;
    remarkingDscp?: pulumi.Input<number>;
    ruleDescription?: pulumi.Input<string>;
    ruleName?: pulumi.Input<string>;
    srcCidr?: pulumi.Input<string>;
    srcIpv6Cidr?: pulumi.Input<string>;
    srcPortRange?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ExpressConnectTrafficQosRuleTimeouts>;
}
