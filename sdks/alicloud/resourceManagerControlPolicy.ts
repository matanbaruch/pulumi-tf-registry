// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ResourceManagerControlPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ResourceManagerControlPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceManagerControlPolicyState, opts?: pulumi.CustomResourceOptions): ResourceManagerControlPolicy {
        return new ResourceManagerControlPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/resourceManagerControlPolicy:ResourceManagerControlPolicy';

    /**
     * Returns true if the given object is an instance of ResourceManagerControlPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourceManagerControlPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceManagerControlPolicy.__pulumiType;
    }

    public readonly controlPolicyName!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly effectScope!: pulumi.Output<string>;
    public readonly policyDocument!: pulumi.Output<string>;

    /**
     * Create a ResourceManagerControlPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceManagerControlPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceManagerControlPolicyArgs | ResourceManagerControlPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceManagerControlPolicyState | undefined;
            resourceInputs["controlPolicyName"] = state ? state.controlPolicyName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectScope"] = state ? state.effectScope : undefined;
            resourceInputs["policyDocument"] = state ? state.policyDocument : undefined;
        } else {
            const args = argsOrState as ResourceManagerControlPolicyArgs | undefined;
            if ((!args || args.controlPolicyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'controlPolicyName'");
            }
            if ((!args || args.effectScope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'effectScope'");
            }
            if ((!args || args.policyDocument === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyDocument'");
            }
            resourceInputs["controlPolicyName"] = args ? args.controlPolicyName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["effectScope"] = args ? args.effectScope : undefined;
            resourceInputs["policyDocument"] = args ? args.policyDocument : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourceManagerControlPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ResourceManagerControlPolicy resources.
 */
export interface ResourceManagerControlPolicyState {
    controlPolicyName?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    effectScope?: pulumi.Input<string>;
    policyDocument?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ResourceManagerControlPolicy resource.
 */
export interface ResourceManagerControlPolicyArgs {
    controlPolicyName: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    effectScope: pulumi.Input<string>;
    policyDocument: pulumi.Input<string>;
}
