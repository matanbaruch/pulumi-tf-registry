// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MongodbInstance extends pulumi.CustomResource {
    /**
     * Get an existing MongodbInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MongodbInstanceState, opts?: pulumi.CustomResourceOptions): MongodbInstance {
        return new MongodbInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/mongodbInstance:MongodbInstance';

    /**
     * Returns true if the given object is an instance of MongodbInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MongodbInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MongodbInstance.__pulumiType;
    }

    public readonly accountPassword!: pulumi.Output<string | undefined>;
    public readonly autoRenew!: pulumi.Output<boolean | undefined>;
    public readonly backupInterval!: pulumi.Output<string>;
    public readonly backupPeriods!: pulumi.Output<string[]>;
    public readonly backupRetentionPeriod!: pulumi.Output<number>;
    public readonly backupTime!: pulumi.Output<string>;
    public readonly cloudDiskEncryptionKey!: pulumi.Output<string | undefined>;
    public readonly dbInstanceClass!: pulumi.Output<string>;
    public readonly dbInstanceStorage!: pulumi.Output<number>;
    public readonly effectiveTime!: pulumi.Output<string | undefined>;
    public readonly encrypted!: pulumi.Output<boolean | undefined>;
    public readonly encryptionKey!: pulumi.Output<string>;
    public readonly encryptorName!: pulumi.Output<string>;
    public readonly engineVersion!: pulumi.Output<string>;
    public readonly hiddenZoneId!: pulumi.Output<string | undefined>;
    public readonly instanceChargeType!: pulumi.Output<string>;
    public readonly kmsEncryptedPassword!: pulumi.Output<string | undefined>;
    public readonly kmsEncryptionContext!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly maintainEndTime!: pulumi.Output<string>;
    public readonly maintainStartTime!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkType!: pulumi.Output<string>;
    public readonly orderType!: pulumi.Output<string | undefined>;
    public readonly parameters!: pulumi.Output<outputs.MongodbInstanceParameter[] | undefined>;
    public readonly period!: pulumi.Output<number>;
    public readonly provisionedIops!: pulumi.Output<number | undefined>;
    public readonly readonlyReplicas!: pulumi.Output<number>;
    public /*out*/ readonly replicaSetName!: pulumi.Output<string>;
    public /*out*/ readonly replicaSets!: pulumi.Output<outputs.MongodbInstanceReplicaSet[]>;
    public readonly replicationFactor!: pulumi.Output<number>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public /*out*/ readonly retentionPeriod!: pulumi.Output<number>;
    public readonly roleArn!: pulumi.Output<string>;
    public readonly secondaryZoneId!: pulumi.Output<string | undefined>;
    public readonly securityGroupId!: pulumi.Output<string | undefined>;
    public readonly securityIpLists!: pulumi.Output<string[]>;
    public readonly snapshotBackupType!: pulumi.Output<string>;
    public readonly sslAction!: pulumi.Output<string | undefined>;
    public /*out*/ readonly sslStatus!: pulumi.Output<string>;
    public readonly storageEngine!: pulumi.Output<string>;
    public readonly storageType!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tdeStatus!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.MongodbInstanceTimeouts | undefined>;
    public readonly vpcId!: pulumi.Output<string>;
    public readonly vswitchId!: pulumi.Output<string>;
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a MongodbInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MongodbInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MongodbInstanceArgs | MongodbInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MongodbInstanceState | undefined;
            resourceInputs["accountPassword"] = state ? state.accountPassword : undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["backupInterval"] = state ? state.backupInterval : undefined;
            resourceInputs["backupPeriods"] = state ? state.backupPeriods : undefined;
            resourceInputs["backupRetentionPeriod"] = state ? state.backupRetentionPeriod : undefined;
            resourceInputs["backupTime"] = state ? state.backupTime : undefined;
            resourceInputs["cloudDiskEncryptionKey"] = state ? state.cloudDiskEncryptionKey : undefined;
            resourceInputs["dbInstanceClass"] = state ? state.dbInstanceClass : undefined;
            resourceInputs["dbInstanceStorage"] = state ? state.dbInstanceStorage : undefined;
            resourceInputs["effectiveTime"] = state ? state.effectiveTime : undefined;
            resourceInputs["encrypted"] = state ? state.encrypted : undefined;
            resourceInputs["encryptionKey"] = state ? state.encryptionKey : undefined;
            resourceInputs["encryptorName"] = state ? state.encryptorName : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["hiddenZoneId"] = state ? state.hiddenZoneId : undefined;
            resourceInputs["instanceChargeType"] = state ? state.instanceChargeType : undefined;
            resourceInputs["kmsEncryptedPassword"] = state ? state.kmsEncryptedPassword : undefined;
            resourceInputs["kmsEncryptionContext"] = state ? state.kmsEncryptionContext : undefined;
            resourceInputs["maintainEndTime"] = state ? state.maintainEndTime : undefined;
            resourceInputs["maintainStartTime"] = state ? state.maintainStartTime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkType"] = state ? state.networkType : undefined;
            resourceInputs["orderType"] = state ? state.orderType : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["provisionedIops"] = state ? state.provisionedIops : undefined;
            resourceInputs["readonlyReplicas"] = state ? state.readonlyReplicas : undefined;
            resourceInputs["replicaSetName"] = state ? state.replicaSetName : undefined;
            resourceInputs["replicaSets"] = state ? state.replicaSets : undefined;
            resourceInputs["replicationFactor"] = state ? state.replicationFactor : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["retentionPeriod"] = state ? state.retentionPeriod : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["secondaryZoneId"] = state ? state.secondaryZoneId : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["securityIpLists"] = state ? state.securityIpLists : undefined;
            resourceInputs["snapshotBackupType"] = state ? state.snapshotBackupType : undefined;
            resourceInputs["sslAction"] = state ? state.sslAction : undefined;
            resourceInputs["sslStatus"] = state ? state.sslStatus : undefined;
            resourceInputs["storageEngine"] = state ? state.storageEngine : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tdeStatus"] = state ? state.tdeStatus : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as MongodbInstanceArgs | undefined;
            if ((!args || args.dbInstanceClass === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbInstanceClass'");
            }
            if ((!args || args.dbInstanceStorage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbInstanceStorage'");
            }
            if ((!args || args.engineVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engineVersion'");
            }
            resourceInputs["accountPassword"] = args?.accountPassword ? pulumi.secret(args.accountPassword) : undefined;
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["backupInterval"] = args ? args.backupInterval : undefined;
            resourceInputs["backupPeriods"] = args ? args.backupPeriods : undefined;
            resourceInputs["backupRetentionPeriod"] = args ? args.backupRetentionPeriod : undefined;
            resourceInputs["backupTime"] = args ? args.backupTime : undefined;
            resourceInputs["cloudDiskEncryptionKey"] = args ? args.cloudDiskEncryptionKey : undefined;
            resourceInputs["dbInstanceClass"] = args ? args.dbInstanceClass : undefined;
            resourceInputs["dbInstanceStorage"] = args ? args.dbInstanceStorage : undefined;
            resourceInputs["effectiveTime"] = args ? args.effectiveTime : undefined;
            resourceInputs["encrypted"] = args ? args.encrypted : undefined;
            resourceInputs["encryptionKey"] = args ? args.encryptionKey : undefined;
            resourceInputs["encryptorName"] = args ? args.encryptorName : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["hiddenZoneId"] = args ? args.hiddenZoneId : undefined;
            resourceInputs["instanceChargeType"] = args ? args.instanceChargeType : undefined;
            resourceInputs["kmsEncryptedPassword"] = args ? args.kmsEncryptedPassword : undefined;
            resourceInputs["kmsEncryptionContext"] = args ? args.kmsEncryptionContext : undefined;
            resourceInputs["maintainEndTime"] = args ? args.maintainEndTime : undefined;
            resourceInputs["maintainStartTime"] = args ? args.maintainStartTime : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkType"] = args ? args.networkType : undefined;
            resourceInputs["orderType"] = args ? args.orderType : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["provisionedIops"] = args ? args.provisionedIops : undefined;
            resourceInputs["readonlyReplicas"] = args ? args.readonlyReplicas : undefined;
            resourceInputs["replicationFactor"] = args ? args.replicationFactor : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["secondaryZoneId"] = args ? args.secondaryZoneId : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["securityIpLists"] = args ? args.securityIpLists : undefined;
            resourceInputs["snapshotBackupType"] = args ? args.snapshotBackupType : undefined;
            resourceInputs["sslAction"] = args ? args.sslAction : undefined;
            resourceInputs["storageEngine"] = args ? args.storageEngine : undefined;
            resourceInputs["storageType"] = args ? args.storageType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tdeStatus"] = args ? args.tdeStatus : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["replicaSetName"] = undefined /*out*/;
            resourceInputs["replicaSets"] = undefined /*out*/;
            resourceInputs["retentionPeriod"] = undefined /*out*/;
            resourceInputs["sslStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accountPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MongodbInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MongodbInstance resources.
 */
export interface MongodbInstanceState {
    accountPassword?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<boolean>;
    backupInterval?: pulumi.Input<string>;
    backupPeriods?: pulumi.Input<pulumi.Input<string>[]>;
    backupRetentionPeriod?: pulumi.Input<number>;
    backupTime?: pulumi.Input<string>;
    cloudDiskEncryptionKey?: pulumi.Input<string>;
    dbInstanceClass?: pulumi.Input<string>;
    dbInstanceStorage?: pulumi.Input<number>;
    effectiveTime?: pulumi.Input<string>;
    encrypted?: pulumi.Input<boolean>;
    encryptionKey?: pulumi.Input<string>;
    encryptorName?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    hiddenZoneId?: pulumi.Input<string>;
    instanceChargeType?: pulumi.Input<string>;
    kmsEncryptedPassword?: pulumi.Input<string>;
    kmsEncryptionContext?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    maintainEndTime?: pulumi.Input<string>;
    maintainStartTime?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkType?: pulumi.Input<string>;
    orderType?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.MongodbInstanceParameter>[]>;
    period?: pulumi.Input<number>;
    provisionedIops?: pulumi.Input<number>;
    readonlyReplicas?: pulumi.Input<number>;
    replicaSetName?: pulumi.Input<string>;
    replicaSets?: pulumi.Input<pulumi.Input<inputs.MongodbInstanceReplicaSet>[]>;
    replicationFactor?: pulumi.Input<number>;
    resourceGroupId?: pulumi.Input<string>;
    retentionPeriod?: pulumi.Input<number>;
    roleArn?: pulumi.Input<string>;
    secondaryZoneId?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    securityIpLists?: pulumi.Input<pulumi.Input<string>[]>;
    snapshotBackupType?: pulumi.Input<string>;
    sslAction?: pulumi.Input<string>;
    sslStatus?: pulumi.Input<string>;
    storageEngine?: pulumi.Input<string>;
    storageType?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tdeStatus?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MongodbInstanceTimeouts>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MongodbInstance resource.
 */
export interface MongodbInstanceArgs {
    accountPassword?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<boolean>;
    backupInterval?: pulumi.Input<string>;
    backupPeriods?: pulumi.Input<pulumi.Input<string>[]>;
    backupRetentionPeriod?: pulumi.Input<number>;
    backupTime?: pulumi.Input<string>;
    cloudDiskEncryptionKey?: pulumi.Input<string>;
    dbInstanceClass: pulumi.Input<string>;
    dbInstanceStorage: pulumi.Input<number>;
    effectiveTime?: pulumi.Input<string>;
    encrypted?: pulumi.Input<boolean>;
    encryptionKey?: pulumi.Input<string>;
    encryptorName?: pulumi.Input<string>;
    engineVersion: pulumi.Input<string>;
    hiddenZoneId?: pulumi.Input<string>;
    instanceChargeType?: pulumi.Input<string>;
    kmsEncryptedPassword?: pulumi.Input<string>;
    kmsEncryptionContext?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    maintainEndTime?: pulumi.Input<string>;
    maintainStartTime?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkType?: pulumi.Input<string>;
    orderType?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.MongodbInstanceParameter>[]>;
    period?: pulumi.Input<number>;
    provisionedIops?: pulumi.Input<number>;
    readonlyReplicas?: pulumi.Input<number>;
    replicationFactor?: pulumi.Input<number>;
    resourceGroupId?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    secondaryZoneId?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    securityIpLists?: pulumi.Input<pulumi.Input<string>[]>;
    snapshotBackupType?: pulumi.Input<string>;
    sslAction?: pulumi.Input<string>;
    storageEngine?: pulumi.Input<string>;
    storageType?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tdeStatus?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MongodbInstanceTimeouts>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}
