// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEcdDesktopTypes(args?: GetEcdDesktopTypesArgs, opts?: pulumi.InvokeOptions): Promise<GetEcdDesktopTypesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("alicloud:index/getEcdDesktopTypes:getEcdDesktopTypes", {
        "cpuCount": args.cpuCount,
        "gpuCount": args.gpuCount,
        "id": args.id,
        "ids": args.ids,
        "instanceTypeFamily": args.instanceTypeFamily,
        "memorySize": args.memorySize,
        "outputFile": args.outputFile,
        "status": args.status,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEcdDesktopTypes.
 */
export interface GetEcdDesktopTypesArgs {
    cpuCount?: number;
    gpuCount?: number;
    id?: string;
    ids?: string[];
    instanceTypeFamily?: string;
    memorySize?: number;
    outputFile?: string;
    status?: string;
}

/**
 * A collection of values returned by getEcdDesktopTypes.
 */
export interface GetEcdDesktopTypesResult {
    readonly cpuCount?: number;
    readonly gpuCount?: number;
    readonly id: string;
    readonly ids: string[];
    readonly instanceTypeFamily?: string;
    readonly memorySize?: number;
    readonly outputFile?: string;
    readonly status?: string;
    readonly types: outputs.GetEcdDesktopTypesType[];
}
export function getEcdDesktopTypesOutput(args?: GetEcdDesktopTypesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEcdDesktopTypesResult> {
    return pulumi.output(args).apply((a: any) => getEcdDesktopTypes(a, opts))
}

/**
 * A collection of arguments for invoking getEcdDesktopTypes.
 */
export interface GetEcdDesktopTypesOutputArgs {
    cpuCount?: pulumi.Input<number>;
    gpuCount?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    instanceTypeFamily?: pulumi.Input<string>;
    memorySize?: pulumi.Input<number>;
    outputFile?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}
