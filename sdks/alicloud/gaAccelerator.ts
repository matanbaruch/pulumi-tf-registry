// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GaAccelerator extends pulumi.CustomResource {
    /**
     * Get an existing GaAccelerator resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GaAcceleratorState, opts?: pulumi.CustomResourceOptions): GaAccelerator {
        return new GaAccelerator(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/gaAccelerator:GaAccelerator';

    /**
     * Returns true if the given object is an instance of GaAccelerator.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GaAccelerator {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GaAccelerator.__pulumiType;
    }

    public readonly acceleratorName!: pulumi.Output<string | undefined>;
    public readonly autoRenewDuration!: pulumi.Output<number>;
    public readonly autoUseCoupon!: pulumi.Output<boolean | undefined>;
    public readonly bandwidthBillingType!: pulumi.Output<string>;
    public readonly crossBorderMode!: pulumi.Output<string>;
    public readonly crossBorderStatus!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly duration!: pulumi.Output<number | undefined>;
    public readonly paymentType!: pulumi.Output<string>;
    public readonly pricingCycle!: pulumi.Output<string | undefined>;
    public readonly promotionOptionNo!: pulumi.Output<string | undefined>;
    public readonly renewalStatus!: pulumi.Output<string>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly spec!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.GaAcceleratorTimeouts | undefined>;

    /**
     * Create a GaAccelerator resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GaAcceleratorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GaAcceleratorArgs | GaAcceleratorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GaAcceleratorState | undefined;
            resourceInputs["acceleratorName"] = state ? state.acceleratorName : undefined;
            resourceInputs["autoRenewDuration"] = state ? state.autoRenewDuration : undefined;
            resourceInputs["autoUseCoupon"] = state ? state.autoUseCoupon : undefined;
            resourceInputs["bandwidthBillingType"] = state ? state.bandwidthBillingType : undefined;
            resourceInputs["crossBorderMode"] = state ? state.crossBorderMode : undefined;
            resourceInputs["crossBorderStatus"] = state ? state.crossBorderStatus : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["duration"] = state ? state.duration : undefined;
            resourceInputs["paymentType"] = state ? state.paymentType : undefined;
            resourceInputs["pricingCycle"] = state ? state.pricingCycle : undefined;
            resourceInputs["promotionOptionNo"] = state ? state.promotionOptionNo : undefined;
            resourceInputs["renewalStatus"] = state ? state.renewalStatus : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["spec"] = state ? state.spec : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as GaAcceleratorArgs | undefined;
            resourceInputs["acceleratorName"] = args ? args.acceleratorName : undefined;
            resourceInputs["autoRenewDuration"] = args ? args.autoRenewDuration : undefined;
            resourceInputs["autoUseCoupon"] = args ? args.autoUseCoupon : undefined;
            resourceInputs["bandwidthBillingType"] = args ? args.bandwidthBillingType : undefined;
            resourceInputs["crossBorderMode"] = args ? args.crossBorderMode : undefined;
            resourceInputs["crossBorderStatus"] = args ? args.crossBorderStatus : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["duration"] = args ? args.duration : undefined;
            resourceInputs["paymentType"] = args ? args.paymentType : undefined;
            resourceInputs["pricingCycle"] = args ? args.pricingCycle : undefined;
            resourceInputs["promotionOptionNo"] = args ? args.promotionOptionNo : undefined;
            resourceInputs["renewalStatus"] = args ? args.renewalStatus : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GaAccelerator.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GaAccelerator resources.
 */
export interface GaAcceleratorState {
    acceleratorName?: pulumi.Input<string>;
    autoRenewDuration?: pulumi.Input<number>;
    autoUseCoupon?: pulumi.Input<boolean>;
    bandwidthBillingType?: pulumi.Input<string>;
    crossBorderMode?: pulumi.Input<string>;
    crossBorderStatus?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    duration?: pulumi.Input<number>;
    paymentType?: pulumi.Input<string>;
    pricingCycle?: pulumi.Input<string>;
    promotionOptionNo?: pulumi.Input<string>;
    renewalStatus?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    spec?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.GaAcceleratorTimeouts>;
}

/**
 * The set of arguments for constructing a GaAccelerator resource.
 */
export interface GaAcceleratorArgs {
    acceleratorName?: pulumi.Input<string>;
    autoRenewDuration?: pulumi.Input<number>;
    autoUseCoupon?: pulumi.Input<boolean>;
    bandwidthBillingType?: pulumi.Input<string>;
    crossBorderMode?: pulumi.Input<string>;
    crossBorderStatus?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    duration?: pulumi.Input<number>;
    paymentType?: pulumi.Input<string>;
    pricingCycle?: pulumi.Input<string>;
    promotionOptionNo?: pulumi.Input<string>;
    renewalStatus?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    spec?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.GaAcceleratorTimeouts>;
}
