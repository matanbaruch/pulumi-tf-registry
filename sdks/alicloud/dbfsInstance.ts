// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DbfsInstance extends pulumi.CustomResource {
    /**
     * Get an existing DbfsInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DbfsInstanceState, opts?: pulumi.CustomResourceOptions): DbfsInstance {
        return new DbfsInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/dbfsInstance:DbfsInstance';

    /**
     * Returns true if the given object is an instance of DbfsInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DbfsInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DbfsInstance.__pulumiType;
    }

    public readonly advancedFeatures!: pulumi.Output<string>;
    public readonly category!: pulumi.Output<string>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly deleteSnapshot!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly ecsLists!: pulumi.Output<outputs.DbfsInstanceEcsList[] | undefined>;
    public readonly enableRaid!: pulumi.Output<boolean | undefined>;
    public readonly encryption!: pulumi.Output<boolean | undefined>;
    public readonly fsName!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly instanceName!: pulumi.Output<string>;
    public readonly instanceType!: pulumi.Output<string | undefined>;
    public readonly kmsKeyId!: pulumi.Output<string | undefined>;
    public readonly performanceLevel!: pulumi.Output<string>;
    public readonly raidStripeUnitNumber!: pulumi.Output<number | undefined>;
    public readonly size!: pulumi.Output<number>;
    public readonly snapshotId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.DbfsInstanceTimeouts | undefined>;
    public readonly usedScene!: pulumi.Output<string | undefined>;
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a DbfsInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DbfsInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DbfsInstanceArgs | DbfsInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DbfsInstanceState | undefined;
            resourceInputs["advancedFeatures"] = state ? state.advancedFeatures : undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["deleteSnapshot"] = state ? state.deleteSnapshot : undefined;
            resourceInputs["ecsLists"] = state ? state.ecsLists : undefined;
            resourceInputs["enableRaid"] = state ? state.enableRaid : undefined;
            resourceInputs["encryption"] = state ? state.encryption : undefined;
            resourceInputs["fsName"] = state ? state.fsName : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["performanceLevel"] = state ? state.performanceLevel : undefined;
            resourceInputs["raidStripeUnitNumber"] = state ? state.raidStripeUnitNumber : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["usedScene"] = state ? state.usedScene : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as DbfsInstanceArgs | undefined;
            if ((!args || args.category === undefined) && !opts.urn) {
                throw new Error("Missing required property 'category'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["advancedFeatures"] = args ? args.advancedFeatures : undefined;
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["deleteSnapshot"] = args ? args.deleteSnapshot : undefined;
            resourceInputs["ecsLists"] = args ? args.ecsLists : undefined;
            resourceInputs["enableRaid"] = args ? args.enableRaid : undefined;
            resourceInputs["encryption"] = args ? args.encryption : undefined;
            resourceInputs["fsName"] = args ? args.fsName : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["performanceLevel"] = args ? args.performanceLevel : undefined;
            resourceInputs["raidStripeUnitNumber"] = args ? args.raidStripeUnitNumber : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["usedScene"] = args ? args.usedScene : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DbfsInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DbfsInstance resources.
 */
export interface DbfsInstanceState {
    advancedFeatures?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deleteSnapshot?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    ecsLists?: pulumi.Input<pulumi.Input<inputs.DbfsInstanceEcsList>[]>;
    enableRaid?: pulumi.Input<boolean>;
    encryption?: pulumi.Input<boolean>;
    fsName?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    instanceName?: pulumi.Input<string>;
    instanceType?: pulumi.Input<string>;
    kmsKeyId?: pulumi.Input<string>;
    performanceLevel?: pulumi.Input<string>;
    raidStripeUnitNumber?: pulumi.Input<number>;
    size?: pulumi.Input<number>;
    snapshotId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.DbfsInstanceTimeouts>;
    usedScene?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DbfsInstance resource.
 */
export interface DbfsInstanceArgs {
    advancedFeatures?: pulumi.Input<string>;
    category: pulumi.Input<string>;
    deleteSnapshot?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    ecsLists?: pulumi.Input<pulumi.Input<inputs.DbfsInstanceEcsList>[]>;
    enableRaid?: pulumi.Input<boolean>;
    encryption?: pulumi.Input<boolean>;
    fsName?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    instanceName?: pulumi.Input<string>;
    instanceType?: pulumi.Input<string>;
    kmsKeyId?: pulumi.Input<string>;
    performanceLevel?: pulumi.Input<string>;
    raidStripeUnitNumber?: pulumi.Input<number>;
    size: pulumi.Input<number>;
    snapshotId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.DbfsInstanceTimeouts>;
    usedScene?: pulumi.Input<string>;
    zoneId: pulumi.Input<string>;
}
