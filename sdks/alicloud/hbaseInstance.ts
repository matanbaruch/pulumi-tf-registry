// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HbaseInstance extends pulumi.CustomResource {
    /**
     * Get an existing HbaseInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HbaseInstanceState, opts?: pulumi.CustomResourceOptions): HbaseInstance {
        return new HbaseInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/hbaseInstance:HbaseInstance';

    /**
     * Returns true if the given object is an instance of HbaseInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HbaseInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HbaseInstance.__pulumiType;
    }

    public readonly account!: pulumi.Output<string | undefined>;
    public readonly autoRenew!: pulumi.Output<boolean>;
    public readonly coldStorageSize!: pulumi.Output<number | undefined>;
    public readonly coreDiskSize!: pulumi.Output<number | undefined>;
    public readonly coreDiskType!: pulumi.Output<string | undefined>;
    public readonly coreInstanceQuantity!: pulumi.Output<number | undefined>;
    public readonly coreInstanceType!: pulumi.Output<string>;
    public readonly deletionProtection!: pulumi.Output<boolean | undefined>;
    public readonly duration!: pulumi.Output<number>;
    public readonly engine!: pulumi.Output<string | undefined>;
    public readonly engineVersion!: pulumi.Output<string>;
    public readonly immediateDeleteFlag!: pulumi.Output<boolean | undefined>;
    public readonly ipWhite!: pulumi.Output<string>;
    public readonly maintainEndTime!: pulumi.Output<string>;
    public readonly maintainStartTime!: pulumi.Output<string>;
    public /*out*/ readonly masterInstanceQuantity!: pulumi.Output<number>;
    public readonly masterInstanceType!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly payType!: pulumi.Output<string | undefined>;
    public readonly securityGroups!: pulumi.Output<string[]>;
    public /*out*/ readonly slbConnAddrs!: pulumi.Output<outputs.HbaseInstanceSlbConnAddr[]>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.HbaseInstanceTimeouts | undefined>;
    public /*out*/ readonly uiProxyConnAddrs!: pulumi.Output<outputs.HbaseInstanceUiProxyConnAddr[]>;
    public readonly vpcId!: pulumi.Output<string | undefined>;
    public readonly vswitchId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly zkConnAddrs!: pulumi.Output<outputs.HbaseInstanceZkConnAddr[]>;
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a HbaseInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HbaseInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HbaseInstanceArgs | HbaseInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HbaseInstanceState | undefined;
            resourceInputs["account"] = state ? state.account : undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["coldStorageSize"] = state ? state.coldStorageSize : undefined;
            resourceInputs["coreDiskSize"] = state ? state.coreDiskSize : undefined;
            resourceInputs["coreDiskType"] = state ? state.coreDiskType : undefined;
            resourceInputs["coreInstanceQuantity"] = state ? state.coreInstanceQuantity : undefined;
            resourceInputs["coreInstanceType"] = state ? state.coreInstanceType : undefined;
            resourceInputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            resourceInputs["duration"] = state ? state.duration : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["immediateDeleteFlag"] = state ? state.immediateDeleteFlag : undefined;
            resourceInputs["ipWhite"] = state ? state.ipWhite : undefined;
            resourceInputs["maintainEndTime"] = state ? state.maintainEndTime : undefined;
            resourceInputs["maintainStartTime"] = state ? state.maintainStartTime : undefined;
            resourceInputs["masterInstanceQuantity"] = state ? state.masterInstanceQuantity : undefined;
            resourceInputs["masterInstanceType"] = state ? state.masterInstanceType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["payType"] = state ? state.payType : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["slbConnAddrs"] = state ? state.slbConnAddrs : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["uiProxyConnAddrs"] = state ? state.uiProxyConnAddrs : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
            resourceInputs["zkConnAddrs"] = state ? state.zkConnAddrs : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as HbaseInstanceArgs | undefined;
            if ((!args || args.coreInstanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'coreInstanceType'");
            }
            if ((!args || args.engineVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engineVersion'");
            }
            if ((!args || args.masterInstanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'masterInstanceType'");
            }
            resourceInputs["account"] = args ? args.account : undefined;
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["coldStorageSize"] = args ? args.coldStorageSize : undefined;
            resourceInputs["coreDiskSize"] = args ? args.coreDiskSize : undefined;
            resourceInputs["coreDiskType"] = args ? args.coreDiskType : undefined;
            resourceInputs["coreInstanceQuantity"] = args ? args.coreInstanceQuantity : undefined;
            resourceInputs["coreInstanceType"] = args ? args.coreInstanceType : undefined;
            resourceInputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            resourceInputs["duration"] = args ? args.duration : undefined;
            resourceInputs["engine"] = args ? args.engine : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["immediateDeleteFlag"] = args ? args.immediateDeleteFlag : undefined;
            resourceInputs["ipWhite"] = args ? args.ipWhite : undefined;
            resourceInputs["maintainEndTime"] = args ? args.maintainEndTime : undefined;
            resourceInputs["maintainStartTime"] = args ? args.maintainStartTime : undefined;
            resourceInputs["masterInstanceType"] = args ? args.masterInstanceType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["payType"] = args ? args.payType : undefined;
            resourceInputs["securityGroups"] = args ? args.securityGroups : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["masterInstanceQuantity"] = undefined /*out*/;
            resourceInputs["slbConnAddrs"] = undefined /*out*/;
            resourceInputs["uiProxyConnAddrs"] = undefined /*out*/;
            resourceInputs["zkConnAddrs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(HbaseInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HbaseInstance resources.
 */
export interface HbaseInstanceState {
    account?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<boolean>;
    coldStorageSize?: pulumi.Input<number>;
    coreDiskSize?: pulumi.Input<number>;
    coreDiskType?: pulumi.Input<string>;
    coreInstanceQuantity?: pulumi.Input<number>;
    coreInstanceType?: pulumi.Input<string>;
    deletionProtection?: pulumi.Input<boolean>;
    duration?: pulumi.Input<number>;
    engine?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    immediateDeleteFlag?: pulumi.Input<boolean>;
    ipWhite?: pulumi.Input<string>;
    maintainEndTime?: pulumi.Input<string>;
    maintainStartTime?: pulumi.Input<string>;
    masterInstanceQuantity?: pulumi.Input<number>;
    masterInstanceType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    payType?: pulumi.Input<string>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    slbConnAddrs?: pulumi.Input<pulumi.Input<inputs.HbaseInstanceSlbConnAddr>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.HbaseInstanceTimeouts>;
    uiProxyConnAddrs?: pulumi.Input<pulumi.Input<inputs.HbaseInstanceUiProxyConnAddr>[]>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
    zkConnAddrs?: pulumi.Input<pulumi.Input<inputs.HbaseInstanceZkConnAddr>[]>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HbaseInstance resource.
 */
export interface HbaseInstanceArgs {
    account?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<boolean>;
    coldStorageSize?: pulumi.Input<number>;
    coreDiskSize?: pulumi.Input<number>;
    coreDiskType?: pulumi.Input<string>;
    coreInstanceQuantity?: pulumi.Input<number>;
    coreInstanceType: pulumi.Input<string>;
    deletionProtection?: pulumi.Input<boolean>;
    duration?: pulumi.Input<number>;
    engine?: pulumi.Input<string>;
    engineVersion: pulumi.Input<string>;
    immediateDeleteFlag?: pulumi.Input<boolean>;
    ipWhite?: pulumi.Input<string>;
    maintainEndTime?: pulumi.Input<string>;
    maintainStartTime?: pulumi.Input<string>;
    masterInstanceType: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    payType?: pulumi.Input<string>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.HbaseInstanceTimeouts>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}
