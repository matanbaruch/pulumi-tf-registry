// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class OosSecretParameter extends pulumi.CustomResource {
    /**
     * Get an existing OosSecretParameter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OosSecretParameterState, opts?: pulumi.CustomResourceOptions): OosSecretParameter {
        return new OosSecretParameter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/oosSecretParameter:OosSecretParameter';

    /**
     * Returns true if the given object is an instance of OosSecretParameter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OosSecretParameter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OosSecretParameter.__pulumiType;
    }

    public readonly constraints!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly keyId!: pulumi.Output<string | undefined>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly secretParameterName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly value!: pulumi.Output<string>;

    /**
     * Create a OosSecretParameter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OosSecretParameterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OosSecretParameterArgs | OosSecretParameterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OosSecretParameterState | undefined;
            resourceInputs["constraints"] = state ? state.constraints : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["secretParameterName"] = state ? state.secretParameterName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as OosSecretParameterArgs | undefined;
            if ((!args || args.secretParameterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretParameterName'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["constraints"] = args ? args.constraints : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["keyId"] = args ? args.keyId : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["secretParameterName"] = args ? args.secretParameterName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["value"] = args?.value ? pulumi.secret(args.value) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["value"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(OosSecretParameter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OosSecretParameter resources.
 */
export interface OosSecretParameterState {
    constraints?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    keyId?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    secretParameterName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OosSecretParameter resource.
 */
export interface OosSecretParameterArgs {
    constraints?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    keyId?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    secretParameterName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}
