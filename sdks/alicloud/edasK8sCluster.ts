// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EdasK8sCluster extends pulumi.CustomResource {
    /**
     * Get an existing EdasK8sCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EdasK8sClusterState, opts?: pulumi.CustomResourceOptions): EdasK8sCluster {
        return new EdasK8sCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/edasK8sCluster:EdasK8sCluster';

    /**
     * Returns true if the given object is an instance of EdasK8sCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EdasK8sCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EdasK8sCluster.__pulumiType;
    }

    public /*out*/ readonly clusterImportStatus!: pulumi.Output<number>;
    public /*out*/ readonly clusterName!: pulumi.Output<string>;
    public /*out*/ readonly clusterType!: pulumi.Output<number>;
    public readonly csClusterId!: pulumi.Output<string>;
    public readonly namespaceId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly networkMode!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.EdasK8sClusterTimeouts | undefined>;
    public /*out*/ readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a EdasK8sCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EdasK8sClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EdasK8sClusterArgs | EdasK8sClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EdasK8sClusterState | undefined;
            resourceInputs["clusterImportStatus"] = state ? state.clusterImportStatus : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["clusterType"] = state ? state.clusterType : undefined;
            resourceInputs["csClusterId"] = state ? state.csClusterId : undefined;
            resourceInputs["namespaceId"] = state ? state.namespaceId : undefined;
            resourceInputs["networkMode"] = state ? state.networkMode : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as EdasK8sClusterArgs | undefined;
            if ((!args || args.csClusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'csClusterId'");
            }
            resourceInputs["csClusterId"] = args ? args.csClusterId : undefined;
            resourceInputs["namespaceId"] = args ? args.namespaceId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["clusterImportStatus"] = undefined /*out*/;
            resourceInputs["clusterName"] = undefined /*out*/;
            resourceInputs["clusterType"] = undefined /*out*/;
            resourceInputs["networkMode"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EdasK8sCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EdasK8sCluster resources.
 */
export interface EdasK8sClusterState {
    clusterImportStatus?: pulumi.Input<number>;
    clusterName?: pulumi.Input<string>;
    clusterType?: pulumi.Input<number>;
    csClusterId?: pulumi.Input<string>;
    namespaceId?: pulumi.Input<string>;
    networkMode?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.EdasK8sClusterTimeouts>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EdasK8sCluster resource.
 */
export interface EdasK8sClusterArgs {
    csClusterId: pulumi.Input<string>;
    namespaceId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EdasK8sClusterTimeouts>;
}
