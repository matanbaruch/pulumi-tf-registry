// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ClickHouseDbCluster extends pulumi.CustomResource {
    /**
     * Get an existing ClickHouseDbCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClickHouseDbClusterState, opts?: pulumi.CustomResourceOptions): ClickHouseDbCluster {
        return new ClickHouseDbCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/clickHouseDbCluster:ClickHouseDbCluster';

    /**
     * Returns true if the given object is an instance of ClickHouseDbCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClickHouseDbCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClickHouseDbCluster.__pulumiType;
    }

    public readonly category!: pulumi.Output<string>;
    public /*out*/ readonly connectionString!: pulumi.Output<string>;
    public readonly dbClusterAccessWhiteLists!: pulumi.Output<outputs.ClickHouseDbClusterDbClusterAccessWhiteList[] | undefined>;
    public readonly dbClusterClass!: pulumi.Output<string>;
    public readonly dbClusterDescription!: pulumi.Output<string>;
    public readonly dbClusterNetworkType!: pulumi.Output<string>;
    public readonly dbClusterVersion!: pulumi.Output<string>;
    public readonly dbNodeGroupCount!: pulumi.Output<number>;
    public readonly dbNodeStorage!: pulumi.Output<string>;
    public readonly encryptionKey!: pulumi.Output<string | undefined>;
    public readonly encryptionType!: pulumi.Output<string | undefined>;
    public readonly maintainTime!: pulumi.Output<string>;
    public readonly multiZoneVswitchLists!: pulumi.Output<outputs.ClickHouseDbClusterMultiZoneVswitchList[] | undefined>;
    public readonly paymentType!: pulumi.Output<string>;
    public readonly period!: pulumi.Output<string | undefined>;
    public /*out*/ readonly port!: pulumi.Output<string>;
    public readonly renewalStatus!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly storageType!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ClickHouseDbClusterTimeouts | undefined>;
    public readonly usedTime!: pulumi.Output<string | undefined>;
    public readonly vpcId!: pulumi.Output<string>;
    public readonly vswitchId!: pulumi.Output<string | undefined>;
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a ClickHouseDbCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClickHouseDbClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClickHouseDbClusterArgs | ClickHouseDbClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClickHouseDbClusterState | undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["connectionString"] = state ? state.connectionString : undefined;
            resourceInputs["dbClusterAccessWhiteLists"] = state ? state.dbClusterAccessWhiteLists : undefined;
            resourceInputs["dbClusterClass"] = state ? state.dbClusterClass : undefined;
            resourceInputs["dbClusterDescription"] = state ? state.dbClusterDescription : undefined;
            resourceInputs["dbClusterNetworkType"] = state ? state.dbClusterNetworkType : undefined;
            resourceInputs["dbClusterVersion"] = state ? state.dbClusterVersion : undefined;
            resourceInputs["dbNodeGroupCount"] = state ? state.dbNodeGroupCount : undefined;
            resourceInputs["dbNodeStorage"] = state ? state.dbNodeStorage : undefined;
            resourceInputs["encryptionKey"] = state ? state.encryptionKey : undefined;
            resourceInputs["encryptionType"] = state ? state.encryptionType : undefined;
            resourceInputs["maintainTime"] = state ? state.maintainTime : undefined;
            resourceInputs["multiZoneVswitchLists"] = state ? state.multiZoneVswitchLists : undefined;
            resourceInputs["paymentType"] = state ? state.paymentType : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["renewalStatus"] = state ? state.renewalStatus : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["usedTime"] = state ? state.usedTime : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as ClickHouseDbClusterArgs | undefined;
            if ((!args || args.category === undefined) && !opts.urn) {
                throw new Error("Missing required property 'category'");
            }
            if ((!args || args.dbClusterClass === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbClusterClass'");
            }
            if ((!args || args.dbClusterNetworkType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbClusterNetworkType'");
            }
            if ((!args || args.dbClusterVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbClusterVersion'");
            }
            if ((!args || args.dbNodeGroupCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbNodeGroupCount'");
            }
            if ((!args || args.dbNodeStorage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbNodeStorage'");
            }
            if ((!args || args.paymentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'paymentType'");
            }
            if ((!args || args.storageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageType'");
            }
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["dbClusterAccessWhiteLists"] = args ? args.dbClusterAccessWhiteLists : undefined;
            resourceInputs["dbClusterClass"] = args ? args.dbClusterClass : undefined;
            resourceInputs["dbClusterDescription"] = args ? args.dbClusterDescription : undefined;
            resourceInputs["dbClusterNetworkType"] = args ? args.dbClusterNetworkType : undefined;
            resourceInputs["dbClusterVersion"] = args ? args.dbClusterVersion : undefined;
            resourceInputs["dbNodeGroupCount"] = args ? args.dbNodeGroupCount : undefined;
            resourceInputs["dbNodeStorage"] = args ? args.dbNodeStorage : undefined;
            resourceInputs["encryptionKey"] = args ? args.encryptionKey : undefined;
            resourceInputs["encryptionType"] = args ? args.encryptionType : undefined;
            resourceInputs["maintainTime"] = args ? args.maintainTime : undefined;
            resourceInputs["multiZoneVswitchLists"] = args ? args.multiZoneVswitchLists : undefined;
            resourceInputs["paymentType"] = args ? args.paymentType : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["renewalStatus"] = args ? args.renewalStatus : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["storageType"] = args ? args.storageType : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["usedTime"] = args ? args.usedTime : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["connectionString"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClickHouseDbCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ClickHouseDbCluster resources.
 */
export interface ClickHouseDbClusterState {
    category?: pulumi.Input<string>;
    connectionString?: pulumi.Input<string>;
    dbClusterAccessWhiteLists?: pulumi.Input<pulumi.Input<inputs.ClickHouseDbClusterDbClusterAccessWhiteList>[]>;
    dbClusterClass?: pulumi.Input<string>;
    dbClusterDescription?: pulumi.Input<string>;
    dbClusterNetworkType?: pulumi.Input<string>;
    dbClusterVersion?: pulumi.Input<string>;
    dbNodeGroupCount?: pulumi.Input<number>;
    dbNodeStorage?: pulumi.Input<string>;
    encryptionKey?: pulumi.Input<string>;
    encryptionType?: pulumi.Input<string>;
    maintainTime?: pulumi.Input<string>;
    multiZoneVswitchLists?: pulumi.Input<pulumi.Input<inputs.ClickHouseDbClusterMultiZoneVswitchList>[]>;
    paymentType?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    renewalStatus?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    storageType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ClickHouseDbClusterTimeouts>;
    usedTime?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ClickHouseDbCluster resource.
 */
export interface ClickHouseDbClusterArgs {
    category: pulumi.Input<string>;
    dbClusterAccessWhiteLists?: pulumi.Input<pulumi.Input<inputs.ClickHouseDbClusterDbClusterAccessWhiteList>[]>;
    dbClusterClass: pulumi.Input<string>;
    dbClusterDescription?: pulumi.Input<string>;
    dbClusterNetworkType: pulumi.Input<string>;
    dbClusterVersion: pulumi.Input<string>;
    dbNodeGroupCount: pulumi.Input<number>;
    dbNodeStorage: pulumi.Input<string>;
    encryptionKey?: pulumi.Input<string>;
    encryptionType?: pulumi.Input<string>;
    maintainTime?: pulumi.Input<string>;
    multiZoneVswitchLists?: pulumi.Input<pulumi.Input<inputs.ClickHouseDbClusterMultiZoneVswitchList>[]>;
    paymentType: pulumi.Input<string>;
    period?: pulumi.Input<string>;
    renewalStatus?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    storageType: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ClickHouseDbClusterTimeouts>;
    usedTime?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}
