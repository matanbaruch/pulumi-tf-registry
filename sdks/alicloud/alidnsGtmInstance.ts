// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AlidnsGtmInstance extends pulumi.CustomResource {
    /**
     * Get an existing AlidnsGtmInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlidnsGtmInstanceState, opts?: pulumi.CustomResourceOptions): AlidnsGtmInstance {
        return new AlidnsGtmInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/alidnsGtmInstance:AlidnsGtmInstance';

    /**
     * Returns true if the given object is an instance of AlidnsGtmInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlidnsGtmInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlidnsGtmInstance.__pulumiType;
    }

    public readonly alertConfigs!: pulumi.Output<outputs.AlidnsGtmInstanceAlertConfig[] | undefined>;
    public readonly alertGroups!: pulumi.Output<string[] | undefined>;
    public readonly cnameType!: pulumi.Output<string>;
    public readonly forceUpdate!: pulumi.Output<boolean | undefined>;
    public readonly healthCheckTaskCount!: pulumi.Output<number>;
    public readonly instanceName!: pulumi.Output<string>;
    public readonly lang!: pulumi.Output<string | undefined>;
    public readonly packageEdition!: pulumi.Output<string>;
    public readonly paymentType!: pulumi.Output<string>;
    public readonly period!: pulumi.Output<number>;
    public readonly publicCnameMode!: pulumi.Output<string>;
    public readonly publicRr!: pulumi.Output<string>;
    public readonly publicUserDomainName!: pulumi.Output<string>;
    public readonly publicZoneName!: pulumi.Output<string>;
    public readonly renewPeriod!: pulumi.Output<number | undefined>;
    public readonly renewalStatus!: pulumi.Output<string>;
    public readonly resourceGroupId!: pulumi.Output<string | undefined>;
    public readonly smsNotificationCount!: pulumi.Output<number>;
    public readonly strategyMode!: pulumi.Output<string>;
    public readonly ttl!: pulumi.Output<number | undefined>;

    /**
     * Create a AlidnsGtmInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlidnsGtmInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlidnsGtmInstanceArgs | AlidnsGtmInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlidnsGtmInstanceState | undefined;
            resourceInputs["alertConfigs"] = state ? state.alertConfigs : undefined;
            resourceInputs["alertGroups"] = state ? state.alertGroups : undefined;
            resourceInputs["cnameType"] = state ? state.cnameType : undefined;
            resourceInputs["forceUpdate"] = state ? state.forceUpdate : undefined;
            resourceInputs["healthCheckTaskCount"] = state ? state.healthCheckTaskCount : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["lang"] = state ? state.lang : undefined;
            resourceInputs["packageEdition"] = state ? state.packageEdition : undefined;
            resourceInputs["paymentType"] = state ? state.paymentType : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["publicCnameMode"] = state ? state.publicCnameMode : undefined;
            resourceInputs["publicRr"] = state ? state.publicRr : undefined;
            resourceInputs["publicUserDomainName"] = state ? state.publicUserDomainName : undefined;
            resourceInputs["publicZoneName"] = state ? state.publicZoneName : undefined;
            resourceInputs["renewPeriod"] = state ? state.renewPeriod : undefined;
            resourceInputs["renewalStatus"] = state ? state.renewalStatus : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["smsNotificationCount"] = state ? state.smsNotificationCount : undefined;
            resourceInputs["strategyMode"] = state ? state.strategyMode : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
        } else {
            const args = argsOrState as AlidnsGtmInstanceArgs | undefined;
            if ((!args || args.healthCheckTaskCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'healthCheckTaskCount'");
            }
            if ((!args || args.instanceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceName'");
            }
            if ((!args || args.packageEdition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'packageEdition'");
            }
            if ((!args || args.paymentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'paymentType'");
            }
            if ((!args || args.period === undefined) && !opts.urn) {
                throw new Error("Missing required property 'period'");
            }
            if ((!args || args.smsNotificationCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'smsNotificationCount'");
            }
            resourceInputs["alertConfigs"] = args ? args.alertConfigs : undefined;
            resourceInputs["alertGroups"] = args ? args.alertGroups : undefined;
            resourceInputs["cnameType"] = args ? args.cnameType : undefined;
            resourceInputs["forceUpdate"] = args ? args.forceUpdate : undefined;
            resourceInputs["healthCheckTaskCount"] = args ? args.healthCheckTaskCount : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["lang"] = args ? args.lang : undefined;
            resourceInputs["packageEdition"] = args ? args.packageEdition : undefined;
            resourceInputs["paymentType"] = args ? args.paymentType : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["publicCnameMode"] = args ? args.publicCnameMode : undefined;
            resourceInputs["publicRr"] = args ? args.publicRr : undefined;
            resourceInputs["publicUserDomainName"] = args ? args.publicUserDomainName : undefined;
            resourceInputs["publicZoneName"] = args ? args.publicZoneName : undefined;
            resourceInputs["renewPeriod"] = args ? args.renewPeriod : undefined;
            resourceInputs["renewalStatus"] = args ? args.renewalStatus : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["smsNotificationCount"] = args ? args.smsNotificationCount : undefined;
            resourceInputs["strategyMode"] = args ? args.strategyMode : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlidnsGtmInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AlidnsGtmInstance resources.
 */
export interface AlidnsGtmInstanceState {
    alertConfigs?: pulumi.Input<pulumi.Input<inputs.AlidnsGtmInstanceAlertConfig>[]>;
    alertGroups?: pulumi.Input<pulumi.Input<string>[]>;
    cnameType?: pulumi.Input<string>;
    forceUpdate?: pulumi.Input<boolean>;
    healthCheckTaskCount?: pulumi.Input<number>;
    instanceName?: pulumi.Input<string>;
    lang?: pulumi.Input<string>;
    packageEdition?: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    publicCnameMode?: pulumi.Input<string>;
    publicRr?: pulumi.Input<string>;
    publicUserDomainName?: pulumi.Input<string>;
    publicZoneName?: pulumi.Input<string>;
    renewPeriod?: pulumi.Input<number>;
    renewalStatus?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    smsNotificationCount?: pulumi.Input<number>;
    strategyMode?: pulumi.Input<string>;
    ttl?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AlidnsGtmInstance resource.
 */
export interface AlidnsGtmInstanceArgs {
    alertConfigs?: pulumi.Input<pulumi.Input<inputs.AlidnsGtmInstanceAlertConfig>[]>;
    alertGroups?: pulumi.Input<pulumi.Input<string>[]>;
    cnameType?: pulumi.Input<string>;
    forceUpdate?: pulumi.Input<boolean>;
    healthCheckTaskCount: pulumi.Input<number>;
    instanceName: pulumi.Input<string>;
    lang?: pulumi.Input<string>;
    packageEdition: pulumi.Input<string>;
    paymentType: pulumi.Input<string>;
    period: pulumi.Input<number>;
    publicCnameMode?: pulumi.Input<string>;
    publicRr?: pulumi.Input<string>;
    publicUserDomainName?: pulumi.Input<string>;
    publicZoneName?: pulumi.Input<string>;
    renewPeriod?: pulumi.Input<number>;
    renewalStatus?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    smsNotificationCount: pulumi.Input<number>;
    strategyMode?: pulumi.Input<string>;
    ttl?: pulumi.Input<number>;
}
