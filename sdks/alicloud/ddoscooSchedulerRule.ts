// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdoscooSchedulerRule extends pulumi.CustomResource {
    /**
     * Get an existing DdoscooSchedulerRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdoscooSchedulerRuleState, opts?: pulumi.CustomResourceOptions): DdoscooSchedulerRule {
        return new DdoscooSchedulerRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/ddoscooSchedulerRule:DdoscooSchedulerRule';

    /**
     * Returns true if the given object is an instance of DdoscooSchedulerRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdoscooSchedulerRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdoscooSchedulerRule.__pulumiType;
    }

    public /*out*/ readonly cname!: pulumi.Output<string>;
    public readonly param!: pulumi.Output<string | undefined>;
    public readonly resourceGroupId!: pulumi.Output<string | undefined>;
    public readonly ruleName!: pulumi.Output<string>;
    public readonly ruleType!: pulumi.Output<number>;
    public readonly rules!: pulumi.Output<outputs.DdoscooSchedulerRuleRule[]>;
    public readonly timeouts!: pulumi.Output<outputs.DdoscooSchedulerRuleTimeouts | undefined>;

    /**
     * Create a DdoscooSchedulerRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdoscooSchedulerRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdoscooSchedulerRuleArgs | DdoscooSchedulerRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdoscooSchedulerRuleState | undefined;
            resourceInputs["cname"] = state ? state.cname : undefined;
            resourceInputs["param"] = state ? state.param : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["ruleName"] = state ? state.ruleName : undefined;
            resourceInputs["ruleType"] = state ? state.ruleType : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DdoscooSchedulerRuleArgs | undefined;
            if ((!args || args.ruleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleName'");
            }
            if ((!args || args.ruleType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleType'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["param"] = args ? args.param : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["ruleName"] = args ? args.ruleName : undefined;
            resourceInputs["ruleType"] = args ? args.ruleType : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["cname"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdoscooSchedulerRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdoscooSchedulerRule resources.
 */
export interface DdoscooSchedulerRuleState {
    cname?: pulumi.Input<string>;
    param?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    ruleName?: pulumi.Input<string>;
    ruleType?: pulumi.Input<number>;
    rules?: pulumi.Input<pulumi.Input<inputs.DdoscooSchedulerRuleRule>[]>;
    timeouts?: pulumi.Input<inputs.DdoscooSchedulerRuleTimeouts>;
}

/**
 * The set of arguments for constructing a DdoscooSchedulerRule resource.
 */
export interface DdoscooSchedulerRuleArgs {
    param?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    ruleName: pulumi.Input<string>;
    ruleType: pulumi.Input<number>;
    rules: pulumi.Input<pulumi.Input<inputs.DdoscooSchedulerRuleRule>[]>;
    timeouts?: pulumi.Input<inputs.DdoscooSchedulerRuleTimeouts>;
}
