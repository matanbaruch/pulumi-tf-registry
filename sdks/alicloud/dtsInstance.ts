// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DtsInstance extends pulumi.CustomResource {
    /**
     * Get an existing DtsInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DtsInstanceState, opts?: pulumi.CustomResourceOptions): DtsInstance {
        return new DtsInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/dtsInstance:DtsInstance';

    /**
     * Returns true if the given object is an instance of DtsInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DtsInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DtsInstance.__pulumiType;
    }

    public readonly autoPay!: pulumi.Output<boolean | undefined>;
    public readonly autoStart!: pulumi.Output<boolean | undefined>;
    public readonly computeUnit!: pulumi.Output<number | undefined>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly databaseCount!: pulumi.Output<number>;
    public readonly destinationEndpointEngineName!: pulumi.Output<string>;
    public readonly destinationRegion!: pulumi.Output<string | undefined>;
    public /*out*/ readonly dtsInstanceId!: pulumi.Output<string>;
    public readonly du!: pulumi.Output<number | undefined>;
    public readonly feeType!: pulumi.Output<string | undefined>;
    public readonly instanceClass!: pulumi.Output<string | undefined>;
    public /*out*/ readonly instanceName!: pulumi.Output<string>;
    public readonly jobId!: pulumi.Output<string | undefined>;
    public readonly paymentType!: pulumi.Output<string | undefined>;
    public readonly period!: pulumi.Output<string | undefined>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly sourceEndpointEngineName!: pulumi.Output<string>;
    public readonly sourceRegion!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly syncArchitecture!: pulumi.Output<string | undefined>;
    public readonly synchronizationDirection!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.DtsInstanceTimeouts | undefined>;
    public readonly type!: pulumi.Output<string | undefined>;
    public readonly usedTime!: pulumi.Output<number | undefined>;

    /**
     * Create a DtsInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DtsInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DtsInstanceArgs | DtsInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DtsInstanceState | undefined;
            resourceInputs["autoPay"] = state ? state.autoPay : undefined;
            resourceInputs["autoStart"] = state ? state.autoStart : undefined;
            resourceInputs["computeUnit"] = state ? state.computeUnit : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["databaseCount"] = state ? state.databaseCount : undefined;
            resourceInputs["destinationEndpointEngineName"] = state ? state.destinationEndpointEngineName : undefined;
            resourceInputs["destinationRegion"] = state ? state.destinationRegion : undefined;
            resourceInputs["dtsInstanceId"] = state ? state.dtsInstanceId : undefined;
            resourceInputs["du"] = state ? state.du : undefined;
            resourceInputs["feeType"] = state ? state.feeType : undefined;
            resourceInputs["instanceClass"] = state ? state.instanceClass : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["jobId"] = state ? state.jobId : undefined;
            resourceInputs["paymentType"] = state ? state.paymentType : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["sourceEndpointEngineName"] = state ? state.sourceEndpointEngineName : undefined;
            resourceInputs["sourceRegion"] = state ? state.sourceRegion : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["syncArchitecture"] = state ? state.syncArchitecture : undefined;
            resourceInputs["synchronizationDirection"] = state ? state.synchronizationDirection : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["usedTime"] = state ? state.usedTime : undefined;
        } else {
            const args = argsOrState as DtsInstanceArgs | undefined;
            resourceInputs["autoPay"] = args ? args.autoPay : undefined;
            resourceInputs["autoStart"] = args ? args.autoStart : undefined;
            resourceInputs["computeUnit"] = args ? args.computeUnit : undefined;
            resourceInputs["databaseCount"] = args ? args.databaseCount : undefined;
            resourceInputs["destinationEndpointEngineName"] = args ? args.destinationEndpointEngineName : undefined;
            resourceInputs["destinationRegion"] = args ? args.destinationRegion : undefined;
            resourceInputs["du"] = args ? args.du : undefined;
            resourceInputs["feeType"] = args ? args.feeType : undefined;
            resourceInputs["instanceClass"] = args ? args.instanceClass : undefined;
            resourceInputs["jobId"] = args ? args.jobId : undefined;
            resourceInputs["paymentType"] = args ? args.paymentType : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["sourceEndpointEngineName"] = args ? args.sourceEndpointEngineName : undefined;
            resourceInputs["sourceRegion"] = args ? args.sourceRegion : undefined;
            resourceInputs["syncArchitecture"] = args ? args.syncArchitecture : undefined;
            resourceInputs["synchronizationDirection"] = args ? args.synchronizationDirection : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["usedTime"] = args ? args.usedTime : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["dtsInstanceId"] = undefined /*out*/;
            resourceInputs["instanceName"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DtsInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DtsInstance resources.
 */
export interface DtsInstanceState {
    autoPay?: pulumi.Input<boolean>;
    autoStart?: pulumi.Input<boolean>;
    computeUnit?: pulumi.Input<number>;
    createTime?: pulumi.Input<string>;
    databaseCount?: pulumi.Input<number>;
    destinationEndpointEngineName?: pulumi.Input<string>;
    destinationRegion?: pulumi.Input<string>;
    dtsInstanceId?: pulumi.Input<string>;
    du?: pulumi.Input<number>;
    feeType?: pulumi.Input<string>;
    instanceClass?: pulumi.Input<string>;
    instanceName?: pulumi.Input<string>;
    jobId?: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    sourceEndpointEngineName?: pulumi.Input<string>;
    sourceRegion?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    syncArchitecture?: pulumi.Input<string>;
    synchronizationDirection?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.DtsInstanceTimeouts>;
    type?: pulumi.Input<string>;
    usedTime?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DtsInstance resource.
 */
export interface DtsInstanceArgs {
    autoPay?: pulumi.Input<boolean>;
    autoStart?: pulumi.Input<boolean>;
    computeUnit?: pulumi.Input<number>;
    databaseCount?: pulumi.Input<number>;
    destinationEndpointEngineName?: pulumi.Input<string>;
    destinationRegion?: pulumi.Input<string>;
    du?: pulumi.Input<number>;
    feeType?: pulumi.Input<string>;
    instanceClass?: pulumi.Input<string>;
    jobId?: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    sourceEndpointEngineName?: pulumi.Input<string>;
    sourceRegion?: pulumi.Input<string>;
    syncArchitecture?: pulumi.Input<string>;
    synchronizationDirection?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.DtsInstanceTimeouts>;
    type?: pulumi.Input<string>;
    usedTime?: pulumi.Input<number>;
}
