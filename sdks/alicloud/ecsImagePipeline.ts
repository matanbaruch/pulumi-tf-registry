// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class EcsImagePipeline extends pulumi.CustomResource {
    /**
     * Get an existing EcsImagePipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcsImagePipelineState, opts?: pulumi.CustomResourceOptions): EcsImagePipeline {
        return new EcsImagePipeline(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/ecsImagePipeline:EcsImagePipeline';

    /**
     * Returns true if the given object is an instance of EcsImagePipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcsImagePipeline {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcsImagePipeline.__pulumiType;
    }

    public readonly addAccounts!: pulumi.Output<string[] | undefined>;
    public readonly baseImage!: pulumi.Output<string>;
    public readonly baseImageType!: pulumi.Output<string>;
    public readonly buildContent!: pulumi.Output<string | undefined>;
    public readonly deleteInstanceOnFailure!: pulumi.Output<boolean>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly imageName!: pulumi.Output<string | undefined>;
    public readonly instanceType!: pulumi.Output<string | undefined>;
    public readonly internetMaxBandwidthOut!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly systemDiskSize!: pulumi.Output<number>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly toRegionIds!: pulumi.Output<string[] | undefined>;
    public readonly vswitchId!: pulumi.Output<string | undefined>;

    /**
     * Create a EcsImagePipeline resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EcsImagePipelineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcsImagePipelineArgs | EcsImagePipelineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcsImagePipelineState | undefined;
            resourceInputs["addAccounts"] = state ? state.addAccounts : undefined;
            resourceInputs["baseImage"] = state ? state.baseImage : undefined;
            resourceInputs["baseImageType"] = state ? state.baseImageType : undefined;
            resourceInputs["buildContent"] = state ? state.buildContent : undefined;
            resourceInputs["deleteInstanceOnFailure"] = state ? state.deleteInstanceOnFailure : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["imageName"] = state ? state.imageName : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["internetMaxBandwidthOut"] = state ? state.internetMaxBandwidthOut : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["systemDiskSize"] = state ? state.systemDiskSize : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["toRegionIds"] = state ? state.toRegionIds : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
        } else {
            const args = argsOrState as EcsImagePipelineArgs | undefined;
            if ((!args || args.baseImage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'baseImage'");
            }
            if ((!args || args.baseImageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'baseImageType'");
            }
            resourceInputs["addAccounts"] = args ? args.addAccounts : undefined;
            resourceInputs["baseImage"] = args ? args.baseImage : undefined;
            resourceInputs["baseImageType"] = args ? args.baseImageType : undefined;
            resourceInputs["buildContent"] = args ? args.buildContent : undefined;
            resourceInputs["deleteInstanceOnFailure"] = args ? args.deleteInstanceOnFailure : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["imageName"] = args ? args.imageName : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["internetMaxBandwidthOut"] = args ? args.internetMaxBandwidthOut : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["systemDiskSize"] = args ? args.systemDiskSize : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["toRegionIds"] = args ? args.toRegionIds : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EcsImagePipeline.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EcsImagePipeline resources.
 */
export interface EcsImagePipelineState {
    addAccounts?: pulumi.Input<pulumi.Input<string>[]>;
    baseImage?: pulumi.Input<string>;
    baseImageType?: pulumi.Input<string>;
    buildContent?: pulumi.Input<string>;
    deleteInstanceOnFailure?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    imageName?: pulumi.Input<string>;
    instanceType?: pulumi.Input<string>;
    internetMaxBandwidthOut?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    systemDiskSize?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    toRegionIds?: pulumi.Input<pulumi.Input<string>[]>;
    vswitchId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EcsImagePipeline resource.
 */
export interface EcsImagePipelineArgs {
    addAccounts?: pulumi.Input<pulumi.Input<string>[]>;
    baseImage: pulumi.Input<string>;
    baseImageType: pulumi.Input<string>;
    buildContent?: pulumi.Input<string>;
    deleteInstanceOnFailure?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    imageName?: pulumi.Input<string>;
    instanceType?: pulumi.Input<string>;
    internetMaxBandwidthOut?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    systemDiskSize?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    toRegionIds?: pulumi.Input<pulumi.Input<string>[]>;
    vswitchId?: pulumi.Input<string>;
}
