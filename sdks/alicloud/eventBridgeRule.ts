// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EventBridgeRule extends pulumi.CustomResource {
    /**
     * Get an existing EventBridgeRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EventBridgeRuleState, opts?: pulumi.CustomResourceOptions): EventBridgeRule {
        return new EventBridgeRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/eventBridgeRule:EventBridgeRule';

    /**
     * Returns true if the given object is an instance of EventBridgeRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventBridgeRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventBridgeRule.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly eventBusName!: pulumi.Output<string>;
    public readonly filterPattern!: pulumi.Output<string>;
    public readonly ruleName!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly targets!: pulumi.Output<outputs.EventBridgeRuleTarget[]>;
    public readonly timeouts!: pulumi.Output<outputs.EventBridgeRuleTimeouts | undefined>;

    /**
     * Create a EventBridgeRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventBridgeRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EventBridgeRuleArgs | EventBridgeRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EventBridgeRuleState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["eventBusName"] = state ? state.eventBusName : undefined;
            resourceInputs["filterPattern"] = state ? state.filterPattern : undefined;
            resourceInputs["ruleName"] = state ? state.ruleName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as EventBridgeRuleArgs | undefined;
            if ((!args || args.eventBusName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventBusName'");
            }
            if ((!args || args.filterPattern === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filterPattern'");
            }
            if ((!args || args.ruleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleName'");
            }
            if ((!args || args.targets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targets'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["eventBusName"] = args ? args.eventBusName : undefined;
            resourceInputs["filterPattern"] = args ? args.filterPattern : undefined;
            resourceInputs["ruleName"] = args ? args.ruleName : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EventBridgeRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EventBridgeRule resources.
 */
export interface EventBridgeRuleState {
    description?: pulumi.Input<string>;
    eventBusName?: pulumi.Input<string>;
    filterPattern?: pulumi.Input<string>;
    ruleName?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    targets?: pulumi.Input<pulumi.Input<inputs.EventBridgeRuleTarget>[]>;
    timeouts?: pulumi.Input<inputs.EventBridgeRuleTimeouts>;
}

/**
 * The set of arguments for constructing a EventBridgeRule resource.
 */
export interface EventBridgeRuleArgs {
    description?: pulumi.Input<string>;
    eventBusName: pulumi.Input<string>;
    filterPattern: pulumi.Input<string>;
    ruleName: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    targets: pulumi.Input<pulumi.Input<inputs.EventBridgeRuleTarget>[]>;
    timeouts?: pulumi.Input<inputs.EventBridgeRuleTimeouts>;
}
