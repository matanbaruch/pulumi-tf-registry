// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LogStore extends pulumi.CustomResource {
    /**
     * Get an existing LogStore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogStoreState, opts?: pulumi.CustomResourceOptions): LogStore {
        return new LogStore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/logStore:LogStore';

    /**
     * Returns true if the given object is an instance of LogStore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogStore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogStore.__pulumiType;
    }

    public readonly appendMeta!: pulumi.Output<boolean | undefined>;
    public readonly autoSplit!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly createTime!: pulumi.Output<number>;
    public readonly enableWebTracking!: pulumi.Output<boolean | undefined>;
    public readonly encryptConf!: pulumi.Output<outputs.LogStoreEncryptConf | undefined>;
    public readonly hotTtl!: pulumi.Output<number | undefined>;
    public readonly infrequentAccessTtl!: pulumi.Output<number | undefined>;
    public readonly logstoreName!: pulumi.Output<string>;
    public readonly maxSplitShardCount!: pulumi.Output<number | undefined>;
    public readonly meteringMode!: pulumi.Output<string>;
    public readonly mode!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly project!: pulumi.Output<string>;
    public readonly projectName!: pulumi.Output<string>;
    public readonly retentionPeriod!: pulumi.Output<number | undefined>;
    public readonly shardCount!: pulumi.Output<number | undefined>;
    public /*out*/ readonly shards!: pulumi.Output<outputs.LogStoreShard[]>;
    public readonly telemetryType!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.LogStoreTimeouts | undefined>;

    /**
     * Create a LogStore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LogStoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogStoreArgs | LogStoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogStoreState | undefined;
            resourceInputs["appendMeta"] = state ? state.appendMeta : undefined;
            resourceInputs["autoSplit"] = state ? state.autoSplit : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["enableWebTracking"] = state ? state.enableWebTracking : undefined;
            resourceInputs["encryptConf"] = state ? state.encryptConf : undefined;
            resourceInputs["hotTtl"] = state ? state.hotTtl : undefined;
            resourceInputs["infrequentAccessTtl"] = state ? state.infrequentAccessTtl : undefined;
            resourceInputs["logstoreName"] = state ? state.logstoreName : undefined;
            resourceInputs["maxSplitShardCount"] = state ? state.maxSplitShardCount : undefined;
            resourceInputs["meteringMode"] = state ? state.meteringMode : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["retentionPeriod"] = state ? state.retentionPeriod : undefined;
            resourceInputs["shardCount"] = state ? state.shardCount : undefined;
            resourceInputs["shards"] = state ? state.shards : undefined;
            resourceInputs["telemetryType"] = state ? state.telemetryType : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as LogStoreArgs | undefined;
            resourceInputs["appendMeta"] = args ? args.appendMeta : undefined;
            resourceInputs["autoSplit"] = args ? args.autoSplit : undefined;
            resourceInputs["enableWebTracking"] = args ? args.enableWebTracking : undefined;
            resourceInputs["encryptConf"] = args ? args.encryptConf : undefined;
            resourceInputs["hotTtl"] = args ? args.hotTtl : undefined;
            resourceInputs["infrequentAccessTtl"] = args ? args.infrequentAccessTtl : undefined;
            resourceInputs["logstoreName"] = args ? args.logstoreName : undefined;
            resourceInputs["maxSplitShardCount"] = args ? args.maxSplitShardCount : undefined;
            resourceInputs["meteringMode"] = args ? args.meteringMode : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["retentionPeriod"] = args ? args.retentionPeriod : undefined;
            resourceInputs["shardCount"] = args ? args.shardCount : undefined;
            resourceInputs["telemetryType"] = args ? args.telemetryType : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["shards"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogStore.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LogStore resources.
 */
export interface LogStoreState {
    appendMeta?: pulumi.Input<boolean>;
    autoSplit?: pulumi.Input<boolean>;
    createTime?: pulumi.Input<number>;
    enableWebTracking?: pulumi.Input<boolean>;
    encryptConf?: pulumi.Input<inputs.LogStoreEncryptConf>;
    hotTtl?: pulumi.Input<number>;
    infrequentAccessTtl?: pulumi.Input<number>;
    logstoreName?: pulumi.Input<string>;
    maxSplitShardCount?: pulumi.Input<number>;
    meteringMode?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    name?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    project?: pulumi.Input<string>;
    projectName?: pulumi.Input<string>;
    retentionPeriod?: pulumi.Input<number>;
    shardCount?: pulumi.Input<number>;
    shards?: pulumi.Input<pulumi.Input<inputs.LogStoreShard>[]>;
    telemetryType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LogStoreTimeouts>;
}

/**
 * The set of arguments for constructing a LogStore resource.
 */
export interface LogStoreArgs {
    appendMeta?: pulumi.Input<boolean>;
    autoSplit?: pulumi.Input<boolean>;
    enableWebTracking?: pulumi.Input<boolean>;
    encryptConf?: pulumi.Input<inputs.LogStoreEncryptConf>;
    hotTtl?: pulumi.Input<number>;
    infrequentAccessTtl?: pulumi.Input<number>;
    logstoreName?: pulumi.Input<string>;
    maxSplitShardCount?: pulumi.Input<number>;
    meteringMode?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    name?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    project?: pulumi.Input<string>;
    projectName?: pulumi.Input<string>;
    retentionPeriod?: pulumi.Input<number>;
    shardCount?: pulumi.Input<number>;
    telemetryType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LogStoreTimeouts>;
}
