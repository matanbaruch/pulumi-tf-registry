// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SlbRule extends pulumi.CustomResource {
    /**
     * Get an existing SlbRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbRuleState, opts?: pulumi.CustomResourceOptions): SlbRule {
        return new SlbRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/slbRule:SlbRule';

    /**
     * Returns true if the given object is an instance of SlbRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbRule.__pulumiType;
    }

    public readonly cookie!: pulumi.Output<string | undefined>;
    public readonly cookieTimeout!: pulumi.Output<number | undefined>;
    public readonly deleteProtectionValidation!: pulumi.Output<boolean | undefined>;
    public readonly domain!: pulumi.Output<string | undefined>;
    public readonly frontendPort!: pulumi.Output<number>;
    public readonly healthCheck!: pulumi.Output<string | undefined>;
    public readonly healthCheckConnectPort!: pulumi.Output<number>;
    public readonly healthCheckDomain!: pulumi.Output<string | undefined>;
    public readonly healthCheckHttpCode!: pulumi.Output<string | undefined>;
    public readonly healthCheckInterval!: pulumi.Output<number | undefined>;
    public readonly healthCheckTimeout!: pulumi.Output<number | undefined>;
    public readonly healthCheckUri!: pulumi.Output<string | undefined>;
    public readonly healthyThreshold!: pulumi.Output<number | undefined>;
    public readonly listenerSync!: pulumi.Output<string | undefined>;
    public readonly loadBalancerId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly scheduler!: pulumi.Output<string | undefined>;
    public readonly serverGroupId!: pulumi.Output<string>;
    public readonly stickySession!: pulumi.Output<string | undefined>;
    public readonly stickySessionType!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.SlbRuleTimeouts | undefined>;
    public readonly unhealthyThreshold!: pulumi.Output<number | undefined>;
    public readonly url!: pulumi.Output<string | undefined>;

    /**
     * Create a SlbRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SlbRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbRuleArgs | SlbRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbRuleState | undefined;
            resourceInputs["cookie"] = state ? state.cookie : undefined;
            resourceInputs["cookieTimeout"] = state ? state.cookieTimeout : undefined;
            resourceInputs["deleteProtectionValidation"] = state ? state.deleteProtectionValidation : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["frontendPort"] = state ? state.frontendPort : undefined;
            resourceInputs["healthCheck"] = state ? state.healthCheck : undefined;
            resourceInputs["healthCheckConnectPort"] = state ? state.healthCheckConnectPort : undefined;
            resourceInputs["healthCheckDomain"] = state ? state.healthCheckDomain : undefined;
            resourceInputs["healthCheckHttpCode"] = state ? state.healthCheckHttpCode : undefined;
            resourceInputs["healthCheckInterval"] = state ? state.healthCheckInterval : undefined;
            resourceInputs["healthCheckTimeout"] = state ? state.healthCheckTimeout : undefined;
            resourceInputs["healthCheckUri"] = state ? state.healthCheckUri : undefined;
            resourceInputs["healthyThreshold"] = state ? state.healthyThreshold : undefined;
            resourceInputs["listenerSync"] = state ? state.listenerSync : undefined;
            resourceInputs["loadBalancerId"] = state ? state.loadBalancerId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scheduler"] = state ? state.scheduler : undefined;
            resourceInputs["serverGroupId"] = state ? state.serverGroupId : undefined;
            resourceInputs["stickySession"] = state ? state.stickySession : undefined;
            resourceInputs["stickySessionType"] = state ? state.stickySessionType : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["unhealthyThreshold"] = state ? state.unhealthyThreshold : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as SlbRuleArgs | undefined;
            if ((!args || args.frontendPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frontendPort'");
            }
            if ((!args || args.loadBalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerId'");
            }
            if ((!args || args.serverGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverGroupId'");
            }
            resourceInputs["cookie"] = args ? args.cookie : undefined;
            resourceInputs["cookieTimeout"] = args ? args.cookieTimeout : undefined;
            resourceInputs["deleteProtectionValidation"] = args ? args.deleteProtectionValidation : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["frontendPort"] = args ? args.frontendPort : undefined;
            resourceInputs["healthCheck"] = args ? args.healthCheck : undefined;
            resourceInputs["healthCheckConnectPort"] = args ? args.healthCheckConnectPort : undefined;
            resourceInputs["healthCheckDomain"] = args ? args.healthCheckDomain : undefined;
            resourceInputs["healthCheckHttpCode"] = args ? args.healthCheckHttpCode : undefined;
            resourceInputs["healthCheckInterval"] = args ? args.healthCheckInterval : undefined;
            resourceInputs["healthCheckTimeout"] = args ? args.healthCheckTimeout : undefined;
            resourceInputs["healthCheckUri"] = args ? args.healthCheckUri : undefined;
            resourceInputs["healthyThreshold"] = args ? args.healthyThreshold : undefined;
            resourceInputs["listenerSync"] = args ? args.listenerSync : undefined;
            resourceInputs["loadBalancerId"] = args ? args.loadBalancerId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scheduler"] = args ? args.scheduler : undefined;
            resourceInputs["serverGroupId"] = args ? args.serverGroupId : undefined;
            resourceInputs["stickySession"] = args ? args.stickySession : undefined;
            resourceInputs["stickySessionType"] = args ? args.stickySessionType : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["unhealthyThreshold"] = args ? args.unhealthyThreshold : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbRule resources.
 */
export interface SlbRuleState {
    cookie?: pulumi.Input<string>;
    cookieTimeout?: pulumi.Input<number>;
    deleteProtectionValidation?: pulumi.Input<boolean>;
    domain?: pulumi.Input<string>;
    frontendPort?: pulumi.Input<number>;
    healthCheck?: pulumi.Input<string>;
    healthCheckConnectPort?: pulumi.Input<number>;
    healthCheckDomain?: pulumi.Input<string>;
    healthCheckHttpCode?: pulumi.Input<string>;
    healthCheckInterval?: pulumi.Input<number>;
    healthCheckTimeout?: pulumi.Input<number>;
    healthCheckUri?: pulumi.Input<string>;
    healthyThreshold?: pulumi.Input<number>;
    listenerSync?: pulumi.Input<string>;
    loadBalancerId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    scheduler?: pulumi.Input<string>;
    serverGroupId?: pulumi.Input<string>;
    stickySession?: pulumi.Input<string>;
    stickySessionType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SlbRuleTimeouts>;
    unhealthyThreshold?: pulumi.Input<number>;
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SlbRule resource.
 */
export interface SlbRuleArgs {
    cookie?: pulumi.Input<string>;
    cookieTimeout?: pulumi.Input<number>;
    deleteProtectionValidation?: pulumi.Input<boolean>;
    domain?: pulumi.Input<string>;
    frontendPort: pulumi.Input<number>;
    healthCheck?: pulumi.Input<string>;
    healthCheckConnectPort?: pulumi.Input<number>;
    healthCheckDomain?: pulumi.Input<string>;
    healthCheckHttpCode?: pulumi.Input<string>;
    healthCheckInterval?: pulumi.Input<number>;
    healthCheckTimeout?: pulumi.Input<number>;
    healthCheckUri?: pulumi.Input<string>;
    healthyThreshold?: pulumi.Input<number>;
    listenerSync?: pulumi.Input<string>;
    loadBalancerId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    scheduler?: pulumi.Input<string>;
    serverGroupId: pulumi.Input<string>;
    stickySession?: pulumi.Input<string>;
    stickySessionType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SlbRuleTimeouts>;
    unhealthyThreshold?: pulumi.Input<number>;
    url?: pulumi.Input<string>;
}
