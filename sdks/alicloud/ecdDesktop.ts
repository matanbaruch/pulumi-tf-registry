// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EcdDesktop extends pulumi.CustomResource {
    /**
     * Get an existing EcdDesktop resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcdDesktopState, opts?: pulumi.CustomResourceOptions): EcdDesktop {
        return new EcdDesktop(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/ecdDesktop:EcdDesktop';

    /**
     * Returns true if the given object is an instance of EcdDesktop.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcdDesktop {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcdDesktop.__pulumiType;
    }

    public readonly amount!: pulumi.Output<number | undefined>;
    public readonly autoPay!: pulumi.Output<boolean | undefined>;
    public readonly autoRenew!: pulumi.Output<boolean | undefined>;
    public readonly bundleId!: pulumi.Output<string>;
    public readonly desktopName!: pulumi.Output<string | undefined>;
    public readonly desktopType!: pulumi.Output<string>;
    public readonly endUserIds!: pulumi.Output<string[] | undefined>;
    public readonly hostName!: pulumi.Output<string | undefined>;
    public readonly officeSiteId!: pulumi.Output<string>;
    public readonly paymentType!: pulumi.Output<string>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    public readonly policyGroupId!: pulumi.Output<string>;
    public readonly rootDiskSizeGib!: pulumi.Output<number | undefined>;
    public readonly status!: pulumi.Output<string>;
    public readonly stoppedMode!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.EcdDesktopTimeouts | undefined>;
    public readonly userAssignMode!: pulumi.Output<string>;
    public readonly userDiskSizeGib!: pulumi.Output<number | undefined>;

    /**
     * Create a EcdDesktop resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EcdDesktopArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcdDesktopArgs | EcdDesktopState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcdDesktopState | undefined;
            resourceInputs["amount"] = state ? state.amount : undefined;
            resourceInputs["autoPay"] = state ? state.autoPay : undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["bundleId"] = state ? state.bundleId : undefined;
            resourceInputs["desktopName"] = state ? state.desktopName : undefined;
            resourceInputs["desktopType"] = state ? state.desktopType : undefined;
            resourceInputs["endUserIds"] = state ? state.endUserIds : undefined;
            resourceInputs["hostName"] = state ? state.hostName : undefined;
            resourceInputs["officeSiteId"] = state ? state.officeSiteId : undefined;
            resourceInputs["paymentType"] = state ? state.paymentType : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["policyGroupId"] = state ? state.policyGroupId : undefined;
            resourceInputs["rootDiskSizeGib"] = state ? state.rootDiskSizeGib : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["stoppedMode"] = state ? state.stoppedMode : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userAssignMode"] = state ? state.userAssignMode : undefined;
            resourceInputs["userDiskSizeGib"] = state ? state.userDiskSizeGib : undefined;
        } else {
            const args = argsOrState as EcdDesktopArgs | undefined;
            if ((!args || args.bundleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bundleId'");
            }
            if ((!args || args.officeSiteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'officeSiteId'");
            }
            if ((!args || args.policyGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyGroupId'");
            }
            resourceInputs["amount"] = args ? args.amount : undefined;
            resourceInputs["autoPay"] = args ? args.autoPay : undefined;
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["bundleId"] = args ? args.bundleId : undefined;
            resourceInputs["desktopName"] = args ? args.desktopName : undefined;
            resourceInputs["desktopType"] = args ? args.desktopType : undefined;
            resourceInputs["endUserIds"] = args ? args.endUserIds : undefined;
            resourceInputs["hostName"] = args ? args.hostName : undefined;
            resourceInputs["officeSiteId"] = args ? args.officeSiteId : undefined;
            resourceInputs["paymentType"] = args ? args.paymentType : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["policyGroupId"] = args ? args.policyGroupId : undefined;
            resourceInputs["rootDiskSizeGib"] = args ? args.rootDiskSizeGib : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["stoppedMode"] = args ? args.stoppedMode : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userAssignMode"] = args ? args.userAssignMode : undefined;
            resourceInputs["userDiskSizeGib"] = args ? args.userDiskSizeGib : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EcdDesktop.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EcdDesktop resources.
 */
export interface EcdDesktopState {
    amount?: pulumi.Input<number>;
    autoPay?: pulumi.Input<boolean>;
    autoRenew?: pulumi.Input<boolean>;
    bundleId?: pulumi.Input<string>;
    desktopName?: pulumi.Input<string>;
    desktopType?: pulumi.Input<string>;
    endUserIds?: pulumi.Input<pulumi.Input<string>[]>;
    hostName?: pulumi.Input<string>;
    officeSiteId?: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    policyGroupId?: pulumi.Input<string>;
    rootDiskSizeGib?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    stoppedMode?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.EcdDesktopTimeouts>;
    userAssignMode?: pulumi.Input<string>;
    userDiskSizeGib?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a EcdDesktop resource.
 */
export interface EcdDesktopArgs {
    amount?: pulumi.Input<number>;
    autoPay?: pulumi.Input<boolean>;
    autoRenew?: pulumi.Input<boolean>;
    bundleId: pulumi.Input<string>;
    desktopName?: pulumi.Input<string>;
    desktopType?: pulumi.Input<string>;
    endUserIds?: pulumi.Input<pulumi.Input<string>[]>;
    hostName?: pulumi.Input<string>;
    officeSiteId: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    policyGroupId: pulumi.Input<string>;
    rootDiskSizeGib?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    stoppedMode?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.EcdDesktopTimeouts>;
    userAssignMode?: pulumi.Input<string>;
    userDiskSizeGib?: pulumi.Input<number>;
}
