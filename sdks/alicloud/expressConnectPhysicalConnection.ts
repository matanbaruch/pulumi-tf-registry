// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ExpressConnectPhysicalConnection extends pulumi.CustomResource {
    /**
     * Get an existing ExpressConnectPhysicalConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExpressConnectPhysicalConnectionState, opts?: pulumi.CustomResourceOptions): ExpressConnectPhysicalConnection {
        return new ExpressConnectPhysicalConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/expressConnectPhysicalConnection:ExpressConnectPhysicalConnection';

    /**
     * Returns true if the given object is an instance of ExpressConnectPhysicalConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExpressConnectPhysicalConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExpressConnectPhysicalConnection.__pulumiType;
    }

    public readonly accessPointId!: pulumi.Output<string>;
    public readonly bandwidth!: pulumi.Output<string>;
    public readonly circuitCode!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly lineOperator!: pulumi.Output<string>;
    public readonly peerLocation!: pulumi.Output<string | undefined>;
    public readonly physicalConnectionName!: pulumi.Output<string | undefined>;
    public readonly portType!: pulumi.Output<string | undefined>;
    public readonly redundantPhysicalConnectionId!: pulumi.Output<string | undefined>;
    public readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ExpressConnectPhysicalConnectionTimeouts | undefined>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a ExpressConnectPhysicalConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExpressConnectPhysicalConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExpressConnectPhysicalConnectionArgs | ExpressConnectPhysicalConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExpressConnectPhysicalConnectionState | undefined;
            resourceInputs["accessPointId"] = state ? state.accessPointId : undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["circuitCode"] = state ? state.circuitCode : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["lineOperator"] = state ? state.lineOperator : undefined;
            resourceInputs["peerLocation"] = state ? state.peerLocation : undefined;
            resourceInputs["physicalConnectionName"] = state ? state.physicalConnectionName : undefined;
            resourceInputs["portType"] = state ? state.portType : undefined;
            resourceInputs["redundantPhysicalConnectionId"] = state ? state.redundantPhysicalConnectionId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ExpressConnectPhysicalConnectionArgs | undefined;
            if ((!args || args.accessPointId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessPointId'");
            }
            if ((!args || args.lineOperator === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lineOperator'");
            }
            resourceInputs["accessPointId"] = args ? args.accessPointId : undefined;
            resourceInputs["bandwidth"] = args ? args.bandwidth : undefined;
            resourceInputs["circuitCode"] = args ? args.circuitCode : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["lineOperator"] = args ? args.lineOperator : undefined;
            resourceInputs["peerLocation"] = args ? args.peerLocation : undefined;
            resourceInputs["physicalConnectionName"] = args ? args.physicalConnectionName : undefined;
            resourceInputs["portType"] = args ? args.portType : undefined;
            resourceInputs["redundantPhysicalConnectionId"] = args ? args.redundantPhysicalConnectionId : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExpressConnectPhysicalConnection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ExpressConnectPhysicalConnection resources.
 */
export interface ExpressConnectPhysicalConnectionState {
    accessPointId?: pulumi.Input<string>;
    bandwidth?: pulumi.Input<string>;
    circuitCode?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    lineOperator?: pulumi.Input<string>;
    peerLocation?: pulumi.Input<string>;
    physicalConnectionName?: pulumi.Input<string>;
    portType?: pulumi.Input<string>;
    redundantPhysicalConnectionId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ExpressConnectPhysicalConnectionTimeouts>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ExpressConnectPhysicalConnection resource.
 */
export interface ExpressConnectPhysicalConnectionArgs {
    accessPointId: pulumi.Input<string>;
    bandwidth?: pulumi.Input<string>;
    circuitCode?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    lineOperator: pulumi.Input<string>;
    peerLocation?: pulumi.Input<string>;
    physicalConnectionName?: pulumi.Input<string>;
    portType?: pulumi.Input<string>;
    redundantPhysicalConnectionId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ExpressConnectPhysicalConnectionTimeouts>;
    type?: pulumi.Input<string>;
}
