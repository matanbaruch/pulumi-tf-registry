// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class WafInstance extends pulumi.CustomResource {
    /**
     * Get an existing WafInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WafInstanceState, opts?: pulumi.CustomResourceOptions): WafInstance {
        return new WafInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/wafInstance:WafInstance';

    /**
     * Returns true if the given object is an instance of WafInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WafInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WafInstance.__pulumiType;
    }

    public readonly bigScreen!: pulumi.Output<string>;
    public readonly exclusiveIpPackage!: pulumi.Output<string>;
    public readonly extBandwidth!: pulumi.Output<string>;
    public readonly extDomainPackage!: pulumi.Output<string>;
    public readonly logStorage!: pulumi.Output<string>;
    public readonly logTime!: pulumi.Output<string>;
    public readonly modifyType!: pulumi.Output<string | undefined>;
    public readonly packageCode!: pulumi.Output<string>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly prefessionalService!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string | undefined>;
    public readonly renewPeriod!: pulumi.Output<number | undefined>;
    public readonly renewalStatus!: pulumi.Output<string | undefined>;
    public readonly resourceGroupId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<number>;
    public readonly subscriptionType!: pulumi.Output<string>;
    public readonly wafLog!: pulumi.Output<string>;

    /**
     * Create a WafInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WafInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WafInstanceArgs | WafInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WafInstanceState | undefined;
            resourceInputs["bigScreen"] = state ? state.bigScreen : undefined;
            resourceInputs["exclusiveIpPackage"] = state ? state.exclusiveIpPackage : undefined;
            resourceInputs["extBandwidth"] = state ? state.extBandwidth : undefined;
            resourceInputs["extDomainPackage"] = state ? state.extDomainPackage : undefined;
            resourceInputs["logStorage"] = state ? state.logStorage : undefined;
            resourceInputs["logTime"] = state ? state.logTime : undefined;
            resourceInputs["modifyType"] = state ? state.modifyType : undefined;
            resourceInputs["packageCode"] = state ? state.packageCode : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["prefessionalService"] = state ? state.prefessionalService : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["renewPeriod"] = state ? state.renewPeriod : undefined;
            resourceInputs["renewalStatus"] = state ? state.renewalStatus : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subscriptionType"] = state ? state.subscriptionType : undefined;
            resourceInputs["wafLog"] = state ? state.wafLog : undefined;
        } else {
            const args = argsOrState as WafInstanceArgs | undefined;
            if ((!args || args.bigScreen === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bigScreen'");
            }
            if ((!args || args.exclusiveIpPackage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'exclusiveIpPackage'");
            }
            if ((!args || args.extBandwidth === undefined) && !opts.urn) {
                throw new Error("Missing required property 'extBandwidth'");
            }
            if ((!args || args.extDomainPackage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'extDomainPackage'");
            }
            if ((!args || args.logStorage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logStorage'");
            }
            if ((!args || args.logTime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logTime'");
            }
            if ((!args || args.packageCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'packageCode'");
            }
            if ((!args || args.prefessionalService === undefined) && !opts.urn) {
                throw new Error("Missing required property 'prefessionalService'");
            }
            if ((!args || args.subscriptionType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriptionType'");
            }
            if ((!args || args.wafLog === undefined) && !opts.urn) {
                throw new Error("Missing required property 'wafLog'");
            }
            resourceInputs["bigScreen"] = args ? args.bigScreen : undefined;
            resourceInputs["exclusiveIpPackage"] = args ? args.exclusiveIpPackage : undefined;
            resourceInputs["extBandwidth"] = args ? args.extBandwidth : undefined;
            resourceInputs["extDomainPackage"] = args ? args.extDomainPackage : undefined;
            resourceInputs["logStorage"] = args ? args.logStorage : undefined;
            resourceInputs["logTime"] = args ? args.logTime : undefined;
            resourceInputs["modifyType"] = args ? args.modifyType : undefined;
            resourceInputs["packageCode"] = args ? args.packageCode : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["prefessionalService"] = args ? args.prefessionalService : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["renewPeriod"] = args ? args.renewPeriod : undefined;
            resourceInputs["renewalStatus"] = args ? args.renewalStatus : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["subscriptionType"] = args ? args.subscriptionType : undefined;
            resourceInputs["wafLog"] = args ? args.wafLog : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WafInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WafInstance resources.
 */
export interface WafInstanceState {
    bigScreen?: pulumi.Input<string>;
    exclusiveIpPackage?: pulumi.Input<string>;
    extBandwidth?: pulumi.Input<string>;
    extDomainPackage?: pulumi.Input<string>;
    logStorage?: pulumi.Input<string>;
    logTime?: pulumi.Input<string>;
    modifyType?: pulumi.Input<string>;
    packageCode?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    prefessionalService?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    renewPeriod?: pulumi.Input<number>;
    renewalStatus?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    status?: pulumi.Input<number>;
    subscriptionType?: pulumi.Input<string>;
    wafLog?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WafInstance resource.
 */
export interface WafInstanceArgs {
    bigScreen: pulumi.Input<string>;
    exclusiveIpPackage: pulumi.Input<string>;
    extBandwidth: pulumi.Input<string>;
    extDomainPackage: pulumi.Input<string>;
    logStorage: pulumi.Input<string>;
    logTime: pulumi.Input<string>;
    modifyType?: pulumi.Input<string>;
    packageCode: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    prefessionalService: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    renewPeriod?: pulumi.Input<number>;
    renewalStatus?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    subscriptionType: pulumi.Input<string>;
    wafLog: pulumi.Input<string>;
}
