// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FcTrigger extends pulumi.CustomResource {
    /**
     * Get an existing FcTrigger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FcTriggerState, opts?: pulumi.CustomResourceOptions): FcTrigger {
        return new FcTrigger(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/fcTrigger:FcTrigger';

    /**
     * Returns true if the given object is an instance of FcTrigger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FcTrigger {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FcTrigger.__pulumiType;
    }

    public readonly config!: pulumi.Output<string | undefined>;
    public readonly configMns!: pulumi.Output<string | undefined>;
    public readonly function!: pulumi.Output<string>;
    public /*out*/ readonly lastModified!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly namePrefix!: pulumi.Output<string | undefined>;
    public readonly role!: pulumi.Output<string | undefined>;
    public readonly service!: pulumi.Output<string>;
    public readonly sourceArn!: pulumi.Output<string | undefined>;
    public /*out*/ readonly triggerId!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a FcTrigger resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FcTriggerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FcTriggerArgs | FcTriggerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FcTriggerState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["configMns"] = state ? state.configMns : undefined;
            resourceInputs["function"] = state ? state.function : undefined;
            resourceInputs["lastModified"] = state ? state.lastModified : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namePrefix"] = state ? state.namePrefix : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
            resourceInputs["sourceArn"] = state ? state.sourceArn : undefined;
            resourceInputs["triggerId"] = state ? state.triggerId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as FcTriggerArgs | undefined;
            if ((!args || args.function === undefined) && !opts.urn) {
                throw new Error("Missing required property 'function'");
            }
            if ((!args || args.service === undefined) && !opts.urn) {
                throw new Error("Missing required property 'service'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["configMns"] = args ? args.configMns : undefined;
            resourceInputs["function"] = args ? args.function : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namePrefix"] = args ? args.namePrefix : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["sourceArn"] = args ? args.sourceArn : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["lastModified"] = undefined /*out*/;
            resourceInputs["triggerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FcTrigger.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FcTrigger resources.
 */
export interface FcTriggerState {
    config?: pulumi.Input<string>;
    configMns?: pulumi.Input<string>;
    function?: pulumi.Input<string>;
    lastModified?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namePrefix?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    sourceArn?: pulumi.Input<string>;
    triggerId?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FcTrigger resource.
 */
export interface FcTriggerArgs {
    config?: pulumi.Input<string>;
    configMns?: pulumi.Input<string>;
    function: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namePrefix?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    service: pulumi.Input<string>;
    sourceArn?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}
