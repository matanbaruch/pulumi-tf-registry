// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KmsSecret extends pulumi.CustomResource {
    /**
     * Get an existing KmsSecret resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KmsSecretState, opts?: pulumi.CustomResourceOptions): KmsSecret {
        return new KmsSecret(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/kmsSecret:KmsSecret';

    /**
     * Returns true if the given object is an instance of KmsSecret.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KmsSecret {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KmsSecret.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dkmsInstanceId!: pulumi.Output<string | undefined>;
    public readonly enableAutomaticRotation!: pulumi.Output<boolean | undefined>;
    public readonly encryptionKeyId!: pulumi.Output<string | undefined>;
    public readonly extendedConfig!: pulumi.Output<string | undefined>;
    public readonly forceDeleteWithoutRecovery!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly plannedDeleteTime!: pulumi.Output<string>;
    public readonly policy!: pulumi.Output<string>;
    public readonly recoveryWindowInDays!: pulumi.Output<number | undefined>;
    public readonly rotationInterval!: pulumi.Output<string | undefined>;
    public readonly secretData!: pulumi.Output<string>;
    public readonly secretDataType!: pulumi.Output<string | undefined>;
    public readonly secretName!: pulumi.Output<string>;
    public readonly secretType!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.KmsSecretTimeouts | undefined>;
    public readonly versionId!: pulumi.Output<string>;
    public readonly versionStages!: pulumi.Output<string[]>;

    /**
     * Create a KmsSecret resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KmsSecretArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KmsSecretArgs | KmsSecretState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KmsSecretState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dkmsInstanceId"] = state ? state.dkmsInstanceId : undefined;
            resourceInputs["enableAutomaticRotation"] = state ? state.enableAutomaticRotation : undefined;
            resourceInputs["encryptionKeyId"] = state ? state.encryptionKeyId : undefined;
            resourceInputs["extendedConfig"] = state ? state.extendedConfig : undefined;
            resourceInputs["forceDeleteWithoutRecovery"] = state ? state.forceDeleteWithoutRecovery : undefined;
            resourceInputs["plannedDeleteTime"] = state ? state.plannedDeleteTime : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["recoveryWindowInDays"] = state ? state.recoveryWindowInDays : undefined;
            resourceInputs["rotationInterval"] = state ? state.rotationInterval : undefined;
            resourceInputs["secretData"] = state ? state.secretData : undefined;
            resourceInputs["secretDataType"] = state ? state.secretDataType : undefined;
            resourceInputs["secretName"] = state ? state.secretName : undefined;
            resourceInputs["secretType"] = state ? state.secretType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["versionId"] = state ? state.versionId : undefined;
            resourceInputs["versionStages"] = state ? state.versionStages : undefined;
        } else {
            const args = argsOrState as KmsSecretArgs | undefined;
            if ((!args || args.secretData === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretData'");
            }
            if ((!args || args.secretName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretName'");
            }
            if ((!args || args.versionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'versionId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dkmsInstanceId"] = args ? args.dkmsInstanceId : undefined;
            resourceInputs["enableAutomaticRotation"] = args ? args.enableAutomaticRotation : undefined;
            resourceInputs["encryptionKeyId"] = args ? args.encryptionKeyId : undefined;
            resourceInputs["extendedConfig"] = args ? args.extendedConfig : undefined;
            resourceInputs["forceDeleteWithoutRecovery"] = args ? args.forceDeleteWithoutRecovery : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["recoveryWindowInDays"] = args ? args.recoveryWindowInDays : undefined;
            resourceInputs["rotationInterval"] = args ? args.rotationInterval : undefined;
            resourceInputs["secretData"] = args?.secretData ? pulumi.secret(args.secretData) : undefined;
            resourceInputs["secretDataType"] = args ? args.secretDataType : undefined;
            resourceInputs["secretName"] = args ? args.secretName : undefined;
            resourceInputs["secretType"] = args ? args.secretType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["versionId"] = args ? args.versionId : undefined;
            resourceInputs["versionStages"] = args ? args.versionStages : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["plannedDeleteTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretData"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(KmsSecret.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KmsSecret resources.
 */
export interface KmsSecretState {
    arn?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dkmsInstanceId?: pulumi.Input<string>;
    enableAutomaticRotation?: pulumi.Input<boolean>;
    encryptionKeyId?: pulumi.Input<string>;
    extendedConfig?: pulumi.Input<string>;
    forceDeleteWithoutRecovery?: pulumi.Input<boolean>;
    plannedDeleteTime?: pulumi.Input<string>;
    policy?: pulumi.Input<string>;
    recoveryWindowInDays?: pulumi.Input<number>;
    rotationInterval?: pulumi.Input<string>;
    secretData?: pulumi.Input<string>;
    secretDataType?: pulumi.Input<string>;
    secretName?: pulumi.Input<string>;
    secretType?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.KmsSecretTimeouts>;
    versionId?: pulumi.Input<string>;
    versionStages?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a KmsSecret resource.
 */
export interface KmsSecretArgs {
    description?: pulumi.Input<string>;
    dkmsInstanceId?: pulumi.Input<string>;
    enableAutomaticRotation?: pulumi.Input<boolean>;
    encryptionKeyId?: pulumi.Input<string>;
    extendedConfig?: pulumi.Input<string>;
    forceDeleteWithoutRecovery?: pulumi.Input<boolean>;
    policy?: pulumi.Input<string>;
    recoveryWindowInDays?: pulumi.Input<number>;
    rotationInterval?: pulumi.Input<string>;
    secretData: pulumi.Input<string>;
    secretDataType?: pulumi.Input<string>;
    secretName: pulumi.Input<string>;
    secretType?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.KmsSecretTimeouts>;
    versionId: pulumi.Input<string>;
    versionStages?: pulumi.Input<pulumi.Input<string>[]>;
}
