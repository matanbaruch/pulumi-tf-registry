// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CmsGroupMetricRule extends pulumi.CustomResource {
    /**
     * Get an existing CmsGroupMetricRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CmsGroupMetricRuleState, opts?: pulumi.CustomResourceOptions): CmsGroupMetricRule {
        return new CmsGroupMetricRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/cmsGroupMetricRule:CmsGroupMetricRule';

    /**
     * Returns true if the given object is an instance of CmsGroupMetricRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CmsGroupMetricRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CmsGroupMetricRule.__pulumiType;
    }

    public readonly category!: pulumi.Output<string | undefined>;
    public readonly contactGroups!: pulumi.Output<string>;
    public readonly dimensions!: pulumi.Output<string>;
    public readonly effectiveInterval!: pulumi.Output<string | undefined>;
    public readonly emailSubject!: pulumi.Output<string>;
    public readonly escalations!: pulumi.Output<outputs.CmsGroupMetricRuleEscalations>;
    public readonly groupId!: pulumi.Output<string>;
    public readonly groupMetricRuleName!: pulumi.Output<string>;
    public readonly interval!: pulumi.Output<string | undefined>;
    public readonly metricName!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string>;
    public readonly noEffectiveInterval!: pulumi.Output<string | undefined>;
    public readonly period!: pulumi.Output<number>;
    public readonly ruleId!: pulumi.Output<string>;
    public readonly silenceTime!: pulumi.Output<number>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly targets!: pulumi.Output<outputs.CmsGroupMetricRuleTarget[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.CmsGroupMetricRuleTimeouts | undefined>;
    public readonly webhook!: pulumi.Output<string | undefined>;

    /**
     * Create a CmsGroupMetricRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CmsGroupMetricRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CmsGroupMetricRuleArgs | CmsGroupMetricRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CmsGroupMetricRuleState | undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["contactGroups"] = state ? state.contactGroups : undefined;
            resourceInputs["dimensions"] = state ? state.dimensions : undefined;
            resourceInputs["effectiveInterval"] = state ? state.effectiveInterval : undefined;
            resourceInputs["emailSubject"] = state ? state.emailSubject : undefined;
            resourceInputs["escalations"] = state ? state.escalations : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["groupMetricRuleName"] = state ? state.groupMetricRuleName : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["metricName"] = state ? state.metricName : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["noEffectiveInterval"] = state ? state.noEffectiveInterval : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["ruleId"] = state ? state.ruleId : undefined;
            resourceInputs["silenceTime"] = state ? state.silenceTime : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["webhook"] = state ? state.webhook : undefined;
        } else {
            const args = argsOrState as CmsGroupMetricRuleArgs | undefined;
            if ((!args || args.escalations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'escalations'");
            }
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.groupMetricRuleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupMetricRuleName'");
            }
            if ((!args || args.metricName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metricName'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.ruleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleId'");
            }
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["contactGroups"] = args ? args.contactGroups : undefined;
            resourceInputs["dimensions"] = args ? args.dimensions : undefined;
            resourceInputs["effectiveInterval"] = args ? args.effectiveInterval : undefined;
            resourceInputs["emailSubject"] = args ? args.emailSubject : undefined;
            resourceInputs["escalations"] = args ? args.escalations : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["groupMetricRuleName"] = args ? args.groupMetricRuleName : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["metricName"] = args ? args.metricName : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["noEffectiveInterval"] = args ? args.noEffectiveInterval : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["ruleId"] = args ? args.ruleId : undefined;
            resourceInputs["silenceTime"] = args ? args.silenceTime : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["webhook"] = args ? args.webhook : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CmsGroupMetricRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CmsGroupMetricRule resources.
 */
export interface CmsGroupMetricRuleState {
    category?: pulumi.Input<string>;
    contactGroups?: pulumi.Input<string>;
    dimensions?: pulumi.Input<string>;
    effectiveInterval?: pulumi.Input<string>;
    emailSubject?: pulumi.Input<string>;
    escalations?: pulumi.Input<inputs.CmsGroupMetricRuleEscalations>;
    groupId?: pulumi.Input<string>;
    groupMetricRuleName?: pulumi.Input<string>;
    interval?: pulumi.Input<string>;
    metricName?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    noEffectiveInterval?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    ruleId?: pulumi.Input<string>;
    silenceTime?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    targets?: pulumi.Input<pulumi.Input<inputs.CmsGroupMetricRuleTarget>[]>;
    timeouts?: pulumi.Input<inputs.CmsGroupMetricRuleTimeouts>;
    webhook?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CmsGroupMetricRule resource.
 */
export interface CmsGroupMetricRuleArgs {
    category?: pulumi.Input<string>;
    contactGroups?: pulumi.Input<string>;
    dimensions?: pulumi.Input<string>;
    effectiveInterval?: pulumi.Input<string>;
    emailSubject?: pulumi.Input<string>;
    escalations: pulumi.Input<inputs.CmsGroupMetricRuleEscalations>;
    groupId: pulumi.Input<string>;
    groupMetricRuleName: pulumi.Input<string>;
    interval?: pulumi.Input<string>;
    metricName: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    noEffectiveInterval?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    ruleId: pulumi.Input<string>;
    silenceTime?: pulumi.Input<number>;
    targets?: pulumi.Input<pulumi.Input<inputs.CmsGroupMetricRuleTarget>[]>;
    timeouts?: pulumi.Input<inputs.CmsGroupMetricRuleTimeouts>;
    webhook?: pulumi.Input<string>;
}
