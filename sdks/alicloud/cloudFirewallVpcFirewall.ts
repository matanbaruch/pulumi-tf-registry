// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudFirewallVpcFirewall extends pulumi.CustomResource {
    /**
     * Get an existing CloudFirewallVpcFirewall resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudFirewallVpcFirewallState, opts?: pulumi.CustomResourceOptions): CloudFirewallVpcFirewall {
        return new CloudFirewallVpcFirewall(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/cloudFirewallVpcFirewall:CloudFirewallVpcFirewall';

    /**
     * Returns true if the given object is an instance of CloudFirewallVpcFirewall.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudFirewallVpcFirewall {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudFirewallVpcFirewall.__pulumiType;
    }

    public /*out*/ readonly bandwidth!: pulumi.Output<number>;
    public /*out*/ readonly connectType!: pulumi.Output<string>;
    public readonly lang!: pulumi.Output<string | undefined>;
    public readonly localVpc!: pulumi.Output<outputs.CloudFirewallVpcFirewallLocalVpc>;
    public readonly memberUid!: pulumi.Output<string | undefined>;
    public readonly peerVpc!: pulumi.Output<outputs.CloudFirewallVpcFirewallPeerVpc>;
    public /*out*/ readonly regionStatus!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CloudFirewallVpcFirewallTimeouts | undefined>;
    public /*out*/ readonly vpcFirewallId!: pulumi.Output<string>;
    public readonly vpcFirewallName!: pulumi.Output<string>;

    /**
     * Create a CloudFirewallVpcFirewall resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudFirewallVpcFirewallArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudFirewallVpcFirewallArgs | CloudFirewallVpcFirewallState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudFirewallVpcFirewallState | undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["connectType"] = state ? state.connectType : undefined;
            resourceInputs["lang"] = state ? state.lang : undefined;
            resourceInputs["localVpc"] = state ? state.localVpc : undefined;
            resourceInputs["memberUid"] = state ? state.memberUid : undefined;
            resourceInputs["peerVpc"] = state ? state.peerVpc : undefined;
            resourceInputs["regionStatus"] = state ? state.regionStatus : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcFirewallId"] = state ? state.vpcFirewallId : undefined;
            resourceInputs["vpcFirewallName"] = state ? state.vpcFirewallName : undefined;
        } else {
            const args = argsOrState as CloudFirewallVpcFirewallArgs | undefined;
            if ((!args || args.localVpc === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localVpc'");
            }
            if ((!args || args.peerVpc === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerVpc'");
            }
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            if ((!args || args.vpcFirewallName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcFirewallName'");
            }
            resourceInputs["lang"] = args ? args.lang : undefined;
            resourceInputs["localVpc"] = args ? args.localVpc : undefined;
            resourceInputs["memberUid"] = args ? args.memberUid : undefined;
            resourceInputs["peerVpc"] = args ? args.peerVpc : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcFirewallName"] = args ? args.vpcFirewallName : undefined;
            resourceInputs["bandwidth"] = undefined /*out*/;
            resourceInputs["connectType"] = undefined /*out*/;
            resourceInputs["regionStatus"] = undefined /*out*/;
            resourceInputs["vpcFirewallId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudFirewallVpcFirewall.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudFirewallVpcFirewall resources.
 */
export interface CloudFirewallVpcFirewallState {
    bandwidth?: pulumi.Input<number>;
    connectType?: pulumi.Input<string>;
    lang?: pulumi.Input<string>;
    localVpc?: pulumi.Input<inputs.CloudFirewallVpcFirewallLocalVpc>;
    memberUid?: pulumi.Input<string>;
    peerVpc?: pulumi.Input<inputs.CloudFirewallVpcFirewallPeerVpc>;
    regionStatus?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CloudFirewallVpcFirewallTimeouts>;
    vpcFirewallId?: pulumi.Input<string>;
    vpcFirewallName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudFirewallVpcFirewall resource.
 */
export interface CloudFirewallVpcFirewallArgs {
    lang?: pulumi.Input<string>;
    localVpc: pulumi.Input<inputs.CloudFirewallVpcFirewallLocalVpc>;
    memberUid?: pulumi.Input<string>;
    peerVpc: pulumi.Input<inputs.CloudFirewallVpcFirewallPeerVpc>;
    status: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CloudFirewallVpcFirewallTimeouts>;
    vpcFirewallName: pulumi.Input<string>;
}
