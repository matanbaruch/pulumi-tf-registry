// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GpdbRemoteAdbDataSource extends pulumi.CustomResource {
    /**
     * Get an existing GpdbRemoteAdbDataSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GpdbRemoteAdbDataSourceState, opts?: pulumi.CustomResourceOptions): GpdbRemoteAdbDataSource {
        return new GpdbRemoteAdbDataSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/gpdbRemoteAdbDataSource:GpdbRemoteAdbDataSource';

    /**
     * Returns true if the given object is an instance of GpdbRemoteAdbDataSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GpdbRemoteAdbDataSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GpdbRemoteAdbDataSource.__pulumiType;
    }

    public readonly dataSourceName!: pulumi.Output<string | undefined>;
    public readonly localDatabase!: pulumi.Output<string>;
    public readonly localDbInstanceId!: pulumi.Output<string>;
    public readonly managerUserName!: pulumi.Output<string>;
    public readonly managerUserPassword!: pulumi.Output<string>;
    public /*out*/ readonly remoteAdbDataSourceId!: pulumi.Output<number>;
    public readonly remoteDatabase!: pulumi.Output<string>;
    public readonly remoteDbInstanceId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.GpdbRemoteAdbDataSourceTimeouts | undefined>;
    public readonly userName!: pulumi.Output<string>;
    public readonly userPassword!: pulumi.Output<string>;

    /**
     * Create a GpdbRemoteAdbDataSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GpdbRemoteAdbDataSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GpdbRemoteAdbDataSourceArgs | GpdbRemoteAdbDataSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GpdbRemoteAdbDataSourceState | undefined;
            resourceInputs["dataSourceName"] = state ? state.dataSourceName : undefined;
            resourceInputs["localDatabase"] = state ? state.localDatabase : undefined;
            resourceInputs["localDbInstanceId"] = state ? state.localDbInstanceId : undefined;
            resourceInputs["managerUserName"] = state ? state.managerUserName : undefined;
            resourceInputs["managerUserPassword"] = state ? state.managerUserPassword : undefined;
            resourceInputs["remoteAdbDataSourceId"] = state ? state.remoteAdbDataSourceId : undefined;
            resourceInputs["remoteDatabase"] = state ? state.remoteDatabase : undefined;
            resourceInputs["remoteDbInstanceId"] = state ? state.remoteDbInstanceId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
            resourceInputs["userPassword"] = state ? state.userPassword : undefined;
        } else {
            const args = argsOrState as GpdbRemoteAdbDataSourceArgs | undefined;
            if ((!args || args.localDatabase === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localDatabase'");
            }
            if ((!args || args.localDbInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localDbInstanceId'");
            }
            if ((!args || args.managerUserName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managerUserName'");
            }
            if ((!args || args.managerUserPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managerUserPassword'");
            }
            if ((!args || args.remoteDatabase === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteDatabase'");
            }
            if ((!args || args.remoteDbInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteDbInstanceId'");
            }
            if ((!args || args.userName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            if ((!args || args.userPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userPassword'");
            }
            resourceInputs["dataSourceName"] = args ? args.dataSourceName : undefined;
            resourceInputs["localDatabase"] = args ? args.localDatabase : undefined;
            resourceInputs["localDbInstanceId"] = args ? args.localDbInstanceId : undefined;
            resourceInputs["managerUserName"] = args ? args.managerUserName : undefined;
            resourceInputs["managerUserPassword"] = args?.managerUserPassword ? pulumi.secret(args.managerUserPassword) : undefined;
            resourceInputs["remoteDatabase"] = args ? args.remoteDatabase : undefined;
            resourceInputs["remoteDbInstanceId"] = args ? args.remoteDbInstanceId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["userPassword"] = args?.userPassword ? pulumi.secret(args.userPassword) : undefined;
            resourceInputs["remoteAdbDataSourceId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["managerUserPassword", "userPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(GpdbRemoteAdbDataSource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GpdbRemoteAdbDataSource resources.
 */
export interface GpdbRemoteAdbDataSourceState {
    dataSourceName?: pulumi.Input<string>;
    localDatabase?: pulumi.Input<string>;
    localDbInstanceId?: pulumi.Input<string>;
    managerUserName?: pulumi.Input<string>;
    managerUserPassword?: pulumi.Input<string>;
    remoteAdbDataSourceId?: pulumi.Input<number>;
    remoteDatabase?: pulumi.Input<string>;
    remoteDbInstanceId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GpdbRemoteAdbDataSourceTimeouts>;
    userName?: pulumi.Input<string>;
    userPassword?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GpdbRemoteAdbDataSource resource.
 */
export interface GpdbRemoteAdbDataSourceArgs {
    dataSourceName?: pulumi.Input<string>;
    localDatabase: pulumi.Input<string>;
    localDbInstanceId: pulumi.Input<string>;
    managerUserName: pulumi.Input<string>;
    managerUserPassword: pulumi.Input<string>;
    remoteDatabase: pulumi.Input<string>;
    remoteDbInstanceId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GpdbRemoteAdbDataSourceTimeouts>;
    userName: pulumi.Input<string>;
    userPassword: pulumi.Input<string>;
}
