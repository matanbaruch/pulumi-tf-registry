// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CenTransitRouterMulticastDomain extends pulumi.CustomResource {
    /**
     * Get an existing CenTransitRouterMulticastDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CenTransitRouterMulticastDomainState, opts?: pulumi.CustomResourceOptions): CenTransitRouterMulticastDomain {
        return new CenTransitRouterMulticastDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/cenTransitRouterMulticastDomain:CenTransitRouterMulticastDomain';

    /**
     * Returns true if the given object is an instance of CenTransitRouterMulticastDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CenTransitRouterMulticastDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CenTransitRouterMulticastDomain.__pulumiType;
    }

    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.CenTransitRouterMulticastDomainTimeouts | undefined>;
    public readonly transitRouterId!: pulumi.Output<string>;
    public readonly transitRouterMulticastDomainDescription!: pulumi.Output<string | undefined>;
    public readonly transitRouterMulticastDomainName!: pulumi.Output<string | undefined>;

    /**
     * Create a CenTransitRouterMulticastDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CenTransitRouterMulticastDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CenTransitRouterMulticastDomainArgs | CenTransitRouterMulticastDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CenTransitRouterMulticastDomainState | undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["transitRouterId"] = state ? state.transitRouterId : undefined;
            resourceInputs["transitRouterMulticastDomainDescription"] = state ? state.transitRouterMulticastDomainDescription : undefined;
            resourceInputs["transitRouterMulticastDomainName"] = state ? state.transitRouterMulticastDomainName : undefined;
        } else {
            const args = argsOrState as CenTransitRouterMulticastDomainArgs | undefined;
            if ((!args || args.transitRouterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'transitRouterId'");
            }
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["transitRouterId"] = args ? args.transitRouterId : undefined;
            resourceInputs["transitRouterMulticastDomainDescription"] = args ? args.transitRouterMulticastDomainDescription : undefined;
            resourceInputs["transitRouterMulticastDomainName"] = args ? args.transitRouterMulticastDomainName : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CenTransitRouterMulticastDomain.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CenTransitRouterMulticastDomain resources.
 */
export interface CenTransitRouterMulticastDomainState {
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.CenTransitRouterMulticastDomainTimeouts>;
    transitRouterId?: pulumi.Input<string>;
    transitRouterMulticastDomainDescription?: pulumi.Input<string>;
    transitRouterMulticastDomainName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CenTransitRouterMulticastDomain resource.
 */
export interface CenTransitRouterMulticastDomainArgs {
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.CenTransitRouterMulticastDomainTimeouts>;
    transitRouterId: pulumi.Input<string>;
    transitRouterMulticastDomainDescription?: pulumi.Input<string>;
    transitRouterMulticastDomainName?: pulumi.Input<string>;
}
