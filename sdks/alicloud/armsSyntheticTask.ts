// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ArmsSyntheticTask extends pulumi.CustomResource {
    /**
     * Get an existing ArmsSyntheticTask resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ArmsSyntheticTaskState, opts?: pulumi.CustomResourceOptions): ArmsSyntheticTask {
        return new ArmsSyntheticTask(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/armsSyntheticTask:ArmsSyntheticTask';

    /**
     * Returns true if the given object is an instance of ArmsSyntheticTask.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ArmsSyntheticTask {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ArmsSyntheticTask.__pulumiType;
    }

    public readonly availableAssertions!: pulumi.Output<outputs.ArmsSyntheticTaskAvailableAssertion[] | undefined>;
    public readonly commonSetting!: pulumi.Output<outputs.ArmsSyntheticTaskCommonSetting | undefined>;
    public readonly customPeriod!: pulumi.Output<outputs.ArmsSyntheticTaskCustomPeriod | undefined>;
    public readonly frequency!: pulumi.Output<string>;
    public readonly monitorCategory!: pulumi.Output<number>;
    public readonly monitorConf!: pulumi.Output<outputs.ArmsSyntheticTaskMonitorConf>;
    public readonly monitors!: pulumi.Output<outputs.ArmsSyntheticTaskMonitor[]>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly syntheticTaskName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly taskType!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.ArmsSyntheticTaskTimeouts | undefined>;

    /**
     * Create a ArmsSyntheticTask resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ArmsSyntheticTaskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ArmsSyntheticTaskArgs | ArmsSyntheticTaskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ArmsSyntheticTaskState | undefined;
            resourceInputs["availableAssertions"] = state ? state.availableAssertions : undefined;
            resourceInputs["commonSetting"] = state ? state.commonSetting : undefined;
            resourceInputs["customPeriod"] = state ? state.customPeriod : undefined;
            resourceInputs["frequency"] = state ? state.frequency : undefined;
            resourceInputs["monitorCategory"] = state ? state.monitorCategory : undefined;
            resourceInputs["monitorConf"] = state ? state.monitorConf : undefined;
            resourceInputs["monitors"] = state ? state.monitors : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["syntheticTaskName"] = state ? state.syntheticTaskName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["taskType"] = state ? state.taskType : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ArmsSyntheticTaskArgs | undefined;
            if ((!args || args.frequency === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frequency'");
            }
            if ((!args || args.monitorCategory === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitorCategory'");
            }
            if ((!args || args.monitorConf === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitorConf'");
            }
            if ((!args || args.monitors === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitors'");
            }
            if ((!args || args.syntheticTaskName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'syntheticTaskName'");
            }
            if ((!args || args.taskType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'taskType'");
            }
            resourceInputs["availableAssertions"] = args ? args.availableAssertions : undefined;
            resourceInputs["commonSetting"] = args ? args.commonSetting : undefined;
            resourceInputs["customPeriod"] = args ? args.customPeriod : undefined;
            resourceInputs["frequency"] = args ? args.frequency : undefined;
            resourceInputs["monitorCategory"] = args ? args.monitorCategory : undefined;
            resourceInputs["monitorConf"] = args ? args.monitorConf : undefined;
            resourceInputs["monitors"] = args ? args.monitors : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["syntheticTaskName"] = args ? args.syntheticTaskName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["taskType"] = args ? args.taskType : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ArmsSyntheticTask.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ArmsSyntheticTask resources.
 */
export interface ArmsSyntheticTaskState {
    availableAssertions?: pulumi.Input<pulumi.Input<inputs.ArmsSyntheticTaskAvailableAssertion>[]>;
    commonSetting?: pulumi.Input<inputs.ArmsSyntheticTaskCommonSetting>;
    customPeriod?: pulumi.Input<inputs.ArmsSyntheticTaskCustomPeriod>;
    frequency?: pulumi.Input<string>;
    monitorCategory?: pulumi.Input<number>;
    monitorConf?: pulumi.Input<inputs.ArmsSyntheticTaskMonitorConf>;
    monitors?: pulumi.Input<pulumi.Input<inputs.ArmsSyntheticTaskMonitor>[]>;
    resourceGroupId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    syntheticTaskName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taskType?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.ArmsSyntheticTaskTimeouts>;
}

/**
 * The set of arguments for constructing a ArmsSyntheticTask resource.
 */
export interface ArmsSyntheticTaskArgs {
    availableAssertions?: pulumi.Input<pulumi.Input<inputs.ArmsSyntheticTaskAvailableAssertion>[]>;
    commonSetting?: pulumi.Input<inputs.ArmsSyntheticTaskCommonSetting>;
    customPeriod?: pulumi.Input<inputs.ArmsSyntheticTaskCustomPeriod>;
    frequency: pulumi.Input<string>;
    monitorCategory: pulumi.Input<number>;
    monitorConf: pulumi.Input<inputs.ArmsSyntheticTaskMonitorConf>;
    monitors: pulumi.Input<pulumi.Input<inputs.ArmsSyntheticTaskMonitor>[]>;
    resourceGroupId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    syntheticTaskName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taskType: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.ArmsSyntheticTaskTimeouts>;
}
