// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EmrCluster extends pulumi.CustomResource {
    /**
     * Get an existing EmrCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EmrClusterState, opts?: pulumi.CustomResourceOptions): EmrCluster {
        return new EmrCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/emrCluster:EmrCluster';

    /**
     * Returns true if the given object is an instance of EmrCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EmrCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EmrCluster.__pulumiType;
    }

    public readonly bootstrapActions!: pulumi.Output<outputs.EmrClusterBootstrapAction[] | undefined>;
    public readonly chargeType!: pulumi.Output<string | undefined>;
    public readonly clusterType!: pulumi.Output<string>;
    public readonly configs!: pulumi.Output<outputs.EmrClusterConfig[] | undefined>;
    public readonly depositType!: pulumi.Output<string | undefined>;
    public readonly easEnable!: pulumi.Output<boolean | undefined>;
    public readonly emrVer!: pulumi.Output<string>;
    public readonly highAvailabilityEnable!: pulumi.Output<boolean | undefined>;
    public readonly hostGroups!: pulumi.Output<outputs.EmrClusterHostGroup[] | undefined>;
    public readonly isOpenPublicIp!: pulumi.Output<boolean | undefined>;
    public readonly keyPairName!: pulumi.Output<string | undefined>;
    public readonly masterPwd!: pulumi.Output<string | undefined>;
    public readonly metaStoreConf!: pulumi.Output<outputs.EmrClusterMetaStoreConf | undefined>;
    public readonly metaStoreType!: pulumi.Output<string>;
    public readonly modifyClusterServiceConfig!: pulumi.Output<outputs.EmrClusterModifyClusterServiceConfig | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly optionSoftwareLists!: pulumi.Output<string[] | undefined>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly relatedClusterId!: pulumi.Output<string | undefined>;
    public readonly resourceGroupId!: pulumi.Output<string | undefined>;
    public readonly securityGroupId!: pulumi.Output<string | undefined>;
    public readonly sshEnable!: pulumi.Output<boolean | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.EmrClusterTimeouts | undefined>;
    public readonly useLocalMetadb!: pulumi.Output<boolean | undefined>;
    public readonly userDefinedEmrEcsRole!: pulumi.Output<string | undefined>;
    public readonly vswitchId!: pulumi.Output<string | undefined>;
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a EmrCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EmrClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EmrClusterArgs | EmrClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EmrClusterState | undefined;
            resourceInputs["bootstrapActions"] = state ? state.bootstrapActions : undefined;
            resourceInputs["chargeType"] = state ? state.chargeType : undefined;
            resourceInputs["clusterType"] = state ? state.clusterType : undefined;
            resourceInputs["configs"] = state ? state.configs : undefined;
            resourceInputs["depositType"] = state ? state.depositType : undefined;
            resourceInputs["easEnable"] = state ? state.easEnable : undefined;
            resourceInputs["emrVer"] = state ? state.emrVer : undefined;
            resourceInputs["highAvailabilityEnable"] = state ? state.highAvailabilityEnable : undefined;
            resourceInputs["hostGroups"] = state ? state.hostGroups : undefined;
            resourceInputs["isOpenPublicIp"] = state ? state.isOpenPublicIp : undefined;
            resourceInputs["keyPairName"] = state ? state.keyPairName : undefined;
            resourceInputs["masterPwd"] = state ? state.masterPwd : undefined;
            resourceInputs["metaStoreConf"] = state ? state.metaStoreConf : undefined;
            resourceInputs["metaStoreType"] = state ? state.metaStoreType : undefined;
            resourceInputs["modifyClusterServiceConfig"] = state ? state.modifyClusterServiceConfig : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["optionSoftwareLists"] = state ? state.optionSoftwareLists : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["relatedClusterId"] = state ? state.relatedClusterId : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["sshEnable"] = state ? state.sshEnable : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["useLocalMetadb"] = state ? state.useLocalMetadb : undefined;
            resourceInputs["userDefinedEmrEcsRole"] = state ? state.userDefinedEmrEcsRole : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as EmrClusterArgs | undefined;
            if ((!args || args.clusterType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterType'");
            }
            if ((!args || args.emrVer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'emrVer'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["bootstrapActions"] = args ? args.bootstrapActions : undefined;
            resourceInputs["chargeType"] = args ? args.chargeType : undefined;
            resourceInputs["clusterType"] = args ? args.clusterType : undefined;
            resourceInputs["configs"] = args ? args.configs : undefined;
            resourceInputs["depositType"] = args ? args.depositType : undefined;
            resourceInputs["easEnable"] = args ? args.easEnable : undefined;
            resourceInputs["emrVer"] = args ? args.emrVer : undefined;
            resourceInputs["highAvailabilityEnable"] = args ? args.highAvailabilityEnable : undefined;
            resourceInputs["hostGroups"] = args ? args.hostGroups : undefined;
            resourceInputs["isOpenPublicIp"] = args ? args.isOpenPublicIp : undefined;
            resourceInputs["keyPairName"] = args ? args.keyPairName : undefined;
            resourceInputs["masterPwd"] = args ? args.masterPwd : undefined;
            resourceInputs["metaStoreConf"] = args ? args.metaStoreConf : undefined;
            resourceInputs["metaStoreType"] = args ? args.metaStoreType : undefined;
            resourceInputs["modifyClusterServiceConfig"] = args ? args.modifyClusterServiceConfig : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["optionSoftwareLists"] = args ? args.optionSoftwareLists : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["relatedClusterId"] = args ? args.relatedClusterId : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["sshEnable"] = args ? args.sshEnable : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["useLocalMetadb"] = args ? args.useLocalMetadb : undefined;
            resourceInputs["userDefinedEmrEcsRole"] = args ? args.userDefinedEmrEcsRole : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EmrCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EmrCluster resources.
 */
export interface EmrClusterState {
    bootstrapActions?: pulumi.Input<pulumi.Input<inputs.EmrClusterBootstrapAction>[]>;
    chargeType?: pulumi.Input<string>;
    clusterType?: pulumi.Input<string>;
    configs?: pulumi.Input<pulumi.Input<inputs.EmrClusterConfig>[]>;
    depositType?: pulumi.Input<string>;
    easEnable?: pulumi.Input<boolean>;
    emrVer?: pulumi.Input<string>;
    highAvailabilityEnable?: pulumi.Input<boolean>;
    hostGroups?: pulumi.Input<pulumi.Input<inputs.EmrClusterHostGroup>[]>;
    isOpenPublicIp?: pulumi.Input<boolean>;
    keyPairName?: pulumi.Input<string>;
    masterPwd?: pulumi.Input<string>;
    metaStoreConf?: pulumi.Input<inputs.EmrClusterMetaStoreConf>;
    metaStoreType?: pulumi.Input<string>;
    modifyClusterServiceConfig?: pulumi.Input<inputs.EmrClusterModifyClusterServiceConfig>;
    name?: pulumi.Input<string>;
    optionSoftwareLists?: pulumi.Input<pulumi.Input<string>[]>;
    period?: pulumi.Input<number>;
    relatedClusterId?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    sshEnable?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.EmrClusterTimeouts>;
    useLocalMetadb?: pulumi.Input<boolean>;
    userDefinedEmrEcsRole?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EmrCluster resource.
 */
export interface EmrClusterArgs {
    bootstrapActions?: pulumi.Input<pulumi.Input<inputs.EmrClusterBootstrapAction>[]>;
    chargeType?: pulumi.Input<string>;
    clusterType: pulumi.Input<string>;
    configs?: pulumi.Input<pulumi.Input<inputs.EmrClusterConfig>[]>;
    depositType?: pulumi.Input<string>;
    easEnable?: pulumi.Input<boolean>;
    emrVer: pulumi.Input<string>;
    highAvailabilityEnable?: pulumi.Input<boolean>;
    hostGroups?: pulumi.Input<pulumi.Input<inputs.EmrClusterHostGroup>[]>;
    isOpenPublicIp?: pulumi.Input<boolean>;
    keyPairName?: pulumi.Input<string>;
    masterPwd?: pulumi.Input<string>;
    metaStoreConf?: pulumi.Input<inputs.EmrClusterMetaStoreConf>;
    metaStoreType?: pulumi.Input<string>;
    modifyClusterServiceConfig?: pulumi.Input<inputs.EmrClusterModifyClusterServiceConfig>;
    name?: pulumi.Input<string>;
    optionSoftwareLists?: pulumi.Input<pulumi.Input<string>[]>;
    period?: pulumi.Input<number>;
    relatedClusterId?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    sshEnable?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.EmrClusterTimeouts>;
    useLocalMetadb?: pulumi.Input<boolean>;
    userDefinedEmrEcsRole?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
    zoneId: pulumi.Input<string>;
}
