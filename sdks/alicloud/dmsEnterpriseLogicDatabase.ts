// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DmsEnterpriseLogicDatabase extends pulumi.CustomResource {
    /**
     * Get an existing DmsEnterpriseLogicDatabase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DmsEnterpriseLogicDatabaseState, opts?: pulumi.CustomResourceOptions): DmsEnterpriseLogicDatabase {
        return new DmsEnterpriseLogicDatabase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/dmsEnterpriseLogicDatabase:DmsEnterpriseLogicDatabase';

    /**
     * Returns true if the given object is an instance of DmsEnterpriseLogicDatabase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DmsEnterpriseLogicDatabase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DmsEnterpriseLogicDatabase.__pulumiType;
    }

    public readonly alias!: pulumi.Output<string>;
    public readonly databaseIds!: pulumi.Output<string[]>;
    public /*out*/ readonly dbType!: pulumi.Output<string>;
    public /*out*/ readonly envType!: pulumi.Output<string>;
    public /*out*/ readonly logic!: pulumi.Output<boolean>;
    public readonly logicDatabaseId!: pulumi.Output<string>;
    public /*out*/ readonly ownerIdLists!: pulumi.Output<string[]>;
    public /*out*/ readonly ownerNameLists!: pulumi.Output<string[]>;
    public /*out*/ readonly schemaName!: pulumi.Output<string>;
    public /*out*/ readonly searchName!: pulumi.Output<string>;

    /**
     * Create a DmsEnterpriseLogicDatabase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DmsEnterpriseLogicDatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DmsEnterpriseLogicDatabaseArgs | DmsEnterpriseLogicDatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DmsEnterpriseLogicDatabaseState | undefined;
            resourceInputs["alias"] = state ? state.alias : undefined;
            resourceInputs["databaseIds"] = state ? state.databaseIds : undefined;
            resourceInputs["dbType"] = state ? state.dbType : undefined;
            resourceInputs["envType"] = state ? state.envType : undefined;
            resourceInputs["logic"] = state ? state.logic : undefined;
            resourceInputs["logicDatabaseId"] = state ? state.logicDatabaseId : undefined;
            resourceInputs["ownerIdLists"] = state ? state.ownerIdLists : undefined;
            resourceInputs["ownerNameLists"] = state ? state.ownerNameLists : undefined;
            resourceInputs["schemaName"] = state ? state.schemaName : undefined;
            resourceInputs["searchName"] = state ? state.searchName : undefined;
        } else {
            const args = argsOrState as DmsEnterpriseLogicDatabaseArgs | undefined;
            if ((!args || args.alias === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alias'");
            }
            if ((!args || args.databaseIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseIds'");
            }
            resourceInputs["alias"] = args ? args.alias : undefined;
            resourceInputs["databaseIds"] = args ? args.databaseIds : undefined;
            resourceInputs["logicDatabaseId"] = args ? args.logicDatabaseId : undefined;
            resourceInputs["dbType"] = undefined /*out*/;
            resourceInputs["envType"] = undefined /*out*/;
            resourceInputs["logic"] = undefined /*out*/;
            resourceInputs["ownerIdLists"] = undefined /*out*/;
            resourceInputs["ownerNameLists"] = undefined /*out*/;
            resourceInputs["schemaName"] = undefined /*out*/;
            resourceInputs["searchName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DmsEnterpriseLogicDatabase.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DmsEnterpriseLogicDatabase resources.
 */
export interface DmsEnterpriseLogicDatabaseState {
    alias?: pulumi.Input<string>;
    databaseIds?: pulumi.Input<pulumi.Input<string>[]>;
    dbType?: pulumi.Input<string>;
    envType?: pulumi.Input<string>;
    logic?: pulumi.Input<boolean>;
    logicDatabaseId?: pulumi.Input<string>;
    ownerIdLists?: pulumi.Input<pulumi.Input<string>[]>;
    ownerNameLists?: pulumi.Input<pulumi.Input<string>[]>;
    schemaName?: pulumi.Input<string>;
    searchName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DmsEnterpriseLogicDatabase resource.
 */
export interface DmsEnterpriseLogicDatabaseArgs {
    alias: pulumi.Input<string>;
    databaseIds: pulumi.Input<pulumi.Input<string>[]>;
    logicDatabaseId?: pulumi.Input<string>;
}
