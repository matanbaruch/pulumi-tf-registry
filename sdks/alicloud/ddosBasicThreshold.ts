// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosBasicThreshold extends pulumi.CustomResource {
    /**
     * Get an existing DdosBasicThreshold resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosBasicThresholdState, opts?: pulumi.CustomResourceOptions): DdosBasicThreshold {
        return new DdosBasicThreshold(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/ddosBasicThreshold:DdosBasicThreshold';

    /**
     * Returns true if the given object is an instance of DdosBasicThreshold.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosBasicThreshold {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosBasicThreshold.__pulumiType;
    }

    public readonly bps!: pulumi.Output<number>;
    public readonly instanceId!: pulumi.Output<string>;
    public readonly instanceType!: pulumi.Output<string>;
    public readonly internetIp!: pulumi.Output<string>;
    public /*out*/ readonly maxBps!: pulumi.Output<number>;
    public /*out*/ readonly maxPps!: pulumi.Output<number>;
    public readonly pps!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.DdosBasicThresholdTimeouts | undefined>;

    /**
     * Create a DdosBasicThreshold resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosBasicThresholdArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosBasicThresholdArgs | DdosBasicThresholdState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosBasicThresholdState | undefined;
            resourceInputs["bps"] = state ? state.bps : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["internetIp"] = state ? state.internetIp : undefined;
            resourceInputs["maxBps"] = state ? state.maxBps : undefined;
            resourceInputs["maxPps"] = state ? state.maxPps : undefined;
            resourceInputs["pps"] = state ? state.pps : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DdosBasicThresholdArgs | undefined;
            if ((!args || args.bps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bps'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.instanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceType'");
            }
            if ((!args || args.internetIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'internetIp'");
            }
            if ((!args || args.pps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pps'");
            }
            resourceInputs["bps"] = args ? args.bps : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["internetIp"] = args ? args.internetIp : undefined;
            resourceInputs["pps"] = args ? args.pps : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["maxBps"] = undefined /*out*/;
            resourceInputs["maxPps"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosBasicThreshold.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosBasicThreshold resources.
 */
export interface DdosBasicThresholdState {
    bps?: pulumi.Input<number>;
    instanceId?: pulumi.Input<string>;
    instanceType?: pulumi.Input<string>;
    internetIp?: pulumi.Input<string>;
    maxBps?: pulumi.Input<number>;
    maxPps?: pulumi.Input<number>;
    pps?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.DdosBasicThresholdTimeouts>;
}

/**
 * The set of arguments for constructing a DdosBasicThreshold resource.
 */
export interface DdosBasicThresholdArgs {
    bps: pulumi.Input<number>;
    instanceId: pulumi.Input<string>;
    instanceType: pulumi.Input<string>;
    internetIp: pulumi.Input<string>;
    pps: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.DdosBasicThresholdTimeouts>;
}
