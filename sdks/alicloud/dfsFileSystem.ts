// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DfsFileSystem extends pulumi.CustomResource {
    /**
     * Get an existing DfsFileSystem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DfsFileSystemState, opts?: pulumi.CustomResourceOptions): DfsFileSystem {
        return new DfsFileSystem(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/dfsFileSystem:DfsFileSystem';

    /**
     * Returns true if the given object is an instance of DfsFileSystem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DfsFileSystem {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DfsFileSystem.__pulumiType;
    }

    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly dataRedundancyType!: pulumi.Output<string | undefined>;
    public readonly dedicatedClusterId!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly fileSystemName!: pulumi.Output<string>;
    public readonly partitionNumber!: pulumi.Output<number | undefined>;
    public readonly protocolType!: pulumi.Output<string>;
    public readonly provisionedThroughputInMiBps!: pulumi.Output<number | undefined>;
    public readonly spaceCapacity!: pulumi.Output<number>;
    public readonly storageSetName!: pulumi.Output<string | undefined>;
    public readonly storageType!: pulumi.Output<string>;
    public readonly throughputMode!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DfsFileSystemTimeouts | undefined>;
    public readonly zoneId!: pulumi.Output<string | undefined>;

    /**
     * Create a DfsFileSystem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DfsFileSystemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DfsFileSystemArgs | DfsFileSystemState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DfsFileSystemState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["dataRedundancyType"] = state ? state.dataRedundancyType : undefined;
            resourceInputs["dedicatedClusterId"] = state ? state.dedicatedClusterId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fileSystemName"] = state ? state.fileSystemName : undefined;
            resourceInputs["partitionNumber"] = state ? state.partitionNumber : undefined;
            resourceInputs["protocolType"] = state ? state.protocolType : undefined;
            resourceInputs["provisionedThroughputInMiBps"] = state ? state.provisionedThroughputInMiBps : undefined;
            resourceInputs["spaceCapacity"] = state ? state.spaceCapacity : undefined;
            resourceInputs["storageSetName"] = state ? state.storageSetName : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
            resourceInputs["throughputMode"] = state ? state.throughputMode : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as DfsFileSystemArgs | undefined;
            if ((!args || args.fileSystemName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystemName'");
            }
            if ((!args || args.protocolType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocolType'");
            }
            if ((!args || args.spaceCapacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'spaceCapacity'");
            }
            if ((!args || args.storageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageType'");
            }
            resourceInputs["dataRedundancyType"] = args ? args.dataRedundancyType : undefined;
            resourceInputs["dedicatedClusterId"] = args ? args.dedicatedClusterId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fileSystemName"] = args ? args.fileSystemName : undefined;
            resourceInputs["partitionNumber"] = args ? args.partitionNumber : undefined;
            resourceInputs["protocolType"] = args ? args.protocolType : undefined;
            resourceInputs["provisionedThroughputInMiBps"] = args ? args.provisionedThroughputInMiBps : undefined;
            resourceInputs["spaceCapacity"] = args ? args.spaceCapacity : undefined;
            resourceInputs["storageSetName"] = args ? args.storageSetName : undefined;
            resourceInputs["storageType"] = args ? args.storageType : undefined;
            resourceInputs["throughputMode"] = args ? args.throughputMode : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DfsFileSystem.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DfsFileSystem resources.
 */
export interface DfsFileSystemState {
    createTime?: pulumi.Input<string>;
    dataRedundancyType?: pulumi.Input<string>;
    dedicatedClusterId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    fileSystemName?: pulumi.Input<string>;
    partitionNumber?: pulumi.Input<number>;
    protocolType?: pulumi.Input<string>;
    provisionedThroughputInMiBps?: pulumi.Input<number>;
    spaceCapacity?: pulumi.Input<number>;
    storageSetName?: pulumi.Input<string>;
    storageType?: pulumi.Input<string>;
    throughputMode?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DfsFileSystemTimeouts>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DfsFileSystem resource.
 */
export interface DfsFileSystemArgs {
    dataRedundancyType?: pulumi.Input<string>;
    dedicatedClusterId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    fileSystemName: pulumi.Input<string>;
    partitionNumber?: pulumi.Input<number>;
    protocolType: pulumi.Input<string>;
    provisionedThroughputInMiBps?: pulumi.Input<number>;
    spaceCapacity: pulumi.Input<number>;
    storageSetName?: pulumi.Input<string>;
    storageType: pulumi.Input<string>;
    throughputMode?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DfsFileSystemTimeouts>;
    zoneId?: pulumi.Input<string>;
}
