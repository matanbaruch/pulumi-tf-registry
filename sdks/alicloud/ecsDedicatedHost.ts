// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EcsDedicatedHost extends pulumi.CustomResource {
    /**
     * Get an existing EcsDedicatedHost resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcsDedicatedHostState, opts?: pulumi.CustomResourceOptions): EcsDedicatedHost {
        return new EcsDedicatedHost(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/ecsDedicatedHost:EcsDedicatedHost';

    /**
     * Returns true if the given object is an instance of EcsDedicatedHost.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcsDedicatedHost {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcsDedicatedHost.__pulumiType;
    }

    public readonly actionOnMaintenance!: pulumi.Output<string | undefined>;
    public readonly autoPlacement!: pulumi.Output<string | undefined>;
    public readonly autoReleaseTime!: pulumi.Output<string>;
    public readonly autoRenew!: pulumi.Output<boolean | undefined>;
    public readonly autoRenewPeriod!: pulumi.Output<number | undefined>;
    public readonly cpuOverCommitRatio!: pulumi.Output<number | undefined>;
    public readonly dedicatedHostClusterId!: pulumi.Output<string | undefined>;
    public readonly dedicatedHostName!: pulumi.Output<string | undefined>;
    public readonly dedicatedHostType!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly detailFee!: pulumi.Output<boolean | undefined>;
    public readonly dryRun!: pulumi.Output<boolean | undefined>;
    public readonly expiredTime!: pulumi.Output<string>;
    public readonly minQuantity!: pulumi.Output<number | undefined>;
    public readonly networkAttributes!: pulumi.Output<outputs.EcsDedicatedHostNetworkAttributes | undefined>;
    public readonly paymentType!: pulumi.Output<string>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly saleCycle!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.EcsDedicatedHostTimeouts | undefined>;
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a EcsDedicatedHost resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EcsDedicatedHostArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcsDedicatedHostArgs | EcsDedicatedHostState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcsDedicatedHostState | undefined;
            resourceInputs["actionOnMaintenance"] = state ? state.actionOnMaintenance : undefined;
            resourceInputs["autoPlacement"] = state ? state.autoPlacement : undefined;
            resourceInputs["autoReleaseTime"] = state ? state.autoReleaseTime : undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["autoRenewPeriod"] = state ? state.autoRenewPeriod : undefined;
            resourceInputs["cpuOverCommitRatio"] = state ? state.cpuOverCommitRatio : undefined;
            resourceInputs["dedicatedHostClusterId"] = state ? state.dedicatedHostClusterId : undefined;
            resourceInputs["dedicatedHostName"] = state ? state.dedicatedHostName : undefined;
            resourceInputs["dedicatedHostType"] = state ? state.dedicatedHostType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["detailFee"] = state ? state.detailFee : undefined;
            resourceInputs["dryRun"] = state ? state.dryRun : undefined;
            resourceInputs["expiredTime"] = state ? state.expiredTime : undefined;
            resourceInputs["minQuantity"] = state ? state.minQuantity : undefined;
            resourceInputs["networkAttributes"] = state ? state.networkAttributes : undefined;
            resourceInputs["paymentType"] = state ? state.paymentType : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["saleCycle"] = state ? state.saleCycle : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as EcsDedicatedHostArgs | undefined;
            if ((!args || args.dedicatedHostType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dedicatedHostType'");
            }
            resourceInputs["actionOnMaintenance"] = args ? args.actionOnMaintenance : undefined;
            resourceInputs["autoPlacement"] = args ? args.autoPlacement : undefined;
            resourceInputs["autoReleaseTime"] = args ? args.autoReleaseTime : undefined;
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["autoRenewPeriod"] = args ? args.autoRenewPeriod : undefined;
            resourceInputs["cpuOverCommitRatio"] = args ? args.cpuOverCommitRatio : undefined;
            resourceInputs["dedicatedHostClusterId"] = args ? args.dedicatedHostClusterId : undefined;
            resourceInputs["dedicatedHostName"] = args ? args.dedicatedHostName : undefined;
            resourceInputs["dedicatedHostType"] = args ? args.dedicatedHostType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["detailFee"] = args ? args.detailFee : undefined;
            resourceInputs["dryRun"] = args ? args.dryRun : undefined;
            resourceInputs["expiredTime"] = args ? args.expiredTime : undefined;
            resourceInputs["minQuantity"] = args ? args.minQuantity : undefined;
            resourceInputs["networkAttributes"] = args ? args.networkAttributes : undefined;
            resourceInputs["paymentType"] = args ? args.paymentType : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["saleCycle"] = args ? args.saleCycle : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EcsDedicatedHost.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EcsDedicatedHost resources.
 */
export interface EcsDedicatedHostState {
    actionOnMaintenance?: pulumi.Input<string>;
    autoPlacement?: pulumi.Input<string>;
    autoReleaseTime?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<boolean>;
    autoRenewPeriod?: pulumi.Input<number>;
    cpuOverCommitRatio?: pulumi.Input<number>;
    dedicatedHostClusterId?: pulumi.Input<string>;
    dedicatedHostName?: pulumi.Input<string>;
    dedicatedHostType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    detailFee?: pulumi.Input<boolean>;
    dryRun?: pulumi.Input<boolean>;
    expiredTime?: pulumi.Input<string>;
    minQuantity?: pulumi.Input<number>;
    networkAttributes?: pulumi.Input<inputs.EcsDedicatedHostNetworkAttributes>;
    paymentType?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    saleCycle?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.EcsDedicatedHostTimeouts>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EcsDedicatedHost resource.
 */
export interface EcsDedicatedHostArgs {
    actionOnMaintenance?: pulumi.Input<string>;
    autoPlacement?: pulumi.Input<string>;
    autoReleaseTime?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<boolean>;
    autoRenewPeriod?: pulumi.Input<number>;
    cpuOverCommitRatio?: pulumi.Input<number>;
    dedicatedHostClusterId?: pulumi.Input<string>;
    dedicatedHostName?: pulumi.Input<string>;
    dedicatedHostType: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    detailFee?: pulumi.Input<boolean>;
    dryRun?: pulumi.Input<boolean>;
    expiredTime?: pulumi.Input<string>;
    minQuantity?: pulumi.Input<number>;
    networkAttributes?: pulumi.Input<inputs.EcsDedicatedHostNetworkAttributes>;
    paymentType?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    saleCycle?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.EcsDedicatedHostTimeouts>;
    zoneId?: pulumi.Input<string>;
}
