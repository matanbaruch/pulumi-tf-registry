// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OceanBaseInstance extends pulumi.CustomResource {
    /**
     * Get an existing OceanBaseInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OceanBaseInstanceState, opts?: pulumi.CustomResourceOptions): OceanBaseInstance {
        return new OceanBaseInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/oceanBaseInstance:OceanBaseInstance';

    /**
     * Returns true if the given object is an instance of OceanBaseInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OceanBaseInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OceanBaseInstance.__pulumiType;
    }

    public readonly autoRenew!: pulumi.Output<boolean | undefined>;
    public readonly autoRenewPeriod!: pulumi.Output<number | undefined>;
    public readonly backupRetainMode!: pulumi.Output<string | undefined>;
    public /*out*/ readonly commodityCode!: pulumi.Output<string>;
    public /*out*/ readonly cpu!: pulumi.Output<number>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly diskSize!: pulumi.Output<number>;
    public readonly diskType!: pulumi.Output<string>;
    public readonly instanceClass!: pulumi.Output<string>;
    public readonly instanceName!: pulumi.Output<string>;
    public readonly nodeNum!: pulumi.Output<string>;
    public readonly obVersion!: pulumi.Output<string>;
    public readonly paymentType!: pulumi.Output<string>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly series!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.OceanBaseInstanceTimeouts | undefined>;
    public readonly zones!: pulumi.Output<string[]>;

    /**
     * Create a OceanBaseInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OceanBaseInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OceanBaseInstanceArgs | OceanBaseInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OceanBaseInstanceState | undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["autoRenewPeriod"] = state ? state.autoRenewPeriod : undefined;
            resourceInputs["backupRetainMode"] = state ? state.backupRetainMode : undefined;
            resourceInputs["commodityCode"] = state ? state.commodityCode : undefined;
            resourceInputs["cpu"] = state ? state.cpu : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["diskSize"] = state ? state.diskSize : undefined;
            resourceInputs["diskType"] = state ? state.diskType : undefined;
            resourceInputs["instanceClass"] = state ? state.instanceClass : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["nodeNum"] = state ? state.nodeNum : undefined;
            resourceInputs["obVersion"] = state ? state.obVersion : undefined;
            resourceInputs["paymentType"] = state ? state.paymentType : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["series"] = state ? state.series : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["zones"] = state ? state.zones : undefined;
        } else {
            const args = argsOrState as OceanBaseInstanceArgs | undefined;
            if ((!args || args.diskSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskSize'");
            }
            if ((!args || args.instanceClass === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceClass'");
            }
            if ((!args || args.paymentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'paymentType'");
            }
            if ((!args || args.series === undefined) && !opts.urn) {
                throw new Error("Missing required property 'series'");
            }
            if ((!args || args.zones === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zones'");
            }
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["autoRenewPeriod"] = args ? args.autoRenewPeriod : undefined;
            resourceInputs["backupRetainMode"] = args ? args.backupRetainMode : undefined;
            resourceInputs["diskSize"] = args ? args.diskSize : undefined;
            resourceInputs["diskType"] = args ? args.diskType : undefined;
            resourceInputs["instanceClass"] = args ? args.instanceClass : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["nodeNum"] = args ? args.nodeNum : undefined;
            resourceInputs["obVersion"] = args ? args.obVersion : undefined;
            resourceInputs["paymentType"] = args ? args.paymentType : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["series"] = args ? args.series : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["zones"] = args ? args.zones : undefined;
            resourceInputs["commodityCode"] = undefined /*out*/;
            resourceInputs["cpu"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OceanBaseInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OceanBaseInstance resources.
 */
export interface OceanBaseInstanceState {
    autoRenew?: pulumi.Input<boolean>;
    autoRenewPeriod?: pulumi.Input<number>;
    backupRetainMode?: pulumi.Input<string>;
    commodityCode?: pulumi.Input<string>;
    cpu?: pulumi.Input<number>;
    createTime?: pulumi.Input<string>;
    diskSize?: pulumi.Input<number>;
    diskType?: pulumi.Input<string>;
    instanceClass?: pulumi.Input<string>;
    instanceName?: pulumi.Input<string>;
    nodeNum?: pulumi.Input<string>;
    obVersion?: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    series?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OceanBaseInstanceTimeouts>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a OceanBaseInstance resource.
 */
export interface OceanBaseInstanceArgs {
    autoRenew?: pulumi.Input<boolean>;
    autoRenewPeriod?: pulumi.Input<number>;
    backupRetainMode?: pulumi.Input<string>;
    diskSize: pulumi.Input<number>;
    diskType?: pulumi.Input<string>;
    instanceClass: pulumi.Input<string>;
    instanceName?: pulumi.Input<string>;
    nodeNum?: pulumi.Input<string>;
    obVersion?: pulumi.Input<string>;
    paymentType: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    series: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OceanBaseInstanceTimeouts>;
    zones: pulumi.Input<pulumi.Input<string>[]>;
}
