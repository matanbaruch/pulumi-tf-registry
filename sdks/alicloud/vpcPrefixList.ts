// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpcPrefixList extends pulumi.CustomResource {
    /**
     * Get an existing VpcPrefixList resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcPrefixListState, opts?: pulumi.CustomResourceOptions): VpcPrefixList {
        return new VpcPrefixList(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/vpcPrefixList:VpcPrefixList';

    /**
     * Returns true if the given object is an instance of VpcPrefixList.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcPrefixList {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcPrefixList.__pulumiType;
    }

    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly entrys!: pulumi.Output<outputs.VpcPrefixListEntry[] | undefined>;
    public readonly ipVersion!: pulumi.Output<string>;
    public readonly maxEntries!: pulumi.Output<number>;
    public /*out*/ readonly prefixListAssociations!: pulumi.Output<outputs.VpcPrefixListPrefixListAssociation[]>;
    public readonly prefixListDescription!: pulumi.Output<string | undefined>;
    public /*out*/ readonly prefixListId!: pulumi.Output<string>;
    public readonly prefixListName!: pulumi.Output<string | undefined>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public /*out*/ readonly shareType!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.VpcPrefixListTimeouts | undefined>;

    /**
     * Create a VpcPrefixList resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VpcPrefixListArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcPrefixListArgs | VpcPrefixListState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcPrefixListState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["entrys"] = state ? state.entrys : undefined;
            resourceInputs["ipVersion"] = state ? state.ipVersion : undefined;
            resourceInputs["maxEntries"] = state ? state.maxEntries : undefined;
            resourceInputs["prefixListAssociations"] = state ? state.prefixListAssociations : undefined;
            resourceInputs["prefixListDescription"] = state ? state.prefixListDescription : undefined;
            resourceInputs["prefixListId"] = state ? state.prefixListId : undefined;
            resourceInputs["prefixListName"] = state ? state.prefixListName : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["shareType"] = state ? state.shareType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as VpcPrefixListArgs | undefined;
            resourceInputs["entrys"] = args ? args.entrys : undefined;
            resourceInputs["ipVersion"] = args ? args.ipVersion : undefined;
            resourceInputs["maxEntries"] = args ? args.maxEntries : undefined;
            resourceInputs["prefixListDescription"] = args ? args.prefixListDescription : undefined;
            resourceInputs["prefixListName"] = args ? args.prefixListName : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["prefixListAssociations"] = undefined /*out*/;
            resourceInputs["prefixListId"] = undefined /*out*/;
            resourceInputs["shareType"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcPrefixList.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpcPrefixList resources.
 */
export interface VpcPrefixListState {
    createTime?: pulumi.Input<string>;
    entrys?: pulumi.Input<pulumi.Input<inputs.VpcPrefixListEntry>[]>;
    ipVersion?: pulumi.Input<string>;
    maxEntries?: pulumi.Input<number>;
    prefixListAssociations?: pulumi.Input<pulumi.Input<inputs.VpcPrefixListPrefixListAssociation>[]>;
    prefixListDescription?: pulumi.Input<string>;
    prefixListId?: pulumi.Input<string>;
    prefixListName?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    shareType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VpcPrefixListTimeouts>;
}

/**
 * The set of arguments for constructing a VpcPrefixList resource.
 */
export interface VpcPrefixListArgs {
    entrys?: pulumi.Input<pulumi.Input<inputs.VpcPrefixListEntry>[]>;
    ipVersion?: pulumi.Input<string>;
    maxEntries?: pulumi.Input<number>;
    prefixListDescription?: pulumi.Input<string>;
    prefixListName?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VpcPrefixListTimeouts>;
}
