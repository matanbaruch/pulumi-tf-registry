// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GpdbElasticInstance extends pulumi.CustomResource {
    /**
     * Get an existing GpdbElasticInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GpdbElasticInstanceState, opts?: pulumi.CustomResourceOptions): GpdbElasticInstance {
        return new GpdbElasticInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/gpdbElasticInstance:GpdbElasticInstance';

    /**
     * Returns true if the given object is an instance of GpdbElasticInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GpdbElasticInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GpdbElasticInstance.__pulumiType;
    }

    public /*out*/ readonly connectionString!: pulumi.Output<string>;
    public readonly dbInstanceCategory!: pulumi.Output<string>;
    public readonly dbInstanceDescription!: pulumi.Output<string | undefined>;
    public readonly encryptionKey!: pulumi.Output<string | undefined>;
    public readonly encryptionType!: pulumi.Output<string | undefined>;
    public readonly engine!: pulumi.Output<string>;
    public readonly engineVersion!: pulumi.Output<string>;
    public readonly instanceNetworkType!: pulumi.Output<string | undefined>;
    public readonly instanceSpec!: pulumi.Output<string>;
    public readonly paymentDuration!: pulumi.Output<number | undefined>;
    public readonly paymentDurationUnit!: pulumi.Output<string | undefined>;
    public readonly paymentType!: pulumi.Output<string | undefined>;
    public /*out*/ readonly port!: pulumi.Output<string>;
    public readonly securityIpLists!: pulumi.Output<string[]>;
    public readonly segNodeNum!: pulumi.Output<number>;
    public readonly segStorageType!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly storageSize!: pulumi.Output<number>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.GpdbElasticInstanceTimeouts | undefined>;
    public readonly vswitchId!: pulumi.Output<string>;
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a GpdbElasticInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GpdbElasticInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GpdbElasticInstanceArgs | GpdbElasticInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GpdbElasticInstanceState | undefined;
            resourceInputs["connectionString"] = state ? state.connectionString : undefined;
            resourceInputs["dbInstanceCategory"] = state ? state.dbInstanceCategory : undefined;
            resourceInputs["dbInstanceDescription"] = state ? state.dbInstanceDescription : undefined;
            resourceInputs["encryptionKey"] = state ? state.encryptionKey : undefined;
            resourceInputs["encryptionType"] = state ? state.encryptionType : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["instanceNetworkType"] = state ? state.instanceNetworkType : undefined;
            resourceInputs["instanceSpec"] = state ? state.instanceSpec : undefined;
            resourceInputs["paymentDuration"] = state ? state.paymentDuration : undefined;
            resourceInputs["paymentDurationUnit"] = state ? state.paymentDurationUnit : undefined;
            resourceInputs["paymentType"] = state ? state.paymentType : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["securityIpLists"] = state ? state.securityIpLists : undefined;
            resourceInputs["segNodeNum"] = state ? state.segNodeNum : undefined;
            resourceInputs["segStorageType"] = state ? state.segStorageType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storageSize"] = state ? state.storageSize : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as GpdbElasticInstanceArgs | undefined;
            if ((!args || args.engine === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engine'");
            }
            if ((!args || args.engineVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engineVersion'");
            }
            if ((!args || args.instanceSpec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceSpec'");
            }
            if ((!args || args.segNodeNum === undefined) && !opts.urn) {
                throw new Error("Missing required property 'segNodeNum'");
            }
            if ((!args || args.segStorageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'segStorageType'");
            }
            if ((!args || args.storageSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageSize'");
            }
            if ((!args || args.vswitchId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vswitchId'");
            }
            resourceInputs["dbInstanceCategory"] = args ? args.dbInstanceCategory : undefined;
            resourceInputs["dbInstanceDescription"] = args ? args.dbInstanceDescription : undefined;
            resourceInputs["encryptionKey"] = args ? args.encryptionKey : undefined;
            resourceInputs["encryptionType"] = args ? args.encryptionType : undefined;
            resourceInputs["engine"] = args ? args.engine : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["instanceNetworkType"] = args ? args.instanceNetworkType : undefined;
            resourceInputs["instanceSpec"] = args ? args.instanceSpec : undefined;
            resourceInputs["paymentDuration"] = args ? args.paymentDuration : undefined;
            resourceInputs["paymentDurationUnit"] = args ? args.paymentDurationUnit : undefined;
            resourceInputs["paymentType"] = args ? args.paymentType : undefined;
            resourceInputs["securityIpLists"] = args ? args.securityIpLists : undefined;
            resourceInputs["segNodeNum"] = args ? args.segNodeNum : undefined;
            resourceInputs["segStorageType"] = args ? args.segStorageType : undefined;
            resourceInputs["storageSize"] = args ? args.storageSize : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["connectionString"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GpdbElasticInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GpdbElasticInstance resources.
 */
export interface GpdbElasticInstanceState {
    connectionString?: pulumi.Input<string>;
    dbInstanceCategory?: pulumi.Input<string>;
    dbInstanceDescription?: pulumi.Input<string>;
    encryptionKey?: pulumi.Input<string>;
    encryptionType?: pulumi.Input<string>;
    engine?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    instanceNetworkType?: pulumi.Input<string>;
    instanceSpec?: pulumi.Input<string>;
    paymentDuration?: pulumi.Input<number>;
    paymentDurationUnit?: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    securityIpLists?: pulumi.Input<pulumi.Input<string>[]>;
    segNodeNum?: pulumi.Input<number>;
    segStorageType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    storageSize?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.GpdbElasticInstanceTimeouts>;
    vswitchId?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GpdbElasticInstance resource.
 */
export interface GpdbElasticInstanceArgs {
    dbInstanceCategory?: pulumi.Input<string>;
    dbInstanceDescription?: pulumi.Input<string>;
    encryptionKey?: pulumi.Input<string>;
    encryptionType?: pulumi.Input<string>;
    engine: pulumi.Input<string>;
    engineVersion: pulumi.Input<string>;
    instanceNetworkType?: pulumi.Input<string>;
    instanceSpec: pulumi.Input<string>;
    paymentDuration?: pulumi.Input<number>;
    paymentDurationUnit?: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    securityIpLists?: pulumi.Input<pulumi.Input<string>[]>;
    segNodeNum: pulumi.Input<number>;
    segStorageType: pulumi.Input<string>;
    storageSize: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.GpdbElasticInstanceTimeouts>;
    vswitchId: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}
