// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Image extends pulumi.CustomResource {
    /**
     * Get an existing Image resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageState, opts?: pulumi.CustomResourceOptions): Image {
        return new Image(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/image:Image';

    /**
     * Returns true if the given object is an instance of Image.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Image {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Image.__pulumiType;
    }

    public readonly architecture!: pulumi.Output<string | undefined>;
    public readonly bootMode!: pulumi.Output<string>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly deleteAutoSnapshot!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly detectionStrategy!: pulumi.Output<string | undefined>;
    public readonly diskDeviceMappings!: pulumi.Output<outputs.ImageDiskDeviceMapping[] | undefined>;
    public readonly features!: pulumi.Output<outputs.ImageFeatures | undefined>;
    public readonly force!: pulumi.Output<boolean | undefined>;
    public readonly imageFamily!: pulumi.Output<string | undefined>;
    public readonly imageName!: pulumi.Output<string>;
    public readonly imageVersion!: pulumi.Output<string | undefined>;
    public readonly instanceId!: pulumi.Output<string | undefined>;
    public readonly licenseType!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly name!: pulumi.Output<string>;
    public readonly platform!: pulumi.Output<string>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly snapshotId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ImageTimeouts | undefined>;

    /**
     * Create a Image resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageArgs | ImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageState | undefined;
            resourceInputs["architecture"] = state ? state.architecture : undefined;
            resourceInputs["bootMode"] = state ? state.bootMode : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["deleteAutoSnapshot"] = state ? state.deleteAutoSnapshot : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["detectionStrategy"] = state ? state.detectionStrategy : undefined;
            resourceInputs["diskDeviceMappings"] = state ? state.diskDeviceMappings : undefined;
            resourceInputs["features"] = state ? state.features : undefined;
            resourceInputs["force"] = state ? state.force : undefined;
            resourceInputs["imageFamily"] = state ? state.imageFamily : undefined;
            resourceInputs["imageName"] = state ? state.imageName : undefined;
            resourceInputs["imageVersion"] = state ? state.imageVersion : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["licenseType"] = state ? state.licenseType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ImageArgs | undefined;
            resourceInputs["architecture"] = args ? args.architecture : undefined;
            resourceInputs["bootMode"] = args ? args.bootMode : undefined;
            resourceInputs["deleteAutoSnapshot"] = args ? args.deleteAutoSnapshot : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["detectionStrategy"] = args ? args.detectionStrategy : undefined;
            resourceInputs["diskDeviceMappings"] = args ? args.diskDeviceMappings : undefined;
            resourceInputs["features"] = args ? args.features : undefined;
            resourceInputs["force"] = args ? args.force : undefined;
            resourceInputs["imageFamily"] = args ? args.imageFamily : undefined;
            resourceInputs["imageName"] = args ? args.imageName : undefined;
            resourceInputs["imageVersion"] = args ? args.imageVersion : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["licenseType"] = args ? args.licenseType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["platform"] = args ? args.platform : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Image.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Image resources.
 */
export interface ImageState {
    architecture?: pulumi.Input<string>;
    bootMode?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deleteAutoSnapshot?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    detectionStrategy?: pulumi.Input<string>;
    diskDeviceMappings?: pulumi.Input<pulumi.Input<inputs.ImageDiskDeviceMapping>[]>;
    features?: pulumi.Input<inputs.ImageFeatures>;
    force?: pulumi.Input<boolean>;
    imageFamily?: pulumi.Input<string>;
    imageName?: pulumi.Input<string>;
    imageVersion?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    licenseType?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    name?: pulumi.Input<string>;
    platform?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    snapshotId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ImageTimeouts>;
}

/**
 * The set of arguments for constructing a Image resource.
 */
export interface ImageArgs {
    architecture?: pulumi.Input<string>;
    bootMode?: pulumi.Input<string>;
    deleteAutoSnapshot?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    detectionStrategy?: pulumi.Input<string>;
    diskDeviceMappings?: pulumi.Input<pulumi.Input<inputs.ImageDiskDeviceMapping>[]>;
    features?: pulumi.Input<inputs.ImageFeatures>;
    force?: pulumi.Input<boolean>;
    imageFamily?: pulumi.Input<string>;
    imageName?: pulumi.Input<string>;
    imageVersion?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    licenseType?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    name?: pulumi.Input<string>;
    platform?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    snapshotId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ImageTimeouts>;
}
