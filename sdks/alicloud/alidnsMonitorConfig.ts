// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AlidnsMonitorConfig extends pulumi.CustomResource {
    /**
     * Get an existing AlidnsMonitorConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlidnsMonitorConfigState, opts?: pulumi.CustomResourceOptions): AlidnsMonitorConfig {
        return new AlidnsMonitorConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/alidnsMonitorConfig:AlidnsMonitorConfig';

    /**
     * Returns true if the given object is an instance of AlidnsMonitorConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlidnsMonitorConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlidnsMonitorConfig.__pulumiType;
    }

    public readonly addrPoolId!: pulumi.Output<string>;
    public readonly evaluationCount!: pulumi.Output<number>;
    public readonly interval!: pulumi.Output<number>;
    public readonly ispCityNodes!: pulumi.Output<outputs.AlidnsMonitorConfigIspCityNode[]>;
    public readonly lang!: pulumi.Output<string | undefined>;
    public readonly monitorExtendInfo!: pulumi.Output<string>;
    public readonly protocolType!: pulumi.Output<string>;
    public readonly timeout!: pulumi.Output<number>;

    /**
     * Create a AlidnsMonitorConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlidnsMonitorConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlidnsMonitorConfigArgs | AlidnsMonitorConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlidnsMonitorConfigState | undefined;
            resourceInputs["addrPoolId"] = state ? state.addrPoolId : undefined;
            resourceInputs["evaluationCount"] = state ? state.evaluationCount : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["ispCityNodes"] = state ? state.ispCityNodes : undefined;
            resourceInputs["lang"] = state ? state.lang : undefined;
            resourceInputs["monitorExtendInfo"] = state ? state.monitorExtendInfo : undefined;
            resourceInputs["protocolType"] = state ? state.protocolType : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
        } else {
            const args = argsOrState as AlidnsMonitorConfigArgs | undefined;
            if ((!args || args.addrPoolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'addrPoolId'");
            }
            if ((!args || args.evaluationCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'evaluationCount'");
            }
            if ((!args || args.interval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interval'");
            }
            if ((!args || args.ispCityNodes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ispCityNodes'");
            }
            if ((!args || args.monitorExtendInfo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitorExtendInfo'");
            }
            if ((!args || args.protocolType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocolType'");
            }
            if ((!args || args.timeout === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeout'");
            }
            resourceInputs["addrPoolId"] = args ? args.addrPoolId : undefined;
            resourceInputs["evaluationCount"] = args ? args.evaluationCount : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["ispCityNodes"] = args ? args.ispCityNodes : undefined;
            resourceInputs["lang"] = args ? args.lang : undefined;
            resourceInputs["monitorExtendInfo"] = args ? args.monitorExtendInfo : undefined;
            resourceInputs["protocolType"] = args ? args.protocolType : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlidnsMonitorConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AlidnsMonitorConfig resources.
 */
export interface AlidnsMonitorConfigState {
    addrPoolId?: pulumi.Input<string>;
    evaluationCount?: pulumi.Input<number>;
    interval?: pulumi.Input<number>;
    ispCityNodes?: pulumi.Input<pulumi.Input<inputs.AlidnsMonitorConfigIspCityNode>[]>;
    lang?: pulumi.Input<string>;
    monitorExtendInfo?: pulumi.Input<string>;
    protocolType?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AlidnsMonitorConfig resource.
 */
export interface AlidnsMonitorConfigArgs {
    addrPoolId: pulumi.Input<string>;
    evaluationCount: pulumi.Input<number>;
    interval: pulumi.Input<number>;
    ispCityNodes: pulumi.Input<pulumi.Input<inputs.AlidnsMonitorConfigIspCityNode>[]>;
    lang?: pulumi.Input<string>;
    monitorExtendInfo: pulumi.Input<string>;
    protocolType: pulumi.Input<string>;
    timeout: pulumi.Input<number>;
}
