// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DbBackupPolicy extends pulumi.CustomResource {
    /**
     * Get an existing DbBackupPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DbBackupPolicyState, opts?: pulumi.CustomResourceOptions): DbBackupPolicy {
        return new DbBackupPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/dbBackupPolicy:DbBackupPolicy';

    /**
     * Returns true if the given object is an instance of DbBackupPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DbBackupPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DbBackupPolicy.__pulumiType;
    }

    public readonly archiveBackupKeepCount!: pulumi.Output<number>;
    public readonly archiveBackupKeepPolicy!: pulumi.Output<string>;
    public readonly archiveBackupRetentionPeriod!: pulumi.Output<number>;
    public readonly backupInterval!: pulumi.Output<string>;
    public readonly backupMethod!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly backupPeriods!: pulumi.Output<string[]>;
    public readonly backupPriority!: pulumi.Output<number | undefined>;
    public readonly backupRetentionPeriod!: pulumi.Output<number | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly backupTime!: pulumi.Output<string>;
    public readonly category!: pulumi.Output<string>;
    public readonly compressType!: pulumi.Output<string>;
    public readonly enableBackupLog!: pulumi.Output<boolean>;
    public readonly enableIncrementDataBackup!: pulumi.Output<boolean>;
    public readonly highSpaceUsageProtection!: pulumi.Output<string | undefined>;
    public readonly instanceId!: pulumi.Output<string>;
    public readonly localLogRetentionHours!: pulumi.Output<number>;
    public readonly localLogRetentionSpace!: pulumi.Output<number>;
    /**
     * @deprecated Deprecated
     */
    public readonly logBackup!: pulumi.Output<boolean>;
    public readonly logBackupFrequency!: pulumi.Output<string>;
    public readonly logBackupLocalRetentionNumber!: pulumi.Output<number>;
    public readonly logBackupRetentionPeriod!: pulumi.Output<number>;
    /**
     * @deprecated Deprecated
     */
    public readonly logRetentionPeriod!: pulumi.Output<number>;
    public readonly preferredBackupPeriods!: pulumi.Output<string[]>;
    public readonly preferredBackupTime!: pulumi.Output<string | undefined>;
    public readonly releasedKeepPolicy!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly retentionPeriod!: pulumi.Output<number>;

    /**
     * Create a DbBackupPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DbBackupPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DbBackupPolicyArgs | DbBackupPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DbBackupPolicyState | undefined;
            resourceInputs["archiveBackupKeepCount"] = state ? state.archiveBackupKeepCount : undefined;
            resourceInputs["archiveBackupKeepPolicy"] = state ? state.archiveBackupKeepPolicy : undefined;
            resourceInputs["archiveBackupRetentionPeriod"] = state ? state.archiveBackupRetentionPeriod : undefined;
            resourceInputs["backupInterval"] = state ? state.backupInterval : undefined;
            resourceInputs["backupMethod"] = state ? state.backupMethod : undefined;
            resourceInputs["backupPeriods"] = state ? state.backupPeriods : undefined;
            resourceInputs["backupPriority"] = state ? state.backupPriority : undefined;
            resourceInputs["backupRetentionPeriod"] = state ? state.backupRetentionPeriod : undefined;
            resourceInputs["backupTime"] = state ? state.backupTime : undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["compressType"] = state ? state.compressType : undefined;
            resourceInputs["enableBackupLog"] = state ? state.enableBackupLog : undefined;
            resourceInputs["enableIncrementDataBackup"] = state ? state.enableIncrementDataBackup : undefined;
            resourceInputs["highSpaceUsageProtection"] = state ? state.highSpaceUsageProtection : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["localLogRetentionHours"] = state ? state.localLogRetentionHours : undefined;
            resourceInputs["localLogRetentionSpace"] = state ? state.localLogRetentionSpace : undefined;
            resourceInputs["logBackup"] = state ? state.logBackup : undefined;
            resourceInputs["logBackupFrequency"] = state ? state.logBackupFrequency : undefined;
            resourceInputs["logBackupLocalRetentionNumber"] = state ? state.logBackupLocalRetentionNumber : undefined;
            resourceInputs["logBackupRetentionPeriod"] = state ? state.logBackupRetentionPeriod : undefined;
            resourceInputs["logRetentionPeriod"] = state ? state.logRetentionPeriod : undefined;
            resourceInputs["preferredBackupPeriods"] = state ? state.preferredBackupPeriods : undefined;
            resourceInputs["preferredBackupTime"] = state ? state.preferredBackupTime : undefined;
            resourceInputs["releasedKeepPolicy"] = state ? state.releasedKeepPolicy : undefined;
            resourceInputs["retentionPeriod"] = state ? state.retentionPeriod : undefined;
        } else {
            const args = argsOrState as DbBackupPolicyArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["archiveBackupKeepCount"] = args ? args.archiveBackupKeepCount : undefined;
            resourceInputs["archiveBackupKeepPolicy"] = args ? args.archiveBackupKeepPolicy : undefined;
            resourceInputs["archiveBackupRetentionPeriod"] = args ? args.archiveBackupRetentionPeriod : undefined;
            resourceInputs["backupInterval"] = args ? args.backupInterval : undefined;
            resourceInputs["backupMethod"] = args ? args.backupMethod : undefined;
            resourceInputs["backupPeriods"] = args ? args.backupPeriods : undefined;
            resourceInputs["backupPriority"] = args ? args.backupPriority : undefined;
            resourceInputs["backupRetentionPeriod"] = args ? args.backupRetentionPeriod : undefined;
            resourceInputs["backupTime"] = args ? args.backupTime : undefined;
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["compressType"] = args ? args.compressType : undefined;
            resourceInputs["enableBackupLog"] = args ? args.enableBackupLog : undefined;
            resourceInputs["enableIncrementDataBackup"] = args ? args.enableIncrementDataBackup : undefined;
            resourceInputs["highSpaceUsageProtection"] = args ? args.highSpaceUsageProtection : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["localLogRetentionHours"] = args ? args.localLogRetentionHours : undefined;
            resourceInputs["localLogRetentionSpace"] = args ? args.localLogRetentionSpace : undefined;
            resourceInputs["logBackup"] = args ? args.logBackup : undefined;
            resourceInputs["logBackupFrequency"] = args ? args.logBackupFrequency : undefined;
            resourceInputs["logBackupLocalRetentionNumber"] = args ? args.logBackupLocalRetentionNumber : undefined;
            resourceInputs["logBackupRetentionPeriod"] = args ? args.logBackupRetentionPeriod : undefined;
            resourceInputs["logRetentionPeriod"] = args ? args.logRetentionPeriod : undefined;
            resourceInputs["preferredBackupPeriods"] = args ? args.preferredBackupPeriods : undefined;
            resourceInputs["preferredBackupTime"] = args ? args.preferredBackupTime : undefined;
            resourceInputs["releasedKeepPolicy"] = args ? args.releasedKeepPolicy : undefined;
            resourceInputs["retentionPeriod"] = args ? args.retentionPeriod : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DbBackupPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DbBackupPolicy resources.
 */
export interface DbBackupPolicyState {
    archiveBackupKeepCount?: pulumi.Input<number>;
    archiveBackupKeepPolicy?: pulumi.Input<string>;
    archiveBackupRetentionPeriod?: pulumi.Input<number>;
    backupInterval?: pulumi.Input<string>;
    backupMethod?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    backupPeriods?: pulumi.Input<pulumi.Input<string>[]>;
    backupPriority?: pulumi.Input<number>;
    backupRetentionPeriod?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    backupTime?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    compressType?: pulumi.Input<string>;
    enableBackupLog?: pulumi.Input<boolean>;
    enableIncrementDataBackup?: pulumi.Input<boolean>;
    highSpaceUsageProtection?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    localLogRetentionHours?: pulumi.Input<number>;
    localLogRetentionSpace?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    logBackup?: pulumi.Input<boolean>;
    logBackupFrequency?: pulumi.Input<string>;
    logBackupLocalRetentionNumber?: pulumi.Input<number>;
    logBackupRetentionPeriod?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    logRetentionPeriod?: pulumi.Input<number>;
    preferredBackupPeriods?: pulumi.Input<pulumi.Input<string>[]>;
    preferredBackupTime?: pulumi.Input<string>;
    releasedKeepPolicy?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    retentionPeriod?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DbBackupPolicy resource.
 */
export interface DbBackupPolicyArgs {
    archiveBackupKeepCount?: pulumi.Input<number>;
    archiveBackupKeepPolicy?: pulumi.Input<string>;
    archiveBackupRetentionPeriod?: pulumi.Input<number>;
    backupInterval?: pulumi.Input<string>;
    backupMethod?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    backupPeriods?: pulumi.Input<pulumi.Input<string>[]>;
    backupPriority?: pulumi.Input<number>;
    backupRetentionPeriod?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    backupTime?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    compressType?: pulumi.Input<string>;
    enableBackupLog?: pulumi.Input<boolean>;
    enableIncrementDataBackup?: pulumi.Input<boolean>;
    highSpaceUsageProtection?: pulumi.Input<string>;
    instanceId: pulumi.Input<string>;
    localLogRetentionHours?: pulumi.Input<number>;
    localLogRetentionSpace?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    logBackup?: pulumi.Input<boolean>;
    logBackupFrequency?: pulumi.Input<string>;
    logBackupLocalRetentionNumber?: pulumi.Input<number>;
    logBackupRetentionPeriod?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    logRetentionPeriod?: pulumi.Input<number>;
    preferredBackupPeriods?: pulumi.Input<pulumi.Input<string>[]>;
    preferredBackupTime?: pulumi.Input<string>;
    releasedKeepPolicy?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    retentionPeriod?: pulumi.Input<number>;
}
