// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVpcTrafficMirrorSessions(args?: GetVpcTrafficMirrorSessionsArgs, opts?: pulumi.InvokeOptions): Promise<GetVpcTrafficMirrorSessionsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("alicloud:index/getVpcTrafficMirrorSessions:getVpcTrafficMirrorSessions", {
        "enabled": args.enabled,
        "id": args.id,
        "ids": args.ids,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "priority": args.priority,
        "status": args.status,
        "trafficMirrorFilterId": args.trafficMirrorFilterId,
        "trafficMirrorSessionName": args.trafficMirrorSessionName,
        "trafficMirrorSourceId": args.trafficMirrorSourceId,
        "trafficMirrorTargetId": args.trafficMirrorTargetId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVpcTrafficMirrorSessions.
 */
export interface GetVpcTrafficMirrorSessionsArgs {
    enabled?: boolean;
    id?: string;
    ids?: string[];
    nameRegex?: string;
    outputFile?: string;
    priority?: number;
    status?: string;
    trafficMirrorFilterId?: string;
    trafficMirrorSessionName?: string;
    trafficMirrorSourceId?: string;
    trafficMirrorTargetId?: string;
}

/**
 * A collection of values returned by getVpcTrafficMirrorSessions.
 */
export interface GetVpcTrafficMirrorSessionsResult {
    readonly enabled?: boolean;
    readonly id: string;
    readonly ids: string[];
    readonly nameRegex?: string;
    readonly names: string[];
    readonly outputFile?: string;
    readonly priority?: number;
    readonly sessions: outputs.GetVpcTrafficMirrorSessionsSession[];
    readonly status?: string;
    readonly trafficMirrorFilterId?: string;
    readonly trafficMirrorSessionName?: string;
    readonly trafficMirrorSourceId?: string;
    readonly trafficMirrorTargetId?: string;
}
export function getVpcTrafficMirrorSessionsOutput(args?: GetVpcTrafficMirrorSessionsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVpcTrafficMirrorSessionsResult> {
    return pulumi.output(args).apply((a: any) => getVpcTrafficMirrorSessions(a, opts))
}

/**
 * A collection of arguments for invoking getVpcTrafficMirrorSessions.
 */
export interface GetVpcTrafficMirrorSessionsOutputArgs {
    enabled?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    nameRegex?: pulumi.Input<string>;
    outputFile?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    trafficMirrorFilterId?: pulumi.Input<string>;
    trafficMirrorSessionName?: pulumi.Input<string>;
    trafficMirrorSourceId?: pulumi.Input<string>;
    trafficMirrorTargetId?: pulumi.Input<string>;
}
