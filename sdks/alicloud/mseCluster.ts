// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MseCluster extends pulumi.CustomResource {
    /**
     * Get an existing MseCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MseClusterState, opts?: pulumi.CustomResourceOptions): MseCluster {
        return new MseCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/mseCluster:MseCluster';

    /**
     * Returns true if the given object is an instance of MseCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MseCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MseCluster.__pulumiType;
    }

    public readonly aclEntryLists!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly appVersion!: pulumi.Output<string>;
    public readonly clusterAliasName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly clusterId!: pulumi.Output<string>;
    public readonly clusterSpecification!: pulumi.Output<string>;
    public readonly clusterType!: pulumi.Output<string>;
    public readonly clusterVersion!: pulumi.Output<string>;
    public readonly connectionType!: pulumi.Output<string>;
    public readonly diskType!: pulumi.Output<string | undefined>;
    public readonly instanceCount!: pulumi.Output<number>;
    public readonly mseVersion!: pulumi.Output<string>;
    public readonly netType!: pulumi.Output<string>;
    public readonly paymentType!: pulumi.Output<string>;
    public readonly privateSlbSpecification!: pulumi.Output<string | undefined>;
    public readonly pubNetworkFlow!: pulumi.Output<string>;
    public readonly pubSlbSpecification!: pulumi.Output<string | undefined>;
    public readonly requestPars!: pulumi.Output<string | undefined>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.MseClusterTimeouts | undefined>;
    public readonly vpcId!: pulumi.Output<string>;
    public readonly vswitchId!: pulumi.Output<string | undefined>;

    /**
     * Create a MseCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MseClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MseClusterArgs | MseClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MseClusterState | undefined;
            resourceInputs["aclEntryLists"] = state ? state.aclEntryLists : undefined;
            resourceInputs["appVersion"] = state ? state.appVersion : undefined;
            resourceInputs["clusterAliasName"] = state ? state.clusterAliasName : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["clusterSpecification"] = state ? state.clusterSpecification : undefined;
            resourceInputs["clusterType"] = state ? state.clusterType : undefined;
            resourceInputs["clusterVersion"] = state ? state.clusterVersion : undefined;
            resourceInputs["connectionType"] = state ? state.connectionType : undefined;
            resourceInputs["diskType"] = state ? state.diskType : undefined;
            resourceInputs["instanceCount"] = state ? state.instanceCount : undefined;
            resourceInputs["mseVersion"] = state ? state.mseVersion : undefined;
            resourceInputs["netType"] = state ? state.netType : undefined;
            resourceInputs["paymentType"] = state ? state.paymentType : undefined;
            resourceInputs["privateSlbSpecification"] = state ? state.privateSlbSpecification : undefined;
            resourceInputs["pubNetworkFlow"] = state ? state.pubNetworkFlow : undefined;
            resourceInputs["pubSlbSpecification"] = state ? state.pubSlbSpecification : undefined;
            resourceInputs["requestPars"] = state ? state.requestPars : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
        } else {
            const args = argsOrState as MseClusterArgs | undefined;
            if ((!args || args.clusterSpecification === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterSpecification'");
            }
            if ((!args || args.clusterType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterType'");
            }
            if ((!args || args.clusterVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterVersion'");
            }
            if ((!args || args.instanceCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceCount'");
            }
            if ((!args || args.netType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'netType'");
            }
            if ((!args || args.pubNetworkFlow === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pubNetworkFlow'");
            }
            resourceInputs["aclEntryLists"] = args ? args.aclEntryLists : undefined;
            resourceInputs["clusterAliasName"] = args ? args.clusterAliasName : undefined;
            resourceInputs["clusterSpecification"] = args ? args.clusterSpecification : undefined;
            resourceInputs["clusterType"] = args ? args.clusterType : undefined;
            resourceInputs["clusterVersion"] = args ? args.clusterVersion : undefined;
            resourceInputs["connectionType"] = args ? args.connectionType : undefined;
            resourceInputs["diskType"] = args ? args.diskType : undefined;
            resourceInputs["instanceCount"] = args ? args.instanceCount : undefined;
            resourceInputs["mseVersion"] = args ? args.mseVersion : undefined;
            resourceInputs["netType"] = args ? args.netType : undefined;
            resourceInputs["paymentType"] = args ? args.paymentType : undefined;
            resourceInputs["privateSlbSpecification"] = args ? args.privateSlbSpecification : undefined;
            resourceInputs["pubNetworkFlow"] = args ? args.pubNetworkFlow : undefined;
            resourceInputs["pubSlbSpecification"] = args ? args.pubSlbSpecification : undefined;
            resourceInputs["requestPars"] = args ? args.requestPars : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["appVersion"] = undefined /*out*/;
            resourceInputs["clusterId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MseCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MseCluster resources.
 */
export interface MseClusterState {
    aclEntryLists?: pulumi.Input<pulumi.Input<string>[]>;
    appVersion?: pulumi.Input<string>;
    clusterAliasName?: pulumi.Input<string>;
    clusterId?: pulumi.Input<string>;
    clusterSpecification?: pulumi.Input<string>;
    clusterType?: pulumi.Input<string>;
    clusterVersion?: pulumi.Input<string>;
    connectionType?: pulumi.Input<string>;
    diskType?: pulumi.Input<string>;
    instanceCount?: pulumi.Input<number>;
    mseVersion?: pulumi.Input<string>;
    netType?: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    privateSlbSpecification?: pulumi.Input<string>;
    pubNetworkFlow?: pulumi.Input<string>;
    pubSlbSpecification?: pulumi.Input<string>;
    requestPars?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.MseClusterTimeouts>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MseCluster resource.
 */
export interface MseClusterArgs {
    aclEntryLists?: pulumi.Input<pulumi.Input<string>[]>;
    clusterAliasName?: pulumi.Input<string>;
    clusterSpecification: pulumi.Input<string>;
    clusterType: pulumi.Input<string>;
    clusterVersion: pulumi.Input<string>;
    connectionType?: pulumi.Input<string>;
    diskType?: pulumi.Input<string>;
    instanceCount: pulumi.Input<number>;
    mseVersion?: pulumi.Input<string>;
    netType: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    privateSlbSpecification?: pulumi.Input<string>;
    pubNetworkFlow: pulumi.Input<string>;
    pubSlbSpecification?: pulumi.Input<string>;
    requestPars?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.MseClusterTimeouts>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
}
