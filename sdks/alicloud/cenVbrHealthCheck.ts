// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CenVbrHealthCheck extends pulumi.CustomResource {
    /**
     * Get an existing CenVbrHealthCheck resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CenVbrHealthCheckState, opts?: pulumi.CustomResourceOptions): CenVbrHealthCheck {
        return new CenVbrHealthCheck(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/cenVbrHealthCheck:CenVbrHealthCheck';

    /**
     * Returns true if the given object is an instance of CenVbrHealthCheck.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CenVbrHealthCheck {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CenVbrHealthCheck.__pulumiType;
    }

    public readonly cenId!: pulumi.Output<string>;
    public readonly healthCheckInterval!: pulumi.Output<number | undefined>;
    public readonly healthCheckSourceIp!: pulumi.Output<string>;
    public readonly healthCheckTargetIp!: pulumi.Output<string>;
    public readonly healthyThreshold!: pulumi.Output<number | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.CenVbrHealthCheckTimeouts | undefined>;
    public readonly vbrInstanceId!: pulumi.Output<string>;
    public readonly vbrInstanceOwnerId!: pulumi.Output<number | undefined>;
    public readonly vbrInstanceRegionId!: pulumi.Output<string>;

    /**
     * Create a CenVbrHealthCheck resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CenVbrHealthCheckArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CenVbrHealthCheckArgs | CenVbrHealthCheckState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CenVbrHealthCheckState | undefined;
            resourceInputs["cenId"] = state ? state.cenId : undefined;
            resourceInputs["healthCheckInterval"] = state ? state.healthCheckInterval : undefined;
            resourceInputs["healthCheckSourceIp"] = state ? state.healthCheckSourceIp : undefined;
            resourceInputs["healthCheckTargetIp"] = state ? state.healthCheckTargetIp : undefined;
            resourceInputs["healthyThreshold"] = state ? state.healthyThreshold : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vbrInstanceId"] = state ? state.vbrInstanceId : undefined;
            resourceInputs["vbrInstanceOwnerId"] = state ? state.vbrInstanceOwnerId : undefined;
            resourceInputs["vbrInstanceRegionId"] = state ? state.vbrInstanceRegionId : undefined;
        } else {
            const args = argsOrState as CenVbrHealthCheckArgs | undefined;
            if ((!args || args.cenId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cenId'");
            }
            if ((!args || args.healthCheckTargetIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'healthCheckTargetIp'");
            }
            if ((!args || args.vbrInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vbrInstanceId'");
            }
            if ((!args || args.vbrInstanceRegionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vbrInstanceRegionId'");
            }
            resourceInputs["cenId"] = args ? args.cenId : undefined;
            resourceInputs["healthCheckInterval"] = args ? args.healthCheckInterval : undefined;
            resourceInputs["healthCheckSourceIp"] = args ? args.healthCheckSourceIp : undefined;
            resourceInputs["healthCheckTargetIp"] = args ? args.healthCheckTargetIp : undefined;
            resourceInputs["healthyThreshold"] = args ? args.healthyThreshold : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vbrInstanceId"] = args ? args.vbrInstanceId : undefined;
            resourceInputs["vbrInstanceOwnerId"] = args ? args.vbrInstanceOwnerId : undefined;
            resourceInputs["vbrInstanceRegionId"] = args ? args.vbrInstanceRegionId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CenVbrHealthCheck.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CenVbrHealthCheck resources.
 */
export interface CenVbrHealthCheckState {
    cenId?: pulumi.Input<string>;
    healthCheckInterval?: pulumi.Input<number>;
    healthCheckSourceIp?: pulumi.Input<string>;
    healthCheckTargetIp?: pulumi.Input<string>;
    healthyThreshold?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.CenVbrHealthCheckTimeouts>;
    vbrInstanceId?: pulumi.Input<string>;
    vbrInstanceOwnerId?: pulumi.Input<number>;
    vbrInstanceRegionId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CenVbrHealthCheck resource.
 */
export interface CenVbrHealthCheckArgs {
    cenId: pulumi.Input<string>;
    healthCheckInterval?: pulumi.Input<number>;
    healthCheckSourceIp?: pulumi.Input<string>;
    healthCheckTargetIp: pulumi.Input<string>;
    healthyThreshold?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.CenVbrHealthCheckTimeouts>;
    vbrInstanceId: pulumi.Input<string>;
    vbrInstanceOwnerId?: pulumi.Input<number>;
    vbrInstanceRegionId: pulumi.Input<string>;
}
