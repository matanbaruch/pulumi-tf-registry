// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServiceMeshExtensionProvider extends pulumi.CustomResource {
    /**
     * Get an existing ServiceMeshExtensionProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceMeshExtensionProviderState, opts?: pulumi.CustomResourceOptions): ServiceMeshExtensionProvider {
        return new ServiceMeshExtensionProvider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/serviceMeshExtensionProvider:ServiceMeshExtensionProvider';

    /**
     * Returns true if the given object is an instance of ServiceMeshExtensionProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceMeshExtensionProvider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceMeshExtensionProvider.__pulumiType;
    }

    public readonly config!: pulumi.Output<string>;
    public readonly extensionProviderName!: pulumi.Output<string>;
    public readonly serviceMeshId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ServiceMeshExtensionProviderTimeouts | undefined>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a ServiceMeshExtensionProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceMeshExtensionProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceMeshExtensionProviderArgs | ServiceMeshExtensionProviderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceMeshExtensionProviderState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["extensionProviderName"] = state ? state.extensionProviderName : undefined;
            resourceInputs["serviceMeshId"] = state ? state.serviceMeshId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ServiceMeshExtensionProviderArgs | undefined;
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.extensionProviderName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'extensionProviderName'");
            }
            if ((!args || args.serviceMeshId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceMeshId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["extensionProviderName"] = args ? args.extensionProviderName : undefined;
            resourceInputs["serviceMeshId"] = args ? args.serviceMeshId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceMeshExtensionProvider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServiceMeshExtensionProvider resources.
 */
export interface ServiceMeshExtensionProviderState {
    config?: pulumi.Input<string>;
    extensionProviderName?: pulumi.Input<string>;
    serviceMeshId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ServiceMeshExtensionProviderTimeouts>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceMeshExtensionProvider resource.
 */
export interface ServiceMeshExtensionProviderArgs {
    config: pulumi.Input<string>;
    extensionProviderName: pulumi.Input<string>;
    serviceMeshId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ServiceMeshExtensionProviderTimeouts>;
    type: pulumi.Input<string>;
}
