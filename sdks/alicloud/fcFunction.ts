// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FcFunction extends pulumi.CustomResource {
    /**
     * Get an existing FcFunction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FcFunctionState, opts?: pulumi.CustomResourceOptions): FcFunction {
        return new FcFunction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/fcFunction:FcFunction';

    /**
     * Returns true if the given object is an instance of FcFunction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FcFunction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FcFunction.__pulumiType;
    }

    public readonly caPort!: pulumi.Output<number | undefined>;
    public readonly codeChecksum!: pulumi.Output<string>;
    public readonly customContainerConfig!: pulumi.Output<outputs.FcFunctionCustomContainerConfig | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly environmentVariables!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly filename!: pulumi.Output<string | undefined>;
    public /*out*/ readonly functionId!: pulumi.Output<string>;
    public readonly handler!: pulumi.Output<string>;
    public readonly initializationTimeout!: pulumi.Output<number | undefined>;
    public readonly initializer!: pulumi.Output<string | undefined>;
    public readonly instanceConcurrency!: pulumi.Output<number | undefined>;
    public readonly instanceType!: pulumi.Output<string | undefined>;
    public /*out*/ readonly lastModified!: pulumi.Output<string>;
    public readonly layers!: pulumi.Output<string[] | undefined>;
    public readonly memorySize!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly namePrefix!: pulumi.Output<string | undefined>;
    public readonly ossBucket!: pulumi.Output<string | undefined>;
    public readonly ossKey!: pulumi.Output<string | undefined>;
    public readonly runtime!: pulumi.Output<string>;
    public readonly service!: pulumi.Output<string>;
    public readonly timeout!: pulumi.Output<number | undefined>;

    /**
     * Create a FcFunction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FcFunctionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FcFunctionArgs | FcFunctionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FcFunctionState | undefined;
            resourceInputs["caPort"] = state ? state.caPort : undefined;
            resourceInputs["codeChecksum"] = state ? state.codeChecksum : undefined;
            resourceInputs["customContainerConfig"] = state ? state.customContainerConfig : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["environmentVariables"] = state ? state.environmentVariables : undefined;
            resourceInputs["filename"] = state ? state.filename : undefined;
            resourceInputs["functionId"] = state ? state.functionId : undefined;
            resourceInputs["handler"] = state ? state.handler : undefined;
            resourceInputs["initializationTimeout"] = state ? state.initializationTimeout : undefined;
            resourceInputs["initializer"] = state ? state.initializer : undefined;
            resourceInputs["instanceConcurrency"] = state ? state.instanceConcurrency : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["lastModified"] = state ? state.lastModified : undefined;
            resourceInputs["layers"] = state ? state.layers : undefined;
            resourceInputs["memorySize"] = state ? state.memorySize : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namePrefix"] = state ? state.namePrefix : undefined;
            resourceInputs["ossBucket"] = state ? state.ossBucket : undefined;
            resourceInputs["ossKey"] = state ? state.ossKey : undefined;
            resourceInputs["runtime"] = state ? state.runtime : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
        } else {
            const args = argsOrState as FcFunctionArgs | undefined;
            if ((!args || args.handler === undefined) && !opts.urn) {
                throw new Error("Missing required property 'handler'");
            }
            if ((!args || args.runtime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtime'");
            }
            if ((!args || args.service === undefined) && !opts.urn) {
                throw new Error("Missing required property 'service'");
            }
            resourceInputs["caPort"] = args ? args.caPort : undefined;
            resourceInputs["codeChecksum"] = args ? args.codeChecksum : undefined;
            resourceInputs["customContainerConfig"] = args ? args.customContainerConfig : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["environmentVariables"] = args ? args.environmentVariables : undefined;
            resourceInputs["filename"] = args ? args.filename : undefined;
            resourceInputs["handler"] = args ? args.handler : undefined;
            resourceInputs["initializationTimeout"] = args ? args.initializationTimeout : undefined;
            resourceInputs["initializer"] = args ? args.initializer : undefined;
            resourceInputs["instanceConcurrency"] = args ? args.instanceConcurrency : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["layers"] = args ? args.layers : undefined;
            resourceInputs["memorySize"] = args ? args.memorySize : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namePrefix"] = args ? args.namePrefix : undefined;
            resourceInputs["ossBucket"] = args ? args.ossBucket : undefined;
            resourceInputs["ossKey"] = args ? args.ossKey : undefined;
            resourceInputs["runtime"] = args ? args.runtime : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["functionId"] = undefined /*out*/;
            resourceInputs["lastModified"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FcFunction.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FcFunction resources.
 */
export interface FcFunctionState {
    caPort?: pulumi.Input<number>;
    codeChecksum?: pulumi.Input<string>;
    customContainerConfig?: pulumi.Input<inputs.FcFunctionCustomContainerConfig>;
    description?: pulumi.Input<string>;
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    filename?: pulumi.Input<string>;
    functionId?: pulumi.Input<string>;
    handler?: pulumi.Input<string>;
    initializationTimeout?: pulumi.Input<number>;
    initializer?: pulumi.Input<string>;
    instanceConcurrency?: pulumi.Input<number>;
    instanceType?: pulumi.Input<string>;
    lastModified?: pulumi.Input<string>;
    layers?: pulumi.Input<pulumi.Input<string>[]>;
    memorySize?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    namePrefix?: pulumi.Input<string>;
    ossBucket?: pulumi.Input<string>;
    ossKey?: pulumi.Input<string>;
    runtime?: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a FcFunction resource.
 */
export interface FcFunctionArgs {
    caPort?: pulumi.Input<number>;
    codeChecksum?: pulumi.Input<string>;
    customContainerConfig?: pulumi.Input<inputs.FcFunctionCustomContainerConfig>;
    description?: pulumi.Input<string>;
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    filename?: pulumi.Input<string>;
    handler: pulumi.Input<string>;
    initializationTimeout?: pulumi.Input<number>;
    initializer?: pulumi.Input<string>;
    instanceConcurrency?: pulumi.Input<number>;
    instanceType?: pulumi.Input<string>;
    layers?: pulumi.Input<pulumi.Input<string>[]>;
    memorySize?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    namePrefix?: pulumi.Input<string>;
    ossBucket?: pulumi.Input<string>;
    ossKey?: pulumi.Input<string>;
    runtime: pulumi.Input<string>;
    service: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
}
