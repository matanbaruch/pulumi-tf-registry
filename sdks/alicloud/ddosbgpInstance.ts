// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DdosbgpInstance extends pulumi.CustomResource {
    /**
     * Get an existing DdosbgpInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosbgpInstanceState, opts?: pulumi.CustomResourceOptions): DdosbgpInstance {
        return new DdosbgpInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/ddosbgpInstance:DdosbgpInstance';

    /**
     * Returns true if the given object is an instance of DdosbgpInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosbgpInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosbgpInstance.__pulumiType;
    }

    public readonly bandwidth!: pulumi.Output<number>;
    public readonly baseBandwidth!: pulumi.Output<number | undefined>;
    public readonly ipCount!: pulumi.Output<number>;
    public readonly ipType!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly normalBandwidth!: pulumi.Output<number>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a DdosbgpInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosbgpInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosbgpInstanceArgs | DdosbgpInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosbgpInstanceState | undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["baseBandwidth"] = state ? state.baseBandwidth : undefined;
            resourceInputs["ipCount"] = state ? state.ipCount : undefined;
            resourceInputs["ipType"] = state ? state.ipType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["normalBandwidth"] = state ? state.normalBandwidth : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DdosbgpInstanceArgs | undefined;
            if ((!args || args.bandwidth === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bandwidth'");
            }
            if ((!args || args.ipCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipCount'");
            }
            if ((!args || args.ipType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipType'");
            }
            if ((!args || args.normalBandwidth === undefined) && !opts.urn) {
                throw new Error("Missing required property 'normalBandwidth'");
            }
            resourceInputs["bandwidth"] = args ? args.bandwidth : undefined;
            resourceInputs["baseBandwidth"] = args ? args.baseBandwidth : undefined;
            resourceInputs["ipCount"] = args ? args.ipCount : undefined;
            resourceInputs["ipType"] = args ? args.ipType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["normalBandwidth"] = args ? args.normalBandwidth : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosbgpInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosbgpInstance resources.
 */
export interface DdosbgpInstanceState {
    bandwidth?: pulumi.Input<number>;
    baseBandwidth?: pulumi.Input<number>;
    ipCount?: pulumi.Input<number>;
    ipType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    normalBandwidth?: pulumi.Input<number>;
    period?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdosbgpInstance resource.
 */
export interface DdosbgpInstanceArgs {
    bandwidth: pulumi.Input<number>;
    baseBandwidth?: pulumi.Input<number>;
    ipCount: pulumi.Input<number>;
    ipType: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    normalBandwidth: pulumi.Input<number>;
    period?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}
