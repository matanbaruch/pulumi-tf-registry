// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ResourceManagerHandshake extends pulumi.CustomResource {
    /**
     * Get an existing ResourceManagerHandshake resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceManagerHandshakeState, opts?: pulumi.CustomResourceOptions): ResourceManagerHandshake {
        return new ResourceManagerHandshake(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/resourceManagerHandshake:ResourceManagerHandshake';

    /**
     * Returns true if the given object is an instance of ResourceManagerHandshake.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourceManagerHandshake {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceManagerHandshake.__pulumiType;
    }

    public /*out*/ readonly expireTime!: pulumi.Output<string>;
    public /*out*/ readonly masterAccountId!: pulumi.Output<string>;
    public /*out*/ readonly masterAccountName!: pulumi.Output<string>;
    public /*out*/ readonly modifyTime!: pulumi.Output<string>;
    public readonly note!: pulumi.Output<string | undefined>;
    public /*out*/ readonly resourceDirectoryId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly targetEntity!: pulumi.Output<string>;
    public readonly targetType!: pulumi.Output<string>;

    /**
     * Create a ResourceManagerHandshake resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceManagerHandshakeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceManagerHandshakeArgs | ResourceManagerHandshakeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceManagerHandshakeState | undefined;
            resourceInputs["expireTime"] = state ? state.expireTime : undefined;
            resourceInputs["masterAccountId"] = state ? state.masterAccountId : undefined;
            resourceInputs["masterAccountName"] = state ? state.masterAccountName : undefined;
            resourceInputs["modifyTime"] = state ? state.modifyTime : undefined;
            resourceInputs["note"] = state ? state.note : undefined;
            resourceInputs["resourceDirectoryId"] = state ? state.resourceDirectoryId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["targetEntity"] = state ? state.targetEntity : undefined;
            resourceInputs["targetType"] = state ? state.targetType : undefined;
        } else {
            const args = argsOrState as ResourceManagerHandshakeArgs | undefined;
            if ((!args || args.targetEntity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetEntity'");
            }
            if ((!args || args.targetType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetType'");
            }
            resourceInputs["note"] = args ? args.note : undefined;
            resourceInputs["targetEntity"] = args ? args.targetEntity : undefined;
            resourceInputs["targetType"] = args ? args.targetType : undefined;
            resourceInputs["expireTime"] = undefined /*out*/;
            resourceInputs["masterAccountId"] = undefined /*out*/;
            resourceInputs["masterAccountName"] = undefined /*out*/;
            resourceInputs["modifyTime"] = undefined /*out*/;
            resourceInputs["resourceDirectoryId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourceManagerHandshake.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ResourceManagerHandshake resources.
 */
export interface ResourceManagerHandshakeState {
    expireTime?: pulumi.Input<string>;
    masterAccountId?: pulumi.Input<string>;
    masterAccountName?: pulumi.Input<string>;
    modifyTime?: pulumi.Input<string>;
    note?: pulumi.Input<string>;
    resourceDirectoryId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    targetEntity?: pulumi.Input<string>;
    targetType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ResourceManagerHandshake resource.
 */
export interface ResourceManagerHandshakeArgs {
    note?: pulumi.Input<string>;
    targetEntity: pulumi.Input<string>;
    targetType: pulumi.Input<string>;
}
