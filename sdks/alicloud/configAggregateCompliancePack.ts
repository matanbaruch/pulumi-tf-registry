// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ConfigAggregateCompliancePack extends pulumi.CustomResource {
    /**
     * Get an existing ConfigAggregateCompliancePack resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigAggregateCompliancePackState, opts?: pulumi.CustomResourceOptions): ConfigAggregateCompliancePack {
        return new ConfigAggregateCompliancePack(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/configAggregateCompliancePack:ConfigAggregateCompliancePack';

    /**
     * Returns true if the given object is an instance of ConfigAggregateCompliancePack.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigAggregateCompliancePack {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigAggregateCompliancePack.__pulumiType;
    }

    public readonly aggregateCompliancePackName!: pulumi.Output<string>;
    public /*out*/ readonly aggregatorCompliancePackId!: pulumi.Output<string>;
    public readonly aggregatorId!: pulumi.Output<string>;
    public readonly compliancePackTemplateId!: pulumi.Output<string | undefined>;
    public readonly configRuleIds!: pulumi.Output<outputs.ConfigAggregateCompliancePackConfigRuleId[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly configRules!: pulumi.Output<outputs.ConfigAggregateCompliancePackConfigRule[] | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly riskLevel!: pulumi.Output<number>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ConfigAggregateCompliancePackTimeouts | undefined>;

    /**
     * Create a ConfigAggregateCompliancePack resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigAggregateCompliancePackArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigAggregateCompliancePackArgs | ConfigAggregateCompliancePackState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigAggregateCompliancePackState | undefined;
            resourceInputs["aggregateCompliancePackName"] = state ? state.aggregateCompliancePackName : undefined;
            resourceInputs["aggregatorCompliancePackId"] = state ? state.aggregatorCompliancePackId : undefined;
            resourceInputs["aggregatorId"] = state ? state.aggregatorId : undefined;
            resourceInputs["compliancePackTemplateId"] = state ? state.compliancePackTemplateId : undefined;
            resourceInputs["configRuleIds"] = state ? state.configRuleIds : undefined;
            resourceInputs["configRules"] = state ? state.configRules : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["riskLevel"] = state ? state.riskLevel : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ConfigAggregateCompliancePackArgs | undefined;
            if ((!args || args.aggregateCompliancePackName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aggregateCompliancePackName'");
            }
            if ((!args || args.aggregatorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aggregatorId'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.riskLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'riskLevel'");
            }
            resourceInputs["aggregateCompliancePackName"] = args ? args.aggregateCompliancePackName : undefined;
            resourceInputs["aggregatorId"] = args ? args.aggregatorId : undefined;
            resourceInputs["compliancePackTemplateId"] = args ? args.compliancePackTemplateId : undefined;
            resourceInputs["configRuleIds"] = args ? args.configRuleIds : undefined;
            resourceInputs["configRules"] = args ? args.configRules : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["riskLevel"] = args ? args.riskLevel : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["aggregatorCompliancePackId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConfigAggregateCompliancePack.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConfigAggregateCompliancePack resources.
 */
export interface ConfigAggregateCompliancePackState {
    aggregateCompliancePackName?: pulumi.Input<string>;
    aggregatorCompliancePackId?: pulumi.Input<string>;
    aggregatorId?: pulumi.Input<string>;
    compliancePackTemplateId?: pulumi.Input<string>;
    configRuleIds?: pulumi.Input<pulumi.Input<inputs.ConfigAggregateCompliancePackConfigRuleId>[]>;
    /**
     * @deprecated Deprecated
     */
    configRules?: pulumi.Input<pulumi.Input<inputs.ConfigAggregateCompliancePackConfigRule>[]>;
    description?: pulumi.Input<string>;
    riskLevel?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ConfigAggregateCompliancePackTimeouts>;
}

/**
 * The set of arguments for constructing a ConfigAggregateCompliancePack resource.
 */
export interface ConfigAggregateCompliancePackArgs {
    aggregateCompliancePackName: pulumi.Input<string>;
    aggregatorId: pulumi.Input<string>;
    compliancePackTemplateId?: pulumi.Input<string>;
    configRuleIds?: pulumi.Input<pulumi.Input<inputs.ConfigAggregateCompliancePackConfigRuleId>[]>;
    /**
     * @deprecated Deprecated
     */
    configRules?: pulumi.Input<pulumi.Input<inputs.ConfigAggregateCompliancePackConfigRule>[]>;
    description: pulumi.Input<string>;
    riskLevel: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.ConfigAggregateCompliancePackTimeouts>;
}
