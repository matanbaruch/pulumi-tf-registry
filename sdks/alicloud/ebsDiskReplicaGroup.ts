// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EbsDiskReplicaGroup extends pulumi.CustomResource {
    /**
     * Get an existing EbsDiskReplicaGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EbsDiskReplicaGroupState, opts?: pulumi.CustomResourceOptions): EbsDiskReplicaGroup {
        return new EbsDiskReplicaGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/ebsDiskReplicaGroup:EbsDiskReplicaGroup';

    /**
     * Returns true if the given object is an instance of EbsDiskReplicaGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EbsDiskReplicaGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EbsDiskReplicaGroup.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly destinationRegionId!: pulumi.Output<string>;
    public readonly destinationZoneId!: pulumi.Output<string>;
    public readonly groupName!: pulumi.Output<string | undefined>;
    public readonly rpo!: pulumi.Output<number>;
    public readonly sourceRegionId!: pulumi.Output<string>;
    public readonly sourceZoneId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.EbsDiskReplicaGroupTimeouts | undefined>;

    /**
     * Create a EbsDiskReplicaGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EbsDiskReplicaGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EbsDiskReplicaGroupArgs | EbsDiskReplicaGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EbsDiskReplicaGroupState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationRegionId"] = state ? state.destinationRegionId : undefined;
            resourceInputs["destinationZoneId"] = state ? state.destinationZoneId : undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["rpo"] = state ? state.rpo : undefined;
            resourceInputs["sourceRegionId"] = state ? state.sourceRegionId : undefined;
            resourceInputs["sourceZoneId"] = state ? state.sourceZoneId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as EbsDiskReplicaGroupArgs | undefined;
            if ((!args || args.destinationRegionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationRegionId'");
            }
            if ((!args || args.destinationZoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationZoneId'");
            }
            if ((!args || args.sourceRegionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceRegionId'");
            }
            if ((!args || args.sourceZoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceZoneId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationRegionId"] = args ? args.destinationRegionId : undefined;
            resourceInputs["destinationZoneId"] = args ? args.destinationZoneId : undefined;
            resourceInputs["groupName"] = args ? args.groupName : undefined;
            resourceInputs["rpo"] = args ? args.rpo : undefined;
            resourceInputs["sourceRegionId"] = args ? args.sourceRegionId : undefined;
            resourceInputs["sourceZoneId"] = args ? args.sourceZoneId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EbsDiskReplicaGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EbsDiskReplicaGroup resources.
 */
export interface EbsDiskReplicaGroupState {
    description?: pulumi.Input<string>;
    destinationRegionId?: pulumi.Input<string>;
    destinationZoneId?: pulumi.Input<string>;
    groupName?: pulumi.Input<string>;
    rpo?: pulumi.Input<number>;
    sourceRegionId?: pulumi.Input<string>;
    sourceZoneId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EbsDiskReplicaGroupTimeouts>;
}

/**
 * The set of arguments for constructing a EbsDiskReplicaGroup resource.
 */
export interface EbsDiskReplicaGroupArgs {
    description?: pulumi.Input<string>;
    destinationRegionId: pulumi.Input<string>;
    destinationZoneId: pulumi.Input<string>;
    groupName?: pulumi.Input<string>;
    rpo?: pulumi.Input<number>;
    sourceRegionId: pulumi.Input<string>;
    sourceZoneId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EbsDiskReplicaGroupTimeouts>;
}
