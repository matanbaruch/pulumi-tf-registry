// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class BrainIndustrialPidLoop extends pulumi.CustomResource {
    /**
     * Get an existing BrainIndustrialPidLoop resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BrainIndustrialPidLoopState, opts?: pulumi.CustomResourceOptions): BrainIndustrialPidLoop {
        return new BrainIndustrialPidLoop(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/brainIndustrialPidLoop:BrainIndustrialPidLoop';

    /**
     * Returns true if the given object is an instance of BrainIndustrialPidLoop.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BrainIndustrialPidLoop {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BrainIndustrialPidLoop.__pulumiType;
    }

    public readonly pidLoopConfiguration!: pulumi.Output<string>;
    public readonly pidLoopDcsType!: pulumi.Output<string>;
    public readonly pidLoopDesc!: pulumi.Output<string | undefined>;
    public readonly pidLoopIsCrucial!: pulumi.Output<boolean>;
    public readonly pidLoopName!: pulumi.Output<string>;
    public readonly pidLoopType!: pulumi.Output<string>;
    public readonly pidProjectId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a BrainIndustrialPidLoop resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BrainIndustrialPidLoopArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BrainIndustrialPidLoopArgs | BrainIndustrialPidLoopState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BrainIndustrialPidLoopState | undefined;
            resourceInputs["pidLoopConfiguration"] = state ? state.pidLoopConfiguration : undefined;
            resourceInputs["pidLoopDcsType"] = state ? state.pidLoopDcsType : undefined;
            resourceInputs["pidLoopDesc"] = state ? state.pidLoopDesc : undefined;
            resourceInputs["pidLoopIsCrucial"] = state ? state.pidLoopIsCrucial : undefined;
            resourceInputs["pidLoopName"] = state ? state.pidLoopName : undefined;
            resourceInputs["pidLoopType"] = state ? state.pidLoopType : undefined;
            resourceInputs["pidProjectId"] = state ? state.pidProjectId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as BrainIndustrialPidLoopArgs | undefined;
            if ((!args || args.pidLoopConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pidLoopConfiguration'");
            }
            if ((!args || args.pidLoopDcsType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pidLoopDcsType'");
            }
            if ((!args || args.pidLoopIsCrucial === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pidLoopIsCrucial'");
            }
            if ((!args || args.pidLoopName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pidLoopName'");
            }
            if ((!args || args.pidLoopType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pidLoopType'");
            }
            if ((!args || args.pidProjectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pidProjectId'");
            }
            resourceInputs["pidLoopConfiguration"] = args ? args.pidLoopConfiguration : undefined;
            resourceInputs["pidLoopDcsType"] = args ? args.pidLoopDcsType : undefined;
            resourceInputs["pidLoopDesc"] = args ? args.pidLoopDesc : undefined;
            resourceInputs["pidLoopIsCrucial"] = args ? args.pidLoopIsCrucial : undefined;
            resourceInputs["pidLoopName"] = args ? args.pidLoopName : undefined;
            resourceInputs["pidLoopType"] = args ? args.pidLoopType : undefined;
            resourceInputs["pidProjectId"] = args ? args.pidProjectId : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BrainIndustrialPidLoop.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BrainIndustrialPidLoop resources.
 */
export interface BrainIndustrialPidLoopState {
    pidLoopConfiguration?: pulumi.Input<string>;
    pidLoopDcsType?: pulumi.Input<string>;
    pidLoopDesc?: pulumi.Input<string>;
    pidLoopIsCrucial?: pulumi.Input<boolean>;
    pidLoopName?: pulumi.Input<string>;
    pidLoopType?: pulumi.Input<string>;
    pidProjectId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BrainIndustrialPidLoop resource.
 */
export interface BrainIndustrialPidLoopArgs {
    pidLoopConfiguration: pulumi.Input<string>;
    pidLoopDcsType: pulumi.Input<string>;
    pidLoopDesc?: pulumi.Input<string>;
    pidLoopIsCrucial: pulumi.Input<boolean>;
    pidLoopName: pulumi.Input<string>;
    pidLoopType: pulumi.Input<string>;
    pidProjectId: pulumi.Input<string>;
}
