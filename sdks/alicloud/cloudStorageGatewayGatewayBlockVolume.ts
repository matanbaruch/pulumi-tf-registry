// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudStorageGatewayGatewayBlockVolume extends pulumi.CustomResource {
    /**
     * Get an existing CloudStorageGatewayGatewayBlockVolume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudStorageGatewayGatewayBlockVolumeState, opts?: pulumi.CustomResourceOptions): CloudStorageGatewayGatewayBlockVolume {
        return new CloudStorageGatewayGatewayBlockVolume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/cloudStorageGatewayGatewayBlockVolume:CloudStorageGatewayGatewayBlockVolume';

    /**
     * Returns true if the given object is an instance of CloudStorageGatewayGatewayBlockVolume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudStorageGatewayGatewayBlockVolume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudStorageGatewayGatewayBlockVolume.__pulumiType;
    }

    public readonly cacheMode!: pulumi.Output<string>;
    public readonly chapEnabled!: pulumi.Output<boolean>;
    public readonly chapInPassword!: pulumi.Output<string | undefined>;
    public readonly chapInUser!: pulumi.Output<string | undefined>;
    public readonly chunkSize!: pulumi.Output<number>;
    public readonly gatewayBlockVolumeName!: pulumi.Output<string>;
    public readonly gatewayId!: pulumi.Output<string>;
    public /*out*/ readonly indexId!: pulumi.Output<string>;
    public readonly isSourceDeletion!: pulumi.Output<boolean | undefined>;
    public readonly localPath!: pulumi.Output<string | undefined>;
    public readonly ossBucketName!: pulumi.Output<string>;
    public readonly ossBucketSsl!: pulumi.Output<boolean>;
    public readonly ossEndpoint!: pulumi.Output<string>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly recovery!: pulumi.Output<boolean | undefined>;
    public readonly size!: pulumi.Output<number>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CloudStorageGatewayGatewayBlockVolumeTimeouts | undefined>;

    /**
     * Create a CloudStorageGatewayGatewayBlockVolume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudStorageGatewayGatewayBlockVolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudStorageGatewayGatewayBlockVolumeArgs | CloudStorageGatewayGatewayBlockVolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudStorageGatewayGatewayBlockVolumeState | undefined;
            resourceInputs["cacheMode"] = state ? state.cacheMode : undefined;
            resourceInputs["chapEnabled"] = state ? state.chapEnabled : undefined;
            resourceInputs["chapInPassword"] = state ? state.chapInPassword : undefined;
            resourceInputs["chapInUser"] = state ? state.chapInUser : undefined;
            resourceInputs["chunkSize"] = state ? state.chunkSize : undefined;
            resourceInputs["gatewayBlockVolumeName"] = state ? state.gatewayBlockVolumeName : undefined;
            resourceInputs["gatewayId"] = state ? state.gatewayId : undefined;
            resourceInputs["indexId"] = state ? state.indexId : undefined;
            resourceInputs["isSourceDeletion"] = state ? state.isSourceDeletion : undefined;
            resourceInputs["localPath"] = state ? state.localPath : undefined;
            resourceInputs["ossBucketName"] = state ? state.ossBucketName : undefined;
            resourceInputs["ossBucketSsl"] = state ? state.ossBucketSsl : undefined;
            resourceInputs["ossEndpoint"] = state ? state.ossEndpoint : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["recovery"] = state ? state.recovery : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as CloudStorageGatewayGatewayBlockVolumeArgs | undefined;
            if ((!args || args.gatewayBlockVolumeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayBlockVolumeName'");
            }
            if ((!args || args.gatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayId'");
            }
            if ((!args || args.ossBucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ossBucketName'");
            }
            if ((!args || args.ossEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ossEndpoint'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["cacheMode"] = args ? args.cacheMode : undefined;
            resourceInputs["chapEnabled"] = args ? args.chapEnabled : undefined;
            resourceInputs["chapInPassword"] = args ? args.chapInPassword : undefined;
            resourceInputs["chapInUser"] = args ? args.chapInUser : undefined;
            resourceInputs["chunkSize"] = args ? args.chunkSize : undefined;
            resourceInputs["gatewayBlockVolumeName"] = args ? args.gatewayBlockVolumeName : undefined;
            resourceInputs["gatewayId"] = args ? args.gatewayId : undefined;
            resourceInputs["isSourceDeletion"] = args ? args.isSourceDeletion : undefined;
            resourceInputs["localPath"] = args ? args.localPath : undefined;
            resourceInputs["ossBucketName"] = args ? args.ossBucketName : undefined;
            resourceInputs["ossBucketSsl"] = args ? args.ossBucketSsl : undefined;
            resourceInputs["ossEndpoint"] = args ? args.ossEndpoint : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["recovery"] = args ? args.recovery : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["indexId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudStorageGatewayGatewayBlockVolume.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudStorageGatewayGatewayBlockVolume resources.
 */
export interface CloudStorageGatewayGatewayBlockVolumeState {
    cacheMode?: pulumi.Input<string>;
    chapEnabled?: pulumi.Input<boolean>;
    chapInPassword?: pulumi.Input<string>;
    chapInUser?: pulumi.Input<string>;
    chunkSize?: pulumi.Input<number>;
    gatewayBlockVolumeName?: pulumi.Input<string>;
    gatewayId?: pulumi.Input<string>;
    indexId?: pulumi.Input<string>;
    isSourceDeletion?: pulumi.Input<boolean>;
    localPath?: pulumi.Input<string>;
    ossBucketName?: pulumi.Input<string>;
    ossBucketSsl?: pulumi.Input<boolean>;
    ossEndpoint?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    recovery?: pulumi.Input<boolean>;
    size?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CloudStorageGatewayGatewayBlockVolumeTimeouts>;
}

/**
 * The set of arguments for constructing a CloudStorageGatewayGatewayBlockVolume resource.
 */
export interface CloudStorageGatewayGatewayBlockVolumeArgs {
    cacheMode?: pulumi.Input<string>;
    chapEnabled?: pulumi.Input<boolean>;
    chapInPassword?: pulumi.Input<string>;
    chapInUser?: pulumi.Input<string>;
    chunkSize?: pulumi.Input<number>;
    gatewayBlockVolumeName: pulumi.Input<string>;
    gatewayId: pulumi.Input<string>;
    isSourceDeletion?: pulumi.Input<boolean>;
    localPath?: pulumi.Input<string>;
    ossBucketName: pulumi.Input<string>;
    ossBucketSsl?: pulumi.Input<boolean>;
    ossEndpoint: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    recovery?: pulumi.Input<boolean>;
    size?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.CloudStorageGatewayGatewayBlockVolumeTimeouts>;
}
