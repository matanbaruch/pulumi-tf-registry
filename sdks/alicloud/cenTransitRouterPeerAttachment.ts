// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CenTransitRouterPeerAttachment extends pulumi.CustomResource {
    /**
     * Get an existing CenTransitRouterPeerAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CenTransitRouterPeerAttachmentState, opts?: pulumi.CustomResourceOptions): CenTransitRouterPeerAttachment {
        return new CenTransitRouterPeerAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/cenTransitRouterPeerAttachment:CenTransitRouterPeerAttachment';

    /**
     * Returns true if the given object is an instance of CenTransitRouterPeerAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CenTransitRouterPeerAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CenTransitRouterPeerAttachment.__pulumiType;
    }

    public readonly autoPublishRouteEnabled!: pulumi.Output<boolean | undefined>;
    public readonly bandwidth!: pulumi.Output<number | undefined>;
    public readonly bandwidthType!: pulumi.Output<string>;
    public readonly cenBandwidthPackageId!: pulumi.Output<string | undefined>;
    public readonly cenId!: pulumi.Output<string>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly defaultLinkType!: pulumi.Output<string>;
    public readonly dryRun!: pulumi.Output<boolean | undefined>;
    public readonly peerTransitRouterId!: pulumi.Output<string>;
    public readonly peerTransitRouterRegionId!: pulumi.Output<string>;
    public readonly resourceType!: pulumi.Output<string | undefined>;
    public readonly routeTableAssociationEnabled!: pulumi.Output<boolean | undefined>;
    public readonly routeTablePropagationEnabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CenTransitRouterPeerAttachmentTimeouts | undefined>;
    public readonly transitRouterAttachmentDescription!: pulumi.Output<string | undefined>;
    public /*out*/ readonly transitRouterAttachmentId!: pulumi.Output<string>;
    public readonly transitRouterAttachmentName!: pulumi.Output<string | undefined>;
    public readonly transitRouterId!: pulumi.Output<string | undefined>;

    /**
     * Create a CenTransitRouterPeerAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CenTransitRouterPeerAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CenTransitRouterPeerAttachmentArgs | CenTransitRouterPeerAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CenTransitRouterPeerAttachmentState | undefined;
            resourceInputs["autoPublishRouteEnabled"] = state ? state.autoPublishRouteEnabled : undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["bandwidthType"] = state ? state.bandwidthType : undefined;
            resourceInputs["cenBandwidthPackageId"] = state ? state.cenBandwidthPackageId : undefined;
            resourceInputs["cenId"] = state ? state.cenId : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["defaultLinkType"] = state ? state.defaultLinkType : undefined;
            resourceInputs["dryRun"] = state ? state.dryRun : undefined;
            resourceInputs["peerTransitRouterId"] = state ? state.peerTransitRouterId : undefined;
            resourceInputs["peerTransitRouterRegionId"] = state ? state.peerTransitRouterRegionId : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["routeTableAssociationEnabled"] = state ? state.routeTableAssociationEnabled : undefined;
            resourceInputs["routeTablePropagationEnabled"] = state ? state.routeTablePropagationEnabled : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["transitRouterAttachmentDescription"] = state ? state.transitRouterAttachmentDescription : undefined;
            resourceInputs["transitRouterAttachmentId"] = state ? state.transitRouterAttachmentId : undefined;
            resourceInputs["transitRouterAttachmentName"] = state ? state.transitRouterAttachmentName : undefined;
            resourceInputs["transitRouterId"] = state ? state.transitRouterId : undefined;
        } else {
            const args = argsOrState as CenTransitRouterPeerAttachmentArgs | undefined;
            if ((!args || args.cenId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cenId'");
            }
            if ((!args || args.peerTransitRouterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerTransitRouterId'");
            }
            if ((!args || args.peerTransitRouterRegionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerTransitRouterRegionId'");
            }
            resourceInputs["autoPublishRouteEnabled"] = args ? args.autoPublishRouteEnabled : undefined;
            resourceInputs["bandwidth"] = args ? args.bandwidth : undefined;
            resourceInputs["bandwidthType"] = args ? args.bandwidthType : undefined;
            resourceInputs["cenBandwidthPackageId"] = args ? args.cenBandwidthPackageId : undefined;
            resourceInputs["cenId"] = args ? args.cenId : undefined;
            resourceInputs["defaultLinkType"] = args ? args.defaultLinkType : undefined;
            resourceInputs["dryRun"] = args ? args.dryRun : undefined;
            resourceInputs["peerTransitRouterId"] = args ? args.peerTransitRouterId : undefined;
            resourceInputs["peerTransitRouterRegionId"] = args ? args.peerTransitRouterRegionId : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["routeTableAssociationEnabled"] = args ? args.routeTableAssociationEnabled : undefined;
            resourceInputs["routeTablePropagationEnabled"] = args ? args.routeTablePropagationEnabled : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["transitRouterAttachmentDescription"] = args ? args.transitRouterAttachmentDescription : undefined;
            resourceInputs["transitRouterAttachmentName"] = args ? args.transitRouterAttachmentName : undefined;
            resourceInputs["transitRouterId"] = args ? args.transitRouterId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["transitRouterAttachmentId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CenTransitRouterPeerAttachment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CenTransitRouterPeerAttachment resources.
 */
export interface CenTransitRouterPeerAttachmentState {
    autoPublishRouteEnabled?: pulumi.Input<boolean>;
    bandwidth?: pulumi.Input<number>;
    bandwidthType?: pulumi.Input<string>;
    cenBandwidthPackageId?: pulumi.Input<string>;
    cenId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    defaultLinkType?: pulumi.Input<string>;
    dryRun?: pulumi.Input<boolean>;
    peerTransitRouterId?: pulumi.Input<string>;
    peerTransitRouterRegionId?: pulumi.Input<string>;
    resourceType?: pulumi.Input<string>;
    routeTableAssociationEnabled?: pulumi.Input<boolean>;
    routeTablePropagationEnabled?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CenTransitRouterPeerAttachmentTimeouts>;
    transitRouterAttachmentDescription?: pulumi.Input<string>;
    transitRouterAttachmentId?: pulumi.Input<string>;
    transitRouterAttachmentName?: pulumi.Input<string>;
    transitRouterId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CenTransitRouterPeerAttachment resource.
 */
export interface CenTransitRouterPeerAttachmentArgs {
    autoPublishRouteEnabled?: pulumi.Input<boolean>;
    bandwidth?: pulumi.Input<number>;
    bandwidthType?: pulumi.Input<string>;
    cenBandwidthPackageId?: pulumi.Input<string>;
    cenId: pulumi.Input<string>;
    defaultLinkType?: pulumi.Input<string>;
    dryRun?: pulumi.Input<boolean>;
    peerTransitRouterId: pulumi.Input<string>;
    peerTransitRouterRegionId: pulumi.Input<string>;
    resourceType?: pulumi.Input<string>;
    routeTableAssociationEnabled?: pulumi.Input<boolean>;
    routeTablePropagationEnabled?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.CenTransitRouterPeerAttachmentTimeouts>;
    transitRouterAttachmentDescription?: pulumi.Input<string>;
    transitRouterAttachmentName?: pulumi.Input<string>;
    transitRouterId?: pulumi.Input<string>;
}
