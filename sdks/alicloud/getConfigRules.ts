// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getConfigRules(args?: GetConfigRulesArgs, opts?: pulumi.InvokeOptions): Promise<GetConfigRulesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("alicloud:index/getConfigRules:getConfigRules", {
        "configRuleState": args.configRuleState,
        "enableDetails": args.enableDetails,
        "id": args.id,
        "ids": args.ids,
        "memberId": args.memberId,
        "messageType": args.messageType,
        "multiAccount": args.multiAccount,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "riskLevel": args.riskLevel,
        "ruleName": args.ruleName,
        "status": args.status,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getConfigRules.
 */
export interface GetConfigRulesArgs {
    /**
     * @deprecated Deprecated
     */
    configRuleState?: string;
    enableDetails?: boolean;
    id?: string;
    ids?: string[];
    memberId?: number;
    messageType?: string;
    multiAccount?: boolean;
    nameRegex?: string;
    outputFile?: string;
    riskLevel?: number;
    ruleName?: string;
    status?: string;
}

/**
 * A collection of values returned by getConfigRules.
 */
export interface GetConfigRulesResult {
    /**
     * @deprecated Deprecated
     */
    readonly configRuleState?: string;
    readonly enableDetails?: boolean;
    readonly id: string;
    readonly ids: string[];
    readonly memberId?: number;
    readonly messageType?: string;
    readonly multiAccount?: boolean;
    readonly nameRegex?: string;
    readonly names: string[];
    readonly outputFile?: string;
    readonly riskLevel?: number;
    readonly ruleName?: string;
    readonly rules: outputs.GetConfigRulesRule[];
    readonly status?: string;
}
export function getConfigRulesOutput(args?: GetConfigRulesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetConfigRulesResult> {
    return pulumi.output(args).apply((a: any) => getConfigRules(a, opts))
}

/**
 * A collection of arguments for invoking getConfigRules.
 */
export interface GetConfigRulesOutputArgs {
    /**
     * @deprecated Deprecated
     */
    configRuleState?: pulumi.Input<string>;
    enableDetails?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    memberId?: pulumi.Input<number>;
    messageType?: pulumi.Input<string>;
    multiAccount?: pulumi.Input<boolean>;
    nameRegex?: pulumi.Input<string>;
    outputFile?: pulumi.Input<string>;
    riskLevel?: pulumi.Input<number>;
    ruleName?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}
