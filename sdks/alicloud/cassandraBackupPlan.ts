// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CassandraBackupPlan extends pulumi.CustomResource {
    /**
     * Get an existing CassandraBackupPlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CassandraBackupPlanState, opts?: pulumi.CustomResourceOptions): CassandraBackupPlan {
        return new CassandraBackupPlan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/cassandraBackupPlan:CassandraBackupPlan';

    /**
     * Returns true if the given object is an instance of CassandraBackupPlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CassandraBackupPlan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CassandraBackupPlan.__pulumiType;
    }

    public readonly active!: pulumi.Output<boolean>;
    public readonly backupPeriod!: pulumi.Output<string>;
    public readonly backupTime!: pulumi.Output<string>;
    public readonly clusterId!: pulumi.Output<string>;
    public readonly dataCenterId!: pulumi.Output<string>;
    public readonly retentionPeriod!: pulumi.Output<number>;

    /**
     * Create a CassandraBackupPlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CassandraBackupPlanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CassandraBackupPlanArgs | CassandraBackupPlanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CassandraBackupPlanState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["backupPeriod"] = state ? state.backupPeriod : undefined;
            resourceInputs["backupTime"] = state ? state.backupTime : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["dataCenterId"] = state ? state.dataCenterId : undefined;
            resourceInputs["retentionPeriod"] = state ? state.retentionPeriod : undefined;
        } else {
            const args = argsOrState as CassandraBackupPlanArgs | undefined;
            if ((!args || args.backupTime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backupTime'");
            }
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.dataCenterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataCenterId'");
            }
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["backupPeriod"] = args ? args.backupPeriod : undefined;
            resourceInputs["backupTime"] = args ? args.backupTime : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["dataCenterId"] = args ? args.dataCenterId : undefined;
            resourceInputs["retentionPeriod"] = args ? args.retentionPeriod : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CassandraBackupPlan.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CassandraBackupPlan resources.
 */
export interface CassandraBackupPlanState {
    active?: pulumi.Input<boolean>;
    backupPeriod?: pulumi.Input<string>;
    backupTime?: pulumi.Input<string>;
    clusterId?: pulumi.Input<string>;
    dataCenterId?: pulumi.Input<string>;
    retentionPeriod?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CassandraBackupPlan resource.
 */
export interface CassandraBackupPlanArgs {
    active?: pulumi.Input<boolean>;
    backupPeriod?: pulumi.Input<string>;
    backupTime: pulumi.Input<string>;
    clusterId: pulumi.Input<string>;
    dataCenterId: pulumi.Input<string>;
    retentionPeriod?: pulumi.Input<number>;
}
