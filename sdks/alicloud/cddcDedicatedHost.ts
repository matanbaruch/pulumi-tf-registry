// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CddcDedicatedHost extends pulumi.CustomResource {
    /**
     * Get an existing CddcDedicatedHost resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CddcDedicatedHostState, opts?: pulumi.CustomResourceOptions): CddcDedicatedHost {
        return new CddcDedicatedHost(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/cddcDedicatedHost:CddcDedicatedHost';

    /**
     * Returns true if the given object is an instance of CddcDedicatedHost.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CddcDedicatedHost {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CddcDedicatedHost.__pulumiType;
    }

    public readonly allocationStatus!: pulumi.Output<string>;
    public readonly autoRenew!: pulumi.Output<boolean | undefined>;
    public readonly dedicatedHostGroupId!: pulumi.Output<string>;
    public /*out*/ readonly dedicatedHostId!: pulumi.Output<string>;
    public readonly hostClass!: pulumi.Output<string>;
    public readonly hostName!: pulumi.Output<string>;
    public readonly imageCategory!: pulumi.Output<string | undefined>;
    public readonly osPassword!: pulumi.Output<string | undefined>;
    public readonly paymentType!: pulumi.Output<string>;
    public readonly period!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.CddcDedicatedHostTimeouts | undefined>;
    public readonly usedTime!: pulumi.Output<number | undefined>;
    public readonly vswitchId!: pulumi.Output<string>;
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a CddcDedicatedHost resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CddcDedicatedHostArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CddcDedicatedHostArgs | CddcDedicatedHostState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CddcDedicatedHostState | undefined;
            resourceInputs["allocationStatus"] = state ? state.allocationStatus : undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["dedicatedHostGroupId"] = state ? state.dedicatedHostGroupId : undefined;
            resourceInputs["dedicatedHostId"] = state ? state.dedicatedHostId : undefined;
            resourceInputs["hostClass"] = state ? state.hostClass : undefined;
            resourceInputs["hostName"] = state ? state.hostName : undefined;
            resourceInputs["imageCategory"] = state ? state.imageCategory : undefined;
            resourceInputs["osPassword"] = state ? state.osPassword : undefined;
            resourceInputs["paymentType"] = state ? state.paymentType : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["usedTime"] = state ? state.usedTime : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as CddcDedicatedHostArgs | undefined;
            if ((!args || args.dedicatedHostGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dedicatedHostGroupId'");
            }
            if ((!args || args.hostClass === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostClass'");
            }
            if ((!args || args.paymentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'paymentType'");
            }
            if ((!args || args.vswitchId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vswitchId'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["allocationStatus"] = args ? args.allocationStatus : undefined;
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["dedicatedHostGroupId"] = args ? args.dedicatedHostGroupId : undefined;
            resourceInputs["hostClass"] = args ? args.hostClass : undefined;
            resourceInputs["hostName"] = args ? args.hostName : undefined;
            resourceInputs["imageCategory"] = args ? args.imageCategory : undefined;
            resourceInputs["osPassword"] = args?.osPassword ? pulumi.secret(args.osPassword) : undefined;
            resourceInputs["paymentType"] = args ? args.paymentType : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["usedTime"] = args ? args.usedTime : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["dedicatedHostId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["osPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CddcDedicatedHost.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CddcDedicatedHost resources.
 */
export interface CddcDedicatedHostState {
    allocationStatus?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<boolean>;
    dedicatedHostGroupId?: pulumi.Input<string>;
    dedicatedHostId?: pulumi.Input<string>;
    hostClass?: pulumi.Input<string>;
    hostName?: pulumi.Input<string>;
    imageCategory?: pulumi.Input<string>;
    osPassword?: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.CddcDedicatedHostTimeouts>;
    usedTime?: pulumi.Input<number>;
    vswitchId?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CddcDedicatedHost resource.
 */
export interface CddcDedicatedHostArgs {
    allocationStatus?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<boolean>;
    dedicatedHostGroupId: pulumi.Input<string>;
    hostClass: pulumi.Input<string>;
    hostName?: pulumi.Input<string>;
    imageCategory?: pulumi.Input<string>;
    osPassword?: pulumi.Input<string>;
    paymentType: pulumi.Input<string>;
    period?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.CddcDedicatedHostTimeouts>;
    usedTime?: pulumi.Input<number>;
    vswitchId: pulumi.Input<string>;
    zoneId: pulumi.Input<string>;
}
