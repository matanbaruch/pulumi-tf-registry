// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Havip extends pulumi.CustomResource {
    /**
     * Get an existing Havip resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HavipState, opts?: pulumi.CustomResourceOptions): Havip {
        return new Havip(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/havip:Havip';

    /**
     * Returns true if the given object is an instance of Havip.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Havip {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Havip.__pulumiType;
    }

    public /*out*/ readonly associatedEipAddresses!: pulumi.Output<string[]>;
    public /*out*/ readonly associatedInstanceType!: pulumi.Output<string>;
    public /*out*/ readonly associatedInstances!: pulumi.Output<string[]>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly haVipId!: pulumi.Output<string>;
    public readonly haVipName!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly havipName!: pulumi.Output<string>;
    public readonly ipAddress!: pulumi.Output<string>;
    public /*out*/ readonly masterInstanceId!: pulumi.Output<string>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.HavipTimeouts | undefined>;
    public /*out*/ readonly vpcId!: pulumi.Output<string>;
    public readonly vswitchId!: pulumi.Output<string>;

    /**
     * Create a Havip resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HavipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HavipArgs | HavipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HavipState | undefined;
            resourceInputs["associatedEipAddresses"] = state ? state.associatedEipAddresses : undefined;
            resourceInputs["associatedInstanceType"] = state ? state.associatedInstanceType : undefined;
            resourceInputs["associatedInstances"] = state ? state.associatedInstances : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["haVipId"] = state ? state.haVipId : undefined;
            resourceInputs["haVipName"] = state ? state.haVipName : undefined;
            resourceInputs["havipName"] = state ? state.havipName : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["masterInstanceId"] = state ? state.masterInstanceId : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
        } else {
            const args = argsOrState as HavipArgs | undefined;
            if ((!args || args.vswitchId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vswitchId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["haVipName"] = args ? args.haVipName : undefined;
            resourceInputs["havipName"] = args ? args.havipName : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["associatedEipAddresses"] = undefined /*out*/;
            resourceInputs["associatedInstanceType"] = undefined /*out*/;
            resourceInputs["associatedInstances"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["haVipId"] = undefined /*out*/;
            resourceInputs["masterInstanceId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Havip.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Havip resources.
 */
export interface HavipState {
    associatedEipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    associatedInstanceType?: pulumi.Input<string>;
    associatedInstances?: pulumi.Input<pulumi.Input<string>[]>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    haVipId?: pulumi.Input<string>;
    haVipName?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    havipName?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    masterInstanceId?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.HavipTimeouts>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Havip resource.
 */
export interface HavipArgs {
    description?: pulumi.Input<string>;
    haVipName?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    havipName?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.HavipTimeouts>;
    vswitchId: pulumi.Input<string>;
}
