// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MnsTopic extends pulumi.CustomResource {
    /**
     * Get an existing MnsTopic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MnsTopicState, opts?: pulumi.CustomResourceOptions): MnsTopic {
        return new MnsTopic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/mnsTopic:MnsTopic';

    /**
     * Returns true if the given object is an instance of MnsTopic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MnsTopic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MnsTopic.__pulumiType;
    }

    public readonly loggingEnabled!: pulumi.Output<boolean | undefined>;
    public readonly maximumMessageSize!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a MnsTopic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: MnsTopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MnsTopicArgs | MnsTopicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MnsTopicState | undefined;
            resourceInputs["loggingEnabled"] = state ? state.loggingEnabled : undefined;
            resourceInputs["maximumMessageSize"] = state ? state.maximumMessageSize : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as MnsTopicArgs | undefined;
            resourceInputs["loggingEnabled"] = args ? args.loggingEnabled : undefined;
            resourceInputs["maximumMessageSize"] = args ? args.maximumMessageSize : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MnsTopic.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MnsTopic resources.
 */
export interface MnsTopicState {
    loggingEnabled?: pulumi.Input<boolean>;
    maximumMessageSize?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MnsTopic resource.
 */
export interface MnsTopicArgs {
    loggingEnabled?: pulumi.Input<boolean>;
    maximumMessageSize?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}
