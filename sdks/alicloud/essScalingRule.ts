// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EssScalingRule extends pulumi.CustomResource {
    /**
     * Get an existing EssScalingRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EssScalingRuleState, opts?: pulumi.CustomResourceOptions): EssScalingRule {
        return new EssScalingRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/essScalingRule:EssScalingRule';

    /**
     * Returns true if the given object is an instance of EssScalingRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EssScalingRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EssScalingRule.__pulumiType;
    }

    public readonly adjustmentType!: pulumi.Output<string | undefined>;
    public readonly adjustmentValue!: pulumi.Output<number | undefined>;
    public readonly alarmDimension!: pulumi.Output<outputs.EssScalingRuleAlarmDimension | undefined>;
    public /*out*/ readonly ari!: pulumi.Output<string>;
    public readonly cooldown!: pulumi.Output<number | undefined>;
    public readonly disableScaleIn!: pulumi.Output<boolean | undefined>;
    public readonly estimatedInstanceWarmup!: pulumi.Output<number>;
    public readonly initialMaxSize!: pulumi.Output<number>;
    public readonly metricName!: pulumi.Output<string | undefined>;
    public readonly minAdjustmentMagnitude!: pulumi.Output<number | undefined>;
    public readonly predictiveScalingMode!: pulumi.Output<string>;
    public readonly predictiveTaskBufferTime!: pulumi.Output<number>;
    public readonly predictiveValueBehavior!: pulumi.Output<string>;
    public readonly predictiveValueBuffer!: pulumi.Output<number>;
    public readonly scaleInEvaluationCount!: pulumi.Output<number>;
    public readonly scaleOutEvaluationCount!: pulumi.Output<number>;
    public readonly scalingGroupId!: pulumi.Output<string>;
    public readonly scalingRuleName!: pulumi.Output<string>;
    public readonly scalingRuleType!: pulumi.Output<string | undefined>;
    public readonly stepAdjustments!: pulumi.Output<outputs.EssScalingRuleStepAdjustment[] | undefined>;
    public readonly targetValue!: pulumi.Output<number | undefined>;

    /**
     * Create a EssScalingRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EssScalingRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EssScalingRuleArgs | EssScalingRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EssScalingRuleState | undefined;
            resourceInputs["adjustmentType"] = state ? state.adjustmentType : undefined;
            resourceInputs["adjustmentValue"] = state ? state.adjustmentValue : undefined;
            resourceInputs["alarmDimension"] = state ? state.alarmDimension : undefined;
            resourceInputs["ari"] = state ? state.ari : undefined;
            resourceInputs["cooldown"] = state ? state.cooldown : undefined;
            resourceInputs["disableScaleIn"] = state ? state.disableScaleIn : undefined;
            resourceInputs["estimatedInstanceWarmup"] = state ? state.estimatedInstanceWarmup : undefined;
            resourceInputs["initialMaxSize"] = state ? state.initialMaxSize : undefined;
            resourceInputs["metricName"] = state ? state.metricName : undefined;
            resourceInputs["minAdjustmentMagnitude"] = state ? state.minAdjustmentMagnitude : undefined;
            resourceInputs["predictiveScalingMode"] = state ? state.predictiveScalingMode : undefined;
            resourceInputs["predictiveTaskBufferTime"] = state ? state.predictiveTaskBufferTime : undefined;
            resourceInputs["predictiveValueBehavior"] = state ? state.predictiveValueBehavior : undefined;
            resourceInputs["predictiveValueBuffer"] = state ? state.predictiveValueBuffer : undefined;
            resourceInputs["scaleInEvaluationCount"] = state ? state.scaleInEvaluationCount : undefined;
            resourceInputs["scaleOutEvaluationCount"] = state ? state.scaleOutEvaluationCount : undefined;
            resourceInputs["scalingGroupId"] = state ? state.scalingGroupId : undefined;
            resourceInputs["scalingRuleName"] = state ? state.scalingRuleName : undefined;
            resourceInputs["scalingRuleType"] = state ? state.scalingRuleType : undefined;
            resourceInputs["stepAdjustments"] = state ? state.stepAdjustments : undefined;
            resourceInputs["targetValue"] = state ? state.targetValue : undefined;
        } else {
            const args = argsOrState as EssScalingRuleArgs | undefined;
            if ((!args || args.scalingGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scalingGroupId'");
            }
            resourceInputs["adjustmentType"] = args ? args.adjustmentType : undefined;
            resourceInputs["adjustmentValue"] = args ? args.adjustmentValue : undefined;
            resourceInputs["alarmDimension"] = args ? args.alarmDimension : undefined;
            resourceInputs["cooldown"] = args ? args.cooldown : undefined;
            resourceInputs["disableScaleIn"] = args ? args.disableScaleIn : undefined;
            resourceInputs["estimatedInstanceWarmup"] = args ? args.estimatedInstanceWarmup : undefined;
            resourceInputs["initialMaxSize"] = args ? args.initialMaxSize : undefined;
            resourceInputs["metricName"] = args ? args.metricName : undefined;
            resourceInputs["minAdjustmentMagnitude"] = args ? args.minAdjustmentMagnitude : undefined;
            resourceInputs["predictiveScalingMode"] = args ? args.predictiveScalingMode : undefined;
            resourceInputs["predictiveTaskBufferTime"] = args ? args.predictiveTaskBufferTime : undefined;
            resourceInputs["predictiveValueBehavior"] = args ? args.predictiveValueBehavior : undefined;
            resourceInputs["predictiveValueBuffer"] = args ? args.predictiveValueBuffer : undefined;
            resourceInputs["scaleInEvaluationCount"] = args ? args.scaleInEvaluationCount : undefined;
            resourceInputs["scaleOutEvaluationCount"] = args ? args.scaleOutEvaluationCount : undefined;
            resourceInputs["scalingGroupId"] = args ? args.scalingGroupId : undefined;
            resourceInputs["scalingRuleName"] = args ? args.scalingRuleName : undefined;
            resourceInputs["scalingRuleType"] = args ? args.scalingRuleType : undefined;
            resourceInputs["stepAdjustments"] = args ? args.stepAdjustments : undefined;
            resourceInputs["targetValue"] = args ? args.targetValue : undefined;
            resourceInputs["ari"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EssScalingRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EssScalingRule resources.
 */
export interface EssScalingRuleState {
    adjustmentType?: pulumi.Input<string>;
    adjustmentValue?: pulumi.Input<number>;
    alarmDimension?: pulumi.Input<inputs.EssScalingRuleAlarmDimension>;
    ari?: pulumi.Input<string>;
    cooldown?: pulumi.Input<number>;
    disableScaleIn?: pulumi.Input<boolean>;
    estimatedInstanceWarmup?: pulumi.Input<number>;
    initialMaxSize?: pulumi.Input<number>;
    metricName?: pulumi.Input<string>;
    minAdjustmentMagnitude?: pulumi.Input<number>;
    predictiveScalingMode?: pulumi.Input<string>;
    predictiveTaskBufferTime?: pulumi.Input<number>;
    predictiveValueBehavior?: pulumi.Input<string>;
    predictiveValueBuffer?: pulumi.Input<number>;
    scaleInEvaluationCount?: pulumi.Input<number>;
    scaleOutEvaluationCount?: pulumi.Input<number>;
    scalingGroupId?: pulumi.Input<string>;
    scalingRuleName?: pulumi.Input<string>;
    scalingRuleType?: pulumi.Input<string>;
    stepAdjustments?: pulumi.Input<pulumi.Input<inputs.EssScalingRuleStepAdjustment>[]>;
    targetValue?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a EssScalingRule resource.
 */
export interface EssScalingRuleArgs {
    adjustmentType?: pulumi.Input<string>;
    adjustmentValue?: pulumi.Input<number>;
    alarmDimension?: pulumi.Input<inputs.EssScalingRuleAlarmDimension>;
    cooldown?: pulumi.Input<number>;
    disableScaleIn?: pulumi.Input<boolean>;
    estimatedInstanceWarmup?: pulumi.Input<number>;
    initialMaxSize?: pulumi.Input<number>;
    metricName?: pulumi.Input<string>;
    minAdjustmentMagnitude?: pulumi.Input<number>;
    predictiveScalingMode?: pulumi.Input<string>;
    predictiveTaskBufferTime?: pulumi.Input<number>;
    predictiveValueBehavior?: pulumi.Input<string>;
    predictiveValueBuffer?: pulumi.Input<number>;
    scaleInEvaluationCount?: pulumi.Input<number>;
    scaleOutEvaluationCount?: pulumi.Input<number>;
    scalingGroupId: pulumi.Input<string>;
    scalingRuleName?: pulumi.Input<string>;
    scalingRuleType?: pulumi.Input<string>;
    stepAdjustments?: pulumi.Input<pulumi.Input<inputs.EssScalingRuleStepAdjustment>[]>;
    targetValue?: pulumi.Input<number>;
}
