// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PolardbClusterEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing PolardbClusterEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolardbClusterEndpointState, opts?: pulumi.CustomResourceOptions): PolardbClusterEndpoint {
        return new PolardbClusterEndpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/polardbClusterEndpoint:PolardbClusterEndpoint';

    /**
     * Returns true if the given object is an instance of PolardbClusterEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolardbClusterEndpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolardbClusterEndpoint.__pulumiType;
    }

    public readonly autoAddNewNodes!: pulumi.Output<string>;
    public readonly connectionPrefix!: pulumi.Output<string>;
    public readonly dbClusterId!: pulumi.Output<string>;
    public readonly dbEndpointDescription!: pulumi.Output<string | undefined>;
    public /*out*/ readonly dbEndpointId!: pulumi.Output<string>;
    public readonly endpointConfig!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly endpointType!: pulumi.Output<string>;
    public readonly netType!: pulumi.Output<string | undefined>;
    public readonly nodes!: pulumi.Output<string[]>;
    public readonly port!: pulumi.Output<string>;
    public readonly readWriteMode!: pulumi.Output<string>;
    public readonly sslAutoRotate!: pulumi.Output<string | undefined>;
    public /*out*/ readonly sslCertificateUrl!: pulumi.Output<string>;
    public /*out*/ readonly sslConnectionString!: pulumi.Output<string>;
    public readonly sslEnabled!: pulumi.Output<string | undefined>;
    public /*out*/ readonly sslExpireTime!: pulumi.Output<string>;

    /**
     * Create a PolardbClusterEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolardbClusterEndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolardbClusterEndpointArgs | PolardbClusterEndpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolardbClusterEndpointState | undefined;
            resourceInputs["autoAddNewNodes"] = state ? state.autoAddNewNodes : undefined;
            resourceInputs["connectionPrefix"] = state ? state.connectionPrefix : undefined;
            resourceInputs["dbClusterId"] = state ? state.dbClusterId : undefined;
            resourceInputs["dbEndpointDescription"] = state ? state.dbEndpointDescription : undefined;
            resourceInputs["dbEndpointId"] = state ? state.dbEndpointId : undefined;
            resourceInputs["endpointConfig"] = state ? state.endpointConfig : undefined;
            resourceInputs["endpointType"] = state ? state.endpointType : undefined;
            resourceInputs["netType"] = state ? state.netType : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["readWriteMode"] = state ? state.readWriteMode : undefined;
            resourceInputs["sslAutoRotate"] = state ? state.sslAutoRotate : undefined;
            resourceInputs["sslCertificateUrl"] = state ? state.sslCertificateUrl : undefined;
            resourceInputs["sslConnectionString"] = state ? state.sslConnectionString : undefined;
            resourceInputs["sslEnabled"] = state ? state.sslEnabled : undefined;
            resourceInputs["sslExpireTime"] = state ? state.sslExpireTime : undefined;
        } else {
            const args = argsOrState as PolardbClusterEndpointArgs | undefined;
            if ((!args || args.dbClusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbClusterId'");
            }
            resourceInputs["autoAddNewNodes"] = args ? args.autoAddNewNodes : undefined;
            resourceInputs["connectionPrefix"] = args ? args.connectionPrefix : undefined;
            resourceInputs["dbClusterId"] = args ? args.dbClusterId : undefined;
            resourceInputs["dbEndpointDescription"] = args ? args.dbEndpointDescription : undefined;
            resourceInputs["endpointConfig"] = args ? args.endpointConfig : undefined;
            resourceInputs["netType"] = args ? args.netType : undefined;
            resourceInputs["nodes"] = args ? args.nodes : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["readWriteMode"] = args ? args.readWriteMode : undefined;
            resourceInputs["sslAutoRotate"] = args ? args.sslAutoRotate : undefined;
            resourceInputs["sslEnabled"] = args ? args.sslEnabled : undefined;
            resourceInputs["dbEndpointId"] = undefined /*out*/;
            resourceInputs["endpointType"] = undefined /*out*/;
            resourceInputs["sslCertificateUrl"] = undefined /*out*/;
            resourceInputs["sslConnectionString"] = undefined /*out*/;
            resourceInputs["sslExpireTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolardbClusterEndpoint.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PolardbClusterEndpoint resources.
 */
export interface PolardbClusterEndpointState {
    autoAddNewNodes?: pulumi.Input<string>;
    connectionPrefix?: pulumi.Input<string>;
    dbClusterId?: pulumi.Input<string>;
    dbEndpointDescription?: pulumi.Input<string>;
    dbEndpointId?: pulumi.Input<string>;
    endpointConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    endpointType?: pulumi.Input<string>;
    netType?: pulumi.Input<string>;
    nodes?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<string>;
    readWriteMode?: pulumi.Input<string>;
    sslAutoRotate?: pulumi.Input<string>;
    sslCertificateUrl?: pulumi.Input<string>;
    sslConnectionString?: pulumi.Input<string>;
    sslEnabled?: pulumi.Input<string>;
    sslExpireTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PolardbClusterEndpoint resource.
 */
export interface PolardbClusterEndpointArgs {
    autoAddNewNodes?: pulumi.Input<string>;
    connectionPrefix?: pulumi.Input<string>;
    dbClusterId: pulumi.Input<string>;
    dbEndpointDescription?: pulumi.Input<string>;
    endpointConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    netType?: pulumi.Input<string>;
    nodes?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<string>;
    readWriteMode?: pulumi.Input<string>;
    sslAutoRotate?: pulumi.Input<string>;
    sslEnabled?: pulumi.Input<string>;
}
