// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SaeIngress extends pulumi.CustomResource {
    /**
     * Get an existing SaeIngress resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SaeIngressState, opts?: pulumi.CustomResourceOptions): SaeIngress {
        return new SaeIngress(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/saeIngress:SaeIngress';

    /**
     * Returns true if the given object is an instance of SaeIngress.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SaeIngress {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SaeIngress.__pulumiType;
    }

    public readonly certId!: pulumi.Output<string | undefined>;
    public readonly certIds!: pulumi.Output<string | undefined>;
    public readonly defaultRule!: pulumi.Output<outputs.SaeIngressDefaultRule | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly listenerPort!: pulumi.Output<number>;
    public readonly listenerProtocol!: pulumi.Output<string>;
    public readonly loadBalanceType!: pulumi.Output<string>;
    public readonly namespaceId!: pulumi.Output<string>;
    public readonly rules!: pulumi.Output<outputs.SaeIngressRule[]>;
    public readonly slbId!: pulumi.Output<string>;

    /**
     * Create a SaeIngress resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SaeIngressArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SaeIngressArgs | SaeIngressState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SaeIngressState | undefined;
            resourceInputs["certId"] = state ? state.certId : undefined;
            resourceInputs["certIds"] = state ? state.certIds : undefined;
            resourceInputs["defaultRule"] = state ? state.defaultRule : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["listenerPort"] = state ? state.listenerPort : undefined;
            resourceInputs["listenerProtocol"] = state ? state.listenerProtocol : undefined;
            resourceInputs["loadBalanceType"] = state ? state.loadBalanceType : undefined;
            resourceInputs["namespaceId"] = state ? state.namespaceId : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["slbId"] = state ? state.slbId : undefined;
        } else {
            const args = argsOrState as SaeIngressArgs | undefined;
            if ((!args || args.listenerPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenerPort'");
            }
            if ((!args || args.namespaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespaceId'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            if ((!args || args.slbId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slbId'");
            }
            resourceInputs["certId"] = args ? args.certId : undefined;
            resourceInputs["certIds"] = args ? args.certIds : undefined;
            resourceInputs["defaultRule"] = args ? args.defaultRule : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["listenerPort"] = args ? args.listenerPort : undefined;
            resourceInputs["listenerProtocol"] = args ? args.listenerProtocol : undefined;
            resourceInputs["loadBalanceType"] = args ? args.loadBalanceType : undefined;
            resourceInputs["namespaceId"] = args ? args.namespaceId : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["slbId"] = args ? args.slbId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SaeIngress.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SaeIngress resources.
 */
export interface SaeIngressState {
    certId?: pulumi.Input<string>;
    certIds?: pulumi.Input<string>;
    defaultRule?: pulumi.Input<inputs.SaeIngressDefaultRule>;
    description?: pulumi.Input<string>;
    listenerPort?: pulumi.Input<number>;
    listenerProtocol?: pulumi.Input<string>;
    loadBalanceType?: pulumi.Input<string>;
    namespaceId?: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.SaeIngressRule>[]>;
    slbId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SaeIngress resource.
 */
export interface SaeIngressArgs {
    certId?: pulumi.Input<string>;
    certIds?: pulumi.Input<string>;
    defaultRule?: pulumi.Input<inputs.SaeIngressDefaultRule>;
    description?: pulumi.Input<string>;
    listenerPort: pulumi.Input<number>;
    listenerProtocol?: pulumi.Input<string>;
    loadBalanceType?: pulumi.Input<string>;
    namespaceId: pulumi.Input<string>;
    rules: pulumi.Input<pulumi.Input<inputs.SaeIngressRule>[]>;
    slbId: pulumi.Input<string>;
}
