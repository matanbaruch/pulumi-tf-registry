// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MessageServiceQueue extends pulumi.CustomResource {
    /**
     * Get an existing MessageServiceQueue resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MessageServiceQueueState, opts?: pulumi.CustomResourceOptions): MessageServiceQueue {
        return new MessageServiceQueue(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/messageServiceQueue:MessageServiceQueue';

    /**
     * Returns true if the given object is an instance of MessageServiceQueue.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MessageServiceQueue {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MessageServiceQueue.__pulumiType;
    }

    public /*out*/ readonly createTime!: pulumi.Output<number>;
    public readonly delaySeconds!: pulumi.Output<number>;
    public readonly loggingEnabled!: pulumi.Output<boolean | undefined>;
    public readonly maximumMessageSize!: pulumi.Output<number>;
    public readonly messageRetentionPeriod!: pulumi.Output<number>;
    public readonly pollingWaitSeconds!: pulumi.Output<number>;
    public readonly queueName!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.MessageServiceQueueTimeouts | undefined>;
    public readonly visibilityTimeout!: pulumi.Output<number>;

    /**
     * Create a MessageServiceQueue resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MessageServiceQueueArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MessageServiceQueueArgs | MessageServiceQueueState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MessageServiceQueueState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["delaySeconds"] = state ? state.delaySeconds : undefined;
            resourceInputs["loggingEnabled"] = state ? state.loggingEnabled : undefined;
            resourceInputs["maximumMessageSize"] = state ? state.maximumMessageSize : undefined;
            resourceInputs["messageRetentionPeriod"] = state ? state.messageRetentionPeriod : undefined;
            resourceInputs["pollingWaitSeconds"] = state ? state.pollingWaitSeconds : undefined;
            resourceInputs["queueName"] = state ? state.queueName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["visibilityTimeout"] = state ? state.visibilityTimeout : undefined;
        } else {
            const args = argsOrState as MessageServiceQueueArgs | undefined;
            if ((!args || args.queueName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queueName'");
            }
            resourceInputs["delaySeconds"] = args ? args.delaySeconds : undefined;
            resourceInputs["loggingEnabled"] = args ? args.loggingEnabled : undefined;
            resourceInputs["maximumMessageSize"] = args ? args.maximumMessageSize : undefined;
            resourceInputs["messageRetentionPeriod"] = args ? args.messageRetentionPeriod : undefined;
            resourceInputs["pollingWaitSeconds"] = args ? args.pollingWaitSeconds : undefined;
            resourceInputs["queueName"] = args ? args.queueName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["visibilityTimeout"] = args ? args.visibilityTimeout : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MessageServiceQueue.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MessageServiceQueue resources.
 */
export interface MessageServiceQueueState {
    createTime?: pulumi.Input<number>;
    delaySeconds?: pulumi.Input<number>;
    loggingEnabled?: pulumi.Input<boolean>;
    maximumMessageSize?: pulumi.Input<number>;
    messageRetentionPeriod?: pulumi.Input<number>;
    pollingWaitSeconds?: pulumi.Input<number>;
    queueName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MessageServiceQueueTimeouts>;
    visibilityTimeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a MessageServiceQueue resource.
 */
export interface MessageServiceQueueArgs {
    delaySeconds?: pulumi.Input<number>;
    loggingEnabled?: pulumi.Input<boolean>;
    maximumMessageSize?: pulumi.Input<number>;
    messageRetentionPeriod?: pulumi.Input<number>;
    pollingWaitSeconds?: pulumi.Input<number>;
    queueName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MessageServiceQueueTimeouts>;
    visibilityTimeout?: pulumi.Input<number>;
}
