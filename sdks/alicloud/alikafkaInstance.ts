// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AlikafkaInstance extends pulumi.CustomResource {
    /**
     * Get an existing AlikafkaInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlikafkaInstanceState, opts?: pulumi.CustomResourceOptions): AlikafkaInstance {
        return new AlikafkaInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/alikafkaInstance:AlikafkaInstance';

    /**
     * Returns true if the given object is an instance of AlikafkaInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlikafkaInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlikafkaInstance.__pulumiType;
    }

    public readonly config!: pulumi.Output<string>;
    public readonly deployType!: pulumi.Output<number>;
    public readonly diskSize!: pulumi.Output<number>;
    public readonly diskType!: pulumi.Output<number>;
    public readonly eipMax!: pulumi.Output<number>;
    public /*out*/ readonly endPoint!: pulumi.Output<string>;
    public /*out*/ readonly groupLeft!: pulumi.Output<number>;
    public /*out*/ readonly groupUsed!: pulumi.Output<number>;
    public readonly ioMax!: pulumi.Output<number>;
    public readonly ioMaxSpec!: pulumi.Output<string>;
    public /*out*/ readonly isPartitionBuy!: pulumi.Output<number>;
    public readonly kmsKeyId!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly paidType!: pulumi.Output<string | undefined>;
    public /*out*/ readonly partitionLeft!: pulumi.Output<number>;
    public readonly partitionNum!: pulumi.Output<number | undefined>;
    public /*out*/ readonly partitionUsed!: pulumi.Output<number>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly securityGroup!: pulumi.Output<string>;
    public readonly selectedZones!: pulumi.Output<string[] | undefined>;
    public readonly serviceVersion!: pulumi.Output<string>;
    public readonly specType!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<number>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.AlikafkaInstanceTimeouts | undefined>;
    public /*out*/ readonly topicLeft!: pulumi.Output<number>;
    public /*out*/ readonly topicNumOfBuy!: pulumi.Output<number>;
    /**
     * @deprecated Deprecated
     */
    public readonly topicQuota!: pulumi.Output<number>;
    public /*out*/ readonly topicUsed!: pulumi.Output<number>;
    public readonly vpcId!: pulumi.Output<string>;
    public readonly vswitchId!: pulumi.Output<string>;
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a AlikafkaInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlikafkaInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlikafkaInstanceArgs | AlikafkaInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlikafkaInstanceState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["deployType"] = state ? state.deployType : undefined;
            resourceInputs["diskSize"] = state ? state.diskSize : undefined;
            resourceInputs["diskType"] = state ? state.diskType : undefined;
            resourceInputs["eipMax"] = state ? state.eipMax : undefined;
            resourceInputs["endPoint"] = state ? state.endPoint : undefined;
            resourceInputs["groupLeft"] = state ? state.groupLeft : undefined;
            resourceInputs["groupUsed"] = state ? state.groupUsed : undefined;
            resourceInputs["ioMax"] = state ? state.ioMax : undefined;
            resourceInputs["ioMaxSpec"] = state ? state.ioMaxSpec : undefined;
            resourceInputs["isPartitionBuy"] = state ? state.isPartitionBuy : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["paidType"] = state ? state.paidType : undefined;
            resourceInputs["partitionLeft"] = state ? state.partitionLeft : undefined;
            resourceInputs["partitionNum"] = state ? state.partitionNum : undefined;
            resourceInputs["partitionUsed"] = state ? state.partitionUsed : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["securityGroup"] = state ? state.securityGroup : undefined;
            resourceInputs["selectedZones"] = state ? state.selectedZones : undefined;
            resourceInputs["serviceVersion"] = state ? state.serviceVersion : undefined;
            resourceInputs["specType"] = state ? state.specType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["topicLeft"] = state ? state.topicLeft : undefined;
            resourceInputs["topicNumOfBuy"] = state ? state.topicNumOfBuy : undefined;
            resourceInputs["topicQuota"] = state ? state.topicQuota : undefined;
            resourceInputs["topicUsed"] = state ? state.topicUsed : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as AlikafkaInstanceArgs | undefined;
            if ((!args || args.deployType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deployType'");
            }
            if ((!args || args.diskSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskSize'");
            }
            if ((!args || args.diskType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskType'");
            }
            if ((!args || args.vswitchId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vswitchId'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["deployType"] = args ? args.deployType : undefined;
            resourceInputs["diskSize"] = args ? args.diskSize : undefined;
            resourceInputs["diskType"] = args ? args.diskType : undefined;
            resourceInputs["eipMax"] = args ? args.eipMax : undefined;
            resourceInputs["ioMax"] = args ? args.ioMax : undefined;
            resourceInputs["ioMaxSpec"] = args ? args.ioMaxSpec : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["paidType"] = args ? args.paidType : undefined;
            resourceInputs["partitionNum"] = args ? args.partitionNum : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["securityGroup"] = args ? args.securityGroup : undefined;
            resourceInputs["selectedZones"] = args ? args.selectedZones : undefined;
            resourceInputs["serviceVersion"] = args ? args.serviceVersion : undefined;
            resourceInputs["specType"] = args ? args.specType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["topicQuota"] = args ? args.topicQuota : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["endPoint"] = undefined /*out*/;
            resourceInputs["groupLeft"] = undefined /*out*/;
            resourceInputs["groupUsed"] = undefined /*out*/;
            resourceInputs["isPartitionBuy"] = undefined /*out*/;
            resourceInputs["partitionLeft"] = undefined /*out*/;
            resourceInputs["partitionUsed"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["topicLeft"] = undefined /*out*/;
            resourceInputs["topicNumOfBuy"] = undefined /*out*/;
            resourceInputs["topicUsed"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlikafkaInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AlikafkaInstance resources.
 */
export interface AlikafkaInstanceState {
    config?: pulumi.Input<string>;
    deployType?: pulumi.Input<number>;
    diskSize?: pulumi.Input<number>;
    diskType?: pulumi.Input<number>;
    eipMax?: pulumi.Input<number>;
    endPoint?: pulumi.Input<string>;
    groupLeft?: pulumi.Input<number>;
    groupUsed?: pulumi.Input<number>;
    ioMax?: pulumi.Input<number>;
    ioMaxSpec?: pulumi.Input<string>;
    isPartitionBuy?: pulumi.Input<number>;
    kmsKeyId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    paidType?: pulumi.Input<string>;
    partitionLeft?: pulumi.Input<number>;
    partitionNum?: pulumi.Input<number>;
    partitionUsed?: pulumi.Input<number>;
    resourceGroupId?: pulumi.Input<string>;
    securityGroup?: pulumi.Input<string>;
    selectedZones?: pulumi.Input<pulumi.Input<string>[]>;
    serviceVersion?: pulumi.Input<string>;
    specType?: pulumi.Input<string>;
    status?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.AlikafkaInstanceTimeouts>;
    topicLeft?: pulumi.Input<number>;
    topicNumOfBuy?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    topicQuota?: pulumi.Input<number>;
    topicUsed?: pulumi.Input<number>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AlikafkaInstance resource.
 */
export interface AlikafkaInstanceArgs {
    config?: pulumi.Input<string>;
    deployType: pulumi.Input<number>;
    diskSize: pulumi.Input<number>;
    diskType: pulumi.Input<number>;
    eipMax?: pulumi.Input<number>;
    ioMax?: pulumi.Input<number>;
    ioMaxSpec?: pulumi.Input<string>;
    kmsKeyId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    paidType?: pulumi.Input<string>;
    partitionNum?: pulumi.Input<number>;
    resourceGroupId?: pulumi.Input<string>;
    securityGroup?: pulumi.Input<string>;
    selectedZones?: pulumi.Input<pulumi.Input<string>[]>;
    serviceVersion?: pulumi.Input<string>;
    specType?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.AlikafkaInstanceTimeouts>;
    /**
     * @deprecated Deprecated
     */
    topicQuota?: pulumi.Input<number>;
    vpcId?: pulumi.Input<string>;
    vswitchId: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}
