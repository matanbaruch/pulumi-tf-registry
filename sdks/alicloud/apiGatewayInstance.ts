// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApiGatewayInstance extends pulumi.CustomResource {
    /**
     * Get an existing ApiGatewayInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiGatewayInstanceState, opts?: pulumi.CustomResourceOptions): ApiGatewayInstance {
        return new ApiGatewayInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/apiGatewayInstance:ApiGatewayInstance';

    /**
     * Returns true if the given object is an instance of ApiGatewayInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiGatewayInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiGatewayInstance.__pulumiType;
    }

    public /*out*/ readonly connectCidrBlocks!: pulumi.Output<string>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly deleteVpcIpBlock!: pulumi.Output<string | undefined>;
    public readonly duration!: pulumi.Output<number | undefined>;
    public readonly egressIpv6Enable!: pulumi.Output<boolean | undefined>;
    public readonly httpsPolicy!: pulumi.Output<string>;
    public readonly instanceCidr!: pulumi.Output<string>;
    public readonly instanceName!: pulumi.Output<string>;
    public readonly instanceSpec!: pulumi.Output<string>;
    public readonly instanceType!: pulumi.Output<string>;
    public readonly ipv6Enabled!: pulumi.Output<boolean | undefined>;
    public readonly paymentType!: pulumi.Output<string>;
    public readonly pricingCycle!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly supportIpv6!: pulumi.Output<boolean>;
    public readonly timeouts!: pulumi.Output<outputs.ApiGatewayInstanceTimeouts | undefined>;
    public readonly toConnectVpcIpBlock!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly userVpcId!: pulumi.Output<string | undefined>;
    public readonly vpcSlbIntranetEnable!: pulumi.Output<boolean | undefined>;
    public readonly zoneId!: pulumi.Output<string>;
    public readonly zoneVswitchSecurityGroups!: pulumi.Output<outputs.ApiGatewayInstanceZoneVswitchSecurityGroup[] | undefined>;

    /**
     * Create a ApiGatewayInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiGatewayInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiGatewayInstanceArgs | ApiGatewayInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiGatewayInstanceState | undefined;
            resourceInputs["connectCidrBlocks"] = state ? state.connectCidrBlocks : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["deleteVpcIpBlock"] = state ? state.deleteVpcIpBlock : undefined;
            resourceInputs["duration"] = state ? state.duration : undefined;
            resourceInputs["egressIpv6Enable"] = state ? state.egressIpv6Enable : undefined;
            resourceInputs["httpsPolicy"] = state ? state.httpsPolicy : undefined;
            resourceInputs["instanceCidr"] = state ? state.instanceCidr : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["instanceSpec"] = state ? state.instanceSpec : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["ipv6Enabled"] = state ? state.ipv6Enabled : undefined;
            resourceInputs["paymentType"] = state ? state.paymentType : undefined;
            resourceInputs["pricingCycle"] = state ? state.pricingCycle : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["supportIpv6"] = state ? state.supportIpv6 : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["toConnectVpcIpBlock"] = state ? state.toConnectVpcIpBlock : undefined;
            resourceInputs["userVpcId"] = state ? state.userVpcId : undefined;
            resourceInputs["vpcSlbIntranetEnable"] = state ? state.vpcSlbIntranetEnable : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
            resourceInputs["zoneVswitchSecurityGroups"] = state ? state.zoneVswitchSecurityGroups : undefined;
        } else {
            const args = argsOrState as ApiGatewayInstanceArgs | undefined;
            if ((!args || args.httpsPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'httpsPolicy'");
            }
            if ((!args || args.instanceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceName'");
            }
            if ((!args || args.instanceSpec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceSpec'");
            }
            if ((!args || args.paymentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'paymentType'");
            }
            resourceInputs["deleteVpcIpBlock"] = args ? args.deleteVpcIpBlock : undefined;
            resourceInputs["duration"] = args ? args.duration : undefined;
            resourceInputs["egressIpv6Enable"] = args ? args.egressIpv6Enable : undefined;
            resourceInputs["httpsPolicy"] = args ? args.httpsPolicy : undefined;
            resourceInputs["instanceCidr"] = args ? args.instanceCidr : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["instanceSpec"] = args ? args.instanceSpec : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["ipv6Enabled"] = args ? args.ipv6Enabled : undefined;
            resourceInputs["paymentType"] = args ? args.paymentType : undefined;
            resourceInputs["pricingCycle"] = args ? args.pricingCycle : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["toConnectVpcIpBlock"] = args ? args.toConnectVpcIpBlock : undefined;
            resourceInputs["userVpcId"] = args ? args.userVpcId : undefined;
            resourceInputs["vpcSlbIntranetEnable"] = args ? args.vpcSlbIntranetEnable : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["zoneVswitchSecurityGroups"] = args ? args.zoneVswitchSecurityGroups : undefined;
            resourceInputs["connectCidrBlocks"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["supportIpv6"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApiGatewayInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApiGatewayInstance resources.
 */
export interface ApiGatewayInstanceState {
    connectCidrBlocks?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deleteVpcIpBlock?: pulumi.Input<string>;
    duration?: pulumi.Input<number>;
    egressIpv6Enable?: pulumi.Input<boolean>;
    httpsPolicy?: pulumi.Input<string>;
    instanceCidr?: pulumi.Input<string>;
    instanceName?: pulumi.Input<string>;
    instanceSpec?: pulumi.Input<string>;
    instanceType?: pulumi.Input<string>;
    ipv6Enabled?: pulumi.Input<boolean>;
    paymentType?: pulumi.Input<string>;
    pricingCycle?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    supportIpv6?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.ApiGatewayInstanceTimeouts>;
    toConnectVpcIpBlock?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    userVpcId?: pulumi.Input<string>;
    vpcSlbIntranetEnable?: pulumi.Input<boolean>;
    zoneId?: pulumi.Input<string>;
    zoneVswitchSecurityGroups?: pulumi.Input<pulumi.Input<inputs.ApiGatewayInstanceZoneVswitchSecurityGroup>[]>;
}

/**
 * The set of arguments for constructing a ApiGatewayInstance resource.
 */
export interface ApiGatewayInstanceArgs {
    deleteVpcIpBlock?: pulumi.Input<string>;
    duration?: pulumi.Input<number>;
    egressIpv6Enable?: pulumi.Input<boolean>;
    httpsPolicy: pulumi.Input<string>;
    instanceCidr?: pulumi.Input<string>;
    instanceName: pulumi.Input<string>;
    instanceSpec: pulumi.Input<string>;
    instanceType?: pulumi.Input<string>;
    ipv6Enabled?: pulumi.Input<boolean>;
    paymentType: pulumi.Input<string>;
    pricingCycle?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ApiGatewayInstanceTimeouts>;
    toConnectVpcIpBlock?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    userVpcId?: pulumi.Input<string>;
    vpcSlbIntranetEnable?: pulumi.Input<boolean>;
    zoneId?: pulumi.Input<string>;
    zoneVswitchSecurityGroups?: pulumi.Input<pulumi.Input<inputs.ApiGatewayInstanceZoneVswitchSecurityGroup>[]>;
}
