// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CassandraDataCenter extends pulumi.CustomResource {
    /**
     * Get an existing CassandraDataCenter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CassandraDataCenterState, opts?: pulumi.CustomResourceOptions): CassandraDataCenter {
        return new CassandraDataCenter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/cassandraDataCenter:CassandraDataCenter';

    /**
     * Returns true if the given object is an instance of CassandraDataCenter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CassandraDataCenter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CassandraDataCenter.__pulumiType;
    }

    public readonly autoRenew!: pulumi.Output<boolean | undefined>;
    public readonly autoRenewPeriod!: pulumi.Output<number | undefined>;
    public readonly clusterId!: pulumi.Output<string>;
    public /*out*/ readonly dataCenterId!: pulumi.Output<string>;
    public readonly dataCenterName!: pulumi.Output<string | undefined>;
    public readonly diskSize!: pulumi.Output<number | undefined>;
    public readonly diskType!: pulumi.Output<string | undefined>;
    public readonly enablePublic!: pulumi.Output<boolean | undefined>;
    public readonly instanceType!: pulumi.Output<string>;
    public readonly nodeCount!: pulumi.Output<number>;
    public readonly payType!: pulumi.Output<string>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    public /*out*/ readonly publicPoints!: pulumi.Output<string[]>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CassandraDataCenterTimeouts | undefined>;
    public readonly vswitchId!: pulumi.Output<string>;
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a CassandraDataCenter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CassandraDataCenterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CassandraDataCenterArgs | CassandraDataCenterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CassandraDataCenterState | undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["autoRenewPeriod"] = state ? state.autoRenewPeriod : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["dataCenterId"] = state ? state.dataCenterId : undefined;
            resourceInputs["dataCenterName"] = state ? state.dataCenterName : undefined;
            resourceInputs["diskSize"] = state ? state.diskSize : undefined;
            resourceInputs["diskType"] = state ? state.diskType : undefined;
            resourceInputs["enablePublic"] = state ? state.enablePublic : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["nodeCount"] = state ? state.nodeCount : undefined;
            resourceInputs["payType"] = state ? state.payType : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["publicPoints"] = state ? state.publicPoints : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as CassandraDataCenterArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.instanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceType'");
            }
            if ((!args || args.nodeCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeCount'");
            }
            if ((!args || args.payType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'payType'");
            }
            if ((!args || args.vswitchId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vswitchId'");
            }
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["autoRenewPeriod"] = args ? args.autoRenewPeriod : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["dataCenterName"] = args ? args.dataCenterName : undefined;
            resourceInputs["diskSize"] = args ? args.diskSize : undefined;
            resourceInputs["diskType"] = args ? args.diskType : undefined;
            resourceInputs["enablePublic"] = args ? args.enablePublic : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["nodeCount"] = args ? args.nodeCount : undefined;
            resourceInputs["payType"] = args ? args.payType : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["dataCenterId"] = undefined /*out*/;
            resourceInputs["publicPoints"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CassandraDataCenter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CassandraDataCenter resources.
 */
export interface CassandraDataCenterState {
    autoRenew?: pulumi.Input<boolean>;
    autoRenewPeriod?: pulumi.Input<number>;
    clusterId?: pulumi.Input<string>;
    dataCenterId?: pulumi.Input<string>;
    dataCenterName?: pulumi.Input<string>;
    diskSize?: pulumi.Input<number>;
    diskType?: pulumi.Input<string>;
    enablePublic?: pulumi.Input<boolean>;
    instanceType?: pulumi.Input<string>;
    nodeCount?: pulumi.Input<number>;
    payType?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    publicPoints?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CassandraDataCenterTimeouts>;
    vswitchId?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CassandraDataCenter resource.
 */
export interface CassandraDataCenterArgs {
    autoRenew?: pulumi.Input<boolean>;
    autoRenewPeriod?: pulumi.Input<number>;
    clusterId: pulumi.Input<string>;
    dataCenterName?: pulumi.Input<string>;
    diskSize?: pulumi.Input<number>;
    diskType?: pulumi.Input<string>;
    enablePublic?: pulumi.Input<boolean>;
    instanceType: pulumi.Input<string>;
    nodeCount: pulumi.Input<number>;
    payType: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CassandraDataCenterTimeouts>;
    vswitchId: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}
