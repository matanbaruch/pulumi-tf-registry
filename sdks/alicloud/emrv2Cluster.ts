// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Emrv2Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Emrv2Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Emrv2ClusterState, opts?: pulumi.CustomResourceOptions): Emrv2Cluster {
        return new Emrv2Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/emrv2Cluster:Emrv2Cluster';

    /**
     * Returns true if the given object is an instance of Emrv2Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Emrv2Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Emrv2Cluster.__pulumiType;
    }

    public readonly applicationConfigs!: pulumi.Output<outputs.Emrv2ClusterApplicationConfig[] | undefined>;
    public readonly applications!: pulumi.Output<string[]>;
    public readonly bootstrapScripts!: pulumi.Output<outputs.Emrv2ClusterBootstrapScript[] | undefined>;
    public readonly clusterName!: pulumi.Output<string>;
    public readonly clusterType!: pulumi.Output<string>;
    public readonly deployMode!: pulumi.Output<string>;
    public readonly logCollectStrategy!: pulumi.Output<string>;
    public readonly nodeAttributes!: pulumi.Output<outputs.Emrv2ClusterNodeAttribute[]>;
    public readonly nodeGroups!: pulumi.Output<outputs.Emrv2ClusterNodeGroup[]>;
    public readonly paymentType!: pulumi.Output<string>;
    public readonly releaseVersion!: pulumi.Output<string>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly securityMode!: pulumi.Output<string>;
    public readonly subscriptionConfig!: pulumi.Output<outputs.Emrv2ClusterSubscriptionConfig | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.Emrv2ClusterTimeouts | undefined>;

    /**
     * Create a Emrv2Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Emrv2ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Emrv2ClusterArgs | Emrv2ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Emrv2ClusterState | undefined;
            resourceInputs["applicationConfigs"] = state ? state.applicationConfigs : undefined;
            resourceInputs["applications"] = state ? state.applications : undefined;
            resourceInputs["bootstrapScripts"] = state ? state.bootstrapScripts : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["clusterType"] = state ? state.clusterType : undefined;
            resourceInputs["deployMode"] = state ? state.deployMode : undefined;
            resourceInputs["logCollectStrategy"] = state ? state.logCollectStrategy : undefined;
            resourceInputs["nodeAttributes"] = state ? state.nodeAttributes : undefined;
            resourceInputs["nodeGroups"] = state ? state.nodeGroups : undefined;
            resourceInputs["paymentType"] = state ? state.paymentType : undefined;
            resourceInputs["releaseVersion"] = state ? state.releaseVersion : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["securityMode"] = state ? state.securityMode : undefined;
            resourceInputs["subscriptionConfig"] = state ? state.subscriptionConfig : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as Emrv2ClusterArgs | undefined;
            if ((!args || args.applications === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applications'");
            }
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.clusterType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterType'");
            }
            if ((!args || args.nodeAttributes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeAttributes'");
            }
            if ((!args || args.nodeGroups === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeGroups'");
            }
            if ((!args || args.releaseVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'releaseVersion'");
            }
            resourceInputs["applicationConfigs"] = args ? args.applicationConfigs : undefined;
            resourceInputs["applications"] = args ? args.applications : undefined;
            resourceInputs["bootstrapScripts"] = args ? args.bootstrapScripts : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["clusterType"] = args ? args.clusterType : undefined;
            resourceInputs["deployMode"] = args ? args.deployMode : undefined;
            resourceInputs["logCollectStrategy"] = args ? args.logCollectStrategy : undefined;
            resourceInputs["nodeAttributes"] = args ? args.nodeAttributes : undefined;
            resourceInputs["nodeGroups"] = args ? args.nodeGroups : undefined;
            resourceInputs["paymentType"] = args ? args.paymentType : undefined;
            resourceInputs["releaseVersion"] = args ? args.releaseVersion : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["securityMode"] = args ? args.securityMode : undefined;
            resourceInputs["subscriptionConfig"] = args ? args.subscriptionConfig : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Emrv2Cluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Emrv2Cluster resources.
 */
export interface Emrv2ClusterState {
    applicationConfigs?: pulumi.Input<pulumi.Input<inputs.Emrv2ClusterApplicationConfig>[]>;
    applications?: pulumi.Input<pulumi.Input<string>[]>;
    bootstrapScripts?: pulumi.Input<pulumi.Input<inputs.Emrv2ClusterBootstrapScript>[]>;
    clusterName?: pulumi.Input<string>;
    clusterType?: pulumi.Input<string>;
    deployMode?: pulumi.Input<string>;
    logCollectStrategy?: pulumi.Input<string>;
    nodeAttributes?: pulumi.Input<pulumi.Input<inputs.Emrv2ClusterNodeAttribute>[]>;
    nodeGroups?: pulumi.Input<pulumi.Input<inputs.Emrv2ClusterNodeGroup>[]>;
    paymentType?: pulumi.Input<string>;
    releaseVersion?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    securityMode?: pulumi.Input<string>;
    subscriptionConfig?: pulumi.Input<inputs.Emrv2ClusterSubscriptionConfig>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.Emrv2ClusterTimeouts>;
}

/**
 * The set of arguments for constructing a Emrv2Cluster resource.
 */
export interface Emrv2ClusterArgs {
    applicationConfigs?: pulumi.Input<pulumi.Input<inputs.Emrv2ClusterApplicationConfig>[]>;
    applications: pulumi.Input<pulumi.Input<string>[]>;
    bootstrapScripts?: pulumi.Input<pulumi.Input<inputs.Emrv2ClusterBootstrapScript>[]>;
    clusterName: pulumi.Input<string>;
    clusterType: pulumi.Input<string>;
    deployMode?: pulumi.Input<string>;
    logCollectStrategy?: pulumi.Input<string>;
    nodeAttributes: pulumi.Input<pulumi.Input<inputs.Emrv2ClusterNodeAttribute>[]>;
    nodeGroups: pulumi.Input<pulumi.Input<inputs.Emrv2ClusterNodeGroup>[]>;
    paymentType?: pulumi.Input<string>;
    releaseVersion: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    securityMode?: pulumi.Input<string>;
    subscriptionConfig?: pulumi.Input<inputs.Emrv2ClusterSubscriptionConfig>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.Emrv2ClusterTimeouts>;
}
