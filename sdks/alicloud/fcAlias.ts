// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FcAlias extends pulumi.CustomResource {
    /**
     * Get an existing FcAlias resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FcAliasState, opts?: pulumi.CustomResourceOptions): FcAlias {
        return new FcAlias(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/fcAlias:FcAlias';

    /**
     * Returns true if the given object is an instance of FcAlias.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FcAlias {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FcAlias.__pulumiType;
    }

    public readonly aliasName!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly routingConfig!: pulumi.Output<outputs.FcAliasRoutingConfig | undefined>;
    public readonly serviceName!: pulumi.Output<string>;
    public readonly serviceVersion!: pulumi.Output<string>;

    /**
     * Create a FcAlias resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FcAliasArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FcAliasArgs | FcAliasState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FcAliasState | undefined;
            resourceInputs["aliasName"] = state ? state.aliasName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["routingConfig"] = state ? state.routingConfig : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["serviceVersion"] = state ? state.serviceVersion : undefined;
        } else {
            const args = argsOrState as FcAliasArgs | undefined;
            if ((!args || args.aliasName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aliasName'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.serviceVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceVersion'");
            }
            resourceInputs["aliasName"] = args ? args.aliasName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["routingConfig"] = args ? args.routingConfig : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["serviceVersion"] = args ? args.serviceVersion : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FcAlias.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FcAlias resources.
 */
export interface FcAliasState {
    aliasName?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    routingConfig?: pulumi.Input<inputs.FcAliasRoutingConfig>;
    serviceName?: pulumi.Input<string>;
    serviceVersion?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FcAlias resource.
 */
export interface FcAliasArgs {
    aliasName: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    routingConfig?: pulumi.Input<inputs.FcAliasRoutingConfig>;
    serviceName: pulumi.Input<string>;
    serviceVersion: pulumi.Input<string>;
}
