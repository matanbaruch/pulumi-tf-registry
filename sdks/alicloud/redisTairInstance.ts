// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RedisTairInstance extends pulumi.CustomResource {
    /**
     * Get an existing RedisTairInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RedisTairInstanceState, opts?: pulumi.CustomResourceOptions): RedisTairInstance {
        return new RedisTairInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/redisTairInstance:RedisTairInstance';

    /**
     * Returns true if the given object is an instance of RedisTairInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RedisTairInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RedisTairInstance.__pulumiType;
    }

    public readonly autoRenew!: pulumi.Output<string | undefined>;
    public readonly autoRenewPeriod!: pulumi.Output<string | undefined>;
    public readonly clusterBackupId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly effectiveTime!: pulumi.Output<string | undefined>;
    public readonly engineVersion!: pulumi.Output<string>;
    public readonly forceUpgrade!: pulumi.Output<boolean | undefined>;
    public readonly instanceClass!: pulumi.Output<string>;
    public readonly instanceType!: pulumi.Output<string>;
    public readonly nodeType!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly paymentType!: pulumi.Output<string>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly port!: pulumi.Output<number>;
    public readonly readOnlyCount!: pulumi.Output<number | undefined>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly secondaryZoneId!: pulumi.Output<string | undefined>;
    public readonly securityGroupId!: pulumi.Output<string | undefined>;
    public readonly shardCount!: pulumi.Output<number>;
    public readonly slaveReadOnlyCount!: pulumi.Output<number | undefined>;
    public readonly sslEnabled!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly storagePerformanceLevel!: pulumi.Output<string | undefined>;
    public readonly storageSizeGb!: pulumi.Output<number>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tairInstanceName!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.RedisTairInstanceTimeouts | undefined>;
    public readonly vpcId!: pulumi.Output<string>;
    public readonly vswitchId!: pulumi.Output<string>;
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a RedisTairInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedisTairInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RedisTairInstanceArgs | RedisTairInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RedisTairInstanceState | undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["autoRenewPeriod"] = state ? state.autoRenewPeriod : undefined;
            resourceInputs["clusterBackupId"] = state ? state.clusterBackupId : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["effectiveTime"] = state ? state.effectiveTime : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["forceUpgrade"] = state ? state.forceUpgrade : undefined;
            resourceInputs["instanceClass"] = state ? state.instanceClass : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["nodeType"] = state ? state.nodeType : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["paymentType"] = state ? state.paymentType : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["readOnlyCount"] = state ? state.readOnlyCount : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["secondaryZoneId"] = state ? state.secondaryZoneId : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["shardCount"] = state ? state.shardCount : undefined;
            resourceInputs["slaveReadOnlyCount"] = state ? state.slaveReadOnlyCount : undefined;
            resourceInputs["sslEnabled"] = state ? state.sslEnabled : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storagePerformanceLevel"] = state ? state.storagePerformanceLevel : undefined;
            resourceInputs["storageSizeGb"] = state ? state.storageSizeGb : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tairInstanceName"] = state ? state.tairInstanceName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as RedisTairInstanceArgs | undefined;
            if ((!args || args.instanceClass === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceClass'");
            }
            if ((!args || args.instanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceType'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            if ((!args || args.vswitchId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vswitchId'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["autoRenewPeriod"] = args ? args.autoRenewPeriod : undefined;
            resourceInputs["clusterBackupId"] = args ? args.clusterBackupId : undefined;
            resourceInputs["effectiveTime"] = args ? args.effectiveTime : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["forceUpgrade"] = args ? args.forceUpgrade : undefined;
            resourceInputs["instanceClass"] = args ? args.instanceClass : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["nodeType"] = args ? args.nodeType : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["paymentType"] = args ? args.paymentType : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["readOnlyCount"] = args ? args.readOnlyCount : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["secondaryZoneId"] = args ? args.secondaryZoneId : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["shardCount"] = args ? args.shardCount : undefined;
            resourceInputs["slaveReadOnlyCount"] = args ? args.slaveReadOnlyCount : undefined;
            resourceInputs["sslEnabled"] = args ? args.sslEnabled : undefined;
            resourceInputs["storagePerformanceLevel"] = args ? args.storagePerformanceLevel : undefined;
            resourceInputs["storageSizeGb"] = args ? args.storageSizeGb : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tairInstanceName"] = args ? args.tairInstanceName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RedisTairInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RedisTairInstance resources.
 */
export interface RedisTairInstanceState {
    autoRenew?: pulumi.Input<string>;
    autoRenewPeriod?: pulumi.Input<string>;
    clusterBackupId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    effectiveTime?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    forceUpgrade?: pulumi.Input<boolean>;
    instanceClass?: pulumi.Input<string>;
    instanceType?: pulumi.Input<string>;
    nodeType?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    readOnlyCount?: pulumi.Input<number>;
    resourceGroupId?: pulumi.Input<string>;
    secondaryZoneId?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    shardCount?: pulumi.Input<number>;
    slaveReadOnlyCount?: pulumi.Input<number>;
    sslEnabled?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    storagePerformanceLevel?: pulumi.Input<string>;
    storageSizeGb?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tairInstanceName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.RedisTairInstanceTimeouts>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RedisTairInstance resource.
 */
export interface RedisTairInstanceArgs {
    autoRenew?: pulumi.Input<string>;
    autoRenewPeriod?: pulumi.Input<string>;
    clusterBackupId?: pulumi.Input<string>;
    effectiveTime?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    forceUpgrade?: pulumi.Input<boolean>;
    instanceClass: pulumi.Input<string>;
    instanceType: pulumi.Input<string>;
    nodeType?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    readOnlyCount?: pulumi.Input<number>;
    resourceGroupId?: pulumi.Input<string>;
    secondaryZoneId?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    shardCount?: pulumi.Input<number>;
    slaveReadOnlyCount?: pulumi.Input<number>;
    sslEnabled?: pulumi.Input<string>;
    storagePerformanceLevel?: pulumi.Input<string>;
    storageSizeGb?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tairInstanceName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.RedisTairInstanceTimeouts>;
    vpcId: pulumi.Input<string>;
    vswitchId: pulumi.Input<string>;
    zoneId: pulumi.Input<string>;
}
