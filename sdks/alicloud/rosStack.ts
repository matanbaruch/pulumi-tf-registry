// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RosStack extends pulumi.CustomResource {
    /**
     * Get an existing RosStack resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RosStackState, opts?: pulumi.CustomResourceOptions): RosStack {
        return new RosStack(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/rosStack:RosStack';

    /**
     * Returns true if the given object is an instance of RosStack.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RosStack {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RosStack.__pulumiType;
    }

    public readonly createOption!: pulumi.Output<string | undefined>;
    public readonly deletionProtection!: pulumi.Output<string | undefined>;
    public readonly disableRollback!: pulumi.Output<boolean | undefined>;
    public readonly notificationUrls!: pulumi.Output<string[] | undefined>;
    public readonly parameters!: pulumi.Output<outputs.RosStackParameter[] | undefined>;
    public readonly ramRoleName!: pulumi.Output<string | undefined>;
    public readonly replacementOption!: pulumi.Output<string | undefined>;
    public readonly retainAllResources!: pulumi.Output<boolean | undefined>;
    public readonly retainResources!: pulumi.Output<string[] | undefined>;
    public readonly stackName!: pulumi.Output<string>;
    public readonly stackPolicyBody!: pulumi.Output<string | undefined>;
    public readonly stackPolicyDuringUpdateBody!: pulumi.Output<string | undefined>;
    public readonly stackPolicyDuringUpdateUrl!: pulumi.Output<string | undefined>;
    public readonly stackPolicyUrl!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly templateBody!: pulumi.Output<string | undefined>;
    public readonly templateUrl!: pulumi.Output<string | undefined>;
    public readonly templateVersion!: pulumi.Output<string | undefined>;
    public readonly timeoutInMinutes!: pulumi.Output<number | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.RosStackTimeouts | undefined>;
    public readonly usePreviousParameters!: pulumi.Output<boolean | undefined>;

    /**
     * Create a RosStack resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RosStackArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RosStackArgs | RosStackState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RosStackState | undefined;
            resourceInputs["createOption"] = state ? state.createOption : undefined;
            resourceInputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            resourceInputs["disableRollback"] = state ? state.disableRollback : undefined;
            resourceInputs["notificationUrls"] = state ? state.notificationUrls : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["ramRoleName"] = state ? state.ramRoleName : undefined;
            resourceInputs["replacementOption"] = state ? state.replacementOption : undefined;
            resourceInputs["retainAllResources"] = state ? state.retainAllResources : undefined;
            resourceInputs["retainResources"] = state ? state.retainResources : undefined;
            resourceInputs["stackName"] = state ? state.stackName : undefined;
            resourceInputs["stackPolicyBody"] = state ? state.stackPolicyBody : undefined;
            resourceInputs["stackPolicyDuringUpdateBody"] = state ? state.stackPolicyDuringUpdateBody : undefined;
            resourceInputs["stackPolicyDuringUpdateUrl"] = state ? state.stackPolicyDuringUpdateUrl : undefined;
            resourceInputs["stackPolicyUrl"] = state ? state.stackPolicyUrl : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["templateBody"] = state ? state.templateBody : undefined;
            resourceInputs["templateUrl"] = state ? state.templateUrl : undefined;
            resourceInputs["templateVersion"] = state ? state.templateVersion : undefined;
            resourceInputs["timeoutInMinutes"] = state ? state.timeoutInMinutes : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["usePreviousParameters"] = state ? state.usePreviousParameters : undefined;
        } else {
            const args = argsOrState as RosStackArgs | undefined;
            if ((!args || args.stackName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stackName'");
            }
            resourceInputs["createOption"] = args ? args.createOption : undefined;
            resourceInputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            resourceInputs["disableRollback"] = args ? args.disableRollback : undefined;
            resourceInputs["notificationUrls"] = args ? args.notificationUrls : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["ramRoleName"] = args ? args.ramRoleName : undefined;
            resourceInputs["replacementOption"] = args ? args.replacementOption : undefined;
            resourceInputs["retainAllResources"] = args ? args.retainAllResources : undefined;
            resourceInputs["retainResources"] = args ? args.retainResources : undefined;
            resourceInputs["stackName"] = args ? args.stackName : undefined;
            resourceInputs["stackPolicyBody"] = args ? args.stackPolicyBody : undefined;
            resourceInputs["stackPolicyDuringUpdateBody"] = args ? args.stackPolicyDuringUpdateBody : undefined;
            resourceInputs["stackPolicyDuringUpdateUrl"] = args ? args.stackPolicyDuringUpdateUrl : undefined;
            resourceInputs["stackPolicyUrl"] = args ? args.stackPolicyUrl : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["templateBody"] = args ? args.templateBody : undefined;
            resourceInputs["templateUrl"] = args ? args.templateUrl : undefined;
            resourceInputs["templateVersion"] = args ? args.templateVersion : undefined;
            resourceInputs["timeoutInMinutes"] = args ? args.timeoutInMinutes : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["usePreviousParameters"] = args ? args.usePreviousParameters : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RosStack.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RosStack resources.
 */
export interface RosStackState {
    createOption?: pulumi.Input<string>;
    deletionProtection?: pulumi.Input<string>;
    disableRollback?: pulumi.Input<boolean>;
    notificationUrls?: pulumi.Input<pulumi.Input<string>[]>;
    parameters?: pulumi.Input<pulumi.Input<inputs.RosStackParameter>[]>;
    ramRoleName?: pulumi.Input<string>;
    replacementOption?: pulumi.Input<string>;
    retainAllResources?: pulumi.Input<boolean>;
    retainResources?: pulumi.Input<pulumi.Input<string>[]>;
    stackName?: pulumi.Input<string>;
    stackPolicyBody?: pulumi.Input<string>;
    stackPolicyDuringUpdateBody?: pulumi.Input<string>;
    stackPolicyDuringUpdateUrl?: pulumi.Input<string>;
    stackPolicyUrl?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    templateBody?: pulumi.Input<string>;
    templateUrl?: pulumi.Input<string>;
    templateVersion?: pulumi.Input<string>;
    timeoutInMinutes?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.RosStackTimeouts>;
    usePreviousParameters?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a RosStack resource.
 */
export interface RosStackArgs {
    createOption?: pulumi.Input<string>;
    deletionProtection?: pulumi.Input<string>;
    disableRollback?: pulumi.Input<boolean>;
    notificationUrls?: pulumi.Input<pulumi.Input<string>[]>;
    parameters?: pulumi.Input<pulumi.Input<inputs.RosStackParameter>[]>;
    ramRoleName?: pulumi.Input<string>;
    replacementOption?: pulumi.Input<string>;
    retainAllResources?: pulumi.Input<boolean>;
    retainResources?: pulumi.Input<pulumi.Input<string>[]>;
    stackName: pulumi.Input<string>;
    stackPolicyBody?: pulumi.Input<string>;
    stackPolicyDuringUpdateBody?: pulumi.Input<string>;
    stackPolicyDuringUpdateUrl?: pulumi.Input<string>;
    stackPolicyUrl?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    templateBody?: pulumi.Input<string>;
    templateUrl?: pulumi.Input<string>;
    templateVersion?: pulumi.Input<string>;
    timeoutInMinutes?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.RosStackTimeouts>;
    usePreviousParameters?: pulumi.Input<boolean>;
}
