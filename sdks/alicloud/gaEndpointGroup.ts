// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GaEndpointGroup extends pulumi.CustomResource {
    /**
     * Get an existing GaEndpointGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GaEndpointGroupState, opts?: pulumi.CustomResourceOptions): GaEndpointGroup {
        return new GaEndpointGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/gaEndpointGroup:GaEndpointGroup';

    /**
     * Returns true if the given object is an instance of GaEndpointGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GaEndpointGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GaEndpointGroup.__pulumiType;
    }

    public readonly acceleratorId!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly endpointConfigurations!: pulumi.Output<outputs.GaEndpointGroupEndpointConfiguration[]>;
    public /*out*/ readonly endpointGroupIpLists!: pulumi.Output<string[]>;
    public readonly endpointGroupRegion!: pulumi.Output<string>;
    public readonly endpointGroupType!: pulumi.Output<string>;
    public readonly endpointRequestProtocol!: pulumi.Output<string>;
    public readonly healthCheckEnabled!: pulumi.Output<boolean | undefined>;
    public readonly healthCheckIntervalSeconds!: pulumi.Output<number | undefined>;
    public readonly healthCheckPath!: pulumi.Output<string | undefined>;
    public readonly healthCheckPort!: pulumi.Output<number | undefined>;
    public readonly healthCheckProtocol!: pulumi.Output<string | undefined>;
    public readonly listenerId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly portOverrides!: pulumi.Output<outputs.GaEndpointGroupPortOverrides | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly thresholdCount!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.GaEndpointGroupTimeouts | undefined>;
    public readonly trafficPercentage!: pulumi.Output<number | undefined>;

    /**
     * Create a GaEndpointGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GaEndpointGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GaEndpointGroupArgs | GaEndpointGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GaEndpointGroupState | undefined;
            resourceInputs["acceleratorId"] = state ? state.acceleratorId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["endpointConfigurations"] = state ? state.endpointConfigurations : undefined;
            resourceInputs["endpointGroupIpLists"] = state ? state.endpointGroupIpLists : undefined;
            resourceInputs["endpointGroupRegion"] = state ? state.endpointGroupRegion : undefined;
            resourceInputs["endpointGroupType"] = state ? state.endpointGroupType : undefined;
            resourceInputs["endpointRequestProtocol"] = state ? state.endpointRequestProtocol : undefined;
            resourceInputs["healthCheckEnabled"] = state ? state.healthCheckEnabled : undefined;
            resourceInputs["healthCheckIntervalSeconds"] = state ? state.healthCheckIntervalSeconds : undefined;
            resourceInputs["healthCheckPath"] = state ? state.healthCheckPath : undefined;
            resourceInputs["healthCheckPort"] = state ? state.healthCheckPort : undefined;
            resourceInputs["healthCheckProtocol"] = state ? state.healthCheckProtocol : undefined;
            resourceInputs["listenerId"] = state ? state.listenerId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["portOverrides"] = state ? state.portOverrides : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["thresholdCount"] = state ? state.thresholdCount : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["trafficPercentage"] = state ? state.trafficPercentage : undefined;
        } else {
            const args = argsOrState as GaEndpointGroupArgs | undefined;
            if ((!args || args.acceleratorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'acceleratorId'");
            }
            if ((!args || args.endpointConfigurations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointConfigurations'");
            }
            if ((!args || args.endpointGroupRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointGroupRegion'");
            }
            if ((!args || args.listenerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenerId'");
            }
            resourceInputs["acceleratorId"] = args ? args.acceleratorId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["endpointConfigurations"] = args ? args.endpointConfigurations : undefined;
            resourceInputs["endpointGroupRegion"] = args ? args.endpointGroupRegion : undefined;
            resourceInputs["endpointGroupType"] = args ? args.endpointGroupType : undefined;
            resourceInputs["endpointRequestProtocol"] = args ? args.endpointRequestProtocol : undefined;
            resourceInputs["healthCheckEnabled"] = args ? args.healthCheckEnabled : undefined;
            resourceInputs["healthCheckIntervalSeconds"] = args ? args.healthCheckIntervalSeconds : undefined;
            resourceInputs["healthCheckPath"] = args ? args.healthCheckPath : undefined;
            resourceInputs["healthCheckPort"] = args ? args.healthCheckPort : undefined;
            resourceInputs["healthCheckProtocol"] = args ? args.healthCheckProtocol : undefined;
            resourceInputs["listenerId"] = args ? args.listenerId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["portOverrides"] = args ? args.portOverrides : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["thresholdCount"] = args ? args.thresholdCount : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["trafficPercentage"] = args ? args.trafficPercentage : undefined;
            resourceInputs["endpointGroupIpLists"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GaEndpointGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GaEndpointGroup resources.
 */
export interface GaEndpointGroupState {
    acceleratorId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    endpointConfigurations?: pulumi.Input<pulumi.Input<inputs.GaEndpointGroupEndpointConfiguration>[]>;
    endpointGroupIpLists?: pulumi.Input<pulumi.Input<string>[]>;
    endpointGroupRegion?: pulumi.Input<string>;
    endpointGroupType?: pulumi.Input<string>;
    endpointRequestProtocol?: pulumi.Input<string>;
    healthCheckEnabled?: pulumi.Input<boolean>;
    healthCheckIntervalSeconds?: pulumi.Input<number>;
    healthCheckPath?: pulumi.Input<string>;
    healthCheckPort?: pulumi.Input<number>;
    healthCheckProtocol?: pulumi.Input<string>;
    listenerId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    portOverrides?: pulumi.Input<inputs.GaEndpointGroupPortOverrides>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    thresholdCount?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.GaEndpointGroupTimeouts>;
    trafficPercentage?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a GaEndpointGroup resource.
 */
export interface GaEndpointGroupArgs {
    acceleratorId: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    endpointConfigurations: pulumi.Input<pulumi.Input<inputs.GaEndpointGroupEndpointConfiguration>[]>;
    endpointGroupRegion: pulumi.Input<string>;
    endpointGroupType?: pulumi.Input<string>;
    endpointRequestProtocol?: pulumi.Input<string>;
    healthCheckEnabled?: pulumi.Input<boolean>;
    healthCheckIntervalSeconds?: pulumi.Input<number>;
    healthCheckPath?: pulumi.Input<string>;
    healthCheckPort?: pulumi.Input<number>;
    healthCheckProtocol?: pulumi.Input<string>;
    listenerId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    portOverrides?: pulumi.Input<inputs.GaEndpointGroupPortOverrides>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    thresholdCount?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.GaEndpointGroupTimeouts>;
    trafficPercentage?: pulumi.Input<number>;
}
