// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class BastionhostHost extends pulumi.CustomResource {
    /**
     * Get an existing BastionhostHost resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BastionhostHostState, opts?: pulumi.CustomResourceOptions): BastionhostHost {
        return new BastionhostHost(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/bastionhostHost:BastionhostHost';

    /**
     * Returns true if the given object is an instance of BastionhostHost.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BastionhostHost {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BastionhostHost.__pulumiType;
    }

    public readonly activeAddressType!: pulumi.Output<string>;
    public readonly comment!: pulumi.Output<string | undefined>;
    public /*out*/ readonly hostId!: pulumi.Output<string>;
    public readonly hostName!: pulumi.Output<string>;
    public readonly hostPrivateAddress!: pulumi.Output<string | undefined>;
    public readonly hostPublicAddress!: pulumi.Output<string | undefined>;
    public readonly instanceId!: pulumi.Output<string>;
    public readonly instanceRegionId!: pulumi.Output<string | undefined>;
    public readonly osType!: pulumi.Output<string>;
    public readonly source!: pulumi.Output<string>;
    public readonly sourceInstanceId!: pulumi.Output<string | undefined>;

    /**
     * Create a BastionhostHost resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BastionhostHostArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BastionhostHostArgs | BastionhostHostState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BastionhostHostState | undefined;
            resourceInputs["activeAddressType"] = state ? state.activeAddressType : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["hostId"] = state ? state.hostId : undefined;
            resourceInputs["hostName"] = state ? state.hostName : undefined;
            resourceInputs["hostPrivateAddress"] = state ? state.hostPrivateAddress : undefined;
            resourceInputs["hostPublicAddress"] = state ? state.hostPublicAddress : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["instanceRegionId"] = state ? state.instanceRegionId : undefined;
            resourceInputs["osType"] = state ? state.osType : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["sourceInstanceId"] = state ? state.sourceInstanceId : undefined;
        } else {
            const args = argsOrState as BastionhostHostArgs | undefined;
            if ((!args || args.activeAddressType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'activeAddressType'");
            }
            if ((!args || args.hostName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostName'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.osType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osType'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["activeAddressType"] = args ? args.activeAddressType : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["hostName"] = args ? args.hostName : undefined;
            resourceInputs["hostPrivateAddress"] = args ? args.hostPrivateAddress : undefined;
            resourceInputs["hostPublicAddress"] = args ? args.hostPublicAddress : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["instanceRegionId"] = args ? args.instanceRegionId : undefined;
            resourceInputs["osType"] = args ? args.osType : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["sourceInstanceId"] = args ? args.sourceInstanceId : undefined;
            resourceInputs["hostId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BastionhostHost.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BastionhostHost resources.
 */
export interface BastionhostHostState {
    activeAddressType?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    hostId?: pulumi.Input<string>;
    hostName?: pulumi.Input<string>;
    hostPrivateAddress?: pulumi.Input<string>;
    hostPublicAddress?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    instanceRegionId?: pulumi.Input<string>;
    osType?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    sourceInstanceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BastionhostHost resource.
 */
export interface BastionhostHostArgs {
    activeAddressType: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    hostName: pulumi.Input<string>;
    hostPrivateAddress?: pulumi.Input<string>;
    hostPublicAddress?: pulumi.Input<string>;
    instanceId: pulumi.Input<string>;
    instanceRegionId?: pulumi.Input<string>;
    osType: pulumi.Input<string>;
    source: pulumi.Input<string>;
    sourceInstanceId?: pulumi.Input<string>;
}
