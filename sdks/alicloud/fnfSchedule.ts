// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FnfSchedule extends pulumi.CustomResource {
    /**
     * Get an existing FnfSchedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FnfScheduleState, opts?: pulumi.CustomResourceOptions): FnfSchedule {
        return new FnfSchedule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/fnfSchedule:FnfSchedule';

    /**
     * Returns true if the given object is an instance of FnfSchedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FnfSchedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FnfSchedule.__pulumiType;
    }

    public readonly cronExpression!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly enable!: pulumi.Output<boolean | undefined>;
    public readonly flowName!: pulumi.Output<string>;
    public /*out*/ readonly lastModifiedTime!: pulumi.Output<string>;
    public readonly payload!: pulumi.Output<string | undefined>;
    public /*out*/ readonly scheduleId!: pulumi.Output<string>;
    public readonly scheduleName!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.FnfScheduleTimeouts | undefined>;

    /**
     * Create a FnfSchedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FnfScheduleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FnfScheduleArgs | FnfScheduleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FnfScheduleState | undefined;
            resourceInputs["cronExpression"] = state ? state.cronExpression : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["flowName"] = state ? state.flowName : undefined;
            resourceInputs["lastModifiedTime"] = state ? state.lastModifiedTime : undefined;
            resourceInputs["payload"] = state ? state.payload : undefined;
            resourceInputs["scheduleId"] = state ? state.scheduleId : undefined;
            resourceInputs["scheduleName"] = state ? state.scheduleName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as FnfScheduleArgs | undefined;
            if ((!args || args.cronExpression === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cronExpression'");
            }
            if ((!args || args.flowName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flowName'");
            }
            if ((!args || args.scheduleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scheduleName'");
            }
            resourceInputs["cronExpression"] = args ? args.cronExpression : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["flowName"] = args ? args.flowName : undefined;
            resourceInputs["payload"] = args ? args.payload : undefined;
            resourceInputs["scheduleName"] = args ? args.scheduleName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["lastModifiedTime"] = undefined /*out*/;
            resourceInputs["scheduleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FnfSchedule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FnfSchedule resources.
 */
export interface FnfScheduleState {
    cronExpression?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enable?: pulumi.Input<boolean>;
    flowName?: pulumi.Input<string>;
    lastModifiedTime?: pulumi.Input<string>;
    payload?: pulumi.Input<string>;
    scheduleId?: pulumi.Input<string>;
    scheduleName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FnfScheduleTimeouts>;
}

/**
 * The set of arguments for constructing a FnfSchedule resource.
 */
export interface FnfScheduleArgs {
    cronExpression: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enable?: pulumi.Input<boolean>;
    flowName: pulumi.Input<string>;
    payload?: pulumi.Input<string>;
    scheduleName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FnfScheduleTimeouts>;
}
