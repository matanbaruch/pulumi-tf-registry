// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EbsDedicatedBlockStorageCluster extends pulumi.CustomResource {
    /**
     * Get an existing EbsDedicatedBlockStorageCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EbsDedicatedBlockStorageClusterState, opts?: pulumi.CustomResourceOptions): EbsDedicatedBlockStorageCluster {
        return new EbsDedicatedBlockStorageCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/ebsDedicatedBlockStorageCluster:EbsDedicatedBlockStorageCluster';

    /**
     * Returns true if the given object is an instance of EbsDedicatedBlockStorageCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EbsDedicatedBlockStorageCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EbsDedicatedBlockStorageCluster.__pulumiType;
    }

    public /*out*/ readonly availableCapacity!: pulumi.Output<string>;
    public /*out*/ readonly category!: pulumi.Output<string>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public /*out*/ readonly dedicatedBlockStorageClusterId!: pulumi.Output<string>;
    public readonly dedicatedBlockStorageClusterName!: pulumi.Output<string>;
    public /*out*/ readonly deliveryCapacity!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public /*out*/ readonly expiredTime!: pulumi.Output<string>;
    public /*out*/ readonly performanceLevel!: pulumi.Output<string>;
    public /*out*/ readonly resourceGroupId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly supportedCategory!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.EbsDedicatedBlockStorageClusterTimeouts | undefined>;
    public readonly totalCapacity!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public /*out*/ readonly usedCapacity!: pulumi.Output<string>;
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a EbsDedicatedBlockStorageCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EbsDedicatedBlockStorageClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EbsDedicatedBlockStorageClusterArgs | EbsDedicatedBlockStorageClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EbsDedicatedBlockStorageClusterState | undefined;
            resourceInputs["availableCapacity"] = state ? state.availableCapacity : undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["dedicatedBlockStorageClusterId"] = state ? state.dedicatedBlockStorageClusterId : undefined;
            resourceInputs["dedicatedBlockStorageClusterName"] = state ? state.dedicatedBlockStorageClusterName : undefined;
            resourceInputs["deliveryCapacity"] = state ? state.deliveryCapacity : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["expiredTime"] = state ? state.expiredTime : undefined;
            resourceInputs["performanceLevel"] = state ? state.performanceLevel : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["supportedCategory"] = state ? state.supportedCategory : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["totalCapacity"] = state ? state.totalCapacity : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["usedCapacity"] = state ? state.usedCapacity : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as EbsDedicatedBlockStorageClusterArgs | undefined;
            if ((!args || args.dedicatedBlockStorageClusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dedicatedBlockStorageClusterName'");
            }
            if ((!args || args.totalCapacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'totalCapacity'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["dedicatedBlockStorageClusterName"] = args ? args.dedicatedBlockStorageClusterName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["totalCapacity"] = args ? args.totalCapacity : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["availableCapacity"] = undefined /*out*/;
            resourceInputs["category"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["dedicatedBlockStorageClusterId"] = undefined /*out*/;
            resourceInputs["deliveryCapacity"] = undefined /*out*/;
            resourceInputs["expiredTime"] = undefined /*out*/;
            resourceInputs["performanceLevel"] = undefined /*out*/;
            resourceInputs["resourceGroupId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["supportedCategory"] = undefined /*out*/;
            resourceInputs["usedCapacity"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EbsDedicatedBlockStorageCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EbsDedicatedBlockStorageCluster resources.
 */
export interface EbsDedicatedBlockStorageClusterState {
    availableCapacity?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    dedicatedBlockStorageClusterId?: pulumi.Input<string>;
    dedicatedBlockStorageClusterName?: pulumi.Input<string>;
    deliveryCapacity?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    expiredTime?: pulumi.Input<string>;
    performanceLevel?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    supportedCategory?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EbsDedicatedBlockStorageClusterTimeouts>;
    totalCapacity?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    usedCapacity?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EbsDedicatedBlockStorageCluster resource.
 */
export interface EbsDedicatedBlockStorageClusterArgs {
    dedicatedBlockStorageClusterName: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EbsDedicatedBlockStorageClusterTimeouts>;
    totalCapacity: pulumi.Input<string>;
    type: pulumi.Input<string>;
    zoneId: pulumi.Input<string>;
}
