// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EcsInvocation extends pulumi.CustomResource {
    /**
     * Get an existing EcsInvocation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcsInvocationState, opts?: pulumi.CustomResourceOptions): EcsInvocation {
        return new EcsInvocation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/ecsInvocation:EcsInvocation';

    /**
     * Returns true if the given object is an instance of EcsInvocation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcsInvocation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcsInvocation.__pulumiType;
    }

    public readonly commandId!: pulumi.Output<string>;
    public readonly frequency!: pulumi.Output<string | undefined>;
    public readonly instanceIds!: pulumi.Output<string[]>;
    public readonly parameters!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly repeatMode!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timed!: pulumi.Output<boolean>;
    public readonly timeouts!: pulumi.Output<outputs.EcsInvocationTimeouts | undefined>;
    public readonly username!: pulumi.Output<string>;
    public readonly windowsPasswordName!: pulumi.Output<string | undefined>;

    /**
     * Create a EcsInvocation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EcsInvocationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcsInvocationArgs | EcsInvocationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcsInvocationState | undefined;
            resourceInputs["commandId"] = state ? state.commandId : undefined;
            resourceInputs["frequency"] = state ? state.frequency : undefined;
            resourceInputs["instanceIds"] = state ? state.instanceIds : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["repeatMode"] = state ? state.repeatMode : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timed"] = state ? state.timed : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["windowsPasswordName"] = state ? state.windowsPasswordName : undefined;
        } else {
            const args = argsOrState as EcsInvocationArgs | undefined;
            if ((!args || args.commandId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commandId'");
            }
            if ((!args || args.instanceIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceIds'");
            }
            resourceInputs["commandId"] = args ? args.commandId : undefined;
            resourceInputs["frequency"] = args ? args.frequency : undefined;
            resourceInputs["instanceIds"] = args ? args.instanceIds : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["repeatMode"] = args ? args.repeatMode : undefined;
            resourceInputs["timed"] = args ? args.timed : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["windowsPasswordName"] = args ? args.windowsPasswordName : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EcsInvocation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EcsInvocation resources.
 */
export interface EcsInvocationState {
    commandId?: pulumi.Input<string>;
    frequency?: pulumi.Input<string>;
    instanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    repeatMode?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timed?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.EcsInvocationTimeouts>;
    username?: pulumi.Input<string>;
    windowsPasswordName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EcsInvocation resource.
 */
export interface EcsInvocationArgs {
    commandId: pulumi.Input<string>;
    frequency?: pulumi.Input<string>;
    instanceIds: pulumi.Input<pulumi.Input<string>[]>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    repeatMode?: pulumi.Input<string>;
    timed?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.EcsInvocationTimeouts>;
    username?: pulumi.Input<string>;
    windowsPasswordName?: pulumi.Input<string>;
}
