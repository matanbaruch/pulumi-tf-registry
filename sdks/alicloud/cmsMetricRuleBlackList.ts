// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CmsMetricRuleBlackList extends pulumi.CustomResource {
    /**
     * Get an existing CmsMetricRuleBlackList resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CmsMetricRuleBlackListState, opts?: pulumi.CustomResourceOptions): CmsMetricRuleBlackList {
        return new CmsMetricRuleBlackList(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/cmsMetricRuleBlackList:CmsMetricRuleBlackList';

    /**
     * Returns true if the given object is an instance of CmsMetricRuleBlackList.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CmsMetricRuleBlackList {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CmsMetricRuleBlackList.__pulumiType;
    }

    public readonly category!: pulumi.Output<string>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly effectiveTime!: pulumi.Output<string | undefined>;
    public readonly enableEndTime!: pulumi.Output<string | undefined>;
    public readonly enableStartTime!: pulumi.Output<string | undefined>;
    public readonly instances!: pulumi.Output<string[]>;
    public readonly isEnable!: pulumi.Output<boolean>;
    public /*out*/ readonly metricRuleBlackListId!: pulumi.Output<string>;
    public readonly metricRuleBlackListName!: pulumi.Output<string>;
    public readonly metrics!: pulumi.Output<outputs.CmsMetricRuleBlackListMetric[] | undefined>;
    public readonly namespace!: pulumi.Output<string>;
    public readonly scopeType!: pulumi.Output<string>;
    public readonly scopeValues!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a CmsMetricRuleBlackList resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CmsMetricRuleBlackListArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CmsMetricRuleBlackListArgs | CmsMetricRuleBlackListState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CmsMetricRuleBlackListState | undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["effectiveTime"] = state ? state.effectiveTime : undefined;
            resourceInputs["enableEndTime"] = state ? state.enableEndTime : undefined;
            resourceInputs["enableStartTime"] = state ? state.enableStartTime : undefined;
            resourceInputs["instances"] = state ? state.instances : undefined;
            resourceInputs["isEnable"] = state ? state.isEnable : undefined;
            resourceInputs["metricRuleBlackListId"] = state ? state.metricRuleBlackListId : undefined;
            resourceInputs["metricRuleBlackListName"] = state ? state.metricRuleBlackListName : undefined;
            resourceInputs["metrics"] = state ? state.metrics : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["scopeType"] = state ? state.scopeType : undefined;
            resourceInputs["scopeValues"] = state ? state.scopeValues : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as CmsMetricRuleBlackListArgs | undefined;
            if ((!args || args.category === undefined) && !opts.urn) {
                throw new Error("Missing required property 'category'");
            }
            if ((!args || args.instances === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instances'");
            }
            if ((!args || args.metricRuleBlackListName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metricRuleBlackListName'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["effectiveTime"] = args ? args.effectiveTime : undefined;
            resourceInputs["enableEndTime"] = args ? args.enableEndTime : undefined;
            resourceInputs["enableStartTime"] = args ? args.enableStartTime : undefined;
            resourceInputs["instances"] = args ? args.instances : undefined;
            resourceInputs["isEnable"] = args ? args.isEnable : undefined;
            resourceInputs["metricRuleBlackListName"] = args ? args.metricRuleBlackListName : undefined;
            resourceInputs["metrics"] = args ? args.metrics : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["scopeType"] = args ? args.scopeType : undefined;
            resourceInputs["scopeValues"] = args ? args.scopeValues : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["metricRuleBlackListId"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CmsMetricRuleBlackList.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CmsMetricRuleBlackList resources.
 */
export interface CmsMetricRuleBlackListState {
    category?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    effectiveTime?: pulumi.Input<string>;
    enableEndTime?: pulumi.Input<string>;
    enableStartTime?: pulumi.Input<string>;
    instances?: pulumi.Input<pulumi.Input<string>[]>;
    isEnable?: pulumi.Input<boolean>;
    metricRuleBlackListId?: pulumi.Input<string>;
    metricRuleBlackListName?: pulumi.Input<string>;
    metrics?: pulumi.Input<pulumi.Input<inputs.CmsMetricRuleBlackListMetric>[]>;
    namespace?: pulumi.Input<string>;
    scopeType?: pulumi.Input<string>;
    scopeValues?: pulumi.Input<pulumi.Input<string>[]>;
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CmsMetricRuleBlackList resource.
 */
export interface CmsMetricRuleBlackListArgs {
    category: pulumi.Input<string>;
    effectiveTime?: pulumi.Input<string>;
    enableEndTime?: pulumi.Input<string>;
    enableStartTime?: pulumi.Input<string>;
    instances: pulumi.Input<pulumi.Input<string>[]>;
    isEnable?: pulumi.Input<boolean>;
    metricRuleBlackListName: pulumi.Input<string>;
    metrics?: pulumi.Input<pulumi.Input<inputs.CmsMetricRuleBlackListMetric>[]>;
    namespace: pulumi.Input<string>;
    scopeType?: pulumi.Input<string>;
    scopeValues?: pulumi.Input<pulumi.Input<string>[]>;
}
