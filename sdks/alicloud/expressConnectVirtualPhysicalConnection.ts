// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ExpressConnectVirtualPhysicalConnection extends pulumi.CustomResource {
    /**
     * Get an existing ExpressConnectVirtualPhysicalConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExpressConnectVirtualPhysicalConnectionState, opts?: pulumi.CustomResourceOptions): ExpressConnectVirtualPhysicalConnection {
        return new ExpressConnectVirtualPhysicalConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/expressConnectVirtualPhysicalConnection:ExpressConnectVirtualPhysicalConnection';

    /**
     * Returns true if the given object is an instance of ExpressConnectVirtualPhysicalConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExpressConnectVirtualPhysicalConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExpressConnectVirtualPhysicalConnection.__pulumiType;
    }

    public /*out*/ readonly accessPointId!: pulumi.Output<string>;
    public /*out*/ readonly adLocation!: pulumi.Output<string>;
    public /*out*/ readonly bandwidth!: pulumi.Output<string>;
    public /*out*/ readonly businessStatus!: pulumi.Output<string>;
    public /*out*/ readonly circuitCode!: pulumi.Output<string>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dryRun!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly enabledTime!: pulumi.Output<string>;
    public /*out*/ readonly endTime!: pulumi.Output<string>;
    public readonly expectSpec!: pulumi.Output<string | undefined>;
    public /*out*/ readonly lineOperator!: pulumi.Output<string>;
    public /*out*/ readonly loaStatus!: pulumi.Output<string>;
    public readonly orderMode!: pulumi.Output<string>;
    public /*out*/ readonly parentPhysicalConnectionAliUid!: pulumi.Output<string>;
    public readonly parentPhysicalConnectionId!: pulumi.Output<string>;
    public /*out*/ readonly peerLocation!: pulumi.Output<string>;
    public /*out*/ readonly portNumber!: pulumi.Output<string>;
    public /*out*/ readonly portType!: pulumi.Output<string>;
    public /*out*/ readonly redundantPhysicalConnectionId!: pulumi.Output<string>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly spec!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ExpressConnectVirtualPhysicalConnectionTimeouts | undefined>;
    public readonly virtualPhysicalConnectionName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly virtualPhysicalConnectionStatus!: pulumi.Output<string>;
    public readonly vlanId!: pulumi.Output<number>;
    public readonly vpconnAliUid!: pulumi.Output<string>;

    /**
     * Create a ExpressConnectVirtualPhysicalConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExpressConnectVirtualPhysicalConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExpressConnectVirtualPhysicalConnectionArgs | ExpressConnectVirtualPhysicalConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExpressConnectVirtualPhysicalConnectionState | undefined;
            resourceInputs["accessPointId"] = state ? state.accessPointId : undefined;
            resourceInputs["adLocation"] = state ? state.adLocation : undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["businessStatus"] = state ? state.businessStatus : undefined;
            resourceInputs["circuitCode"] = state ? state.circuitCode : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dryRun"] = state ? state.dryRun : undefined;
            resourceInputs["enabledTime"] = state ? state.enabledTime : undefined;
            resourceInputs["endTime"] = state ? state.endTime : undefined;
            resourceInputs["expectSpec"] = state ? state.expectSpec : undefined;
            resourceInputs["lineOperator"] = state ? state.lineOperator : undefined;
            resourceInputs["loaStatus"] = state ? state.loaStatus : undefined;
            resourceInputs["orderMode"] = state ? state.orderMode : undefined;
            resourceInputs["parentPhysicalConnectionAliUid"] = state ? state.parentPhysicalConnectionAliUid : undefined;
            resourceInputs["parentPhysicalConnectionId"] = state ? state.parentPhysicalConnectionId : undefined;
            resourceInputs["peerLocation"] = state ? state.peerLocation : undefined;
            resourceInputs["portNumber"] = state ? state.portNumber : undefined;
            resourceInputs["portType"] = state ? state.portType : undefined;
            resourceInputs["redundantPhysicalConnectionId"] = state ? state.redundantPhysicalConnectionId : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["spec"] = state ? state.spec : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["virtualPhysicalConnectionName"] = state ? state.virtualPhysicalConnectionName : undefined;
            resourceInputs["virtualPhysicalConnectionStatus"] = state ? state.virtualPhysicalConnectionStatus : undefined;
            resourceInputs["vlanId"] = state ? state.vlanId : undefined;
            resourceInputs["vpconnAliUid"] = state ? state.vpconnAliUid : undefined;
        } else {
            const args = argsOrState as ExpressConnectVirtualPhysicalConnectionArgs | undefined;
            if ((!args || args.orderMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orderMode'");
            }
            if ((!args || args.parentPhysicalConnectionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentPhysicalConnectionId'");
            }
            if ((!args || args.spec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'spec'");
            }
            if ((!args || args.vlanId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vlanId'");
            }
            if ((!args || args.vpconnAliUid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpconnAliUid'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dryRun"] = args ? args.dryRun : undefined;
            resourceInputs["expectSpec"] = args ? args.expectSpec : undefined;
            resourceInputs["orderMode"] = args ? args.orderMode : undefined;
            resourceInputs["parentPhysicalConnectionId"] = args ? args.parentPhysicalConnectionId : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["virtualPhysicalConnectionName"] = args ? args.virtualPhysicalConnectionName : undefined;
            resourceInputs["vlanId"] = args ? args.vlanId : undefined;
            resourceInputs["vpconnAliUid"] = args ? args.vpconnAliUid : undefined;
            resourceInputs["accessPointId"] = undefined /*out*/;
            resourceInputs["adLocation"] = undefined /*out*/;
            resourceInputs["bandwidth"] = undefined /*out*/;
            resourceInputs["businessStatus"] = undefined /*out*/;
            resourceInputs["circuitCode"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["enabledTime"] = undefined /*out*/;
            resourceInputs["endTime"] = undefined /*out*/;
            resourceInputs["lineOperator"] = undefined /*out*/;
            resourceInputs["loaStatus"] = undefined /*out*/;
            resourceInputs["parentPhysicalConnectionAliUid"] = undefined /*out*/;
            resourceInputs["peerLocation"] = undefined /*out*/;
            resourceInputs["portNumber"] = undefined /*out*/;
            resourceInputs["portType"] = undefined /*out*/;
            resourceInputs["redundantPhysicalConnectionId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["virtualPhysicalConnectionStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExpressConnectVirtualPhysicalConnection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ExpressConnectVirtualPhysicalConnection resources.
 */
export interface ExpressConnectVirtualPhysicalConnectionState {
    accessPointId?: pulumi.Input<string>;
    adLocation?: pulumi.Input<string>;
    bandwidth?: pulumi.Input<string>;
    businessStatus?: pulumi.Input<string>;
    circuitCode?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dryRun?: pulumi.Input<boolean>;
    enabledTime?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    expectSpec?: pulumi.Input<string>;
    lineOperator?: pulumi.Input<string>;
    loaStatus?: pulumi.Input<string>;
    orderMode?: pulumi.Input<string>;
    parentPhysicalConnectionAliUid?: pulumi.Input<string>;
    parentPhysicalConnectionId?: pulumi.Input<string>;
    peerLocation?: pulumi.Input<string>;
    portNumber?: pulumi.Input<string>;
    portType?: pulumi.Input<string>;
    redundantPhysicalConnectionId?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    spec?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ExpressConnectVirtualPhysicalConnectionTimeouts>;
    virtualPhysicalConnectionName?: pulumi.Input<string>;
    virtualPhysicalConnectionStatus?: pulumi.Input<string>;
    vlanId?: pulumi.Input<number>;
    vpconnAliUid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ExpressConnectVirtualPhysicalConnection resource.
 */
export interface ExpressConnectVirtualPhysicalConnectionArgs {
    description?: pulumi.Input<string>;
    dryRun?: pulumi.Input<boolean>;
    expectSpec?: pulumi.Input<string>;
    orderMode: pulumi.Input<string>;
    parentPhysicalConnectionId: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    spec: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ExpressConnectVirtualPhysicalConnectionTimeouts>;
    virtualPhysicalConnectionName?: pulumi.Input<string>;
    vlanId: pulumi.Input<number>;
    vpconnAliUid: pulumi.Input<string>;
}
