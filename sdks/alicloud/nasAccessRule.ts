// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NasAccessRule extends pulumi.CustomResource {
    /**
     * Get an existing NasAccessRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NasAccessRuleState, opts?: pulumi.CustomResourceOptions): NasAccessRule {
        return new NasAccessRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/nasAccessRule:NasAccessRule';

    /**
     * Returns true if the given object is an instance of NasAccessRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NasAccessRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NasAccessRule.__pulumiType;
    }

    public readonly accessGroupName!: pulumi.Output<string>;
    public /*out*/ readonly accessRuleId!: pulumi.Output<string>;
    public readonly fileSystemType!: pulumi.Output<string>;
    public readonly ipv6SourceCidrIp!: pulumi.Output<string | undefined>;
    public readonly priority!: pulumi.Output<number | undefined>;
    public readonly rwAccessType!: pulumi.Output<string>;
    public readonly sourceCidrIp!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.NasAccessRuleTimeouts | undefined>;
    public readonly userAccessType!: pulumi.Output<string>;

    /**
     * Create a NasAccessRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NasAccessRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NasAccessRuleArgs | NasAccessRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NasAccessRuleState | undefined;
            resourceInputs["accessGroupName"] = state ? state.accessGroupName : undefined;
            resourceInputs["accessRuleId"] = state ? state.accessRuleId : undefined;
            resourceInputs["fileSystemType"] = state ? state.fileSystemType : undefined;
            resourceInputs["ipv6SourceCidrIp"] = state ? state.ipv6SourceCidrIp : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["rwAccessType"] = state ? state.rwAccessType : undefined;
            resourceInputs["sourceCidrIp"] = state ? state.sourceCidrIp : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userAccessType"] = state ? state.userAccessType : undefined;
        } else {
            const args = argsOrState as NasAccessRuleArgs | undefined;
            if ((!args || args.accessGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessGroupName'");
            }
            resourceInputs["accessGroupName"] = args ? args.accessGroupName : undefined;
            resourceInputs["fileSystemType"] = args ? args.fileSystemType : undefined;
            resourceInputs["ipv6SourceCidrIp"] = args ? args.ipv6SourceCidrIp : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["rwAccessType"] = args ? args.rwAccessType : undefined;
            resourceInputs["sourceCidrIp"] = args ? args.sourceCidrIp : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userAccessType"] = args ? args.userAccessType : undefined;
            resourceInputs["accessRuleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NasAccessRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NasAccessRule resources.
 */
export interface NasAccessRuleState {
    accessGroupName?: pulumi.Input<string>;
    accessRuleId?: pulumi.Input<string>;
    fileSystemType?: pulumi.Input<string>;
    ipv6SourceCidrIp?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    rwAccessType?: pulumi.Input<string>;
    sourceCidrIp?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NasAccessRuleTimeouts>;
    userAccessType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NasAccessRule resource.
 */
export interface NasAccessRuleArgs {
    accessGroupName: pulumi.Input<string>;
    fileSystemType?: pulumi.Input<string>;
    ipv6SourceCidrIp?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    rwAccessType?: pulumi.Input<string>;
    sourceCidrIp?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NasAccessRuleTimeouts>;
    userAccessType?: pulumi.Input<string>;
}
