// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NasAccessPoint extends pulumi.CustomResource {
    /**
     * Get an existing NasAccessPoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NasAccessPointState, opts?: pulumi.CustomResourceOptions): NasAccessPoint {
        return new NasAccessPoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/nasAccessPoint:NasAccessPoint';

    /**
     * Returns true if the given object is an instance of NasAccessPoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NasAccessPoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NasAccessPoint.__pulumiType;
    }

    public readonly accessGroup!: pulumi.Output<string>;
    public /*out*/ readonly accessPointId!: pulumi.Output<string>;
    public readonly accessPointName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly enabledRam!: pulumi.Output<boolean | undefined>;
    public readonly fileSystemId!: pulumi.Output<string>;
    public readonly posixUser!: pulumi.Output<outputs.NasAccessPointPosixUser | undefined>;
    public readonly rootPath!: pulumi.Output<string>;
    public readonly rootPathPermission!: pulumi.Output<outputs.NasAccessPointRootPathPermission | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.NasAccessPointTimeouts | undefined>;
    public readonly vpcId!: pulumi.Output<string>;
    public readonly vswitchId!: pulumi.Output<string>;

    /**
     * Create a NasAccessPoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NasAccessPointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NasAccessPointArgs | NasAccessPointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NasAccessPointState | undefined;
            resourceInputs["accessGroup"] = state ? state.accessGroup : undefined;
            resourceInputs["accessPointId"] = state ? state.accessPointId : undefined;
            resourceInputs["accessPointName"] = state ? state.accessPointName : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["enabledRam"] = state ? state.enabledRam : undefined;
            resourceInputs["fileSystemId"] = state ? state.fileSystemId : undefined;
            resourceInputs["posixUser"] = state ? state.posixUser : undefined;
            resourceInputs["rootPath"] = state ? state.rootPath : undefined;
            resourceInputs["rootPathPermission"] = state ? state.rootPathPermission : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
        } else {
            const args = argsOrState as NasAccessPointArgs | undefined;
            if ((!args || args.accessGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessGroup'");
            }
            if ((!args || args.fileSystemId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystemId'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            if ((!args || args.vswitchId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vswitchId'");
            }
            resourceInputs["accessGroup"] = args ? args.accessGroup : undefined;
            resourceInputs["accessPointName"] = args ? args.accessPointName : undefined;
            resourceInputs["enabledRam"] = args ? args.enabledRam : undefined;
            resourceInputs["fileSystemId"] = args ? args.fileSystemId : undefined;
            resourceInputs["posixUser"] = args ? args.posixUser : undefined;
            resourceInputs["rootPath"] = args ? args.rootPath : undefined;
            resourceInputs["rootPathPermission"] = args ? args.rootPathPermission : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["accessPointId"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NasAccessPoint.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NasAccessPoint resources.
 */
export interface NasAccessPointState {
    accessGroup?: pulumi.Input<string>;
    accessPointId?: pulumi.Input<string>;
    accessPointName?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    enabledRam?: pulumi.Input<boolean>;
    fileSystemId?: pulumi.Input<string>;
    posixUser?: pulumi.Input<inputs.NasAccessPointPosixUser>;
    rootPath?: pulumi.Input<string>;
    rootPathPermission?: pulumi.Input<inputs.NasAccessPointRootPathPermission>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NasAccessPointTimeouts>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NasAccessPoint resource.
 */
export interface NasAccessPointArgs {
    accessGroup: pulumi.Input<string>;
    accessPointName?: pulumi.Input<string>;
    enabledRam?: pulumi.Input<boolean>;
    fileSystemId: pulumi.Input<string>;
    posixUser?: pulumi.Input<inputs.NasAccessPointPosixUser>;
    rootPath?: pulumi.Input<string>;
    rootPathPermission?: pulumi.Input<inputs.NasAccessPointRootPathPermission>;
    timeouts?: pulumi.Input<inputs.NasAccessPointTimeouts>;
    vpcId: pulumi.Input<string>;
    vswitchId: pulumi.Input<string>;
}
