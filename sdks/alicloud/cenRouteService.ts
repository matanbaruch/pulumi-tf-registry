// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CenRouteService extends pulumi.CustomResource {
    /**
     * Get an existing CenRouteService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CenRouteServiceState, opts?: pulumi.CustomResourceOptions): CenRouteService {
        return new CenRouteService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/cenRouteService:CenRouteService';

    /**
     * Returns true if the given object is an instance of CenRouteService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CenRouteService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CenRouteService.__pulumiType;
    }

    public readonly accessRegionId!: pulumi.Output<string>;
    public readonly cenId!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly host!: pulumi.Output<string>;
    public readonly hostRegionId!: pulumi.Output<string>;
    public readonly hostVpcId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CenRouteServiceTimeouts | undefined>;

    /**
     * Create a CenRouteService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CenRouteServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CenRouteServiceArgs | CenRouteServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CenRouteServiceState | undefined;
            resourceInputs["accessRegionId"] = state ? state.accessRegionId : undefined;
            resourceInputs["cenId"] = state ? state.cenId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["hostRegionId"] = state ? state.hostRegionId : undefined;
            resourceInputs["hostVpcId"] = state ? state.hostVpcId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as CenRouteServiceArgs | undefined;
            if ((!args || args.accessRegionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessRegionId'");
            }
            if ((!args || args.cenId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cenId'");
            }
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if ((!args || args.hostRegionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostRegionId'");
            }
            if ((!args || args.hostVpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostVpcId'");
            }
            resourceInputs["accessRegionId"] = args ? args.accessRegionId : undefined;
            resourceInputs["cenId"] = args ? args.cenId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["hostRegionId"] = args ? args.hostRegionId : undefined;
            resourceInputs["hostVpcId"] = args ? args.hostVpcId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CenRouteService.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CenRouteService resources.
 */
export interface CenRouteServiceState {
    accessRegionId?: pulumi.Input<string>;
    cenId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    hostRegionId?: pulumi.Input<string>;
    hostVpcId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CenRouteServiceTimeouts>;
}

/**
 * The set of arguments for constructing a CenRouteService resource.
 */
export interface CenRouteServiceArgs {
    accessRegionId: pulumi.Input<string>;
    cenId: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    host: pulumi.Input<string>;
    hostRegionId: pulumi.Input<string>;
    hostVpcId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CenRouteServiceTimeouts>;
}
