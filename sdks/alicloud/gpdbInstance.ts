// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GpdbInstance extends pulumi.CustomResource {
    /**
     * Get an existing GpdbInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GpdbInstanceState, opts?: pulumi.CustomResourceOptions): GpdbInstance {
        return new GpdbInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/gpdbInstance:GpdbInstance';

    /**
     * Returns true if the given object is an instance of GpdbInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GpdbInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GpdbInstance.__pulumiType;
    }

    /**
     * @deprecated Deprecated
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    public /*out*/ readonly connectionString!: pulumi.Output<string>;
    public readonly createSampleData!: pulumi.Output<boolean>;
    public readonly dbInstanceCategory!: pulumi.Output<string>;
    public readonly dbInstanceClass!: pulumi.Output<string | undefined>;
    public readonly dbInstanceMode!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly encryptionKey!: pulumi.Output<string | undefined>;
    public readonly encryptionType!: pulumi.Output<string | undefined>;
    public readonly engine!: pulumi.Output<string>;
    public readonly engineVersion!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly instanceChargeType!: pulumi.Output<string>;
    public readonly instanceGroupCount!: pulumi.Output<number | undefined>;
    public readonly instanceNetworkType!: pulumi.Output<string>;
    public readonly instanceSpec!: pulumi.Output<string | undefined>;
    public readonly ipWhitelists!: pulumi.Output<outputs.GpdbInstanceIpWhitelist[] | undefined>;
    public readonly maintainEndTime!: pulumi.Output<string>;
    public readonly maintainStartTime!: pulumi.Output<string>;
    public readonly masterCu!: pulumi.Output<number>;
    /**
     * @deprecated Deprecated
     */
    public readonly masterNodeNum!: pulumi.Output<number | undefined>;
    public readonly paymentType!: pulumi.Output<string>;
    public readonly period!: pulumi.Output<string | undefined>;
    public /*out*/ readonly port!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly privateIpAddress!: pulumi.Output<string | undefined>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly resourceManagementMode!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly securityIpLists!: pulumi.Output<string[] | undefined>;
    public readonly segNodeNum!: pulumi.Output<number>;
    public readonly segStorageType!: pulumi.Output<string | undefined>;
    public readonly sslEnabled!: pulumi.Output<number>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly storageSize!: pulumi.Output<number>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.GpdbInstanceTimeouts | undefined>;
    public readonly usedTime!: pulumi.Output<string | undefined>;
    public readonly vectorConfigurationStatus!: pulumi.Output<string>;
    public readonly vpcId!: pulumi.Output<string>;
    public readonly vswitchId!: pulumi.Output<string>;
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a GpdbInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GpdbInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GpdbInstanceArgs | GpdbInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GpdbInstanceState | undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["connectionString"] = state ? state.connectionString : undefined;
            resourceInputs["createSampleData"] = state ? state.createSampleData : undefined;
            resourceInputs["dbInstanceCategory"] = state ? state.dbInstanceCategory : undefined;
            resourceInputs["dbInstanceClass"] = state ? state.dbInstanceClass : undefined;
            resourceInputs["dbInstanceMode"] = state ? state.dbInstanceMode : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["encryptionKey"] = state ? state.encryptionKey : undefined;
            resourceInputs["encryptionType"] = state ? state.encryptionType : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["instanceChargeType"] = state ? state.instanceChargeType : undefined;
            resourceInputs["instanceGroupCount"] = state ? state.instanceGroupCount : undefined;
            resourceInputs["instanceNetworkType"] = state ? state.instanceNetworkType : undefined;
            resourceInputs["instanceSpec"] = state ? state.instanceSpec : undefined;
            resourceInputs["ipWhitelists"] = state ? state.ipWhitelists : undefined;
            resourceInputs["maintainEndTime"] = state ? state.maintainEndTime : undefined;
            resourceInputs["maintainStartTime"] = state ? state.maintainStartTime : undefined;
            resourceInputs["masterCu"] = state ? state.masterCu : undefined;
            resourceInputs["masterNodeNum"] = state ? state.masterNodeNum : undefined;
            resourceInputs["paymentType"] = state ? state.paymentType : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["privateIpAddress"] = state ? state.privateIpAddress : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["resourceManagementMode"] = state ? state.resourceManagementMode : undefined;
            resourceInputs["securityIpLists"] = state ? state.securityIpLists : undefined;
            resourceInputs["segNodeNum"] = state ? state.segNodeNum : undefined;
            resourceInputs["segStorageType"] = state ? state.segStorageType : undefined;
            resourceInputs["sslEnabled"] = state ? state.sslEnabled : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storageSize"] = state ? state.storageSize : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["usedTime"] = state ? state.usedTime : undefined;
            resourceInputs["vectorConfigurationStatus"] = state ? state.vectorConfigurationStatus : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as GpdbInstanceArgs | undefined;
            if ((!args || args.dbInstanceMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbInstanceMode'");
            }
            if ((!args || args.engine === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engine'");
            }
            if ((!args || args.engineVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engineVersion'");
            }
            if ((!args || args.vswitchId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vswitchId'");
            }
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["createSampleData"] = args ? args.createSampleData : undefined;
            resourceInputs["dbInstanceCategory"] = args ? args.dbInstanceCategory : undefined;
            resourceInputs["dbInstanceClass"] = args ? args.dbInstanceClass : undefined;
            resourceInputs["dbInstanceMode"] = args ? args.dbInstanceMode : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["encryptionKey"] = args ? args.encryptionKey : undefined;
            resourceInputs["encryptionType"] = args ? args.encryptionType : undefined;
            resourceInputs["engine"] = args ? args.engine : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["instanceChargeType"] = args ? args.instanceChargeType : undefined;
            resourceInputs["instanceGroupCount"] = args ? args.instanceGroupCount : undefined;
            resourceInputs["instanceNetworkType"] = args ? args.instanceNetworkType : undefined;
            resourceInputs["instanceSpec"] = args ? args.instanceSpec : undefined;
            resourceInputs["ipWhitelists"] = args ? args.ipWhitelists : undefined;
            resourceInputs["maintainEndTime"] = args ? args.maintainEndTime : undefined;
            resourceInputs["maintainStartTime"] = args ? args.maintainStartTime : undefined;
            resourceInputs["masterCu"] = args ? args.masterCu : undefined;
            resourceInputs["masterNodeNum"] = args ? args.masterNodeNum : undefined;
            resourceInputs["paymentType"] = args ? args.paymentType : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["privateIpAddress"] = args ? args.privateIpAddress : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["resourceManagementMode"] = args ? args.resourceManagementMode : undefined;
            resourceInputs["securityIpLists"] = args ? args.securityIpLists : undefined;
            resourceInputs["segNodeNum"] = args ? args.segNodeNum : undefined;
            resourceInputs["segStorageType"] = args ? args.segStorageType : undefined;
            resourceInputs["sslEnabled"] = args ? args.sslEnabled : undefined;
            resourceInputs["storageSize"] = args ? args.storageSize : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["usedTime"] = args ? args.usedTime : undefined;
            resourceInputs["vectorConfigurationStatus"] = args ? args.vectorConfigurationStatus : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["connectionString"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GpdbInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GpdbInstance resources.
 */
export interface GpdbInstanceState {
    /**
     * @deprecated Deprecated
     */
    availabilityZone?: pulumi.Input<string>;
    connectionString?: pulumi.Input<string>;
    createSampleData?: pulumi.Input<boolean>;
    dbInstanceCategory?: pulumi.Input<string>;
    dbInstanceClass?: pulumi.Input<string>;
    dbInstanceMode?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    encryptionKey?: pulumi.Input<string>;
    encryptionType?: pulumi.Input<string>;
    engine?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    instanceChargeType?: pulumi.Input<string>;
    instanceGroupCount?: pulumi.Input<number>;
    instanceNetworkType?: pulumi.Input<string>;
    instanceSpec?: pulumi.Input<string>;
    ipWhitelists?: pulumi.Input<pulumi.Input<inputs.GpdbInstanceIpWhitelist>[]>;
    maintainEndTime?: pulumi.Input<string>;
    maintainStartTime?: pulumi.Input<string>;
    masterCu?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    masterNodeNum?: pulumi.Input<number>;
    paymentType?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    privateIpAddress?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    resourceManagementMode?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    securityIpLists?: pulumi.Input<pulumi.Input<string>[]>;
    segNodeNum?: pulumi.Input<number>;
    segStorageType?: pulumi.Input<string>;
    sslEnabled?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    storageSize?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.GpdbInstanceTimeouts>;
    usedTime?: pulumi.Input<string>;
    vectorConfigurationStatus?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GpdbInstance resource.
 */
export interface GpdbInstanceArgs {
    /**
     * @deprecated Deprecated
     */
    availabilityZone?: pulumi.Input<string>;
    createSampleData?: pulumi.Input<boolean>;
    dbInstanceCategory?: pulumi.Input<string>;
    dbInstanceClass?: pulumi.Input<string>;
    dbInstanceMode: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    encryptionKey?: pulumi.Input<string>;
    encryptionType?: pulumi.Input<string>;
    engine: pulumi.Input<string>;
    engineVersion: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    instanceChargeType?: pulumi.Input<string>;
    instanceGroupCount?: pulumi.Input<number>;
    instanceNetworkType?: pulumi.Input<string>;
    instanceSpec?: pulumi.Input<string>;
    ipWhitelists?: pulumi.Input<pulumi.Input<inputs.GpdbInstanceIpWhitelist>[]>;
    maintainEndTime?: pulumi.Input<string>;
    maintainStartTime?: pulumi.Input<string>;
    masterCu?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    masterNodeNum?: pulumi.Input<number>;
    paymentType?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    privateIpAddress?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    resourceManagementMode?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    securityIpLists?: pulumi.Input<pulumi.Input<string>[]>;
    segNodeNum?: pulumi.Input<number>;
    segStorageType?: pulumi.Input<string>;
    sslEnabled?: pulumi.Input<number>;
    storageSize?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.GpdbInstanceTimeouts>;
    usedTime?: pulumi.Input<string>;
    vectorConfigurationStatus?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
    vswitchId: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}
