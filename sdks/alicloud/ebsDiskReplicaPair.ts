// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EbsDiskReplicaPair extends pulumi.CustomResource {
    /**
     * Get an existing EbsDiskReplicaPair resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EbsDiskReplicaPairState, opts?: pulumi.CustomResourceOptions): EbsDiskReplicaPair {
        return new EbsDiskReplicaPair(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/ebsDiskReplicaPair:EbsDiskReplicaPair';

    /**
     * Returns true if the given object is an instance of EbsDiskReplicaPair.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EbsDiskReplicaPair {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EbsDiskReplicaPair.__pulumiType;
    }

    public readonly bandwidth!: pulumi.Output<string>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly destinationDiskId!: pulumi.Output<string>;
    public readonly destinationRegionId!: pulumi.Output<string>;
    public readonly destinationZoneId!: pulumi.Output<string>;
    public readonly diskId!: pulumi.Output<string>;
    public readonly pairName!: pulumi.Output<string | undefined>;
    public readonly paymentType!: pulumi.Output<string | undefined>;
    public readonly period!: pulumi.Output<string | undefined>;
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    public readonly replicaPairId!: pulumi.Output<string>;
    public /*out*/ readonly resourceGroupId!: pulumi.Output<string>;
    public readonly rpo!: pulumi.Output<string>;
    public readonly sourceZoneId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.EbsDiskReplicaPairTimeouts | undefined>;

    /**
     * Create a EbsDiskReplicaPair resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EbsDiskReplicaPairArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EbsDiskReplicaPairArgs | EbsDiskReplicaPairState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EbsDiskReplicaPairState | undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationDiskId"] = state ? state.destinationDiskId : undefined;
            resourceInputs["destinationRegionId"] = state ? state.destinationRegionId : undefined;
            resourceInputs["destinationZoneId"] = state ? state.destinationZoneId : undefined;
            resourceInputs["diskId"] = state ? state.diskId : undefined;
            resourceInputs["pairName"] = state ? state.pairName : undefined;
            resourceInputs["paymentType"] = state ? state.paymentType : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["replicaPairId"] = state ? state.replicaPairId : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["rpo"] = state ? state.rpo : undefined;
            resourceInputs["sourceZoneId"] = state ? state.sourceZoneId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as EbsDiskReplicaPairArgs | undefined;
            if ((!args || args.destinationDiskId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationDiskId'");
            }
            if ((!args || args.destinationRegionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationRegionId'");
            }
            if ((!args || args.destinationZoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationZoneId'");
            }
            if ((!args || args.diskId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskId'");
            }
            if ((!args || args.sourceZoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceZoneId'");
            }
            resourceInputs["bandwidth"] = args ? args.bandwidth : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationDiskId"] = args ? args.destinationDiskId : undefined;
            resourceInputs["destinationRegionId"] = args ? args.destinationRegionId : undefined;
            resourceInputs["destinationZoneId"] = args ? args.destinationZoneId : undefined;
            resourceInputs["diskId"] = args ? args.diskId : undefined;
            resourceInputs["pairName"] = args ? args.pairName : undefined;
            resourceInputs["paymentType"] = args ? args.paymentType : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["replicaPairId"] = args ? args.replicaPairId : undefined;
            resourceInputs["rpo"] = args ? args.rpo : undefined;
            resourceInputs["sourceZoneId"] = args ? args.sourceZoneId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["resourceGroupId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EbsDiskReplicaPair.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EbsDiskReplicaPair resources.
 */
export interface EbsDiskReplicaPairState {
    bandwidth?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    destinationDiskId?: pulumi.Input<string>;
    destinationRegionId?: pulumi.Input<string>;
    destinationZoneId?: pulumi.Input<string>;
    diskId?: pulumi.Input<string>;
    pairName?: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
    periodUnit?: pulumi.Input<string>;
    replicaPairId?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    rpo?: pulumi.Input<string>;
    sourceZoneId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EbsDiskReplicaPairTimeouts>;
}

/**
 * The set of arguments for constructing a EbsDiskReplicaPair resource.
 */
export interface EbsDiskReplicaPairArgs {
    bandwidth?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    destinationDiskId: pulumi.Input<string>;
    destinationRegionId: pulumi.Input<string>;
    destinationZoneId: pulumi.Input<string>;
    diskId: pulumi.Input<string>;
    pairName?: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
    periodUnit?: pulumi.Input<string>;
    replicaPairId?: pulumi.Input<string>;
    rpo?: pulumi.Input<string>;
    sourceZoneId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EbsDiskReplicaPairTimeouts>;
}
