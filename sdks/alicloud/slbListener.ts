// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SlbListener extends pulumi.CustomResource {
    /**
     * Get an existing SlbListener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbListenerState, opts?: pulumi.CustomResourceOptions): SlbListener {
        return new SlbListener(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/slbListener:SlbListener';

    /**
     * Returns true if the given object is an instance of SlbListener.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbListener {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbListener.__pulumiType;
    }

    public readonly aclId!: pulumi.Output<string | undefined>;
    public readonly aclStatus!: pulumi.Output<string | undefined>;
    public readonly aclType!: pulumi.Output<string | undefined>;
    public readonly backendPort!: pulumi.Output<number | undefined>;
    public readonly bandwidth!: pulumi.Output<number>;
    public readonly caCertificateId!: pulumi.Output<string | undefined>;
    public readonly cookie!: pulumi.Output<string | undefined>;
    public readonly cookieTimeout!: pulumi.Output<number | undefined>;
    public readonly deleteProtectionValidation!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly enableHttp2!: pulumi.Output<string | undefined>;
    public readonly establishedTimeout!: pulumi.Output<number | undefined>;
    public readonly forwardPort!: pulumi.Output<number | undefined>;
    public readonly frontendPort!: pulumi.Output<number>;
    public readonly gzip!: pulumi.Output<boolean | undefined>;
    public readonly healthCheck!: pulumi.Output<string | undefined>;
    public readonly healthCheckConnectPort!: pulumi.Output<number>;
    public readonly healthCheckDomain!: pulumi.Output<string | undefined>;
    public readonly healthCheckHttpCode!: pulumi.Output<string>;
    public readonly healthCheckInterval!: pulumi.Output<number | undefined>;
    public readonly healthCheckMethod!: pulumi.Output<string>;
    public readonly healthCheckTimeout!: pulumi.Output<number | undefined>;
    public readonly healthCheckType!: pulumi.Output<string | undefined>;
    public readonly healthCheckUri!: pulumi.Output<string | undefined>;
    public readonly healthyThreshold!: pulumi.Output<number | undefined>;
    public readonly idleTimeout!: pulumi.Output<number | undefined>;
    public readonly instancePort!: pulumi.Output<number | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly lbPort!: pulumi.Output<number | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly lbProtocol!: pulumi.Output<string | undefined>;
    public readonly listenerForward!: pulumi.Output<string>;
    public readonly loadBalancerId!: pulumi.Output<string>;
    public readonly masterSlaveServerGroupId!: pulumi.Output<string | undefined>;
    public readonly persistenceTimeout!: pulumi.Output<number | undefined>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly proxyProtocolV2Enabled!: pulumi.Output<boolean>;
    public readonly requestTimeout!: pulumi.Output<number | undefined>;
    public readonly scheduler!: pulumi.Output<string | undefined>;
    public readonly serverCertificateId!: pulumi.Output<string>;
    public readonly serverGroupId!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly sslCertificateId!: pulumi.Output<string>;
    public readonly stickySession!: pulumi.Output<string | undefined>;
    public readonly stickySessionType!: pulumi.Output<string | undefined>;
    public readonly tlsCipherPolicy!: pulumi.Output<string | undefined>;
    public readonly unhealthyThreshold!: pulumi.Output<number | undefined>;
    public readonly xForwardedFor!: pulumi.Output<outputs.SlbListenerXForwardedFor | undefined>;

    /**
     * Create a SlbListener resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SlbListenerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbListenerArgs | SlbListenerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbListenerState | undefined;
            resourceInputs["aclId"] = state ? state.aclId : undefined;
            resourceInputs["aclStatus"] = state ? state.aclStatus : undefined;
            resourceInputs["aclType"] = state ? state.aclType : undefined;
            resourceInputs["backendPort"] = state ? state.backendPort : undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["caCertificateId"] = state ? state.caCertificateId : undefined;
            resourceInputs["cookie"] = state ? state.cookie : undefined;
            resourceInputs["cookieTimeout"] = state ? state.cookieTimeout : undefined;
            resourceInputs["deleteProtectionValidation"] = state ? state.deleteProtectionValidation : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enableHttp2"] = state ? state.enableHttp2 : undefined;
            resourceInputs["establishedTimeout"] = state ? state.establishedTimeout : undefined;
            resourceInputs["forwardPort"] = state ? state.forwardPort : undefined;
            resourceInputs["frontendPort"] = state ? state.frontendPort : undefined;
            resourceInputs["gzip"] = state ? state.gzip : undefined;
            resourceInputs["healthCheck"] = state ? state.healthCheck : undefined;
            resourceInputs["healthCheckConnectPort"] = state ? state.healthCheckConnectPort : undefined;
            resourceInputs["healthCheckDomain"] = state ? state.healthCheckDomain : undefined;
            resourceInputs["healthCheckHttpCode"] = state ? state.healthCheckHttpCode : undefined;
            resourceInputs["healthCheckInterval"] = state ? state.healthCheckInterval : undefined;
            resourceInputs["healthCheckMethod"] = state ? state.healthCheckMethod : undefined;
            resourceInputs["healthCheckTimeout"] = state ? state.healthCheckTimeout : undefined;
            resourceInputs["healthCheckType"] = state ? state.healthCheckType : undefined;
            resourceInputs["healthCheckUri"] = state ? state.healthCheckUri : undefined;
            resourceInputs["healthyThreshold"] = state ? state.healthyThreshold : undefined;
            resourceInputs["idleTimeout"] = state ? state.idleTimeout : undefined;
            resourceInputs["instancePort"] = state ? state.instancePort : undefined;
            resourceInputs["lbPort"] = state ? state.lbPort : undefined;
            resourceInputs["lbProtocol"] = state ? state.lbProtocol : undefined;
            resourceInputs["listenerForward"] = state ? state.listenerForward : undefined;
            resourceInputs["loadBalancerId"] = state ? state.loadBalancerId : undefined;
            resourceInputs["masterSlaveServerGroupId"] = state ? state.masterSlaveServerGroupId : undefined;
            resourceInputs["persistenceTimeout"] = state ? state.persistenceTimeout : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["proxyProtocolV2Enabled"] = state ? state.proxyProtocolV2Enabled : undefined;
            resourceInputs["requestTimeout"] = state ? state.requestTimeout : undefined;
            resourceInputs["scheduler"] = state ? state.scheduler : undefined;
            resourceInputs["serverCertificateId"] = state ? state.serverCertificateId : undefined;
            resourceInputs["serverGroupId"] = state ? state.serverGroupId : undefined;
            resourceInputs["sslCertificateId"] = state ? state.sslCertificateId : undefined;
            resourceInputs["stickySession"] = state ? state.stickySession : undefined;
            resourceInputs["stickySessionType"] = state ? state.stickySessionType : undefined;
            resourceInputs["tlsCipherPolicy"] = state ? state.tlsCipherPolicy : undefined;
            resourceInputs["unhealthyThreshold"] = state ? state.unhealthyThreshold : undefined;
            resourceInputs["xForwardedFor"] = state ? state.xForwardedFor : undefined;
        } else {
            const args = argsOrState as SlbListenerArgs | undefined;
            if ((!args || args.frontendPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frontendPort'");
            }
            if ((!args || args.loadBalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerId'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["aclId"] = args ? args.aclId : undefined;
            resourceInputs["aclStatus"] = args ? args.aclStatus : undefined;
            resourceInputs["aclType"] = args ? args.aclType : undefined;
            resourceInputs["backendPort"] = args ? args.backendPort : undefined;
            resourceInputs["bandwidth"] = args ? args.bandwidth : undefined;
            resourceInputs["caCertificateId"] = args ? args.caCertificateId : undefined;
            resourceInputs["cookie"] = args ? args.cookie : undefined;
            resourceInputs["cookieTimeout"] = args ? args.cookieTimeout : undefined;
            resourceInputs["deleteProtectionValidation"] = args ? args.deleteProtectionValidation : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enableHttp2"] = args ? args.enableHttp2 : undefined;
            resourceInputs["establishedTimeout"] = args ? args.establishedTimeout : undefined;
            resourceInputs["forwardPort"] = args ? args.forwardPort : undefined;
            resourceInputs["frontendPort"] = args ? args.frontendPort : undefined;
            resourceInputs["gzip"] = args ? args.gzip : undefined;
            resourceInputs["healthCheck"] = args ? args.healthCheck : undefined;
            resourceInputs["healthCheckConnectPort"] = args ? args.healthCheckConnectPort : undefined;
            resourceInputs["healthCheckDomain"] = args ? args.healthCheckDomain : undefined;
            resourceInputs["healthCheckHttpCode"] = args ? args.healthCheckHttpCode : undefined;
            resourceInputs["healthCheckInterval"] = args ? args.healthCheckInterval : undefined;
            resourceInputs["healthCheckMethod"] = args ? args.healthCheckMethod : undefined;
            resourceInputs["healthCheckTimeout"] = args ? args.healthCheckTimeout : undefined;
            resourceInputs["healthCheckType"] = args ? args.healthCheckType : undefined;
            resourceInputs["healthCheckUri"] = args ? args.healthCheckUri : undefined;
            resourceInputs["healthyThreshold"] = args ? args.healthyThreshold : undefined;
            resourceInputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            resourceInputs["instancePort"] = args ? args.instancePort : undefined;
            resourceInputs["lbPort"] = args ? args.lbPort : undefined;
            resourceInputs["lbProtocol"] = args ? args.lbProtocol : undefined;
            resourceInputs["listenerForward"] = args ? args.listenerForward : undefined;
            resourceInputs["loadBalancerId"] = args ? args.loadBalancerId : undefined;
            resourceInputs["masterSlaveServerGroupId"] = args ? args.masterSlaveServerGroupId : undefined;
            resourceInputs["persistenceTimeout"] = args ? args.persistenceTimeout : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["proxyProtocolV2Enabled"] = args ? args.proxyProtocolV2Enabled : undefined;
            resourceInputs["requestTimeout"] = args ? args.requestTimeout : undefined;
            resourceInputs["scheduler"] = args ? args.scheduler : undefined;
            resourceInputs["serverCertificateId"] = args ? args.serverCertificateId : undefined;
            resourceInputs["serverGroupId"] = args ? args.serverGroupId : undefined;
            resourceInputs["sslCertificateId"] = args ? args.sslCertificateId : undefined;
            resourceInputs["stickySession"] = args ? args.stickySession : undefined;
            resourceInputs["stickySessionType"] = args ? args.stickySessionType : undefined;
            resourceInputs["tlsCipherPolicy"] = args ? args.tlsCipherPolicy : undefined;
            resourceInputs["unhealthyThreshold"] = args ? args.unhealthyThreshold : undefined;
            resourceInputs["xForwardedFor"] = args ? args.xForwardedFor : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbListener.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbListener resources.
 */
export interface SlbListenerState {
    aclId?: pulumi.Input<string>;
    aclStatus?: pulumi.Input<string>;
    aclType?: pulumi.Input<string>;
    backendPort?: pulumi.Input<number>;
    bandwidth?: pulumi.Input<number>;
    caCertificateId?: pulumi.Input<string>;
    cookie?: pulumi.Input<string>;
    cookieTimeout?: pulumi.Input<number>;
    deleteProtectionValidation?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    enableHttp2?: pulumi.Input<string>;
    establishedTimeout?: pulumi.Input<number>;
    forwardPort?: pulumi.Input<number>;
    frontendPort?: pulumi.Input<number>;
    gzip?: pulumi.Input<boolean>;
    healthCheck?: pulumi.Input<string>;
    healthCheckConnectPort?: pulumi.Input<number>;
    healthCheckDomain?: pulumi.Input<string>;
    healthCheckHttpCode?: pulumi.Input<string>;
    healthCheckInterval?: pulumi.Input<number>;
    healthCheckMethod?: pulumi.Input<string>;
    healthCheckTimeout?: pulumi.Input<number>;
    healthCheckType?: pulumi.Input<string>;
    healthCheckUri?: pulumi.Input<string>;
    healthyThreshold?: pulumi.Input<number>;
    idleTimeout?: pulumi.Input<number>;
    instancePort?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    lbPort?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    lbProtocol?: pulumi.Input<string>;
    listenerForward?: pulumi.Input<string>;
    loadBalancerId?: pulumi.Input<string>;
    masterSlaveServerGroupId?: pulumi.Input<string>;
    persistenceTimeout?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    proxyProtocolV2Enabled?: pulumi.Input<boolean>;
    requestTimeout?: pulumi.Input<number>;
    scheduler?: pulumi.Input<string>;
    serverCertificateId?: pulumi.Input<string>;
    serverGroupId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    sslCertificateId?: pulumi.Input<string>;
    stickySession?: pulumi.Input<string>;
    stickySessionType?: pulumi.Input<string>;
    tlsCipherPolicy?: pulumi.Input<string>;
    unhealthyThreshold?: pulumi.Input<number>;
    xForwardedFor?: pulumi.Input<inputs.SlbListenerXForwardedFor>;
}

/**
 * The set of arguments for constructing a SlbListener resource.
 */
export interface SlbListenerArgs {
    aclId?: pulumi.Input<string>;
    aclStatus?: pulumi.Input<string>;
    aclType?: pulumi.Input<string>;
    backendPort?: pulumi.Input<number>;
    bandwidth?: pulumi.Input<number>;
    caCertificateId?: pulumi.Input<string>;
    cookie?: pulumi.Input<string>;
    cookieTimeout?: pulumi.Input<number>;
    deleteProtectionValidation?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    enableHttp2?: pulumi.Input<string>;
    establishedTimeout?: pulumi.Input<number>;
    forwardPort?: pulumi.Input<number>;
    frontendPort: pulumi.Input<number>;
    gzip?: pulumi.Input<boolean>;
    healthCheck?: pulumi.Input<string>;
    healthCheckConnectPort?: pulumi.Input<number>;
    healthCheckDomain?: pulumi.Input<string>;
    healthCheckHttpCode?: pulumi.Input<string>;
    healthCheckInterval?: pulumi.Input<number>;
    healthCheckMethod?: pulumi.Input<string>;
    healthCheckTimeout?: pulumi.Input<number>;
    healthCheckType?: pulumi.Input<string>;
    healthCheckUri?: pulumi.Input<string>;
    healthyThreshold?: pulumi.Input<number>;
    idleTimeout?: pulumi.Input<number>;
    instancePort?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    lbPort?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    lbProtocol?: pulumi.Input<string>;
    listenerForward?: pulumi.Input<string>;
    loadBalancerId: pulumi.Input<string>;
    masterSlaveServerGroupId?: pulumi.Input<string>;
    persistenceTimeout?: pulumi.Input<number>;
    protocol: pulumi.Input<string>;
    proxyProtocolV2Enabled?: pulumi.Input<boolean>;
    requestTimeout?: pulumi.Input<number>;
    scheduler?: pulumi.Input<string>;
    serverCertificateId?: pulumi.Input<string>;
    serverGroupId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    sslCertificateId?: pulumi.Input<string>;
    stickySession?: pulumi.Input<string>;
    stickySessionType?: pulumi.Input<string>;
    tlsCipherPolicy?: pulumi.Input<string>;
    unhealthyThreshold?: pulumi.Input<number>;
    xForwardedFor?: pulumi.Input<inputs.SlbListenerXForwardedFor>;
}
