// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AlikafkaTopic extends pulumi.CustomResource {
    /**
     * Get an existing AlikafkaTopic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlikafkaTopicState, opts?: pulumi.CustomResourceOptions): AlikafkaTopic {
        return new AlikafkaTopic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/alikafkaTopic:AlikafkaTopic';

    /**
     * Returns true if the given object is an instance of AlikafkaTopic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlikafkaTopic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlikafkaTopic.__pulumiType;
    }

    public readonly compactTopic!: pulumi.Output<boolean | undefined>;
    public readonly instanceId!: pulumi.Output<string>;
    public readonly localTopic!: pulumi.Output<boolean | undefined>;
    public readonly partitionNum!: pulumi.Output<number | undefined>;
    public readonly remark!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.AlikafkaTopicTimeouts | undefined>;
    public readonly topic!: pulumi.Output<string>;

    /**
     * Create a AlikafkaTopic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlikafkaTopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlikafkaTopicArgs | AlikafkaTopicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlikafkaTopicState | undefined;
            resourceInputs["compactTopic"] = state ? state.compactTopic : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["localTopic"] = state ? state.localTopic : undefined;
            resourceInputs["partitionNum"] = state ? state.partitionNum : undefined;
            resourceInputs["remark"] = state ? state.remark : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["topic"] = state ? state.topic : undefined;
        } else {
            const args = argsOrState as AlikafkaTopicArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.remark === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remark'");
            }
            if ((!args || args.topic === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topic'");
            }
            resourceInputs["compactTopic"] = args ? args.compactTopic : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["localTopic"] = args ? args.localTopic : undefined;
            resourceInputs["partitionNum"] = args ? args.partitionNum : undefined;
            resourceInputs["remark"] = args ? args.remark : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["topic"] = args ? args.topic : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlikafkaTopic.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AlikafkaTopic resources.
 */
export interface AlikafkaTopicState {
    compactTopic?: pulumi.Input<boolean>;
    instanceId?: pulumi.Input<string>;
    localTopic?: pulumi.Input<boolean>;
    partitionNum?: pulumi.Input<number>;
    remark?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.AlikafkaTopicTimeouts>;
    topic?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AlikafkaTopic resource.
 */
export interface AlikafkaTopicArgs {
    compactTopic?: pulumi.Input<boolean>;
    instanceId: pulumi.Input<string>;
    localTopic?: pulumi.Input<boolean>;
    partitionNum?: pulumi.Input<number>;
    remark: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.AlikafkaTopicTimeouts>;
    topic: pulumi.Input<string>;
}
