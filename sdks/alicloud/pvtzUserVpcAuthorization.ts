// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PvtzUserVpcAuthorization extends pulumi.CustomResource {
    /**
     * Get an existing PvtzUserVpcAuthorization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PvtzUserVpcAuthorizationState, opts?: pulumi.CustomResourceOptions): PvtzUserVpcAuthorization {
        return new PvtzUserVpcAuthorization(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/pvtzUserVpcAuthorization:PvtzUserVpcAuthorization';

    /**
     * Returns true if the given object is an instance of PvtzUserVpcAuthorization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PvtzUserVpcAuthorization {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PvtzUserVpcAuthorization.__pulumiType;
    }

    public readonly authChannel!: pulumi.Output<string | undefined>;
    public readonly authType!: pulumi.Output<string | undefined>;
    public readonly authorizedUserId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.PvtzUserVpcAuthorizationTimeouts | undefined>;

    /**
     * Create a PvtzUserVpcAuthorization resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PvtzUserVpcAuthorizationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PvtzUserVpcAuthorizationArgs | PvtzUserVpcAuthorizationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PvtzUserVpcAuthorizationState | undefined;
            resourceInputs["authChannel"] = state ? state.authChannel : undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["authorizedUserId"] = state ? state.authorizedUserId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as PvtzUserVpcAuthorizationArgs | undefined;
            if ((!args || args.authorizedUserId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizedUserId'");
            }
            resourceInputs["authChannel"] = args ? args.authChannel : undefined;
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["authorizedUserId"] = args ? args.authorizedUserId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PvtzUserVpcAuthorization.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PvtzUserVpcAuthorization resources.
 */
export interface PvtzUserVpcAuthorizationState {
    authChannel?: pulumi.Input<string>;
    authType?: pulumi.Input<string>;
    authorizedUserId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.PvtzUserVpcAuthorizationTimeouts>;
}

/**
 * The set of arguments for constructing a PvtzUserVpcAuthorization resource.
 */
export interface PvtzUserVpcAuthorizationArgs {
    authChannel?: pulumi.Input<string>;
    authType?: pulumi.Input<string>;
    authorizedUserId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.PvtzUserVpcAuthorizationTimeouts>;
}
