// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LogEtl extends pulumi.CustomResource {
    /**
     * Get an existing LogEtl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogEtlState, opts?: pulumi.CustomResourceOptions): LogEtl {
        return new LogEtl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/logEtl:LogEtl';

    /**
     * Returns true if the given object is an instance of LogEtl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogEtl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogEtl.__pulumiType;
    }

    public readonly accessKeyId!: pulumi.Output<string | undefined>;
    public readonly accessKeySecret!: pulumi.Output<string | undefined>;
    public readonly createTime!: pulumi.Output<number>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly etlName!: pulumi.Output<string>;
    public readonly etlSinks!: pulumi.Output<outputs.LogEtlEtlSink[]>;
    public readonly etlType!: pulumi.Output<string | undefined>;
    public readonly fromTime!: pulumi.Output<number | undefined>;
    public readonly kmsEncryptedAccessKeyId!: pulumi.Output<string | undefined>;
    public readonly kmsEncryptedAccessKeySecret!: pulumi.Output<string | undefined>;
    public readonly kmsEncryptionAccessKeyIdContext!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly kmsEncryptionAccessKeySecretContext!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly lastModifiedTime!: pulumi.Output<number>;
    public readonly logstore!: pulumi.Output<string>;
    public readonly parameters!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly project!: pulumi.Output<string>;
    public readonly roleArn!: pulumi.Output<string | undefined>;
    public readonly schedule!: pulumi.Output<string | undefined>;
    public readonly script!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.LogEtlTimeouts | undefined>;
    public readonly toTime!: pulumi.Output<number | undefined>;
    public readonly version!: pulumi.Output<number | undefined>;

    /**
     * Create a LogEtl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogEtlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogEtlArgs | LogEtlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogEtlState | undefined;
            resourceInputs["accessKeyId"] = state ? state.accessKeyId : undefined;
            resourceInputs["accessKeySecret"] = state ? state.accessKeySecret : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["etlName"] = state ? state.etlName : undefined;
            resourceInputs["etlSinks"] = state ? state.etlSinks : undefined;
            resourceInputs["etlType"] = state ? state.etlType : undefined;
            resourceInputs["fromTime"] = state ? state.fromTime : undefined;
            resourceInputs["kmsEncryptedAccessKeyId"] = state ? state.kmsEncryptedAccessKeyId : undefined;
            resourceInputs["kmsEncryptedAccessKeySecret"] = state ? state.kmsEncryptedAccessKeySecret : undefined;
            resourceInputs["kmsEncryptionAccessKeyIdContext"] = state ? state.kmsEncryptionAccessKeyIdContext : undefined;
            resourceInputs["kmsEncryptionAccessKeySecretContext"] = state ? state.kmsEncryptionAccessKeySecretContext : undefined;
            resourceInputs["lastModifiedTime"] = state ? state.lastModifiedTime : undefined;
            resourceInputs["logstore"] = state ? state.logstore : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["script"] = state ? state.script : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["toTime"] = state ? state.toTime : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as LogEtlArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.etlName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'etlName'");
            }
            if ((!args || args.etlSinks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'etlSinks'");
            }
            if ((!args || args.logstore === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logstore'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.script === undefined) && !opts.urn) {
                throw new Error("Missing required property 'script'");
            }
            resourceInputs["accessKeyId"] = args?.accessKeyId ? pulumi.secret(args.accessKeyId) : undefined;
            resourceInputs["accessKeySecret"] = args?.accessKeySecret ? pulumi.secret(args.accessKeySecret) : undefined;
            resourceInputs["createTime"] = args ? args.createTime : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["etlName"] = args ? args.etlName : undefined;
            resourceInputs["etlSinks"] = args ? args.etlSinks : undefined;
            resourceInputs["etlType"] = args ? args.etlType : undefined;
            resourceInputs["fromTime"] = args ? args.fromTime : undefined;
            resourceInputs["kmsEncryptedAccessKeyId"] = args ? args.kmsEncryptedAccessKeyId : undefined;
            resourceInputs["kmsEncryptedAccessKeySecret"] = args ? args.kmsEncryptedAccessKeySecret : undefined;
            resourceInputs["kmsEncryptionAccessKeyIdContext"] = args ? args.kmsEncryptionAccessKeyIdContext : undefined;
            resourceInputs["kmsEncryptionAccessKeySecretContext"] = args ? args.kmsEncryptionAccessKeySecretContext : undefined;
            resourceInputs["lastModifiedTime"] = args ? args.lastModifiedTime : undefined;
            resourceInputs["logstore"] = args ? args.logstore : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["script"] = args ? args.script : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["toTime"] = args ? args.toTime : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessKeyId", "accessKeySecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LogEtl.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LogEtl resources.
 */
export interface LogEtlState {
    accessKeyId?: pulumi.Input<string>;
    accessKeySecret?: pulumi.Input<string>;
    createTime?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    etlName?: pulumi.Input<string>;
    etlSinks?: pulumi.Input<pulumi.Input<inputs.LogEtlEtlSink>[]>;
    etlType?: pulumi.Input<string>;
    fromTime?: pulumi.Input<number>;
    kmsEncryptedAccessKeyId?: pulumi.Input<string>;
    kmsEncryptedAccessKeySecret?: pulumi.Input<string>;
    kmsEncryptionAccessKeyIdContext?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    kmsEncryptionAccessKeySecretContext?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    lastModifiedTime?: pulumi.Input<number>;
    logstore?: pulumi.Input<string>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    project?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    schedule?: pulumi.Input<string>;
    script?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LogEtlTimeouts>;
    toTime?: pulumi.Input<number>;
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a LogEtl resource.
 */
export interface LogEtlArgs {
    accessKeyId?: pulumi.Input<string>;
    accessKeySecret?: pulumi.Input<string>;
    createTime?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    displayName: pulumi.Input<string>;
    etlName: pulumi.Input<string>;
    etlSinks: pulumi.Input<pulumi.Input<inputs.LogEtlEtlSink>[]>;
    etlType?: pulumi.Input<string>;
    fromTime?: pulumi.Input<number>;
    kmsEncryptedAccessKeyId?: pulumi.Input<string>;
    kmsEncryptedAccessKeySecret?: pulumi.Input<string>;
    kmsEncryptionAccessKeyIdContext?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    kmsEncryptionAccessKeySecretContext?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    lastModifiedTime?: pulumi.Input<number>;
    logstore: pulumi.Input<string>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    project: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    schedule?: pulumi.Input<string>;
    script: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LogEtlTimeouts>;
    toTime?: pulumi.Input<number>;
    version?: pulumi.Input<number>;
}
