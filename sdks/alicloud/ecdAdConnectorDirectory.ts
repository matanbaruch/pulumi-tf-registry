// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EcdAdConnectorDirectory extends pulumi.CustomResource {
    /**
     * Get an existing EcdAdConnectorDirectory resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcdAdConnectorDirectoryState, opts?: pulumi.CustomResourceOptions): EcdAdConnectorDirectory {
        return new EcdAdConnectorDirectory(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/ecdAdConnectorDirectory:EcdAdConnectorDirectory';

    /**
     * Returns true if the given object is an instance of EcdAdConnectorDirectory.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcdAdConnectorDirectory {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcdAdConnectorDirectory.__pulumiType;
    }

    public readonly desktopAccessType!: pulumi.Output<string>;
    public readonly directoryName!: pulumi.Output<string>;
    public readonly dnsAddresses!: pulumi.Output<string[]>;
    public readonly domainName!: pulumi.Output<string>;
    public readonly domainPassword!: pulumi.Output<string>;
    public readonly domainUserName!: pulumi.Output<string>;
    public readonly enableAdminAccess!: pulumi.Output<boolean>;
    public readonly mfaEnabled!: pulumi.Output<boolean>;
    public readonly specification!: pulumi.Output<number | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly subDomainDnsAddresses!: pulumi.Output<string[] | undefined>;
    public readonly subDomainName!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.EcdAdConnectorDirectoryTimeouts | undefined>;
    public readonly vswitchIds!: pulumi.Output<string[]>;

    /**
     * Create a EcdAdConnectorDirectory resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EcdAdConnectorDirectoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcdAdConnectorDirectoryArgs | EcdAdConnectorDirectoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcdAdConnectorDirectoryState | undefined;
            resourceInputs["desktopAccessType"] = state ? state.desktopAccessType : undefined;
            resourceInputs["directoryName"] = state ? state.directoryName : undefined;
            resourceInputs["dnsAddresses"] = state ? state.dnsAddresses : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["domainPassword"] = state ? state.domainPassword : undefined;
            resourceInputs["domainUserName"] = state ? state.domainUserName : undefined;
            resourceInputs["enableAdminAccess"] = state ? state.enableAdminAccess : undefined;
            resourceInputs["mfaEnabled"] = state ? state.mfaEnabled : undefined;
            resourceInputs["specification"] = state ? state.specification : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subDomainDnsAddresses"] = state ? state.subDomainDnsAddresses : undefined;
            resourceInputs["subDomainName"] = state ? state.subDomainName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vswitchIds"] = state ? state.vswitchIds : undefined;
        } else {
            const args = argsOrState as EcdAdConnectorDirectoryArgs | undefined;
            if ((!args || args.directoryName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'directoryName'");
            }
            if ((!args || args.dnsAddresses === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnsAddresses'");
            }
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if ((!args || args.domainPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainPassword'");
            }
            if ((!args || args.domainUserName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainUserName'");
            }
            if ((!args || args.vswitchIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vswitchIds'");
            }
            resourceInputs["desktopAccessType"] = args ? args.desktopAccessType : undefined;
            resourceInputs["directoryName"] = args ? args.directoryName : undefined;
            resourceInputs["dnsAddresses"] = args ? args.dnsAddresses : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["domainPassword"] = args?.domainPassword ? pulumi.secret(args.domainPassword) : undefined;
            resourceInputs["domainUserName"] = args ? args.domainUserName : undefined;
            resourceInputs["enableAdminAccess"] = args ? args.enableAdminAccess : undefined;
            resourceInputs["mfaEnabled"] = args ? args.mfaEnabled : undefined;
            resourceInputs["specification"] = args ? args.specification : undefined;
            resourceInputs["subDomainDnsAddresses"] = args ? args.subDomainDnsAddresses : undefined;
            resourceInputs["subDomainName"] = args ? args.subDomainName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vswitchIds"] = args ? args.vswitchIds : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["domainPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(EcdAdConnectorDirectory.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EcdAdConnectorDirectory resources.
 */
export interface EcdAdConnectorDirectoryState {
    desktopAccessType?: pulumi.Input<string>;
    directoryName?: pulumi.Input<string>;
    dnsAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    domainName?: pulumi.Input<string>;
    domainPassword?: pulumi.Input<string>;
    domainUserName?: pulumi.Input<string>;
    enableAdminAccess?: pulumi.Input<boolean>;
    mfaEnabled?: pulumi.Input<boolean>;
    specification?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    subDomainDnsAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    subDomainName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EcdAdConnectorDirectoryTimeouts>;
    vswitchIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a EcdAdConnectorDirectory resource.
 */
export interface EcdAdConnectorDirectoryArgs {
    desktopAccessType?: pulumi.Input<string>;
    directoryName: pulumi.Input<string>;
    dnsAddresses: pulumi.Input<pulumi.Input<string>[]>;
    domainName: pulumi.Input<string>;
    domainPassword: pulumi.Input<string>;
    domainUserName: pulumi.Input<string>;
    enableAdminAccess?: pulumi.Input<boolean>;
    mfaEnabled?: pulumi.Input<boolean>;
    specification?: pulumi.Input<number>;
    subDomainDnsAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    subDomainName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EcdAdConnectorDirectoryTimeouts>;
    vswitchIds: pulumi.Input<pulumi.Input<string>[]>;
}
