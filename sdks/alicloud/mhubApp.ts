// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MhubApp extends pulumi.CustomResource {
    /**
     * Get an existing MhubApp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MhubAppState, opts?: pulumi.CustomResourceOptions): MhubApp {
        return new MhubApp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/mhubApp:MhubApp';

    /**
     * Returns true if the given object is an instance of MhubApp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MhubApp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MhubApp.__pulumiType;
    }

    public readonly appName!: pulumi.Output<string>;
    public readonly bundleId!: pulumi.Output<string | undefined>;
    public readonly encodedIcon!: pulumi.Output<string | undefined>;
    public readonly industryId!: pulumi.Output<string>;
    public readonly packageName!: pulumi.Output<string | undefined>;
    public readonly productId!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a MhubApp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MhubAppArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MhubAppArgs | MhubAppState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MhubAppState | undefined;
            resourceInputs["appName"] = state ? state.appName : undefined;
            resourceInputs["bundleId"] = state ? state.bundleId : undefined;
            resourceInputs["encodedIcon"] = state ? state.encodedIcon : undefined;
            resourceInputs["industryId"] = state ? state.industryId : undefined;
            resourceInputs["packageName"] = state ? state.packageName : undefined;
            resourceInputs["productId"] = state ? state.productId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as MhubAppArgs | undefined;
            if ((!args || args.appName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appName'");
            }
            if ((!args || args.productId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'productId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["appName"] = args ? args.appName : undefined;
            resourceInputs["bundleId"] = args ? args.bundleId : undefined;
            resourceInputs["encodedIcon"] = args ? args.encodedIcon : undefined;
            resourceInputs["industryId"] = args ? args.industryId : undefined;
            resourceInputs["packageName"] = args ? args.packageName : undefined;
            resourceInputs["productId"] = args ? args.productId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MhubApp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MhubApp resources.
 */
export interface MhubAppState {
    appName?: pulumi.Input<string>;
    bundleId?: pulumi.Input<string>;
    encodedIcon?: pulumi.Input<string>;
    industryId?: pulumi.Input<string>;
    packageName?: pulumi.Input<string>;
    productId?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MhubApp resource.
 */
export interface MhubAppArgs {
    appName: pulumi.Input<string>;
    bundleId?: pulumi.Input<string>;
    encodedIcon?: pulumi.Input<string>;
    industryId?: pulumi.Input<string>;
    packageName?: pulumi.Input<string>;
    productId: pulumi.Input<string>;
    type: pulumi.Input<string>;
}
