// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CmsMonitorGroup extends pulumi.CustomResource {
    /**
     * Get an existing CmsMonitorGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CmsMonitorGroupState, opts?: pulumi.CustomResourceOptions): CmsMonitorGroup {
        return new CmsMonitorGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/cmsMonitorGroup:CmsMonitorGroup';

    /**
     * Returns true if the given object is an instance of CmsMonitorGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CmsMonitorGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CmsMonitorGroup.__pulumiType;
    }

    public readonly contactGroups!: pulumi.Output<string[] | undefined>;
    public readonly monitorGroupName!: pulumi.Output<string>;
    public readonly resourceGroupId!: pulumi.Output<string | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a CmsMonitorGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CmsMonitorGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CmsMonitorGroupArgs | CmsMonitorGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CmsMonitorGroupState | undefined;
            resourceInputs["contactGroups"] = state ? state.contactGroups : undefined;
            resourceInputs["monitorGroupName"] = state ? state.monitorGroupName : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as CmsMonitorGroupArgs | undefined;
            resourceInputs["contactGroups"] = args ? args.contactGroups : undefined;
            resourceInputs["monitorGroupName"] = args ? args.monitorGroupName : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CmsMonitorGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CmsMonitorGroup resources.
 */
export interface CmsMonitorGroupState {
    contactGroups?: pulumi.Input<pulumi.Input<string>[]>;
    monitorGroupName?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a CmsMonitorGroup resource.
 */
export interface CmsMonitorGroupArgs {
    contactGroups?: pulumi.Input<pulumi.Input<string>[]>;
    monitorGroupName?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
