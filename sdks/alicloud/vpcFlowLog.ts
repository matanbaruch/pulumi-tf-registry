// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpcFlowLog extends pulumi.CustomResource {
    /**
     * Get an existing VpcFlowLog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcFlowLogState, opts?: pulumi.CustomResourceOptions): VpcFlowLog {
        return new VpcFlowLog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/vpcFlowLog:VpcFlowLog';

    /**
     * Returns true if the given object is an instance of VpcFlowLog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcFlowLog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcFlowLog.__pulumiType;
    }

    public readonly aggregationInterval!: pulumi.Output<string>;
    public /*out*/ readonly businessStatus!: pulumi.Output<string>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly flowLogId!: pulumi.Output<string>;
    public readonly flowLogName!: pulumi.Output<string | undefined>;
    public readonly logStoreName!: pulumi.Output<string>;
    public readonly projectName!: pulumi.Output<string>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly resourceId!: pulumi.Output<string>;
    public readonly resourceType!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.VpcFlowLogTimeouts | undefined>;
    public readonly trafficPaths!: pulumi.Output<string[]>;
    public readonly trafficType!: pulumi.Output<string>;

    /**
     * Create a VpcFlowLog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcFlowLogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcFlowLogArgs | VpcFlowLogState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcFlowLogState | undefined;
            resourceInputs["aggregationInterval"] = state ? state.aggregationInterval : undefined;
            resourceInputs["businessStatus"] = state ? state.businessStatus : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["flowLogId"] = state ? state.flowLogId : undefined;
            resourceInputs["flowLogName"] = state ? state.flowLogName : undefined;
            resourceInputs["logStoreName"] = state ? state.logStoreName : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["trafficPaths"] = state ? state.trafficPaths : undefined;
            resourceInputs["trafficType"] = state ? state.trafficType : undefined;
        } else {
            const args = argsOrState as VpcFlowLogArgs | undefined;
            if ((!args || args.logStoreName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logStoreName'");
            }
            if ((!args || args.projectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectName'");
            }
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            if ((!args || args.trafficType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trafficType'");
            }
            resourceInputs["aggregationInterval"] = args ? args.aggregationInterval : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["flowLogName"] = args ? args.flowLogName : undefined;
            resourceInputs["logStoreName"] = args ? args.logStoreName : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["trafficPaths"] = args ? args.trafficPaths : undefined;
            resourceInputs["trafficType"] = args ? args.trafficType : undefined;
            resourceInputs["businessStatus"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["flowLogId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcFlowLog.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpcFlowLog resources.
 */
export interface VpcFlowLogState {
    aggregationInterval?: pulumi.Input<string>;
    businessStatus?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    flowLogId?: pulumi.Input<string>;
    flowLogName?: pulumi.Input<string>;
    logStoreName?: pulumi.Input<string>;
    projectName?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    resourceId?: pulumi.Input<string>;
    resourceType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VpcFlowLogTimeouts>;
    trafficPaths?: pulumi.Input<pulumi.Input<string>[]>;
    trafficType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpcFlowLog resource.
 */
export interface VpcFlowLogArgs {
    aggregationInterval?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    flowLogName?: pulumi.Input<string>;
    logStoreName: pulumi.Input<string>;
    projectName: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    resourceId: pulumi.Input<string>;
    resourceType: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VpcFlowLogTimeouts>;
    trafficPaths?: pulumi.Input<pulumi.Input<string>[]>;
    trafficType: pulumi.Input<string>;
}
