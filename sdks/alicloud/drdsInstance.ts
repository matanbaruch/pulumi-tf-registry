// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DrdsInstance extends pulumi.CustomResource {
    /**
     * Get an existing DrdsInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DrdsInstanceState, opts?: pulumi.CustomResourceOptions): DrdsInstance {
        return new DrdsInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/drdsInstance:DrdsInstance';

    /**
     * Returns true if the given object is an instance of DrdsInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DrdsInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DrdsInstance.__pulumiType;
    }

    public /*out*/ readonly connectionString!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly instanceChargeType!: pulumi.Output<string | undefined>;
    public readonly instanceSeries!: pulumi.Output<string>;
    public readonly mysqlVersion!: pulumi.Output<number>;
    public /*out*/ readonly port!: pulumi.Output<string>;
    public readonly specification!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DrdsInstanceTimeouts | undefined>;
    public readonly vpcId!: pulumi.Output<string>;
    public readonly vswitchId!: pulumi.Output<string>;
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a DrdsInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DrdsInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DrdsInstanceArgs | DrdsInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DrdsInstanceState | undefined;
            resourceInputs["connectionString"] = state ? state.connectionString : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["instanceChargeType"] = state ? state.instanceChargeType : undefined;
            resourceInputs["instanceSeries"] = state ? state.instanceSeries : undefined;
            resourceInputs["mysqlVersion"] = state ? state.mysqlVersion : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["specification"] = state ? state.specification : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as DrdsInstanceArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.instanceSeries === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceSeries'");
            }
            if ((!args || args.specification === undefined) && !opts.urn) {
                throw new Error("Missing required property 'specification'");
            }
            if ((!args || args.vswitchId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vswitchId'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["instanceChargeType"] = args ? args.instanceChargeType : undefined;
            resourceInputs["instanceSeries"] = args ? args.instanceSeries : undefined;
            resourceInputs["mysqlVersion"] = args ? args.mysqlVersion : undefined;
            resourceInputs["specification"] = args ? args.specification : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["connectionString"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DrdsInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DrdsInstance resources.
 */
export interface DrdsInstanceState {
    connectionString?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    instanceChargeType?: pulumi.Input<string>;
    instanceSeries?: pulumi.Input<string>;
    mysqlVersion?: pulumi.Input<number>;
    port?: pulumi.Input<string>;
    specification?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DrdsInstanceTimeouts>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DrdsInstance resource.
 */
export interface DrdsInstanceArgs {
    description: pulumi.Input<string>;
    instanceChargeType?: pulumi.Input<string>;
    instanceSeries: pulumi.Input<string>;
    mysqlVersion?: pulumi.Input<number>;
    specification: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DrdsInstanceTimeouts>;
    vpcId?: pulumi.Input<string>;
    vswitchId: pulumi.Input<string>;
    zoneId: pulumi.Input<string>;
}
