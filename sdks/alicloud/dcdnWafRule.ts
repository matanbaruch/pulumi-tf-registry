// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DcdnWafRule extends pulumi.CustomResource {
    /**
     * Get an existing DcdnWafRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DcdnWafRuleState, opts?: pulumi.CustomResourceOptions): DcdnWafRule {
        return new DcdnWafRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/dcdnWafRule:DcdnWafRule';

    /**
     * Returns true if the given object is an instance of DcdnWafRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DcdnWafRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DcdnWafRule.__pulumiType;
    }

    public readonly action!: pulumi.Output<string | undefined>;
    public readonly ccStatus!: pulumi.Output<string>;
    public readonly cnRegionList!: pulumi.Output<string | undefined>;
    public readonly conditions!: pulumi.Output<outputs.DcdnWafRuleCondition[] | undefined>;
    public /*out*/ readonly defenseScene!: pulumi.Output<string>;
    public readonly effect!: pulumi.Output<string | undefined>;
    public /*out*/ readonly gmtModified!: pulumi.Output<string>;
    public readonly otherRegionList!: pulumi.Output<string | undefined>;
    public readonly policyId!: pulumi.Output<string>;
    public readonly rateLimit!: pulumi.Output<outputs.DcdnWafRuleRateLimit | undefined>;
    public readonly regularRules!: pulumi.Output<string[] | undefined>;
    public readonly regularTypes!: pulumi.Output<string[] | undefined>;
    public readonly remoteAddrs!: pulumi.Output<string[] | undefined>;
    public readonly ruleName!: pulumi.Output<string>;
    public readonly scenes!: pulumi.Output<string[] | undefined>;
    public readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DcdnWafRuleTimeouts | undefined>;
    public readonly wafGroupIds!: pulumi.Output<string | undefined>;

    /**
     * Create a DcdnWafRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DcdnWafRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DcdnWafRuleArgs | DcdnWafRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DcdnWafRuleState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["ccStatus"] = state ? state.ccStatus : undefined;
            resourceInputs["cnRegionList"] = state ? state.cnRegionList : undefined;
            resourceInputs["conditions"] = state ? state.conditions : undefined;
            resourceInputs["defenseScene"] = state ? state.defenseScene : undefined;
            resourceInputs["effect"] = state ? state.effect : undefined;
            resourceInputs["gmtModified"] = state ? state.gmtModified : undefined;
            resourceInputs["otherRegionList"] = state ? state.otherRegionList : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["rateLimit"] = state ? state.rateLimit : undefined;
            resourceInputs["regularRules"] = state ? state.regularRules : undefined;
            resourceInputs["regularTypes"] = state ? state.regularTypes : undefined;
            resourceInputs["remoteAddrs"] = state ? state.remoteAddrs : undefined;
            resourceInputs["ruleName"] = state ? state.ruleName : undefined;
            resourceInputs["scenes"] = state ? state.scenes : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["wafGroupIds"] = state ? state.wafGroupIds : undefined;
        } else {
            const args = argsOrState as DcdnWafRuleArgs | undefined;
            if ((!args || args.policyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            if ((!args || args.ruleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleName'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["ccStatus"] = args ? args.ccStatus : undefined;
            resourceInputs["cnRegionList"] = args ? args.cnRegionList : undefined;
            resourceInputs["conditions"] = args ? args.conditions : undefined;
            resourceInputs["effect"] = args ? args.effect : undefined;
            resourceInputs["otherRegionList"] = args ? args.otherRegionList : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["rateLimit"] = args ? args.rateLimit : undefined;
            resourceInputs["regularRules"] = args ? args.regularRules : undefined;
            resourceInputs["regularTypes"] = args ? args.regularTypes : undefined;
            resourceInputs["remoteAddrs"] = args ? args.remoteAddrs : undefined;
            resourceInputs["ruleName"] = args ? args.ruleName : undefined;
            resourceInputs["scenes"] = args ? args.scenes : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["wafGroupIds"] = args ? args.wafGroupIds : undefined;
            resourceInputs["defenseScene"] = undefined /*out*/;
            resourceInputs["gmtModified"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DcdnWafRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DcdnWafRule resources.
 */
export interface DcdnWafRuleState {
    action?: pulumi.Input<string>;
    ccStatus?: pulumi.Input<string>;
    cnRegionList?: pulumi.Input<string>;
    conditions?: pulumi.Input<pulumi.Input<inputs.DcdnWafRuleCondition>[]>;
    defenseScene?: pulumi.Input<string>;
    effect?: pulumi.Input<string>;
    gmtModified?: pulumi.Input<string>;
    otherRegionList?: pulumi.Input<string>;
    policyId?: pulumi.Input<string>;
    rateLimit?: pulumi.Input<inputs.DcdnWafRuleRateLimit>;
    regularRules?: pulumi.Input<pulumi.Input<string>[]>;
    regularTypes?: pulumi.Input<pulumi.Input<string>[]>;
    remoteAddrs?: pulumi.Input<pulumi.Input<string>[]>;
    ruleName?: pulumi.Input<string>;
    scenes?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DcdnWafRuleTimeouts>;
    wafGroupIds?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DcdnWafRule resource.
 */
export interface DcdnWafRuleArgs {
    action?: pulumi.Input<string>;
    ccStatus?: pulumi.Input<string>;
    cnRegionList?: pulumi.Input<string>;
    conditions?: pulumi.Input<pulumi.Input<inputs.DcdnWafRuleCondition>[]>;
    effect?: pulumi.Input<string>;
    otherRegionList?: pulumi.Input<string>;
    policyId: pulumi.Input<string>;
    rateLimit?: pulumi.Input<inputs.DcdnWafRuleRateLimit>;
    regularRules?: pulumi.Input<pulumi.Input<string>[]>;
    regularTypes?: pulumi.Input<pulumi.Input<string>[]>;
    remoteAddrs?: pulumi.Input<pulumi.Input<string>[]>;
    ruleName: pulumi.Input<string>;
    scenes?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DcdnWafRuleTimeouts>;
    wafGroupIds?: pulumi.Input<string>;
}
