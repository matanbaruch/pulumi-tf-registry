// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ExpressConnectVbrPconnAssociation extends pulumi.CustomResource {
    /**
     * Get an existing ExpressConnectVbrPconnAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExpressConnectVbrPconnAssociationState, opts?: pulumi.CustomResourceOptions): ExpressConnectVbrPconnAssociation {
        return new ExpressConnectVbrPconnAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/expressConnectVbrPconnAssociation:ExpressConnectVbrPconnAssociation';

    /**
     * Returns true if the given object is an instance of ExpressConnectVbrPconnAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExpressConnectVbrPconnAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExpressConnectVbrPconnAssociation.__pulumiType;
    }

    public /*out*/ readonly circuitCode!: pulumi.Output<string>;
    public readonly enableIpv6!: pulumi.Output<boolean>;
    public readonly localGatewayIp!: pulumi.Output<string | undefined>;
    public readonly localIpv6GatewayIp!: pulumi.Output<string | undefined>;
    public readonly peerGatewayIp!: pulumi.Output<string | undefined>;
    public readonly peerIpv6GatewayIp!: pulumi.Output<string | undefined>;
    public readonly peeringIpv6SubnetMask!: pulumi.Output<string | undefined>;
    public readonly peeringSubnetMask!: pulumi.Output<string | undefined>;
    public readonly physicalConnectionId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ExpressConnectVbrPconnAssociationTimeouts | undefined>;
    public readonly vbrId!: pulumi.Output<string>;
    public readonly vlanId!: pulumi.Output<number>;

    /**
     * Create a ExpressConnectVbrPconnAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExpressConnectVbrPconnAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExpressConnectVbrPconnAssociationArgs | ExpressConnectVbrPconnAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExpressConnectVbrPconnAssociationState | undefined;
            resourceInputs["circuitCode"] = state ? state.circuitCode : undefined;
            resourceInputs["enableIpv6"] = state ? state.enableIpv6 : undefined;
            resourceInputs["localGatewayIp"] = state ? state.localGatewayIp : undefined;
            resourceInputs["localIpv6GatewayIp"] = state ? state.localIpv6GatewayIp : undefined;
            resourceInputs["peerGatewayIp"] = state ? state.peerGatewayIp : undefined;
            resourceInputs["peerIpv6GatewayIp"] = state ? state.peerIpv6GatewayIp : undefined;
            resourceInputs["peeringIpv6SubnetMask"] = state ? state.peeringIpv6SubnetMask : undefined;
            resourceInputs["peeringSubnetMask"] = state ? state.peeringSubnetMask : undefined;
            resourceInputs["physicalConnectionId"] = state ? state.physicalConnectionId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vbrId"] = state ? state.vbrId : undefined;
            resourceInputs["vlanId"] = state ? state.vlanId : undefined;
        } else {
            const args = argsOrState as ExpressConnectVbrPconnAssociationArgs | undefined;
            if ((!args || args.physicalConnectionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'physicalConnectionId'");
            }
            if ((!args || args.vbrId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vbrId'");
            }
            if ((!args || args.vlanId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vlanId'");
            }
            resourceInputs["enableIpv6"] = args ? args.enableIpv6 : undefined;
            resourceInputs["localGatewayIp"] = args ? args.localGatewayIp : undefined;
            resourceInputs["localIpv6GatewayIp"] = args ? args.localIpv6GatewayIp : undefined;
            resourceInputs["peerGatewayIp"] = args ? args.peerGatewayIp : undefined;
            resourceInputs["peerIpv6GatewayIp"] = args ? args.peerIpv6GatewayIp : undefined;
            resourceInputs["peeringIpv6SubnetMask"] = args ? args.peeringIpv6SubnetMask : undefined;
            resourceInputs["peeringSubnetMask"] = args ? args.peeringSubnetMask : undefined;
            resourceInputs["physicalConnectionId"] = args ? args.physicalConnectionId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vbrId"] = args ? args.vbrId : undefined;
            resourceInputs["vlanId"] = args ? args.vlanId : undefined;
            resourceInputs["circuitCode"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExpressConnectVbrPconnAssociation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ExpressConnectVbrPconnAssociation resources.
 */
export interface ExpressConnectVbrPconnAssociationState {
    circuitCode?: pulumi.Input<string>;
    enableIpv6?: pulumi.Input<boolean>;
    localGatewayIp?: pulumi.Input<string>;
    localIpv6GatewayIp?: pulumi.Input<string>;
    peerGatewayIp?: pulumi.Input<string>;
    peerIpv6GatewayIp?: pulumi.Input<string>;
    peeringIpv6SubnetMask?: pulumi.Input<string>;
    peeringSubnetMask?: pulumi.Input<string>;
    physicalConnectionId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ExpressConnectVbrPconnAssociationTimeouts>;
    vbrId?: pulumi.Input<string>;
    vlanId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ExpressConnectVbrPconnAssociation resource.
 */
export interface ExpressConnectVbrPconnAssociationArgs {
    enableIpv6?: pulumi.Input<boolean>;
    localGatewayIp?: pulumi.Input<string>;
    localIpv6GatewayIp?: pulumi.Input<string>;
    peerGatewayIp?: pulumi.Input<string>;
    peerIpv6GatewayIp?: pulumi.Input<string>;
    peeringIpv6SubnetMask?: pulumi.Input<string>;
    peeringSubnetMask?: pulumi.Input<string>;
    physicalConnectionId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ExpressConnectVbrPconnAssociationTimeouts>;
    vbrId: pulumi.Input<string>;
    vlanId: pulumi.Input<number>;
}
