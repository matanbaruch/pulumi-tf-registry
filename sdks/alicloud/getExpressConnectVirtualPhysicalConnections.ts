// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getExpressConnectVirtualPhysicalConnections(args?: GetExpressConnectVirtualPhysicalConnectionsArgs, opts?: pulumi.InvokeOptions): Promise<GetExpressConnectVirtualPhysicalConnectionsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("alicloud:index/getExpressConnectVirtualPhysicalConnections:getExpressConnectVirtualPhysicalConnections", {
        "businessStatus": args.businessStatus,
        "id": args.id,
        "ids": args.ids,
        "isConfirmed": args.isConfirmed,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "parentPhysicalConnectionId": args.parentPhysicalConnectionId,
        "virtualPhysicalConnectionIds": args.virtualPhysicalConnectionIds,
        "virtualPhysicalConnectionStatus": args.virtualPhysicalConnectionStatus,
        "vlanIds": args.vlanIds,
        "vpconnAliUid": args.vpconnAliUid,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getExpressConnectVirtualPhysicalConnections.
 */
export interface GetExpressConnectVirtualPhysicalConnectionsArgs {
    businessStatus?: string;
    id?: string;
    ids?: string[];
    isConfirmed?: boolean;
    nameRegex?: string;
    outputFile?: string;
    parentPhysicalConnectionId?: string;
    virtualPhysicalConnectionIds?: string[];
    virtualPhysicalConnectionStatus?: string;
    vlanIds?: number[];
    vpconnAliUid?: string;
}

/**
 * A collection of values returned by getExpressConnectVirtualPhysicalConnections.
 */
export interface GetExpressConnectVirtualPhysicalConnectionsResult {
    readonly businessStatus?: string;
    readonly connections: outputs.GetExpressConnectVirtualPhysicalConnectionsConnection[];
    readonly id: string;
    readonly ids: string[];
    readonly isConfirmed?: boolean;
    readonly nameRegex?: string;
    readonly names: string[];
    readonly outputFile?: string;
    readonly parentPhysicalConnectionId?: string;
    readonly virtualPhysicalConnectionIds?: string[];
    readonly virtualPhysicalConnectionStatus?: string;
    readonly vlanIds?: number[];
    readonly vpconnAliUid?: string;
}
export function getExpressConnectVirtualPhysicalConnectionsOutput(args?: GetExpressConnectVirtualPhysicalConnectionsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetExpressConnectVirtualPhysicalConnectionsResult> {
    return pulumi.output(args).apply((a: any) => getExpressConnectVirtualPhysicalConnections(a, opts))
}

/**
 * A collection of arguments for invoking getExpressConnectVirtualPhysicalConnections.
 */
export interface GetExpressConnectVirtualPhysicalConnectionsOutputArgs {
    businessStatus?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    isConfirmed?: pulumi.Input<boolean>;
    nameRegex?: pulumi.Input<string>;
    outputFile?: pulumi.Input<string>;
    parentPhysicalConnectionId?: pulumi.Input<string>;
    virtualPhysicalConnectionIds?: pulumi.Input<pulumi.Input<string>[]>;
    virtualPhysicalConnectionStatus?: pulumi.Input<string>;
    vlanIds?: pulumi.Input<pulumi.Input<number>[]>;
    vpconnAliUid?: pulumi.Input<string>;
}
