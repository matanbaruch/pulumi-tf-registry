// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LogAlert extends pulumi.CustomResource {
    /**
     * Get an existing LogAlert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogAlertState, opts?: pulumi.CustomResourceOptions): LogAlert {
        return new LogAlert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/logAlert:LogAlert';

    /**
     * Returns true if the given object is an instance of LogAlert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogAlert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogAlert.__pulumiType;
    }

    public readonly alertDescription!: pulumi.Output<string | undefined>;
    public readonly alertDisplayname!: pulumi.Output<string>;
    public readonly alertName!: pulumi.Output<string>;
    public readonly annotations!: pulumi.Output<outputs.LogAlertAnnotation[] | undefined>;
    public readonly autoAnnotation!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly condition!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly dashboard!: pulumi.Output<string | undefined>;
    public readonly groupConfiguration!: pulumi.Output<outputs.LogAlertGroupConfiguration | undefined>;
    public readonly joinConfigurations!: pulumi.Output<outputs.LogAlertJoinConfiguration[] | undefined>;
    public readonly labels!: pulumi.Output<outputs.LogAlertLabel[] | undefined>;
    public readonly muteUntil!: pulumi.Output<number>;
    public readonly noDataFire!: pulumi.Output<boolean | undefined>;
    public readonly noDataSeverity!: pulumi.Output<number | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly notificationLists!: pulumi.Output<outputs.LogAlertNotificationList[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly notifyThreshold!: pulumi.Output<number | undefined>;
    public readonly policyConfiguration!: pulumi.Output<outputs.LogAlertPolicyConfiguration | undefined>;
    public readonly projectName!: pulumi.Output<string>;
    public readonly queryLists!: pulumi.Output<outputs.LogAlertQueryList[] | undefined>;
    public readonly schedule!: pulumi.Output<outputs.LogAlertSchedule | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly scheduleInterval!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly scheduleType!: pulumi.Output<string>;
    public readonly sendResolved!: pulumi.Output<boolean | undefined>;
    public readonly severityConfigurations!: pulumi.Output<outputs.LogAlertSeverityConfiguration[] | undefined>;
    public readonly templateConfiguration!: pulumi.Output<outputs.LogAlertTemplateConfiguration | undefined>;
    public readonly threshold!: pulumi.Output<number>;
    /**
     * @deprecated Deprecated
     */
    public readonly throttling!: pulumi.Output<string | undefined>;
    public readonly type!: pulumi.Output<string | undefined>;
    public readonly version!: pulumi.Output<string | undefined>;

    /**
     * Create a LogAlert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogAlertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogAlertArgs | LogAlertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogAlertState | undefined;
            resourceInputs["alertDescription"] = state ? state.alertDescription : undefined;
            resourceInputs["alertDisplayname"] = state ? state.alertDisplayname : undefined;
            resourceInputs["alertName"] = state ? state.alertName : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["autoAnnotation"] = state ? state.autoAnnotation : undefined;
            resourceInputs["condition"] = state ? state.condition : undefined;
            resourceInputs["dashboard"] = state ? state.dashboard : undefined;
            resourceInputs["groupConfiguration"] = state ? state.groupConfiguration : undefined;
            resourceInputs["joinConfigurations"] = state ? state.joinConfigurations : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["muteUntil"] = state ? state.muteUntil : undefined;
            resourceInputs["noDataFire"] = state ? state.noDataFire : undefined;
            resourceInputs["noDataSeverity"] = state ? state.noDataSeverity : undefined;
            resourceInputs["notificationLists"] = state ? state.notificationLists : undefined;
            resourceInputs["notifyThreshold"] = state ? state.notifyThreshold : undefined;
            resourceInputs["policyConfiguration"] = state ? state.policyConfiguration : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["queryLists"] = state ? state.queryLists : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["scheduleInterval"] = state ? state.scheduleInterval : undefined;
            resourceInputs["scheduleType"] = state ? state.scheduleType : undefined;
            resourceInputs["sendResolved"] = state ? state.sendResolved : undefined;
            resourceInputs["severityConfigurations"] = state ? state.severityConfigurations : undefined;
            resourceInputs["templateConfiguration"] = state ? state.templateConfiguration : undefined;
            resourceInputs["threshold"] = state ? state.threshold : undefined;
            resourceInputs["throttling"] = state ? state.throttling : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as LogAlertArgs | undefined;
            if ((!args || args.alertDisplayname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alertDisplayname'");
            }
            if ((!args || args.alertName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alertName'");
            }
            if ((!args || args.projectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectName'");
            }
            resourceInputs["alertDescription"] = args ? args.alertDescription : undefined;
            resourceInputs["alertDisplayname"] = args ? args.alertDisplayname : undefined;
            resourceInputs["alertName"] = args ? args.alertName : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["autoAnnotation"] = args ? args.autoAnnotation : undefined;
            resourceInputs["condition"] = args ? args.condition : undefined;
            resourceInputs["dashboard"] = args ? args.dashboard : undefined;
            resourceInputs["groupConfiguration"] = args ? args.groupConfiguration : undefined;
            resourceInputs["joinConfigurations"] = args ? args.joinConfigurations : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["muteUntil"] = args ? args.muteUntil : undefined;
            resourceInputs["noDataFire"] = args ? args.noDataFire : undefined;
            resourceInputs["noDataSeverity"] = args ? args.noDataSeverity : undefined;
            resourceInputs["notificationLists"] = args ? args.notificationLists : undefined;
            resourceInputs["notifyThreshold"] = args ? args.notifyThreshold : undefined;
            resourceInputs["policyConfiguration"] = args ? args.policyConfiguration : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["queryLists"] = args ? args.queryLists : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["scheduleInterval"] = args ? args.scheduleInterval : undefined;
            resourceInputs["scheduleType"] = args ? args.scheduleType : undefined;
            resourceInputs["sendResolved"] = args ? args.sendResolved : undefined;
            resourceInputs["severityConfigurations"] = args ? args.severityConfigurations : undefined;
            resourceInputs["templateConfiguration"] = args ? args.templateConfiguration : undefined;
            resourceInputs["threshold"] = args ? args.threshold : undefined;
            resourceInputs["throttling"] = args ? args.throttling : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogAlert.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LogAlert resources.
 */
export interface LogAlertState {
    alertDescription?: pulumi.Input<string>;
    alertDisplayname?: pulumi.Input<string>;
    alertName?: pulumi.Input<string>;
    annotations?: pulumi.Input<pulumi.Input<inputs.LogAlertAnnotation>[]>;
    autoAnnotation?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    condition?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    dashboard?: pulumi.Input<string>;
    groupConfiguration?: pulumi.Input<inputs.LogAlertGroupConfiguration>;
    joinConfigurations?: pulumi.Input<pulumi.Input<inputs.LogAlertJoinConfiguration>[]>;
    labels?: pulumi.Input<pulumi.Input<inputs.LogAlertLabel>[]>;
    muteUntil?: pulumi.Input<number>;
    noDataFire?: pulumi.Input<boolean>;
    noDataSeverity?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    notificationLists?: pulumi.Input<pulumi.Input<inputs.LogAlertNotificationList>[]>;
    /**
     * @deprecated Deprecated
     */
    notifyThreshold?: pulumi.Input<number>;
    policyConfiguration?: pulumi.Input<inputs.LogAlertPolicyConfiguration>;
    projectName?: pulumi.Input<string>;
    queryLists?: pulumi.Input<pulumi.Input<inputs.LogAlertQueryList>[]>;
    schedule?: pulumi.Input<inputs.LogAlertSchedule>;
    /**
     * @deprecated Deprecated
     */
    scheduleInterval?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    scheduleType?: pulumi.Input<string>;
    sendResolved?: pulumi.Input<boolean>;
    severityConfigurations?: pulumi.Input<pulumi.Input<inputs.LogAlertSeverityConfiguration>[]>;
    templateConfiguration?: pulumi.Input<inputs.LogAlertTemplateConfiguration>;
    threshold?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    throttling?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogAlert resource.
 */
export interface LogAlertArgs {
    alertDescription?: pulumi.Input<string>;
    alertDisplayname: pulumi.Input<string>;
    alertName: pulumi.Input<string>;
    annotations?: pulumi.Input<pulumi.Input<inputs.LogAlertAnnotation>[]>;
    autoAnnotation?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    condition?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    dashboard?: pulumi.Input<string>;
    groupConfiguration?: pulumi.Input<inputs.LogAlertGroupConfiguration>;
    joinConfigurations?: pulumi.Input<pulumi.Input<inputs.LogAlertJoinConfiguration>[]>;
    labels?: pulumi.Input<pulumi.Input<inputs.LogAlertLabel>[]>;
    muteUntil?: pulumi.Input<number>;
    noDataFire?: pulumi.Input<boolean>;
    noDataSeverity?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    notificationLists?: pulumi.Input<pulumi.Input<inputs.LogAlertNotificationList>[]>;
    /**
     * @deprecated Deprecated
     */
    notifyThreshold?: pulumi.Input<number>;
    policyConfiguration?: pulumi.Input<inputs.LogAlertPolicyConfiguration>;
    projectName: pulumi.Input<string>;
    queryLists?: pulumi.Input<pulumi.Input<inputs.LogAlertQueryList>[]>;
    schedule?: pulumi.Input<inputs.LogAlertSchedule>;
    /**
     * @deprecated Deprecated
     */
    scheduleInterval?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    scheduleType?: pulumi.Input<string>;
    sendResolved?: pulumi.Input<boolean>;
    severityConfigurations?: pulumi.Input<pulumi.Input<inputs.LogAlertSeverityConfiguration>[]>;
    templateConfiguration?: pulumi.Input<inputs.LogAlertTemplateConfiguration>;
    threshold?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    throttling?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}
