// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AckOneClusterArgs, AckOneClusterState } from "./ackOneCluster";
export type AckOneCluster = import("./ackOneCluster").AckOneCluster;
export const AckOneCluster: typeof import("./ackOneCluster").AckOneCluster = null as any;
utilities.lazyLoad(exports, ["AckOneCluster"], () => require("./ackOneCluster"));

export { ActiontrailArgs, ActiontrailState } from "./actiontrail";
export type Actiontrail = import("./actiontrail").Actiontrail;
export const Actiontrail: typeof import("./actiontrail").Actiontrail = null as any;
utilities.lazyLoad(exports, ["Actiontrail"], () => require("./actiontrail"));

export { ActiontrailGlobalEventsStorageRegionArgs, ActiontrailGlobalEventsStorageRegionState } from "./actiontrailGlobalEventsStorageRegion";
export type ActiontrailGlobalEventsStorageRegion = import("./actiontrailGlobalEventsStorageRegion").ActiontrailGlobalEventsStorageRegion;
export const ActiontrailGlobalEventsStorageRegion: typeof import("./actiontrailGlobalEventsStorageRegion").ActiontrailGlobalEventsStorageRegion = null as any;
utilities.lazyLoad(exports, ["ActiontrailGlobalEventsStorageRegion"], () => require("./actiontrailGlobalEventsStorageRegion"));

export { ActiontrailHistoryDeliveryJobArgs, ActiontrailHistoryDeliveryJobState } from "./actiontrailHistoryDeliveryJob";
export type ActiontrailHistoryDeliveryJob = import("./actiontrailHistoryDeliveryJob").ActiontrailHistoryDeliveryJob;
export const ActiontrailHistoryDeliveryJob: typeof import("./actiontrailHistoryDeliveryJob").ActiontrailHistoryDeliveryJob = null as any;
utilities.lazyLoad(exports, ["ActiontrailHistoryDeliveryJob"], () => require("./actiontrailHistoryDeliveryJob"));

export { ActiontrailTrailArgs, ActiontrailTrailState } from "./actiontrailTrail";
export type ActiontrailTrail = import("./actiontrailTrail").ActiontrailTrail;
export const ActiontrailTrail: typeof import("./actiontrailTrail").ActiontrailTrail = null as any;
utilities.lazyLoad(exports, ["ActiontrailTrail"], () => require("./actiontrailTrail"));

export { AdbAccountArgs, AdbAccountState } from "./adbAccount";
export type AdbAccount = import("./adbAccount").AdbAccount;
export const AdbAccount: typeof import("./adbAccount").AdbAccount = null as any;
utilities.lazyLoad(exports, ["AdbAccount"], () => require("./adbAccount"));

export { AdbBackupPolicyArgs, AdbBackupPolicyState } from "./adbBackupPolicy";
export type AdbBackupPolicy = import("./adbBackupPolicy").AdbBackupPolicy;
export const AdbBackupPolicy: typeof import("./adbBackupPolicy").AdbBackupPolicy = null as any;
utilities.lazyLoad(exports, ["AdbBackupPolicy"], () => require("./adbBackupPolicy"));

export { AdbClusterArgs, AdbClusterState } from "./adbCluster";
export type AdbCluster = import("./adbCluster").AdbCluster;
export const AdbCluster: typeof import("./adbCluster").AdbCluster = null as any;
utilities.lazyLoad(exports, ["AdbCluster"], () => require("./adbCluster"));

export { AdbConnectionArgs, AdbConnectionState } from "./adbConnection";
export type AdbConnection = import("./adbConnection").AdbConnection;
export const AdbConnection: typeof import("./adbConnection").AdbConnection = null as any;
utilities.lazyLoad(exports, ["AdbConnection"], () => require("./adbConnection"));

export { AdbDbClusterArgs, AdbDbClusterState } from "./adbDbCluster";
export type AdbDbCluster = import("./adbDbCluster").AdbDbCluster;
export const AdbDbCluster: typeof import("./adbDbCluster").AdbDbCluster = null as any;
utilities.lazyLoad(exports, ["AdbDbCluster"], () => require("./adbDbCluster"));

export { AdbDbClusterLakeVersionArgs, AdbDbClusterLakeVersionState } from "./adbDbClusterLakeVersion";
export type AdbDbClusterLakeVersion = import("./adbDbClusterLakeVersion").AdbDbClusterLakeVersion;
export const AdbDbClusterLakeVersion: typeof import("./adbDbClusterLakeVersion").AdbDbClusterLakeVersion = null as any;
utilities.lazyLoad(exports, ["AdbDbClusterLakeVersion"], () => require("./adbDbClusterLakeVersion"));

export { AdbLakeAccountArgs, AdbLakeAccountState } from "./adbLakeAccount";
export type AdbLakeAccount = import("./adbLakeAccount").AdbLakeAccount;
export const AdbLakeAccount: typeof import("./adbLakeAccount").AdbLakeAccount = null as any;
utilities.lazyLoad(exports, ["AdbLakeAccount"], () => require("./adbLakeAccount"));

export { AdbResourceGroupArgs, AdbResourceGroupState } from "./adbResourceGroup";
export type AdbResourceGroup = import("./adbResourceGroup").AdbResourceGroup;
export const AdbResourceGroup: typeof import("./adbResourceGroup").AdbResourceGroup = null as any;
utilities.lazyLoad(exports, ["AdbResourceGroup"], () => require("./adbResourceGroup"));

export { AlbAclArgs, AlbAclState } from "./albAcl";
export type AlbAcl = import("./albAcl").AlbAcl;
export const AlbAcl: typeof import("./albAcl").AlbAcl = null as any;
utilities.lazyLoad(exports, ["AlbAcl"], () => require("./albAcl"));

export { AlbAclEntryAttachmentArgs, AlbAclEntryAttachmentState } from "./albAclEntryAttachment";
export type AlbAclEntryAttachment = import("./albAclEntryAttachment").AlbAclEntryAttachment;
export const AlbAclEntryAttachment: typeof import("./albAclEntryAttachment").AlbAclEntryAttachment = null as any;
utilities.lazyLoad(exports, ["AlbAclEntryAttachment"], () => require("./albAclEntryAttachment"));

export { AlbAscriptArgs, AlbAscriptState } from "./albAscript";
export type AlbAscript = import("./albAscript").AlbAscript;
export const AlbAscript: typeof import("./albAscript").AlbAscript = null as any;
utilities.lazyLoad(exports, ["AlbAscript"], () => require("./albAscript"));

export { AlbHealthCheckTemplateArgs, AlbHealthCheckTemplateState } from "./albHealthCheckTemplate";
export type AlbHealthCheckTemplate = import("./albHealthCheckTemplate").AlbHealthCheckTemplate;
export const AlbHealthCheckTemplate: typeof import("./albHealthCheckTemplate").AlbHealthCheckTemplate = null as any;
utilities.lazyLoad(exports, ["AlbHealthCheckTemplate"], () => require("./albHealthCheckTemplate"));

export { AlbListenerArgs, AlbListenerState } from "./albListener";
export type AlbListener = import("./albListener").AlbListener;
export const AlbListener: typeof import("./albListener").AlbListener = null as any;
utilities.lazyLoad(exports, ["AlbListener"], () => require("./albListener"));

export { AlbListenerAclAttachmentArgs, AlbListenerAclAttachmentState } from "./albListenerAclAttachment";
export type AlbListenerAclAttachment = import("./albListenerAclAttachment").AlbListenerAclAttachment;
export const AlbListenerAclAttachment: typeof import("./albListenerAclAttachment").AlbListenerAclAttachment = null as any;
utilities.lazyLoad(exports, ["AlbListenerAclAttachment"], () => require("./albListenerAclAttachment"));

export { AlbListenerAdditionalCertificateAttachmentArgs, AlbListenerAdditionalCertificateAttachmentState } from "./albListenerAdditionalCertificateAttachment";
export type AlbListenerAdditionalCertificateAttachment = import("./albListenerAdditionalCertificateAttachment").AlbListenerAdditionalCertificateAttachment;
export const AlbListenerAdditionalCertificateAttachment: typeof import("./albListenerAdditionalCertificateAttachment").AlbListenerAdditionalCertificateAttachment = null as any;
utilities.lazyLoad(exports, ["AlbListenerAdditionalCertificateAttachment"], () => require("./albListenerAdditionalCertificateAttachment"));

export { AlbLoadBalancerArgs, AlbLoadBalancerState } from "./albLoadBalancer";
export type AlbLoadBalancer = import("./albLoadBalancer").AlbLoadBalancer;
export const AlbLoadBalancer: typeof import("./albLoadBalancer").AlbLoadBalancer = null as any;
utilities.lazyLoad(exports, ["AlbLoadBalancer"], () => require("./albLoadBalancer"));

export { AlbLoadBalancerCommonBandwidthPackageAttachmentArgs, AlbLoadBalancerCommonBandwidthPackageAttachmentState } from "./albLoadBalancerCommonBandwidthPackageAttachment";
export type AlbLoadBalancerCommonBandwidthPackageAttachment = import("./albLoadBalancerCommonBandwidthPackageAttachment").AlbLoadBalancerCommonBandwidthPackageAttachment;
export const AlbLoadBalancerCommonBandwidthPackageAttachment: typeof import("./albLoadBalancerCommonBandwidthPackageAttachment").AlbLoadBalancerCommonBandwidthPackageAttachment = null as any;
utilities.lazyLoad(exports, ["AlbLoadBalancerCommonBandwidthPackageAttachment"], () => require("./albLoadBalancerCommonBandwidthPackageAttachment"));

export { AlbLoadBalancerSecurityGroupAttachmentArgs, AlbLoadBalancerSecurityGroupAttachmentState } from "./albLoadBalancerSecurityGroupAttachment";
export type AlbLoadBalancerSecurityGroupAttachment = import("./albLoadBalancerSecurityGroupAttachment").AlbLoadBalancerSecurityGroupAttachment;
export const AlbLoadBalancerSecurityGroupAttachment: typeof import("./albLoadBalancerSecurityGroupAttachment").AlbLoadBalancerSecurityGroupAttachment = null as any;
utilities.lazyLoad(exports, ["AlbLoadBalancerSecurityGroupAttachment"], () => require("./albLoadBalancerSecurityGroupAttachment"));

export { AlbRuleArgs, AlbRuleState } from "./albRule";
export type AlbRule = import("./albRule").AlbRule;
export const AlbRule: typeof import("./albRule").AlbRule = null as any;
utilities.lazyLoad(exports, ["AlbRule"], () => require("./albRule"));

export { AlbSecurityPolicyArgs, AlbSecurityPolicyState } from "./albSecurityPolicy";
export type AlbSecurityPolicy = import("./albSecurityPolicy").AlbSecurityPolicy;
export const AlbSecurityPolicy: typeof import("./albSecurityPolicy").AlbSecurityPolicy = null as any;
utilities.lazyLoad(exports, ["AlbSecurityPolicy"], () => require("./albSecurityPolicy"));

export { AlbServerGroupArgs, AlbServerGroupState } from "./albServerGroup";
export type AlbServerGroup = import("./albServerGroup").AlbServerGroup;
export const AlbServerGroup: typeof import("./albServerGroup").AlbServerGroup = null as any;
utilities.lazyLoad(exports, ["AlbServerGroup"], () => require("./albServerGroup"));

export { AlidnsAccessStrategyArgs, AlidnsAccessStrategyState } from "./alidnsAccessStrategy";
export type AlidnsAccessStrategy = import("./alidnsAccessStrategy").AlidnsAccessStrategy;
export const AlidnsAccessStrategy: typeof import("./alidnsAccessStrategy").AlidnsAccessStrategy = null as any;
utilities.lazyLoad(exports, ["AlidnsAccessStrategy"], () => require("./alidnsAccessStrategy"));

export { AlidnsAddressPoolArgs, AlidnsAddressPoolState } from "./alidnsAddressPool";
export type AlidnsAddressPool = import("./alidnsAddressPool").AlidnsAddressPool;
export const AlidnsAddressPool: typeof import("./alidnsAddressPool").AlidnsAddressPool = null as any;
utilities.lazyLoad(exports, ["AlidnsAddressPool"], () => require("./alidnsAddressPool"));

export { AlidnsCustomLineArgs, AlidnsCustomLineState } from "./alidnsCustomLine";
export type AlidnsCustomLine = import("./alidnsCustomLine").AlidnsCustomLine;
export const AlidnsCustomLine: typeof import("./alidnsCustomLine").AlidnsCustomLine = null as any;
utilities.lazyLoad(exports, ["AlidnsCustomLine"], () => require("./alidnsCustomLine"));

export { AlidnsDomainArgs, AlidnsDomainState } from "./alidnsDomain";
export type AlidnsDomain = import("./alidnsDomain").AlidnsDomain;
export const AlidnsDomain: typeof import("./alidnsDomain").AlidnsDomain = null as any;
utilities.lazyLoad(exports, ["AlidnsDomain"], () => require("./alidnsDomain"));

export { AlidnsDomainAttachmentArgs, AlidnsDomainAttachmentState } from "./alidnsDomainAttachment";
export type AlidnsDomainAttachment = import("./alidnsDomainAttachment").AlidnsDomainAttachment;
export const AlidnsDomainAttachment: typeof import("./alidnsDomainAttachment").AlidnsDomainAttachment = null as any;
utilities.lazyLoad(exports, ["AlidnsDomainAttachment"], () => require("./alidnsDomainAttachment"));

export { AlidnsDomainGroupArgs, AlidnsDomainGroupState } from "./alidnsDomainGroup";
export type AlidnsDomainGroup = import("./alidnsDomainGroup").AlidnsDomainGroup;
export const AlidnsDomainGroup: typeof import("./alidnsDomainGroup").AlidnsDomainGroup = null as any;
utilities.lazyLoad(exports, ["AlidnsDomainGroup"], () => require("./alidnsDomainGroup"));

export { AlidnsGtmInstanceArgs, AlidnsGtmInstanceState } from "./alidnsGtmInstance";
export type AlidnsGtmInstance = import("./alidnsGtmInstance").AlidnsGtmInstance;
export const AlidnsGtmInstance: typeof import("./alidnsGtmInstance").AlidnsGtmInstance = null as any;
utilities.lazyLoad(exports, ["AlidnsGtmInstance"], () => require("./alidnsGtmInstance"));

export { AlidnsInstanceArgs, AlidnsInstanceState } from "./alidnsInstance";
export type AlidnsInstance = import("./alidnsInstance").AlidnsInstance;
export const AlidnsInstance: typeof import("./alidnsInstance").AlidnsInstance = null as any;
utilities.lazyLoad(exports, ["AlidnsInstance"], () => require("./alidnsInstance"));

export { AlidnsMonitorConfigArgs, AlidnsMonitorConfigState } from "./alidnsMonitorConfig";
export type AlidnsMonitorConfig = import("./alidnsMonitorConfig").AlidnsMonitorConfig;
export const AlidnsMonitorConfig: typeof import("./alidnsMonitorConfig").AlidnsMonitorConfig = null as any;
utilities.lazyLoad(exports, ["AlidnsMonitorConfig"], () => require("./alidnsMonitorConfig"));

export { AlidnsRecordArgs, AlidnsRecordState } from "./alidnsRecord";
export type AlidnsRecord = import("./alidnsRecord").AlidnsRecord;
export const AlidnsRecord: typeof import("./alidnsRecord").AlidnsRecord = null as any;
utilities.lazyLoad(exports, ["AlidnsRecord"], () => require("./alidnsRecord"));

export { AligreenAuditCallbackArgs, AligreenAuditCallbackState } from "./aligreenAuditCallback";
export type AligreenAuditCallback = import("./aligreenAuditCallback").AligreenAuditCallback;
export const AligreenAuditCallback: typeof import("./aligreenAuditCallback").AligreenAuditCallback = null as any;
utilities.lazyLoad(exports, ["AligreenAuditCallback"], () => require("./aligreenAuditCallback"));

export { AligreenBizTypeArgs, AligreenBizTypeState } from "./aligreenBizType";
export type AligreenBizType = import("./aligreenBizType").AligreenBizType;
export const AligreenBizType: typeof import("./aligreenBizType").AligreenBizType = null as any;
utilities.lazyLoad(exports, ["AligreenBizType"], () => require("./aligreenBizType"));

export { AligreenCallbackArgs, AligreenCallbackState } from "./aligreenCallback";
export type AligreenCallback = import("./aligreenCallback").AligreenCallback;
export const AligreenCallback: typeof import("./aligreenCallback").AligreenCallback = null as any;
utilities.lazyLoad(exports, ["AligreenCallback"], () => require("./aligreenCallback"));

export { AligreenImageLibArgs, AligreenImageLibState } from "./aligreenImageLib";
export type AligreenImageLib = import("./aligreenImageLib").AligreenImageLib;
export const AligreenImageLib: typeof import("./aligreenImageLib").AligreenImageLib = null as any;
utilities.lazyLoad(exports, ["AligreenImageLib"], () => require("./aligreenImageLib"));

export { AligreenKeywordLibArgs, AligreenKeywordLibState } from "./aligreenKeywordLib";
export type AligreenKeywordLib = import("./aligreenKeywordLib").AligreenKeywordLib;
export const AligreenKeywordLib: typeof import("./aligreenKeywordLib").AligreenKeywordLib = null as any;
utilities.lazyLoad(exports, ["AligreenKeywordLib"], () => require("./aligreenKeywordLib"));

export { AligreenOssStockTaskArgs, AligreenOssStockTaskState } from "./aligreenOssStockTask";
export type AligreenOssStockTask = import("./aligreenOssStockTask").AligreenOssStockTask;
export const AligreenOssStockTask: typeof import("./aligreenOssStockTask").AligreenOssStockTask = null as any;
utilities.lazyLoad(exports, ["AligreenOssStockTask"], () => require("./aligreenOssStockTask"));

export { AlikafkaConsumerGroupArgs, AlikafkaConsumerGroupState } from "./alikafkaConsumerGroup";
export type AlikafkaConsumerGroup = import("./alikafkaConsumerGroup").AlikafkaConsumerGroup;
export const AlikafkaConsumerGroup: typeof import("./alikafkaConsumerGroup").AlikafkaConsumerGroup = null as any;
utilities.lazyLoad(exports, ["AlikafkaConsumerGroup"], () => require("./alikafkaConsumerGroup"));

export { AlikafkaInstanceArgs, AlikafkaInstanceState } from "./alikafkaInstance";
export type AlikafkaInstance = import("./alikafkaInstance").AlikafkaInstance;
export const AlikafkaInstance: typeof import("./alikafkaInstance").AlikafkaInstance = null as any;
utilities.lazyLoad(exports, ["AlikafkaInstance"], () => require("./alikafkaInstance"));

export { AlikafkaInstanceAllowedIpAttachmentArgs, AlikafkaInstanceAllowedIpAttachmentState } from "./alikafkaInstanceAllowedIpAttachment";
export type AlikafkaInstanceAllowedIpAttachment = import("./alikafkaInstanceAllowedIpAttachment").AlikafkaInstanceAllowedIpAttachment;
export const AlikafkaInstanceAllowedIpAttachment: typeof import("./alikafkaInstanceAllowedIpAttachment").AlikafkaInstanceAllowedIpAttachment = null as any;
utilities.lazyLoad(exports, ["AlikafkaInstanceAllowedIpAttachment"], () => require("./alikafkaInstanceAllowedIpAttachment"));

export { AlikafkaSaslAclArgs, AlikafkaSaslAclState } from "./alikafkaSaslAcl";
export type AlikafkaSaslAcl = import("./alikafkaSaslAcl").AlikafkaSaslAcl;
export const AlikafkaSaslAcl: typeof import("./alikafkaSaslAcl").AlikafkaSaslAcl = null as any;
utilities.lazyLoad(exports, ["AlikafkaSaslAcl"], () => require("./alikafkaSaslAcl"));

export { AlikafkaSaslUserArgs, AlikafkaSaslUserState } from "./alikafkaSaslUser";
export type AlikafkaSaslUser = import("./alikafkaSaslUser").AlikafkaSaslUser;
export const AlikafkaSaslUser: typeof import("./alikafkaSaslUser").AlikafkaSaslUser = null as any;
utilities.lazyLoad(exports, ["AlikafkaSaslUser"], () => require("./alikafkaSaslUser"));

export { AlikafkaTopicArgs, AlikafkaTopicState } from "./alikafkaTopic";
export type AlikafkaTopic = import("./alikafkaTopic").AlikafkaTopic;
export const AlikafkaTopic: typeof import("./alikafkaTopic").AlikafkaTopic = null as any;
utilities.lazyLoad(exports, ["AlikafkaTopic"], () => require("./alikafkaTopic"));

export { AmqpBindingArgs, AmqpBindingState } from "./amqpBinding";
export type AmqpBinding = import("./amqpBinding").AmqpBinding;
export const AmqpBinding: typeof import("./amqpBinding").AmqpBinding = null as any;
utilities.lazyLoad(exports, ["AmqpBinding"], () => require("./amqpBinding"));

export { AmqpExchangeArgs, AmqpExchangeState } from "./amqpExchange";
export type AmqpExchange = import("./amqpExchange").AmqpExchange;
export const AmqpExchange: typeof import("./amqpExchange").AmqpExchange = null as any;
utilities.lazyLoad(exports, ["AmqpExchange"], () => require("./amqpExchange"));

export { AmqpInstanceArgs, AmqpInstanceState } from "./amqpInstance";
export type AmqpInstance = import("./amqpInstance").AmqpInstance;
export const AmqpInstance: typeof import("./amqpInstance").AmqpInstance = null as any;
utilities.lazyLoad(exports, ["AmqpInstance"], () => require("./amqpInstance"));

export { AmqpQueueArgs, AmqpQueueState } from "./amqpQueue";
export type AmqpQueue = import("./amqpQueue").AmqpQueue;
export const AmqpQueue: typeof import("./amqpQueue").AmqpQueue = null as any;
utilities.lazyLoad(exports, ["AmqpQueue"], () => require("./amqpQueue"));

export { AmqpStaticAccountArgs, AmqpStaticAccountState } from "./amqpStaticAccount";
export type AmqpStaticAccount = import("./amqpStaticAccount").AmqpStaticAccount;
export const AmqpStaticAccount: typeof import("./amqpStaticAccount").AmqpStaticAccount = null as any;
utilities.lazyLoad(exports, ["AmqpStaticAccount"], () => require("./amqpStaticAccount"));

export { AmqpVirtualHostArgs, AmqpVirtualHostState } from "./amqpVirtualHost";
export type AmqpVirtualHost = import("./amqpVirtualHost").AmqpVirtualHost;
export const AmqpVirtualHost: typeof import("./amqpVirtualHost").AmqpVirtualHost = null as any;
utilities.lazyLoad(exports, ["AmqpVirtualHost"], () => require("./amqpVirtualHost"));

export { ApiGatewayAccessControlListArgs, ApiGatewayAccessControlListState } from "./apiGatewayAccessControlList";
export type ApiGatewayAccessControlList = import("./apiGatewayAccessControlList").ApiGatewayAccessControlList;
export const ApiGatewayAccessControlList: typeof import("./apiGatewayAccessControlList").ApiGatewayAccessControlList = null as any;
utilities.lazyLoad(exports, ["ApiGatewayAccessControlList"], () => require("./apiGatewayAccessControlList"));

export { ApiGatewayAclEntryAttachmentArgs, ApiGatewayAclEntryAttachmentState } from "./apiGatewayAclEntryAttachment";
export type ApiGatewayAclEntryAttachment = import("./apiGatewayAclEntryAttachment").ApiGatewayAclEntryAttachment;
export const ApiGatewayAclEntryAttachment: typeof import("./apiGatewayAclEntryAttachment").ApiGatewayAclEntryAttachment = null as any;
utilities.lazyLoad(exports, ["ApiGatewayAclEntryAttachment"], () => require("./apiGatewayAclEntryAttachment"));

export { ApiGatewayApiArgs, ApiGatewayApiState } from "./apiGatewayApi";
export type ApiGatewayApi = import("./apiGatewayApi").ApiGatewayApi;
export const ApiGatewayApi: typeof import("./apiGatewayApi").ApiGatewayApi = null as any;
utilities.lazyLoad(exports, ["ApiGatewayApi"], () => require("./apiGatewayApi"));

export { ApiGatewayAppArgs, ApiGatewayAppState } from "./apiGatewayApp";
export type ApiGatewayApp = import("./apiGatewayApp").ApiGatewayApp;
export const ApiGatewayApp: typeof import("./apiGatewayApp").ApiGatewayApp = null as any;
utilities.lazyLoad(exports, ["ApiGatewayApp"], () => require("./apiGatewayApp"));

export { ApiGatewayAppAttachmentArgs, ApiGatewayAppAttachmentState } from "./apiGatewayAppAttachment";
export type ApiGatewayAppAttachment = import("./apiGatewayAppAttachment").ApiGatewayAppAttachment;
export const ApiGatewayAppAttachment: typeof import("./apiGatewayAppAttachment").ApiGatewayAppAttachment = null as any;
utilities.lazyLoad(exports, ["ApiGatewayAppAttachment"], () => require("./apiGatewayAppAttachment"));

export { ApiGatewayBackendArgs, ApiGatewayBackendState } from "./apiGatewayBackend";
export type ApiGatewayBackend = import("./apiGatewayBackend").ApiGatewayBackend;
export const ApiGatewayBackend: typeof import("./apiGatewayBackend").ApiGatewayBackend = null as any;
utilities.lazyLoad(exports, ["ApiGatewayBackend"], () => require("./apiGatewayBackend"));

export { ApiGatewayGroupArgs, ApiGatewayGroupState } from "./apiGatewayGroup";
export type ApiGatewayGroup = import("./apiGatewayGroup").ApiGatewayGroup;
export const ApiGatewayGroup: typeof import("./apiGatewayGroup").ApiGatewayGroup = null as any;
utilities.lazyLoad(exports, ["ApiGatewayGroup"], () => require("./apiGatewayGroup"));

export { ApiGatewayInstanceArgs, ApiGatewayInstanceState } from "./apiGatewayInstance";
export type ApiGatewayInstance = import("./apiGatewayInstance").ApiGatewayInstance;
export const ApiGatewayInstance: typeof import("./apiGatewayInstance").ApiGatewayInstance = null as any;
utilities.lazyLoad(exports, ["ApiGatewayInstance"], () => require("./apiGatewayInstance"));

export { ApiGatewayInstanceAclAttachmentArgs, ApiGatewayInstanceAclAttachmentState } from "./apiGatewayInstanceAclAttachment";
export type ApiGatewayInstanceAclAttachment = import("./apiGatewayInstanceAclAttachment").ApiGatewayInstanceAclAttachment;
export const ApiGatewayInstanceAclAttachment: typeof import("./apiGatewayInstanceAclAttachment").ApiGatewayInstanceAclAttachment = null as any;
utilities.lazyLoad(exports, ["ApiGatewayInstanceAclAttachment"], () => require("./apiGatewayInstanceAclAttachment"));

export { ApiGatewayLogConfigArgs, ApiGatewayLogConfigState } from "./apiGatewayLogConfig";
export type ApiGatewayLogConfig = import("./apiGatewayLogConfig").ApiGatewayLogConfig;
export const ApiGatewayLogConfig: typeof import("./apiGatewayLogConfig").ApiGatewayLogConfig = null as any;
utilities.lazyLoad(exports, ["ApiGatewayLogConfig"], () => require("./apiGatewayLogConfig"));

export { ApiGatewayModelArgs, ApiGatewayModelState } from "./apiGatewayModel";
export type ApiGatewayModel = import("./apiGatewayModel").ApiGatewayModel;
export const ApiGatewayModel: typeof import("./apiGatewayModel").ApiGatewayModel = null as any;
utilities.lazyLoad(exports, ["ApiGatewayModel"], () => require("./apiGatewayModel"));

export { ApiGatewayPluginArgs, ApiGatewayPluginState } from "./apiGatewayPlugin";
export type ApiGatewayPlugin = import("./apiGatewayPlugin").ApiGatewayPlugin;
export const ApiGatewayPlugin: typeof import("./apiGatewayPlugin").ApiGatewayPlugin = null as any;
utilities.lazyLoad(exports, ["ApiGatewayPlugin"], () => require("./apiGatewayPlugin"));

export { ApiGatewayPluginAttachmentArgs, ApiGatewayPluginAttachmentState } from "./apiGatewayPluginAttachment";
export type ApiGatewayPluginAttachment = import("./apiGatewayPluginAttachment").ApiGatewayPluginAttachment;
export const ApiGatewayPluginAttachment: typeof import("./apiGatewayPluginAttachment").ApiGatewayPluginAttachment = null as any;
utilities.lazyLoad(exports, ["ApiGatewayPluginAttachment"], () => require("./apiGatewayPluginAttachment"));

export { ApiGatewayVpcAccessArgs, ApiGatewayVpcAccessState } from "./apiGatewayVpcAccess";
export type ApiGatewayVpcAccess = import("./apiGatewayVpcAccess").ApiGatewayVpcAccess;
export const ApiGatewayVpcAccess: typeof import("./apiGatewayVpcAccess").ApiGatewayVpcAccess = null as any;
utilities.lazyLoad(exports, ["ApiGatewayVpcAccess"], () => require("./apiGatewayVpcAccess"));

export { ArmsAddonReleaseArgs, ArmsAddonReleaseState } from "./armsAddonRelease";
export type ArmsAddonRelease = import("./armsAddonRelease").ArmsAddonRelease;
export const ArmsAddonRelease: typeof import("./armsAddonRelease").ArmsAddonRelease = null as any;
utilities.lazyLoad(exports, ["ArmsAddonRelease"], () => require("./armsAddonRelease"));

export { ArmsAlertContactArgs, ArmsAlertContactState } from "./armsAlertContact";
export type ArmsAlertContact = import("./armsAlertContact").ArmsAlertContact;
export const ArmsAlertContact: typeof import("./armsAlertContact").ArmsAlertContact = null as any;
utilities.lazyLoad(exports, ["ArmsAlertContact"], () => require("./armsAlertContact"));

export { ArmsAlertContactGroupArgs, ArmsAlertContactGroupState } from "./armsAlertContactGroup";
export type ArmsAlertContactGroup = import("./armsAlertContactGroup").ArmsAlertContactGroup;
export const ArmsAlertContactGroup: typeof import("./armsAlertContactGroup").ArmsAlertContactGroup = null as any;
utilities.lazyLoad(exports, ["ArmsAlertContactGroup"], () => require("./armsAlertContactGroup"));

export { ArmsDispatchRuleArgs, ArmsDispatchRuleState } from "./armsDispatchRule";
export type ArmsDispatchRule = import("./armsDispatchRule").ArmsDispatchRule;
export const ArmsDispatchRule: typeof import("./armsDispatchRule").ArmsDispatchRule = null as any;
utilities.lazyLoad(exports, ["ArmsDispatchRule"], () => require("./armsDispatchRule"));

export { ArmsEnvCustomJobArgs, ArmsEnvCustomJobState } from "./armsEnvCustomJob";
export type ArmsEnvCustomJob = import("./armsEnvCustomJob").ArmsEnvCustomJob;
export const ArmsEnvCustomJob: typeof import("./armsEnvCustomJob").ArmsEnvCustomJob = null as any;
utilities.lazyLoad(exports, ["ArmsEnvCustomJob"], () => require("./armsEnvCustomJob"));

export { ArmsEnvFeatureArgs, ArmsEnvFeatureState } from "./armsEnvFeature";
export type ArmsEnvFeature = import("./armsEnvFeature").ArmsEnvFeature;
export const ArmsEnvFeature: typeof import("./armsEnvFeature").ArmsEnvFeature = null as any;
utilities.lazyLoad(exports, ["ArmsEnvFeature"], () => require("./armsEnvFeature"));

export { ArmsEnvPodMonitorArgs, ArmsEnvPodMonitorState } from "./armsEnvPodMonitor";
export type ArmsEnvPodMonitor = import("./armsEnvPodMonitor").ArmsEnvPodMonitor;
export const ArmsEnvPodMonitor: typeof import("./armsEnvPodMonitor").ArmsEnvPodMonitor = null as any;
utilities.lazyLoad(exports, ["ArmsEnvPodMonitor"], () => require("./armsEnvPodMonitor"));

export { ArmsEnvServiceMonitorArgs, ArmsEnvServiceMonitorState } from "./armsEnvServiceMonitor";
export type ArmsEnvServiceMonitor = import("./armsEnvServiceMonitor").ArmsEnvServiceMonitor;
export const ArmsEnvServiceMonitor: typeof import("./armsEnvServiceMonitor").ArmsEnvServiceMonitor = null as any;
utilities.lazyLoad(exports, ["ArmsEnvServiceMonitor"], () => require("./armsEnvServiceMonitor"));

export { ArmsEnvironmentArgs, ArmsEnvironmentState } from "./armsEnvironment";
export type ArmsEnvironment = import("./armsEnvironment").ArmsEnvironment;
export const ArmsEnvironment: typeof import("./armsEnvironment").ArmsEnvironment = null as any;
utilities.lazyLoad(exports, ["ArmsEnvironment"], () => require("./armsEnvironment"));

export { ArmsGrafanaWorkspaceArgs, ArmsGrafanaWorkspaceState } from "./armsGrafanaWorkspace";
export type ArmsGrafanaWorkspace = import("./armsGrafanaWorkspace").ArmsGrafanaWorkspace;
export const ArmsGrafanaWorkspace: typeof import("./armsGrafanaWorkspace").ArmsGrafanaWorkspace = null as any;
utilities.lazyLoad(exports, ["ArmsGrafanaWorkspace"], () => require("./armsGrafanaWorkspace"));

export { ArmsIntegrationExporterArgs, ArmsIntegrationExporterState } from "./armsIntegrationExporter";
export type ArmsIntegrationExporter = import("./armsIntegrationExporter").ArmsIntegrationExporter;
export const ArmsIntegrationExporter: typeof import("./armsIntegrationExporter").ArmsIntegrationExporter = null as any;
utilities.lazyLoad(exports, ["ArmsIntegrationExporter"], () => require("./armsIntegrationExporter"));

export { ArmsPrometheusArgs, ArmsPrometheusState } from "./armsPrometheus";
export type ArmsPrometheus = import("./armsPrometheus").ArmsPrometheus;
export const ArmsPrometheus: typeof import("./armsPrometheus").ArmsPrometheus = null as any;
utilities.lazyLoad(exports, ["ArmsPrometheus"], () => require("./armsPrometheus"));

export { ArmsPrometheusAlertRuleArgs, ArmsPrometheusAlertRuleState } from "./armsPrometheusAlertRule";
export type ArmsPrometheusAlertRule = import("./armsPrometheusAlertRule").ArmsPrometheusAlertRule;
export const ArmsPrometheusAlertRule: typeof import("./armsPrometheusAlertRule").ArmsPrometheusAlertRule = null as any;
utilities.lazyLoad(exports, ["ArmsPrometheusAlertRule"], () => require("./armsPrometheusAlertRule"));

export { ArmsPrometheusMonitoringArgs, ArmsPrometheusMonitoringState } from "./armsPrometheusMonitoring";
export type ArmsPrometheusMonitoring = import("./armsPrometheusMonitoring").ArmsPrometheusMonitoring;
export const ArmsPrometheusMonitoring: typeof import("./armsPrometheusMonitoring").ArmsPrometheusMonitoring = null as any;
utilities.lazyLoad(exports, ["ArmsPrometheusMonitoring"], () => require("./armsPrometheusMonitoring"));

export { ArmsRemoteWriteArgs, ArmsRemoteWriteState } from "./armsRemoteWrite";
export type ArmsRemoteWrite = import("./armsRemoteWrite").ArmsRemoteWrite;
export const ArmsRemoteWrite: typeof import("./armsRemoteWrite").ArmsRemoteWrite = null as any;
utilities.lazyLoad(exports, ["ArmsRemoteWrite"], () => require("./armsRemoteWrite"));

export { ArmsSyntheticTaskArgs, ArmsSyntheticTaskState } from "./armsSyntheticTask";
export type ArmsSyntheticTask = import("./armsSyntheticTask").ArmsSyntheticTask;
export const ArmsSyntheticTask: typeof import("./armsSyntheticTask").ArmsSyntheticTask = null as any;
utilities.lazyLoad(exports, ["ArmsSyntheticTask"], () => require("./armsSyntheticTask"));

export { AutoProvisioningGroupArgs, AutoProvisioningGroupState } from "./autoProvisioningGroup";
export type AutoProvisioningGroup = import("./autoProvisioningGroup").AutoProvisioningGroup;
export const AutoProvisioningGroup: typeof import("./autoProvisioningGroup").AutoProvisioningGroup = null as any;
utilities.lazyLoad(exports, ["AutoProvisioningGroup"], () => require("./autoProvisioningGroup"));

export { BastionhostHostArgs, BastionhostHostState } from "./bastionhostHost";
export type BastionhostHost = import("./bastionhostHost").BastionhostHost;
export const BastionhostHost: typeof import("./bastionhostHost").BastionhostHost = null as any;
utilities.lazyLoad(exports, ["BastionhostHost"], () => require("./bastionhostHost"));

export { BastionhostHostAccountArgs, BastionhostHostAccountState } from "./bastionhostHostAccount";
export type BastionhostHostAccount = import("./bastionhostHostAccount").BastionhostHostAccount;
export const BastionhostHostAccount: typeof import("./bastionhostHostAccount").BastionhostHostAccount = null as any;
utilities.lazyLoad(exports, ["BastionhostHostAccount"], () => require("./bastionhostHostAccount"));

export { BastionhostHostAccountShareKeyAttachmentArgs, BastionhostHostAccountShareKeyAttachmentState } from "./bastionhostHostAccountShareKeyAttachment";
export type BastionhostHostAccountShareKeyAttachment = import("./bastionhostHostAccountShareKeyAttachment").BastionhostHostAccountShareKeyAttachment;
export const BastionhostHostAccountShareKeyAttachment: typeof import("./bastionhostHostAccountShareKeyAttachment").BastionhostHostAccountShareKeyAttachment = null as any;
utilities.lazyLoad(exports, ["BastionhostHostAccountShareKeyAttachment"], () => require("./bastionhostHostAccountShareKeyAttachment"));

export { BastionhostHostAccountUserAttachmentArgs, BastionhostHostAccountUserAttachmentState } from "./bastionhostHostAccountUserAttachment";
export type BastionhostHostAccountUserAttachment = import("./bastionhostHostAccountUserAttachment").BastionhostHostAccountUserAttachment;
export const BastionhostHostAccountUserAttachment: typeof import("./bastionhostHostAccountUserAttachment").BastionhostHostAccountUserAttachment = null as any;
utilities.lazyLoad(exports, ["BastionhostHostAccountUserAttachment"], () => require("./bastionhostHostAccountUserAttachment"));

export { BastionhostHostAccountUserGroupAttachmentArgs, BastionhostHostAccountUserGroupAttachmentState } from "./bastionhostHostAccountUserGroupAttachment";
export type BastionhostHostAccountUserGroupAttachment = import("./bastionhostHostAccountUserGroupAttachment").BastionhostHostAccountUserGroupAttachment;
export const BastionhostHostAccountUserGroupAttachment: typeof import("./bastionhostHostAccountUserGroupAttachment").BastionhostHostAccountUserGroupAttachment = null as any;
utilities.lazyLoad(exports, ["BastionhostHostAccountUserGroupAttachment"], () => require("./bastionhostHostAccountUserGroupAttachment"));

export { BastionhostHostAttachmentArgs, BastionhostHostAttachmentState } from "./bastionhostHostAttachment";
export type BastionhostHostAttachment = import("./bastionhostHostAttachment").BastionhostHostAttachment;
export const BastionhostHostAttachment: typeof import("./bastionhostHostAttachment").BastionhostHostAttachment = null as any;
utilities.lazyLoad(exports, ["BastionhostHostAttachment"], () => require("./bastionhostHostAttachment"));

export { BastionhostHostGroupArgs, BastionhostHostGroupState } from "./bastionhostHostGroup";
export type BastionhostHostGroup = import("./bastionhostHostGroup").BastionhostHostGroup;
export const BastionhostHostGroup: typeof import("./bastionhostHostGroup").BastionhostHostGroup = null as any;
utilities.lazyLoad(exports, ["BastionhostHostGroup"], () => require("./bastionhostHostGroup"));

export { BastionhostHostGroupAccountUserAttachmentArgs, BastionhostHostGroupAccountUserAttachmentState } from "./bastionhostHostGroupAccountUserAttachment";
export type BastionhostHostGroupAccountUserAttachment = import("./bastionhostHostGroupAccountUserAttachment").BastionhostHostGroupAccountUserAttachment;
export const BastionhostHostGroupAccountUserAttachment: typeof import("./bastionhostHostGroupAccountUserAttachment").BastionhostHostGroupAccountUserAttachment = null as any;
utilities.lazyLoad(exports, ["BastionhostHostGroupAccountUserAttachment"], () => require("./bastionhostHostGroupAccountUserAttachment"));

export { BastionhostHostGroupAccountUserGroupAttachmentArgs, BastionhostHostGroupAccountUserGroupAttachmentState } from "./bastionhostHostGroupAccountUserGroupAttachment";
export type BastionhostHostGroupAccountUserGroupAttachment = import("./bastionhostHostGroupAccountUserGroupAttachment").BastionhostHostGroupAccountUserGroupAttachment;
export const BastionhostHostGroupAccountUserGroupAttachment: typeof import("./bastionhostHostGroupAccountUserGroupAttachment").BastionhostHostGroupAccountUserGroupAttachment = null as any;
utilities.lazyLoad(exports, ["BastionhostHostGroupAccountUserGroupAttachment"], () => require("./bastionhostHostGroupAccountUserGroupAttachment"));

export { BastionhostHostShareKeyArgs, BastionhostHostShareKeyState } from "./bastionhostHostShareKey";
export type BastionhostHostShareKey = import("./bastionhostHostShareKey").BastionhostHostShareKey;
export const BastionhostHostShareKey: typeof import("./bastionhostHostShareKey").BastionhostHostShareKey = null as any;
utilities.lazyLoad(exports, ["BastionhostHostShareKey"], () => require("./bastionhostHostShareKey"));

export { BastionhostInstanceArgs, BastionhostInstanceState } from "./bastionhostInstance";
export type BastionhostInstance = import("./bastionhostInstance").BastionhostInstance;
export const BastionhostInstance: typeof import("./bastionhostInstance").BastionhostInstance = null as any;
utilities.lazyLoad(exports, ["BastionhostInstance"], () => require("./bastionhostInstance"));

export { BastionhostUserArgs, BastionhostUserState } from "./bastionhostUser";
export type BastionhostUser = import("./bastionhostUser").BastionhostUser;
export const BastionhostUser: typeof import("./bastionhostUser").BastionhostUser = null as any;
utilities.lazyLoad(exports, ["BastionhostUser"], () => require("./bastionhostUser"));

export { BastionhostUserAttachmentArgs, BastionhostUserAttachmentState } from "./bastionhostUserAttachment";
export type BastionhostUserAttachment = import("./bastionhostUserAttachment").BastionhostUserAttachment;
export const BastionhostUserAttachment: typeof import("./bastionhostUserAttachment").BastionhostUserAttachment = null as any;
utilities.lazyLoad(exports, ["BastionhostUserAttachment"], () => require("./bastionhostUserAttachment"));

export { BastionhostUserGroupArgs, BastionhostUserGroupState } from "./bastionhostUserGroup";
export type BastionhostUserGroup = import("./bastionhostUserGroup").BastionhostUserGroup;
export const BastionhostUserGroup: typeof import("./bastionhostUserGroup").BastionhostUserGroup = null as any;
utilities.lazyLoad(exports, ["BastionhostUserGroup"], () => require("./bastionhostUserGroup"));

export { BpStudioApplicationArgs, BpStudioApplicationState } from "./bpStudioApplication";
export type BpStudioApplication = import("./bpStudioApplication").BpStudioApplication;
export const BpStudioApplication: typeof import("./bpStudioApplication").BpStudioApplication = null as any;
utilities.lazyLoad(exports, ["BpStudioApplication"], () => require("./bpStudioApplication"));

export { BrainIndustrialPidLoopArgs, BrainIndustrialPidLoopState } from "./brainIndustrialPidLoop";
export type BrainIndustrialPidLoop = import("./brainIndustrialPidLoop").BrainIndustrialPidLoop;
export const BrainIndustrialPidLoop: typeof import("./brainIndustrialPidLoop").BrainIndustrialPidLoop = null as any;
utilities.lazyLoad(exports, ["BrainIndustrialPidLoop"], () => require("./brainIndustrialPidLoop"));

export { BrainIndustrialPidOrganizationArgs, BrainIndustrialPidOrganizationState } from "./brainIndustrialPidOrganization";
export type BrainIndustrialPidOrganization = import("./brainIndustrialPidOrganization").BrainIndustrialPidOrganization;
export const BrainIndustrialPidOrganization: typeof import("./brainIndustrialPidOrganization").BrainIndustrialPidOrganization = null as any;
utilities.lazyLoad(exports, ["BrainIndustrialPidOrganization"], () => require("./brainIndustrialPidOrganization"));

export { BrainIndustrialPidProjectArgs, BrainIndustrialPidProjectState } from "./brainIndustrialPidProject";
export type BrainIndustrialPidProject = import("./brainIndustrialPidProject").BrainIndustrialPidProject;
export const BrainIndustrialPidProject: typeof import("./brainIndustrialPidProject").BrainIndustrialPidProject = null as any;
utilities.lazyLoad(exports, ["BrainIndustrialPidProject"], () => require("./brainIndustrialPidProject"));

export { CasCertificateArgs, CasCertificateState } from "./casCertificate";
export type CasCertificate = import("./casCertificate").CasCertificate;
export const CasCertificate: typeof import("./casCertificate").CasCertificate = null as any;
utilities.lazyLoad(exports, ["CasCertificate"], () => require("./casCertificate"));

export { CassandraBackupPlanArgs, CassandraBackupPlanState } from "./cassandraBackupPlan";
export type CassandraBackupPlan = import("./cassandraBackupPlan").CassandraBackupPlan;
export const CassandraBackupPlan: typeof import("./cassandraBackupPlan").CassandraBackupPlan = null as any;
utilities.lazyLoad(exports, ["CassandraBackupPlan"], () => require("./cassandraBackupPlan"));

export { CassandraClusterArgs, CassandraClusterState } from "./cassandraCluster";
export type CassandraCluster = import("./cassandraCluster").CassandraCluster;
export const CassandraCluster: typeof import("./cassandraCluster").CassandraCluster = null as any;
utilities.lazyLoad(exports, ["CassandraCluster"], () => require("./cassandraCluster"));

export { CassandraDataCenterArgs, CassandraDataCenterState } from "./cassandraDataCenter";
export type CassandraDataCenter = import("./cassandraDataCenter").CassandraDataCenter;
export const CassandraDataCenter: typeof import("./cassandraDataCenter").CassandraDataCenter = null as any;
utilities.lazyLoad(exports, ["CassandraDataCenter"], () => require("./cassandraDataCenter"));

export { CddcDedicatedHostArgs, CddcDedicatedHostState } from "./cddcDedicatedHost";
export type CddcDedicatedHost = import("./cddcDedicatedHost").CddcDedicatedHost;
export const CddcDedicatedHost: typeof import("./cddcDedicatedHost").CddcDedicatedHost = null as any;
utilities.lazyLoad(exports, ["CddcDedicatedHost"], () => require("./cddcDedicatedHost"));

export { CddcDedicatedHostAccountArgs, CddcDedicatedHostAccountState } from "./cddcDedicatedHostAccount";
export type CddcDedicatedHostAccount = import("./cddcDedicatedHostAccount").CddcDedicatedHostAccount;
export const CddcDedicatedHostAccount: typeof import("./cddcDedicatedHostAccount").CddcDedicatedHostAccount = null as any;
utilities.lazyLoad(exports, ["CddcDedicatedHostAccount"], () => require("./cddcDedicatedHostAccount"));

export { CddcDedicatedHostGroupArgs, CddcDedicatedHostGroupState } from "./cddcDedicatedHostGroup";
export type CddcDedicatedHostGroup = import("./cddcDedicatedHostGroup").CddcDedicatedHostGroup;
export const CddcDedicatedHostGroup: typeof import("./cddcDedicatedHostGroup").CddcDedicatedHostGroup = null as any;
utilities.lazyLoad(exports, ["CddcDedicatedHostGroup"], () => require("./cddcDedicatedHostGroup"));

export { CddcDedicatedPropreHostArgs, CddcDedicatedPropreHostState } from "./cddcDedicatedPropreHost";
export type CddcDedicatedPropreHost = import("./cddcDedicatedPropreHost").CddcDedicatedPropreHost;
export const CddcDedicatedPropreHost: typeof import("./cddcDedicatedPropreHost").CddcDedicatedPropreHost = null as any;
utilities.lazyLoad(exports, ["CddcDedicatedPropreHost"], () => require("./cddcDedicatedPropreHost"));

export { CdnDomainArgs, CdnDomainState } from "./cdnDomain";
export type CdnDomain = import("./cdnDomain").CdnDomain;
export const CdnDomain: typeof import("./cdnDomain").CdnDomain = null as any;
utilities.lazyLoad(exports, ["CdnDomain"], () => require("./cdnDomain"));

export { CdnDomainConfigArgs, CdnDomainConfigState } from "./cdnDomainConfig";
export type CdnDomainConfig = import("./cdnDomainConfig").CdnDomainConfig;
export const CdnDomainConfig: typeof import("./cdnDomainConfig").CdnDomainConfig = null as any;
utilities.lazyLoad(exports, ["CdnDomainConfig"], () => require("./cdnDomainConfig"));

export { CdnDomainNewArgs, CdnDomainNewState } from "./cdnDomainNew";
export type CdnDomainNew = import("./cdnDomainNew").CdnDomainNew;
export const CdnDomainNew: typeof import("./cdnDomainNew").CdnDomainNew = null as any;
utilities.lazyLoad(exports, ["CdnDomainNew"], () => require("./cdnDomainNew"));

export { CdnFcTriggerArgs, CdnFcTriggerState } from "./cdnFcTrigger";
export type CdnFcTrigger = import("./cdnFcTrigger").CdnFcTrigger;
export const CdnFcTrigger: typeof import("./cdnFcTrigger").CdnFcTrigger = null as any;
utilities.lazyLoad(exports, ["CdnFcTrigger"], () => require("./cdnFcTrigger"));

export { CdnRealTimeLogDeliveryArgs, CdnRealTimeLogDeliveryState } from "./cdnRealTimeLogDelivery";
export type CdnRealTimeLogDelivery = import("./cdnRealTimeLogDelivery").CdnRealTimeLogDelivery;
export const CdnRealTimeLogDelivery: typeof import("./cdnRealTimeLogDelivery").CdnRealTimeLogDelivery = null as any;
utilities.lazyLoad(exports, ["CdnRealTimeLogDelivery"], () => require("./cdnRealTimeLogDelivery"));

export { CenBandwidthLimitArgs, CenBandwidthLimitState } from "./cenBandwidthLimit";
export type CenBandwidthLimit = import("./cenBandwidthLimit").CenBandwidthLimit;
export const CenBandwidthLimit: typeof import("./cenBandwidthLimit").CenBandwidthLimit = null as any;
utilities.lazyLoad(exports, ["CenBandwidthLimit"], () => require("./cenBandwidthLimit"));

export { CenBandwidthPackageArgs, CenBandwidthPackageState } from "./cenBandwidthPackage";
export type CenBandwidthPackage = import("./cenBandwidthPackage").CenBandwidthPackage;
export const CenBandwidthPackage: typeof import("./cenBandwidthPackage").CenBandwidthPackage = null as any;
utilities.lazyLoad(exports, ["CenBandwidthPackage"], () => require("./cenBandwidthPackage"));

export { CenBandwidthPackageAttachmentArgs, CenBandwidthPackageAttachmentState } from "./cenBandwidthPackageAttachment";
export type CenBandwidthPackageAttachment = import("./cenBandwidthPackageAttachment").CenBandwidthPackageAttachment;
export const CenBandwidthPackageAttachment: typeof import("./cenBandwidthPackageAttachment").CenBandwidthPackageAttachment = null as any;
utilities.lazyLoad(exports, ["CenBandwidthPackageAttachment"], () => require("./cenBandwidthPackageAttachment"));

export { CenChildInstanceRouteEntryToAttachmentArgs, CenChildInstanceRouteEntryToAttachmentState } from "./cenChildInstanceRouteEntryToAttachment";
export type CenChildInstanceRouteEntryToAttachment = import("./cenChildInstanceRouteEntryToAttachment").CenChildInstanceRouteEntryToAttachment;
export const CenChildInstanceRouteEntryToAttachment: typeof import("./cenChildInstanceRouteEntryToAttachment").CenChildInstanceRouteEntryToAttachment = null as any;
utilities.lazyLoad(exports, ["CenChildInstanceRouteEntryToAttachment"], () => require("./cenChildInstanceRouteEntryToAttachment"));

export { CenFlowlogArgs, CenFlowlogState } from "./cenFlowlog";
export type CenFlowlog = import("./cenFlowlog").CenFlowlog;
export const CenFlowlog: typeof import("./cenFlowlog").CenFlowlog = null as any;
utilities.lazyLoad(exports, ["CenFlowlog"], () => require("./cenFlowlog"));

export { CenInstanceArgs, CenInstanceState } from "./cenInstance";
export type CenInstance = import("./cenInstance").CenInstance;
export const CenInstance: typeof import("./cenInstance").CenInstance = null as any;
utilities.lazyLoad(exports, ["CenInstance"], () => require("./cenInstance"));

export { CenInstanceAttachmentArgs, CenInstanceAttachmentState } from "./cenInstanceAttachment";
export type CenInstanceAttachment = import("./cenInstanceAttachment").CenInstanceAttachment;
export const CenInstanceAttachment: typeof import("./cenInstanceAttachment").CenInstanceAttachment = null as any;
utilities.lazyLoad(exports, ["CenInstanceAttachment"], () => require("./cenInstanceAttachment"));

export { CenInstanceGrantArgs, CenInstanceGrantState } from "./cenInstanceGrant";
export type CenInstanceGrant = import("./cenInstanceGrant").CenInstanceGrant;
export const CenInstanceGrant: typeof import("./cenInstanceGrant").CenInstanceGrant = null as any;
utilities.lazyLoad(exports, ["CenInstanceGrant"], () => require("./cenInstanceGrant"));

export { CenInterRegionTrafficQosPolicyArgs, CenInterRegionTrafficQosPolicyState } from "./cenInterRegionTrafficQosPolicy";
export type CenInterRegionTrafficQosPolicy = import("./cenInterRegionTrafficQosPolicy").CenInterRegionTrafficQosPolicy;
export const CenInterRegionTrafficQosPolicy: typeof import("./cenInterRegionTrafficQosPolicy").CenInterRegionTrafficQosPolicy = null as any;
utilities.lazyLoad(exports, ["CenInterRegionTrafficQosPolicy"], () => require("./cenInterRegionTrafficQosPolicy"));

export { CenInterRegionTrafficQosQueueArgs, CenInterRegionTrafficQosQueueState } from "./cenInterRegionTrafficQosQueue";
export type CenInterRegionTrafficQosQueue = import("./cenInterRegionTrafficQosQueue").CenInterRegionTrafficQosQueue;
export const CenInterRegionTrafficQosQueue: typeof import("./cenInterRegionTrafficQosQueue").CenInterRegionTrafficQosQueue = null as any;
utilities.lazyLoad(exports, ["CenInterRegionTrafficQosQueue"], () => require("./cenInterRegionTrafficQosQueue"));

export { CenPrivateZoneArgs, CenPrivateZoneState } from "./cenPrivateZone";
export type CenPrivateZone = import("./cenPrivateZone").CenPrivateZone;
export const CenPrivateZone: typeof import("./cenPrivateZone").CenPrivateZone = null as any;
utilities.lazyLoad(exports, ["CenPrivateZone"], () => require("./cenPrivateZone"));

export { CenRouteEntryArgs, CenRouteEntryState } from "./cenRouteEntry";
export type CenRouteEntry = import("./cenRouteEntry").CenRouteEntry;
export const CenRouteEntry: typeof import("./cenRouteEntry").CenRouteEntry = null as any;
utilities.lazyLoad(exports, ["CenRouteEntry"], () => require("./cenRouteEntry"));

export { CenRouteMapArgs, CenRouteMapState } from "./cenRouteMap";
export type CenRouteMap = import("./cenRouteMap").CenRouteMap;
export const CenRouteMap: typeof import("./cenRouteMap").CenRouteMap = null as any;
utilities.lazyLoad(exports, ["CenRouteMap"], () => require("./cenRouteMap"));

export { CenRouteServiceArgs, CenRouteServiceState } from "./cenRouteService";
export type CenRouteService = import("./cenRouteService").CenRouteService;
export const CenRouteService: typeof import("./cenRouteService").CenRouteService = null as any;
utilities.lazyLoad(exports, ["CenRouteService"], () => require("./cenRouteService"));

export { CenTrafficMarkingPolicyArgs, CenTrafficMarkingPolicyState } from "./cenTrafficMarkingPolicy";
export type CenTrafficMarkingPolicy = import("./cenTrafficMarkingPolicy").CenTrafficMarkingPolicy;
export const CenTrafficMarkingPolicy: typeof import("./cenTrafficMarkingPolicy").CenTrafficMarkingPolicy = null as any;
utilities.lazyLoad(exports, ["CenTrafficMarkingPolicy"], () => require("./cenTrafficMarkingPolicy"));

export { CenTransitRouteTableAggregationArgs, CenTransitRouteTableAggregationState } from "./cenTransitRouteTableAggregation";
export type CenTransitRouteTableAggregation = import("./cenTransitRouteTableAggregation").CenTransitRouteTableAggregation;
export const CenTransitRouteTableAggregation: typeof import("./cenTransitRouteTableAggregation").CenTransitRouteTableAggregation = null as any;
utilities.lazyLoad(exports, ["CenTransitRouteTableAggregation"], () => require("./cenTransitRouteTableAggregation"));

export { CenTransitRouterArgs, CenTransitRouterState } from "./cenTransitRouter";
export type CenTransitRouter = import("./cenTransitRouter").CenTransitRouter;
export const CenTransitRouter: typeof import("./cenTransitRouter").CenTransitRouter = null as any;
utilities.lazyLoad(exports, ["CenTransitRouter"], () => require("./cenTransitRouter"));

export { CenTransitRouterCidrArgs, CenTransitRouterCidrState } from "./cenTransitRouterCidr";
export type CenTransitRouterCidr = import("./cenTransitRouterCidr").CenTransitRouterCidr;
export const CenTransitRouterCidr: typeof import("./cenTransitRouterCidr").CenTransitRouterCidr = null as any;
utilities.lazyLoad(exports, ["CenTransitRouterCidr"], () => require("./cenTransitRouterCidr"));

export { CenTransitRouterEcrAttachmentArgs, CenTransitRouterEcrAttachmentState } from "./cenTransitRouterEcrAttachment";
export type CenTransitRouterEcrAttachment = import("./cenTransitRouterEcrAttachment").CenTransitRouterEcrAttachment;
export const CenTransitRouterEcrAttachment: typeof import("./cenTransitRouterEcrAttachment").CenTransitRouterEcrAttachment = null as any;
utilities.lazyLoad(exports, ["CenTransitRouterEcrAttachment"], () => require("./cenTransitRouterEcrAttachment"));

export { CenTransitRouterGrantAttachmentArgs, CenTransitRouterGrantAttachmentState } from "./cenTransitRouterGrantAttachment";
export type CenTransitRouterGrantAttachment = import("./cenTransitRouterGrantAttachment").CenTransitRouterGrantAttachment;
export const CenTransitRouterGrantAttachment: typeof import("./cenTransitRouterGrantAttachment").CenTransitRouterGrantAttachment = null as any;
utilities.lazyLoad(exports, ["CenTransitRouterGrantAttachment"], () => require("./cenTransitRouterGrantAttachment"));

export { CenTransitRouterMulticastDomainArgs, CenTransitRouterMulticastDomainState } from "./cenTransitRouterMulticastDomain";
export type CenTransitRouterMulticastDomain = import("./cenTransitRouterMulticastDomain").CenTransitRouterMulticastDomain;
export const CenTransitRouterMulticastDomain: typeof import("./cenTransitRouterMulticastDomain").CenTransitRouterMulticastDomain = null as any;
utilities.lazyLoad(exports, ["CenTransitRouterMulticastDomain"], () => require("./cenTransitRouterMulticastDomain"));

export { CenTransitRouterMulticastDomainAssociationArgs, CenTransitRouterMulticastDomainAssociationState } from "./cenTransitRouterMulticastDomainAssociation";
export type CenTransitRouterMulticastDomainAssociation = import("./cenTransitRouterMulticastDomainAssociation").CenTransitRouterMulticastDomainAssociation;
export const CenTransitRouterMulticastDomainAssociation: typeof import("./cenTransitRouterMulticastDomainAssociation").CenTransitRouterMulticastDomainAssociation = null as any;
utilities.lazyLoad(exports, ["CenTransitRouterMulticastDomainAssociation"], () => require("./cenTransitRouterMulticastDomainAssociation"));

export { CenTransitRouterMulticastDomainMemberArgs, CenTransitRouterMulticastDomainMemberState } from "./cenTransitRouterMulticastDomainMember";
export type CenTransitRouterMulticastDomainMember = import("./cenTransitRouterMulticastDomainMember").CenTransitRouterMulticastDomainMember;
export const CenTransitRouterMulticastDomainMember: typeof import("./cenTransitRouterMulticastDomainMember").CenTransitRouterMulticastDomainMember = null as any;
utilities.lazyLoad(exports, ["CenTransitRouterMulticastDomainMember"], () => require("./cenTransitRouterMulticastDomainMember"));

export { CenTransitRouterMulticastDomainPeerMemberArgs, CenTransitRouterMulticastDomainPeerMemberState } from "./cenTransitRouterMulticastDomainPeerMember";
export type CenTransitRouterMulticastDomainPeerMember = import("./cenTransitRouterMulticastDomainPeerMember").CenTransitRouterMulticastDomainPeerMember;
export const CenTransitRouterMulticastDomainPeerMember: typeof import("./cenTransitRouterMulticastDomainPeerMember").CenTransitRouterMulticastDomainPeerMember = null as any;
utilities.lazyLoad(exports, ["CenTransitRouterMulticastDomainPeerMember"], () => require("./cenTransitRouterMulticastDomainPeerMember"));

export { CenTransitRouterMulticastDomainSourceArgs, CenTransitRouterMulticastDomainSourceState } from "./cenTransitRouterMulticastDomainSource";
export type CenTransitRouterMulticastDomainSource = import("./cenTransitRouterMulticastDomainSource").CenTransitRouterMulticastDomainSource;
export const CenTransitRouterMulticastDomainSource: typeof import("./cenTransitRouterMulticastDomainSource").CenTransitRouterMulticastDomainSource = null as any;
utilities.lazyLoad(exports, ["CenTransitRouterMulticastDomainSource"], () => require("./cenTransitRouterMulticastDomainSource"));

export { CenTransitRouterPeerAttachmentArgs, CenTransitRouterPeerAttachmentState } from "./cenTransitRouterPeerAttachment";
export type CenTransitRouterPeerAttachment = import("./cenTransitRouterPeerAttachment").CenTransitRouterPeerAttachment;
export const CenTransitRouterPeerAttachment: typeof import("./cenTransitRouterPeerAttachment").CenTransitRouterPeerAttachment = null as any;
utilities.lazyLoad(exports, ["CenTransitRouterPeerAttachment"], () => require("./cenTransitRouterPeerAttachment"));

export { CenTransitRouterPrefixListAssociationArgs, CenTransitRouterPrefixListAssociationState } from "./cenTransitRouterPrefixListAssociation";
export type CenTransitRouterPrefixListAssociation = import("./cenTransitRouterPrefixListAssociation").CenTransitRouterPrefixListAssociation;
export const CenTransitRouterPrefixListAssociation: typeof import("./cenTransitRouterPrefixListAssociation").CenTransitRouterPrefixListAssociation = null as any;
utilities.lazyLoad(exports, ["CenTransitRouterPrefixListAssociation"], () => require("./cenTransitRouterPrefixListAssociation"));

export { CenTransitRouterRouteEntryArgs, CenTransitRouterRouteEntryState } from "./cenTransitRouterRouteEntry";
export type CenTransitRouterRouteEntry = import("./cenTransitRouterRouteEntry").CenTransitRouterRouteEntry;
export const CenTransitRouterRouteEntry: typeof import("./cenTransitRouterRouteEntry").CenTransitRouterRouteEntry = null as any;
utilities.lazyLoad(exports, ["CenTransitRouterRouteEntry"], () => require("./cenTransitRouterRouteEntry"));

export { CenTransitRouterRouteTableArgs, CenTransitRouterRouteTableState } from "./cenTransitRouterRouteTable";
export type CenTransitRouterRouteTable = import("./cenTransitRouterRouteTable").CenTransitRouterRouteTable;
export const CenTransitRouterRouteTable: typeof import("./cenTransitRouterRouteTable").CenTransitRouterRouteTable = null as any;
utilities.lazyLoad(exports, ["CenTransitRouterRouteTable"], () => require("./cenTransitRouterRouteTable"));

export { CenTransitRouterRouteTableAssociationArgs, CenTransitRouterRouteTableAssociationState } from "./cenTransitRouterRouteTableAssociation";
export type CenTransitRouterRouteTableAssociation = import("./cenTransitRouterRouteTableAssociation").CenTransitRouterRouteTableAssociation;
export const CenTransitRouterRouteTableAssociation: typeof import("./cenTransitRouterRouteTableAssociation").CenTransitRouterRouteTableAssociation = null as any;
utilities.lazyLoad(exports, ["CenTransitRouterRouteTableAssociation"], () => require("./cenTransitRouterRouteTableAssociation"));

export { CenTransitRouterRouteTablePropagationArgs, CenTransitRouterRouteTablePropagationState } from "./cenTransitRouterRouteTablePropagation";
export type CenTransitRouterRouteTablePropagation = import("./cenTransitRouterRouteTablePropagation").CenTransitRouterRouteTablePropagation;
export const CenTransitRouterRouteTablePropagation: typeof import("./cenTransitRouterRouteTablePropagation").CenTransitRouterRouteTablePropagation = null as any;
utilities.lazyLoad(exports, ["CenTransitRouterRouteTablePropagation"], () => require("./cenTransitRouterRouteTablePropagation"));

export { CenTransitRouterVbrAttachmentArgs, CenTransitRouterVbrAttachmentState } from "./cenTransitRouterVbrAttachment";
export type CenTransitRouterVbrAttachment = import("./cenTransitRouterVbrAttachment").CenTransitRouterVbrAttachment;
export const CenTransitRouterVbrAttachment: typeof import("./cenTransitRouterVbrAttachment").CenTransitRouterVbrAttachment = null as any;
utilities.lazyLoad(exports, ["CenTransitRouterVbrAttachment"], () => require("./cenTransitRouterVbrAttachment"));

export { CenTransitRouterVpcAttachmentArgs, CenTransitRouterVpcAttachmentState } from "./cenTransitRouterVpcAttachment";
export type CenTransitRouterVpcAttachment = import("./cenTransitRouterVpcAttachment").CenTransitRouterVpcAttachment;
export const CenTransitRouterVpcAttachment: typeof import("./cenTransitRouterVpcAttachment").CenTransitRouterVpcAttachment = null as any;
utilities.lazyLoad(exports, ["CenTransitRouterVpcAttachment"], () => require("./cenTransitRouterVpcAttachment"));

export { CenTransitRouterVpnAttachmentArgs, CenTransitRouterVpnAttachmentState } from "./cenTransitRouterVpnAttachment";
export type CenTransitRouterVpnAttachment = import("./cenTransitRouterVpnAttachment").CenTransitRouterVpnAttachment;
export const CenTransitRouterVpnAttachment: typeof import("./cenTransitRouterVpnAttachment").CenTransitRouterVpnAttachment = null as any;
utilities.lazyLoad(exports, ["CenTransitRouterVpnAttachment"], () => require("./cenTransitRouterVpnAttachment"));

export { CenVbrHealthCheckArgs, CenVbrHealthCheckState } from "./cenVbrHealthCheck";
export type CenVbrHealthCheck = import("./cenVbrHealthCheck").CenVbrHealthCheck;
export const CenVbrHealthCheck: typeof import("./cenVbrHealthCheck").CenVbrHealthCheck = null as any;
utilities.lazyLoad(exports, ["CenVbrHealthCheck"], () => require("./cenVbrHealthCheck"));

export { ChatbotPublishTaskArgs, ChatbotPublishTaskState } from "./chatbotPublishTask";
export type ChatbotPublishTask = import("./chatbotPublishTask").ChatbotPublishTask;
export const ChatbotPublishTask: typeof import("./chatbotPublishTask").ChatbotPublishTask = null as any;
utilities.lazyLoad(exports, ["ChatbotPublishTask"], () => require("./chatbotPublishTask"));

export { ClickHouseAccountArgs, ClickHouseAccountState } from "./clickHouseAccount";
export type ClickHouseAccount = import("./clickHouseAccount").ClickHouseAccount;
export const ClickHouseAccount: typeof import("./clickHouseAccount").ClickHouseAccount = null as any;
utilities.lazyLoad(exports, ["ClickHouseAccount"], () => require("./clickHouseAccount"));

export { ClickHouseBackupPolicyArgs, ClickHouseBackupPolicyState } from "./clickHouseBackupPolicy";
export type ClickHouseBackupPolicy = import("./clickHouseBackupPolicy").ClickHouseBackupPolicy;
export const ClickHouseBackupPolicy: typeof import("./clickHouseBackupPolicy").ClickHouseBackupPolicy = null as any;
utilities.lazyLoad(exports, ["ClickHouseBackupPolicy"], () => require("./clickHouseBackupPolicy"));

export { ClickHouseDbClusterArgs, ClickHouseDbClusterState } from "./clickHouseDbCluster";
export type ClickHouseDbCluster = import("./clickHouseDbCluster").ClickHouseDbCluster;
export const ClickHouseDbCluster: typeof import("./clickHouseDbCluster").ClickHouseDbCluster = null as any;
utilities.lazyLoad(exports, ["ClickHouseDbCluster"], () => require("./clickHouseDbCluster"));

export { CloudConnectNetworkArgs, CloudConnectNetworkState } from "./cloudConnectNetwork";
export type CloudConnectNetwork = import("./cloudConnectNetwork").CloudConnectNetwork;
export const CloudConnectNetwork: typeof import("./cloudConnectNetwork").CloudConnectNetwork = null as any;
utilities.lazyLoad(exports, ["CloudConnectNetwork"], () => require("./cloudConnectNetwork"));

export { CloudConnectNetworkAttachmentArgs, CloudConnectNetworkAttachmentState } from "./cloudConnectNetworkAttachment";
export type CloudConnectNetworkAttachment = import("./cloudConnectNetworkAttachment").CloudConnectNetworkAttachment;
export const CloudConnectNetworkAttachment: typeof import("./cloudConnectNetworkAttachment").CloudConnectNetworkAttachment = null as any;
utilities.lazyLoad(exports, ["CloudConnectNetworkAttachment"], () => require("./cloudConnectNetworkAttachment"));

export { CloudConnectNetworkGrantArgs, CloudConnectNetworkGrantState } from "./cloudConnectNetworkGrant";
export type CloudConnectNetworkGrant = import("./cloudConnectNetworkGrant").CloudConnectNetworkGrant;
export const CloudConnectNetworkGrant: typeof import("./cloudConnectNetworkGrant").CloudConnectNetworkGrant = null as any;
utilities.lazyLoad(exports, ["CloudConnectNetworkGrant"], () => require("./cloudConnectNetworkGrant"));

export { CloudFirewallAddressBookArgs, CloudFirewallAddressBookState } from "./cloudFirewallAddressBook";
export type CloudFirewallAddressBook = import("./cloudFirewallAddressBook").CloudFirewallAddressBook;
export const CloudFirewallAddressBook: typeof import("./cloudFirewallAddressBook").CloudFirewallAddressBook = null as any;
utilities.lazyLoad(exports, ["CloudFirewallAddressBook"], () => require("./cloudFirewallAddressBook"));

export { CloudFirewallControlPolicyArgs, CloudFirewallControlPolicyState } from "./cloudFirewallControlPolicy";
export type CloudFirewallControlPolicy = import("./cloudFirewallControlPolicy").CloudFirewallControlPolicy;
export const CloudFirewallControlPolicy: typeof import("./cloudFirewallControlPolicy").CloudFirewallControlPolicy = null as any;
utilities.lazyLoad(exports, ["CloudFirewallControlPolicy"], () => require("./cloudFirewallControlPolicy"));

export { CloudFirewallControlPolicyOrderArgs, CloudFirewallControlPolicyOrderState } from "./cloudFirewallControlPolicyOrder";
export type CloudFirewallControlPolicyOrder = import("./cloudFirewallControlPolicyOrder").CloudFirewallControlPolicyOrder;
export const CloudFirewallControlPolicyOrder: typeof import("./cloudFirewallControlPolicyOrder").CloudFirewallControlPolicyOrder = null as any;
utilities.lazyLoad(exports, ["CloudFirewallControlPolicyOrder"], () => require("./cloudFirewallControlPolicyOrder"));

export { CloudFirewallInstanceArgs, CloudFirewallInstanceState } from "./cloudFirewallInstance";
export type CloudFirewallInstance = import("./cloudFirewallInstance").CloudFirewallInstance;
export const CloudFirewallInstance: typeof import("./cloudFirewallInstance").CloudFirewallInstance = null as any;
utilities.lazyLoad(exports, ["CloudFirewallInstance"], () => require("./cloudFirewallInstance"));

export { CloudFirewallInstanceMemberArgs, CloudFirewallInstanceMemberState } from "./cloudFirewallInstanceMember";
export type CloudFirewallInstanceMember = import("./cloudFirewallInstanceMember").CloudFirewallInstanceMember;
export const CloudFirewallInstanceMember: typeof import("./cloudFirewallInstanceMember").CloudFirewallInstanceMember = null as any;
utilities.lazyLoad(exports, ["CloudFirewallInstanceMember"], () => require("./cloudFirewallInstanceMember"));

export { CloudFirewallNatFirewallArgs, CloudFirewallNatFirewallState } from "./cloudFirewallNatFirewall";
export type CloudFirewallNatFirewall = import("./cloudFirewallNatFirewall").CloudFirewallNatFirewall;
export const CloudFirewallNatFirewall: typeof import("./cloudFirewallNatFirewall").CloudFirewallNatFirewall = null as any;
utilities.lazyLoad(exports, ["CloudFirewallNatFirewall"], () => require("./cloudFirewallNatFirewall"));

export { CloudFirewallNatFirewallControlPolicyArgs, CloudFirewallNatFirewallControlPolicyState } from "./cloudFirewallNatFirewallControlPolicy";
export type CloudFirewallNatFirewallControlPolicy = import("./cloudFirewallNatFirewallControlPolicy").CloudFirewallNatFirewallControlPolicy;
export const CloudFirewallNatFirewallControlPolicy: typeof import("./cloudFirewallNatFirewallControlPolicy").CloudFirewallNatFirewallControlPolicy = null as any;
utilities.lazyLoad(exports, ["CloudFirewallNatFirewallControlPolicy"], () => require("./cloudFirewallNatFirewallControlPolicy"));

export { CloudFirewallVpcCenTrFirewallArgs, CloudFirewallVpcCenTrFirewallState } from "./cloudFirewallVpcCenTrFirewall";
export type CloudFirewallVpcCenTrFirewall = import("./cloudFirewallVpcCenTrFirewall").CloudFirewallVpcCenTrFirewall;
export const CloudFirewallVpcCenTrFirewall: typeof import("./cloudFirewallVpcCenTrFirewall").CloudFirewallVpcCenTrFirewall = null as any;
utilities.lazyLoad(exports, ["CloudFirewallVpcCenTrFirewall"], () => require("./cloudFirewallVpcCenTrFirewall"));

export { CloudFirewallVpcFirewallArgs, CloudFirewallVpcFirewallState } from "./cloudFirewallVpcFirewall";
export type CloudFirewallVpcFirewall = import("./cloudFirewallVpcFirewall").CloudFirewallVpcFirewall;
export const CloudFirewallVpcFirewall: typeof import("./cloudFirewallVpcFirewall").CloudFirewallVpcFirewall = null as any;
utilities.lazyLoad(exports, ["CloudFirewallVpcFirewall"], () => require("./cloudFirewallVpcFirewall"));

export { CloudFirewallVpcFirewallCenArgs, CloudFirewallVpcFirewallCenState } from "./cloudFirewallVpcFirewallCen";
export type CloudFirewallVpcFirewallCen = import("./cloudFirewallVpcFirewallCen").CloudFirewallVpcFirewallCen;
export const CloudFirewallVpcFirewallCen: typeof import("./cloudFirewallVpcFirewallCen").CloudFirewallVpcFirewallCen = null as any;
utilities.lazyLoad(exports, ["CloudFirewallVpcFirewallCen"], () => require("./cloudFirewallVpcFirewallCen"));

export { CloudFirewallVpcFirewallControlPolicyArgs, CloudFirewallVpcFirewallControlPolicyState } from "./cloudFirewallVpcFirewallControlPolicy";
export type CloudFirewallVpcFirewallControlPolicy = import("./cloudFirewallVpcFirewallControlPolicy").CloudFirewallVpcFirewallControlPolicy;
export const CloudFirewallVpcFirewallControlPolicy: typeof import("./cloudFirewallVpcFirewallControlPolicy").CloudFirewallVpcFirewallControlPolicy = null as any;
utilities.lazyLoad(exports, ["CloudFirewallVpcFirewallControlPolicy"], () => require("./cloudFirewallVpcFirewallControlPolicy"));

export { CloudMonitorServiceBasicPublicArgs, CloudMonitorServiceBasicPublicState } from "./cloudMonitorServiceBasicPublic";
export type CloudMonitorServiceBasicPublic = import("./cloudMonitorServiceBasicPublic").CloudMonitorServiceBasicPublic;
export const CloudMonitorServiceBasicPublic: typeof import("./cloudMonitorServiceBasicPublic").CloudMonitorServiceBasicPublic = null as any;
utilities.lazyLoad(exports, ["CloudMonitorServiceBasicPublic"], () => require("./cloudMonitorServiceBasicPublic"));

export { CloudMonitorServiceEnterprisePublicArgs, CloudMonitorServiceEnterprisePublicState } from "./cloudMonitorServiceEnterprisePublic";
export type CloudMonitorServiceEnterprisePublic = import("./cloudMonitorServiceEnterprisePublic").CloudMonitorServiceEnterprisePublic;
export const CloudMonitorServiceEnterprisePublic: typeof import("./cloudMonitorServiceEnterprisePublic").CloudMonitorServiceEnterprisePublic = null as any;
utilities.lazyLoad(exports, ["CloudMonitorServiceEnterprisePublic"], () => require("./cloudMonitorServiceEnterprisePublic"));

export { CloudMonitorServiceGroupMonitoringAgentProcessArgs, CloudMonitorServiceGroupMonitoringAgentProcessState } from "./cloudMonitorServiceGroupMonitoringAgentProcess";
export type CloudMonitorServiceGroupMonitoringAgentProcess = import("./cloudMonitorServiceGroupMonitoringAgentProcess").CloudMonitorServiceGroupMonitoringAgentProcess;
export const CloudMonitorServiceGroupMonitoringAgentProcess: typeof import("./cloudMonitorServiceGroupMonitoringAgentProcess").CloudMonitorServiceGroupMonitoringAgentProcess = null as any;
utilities.lazyLoad(exports, ["CloudMonitorServiceGroupMonitoringAgentProcess"], () => require("./cloudMonitorServiceGroupMonitoringAgentProcess"));

export { CloudMonitorServiceHybridDoubleWriteArgs, CloudMonitorServiceHybridDoubleWriteState } from "./cloudMonitorServiceHybridDoubleWrite";
export type CloudMonitorServiceHybridDoubleWrite = import("./cloudMonitorServiceHybridDoubleWrite").CloudMonitorServiceHybridDoubleWrite;
export const CloudMonitorServiceHybridDoubleWrite: typeof import("./cloudMonitorServiceHybridDoubleWrite").CloudMonitorServiceHybridDoubleWrite = null as any;
utilities.lazyLoad(exports, ["CloudMonitorServiceHybridDoubleWrite"], () => require("./cloudMonitorServiceHybridDoubleWrite"));

export { CloudMonitorServiceMonitoringAgentProcessArgs, CloudMonitorServiceMonitoringAgentProcessState } from "./cloudMonitorServiceMonitoringAgentProcess";
export type CloudMonitorServiceMonitoringAgentProcess = import("./cloudMonitorServiceMonitoringAgentProcess").CloudMonitorServiceMonitoringAgentProcess;
export const CloudMonitorServiceMonitoringAgentProcess: typeof import("./cloudMonitorServiceMonitoringAgentProcess").CloudMonitorServiceMonitoringAgentProcess = null as any;
utilities.lazyLoad(exports, ["CloudMonitorServiceMonitoringAgentProcess"], () => require("./cloudMonitorServiceMonitoringAgentProcess"));

export { CloudSsoAccessAssignmentArgs, CloudSsoAccessAssignmentState } from "./cloudSsoAccessAssignment";
export type CloudSsoAccessAssignment = import("./cloudSsoAccessAssignment").CloudSsoAccessAssignment;
export const CloudSsoAccessAssignment: typeof import("./cloudSsoAccessAssignment").CloudSsoAccessAssignment = null as any;
utilities.lazyLoad(exports, ["CloudSsoAccessAssignment"], () => require("./cloudSsoAccessAssignment"));

export { CloudSsoAccessConfigurationArgs, CloudSsoAccessConfigurationState } from "./cloudSsoAccessConfiguration";
export type CloudSsoAccessConfiguration = import("./cloudSsoAccessConfiguration").CloudSsoAccessConfiguration;
export const CloudSsoAccessConfiguration: typeof import("./cloudSsoAccessConfiguration").CloudSsoAccessConfiguration = null as any;
utilities.lazyLoad(exports, ["CloudSsoAccessConfiguration"], () => require("./cloudSsoAccessConfiguration"));

export { CloudSsoAccessConfigurationProvisioningArgs, CloudSsoAccessConfigurationProvisioningState } from "./cloudSsoAccessConfigurationProvisioning";
export type CloudSsoAccessConfigurationProvisioning = import("./cloudSsoAccessConfigurationProvisioning").CloudSsoAccessConfigurationProvisioning;
export const CloudSsoAccessConfigurationProvisioning: typeof import("./cloudSsoAccessConfigurationProvisioning").CloudSsoAccessConfigurationProvisioning = null as any;
utilities.lazyLoad(exports, ["CloudSsoAccessConfigurationProvisioning"], () => require("./cloudSsoAccessConfigurationProvisioning"));

export { CloudSsoDirectoryArgs, CloudSsoDirectoryState } from "./cloudSsoDirectory";
export type CloudSsoDirectory = import("./cloudSsoDirectory").CloudSsoDirectory;
export const CloudSsoDirectory: typeof import("./cloudSsoDirectory").CloudSsoDirectory = null as any;
utilities.lazyLoad(exports, ["CloudSsoDirectory"], () => require("./cloudSsoDirectory"));

export { CloudSsoGroupArgs, CloudSsoGroupState } from "./cloudSsoGroup";
export type CloudSsoGroup = import("./cloudSsoGroup").CloudSsoGroup;
export const CloudSsoGroup: typeof import("./cloudSsoGroup").CloudSsoGroup = null as any;
utilities.lazyLoad(exports, ["CloudSsoGroup"], () => require("./cloudSsoGroup"));

export { CloudSsoScimServerCredentialArgs, CloudSsoScimServerCredentialState } from "./cloudSsoScimServerCredential";
export type CloudSsoScimServerCredential = import("./cloudSsoScimServerCredential").CloudSsoScimServerCredential;
export const CloudSsoScimServerCredential: typeof import("./cloudSsoScimServerCredential").CloudSsoScimServerCredential = null as any;
utilities.lazyLoad(exports, ["CloudSsoScimServerCredential"], () => require("./cloudSsoScimServerCredential"));

export { CloudSsoUserArgs, CloudSsoUserState } from "./cloudSsoUser";
export type CloudSsoUser = import("./cloudSsoUser").CloudSsoUser;
export const CloudSsoUser: typeof import("./cloudSsoUser").CloudSsoUser = null as any;
utilities.lazyLoad(exports, ["CloudSsoUser"], () => require("./cloudSsoUser"));

export { CloudSsoUserAttachmentArgs, CloudSsoUserAttachmentState } from "./cloudSsoUserAttachment";
export type CloudSsoUserAttachment = import("./cloudSsoUserAttachment").CloudSsoUserAttachment;
export const CloudSsoUserAttachment: typeof import("./cloudSsoUserAttachment").CloudSsoUserAttachment = null as any;
utilities.lazyLoad(exports, ["CloudSsoUserAttachment"], () => require("./cloudSsoUserAttachment"));

export { CloudStorageGatewayExpressSyncArgs, CloudStorageGatewayExpressSyncState } from "./cloudStorageGatewayExpressSync";
export type CloudStorageGatewayExpressSync = import("./cloudStorageGatewayExpressSync").CloudStorageGatewayExpressSync;
export const CloudStorageGatewayExpressSync: typeof import("./cloudStorageGatewayExpressSync").CloudStorageGatewayExpressSync = null as any;
utilities.lazyLoad(exports, ["CloudStorageGatewayExpressSync"], () => require("./cloudStorageGatewayExpressSync"));

export { CloudStorageGatewayExpressSyncShareAttachmentArgs, CloudStorageGatewayExpressSyncShareAttachmentState } from "./cloudStorageGatewayExpressSyncShareAttachment";
export type CloudStorageGatewayExpressSyncShareAttachment = import("./cloudStorageGatewayExpressSyncShareAttachment").CloudStorageGatewayExpressSyncShareAttachment;
export const CloudStorageGatewayExpressSyncShareAttachment: typeof import("./cloudStorageGatewayExpressSyncShareAttachment").CloudStorageGatewayExpressSyncShareAttachment = null as any;
utilities.lazyLoad(exports, ["CloudStorageGatewayExpressSyncShareAttachment"], () => require("./cloudStorageGatewayExpressSyncShareAttachment"));

export { CloudStorageGatewayGatewayArgs, CloudStorageGatewayGatewayState } from "./cloudStorageGatewayGateway";
export type CloudStorageGatewayGateway = import("./cloudStorageGatewayGateway").CloudStorageGatewayGateway;
export const CloudStorageGatewayGateway: typeof import("./cloudStorageGatewayGateway").CloudStorageGatewayGateway = null as any;
utilities.lazyLoad(exports, ["CloudStorageGatewayGateway"], () => require("./cloudStorageGatewayGateway"));

export { CloudStorageGatewayGatewayBlockVolumeArgs, CloudStorageGatewayGatewayBlockVolumeState } from "./cloudStorageGatewayGatewayBlockVolume";
export type CloudStorageGatewayGatewayBlockVolume = import("./cloudStorageGatewayGatewayBlockVolume").CloudStorageGatewayGatewayBlockVolume;
export const CloudStorageGatewayGatewayBlockVolume: typeof import("./cloudStorageGatewayGatewayBlockVolume").CloudStorageGatewayGatewayBlockVolume = null as any;
utilities.lazyLoad(exports, ["CloudStorageGatewayGatewayBlockVolume"], () => require("./cloudStorageGatewayGatewayBlockVolume"));

export { CloudStorageGatewayGatewayCacheDiskArgs, CloudStorageGatewayGatewayCacheDiskState } from "./cloudStorageGatewayGatewayCacheDisk";
export type CloudStorageGatewayGatewayCacheDisk = import("./cloudStorageGatewayGatewayCacheDisk").CloudStorageGatewayGatewayCacheDisk;
export const CloudStorageGatewayGatewayCacheDisk: typeof import("./cloudStorageGatewayGatewayCacheDisk").CloudStorageGatewayGatewayCacheDisk = null as any;
utilities.lazyLoad(exports, ["CloudStorageGatewayGatewayCacheDisk"], () => require("./cloudStorageGatewayGatewayCacheDisk"));

export { CloudStorageGatewayGatewayFileShareArgs, CloudStorageGatewayGatewayFileShareState } from "./cloudStorageGatewayGatewayFileShare";
export type CloudStorageGatewayGatewayFileShare = import("./cloudStorageGatewayGatewayFileShare").CloudStorageGatewayGatewayFileShare;
export const CloudStorageGatewayGatewayFileShare: typeof import("./cloudStorageGatewayGatewayFileShare").CloudStorageGatewayGatewayFileShare = null as any;
utilities.lazyLoad(exports, ["CloudStorageGatewayGatewayFileShare"], () => require("./cloudStorageGatewayGatewayFileShare"));

export { CloudStorageGatewayGatewayLoggingArgs, CloudStorageGatewayGatewayLoggingState } from "./cloudStorageGatewayGatewayLogging";
export type CloudStorageGatewayGatewayLogging = import("./cloudStorageGatewayGatewayLogging").CloudStorageGatewayGatewayLogging;
export const CloudStorageGatewayGatewayLogging: typeof import("./cloudStorageGatewayGatewayLogging").CloudStorageGatewayGatewayLogging = null as any;
utilities.lazyLoad(exports, ["CloudStorageGatewayGatewayLogging"], () => require("./cloudStorageGatewayGatewayLogging"));

export { CloudStorageGatewayGatewaySmbUserArgs, CloudStorageGatewayGatewaySmbUserState } from "./cloudStorageGatewayGatewaySmbUser";
export type CloudStorageGatewayGatewaySmbUser = import("./cloudStorageGatewayGatewaySmbUser").CloudStorageGatewayGatewaySmbUser;
export const CloudStorageGatewayGatewaySmbUser: typeof import("./cloudStorageGatewayGatewaySmbUser").CloudStorageGatewayGatewaySmbUser = null as any;
utilities.lazyLoad(exports, ["CloudStorageGatewayGatewaySmbUser"], () => require("./cloudStorageGatewayGatewaySmbUser"));

export { CloudStorageGatewayStorageBundleArgs, CloudStorageGatewayStorageBundleState } from "./cloudStorageGatewayStorageBundle";
export type CloudStorageGatewayStorageBundle = import("./cloudStorageGatewayStorageBundle").CloudStorageGatewayStorageBundle;
export const CloudStorageGatewayStorageBundle: typeof import("./cloudStorageGatewayStorageBundle").CloudStorageGatewayStorageBundle = null as any;
utilities.lazyLoad(exports, ["CloudStorageGatewayStorageBundle"], () => require("./cloudStorageGatewayStorageBundle"));

export { CloudauthFaceConfigArgs, CloudauthFaceConfigState } from "./cloudauthFaceConfig";
export type CloudauthFaceConfig = import("./cloudauthFaceConfig").CloudauthFaceConfig;
export const CloudauthFaceConfig: typeof import("./cloudauthFaceConfig").CloudauthFaceConfig = null as any;
utilities.lazyLoad(exports, ["CloudauthFaceConfig"], () => require("./cloudauthFaceConfig"));

export { CmsAlarmArgs, CmsAlarmState } from "./cmsAlarm";
export type CmsAlarm = import("./cmsAlarm").CmsAlarm;
export const CmsAlarm: typeof import("./cmsAlarm").CmsAlarm = null as any;
utilities.lazyLoad(exports, ["CmsAlarm"], () => require("./cmsAlarm"));

export { CmsAlarmContactArgs, CmsAlarmContactState } from "./cmsAlarmContact";
export type CmsAlarmContact = import("./cmsAlarmContact").CmsAlarmContact;
export const CmsAlarmContact: typeof import("./cmsAlarmContact").CmsAlarmContact = null as any;
utilities.lazyLoad(exports, ["CmsAlarmContact"], () => require("./cmsAlarmContact"));

export { CmsAlarmContactGroupArgs, CmsAlarmContactGroupState } from "./cmsAlarmContactGroup";
export type CmsAlarmContactGroup = import("./cmsAlarmContactGroup").CmsAlarmContactGroup;
export const CmsAlarmContactGroup: typeof import("./cmsAlarmContactGroup").CmsAlarmContactGroup = null as any;
utilities.lazyLoad(exports, ["CmsAlarmContactGroup"], () => require("./cmsAlarmContactGroup"));

export { CmsDynamicTagGroupArgs, CmsDynamicTagGroupState } from "./cmsDynamicTagGroup";
export type CmsDynamicTagGroup = import("./cmsDynamicTagGroup").CmsDynamicTagGroup;
export const CmsDynamicTagGroup: typeof import("./cmsDynamicTagGroup").CmsDynamicTagGroup = null as any;
utilities.lazyLoad(exports, ["CmsDynamicTagGroup"], () => require("./cmsDynamicTagGroup"));

export { CmsEventRuleArgs, CmsEventRuleState } from "./cmsEventRule";
export type CmsEventRule = import("./cmsEventRule").CmsEventRule;
export const CmsEventRule: typeof import("./cmsEventRule").CmsEventRule = null as any;
utilities.lazyLoad(exports, ["CmsEventRule"], () => require("./cmsEventRule"));

export { CmsGroupMetricRuleArgs, CmsGroupMetricRuleState } from "./cmsGroupMetricRule";
export type CmsGroupMetricRule = import("./cmsGroupMetricRule").CmsGroupMetricRule;
export const CmsGroupMetricRule: typeof import("./cmsGroupMetricRule").CmsGroupMetricRule = null as any;
utilities.lazyLoad(exports, ["CmsGroupMetricRule"], () => require("./cmsGroupMetricRule"));

export { CmsHybridMonitorFcTaskArgs, CmsHybridMonitorFcTaskState } from "./cmsHybridMonitorFcTask";
export type CmsHybridMonitorFcTask = import("./cmsHybridMonitorFcTask").CmsHybridMonitorFcTask;
export const CmsHybridMonitorFcTask: typeof import("./cmsHybridMonitorFcTask").CmsHybridMonitorFcTask = null as any;
utilities.lazyLoad(exports, ["CmsHybridMonitorFcTask"], () => require("./cmsHybridMonitorFcTask"));

export { CmsHybridMonitorSlsTaskArgs, CmsHybridMonitorSlsTaskState } from "./cmsHybridMonitorSlsTask";
export type CmsHybridMonitorSlsTask = import("./cmsHybridMonitorSlsTask").CmsHybridMonitorSlsTask;
export const CmsHybridMonitorSlsTask: typeof import("./cmsHybridMonitorSlsTask").CmsHybridMonitorSlsTask = null as any;
utilities.lazyLoad(exports, ["CmsHybridMonitorSlsTask"], () => require("./cmsHybridMonitorSlsTask"));

export { CmsMetricRuleBlackListArgs, CmsMetricRuleBlackListState } from "./cmsMetricRuleBlackList";
export type CmsMetricRuleBlackList = import("./cmsMetricRuleBlackList").CmsMetricRuleBlackList;
export const CmsMetricRuleBlackList: typeof import("./cmsMetricRuleBlackList").CmsMetricRuleBlackList = null as any;
utilities.lazyLoad(exports, ["CmsMetricRuleBlackList"], () => require("./cmsMetricRuleBlackList"));

export { CmsMetricRuleTemplateArgs, CmsMetricRuleTemplateState } from "./cmsMetricRuleTemplate";
export type CmsMetricRuleTemplate = import("./cmsMetricRuleTemplate").CmsMetricRuleTemplate;
export const CmsMetricRuleTemplate: typeof import("./cmsMetricRuleTemplate").CmsMetricRuleTemplate = null as any;
utilities.lazyLoad(exports, ["CmsMetricRuleTemplate"], () => require("./cmsMetricRuleTemplate"));

export { CmsMonitorGroupArgs, CmsMonitorGroupState } from "./cmsMonitorGroup";
export type CmsMonitorGroup = import("./cmsMonitorGroup").CmsMonitorGroup;
export const CmsMonitorGroup: typeof import("./cmsMonitorGroup").CmsMonitorGroup = null as any;
utilities.lazyLoad(exports, ["CmsMonitorGroup"], () => require("./cmsMonitorGroup"));

export { CmsMonitorGroupInstancesArgs, CmsMonitorGroupInstancesState } from "./cmsMonitorGroupInstances";
export type CmsMonitorGroupInstances = import("./cmsMonitorGroupInstances").CmsMonitorGroupInstances;
export const CmsMonitorGroupInstances: typeof import("./cmsMonitorGroupInstances").CmsMonitorGroupInstances = null as any;
utilities.lazyLoad(exports, ["CmsMonitorGroupInstances"], () => require("./cmsMonitorGroupInstances"));

export { CmsNamespaceArgs, CmsNamespaceState } from "./cmsNamespace";
export type CmsNamespace = import("./cmsNamespace").CmsNamespace;
export const CmsNamespace: typeof import("./cmsNamespace").CmsNamespace = null as any;
utilities.lazyLoad(exports, ["CmsNamespace"], () => require("./cmsNamespace"));

export { CmsSiteMonitorArgs, CmsSiteMonitorState } from "./cmsSiteMonitor";
export type CmsSiteMonitor = import("./cmsSiteMonitor").CmsSiteMonitor;
export const CmsSiteMonitor: typeof import("./cmsSiteMonitor").CmsSiteMonitor = null as any;
utilities.lazyLoad(exports, ["CmsSiteMonitor"], () => require("./cmsSiteMonitor"));

export { CmsSlsGroupArgs, CmsSlsGroupState } from "./cmsSlsGroup";
export type CmsSlsGroup = import("./cmsSlsGroup").CmsSlsGroup;
export const CmsSlsGroup: typeof import("./cmsSlsGroup").CmsSlsGroup = null as any;
utilities.lazyLoad(exports, ["CmsSlsGroup"], () => require("./cmsSlsGroup"));

export { CommonBandwidthPackageArgs, CommonBandwidthPackageState } from "./commonBandwidthPackage";
export type CommonBandwidthPackage = import("./commonBandwidthPackage").CommonBandwidthPackage;
export const CommonBandwidthPackage: typeof import("./commonBandwidthPackage").CommonBandwidthPackage = null as any;
utilities.lazyLoad(exports, ["CommonBandwidthPackage"], () => require("./commonBandwidthPackage"));

export { CommonBandwidthPackageAttachmentArgs, CommonBandwidthPackageAttachmentState } from "./commonBandwidthPackageAttachment";
export type CommonBandwidthPackageAttachment = import("./commonBandwidthPackageAttachment").CommonBandwidthPackageAttachment;
export const CommonBandwidthPackageAttachment: typeof import("./commonBandwidthPackageAttachment").CommonBandwidthPackageAttachment = null as any;
utilities.lazyLoad(exports, ["CommonBandwidthPackageAttachment"], () => require("./commonBandwidthPackageAttachment"));

export { ComputeNestServiceInstanceArgs, ComputeNestServiceInstanceState } from "./computeNestServiceInstance";
export type ComputeNestServiceInstance = import("./computeNestServiceInstance").ComputeNestServiceInstance;
export const ComputeNestServiceInstance: typeof import("./computeNestServiceInstance").ComputeNestServiceInstance = null as any;
utilities.lazyLoad(exports, ["ComputeNestServiceInstance"], () => require("./computeNestServiceInstance"));

export { ConfigAggregateCompliancePackArgs, ConfigAggregateCompliancePackState } from "./configAggregateCompliancePack";
export type ConfigAggregateCompliancePack = import("./configAggregateCompliancePack").ConfigAggregateCompliancePack;
export const ConfigAggregateCompliancePack: typeof import("./configAggregateCompliancePack").ConfigAggregateCompliancePack = null as any;
utilities.lazyLoad(exports, ["ConfigAggregateCompliancePack"], () => require("./configAggregateCompliancePack"));

export { ConfigAggregateConfigRuleArgs, ConfigAggregateConfigRuleState } from "./configAggregateConfigRule";
export type ConfigAggregateConfigRule = import("./configAggregateConfigRule").ConfigAggregateConfigRule;
export const ConfigAggregateConfigRule: typeof import("./configAggregateConfigRule").ConfigAggregateConfigRule = null as any;
utilities.lazyLoad(exports, ["ConfigAggregateConfigRule"], () => require("./configAggregateConfigRule"));

export { ConfigAggregateDeliveryArgs, ConfigAggregateDeliveryState } from "./configAggregateDelivery";
export type ConfigAggregateDelivery = import("./configAggregateDelivery").ConfigAggregateDelivery;
export const ConfigAggregateDelivery: typeof import("./configAggregateDelivery").ConfigAggregateDelivery = null as any;
utilities.lazyLoad(exports, ["ConfigAggregateDelivery"], () => require("./configAggregateDelivery"));

export { ConfigAggregatorArgs, ConfigAggregatorState } from "./configAggregator";
export type ConfigAggregator = import("./configAggregator").ConfigAggregator;
export const ConfigAggregator: typeof import("./configAggregator").ConfigAggregator = null as any;
utilities.lazyLoad(exports, ["ConfigAggregator"], () => require("./configAggregator"));

export { ConfigCompliancePackArgs, ConfigCompliancePackState } from "./configCompliancePack";
export type ConfigCompliancePack = import("./configCompliancePack").ConfigCompliancePack;
export const ConfigCompliancePack: typeof import("./configCompliancePack").ConfigCompliancePack = null as any;
utilities.lazyLoad(exports, ["ConfigCompliancePack"], () => require("./configCompliancePack"));

export { ConfigConfigurationRecorderArgs, ConfigConfigurationRecorderState } from "./configConfigurationRecorder";
export type ConfigConfigurationRecorder = import("./configConfigurationRecorder").ConfigConfigurationRecorder;
export const ConfigConfigurationRecorder: typeof import("./configConfigurationRecorder").ConfigConfigurationRecorder = null as any;
utilities.lazyLoad(exports, ["ConfigConfigurationRecorder"], () => require("./configConfigurationRecorder"));

export { ConfigDeliveryArgs, ConfigDeliveryState } from "./configDelivery";
export type ConfigDelivery = import("./configDelivery").ConfigDelivery;
export const ConfigDelivery: typeof import("./configDelivery").ConfigDelivery = null as any;
utilities.lazyLoad(exports, ["ConfigDelivery"], () => require("./configDelivery"));

export { ConfigDeliveryChannelArgs, ConfigDeliveryChannelState } from "./configDeliveryChannel";
export type ConfigDeliveryChannel = import("./configDeliveryChannel").ConfigDeliveryChannel;
export const ConfigDeliveryChannel: typeof import("./configDeliveryChannel").ConfigDeliveryChannel = null as any;
utilities.lazyLoad(exports, ["ConfigDeliveryChannel"], () => require("./configDeliveryChannel"));

export { ConfigRemediationArgs, ConfigRemediationState } from "./configRemediation";
export type ConfigRemediation = import("./configRemediation").ConfigRemediation;
export const ConfigRemediation: typeof import("./configRemediation").ConfigRemediation = null as any;
utilities.lazyLoad(exports, ["ConfigRemediation"], () => require("./configRemediation"));

export { ConfigRuleArgs, ConfigRuleState } from "./configRule";
export type ConfigRule = import("./configRule").ConfigRule;
export const ConfigRule: typeof import("./configRule").ConfigRule = null as any;
utilities.lazyLoad(exports, ["ConfigRule"], () => require("./configRule"));

export { ContainerClusterArgs, ContainerClusterState } from "./containerCluster";
export type ContainerCluster = import("./containerCluster").ContainerCluster;
export const ContainerCluster: typeof import("./containerCluster").ContainerCluster = null as any;
utilities.lazyLoad(exports, ["ContainerCluster"], () => require("./containerCluster"));

export { CopyImageArgs, CopyImageState } from "./copyImage";
export type CopyImage = import("./copyImage").CopyImage;
export const CopyImage: typeof import("./copyImage").CopyImage = null as any;
utilities.lazyLoad(exports, ["CopyImage"], () => require("./copyImage"));

export { CrChainArgs, CrChainState } from "./crChain";
export type CrChain = import("./crChain").CrChain;
export const CrChain: typeof import("./crChain").CrChain = null as any;
utilities.lazyLoad(exports, ["CrChain"], () => require("./crChain"));

export { CrChartNamespaceArgs, CrChartNamespaceState } from "./crChartNamespace";
export type CrChartNamespace = import("./crChartNamespace").CrChartNamespace;
export const CrChartNamespace: typeof import("./crChartNamespace").CrChartNamespace = null as any;
utilities.lazyLoad(exports, ["CrChartNamespace"], () => require("./crChartNamespace"));

export { CrChartRepositoryArgs, CrChartRepositoryState } from "./crChartRepository";
export type CrChartRepository = import("./crChartRepository").CrChartRepository;
export const CrChartRepository: typeof import("./crChartRepository").CrChartRepository = null as any;
utilities.lazyLoad(exports, ["CrChartRepository"], () => require("./crChartRepository"));

export { CrEeInstanceArgs, CrEeInstanceState } from "./crEeInstance";
export type CrEeInstance = import("./crEeInstance").CrEeInstance;
export const CrEeInstance: typeof import("./crEeInstance").CrEeInstance = null as any;
utilities.lazyLoad(exports, ["CrEeInstance"], () => require("./crEeInstance"));

export { CrEeNamespaceArgs, CrEeNamespaceState } from "./crEeNamespace";
export type CrEeNamespace = import("./crEeNamespace").CrEeNamespace;
export const CrEeNamespace: typeof import("./crEeNamespace").CrEeNamespace = null as any;
utilities.lazyLoad(exports, ["CrEeNamespace"], () => require("./crEeNamespace"));

export { CrEeRepoArgs, CrEeRepoState } from "./crEeRepo";
export type CrEeRepo = import("./crEeRepo").CrEeRepo;
export const CrEeRepo: typeof import("./crEeRepo").CrEeRepo = null as any;
utilities.lazyLoad(exports, ["CrEeRepo"], () => require("./crEeRepo"));

export { CrEeSyncRuleArgs, CrEeSyncRuleState } from "./crEeSyncRule";
export type CrEeSyncRule = import("./crEeSyncRule").CrEeSyncRule;
export const CrEeSyncRule: typeof import("./crEeSyncRule").CrEeSyncRule = null as any;
utilities.lazyLoad(exports, ["CrEeSyncRule"], () => require("./crEeSyncRule"));

export { CrEndpointAclPolicyArgs, CrEndpointAclPolicyState } from "./crEndpointAclPolicy";
export type CrEndpointAclPolicy = import("./crEndpointAclPolicy").CrEndpointAclPolicy;
export const CrEndpointAclPolicy: typeof import("./crEndpointAclPolicy").CrEndpointAclPolicy = null as any;
utilities.lazyLoad(exports, ["CrEndpointAclPolicy"], () => require("./crEndpointAclPolicy"));

export { CrNamespaceArgs, CrNamespaceState } from "./crNamespace";
export type CrNamespace = import("./crNamespace").CrNamespace;
export const CrNamespace: typeof import("./crNamespace").CrNamespace = null as any;
utilities.lazyLoad(exports, ["CrNamespace"], () => require("./crNamespace"));

export { CrRepoArgs, CrRepoState } from "./crRepo";
export type CrRepo = import("./crRepo").CrRepo;
export const CrRepo: typeof import("./crRepo").CrRepo = null as any;
utilities.lazyLoad(exports, ["CrRepo"], () => require("./crRepo"));

export { CrVpcEndpointLinkedVpcArgs, CrVpcEndpointLinkedVpcState } from "./crVpcEndpointLinkedVpc";
export type CrVpcEndpointLinkedVpc = import("./crVpcEndpointLinkedVpc").CrVpcEndpointLinkedVpc;
export const CrVpcEndpointLinkedVpc: typeof import("./crVpcEndpointLinkedVpc").CrVpcEndpointLinkedVpc = null as any;
utilities.lazyLoad(exports, ["CrVpcEndpointLinkedVpc"], () => require("./crVpcEndpointLinkedVpc"));

export { CsApplicationArgs, CsApplicationState } from "./csApplication";
export type CsApplication = import("./csApplication").CsApplication;
export const CsApplication: typeof import("./csApplication").CsApplication = null as any;
utilities.lazyLoad(exports, ["CsApplication"], () => require("./csApplication"));

export { CsAutoscalingConfigArgs, CsAutoscalingConfigState } from "./csAutoscalingConfig";
export type CsAutoscalingConfig = import("./csAutoscalingConfig").CsAutoscalingConfig;
export const CsAutoscalingConfig: typeof import("./csAutoscalingConfig").CsAutoscalingConfig = null as any;
utilities.lazyLoad(exports, ["CsAutoscalingConfig"], () => require("./csAutoscalingConfig"));

export { CsEdgeKubernetesArgs, CsEdgeKubernetesState } from "./csEdgeKubernetes";
export type CsEdgeKubernetes = import("./csEdgeKubernetes").CsEdgeKubernetes;
export const CsEdgeKubernetes: typeof import("./csEdgeKubernetes").CsEdgeKubernetes = null as any;
utilities.lazyLoad(exports, ["CsEdgeKubernetes"], () => require("./csEdgeKubernetes"));

export { CsKubernetesArgs, CsKubernetesState } from "./csKubernetes";
export type CsKubernetes = import("./csKubernetes").CsKubernetes;
export const CsKubernetes: typeof import("./csKubernetes").CsKubernetes = null as any;
utilities.lazyLoad(exports, ["CsKubernetes"], () => require("./csKubernetes"));

export { CsKubernetesAddonArgs, CsKubernetesAddonState } from "./csKubernetesAddon";
export type CsKubernetesAddon = import("./csKubernetesAddon").CsKubernetesAddon;
export const CsKubernetesAddon: typeof import("./csKubernetesAddon").CsKubernetesAddon = null as any;
utilities.lazyLoad(exports, ["CsKubernetesAddon"], () => require("./csKubernetesAddon"));

export { CsKubernetesAutoscalerArgs, CsKubernetesAutoscalerState } from "./csKubernetesAutoscaler";
export type CsKubernetesAutoscaler = import("./csKubernetesAutoscaler").CsKubernetesAutoscaler;
export const CsKubernetesAutoscaler: typeof import("./csKubernetesAutoscaler").CsKubernetesAutoscaler = null as any;
utilities.lazyLoad(exports, ["CsKubernetesAutoscaler"], () => require("./csKubernetesAutoscaler"));

export { CsKubernetesNodePoolArgs, CsKubernetesNodePoolState } from "./csKubernetesNodePool";
export type CsKubernetesNodePool = import("./csKubernetesNodePool").CsKubernetesNodePool;
export const CsKubernetesNodePool: typeof import("./csKubernetesNodePool").CsKubernetesNodePool = null as any;
utilities.lazyLoad(exports, ["CsKubernetesNodePool"], () => require("./csKubernetesNodePool"));

export { CsKubernetesPermissionsArgs, CsKubernetesPermissionsState } from "./csKubernetesPermissions";
export type CsKubernetesPermissions = import("./csKubernetesPermissions").CsKubernetesPermissions;
export const CsKubernetesPermissions: typeof import("./csKubernetesPermissions").CsKubernetesPermissions = null as any;
utilities.lazyLoad(exports, ["CsKubernetesPermissions"], () => require("./csKubernetesPermissions"));

export { CsManagedKubernetesArgs, CsManagedKubernetesState } from "./csManagedKubernetes";
export type CsManagedKubernetes = import("./csManagedKubernetes").CsManagedKubernetes;
export const CsManagedKubernetes: typeof import("./csManagedKubernetes").CsManagedKubernetes = null as any;
utilities.lazyLoad(exports, ["CsManagedKubernetes"], () => require("./csManagedKubernetes"));

export { CsServerlessKubernetesArgs, CsServerlessKubernetesState } from "./csServerlessKubernetes";
export type CsServerlessKubernetes = import("./csServerlessKubernetes").CsServerlessKubernetes;
export const CsServerlessKubernetes: typeof import("./csServerlessKubernetes").CsServerlessKubernetes = null as any;
utilities.lazyLoad(exports, ["CsServerlessKubernetes"], () => require("./csServerlessKubernetes"));

export { CsSwarmArgs, CsSwarmState } from "./csSwarm";
export type CsSwarm = import("./csSwarm").CsSwarm;
export const CsSwarm: typeof import("./csSwarm").CsSwarm = null as any;
utilities.lazyLoad(exports, ["CsSwarm"], () => require("./csSwarm"));

export { DasSwitchDasProArgs, DasSwitchDasProState } from "./dasSwitchDasPro";
export type DasSwitchDasPro = import("./dasSwitchDasPro").DasSwitchDasPro;
export const DasSwitchDasPro: typeof import("./dasSwitchDasPro").DasSwitchDasPro = null as any;
utilities.lazyLoad(exports, ["DasSwitchDasPro"], () => require("./dasSwitchDasPro"));

export { DataWorksFolderArgs, DataWorksFolderState } from "./dataWorksFolder";
export type DataWorksFolder = import("./dataWorksFolder").DataWorksFolder;
export const DataWorksFolder: typeof import("./dataWorksFolder").DataWorksFolder = null as any;
utilities.lazyLoad(exports, ["DataWorksFolder"], () => require("./dataWorksFolder"));

export { DataWorksProjectArgs, DataWorksProjectState } from "./dataWorksProject";
export type DataWorksProject = import("./dataWorksProject").DataWorksProject;
export const DataWorksProject: typeof import("./dataWorksProject").DataWorksProject = null as any;
utilities.lazyLoad(exports, ["DataWorksProject"], () => require("./dataWorksProject"));

export { DatabaseGatewayGatewayArgs, DatabaseGatewayGatewayState } from "./databaseGatewayGateway";
export type DatabaseGatewayGateway = import("./databaseGatewayGateway").DatabaseGatewayGateway;
export const DatabaseGatewayGateway: typeof import("./databaseGatewayGateway").DatabaseGatewayGateway = null as any;
utilities.lazyLoad(exports, ["DatabaseGatewayGateway"], () => require("./databaseGatewayGateway"));

export { DatahubProjectArgs, DatahubProjectState } from "./datahubProject";
export type DatahubProject = import("./datahubProject").DatahubProject;
export const DatahubProject: typeof import("./datahubProject").DatahubProject = null as any;
utilities.lazyLoad(exports, ["DatahubProject"], () => require("./datahubProject"));

export { DatahubSubscriptionArgs, DatahubSubscriptionState } from "./datahubSubscription";
export type DatahubSubscription = import("./datahubSubscription").DatahubSubscription;
export const DatahubSubscription: typeof import("./datahubSubscription").DatahubSubscription = null as any;
utilities.lazyLoad(exports, ["DatahubSubscription"], () => require("./datahubSubscription"));

export { DatahubTopicArgs, DatahubTopicState } from "./datahubTopic";
export type DatahubTopic = import("./datahubTopic").DatahubTopic;
export const DatahubTopic: typeof import("./datahubTopic").DatahubTopic = null as any;
utilities.lazyLoad(exports, ["DatahubTopic"], () => require("./datahubTopic"));

export { DbAccountArgs, DbAccountState } from "./dbAccount";
export type DbAccount = import("./dbAccount").DbAccount;
export const DbAccount: typeof import("./dbAccount").DbAccount = null as any;
utilities.lazyLoad(exports, ["DbAccount"], () => require("./dbAccount"));

export { DbAccountPrivilegeArgs, DbAccountPrivilegeState } from "./dbAccountPrivilege";
export type DbAccountPrivilege = import("./dbAccountPrivilege").DbAccountPrivilege;
export const DbAccountPrivilege: typeof import("./dbAccountPrivilege").DbAccountPrivilege = null as any;
utilities.lazyLoad(exports, ["DbAccountPrivilege"], () => require("./dbAccountPrivilege"));

export { DbBackupPolicyArgs, DbBackupPolicyState } from "./dbBackupPolicy";
export type DbBackupPolicy = import("./dbBackupPolicy").DbBackupPolicy;
export const DbBackupPolicy: typeof import("./dbBackupPolicy").DbBackupPolicy = null as any;
utilities.lazyLoad(exports, ["DbBackupPolicy"], () => require("./dbBackupPolicy"));

export { DbConnectionArgs, DbConnectionState } from "./dbConnection";
export type DbConnection = import("./dbConnection").DbConnection;
export const DbConnection: typeof import("./dbConnection").DbConnection = null as any;
utilities.lazyLoad(exports, ["DbConnection"], () => require("./dbConnection"));

export { DbDatabaseArgs, DbDatabaseState } from "./dbDatabase";
export type DbDatabase = import("./dbDatabase").DbDatabase;
export const DbDatabase: typeof import("./dbDatabase").DbDatabase = null as any;
utilities.lazyLoad(exports, ["DbDatabase"], () => require("./dbDatabase"));

export { DbInstanceArgs, DbInstanceState } from "./dbInstance";
export type DbInstance = import("./dbInstance").DbInstance;
export const DbInstance: typeof import("./dbInstance").DbInstance = null as any;
utilities.lazyLoad(exports, ["DbInstance"], () => require("./dbInstance"));

export { DbReadWriteSplittingConnectionArgs, DbReadWriteSplittingConnectionState } from "./dbReadWriteSplittingConnection";
export type DbReadWriteSplittingConnection = import("./dbReadWriteSplittingConnection").DbReadWriteSplittingConnection;
export const DbReadWriteSplittingConnection: typeof import("./dbReadWriteSplittingConnection").DbReadWriteSplittingConnection = null as any;
utilities.lazyLoad(exports, ["DbReadWriteSplittingConnection"], () => require("./dbReadWriteSplittingConnection"));

export { DbReadonlyInstanceArgs, DbReadonlyInstanceState } from "./dbReadonlyInstance";
export type DbReadonlyInstance = import("./dbReadonlyInstance").DbReadonlyInstance;
export const DbReadonlyInstance: typeof import("./dbReadonlyInstance").DbReadonlyInstance = null as any;
utilities.lazyLoad(exports, ["DbReadonlyInstance"], () => require("./dbReadonlyInstance"));

export { DbfsAutoSnapShotPolicyArgs, DbfsAutoSnapShotPolicyState } from "./dbfsAutoSnapShotPolicy";
export type DbfsAutoSnapShotPolicy = import("./dbfsAutoSnapShotPolicy").DbfsAutoSnapShotPolicy;
export const DbfsAutoSnapShotPolicy: typeof import("./dbfsAutoSnapShotPolicy").DbfsAutoSnapShotPolicy = null as any;
utilities.lazyLoad(exports, ["DbfsAutoSnapShotPolicy"], () => require("./dbfsAutoSnapShotPolicy"));

export { DbfsInstanceArgs, DbfsInstanceState } from "./dbfsInstance";
export type DbfsInstance = import("./dbfsInstance").DbfsInstance;
export const DbfsInstance: typeof import("./dbfsInstance").DbfsInstance = null as any;
utilities.lazyLoad(exports, ["DbfsInstance"], () => require("./dbfsInstance"));

export { DbfsInstanceAttachmentArgs, DbfsInstanceAttachmentState } from "./dbfsInstanceAttachment";
export type DbfsInstanceAttachment = import("./dbfsInstanceAttachment").DbfsInstanceAttachment;
export const DbfsInstanceAttachment: typeof import("./dbfsInstanceAttachment").DbfsInstanceAttachment = null as any;
utilities.lazyLoad(exports, ["DbfsInstanceAttachment"], () => require("./dbfsInstanceAttachment"));

export { DbfsServiceLinkedRoleArgs, DbfsServiceLinkedRoleState } from "./dbfsServiceLinkedRole";
export type DbfsServiceLinkedRole = import("./dbfsServiceLinkedRole").DbfsServiceLinkedRole;
export const DbfsServiceLinkedRole: typeof import("./dbfsServiceLinkedRole").DbfsServiceLinkedRole = null as any;
utilities.lazyLoad(exports, ["DbfsServiceLinkedRole"], () => require("./dbfsServiceLinkedRole"));

export { DbfsSnapshotArgs, DbfsSnapshotState } from "./dbfsSnapshot";
export type DbfsSnapshot = import("./dbfsSnapshot").DbfsSnapshot;
export const DbfsSnapshot: typeof import("./dbfsSnapshot").DbfsSnapshot = null as any;
utilities.lazyLoad(exports, ["DbfsSnapshot"], () => require("./dbfsSnapshot"));

export { DbsBackupPlanArgs, DbsBackupPlanState } from "./dbsBackupPlan";
export type DbsBackupPlan = import("./dbsBackupPlan").DbsBackupPlan;
export const DbsBackupPlan: typeof import("./dbsBackupPlan").DbsBackupPlan = null as any;
utilities.lazyLoad(exports, ["DbsBackupPlan"], () => require("./dbsBackupPlan"));

export { DcdnDomainArgs, DcdnDomainState } from "./dcdnDomain";
export type DcdnDomain = import("./dcdnDomain").DcdnDomain;
export const DcdnDomain: typeof import("./dcdnDomain").DcdnDomain = null as any;
utilities.lazyLoad(exports, ["DcdnDomain"], () => require("./dcdnDomain"));

export { DcdnDomainConfigArgs, DcdnDomainConfigState } from "./dcdnDomainConfig";
export type DcdnDomainConfig = import("./dcdnDomainConfig").DcdnDomainConfig;
export const DcdnDomainConfig: typeof import("./dcdnDomainConfig").DcdnDomainConfig = null as any;
utilities.lazyLoad(exports, ["DcdnDomainConfig"], () => require("./dcdnDomainConfig"));

export { DcdnErArgs, DcdnErState } from "./dcdnEr";
export type DcdnEr = import("./dcdnEr").DcdnEr;
export const DcdnEr: typeof import("./dcdnEr").DcdnEr = null as any;
utilities.lazyLoad(exports, ["DcdnEr"], () => require("./dcdnEr"));

export { DcdnIpaDomainArgs, DcdnIpaDomainState } from "./dcdnIpaDomain";
export type DcdnIpaDomain = import("./dcdnIpaDomain").DcdnIpaDomain;
export const DcdnIpaDomain: typeof import("./dcdnIpaDomain").DcdnIpaDomain = null as any;
utilities.lazyLoad(exports, ["DcdnIpaDomain"], () => require("./dcdnIpaDomain"));

export { DcdnKvArgs, DcdnKvState } from "./dcdnKv";
export type DcdnKv = import("./dcdnKv").DcdnKv;
export const DcdnKv: typeof import("./dcdnKv").DcdnKv = null as any;
utilities.lazyLoad(exports, ["DcdnKv"], () => require("./dcdnKv"));

export { DcdnKvNamespaceArgs, DcdnKvNamespaceState } from "./dcdnKvNamespace";
export type DcdnKvNamespace = import("./dcdnKvNamespace").DcdnKvNamespace;
export const DcdnKvNamespace: typeof import("./dcdnKvNamespace").DcdnKvNamespace = null as any;
utilities.lazyLoad(exports, ["DcdnKvNamespace"], () => require("./dcdnKvNamespace"));

export { DcdnWafDomainArgs, DcdnWafDomainState } from "./dcdnWafDomain";
export type DcdnWafDomain = import("./dcdnWafDomain").DcdnWafDomain;
export const DcdnWafDomain: typeof import("./dcdnWafDomain").DcdnWafDomain = null as any;
utilities.lazyLoad(exports, ["DcdnWafDomain"], () => require("./dcdnWafDomain"));

export { DcdnWafPolicyArgs, DcdnWafPolicyState } from "./dcdnWafPolicy";
export type DcdnWafPolicy = import("./dcdnWafPolicy").DcdnWafPolicy;
export const DcdnWafPolicy: typeof import("./dcdnWafPolicy").DcdnWafPolicy = null as any;
utilities.lazyLoad(exports, ["DcdnWafPolicy"], () => require("./dcdnWafPolicy"));

export { DcdnWafPolicyDomainAttachmentArgs, DcdnWafPolicyDomainAttachmentState } from "./dcdnWafPolicyDomainAttachment";
export type DcdnWafPolicyDomainAttachment = import("./dcdnWafPolicyDomainAttachment").DcdnWafPolicyDomainAttachment;
export const DcdnWafPolicyDomainAttachment: typeof import("./dcdnWafPolicyDomainAttachment").DcdnWafPolicyDomainAttachment = null as any;
utilities.lazyLoad(exports, ["DcdnWafPolicyDomainAttachment"], () => require("./dcdnWafPolicyDomainAttachment"));

export { DcdnWafRuleArgs, DcdnWafRuleState } from "./dcdnWafRule";
export type DcdnWafRule = import("./dcdnWafRule").DcdnWafRule;
export const DcdnWafRule: typeof import("./dcdnWafRule").DcdnWafRule = null as any;
utilities.lazyLoad(exports, ["DcdnWafRule"], () => require("./dcdnWafRule"));

export { DdosBasicDefenseThresholdArgs, DdosBasicDefenseThresholdState } from "./ddosBasicDefenseThreshold";
export type DdosBasicDefenseThreshold = import("./ddosBasicDefenseThreshold").DdosBasicDefenseThreshold;
export const DdosBasicDefenseThreshold: typeof import("./ddosBasicDefenseThreshold").DdosBasicDefenseThreshold = null as any;
utilities.lazyLoad(exports, ["DdosBasicDefenseThreshold"], () => require("./ddosBasicDefenseThreshold"));

export { DdosBasicThresholdArgs, DdosBasicThresholdState } from "./ddosBasicThreshold";
export type DdosBasicThreshold = import("./ddosBasicThreshold").DdosBasicThreshold;
export const DdosBasicThreshold: typeof import("./ddosBasicThreshold").DdosBasicThreshold = null as any;
utilities.lazyLoad(exports, ["DdosBasicThreshold"], () => require("./ddosBasicThreshold"));

export { DdosBgpPolicyArgs, DdosBgpPolicyState } from "./ddosBgpPolicy";
export type DdosBgpPolicy = import("./ddosBgpPolicy").DdosBgpPolicy;
export const DdosBgpPolicy: typeof import("./ddosBgpPolicy").DdosBgpPolicy = null as any;
utilities.lazyLoad(exports, ["DdosBgpPolicy"], () => require("./ddosBgpPolicy"));

export { DdosbgpInstanceArgs, DdosbgpInstanceState } from "./ddosbgpInstance";
export type DdosbgpInstance = import("./ddosbgpInstance").DdosbgpInstance;
export const DdosbgpInstance: typeof import("./ddosbgpInstance").DdosbgpInstance = null as any;
utilities.lazyLoad(exports, ["DdosbgpInstance"], () => require("./ddosbgpInstance"));

export { DdosbgpIpArgs, DdosbgpIpState } from "./ddosbgpIp";
export type DdosbgpIp = import("./ddosbgpIp").DdosbgpIp;
export const DdosbgpIp: typeof import("./ddosbgpIp").DdosbgpIp = null as any;
utilities.lazyLoad(exports, ["DdosbgpIp"], () => require("./ddosbgpIp"));

export { DdoscooDomainResourceArgs, DdoscooDomainResourceState } from "./ddoscooDomainResource";
export type DdoscooDomainResource = import("./ddoscooDomainResource").DdoscooDomainResource;
export const DdoscooDomainResource: typeof import("./ddoscooDomainResource").DdoscooDomainResource = null as any;
utilities.lazyLoad(exports, ["DdoscooDomainResource"], () => require("./ddoscooDomainResource"));

export { DdoscooInstanceArgs, DdoscooInstanceState } from "./ddoscooInstance";
export type DdoscooInstance = import("./ddoscooInstance").DdoscooInstance;
export const DdoscooInstance: typeof import("./ddoscooInstance").DdoscooInstance = null as any;
utilities.lazyLoad(exports, ["DdoscooInstance"], () => require("./ddoscooInstance"));

export { DdoscooPortArgs, DdoscooPortState } from "./ddoscooPort";
export type DdoscooPort = import("./ddoscooPort").DdoscooPort;
export const DdoscooPort: typeof import("./ddoscooPort").DdoscooPort = null as any;
utilities.lazyLoad(exports, ["DdoscooPort"], () => require("./ddoscooPort"));

export { DdoscooSchedulerRuleArgs, DdoscooSchedulerRuleState } from "./ddoscooSchedulerRule";
export type DdoscooSchedulerRule = import("./ddoscooSchedulerRule").DdoscooSchedulerRule;
export const DdoscooSchedulerRule: typeof import("./ddoscooSchedulerRule").DdoscooSchedulerRule = null as any;
utilities.lazyLoad(exports, ["DdoscooSchedulerRule"], () => require("./ddoscooSchedulerRule"));

export { DfsAccessGroupArgs, DfsAccessGroupState } from "./dfsAccessGroup";
export type DfsAccessGroup = import("./dfsAccessGroup").DfsAccessGroup;
export const DfsAccessGroup: typeof import("./dfsAccessGroup").DfsAccessGroup = null as any;
utilities.lazyLoad(exports, ["DfsAccessGroup"], () => require("./dfsAccessGroup"));

export { DfsAccessRuleArgs, DfsAccessRuleState } from "./dfsAccessRule";
export type DfsAccessRule = import("./dfsAccessRule").DfsAccessRule;
export const DfsAccessRule: typeof import("./dfsAccessRule").DfsAccessRule = null as any;
utilities.lazyLoad(exports, ["DfsAccessRule"], () => require("./dfsAccessRule"));

export { DfsFileSystemArgs, DfsFileSystemState } from "./dfsFileSystem";
export type DfsFileSystem = import("./dfsFileSystem").DfsFileSystem;
export const DfsFileSystem: typeof import("./dfsFileSystem").DfsFileSystem = null as any;
utilities.lazyLoad(exports, ["DfsFileSystem"], () => require("./dfsFileSystem"));

export { DfsMountPointArgs, DfsMountPointState } from "./dfsMountPoint";
export type DfsMountPoint = import("./dfsMountPoint").DfsMountPoint;
export const DfsMountPoint: typeof import("./dfsMountPoint").DfsMountPoint = null as any;
utilities.lazyLoad(exports, ["DfsMountPoint"], () => require("./dfsMountPoint"));

export { DfsVscMountPointArgs, DfsVscMountPointState } from "./dfsVscMountPoint";
export type DfsVscMountPoint = import("./dfsVscMountPoint").DfsVscMountPoint;
export const DfsVscMountPoint: typeof import("./dfsVscMountPoint").DfsVscMountPoint = null as any;
utilities.lazyLoad(exports, ["DfsVscMountPoint"], () => require("./dfsVscMountPoint"));

export { DirectMailDomainArgs, DirectMailDomainState } from "./directMailDomain";
export type DirectMailDomain = import("./directMailDomain").DirectMailDomain;
export const DirectMailDomain: typeof import("./directMailDomain").DirectMailDomain = null as any;
utilities.lazyLoad(exports, ["DirectMailDomain"], () => require("./directMailDomain"));

export { DirectMailMailAddressArgs, DirectMailMailAddressState } from "./directMailMailAddress";
export type DirectMailMailAddress = import("./directMailMailAddress").DirectMailMailAddress;
export const DirectMailMailAddress: typeof import("./directMailMailAddress").DirectMailMailAddress = null as any;
utilities.lazyLoad(exports, ["DirectMailMailAddress"], () => require("./directMailMailAddress"));

export { DirectMailReceiversArgs, DirectMailReceiversState } from "./directMailReceivers";
export type DirectMailReceivers = import("./directMailReceivers").DirectMailReceivers;
export const DirectMailReceivers: typeof import("./directMailReceivers").DirectMailReceivers = null as any;
utilities.lazyLoad(exports, ["DirectMailReceivers"], () => require("./directMailReceivers"));

export { DirectMailTagArgs, DirectMailTagState } from "./directMailTag";
export type DirectMailTag = import("./directMailTag").DirectMailTag;
export const DirectMailTag: typeof import("./directMailTag").DirectMailTag = null as any;
utilities.lazyLoad(exports, ["DirectMailTag"], () => require("./directMailTag"));

export { DiskArgs, DiskState } from "./disk";
export type Disk = import("./disk").Disk;
export const Disk: typeof import("./disk").Disk = null as any;
utilities.lazyLoad(exports, ["Disk"], () => require("./disk"));

export { DiskAttachmentArgs, DiskAttachmentState } from "./diskAttachment";
export type DiskAttachment = import("./diskAttachment").DiskAttachment;
export const DiskAttachment: typeof import("./diskAttachment").DiskAttachment = null as any;
utilities.lazyLoad(exports, ["DiskAttachment"], () => require("./diskAttachment"));

export { DmsEnterpriseAuthorityTemplateArgs, DmsEnterpriseAuthorityTemplateState } from "./dmsEnterpriseAuthorityTemplate";
export type DmsEnterpriseAuthorityTemplate = import("./dmsEnterpriseAuthorityTemplate").DmsEnterpriseAuthorityTemplate;
export const DmsEnterpriseAuthorityTemplate: typeof import("./dmsEnterpriseAuthorityTemplate").DmsEnterpriseAuthorityTemplate = null as any;
utilities.lazyLoad(exports, ["DmsEnterpriseAuthorityTemplate"], () => require("./dmsEnterpriseAuthorityTemplate"));

export { DmsEnterpriseInstanceArgs, DmsEnterpriseInstanceState } from "./dmsEnterpriseInstance";
export type DmsEnterpriseInstance = import("./dmsEnterpriseInstance").DmsEnterpriseInstance;
export const DmsEnterpriseInstance: typeof import("./dmsEnterpriseInstance").DmsEnterpriseInstance = null as any;
utilities.lazyLoad(exports, ["DmsEnterpriseInstance"], () => require("./dmsEnterpriseInstance"));

export { DmsEnterpriseLogicDatabaseArgs, DmsEnterpriseLogicDatabaseState } from "./dmsEnterpriseLogicDatabase";
export type DmsEnterpriseLogicDatabase = import("./dmsEnterpriseLogicDatabase").DmsEnterpriseLogicDatabase;
export const DmsEnterpriseLogicDatabase: typeof import("./dmsEnterpriseLogicDatabase").DmsEnterpriseLogicDatabase = null as any;
utilities.lazyLoad(exports, ["DmsEnterpriseLogicDatabase"], () => require("./dmsEnterpriseLogicDatabase"));

export { DmsEnterpriseProxyArgs, DmsEnterpriseProxyState } from "./dmsEnterpriseProxy";
export type DmsEnterpriseProxy = import("./dmsEnterpriseProxy").DmsEnterpriseProxy;
export const DmsEnterpriseProxy: typeof import("./dmsEnterpriseProxy").DmsEnterpriseProxy = null as any;
utilities.lazyLoad(exports, ["DmsEnterpriseProxy"], () => require("./dmsEnterpriseProxy"));

export { DmsEnterpriseProxyAccessArgs, DmsEnterpriseProxyAccessState } from "./dmsEnterpriseProxyAccess";
export type DmsEnterpriseProxyAccess = import("./dmsEnterpriseProxyAccess").DmsEnterpriseProxyAccess;
export const DmsEnterpriseProxyAccess: typeof import("./dmsEnterpriseProxyAccess").DmsEnterpriseProxyAccess = null as any;
utilities.lazyLoad(exports, ["DmsEnterpriseProxyAccess"], () => require("./dmsEnterpriseProxyAccess"));

export { DmsEnterpriseUserArgs, DmsEnterpriseUserState } from "./dmsEnterpriseUser";
export type DmsEnterpriseUser = import("./dmsEnterpriseUser").DmsEnterpriseUser;
export const DmsEnterpriseUser: typeof import("./dmsEnterpriseUser").DmsEnterpriseUser = null as any;
utilities.lazyLoad(exports, ["DmsEnterpriseUser"], () => require("./dmsEnterpriseUser"));

export { DnsArgs, DnsState } from "./dns";
export type Dns = import("./dns").Dns;
export const Dns: typeof import("./dns").Dns = null as any;
utilities.lazyLoad(exports, ["Dns"], () => require("./dns"));

export { DnsDomainArgs, DnsDomainState } from "./dnsDomain";
export type DnsDomain = import("./dnsDomain").DnsDomain;
export const DnsDomain: typeof import("./dnsDomain").DnsDomain = null as any;
utilities.lazyLoad(exports, ["DnsDomain"], () => require("./dnsDomain"));

export { DnsDomainAttachmentArgs, DnsDomainAttachmentState } from "./dnsDomainAttachment";
export type DnsDomainAttachment = import("./dnsDomainAttachment").DnsDomainAttachment;
export const DnsDomainAttachment: typeof import("./dnsDomainAttachment").DnsDomainAttachment = null as any;
utilities.lazyLoad(exports, ["DnsDomainAttachment"], () => require("./dnsDomainAttachment"));

export { DnsGroupArgs, DnsGroupState } from "./dnsGroup";
export type DnsGroup = import("./dnsGroup").DnsGroup;
export const DnsGroup: typeof import("./dnsGroup").DnsGroup = null as any;
utilities.lazyLoad(exports, ["DnsGroup"], () => require("./dnsGroup"));

export { DnsInstanceArgs, DnsInstanceState } from "./dnsInstance";
export type DnsInstance = import("./dnsInstance").DnsInstance;
export const DnsInstance: typeof import("./dnsInstance").DnsInstance = null as any;
utilities.lazyLoad(exports, ["DnsInstance"], () => require("./dnsInstance"));

export { DnsRecordArgs, DnsRecordState } from "./dnsRecord";
export type DnsRecord = import("./dnsRecord").DnsRecord;
export const DnsRecord: typeof import("./dnsRecord").DnsRecord = null as any;
utilities.lazyLoad(exports, ["DnsRecord"], () => require("./dnsRecord"));

export { DrdsInstanceArgs, DrdsInstanceState } from "./drdsInstance";
export type DrdsInstance = import("./drdsInstance").DrdsInstance;
export const DrdsInstance: typeof import("./drdsInstance").DrdsInstance = null as any;
utilities.lazyLoad(exports, ["DrdsInstance"], () => require("./drdsInstance"));

export { DrdsPolardbxInstanceArgs, DrdsPolardbxInstanceState } from "./drdsPolardbxInstance";
export type DrdsPolardbxInstance = import("./drdsPolardbxInstance").DrdsPolardbxInstance;
export const DrdsPolardbxInstance: typeof import("./drdsPolardbxInstance").DrdsPolardbxInstance = null as any;
utilities.lazyLoad(exports, ["DrdsPolardbxInstance"], () => require("./drdsPolardbxInstance"));

export { DtsConsumerChannelArgs, DtsConsumerChannelState } from "./dtsConsumerChannel";
export type DtsConsumerChannel = import("./dtsConsumerChannel").DtsConsumerChannel;
export const DtsConsumerChannel: typeof import("./dtsConsumerChannel").DtsConsumerChannel = null as any;
utilities.lazyLoad(exports, ["DtsConsumerChannel"], () => require("./dtsConsumerChannel"));

export { DtsInstanceArgs, DtsInstanceState } from "./dtsInstance";
export type DtsInstance = import("./dtsInstance").DtsInstance;
export const DtsInstance: typeof import("./dtsInstance").DtsInstance = null as any;
utilities.lazyLoad(exports, ["DtsInstance"], () => require("./dtsInstance"));

export { DtsJobMonitorRuleArgs, DtsJobMonitorRuleState } from "./dtsJobMonitorRule";
export type DtsJobMonitorRule = import("./dtsJobMonitorRule").DtsJobMonitorRule;
export const DtsJobMonitorRule: typeof import("./dtsJobMonitorRule").DtsJobMonitorRule = null as any;
utilities.lazyLoad(exports, ["DtsJobMonitorRule"], () => require("./dtsJobMonitorRule"));

export { DtsMigrationInstanceArgs, DtsMigrationInstanceState } from "./dtsMigrationInstance";
export type DtsMigrationInstance = import("./dtsMigrationInstance").DtsMigrationInstance;
export const DtsMigrationInstance: typeof import("./dtsMigrationInstance").DtsMigrationInstance = null as any;
utilities.lazyLoad(exports, ["DtsMigrationInstance"], () => require("./dtsMigrationInstance"));

export { DtsMigrationJobArgs, DtsMigrationJobState } from "./dtsMigrationJob";
export type DtsMigrationJob = import("./dtsMigrationJob").DtsMigrationJob;
export const DtsMigrationJob: typeof import("./dtsMigrationJob").DtsMigrationJob = null as any;
utilities.lazyLoad(exports, ["DtsMigrationJob"], () => require("./dtsMigrationJob"));

export { DtsSubscriptionJobArgs, DtsSubscriptionJobState } from "./dtsSubscriptionJob";
export type DtsSubscriptionJob = import("./dtsSubscriptionJob").DtsSubscriptionJob;
export const DtsSubscriptionJob: typeof import("./dtsSubscriptionJob").DtsSubscriptionJob = null as any;
utilities.lazyLoad(exports, ["DtsSubscriptionJob"], () => require("./dtsSubscriptionJob"));

export { DtsSynchronizationInstanceArgs, DtsSynchronizationInstanceState } from "./dtsSynchronizationInstance";
export type DtsSynchronizationInstance = import("./dtsSynchronizationInstance").DtsSynchronizationInstance;
export const DtsSynchronizationInstance: typeof import("./dtsSynchronizationInstance").DtsSynchronizationInstance = null as any;
utilities.lazyLoad(exports, ["DtsSynchronizationInstance"], () => require("./dtsSynchronizationInstance"));

export { DtsSynchronizationJobArgs, DtsSynchronizationJobState } from "./dtsSynchronizationJob";
export type DtsSynchronizationJob = import("./dtsSynchronizationJob").DtsSynchronizationJob;
export const DtsSynchronizationJob: typeof import("./dtsSynchronizationJob").DtsSynchronizationJob = null as any;
utilities.lazyLoad(exports, ["DtsSynchronizationJob"], () => require("./dtsSynchronizationJob"));

export { EaisInstanceArgs, EaisInstanceState } from "./eaisInstance";
export type EaisInstance = import("./eaisInstance").EaisInstance;
export const EaisInstance: typeof import("./eaisInstance").EaisInstance = null as any;
utilities.lazyLoad(exports, ["EaisInstance"], () => require("./eaisInstance"));

export { EbsDedicatedBlockStorageClusterArgs, EbsDedicatedBlockStorageClusterState } from "./ebsDedicatedBlockStorageCluster";
export type EbsDedicatedBlockStorageCluster = import("./ebsDedicatedBlockStorageCluster").EbsDedicatedBlockStorageCluster;
export const EbsDedicatedBlockStorageCluster: typeof import("./ebsDedicatedBlockStorageCluster").EbsDedicatedBlockStorageCluster = null as any;
utilities.lazyLoad(exports, ["EbsDedicatedBlockStorageCluster"], () => require("./ebsDedicatedBlockStorageCluster"));

export { EbsDiskReplicaGroupArgs, EbsDiskReplicaGroupState } from "./ebsDiskReplicaGroup";
export type EbsDiskReplicaGroup = import("./ebsDiskReplicaGroup").EbsDiskReplicaGroup;
export const EbsDiskReplicaGroup: typeof import("./ebsDiskReplicaGroup").EbsDiskReplicaGroup = null as any;
utilities.lazyLoad(exports, ["EbsDiskReplicaGroup"], () => require("./ebsDiskReplicaGroup"));

export { EbsDiskReplicaPairArgs, EbsDiskReplicaPairState } from "./ebsDiskReplicaPair";
export type EbsDiskReplicaPair = import("./ebsDiskReplicaPair").EbsDiskReplicaPair;
export const EbsDiskReplicaPair: typeof import("./ebsDiskReplicaPair").EbsDiskReplicaPair = null as any;
utilities.lazyLoad(exports, ["EbsDiskReplicaPair"], () => require("./ebsDiskReplicaPair"));

export { EbsEnterpriseSnapshotPolicyArgs, EbsEnterpriseSnapshotPolicyState } from "./ebsEnterpriseSnapshotPolicy";
export type EbsEnterpriseSnapshotPolicy = import("./ebsEnterpriseSnapshotPolicy").EbsEnterpriseSnapshotPolicy;
export const EbsEnterpriseSnapshotPolicy: typeof import("./ebsEnterpriseSnapshotPolicy").EbsEnterpriseSnapshotPolicy = null as any;
utilities.lazyLoad(exports, ["EbsEnterpriseSnapshotPolicy"], () => require("./ebsEnterpriseSnapshotPolicy"));

export { EbsEnterpriseSnapshotPolicyAttachmentArgs, EbsEnterpriseSnapshotPolicyAttachmentState } from "./ebsEnterpriseSnapshotPolicyAttachment";
export type EbsEnterpriseSnapshotPolicyAttachment = import("./ebsEnterpriseSnapshotPolicyAttachment").EbsEnterpriseSnapshotPolicyAttachment;
export const EbsEnterpriseSnapshotPolicyAttachment: typeof import("./ebsEnterpriseSnapshotPolicyAttachment").EbsEnterpriseSnapshotPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["EbsEnterpriseSnapshotPolicyAttachment"], () => require("./ebsEnterpriseSnapshotPolicyAttachment"));

export { EbsReplicaGroupDrillArgs, EbsReplicaGroupDrillState } from "./ebsReplicaGroupDrill";
export type EbsReplicaGroupDrill = import("./ebsReplicaGroupDrill").EbsReplicaGroupDrill;
export const EbsReplicaGroupDrill: typeof import("./ebsReplicaGroupDrill").EbsReplicaGroupDrill = null as any;
utilities.lazyLoad(exports, ["EbsReplicaGroupDrill"], () => require("./ebsReplicaGroupDrill"));

export { EbsReplicaPairDrillArgs, EbsReplicaPairDrillState } from "./ebsReplicaPairDrill";
export type EbsReplicaPairDrill = import("./ebsReplicaPairDrill").EbsReplicaPairDrill;
export const EbsReplicaPairDrill: typeof import("./ebsReplicaPairDrill").EbsReplicaPairDrill = null as any;
utilities.lazyLoad(exports, ["EbsReplicaPairDrill"], () => require("./ebsReplicaPairDrill"));

export { EbsSolutionInstanceArgs, EbsSolutionInstanceState } from "./ebsSolutionInstance";
export type EbsSolutionInstance = import("./ebsSolutionInstance").EbsSolutionInstance;
export const EbsSolutionInstance: typeof import("./ebsSolutionInstance").EbsSolutionInstance = null as any;
utilities.lazyLoad(exports, ["EbsSolutionInstance"], () => require("./ebsSolutionInstance"));

export { EcdAdConnectorDirectoryArgs, EcdAdConnectorDirectoryState } from "./ecdAdConnectorDirectory";
export type EcdAdConnectorDirectory = import("./ecdAdConnectorDirectory").EcdAdConnectorDirectory;
export const EcdAdConnectorDirectory: typeof import("./ecdAdConnectorDirectory").EcdAdConnectorDirectory = null as any;
utilities.lazyLoad(exports, ["EcdAdConnectorDirectory"], () => require("./ecdAdConnectorDirectory"));

export { EcdAdConnectorOfficeSiteArgs, EcdAdConnectorOfficeSiteState } from "./ecdAdConnectorOfficeSite";
export type EcdAdConnectorOfficeSite = import("./ecdAdConnectorOfficeSite").EcdAdConnectorOfficeSite;
export const EcdAdConnectorOfficeSite: typeof import("./ecdAdConnectorOfficeSite").EcdAdConnectorOfficeSite = null as any;
utilities.lazyLoad(exports, ["EcdAdConnectorOfficeSite"], () => require("./ecdAdConnectorOfficeSite"));

export { EcdBundleArgs, EcdBundleState } from "./ecdBundle";
export type EcdBundle = import("./ecdBundle").EcdBundle;
export const EcdBundle: typeof import("./ecdBundle").EcdBundle = null as any;
utilities.lazyLoad(exports, ["EcdBundle"], () => require("./ecdBundle"));

export { EcdCommandArgs, EcdCommandState } from "./ecdCommand";
export type EcdCommand = import("./ecdCommand").EcdCommand;
export const EcdCommand: typeof import("./ecdCommand").EcdCommand = null as any;
utilities.lazyLoad(exports, ["EcdCommand"], () => require("./ecdCommand"));

export { EcdCustomPropertyArgs, EcdCustomPropertyState } from "./ecdCustomProperty";
export type EcdCustomProperty = import("./ecdCustomProperty").EcdCustomProperty;
export const EcdCustomProperty: typeof import("./ecdCustomProperty").EcdCustomProperty = null as any;
utilities.lazyLoad(exports, ["EcdCustomProperty"], () => require("./ecdCustomProperty"));

export { EcdDesktopArgs, EcdDesktopState } from "./ecdDesktop";
export type EcdDesktop = import("./ecdDesktop").EcdDesktop;
export const EcdDesktop: typeof import("./ecdDesktop").EcdDesktop = null as any;
utilities.lazyLoad(exports, ["EcdDesktop"], () => require("./ecdDesktop"));

export { EcdImageArgs, EcdImageState } from "./ecdImage";
export type EcdImage = import("./ecdImage").EcdImage;
export const EcdImage: typeof import("./ecdImage").EcdImage = null as any;
utilities.lazyLoad(exports, ["EcdImage"], () => require("./ecdImage"));

export { EcdNasFileSystemArgs, EcdNasFileSystemState } from "./ecdNasFileSystem";
export type EcdNasFileSystem = import("./ecdNasFileSystem").EcdNasFileSystem;
export const EcdNasFileSystem: typeof import("./ecdNasFileSystem").EcdNasFileSystem = null as any;
utilities.lazyLoad(exports, ["EcdNasFileSystem"], () => require("./ecdNasFileSystem"));

export { EcdNetworkPackageArgs, EcdNetworkPackageState } from "./ecdNetworkPackage";
export type EcdNetworkPackage = import("./ecdNetworkPackage").EcdNetworkPackage;
export const EcdNetworkPackage: typeof import("./ecdNetworkPackage").EcdNetworkPackage = null as any;
utilities.lazyLoad(exports, ["EcdNetworkPackage"], () => require("./ecdNetworkPackage"));

export { EcdPolicyGroupArgs, EcdPolicyGroupState } from "./ecdPolicyGroup";
export type EcdPolicyGroup = import("./ecdPolicyGroup").EcdPolicyGroup;
export const EcdPolicyGroup: typeof import("./ecdPolicyGroup").EcdPolicyGroup = null as any;
utilities.lazyLoad(exports, ["EcdPolicyGroup"], () => require("./ecdPolicyGroup"));

export { EcdRamDirectoryArgs, EcdRamDirectoryState } from "./ecdRamDirectory";
export type EcdRamDirectory = import("./ecdRamDirectory").EcdRamDirectory;
export const EcdRamDirectory: typeof import("./ecdRamDirectory").EcdRamDirectory = null as any;
utilities.lazyLoad(exports, ["EcdRamDirectory"], () => require("./ecdRamDirectory"));

export { EcdSimpleOfficeSiteArgs, EcdSimpleOfficeSiteState } from "./ecdSimpleOfficeSite";
export type EcdSimpleOfficeSite = import("./ecdSimpleOfficeSite").EcdSimpleOfficeSite;
export const EcdSimpleOfficeSite: typeof import("./ecdSimpleOfficeSite").EcdSimpleOfficeSite = null as any;
utilities.lazyLoad(exports, ["EcdSimpleOfficeSite"], () => require("./ecdSimpleOfficeSite"));

export { EcdSnapshotArgs, EcdSnapshotState } from "./ecdSnapshot";
export type EcdSnapshot = import("./ecdSnapshot").EcdSnapshot;
export const EcdSnapshot: typeof import("./ecdSnapshot").EcdSnapshot = null as any;
utilities.lazyLoad(exports, ["EcdSnapshot"], () => require("./ecdSnapshot"));

export { EcdUserArgs, EcdUserState } from "./ecdUser";
export type EcdUser = import("./ecdUser").EcdUser;
export const EcdUser: typeof import("./ecdUser").EcdUser = null as any;
utilities.lazyLoad(exports, ["EcdUser"], () => require("./ecdUser"));

export { EciContainerGroupArgs, EciContainerGroupState } from "./eciContainerGroup";
export type EciContainerGroup = import("./eciContainerGroup").EciContainerGroup;
export const EciContainerGroup: typeof import("./eciContainerGroup").EciContainerGroup = null as any;
utilities.lazyLoad(exports, ["EciContainerGroup"], () => require("./eciContainerGroup"));

export { EciImageCacheArgs, EciImageCacheState } from "./eciImageCache";
export type EciImageCache = import("./eciImageCache").EciImageCache;
export const EciImageCache: typeof import("./eciImageCache").EciImageCache = null as any;
utilities.lazyLoad(exports, ["EciImageCache"], () => require("./eciImageCache"));

export { EciOpenapiImageCacheArgs, EciOpenapiImageCacheState } from "./eciOpenapiImageCache";
export type EciOpenapiImageCache = import("./eciOpenapiImageCache").EciOpenapiImageCache;
export const EciOpenapiImageCache: typeof import("./eciOpenapiImageCache").EciOpenapiImageCache = null as any;
utilities.lazyLoad(exports, ["EciOpenapiImageCache"], () => require("./eciOpenapiImageCache"));

export { EciVirtualNodeArgs, EciVirtualNodeState } from "./eciVirtualNode";
export type EciVirtualNode = import("./eciVirtualNode").EciVirtualNode;
export const EciVirtualNode: typeof import("./eciVirtualNode").EciVirtualNode = null as any;
utilities.lazyLoad(exports, ["EciVirtualNode"], () => require("./eciVirtualNode"));

export { EcpInstanceArgs, EcpInstanceState } from "./ecpInstance";
export type EcpInstance = import("./ecpInstance").EcpInstance;
export const EcpInstance: typeof import("./ecpInstance").EcpInstance = null as any;
utilities.lazyLoad(exports, ["EcpInstance"], () => require("./ecpInstance"));

export { EcpKeyPairArgs, EcpKeyPairState } from "./ecpKeyPair";
export type EcpKeyPair = import("./ecpKeyPair").EcpKeyPair;
export const EcpKeyPair: typeof import("./ecpKeyPair").EcpKeyPair = null as any;
utilities.lazyLoad(exports, ["EcpKeyPair"], () => require("./ecpKeyPair"));

export { EcsActivationArgs, EcsActivationState } from "./ecsActivation";
export type EcsActivation = import("./ecsActivation").EcsActivation;
export const EcsActivation: typeof import("./ecsActivation").EcsActivation = null as any;
utilities.lazyLoad(exports, ["EcsActivation"], () => require("./ecsActivation"));

export { EcsAutoSnapshotPolicyArgs, EcsAutoSnapshotPolicyState } from "./ecsAutoSnapshotPolicy";
export type EcsAutoSnapshotPolicy = import("./ecsAutoSnapshotPolicy").EcsAutoSnapshotPolicy;
export const EcsAutoSnapshotPolicy: typeof import("./ecsAutoSnapshotPolicy").EcsAutoSnapshotPolicy = null as any;
utilities.lazyLoad(exports, ["EcsAutoSnapshotPolicy"], () => require("./ecsAutoSnapshotPolicy"));

export { EcsAutoSnapshotPolicyAttachmentArgs, EcsAutoSnapshotPolicyAttachmentState } from "./ecsAutoSnapshotPolicyAttachment";
export type EcsAutoSnapshotPolicyAttachment = import("./ecsAutoSnapshotPolicyAttachment").EcsAutoSnapshotPolicyAttachment;
export const EcsAutoSnapshotPolicyAttachment: typeof import("./ecsAutoSnapshotPolicyAttachment").EcsAutoSnapshotPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["EcsAutoSnapshotPolicyAttachment"], () => require("./ecsAutoSnapshotPolicyAttachment"));

export { EcsCapacityReservationArgs, EcsCapacityReservationState } from "./ecsCapacityReservation";
export type EcsCapacityReservation = import("./ecsCapacityReservation").EcsCapacityReservation;
export const EcsCapacityReservation: typeof import("./ecsCapacityReservation").EcsCapacityReservation = null as any;
utilities.lazyLoad(exports, ["EcsCapacityReservation"], () => require("./ecsCapacityReservation"));

export { EcsCommandArgs, EcsCommandState } from "./ecsCommand";
export type EcsCommand = import("./ecsCommand").EcsCommand;
export const EcsCommand: typeof import("./ecsCommand").EcsCommand = null as any;
utilities.lazyLoad(exports, ["EcsCommand"], () => require("./ecsCommand"));

export { EcsDedicatedHostArgs, EcsDedicatedHostState } from "./ecsDedicatedHost";
export type EcsDedicatedHost = import("./ecsDedicatedHost").EcsDedicatedHost;
export const EcsDedicatedHost: typeof import("./ecsDedicatedHost").EcsDedicatedHost = null as any;
utilities.lazyLoad(exports, ["EcsDedicatedHost"], () => require("./ecsDedicatedHost"));

export { EcsDedicatedHostClusterArgs, EcsDedicatedHostClusterState } from "./ecsDedicatedHostCluster";
export type EcsDedicatedHostCluster = import("./ecsDedicatedHostCluster").EcsDedicatedHostCluster;
export const EcsDedicatedHostCluster: typeof import("./ecsDedicatedHostCluster").EcsDedicatedHostCluster = null as any;
utilities.lazyLoad(exports, ["EcsDedicatedHostCluster"], () => require("./ecsDedicatedHostCluster"));

export { EcsDeploymentSetArgs, EcsDeploymentSetState } from "./ecsDeploymentSet";
export type EcsDeploymentSet = import("./ecsDeploymentSet").EcsDeploymentSet;
export const EcsDeploymentSet: typeof import("./ecsDeploymentSet").EcsDeploymentSet = null as any;
utilities.lazyLoad(exports, ["EcsDeploymentSet"], () => require("./ecsDeploymentSet"));

export { EcsDiskArgs, EcsDiskState } from "./ecsDisk";
export type EcsDisk = import("./ecsDisk").EcsDisk;
export const EcsDisk: typeof import("./ecsDisk").EcsDisk = null as any;
utilities.lazyLoad(exports, ["EcsDisk"], () => require("./ecsDisk"));

export { EcsDiskAttachmentArgs, EcsDiskAttachmentState } from "./ecsDiskAttachment";
export type EcsDiskAttachment = import("./ecsDiskAttachment").EcsDiskAttachment;
export const EcsDiskAttachment: typeof import("./ecsDiskAttachment").EcsDiskAttachment = null as any;
utilities.lazyLoad(exports, ["EcsDiskAttachment"], () => require("./ecsDiskAttachment"));

export { EcsElasticityAssuranceArgs, EcsElasticityAssuranceState } from "./ecsElasticityAssurance";
export type EcsElasticityAssurance = import("./ecsElasticityAssurance").EcsElasticityAssurance;
export const EcsElasticityAssurance: typeof import("./ecsElasticityAssurance").EcsElasticityAssurance = null as any;
utilities.lazyLoad(exports, ["EcsElasticityAssurance"], () => require("./ecsElasticityAssurance"));

export { EcsHpcClusterArgs, EcsHpcClusterState } from "./ecsHpcCluster";
export type EcsHpcCluster = import("./ecsHpcCluster").EcsHpcCluster;
export const EcsHpcCluster: typeof import("./ecsHpcCluster").EcsHpcCluster = null as any;
utilities.lazyLoad(exports, ["EcsHpcCluster"], () => require("./ecsHpcCluster"));

export { EcsImageComponentArgs, EcsImageComponentState } from "./ecsImageComponent";
export type EcsImageComponent = import("./ecsImageComponent").EcsImageComponent;
export const EcsImageComponent: typeof import("./ecsImageComponent").EcsImageComponent = null as any;
utilities.lazyLoad(exports, ["EcsImageComponent"], () => require("./ecsImageComponent"));

export { EcsImagePipelineArgs, EcsImagePipelineState } from "./ecsImagePipeline";
export type EcsImagePipeline = import("./ecsImagePipeline").EcsImagePipeline;
export const EcsImagePipeline: typeof import("./ecsImagePipeline").EcsImagePipeline = null as any;
utilities.lazyLoad(exports, ["EcsImagePipeline"], () => require("./ecsImagePipeline"));

export { EcsInstanceSetArgs, EcsInstanceSetState } from "./ecsInstanceSet";
export type EcsInstanceSet = import("./ecsInstanceSet").EcsInstanceSet;
export const EcsInstanceSet: typeof import("./ecsInstanceSet").EcsInstanceSet = null as any;
utilities.lazyLoad(exports, ["EcsInstanceSet"], () => require("./ecsInstanceSet"));

export { EcsInvocationArgs, EcsInvocationState } from "./ecsInvocation";
export type EcsInvocation = import("./ecsInvocation").EcsInvocation;
export const EcsInvocation: typeof import("./ecsInvocation").EcsInvocation = null as any;
utilities.lazyLoad(exports, ["EcsInvocation"], () => require("./ecsInvocation"));

export { EcsKeyPairArgs, EcsKeyPairState } from "./ecsKeyPair";
export type EcsKeyPair = import("./ecsKeyPair").EcsKeyPair;
export const EcsKeyPair: typeof import("./ecsKeyPair").EcsKeyPair = null as any;
utilities.lazyLoad(exports, ["EcsKeyPair"], () => require("./ecsKeyPair"));

export { EcsKeyPairAttachmentArgs, EcsKeyPairAttachmentState } from "./ecsKeyPairAttachment";
export type EcsKeyPairAttachment = import("./ecsKeyPairAttachment").EcsKeyPairAttachment;
export const EcsKeyPairAttachment: typeof import("./ecsKeyPairAttachment").EcsKeyPairAttachment = null as any;
utilities.lazyLoad(exports, ["EcsKeyPairAttachment"], () => require("./ecsKeyPairAttachment"));

export { EcsLaunchTemplateArgs, EcsLaunchTemplateState } from "./ecsLaunchTemplate";
export type EcsLaunchTemplate = import("./ecsLaunchTemplate").EcsLaunchTemplate;
export const EcsLaunchTemplate: typeof import("./ecsLaunchTemplate").EcsLaunchTemplate = null as any;
utilities.lazyLoad(exports, ["EcsLaunchTemplate"], () => require("./ecsLaunchTemplate"));

export { EcsNetworkInterfaceArgs, EcsNetworkInterfaceState } from "./ecsNetworkInterface";
export type EcsNetworkInterface = import("./ecsNetworkInterface").EcsNetworkInterface;
export const EcsNetworkInterface: typeof import("./ecsNetworkInterface").EcsNetworkInterface = null as any;
utilities.lazyLoad(exports, ["EcsNetworkInterface"], () => require("./ecsNetworkInterface"));

export { EcsNetworkInterfaceAttachmentArgs, EcsNetworkInterfaceAttachmentState } from "./ecsNetworkInterfaceAttachment";
export type EcsNetworkInterfaceAttachment = import("./ecsNetworkInterfaceAttachment").EcsNetworkInterfaceAttachment;
export const EcsNetworkInterfaceAttachment: typeof import("./ecsNetworkInterfaceAttachment").EcsNetworkInterfaceAttachment = null as any;
utilities.lazyLoad(exports, ["EcsNetworkInterfaceAttachment"], () => require("./ecsNetworkInterfaceAttachment"));

export { EcsNetworkInterfacePermissionArgs, EcsNetworkInterfacePermissionState } from "./ecsNetworkInterfacePermission";
export type EcsNetworkInterfacePermission = import("./ecsNetworkInterfacePermission").EcsNetworkInterfacePermission;
export const EcsNetworkInterfacePermission: typeof import("./ecsNetworkInterfacePermission").EcsNetworkInterfacePermission = null as any;
utilities.lazyLoad(exports, ["EcsNetworkInterfacePermission"], () => require("./ecsNetworkInterfacePermission"));

export { EcsPrefixListArgs, EcsPrefixListState } from "./ecsPrefixList";
export type EcsPrefixList = import("./ecsPrefixList").EcsPrefixList;
export const EcsPrefixList: typeof import("./ecsPrefixList").EcsPrefixList = null as any;
utilities.lazyLoad(exports, ["EcsPrefixList"], () => require("./ecsPrefixList"));

export { EcsSessionManagerStatusArgs, EcsSessionManagerStatusState } from "./ecsSessionManagerStatus";
export type EcsSessionManagerStatus = import("./ecsSessionManagerStatus").EcsSessionManagerStatus;
export const EcsSessionManagerStatus: typeof import("./ecsSessionManagerStatus").EcsSessionManagerStatus = null as any;
utilities.lazyLoad(exports, ["EcsSessionManagerStatus"], () => require("./ecsSessionManagerStatus"));

export { EcsSnapshotArgs, EcsSnapshotState } from "./ecsSnapshot";
export type EcsSnapshot = import("./ecsSnapshot").EcsSnapshot;
export const EcsSnapshot: typeof import("./ecsSnapshot").EcsSnapshot = null as any;
utilities.lazyLoad(exports, ["EcsSnapshot"], () => require("./ecsSnapshot"));

export { EcsSnapshotGroupArgs, EcsSnapshotGroupState } from "./ecsSnapshotGroup";
export type EcsSnapshotGroup = import("./ecsSnapshotGroup").EcsSnapshotGroup;
export const EcsSnapshotGroup: typeof import("./ecsSnapshotGroup").EcsSnapshotGroup = null as any;
utilities.lazyLoad(exports, ["EcsSnapshotGroup"], () => require("./ecsSnapshotGroup"));

export { EcsStorageCapacityUnitArgs, EcsStorageCapacityUnitState } from "./ecsStorageCapacityUnit";
export type EcsStorageCapacityUnit = import("./ecsStorageCapacityUnit").EcsStorageCapacityUnit;
export const EcsStorageCapacityUnit: typeof import("./ecsStorageCapacityUnit").EcsStorageCapacityUnit = null as any;
utilities.lazyLoad(exports, ["EcsStorageCapacityUnit"], () => require("./ecsStorageCapacityUnit"));

export { EdasApplicationArgs, EdasApplicationState } from "./edasApplication";
export type EdasApplication = import("./edasApplication").EdasApplication;
export const EdasApplication: typeof import("./edasApplication").EdasApplication = null as any;
utilities.lazyLoad(exports, ["EdasApplication"], () => require("./edasApplication"));

export { EdasApplicationDeploymentArgs, EdasApplicationDeploymentState } from "./edasApplicationDeployment";
export type EdasApplicationDeployment = import("./edasApplicationDeployment").EdasApplicationDeployment;
export const EdasApplicationDeployment: typeof import("./edasApplicationDeployment").EdasApplicationDeployment = null as any;
utilities.lazyLoad(exports, ["EdasApplicationDeployment"], () => require("./edasApplicationDeployment"));

export { EdasApplicationScaleArgs, EdasApplicationScaleState } from "./edasApplicationScale";
export type EdasApplicationScale = import("./edasApplicationScale").EdasApplicationScale;
export const EdasApplicationScale: typeof import("./edasApplicationScale").EdasApplicationScale = null as any;
utilities.lazyLoad(exports, ["EdasApplicationScale"], () => require("./edasApplicationScale"));

export { EdasClusterArgs, EdasClusterState } from "./edasCluster";
export type EdasCluster = import("./edasCluster").EdasCluster;
export const EdasCluster: typeof import("./edasCluster").EdasCluster = null as any;
utilities.lazyLoad(exports, ["EdasCluster"], () => require("./edasCluster"));

export { EdasDeployGroupArgs, EdasDeployGroupState } from "./edasDeployGroup";
export type EdasDeployGroup = import("./edasDeployGroup").EdasDeployGroup;
export const EdasDeployGroup: typeof import("./edasDeployGroup").EdasDeployGroup = null as any;
utilities.lazyLoad(exports, ["EdasDeployGroup"], () => require("./edasDeployGroup"));

export { EdasInstanceClusterAttachmentArgs, EdasInstanceClusterAttachmentState } from "./edasInstanceClusterAttachment";
export type EdasInstanceClusterAttachment = import("./edasInstanceClusterAttachment").EdasInstanceClusterAttachment;
export const EdasInstanceClusterAttachment: typeof import("./edasInstanceClusterAttachment").EdasInstanceClusterAttachment = null as any;
utilities.lazyLoad(exports, ["EdasInstanceClusterAttachment"], () => require("./edasInstanceClusterAttachment"));

export { EdasK8sApplicationArgs, EdasK8sApplicationState } from "./edasK8sApplication";
export type EdasK8sApplication = import("./edasK8sApplication").EdasK8sApplication;
export const EdasK8sApplication: typeof import("./edasK8sApplication").EdasK8sApplication = null as any;
utilities.lazyLoad(exports, ["EdasK8sApplication"], () => require("./edasK8sApplication"));

export { EdasK8sClusterArgs, EdasK8sClusterState } from "./edasK8sCluster";
export type EdasK8sCluster = import("./edasK8sCluster").EdasK8sCluster;
export const EdasK8sCluster: typeof import("./edasK8sCluster").EdasK8sCluster = null as any;
utilities.lazyLoad(exports, ["EdasK8sCluster"], () => require("./edasK8sCluster"));

export { EdasK8sSlbAttachmentArgs, EdasK8sSlbAttachmentState } from "./edasK8sSlbAttachment";
export type EdasK8sSlbAttachment = import("./edasK8sSlbAttachment").EdasK8sSlbAttachment;
export const EdasK8sSlbAttachment: typeof import("./edasK8sSlbAttachment").EdasK8sSlbAttachment = null as any;
utilities.lazyLoad(exports, ["EdasK8sSlbAttachment"], () => require("./edasK8sSlbAttachment"));

export { EdasNamespaceArgs, EdasNamespaceState } from "./edasNamespace";
export type EdasNamespace = import("./edasNamespace").EdasNamespace;
export const EdasNamespace: typeof import("./edasNamespace").EdasNamespace = null as any;
utilities.lazyLoad(exports, ["EdasNamespace"], () => require("./edasNamespace"));

export { EdasSlbAttachmentArgs, EdasSlbAttachmentState } from "./edasSlbAttachment";
export type EdasSlbAttachment = import("./edasSlbAttachment").EdasSlbAttachment;
export const EdasSlbAttachment: typeof import("./edasSlbAttachment").EdasSlbAttachment = null as any;
utilities.lazyLoad(exports, ["EdasSlbAttachment"], () => require("./edasSlbAttachment"));

export { EfloSubnetArgs, EfloSubnetState } from "./efloSubnet";
export type EfloSubnet = import("./efloSubnet").EfloSubnet;
export const EfloSubnet: typeof import("./efloSubnet").EfloSubnet = null as any;
utilities.lazyLoad(exports, ["EfloSubnet"], () => require("./efloSubnet"));

export { EfloVpdArgs, EfloVpdState } from "./efloVpd";
export type EfloVpd = import("./efloVpd").EfloVpd;
export const EfloVpd: typeof import("./efloVpd").EfloVpd = null as any;
utilities.lazyLoad(exports, ["EfloVpd"], () => require("./efloVpd"));

export { EhpcClusterArgs, EhpcClusterState } from "./ehpcCluster";
export type EhpcCluster = import("./ehpcCluster").EhpcCluster;
export const EhpcCluster: typeof import("./ehpcCluster").EhpcCluster = null as any;
utilities.lazyLoad(exports, ["EhpcCluster"], () => require("./ehpcCluster"));

export { EhpcJobTemplateArgs, EhpcJobTemplateState } from "./ehpcJobTemplate";
export type EhpcJobTemplate = import("./ehpcJobTemplate").EhpcJobTemplate;
export const EhpcJobTemplate: typeof import("./ehpcJobTemplate").EhpcJobTemplate = null as any;
utilities.lazyLoad(exports, ["EhpcJobTemplate"], () => require("./ehpcJobTemplate"));

export { EipArgs, EipState } from "./eip";
export type Eip = import("./eip").Eip;
export const Eip: typeof import("./eip").Eip = null as any;
utilities.lazyLoad(exports, ["Eip"], () => require("./eip"));

export { EipAddressArgs, EipAddressState } from "./eipAddress";
export type EipAddress = import("./eipAddress").EipAddress;
export const EipAddress: typeof import("./eipAddress").EipAddress = null as any;
utilities.lazyLoad(exports, ["EipAddress"], () => require("./eipAddress"));

export { EipAssociationArgs, EipAssociationState } from "./eipAssociation";
export type EipAssociation = import("./eipAssociation").EipAssociation;
export const EipAssociation: typeof import("./eipAssociation").EipAssociation = null as any;
utilities.lazyLoad(exports, ["EipAssociation"], () => require("./eipAssociation"));

export { EipSegmentAddressArgs, EipSegmentAddressState } from "./eipSegmentAddress";
export type EipSegmentAddress = import("./eipSegmentAddress").EipSegmentAddress;
export const EipSegmentAddress: typeof import("./eipSegmentAddress").EipSegmentAddress = null as any;
utilities.lazyLoad(exports, ["EipSegmentAddress"], () => require("./eipSegmentAddress"));

export { EipanycastAnycastEipAddressArgs, EipanycastAnycastEipAddressState } from "./eipanycastAnycastEipAddress";
export type EipanycastAnycastEipAddress = import("./eipanycastAnycastEipAddress").EipanycastAnycastEipAddress;
export const EipanycastAnycastEipAddress: typeof import("./eipanycastAnycastEipAddress").EipanycastAnycastEipAddress = null as any;
utilities.lazyLoad(exports, ["EipanycastAnycastEipAddress"], () => require("./eipanycastAnycastEipAddress"));

export { EipanycastAnycastEipAddressAttachmentArgs, EipanycastAnycastEipAddressAttachmentState } from "./eipanycastAnycastEipAddressAttachment";
export type EipanycastAnycastEipAddressAttachment = import("./eipanycastAnycastEipAddressAttachment").EipanycastAnycastEipAddressAttachment;
export const EipanycastAnycastEipAddressAttachment: typeof import("./eipanycastAnycastEipAddressAttachment").EipanycastAnycastEipAddressAttachment = null as any;
utilities.lazyLoad(exports, ["EipanycastAnycastEipAddressAttachment"], () => require("./eipanycastAnycastEipAddressAttachment"));

export { ElasticsearchInstanceArgs, ElasticsearchInstanceState } from "./elasticsearchInstance";
export type ElasticsearchInstance = import("./elasticsearchInstance").ElasticsearchInstance;
export const ElasticsearchInstance: typeof import("./elasticsearchInstance").ElasticsearchInstance = null as any;
utilities.lazyLoad(exports, ["ElasticsearchInstance"], () => require("./elasticsearchInstance"));

export { EmrClusterArgs, EmrClusterState } from "./emrCluster";
export type EmrCluster = import("./emrCluster").EmrCluster;
export const EmrCluster: typeof import("./emrCluster").EmrCluster = null as any;
utilities.lazyLoad(exports, ["EmrCluster"], () => require("./emrCluster"));

export { Emrv2ClusterArgs, Emrv2ClusterState } from "./emrv2Cluster";
export type Emrv2Cluster = import("./emrv2Cluster").Emrv2Cluster;
export const Emrv2Cluster: typeof import("./emrv2Cluster").Emrv2Cluster = null as any;
utilities.lazyLoad(exports, ["Emrv2Cluster"], () => require("./emrv2Cluster"));

export { EnsDiskArgs, EnsDiskState } from "./ensDisk";
export type EnsDisk = import("./ensDisk").EnsDisk;
export const EnsDisk: typeof import("./ensDisk").EnsDisk = null as any;
utilities.lazyLoad(exports, ["EnsDisk"], () => require("./ensDisk"));

export { EnsDiskInstanceAttachmentArgs, EnsDiskInstanceAttachmentState } from "./ensDiskInstanceAttachment";
export type EnsDiskInstanceAttachment = import("./ensDiskInstanceAttachment").EnsDiskInstanceAttachment;
export const EnsDiskInstanceAttachment: typeof import("./ensDiskInstanceAttachment").EnsDiskInstanceAttachment = null as any;
utilities.lazyLoad(exports, ["EnsDiskInstanceAttachment"], () => require("./ensDiskInstanceAttachment"));

export { EnsEipArgs, EnsEipState } from "./ensEip";
export type EnsEip = import("./ensEip").EnsEip;
export const EnsEip: typeof import("./ensEip").EnsEip = null as any;
utilities.lazyLoad(exports, ["EnsEip"], () => require("./ensEip"));

export { EnsEipInstanceAttachmentArgs, EnsEipInstanceAttachmentState } from "./ensEipInstanceAttachment";
export type EnsEipInstanceAttachment = import("./ensEipInstanceAttachment").EnsEipInstanceAttachment;
export const EnsEipInstanceAttachment: typeof import("./ensEipInstanceAttachment").EnsEipInstanceAttachment = null as any;
utilities.lazyLoad(exports, ["EnsEipInstanceAttachment"], () => require("./ensEipInstanceAttachment"));

export { EnsImageArgs, EnsImageState } from "./ensImage";
export type EnsImage = import("./ensImage").EnsImage;
export const EnsImage: typeof import("./ensImage").EnsImage = null as any;
utilities.lazyLoad(exports, ["EnsImage"], () => require("./ensImage"));

export { EnsInstanceArgs, EnsInstanceState } from "./ensInstance";
export type EnsInstance = import("./ensInstance").EnsInstance;
export const EnsInstance: typeof import("./ensInstance").EnsInstance = null as any;
utilities.lazyLoad(exports, ["EnsInstance"], () => require("./ensInstance"));

export { EnsInstanceSecurityGroupAttachmentArgs, EnsInstanceSecurityGroupAttachmentState } from "./ensInstanceSecurityGroupAttachment";
export type EnsInstanceSecurityGroupAttachment = import("./ensInstanceSecurityGroupAttachment").EnsInstanceSecurityGroupAttachment;
export const EnsInstanceSecurityGroupAttachment: typeof import("./ensInstanceSecurityGroupAttachment").EnsInstanceSecurityGroupAttachment = null as any;
utilities.lazyLoad(exports, ["EnsInstanceSecurityGroupAttachment"], () => require("./ensInstanceSecurityGroupAttachment"));

export { EnsKeyPairArgs, EnsKeyPairState } from "./ensKeyPair";
export type EnsKeyPair = import("./ensKeyPair").EnsKeyPair;
export const EnsKeyPair: typeof import("./ensKeyPair").EnsKeyPair = null as any;
utilities.lazyLoad(exports, ["EnsKeyPair"], () => require("./ensKeyPair"));

export { EnsLoadBalancerArgs, EnsLoadBalancerState } from "./ensLoadBalancer";
export type EnsLoadBalancer = import("./ensLoadBalancer").EnsLoadBalancer;
export const EnsLoadBalancer: typeof import("./ensLoadBalancer").EnsLoadBalancer = null as any;
utilities.lazyLoad(exports, ["EnsLoadBalancer"], () => require("./ensLoadBalancer"));

export { EnsNatGatewayArgs, EnsNatGatewayState } from "./ensNatGateway";
export type EnsNatGateway = import("./ensNatGateway").EnsNatGateway;
export const EnsNatGateway: typeof import("./ensNatGateway").EnsNatGateway = null as any;
utilities.lazyLoad(exports, ["EnsNatGateway"], () => require("./ensNatGateway"));

export { EnsNetworkArgs, EnsNetworkState } from "./ensNetwork";
export type EnsNetwork = import("./ensNetwork").EnsNetwork;
export const EnsNetwork: typeof import("./ensNetwork").EnsNetwork = null as any;
utilities.lazyLoad(exports, ["EnsNetwork"], () => require("./ensNetwork"));

export { EnsSecurityGroupArgs, EnsSecurityGroupState } from "./ensSecurityGroup";
export type EnsSecurityGroup = import("./ensSecurityGroup").EnsSecurityGroup;
export const EnsSecurityGroup: typeof import("./ensSecurityGroup").EnsSecurityGroup = null as any;
utilities.lazyLoad(exports, ["EnsSecurityGroup"], () => require("./ensSecurityGroup"));

export { EnsSnapshotArgs, EnsSnapshotState } from "./ensSnapshot";
export type EnsSnapshot = import("./ensSnapshot").EnsSnapshot;
export const EnsSnapshot: typeof import("./ensSnapshot").EnsSnapshot = null as any;
utilities.lazyLoad(exports, ["EnsSnapshot"], () => require("./ensSnapshot"));

export { EnsVswitchArgs, EnsVswitchState } from "./ensVswitch";
export type EnsVswitch = import("./ensVswitch").EnsVswitch;
export const EnsVswitch: typeof import("./ensVswitch").EnsVswitch = null as any;
utilities.lazyLoad(exports, ["EnsVswitch"], () => require("./ensVswitch"));

export { EssAlarmArgs, EssAlarmState } from "./essAlarm";
export type EssAlarm = import("./essAlarm").EssAlarm;
export const EssAlarm: typeof import("./essAlarm").EssAlarm = null as any;
utilities.lazyLoad(exports, ["EssAlarm"], () => require("./essAlarm"));

export { EssAlbServerGroupAttachmentArgs, EssAlbServerGroupAttachmentState } from "./essAlbServerGroupAttachment";
export type EssAlbServerGroupAttachment = import("./essAlbServerGroupAttachment").EssAlbServerGroupAttachment;
export const EssAlbServerGroupAttachment: typeof import("./essAlbServerGroupAttachment").EssAlbServerGroupAttachment = null as any;
utilities.lazyLoad(exports, ["EssAlbServerGroupAttachment"], () => require("./essAlbServerGroupAttachment"));

export { EssAttachmentArgs, EssAttachmentState } from "./essAttachment";
export type EssAttachment = import("./essAttachment").EssAttachment;
export const EssAttachment: typeof import("./essAttachment").EssAttachment = null as any;
utilities.lazyLoad(exports, ["EssAttachment"], () => require("./essAttachment"));

export { EssEciScalingConfigurationArgs, EssEciScalingConfigurationState } from "./essEciScalingConfiguration";
export type EssEciScalingConfiguration = import("./essEciScalingConfiguration").EssEciScalingConfiguration;
export const EssEciScalingConfiguration: typeof import("./essEciScalingConfiguration").EssEciScalingConfiguration = null as any;
utilities.lazyLoad(exports, ["EssEciScalingConfiguration"], () => require("./essEciScalingConfiguration"));

export { EssLifecycleHookArgs, EssLifecycleHookState } from "./essLifecycleHook";
export type EssLifecycleHook = import("./essLifecycleHook").EssLifecycleHook;
export const EssLifecycleHook: typeof import("./essLifecycleHook").EssLifecycleHook = null as any;
utilities.lazyLoad(exports, ["EssLifecycleHook"], () => require("./essLifecycleHook"));

export { EssNotificationArgs, EssNotificationState } from "./essNotification";
export type EssNotification = import("./essNotification").EssNotification;
export const EssNotification: typeof import("./essNotification").EssNotification = null as any;
utilities.lazyLoad(exports, ["EssNotification"], () => require("./essNotification"));

export { EssScalingConfigurationArgs, EssScalingConfigurationState } from "./essScalingConfiguration";
export type EssScalingConfiguration = import("./essScalingConfiguration").EssScalingConfiguration;
export const EssScalingConfiguration: typeof import("./essScalingConfiguration").EssScalingConfiguration = null as any;
utilities.lazyLoad(exports, ["EssScalingConfiguration"], () => require("./essScalingConfiguration"));

export { EssScalingGroupArgs, EssScalingGroupState } from "./essScalingGroup";
export type EssScalingGroup = import("./essScalingGroup").EssScalingGroup;
export const EssScalingGroup: typeof import("./essScalingGroup").EssScalingGroup = null as any;
utilities.lazyLoad(exports, ["EssScalingGroup"], () => require("./essScalingGroup"));

export { EssScalingRuleArgs, EssScalingRuleState } from "./essScalingRule";
export type EssScalingRule = import("./essScalingRule").EssScalingRule;
export const EssScalingRule: typeof import("./essScalingRule").EssScalingRule = null as any;
utilities.lazyLoad(exports, ["EssScalingRule"], () => require("./essScalingRule"));

export { EssScalinggroupVserverGroupsArgs, EssScalinggroupVserverGroupsState } from "./essScalinggroupVserverGroups";
export type EssScalinggroupVserverGroups = import("./essScalinggroupVserverGroups").EssScalinggroupVserverGroups;
export const EssScalinggroupVserverGroups: typeof import("./essScalinggroupVserverGroups").EssScalinggroupVserverGroups = null as any;
utilities.lazyLoad(exports, ["EssScalinggroupVserverGroups"], () => require("./essScalinggroupVserverGroups"));

export { EssScheduleArgs, EssScheduleState } from "./essSchedule";
export type EssSchedule = import("./essSchedule").EssSchedule;
export const EssSchedule: typeof import("./essSchedule").EssSchedule = null as any;
utilities.lazyLoad(exports, ["EssSchedule"], () => require("./essSchedule"));

export { EssScheduledTaskArgs, EssScheduledTaskState } from "./essScheduledTask";
export type EssScheduledTask = import("./essScheduledTask").EssScheduledTask;
export const EssScheduledTask: typeof import("./essScheduledTask").EssScheduledTask = null as any;
utilities.lazyLoad(exports, ["EssScheduledTask"], () => require("./essScheduledTask"));

export { EssSuspendProcessArgs, EssSuspendProcessState } from "./essSuspendProcess";
export type EssSuspendProcess = import("./essSuspendProcess").EssSuspendProcess;
export const EssSuspendProcess: typeof import("./essSuspendProcess").EssSuspendProcess = null as any;
utilities.lazyLoad(exports, ["EssSuspendProcess"], () => require("./essSuspendProcess"));

export { EventBridgeApiDestinationArgs, EventBridgeApiDestinationState } from "./eventBridgeApiDestination";
export type EventBridgeApiDestination = import("./eventBridgeApiDestination").EventBridgeApiDestination;
export const EventBridgeApiDestination: typeof import("./eventBridgeApiDestination").EventBridgeApiDestination = null as any;
utilities.lazyLoad(exports, ["EventBridgeApiDestination"], () => require("./eventBridgeApiDestination"));

export { EventBridgeConnectionArgs, EventBridgeConnectionState } from "./eventBridgeConnection";
export type EventBridgeConnection = import("./eventBridgeConnection").EventBridgeConnection;
export const EventBridgeConnection: typeof import("./eventBridgeConnection").EventBridgeConnection = null as any;
utilities.lazyLoad(exports, ["EventBridgeConnection"], () => require("./eventBridgeConnection"));

export { EventBridgeEventBusArgs, EventBridgeEventBusState } from "./eventBridgeEventBus";
export type EventBridgeEventBus = import("./eventBridgeEventBus").EventBridgeEventBus;
export const EventBridgeEventBus: typeof import("./eventBridgeEventBus").EventBridgeEventBus = null as any;
utilities.lazyLoad(exports, ["EventBridgeEventBus"], () => require("./eventBridgeEventBus"));

export { EventBridgeEventSourceArgs, EventBridgeEventSourceState } from "./eventBridgeEventSource";
export type EventBridgeEventSource = import("./eventBridgeEventSource").EventBridgeEventSource;
export const EventBridgeEventSource: typeof import("./eventBridgeEventSource").EventBridgeEventSource = null as any;
utilities.lazyLoad(exports, ["EventBridgeEventSource"], () => require("./eventBridgeEventSource"));

export { EventBridgeRuleArgs, EventBridgeRuleState } from "./eventBridgeRule";
export type EventBridgeRule = import("./eventBridgeRule").EventBridgeRule;
export const EventBridgeRule: typeof import("./eventBridgeRule").EventBridgeRule = null as any;
utilities.lazyLoad(exports, ["EventBridgeRule"], () => require("./eventBridgeRule"));

export { EventBridgeServiceLinkedRoleArgs, EventBridgeServiceLinkedRoleState } from "./eventBridgeServiceLinkedRole";
export type EventBridgeServiceLinkedRole = import("./eventBridgeServiceLinkedRole").EventBridgeServiceLinkedRole;
export const EventBridgeServiceLinkedRole: typeof import("./eventBridgeServiceLinkedRole").EventBridgeServiceLinkedRole = null as any;
utilities.lazyLoad(exports, ["EventBridgeServiceLinkedRole"], () => require("./eventBridgeServiceLinkedRole"));

export { EventBridgeSlrArgs, EventBridgeSlrState } from "./eventBridgeSlr";
export type EventBridgeSlr = import("./eventBridgeSlr").EventBridgeSlr;
export const EventBridgeSlr: typeof import("./eventBridgeSlr").EventBridgeSlr = null as any;
utilities.lazyLoad(exports, ["EventBridgeSlr"], () => require("./eventBridgeSlr"));

export { ExpressConnectEcFailoverTestJobArgs, ExpressConnectEcFailoverTestJobState } from "./expressConnectEcFailoverTestJob";
export type ExpressConnectEcFailoverTestJob = import("./expressConnectEcFailoverTestJob").ExpressConnectEcFailoverTestJob;
export const ExpressConnectEcFailoverTestJob: typeof import("./expressConnectEcFailoverTestJob").ExpressConnectEcFailoverTestJob = null as any;
utilities.lazyLoad(exports, ["ExpressConnectEcFailoverTestJob"], () => require("./expressConnectEcFailoverTestJob"));

export { ExpressConnectGrantRuleToCenArgs, ExpressConnectGrantRuleToCenState } from "./expressConnectGrantRuleToCen";
export type ExpressConnectGrantRuleToCen = import("./expressConnectGrantRuleToCen").ExpressConnectGrantRuleToCen;
export const ExpressConnectGrantRuleToCen: typeof import("./expressConnectGrantRuleToCen").ExpressConnectGrantRuleToCen = null as any;
utilities.lazyLoad(exports, ["ExpressConnectGrantRuleToCen"], () => require("./expressConnectGrantRuleToCen"));

export { ExpressConnectPhysicalConnectionArgs, ExpressConnectPhysicalConnectionState } from "./expressConnectPhysicalConnection";
export type ExpressConnectPhysicalConnection = import("./expressConnectPhysicalConnection").ExpressConnectPhysicalConnection;
export const ExpressConnectPhysicalConnection: typeof import("./expressConnectPhysicalConnection").ExpressConnectPhysicalConnection = null as any;
utilities.lazyLoad(exports, ["ExpressConnectPhysicalConnection"], () => require("./expressConnectPhysicalConnection"));

export { ExpressConnectRouterExpressConnectRouterArgs, ExpressConnectRouterExpressConnectRouterState } from "./expressConnectRouterExpressConnectRouter";
export type ExpressConnectRouterExpressConnectRouter = import("./expressConnectRouterExpressConnectRouter").ExpressConnectRouterExpressConnectRouter;
export const ExpressConnectRouterExpressConnectRouter: typeof import("./expressConnectRouterExpressConnectRouter").ExpressConnectRouterExpressConnectRouter = null as any;
utilities.lazyLoad(exports, ["ExpressConnectRouterExpressConnectRouter"], () => require("./expressConnectRouterExpressConnectRouter"));

export { ExpressConnectRouterInterfaceArgs, ExpressConnectRouterInterfaceState } from "./expressConnectRouterInterface";
export type ExpressConnectRouterInterface = import("./expressConnectRouterInterface").ExpressConnectRouterInterface;
export const ExpressConnectRouterInterface: typeof import("./expressConnectRouterInterface").ExpressConnectRouterInterface = null as any;
utilities.lazyLoad(exports, ["ExpressConnectRouterInterface"], () => require("./expressConnectRouterInterface"));

export { ExpressConnectRouterTrAssociationArgs, ExpressConnectRouterTrAssociationState } from "./expressConnectRouterTrAssociation";
export type ExpressConnectRouterTrAssociation = import("./expressConnectRouterTrAssociation").ExpressConnectRouterTrAssociation;
export const ExpressConnectRouterTrAssociation: typeof import("./expressConnectRouterTrAssociation").ExpressConnectRouterTrAssociation = null as any;
utilities.lazyLoad(exports, ["ExpressConnectRouterTrAssociation"], () => require("./expressConnectRouterTrAssociation"));

export { ExpressConnectRouterVbrChildInstanceArgs, ExpressConnectRouterVbrChildInstanceState } from "./expressConnectRouterVbrChildInstance";
export type ExpressConnectRouterVbrChildInstance = import("./expressConnectRouterVbrChildInstance").ExpressConnectRouterVbrChildInstance;
export const ExpressConnectRouterVbrChildInstance: typeof import("./expressConnectRouterVbrChildInstance").ExpressConnectRouterVbrChildInstance = null as any;
utilities.lazyLoad(exports, ["ExpressConnectRouterVbrChildInstance"], () => require("./expressConnectRouterVbrChildInstance"));

export { ExpressConnectRouterVpcAssociationArgs, ExpressConnectRouterVpcAssociationState } from "./expressConnectRouterVpcAssociation";
export type ExpressConnectRouterVpcAssociation = import("./expressConnectRouterVpcAssociation").ExpressConnectRouterVpcAssociation;
export const ExpressConnectRouterVpcAssociation: typeof import("./expressConnectRouterVpcAssociation").ExpressConnectRouterVpcAssociation = null as any;
utilities.lazyLoad(exports, ["ExpressConnectRouterVpcAssociation"], () => require("./expressConnectRouterVpcAssociation"));

export { ExpressConnectTrafficQosArgs, ExpressConnectTrafficQosState } from "./expressConnectTrafficQos";
export type ExpressConnectTrafficQos = import("./expressConnectTrafficQos").ExpressConnectTrafficQos;
export const ExpressConnectTrafficQos: typeof import("./expressConnectTrafficQos").ExpressConnectTrafficQos = null as any;
utilities.lazyLoad(exports, ["ExpressConnectTrafficQos"], () => require("./expressConnectTrafficQos"));

export { ExpressConnectTrafficQosAssociationArgs, ExpressConnectTrafficQosAssociationState } from "./expressConnectTrafficQosAssociation";
export type ExpressConnectTrafficQosAssociation = import("./expressConnectTrafficQosAssociation").ExpressConnectTrafficQosAssociation;
export const ExpressConnectTrafficQosAssociation: typeof import("./expressConnectTrafficQosAssociation").ExpressConnectTrafficQosAssociation = null as any;
utilities.lazyLoad(exports, ["ExpressConnectTrafficQosAssociation"], () => require("./expressConnectTrafficQosAssociation"));

export { ExpressConnectTrafficQosQueueArgs, ExpressConnectTrafficQosQueueState } from "./expressConnectTrafficQosQueue";
export type ExpressConnectTrafficQosQueue = import("./expressConnectTrafficQosQueue").ExpressConnectTrafficQosQueue;
export const ExpressConnectTrafficQosQueue: typeof import("./expressConnectTrafficQosQueue").ExpressConnectTrafficQosQueue = null as any;
utilities.lazyLoad(exports, ["ExpressConnectTrafficQosQueue"], () => require("./expressConnectTrafficQosQueue"));

export { ExpressConnectTrafficQosRuleArgs, ExpressConnectTrafficQosRuleState } from "./expressConnectTrafficQosRule";
export type ExpressConnectTrafficQosRule = import("./expressConnectTrafficQosRule").ExpressConnectTrafficQosRule;
export const ExpressConnectTrafficQosRule: typeof import("./expressConnectTrafficQosRule").ExpressConnectTrafficQosRule = null as any;
utilities.lazyLoad(exports, ["ExpressConnectTrafficQosRule"], () => require("./expressConnectTrafficQosRule"));

export { ExpressConnectVbrPconnAssociationArgs, ExpressConnectVbrPconnAssociationState } from "./expressConnectVbrPconnAssociation";
export type ExpressConnectVbrPconnAssociation = import("./expressConnectVbrPconnAssociation").ExpressConnectVbrPconnAssociation;
export const ExpressConnectVbrPconnAssociation: typeof import("./expressConnectVbrPconnAssociation").ExpressConnectVbrPconnAssociation = null as any;
utilities.lazyLoad(exports, ["ExpressConnectVbrPconnAssociation"], () => require("./expressConnectVbrPconnAssociation"));

export { ExpressConnectVirtualBorderRouterArgs, ExpressConnectVirtualBorderRouterState } from "./expressConnectVirtualBorderRouter";
export type ExpressConnectVirtualBorderRouter = import("./expressConnectVirtualBorderRouter").ExpressConnectVirtualBorderRouter;
export const ExpressConnectVirtualBorderRouter: typeof import("./expressConnectVirtualBorderRouter").ExpressConnectVirtualBorderRouter = null as any;
utilities.lazyLoad(exports, ["ExpressConnectVirtualBorderRouter"], () => require("./expressConnectVirtualBorderRouter"));

export { ExpressConnectVirtualPhysicalConnectionArgs, ExpressConnectVirtualPhysicalConnectionState } from "./expressConnectVirtualPhysicalConnection";
export type ExpressConnectVirtualPhysicalConnection = import("./expressConnectVirtualPhysicalConnection").ExpressConnectVirtualPhysicalConnection;
export const ExpressConnectVirtualPhysicalConnection: typeof import("./expressConnectVirtualPhysicalConnection").ExpressConnectVirtualPhysicalConnection = null as any;
utilities.lazyLoad(exports, ["ExpressConnectVirtualPhysicalConnection"], () => require("./expressConnectVirtualPhysicalConnection"));

export { FcAliasArgs, FcAliasState } from "./fcAlias";
export type FcAlias = import("./fcAlias").FcAlias;
export const FcAlias: typeof import("./fcAlias").FcAlias = null as any;
utilities.lazyLoad(exports, ["FcAlias"], () => require("./fcAlias"));

export { FcCustomDomainArgs, FcCustomDomainState } from "./fcCustomDomain";
export type FcCustomDomain = import("./fcCustomDomain").FcCustomDomain;
export const FcCustomDomain: typeof import("./fcCustomDomain").FcCustomDomain = null as any;
utilities.lazyLoad(exports, ["FcCustomDomain"], () => require("./fcCustomDomain"));

export { FcFunctionArgs, FcFunctionState } from "./fcFunction";
export type FcFunction = import("./fcFunction").FcFunction;
export const FcFunction: typeof import("./fcFunction").FcFunction = null as any;
utilities.lazyLoad(exports, ["FcFunction"], () => require("./fcFunction"));

export { FcFunctionAsyncInvokeConfigArgs, FcFunctionAsyncInvokeConfigState } from "./fcFunctionAsyncInvokeConfig";
export type FcFunctionAsyncInvokeConfig = import("./fcFunctionAsyncInvokeConfig").FcFunctionAsyncInvokeConfig;
export const FcFunctionAsyncInvokeConfig: typeof import("./fcFunctionAsyncInvokeConfig").FcFunctionAsyncInvokeConfig = null as any;
utilities.lazyLoad(exports, ["FcFunctionAsyncInvokeConfig"], () => require("./fcFunctionAsyncInvokeConfig"));

export { FcLayerVersionArgs, FcLayerVersionState } from "./fcLayerVersion";
export type FcLayerVersion = import("./fcLayerVersion").FcLayerVersion;
export const FcLayerVersion: typeof import("./fcLayerVersion").FcLayerVersion = null as any;
utilities.lazyLoad(exports, ["FcLayerVersion"], () => require("./fcLayerVersion"));

export { FcServiceArgs, FcServiceState } from "./fcService";
export type FcService = import("./fcService").FcService;
export const FcService: typeof import("./fcService").FcService = null as any;
utilities.lazyLoad(exports, ["FcService"], () => require("./fcService"));

export { FcTriggerArgs, FcTriggerState } from "./fcTrigger";
export type FcTrigger = import("./fcTrigger").FcTrigger;
export const FcTrigger: typeof import("./fcTrigger").FcTrigger = null as any;
utilities.lazyLoad(exports, ["FcTrigger"], () => require("./fcTrigger"));

export { Fcv2FunctionArgs, Fcv2FunctionState } from "./fcv2Function";
export type Fcv2Function = import("./fcv2Function").Fcv2Function;
export const Fcv2Function: typeof import("./fcv2Function").Fcv2Function = null as any;
utilities.lazyLoad(exports, ["Fcv2Function"], () => require("./fcv2Function"));

export { Fcv3AliasArgs, Fcv3AliasState } from "./fcv3Alias";
export type Fcv3Alias = import("./fcv3Alias").Fcv3Alias;
export const Fcv3Alias: typeof import("./fcv3Alias").Fcv3Alias = null as any;
utilities.lazyLoad(exports, ["Fcv3Alias"], () => require("./fcv3Alias"));

export { Fcv3AsyncInvokeConfigArgs, Fcv3AsyncInvokeConfigState } from "./fcv3AsyncInvokeConfig";
export type Fcv3AsyncInvokeConfig = import("./fcv3AsyncInvokeConfig").Fcv3AsyncInvokeConfig;
export const Fcv3AsyncInvokeConfig: typeof import("./fcv3AsyncInvokeConfig").Fcv3AsyncInvokeConfig = null as any;
utilities.lazyLoad(exports, ["Fcv3AsyncInvokeConfig"], () => require("./fcv3AsyncInvokeConfig"));

export { Fcv3ConcurrencyConfigArgs, Fcv3ConcurrencyConfigState } from "./fcv3ConcurrencyConfig";
export type Fcv3ConcurrencyConfig = import("./fcv3ConcurrencyConfig").Fcv3ConcurrencyConfig;
export const Fcv3ConcurrencyConfig: typeof import("./fcv3ConcurrencyConfig").Fcv3ConcurrencyConfig = null as any;
utilities.lazyLoad(exports, ["Fcv3ConcurrencyConfig"], () => require("./fcv3ConcurrencyConfig"));

export { Fcv3CustomDomainArgs, Fcv3CustomDomainState } from "./fcv3CustomDomain";
export type Fcv3CustomDomain = import("./fcv3CustomDomain").Fcv3CustomDomain;
export const Fcv3CustomDomain: typeof import("./fcv3CustomDomain").Fcv3CustomDomain = null as any;
utilities.lazyLoad(exports, ["Fcv3CustomDomain"], () => require("./fcv3CustomDomain"));

export { Fcv3FunctionArgs, Fcv3FunctionState } from "./fcv3Function";
export type Fcv3Function = import("./fcv3Function").Fcv3Function;
export const Fcv3Function: typeof import("./fcv3Function").Fcv3Function = null as any;
utilities.lazyLoad(exports, ["Fcv3Function"], () => require("./fcv3Function"));

export { Fcv3FunctionVersionArgs, Fcv3FunctionVersionState } from "./fcv3FunctionVersion";
export type Fcv3FunctionVersion = import("./fcv3FunctionVersion").Fcv3FunctionVersion;
export const Fcv3FunctionVersion: typeof import("./fcv3FunctionVersion").Fcv3FunctionVersion = null as any;
utilities.lazyLoad(exports, ["Fcv3FunctionVersion"], () => require("./fcv3FunctionVersion"));

export { Fcv3TriggerArgs, Fcv3TriggerState } from "./fcv3Trigger";
export type Fcv3Trigger = import("./fcv3Trigger").Fcv3Trigger;
export const Fcv3Trigger: typeof import("./fcv3Trigger").Fcv3Trigger = null as any;
utilities.lazyLoad(exports, ["Fcv3Trigger"], () => require("./fcv3Trigger"));

export { FnfExecutionArgs, FnfExecutionState } from "./fnfExecution";
export type FnfExecution = import("./fnfExecution").FnfExecution;
export const FnfExecution: typeof import("./fnfExecution").FnfExecution = null as any;
utilities.lazyLoad(exports, ["FnfExecution"], () => require("./fnfExecution"));

export { FnfFlowArgs, FnfFlowState } from "./fnfFlow";
export type FnfFlow = import("./fnfFlow").FnfFlow;
export const FnfFlow: typeof import("./fnfFlow").FnfFlow = null as any;
utilities.lazyLoad(exports, ["FnfFlow"], () => require("./fnfFlow"));

export { FnfScheduleArgs, FnfScheduleState } from "./fnfSchedule";
export type FnfSchedule = import("./fnfSchedule").FnfSchedule;
export const FnfSchedule: typeof import("./fnfSchedule").FnfSchedule = null as any;
utilities.lazyLoad(exports, ["FnfSchedule"], () => require("./fnfSchedule"));

export { ForwardEntryArgs, ForwardEntryState } from "./forwardEntry";
export type ForwardEntry = import("./forwardEntry").ForwardEntry;
export const ForwardEntry: typeof import("./forwardEntry").ForwardEntry = null as any;
utilities.lazyLoad(exports, ["ForwardEntry"], () => require("./forwardEntry"));

export { GaAcceleratorArgs, GaAcceleratorState } from "./gaAccelerator";
export type GaAccelerator = import("./gaAccelerator").GaAccelerator;
export const GaAccelerator: typeof import("./gaAccelerator").GaAccelerator = null as any;
utilities.lazyLoad(exports, ["GaAccelerator"], () => require("./gaAccelerator"));

export { GaAcceleratorSpareIpAttachmentArgs, GaAcceleratorSpareIpAttachmentState } from "./gaAcceleratorSpareIpAttachment";
export type GaAcceleratorSpareIpAttachment = import("./gaAcceleratorSpareIpAttachment").GaAcceleratorSpareIpAttachment;
export const GaAcceleratorSpareIpAttachment: typeof import("./gaAcceleratorSpareIpAttachment").GaAcceleratorSpareIpAttachment = null as any;
utilities.lazyLoad(exports, ["GaAcceleratorSpareIpAttachment"], () => require("./gaAcceleratorSpareIpAttachment"));

export { GaAccessLogArgs, GaAccessLogState } from "./gaAccessLog";
export type GaAccessLog = import("./gaAccessLog").GaAccessLog;
export const GaAccessLog: typeof import("./gaAccessLog").GaAccessLog = null as any;
utilities.lazyLoad(exports, ["GaAccessLog"], () => require("./gaAccessLog"));

export { GaAclArgs, GaAclState } from "./gaAcl";
export type GaAcl = import("./gaAcl").GaAcl;
export const GaAcl: typeof import("./gaAcl").GaAcl = null as any;
utilities.lazyLoad(exports, ["GaAcl"], () => require("./gaAcl"));

export { GaAclAttachmentArgs, GaAclAttachmentState } from "./gaAclAttachment";
export type GaAclAttachment = import("./gaAclAttachment").GaAclAttachment;
export const GaAclAttachment: typeof import("./gaAclAttachment").GaAclAttachment = null as any;
utilities.lazyLoad(exports, ["GaAclAttachment"], () => require("./gaAclAttachment"));

export { GaAclEntryAttachmentArgs, GaAclEntryAttachmentState } from "./gaAclEntryAttachment";
export type GaAclEntryAttachment = import("./gaAclEntryAttachment").GaAclEntryAttachment;
export const GaAclEntryAttachment: typeof import("./gaAclEntryAttachment").GaAclEntryAttachment = null as any;
utilities.lazyLoad(exports, ["GaAclEntryAttachment"], () => require("./gaAclEntryAttachment"));

export { GaAdditionalCertificateArgs, GaAdditionalCertificateState } from "./gaAdditionalCertificate";
export type GaAdditionalCertificate = import("./gaAdditionalCertificate").GaAdditionalCertificate;
export const GaAdditionalCertificate: typeof import("./gaAdditionalCertificate").GaAdditionalCertificate = null as any;
utilities.lazyLoad(exports, ["GaAdditionalCertificate"], () => require("./gaAdditionalCertificate"));

export { GaBandwidthPackageArgs, GaBandwidthPackageState } from "./gaBandwidthPackage";
export type GaBandwidthPackage = import("./gaBandwidthPackage").GaBandwidthPackage;
export const GaBandwidthPackage: typeof import("./gaBandwidthPackage").GaBandwidthPackage = null as any;
utilities.lazyLoad(exports, ["GaBandwidthPackage"], () => require("./gaBandwidthPackage"));

export { GaBandwidthPackageAttachmentArgs, GaBandwidthPackageAttachmentState } from "./gaBandwidthPackageAttachment";
export type GaBandwidthPackageAttachment = import("./gaBandwidthPackageAttachment").GaBandwidthPackageAttachment;
export const GaBandwidthPackageAttachment: typeof import("./gaBandwidthPackageAttachment").GaBandwidthPackageAttachment = null as any;
utilities.lazyLoad(exports, ["GaBandwidthPackageAttachment"], () => require("./gaBandwidthPackageAttachment"));

export { GaBasicAccelerateIpArgs, GaBasicAccelerateIpState } from "./gaBasicAccelerateIp";
export type GaBasicAccelerateIp = import("./gaBasicAccelerateIp").GaBasicAccelerateIp;
export const GaBasicAccelerateIp: typeof import("./gaBasicAccelerateIp").GaBasicAccelerateIp = null as any;
utilities.lazyLoad(exports, ["GaBasicAccelerateIp"], () => require("./gaBasicAccelerateIp"));

export { GaBasicAccelerateIpEndpointRelationArgs, GaBasicAccelerateIpEndpointRelationState } from "./gaBasicAccelerateIpEndpointRelation";
export type GaBasicAccelerateIpEndpointRelation = import("./gaBasicAccelerateIpEndpointRelation").GaBasicAccelerateIpEndpointRelation;
export const GaBasicAccelerateIpEndpointRelation: typeof import("./gaBasicAccelerateIpEndpointRelation").GaBasicAccelerateIpEndpointRelation = null as any;
utilities.lazyLoad(exports, ["GaBasicAccelerateIpEndpointRelation"], () => require("./gaBasicAccelerateIpEndpointRelation"));

export { GaBasicAcceleratorArgs, GaBasicAcceleratorState } from "./gaBasicAccelerator";
export type GaBasicAccelerator = import("./gaBasicAccelerator").GaBasicAccelerator;
export const GaBasicAccelerator: typeof import("./gaBasicAccelerator").GaBasicAccelerator = null as any;
utilities.lazyLoad(exports, ["GaBasicAccelerator"], () => require("./gaBasicAccelerator"));

export { GaBasicEndpointArgs, GaBasicEndpointState } from "./gaBasicEndpoint";
export type GaBasicEndpoint = import("./gaBasicEndpoint").GaBasicEndpoint;
export const GaBasicEndpoint: typeof import("./gaBasicEndpoint").GaBasicEndpoint = null as any;
utilities.lazyLoad(exports, ["GaBasicEndpoint"], () => require("./gaBasicEndpoint"));

export { GaBasicEndpointGroupArgs, GaBasicEndpointGroupState } from "./gaBasicEndpointGroup";
export type GaBasicEndpointGroup = import("./gaBasicEndpointGroup").GaBasicEndpointGroup;
export const GaBasicEndpointGroup: typeof import("./gaBasicEndpointGroup").GaBasicEndpointGroup = null as any;
utilities.lazyLoad(exports, ["GaBasicEndpointGroup"], () => require("./gaBasicEndpointGroup"));

export { GaBasicIpSetArgs, GaBasicIpSetState } from "./gaBasicIpSet";
export type GaBasicIpSet = import("./gaBasicIpSet").GaBasicIpSet;
export const GaBasicIpSet: typeof import("./gaBasicIpSet").GaBasicIpSet = null as any;
utilities.lazyLoad(exports, ["GaBasicIpSet"], () => require("./gaBasicIpSet"));

export { GaCustomRoutingEndpointArgs, GaCustomRoutingEndpointState } from "./gaCustomRoutingEndpoint";
export type GaCustomRoutingEndpoint = import("./gaCustomRoutingEndpoint").GaCustomRoutingEndpoint;
export const GaCustomRoutingEndpoint: typeof import("./gaCustomRoutingEndpoint").GaCustomRoutingEndpoint = null as any;
utilities.lazyLoad(exports, ["GaCustomRoutingEndpoint"], () => require("./gaCustomRoutingEndpoint"));

export { GaCustomRoutingEndpointGroupArgs, GaCustomRoutingEndpointGroupState } from "./gaCustomRoutingEndpointGroup";
export type GaCustomRoutingEndpointGroup = import("./gaCustomRoutingEndpointGroup").GaCustomRoutingEndpointGroup;
export const GaCustomRoutingEndpointGroup: typeof import("./gaCustomRoutingEndpointGroup").GaCustomRoutingEndpointGroup = null as any;
utilities.lazyLoad(exports, ["GaCustomRoutingEndpointGroup"], () => require("./gaCustomRoutingEndpointGroup"));

export { GaCustomRoutingEndpointGroupDestinationArgs, GaCustomRoutingEndpointGroupDestinationState } from "./gaCustomRoutingEndpointGroupDestination";
export type GaCustomRoutingEndpointGroupDestination = import("./gaCustomRoutingEndpointGroupDestination").GaCustomRoutingEndpointGroupDestination;
export const GaCustomRoutingEndpointGroupDestination: typeof import("./gaCustomRoutingEndpointGroupDestination").GaCustomRoutingEndpointGroupDestination = null as any;
utilities.lazyLoad(exports, ["GaCustomRoutingEndpointGroupDestination"], () => require("./gaCustomRoutingEndpointGroupDestination"));

export { GaCustomRoutingEndpointTrafficPolicyArgs, GaCustomRoutingEndpointTrafficPolicyState } from "./gaCustomRoutingEndpointTrafficPolicy";
export type GaCustomRoutingEndpointTrafficPolicy = import("./gaCustomRoutingEndpointTrafficPolicy").GaCustomRoutingEndpointTrafficPolicy;
export const GaCustomRoutingEndpointTrafficPolicy: typeof import("./gaCustomRoutingEndpointTrafficPolicy").GaCustomRoutingEndpointTrafficPolicy = null as any;
utilities.lazyLoad(exports, ["GaCustomRoutingEndpointTrafficPolicy"], () => require("./gaCustomRoutingEndpointTrafficPolicy"));

export { GaDomainArgs, GaDomainState } from "./gaDomain";
export type GaDomain = import("./gaDomain").GaDomain;
export const GaDomain: typeof import("./gaDomain").GaDomain = null as any;
utilities.lazyLoad(exports, ["GaDomain"], () => require("./gaDomain"));

export { GaEndpointGroupArgs, GaEndpointGroupState } from "./gaEndpointGroup";
export type GaEndpointGroup = import("./gaEndpointGroup").GaEndpointGroup;
export const GaEndpointGroup: typeof import("./gaEndpointGroup").GaEndpointGroup = null as any;
utilities.lazyLoad(exports, ["GaEndpointGroup"], () => require("./gaEndpointGroup"));

export { GaForwardingRuleArgs, GaForwardingRuleState } from "./gaForwardingRule";
export type GaForwardingRule = import("./gaForwardingRule").GaForwardingRule;
export const GaForwardingRule: typeof import("./gaForwardingRule").GaForwardingRule = null as any;
utilities.lazyLoad(exports, ["GaForwardingRule"], () => require("./gaForwardingRule"));

export { GaIpSetArgs, GaIpSetState } from "./gaIpSet";
export type GaIpSet = import("./gaIpSet").GaIpSet;
export const GaIpSet: typeof import("./gaIpSet").GaIpSet = null as any;
utilities.lazyLoad(exports, ["GaIpSet"], () => require("./gaIpSet"));

export { GaListenerArgs, GaListenerState } from "./gaListener";
export type GaListener = import("./gaListener").GaListener;
export const GaListener: typeof import("./gaListener").GaListener = null as any;
utilities.lazyLoad(exports, ["GaListener"], () => require("./gaListener"));

export { GetAccountResult } from "./getAccount";
export const getAccount: typeof import("./getAccount").getAccount = null as any;
export const getAccountOutput: typeof import("./getAccount").getAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAccount","getAccountOutput"], () => require("./getAccount"));

export { GetAckServiceArgs, GetAckServiceResult, GetAckServiceOutputArgs } from "./getAckService";
export const getAckService: typeof import("./getAckService").getAckService = null as any;
export const getAckServiceOutput: typeof import("./getAckService").getAckServiceOutput = null as any;
utilities.lazyLoad(exports, ["getAckService","getAckServiceOutput"], () => require("./getAckService"));

export { GetActiontrailGlobalEventsStorageRegionArgs, GetActiontrailGlobalEventsStorageRegionResult, GetActiontrailGlobalEventsStorageRegionOutputArgs } from "./getActiontrailGlobalEventsStorageRegion";
export const getActiontrailGlobalEventsStorageRegion: typeof import("./getActiontrailGlobalEventsStorageRegion").getActiontrailGlobalEventsStorageRegion = null as any;
export const getActiontrailGlobalEventsStorageRegionOutput: typeof import("./getActiontrailGlobalEventsStorageRegion").getActiontrailGlobalEventsStorageRegionOutput = null as any;
utilities.lazyLoad(exports, ["getActiontrailGlobalEventsStorageRegion","getActiontrailGlobalEventsStorageRegionOutput"], () => require("./getActiontrailGlobalEventsStorageRegion"));

export { GetActiontrailHistoryDeliveryJobsArgs, GetActiontrailHistoryDeliveryJobsResult, GetActiontrailHistoryDeliveryJobsOutputArgs } from "./getActiontrailHistoryDeliveryJobs";
export const getActiontrailHistoryDeliveryJobs: typeof import("./getActiontrailHistoryDeliveryJobs").getActiontrailHistoryDeliveryJobs = null as any;
export const getActiontrailHistoryDeliveryJobsOutput: typeof import("./getActiontrailHistoryDeliveryJobs").getActiontrailHistoryDeliveryJobsOutput = null as any;
utilities.lazyLoad(exports, ["getActiontrailHistoryDeliveryJobs","getActiontrailHistoryDeliveryJobsOutput"], () => require("./getActiontrailHistoryDeliveryJobs"));

export { GetActiontrailTrailsArgs, GetActiontrailTrailsResult, GetActiontrailTrailsOutputArgs } from "./getActiontrailTrails";
export const getActiontrailTrails: typeof import("./getActiontrailTrails").getActiontrailTrails = null as any;
export const getActiontrailTrailsOutput: typeof import("./getActiontrailTrails").getActiontrailTrailsOutput = null as any;
utilities.lazyLoad(exports, ["getActiontrailTrails","getActiontrailTrailsOutput"], () => require("./getActiontrailTrails"));

export { GetActiontrailsArgs, GetActiontrailsResult, GetActiontrailsOutputArgs } from "./getActiontrails";
export const getActiontrails: typeof import("./getActiontrails").getActiontrails = null as any;
export const getActiontrailsOutput: typeof import("./getActiontrails").getActiontrailsOutput = null as any;
utilities.lazyLoad(exports, ["getActiontrails","getActiontrailsOutput"], () => require("./getActiontrails"));

export { GetAdbClustersArgs, GetAdbClustersResult, GetAdbClustersOutputArgs } from "./getAdbClusters";
export const getAdbClusters: typeof import("./getAdbClusters").getAdbClusters = null as any;
export const getAdbClustersOutput: typeof import("./getAdbClusters").getAdbClustersOutput = null as any;
utilities.lazyLoad(exports, ["getAdbClusters","getAdbClustersOutput"], () => require("./getAdbClusters"));

export { GetAdbDbClusterLakeVersionsArgs, GetAdbDbClusterLakeVersionsResult, GetAdbDbClusterLakeVersionsOutputArgs } from "./getAdbDbClusterLakeVersions";
export const getAdbDbClusterLakeVersions: typeof import("./getAdbDbClusterLakeVersions").getAdbDbClusterLakeVersions = null as any;
export const getAdbDbClusterLakeVersionsOutput: typeof import("./getAdbDbClusterLakeVersions").getAdbDbClusterLakeVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getAdbDbClusterLakeVersions","getAdbDbClusterLakeVersionsOutput"], () => require("./getAdbDbClusterLakeVersions"));

export { GetAdbDbClustersArgs, GetAdbDbClustersResult, GetAdbDbClustersOutputArgs } from "./getAdbDbClusters";
export const getAdbDbClusters: typeof import("./getAdbDbClusters").getAdbDbClusters = null as any;
export const getAdbDbClustersOutput: typeof import("./getAdbDbClusters").getAdbDbClustersOutput = null as any;
utilities.lazyLoad(exports, ["getAdbDbClusters","getAdbDbClustersOutput"], () => require("./getAdbDbClusters"));

export { GetAdbResourceGroupsArgs, GetAdbResourceGroupsResult, GetAdbResourceGroupsOutputArgs } from "./getAdbResourceGroups";
export const getAdbResourceGroups: typeof import("./getAdbResourceGroups").getAdbResourceGroups = null as any;
export const getAdbResourceGroupsOutput: typeof import("./getAdbResourceGroups").getAdbResourceGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getAdbResourceGroups","getAdbResourceGroupsOutput"], () => require("./getAdbResourceGroups"));

export { GetAdbZonesArgs, GetAdbZonesResult, GetAdbZonesOutputArgs } from "./getAdbZones";
export const getAdbZones: typeof import("./getAdbZones").getAdbZones = null as any;
export const getAdbZonesOutput: typeof import("./getAdbZones").getAdbZonesOutput = null as any;
utilities.lazyLoad(exports, ["getAdbZones","getAdbZonesOutput"], () => require("./getAdbZones"));

export { GetAlbAclsArgs, GetAlbAclsResult, GetAlbAclsOutputArgs } from "./getAlbAcls";
export const getAlbAcls: typeof import("./getAlbAcls").getAlbAcls = null as any;
export const getAlbAclsOutput: typeof import("./getAlbAcls").getAlbAclsOutput = null as any;
utilities.lazyLoad(exports, ["getAlbAcls","getAlbAclsOutput"], () => require("./getAlbAcls"));

export { GetAlbAscriptsArgs, GetAlbAscriptsResult, GetAlbAscriptsOutputArgs } from "./getAlbAscripts";
export const getAlbAscripts: typeof import("./getAlbAscripts").getAlbAscripts = null as any;
export const getAlbAscriptsOutput: typeof import("./getAlbAscripts").getAlbAscriptsOutput = null as any;
utilities.lazyLoad(exports, ["getAlbAscripts","getAlbAscriptsOutput"], () => require("./getAlbAscripts"));

export { GetAlbHealthCheckTemplatesArgs, GetAlbHealthCheckTemplatesResult, GetAlbHealthCheckTemplatesOutputArgs } from "./getAlbHealthCheckTemplates";
export const getAlbHealthCheckTemplates: typeof import("./getAlbHealthCheckTemplates").getAlbHealthCheckTemplates = null as any;
export const getAlbHealthCheckTemplatesOutput: typeof import("./getAlbHealthCheckTemplates").getAlbHealthCheckTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getAlbHealthCheckTemplates","getAlbHealthCheckTemplatesOutput"], () => require("./getAlbHealthCheckTemplates"));

export { GetAlbListenersArgs, GetAlbListenersResult, GetAlbListenersOutputArgs } from "./getAlbListeners";
export const getAlbListeners: typeof import("./getAlbListeners").getAlbListeners = null as any;
export const getAlbListenersOutput: typeof import("./getAlbListeners").getAlbListenersOutput = null as any;
utilities.lazyLoad(exports, ["getAlbListeners","getAlbListenersOutput"], () => require("./getAlbListeners"));

export { GetAlbLoadBalancersArgs, GetAlbLoadBalancersResult, GetAlbLoadBalancersOutputArgs } from "./getAlbLoadBalancers";
export const getAlbLoadBalancers: typeof import("./getAlbLoadBalancers").getAlbLoadBalancers = null as any;
export const getAlbLoadBalancersOutput: typeof import("./getAlbLoadBalancers").getAlbLoadBalancersOutput = null as any;
utilities.lazyLoad(exports, ["getAlbLoadBalancers","getAlbLoadBalancersOutput"], () => require("./getAlbLoadBalancers"));

export { GetAlbRulesArgs, GetAlbRulesResult, GetAlbRulesOutputArgs } from "./getAlbRules";
export const getAlbRules: typeof import("./getAlbRules").getAlbRules = null as any;
export const getAlbRulesOutput: typeof import("./getAlbRules").getAlbRulesOutput = null as any;
utilities.lazyLoad(exports, ["getAlbRules","getAlbRulesOutput"], () => require("./getAlbRules"));

export { GetAlbSecurityPoliciesArgs, GetAlbSecurityPoliciesResult, GetAlbSecurityPoliciesOutputArgs } from "./getAlbSecurityPolicies";
export const getAlbSecurityPolicies: typeof import("./getAlbSecurityPolicies").getAlbSecurityPolicies = null as any;
export const getAlbSecurityPoliciesOutput: typeof import("./getAlbSecurityPolicies").getAlbSecurityPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getAlbSecurityPolicies","getAlbSecurityPoliciesOutput"], () => require("./getAlbSecurityPolicies"));

export { GetAlbServerGroupsArgs, GetAlbServerGroupsResult, GetAlbServerGroupsOutputArgs } from "./getAlbServerGroups";
export const getAlbServerGroups: typeof import("./getAlbServerGroups").getAlbServerGroups = null as any;
export const getAlbServerGroupsOutput: typeof import("./getAlbServerGroups").getAlbServerGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getAlbServerGroups","getAlbServerGroupsOutput"], () => require("./getAlbServerGroups"));

export { GetAlbSystemSecurityPoliciesArgs, GetAlbSystemSecurityPoliciesResult, GetAlbSystemSecurityPoliciesOutputArgs } from "./getAlbSystemSecurityPolicies";
export const getAlbSystemSecurityPolicies: typeof import("./getAlbSystemSecurityPolicies").getAlbSystemSecurityPolicies = null as any;
export const getAlbSystemSecurityPoliciesOutput: typeof import("./getAlbSystemSecurityPolicies").getAlbSystemSecurityPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getAlbSystemSecurityPolicies","getAlbSystemSecurityPoliciesOutput"], () => require("./getAlbSystemSecurityPolicies"));

export { GetAlbZonesArgs, GetAlbZonesResult, GetAlbZonesOutputArgs } from "./getAlbZones";
export const getAlbZones: typeof import("./getAlbZones").getAlbZones = null as any;
export const getAlbZonesOutput: typeof import("./getAlbZones").getAlbZonesOutput = null as any;
utilities.lazyLoad(exports, ["getAlbZones","getAlbZonesOutput"], () => require("./getAlbZones"));

export { GetAlidnsAccessStrategiesArgs, GetAlidnsAccessStrategiesResult, GetAlidnsAccessStrategiesOutputArgs } from "./getAlidnsAccessStrategies";
export const getAlidnsAccessStrategies: typeof import("./getAlidnsAccessStrategies").getAlidnsAccessStrategies = null as any;
export const getAlidnsAccessStrategiesOutput: typeof import("./getAlidnsAccessStrategies").getAlidnsAccessStrategiesOutput = null as any;
utilities.lazyLoad(exports, ["getAlidnsAccessStrategies","getAlidnsAccessStrategiesOutput"], () => require("./getAlidnsAccessStrategies"));

export { GetAlidnsAddressPoolsArgs, GetAlidnsAddressPoolsResult, GetAlidnsAddressPoolsOutputArgs } from "./getAlidnsAddressPools";
export const getAlidnsAddressPools: typeof import("./getAlidnsAddressPools").getAlidnsAddressPools = null as any;
export const getAlidnsAddressPoolsOutput: typeof import("./getAlidnsAddressPools").getAlidnsAddressPoolsOutput = null as any;
utilities.lazyLoad(exports, ["getAlidnsAddressPools","getAlidnsAddressPoolsOutput"], () => require("./getAlidnsAddressPools"));

export { GetAlidnsCustomLinesArgs, GetAlidnsCustomLinesResult, GetAlidnsCustomLinesOutputArgs } from "./getAlidnsCustomLines";
export const getAlidnsCustomLines: typeof import("./getAlidnsCustomLines").getAlidnsCustomLines = null as any;
export const getAlidnsCustomLinesOutput: typeof import("./getAlidnsCustomLines").getAlidnsCustomLinesOutput = null as any;
utilities.lazyLoad(exports, ["getAlidnsCustomLines","getAlidnsCustomLinesOutput"], () => require("./getAlidnsCustomLines"));

export { GetAlidnsDomainGroupsArgs, GetAlidnsDomainGroupsResult, GetAlidnsDomainGroupsOutputArgs } from "./getAlidnsDomainGroups";
export const getAlidnsDomainGroups: typeof import("./getAlidnsDomainGroups").getAlidnsDomainGroups = null as any;
export const getAlidnsDomainGroupsOutput: typeof import("./getAlidnsDomainGroups").getAlidnsDomainGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getAlidnsDomainGroups","getAlidnsDomainGroupsOutput"], () => require("./getAlidnsDomainGroups"));

export { GetAlidnsDomainsArgs, GetAlidnsDomainsResult, GetAlidnsDomainsOutputArgs } from "./getAlidnsDomains";
export const getAlidnsDomains: typeof import("./getAlidnsDomains").getAlidnsDomains = null as any;
export const getAlidnsDomainsOutput: typeof import("./getAlidnsDomains").getAlidnsDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getAlidnsDomains","getAlidnsDomainsOutput"], () => require("./getAlidnsDomains"));

export { GetAlidnsGtmInstancesArgs, GetAlidnsGtmInstancesResult, GetAlidnsGtmInstancesOutputArgs } from "./getAlidnsGtmInstances";
export const getAlidnsGtmInstances: typeof import("./getAlidnsGtmInstances").getAlidnsGtmInstances = null as any;
export const getAlidnsGtmInstancesOutput: typeof import("./getAlidnsGtmInstances").getAlidnsGtmInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getAlidnsGtmInstances","getAlidnsGtmInstancesOutput"], () => require("./getAlidnsGtmInstances"));

export { GetAlidnsInstancesArgs, GetAlidnsInstancesResult, GetAlidnsInstancesOutputArgs } from "./getAlidnsInstances";
export const getAlidnsInstances: typeof import("./getAlidnsInstances").getAlidnsInstances = null as any;
export const getAlidnsInstancesOutput: typeof import("./getAlidnsInstances").getAlidnsInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getAlidnsInstances","getAlidnsInstancesOutput"], () => require("./getAlidnsInstances"));

export { GetAlidnsRecordsArgs, GetAlidnsRecordsResult, GetAlidnsRecordsOutputArgs } from "./getAlidnsRecords";
export const getAlidnsRecords: typeof import("./getAlidnsRecords").getAlidnsRecords = null as any;
export const getAlidnsRecordsOutput: typeof import("./getAlidnsRecords").getAlidnsRecordsOutput = null as any;
utilities.lazyLoad(exports, ["getAlidnsRecords","getAlidnsRecordsOutput"], () => require("./getAlidnsRecords"));

export { GetAlikafkaConsumerGroupsArgs, GetAlikafkaConsumerGroupsResult, GetAlikafkaConsumerGroupsOutputArgs } from "./getAlikafkaConsumerGroups";
export const getAlikafkaConsumerGroups: typeof import("./getAlikafkaConsumerGroups").getAlikafkaConsumerGroups = null as any;
export const getAlikafkaConsumerGroupsOutput: typeof import("./getAlikafkaConsumerGroups").getAlikafkaConsumerGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getAlikafkaConsumerGroups","getAlikafkaConsumerGroupsOutput"], () => require("./getAlikafkaConsumerGroups"));

export { GetAlikafkaInstancesArgs, GetAlikafkaInstancesResult, GetAlikafkaInstancesOutputArgs } from "./getAlikafkaInstances";
export const getAlikafkaInstances: typeof import("./getAlikafkaInstances").getAlikafkaInstances = null as any;
export const getAlikafkaInstancesOutput: typeof import("./getAlikafkaInstances").getAlikafkaInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getAlikafkaInstances","getAlikafkaInstancesOutput"], () => require("./getAlikafkaInstances"));

export { GetAlikafkaSaslAclsArgs, GetAlikafkaSaslAclsResult, GetAlikafkaSaslAclsOutputArgs } from "./getAlikafkaSaslAcls";
export const getAlikafkaSaslAcls: typeof import("./getAlikafkaSaslAcls").getAlikafkaSaslAcls = null as any;
export const getAlikafkaSaslAclsOutput: typeof import("./getAlikafkaSaslAcls").getAlikafkaSaslAclsOutput = null as any;
utilities.lazyLoad(exports, ["getAlikafkaSaslAcls","getAlikafkaSaslAclsOutput"], () => require("./getAlikafkaSaslAcls"));

export { GetAlikafkaSaslUsersArgs, GetAlikafkaSaslUsersResult, GetAlikafkaSaslUsersOutputArgs } from "./getAlikafkaSaslUsers";
export const getAlikafkaSaslUsers: typeof import("./getAlikafkaSaslUsers").getAlikafkaSaslUsers = null as any;
export const getAlikafkaSaslUsersOutput: typeof import("./getAlikafkaSaslUsers").getAlikafkaSaslUsersOutput = null as any;
utilities.lazyLoad(exports, ["getAlikafkaSaslUsers","getAlikafkaSaslUsersOutput"], () => require("./getAlikafkaSaslUsers"));

export { GetAlikafkaTopicsArgs, GetAlikafkaTopicsResult, GetAlikafkaTopicsOutputArgs } from "./getAlikafkaTopics";
export const getAlikafkaTopics: typeof import("./getAlikafkaTopics").getAlikafkaTopics = null as any;
export const getAlikafkaTopicsOutput: typeof import("./getAlikafkaTopics").getAlikafkaTopicsOutput = null as any;
utilities.lazyLoad(exports, ["getAlikafkaTopics","getAlikafkaTopicsOutput"], () => require("./getAlikafkaTopics"));

export { GetAmqpBindingsArgs, GetAmqpBindingsResult, GetAmqpBindingsOutputArgs } from "./getAmqpBindings";
export const getAmqpBindings: typeof import("./getAmqpBindings").getAmqpBindings = null as any;
export const getAmqpBindingsOutput: typeof import("./getAmqpBindings").getAmqpBindingsOutput = null as any;
utilities.lazyLoad(exports, ["getAmqpBindings","getAmqpBindingsOutput"], () => require("./getAmqpBindings"));

export { GetAmqpExchangesArgs, GetAmqpExchangesResult, GetAmqpExchangesOutputArgs } from "./getAmqpExchanges";
export const getAmqpExchanges: typeof import("./getAmqpExchanges").getAmqpExchanges = null as any;
export const getAmqpExchangesOutput: typeof import("./getAmqpExchanges").getAmqpExchangesOutput = null as any;
utilities.lazyLoad(exports, ["getAmqpExchanges","getAmqpExchangesOutput"], () => require("./getAmqpExchanges"));

export { GetAmqpInstancesArgs, GetAmqpInstancesResult, GetAmqpInstancesOutputArgs } from "./getAmqpInstances";
export const getAmqpInstances: typeof import("./getAmqpInstances").getAmqpInstances = null as any;
export const getAmqpInstancesOutput: typeof import("./getAmqpInstances").getAmqpInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getAmqpInstances","getAmqpInstancesOutput"], () => require("./getAmqpInstances"));

export { GetAmqpQueuesArgs, GetAmqpQueuesResult, GetAmqpQueuesOutputArgs } from "./getAmqpQueues";
export const getAmqpQueues: typeof import("./getAmqpQueues").getAmqpQueues = null as any;
export const getAmqpQueuesOutput: typeof import("./getAmqpQueues").getAmqpQueuesOutput = null as any;
utilities.lazyLoad(exports, ["getAmqpQueues","getAmqpQueuesOutput"], () => require("./getAmqpQueues"));

export { GetAmqpStaticAccountsArgs, GetAmqpStaticAccountsResult, GetAmqpStaticAccountsOutputArgs } from "./getAmqpStaticAccounts";
export const getAmqpStaticAccounts: typeof import("./getAmqpStaticAccounts").getAmqpStaticAccounts = null as any;
export const getAmqpStaticAccountsOutput: typeof import("./getAmqpStaticAccounts").getAmqpStaticAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getAmqpStaticAccounts","getAmqpStaticAccountsOutput"], () => require("./getAmqpStaticAccounts"));

export { GetAmqpVirtualHostsArgs, GetAmqpVirtualHostsResult, GetAmqpVirtualHostsOutputArgs } from "./getAmqpVirtualHosts";
export const getAmqpVirtualHosts: typeof import("./getAmqpVirtualHosts").getAmqpVirtualHosts = null as any;
export const getAmqpVirtualHostsOutput: typeof import("./getAmqpVirtualHosts").getAmqpVirtualHostsOutput = null as any;
utilities.lazyLoad(exports, ["getAmqpVirtualHosts","getAmqpVirtualHostsOutput"], () => require("./getAmqpVirtualHosts"));

export { GetApiGatewayApisArgs, GetApiGatewayApisResult, GetApiGatewayApisOutputArgs } from "./getApiGatewayApis";
export const getApiGatewayApis: typeof import("./getApiGatewayApis").getApiGatewayApis = null as any;
export const getApiGatewayApisOutput: typeof import("./getApiGatewayApis").getApiGatewayApisOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayApis","getApiGatewayApisOutput"], () => require("./getApiGatewayApis"));

export { GetApiGatewayAppsArgs, GetApiGatewayAppsResult, GetApiGatewayAppsOutputArgs } from "./getApiGatewayApps";
export const getApiGatewayApps: typeof import("./getApiGatewayApps").getApiGatewayApps = null as any;
export const getApiGatewayAppsOutput: typeof import("./getApiGatewayApps").getApiGatewayAppsOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayApps","getApiGatewayAppsOutput"], () => require("./getApiGatewayApps"));

export { GetApiGatewayBackendsArgs, GetApiGatewayBackendsResult, GetApiGatewayBackendsOutputArgs } from "./getApiGatewayBackends";
export const getApiGatewayBackends: typeof import("./getApiGatewayBackends").getApiGatewayBackends = null as any;
export const getApiGatewayBackendsOutput: typeof import("./getApiGatewayBackends").getApiGatewayBackendsOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayBackends","getApiGatewayBackendsOutput"], () => require("./getApiGatewayBackends"));

export { GetApiGatewayGroupsArgs, GetApiGatewayGroupsResult, GetApiGatewayGroupsOutputArgs } from "./getApiGatewayGroups";
export const getApiGatewayGroups: typeof import("./getApiGatewayGroups").getApiGatewayGroups = null as any;
export const getApiGatewayGroupsOutput: typeof import("./getApiGatewayGroups").getApiGatewayGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayGroups","getApiGatewayGroupsOutput"], () => require("./getApiGatewayGroups"));

export { GetApiGatewayLogConfigsArgs, GetApiGatewayLogConfigsResult, GetApiGatewayLogConfigsOutputArgs } from "./getApiGatewayLogConfigs";
export const getApiGatewayLogConfigs: typeof import("./getApiGatewayLogConfigs").getApiGatewayLogConfigs = null as any;
export const getApiGatewayLogConfigsOutput: typeof import("./getApiGatewayLogConfigs").getApiGatewayLogConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayLogConfigs","getApiGatewayLogConfigsOutput"], () => require("./getApiGatewayLogConfigs"));

export { GetApiGatewayModelsArgs, GetApiGatewayModelsResult, GetApiGatewayModelsOutputArgs } from "./getApiGatewayModels";
export const getApiGatewayModels: typeof import("./getApiGatewayModels").getApiGatewayModels = null as any;
export const getApiGatewayModelsOutput: typeof import("./getApiGatewayModels").getApiGatewayModelsOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayModels","getApiGatewayModelsOutput"], () => require("./getApiGatewayModels"));

export { GetApiGatewayPluginsArgs, GetApiGatewayPluginsResult, GetApiGatewayPluginsOutputArgs } from "./getApiGatewayPlugins";
export const getApiGatewayPlugins: typeof import("./getApiGatewayPlugins").getApiGatewayPlugins = null as any;
export const getApiGatewayPluginsOutput: typeof import("./getApiGatewayPlugins").getApiGatewayPluginsOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayPlugins","getApiGatewayPluginsOutput"], () => require("./getApiGatewayPlugins"));

export { GetApiGatewayServiceArgs, GetApiGatewayServiceResult, GetApiGatewayServiceOutputArgs } from "./getApiGatewayService";
export const getApiGatewayService: typeof import("./getApiGatewayService").getApiGatewayService = null as any;
export const getApiGatewayServiceOutput: typeof import("./getApiGatewayService").getApiGatewayServiceOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayService","getApiGatewayServiceOutput"], () => require("./getApiGatewayService"));

export { GetArmsAlertContactGroupsArgs, GetArmsAlertContactGroupsResult, GetArmsAlertContactGroupsOutputArgs } from "./getArmsAlertContactGroups";
export const getArmsAlertContactGroups: typeof import("./getArmsAlertContactGroups").getArmsAlertContactGroups = null as any;
export const getArmsAlertContactGroupsOutput: typeof import("./getArmsAlertContactGroups").getArmsAlertContactGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getArmsAlertContactGroups","getArmsAlertContactGroupsOutput"], () => require("./getArmsAlertContactGroups"));

export { GetArmsAlertContactsArgs, GetArmsAlertContactsResult, GetArmsAlertContactsOutputArgs } from "./getArmsAlertContacts";
export const getArmsAlertContacts: typeof import("./getArmsAlertContacts").getArmsAlertContacts = null as any;
export const getArmsAlertContactsOutput: typeof import("./getArmsAlertContacts").getArmsAlertContactsOutput = null as any;
utilities.lazyLoad(exports, ["getArmsAlertContacts","getArmsAlertContactsOutput"], () => require("./getArmsAlertContacts"));

export { GetArmsDispatchRulesArgs, GetArmsDispatchRulesResult, GetArmsDispatchRulesOutputArgs } from "./getArmsDispatchRules";
export const getArmsDispatchRules: typeof import("./getArmsDispatchRules").getArmsDispatchRules = null as any;
export const getArmsDispatchRulesOutput: typeof import("./getArmsDispatchRules").getArmsDispatchRulesOutput = null as any;
utilities.lazyLoad(exports, ["getArmsDispatchRules","getArmsDispatchRulesOutput"], () => require("./getArmsDispatchRules"));

export { GetArmsIntegrationExportersArgs, GetArmsIntegrationExportersResult, GetArmsIntegrationExportersOutputArgs } from "./getArmsIntegrationExporters";
export const getArmsIntegrationExporters: typeof import("./getArmsIntegrationExporters").getArmsIntegrationExporters = null as any;
export const getArmsIntegrationExportersOutput: typeof import("./getArmsIntegrationExporters").getArmsIntegrationExportersOutput = null as any;
utilities.lazyLoad(exports, ["getArmsIntegrationExporters","getArmsIntegrationExportersOutput"], () => require("./getArmsIntegrationExporters"));

export { GetArmsPrometheisArgs, GetArmsPrometheisResult, GetArmsPrometheisOutputArgs } from "./getArmsPrometheis";
export const getArmsPrometheis: typeof import("./getArmsPrometheis").getArmsPrometheis = null as any;
export const getArmsPrometheisOutput: typeof import("./getArmsPrometheis").getArmsPrometheisOutput = null as any;
utilities.lazyLoad(exports, ["getArmsPrometheis","getArmsPrometheisOutput"], () => require("./getArmsPrometheis"));

export { GetArmsPrometheusArgs, GetArmsPrometheusResult, GetArmsPrometheusOutputArgs } from "./getArmsPrometheus";
export const getArmsPrometheus: typeof import("./getArmsPrometheus").getArmsPrometheus = null as any;
export const getArmsPrometheusOutput: typeof import("./getArmsPrometheus").getArmsPrometheusOutput = null as any;
utilities.lazyLoad(exports, ["getArmsPrometheus","getArmsPrometheusOutput"], () => require("./getArmsPrometheus"));

export { GetArmsPrometheusAlertRulesArgs, GetArmsPrometheusAlertRulesResult, GetArmsPrometheusAlertRulesOutputArgs } from "./getArmsPrometheusAlertRules";
export const getArmsPrometheusAlertRules: typeof import("./getArmsPrometheusAlertRules").getArmsPrometheusAlertRules = null as any;
export const getArmsPrometheusAlertRulesOutput: typeof import("./getArmsPrometheusAlertRules").getArmsPrometheusAlertRulesOutput = null as any;
utilities.lazyLoad(exports, ["getArmsPrometheusAlertRules","getArmsPrometheusAlertRulesOutput"], () => require("./getArmsPrometheusAlertRules"));

export { GetArmsPrometheusMonitoringsArgs, GetArmsPrometheusMonitoringsResult, GetArmsPrometheusMonitoringsOutputArgs } from "./getArmsPrometheusMonitorings";
export const getArmsPrometheusMonitorings: typeof import("./getArmsPrometheusMonitorings").getArmsPrometheusMonitorings = null as any;
export const getArmsPrometheusMonitoringsOutput: typeof import("./getArmsPrometheusMonitorings").getArmsPrometheusMonitoringsOutput = null as any;
utilities.lazyLoad(exports, ["getArmsPrometheusMonitorings","getArmsPrometheusMonitoringsOutput"], () => require("./getArmsPrometheusMonitorings"));

export { GetArmsRemoteWritesArgs, GetArmsRemoteWritesResult, GetArmsRemoteWritesOutputArgs } from "./getArmsRemoteWrites";
export const getArmsRemoteWrites: typeof import("./getArmsRemoteWrites").getArmsRemoteWrites = null as any;
export const getArmsRemoteWritesOutput: typeof import("./getArmsRemoteWrites").getArmsRemoteWritesOutput = null as any;
utilities.lazyLoad(exports, ["getArmsRemoteWrites","getArmsRemoteWritesOutput"], () => require("./getArmsRemoteWrites"));

export { GetBastionhostHostAccountsArgs, GetBastionhostHostAccountsResult, GetBastionhostHostAccountsOutputArgs } from "./getBastionhostHostAccounts";
export const getBastionhostHostAccounts: typeof import("./getBastionhostHostAccounts").getBastionhostHostAccounts = null as any;
export const getBastionhostHostAccountsOutput: typeof import("./getBastionhostHostAccounts").getBastionhostHostAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getBastionhostHostAccounts","getBastionhostHostAccountsOutput"], () => require("./getBastionhostHostAccounts"));

export { GetBastionhostHostGroupsArgs, GetBastionhostHostGroupsResult, GetBastionhostHostGroupsOutputArgs } from "./getBastionhostHostGroups";
export const getBastionhostHostGroups: typeof import("./getBastionhostHostGroups").getBastionhostHostGroups = null as any;
export const getBastionhostHostGroupsOutput: typeof import("./getBastionhostHostGroups").getBastionhostHostGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getBastionhostHostGroups","getBastionhostHostGroupsOutput"], () => require("./getBastionhostHostGroups"));

export { GetBastionhostHostShareKeysArgs, GetBastionhostHostShareKeysResult, GetBastionhostHostShareKeysOutputArgs } from "./getBastionhostHostShareKeys";
export const getBastionhostHostShareKeys: typeof import("./getBastionhostHostShareKeys").getBastionhostHostShareKeys = null as any;
export const getBastionhostHostShareKeysOutput: typeof import("./getBastionhostHostShareKeys").getBastionhostHostShareKeysOutput = null as any;
utilities.lazyLoad(exports, ["getBastionhostHostShareKeys","getBastionhostHostShareKeysOutput"], () => require("./getBastionhostHostShareKeys"));

export { GetBastionhostHostsArgs, GetBastionhostHostsResult, GetBastionhostHostsOutputArgs } from "./getBastionhostHosts";
export const getBastionhostHosts: typeof import("./getBastionhostHosts").getBastionhostHosts = null as any;
export const getBastionhostHostsOutput: typeof import("./getBastionhostHosts").getBastionhostHostsOutput = null as any;
utilities.lazyLoad(exports, ["getBastionhostHosts","getBastionhostHostsOutput"], () => require("./getBastionhostHosts"));

export { GetBastionhostInstancesArgs, GetBastionhostInstancesResult, GetBastionhostInstancesOutputArgs } from "./getBastionhostInstances";
export const getBastionhostInstances: typeof import("./getBastionhostInstances").getBastionhostInstances = null as any;
export const getBastionhostInstancesOutput: typeof import("./getBastionhostInstances").getBastionhostInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getBastionhostInstances","getBastionhostInstancesOutput"], () => require("./getBastionhostInstances"));

export { GetBastionhostUserGroupsArgs, GetBastionhostUserGroupsResult, GetBastionhostUserGroupsOutputArgs } from "./getBastionhostUserGroups";
export const getBastionhostUserGroups: typeof import("./getBastionhostUserGroups").getBastionhostUserGroups = null as any;
export const getBastionhostUserGroupsOutput: typeof import("./getBastionhostUserGroups").getBastionhostUserGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getBastionhostUserGroups","getBastionhostUserGroupsOutput"], () => require("./getBastionhostUserGroups"));

export { GetBastionhostUsersArgs, GetBastionhostUsersResult, GetBastionhostUsersOutputArgs } from "./getBastionhostUsers";
export const getBastionhostUsers: typeof import("./getBastionhostUsers").getBastionhostUsers = null as any;
export const getBastionhostUsersOutput: typeof import("./getBastionhostUsers").getBastionhostUsersOutput = null as any;
utilities.lazyLoad(exports, ["getBastionhostUsers","getBastionhostUsersOutput"], () => require("./getBastionhostUsers"));

export { GetBpStudioApplicationsArgs, GetBpStudioApplicationsResult, GetBpStudioApplicationsOutputArgs } from "./getBpStudioApplications";
export const getBpStudioApplications: typeof import("./getBpStudioApplications").getBpStudioApplications = null as any;
export const getBpStudioApplicationsOutput: typeof import("./getBpStudioApplications").getBpStudioApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getBpStudioApplications","getBpStudioApplicationsOutput"], () => require("./getBpStudioApplications"));

export { GetBrainIndustrialPidLoopsArgs, GetBrainIndustrialPidLoopsResult, GetBrainIndustrialPidLoopsOutputArgs } from "./getBrainIndustrialPidLoops";
export const getBrainIndustrialPidLoops: typeof import("./getBrainIndustrialPidLoops").getBrainIndustrialPidLoops = null as any;
export const getBrainIndustrialPidLoopsOutput: typeof import("./getBrainIndustrialPidLoops").getBrainIndustrialPidLoopsOutput = null as any;
utilities.lazyLoad(exports, ["getBrainIndustrialPidLoops","getBrainIndustrialPidLoopsOutput"], () => require("./getBrainIndustrialPidLoops"));

export { GetBrainIndustrialPidOrganizationsArgs, GetBrainIndustrialPidOrganizationsResult, GetBrainIndustrialPidOrganizationsOutputArgs } from "./getBrainIndustrialPidOrganizations";
export const getBrainIndustrialPidOrganizations: typeof import("./getBrainIndustrialPidOrganizations").getBrainIndustrialPidOrganizations = null as any;
export const getBrainIndustrialPidOrganizationsOutput: typeof import("./getBrainIndustrialPidOrganizations").getBrainIndustrialPidOrganizationsOutput = null as any;
utilities.lazyLoad(exports, ["getBrainIndustrialPidOrganizations","getBrainIndustrialPidOrganizationsOutput"], () => require("./getBrainIndustrialPidOrganizations"));

export { GetBrainIndustrialPidProjectsArgs, GetBrainIndustrialPidProjectsResult, GetBrainIndustrialPidProjectsOutputArgs } from "./getBrainIndustrialPidProjects";
export const getBrainIndustrialPidProjects: typeof import("./getBrainIndustrialPidProjects").getBrainIndustrialPidProjects = null as any;
export const getBrainIndustrialPidProjectsOutput: typeof import("./getBrainIndustrialPidProjects").getBrainIndustrialPidProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getBrainIndustrialPidProjects","getBrainIndustrialPidProjectsOutput"], () => require("./getBrainIndustrialPidProjects"));

export { GetBrainIndustrialServiceArgs, GetBrainIndustrialServiceResult, GetBrainIndustrialServiceOutputArgs } from "./getBrainIndustrialService";
export const getBrainIndustrialService: typeof import("./getBrainIndustrialService").getBrainIndustrialService = null as any;
export const getBrainIndustrialServiceOutput: typeof import("./getBrainIndustrialService").getBrainIndustrialServiceOutput = null as any;
utilities.lazyLoad(exports, ["getBrainIndustrialService","getBrainIndustrialServiceOutput"], () => require("./getBrainIndustrialService"));

export { GetBssOpenApiPricingModulesArgs, GetBssOpenApiPricingModulesResult, GetBssOpenApiPricingModulesOutputArgs } from "./getBssOpenApiPricingModules";
export const getBssOpenApiPricingModules: typeof import("./getBssOpenApiPricingModules").getBssOpenApiPricingModules = null as any;
export const getBssOpenApiPricingModulesOutput: typeof import("./getBssOpenApiPricingModules").getBssOpenApiPricingModulesOutput = null as any;
utilities.lazyLoad(exports, ["getBssOpenApiPricingModules","getBssOpenApiPricingModulesOutput"], () => require("./getBssOpenApiPricingModules"));

export { GetBssOpenApiProductsArgs, GetBssOpenApiProductsResult, GetBssOpenApiProductsOutputArgs } from "./getBssOpenApiProducts";
export const getBssOpenApiProducts: typeof import("./getBssOpenApiProducts").getBssOpenApiProducts = null as any;
export const getBssOpenApiProductsOutput: typeof import("./getBssOpenApiProducts").getBssOpenApiProductsOutput = null as any;
utilities.lazyLoad(exports, ["getBssOpenApiProducts","getBssOpenApiProductsOutput"], () => require("./getBssOpenApiProducts"));

export { GetCallerIdentityArgs, GetCallerIdentityResult, GetCallerIdentityOutputArgs } from "./getCallerIdentity";
export const getCallerIdentity: typeof import("./getCallerIdentity").getCallerIdentity = null as any;
export const getCallerIdentityOutput: typeof import("./getCallerIdentity").getCallerIdentityOutput = null as any;
utilities.lazyLoad(exports, ["getCallerIdentity","getCallerIdentityOutput"], () => require("./getCallerIdentity"));

export { GetCasCertificatesArgs, GetCasCertificatesResult, GetCasCertificatesOutputArgs } from "./getCasCertificates";
export const getCasCertificates: typeof import("./getCasCertificates").getCasCertificates = null as any;
export const getCasCertificatesOutput: typeof import("./getCasCertificates").getCasCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getCasCertificates","getCasCertificatesOutput"], () => require("./getCasCertificates"));

export { GetCassandraBackupPlansArgs, GetCassandraBackupPlansResult, GetCassandraBackupPlansOutputArgs } from "./getCassandraBackupPlans";
export const getCassandraBackupPlans: typeof import("./getCassandraBackupPlans").getCassandraBackupPlans = null as any;
export const getCassandraBackupPlansOutput: typeof import("./getCassandraBackupPlans").getCassandraBackupPlansOutput = null as any;
utilities.lazyLoad(exports, ["getCassandraBackupPlans","getCassandraBackupPlansOutput"], () => require("./getCassandraBackupPlans"));

export { GetCassandraClustersArgs, GetCassandraClustersResult, GetCassandraClustersOutputArgs } from "./getCassandraClusters";
export const getCassandraClusters: typeof import("./getCassandraClusters").getCassandraClusters = null as any;
export const getCassandraClustersOutput: typeof import("./getCassandraClusters").getCassandraClustersOutput = null as any;
utilities.lazyLoad(exports, ["getCassandraClusters","getCassandraClustersOutput"], () => require("./getCassandraClusters"));

export { GetCassandraDataCentersArgs, GetCassandraDataCentersResult, GetCassandraDataCentersOutputArgs } from "./getCassandraDataCenters";
export const getCassandraDataCenters: typeof import("./getCassandraDataCenters").getCassandraDataCenters = null as any;
export const getCassandraDataCentersOutput: typeof import("./getCassandraDataCenters").getCassandraDataCentersOutput = null as any;
utilities.lazyLoad(exports, ["getCassandraDataCenters","getCassandraDataCentersOutput"], () => require("./getCassandraDataCenters"));

export { GetCassandraZonesArgs, GetCassandraZonesResult, GetCassandraZonesOutputArgs } from "./getCassandraZones";
export const getCassandraZones: typeof import("./getCassandraZones").getCassandraZones = null as any;
export const getCassandraZonesOutput: typeof import("./getCassandraZones").getCassandraZonesOutput = null as any;
utilities.lazyLoad(exports, ["getCassandraZones","getCassandraZonesOutput"], () => require("./getCassandraZones"));

export { GetCddcDedicatedHostAccountsArgs, GetCddcDedicatedHostAccountsResult, GetCddcDedicatedHostAccountsOutputArgs } from "./getCddcDedicatedHostAccounts";
export const getCddcDedicatedHostAccounts: typeof import("./getCddcDedicatedHostAccounts").getCddcDedicatedHostAccounts = null as any;
export const getCddcDedicatedHostAccountsOutput: typeof import("./getCddcDedicatedHostAccounts").getCddcDedicatedHostAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getCddcDedicatedHostAccounts","getCddcDedicatedHostAccountsOutput"], () => require("./getCddcDedicatedHostAccounts"));

export { GetCddcDedicatedHostGroupsArgs, GetCddcDedicatedHostGroupsResult, GetCddcDedicatedHostGroupsOutputArgs } from "./getCddcDedicatedHostGroups";
export const getCddcDedicatedHostGroups: typeof import("./getCddcDedicatedHostGroups").getCddcDedicatedHostGroups = null as any;
export const getCddcDedicatedHostGroupsOutput: typeof import("./getCddcDedicatedHostGroups").getCddcDedicatedHostGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getCddcDedicatedHostGroups","getCddcDedicatedHostGroupsOutput"], () => require("./getCddcDedicatedHostGroups"));

export { GetCddcDedicatedHostsArgs, GetCddcDedicatedHostsResult, GetCddcDedicatedHostsOutputArgs } from "./getCddcDedicatedHosts";
export const getCddcDedicatedHosts: typeof import("./getCddcDedicatedHosts").getCddcDedicatedHosts = null as any;
export const getCddcDedicatedHostsOutput: typeof import("./getCddcDedicatedHosts").getCddcDedicatedHostsOutput = null as any;
utilities.lazyLoad(exports, ["getCddcDedicatedHosts","getCddcDedicatedHostsOutput"], () => require("./getCddcDedicatedHosts"));

export { GetCddcHostEcsLevelInfosArgs, GetCddcHostEcsLevelInfosResult, GetCddcHostEcsLevelInfosOutputArgs } from "./getCddcHostEcsLevelInfos";
export const getCddcHostEcsLevelInfos: typeof import("./getCddcHostEcsLevelInfos").getCddcHostEcsLevelInfos = null as any;
export const getCddcHostEcsLevelInfosOutput: typeof import("./getCddcHostEcsLevelInfos").getCddcHostEcsLevelInfosOutput = null as any;
utilities.lazyLoad(exports, ["getCddcHostEcsLevelInfos","getCddcHostEcsLevelInfosOutput"], () => require("./getCddcHostEcsLevelInfos"));

export { GetCddcZonesArgs, GetCddcZonesResult, GetCddcZonesOutputArgs } from "./getCddcZones";
export const getCddcZones: typeof import("./getCddcZones").getCddcZones = null as any;
export const getCddcZonesOutput: typeof import("./getCddcZones").getCddcZonesOutput = null as any;
utilities.lazyLoad(exports, ["getCddcZones","getCddcZonesOutput"], () => require("./getCddcZones"));

export { GetCdnBlockedRegionsArgs, GetCdnBlockedRegionsResult, GetCdnBlockedRegionsOutputArgs } from "./getCdnBlockedRegions";
export const getCdnBlockedRegions: typeof import("./getCdnBlockedRegions").getCdnBlockedRegions = null as any;
export const getCdnBlockedRegionsOutput: typeof import("./getCdnBlockedRegions").getCdnBlockedRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getCdnBlockedRegions","getCdnBlockedRegionsOutput"], () => require("./getCdnBlockedRegions"));

export { GetCdnIpInfoArgs, GetCdnIpInfoResult, GetCdnIpInfoOutputArgs } from "./getCdnIpInfo";
export const getCdnIpInfo: typeof import("./getCdnIpInfo").getCdnIpInfo = null as any;
export const getCdnIpInfoOutput: typeof import("./getCdnIpInfo").getCdnIpInfoOutput = null as any;
utilities.lazyLoad(exports, ["getCdnIpInfo","getCdnIpInfoOutput"], () => require("./getCdnIpInfo"));

export { GetCdnRealTimeLogDeliveriesArgs, GetCdnRealTimeLogDeliveriesResult, GetCdnRealTimeLogDeliveriesOutputArgs } from "./getCdnRealTimeLogDeliveries";
export const getCdnRealTimeLogDeliveries: typeof import("./getCdnRealTimeLogDeliveries").getCdnRealTimeLogDeliveries = null as any;
export const getCdnRealTimeLogDeliveriesOutput: typeof import("./getCdnRealTimeLogDeliveries").getCdnRealTimeLogDeliveriesOutput = null as any;
utilities.lazyLoad(exports, ["getCdnRealTimeLogDeliveries","getCdnRealTimeLogDeliveriesOutput"], () => require("./getCdnRealTimeLogDeliveries"));

export { GetCdnServiceArgs, GetCdnServiceResult, GetCdnServiceOutputArgs } from "./getCdnService";
export const getCdnService: typeof import("./getCdnService").getCdnService = null as any;
export const getCdnServiceOutput: typeof import("./getCdnService").getCdnServiceOutput = null as any;
utilities.lazyLoad(exports, ["getCdnService","getCdnServiceOutput"], () => require("./getCdnService"));

export { GetCenBandwidthLimitsArgs, GetCenBandwidthLimitsResult, GetCenBandwidthLimitsOutputArgs } from "./getCenBandwidthLimits";
export const getCenBandwidthLimits: typeof import("./getCenBandwidthLimits").getCenBandwidthLimits = null as any;
export const getCenBandwidthLimitsOutput: typeof import("./getCenBandwidthLimits").getCenBandwidthLimitsOutput = null as any;
utilities.lazyLoad(exports, ["getCenBandwidthLimits","getCenBandwidthLimitsOutput"], () => require("./getCenBandwidthLimits"));

export { GetCenBandwidthPackagesArgs, GetCenBandwidthPackagesResult, GetCenBandwidthPackagesOutputArgs } from "./getCenBandwidthPackages";
export const getCenBandwidthPackages: typeof import("./getCenBandwidthPackages").getCenBandwidthPackages = null as any;
export const getCenBandwidthPackagesOutput: typeof import("./getCenBandwidthPackages").getCenBandwidthPackagesOutput = null as any;
utilities.lazyLoad(exports, ["getCenBandwidthPackages","getCenBandwidthPackagesOutput"], () => require("./getCenBandwidthPackages"));

export { GetCenChildInstanceRouteEntryToAttachmentsArgs, GetCenChildInstanceRouteEntryToAttachmentsResult, GetCenChildInstanceRouteEntryToAttachmentsOutputArgs } from "./getCenChildInstanceRouteEntryToAttachments";
export const getCenChildInstanceRouteEntryToAttachments: typeof import("./getCenChildInstanceRouteEntryToAttachments").getCenChildInstanceRouteEntryToAttachments = null as any;
export const getCenChildInstanceRouteEntryToAttachmentsOutput: typeof import("./getCenChildInstanceRouteEntryToAttachments").getCenChildInstanceRouteEntryToAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getCenChildInstanceRouteEntryToAttachments","getCenChildInstanceRouteEntryToAttachmentsOutput"], () => require("./getCenChildInstanceRouteEntryToAttachments"));

export { GetCenFlowlogsArgs, GetCenFlowlogsResult, GetCenFlowlogsOutputArgs } from "./getCenFlowlogs";
export const getCenFlowlogs: typeof import("./getCenFlowlogs").getCenFlowlogs = null as any;
export const getCenFlowlogsOutput: typeof import("./getCenFlowlogs").getCenFlowlogsOutput = null as any;
utilities.lazyLoad(exports, ["getCenFlowlogs","getCenFlowlogsOutput"], () => require("./getCenFlowlogs"));

export { GetCenInstanceAttachmentsArgs, GetCenInstanceAttachmentsResult, GetCenInstanceAttachmentsOutputArgs } from "./getCenInstanceAttachments";
export const getCenInstanceAttachments: typeof import("./getCenInstanceAttachments").getCenInstanceAttachments = null as any;
export const getCenInstanceAttachmentsOutput: typeof import("./getCenInstanceAttachments").getCenInstanceAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getCenInstanceAttachments","getCenInstanceAttachmentsOutput"], () => require("./getCenInstanceAttachments"));

export { GetCenInstancesArgs, GetCenInstancesResult, GetCenInstancesOutputArgs } from "./getCenInstances";
export const getCenInstances: typeof import("./getCenInstances").getCenInstances = null as any;
export const getCenInstancesOutput: typeof import("./getCenInstances").getCenInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getCenInstances","getCenInstancesOutput"], () => require("./getCenInstances"));

export { GetCenInterRegionTrafficQosPoliciesArgs, GetCenInterRegionTrafficQosPoliciesResult, GetCenInterRegionTrafficQosPoliciesOutputArgs } from "./getCenInterRegionTrafficQosPolicies";
export const getCenInterRegionTrafficQosPolicies: typeof import("./getCenInterRegionTrafficQosPolicies").getCenInterRegionTrafficQosPolicies = null as any;
export const getCenInterRegionTrafficQosPoliciesOutput: typeof import("./getCenInterRegionTrafficQosPolicies").getCenInterRegionTrafficQosPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getCenInterRegionTrafficQosPolicies","getCenInterRegionTrafficQosPoliciesOutput"], () => require("./getCenInterRegionTrafficQosPolicies"));

export { GetCenInterRegionTrafficQosQueuesArgs, GetCenInterRegionTrafficQosQueuesResult, GetCenInterRegionTrafficQosQueuesOutputArgs } from "./getCenInterRegionTrafficQosQueues";
export const getCenInterRegionTrafficQosQueues: typeof import("./getCenInterRegionTrafficQosQueues").getCenInterRegionTrafficQosQueues = null as any;
export const getCenInterRegionTrafficQosQueuesOutput: typeof import("./getCenInterRegionTrafficQosQueues").getCenInterRegionTrafficQosQueuesOutput = null as any;
utilities.lazyLoad(exports, ["getCenInterRegionTrafficQosQueues","getCenInterRegionTrafficQosQueuesOutput"], () => require("./getCenInterRegionTrafficQosQueues"));

export { GetCenPrivateZonesArgs, GetCenPrivateZonesResult, GetCenPrivateZonesOutputArgs } from "./getCenPrivateZones";
export const getCenPrivateZones: typeof import("./getCenPrivateZones").getCenPrivateZones = null as any;
export const getCenPrivateZonesOutput: typeof import("./getCenPrivateZones").getCenPrivateZonesOutput = null as any;
utilities.lazyLoad(exports, ["getCenPrivateZones","getCenPrivateZonesOutput"], () => require("./getCenPrivateZones"));

export { GetCenRegionRouteEntriesArgs, GetCenRegionRouteEntriesResult, GetCenRegionRouteEntriesOutputArgs } from "./getCenRegionRouteEntries";
export const getCenRegionRouteEntries: typeof import("./getCenRegionRouteEntries").getCenRegionRouteEntries = null as any;
export const getCenRegionRouteEntriesOutput: typeof import("./getCenRegionRouteEntries").getCenRegionRouteEntriesOutput = null as any;
utilities.lazyLoad(exports, ["getCenRegionRouteEntries","getCenRegionRouteEntriesOutput"], () => require("./getCenRegionRouteEntries"));

export { GetCenRouteEntriesArgs, GetCenRouteEntriesResult, GetCenRouteEntriesOutputArgs } from "./getCenRouteEntries";
export const getCenRouteEntries: typeof import("./getCenRouteEntries").getCenRouteEntries = null as any;
export const getCenRouteEntriesOutput: typeof import("./getCenRouteEntries").getCenRouteEntriesOutput = null as any;
utilities.lazyLoad(exports, ["getCenRouteEntries","getCenRouteEntriesOutput"], () => require("./getCenRouteEntries"));

export { GetCenRouteMapsArgs, GetCenRouteMapsResult, GetCenRouteMapsOutputArgs } from "./getCenRouteMaps";
export const getCenRouteMaps: typeof import("./getCenRouteMaps").getCenRouteMaps = null as any;
export const getCenRouteMapsOutput: typeof import("./getCenRouteMaps").getCenRouteMapsOutput = null as any;
utilities.lazyLoad(exports, ["getCenRouteMaps","getCenRouteMapsOutput"], () => require("./getCenRouteMaps"));

export { GetCenRouteServicesArgs, GetCenRouteServicesResult, GetCenRouteServicesOutputArgs } from "./getCenRouteServices";
export const getCenRouteServices: typeof import("./getCenRouteServices").getCenRouteServices = null as any;
export const getCenRouteServicesOutput: typeof import("./getCenRouteServices").getCenRouteServicesOutput = null as any;
utilities.lazyLoad(exports, ["getCenRouteServices","getCenRouteServicesOutput"], () => require("./getCenRouteServices"));

export { GetCenTrafficMarkingPoliciesArgs, GetCenTrafficMarkingPoliciesResult, GetCenTrafficMarkingPoliciesOutputArgs } from "./getCenTrafficMarkingPolicies";
export const getCenTrafficMarkingPolicies: typeof import("./getCenTrafficMarkingPolicies").getCenTrafficMarkingPolicies = null as any;
export const getCenTrafficMarkingPoliciesOutput: typeof import("./getCenTrafficMarkingPolicies").getCenTrafficMarkingPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getCenTrafficMarkingPolicies","getCenTrafficMarkingPoliciesOutput"], () => require("./getCenTrafficMarkingPolicies"));

export { GetCenTransitRouteTableAggregationsArgs, GetCenTransitRouteTableAggregationsResult, GetCenTransitRouteTableAggregationsOutputArgs } from "./getCenTransitRouteTableAggregations";
export const getCenTransitRouteTableAggregations: typeof import("./getCenTransitRouteTableAggregations").getCenTransitRouteTableAggregations = null as any;
export const getCenTransitRouteTableAggregationsOutput: typeof import("./getCenTransitRouteTableAggregations").getCenTransitRouteTableAggregationsOutput = null as any;
utilities.lazyLoad(exports, ["getCenTransitRouteTableAggregations","getCenTransitRouteTableAggregationsOutput"], () => require("./getCenTransitRouteTableAggregations"));

export { GetCenTransitRouterAvailableResourcesArgs, GetCenTransitRouterAvailableResourcesResult, GetCenTransitRouterAvailableResourcesOutputArgs } from "./getCenTransitRouterAvailableResources";
export const getCenTransitRouterAvailableResources: typeof import("./getCenTransitRouterAvailableResources").getCenTransitRouterAvailableResources = null as any;
export const getCenTransitRouterAvailableResourcesOutput: typeof import("./getCenTransitRouterAvailableResources").getCenTransitRouterAvailableResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getCenTransitRouterAvailableResources","getCenTransitRouterAvailableResourcesOutput"], () => require("./getCenTransitRouterAvailableResources"));

export { GetCenTransitRouterCidrsArgs, GetCenTransitRouterCidrsResult, GetCenTransitRouterCidrsOutputArgs } from "./getCenTransitRouterCidrs";
export const getCenTransitRouterCidrs: typeof import("./getCenTransitRouterCidrs").getCenTransitRouterCidrs = null as any;
export const getCenTransitRouterCidrsOutput: typeof import("./getCenTransitRouterCidrs").getCenTransitRouterCidrsOutput = null as any;
utilities.lazyLoad(exports, ["getCenTransitRouterCidrs","getCenTransitRouterCidrsOutput"], () => require("./getCenTransitRouterCidrs"));

export { GetCenTransitRouterMulticastDomainAssociationsArgs, GetCenTransitRouterMulticastDomainAssociationsResult, GetCenTransitRouterMulticastDomainAssociationsOutputArgs } from "./getCenTransitRouterMulticastDomainAssociations";
export const getCenTransitRouterMulticastDomainAssociations: typeof import("./getCenTransitRouterMulticastDomainAssociations").getCenTransitRouterMulticastDomainAssociations = null as any;
export const getCenTransitRouterMulticastDomainAssociationsOutput: typeof import("./getCenTransitRouterMulticastDomainAssociations").getCenTransitRouterMulticastDomainAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getCenTransitRouterMulticastDomainAssociations","getCenTransitRouterMulticastDomainAssociationsOutput"], () => require("./getCenTransitRouterMulticastDomainAssociations"));

export { GetCenTransitRouterMulticastDomainMembersArgs, GetCenTransitRouterMulticastDomainMembersResult, GetCenTransitRouterMulticastDomainMembersOutputArgs } from "./getCenTransitRouterMulticastDomainMembers";
export const getCenTransitRouterMulticastDomainMembers: typeof import("./getCenTransitRouterMulticastDomainMembers").getCenTransitRouterMulticastDomainMembers = null as any;
export const getCenTransitRouterMulticastDomainMembersOutput: typeof import("./getCenTransitRouterMulticastDomainMembers").getCenTransitRouterMulticastDomainMembersOutput = null as any;
utilities.lazyLoad(exports, ["getCenTransitRouterMulticastDomainMembers","getCenTransitRouterMulticastDomainMembersOutput"], () => require("./getCenTransitRouterMulticastDomainMembers"));

export { GetCenTransitRouterMulticastDomainPeerMembersArgs, GetCenTransitRouterMulticastDomainPeerMembersResult, GetCenTransitRouterMulticastDomainPeerMembersOutputArgs } from "./getCenTransitRouterMulticastDomainPeerMembers";
export const getCenTransitRouterMulticastDomainPeerMembers: typeof import("./getCenTransitRouterMulticastDomainPeerMembers").getCenTransitRouterMulticastDomainPeerMembers = null as any;
export const getCenTransitRouterMulticastDomainPeerMembersOutput: typeof import("./getCenTransitRouterMulticastDomainPeerMembers").getCenTransitRouterMulticastDomainPeerMembersOutput = null as any;
utilities.lazyLoad(exports, ["getCenTransitRouterMulticastDomainPeerMembers","getCenTransitRouterMulticastDomainPeerMembersOutput"], () => require("./getCenTransitRouterMulticastDomainPeerMembers"));

export { GetCenTransitRouterMulticastDomainSourcesArgs, GetCenTransitRouterMulticastDomainSourcesResult, GetCenTransitRouterMulticastDomainSourcesOutputArgs } from "./getCenTransitRouterMulticastDomainSources";
export const getCenTransitRouterMulticastDomainSources: typeof import("./getCenTransitRouterMulticastDomainSources").getCenTransitRouterMulticastDomainSources = null as any;
export const getCenTransitRouterMulticastDomainSourcesOutput: typeof import("./getCenTransitRouterMulticastDomainSources").getCenTransitRouterMulticastDomainSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getCenTransitRouterMulticastDomainSources","getCenTransitRouterMulticastDomainSourcesOutput"], () => require("./getCenTransitRouterMulticastDomainSources"));

export { GetCenTransitRouterMulticastDomainsArgs, GetCenTransitRouterMulticastDomainsResult, GetCenTransitRouterMulticastDomainsOutputArgs } from "./getCenTransitRouterMulticastDomains";
export const getCenTransitRouterMulticastDomains: typeof import("./getCenTransitRouterMulticastDomains").getCenTransitRouterMulticastDomains = null as any;
export const getCenTransitRouterMulticastDomainsOutput: typeof import("./getCenTransitRouterMulticastDomains").getCenTransitRouterMulticastDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getCenTransitRouterMulticastDomains","getCenTransitRouterMulticastDomainsOutput"], () => require("./getCenTransitRouterMulticastDomains"));

export { GetCenTransitRouterPeerAttachmentsArgs, GetCenTransitRouterPeerAttachmentsResult, GetCenTransitRouterPeerAttachmentsOutputArgs } from "./getCenTransitRouterPeerAttachments";
export const getCenTransitRouterPeerAttachments: typeof import("./getCenTransitRouterPeerAttachments").getCenTransitRouterPeerAttachments = null as any;
export const getCenTransitRouterPeerAttachmentsOutput: typeof import("./getCenTransitRouterPeerAttachments").getCenTransitRouterPeerAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getCenTransitRouterPeerAttachments","getCenTransitRouterPeerAttachmentsOutput"], () => require("./getCenTransitRouterPeerAttachments"));

export { GetCenTransitRouterPrefixListAssociationsArgs, GetCenTransitRouterPrefixListAssociationsResult, GetCenTransitRouterPrefixListAssociationsOutputArgs } from "./getCenTransitRouterPrefixListAssociations";
export const getCenTransitRouterPrefixListAssociations: typeof import("./getCenTransitRouterPrefixListAssociations").getCenTransitRouterPrefixListAssociations = null as any;
export const getCenTransitRouterPrefixListAssociationsOutput: typeof import("./getCenTransitRouterPrefixListAssociations").getCenTransitRouterPrefixListAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getCenTransitRouterPrefixListAssociations","getCenTransitRouterPrefixListAssociationsOutput"], () => require("./getCenTransitRouterPrefixListAssociations"));

export { GetCenTransitRouterRouteEntriesArgs, GetCenTransitRouterRouteEntriesResult, GetCenTransitRouterRouteEntriesOutputArgs } from "./getCenTransitRouterRouteEntries";
export const getCenTransitRouterRouteEntries: typeof import("./getCenTransitRouterRouteEntries").getCenTransitRouterRouteEntries = null as any;
export const getCenTransitRouterRouteEntriesOutput: typeof import("./getCenTransitRouterRouteEntries").getCenTransitRouterRouteEntriesOutput = null as any;
utilities.lazyLoad(exports, ["getCenTransitRouterRouteEntries","getCenTransitRouterRouteEntriesOutput"], () => require("./getCenTransitRouterRouteEntries"));

export { GetCenTransitRouterRouteTableAssociationsArgs, GetCenTransitRouterRouteTableAssociationsResult, GetCenTransitRouterRouteTableAssociationsOutputArgs } from "./getCenTransitRouterRouteTableAssociations";
export const getCenTransitRouterRouteTableAssociations: typeof import("./getCenTransitRouterRouteTableAssociations").getCenTransitRouterRouteTableAssociations = null as any;
export const getCenTransitRouterRouteTableAssociationsOutput: typeof import("./getCenTransitRouterRouteTableAssociations").getCenTransitRouterRouteTableAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getCenTransitRouterRouteTableAssociations","getCenTransitRouterRouteTableAssociationsOutput"], () => require("./getCenTransitRouterRouteTableAssociations"));

export { GetCenTransitRouterRouteTablePropagationsArgs, GetCenTransitRouterRouteTablePropagationsResult, GetCenTransitRouterRouteTablePropagationsOutputArgs } from "./getCenTransitRouterRouteTablePropagations";
export const getCenTransitRouterRouteTablePropagations: typeof import("./getCenTransitRouterRouteTablePropagations").getCenTransitRouterRouteTablePropagations = null as any;
export const getCenTransitRouterRouteTablePropagationsOutput: typeof import("./getCenTransitRouterRouteTablePropagations").getCenTransitRouterRouteTablePropagationsOutput = null as any;
utilities.lazyLoad(exports, ["getCenTransitRouterRouteTablePropagations","getCenTransitRouterRouteTablePropagationsOutput"], () => require("./getCenTransitRouterRouteTablePropagations"));

export { GetCenTransitRouterRouteTablesArgs, GetCenTransitRouterRouteTablesResult, GetCenTransitRouterRouteTablesOutputArgs } from "./getCenTransitRouterRouteTables";
export const getCenTransitRouterRouteTables: typeof import("./getCenTransitRouterRouteTables").getCenTransitRouterRouteTables = null as any;
export const getCenTransitRouterRouteTablesOutput: typeof import("./getCenTransitRouterRouteTables").getCenTransitRouterRouteTablesOutput = null as any;
utilities.lazyLoad(exports, ["getCenTransitRouterRouteTables","getCenTransitRouterRouteTablesOutput"], () => require("./getCenTransitRouterRouteTables"));

export { GetCenTransitRouterServiceArgs, GetCenTransitRouterServiceResult, GetCenTransitRouterServiceOutputArgs } from "./getCenTransitRouterService";
export const getCenTransitRouterService: typeof import("./getCenTransitRouterService").getCenTransitRouterService = null as any;
export const getCenTransitRouterServiceOutput: typeof import("./getCenTransitRouterService").getCenTransitRouterServiceOutput = null as any;
utilities.lazyLoad(exports, ["getCenTransitRouterService","getCenTransitRouterServiceOutput"], () => require("./getCenTransitRouterService"));

export { GetCenTransitRouterVbrAttachmentsArgs, GetCenTransitRouterVbrAttachmentsResult, GetCenTransitRouterVbrAttachmentsOutputArgs } from "./getCenTransitRouterVbrAttachments";
export const getCenTransitRouterVbrAttachments: typeof import("./getCenTransitRouterVbrAttachments").getCenTransitRouterVbrAttachments = null as any;
export const getCenTransitRouterVbrAttachmentsOutput: typeof import("./getCenTransitRouterVbrAttachments").getCenTransitRouterVbrAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getCenTransitRouterVbrAttachments","getCenTransitRouterVbrAttachmentsOutput"], () => require("./getCenTransitRouterVbrAttachments"));

export { GetCenTransitRouterVpcAttachmentsArgs, GetCenTransitRouterVpcAttachmentsResult, GetCenTransitRouterVpcAttachmentsOutputArgs } from "./getCenTransitRouterVpcAttachments";
export const getCenTransitRouterVpcAttachments: typeof import("./getCenTransitRouterVpcAttachments").getCenTransitRouterVpcAttachments = null as any;
export const getCenTransitRouterVpcAttachmentsOutput: typeof import("./getCenTransitRouterVpcAttachments").getCenTransitRouterVpcAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getCenTransitRouterVpcAttachments","getCenTransitRouterVpcAttachmentsOutput"], () => require("./getCenTransitRouterVpcAttachments"));

export { GetCenTransitRouterVpnAttachmentsArgs, GetCenTransitRouterVpnAttachmentsResult, GetCenTransitRouterVpnAttachmentsOutputArgs } from "./getCenTransitRouterVpnAttachments";
export const getCenTransitRouterVpnAttachments: typeof import("./getCenTransitRouterVpnAttachments").getCenTransitRouterVpnAttachments = null as any;
export const getCenTransitRouterVpnAttachmentsOutput: typeof import("./getCenTransitRouterVpnAttachments").getCenTransitRouterVpnAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getCenTransitRouterVpnAttachments","getCenTransitRouterVpnAttachmentsOutput"], () => require("./getCenTransitRouterVpnAttachments"));

export { GetCenTransitRoutersArgs, GetCenTransitRoutersResult, GetCenTransitRoutersOutputArgs } from "./getCenTransitRouters";
export const getCenTransitRouters: typeof import("./getCenTransitRouters").getCenTransitRouters = null as any;
export const getCenTransitRoutersOutput: typeof import("./getCenTransitRouters").getCenTransitRoutersOutput = null as any;
utilities.lazyLoad(exports, ["getCenTransitRouters","getCenTransitRoutersOutput"], () => require("./getCenTransitRouters"));

export { GetCenVbrHealthChecksArgs, GetCenVbrHealthChecksResult, GetCenVbrHealthChecksOutputArgs } from "./getCenVbrHealthChecks";
export const getCenVbrHealthChecks: typeof import("./getCenVbrHealthChecks").getCenVbrHealthChecks = null as any;
export const getCenVbrHealthChecksOutput: typeof import("./getCenVbrHealthChecks").getCenVbrHealthChecksOutput = null as any;
utilities.lazyLoad(exports, ["getCenVbrHealthChecks","getCenVbrHealthChecksOutput"], () => require("./getCenVbrHealthChecks"));

export { GetChatbotAgentsArgs, GetChatbotAgentsResult, GetChatbotAgentsOutputArgs } from "./getChatbotAgents";
export const getChatbotAgents: typeof import("./getChatbotAgents").getChatbotAgents = null as any;
export const getChatbotAgentsOutput: typeof import("./getChatbotAgents").getChatbotAgentsOutput = null as any;
utilities.lazyLoad(exports, ["getChatbotAgents","getChatbotAgentsOutput"], () => require("./getChatbotAgents"));

export { GetClickHouseAccountsArgs, GetClickHouseAccountsResult, GetClickHouseAccountsOutputArgs } from "./getClickHouseAccounts";
export const getClickHouseAccounts: typeof import("./getClickHouseAccounts").getClickHouseAccounts = null as any;
export const getClickHouseAccountsOutput: typeof import("./getClickHouseAccounts").getClickHouseAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getClickHouseAccounts","getClickHouseAccountsOutput"], () => require("./getClickHouseAccounts"));

export { GetClickHouseBackupPoliciesArgs, GetClickHouseBackupPoliciesResult, GetClickHouseBackupPoliciesOutputArgs } from "./getClickHouseBackupPolicies";
export const getClickHouseBackupPolicies: typeof import("./getClickHouseBackupPolicies").getClickHouseBackupPolicies = null as any;
export const getClickHouseBackupPoliciesOutput: typeof import("./getClickHouseBackupPolicies").getClickHouseBackupPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getClickHouseBackupPolicies","getClickHouseBackupPoliciesOutput"], () => require("./getClickHouseBackupPolicies"));

export { GetClickHouseDbClustersArgs, GetClickHouseDbClustersResult, GetClickHouseDbClustersOutputArgs } from "./getClickHouseDbClusters";
export const getClickHouseDbClusters: typeof import("./getClickHouseDbClusters").getClickHouseDbClusters = null as any;
export const getClickHouseDbClustersOutput: typeof import("./getClickHouseDbClusters").getClickHouseDbClustersOutput = null as any;
utilities.lazyLoad(exports, ["getClickHouseDbClusters","getClickHouseDbClustersOutput"], () => require("./getClickHouseDbClusters"));

export { GetClickHouseRegionsArgs, GetClickHouseRegionsResult, GetClickHouseRegionsOutputArgs } from "./getClickHouseRegions";
export const getClickHouseRegions: typeof import("./getClickHouseRegions").getClickHouseRegions = null as any;
export const getClickHouseRegionsOutput: typeof import("./getClickHouseRegions").getClickHouseRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getClickHouseRegions","getClickHouseRegionsOutput"], () => require("./getClickHouseRegions"));

export { GetCloudConnectNetworksArgs, GetCloudConnectNetworksResult, GetCloudConnectNetworksOutputArgs } from "./getCloudConnectNetworks";
export const getCloudConnectNetworks: typeof import("./getCloudConnectNetworks").getCloudConnectNetworks = null as any;
export const getCloudConnectNetworksOutput: typeof import("./getCloudConnectNetworks").getCloudConnectNetworksOutput = null as any;
utilities.lazyLoad(exports, ["getCloudConnectNetworks","getCloudConnectNetworksOutput"], () => require("./getCloudConnectNetworks"));

export { GetCloudFirewallAddressBooksArgs, GetCloudFirewallAddressBooksResult, GetCloudFirewallAddressBooksOutputArgs } from "./getCloudFirewallAddressBooks";
export const getCloudFirewallAddressBooks: typeof import("./getCloudFirewallAddressBooks").getCloudFirewallAddressBooks = null as any;
export const getCloudFirewallAddressBooksOutput: typeof import("./getCloudFirewallAddressBooks").getCloudFirewallAddressBooksOutput = null as any;
utilities.lazyLoad(exports, ["getCloudFirewallAddressBooks","getCloudFirewallAddressBooksOutput"], () => require("./getCloudFirewallAddressBooks"));

export { GetCloudFirewallControlPoliciesArgs, GetCloudFirewallControlPoliciesResult, GetCloudFirewallControlPoliciesOutputArgs } from "./getCloudFirewallControlPolicies";
export const getCloudFirewallControlPolicies: typeof import("./getCloudFirewallControlPolicies").getCloudFirewallControlPolicies = null as any;
export const getCloudFirewallControlPoliciesOutput: typeof import("./getCloudFirewallControlPolicies").getCloudFirewallControlPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudFirewallControlPolicies","getCloudFirewallControlPoliciesOutput"], () => require("./getCloudFirewallControlPolicies"));

export { GetCloudFirewallInstanceMembersArgs, GetCloudFirewallInstanceMembersResult, GetCloudFirewallInstanceMembersOutputArgs } from "./getCloudFirewallInstanceMembers";
export const getCloudFirewallInstanceMembers: typeof import("./getCloudFirewallInstanceMembers").getCloudFirewallInstanceMembers = null as any;
export const getCloudFirewallInstanceMembersOutput: typeof import("./getCloudFirewallInstanceMembers").getCloudFirewallInstanceMembersOutput = null as any;
utilities.lazyLoad(exports, ["getCloudFirewallInstanceMembers","getCloudFirewallInstanceMembersOutput"], () => require("./getCloudFirewallInstanceMembers"));

export { GetCloudFirewallInstancesArgs, GetCloudFirewallInstancesResult, GetCloudFirewallInstancesOutputArgs } from "./getCloudFirewallInstances";
export const getCloudFirewallInstances: typeof import("./getCloudFirewallInstances").getCloudFirewallInstances = null as any;
export const getCloudFirewallInstancesOutput: typeof import("./getCloudFirewallInstances").getCloudFirewallInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudFirewallInstances","getCloudFirewallInstancesOutput"], () => require("./getCloudFirewallInstances"));

export { GetCloudFirewallVpcFirewallCensArgs, GetCloudFirewallVpcFirewallCensResult, GetCloudFirewallVpcFirewallCensOutputArgs } from "./getCloudFirewallVpcFirewallCens";
export const getCloudFirewallVpcFirewallCens: typeof import("./getCloudFirewallVpcFirewallCens").getCloudFirewallVpcFirewallCens = null as any;
export const getCloudFirewallVpcFirewallCensOutput: typeof import("./getCloudFirewallVpcFirewallCens").getCloudFirewallVpcFirewallCensOutput = null as any;
utilities.lazyLoad(exports, ["getCloudFirewallVpcFirewallCens","getCloudFirewallVpcFirewallCensOutput"], () => require("./getCloudFirewallVpcFirewallCens"));

export { GetCloudFirewallVpcFirewallControlPoliciesArgs, GetCloudFirewallVpcFirewallControlPoliciesResult, GetCloudFirewallVpcFirewallControlPoliciesOutputArgs } from "./getCloudFirewallVpcFirewallControlPolicies";
export const getCloudFirewallVpcFirewallControlPolicies: typeof import("./getCloudFirewallVpcFirewallControlPolicies").getCloudFirewallVpcFirewallControlPolicies = null as any;
export const getCloudFirewallVpcFirewallControlPoliciesOutput: typeof import("./getCloudFirewallVpcFirewallControlPolicies").getCloudFirewallVpcFirewallControlPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudFirewallVpcFirewallControlPolicies","getCloudFirewallVpcFirewallControlPoliciesOutput"], () => require("./getCloudFirewallVpcFirewallControlPolicies"));

export { GetCloudFirewallVpcFirewallsArgs, GetCloudFirewallVpcFirewallsResult, GetCloudFirewallVpcFirewallsOutputArgs } from "./getCloudFirewallVpcFirewalls";
export const getCloudFirewallVpcFirewalls: typeof import("./getCloudFirewallVpcFirewalls").getCloudFirewallVpcFirewalls = null as any;
export const getCloudFirewallVpcFirewallsOutput: typeof import("./getCloudFirewallVpcFirewalls").getCloudFirewallVpcFirewallsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudFirewallVpcFirewalls","getCloudFirewallVpcFirewallsOutput"], () => require("./getCloudFirewallVpcFirewalls"));

export { GetCloudMonitorServiceHybridDoubleWritesArgs, GetCloudMonitorServiceHybridDoubleWritesResult, GetCloudMonitorServiceHybridDoubleWritesOutputArgs } from "./getCloudMonitorServiceHybridDoubleWrites";
export const getCloudMonitorServiceHybridDoubleWrites: typeof import("./getCloudMonitorServiceHybridDoubleWrites").getCloudMonitorServiceHybridDoubleWrites = null as any;
export const getCloudMonitorServiceHybridDoubleWritesOutput: typeof import("./getCloudMonitorServiceHybridDoubleWrites").getCloudMonitorServiceHybridDoubleWritesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudMonitorServiceHybridDoubleWrites","getCloudMonitorServiceHybridDoubleWritesOutput"], () => require("./getCloudMonitorServiceHybridDoubleWrites"));

export { GetCloudSsoAccessAssignmentsArgs, GetCloudSsoAccessAssignmentsResult, GetCloudSsoAccessAssignmentsOutputArgs } from "./getCloudSsoAccessAssignments";
export const getCloudSsoAccessAssignments: typeof import("./getCloudSsoAccessAssignments").getCloudSsoAccessAssignments = null as any;
export const getCloudSsoAccessAssignmentsOutput: typeof import("./getCloudSsoAccessAssignments").getCloudSsoAccessAssignmentsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudSsoAccessAssignments","getCloudSsoAccessAssignmentsOutput"], () => require("./getCloudSsoAccessAssignments"));

export { GetCloudSsoAccessConfigurationsArgs, GetCloudSsoAccessConfigurationsResult, GetCloudSsoAccessConfigurationsOutputArgs } from "./getCloudSsoAccessConfigurations";
export const getCloudSsoAccessConfigurations: typeof import("./getCloudSsoAccessConfigurations").getCloudSsoAccessConfigurations = null as any;
export const getCloudSsoAccessConfigurationsOutput: typeof import("./getCloudSsoAccessConfigurations").getCloudSsoAccessConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudSsoAccessConfigurations","getCloudSsoAccessConfigurationsOutput"], () => require("./getCloudSsoAccessConfigurations"));

export { GetCloudSsoDirectoriesArgs, GetCloudSsoDirectoriesResult, GetCloudSsoDirectoriesOutputArgs } from "./getCloudSsoDirectories";
export const getCloudSsoDirectories: typeof import("./getCloudSsoDirectories").getCloudSsoDirectories = null as any;
export const getCloudSsoDirectoriesOutput: typeof import("./getCloudSsoDirectories").getCloudSsoDirectoriesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudSsoDirectories","getCloudSsoDirectoriesOutput"], () => require("./getCloudSsoDirectories"));

export { GetCloudSsoGroupsArgs, GetCloudSsoGroupsResult, GetCloudSsoGroupsOutputArgs } from "./getCloudSsoGroups";
export const getCloudSsoGroups: typeof import("./getCloudSsoGroups").getCloudSsoGroups = null as any;
export const getCloudSsoGroupsOutput: typeof import("./getCloudSsoGroups").getCloudSsoGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudSsoGroups","getCloudSsoGroupsOutput"], () => require("./getCloudSsoGroups"));

export { GetCloudSsoScimServerCredentialsArgs, GetCloudSsoScimServerCredentialsResult, GetCloudSsoScimServerCredentialsOutputArgs } from "./getCloudSsoScimServerCredentials";
export const getCloudSsoScimServerCredentials: typeof import("./getCloudSsoScimServerCredentials").getCloudSsoScimServerCredentials = null as any;
export const getCloudSsoScimServerCredentialsOutput: typeof import("./getCloudSsoScimServerCredentials").getCloudSsoScimServerCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudSsoScimServerCredentials","getCloudSsoScimServerCredentialsOutput"], () => require("./getCloudSsoScimServerCredentials"));

export { GetCloudSsoServiceArgs, GetCloudSsoServiceResult, GetCloudSsoServiceOutputArgs } from "./getCloudSsoService";
export const getCloudSsoService: typeof import("./getCloudSsoService").getCloudSsoService = null as any;
export const getCloudSsoServiceOutput: typeof import("./getCloudSsoService").getCloudSsoServiceOutput = null as any;
utilities.lazyLoad(exports, ["getCloudSsoService","getCloudSsoServiceOutput"], () => require("./getCloudSsoService"));

export { GetCloudSsoUsersArgs, GetCloudSsoUsersResult, GetCloudSsoUsersOutputArgs } from "./getCloudSsoUsers";
export const getCloudSsoUsers: typeof import("./getCloudSsoUsers").getCloudSsoUsers = null as any;
export const getCloudSsoUsersOutput: typeof import("./getCloudSsoUsers").getCloudSsoUsersOutput = null as any;
utilities.lazyLoad(exports, ["getCloudSsoUsers","getCloudSsoUsersOutput"], () => require("./getCloudSsoUsers"));

export { GetCloudStorageGatewayExpressSyncsArgs, GetCloudStorageGatewayExpressSyncsResult, GetCloudStorageGatewayExpressSyncsOutputArgs } from "./getCloudStorageGatewayExpressSyncs";
export const getCloudStorageGatewayExpressSyncs: typeof import("./getCloudStorageGatewayExpressSyncs").getCloudStorageGatewayExpressSyncs = null as any;
export const getCloudStorageGatewayExpressSyncsOutput: typeof import("./getCloudStorageGatewayExpressSyncs").getCloudStorageGatewayExpressSyncsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudStorageGatewayExpressSyncs","getCloudStorageGatewayExpressSyncsOutput"], () => require("./getCloudStorageGatewayExpressSyncs"));

export { GetCloudStorageGatewayGatewayBlockVolumesArgs, GetCloudStorageGatewayGatewayBlockVolumesResult, GetCloudStorageGatewayGatewayBlockVolumesOutputArgs } from "./getCloudStorageGatewayGatewayBlockVolumes";
export const getCloudStorageGatewayGatewayBlockVolumes: typeof import("./getCloudStorageGatewayGatewayBlockVolumes").getCloudStorageGatewayGatewayBlockVolumes = null as any;
export const getCloudStorageGatewayGatewayBlockVolumesOutput: typeof import("./getCloudStorageGatewayGatewayBlockVolumes").getCloudStorageGatewayGatewayBlockVolumesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudStorageGatewayGatewayBlockVolumes","getCloudStorageGatewayGatewayBlockVolumesOutput"], () => require("./getCloudStorageGatewayGatewayBlockVolumes"));

export { GetCloudStorageGatewayGatewayCacheDisksArgs, GetCloudStorageGatewayGatewayCacheDisksResult, GetCloudStorageGatewayGatewayCacheDisksOutputArgs } from "./getCloudStorageGatewayGatewayCacheDisks";
export const getCloudStorageGatewayGatewayCacheDisks: typeof import("./getCloudStorageGatewayGatewayCacheDisks").getCloudStorageGatewayGatewayCacheDisks = null as any;
export const getCloudStorageGatewayGatewayCacheDisksOutput: typeof import("./getCloudStorageGatewayGatewayCacheDisks").getCloudStorageGatewayGatewayCacheDisksOutput = null as any;
utilities.lazyLoad(exports, ["getCloudStorageGatewayGatewayCacheDisks","getCloudStorageGatewayGatewayCacheDisksOutput"], () => require("./getCloudStorageGatewayGatewayCacheDisks"));

export { GetCloudStorageGatewayGatewayFileSharesArgs, GetCloudStorageGatewayGatewayFileSharesResult, GetCloudStorageGatewayGatewayFileSharesOutputArgs } from "./getCloudStorageGatewayGatewayFileShares";
export const getCloudStorageGatewayGatewayFileShares: typeof import("./getCloudStorageGatewayGatewayFileShares").getCloudStorageGatewayGatewayFileShares = null as any;
export const getCloudStorageGatewayGatewayFileSharesOutput: typeof import("./getCloudStorageGatewayGatewayFileShares").getCloudStorageGatewayGatewayFileSharesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudStorageGatewayGatewayFileShares","getCloudStorageGatewayGatewayFileSharesOutput"], () => require("./getCloudStorageGatewayGatewayFileShares"));

export { GetCloudStorageGatewayGatewaySmbUsersArgs, GetCloudStorageGatewayGatewaySmbUsersResult, GetCloudStorageGatewayGatewaySmbUsersOutputArgs } from "./getCloudStorageGatewayGatewaySmbUsers";
export const getCloudStorageGatewayGatewaySmbUsers: typeof import("./getCloudStorageGatewayGatewaySmbUsers").getCloudStorageGatewayGatewaySmbUsers = null as any;
export const getCloudStorageGatewayGatewaySmbUsersOutput: typeof import("./getCloudStorageGatewayGatewaySmbUsers").getCloudStorageGatewayGatewaySmbUsersOutput = null as any;
utilities.lazyLoad(exports, ["getCloudStorageGatewayGatewaySmbUsers","getCloudStorageGatewayGatewaySmbUsersOutput"], () => require("./getCloudStorageGatewayGatewaySmbUsers"));

export { GetCloudStorageGatewayGatewaysArgs, GetCloudStorageGatewayGatewaysResult, GetCloudStorageGatewayGatewaysOutputArgs } from "./getCloudStorageGatewayGateways";
export const getCloudStorageGatewayGateways: typeof import("./getCloudStorageGatewayGateways").getCloudStorageGatewayGateways = null as any;
export const getCloudStorageGatewayGatewaysOutput: typeof import("./getCloudStorageGatewayGateways").getCloudStorageGatewayGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getCloudStorageGatewayGateways","getCloudStorageGatewayGatewaysOutput"], () => require("./getCloudStorageGatewayGateways"));

export { GetCloudStorageGatewayServiceArgs, GetCloudStorageGatewayServiceResult, GetCloudStorageGatewayServiceOutputArgs } from "./getCloudStorageGatewayService";
export const getCloudStorageGatewayService: typeof import("./getCloudStorageGatewayService").getCloudStorageGatewayService = null as any;
export const getCloudStorageGatewayServiceOutput: typeof import("./getCloudStorageGatewayService").getCloudStorageGatewayServiceOutput = null as any;
utilities.lazyLoad(exports, ["getCloudStorageGatewayService","getCloudStorageGatewayServiceOutput"], () => require("./getCloudStorageGatewayService"));

export { GetCloudStorageGatewayStocksArgs, GetCloudStorageGatewayStocksResult, GetCloudStorageGatewayStocksOutputArgs } from "./getCloudStorageGatewayStocks";
export const getCloudStorageGatewayStocks: typeof import("./getCloudStorageGatewayStocks").getCloudStorageGatewayStocks = null as any;
export const getCloudStorageGatewayStocksOutput: typeof import("./getCloudStorageGatewayStocks").getCloudStorageGatewayStocksOutput = null as any;
utilities.lazyLoad(exports, ["getCloudStorageGatewayStocks","getCloudStorageGatewayStocksOutput"], () => require("./getCloudStorageGatewayStocks"));

export { GetCloudStorageGatewayStorageBundlesArgs, GetCloudStorageGatewayStorageBundlesResult, GetCloudStorageGatewayStorageBundlesOutputArgs } from "./getCloudStorageGatewayStorageBundles";
export const getCloudStorageGatewayStorageBundles: typeof import("./getCloudStorageGatewayStorageBundles").getCloudStorageGatewayStorageBundles = null as any;
export const getCloudStorageGatewayStorageBundlesOutput: typeof import("./getCloudStorageGatewayStorageBundles").getCloudStorageGatewayStorageBundlesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudStorageGatewayStorageBundles","getCloudStorageGatewayStorageBundlesOutput"], () => require("./getCloudStorageGatewayStorageBundles"));

export { GetCloudauthFaceConfigsArgs, GetCloudauthFaceConfigsResult, GetCloudauthFaceConfigsOutputArgs } from "./getCloudauthFaceConfigs";
export const getCloudauthFaceConfigs: typeof import("./getCloudauthFaceConfigs").getCloudauthFaceConfigs = null as any;
export const getCloudauthFaceConfigsOutput: typeof import("./getCloudauthFaceConfigs").getCloudauthFaceConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudauthFaceConfigs","getCloudauthFaceConfigsOutput"], () => require("./getCloudauthFaceConfigs"));

export { GetCmsAlarmContactGroupsArgs, GetCmsAlarmContactGroupsResult, GetCmsAlarmContactGroupsOutputArgs } from "./getCmsAlarmContactGroups";
export const getCmsAlarmContactGroups: typeof import("./getCmsAlarmContactGroups").getCmsAlarmContactGroups = null as any;
export const getCmsAlarmContactGroupsOutput: typeof import("./getCmsAlarmContactGroups").getCmsAlarmContactGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getCmsAlarmContactGroups","getCmsAlarmContactGroupsOutput"], () => require("./getCmsAlarmContactGroups"));

export { GetCmsAlarmContactsArgs, GetCmsAlarmContactsResult, GetCmsAlarmContactsOutputArgs } from "./getCmsAlarmContacts";
export const getCmsAlarmContacts: typeof import("./getCmsAlarmContacts").getCmsAlarmContacts = null as any;
export const getCmsAlarmContactsOutput: typeof import("./getCmsAlarmContacts").getCmsAlarmContactsOutput = null as any;
utilities.lazyLoad(exports, ["getCmsAlarmContacts","getCmsAlarmContactsOutput"], () => require("./getCmsAlarmContacts"));

export { GetCmsDynamicTagGroupsArgs, GetCmsDynamicTagGroupsResult, GetCmsDynamicTagGroupsOutputArgs } from "./getCmsDynamicTagGroups";
export const getCmsDynamicTagGroups: typeof import("./getCmsDynamicTagGroups").getCmsDynamicTagGroups = null as any;
export const getCmsDynamicTagGroupsOutput: typeof import("./getCmsDynamicTagGroups").getCmsDynamicTagGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getCmsDynamicTagGroups","getCmsDynamicTagGroupsOutput"], () => require("./getCmsDynamicTagGroups"));

export { GetCmsEventRulesArgs, GetCmsEventRulesResult, GetCmsEventRulesOutputArgs } from "./getCmsEventRules";
export const getCmsEventRules: typeof import("./getCmsEventRules").getCmsEventRules = null as any;
export const getCmsEventRulesOutput: typeof import("./getCmsEventRules").getCmsEventRulesOutput = null as any;
utilities.lazyLoad(exports, ["getCmsEventRules","getCmsEventRulesOutput"], () => require("./getCmsEventRules"));

export { GetCmsGroupMetricRulesArgs, GetCmsGroupMetricRulesResult, GetCmsGroupMetricRulesOutputArgs } from "./getCmsGroupMetricRules";
export const getCmsGroupMetricRules: typeof import("./getCmsGroupMetricRules").getCmsGroupMetricRules = null as any;
export const getCmsGroupMetricRulesOutput: typeof import("./getCmsGroupMetricRules").getCmsGroupMetricRulesOutput = null as any;
utilities.lazyLoad(exports, ["getCmsGroupMetricRules","getCmsGroupMetricRulesOutput"], () => require("./getCmsGroupMetricRules"));

export { GetCmsHybridMonitorDatasArgs, GetCmsHybridMonitorDatasResult, GetCmsHybridMonitorDatasOutputArgs } from "./getCmsHybridMonitorDatas";
export const getCmsHybridMonitorDatas: typeof import("./getCmsHybridMonitorDatas").getCmsHybridMonitorDatas = null as any;
export const getCmsHybridMonitorDatasOutput: typeof import("./getCmsHybridMonitorDatas").getCmsHybridMonitorDatasOutput = null as any;
utilities.lazyLoad(exports, ["getCmsHybridMonitorDatas","getCmsHybridMonitorDatasOutput"], () => require("./getCmsHybridMonitorDatas"));

export { GetCmsHybridMonitorFcTasksArgs, GetCmsHybridMonitorFcTasksResult, GetCmsHybridMonitorFcTasksOutputArgs } from "./getCmsHybridMonitorFcTasks";
export const getCmsHybridMonitorFcTasks: typeof import("./getCmsHybridMonitorFcTasks").getCmsHybridMonitorFcTasks = null as any;
export const getCmsHybridMonitorFcTasksOutput: typeof import("./getCmsHybridMonitorFcTasks").getCmsHybridMonitorFcTasksOutput = null as any;
utilities.lazyLoad(exports, ["getCmsHybridMonitorFcTasks","getCmsHybridMonitorFcTasksOutput"], () => require("./getCmsHybridMonitorFcTasks"));

export { GetCmsHybridMonitorSlsTasksArgs, GetCmsHybridMonitorSlsTasksResult, GetCmsHybridMonitorSlsTasksOutputArgs } from "./getCmsHybridMonitorSlsTasks";
export const getCmsHybridMonitorSlsTasks: typeof import("./getCmsHybridMonitorSlsTasks").getCmsHybridMonitorSlsTasks = null as any;
export const getCmsHybridMonitorSlsTasksOutput: typeof import("./getCmsHybridMonitorSlsTasks").getCmsHybridMonitorSlsTasksOutput = null as any;
utilities.lazyLoad(exports, ["getCmsHybridMonitorSlsTasks","getCmsHybridMonitorSlsTasksOutput"], () => require("./getCmsHybridMonitorSlsTasks"));

export { GetCmsMetricRuleBlackListsArgs, GetCmsMetricRuleBlackListsResult, GetCmsMetricRuleBlackListsOutputArgs } from "./getCmsMetricRuleBlackLists";
export const getCmsMetricRuleBlackLists: typeof import("./getCmsMetricRuleBlackLists").getCmsMetricRuleBlackLists = null as any;
export const getCmsMetricRuleBlackListsOutput: typeof import("./getCmsMetricRuleBlackLists").getCmsMetricRuleBlackListsOutput = null as any;
utilities.lazyLoad(exports, ["getCmsMetricRuleBlackLists","getCmsMetricRuleBlackListsOutput"], () => require("./getCmsMetricRuleBlackLists"));

export { GetCmsMetricRuleTemplatesArgs, GetCmsMetricRuleTemplatesResult, GetCmsMetricRuleTemplatesOutputArgs } from "./getCmsMetricRuleTemplates";
export const getCmsMetricRuleTemplates: typeof import("./getCmsMetricRuleTemplates").getCmsMetricRuleTemplates = null as any;
export const getCmsMetricRuleTemplatesOutput: typeof import("./getCmsMetricRuleTemplates").getCmsMetricRuleTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getCmsMetricRuleTemplates","getCmsMetricRuleTemplatesOutput"], () => require("./getCmsMetricRuleTemplates"));

export { GetCmsMonitorGroupInstancesArgs, GetCmsMonitorGroupInstancesResult, GetCmsMonitorGroupInstancesOutputArgs } from "./getCmsMonitorGroupInstances";
export const getCmsMonitorGroupInstances: typeof import("./getCmsMonitorGroupInstances").getCmsMonitorGroupInstances = null as any;
export const getCmsMonitorGroupInstancesOutput: typeof import("./getCmsMonitorGroupInstances").getCmsMonitorGroupInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getCmsMonitorGroupInstances","getCmsMonitorGroupInstancesOutput"], () => require("./getCmsMonitorGroupInstances"));

export { GetCmsMonitorGroupInstancesesArgs, GetCmsMonitorGroupInstancesesResult, GetCmsMonitorGroupInstancesesOutputArgs } from "./getCmsMonitorGroupInstanceses";
export const getCmsMonitorGroupInstanceses: typeof import("./getCmsMonitorGroupInstanceses").getCmsMonitorGroupInstanceses = null as any;
export const getCmsMonitorGroupInstancesesOutput: typeof import("./getCmsMonitorGroupInstanceses").getCmsMonitorGroupInstancesesOutput = null as any;
utilities.lazyLoad(exports, ["getCmsMonitorGroupInstanceses","getCmsMonitorGroupInstancesesOutput"], () => require("./getCmsMonitorGroupInstanceses"));

export { GetCmsMonitorGroupsArgs, GetCmsMonitorGroupsResult, GetCmsMonitorGroupsOutputArgs } from "./getCmsMonitorGroups";
export const getCmsMonitorGroups: typeof import("./getCmsMonitorGroups").getCmsMonitorGroups = null as any;
export const getCmsMonitorGroupsOutput: typeof import("./getCmsMonitorGroups").getCmsMonitorGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getCmsMonitorGroups","getCmsMonitorGroupsOutput"], () => require("./getCmsMonitorGroups"));

export { GetCmsNamespacesArgs, GetCmsNamespacesResult, GetCmsNamespacesOutputArgs } from "./getCmsNamespaces";
export const getCmsNamespaces: typeof import("./getCmsNamespaces").getCmsNamespaces = null as any;
export const getCmsNamespacesOutput: typeof import("./getCmsNamespaces").getCmsNamespacesOutput = null as any;
utilities.lazyLoad(exports, ["getCmsNamespaces","getCmsNamespacesOutput"], () => require("./getCmsNamespaces"));

export { GetCmsServiceArgs, GetCmsServiceResult, GetCmsServiceOutputArgs } from "./getCmsService";
export const getCmsService: typeof import("./getCmsService").getCmsService = null as any;
export const getCmsServiceOutput: typeof import("./getCmsService").getCmsServiceOutput = null as any;
utilities.lazyLoad(exports, ["getCmsService","getCmsServiceOutput"], () => require("./getCmsService"));

export { GetCmsSiteMonitorsArgs, GetCmsSiteMonitorsResult, GetCmsSiteMonitorsOutputArgs } from "./getCmsSiteMonitors";
export const getCmsSiteMonitors: typeof import("./getCmsSiteMonitors").getCmsSiteMonitors = null as any;
export const getCmsSiteMonitorsOutput: typeof import("./getCmsSiteMonitors").getCmsSiteMonitorsOutput = null as any;
utilities.lazyLoad(exports, ["getCmsSiteMonitors","getCmsSiteMonitorsOutput"], () => require("./getCmsSiteMonitors"));

export { GetCmsSlsGroupsArgs, GetCmsSlsGroupsResult, GetCmsSlsGroupsOutputArgs } from "./getCmsSlsGroups";
export const getCmsSlsGroups: typeof import("./getCmsSlsGroups").getCmsSlsGroups = null as any;
export const getCmsSlsGroupsOutput: typeof import("./getCmsSlsGroups").getCmsSlsGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getCmsSlsGroups","getCmsSlsGroupsOutput"], () => require("./getCmsSlsGroups"));

export { GetCommonBandwidthPackagesArgs, GetCommonBandwidthPackagesResult, GetCommonBandwidthPackagesOutputArgs } from "./getCommonBandwidthPackages";
export const getCommonBandwidthPackages: typeof import("./getCommonBandwidthPackages").getCommonBandwidthPackages = null as any;
export const getCommonBandwidthPackagesOutput: typeof import("./getCommonBandwidthPackages").getCommonBandwidthPackagesOutput = null as any;
utilities.lazyLoad(exports, ["getCommonBandwidthPackages","getCommonBandwidthPackagesOutput"], () => require("./getCommonBandwidthPackages"));

export { GetComputeNestServiceInstancesArgs, GetComputeNestServiceInstancesResult, GetComputeNestServiceInstancesOutputArgs } from "./getComputeNestServiceInstances";
export const getComputeNestServiceInstances: typeof import("./getComputeNestServiceInstances").getComputeNestServiceInstances = null as any;
export const getComputeNestServiceInstancesOutput: typeof import("./getComputeNestServiceInstances").getComputeNestServiceInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getComputeNestServiceInstances","getComputeNestServiceInstancesOutput"], () => require("./getComputeNestServiceInstances"));

export { GetConfigAggregateCompliancePacksArgs, GetConfigAggregateCompliancePacksResult, GetConfigAggregateCompliancePacksOutputArgs } from "./getConfigAggregateCompliancePacks";
export const getConfigAggregateCompliancePacks: typeof import("./getConfigAggregateCompliancePacks").getConfigAggregateCompliancePacks = null as any;
export const getConfigAggregateCompliancePacksOutput: typeof import("./getConfigAggregateCompliancePacks").getConfigAggregateCompliancePacksOutput = null as any;
utilities.lazyLoad(exports, ["getConfigAggregateCompliancePacks","getConfigAggregateCompliancePacksOutput"], () => require("./getConfigAggregateCompliancePacks"));

export { GetConfigAggregateConfigRulesArgs, GetConfigAggregateConfigRulesResult, GetConfigAggregateConfigRulesOutputArgs } from "./getConfigAggregateConfigRules";
export const getConfigAggregateConfigRules: typeof import("./getConfigAggregateConfigRules").getConfigAggregateConfigRules = null as any;
export const getConfigAggregateConfigRulesOutput: typeof import("./getConfigAggregateConfigRules").getConfigAggregateConfigRulesOutput = null as any;
utilities.lazyLoad(exports, ["getConfigAggregateConfigRules","getConfigAggregateConfigRulesOutput"], () => require("./getConfigAggregateConfigRules"));

export { GetConfigAggregateDeliveriesArgs, GetConfigAggregateDeliveriesResult, GetConfigAggregateDeliveriesOutputArgs } from "./getConfigAggregateDeliveries";
export const getConfigAggregateDeliveries: typeof import("./getConfigAggregateDeliveries").getConfigAggregateDeliveries = null as any;
export const getConfigAggregateDeliveriesOutput: typeof import("./getConfigAggregateDeliveries").getConfigAggregateDeliveriesOutput = null as any;
utilities.lazyLoad(exports, ["getConfigAggregateDeliveries","getConfigAggregateDeliveriesOutput"], () => require("./getConfigAggregateDeliveries"));

export { GetConfigAggregatorsArgs, GetConfigAggregatorsResult, GetConfigAggregatorsOutputArgs } from "./getConfigAggregators";
export const getConfigAggregators: typeof import("./getConfigAggregators").getConfigAggregators = null as any;
export const getConfigAggregatorsOutput: typeof import("./getConfigAggregators").getConfigAggregatorsOutput = null as any;
utilities.lazyLoad(exports, ["getConfigAggregators","getConfigAggregatorsOutput"], () => require("./getConfigAggregators"));

export { GetConfigCompliancePacksArgs, GetConfigCompliancePacksResult, GetConfigCompliancePacksOutputArgs } from "./getConfigCompliancePacks";
export const getConfigCompliancePacks: typeof import("./getConfigCompliancePacks").getConfigCompliancePacks = null as any;
export const getConfigCompliancePacksOutput: typeof import("./getConfigCompliancePacks").getConfigCompliancePacksOutput = null as any;
utilities.lazyLoad(exports, ["getConfigCompliancePacks","getConfigCompliancePacksOutput"], () => require("./getConfigCompliancePacks"));

export { GetConfigConfigurationRecordersArgs, GetConfigConfigurationRecordersResult, GetConfigConfigurationRecordersOutputArgs } from "./getConfigConfigurationRecorders";
export const getConfigConfigurationRecorders: typeof import("./getConfigConfigurationRecorders").getConfigConfigurationRecorders = null as any;
export const getConfigConfigurationRecordersOutput: typeof import("./getConfigConfigurationRecorders").getConfigConfigurationRecordersOutput = null as any;
utilities.lazyLoad(exports, ["getConfigConfigurationRecorders","getConfigConfigurationRecordersOutput"], () => require("./getConfigConfigurationRecorders"));

export { GetConfigDeliveriesArgs, GetConfigDeliveriesResult, GetConfigDeliveriesOutputArgs } from "./getConfigDeliveries";
export const getConfigDeliveries: typeof import("./getConfigDeliveries").getConfigDeliveries = null as any;
export const getConfigDeliveriesOutput: typeof import("./getConfigDeliveries").getConfigDeliveriesOutput = null as any;
utilities.lazyLoad(exports, ["getConfigDeliveries","getConfigDeliveriesOutput"], () => require("./getConfigDeliveries"));

export { GetConfigDeliveryChannelsArgs, GetConfigDeliveryChannelsResult, GetConfigDeliveryChannelsOutputArgs } from "./getConfigDeliveryChannels";
export const getConfigDeliveryChannels: typeof import("./getConfigDeliveryChannels").getConfigDeliveryChannels = null as any;
export const getConfigDeliveryChannelsOutput: typeof import("./getConfigDeliveryChannels").getConfigDeliveryChannelsOutput = null as any;
utilities.lazyLoad(exports, ["getConfigDeliveryChannels","getConfigDeliveryChannelsOutput"], () => require("./getConfigDeliveryChannels"));

export { GetConfigRulesArgs, GetConfigRulesResult, GetConfigRulesOutputArgs } from "./getConfigRules";
export const getConfigRules: typeof import("./getConfigRules").getConfigRules = null as any;
export const getConfigRulesOutput: typeof import("./getConfigRules").getConfigRulesOutput = null as any;
utilities.lazyLoad(exports, ["getConfigRules","getConfigRulesOutput"], () => require("./getConfigRules"));

export { GetCrChainsArgs, GetCrChainsResult, GetCrChainsOutputArgs } from "./getCrChains";
export const getCrChains: typeof import("./getCrChains").getCrChains = null as any;
export const getCrChainsOutput: typeof import("./getCrChains").getCrChainsOutput = null as any;
utilities.lazyLoad(exports, ["getCrChains","getCrChainsOutput"], () => require("./getCrChains"));

export { GetCrChartNamespacesArgs, GetCrChartNamespacesResult, GetCrChartNamespacesOutputArgs } from "./getCrChartNamespaces";
export const getCrChartNamespaces: typeof import("./getCrChartNamespaces").getCrChartNamespaces = null as any;
export const getCrChartNamespacesOutput: typeof import("./getCrChartNamespaces").getCrChartNamespacesOutput = null as any;
utilities.lazyLoad(exports, ["getCrChartNamespaces","getCrChartNamespacesOutput"], () => require("./getCrChartNamespaces"));

export { GetCrChartRepositoriesArgs, GetCrChartRepositoriesResult, GetCrChartRepositoriesOutputArgs } from "./getCrChartRepositories";
export const getCrChartRepositories: typeof import("./getCrChartRepositories").getCrChartRepositories = null as any;
export const getCrChartRepositoriesOutput: typeof import("./getCrChartRepositories").getCrChartRepositoriesOutput = null as any;
utilities.lazyLoad(exports, ["getCrChartRepositories","getCrChartRepositoriesOutput"], () => require("./getCrChartRepositories"));

export { GetCrEeInstancesArgs, GetCrEeInstancesResult, GetCrEeInstancesOutputArgs } from "./getCrEeInstances";
export const getCrEeInstances: typeof import("./getCrEeInstances").getCrEeInstances = null as any;
export const getCrEeInstancesOutput: typeof import("./getCrEeInstances").getCrEeInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getCrEeInstances","getCrEeInstancesOutput"], () => require("./getCrEeInstances"));

export { GetCrEeNamespacesArgs, GetCrEeNamespacesResult, GetCrEeNamespacesOutputArgs } from "./getCrEeNamespaces";
export const getCrEeNamespaces: typeof import("./getCrEeNamespaces").getCrEeNamespaces = null as any;
export const getCrEeNamespacesOutput: typeof import("./getCrEeNamespaces").getCrEeNamespacesOutput = null as any;
utilities.lazyLoad(exports, ["getCrEeNamespaces","getCrEeNamespacesOutput"], () => require("./getCrEeNamespaces"));

export { GetCrEeReposArgs, GetCrEeReposResult, GetCrEeReposOutputArgs } from "./getCrEeRepos";
export const getCrEeRepos: typeof import("./getCrEeRepos").getCrEeRepos = null as any;
export const getCrEeReposOutput: typeof import("./getCrEeRepos").getCrEeReposOutput = null as any;
utilities.lazyLoad(exports, ["getCrEeRepos","getCrEeReposOutput"], () => require("./getCrEeRepos"));

export { GetCrEeSyncRulesArgs, GetCrEeSyncRulesResult, GetCrEeSyncRulesOutputArgs } from "./getCrEeSyncRules";
export const getCrEeSyncRules: typeof import("./getCrEeSyncRules").getCrEeSyncRules = null as any;
export const getCrEeSyncRulesOutput: typeof import("./getCrEeSyncRules").getCrEeSyncRulesOutput = null as any;
utilities.lazyLoad(exports, ["getCrEeSyncRules","getCrEeSyncRulesOutput"], () => require("./getCrEeSyncRules"));

export { GetCrEndpointAclPoliciesArgs, GetCrEndpointAclPoliciesResult, GetCrEndpointAclPoliciesOutputArgs } from "./getCrEndpointAclPolicies";
export const getCrEndpointAclPolicies: typeof import("./getCrEndpointAclPolicies").getCrEndpointAclPolicies = null as any;
export const getCrEndpointAclPoliciesOutput: typeof import("./getCrEndpointAclPolicies").getCrEndpointAclPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getCrEndpointAclPolicies","getCrEndpointAclPoliciesOutput"], () => require("./getCrEndpointAclPolicies"));

export { GetCrEndpointAclServiceArgs, GetCrEndpointAclServiceResult, GetCrEndpointAclServiceOutputArgs } from "./getCrEndpointAclService";
export const getCrEndpointAclService: typeof import("./getCrEndpointAclService").getCrEndpointAclService = null as any;
export const getCrEndpointAclServiceOutput: typeof import("./getCrEndpointAclService").getCrEndpointAclServiceOutput = null as any;
utilities.lazyLoad(exports, ["getCrEndpointAclService","getCrEndpointAclServiceOutput"], () => require("./getCrEndpointAclService"));

export { GetCrNamespacesArgs, GetCrNamespacesResult, GetCrNamespacesOutputArgs } from "./getCrNamespaces";
export const getCrNamespaces: typeof import("./getCrNamespaces").getCrNamespaces = null as any;
export const getCrNamespacesOutput: typeof import("./getCrNamespaces").getCrNamespacesOutput = null as any;
utilities.lazyLoad(exports, ["getCrNamespaces","getCrNamespacesOutput"], () => require("./getCrNamespaces"));

export { GetCrReposArgs, GetCrReposResult, GetCrReposOutputArgs } from "./getCrRepos";
export const getCrRepos: typeof import("./getCrRepos").getCrRepos = null as any;
export const getCrReposOutput: typeof import("./getCrRepos").getCrReposOutput = null as any;
utilities.lazyLoad(exports, ["getCrRepos","getCrReposOutput"], () => require("./getCrRepos"));

export { GetCrServiceArgs, GetCrServiceResult, GetCrServiceOutputArgs } from "./getCrService";
export const getCrService: typeof import("./getCrService").getCrService = null as any;
export const getCrServiceOutput: typeof import("./getCrService").getCrServiceOutput = null as any;
utilities.lazyLoad(exports, ["getCrService","getCrServiceOutput"], () => require("./getCrService"));

export { GetCrVpcEndpointLinkedVpcsArgs, GetCrVpcEndpointLinkedVpcsResult, GetCrVpcEndpointLinkedVpcsOutputArgs } from "./getCrVpcEndpointLinkedVpcs";
export const getCrVpcEndpointLinkedVpcs: typeof import("./getCrVpcEndpointLinkedVpcs").getCrVpcEndpointLinkedVpcs = null as any;
export const getCrVpcEndpointLinkedVpcsOutput: typeof import("./getCrVpcEndpointLinkedVpcs").getCrVpcEndpointLinkedVpcsOutput = null as any;
utilities.lazyLoad(exports, ["getCrVpcEndpointLinkedVpcs","getCrVpcEndpointLinkedVpcsOutput"], () => require("./getCrVpcEndpointLinkedVpcs"));

export { GetCsClusterCredentialArgs, GetCsClusterCredentialResult, GetCsClusterCredentialOutputArgs } from "./getCsClusterCredential";
export const getCsClusterCredential: typeof import("./getCsClusterCredential").getCsClusterCredential = null as any;
export const getCsClusterCredentialOutput: typeof import("./getCsClusterCredential").getCsClusterCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getCsClusterCredential","getCsClusterCredentialOutput"], () => require("./getCsClusterCredential"));

export { GetCsEdgeKubernetesClustersArgs, GetCsEdgeKubernetesClustersResult, GetCsEdgeKubernetesClustersOutputArgs } from "./getCsEdgeKubernetesClusters";
export const getCsEdgeKubernetesClusters: typeof import("./getCsEdgeKubernetesClusters").getCsEdgeKubernetesClusters = null as any;
export const getCsEdgeKubernetesClustersOutput: typeof import("./getCsEdgeKubernetesClusters").getCsEdgeKubernetesClustersOutput = null as any;
utilities.lazyLoad(exports, ["getCsEdgeKubernetesClusters","getCsEdgeKubernetesClustersOutput"], () => require("./getCsEdgeKubernetesClusters"));

export { GetCsKubernetesAddonMetadataArgs, GetCsKubernetesAddonMetadataResult, GetCsKubernetesAddonMetadataOutputArgs } from "./getCsKubernetesAddonMetadata";
export const getCsKubernetesAddonMetadata: typeof import("./getCsKubernetesAddonMetadata").getCsKubernetesAddonMetadata = null as any;
export const getCsKubernetesAddonMetadataOutput: typeof import("./getCsKubernetesAddonMetadata").getCsKubernetesAddonMetadataOutput = null as any;
utilities.lazyLoad(exports, ["getCsKubernetesAddonMetadata","getCsKubernetesAddonMetadataOutput"], () => require("./getCsKubernetesAddonMetadata"));

export { GetCsKubernetesAddonsArgs, GetCsKubernetesAddonsResult, GetCsKubernetesAddonsOutputArgs } from "./getCsKubernetesAddons";
export const getCsKubernetesAddons: typeof import("./getCsKubernetesAddons").getCsKubernetesAddons = null as any;
export const getCsKubernetesAddonsOutput: typeof import("./getCsKubernetesAddons").getCsKubernetesAddonsOutput = null as any;
utilities.lazyLoad(exports, ["getCsKubernetesAddons","getCsKubernetesAddonsOutput"], () => require("./getCsKubernetesAddons"));

export { GetCsKubernetesClustersArgs, GetCsKubernetesClustersResult, GetCsKubernetesClustersOutputArgs } from "./getCsKubernetesClusters";
export const getCsKubernetesClusters: typeof import("./getCsKubernetesClusters").getCsKubernetesClusters = null as any;
export const getCsKubernetesClustersOutput: typeof import("./getCsKubernetesClusters").getCsKubernetesClustersOutput = null as any;
utilities.lazyLoad(exports, ["getCsKubernetesClusters","getCsKubernetesClustersOutput"], () => require("./getCsKubernetesClusters"));

export { GetCsKubernetesPermissionsArgs, GetCsKubernetesPermissionsResult, GetCsKubernetesPermissionsOutputArgs } from "./getCsKubernetesPermissions";
export const getCsKubernetesPermissions: typeof import("./getCsKubernetesPermissions").getCsKubernetesPermissions = null as any;
export const getCsKubernetesPermissionsOutput: typeof import("./getCsKubernetesPermissions").getCsKubernetesPermissionsOutput = null as any;
utilities.lazyLoad(exports, ["getCsKubernetesPermissions","getCsKubernetesPermissionsOutput"], () => require("./getCsKubernetesPermissions"));

export { GetCsKubernetesVersionArgs, GetCsKubernetesVersionResult, GetCsKubernetesVersionOutputArgs } from "./getCsKubernetesVersion";
export const getCsKubernetesVersion: typeof import("./getCsKubernetesVersion").getCsKubernetesVersion = null as any;
export const getCsKubernetesVersionOutput: typeof import("./getCsKubernetesVersion").getCsKubernetesVersionOutput = null as any;
utilities.lazyLoad(exports, ["getCsKubernetesVersion","getCsKubernetesVersionOutput"], () => require("./getCsKubernetesVersion"));

export { GetCsManagedKubernetesClustersArgs, GetCsManagedKubernetesClustersResult, GetCsManagedKubernetesClustersOutputArgs } from "./getCsManagedKubernetesClusters";
export const getCsManagedKubernetesClusters: typeof import("./getCsManagedKubernetesClusters").getCsManagedKubernetesClusters = null as any;
export const getCsManagedKubernetesClustersOutput: typeof import("./getCsManagedKubernetesClusters").getCsManagedKubernetesClustersOutput = null as any;
utilities.lazyLoad(exports, ["getCsManagedKubernetesClusters","getCsManagedKubernetesClustersOutput"], () => require("./getCsManagedKubernetesClusters"));

export { GetCsServerlessKubernetesClustersArgs, GetCsServerlessKubernetesClustersResult, GetCsServerlessKubernetesClustersOutputArgs } from "./getCsServerlessKubernetesClusters";
export const getCsServerlessKubernetesClusters: typeof import("./getCsServerlessKubernetesClusters").getCsServerlessKubernetesClusters = null as any;
export const getCsServerlessKubernetesClustersOutput: typeof import("./getCsServerlessKubernetesClusters").getCsServerlessKubernetesClustersOutput = null as any;
utilities.lazyLoad(exports, ["getCsServerlessKubernetesClusters","getCsServerlessKubernetesClustersOutput"], () => require("./getCsServerlessKubernetesClusters"));

export { GetDataWorksFoldersArgs, GetDataWorksFoldersResult, GetDataWorksFoldersOutputArgs } from "./getDataWorksFolders";
export const getDataWorksFolders: typeof import("./getDataWorksFolders").getDataWorksFolders = null as any;
export const getDataWorksFoldersOutput: typeof import("./getDataWorksFolders").getDataWorksFoldersOutput = null as any;
utilities.lazyLoad(exports, ["getDataWorksFolders","getDataWorksFoldersOutput"], () => require("./getDataWorksFolders"));

export { GetDataWorksServiceArgs, GetDataWorksServiceResult, GetDataWorksServiceOutputArgs } from "./getDataWorksService";
export const getDataWorksService: typeof import("./getDataWorksService").getDataWorksService = null as any;
export const getDataWorksServiceOutput: typeof import("./getDataWorksService").getDataWorksServiceOutput = null as any;
utilities.lazyLoad(exports, ["getDataWorksService","getDataWorksServiceOutput"], () => require("./getDataWorksService"));

export { GetDatabaseGatewayGatewaysArgs, GetDatabaseGatewayGatewaysResult, GetDatabaseGatewayGatewaysOutputArgs } from "./getDatabaseGatewayGateways";
export const getDatabaseGatewayGateways: typeof import("./getDatabaseGatewayGateways").getDatabaseGatewayGateways = null as any;
export const getDatabaseGatewayGatewaysOutput: typeof import("./getDatabaseGatewayGateways").getDatabaseGatewayGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseGatewayGateways","getDatabaseGatewayGatewaysOutput"], () => require("./getDatabaseGatewayGateways"));

export { GetDatahubServiceArgs, GetDatahubServiceResult, GetDatahubServiceOutputArgs } from "./getDatahubService";
export const getDatahubService: typeof import("./getDatahubService").getDatahubService = null as any;
export const getDatahubServiceOutput: typeof import("./getDatahubService").getDatahubServiceOutput = null as any;
utilities.lazyLoad(exports, ["getDatahubService","getDatahubServiceOutput"], () => require("./getDatahubService"));

export { GetDataworksServiceArgs, GetDataworksServiceResult, GetDataworksServiceOutputArgs } from "./getDataworksService";
export const getDataworksService: typeof import("./getDataworksService").getDataworksService = null as any;
export const getDataworksServiceOutput: typeof import("./getDataworksService").getDataworksServiceOutput = null as any;
utilities.lazyLoad(exports, ["getDataworksService","getDataworksServiceOutput"], () => require("./getDataworksService"));

export { GetDbInstanceClassInfosArgs, GetDbInstanceClassInfosResult, GetDbInstanceClassInfosOutputArgs } from "./getDbInstanceClassInfos";
export const getDbInstanceClassInfos: typeof import("./getDbInstanceClassInfos").getDbInstanceClassInfos = null as any;
export const getDbInstanceClassInfosOutput: typeof import("./getDbInstanceClassInfos").getDbInstanceClassInfosOutput = null as any;
utilities.lazyLoad(exports, ["getDbInstanceClassInfos","getDbInstanceClassInfosOutput"], () => require("./getDbInstanceClassInfos"));

export { GetDbInstanceClassesArgs, GetDbInstanceClassesResult, GetDbInstanceClassesOutputArgs } from "./getDbInstanceClasses";
export const getDbInstanceClasses: typeof import("./getDbInstanceClasses").getDbInstanceClasses = null as any;
export const getDbInstanceClassesOutput: typeof import("./getDbInstanceClasses").getDbInstanceClassesOutput = null as any;
utilities.lazyLoad(exports, ["getDbInstanceClasses","getDbInstanceClassesOutput"], () => require("./getDbInstanceClasses"));

export { GetDbInstanceEnginesArgs, GetDbInstanceEnginesResult, GetDbInstanceEnginesOutputArgs } from "./getDbInstanceEngines";
export const getDbInstanceEngines: typeof import("./getDbInstanceEngines").getDbInstanceEngines = null as any;
export const getDbInstanceEnginesOutput: typeof import("./getDbInstanceEngines").getDbInstanceEnginesOutput = null as any;
utilities.lazyLoad(exports, ["getDbInstanceEngines","getDbInstanceEnginesOutput"], () => require("./getDbInstanceEngines"));

export { GetDbInstancesArgs, GetDbInstancesResult, GetDbInstancesOutputArgs } from "./getDbInstances";
export const getDbInstances: typeof import("./getDbInstances").getDbInstances = null as any;
export const getDbInstancesOutput: typeof import("./getDbInstances").getDbInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getDbInstances","getDbInstancesOutput"], () => require("./getDbInstances"));

export { GetDbZonesArgs, GetDbZonesResult, GetDbZonesOutputArgs } from "./getDbZones";
export const getDbZones: typeof import("./getDbZones").getDbZones = null as any;
export const getDbZonesOutput: typeof import("./getDbZones").getDbZonesOutput = null as any;
utilities.lazyLoad(exports, ["getDbZones","getDbZonesOutput"], () => require("./getDbZones"));

export { GetDbfsAutoSnapShotPoliciesArgs, GetDbfsAutoSnapShotPoliciesResult, GetDbfsAutoSnapShotPoliciesOutputArgs } from "./getDbfsAutoSnapShotPolicies";
export const getDbfsAutoSnapShotPolicies: typeof import("./getDbfsAutoSnapShotPolicies").getDbfsAutoSnapShotPolicies = null as any;
export const getDbfsAutoSnapShotPoliciesOutput: typeof import("./getDbfsAutoSnapShotPolicies").getDbfsAutoSnapShotPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getDbfsAutoSnapShotPolicies","getDbfsAutoSnapShotPoliciesOutput"], () => require("./getDbfsAutoSnapShotPolicies"));

export { GetDbfsInstancesArgs, GetDbfsInstancesResult, GetDbfsInstancesOutputArgs } from "./getDbfsInstances";
export const getDbfsInstances: typeof import("./getDbfsInstances").getDbfsInstances = null as any;
export const getDbfsInstancesOutput: typeof import("./getDbfsInstances").getDbfsInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getDbfsInstances","getDbfsInstancesOutput"], () => require("./getDbfsInstances"));

export { GetDbfsSnapshotsArgs, GetDbfsSnapshotsResult, GetDbfsSnapshotsOutputArgs } from "./getDbfsSnapshots";
export const getDbfsSnapshots: typeof import("./getDbfsSnapshots").getDbfsSnapshots = null as any;
export const getDbfsSnapshotsOutput: typeof import("./getDbfsSnapshots").getDbfsSnapshotsOutput = null as any;
utilities.lazyLoad(exports, ["getDbfsSnapshots","getDbfsSnapshotsOutput"], () => require("./getDbfsSnapshots"));

export { GetDbsBackupPlansArgs, GetDbsBackupPlansResult, GetDbsBackupPlansOutputArgs } from "./getDbsBackupPlans";
export const getDbsBackupPlans: typeof import("./getDbsBackupPlans").getDbsBackupPlans = null as any;
export const getDbsBackupPlansOutput: typeof import("./getDbsBackupPlans").getDbsBackupPlansOutput = null as any;
utilities.lazyLoad(exports, ["getDbsBackupPlans","getDbsBackupPlansOutput"], () => require("./getDbsBackupPlans"));

export { GetDcdnDomainsArgs, GetDcdnDomainsResult, GetDcdnDomainsOutputArgs } from "./getDcdnDomains";
export const getDcdnDomains: typeof import("./getDcdnDomains").getDcdnDomains = null as any;
export const getDcdnDomainsOutput: typeof import("./getDcdnDomains").getDcdnDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getDcdnDomains","getDcdnDomainsOutput"], () => require("./getDcdnDomains"));

export { GetDcdnIpaDomainsArgs, GetDcdnIpaDomainsResult, GetDcdnIpaDomainsOutputArgs } from "./getDcdnIpaDomains";
export const getDcdnIpaDomains: typeof import("./getDcdnIpaDomains").getDcdnIpaDomains = null as any;
export const getDcdnIpaDomainsOutput: typeof import("./getDcdnIpaDomains").getDcdnIpaDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getDcdnIpaDomains","getDcdnIpaDomainsOutput"], () => require("./getDcdnIpaDomains"));

export { GetDcdnKvAccountArgs, GetDcdnKvAccountResult, GetDcdnKvAccountOutputArgs } from "./getDcdnKvAccount";
export const getDcdnKvAccount: typeof import("./getDcdnKvAccount").getDcdnKvAccount = null as any;
export const getDcdnKvAccountOutput: typeof import("./getDcdnKvAccount").getDcdnKvAccountOutput = null as any;
utilities.lazyLoad(exports, ["getDcdnKvAccount","getDcdnKvAccountOutput"], () => require("./getDcdnKvAccount"));

export { GetDcdnServiceArgs, GetDcdnServiceResult, GetDcdnServiceOutputArgs } from "./getDcdnService";
export const getDcdnService: typeof import("./getDcdnService").getDcdnService = null as any;
export const getDcdnServiceOutput: typeof import("./getDcdnService").getDcdnServiceOutput = null as any;
utilities.lazyLoad(exports, ["getDcdnService","getDcdnServiceOutput"], () => require("./getDcdnService"));

export { GetDcdnWafDomainsArgs, GetDcdnWafDomainsResult, GetDcdnWafDomainsOutputArgs } from "./getDcdnWafDomains";
export const getDcdnWafDomains: typeof import("./getDcdnWafDomains").getDcdnWafDomains = null as any;
export const getDcdnWafDomainsOutput: typeof import("./getDcdnWafDomains").getDcdnWafDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getDcdnWafDomains","getDcdnWafDomainsOutput"], () => require("./getDcdnWafDomains"));

export { GetDcdnWafPoliciesArgs, GetDcdnWafPoliciesResult, GetDcdnWafPoliciesOutputArgs } from "./getDcdnWafPolicies";
export const getDcdnWafPolicies: typeof import("./getDcdnWafPolicies").getDcdnWafPolicies = null as any;
export const getDcdnWafPoliciesOutput: typeof import("./getDcdnWafPolicies").getDcdnWafPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getDcdnWafPolicies","getDcdnWafPoliciesOutput"], () => require("./getDcdnWafPolicies"));

export { GetDcdnWafRulesArgs, GetDcdnWafRulesResult, GetDcdnWafRulesOutputArgs } from "./getDcdnWafRules";
export const getDcdnWafRules: typeof import("./getDcdnWafRules").getDcdnWafRules = null as any;
export const getDcdnWafRulesOutput: typeof import("./getDcdnWafRules").getDcdnWafRulesOutput = null as any;
utilities.lazyLoad(exports, ["getDcdnWafRules","getDcdnWafRulesOutput"], () => require("./getDcdnWafRules"));

export { GetDdosbgpInstancesArgs, GetDdosbgpInstancesResult, GetDdosbgpInstancesOutputArgs } from "./getDdosbgpInstances";
export const getDdosbgpInstances: typeof import("./getDdosbgpInstances").getDdosbgpInstances = null as any;
export const getDdosbgpInstancesOutput: typeof import("./getDdosbgpInstances").getDdosbgpInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getDdosbgpInstances","getDdosbgpInstancesOutput"], () => require("./getDdosbgpInstances"));

export { GetDdosbgpIpsArgs, GetDdosbgpIpsResult, GetDdosbgpIpsOutputArgs } from "./getDdosbgpIps";
export const getDdosbgpIps: typeof import("./getDdosbgpIps").getDdosbgpIps = null as any;
export const getDdosbgpIpsOutput: typeof import("./getDdosbgpIps").getDdosbgpIpsOutput = null as any;
utilities.lazyLoad(exports, ["getDdosbgpIps","getDdosbgpIpsOutput"], () => require("./getDdosbgpIps"));

export { GetDdoscooDomainResourcesArgs, GetDdoscooDomainResourcesResult, GetDdoscooDomainResourcesOutputArgs } from "./getDdoscooDomainResources";
export const getDdoscooDomainResources: typeof import("./getDdoscooDomainResources").getDdoscooDomainResources = null as any;
export const getDdoscooDomainResourcesOutput: typeof import("./getDdoscooDomainResources").getDdoscooDomainResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getDdoscooDomainResources","getDdoscooDomainResourcesOutput"], () => require("./getDdoscooDomainResources"));

export { GetDdoscooInstancesArgs, GetDdoscooInstancesResult, GetDdoscooInstancesOutputArgs } from "./getDdoscooInstances";
export const getDdoscooInstances: typeof import("./getDdoscooInstances").getDdoscooInstances = null as any;
export const getDdoscooInstancesOutput: typeof import("./getDdoscooInstances").getDdoscooInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getDdoscooInstances","getDdoscooInstancesOutput"], () => require("./getDdoscooInstances"));

export { GetDdoscooPortsArgs, GetDdoscooPortsResult, GetDdoscooPortsOutputArgs } from "./getDdoscooPorts";
export const getDdoscooPorts: typeof import("./getDdoscooPorts").getDdoscooPorts = null as any;
export const getDdoscooPortsOutput: typeof import("./getDdoscooPorts").getDdoscooPortsOutput = null as any;
utilities.lazyLoad(exports, ["getDdoscooPorts","getDdoscooPortsOutput"], () => require("./getDdoscooPorts"));

export { GetDfsAccessGroupsArgs, GetDfsAccessGroupsResult, GetDfsAccessGroupsOutputArgs } from "./getDfsAccessGroups";
export const getDfsAccessGroups: typeof import("./getDfsAccessGroups").getDfsAccessGroups = null as any;
export const getDfsAccessGroupsOutput: typeof import("./getDfsAccessGroups").getDfsAccessGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getDfsAccessGroups","getDfsAccessGroupsOutput"], () => require("./getDfsAccessGroups"));

export { GetDfsAccessRulesArgs, GetDfsAccessRulesResult, GetDfsAccessRulesOutputArgs } from "./getDfsAccessRules";
export const getDfsAccessRules: typeof import("./getDfsAccessRules").getDfsAccessRules = null as any;
export const getDfsAccessRulesOutput: typeof import("./getDfsAccessRules").getDfsAccessRulesOutput = null as any;
utilities.lazyLoad(exports, ["getDfsAccessRules","getDfsAccessRulesOutput"], () => require("./getDfsAccessRules"));

export { GetDfsFileSystemsArgs, GetDfsFileSystemsResult, GetDfsFileSystemsOutputArgs } from "./getDfsFileSystems";
export const getDfsFileSystems: typeof import("./getDfsFileSystems").getDfsFileSystems = null as any;
export const getDfsFileSystemsOutput: typeof import("./getDfsFileSystems").getDfsFileSystemsOutput = null as any;
utilities.lazyLoad(exports, ["getDfsFileSystems","getDfsFileSystemsOutput"], () => require("./getDfsFileSystems"));

export { GetDfsMountPointsArgs, GetDfsMountPointsResult, GetDfsMountPointsOutputArgs } from "./getDfsMountPoints";
export const getDfsMountPoints: typeof import("./getDfsMountPoints").getDfsMountPoints = null as any;
export const getDfsMountPointsOutput: typeof import("./getDfsMountPoints").getDfsMountPointsOutput = null as any;
utilities.lazyLoad(exports, ["getDfsMountPoints","getDfsMountPointsOutput"], () => require("./getDfsMountPoints"));

export { GetDfsZonesArgs, GetDfsZonesResult, GetDfsZonesOutputArgs } from "./getDfsZones";
export const getDfsZones: typeof import("./getDfsZones").getDfsZones = null as any;
export const getDfsZonesOutput: typeof import("./getDfsZones").getDfsZonesOutput = null as any;
utilities.lazyLoad(exports, ["getDfsZones","getDfsZonesOutput"], () => require("./getDfsZones"));

export { GetDirectMailDomainsArgs, GetDirectMailDomainsResult, GetDirectMailDomainsOutputArgs } from "./getDirectMailDomains";
export const getDirectMailDomains: typeof import("./getDirectMailDomains").getDirectMailDomains = null as any;
export const getDirectMailDomainsOutput: typeof import("./getDirectMailDomains").getDirectMailDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getDirectMailDomains","getDirectMailDomainsOutput"], () => require("./getDirectMailDomains"));

export { GetDirectMailMailAddressesArgs, GetDirectMailMailAddressesResult, GetDirectMailMailAddressesOutputArgs } from "./getDirectMailMailAddresses";
export const getDirectMailMailAddresses: typeof import("./getDirectMailMailAddresses").getDirectMailMailAddresses = null as any;
export const getDirectMailMailAddressesOutput: typeof import("./getDirectMailMailAddresses").getDirectMailMailAddressesOutput = null as any;
utilities.lazyLoad(exports, ["getDirectMailMailAddresses","getDirectMailMailAddressesOutput"], () => require("./getDirectMailMailAddresses"));

export { GetDirectMailReceiversesArgs, GetDirectMailReceiversesResult, GetDirectMailReceiversesOutputArgs } from "./getDirectMailReceiverses";
export const getDirectMailReceiverses: typeof import("./getDirectMailReceiverses").getDirectMailReceiverses = null as any;
export const getDirectMailReceiversesOutput: typeof import("./getDirectMailReceiverses").getDirectMailReceiversesOutput = null as any;
utilities.lazyLoad(exports, ["getDirectMailReceiverses","getDirectMailReceiversesOutput"], () => require("./getDirectMailReceiverses"));

export { GetDirectMailTagsArgs, GetDirectMailTagsResult, GetDirectMailTagsOutputArgs } from "./getDirectMailTags";
export const getDirectMailTags: typeof import("./getDirectMailTags").getDirectMailTags = null as any;
export const getDirectMailTagsOutput: typeof import("./getDirectMailTags").getDirectMailTagsOutput = null as any;
utilities.lazyLoad(exports, ["getDirectMailTags","getDirectMailTagsOutput"], () => require("./getDirectMailTags"));

export { GetDisksArgs, GetDisksResult, GetDisksOutputArgs } from "./getDisks";
export const getDisks: typeof import("./getDisks").getDisks = null as any;
export const getDisksOutput: typeof import("./getDisks").getDisksOutput = null as any;
utilities.lazyLoad(exports, ["getDisks","getDisksOutput"], () => require("./getDisks"));

export { GetDmsEnterpriseDatabasesArgs, GetDmsEnterpriseDatabasesResult, GetDmsEnterpriseDatabasesOutputArgs } from "./getDmsEnterpriseDatabases";
export const getDmsEnterpriseDatabases: typeof import("./getDmsEnterpriseDatabases").getDmsEnterpriseDatabases = null as any;
export const getDmsEnterpriseDatabasesOutput: typeof import("./getDmsEnterpriseDatabases").getDmsEnterpriseDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getDmsEnterpriseDatabases","getDmsEnterpriseDatabasesOutput"], () => require("./getDmsEnterpriseDatabases"));

export { GetDmsEnterpriseInstancesArgs, GetDmsEnterpriseInstancesResult, GetDmsEnterpriseInstancesOutputArgs } from "./getDmsEnterpriseInstances";
export const getDmsEnterpriseInstances: typeof import("./getDmsEnterpriseInstances").getDmsEnterpriseInstances = null as any;
export const getDmsEnterpriseInstancesOutput: typeof import("./getDmsEnterpriseInstances").getDmsEnterpriseInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getDmsEnterpriseInstances","getDmsEnterpriseInstancesOutput"], () => require("./getDmsEnterpriseInstances"));

export { GetDmsEnterpriseLogicDatabasesArgs, GetDmsEnterpriseLogicDatabasesResult, GetDmsEnterpriseLogicDatabasesOutputArgs } from "./getDmsEnterpriseLogicDatabases";
export const getDmsEnterpriseLogicDatabases: typeof import("./getDmsEnterpriseLogicDatabases").getDmsEnterpriseLogicDatabases = null as any;
export const getDmsEnterpriseLogicDatabasesOutput: typeof import("./getDmsEnterpriseLogicDatabases").getDmsEnterpriseLogicDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getDmsEnterpriseLogicDatabases","getDmsEnterpriseLogicDatabasesOutput"], () => require("./getDmsEnterpriseLogicDatabases"));

export { GetDmsEnterpriseProxiesArgs, GetDmsEnterpriseProxiesResult, GetDmsEnterpriseProxiesOutputArgs } from "./getDmsEnterpriseProxies";
export const getDmsEnterpriseProxies: typeof import("./getDmsEnterpriseProxies").getDmsEnterpriseProxies = null as any;
export const getDmsEnterpriseProxiesOutput: typeof import("./getDmsEnterpriseProxies").getDmsEnterpriseProxiesOutput = null as any;
utilities.lazyLoad(exports, ["getDmsEnterpriseProxies","getDmsEnterpriseProxiesOutput"], () => require("./getDmsEnterpriseProxies"));

export { GetDmsEnterpriseProxyAccessesArgs, GetDmsEnterpriseProxyAccessesResult, GetDmsEnterpriseProxyAccessesOutputArgs } from "./getDmsEnterpriseProxyAccesses";
export const getDmsEnterpriseProxyAccesses: typeof import("./getDmsEnterpriseProxyAccesses").getDmsEnterpriseProxyAccesses = null as any;
export const getDmsEnterpriseProxyAccessesOutput: typeof import("./getDmsEnterpriseProxyAccesses").getDmsEnterpriseProxyAccessesOutput = null as any;
utilities.lazyLoad(exports, ["getDmsEnterpriseProxyAccesses","getDmsEnterpriseProxyAccessesOutput"], () => require("./getDmsEnterpriseProxyAccesses"));

export { GetDmsEnterpriseUsersArgs, GetDmsEnterpriseUsersResult, GetDmsEnterpriseUsersOutputArgs } from "./getDmsEnterpriseUsers";
export const getDmsEnterpriseUsers: typeof import("./getDmsEnterpriseUsers").getDmsEnterpriseUsers = null as any;
export const getDmsEnterpriseUsersOutput: typeof import("./getDmsEnterpriseUsers").getDmsEnterpriseUsersOutput = null as any;
utilities.lazyLoad(exports, ["getDmsEnterpriseUsers","getDmsEnterpriseUsersOutput"], () => require("./getDmsEnterpriseUsers"));

export { GetDmsUserTenantsArgs, GetDmsUserTenantsResult, GetDmsUserTenantsOutputArgs } from "./getDmsUserTenants";
export const getDmsUserTenants: typeof import("./getDmsUserTenants").getDmsUserTenants = null as any;
export const getDmsUserTenantsOutput: typeof import("./getDmsUserTenants").getDmsUserTenantsOutput = null as any;
utilities.lazyLoad(exports, ["getDmsUserTenants","getDmsUserTenantsOutput"], () => require("./getDmsUserTenants"));

export { GetDnsDomainGroupsArgs, GetDnsDomainGroupsResult, GetDnsDomainGroupsOutputArgs } from "./getDnsDomainGroups";
export const getDnsDomainGroups: typeof import("./getDnsDomainGroups").getDnsDomainGroups = null as any;
export const getDnsDomainGroupsOutput: typeof import("./getDnsDomainGroups").getDnsDomainGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getDnsDomainGroups","getDnsDomainGroupsOutput"], () => require("./getDnsDomainGroups"));

export { GetDnsDomainRecordsArgs, GetDnsDomainRecordsResult, GetDnsDomainRecordsOutputArgs } from "./getDnsDomainRecords";
export const getDnsDomainRecords: typeof import("./getDnsDomainRecords").getDnsDomainRecords = null as any;
export const getDnsDomainRecordsOutput: typeof import("./getDnsDomainRecords").getDnsDomainRecordsOutput = null as any;
utilities.lazyLoad(exports, ["getDnsDomainRecords","getDnsDomainRecordsOutput"], () => require("./getDnsDomainRecords"));

export { GetDnsDomainTxtGuidArgs, GetDnsDomainTxtGuidResult, GetDnsDomainTxtGuidOutputArgs } from "./getDnsDomainTxtGuid";
export const getDnsDomainTxtGuid: typeof import("./getDnsDomainTxtGuid").getDnsDomainTxtGuid = null as any;
export const getDnsDomainTxtGuidOutput: typeof import("./getDnsDomainTxtGuid").getDnsDomainTxtGuidOutput = null as any;
utilities.lazyLoad(exports, ["getDnsDomainTxtGuid","getDnsDomainTxtGuidOutput"], () => require("./getDnsDomainTxtGuid"));

export { GetDnsDomainsArgs, GetDnsDomainsResult, GetDnsDomainsOutputArgs } from "./getDnsDomains";
export const getDnsDomains: typeof import("./getDnsDomains").getDnsDomains = null as any;
export const getDnsDomainsOutput: typeof import("./getDnsDomains").getDnsDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getDnsDomains","getDnsDomainsOutput"], () => require("./getDnsDomains"));

export { GetDnsGroupsArgs, GetDnsGroupsResult, GetDnsGroupsOutputArgs } from "./getDnsGroups";
export const getDnsGroups: typeof import("./getDnsGroups").getDnsGroups = null as any;
export const getDnsGroupsOutput: typeof import("./getDnsGroups").getDnsGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getDnsGroups","getDnsGroupsOutput"], () => require("./getDnsGroups"));

export { GetDnsInstancesArgs, GetDnsInstancesResult, GetDnsInstancesOutputArgs } from "./getDnsInstances";
export const getDnsInstances: typeof import("./getDnsInstances").getDnsInstances = null as any;
export const getDnsInstancesOutput: typeof import("./getDnsInstances").getDnsInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getDnsInstances","getDnsInstancesOutput"], () => require("./getDnsInstances"));

export { GetDnsRecordsArgs, GetDnsRecordsResult, GetDnsRecordsOutputArgs } from "./getDnsRecords";
export const getDnsRecords: typeof import("./getDnsRecords").getDnsRecords = null as any;
export const getDnsRecordsOutput: typeof import("./getDnsRecords").getDnsRecordsOutput = null as any;
utilities.lazyLoad(exports, ["getDnsRecords","getDnsRecordsOutput"], () => require("./getDnsRecords"));

export { GetDnsResolutionLinesArgs, GetDnsResolutionLinesResult, GetDnsResolutionLinesOutputArgs } from "./getDnsResolutionLines";
export const getDnsResolutionLines: typeof import("./getDnsResolutionLines").getDnsResolutionLines = null as any;
export const getDnsResolutionLinesOutput: typeof import("./getDnsResolutionLines").getDnsResolutionLinesOutput = null as any;
utilities.lazyLoad(exports, ["getDnsResolutionLines","getDnsResolutionLinesOutput"], () => require("./getDnsResolutionLines"));

export { GetDrdsInstancesArgs, GetDrdsInstancesResult, GetDrdsInstancesOutputArgs } from "./getDrdsInstances";
export const getDrdsInstances: typeof import("./getDrdsInstances").getDrdsInstances = null as any;
export const getDrdsInstancesOutput: typeof import("./getDrdsInstances").getDrdsInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getDrdsInstances","getDrdsInstancesOutput"], () => require("./getDrdsInstances"));

export { GetDtsConsumerChannelsArgs, GetDtsConsumerChannelsResult, GetDtsConsumerChannelsOutputArgs } from "./getDtsConsumerChannels";
export const getDtsConsumerChannels: typeof import("./getDtsConsumerChannels").getDtsConsumerChannels = null as any;
export const getDtsConsumerChannelsOutput: typeof import("./getDtsConsumerChannels").getDtsConsumerChannelsOutput = null as any;
utilities.lazyLoad(exports, ["getDtsConsumerChannels","getDtsConsumerChannelsOutput"], () => require("./getDtsConsumerChannels"));

export { GetDtsInstancesArgs, GetDtsInstancesResult, GetDtsInstancesOutputArgs } from "./getDtsInstances";
export const getDtsInstances: typeof import("./getDtsInstances").getDtsInstances = null as any;
export const getDtsInstancesOutput: typeof import("./getDtsInstances").getDtsInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getDtsInstances","getDtsInstancesOutput"], () => require("./getDtsInstances"));

export { GetDtsMigrationJobsArgs, GetDtsMigrationJobsResult, GetDtsMigrationJobsOutputArgs } from "./getDtsMigrationJobs";
export const getDtsMigrationJobs: typeof import("./getDtsMigrationJobs").getDtsMigrationJobs = null as any;
export const getDtsMigrationJobsOutput: typeof import("./getDtsMigrationJobs").getDtsMigrationJobsOutput = null as any;
utilities.lazyLoad(exports, ["getDtsMigrationJobs","getDtsMigrationJobsOutput"], () => require("./getDtsMigrationJobs"));

export { GetDtsSubscriptionJobsArgs, GetDtsSubscriptionJobsResult, GetDtsSubscriptionJobsOutputArgs } from "./getDtsSubscriptionJobs";
export const getDtsSubscriptionJobs: typeof import("./getDtsSubscriptionJobs").getDtsSubscriptionJobs = null as any;
export const getDtsSubscriptionJobsOutput: typeof import("./getDtsSubscriptionJobs").getDtsSubscriptionJobsOutput = null as any;
utilities.lazyLoad(exports, ["getDtsSubscriptionJobs","getDtsSubscriptionJobsOutput"], () => require("./getDtsSubscriptionJobs"));

export { GetDtsSynchronizationJobsArgs, GetDtsSynchronizationJobsResult, GetDtsSynchronizationJobsOutputArgs } from "./getDtsSynchronizationJobs";
export const getDtsSynchronizationJobs: typeof import("./getDtsSynchronizationJobs").getDtsSynchronizationJobs = null as any;
export const getDtsSynchronizationJobsOutput: typeof import("./getDtsSynchronizationJobs").getDtsSynchronizationJobsOutput = null as any;
utilities.lazyLoad(exports, ["getDtsSynchronizationJobs","getDtsSynchronizationJobsOutput"], () => require("./getDtsSynchronizationJobs"));

export { GetEaisInstancesArgs, GetEaisInstancesResult, GetEaisInstancesOutputArgs } from "./getEaisInstances";
export const getEaisInstances: typeof import("./getEaisInstances").getEaisInstances = null as any;
export const getEaisInstancesOutput: typeof import("./getEaisInstances").getEaisInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getEaisInstances","getEaisInstancesOutput"], () => require("./getEaisInstances"));

export { GetEbsDedicatedBlockStorageClustersArgs, GetEbsDedicatedBlockStorageClustersResult, GetEbsDedicatedBlockStorageClustersOutputArgs } from "./getEbsDedicatedBlockStorageClusters";
export const getEbsDedicatedBlockStorageClusters: typeof import("./getEbsDedicatedBlockStorageClusters").getEbsDedicatedBlockStorageClusters = null as any;
export const getEbsDedicatedBlockStorageClustersOutput: typeof import("./getEbsDedicatedBlockStorageClusters").getEbsDedicatedBlockStorageClustersOutput = null as any;
utilities.lazyLoad(exports, ["getEbsDedicatedBlockStorageClusters","getEbsDedicatedBlockStorageClustersOutput"], () => require("./getEbsDedicatedBlockStorageClusters"));

export { GetEbsDiskReplicaGroupsArgs, GetEbsDiskReplicaGroupsResult, GetEbsDiskReplicaGroupsOutputArgs } from "./getEbsDiskReplicaGroups";
export const getEbsDiskReplicaGroups: typeof import("./getEbsDiskReplicaGroups").getEbsDiskReplicaGroups = null as any;
export const getEbsDiskReplicaGroupsOutput: typeof import("./getEbsDiskReplicaGroups").getEbsDiskReplicaGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getEbsDiskReplicaGroups","getEbsDiskReplicaGroupsOutput"], () => require("./getEbsDiskReplicaGroups"));

export { GetEbsDiskReplicaPairsArgs, GetEbsDiskReplicaPairsResult, GetEbsDiskReplicaPairsOutputArgs } from "./getEbsDiskReplicaPairs";
export const getEbsDiskReplicaPairs: typeof import("./getEbsDiskReplicaPairs").getEbsDiskReplicaPairs = null as any;
export const getEbsDiskReplicaPairsOutput: typeof import("./getEbsDiskReplicaPairs").getEbsDiskReplicaPairsOutput = null as any;
utilities.lazyLoad(exports, ["getEbsDiskReplicaPairs","getEbsDiskReplicaPairsOutput"], () => require("./getEbsDiskReplicaPairs"));

export { GetEbsRegionsArgs, GetEbsRegionsResult, GetEbsRegionsOutputArgs } from "./getEbsRegions";
export const getEbsRegions: typeof import("./getEbsRegions").getEbsRegions = null as any;
export const getEbsRegionsOutput: typeof import("./getEbsRegions").getEbsRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getEbsRegions","getEbsRegionsOutput"], () => require("./getEbsRegions"));

export { GetEcdAdConnectorDirectoriesArgs, GetEcdAdConnectorDirectoriesResult, GetEcdAdConnectorDirectoriesOutputArgs } from "./getEcdAdConnectorDirectories";
export const getEcdAdConnectorDirectories: typeof import("./getEcdAdConnectorDirectories").getEcdAdConnectorDirectories = null as any;
export const getEcdAdConnectorDirectoriesOutput: typeof import("./getEcdAdConnectorDirectories").getEcdAdConnectorDirectoriesOutput = null as any;
utilities.lazyLoad(exports, ["getEcdAdConnectorDirectories","getEcdAdConnectorDirectoriesOutput"], () => require("./getEcdAdConnectorDirectories"));

export { GetEcdAdConnectorOfficeSitesArgs, GetEcdAdConnectorOfficeSitesResult, GetEcdAdConnectorOfficeSitesOutputArgs } from "./getEcdAdConnectorOfficeSites";
export const getEcdAdConnectorOfficeSites: typeof import("./getEcdAdConnectorOfficeSites").getEcdAdConnectorOfficeSites = null as any;
export const getEcdAdConnectorOfficeSitesOutput: typeof import("./getEcdAdConnectorOfficeSites").getEcdAdConnectorOfficeSitesOutput = null as any;
utilities.lazyLoad(exports, ["getEcdAdConnectorOfficeSites","getEcdAdConnectorOfficeSitesOutput"], () => require("./getEcdAdConnectorOfficeSites"));

export { GetEcdBundlesArgs, GetEcdBundlesResult, GetEcdBundlesOutputArgs } from "./getEcdBundles";
export const getEcdBundles: typeof import("./getEcdBundles").getEcdBundles = null as any;
export const getEcdBundlesOutput: typeof import("./getEcdBundles").getEcdBundlesOutput = null as any;
utilities.lazyLoad(exports, ["getEcdBundles","getEcdBundlesOutput"], () => require("./getEcdBundles"));

export { GetEcdCommandsArgs, GetEcdCommandsResult, GetEcdCommandsOutputArgs } from "./getEcdCommands";
export const getEcdCommands: typeof import("./getEcdCommands").getEcdCommands = null as any;
export const getEcdCommandsOutput: typeof import("./getEcdCommands").getEcdCommandsOutput = null as any;
utilities.lazyLoad(exports, ["getEcdCommands","getEcdCommandsOutput"], () => require("./getEcdCommands"));

export { GetEcdCustomPropertiesArgs, GetEcdCustomPropertiesResult, GetEcdCustomPropertiesOutputArgs } from "./getEcdCustomProperties";
export const getEcdCustomProperties: typeof import("./getEcdCustomProperties").getEcdCustomProperties = null as any;
export const getEcdCustomPropertiesOutput: typeof import("./getEcdCustomProperties").getEcdCustomPropertiesOutput = null as any;
utilities.lazyLoad(exports, ["getEcdCustomProperties","getEcdCustomPropertiesOutput"], () => require("./getEcdCustomProperties"));

export { GetEcdDesktopTypesArgs, GetEcdDesktopTypesResult, GetEcdDesktopTypesOutputArgs } from "./getEcdDesktopTypes";
export const getEcdDesktopTypes: typeof import("./getEcdDesktopTypes").getEcdDesktopTypes = null as any;
export const getEcdDesktopTypesOutput: typeof import("./getEcdDesktopTypes").getEcdDesktopTypesOutput = null as any;
utilities.lazyLoad(exports, ["getEcdDesktopTypes","getEcdDesktopTypesOutput"], () => require("./getEcdDesktopTypes"));

export { GetEcdDesktopsArgs, GetEcdDesktopsResult, GetEcdDesktopsOutputArgs } from "./getEcdDesktops";
export const getEcdDesktops: typeof import("./getEcdDesktops").getEcdDesktops = null as any;
export const getEcdDesktopsOutput: typeof import("./getEcdDesktops").getEcdDesktopsOutput = null as any;
utilities.lazyLoad(exports, ["getEcdDesktops","getEcdDesktopsOutput"], () => require("./getEcdDesktops"));

export { GetEcdImagesArgs, GetEcdImagesResult, GetEcdImagesOutputArgs } from "./getEcdImages";
export const getEcdImages: typeof import("./getEcdImages").getEcdImages = null as any;
export const getEcdImagesOutput: typeof import("./getEcdImages").getEcdImagesOutput = null as any;
utilities.lazyLoad(exports, ["getEcdImages","getEcdImagesOutput"], () => require("./getEcdImages"));

export { GetEcdNasFileSystemsArgs, GetEcdNasFileSystemsResult, GetEcdNasFileSystemsOutputArgs } from "./getEcdNasFileSystems";
export const getEcdNasFileSystems: typeof import("./getEcdNasFileSystems").getEcdNasFileSystems = null as any;
export const getEcdNasFileSystemsOutput: typeof import("./getEcdNasFileSystems").getEcdNasFileSystemsOutput = null as any;
utilities.lazyLoad(exports, ["getEcdNasFileSystems","getEcdNasFileSystemsOutput"], () => require("./getEcdNasFileSystems"));

export { GetEcdNetworkPackagesArgs, GetEcdNetworkPackagesResult, GetEcdNetworkPackagesOutputArgs } from "./getEcdNetworkPackages";
export const getEcdNetworkPackages: typeof import("./getEcdNetworkPackages").getEcdNetworkPackages = null as any;
export const getEcdNetworkPackagesOutput: typeof import("./getEcdNetworkPackages").getEcdNetworkPackagesOutput = null as any;
utilities.lazyLoad(exports, ["getEcdNetworkPackages","getEcdNetworkPackagesOutput"], () => require("./getEcdNetworkPackages"));

export { GetEcdPolicyGroupsArgs, GetEcdPolicyGroupsResult, GetEcdPolicyGroupsOutputArgs } from "./getEcdPolicyGroups";
export const getEcdPolicyGroups: typeof import("./getEcdPolicyGroups").getEcdPolicyGroups = null as any;
export const getEcdPolicyGroupsOutput: typeof import("./getEcdPolicyGroups").getEcdPolicyGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getEcdPolicyGroups","getEcdPolicyGroupsOutput"], () => require("./getEcdPolicyGroups"));

export { GetEcdRamDirectoriesArgs, GetEcdRamDirectoriesResult, GetEcdRamDirectoriesOutputArgs } from "./getEcdRamDirectories";
export const getEcdRamDirectories: typeof import("./getEcdRamDirectories").getEcdRamDirectories = null as any;
export const getEcdRamDirectoriesOutput: typeof import("./getEcdRamDirectories").getEcdRamDirectoriesOutput = null as any;
utilities.lazyLoad(exports, ["getEcdRamDirectories","getEcdRamDirectoriesOutput"], () => require("./getEcdRamDirectories"));

export { GetEcdSimpleOfficeSitesArgs, GetEcdSimpleOfficeSitesResult, GetEcdSimpleOfficeSitesOutputArgs } from "./getEcdSimpleOfficeSites";
export const getEcdSimpleOfficeSites: typeof import("./getEcdSimpleOfficeSites").getEcdSimpleOfficeSites = null as any;
export const getEcdSimpleOfficeSitesOutput: typeof import("./getEcdSimpleOfficeSites").getEcdSimpleOfficeSitesOutput = null as any;
utilities.lazyLoad(exports, ["getEcdSimpleOfficeSites","getEcdSimpleOfficeSitesOutput"], () => require("./getEcdSimpleOfficeSites"));

export { GetEcdSnapshotsArgs, GetEcdSnapshotsResult, GetEcdSnapshotsOutputArgs } from "./getEcdSnapshots";
export const getEcdSnapshots: typeof import("./getEcdSnapshots").getEcdSnapshots = null as any;
export const getEcdSnapshotsOutput: typeof import("./getEcdSnapshots").getEcdSnapshotsOutput = null as any;
utilities.lazyLoad(exports, ["getEcdSnapshots","getEcdSnapshotsOutput"], () => require("./getEcdSnapshots"));

export { GetEcdUsersArgs, GetEcdUsersResult, GetEcdUsersOutputArgs } from "./getEcdUsers";
export const getEcdUsers: typeof import("./getEcdUsers").getEcdUsers = null as any;
export const getEcdUsersOutput: typeof import("./getEcdUsers").getEcdUsersOutput = null as any;
utilities.lazyLoad(exports, ["getEcdUsers","getEcdUsersOutput"], () => require("./getEcdUsers"));

export { GetEcdZonesArgs, GetEcdZonesResult, GetEcdZonesOutputArgs } from "./getEcdZones";
export const getEcdZones: typeof import("./getEcdZones").getEcdZones = null as any;
export const getEcdZonesOutput: typeof import("./getEcdZones").getEcdZonesOutput = null as any;
utilities.lazyLoad(exports, ["getEcdZones","getEcdZonesOutput"], () => require("./getEcdZones"));

export { GetEciContainerGroupsArgs, GetEciContainerGroupsResult, GetEciContainerGroupsOutputArgs } from "./getEciContainerGroups";
export const getEciContainerGroups: typeof import("./getEciContainerGroups").getEciContainerGroups = null as any;
export const getEciContainerGroupsOutput: typeof import("./getEciContainerGroups").getEciContainerGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getEciContainerGroups","getEciContainerGroupsOutput"], () => require("./getEciContainerGroups"));

export { GetEciImageCachesArgs, GetEciImageCachesResult, GetEciImageCachesOutputArgs } from "./getEciImageCaches";
export const getEciImageCaches: typeof import("./getEciImageCaches").getEciImageCaches = null as any;
export const getEciImageCachesOutput: typeof import("./getEciImageCaches").getEciImageCachesOutput = null as any;
utilities.lazyLoad(exports, ["getEciImageCaches","getEciImageCachesOutput"], () => require("./getEciImageCaches"));

export { GetEciVirtualNodesArgs, GetEciVirtualNodesResult, GetEciVirtualNodesOutputArgs } from "./getEciVirtualNodes";
export const getEciVirtualNodes: typeof import("./getEciVirtualNodes").getEciVirtualNodes = null as any;
export const getEciVirtualNodesOutput: typeof import("./getEciVirtualNodes").getEciVirtualNodesOutput = null as any;
utilities.lazyLoad(exports, ["getEciVirtualNodes","getEciVirtualNodesOutput"], () => require("./getEciVirtualNodes"));

export { GetEciZonesArgs, GetEciZonesResult, GetEciZonesOutputArgs } from "./getEciZones";
export const getEciZones: typeof import("./getEciZones").getEciZones = null as any;
export const getEciZonesOutput: typeof import("./getEciZones").getEciZonesOutput = null as any;
utilities.lazyLoad(exports, ["getEciZones","getEciZonesOutput"], () => require("./getEciZones"));

export { GetEcpInstanceTypesArgs, GetEcpInstanceTypesResult, GetEcpInstanceTypesOutputArgs } from "./getEcpInstanceTypes";
export const getEcpInstanceTypes: typeof import("./getEcpInstanceTypes").getEcpInstanceTypes = null as any;
export const getEcpInstanceTypesOutput: typeof import("./getEcpInstanceTypes").getEcpInstanceTypesOutput = null as any;
utilities.lazyLoad(exports, ["getEcpInstanceTypes","getEcpInstanceTypesOutput"], () => require("./getEcpInstanceTypes"));

export { GetEcpInstancesArgs, GetEcpInstancesResult, GetEcpInstancesOutputArgs } from "./getEcpInstances";
export const getEcpInstances: typeof import("./getEcpInstances").getEcpInstances = null as any;
export const getEcpInstancesOutput: typeof import("./getEcpInstances").getEcpInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getEcpInstances","getEcpInstancesOutput"], () => require("./getEcpInstances"));

export { GetEcpKeyPairsArgs, GetEcpKeyPairsResult, GetEcpKeyPairsOutputArgs } from "./getEcpKeyPairs";
export const getEcpKeyPairs: typeof import("./getEcpKeyPairs").getEcpKeyPairs = null as any;
export const getEcpKeyPairsOutput: typeof import("./getEcpKeyPairs").getEcpKeyPairsOutput = null as any;
utilities.lazyLoad(exports, ["getEcpKeyPairs","getEcpKeyPairsOutput"], () => require("./getEcpKeyPairs"));

export { GetEcpZonesArgs, GetEcpZonesResult, GetEcpZonesOutputArgs } from "./getEcpZones";
export const getEcpZones: typeof import("./getEcpZones").getEcpZones = null as any;
export const getEcpZonesOutput: typeof import("./getEcpZones").getEcpZonesOutput = null as any;
utilities.lazyLoad(exports, ["getEcpZones","getEcpZonesOutput"], () => require("./getEcpZones"));

export { GetEcsActivationsArgs, GetEcsActivationsResult, GetEcsActivationsOutputArgs } from "./getEcsActivations";
export const getEcsActivations: typeof import("./getEcsActivations").getEcsActivations = null as any;
export const getEcsActivationsOutput: typeof import("./getEcsActivations").getEcsActivationsOutput = null as any;
utilities.lazyLoad(exports, ["getEcsActivations","getEcsActivationsOutput"], () => require("./getEcsActivations"));

export { GetEcsAutoSnapshotPoliciesArgs, GetEcsAutoSnapshotPoliciesResult, GetEcsAutoSnapshotPoliciesOutputArgs } from "./getEcsAutoSnapshotPolicies";
export const getEcsAutoSnapshotPolicies: typeof import("./getEcsAutoSnapshotPolicies").getEcsAutoSnapshotPolicies = null as any;
export const getEcsAutoSnapshotPoliciesOutput: typeof import("./getEcsAutoSnapshotPolicies").getEcsAutoSnapshotPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getEcsAutoSnapshotPolicies","getEcsAutoSnapshotPoliciesOutput"], () => require("./getEcsAutoSnapshotPolicies"));

export { GetEcsCapacityReservationsArgs, GetEcsCapacityReservationsResult, GetEcsCapacityReservationsOutputArgs } from "./getEcsCapacityReservations";
export const getEcsCapacityReservations: typeof import("./getEcsCapacityReservations").getEcsCapacityReservations = null as any;
export const getEcsCapacityReservationsOutput: typeof import("./getEcsCapacityReservations").getEcsCapacityReservationsOutput = null as any;
utilities.lazyLoad(exports, ["getEcsCapacityReservations","getEcsCapacityReservationsOutput"], () => require("./getEcsCapacityReservations"));

export { GetEcsCommandsArgs, GetEcsCommandsResult, GetEcsCommandsOutputArgs } from "./getEcsCommands";
export const getEcsCommands: typeof import("./getEcsCommands").getEcsCommands = null as any;
export const getEcsCommandsOutput: typeof import("./getEcsCommands").getEcsCommandsOutput = null as any;
utilities.lazyLoad(exports, ["getEcsCommands","getEcsCommandsOutput"], () => require("./getEcsCommands"));

export { GetEcsDedicatedHostClustersArgs, GetEcsDedicatedHostClustersResult, GetEcsDedicatedHostClustersOutputArgs } from "./getEcsDedicatedHostClusters";
export const getEcsDedicatedHostClusters: typeof import("./getEcsDedicatedHostClusters").getEcsDedicatedHostClusters = null as any;
export const getEcsDedicatedHostClustersOutput: typeof import("./getEcsDedicatedHostClusters").getEcsDedicatedHostClustersOutput = null as any;
utilities.lazyLoad(exports, ["getEcsDedicatedHostClusters","getEcsDedicatedHostClustersOutput"], () => require("./getEcsDedicatedHostClusters"));

export { GetEcsDedicatedHostsArgs, GetEcsDedicatedHostsResult, GetEcsDedicatedHostsOutputArgs } from "./getEcsDedicatedHosts";
export const getEcsDedicatedHosts: typeof import("./getEcsDedicatedHosts").getEcsDedicatedHosts = null as any;
export const getEcsDedicatedHostsOutput: typeof import("./getEcsDedicatedHosts").getEcsDedicatedHostsOutput = null as any;
utilities.lazyLoad(exports, ["getEcsDedicatedHosts","getEcsDedicatedHostsOutput"], () => require("./getEcsDedicatedHosts"));

export { GetEcsDeploymentSetsArgs, GetEcsDeploymentSetsResult, GetEcsDeploymentSetsOutputArgs } from "./getEcsDeploymentSets";
export const getEcsDeploymentSets: typeof import("./getEcsDeploymentSets").getEcsDeploymentSets = null as any;
export const getEcsDeploymentSetsOutput: typeof import("./getEcsDeploymentSets").getEcsDeploymentSetsOutput = null as any;
utilities.lazyLoad(exports, ["getEcsDeploymentSets","getEcsDeploymentSetsOutput"], () => require("./getEcsDeploymentSets"));

export { GetEcsDisksArgs, GetEcsDisksResult, GetEcsDisksOutputArgs } from "./getEcsDisks";
export const getEcsDisks: typeof import("./getEcsDisks").getEcsDisks = null as any;
export const getEcsDisksOutput: typeof import("./getEcsDisks").getEcsDisksOutput = null as any;
utilities.lazyLoad(exports, ["getEcsDisks","getEcsDisksOutput"], () => require("./getEcsDisks"));

export { GetEcsElasticityAssurancesArgs, GetEcsElasticityAssurancesResult, GetEcsElasticityAssurancesOutputArgs } from "./getEcsElasticityAssurances";
export const getEcsElasticityAssurances: typeof import("./getEcsElasticityAssurances").getEcsElasticityAssurances = null as any;
export const getEcsElasticityAssurancesOutput: typeof import("./getEcsElasticityAssurances").getEcsElasticityAssurancesOutput = null as any;
utilities.lazyLoad(exports, ["getEcsElasticityAssurances","getEcsElasticityAssurancesOutput"], () => require("./getEcsElasticityAssurances"));

export { GetEcsHpcClustersArgs, GetEcsHpcClustersResult, GetEcsHpcClustersOutputArgs } from "./getEcsHpcClusters";
export const getEcsHpcClusters: typeof import("./getEcsHpcClusters").getEcsHpcClusters = null as any;
export const getEcsHpcClustersOutput: typeof import("./getEcsHpcClusters").getEcsHpcClustersOutput = null as any;
utilities.lazyLoad(exports, ["getEcsHpcClusters","getEcsHpcClustersOutput"], () => require("./getEcsHpcClusters"));

export { GetEcsImageComponentsArgs, GetEcsImageComponentsResult, GetEcsImageComponentsOutputArgs } from "./getEcsImageComponents";
export const getEcsImageComponents: typeof import("./getEcsImageComponents").getEcsImageComponents = null as any;
export const getEcsImageComponentsOutput: typeof import("./getEcsImageComponents").getEcsImageComponentsOutput = null as any;
utilities.lazyLoad(exports, ["getEcsImageComponents","getEcsImageComponentsOutput"], () => require("./getEcsImageComponents"));

export { GetEcsImagePipelinesArgs, GetEcsImagePipelinesResult, GetEcsImagePipelinesOutputArgs } from "./getEcsImagePipelines";
export const getEcsImagePipelines: typeof import("./getEcsImagePipelines").getEcsImagePipelines = null as any;
export const getEcsImagePipelinesOutput: typeof import("./getEcsImagePipelines").getEcsImagePipelinesOutput = null as any;
utilities.lazyLoad(exports, ["getEcsImagePipelines","getEcsImagePipelinesOutput"], () => require("./getEcsImagePipelines"));

export { GetEcsInvocationsArgs, GetEcsInvocationsResult, GetEcsInvocationsOutputArgs } from "./getEcsInvocations";
export const getEcsInvocations: typeof import("./getEcsInvocations").getEcsInvocations = null as any;
export const getEcsInvocationsOutput: typeof import("./getEcsInvocations").getEcsInvocationsOutput = null as any;
utilities.lazyLoad(exports, ["getEcsInvocations","getEcsInvocationsOutput"], () => require("./getEcsInvocations"));

export { GetEcsKeyPairsArgs, GetEcsKeyPairsResult, GetEcsKeyPairsOutputArgs } from "./getEcsKeyPairs";
export const getEcsKeyPairs: typeof import("./getEcsKeyPairs").getEcsKeyPairs = null as any;
export const getEcsKeyPairsOutput: typeof import("./getEcsKeyPairs").getEcsKeyPairsOutput = null as any;
utilities.lazyLoad(exports, ["getEcsKeyPairs","getEcsKeyPairsOutput"], () => require("./getEcsKeyPairs"));

export { GetEcsLaunchTemplatesArgs, GetEcsLaunchTemplatesResult, GetEcsLaunchTemplatesOutputArgs } from "./getEcsLaunchTemplates";
export const getEcsLaunchTemplates: typeof import("./getEcsLaunchTemplates").getEcsLaunchTemplates = null as any;
export const getEcsLaunchTemplatesOutput: typeof import("./getEcsLaunchTemplates").getEcsLaunchTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getEcsLaunchTemplates","getEcsLaunchTemplatesOutput"], () => require("./getEcsLaunchTemplates"));

export { GetEcsNetworkInterfacePermissionsArgs, GetEcsNetworkInterfacePermissionsResult, GetEcsNetworkInterfacePermissionsOutputArgs } from "./getEcsNetworkInterfacePermissions";
export const getEcsNetworkInterfacePermissions: typeof import("./getEcsNetworkInterfacePermissions").getEcsNetworkInterfacePermissions = null as any;
export const getEcsNetworkInterfacePermissionsOutput: typeof import("./getEcsNetworkInterfacePermissions").getEcsNetworkInterfacePermissionsOutput = null as any;
utilities.lazyLoad(exports, ["getEcsNetworkInterfacePermissions","getEcsNetworkInterfacePermissionsOutput"], () => require("./getEcsNetworkInterfacePermissions"));

export { GetEcsNetworkInterfacesArgs, GetEcsNetworkInterfacesResult, GetEcsNetworkInterfacesOutputArgs } from "./getEcsNetworkInterfaces";
export const getEcsNetworkInterfaces: typeof import("./getEcsNetworkInterfaces").getEcsNetworkInterfaces = null as any;
export const getEcsNetworkInterfacesOutput: typeof import("./getEcsNetworkInterfaces").getEcsNetworkInterfacesOutput = null as any;
utilities.lazyLoad(exports, ["getEcsNetworkInterfaces","getEcsNetworkInterfacesOutput"], () => require("./getEcsNetworkInterfaces"));

export { GetEcsPrefixListsArgs, GetEcsPrefixListsResult, GetEcsPrefixListsOutputArgs } from "./getEcsPrefixLists";
export const getEcsPrefixLists: typeof import("./getEcsPrefixLists").getEcsPrefixLists = null as any;
export const getEcsPrefixListsOutput: typeof import("./getEcsPrefixLists").getEcsPrefixListsOutput = null as any;
utilities.lazyLoad(exports, ["getEcsPrefixLists","getEcsPrefixListsOutput"], () => require("./getEcsPrefixLists"));

export { GetEcsSnapshotGroupsArgs, GetEcsSnapshotGroupsResult, GetEcsSnapshotGroupsOutputArgs } from "./getEcsSnapshotGroups";
export const getEcsSnapshotGroups: typeof import("./getEcsSnapshotGroups").getEcsSnapshotGroups = null as any;
export const getEcsSnapshotGroupsOutput: typeof import("./getEcsSnapshotGroups").getEcsSnapshotGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getEcsSnapshotGroups","getEcsSnapshotGroupsOutput"], () => require("./getEcsSnapshotGroups"));

export { GetEcsSnapshotsArgs, GetEcsSnapshotsResult, GetEcsSnapshotsOutputArgs } from "./getEcsSnapshots";
export const getEcsSnapshots: typeof import("./getEcsSnapshots").getEcsSnapshots = null as any;
export const getEcsSnapshotsOutput: typeof import("./getEcsSnapshots").getEcsSnapshotsOutput = null as any;
utilities.lazyLoad(exports, ["getEcsSnapshots","getEcsSnapshotsOutput"], () => require("./getEcsSnapshots"));

export { GetEcsStorageCapacityUnitsArgs, GetEcsStorageCapacityUnitsResult, GetEcsStorageCapacityUnitsOutputArgs } from "./getEcsStorageCapacityUnits";
export const getEcsStorageCapacityUnits: typeof import("./getEcsStorageCapacityUnits").getEcsStorageCapacityUnits = null as any;
export const getEcsStorageCapacityUnitsOutput: typeof import("./getEcsStorageCapacityUnits").getEcsStorageCapacityUnitsOutput = null as any;
utilities.lazyLoad(exports, ["getEcsStorageCapacityUnits","getEcsStorageCapacityUnitsOutput"], () => require("./getEcsStorageCapacityUnits"));

export { GetEdasApplicationsArgs, GetEdasApplicationsResult, GetEdasApplicationsOutputArgs } from "./getEdasApplications";
export const getEdasApplications: typeof import("./getEdasApplications").getEdasApplications = null as any;
export const getEdasApplicationsOutput: typeof import("./getEdasApplications").getEdasApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getEdasApplications","getEdasApplicationsOutput"], () => require("./getEdasApplications"));

export { GetEdasClustersArgs, GetEdasClustersResult, GetEdasClustersOutputArgs } from "./getEdasClusters";
export const getEdasClusters: typeof import("./getEdasClusters").getEdasClusters = null as any;
export const getEdasClustersOutput: typeof import("./getEdasClusters").getEdasClustersOutput = null as any;
utilities.lazyLoad(exports, ["getEdasClusters","getEdasClustersOutput"], () => require("./getEdasClusters"));

export { GetEdasDeployGroupsArgs, GetEdasDeployGroupsResult, GetEdasDeployGroupsOutputArgs } from "./getEdasDeployGroups";
export const getEdasDeployGroups: typeof import("./getEdasDeployGroups").getEdasDeployGroups = null as any;
export const getEdasDeployGroupsOutput: typeof import("./getEdasDeployGroups").getEdasDeployGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getEdasDeployGroups","getEdasDeployGroupsOutput"], () => require("./getEdasDeployGroups"));

export { GetEdasNamespacesArgs, GetEdasNamespacesResult, GetEdasNamespacesOutputArgs } from "./getEdasNamespaces";
export const getEdasNamespaces: typeof import("./getEdasNamespaces").getEdasNamespaces = null as any;
export const getEdasNamespacesOutput: typeof import("./getEdasNamespaces").getEdasNamespacesOutput = null as any;
utilities.lazyLoad(exports, ["getEdasNamespaces","getEdasNamespacesOutput"], () => require("./getEdasNamespaces"));

export { GetEdasServiceArgs, GetEdasServiceResult, GetEdasServiceOutputArgs } from "./getEdasService";
export const getEdasService: typeof import("./getEdasService").getEdasService = null as any;
export const getEdasServiceOutput: typeof import("./getEdasService").getEdasServiceOutput = null as any;
utilities.lazyLoad(exports, ["getEdasService","getEdasServiceOutput"], () => require("./getEdasService"));

export { GetEfloSubnetsArgs, GetEfloSubnetsResult, GetEfloSubnetsOutputArgs } from "./getEfloSubnets";
export const getEfloSubnets: typeof import("./getEfloSubnets").getEfloSubnets = null as any;
export const getEfloSubnetsOutput: typeof import("./getEfloSubnets").getEfloSubnetsOutput = null as any;
utilities.lazyLoad(exports, ["getEfloSubnets","getEfloSubnetsOutput"], () => require("./getEfloSubnets"));

export { GetEfloVpdsArgs, GetEfloVpdsResult, GetEfloVpdsOutputArgs } from "./getEfloVpds";
export const getEfloVpds: typeof import("./getEfloVpds").getEfloVpds = null as any;
export const getEfloVpdsOutput: typeof import("./getEfloVpds").getEfloVpdsOutput = null as any;
utilities.lazyLoad(exports, ["getEfloVpds","getEfloVpdsOutput"], () => require("./getEfloVpds"));

export { GetEhpcClustersArgs, GetEhpcClustersResult, GetEhpcClustersOutputArgs } from "./getEhpcClusters";
export const getEhpcClusters: typeof import("./getEhpcClusters").getEhpcClusters = null as any;
export const getEhpcClustersOutput: typeof import("./getEhpcClusters").getEhpcClustersOutput = null as any;
utilities.lazyLoad(exports, ["getEhpcClusters","getEhpcClustersOutput"], () => require("./getEhpcClusters"));

export { GetEhpcJobTemplatesArgs, GetEhpcJobTemplatesResult, GetEhpcJobTemplatesOutputArgs } from "./getEhpcJobTemplates";
export const getEhpcJobTemplates: typeof import("./getEhpcJobTemplates").getEhpcJobTemplates = null as any;
export const getEhpcJobTemplatesOutput: typeof import("./getEhpcJobTemplates").getEhpcJobTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getEhpcJobTemplates","getEhpcJobTemplatesOutput"], () => require("./getEhpcJobTemplates"));

export { GetEipAddressesArgs, GetEipAddressesResult, GetEipAddressesOutputArgs } from "./getEipAddresses";
export const getEipAddresses: typeof import("./getEipAddresses").getEipAddresses = null as any;
export const getEipAddressesOutput: typeof import("./getEipAddresses").getEipAddressesOutput = null as any;
utilities.lazyLoad(exports, ["getEipAddresses","getEipAddressesOutput"], () => require("./getEipAddresses"));

export { GetEipanycastAnycastEipAddressesArgs, GetEipanycastAnycastEipAddressesResult, GetEipanycastAnycastEipAddressesOutputArgs } from "./getEipanycastAnycastEipAddresses";
export const getEipanycastAnycastEipAddresses: typeof import("./getEipanycastAnycastEipAddresses").getEipanycastAnycastEipAddresses = null as any;
export const getEipanycastAnycastEipAddressesOutput: typeof import("./getEipanycastAnycastEipAddresses").getEipanycastAnycastEipAddressesOutput = null as any;
utilities.lazyLoad(exports, ["getEipanycastAnycastEipAddresses","getEipanycastAnycastEipAddressesOutput"], () => require("./getEipanycastAnycastEipAddresses"));

export { GetEipsArgs, GetEipsResult, GetEipsOutputArgs } from "./getEips";
export const getEips: typeof import("./getEips").getEips = null as any;
export const getEipsOutput: typeof import("./getEips").getEipsOutput = null as any;
utilities.lazyLoad(exports, ["getEips","getEipsOutput"], () => require("./getEips"));

export { GetElasticsearchInstancesArgs, GetElasticsearchInstancesResult, GetElasticsearchInstancesOutputArgs } from "./getElasticsearchInstances";
export const getElasticsearchInstances: typeof import("./getElasticsearchInstances").getElasticsearchInstances = null as any;
export const getElasticsearchInstancesOutput: typeof import("./getElasticsearchInstances").getElasticsearchInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getElasticsearchInstances","getElasticsearchInstancesOutput"], () => require("./getElasticsearchInstances"));

export { GetElasticsearchZonesArgs, GetElasticsearchZonesResult, GetElasticsearchZonesOutputArgs } from "./getElasticsearchZones";
export const getElasticsearchZones: typeof import("./getElasticsearchZones").getElasticsearchZones = null as any;
export const getElasticsearchZonesOutput: typeof import("./getElasticsearchZones").getElasticsearchZonesOutput = null as any;
utilities.lazyLoad(exports, ["getElasticsearchZones","getElasticsearchZonesOutput"], () => require("./getElasticsearchZones"));

export { GetEmrClustersArgs, GetEmrClustersResult, GetEmrClustersOutputArgs } from "./getEmrClusters";
export const getEmrClusters: typeof import("./getEmrClusters").getEmrClusters = null as any;
export const getEmrClustersOutput: typeof import("./getEmrClusters").getEmrClustersOutput = null as any;
utilities.lazyLoad(exports, ["getEmrClusters","getEmrClustersOutput"], () => require("./getEmrClusters"));

export { GetEmrDiskTypesArgs, GetEmrDiskTypesResult, GetEmrDiskTypesOutputArgs } from "./getEmrDiskTypes";
export const getEmrDiskTypes: typeof import("./getEmrDiskTypes").getEmrDiskTypes = null as any;
export const getEmrDiskTypesOutput: typeof import("./getEmrDiskTypes").getEmrDiskTypesOutput = null as any;
utilities.lazyLoad(exports, ["getEmrDiskTypes","getEmrDiskTypesOutput"], () => require("./getEmrDiskTypes"));

export { GetEmrInstanceTypesArgs, GetEmrInstanceTypesResult, GetEmrInstanceTypesOutputArgs } from "./getEmrInstanceTypes";
export const getEmrInstanceTypes: typeof import("./getEmrInstanceTypes").getEmrInstanceTypes = null as any;
export const getEmrInstanceTypesOutput: typeof import("./getEmrInstanceTypes").getEmrInstanceTypesOutput = null as any;
utilities.lazyLoad(exports, ["getEmrInstanceTypes","getEmrInstanceTypesOutput"], () => require("./getEmrInstanceTypes"));

export { GetEmrMainVersionsArgs, GetEmrMainVersionsResult, GetEmrMainVersionsOutputArgs } from "./getEmrMainVersions";
export const getEmrMainVersions: typeof import("./getEmrMainVersions").getEmrMainVersions = null as any;
export const getEmrMainVersionsOutput: typeof import("./getEmrMainVersions").getEmrMainVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getEmrMainVersions","getEmrMainVersionsOutput"], () => require("./getEmrMainVersions"));

export { GetEmrv2ClustersArgs, GetEmrv2ClustersResult, GetEmrv2ClustersOutputArgs } from "./getEmrv2Clusters";
export const getEmrv2Clusters: typeof import("./getEmrv2Clusters").getEmrv2Clusters = null as any;
export const getEmrv2ClustersOutput: typeof import("./getEmrv2Clusters").getEmrv2ClustersOutput = null as any;
utilities.lazyLoad(exports, ["getEmrv2Clusters","getEmrv2ClustersOutput"], () => require("./getEmrv2Clusters"));

export { GetEnhancedNatAvailableZonesArgs, GetEnhancedNatAvailableZonesResult, GetEnhancedNatAvailableZonesOutputArgs } from "./getEnhancedNatAvailableZones";
export const getEnhancedNatAvailableZones: typeof import("./getEnhancedNatAvailableZones").getEnhancedNatAvailableZones = null as any;
export const getEnhancedNatAvailableZonesOutput: typeof import("./getEnhancedNatAvailableZones").getEnhancedNatAvailableZonesOutput = null as any;
utilities.lazyLoad(exports, ["getEnhancedNatAvailableZones","getEnhancedNatAvailableZonesOutput"], () => require("./getEnhancedNatAvailableZones"));

export { GetEnsKeyPairsArgs, GetEnsKeyPairsResult, GetEnsKeyPairsOutputArgs } from "./getEnsKeyPairs";
export const getEnsKeyPairs: typeof import("./getEnsKeyPairs").getEnsKeyPairs = null as any;
export const getEnsKeyPairsOutput: typeof import("./getEnsKeyPairs").getEnsKeyPairsOutput = null as any;
utilities.lazyLoad(exports, ["getEnsKeyPairs","getEnsKeyPairsOutput"], () => require("./getEnsKeyPairs"));

export { GetEssAlarmsArgs, GetEssAlarmsResult, GetEssAlarmsOutputArgs } from "./getEssAlarms";
export const getEssAlarms: typeof import("./getEssAlarms").getEssAlarms = null as any;
export const getEssAlarmsOutput: typeof import("./getEssAlarms").getEssAlarmsOutput = null as any;
utilities.lazyLoad(exports, ["getEssAlarms","getEssAlarmsOutput"], () => require("./getEssAlarms"));

export { GetEssLifecycleHooksArgs, GetEssLifecycleHooksResult, GetEssLifecycleHooksOutputArgs } from "./getEssLifecycleHooks";
export const getEssLifecycleHooks: typeof import("./getEssLifecycleHooks").getEssLifecycleHooks = null as any;
export const getEssLifecycleHooksOutput: typeof import("./getEssLifecycleHooks").getEssLifecycleHooksOutput = null as any;
utilities.lazyLoad(exports, ["getEssLifecycleHooks","getEssLifecycleHooksOutput"], () => require("./getEssLifecycleHooks"));

export { GetEssNotificationsArgs, GetEssNotificationsResult, GetEssNotificationsOutputArgs } from "./getEssNotifications";
export const getEssNotifications: typeof import("./getEssNotifications").getEssNotifications = null as any;
export const getEssNotificationsOutput: typeof import("./getEssNotifications").getEssNotificationsOutput = null as any;
utilities.lazyLoad(exports, ["getEssNotifications","getEssNotificationsOutput"], () => require("./getEssNotifications"));

export { GetEssScalingConfigurationsArgs, GetEssScalingConfigurationsResult, GetEssScalingConfigurationsOutputArgs } from "./getEssScalingConfigurations";
export const getEssScalingConfigurations: typeof import("./getEssScalingConfigurations").getEssScalingConfigurations = null as any;
export const getEssScalingConfigurationsOutput: typeof import("./getEssScalingConfigurations").getEssScalingConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getEssScalingConfigurations","getEssScalingConfigurationsOutput"], () => require("./getEssScalingConfigurations"));

export { GetEssScalingGroupsArgs, GetEssScalingGroupsResult, GetEssScalingGroupsOutputArgs } from "./getEssScalingGroups";
export const getEssScalingGroups: typeof import("./getEssScalingGroups").getEssScalingGroups = null as any;
export const getEssScalingGroupsOutput: typeof import("./getEssScalingGroups").getEssScalingGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getEssScalingGroups","getEssScalingGroupsOutput"], () => require("./getEssScalingGroups"));

export { GetEssScalingRulesArgs, GetEssScalingRulesResult, GetEssScalingRulesOutputArgs } from "./getEssScalingRules";
export const getEssScalingRules: typeof import("./getEssScalingRules").getEssScalingRules = null as any;
export const getEssScalingRulesOutput: typeof import("./getEssScalingRules").getEssScalingRulesOutput = null as any;
utilities.lazyLoad(exports, ["getEssScalingRules","getEssScalingRulesOutput"], () => require("./getEssScalingRules"));

export { GetEssScheduledTasksArgs, GetEssScheduledTasksResult, GetEssScheduledTasksOutputArgs } from "./getEssScheduledTasks";
export const getEssScheduledTasks: typeof import("./getEssScheduledTasks").getEssScheduledTasks = null as any;
export const getEssScheduledTasksOutput: typeof import("./getEssScheduledTasks").getEssScheduledTasksOutput = null as any;
utilities.lazyLoad(exports, ["getEssScheduledTasks","getEssScheduledTasksOutput"], () => require("./getEssScheduledTasks"));

export { GetEventBridgeEventBusesArgs, GetEventBridgeEventBusesResult, GetEventBridgeEventBusesOutputArgs } from "./getEventBridgeEventBuses";
export const getEventBridgeEventBuses: typeof import("./getEventBridgeEventBuses").getEventBridgeEventBuses = null as any;
export const getEventBridgeEventBusesOutput: typeof import("./getEventBridgeEventBuses").getEventBridgeEventBusesOutput = null as any;
utilities.lazyLoad(exports, ["getEventBridgeEventBuses","getEventBridgeEventBusesOutput"], () => require("./getEventBridgeEventBuses"));

export { GetEventBridgeEventSourcesArgs, GetEventBridgeEventSourcesResult, GetEventBridgeEventSourcesOutputArgs } from "./getEventBridgeEventSources";
export const getEventBridgeEventSources: typeof import("./getEventBridgeEventSources").getEventBridgeEventSources = null as any;
export const getEventBridgeEventSourcesOutput: typeof import("./getEventBridgeEventSources").getEventBridgeEventSourcesOutput = null as any;
utilities.lazyLoad(exports, ["getEventBridgeEventSources","getEventBridgeEventSourcesOutput"], () => require("./getEventBridgeEventSources"));

export { GetEventBridgeRulesArgs, GetEventBridgeRulesResult, GetEventBridgeRulesOutputArgs } from "./getEventBridgeRules";
export const getEventBridgeRules: typeof import("./getEventBridgeRules").getEventBridgeRules = null as any;
export const getEventBridgeRulesOutput: typeof import("./getEventBridgeRules").getEventBridgeRulesOutput = null as any;
utilities.lazyLoad(exports, ["getEventBridgeRules","getEventBridgeRulesOutput"], () => require("./getEventBridgeRules"));

export { GetEventBridgeServiceArgs, GetEventBridgeServiceResult, GetEventBridgeServiceOutputArgs } from "./getEventBridgeService";
export const getEventBridgeService: typeof import("./getEventBridgeService").getEventBridgeService = null as any;
export const getEventBridgeServiceOutput: typeof import("./getEventBridgeService").getEventBridgeServiceOutput = null as any;
utilities.lazyLoad(exports, ["getEventBridgeService","getEventBridgeServiceOutput"], () => require("./getEventBridgeService"));

export { GetExpressConnectAccessPointsArgs, GetExpressConnectAccessPointsResult, GetExpressConnectAccessPointsOutputArgs } from "./getExpressConnectAccessPoints";
export const getExpressConnectAccessPoints: typeof import("./getExpressConnectAccessPoints").getExpressConnectAccessPoints = null as any;
export const getExpressConnectAccessPointsOutput: typeof import("./getExpressConnectAccessPoints").getExpressConnectAccessPointsOutput = null as any;
utilities.lazyLoad(exports, ["getExpressConnectAccessPoints","getExpressConnectAccessPointsOutput"], () => require("./getExpressConnectAccessPoints"));

export { GetExpressConnectGrantRuleToCensArgs, GetExpressConnectGrantRuleToCensResult, GetExpressConnectGrantRuleToCensOutputArgs } from "./getExpressConnectGrantRuleToCens";
export const getExpressConnectGrantRuleToCens: typeof import("./getExpressConnectGrantRuleToCens").getExpressConnectGrantRuleToCens = null as any;
export const getExpressConnectGrantRuleToCensOutput: typeof import("./getExpressConnectGrantRuleToCens").getExpressConnectGrantRuleToCensOutput = null as any;
utilities.lazyLoad(exports, ["getExpressConnectGrantRuleToCens","getExpressConnectGrantRuleToCensOutput"], () => require("./getExpressConnectGrantRuleToCens"));

export { GetExpressConnectPhysicalConnectionServiceArgs, GetExpressConnectPhysicalConnectionServiceResult, GetExpressConnectPhysicalConnectionServiceOutputArgs } from "./getExpressConnectPhysicalConnectionService";
export const getExpressConnectPhysicalConnectionService: typeof import("./getExpressConnectPhysicalConnectionService").getExpressConnectPhysicalConnectionService = null as any;
export const getExpressConnectPhysicalConnectionServiceOutput: typeof import("./getExpressConnectPhysicalConnectionService").getExpressConnectPhysicalConnectionServiceOutput = null as any;
utilities.lazyLoad(exports, ["getExpressConnectPhysicalConnectionService","getExpressConnectPhysicalConnectionServiceOutput"], () => require("./getExpressConnectPhysicalConnectionService"));

export { GetExpressConnectPhysicalConnectionsArgs, GetExpressConnectPhysicalConnectionsResult, GetExpressConnectPhysicalConnectionsOutputArgs } from "./getExpressConnectPhysicalConnections";
export const getExpressConnectPhysicalConnections: typeof import("./getExpressConnectPhysicalConnections").getExpressConnectPhysicalConnections = null as any;
export const getExpressConnectPhysicalConnectionsOutput: typeof import("./getExpressConnectPhysicalConnections").getExpressConnectPhysicalConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getExpressConnectPhysicalConnections","getExpressConnectPhysicalConnectionsOutput"], () => require("./getExpressConnectPhysicalConnections"));

export { GetExpressConnectRouterInterfacesArgs, GetExpressConnectRouterInterfacesResult, GetExpressConnectRouterInterfacesOutputArgs } from "./getExpressConnectRouterInterfaces";
export const getExpressConnectRouterInterfaces: typeof import("./getExpressConnectRouterInterfaces").getExpressConnectRouterInterfaces = null as any;
export const getExpressConnectRouterInterfacesOutput: typeof import("./getExpressConnectRouterInterfaces").getExpressConnectRouterInterfacesOutput = null as any;
utilities.lazyLoad(exports, ["getExpressConnectRouterInterfaces","getExpressConnectRouterInterfacesOutput"], () => require("./getExpressConnectRouterInterfaces"));

export { GetExpressConnectVbrPconnAssociationsArgs, GetExpressConnectVbrPconnAssociationsResult, GetExpressConnectVbrPconnAssociationsOutputArgs } from "./getExpressConnectVbrPconnAssociations";
export const getExpressConnectVbrPconnAssociations: typeof import("./getExpressConnectVbrPconnAssociations").getExpressConnectVbrPconnAssociations = null as any;
export const getExpressConnectVbrPconnAssociationsOutput: typeof import("./getExpressConnectVbrPconnAssociations").getExpressConnectVbrPconnAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getExpressConnectVbrPconnAssociations","getExpressConnectVbrPconnAssociationsOutput"], () => require("./getExpressConnectVbrPconnAssociations"));

export { GetExpressConnectVirtualBorderRoutersArgs, GetExpressConnectVirtualBorderRoutersResult, GetExpressConnectVirtualBorderRoutersOutputArgs } from "./getExpressConnectVirtualBorderRouters";
export const getExpressConnectVirtualBorderRouters: typeof import("./getExpressConnectVirtualBorderRouters").getExpressConnectVirtualBorderRouters = null as any;
export const getExpressConnectVirtualBorderRoutersOutput: typeof import("./getExpressConnectVirtualBorderRouters").getExpressConnectVirtualBorderRoutersOutput = null as any;
utilities.lazyLoad(exports, ["getExpressConnectVirtualBorderRouters","getExpressConnectVirtualBorderRoutersOutput"], () => require("./getExpressConnectVirtualBorderRouters"));

export { GetExpressConnectVirtualPhysicalConnectionsArgs, GetExpressConnectVirtualPhysicalConnectionsResult, GetExpressConnectVirtualPhysicalConnectionsOutputArgs } from "./getExpressConnectVirtualPhysicalConnections";
export const getExpressConnectVirtualPhysicalConnections: typeof import("./getExpressConnectVirtualPhysicalConnections").getExpressConnectVirtualPhysicalConnections = null as any;
export const getExpressConnectVirtualPhysicalConnectionsOutput: typeof import("./getExpressConnectVirtualPhysicalConnections").getExpressConnectVirtualPhysicalConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getExpressConnectVirtualPhysicalConnections","getExpressConnectVirtualPhysicalConnectionsOutput"], () => require("./getExpressConnectVirtualPhysicalConnections"));

export { GetFcCustomDomainsArgs, GetFcCustomDomainsResult, GetFcCustomDomainsOutputArgs } from "./getFcCustomDomains";
export const getFcCustomDomains: typeof import("./getFcCustomDomains").getFcCustomDomains = null as any;
export const getFcCustomDomainsOutput: typeof import("./getFcCustomDomains").getFcCustomDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getFcCustomDomains","getFcCustomDomainsOutput"], () => require("./getFcCustomDomains"));

export { GetFcFunctionsArgs, GetFcFunctionsResult, GetFcFunctionsOutputArgs } from "./getFcFunctions";
export const getFcFunctions: typeof import("./getFcFunctions").getFcFunctions = null as any;
export const getFcFunctionsOutput: typeof import("./getFcFunctions").getFcFunctionsOutput = null as any;
utilities.lazyLoad(exports, ["getFcFunctions","getFcFunctionsOutput"], () => require("./getFcFunctions"));

export { GetFcServiceArgs, GetFcServiceResult, GetFcServiceOutputArgs } from "./getFcService";
export const getFcService: typeof import("./getFcService").getFcService = null as any;
export const getFcServiceOutput: typeof import("./getFcService").getFcServiceOutput = null as any;
utilities.lazyLoad(exports, ["getFcService","getFcServiceOutput"], () => require("./getFcService"));

export { GetFcServicesArgs, GetFcServicesResult, GetFcServicesOutputArgs } from "./getFcServices";
export const getFcServices: typeof import("./getFcServices").getFcServices = null as any;
export const getFcServicesOutput: typeof import("./getFcServices").getFcServicesOutput = null as any;
utilities.lazyLoad(exports, ["getFcServices","getFcServicesOutput"], () => require("./getFcServices"));

export { GetFcTriggersArgs, GetFcTriggersResult, GetFcTriggersOutputArgs } from "./getFcTriggers";
export const getFcTriggers: typeof import("./getFcTriggers").getFcTriggers = null as any;
export const getFcTriggersOutput: typeof import("./getFcTriggers").getFcTriggersOutput = null as any;
utilities.lazyLoad(exports, ["getFcTriggers","getFcTriggersOutput"], () => require("./getFcTriggers"));

export { GetFcZonesArgs, GetFcZonesResult, GetFcZonesOutputArgs } from "./getFcZones";
export const getFcZones: typeof import("./getFcZones").getFcZones = null as any;
export const getFcZonesOutput: typeof import("./getFcZones").getFcZonesOutput = null as any;
utilities.lazyLoad(exports, ["getFcZones","getFcZonesOutput"], () => require("./getFcZones"));

export { GetFileCrc64ChecksumArgs, GetFileCrc64ChecksumResult, GetFileCrc64ChecksumOutputArgs } from "./getFileCrc64Checksum";
export const getFileCrc64Checksum: typeof import("./getFileCrc64Checksum").getFileCrc64Checksum = null as any;
export const getFileCrc64ChecksumOutput: typeof import("./getFileCrc64Checksum").getFileCrc64ChecksumOutput = null as any;
utilities.lazyLoad(exports, ["getFileCrc64Checksum","getFileCrc64ChecksumOutput"], () => require("./getFileCrc64Checksum"));

export { GetFnfExecutionsArgs, GetFnfExecutionsResult, GetFnfExecutionsOutputArgs } from "./getFnfExecutions";
export const getFnfExecutions: typeof import("./getFnfExecutions").getFnfExecutions = null as any;
export const getFnfExecutionsOutput: typeof import("./getFnfExecutions").getFnfExecutionsOutput = null as any;
utilities.lazyLoad(exports, ["getFnfExecutions","getFnfExecutionsOutput"], () => require("./getFnfExecutions"));

export { GetFnfFlowsArgs, GetFnfFlowsResult, GetFnfFlowsOutputArgs } from "./getFnfFlows";
export const getFnfFlows: typeof import("./getFnfFlows").getFnfFlows = null as any;
export const getFnfFlowsOutput: typeof import("./getFnfFlows").getFnfFlowsOutput = null as any;
utilities.lazyLoad(exports, ["getFnfFlows","getFnfFlowsOutput"], () => require("./getFnfFlows"));

export { GetFnfSchedulesArgs, GetFnfSchedulesResult, GetFnfSchedulesOutputArgs } from "./getFnfSchedules";
export const getFnfSchedules: typeof import("./getFnfSchedules").getFnfSchedules = null as any;
export const getFnfSchedulesOutput: typeof import("./getFnfSchedules").getFnfSchedulesOutput = null as any;
utilities.lazyLoad(exports, ["getFnfSchedules","getFnfSchedulesOutput"], () => require("./getFnfSchedules"));

export { GetFnfServiceArgs, GetFnfServiceResult, GetFnfServiceOutputArgs } from "./getFnfService";
export const getFnfService: typeof import("./getFnfService").getFnfService = null as any;
export const getFnfServiceOutput: typeof import("./getFnfService").getFnfServiceOutput = null as any;
utilities.lazyLoad(exports, ["getFnfService","getFnfServiceOutput"], () => require("./getFnfService"));

export { GetForwardEntriesArgs, GetForwardEntriesResult, GetForwardEntriesOutputArgs } from "./getForwardEntries";
export const getForwardEntries: typeof import("./getForwardEntries").getForwardEntries = null as any;
export const getForwardEntriesOutput: typeof import("./getForwardEntries").getForwardEntriesOutput = null as any;
utilities.lazyLoad(exports, ["getForwardEntries","getForwardEntriesOutput"], () => require("./getForwardEntries"));

export { GetGaAcceleratorSpareIpAttachmentsArgs, GetGaAcceleratorSpareIpAttachmentsResult, GetGaAcceleratorSpareIpAttachmentsOutputArgs } from "./getGaAcceleratorSpareIpAttachments";
export const getGaAcceleratorSpareIpAttachments: typeof import("./getGaAcceleratorSpareIpAttachments").getGaAcceleratorSpareIpAttachments = null as any;
export const getGaAcceleratorSpareIpAttachmentsOutput: typeof import("./getGaAcceleratorSpareIpAttachments").getGaAcceleratorSpareIpAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getGaAcceleratorSpareIpAttachments","getGaAcceleratorSpareIpAttachmentsOutput"], () => require("./getGaAcceleratorSpareIpAttachments"));

export { GetGaAcceleratorsArgs, GetGaAcceleratorsResult, GetGaAcceleratorsOutputArgs } from "./getGaAccelerators";
export const getGaAccelerators: typeof import("./getGaAccelerators").getGaAccelerators = null as any;
export const getGaAcceleratorsOutput: typeof import("./getGaAccelerators").getGaAcceleratorsOutput = null as any;
utilities.lazyLoad(exports, ["getGaAccelerators","getGaAcceleratorsOutput"], () => require("./getGaAccelerators"));

export { GetGaAclsArgs, GetGaAclsResult, GetGaAclsOutputArgs } from "./getGaAcls";
export const getGaAcls: typeof import("./getGaAcls").getGaAcls = null as any;
export const getGaAclsOutput: typeof import("./getGaAcls").getGaAclsOutput = null as any;
utilities.lazyLoad(exports, ["getGaAcls","getGaAclsOutput"], () => require("./getGaAcls"));

export { GetGaAdditionalCertificatesArgs, GetGaAdditionalCertificatesResult, GetGaAdditionalCertificatesOutputArgs } from "./getGaAdditionalCertificates";
export const getGaAdditionalCertificates: typeof import("./getGaAdditionalCertificates").getGaAdditionalCertificates = null as any;
export const getGaAdditionalCertificatesOutput: typeof import("./getGaAdditionalCertificates").getGaAdditionalCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getGaAdditionalCertificates","getGaAdditionalCertificatesOutput"], () => require("./getGaAdditionalCertificates"));

export { GetGaBandwidthPackagesArgs, GetGaBandwidthPackagesResult, GetGaBandwidthPackagesOutputArgs } from "./getGaBandwidthPackages";
export const getGaBandwidthPackages: typeof import("./getGaBandwidthPackages").getGaBandwidthPackages = null as any;
export const getGaBandwidthPackagesOutput: typeof import("./getGaBandwidthPackages").getGaBandwidthPackagesOutput = null as any;
utilities.lazyLoad(exports, ["getGaBandwidthPackages","getGaBandwidthPackagesOutput"], () => require("./getGaBandwidthPackages"));

export { GetGaBasicAccelerateIpEndpointRelationsArgs, GetGaBasicAccelerateIpEndpointRelationsResult, GetGaBasicAccelerateIpEndpointRelationsOutputArgs } from "./getGaBasicAccelerateIpEndpointRelations";
export const getGaBasicAccelerateIpEndpointRelations: typeof import("./getGaBasicAccelerateIpEndpointRelations").getGaBasicAccelerateIpEndpointRelations = null as any;
export const getGaBasicAccelerateIpEndpointRelationsOutput: typeof import("./getGaBasicAccelerateIpEndpointRelations").getGaBasicAccelerateIpEndpointRelationsOutput = null as any;
utilities.lazyLoad(exports, ["getGaBasicAccelerateIpEndpointRelations","getGaBasicAccelerateIpEndpointRelationsOutput"], () => require("./getGaBasicAccelerateIpEndpointRelations"));

export { GetGaBasicAccelerateIpsArgs, GetGaBasicAccelerateIpsResult, GetGaBasicAccelerateIpsOutputArgs } from "./getGaBasicAccelerateIps";
export const getGaBasicAccelerateIps: typeof import("./getGaBasicAccelerateIps").getGaBasicAccelerateIps = null as any;
export const getGaBasicAccelerateIpsOutput: typeof import("./getGaBasicAccelerateIps").getGaBasicAccelerateIpsOutput = null as any;
utilities.lazyLoad(exports, ["getGaBasicAccelerateIps","getGaBasicAccelerateIpsOutput"], () => require("./getGaBasicAccelerateIps"));

export { GetGaBasicAcceleratorsArgs, GetGaBasicAcceleratorsResult, GetGaBasicAcceleratorsOutputArgs } from "./getGaBasicAccelerators";
export const getGaBasicAccelerators: typeof import("./getGaBasicAccelerators").getGaBasicAccelerators = null as any;
export const getGaBasicAcceleratorsOutput: typeof import("./getGaBasicAccelerators").getGaBasicAcceleratorsOutput = null as any;
utilities.lazyLoad(exports, ["getGaBasicAccelerators","getGaBasicAcceleratorsOutput"], () => require("./getGaBasicAccelerators"));

export { GetGaBasicEndpointsArgs, GetGaBasicEndpointsResult, GetGaBasicEndpointsOutputArgs } from "./getGaBasicEndpoints";
export const getGaBasicEndpoints: typeof import("./getGaBasicEndpoints").getGaBasicEndpoints = null as any;
export const getGaBasicEndpointsOutput: typeof import("./getGaBasicEndpoints").getGaBasicEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getGaBasicEndpoints","getGaBasicEndpointsOutput"], () => require("./getGaBasicEndpoints"));

export { GetGaCustomRoutingEndpointGroupDestinationsArgs, GetGaCustomRoutingEndpointGroupDestinationsResult, GetGaCustomRoutingEndpointGroupDestinationsOutputArgs } from "./getGaCustomRoutingEndpointGroupDestinations";
export const getGaCustomRoutingEndpointGroupDestinations: typeof import("./getGaCustomRoutingEndpointGroupDestinations").getGaCustomRoutingEndpointGroupDestinations = null as any;
export const getGaCustomRoutingEndpointGroupDestinationsOutput: typeof import("./getGaCustomRoutingEndpointGroupDestinations").getGaCustomRoutingEndpointGroupDestinationsOutput = null as any;
utilities.lazyLoad(exports, ["getGaCustomRoutingEndpointGroupDestinations","getGaCustomRoutingEndpointGroupDestinationsOutput"], () => require("./getGaCustomRoutingEndpointGroupDestinations"));

export { GetGaCustomRoutingEndpointGroupsArgs, GetGaCustomRoutingEndpointGroupsResult, GetGaCustomRoutingEndpointGroupsOutputArgs } from "./getGaCustomRoutingEndpointGroups";
export const getGaCustomRoutingEndpointGroups: typeof import("./getGaCustomRoutingEndpointGroups").getGaCustomRoutingEndpointGroups = null as any;
export const getGaCustomRoutingEndpointGroupsOutput: typeof import("./getGaCustomRoutingEndpointGroups").getGaCustomRoutingEndpointGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGaCustomRoutingEndpointGroups","getGaCustomRoutingEndpointGroupsOutput"], () => require("./getGaCustomRoutingEndpointGroups"));

export { GetGaCustomRoutingEndpointTrafficPoliciesArgs, GetGaCustomRoutingEndpointTrafficPoliciesResult, GetGaCustomRoutingEndpointTrafficPoliciesOutputArgs } from "./getGaCustomRoutingEndpointTrafficPolicies";
export const getGaCustomRoutingEndpointTrafficPolicies: typeof import("./getGaCustomRoutingEndpointTrafficPolicies").getGaCustomRoutingEndpointTrafficPolicies = null as any;
export const getGaCustomRoutingEndpointTrafficPoliciesOutput: typeof import("./getGaCustomRoutingEndpointTrafficPolicies").getGaCustomRoutingEndpointTrafficPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getGaCustomRoutingEndpointTrafficPolicies","getGaCustomRoutingEndpointTrafficPoliciesOutput"], () => require("./getGaCustomRoutingEndpointTrafficPolicies"));

export { GetGaCustomRoutingEndpointsArgs, GetGaCustomRoutingEndpointsResult, GetGaCustomRoutingEndpointsOutputArgs } from "./getGaCustomRoutingEndpoints";
export const getGaCustomRoutingEndpoints: typeof import("./getGaCustomRoutingEndpoints").getGaCustomRoutingEndpoints = null as any;
export const getGaCustomRoutingEndpointsOutput: typeof import("./getGaCustomRoutingEndpoints").getGaCustomRoutingEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getGaCustomRoutingEndpoints","getGaCustomRoutingEndpointsOutput"], () => require("./getGaCustomRoutingEndpoints"));

export { GetGaCustomRoutingPortMappingsArgs, GetGaCustomRoutingPortMappingsResult, GetGaCustomRoutingPortMappingsOutputArgs } from "./getGaCustomRoutingPortMappings";
export const getGaCustomRoutingPortMappings: typeof import("./getGaCustomRoutingPortMappings").getGaCustomRoutingPortMappings = null as any;
export const getGaCustomRoutingPortMappingsOutput: typeof import("./getGaCustomRoutingPortMappings").getGaCustomRoutingPortMappingsOutput = null as any;
utilities.lazyLoad(exports, ["getGaCustomRoutingPortMappings","getGaCustomRoutingPortMappingsOutput"], () => require("./getGaCustomRoutingPortMappings"));

export { GetGaDomainsArgs, GetGaDomainsResult, GetGaDomainsOutputArgs } from "./getGaDomains";
export const getGaDomains: typeof import("./getGaDomains").getGaDomains = null as any;
export const getGaDomainsOutput: typeof import("./getGaDomains").getGaDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getGaDomains","getGaDomainsOutput"], () => require("./getGaDomains"));

export { GetGaEndpointGroupIpAddressCidrBlocksArgs, GetGaEndpointGroupIpAddressCidrBlocksResult, GetGaEndpointGroupIpAddressCidrBlocksOutputArgs } from "./getGaEndpointGroupIpAddressCidrBlocks";
export const getGaEndpointGroupIpAddressCidrBlocks: typeof import("./getGaEndpointGroupIpAddressCidrBlocks").getGaEndpointGroupIpAddressCidrBlocks = null as any;
export const getGaEndpointGroupIpAddressCidrBlocksOutput: typeof import("./getGaEndpointGroupIpAddressCidrBlocks").getGaEndpointGroupIpAddressCidrBlocksOutput = null as any;
utilities.lazyLoad(exports, ["getGaEndpointGroupIpAddressCidrBlocks","getGaEndpointGroupIpAddressCidrBlocksOutput"], () => require("./getGaEndpointGroupIpAddressCidrBlocks"));

export { GetGaEndpointGroupsArgs, GetGaEndpointGroupsResult, GetGaEndpointGroupsOutputArgs } from "./getGaEndpointGroups";
export const getGaEndpointGroups: typeof import("./getGaEndpointGroups").getGaEndpointGroups = null as any;
export const getGaEndpointGroupsOutput: typeof import("./getGaEndpointGroups").getGaEndpointGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGaEndpointGroups","getGaEndpointGroupsOutput"], () => require("./getGaEndpointGroups"));

export { GetGaForwardingRulesArgs, GetGaForwardingRulesResult, GetGaForwardingRulesOutputArgs } from "./getGaForwardingRules";
export const getGaForwardingRules: typeof import("./getGaForwardingRules").getGaForwardingRules = null as any;
export const getGaForwardingRulesOutput: typeof import("./getGaForwardingRules").getGaForwardingRulesOutput = null as any;
utilities.lazyLoad(exports, ["getGaForwardingRules","getGaForwardingRulesOutput"], () => require("./getGaForwardingRules"));

export { GetGaIpSetsArgs, GetGaIpSetsResult, GetGaIpSetsOutputArgs } from "./getGaIpSets";
export const getGaIpSets: typeof import("./getGaIpSets").getGaIpSets = null as any;
export const getGaIpSetsOutput: typeof import("./getGaIpSets").getGaIpSetsOutput = null as any;
utilities.lazyLoad(exports, ["getGaIpSets","getGaIpSetsOutput"], () => require("./getGaIpSets"));

export { GetGaListenersArgs, GetGaListenersResult, GetGaListenersOutputArgs } from "./getGaListeners";
export const getGaListeners: typeof import("./getGaListeners").getGaListeners = null as any;
export const getGaListenersOutput: typeof import("./getGaListeners").getGaListenersOutput = null as any;
utilities.lazyLoad(exports, ["getGaListeners","getGaListenersOutput"], () => require("./getGaListeners"));

export { GetGovernanceBaselinesArgs, GetGovernanceBaselinesResult, GetGovernanceBaselinesOutputArgs } from "./getGovernanceBaselines";
export const getGovernanceBaselines: typeof import("./getGovernanceBaselines").getGovernanceBaselines = null as any;
export const getGovernanceBaselinesOutput: typeof import("./getGovernanceBaselines").getGovernanceBaselinesOutput = null as any;
utilities.lazyLoad(exports, ["getGovernanceBaselines","getGovernanceBaselinesOutput"], () => require("./getGovernanceBaselines"));

export { GetGpdbAccountsArgs, GetGpdbAccountsResult, GetGpdbAccountsOutputArgs } from "./getGpdbAccounts";
export const getGpdbAccounts: typeof import("./getGpdbAccounts").getGpdbAccounts = null as any;
export const getGpdbAccountsOutput: typeof import("./getGpdbAccounts").getGpdbAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getGpdbAccounts","getGpdbAccountsOutput"], () => require("./getGpdbAccounts"));

export { GetGpdbDbInstancePlansArgs, GetGpdbDbInstancePlansResult, GetGpdbDbInstancePlansOutputArgs } from "./getGpdbDbInstancePlans";
export const getGpdbDbInstancePlans: typeof import("./getGpdbDbInstancePlans").getGpdbDbInstancePlans = null as any;
export const getGpdbDbInstancePlansOutput: typeof import("./getGpdbDbInstancePlans").getGpdbDbInstancePlansOutput = null as any;
utilities.lazyLoad(exports, ["getGpdbDbInstancePlans","getGpdbDbInstancePlansOutput"], () => require("./getGpdbDbInstancePlans"));

export { GetGpdbInstancesArgs, GetGpdbInstancesResult, GetGpdbInstancesOutputArgs } from "./getGpdbInstances";
export const getGpdbInstances: typeof import("./getGpdbInstances").getGpdbInstances = null as any;
export const getGpdbInstancesOutput: typeof import("./getGpdbInstances").getGpdbInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getGpdbInstances","getGpdbInstancesOutput"], () => require("./getGpdbInstances"));

export { GetGpdbZonesArgs, GetGpdbZonesResult, GetGpdbZonesOutputArgs } from "./getGpdbZones";
export const getGpdbZones: typeof import("./getGpdbZones").getGpdbZones = null as any;
export const getGpdbZonesOutput: typeof import("./getGpdbZones").getGpdbZonesOutput = null as any;
utilities.lazyLoad(exports, ["getGpdbZones","getGpdbZonesOutput"], () => require("./getGpdbZones"));

export { GetGraphDatabaseDbInstancesArgs, GetGraphDatabaseDbInstancesResult, GetGraphDatabaseDbInstancesOutputArgs } from "./getGraphDatabaseDbInstances";
export const getGraphDatabaseDbInstances: typeof import("./getGraphDatabaseDbInstances").getGraphDatabaseDbInstances = null as any;
export const getGraphDatabaseDbInstancesOutput: typeof import("./getGraphDatabaseDbInstances").getGraphDatabaseDbInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getGraphDatabaseDbInstances","getGraphDatabaseDbInstancesOutput"], () => require("./getGraphDatabaseDbInstances"));

export { GetHavipsArgs, GetHavipsResult, GetHavipsOutputArgs } from "./getHavips";
export const getHavips: typeof import("./getHavips").getHavips = null as any;
export const getHavipsOutput: typeof import("./getHavips").getHavipsOutput = null as any;
utilities.lazyLoad(exports, ["getHavips","getHavipsOutput"], () => require("./getHavips"));

export { GetHbaseInstanceTypesArgs, GetHbaseInstanceTypesResult, GetHbaseInstanceTypesOutputArgs } from "./getHbaseInstanceTypes";
export const getHbaseInstanceTypes: typeof import("./getHbaseInstanceTypes").getHbaseInstanceTypes = null as any;
export const getHbaseInstanceTypesOutput: typeof import("./getHbaseInstanceTypes").getHbaseInstanceTypesOutput = null as any;
utilities.lazyLoad(exports, ["getHbaseInstanceTypes","getHbaseInstanceTypesOutput"], () => require("./getHbaseInstanceTypes"));

export { GetHbaseInstancesArgs, GetHbaseInstancesResult, GetHbaseInstancesOutputArgs } from "./getHbaseInstances";
export const getHbaseInstances: typeof import("./getHbaseInstances").getHbaseInstances = null as any;
export const getHbaseInstancesOutput: typeof import("./getHbaseInstances").getHbaseInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getHbaseInstances","getHbaseInstancesOutput"], () => require("./getHbaseInstances"));

export { GetHbaseZonesArgs, GetHbaseZonesResult, GetHbaseZonesOutputArgs } from "./getHbaseZones";
export const getHbaseZones: typeof import("./getHbaseZones").getHbaseZones = null as any;
export const getHbaseZonesOutput: typeof import("./getHbaseZones").getHbaseZonesOutput = null as any;
utilities.lazyLoad(exports, ["getHbaseZones","getHbaseZonesOutput"], () => require("./getHbaseZones"));

export { GetHbrBackupJobsArgs, GetHbrBackupJobsResult, GetHbrBackupJobsOutputArgs } from "./getHbrBackupJobs";
export const getHbrBackupJobs: typeof import("./getHbrBackupJobs").getHbrBackupJobs = null as any;
export const getHbrBackupJobsOutput: typeof import("./getHbrBackupJobs").getHbrBackupJobsOutput = null as any;
utilities.lazyLoad(exports, ["getHbrBackupJobs","getHbrBackupJobsOutput"], () => require("./getHbrBackupJobs"));

export { GetHbrEcsBackupClientsArgs, GetHbrEcsBackupClientsResult, GetHbrEcsBackupClientsOutputArgs } from "./getHbrEcsBackupClients";
export const getHbrEcsBackupClients: typeof import("./getHbrEcsBackupClients").getHbrEcsBackupClients = null as any;
export const getHbrEcsBackupClientsOutput: typeof import("./getHbrEcsBackupClients").getHbrEcsBackupClientsOutput = null as any;
utilities.lazyLoad(exports, ["getHbrEcsBackupClients","getHbrEcsBackupClientsOutput"], () => require("./getHbrEcsBackupClients"));

export { GetHbrEcsBackupPlansArgs, GetHbrEcsBackupPlansResult, GetHbrEcsBackupPlansOutputArgs } from "./getHbrEcsBackupPlans";
export const getHbrEcsBackupPlans: typeof import("./getHbrEcsBackupPlans").getHbrEcsBackupPlans = null as any;
export const getHbrEcsBackupPlansOutput: typeof import("./getHbrEcsBackupPlans").getHbrEcsBackupPlansOutput = null as any;
utilities.lazyLoad(exports, ["getHbrEcsBackupPlans","getHbrEcsBackupPlansOutput"], () => require("./getHbrEcsBackupPlans"));

export { GetHbrHanaBackupClientsArgs, GetHbrHanaBackupClientsResult, GetHbrHanaBackupClientsOutputArgs } from "./getHbrHanaBackupClients";
export const getHbrHanaBackupClients: typeof import("./getHbrHanaBackupClients").getHbrHanaBackupClients = null as any;
export const getHbrHanaBackupClientsOutput: typeof import("./getHbrHanaBackupClients").getHbrHanaBackupClientsOutput = null as any;
utilities.lazyLoad(exports, ["getHbrHanaBackupClients","getHbrHanaBackupClientsOutput"], () => require("./getHbrHanaBackupClients"));

export { GetHbrHanaBackupPlansArgs, GetHbrHanaBackupPlansResult, GetHbrHanaBackupPlansOutputArgs } from "./getHbrHanaBackupPlans";
export const getHbrHanaBackupPlans: typeof import("./getHbrHanaBackupPlans").getHbrHanaBackupPlans = null as any;
export const getHbrHanaBackupPlansOutput: typeof import("./getHbrHanaBackupPlans").getHbrHanaBackupPlansOutput = null as any;
utilities.lazyLoad(exports, ["getHbrHanaBackupPlans","getHbrHanaBackupPlansOutput"], () => require("./getHbrHanaBackupPlans"));

export { GetHbrHanaInstancesArgs, GetHbrHanaInstancesResult, GetHbrHanaInstancesOutputArgs } from "./getHbrHanaInstances";
export const getHbrHanaInstances: typeof import("./getHbrHanaInstances").getHbrHanaInstances = null as any;
export const getHbrHanaInstancesOutput: typeof import("./getHbrHanaInstances").getHbrHanaInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getHbrHanaInstances","getHbrHanaInstancesOutput"], () => require("./getHbrHanaInstances"));

export { GetHbrNasBackupPlansArgs, GetHbrNasBackupPlansResult, GetHbrNasBackupPlansOutputArgs } from "./getHbrNasBackupPlans";
export const getHbrNasBackupPlans: typeof import("./getHbrNasBackupPlans").getHbrNasBackupPlans = null as any;
export const getHbrNasBackupPlansOutput: typeof import("./getHbrNasBackupPlans").getHbrNasBackupPlansOutput = null as any;
utilities.lazyLoad(exports, ["getHbrNasBackupPlans","getHbrNasBackupPlansOutput"], () => require("./getHbrNasBackupPlans"));

export { GetHbrOssBackupPlansArgs, GetHbrOssBackupPlansResult, GetHbrOssBackupPlansOutputArgs } from "./getHbrOssBackupPlans";
export const getHbrOssBackupPlans: typeof import("./getHbrOssBackupPlans").getHbrOssBackupPlans = null as any;
export const getHbrOssBackupPlansOutput: typeof import("./getHbrOssBackupPlans").getHbrOssBackupPlansOutput = null as any;
utilities.lazyLoad(exports, ["getHbrOssBackupPlans","getHbrOssBackupPlansOutput"], () => require("./getHbrOssBackupPlans"));

export { GetHbrOtsBackupPlansArgs, GetHbrOtsBackupPlansResult, GetHbrOtsBackupPlansOutputArgs } from "./getHbrOtsBackupPlans";
export const getHbrOtsBackupPlans: typeof import("./getHbrOtsBackupPlans").getHbrOtsBackupPlans = null as any;
export const getHbrOtsBackupPlansOutput: typeof import("./getHbrOtsBackupPlans").getHbrOtsBackupPlansOutput = null as any;
utilities.lazyLoad(exports, ["getHbrOtsBackupPlans","getHbrOtsBackupPlansOutput"], () => require("./getHbrOtsBackupPlans"));

export { GetHbrOtsSnapshotsArgs, GetHbrOtsSnapshotsResult, GetHbrOtsSnapshotsOutputArgs } from "./getHbrOtsSnapshots";
export const getHbrOtsSnapshots: typeof import("./getHbrOtsSnapshots").getHbrOtsSnapshots = null as any;
export const getHbrOtsSnapshotsOutput: typeof import("./getHbrOtsSnapshots").getHbrOtsSnapshotsOutput = null as any;
utilities.lazyLoad(exports, ["getHbrOtsSnapshots","getHbrOtsSnapshotsOutput"], () => require("./getHbrOtsSnapshots"));

export { GetHbrReplicationVaultRegionsArgs, GetHbrReplicationVaultRegionsResult, GetHbrReplicationVaultRegionsOutputArgs } from "./getHbrReplicationVaultRegions";
export const getHbrReplicationVaultRegions: typeof import("./getHbrReplicationVaultRegions").getHbrReplicationVaultRegions = null as any;
export const getHbrReplicationVaultRegionsOutput: typeof import("./getHbrReplicationVaultRegions").getHbrReplicationVaultRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getHbrReplicationVaultRegions","getHbrReplicationVaultRegionsOutput"], () => require("./getHbrReplicationVaultRegions"));

export { GetHbrRestoreJobsArgs, GetHbrRestoreJobsResult, GetHbrRestoreJobsOutputArgs } from "./getHbrRestoreJobs";
export const getHbrRestoreJobs: typeof import("./getHbrRestoreJobs").getHbrRestoreJobs = null as any;
export const getHbrRestoreJobsOutput: typeof import("./getHbrRestoreJobs").getHbrRestoreJobsOutput = null as any;
utilities.lazyLoad(exports, ["getHbrRestoreJobs","getHbrRestoreJobsOutput"], () => require("./getHbrRestoreJobs"));

export { GetHbrServerBackupPlansArgs, GetHbrServerBackupPlansResult, GetHbrServerBackupPlansOutputArgs } from "./getHbrServerBackupPlans";
export const getHbrServerBackupPlans: typeof import("./getHbrServerBackupPlans").getHbrServerBackupPlans = null as any;
export const getHbrServerBackupPlansOutput: typeof import("./getHbrServerBackupPlans").getHbrServerBackupPlansOutput = null as any;
utilities.lazyLoad(exports, ["getHbrServerBackupPlans","getHbrServerBackupPlansOutput"], () => require("./getHbrServerBackupPlans"));

export { GetHbrServiceArgs, GetHbrServiceResult, GetHbrServiceOutputArgs } from "./getHbrService";
export const getHbrService: typeof import("./getHbrService").getHbrService = null as any;
export const getHbrServiceOutput: typeof import("./getHbrService").getHbrServiceOutput = null as any;
utilities.lazyLoad(exports, ["getHbrService","getHbrServiceOutput"], () => require("./getHbrService"));

export { GetHbrSnapshotsArgs, GetHbrSnapshotsResult, GetHbrSnapshotsOutputArgs } from "./getHbrSnapshots";
export const getHbrSnapshots: typeof import("./getHbrSnapshots").getHbrSnapshots = null as any;
export const getHbrSnapshotsOutput: typeof import("./getHbrSnapshots").getHbrSnapshotsOutput = null as any;
utilities.lazyLoad(exports, ["getHbrSnapshots","getHbrSnapshotsOutput"], () => require("./getHbrSnapshots"));

export { GetHbrVaultsArgs, GetHbrVaultsResult, GetHbrVaultsOutputArgs } from "./getHbrVaults";
export const getHbrVaults: typeof import("./getHbrVaults").getHbrVaults = null as any;
export const getHbrVaultsOutput: typeof import("./getHbrVaults").getHbrVaultsOutput = null as any;
utilities.lazyLoad(exports, ["getHbrVaults","getHbrVaultsOutput"], () => require("./getHbrVaults"));

export { GetImagesArgs, GetImagesResult, GetImagesOutputArgs } from "./getImages";
export const getImages: typeof import("./getImages").getImages = null as any;
export const getImagesOutput: typeof import("./getImages").getImagesOutput = null as any;
utilities.lazyLoad(exports, ["getImages","getImagesOutput"], () => require("./getImages"));

export { GetImmProjectsArgs, GetImmProjectsResult, GetImmProjectsOutputArgs } from "./getImmProjects";
export const getImmProjects: typeof import("./getImmProjects").getImmProjects = null as any;
export const getImmProjectsOutput: typeof import("./getImmProjects").getImmProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getImmProjects","getImmProjectsOutput"], () => require("./getImmProjects"));

export { GetImpAppTemplatesArgs, GetImpAppTemplatesResult, GetImpAppTemplatesOutputArgs } from "./getImpAppTemplates";
export const getImpAppTemplates: typeof import("./getImpAppTemplates").getImpAppTemplates = null as any;
export const getImpAppTemplatesOutput: typeof import("./getImpAppTemplates").getImpAppTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getImpAppTemplates","getImpAppTemplatesOutput"], () => require("./getImpAppTemplates"));

export { GetInstanceKeywordsArgs, GetInstanceKeywordsResult, GetInstanceKeywordsOutputArgs } from "./getInstanceKeywords";
export const getInstanceKeywords: typeof import("./getInstanceKeywords").getInstanceKeywords = null as any;
export const getInstanceKeywordsOutput: typeof import("./getInstanceKeywords").getInstanceKeywordsOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceKeywords","getInstanceKeywordsOutput"], () => require("./getInstanceKeywords"));

export { GetInstanceTypeFamiliesArgs, GetInstanceTypeFamiliesResult, GetInstanceTypeFamiliesOutputArgs } from "./getInstanceTypeFamilies";
export const getInstanceTypeFamilies: typeof import("./getInstanceTypeFamilies").getInstanceTypeFamilies = null as any;
export const getInstanceTypeFamiliesOutput: typeof import("./getInstanceTypeFamilies").getInstanceTypeFamiliesOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceTypeFamilies","getInstanceTypeFamiliesOutput"], () => require("./getInstanceTypeFamilies"));

export { GetInstanceTypesArgs, GetInstanceTypesResult, GetInstanceTypesOutputArgs } from "./getInstanceTypes";
export const getInstanceTypes: typeof import("./getInstanceTypes").getInstanceTypes = null as any;
export const getInstanceTypesOutput: typeof import("./getInstanceTypes").getInstanceTypesOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceTypes","getInstanceTypesOutput"], () => require("./getInstanceTypes"));

export { GetInstancesArgs, GetInstancesResult, GetInstancesOutputArgs } from "./getInstances";
export const getInstances: typeof import("./getInstances").getInstances = null as any;
export const getInstancesOutput: typeof import("./getInstances").getInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getInstances","getInstancesOutput"], () => require("./getInstances"));

export { GetIotDeviceGroupsArgs, GetIotDeviceGroupsResult, GetIotDeviceGroupsOutputArgs } from "./getIotDeviceGroups";
export const getIotDeviceGroups: typeof import("./getIotDeviceGroups").getIotDeviceGroups = null as any;
export const getIotDeviceGroupsOutput: typeof import("./getIotDeviceGroups").getIotDeviceGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getIotDeviceGroups","getIotDeviceGroupsOutput"], () => require("./getIotDeviceGroups"));

export { GetIotServiceArgs, GetIotServiceResult, GetIotServiceOutputArgs } from "./getIotService";
export const getIotService: typeof import("./getIotService").getIotService = null as any;
export const getIotServiceOutput: typeof import("./getIotService").getIotServiceOutput = null as any;
utilities.lazyLoad(exports, ["getIotService","getIotServiceOutput"], () => require("./getIotService"));

export { GetKeyPairsArgs, GetKeyPairsResult, GetKeyPairsOutputArgs } from "./getKeyPairs";
export const getKeyPairs: typeof import("./getKeyPairs").getKeyPairs = null as any;
export const getKeyPairsOutput: typeof import("./getKeyPairs").getKeyPairsOutput = null as any;
utilities.lazyLoad(exports, ["getKeyPairs","getKeyPairsOutput"], () => require("./getKeyPairs"));

export { GetKmsAliasesArgs, GetKmsAliasesResult, GetKmsAliasesOutputArgs } from "./getKmsAliases";
export const getKmsAliases: typeof import("./getKmsAliases").getKmsAliases = null as any;
export const getKmsAliasesOutput: typeof import("./getKmsAliases").getKmsAliasesOutput = null as any;
utilities.lazyLoad(exports, ["getKmsAliases","getKmsAliasesOutput"], () => require("./getKmsAliases"));

export { GetKmsCiphertextArgs, GetKmsCiphertextResult, GetKmsCiphertextOutputArgs } from "./getKmsCiphertext";
export const getKmsCiphertext: typeof import("./getKmsCiphertext").getKmsCiphertext = null as any;
export const getKmsCiphertextOutput: typeof import("./getKmsCiphertext").getKmsCiphertextOutput = null as any;
utilities.lazyLoad(exports, ["getKmsCiphertext","getKmsCiphertextOutput"], () => require("./getKmsCiphertext"));

export { GetKmsKeyVersionsArgs, GetKmsKeyVersionsResult, GetKmsKeyVersionsOutputArgs } from "./getKmsKeyVersions";
export const getKmsKeyVersions: typeof import("./getKmsKeyVersions").getKmsKeyVersions = null as any;
export const getKmsKeyVersionsOutput: typeof import("./getKmsKeyVersions").getKmsKeyVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getKmsKeyVersions","getKmsKeyVersionsOutput"], () => require("./getKmsKeyVersions"));

export { GetKmsKeysArgs, GetKmsKeysResult, GetKmsKeysOutputArgs } from "./getKmsKeys";
export const getKmsKeys: typeof import("./getKmsKeys").getKmsKeys = null as any;
export const getKmsKeysOutput: typeof import("./getKmsKeys").getKmsKeysOutput = null as any;
utilities.lazyLoad(exports, ["getKmsKeys","getKmsKeysOutput"], () => require("./getKmsKeys"));

export { GetKmsPlaintextArgs, GetKmsPlaintextResult, GetKmsPlaintextOutputArgs } from "./getKmsPlaintext";
export const getKmsPlaintext: typeof import("./getKmsPlaintext").getKmsPlaintext = null as any;
export const getKmsPlaintextOutput: typeof import("./getKmsPlaintext").getKmsPlaintextOutput = null as any;
utilities.lazyLoad(exports, ["getKmsPlaintext","getKmsPlaintextOutput"], () => require("./getKmsPlaintext"));

export { GetKmsSecretVersionsArgs, GetKmsSecretVersionsResult, GetKmsSecretVersionsOutputArgs } from "./getKmsSecretVersions";
export const getKmsSecretVersions: typeof import("./getKmsSecretVersions").getKmsSecretVersions = null as any;
export const getKmsSecretVersionsOutput: typeof import("./getKmsSecretVersions").getKmsSecretVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getKmsSecretVersions","getKmsSecretVersionsOutput"], () => require("./getKmsSecretVersions"));

export { GetKmsSecretsArgs, GetKmsSecretsResult, GetKmsSecretsOutputArgs } from "./getKmsSecrets";
export const getKmsSecrets: typeof import("./getKmsSecrets").getKmsSecrets = null as any;
export const getKmsSecretsOutput: typeof import("./getKmsSecrets").getKmsSecretsOutput = null as any;
utilities.lazyLoad(exports, ["getKmsSecrets","getKmsSecretsOutput"], () => require("./getKmsSecrets"));

export { GetKmsServiceArgs, GetKmsServiceResult, GetKmsServiceOutputArgs } from "./getKmsService";
export const getKmsService: typeof import("./getKmsService").getKmsService = null as any;
export const getKmsServiceOutput: typeof import("./getKmsService").getKmsServiceOutput = null as any;
utilities.lazyLoad(exports, ["getKmsService","getKmsServiceOutput"], () => require("./getKmsService"));

export { GetKvstoreAccountsArgs, GetKvstoreAccountsResult, GetKvstoreAccountsOutputArgs } from "./getKvstoreAccounts";
export const getKvstoreAccounts: typeof import("./getKvstoreAccounts").getKvstoreAccounts = null as any;
export const getKvstoreAccountsOutput: typeof import("./getKvstoreAccounts").getKvstoreAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getKvstoreAccounts","getKvstoreAccountsOutput"], () => require("./getKvstoreAccounts"));

export { GetKvstoreConnectionsArgs, GetKvstoreConnectionsResult, GetKvstoreConnectionsOutputArgs } from "./getKvstoreConnections";
export const getKvstoreConnections: typeof import("./getKvstoreConnections").getKvstoreConnections = null as any;
export const getKvstoreConnectionsOutput: typeof import("./getKvstoreConnections").getKvstoreConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getKvstoreConnections","getKvstoreConnectionsOutput"], () => require("./getKvstoreConnections"));

export { GetKvstoreInstanceClassesArgs, GetKvstoreInstanceClassesResult, GetKvstoreInstanceClassesOutputArgs } from "./getKvstoreInstanceClasses";
export const getKvstoreInstanceClasses: typeof import("./getKvstoreInstanceClasses").getKvstoreInstanceClasses = null as any;
export const getKvstoreInstanceClassesOutput: typeof import("./getKvstoreInstanceClasses").getKvstoreInstanceClassesOutput = null as any;
utilities.lazyLoad(exports, ["getKvstoreInstanceClasses","getKvstoreInstanceClassesOutput"], () => require("./getKvstoreInstanceClasses"));

export { GetKvstoreInstanceEnginesArgs, GetKvstoreInstanceEnginesResult, GetKvstoreInstanceEnginesOutputArgs } from "./getKvstoreInstanceEngines";
export const getKvstoreInstanceEngines: typeof import("./getKvstoreInstanceEngines").getKvstoreInstanceEngines = null as any;
export const getKvstoreInstanceEnginesOutput: typeof import("./getKvstoreInstanceEngines").getKvstoreInstanceEnginesOutput = null as any;
utilities.lazyLoad(exports, ["getKvstoreInstanceEngines","getKvstoreInstanceEnginesOutput"], () => require("./getKvstoreInstanceEngines"));

export { GetKvstoreInstancesArgs, GetKvstoreInstancesResult, GetKvstoreInstancesOutputArgs } from "./getKvstoreInstances";
export const getKvstoreInstances: typeof import("./getKvstoreInstances").getKvstoreInstances = null as any;
export const getKvstoreInstancesOutput: typeof import("./getKvstoreInstances").getKvstoreInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getKvstoreInstances","getKvstoreInstancesOutput"], () => require("./getKvstoreInstances"));

export { GetKvstorePermissionArgs, GetKvstorePermissionResult, GetKvstorePermissionOutputArgs } from "./getKvstorePermission";
export const getKvstorePermission: typeof import("./getKvstorePermission").getKvstorePermission = null as any;
export const getKvstorePermissionOutput: typeof import("./getKvstorePermission").getKvstorePermissionOutput = null as any;
utilities.lazyLoad(exports, ["getKvstorePermission","getKvstorePermissionOutput"], () => require("./getKvstorePermission"));

export { GetKvstoreZonesArgs, GetKvstoreZonesResult, GetKvstoreZonesOutputArgs } from "./getKvstoreZones";
export const getKvstoreZones: typeof import("./getKvstoreZones").getKvstoreZones = null as any;
export const getKvstoreZonesOutput: typeof import("./getKvstoreZones").getKvstoreZonesOutput = null as any;
utilities.lazyLoad(exports, ["getKvstoreZones","getKvstoreZonesOutput"], () => require("./getKvstoreZones"));

export { GetLindormInstancesArgs, GetLindormInstancesResult, GetLindormInstancesOutputArgs } from "./getLindormInstances";
export const getLindormInstances: typeof import("./getLindormInstances").getLindormInstances = null as any;
export const getLindormInstancesOutput: typeof import("./getLindormInstances").getLindormInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getLindormInstances","getLindormInstancesOutput"], () => require("./getLindormInstances"));

export { GetLogAlertResourceArgs, GetLogAlertResourceResult, GetLogAlertResourceOutputArgs } from "./getLogAlertResource";
export const getLogAlertResource: typeof import("./getLogAlertResource").getLogAlertResource = null as any;
export const getLogAlertResourceOutput: typeof import("./getLogAlertResource").getLogAlertResourceOutput = null as any;
utilities.lazyLoad(exports, ["getLogAlertResource","getLogAlertResourceOutput"], () => require("./getLogAlertResource"));

export { GetLogProjectsArgs, GetLogProjectsResult, GetLogProjectsOutputArgs } from "./getLogProjects";
export const getLogProjects: typeof import("./getLogProjects").getLogProjects = null as any;
export const getLogProjectsOutput: typeof import("./getLogProjects").getLogProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getLogProjects","getLogProjectsOutput"], () => require("./getLogProjects"));

export { GetLogServiceArgs, GetLogServiceResult, GetLogServiceOutputArgs } from "./getLogService";
export const getLogService: typeof import("./getLogService").getLogService = null as any;
export const getLogServiceOutput: typeof import("./getLogService").getLogServiceOutput = null as any;
utilities.lazyLoad(exports, ["getLogService","getLogServiceOutput"], () => require("./getLogService"));

export { GetLogStoresArgs, GetLogStoresResult, GetLogStoresOutputArgs } from "./getLogStores";
export const getLogStores: typeof import("./getLogStores").getLogStores = null as any;
export const getLogStoresOutput: typeof import("./getLogStores").getLogStoresOutput = null as any;
utilities.lazyLoad(exports, ["getLogStores","getLogStoresOutput"], () => require("./getLogStores"));

export { GetMarketProductArgs, GetMarketProductResult, GetMarketProductOutputArgs } from "./getMarketProduct";
export const getMarketProduct: typeof import("./getMarketProduct").getMarketProduct = null as any;
export const getMarketProductOutput: typeof import("./getMarketProduct").getMarketProductOutput = null as any;
utilities.lazyLoad(exports, ["getMarketProduct","getMarketProductOutput"], () => require("./getMarketProduct"));

export { GetMarketProductsArgs, GetMarketProductsResult, GetMarketProductsOutputArgs } from "./getMarketProducts";
export const getMarketProducts: typeof import("./getMarketProducts").getMarketProducts = null as any;
export const getMarketProductsOutput: typeof import("./getMarketProducts").getMarketProductsOutput = null as any;
utilities.lazyLoad(exports, ["getMarketProducts","getMarketProductsOutput"], () => require("./getMarketProducts"));

export { GetMaxcomputeProjectsArgs, GetMaxcomputeProjectsResult, GetMaxcomputeProjectsOutputArgs } from "./getMaxcomputeProjects";
export const getMaxcomputeProjects: typeof import("./getMaxcomputeProjects").getMaxcomputeProjects = null as any;
export const getMaxcomputeProjectsOutput: typeof import("./getMaxcomputeProjects").getMaxcomputeProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getMaxcomputeProjects","getMaxcomputeProjectsOutput"], () => require("./getMaxcomputeProjects"));

export { GetMaxcomputeServiceArgs, GetMaxcomputeServiceResult, GetMaxcomputeServiceOutputArgs } from "./getMaxcomputeService";
export const getMaxcomputeService: typeof import("./getMaxcomputeService").getMaxcomputeService = null as any;
export const getMaxcomputeServiceOutput: typeof import("./getMaxcomputeService").getMaxcomputeServiceOutput = null as any;
utilities.lazyLoad(exports, ["getMaxcomputeService","getMaxcomputeServiceOutput"], () => require("./getMaxcomputeService"));

export { GetMessageServiceQueuesArgs, GetMessageServiceQueuesResult, GetMessageServiceQueuesOutputArgs } from "./getMessageServiceQueues";
export const getMessageServiceQueues: typeof import("./getMessageServiceQueues").getMessageServiceQueues = null as any;
export const getMessageServiceQueuesOutput: typeof import("./getMessageServiceQueues").getMessageServiceQueuesOutput = null as any;
utilities.lazyLoad(exports, ["getMessageServiceQueues","getMessageServiceQueuesOutput"], () => require("./getMessageServiceQueues"));

export { GetMessageServiceSubscriptionsArgs, GetMessageServiceSubscriptionsResult, GetMessageServiceSubscriptionsOutputArgs } from "./getMessageServiceSubscriptions";
export const getMessageServiceSubscriptions: typeof import("./getMessageServiceSubscriptions").getMessageServiceSubscriptions = null as any;
export const getMessageServiceSubscriptionsOutput: typeof import("./getMessageServiceSubscriptions").getMessageServiceSubscriptionsOutput = null as any;
utilities.lazyLoad(exports, ["getMessageServiceSubscriptions","getMessageServiceSubscriptionsOutput"], () => require("./getMessageServiceSubscriptions"));

export { GetMessageServiceTopicsArgs, GetMessageServiceTopicsResult, GetMessageServiceTopicsOutputArgs } from "./getMessageServiceTopics";
export const getMessageServiceTopics: typeof import("./getMessageServiceTopics").getMessageServiceTopics = null as any;
export const getMessageServiceTopicsOutput: typeof import("./getMessageServiceTopics").getMessageServiceTopicsOutput = null as any;
utilities.lazyLoad(exports, ["getMessageServiceTopics","getMessageServiceTopicsOutput"], () => require("./getMessageServiceTopics"));

export { GetMhubAppsArgs, GetMhubAppsResult, GetMhubAppsOutputArgs } from "./getMhubApps";
export const getMhubApps: typeof import("./getMhubApps").getMhubApps = null as any;
export const getMhubAppsOutput: typeof import("./getMhubApps").getMhubAppsOutput = null as any;
utilities.lazyLoad(exports, ["getMhubApps","getMhubAppsOutput"], () => require("./getMhubApps"));

export { GetMhubProductsArgs, GetMhubProductsResult, GetMhubProductsOutputArgs } from "./getMhubProducts";
export const getMhubProducts: typeof import("./getMhubProducts").getMhubProducts = null as any;
export const getMhubProductsOutput: typeof import("./getMhubProducts").getMhubProductsOutput = null as any;
utilities.lazyLoad(exports, ["getMhubProducts","getMhubProductsOutput"], () => require("./getMhubProducts"));

export { GetMnsQueuesArgs, GetMnsQueuesResult, GetMnsQueuesOutputArgs } from "./getMnsQueues";
export const getMnsQueues: typeof import("./getMnsQueues").getMnsQueues = null as any;
export const getMnsQueuesOutput: typeof import("./getMnsQueues").getMnsQueuesOutput = null as any;
utilities.lazyLoad(exports, ["getMnsQueues","getMnsQueuesOutput"], () => require("./getMnsQueues"));

export { GetMnsServiceArgs, GetMnsServiceResult, GetMnsServiceOutputArgs } from "./getMnsService";
export const getMnsService: typeof import("./getMnsService").getMnsService = null as any;
export const getMnsServiceOutput: typeof import("./getMnsService").getMnsServiceOutput = null as any;
utilities.lazyLoad(exports, ["getMnsService","getMnsServiceOutput"], () => require("./getMnsService"));

export { GetMnsTopicSubscriptionsArgs, GetMnsTopicSubscriptionsResult, GetMnsTopicSubscriptionsOutputArgs } from "./getMnsTopicSubscriptions";
export const getMnsTopicSubscriptions: typeof import("./getMnsTopicSubscriptions").getMnsTopicSubscriptions = null as any;
export const getMnsTopicSubscriptionsOutput: typeof import("./getMnsTopicSubscriptions").getMnsTopicSubscriptionsOutput = null as any;
utilities.lazyLoad(exports, ["getMnsTopicSubscriptions","getMnsTopicSubscriptionsOutput"], () => require("./getMnsTopicSubscriptions"));

export { GetMnsTopicsArgs, GetMnsTopicsResult, GetMnsTopicsOutputArgs } from "./getMnsTopics";
export const getMnsTopics: typeof import("./getMnsTopics").getMnsTopics = null as any;
export const getMnsTopicsOutput: typeof import("./getMnsTopics").getMnsTopicsOutput = null as any;
utilities.lazyLoad(exports, ["getMnsTopics","getMnsTopicsOutput"], () => require("./getMnsTopics"));

export { GetMongoInstancesArgs, GetMongoInstancesResult, GetMongoInstancesOutputArgs } from "./getMongoInstances";
export const getMongoInstances: typeof import("./getMongoInstances").getMongoInstances = null as any;
export const getMongoInstancesOutput: typeof import("./getMongoInstances").getMongoInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getMongoInstances","getMongoInstancesOutput"], () => require("./getMongoInstances"));

export { GetMongodbAccountsArgs, GetMongodbAccountsResult, GetMongodbAccountsOutputArgs } from "./getMongodbAccounts";
export const getMongodbAccounts: typeof import("./getMongodbAccounts").getMongodbAccounts = null as any;
export const getMongodbAccountsOutput: typeof import("./getMongodbAccounts").getMongodbAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getMongodbAccounts","getMongodbAccountsOutput"], () => require("./getMongodbAccounts"));

export { GetMongodbAuditPoliciesArgs, GetMongodbAuditPoliciesResult, GetMongodbAuditPoliciesOutputArgs } from "./getMongodbAuditPolicies";
export const getMongodbAuditPolicies: typeof import("./getMongodbAuditPolicies").getMongodbAuditPolicies = null as any;
export const getMongodbAuditPoliciesOutput: typeof import("./getMongodbAuditPolicies").getMongodbAuditPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getMongodbAuditPolicies","getMongodbAuditPoliciesOutput"], () => require("./getMongodbAuditPolicies"));

export { GetMongodbInstancesArgs, GetMongodbInstancesResult, GetMongodbInstancesOutputArgs } from "./getMongodbInstances";
export const getMongodbInstances: typeof import("./getMongodbInstances").getMongodbInstances = null as any;
export const getMongodbInstancesOutput: typeof import("./getMongodbInstances").getMongodbInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getMongodbInstances","getMongodbInstancesOutput"], () => require("./getMongodbInstances"));

export { GetMongodbServerlessInstancesArgs, GetMongodbServerlessInstancesResult, GetMongodbServerlessInstancesOutputArgs } from "./getMongodbServerlessInstances";
export const getMongodbServerlessInstances: typeof import("./getMongodbServerlessInstances").getMongodbServerlessInstances = null as any;
export const getMongodbServerlessInstancesOutput: typeof import("./getMongodbServerlessInstances").getMongodbServerlessInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getMongodbServerlessInstances","getMongodbServerlessInstancesOutput"], () => require("./getMongodbServerlessInstances"));

export { GetMongodbShardingNetworkPrivateAddressesArgs, GetMongodbShardingNetworkPrivateAddressesResult, GetMongodbShardingNetworkPrivateAddressesOutputArgs } from "./getMongodbShardingNetworkPrivateAddresses";
export const getMongodbShardingNetworkPrivateAddresses: typeof import("./getMongodbShardingNetworkPrivateAddresses").getMongodbShardingNetworkPrivateAddresses = null as any;
export const getMongodbShardingNetworkPrivateAddressesOutput: typeof import("./getMongodbShardingNetworkPrivateAddresses").getMongodbShardingNetworkPrivateAddressesOutput = null as any;
utilities.lazyLoad(exports, ["getMongodbShardingNetworkPrivateAddresses","getMongodbShardingNetworkPrivateAddressesOutput"], () => require("./getMongodbShardingNetworkPrivateAddresses"));

export { GetMongodbShardingNetworkPublicAddressesArgs, GetMongodbShardingNetworkPublicAddressesResult, GetMongodbShardingNetworkPublicAddressesOutputArgs } from "./getMongodbShardingNetworkPublicAddresses";
export const getMongodbShardingNetworkPublicAddresses: typeof import("./getMongodbShardingNetworkPublicAddresses").getMongodbShardingNetworkPublicAddresses = null as any;
export const getMongodbShardingNetworkPublicAddressesOutput: typeof import("./getMongodbShardingNetworkPublicAddresses").getMongodbShardingNetworkPublicAddressesOutput = null as any;
utilities.lazyLoad(exports, ["getMongodbShardingNetworkPublicAddresses","getMongodbShardingNetworkPublicAddressesOutput"], () => require("./getMongodbShardingNetworkPublicAddresses"));

export { GetMongodbZonesArgs, GetMongodbZonesResult, GetMongodbZonesOutputArgs } from "./getMongodbZones";
export const getMongodbZones: typeof import("./getMongodbZones").getMongodbZones = null as any;
export const getMongodbZonesOutput: typeof import("./getMongodbZones").getMongodbZonesOutput = null as any;
utilities.lazyLoad(exports, ["getMongodbZones","getMongodbZonesOutput"], () => require("./getMongodbZones"));

export { GetMscSubContactVerificationMessageArgs, GetMscSubContactVerificationMessageResult, GetMscSubContactVerificationMessageOutputArgs } from "./getMscSubContactVerificationMessage";
export const getMscSubContactVerificationMessage: typeof import("./getMscSubContactVerificationMessage").getMscSubContactVerificationMessage = null as any;
export const getMscSubContactVerificationMessageOutput: typeof import("./getMscSubContactVerificationMessage").getMscSubContactVerificationMessageOutput = null as any;
utilities.lazyLoad(exports, ["getMscSubContactVerificationMessage","getMscSubContactVerificationMessageOutput"], () => require("./getMscSubContactVerificationMessage"));

export { GetMscSubContactsArgs, GetMscSubContactsResult, GetMscSubContactsOutputArgs } from "./getMscSubContacts";
export const getMscSubContacts: typeof import("./getMscSubContacts").getMscSubContacts = null as any;
export const getMscSubContactsOutput: typeof import("./getMscSubContacts").getMscSubContactsOutput = null as any;
utilities.lazyLoad(exports, ["getMscSubContacts","getMscSubContactsOutput"], () => require("./getMscSubContacts"));

export { GetMscSubSubscriptionsArgs, GetMscSubSubscriptionsResult, GetMscSubSubscriptionsOutputArgs } from "./getMscSubSubscriptions";
export const getMscSubSubscriptions: typeof import("./getMscSubSubscriptions").getMscSubSubscriptions = null as any;
export const getMscSubSubscriptionsOutput: typeof import("./getMscSubSubscriptions").getMscSubSubscriptionsOutput = null as any;
utilities.lazyLoad(exports, ["getMscSubSubscriptions","getMscSubSubscriptionsOutput"], () => require("./getMscSubSubscriptions"));

export { GetMscSubWebhooksArgs, GetMscSubWebhooksResult, GetMscSubWebhooksOutputArgs } from "./getMscSubWebhooks";
export const getMscSubWebhooks: typeof import("./getMscSubWebhooks").getMscSubWebhooks = null as any;
export const getMscSubWebhooksOutput: typeof import("./getMscSubWebhooks").getMscSubWebhooksOutput = null as any;
utilities.lazyLoad(exports, ["getMscSubWebhooks","getMscSubWebhooksOutput"], () => require("./getMscSubWebhooks"));

export { GetMseClustersArgs, GetMseClustersResult, GetMseClustersOutputArgs } from "./getMseClusters";
export const getMseClusters: typeof import("./getMseClusters").getMseClusters = null as any;
export const getMseClustersOutput: typeof import("./getMseClusters").getMseClustersOutput = null as any;
utilities.lazyLoad(exports, ["getMseClusters","getMseClustersOutput"], () => require("./getMseClusters"));

export { GetMseEngineNamespacesArgs, GetMseEngineNamespacesResult, GetMseEngineNamespacesOutputArgs } from "./getMseEngineNamespaces";
export const getMseEngineNamespaces: typeof import("./getMseEngineNamespaces").getMseEngineNamespaces = null as any;
export const getMseEngineNamespacesOutput: typeof import("./getMseEngineNamespaces").getMseEngineNamespacesOutput = null as any;
utilities.lazyLoad(exports, ["getMseEngineNamespaces","getMseEngineNamespacesOutput"], () => require("./getMseEngineNamespaces"));

export { GetMseGatewaysArgs, GetMseGatewaysResult, GetMseGatewaysOutputArgs } from "./getMseGateways";
export const getMseGateways: typeof import("./getMseGateways").getMseGateways = null as any;
export const getMseGatewaysOutput: typeof import("./getMseGateways").getMseGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getMseGateways","getMseGatewaysOutput"], () => require("./getMseGateways"));

export { GetMseZnodesArgs, GetMseZnodesResult, GetMseZnodesOutputArgs } from "./getMseZnodes";
export const getMseZnodes: typeof import("./getMseZnodes").getMseZnodes = null as any;
export const getMseZnodesOutput: typeof import("./getMseZnodes").getMseZnodesOutput = null as any;
utilities.lazyLoad(exports, ["getMseZnodes","getMseZnodesOutput"], () => require("./getMseZnodes"));

export { GetNasAccessGroupsArgs, GetNasAccessGroupsResult, GetNasAccessGroupsOutputArgs } from "./getNasAccessGroups";
export const getNasAccessGroups: typeof import("./getNasAccessGroups").getNasAccessGroups = null as any;
export const getNasAccessGroupsOutput: typeof import("./getNasAccessGroups").getNasAccessGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getNasAccessGroups","getNasAccessGroupsOutput"], () => require("./getNasAccessGroups"));

export { GetNasAccessRulesArgs, GetNasAccessRulesResult, GetNasAccessRulesOutputArgs } from "./getNasAccessRules";
export const getNasAccessRules: typeof import("./getNasAccessRules").getNasAccessRules = null as any;
export const getNasAccessRulesOutput: typeof import("./getNasAccessRules").getNasAccessRulesOutput = null as any;
utilities.lazyLoad(exports, ["getNasAccessRules","getNasAccessRulesOutput"], () => require("./getNasAccessRules"));

export { GetNasAutoSnapshotPoliciesArgs, GetNasAutoSnapshotPoliciesResult, GetNasAutoSnapshotPoliciesOutputArgs } from "./getNasAutoSnapshotPolicies";
export const getNasAutoSnapshotPolicies: typeof import("./getNasAutoSnapshotPolicies").getNasAutoSnapshotPolicies = null as any;
export const getNasAutoSnapshotPoliciesOutput: typeof import("./getNasAutoSnapshotPolicies").getNasAutoSnapshotPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getNasAutoSnapshotPolicies","getNasAutoSnapshotPoliciesOutput"], () => require("./getNasAutoSnapshotPolicies"));

export { GetNasDataFlowsArgs, GetNasDataFlowsResult, GetNasDataFlowsOutputArgs } from "./getNasDataFlows";
export const getNasDataFlows: typeof import("./getNasDataFlows").getNasDataFlows = null as any;
export const getNasDataFlowsOutput: typeof import("./getNasDataFlows").getNasDataFlowsOutput = null as any;
utilities.lazyLoad(exports, ["getNasDataFlows","getNasDataFlowsOutput"], () => require("./getNasDataFlows"));

export { GetNasFileSystemsArgs, GetNasFileSystemsResult, GetNasFileSystemsOutputArgs } from "./getNasFileSystems";
export const getNasFileSystems: typeof import("./getNasFileSystems").getNasFileSystems = null as any;
export const getNasFileSystemsOutput: typeof import("./getNasFileSystems").getNasFileSystemsOutput = null as any;
utilities.lazyLoad(exports, ["getNasFileSystems","getNasFileSystemsOutput"], () => require("./getNasFileSystems"));

export { GetNasFilesetsArgs, GetNasFilesetsResult, GetNasFilesetsOutputArgs } from "./getNasFilesets";
export const getNasFilesets: typeof import("./getNasFilesets").getNasFilesets = null as any;
export const getNasFilesetsOutput: typeof import("./getNasFilesets").getNasFilesetsOutput = null as any;
utilities.lazyLoad(exports, ["getNasFilesets","getNasFilesetsOutput"], () => require("./getNasFilesets"));

export { GetNasLifecyclePoliciesArgs, GetNasLifecyclePoliciesResult, GetNasLifecyclePoliciesOutputArgs } from "./getNasLifecyclePolicies";
export const getNasLifecyclePolicies: typeof import("./getNasLifecyclePolicies").getNasLifecyclePolicies = null as any;
export const getNasLifecyclePoliciesOutput: typeof import("./getNasLifecyclePolicies").getNasLifecyclePoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getNasLifecyclePolicies","getNasLifecyclePoliciesOutput"], () => require("./getNasLifecyclePolicies"));

export { GetNasMountTargetsArgs, GetNasMountTargetsResult, GetNasMountTargetsOutputArgs } from "./getNasMountTargets";
export const getNasMountTargets: typeof import("./getNasMountTargets").getNasMountTargets = null as any;
export const getNasMountTargetsOutput: typeof import("./getNasMountTargets").getNasMountTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getNasMountTargets","getNasMountTargetsOutput"], () => require("./getNasMountTargets"));

export { GetNasProtocolsArgs, GetNasProtocolsResult, GetNasProtocolsOutputArgs } from "./getNasProtocols";
export const getNasProtocols: typeof import("./getNasProtocols").getNasProtocols = null as any;
export const getNasProtocolsOutput: typeof import("./getNasProtocols").getNasProtocolsOutput = null as any;
utilities.lazyLoad(exports, ["getNasProtocols","getNasProtocolsOutput"], () => require("./getNasProtocols"));

export { GetNasServiceArgs, GetNasServiceResult, GetNasServiceOutputArgs } from "./getNasService";
export const getNasService: typeof import("./getNasService").getNasService = null as any;
export const getNasServiceOutput: typeof import("./getNasService").getNasServiceOutput = null as any;
utilities.lazyLoad(exports, ["getNasService","getNasServiceOutput"], () => require("./getNasService"));

export { GetNasSnapshotsArgs, GetNasSnapshotsResult, GetNasSnapshotsOutputArgs } from "./getNasSnapshots";
export const getNasSnapshots: typeof import("./getNasSnapshots").getNasSnapshots = null as any;
export const getNasSnapshotsOutput: typeof import("./getNasSnapshots").getNasSnapshotsOutput = null as any;
utilities.lazyLoad(exports, ["getNasSnapshots","getNasSnapshotsOutput"], () => require("./getNasSnapshots"));

export { GetNasZonesArgs, GetNasZonesResult, GetNasZonesOutputArgs } from "./getNasZones";
export const getNasZones: typeof import("./getNasZones").getNasZones = null as any;
export const getNasZonesOutput: typeof import("./getNasZones").getNasZonesOutput = null as any;
utilities.lazyLoad(exports, ["getNasZones","getNasZonesOutput"], () => require("./getNasZones"));

export { GetNatGatewaysArgs, GetNatGatewaysResult, GetNatGatewaysOutputArgs } from "./getNatGateways";
export const getNatGateways: typeof import("./getNatGateways").getNatGateways = null as any;
export const getNatGatewaysOutput: typeof import("./getNatGateways").getNatGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getNatGateways","getNatGatewaysOutput"], () => require("./getNatGateways"));

export { GetNetworkAclsArgs, GetNetworkAclsResult, GetNetworkAclsOutputArgs } from "./getNetworkAcls";
export const getNetworkAcls: typeof import("./getNetworkAcls").getNetworkAcls = null as any;
export const getNetworkAclsOutput: typeof import("./getNetworkAcls").getNetworkAclsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkAcls","getNetworkAclsOutput"], () => require("./getNetworkAcls"));

export { GetNetworkInterfacesArgs, GetNetworkInterfacesResult, GetNetworkInterfacesOutputArgs } from "./getNetworkInterfaces";
export const getNetworkInterfaces: typeof import("./getNetworkInterfaces").getNetworkInterfaces = null as any;
export const getNetworkInterfacesOutput: typeof import("./getNetworkInterfaces").getNetworkInterfacesOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkInterfaces","getNetworkInterfacesOutput"], () => require("./getNetworkInterfaces"));

export { GetNlbListenersArgs, GetNlbListenersResult, GetNlbListenersOutputArgs } from "./getNlbListeners";
export const getNlbListeners: typeof import("./getNlbListeners").getNlbListeners = null as any;
export const getNlbListenersOutput: typeof import("./getNlbListeners").getNlbListenersOutput = null as any;
utilities.lazyLoad(exports, ["getNlbListeners","getNlbListenersOutput"], () => require("./getNlbListeners"));

export { GetNlbLoadBalancersArgs, GetNlbLoadBalancersResult, GetNlbLoadBalancersOutputArgs } from "./getNlbLoadBalancers";
export const getNlbLoadBalancers: typeof import("./getNlbLoadBalancers").getNlbLoadBalancers = null as any;
export const getNlbLoadBalancersOutput: typeof import("./getNlbLoadBalancers").getNlbLoadBalancersOutput = null as any;
utilities.lazyLoad(exports, ["getNlbLoadBalancers","getNlbLoadBalancersOutput"], () => require("./getNlbLoadBalancers"));

export { GetNlbSecurityPoliciesArgs, GetNlbSecurityPoliciesResult, GetNlbSecurityPoliciesOutputArgs } from "./getNlbSecurityPolicies";
export const getNlbSecurityPolicies: typeof import("./getNlbSecurityPolicies").getNlbSecurityPolicies = null as any;
export const getNlbSecurityPoliciesOutput: typeof import("./getNlbSecurityPolicies").getNlbSecurityPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getNlbSecurityPolicies","getNlbSecurityPoliciesOutput"], () => require("./getNlbSecurityPolicies"));

export { GetNlbServerGroupServerAttachmentsArgs, GetNlbServerGroupServerAttachmentsResult, GetNlbServerGroupServerAttachmentsOutputArgs } from "./getNlbServerGroupServerAttachments";
export const getNlbServerGroupServerAttachments: typeof import("./getNlbServerGroupServerAttachments").getNlbServerGroupServerAttachments = null as any;
export const getNlbServerGroupServerAttachmentsOutput: typeof import("./getNlbServerGroupServerAttachments").getNlbServerGroupServerAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getNlbServerGroupServerAttachments","getNlbServerGroupServerAttachmentsOutput"], () => require("./getNlbServerGroupServerAttachments"));

export { GetNlbServerGroupsArgs, GetNlbServerGroupsResult, GetNlbServerGroupsOutputArgs } from "./getNlbServerGroups";
export const getNlbServerGroups: typeof import("./getNlbServerGroups").getNlbServerGroups = null as any;
export const getNlbServerGroupsOutput: typeof import("./getNlbServerGroups").getNlbServerGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getNlbServerGroups","getNlbServerGroupsOutput"], () => require("./getNlbServerGroups"));

export { GetNlbZonesArgs, GetNlbZonesResult, GetNlbZonesOutputArgs } from "./getNlbZones";
export const getNlbZones: typeof import("./getNlbZones").getNlbZones = null as any;
export const getNlbZonesOutput: typeof import("./getNlbZones").getNlbZonesOutput = null as any;
utilities.lazyLoad(exports, ["getNlbZones","getNlbZonesOutput"], () => require("./getNlbZones"));

export { GetOceanBaseInstancesArgs, GetOceanBaseInstancesResult, GetOceanBaseInstancesOutputArgs } from "./getOceanBaseInstances";
export const getOceanBaseInstances: typeof import("./getOceanBaseInstances").getOceanBaseInstances = null as any;
export const getOceanBaseInstancesOutput: typeof import("./getOceanBaseInstances").getOceanBaseInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getOceanBaseInstances","getOceanBaseInstancesOutput"], () => require("./getOceanBaseInstances"));

export { GetOnsGroupsArgs, GetOnsGroupsResult, GetOnsGroupsOutputArgs } from "./getOnsGroups";
export const getOnsGroups: typeof import("./getOnsGroups").getOnsGroups = null as any;
export const getOnsGroupsOutput: typeof import("./getOnsGroups").getOnsGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getOnsGroups","getOnsGroupsOutput"], () => require("./getOnsGroups"));

export { GetOnsInstancesArgs, GetOnsInstancesResult, GetOnsInstancesOutputArgs } from "./getOnsInstances";
export const getOnsInstances: typeof import("./getOnsInstances").getOnsInstances = null as any;
export const getOnsInstancesOutput: typeof import("./getOnsInstances").getOnsInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getOnsInstances","getOnsInstancesOutput"], () => require("./getOnsInstances"));

export { GetOnsServiceArgs, GetOnsServiceResult, GetOnsServiceOutputArgs } from "./getOnsService";
export const getOnsService: typeof import("./getOnsService").getOnsService = null as any;
export const getOnsServiceOutput: typeof import("./getOnsService").getOnsServiceOutput = null as any;
utilities.lazyLoad(exports, ["getOnsService","getOnsServiceOutput"], () => require("./getOnsService"));

export { GetOnsTopicsArgs, GetOnsTopicsResult, GetOnsTopicsOutputArgs } from "./getOnsTopics";
export const getOnsTopics: typeof import("./getOnsTopics").getOnsTopics = null as any;
export const getOnsTopicsOutput: typeof import("./getOnsTopics").getOnsTopicsOutput = null as any;
utilities.lazyLoad(exports, ["getOnsTopics","getOnsTopicsOutput"], () => require("./getOnsTopics"));

export { GetOosApplicationGroupsArgs, GetOosApplicationGroupsResult, GetOosApplicationGroupsOutputArgs } from "./getOosApplicationGroups";
export const getOosApplicationGroups: typeof import("./getOosApplicationGroups").getOosApplicationGroups = null as any;
export const getOosApplicationGroupsOutput: typeof import("./getOosApplicationGroups").getOosApplicationGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getOosApplicationGroups","getOosApplicationGroupsOutput"], () => require("./getOosApplicationGroups"));

export { GetOosApplicationsArgs, GetOosApplicationsResult, GetOosApplicationsOutputArgs } from "./getOosApplications";
export const getOosApplications: typeof import("./getOosApplications").getOosApplications = null as any;
export const getOosApplicationsOutput: typeof import("./getOosApplications").getOosApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getOosApplications","getOosApplicationsOutput"], () => require("./getOosApplications"));

export { GetOosExecutionsArgs, GetOosExecutionsResult, GetOosExecutionsOutputArgs } from "./getOosExecutions";
export const getOosExecutions: typeof import("./getOosExecutions").getOosExecutions = null as any;
export const getOosExecutionsOutput: typeof import("./getOosExecutions").getOosExecutionsOutput = null as any;
utilities.lazyLoad(exports, ["getOosExecutions","getOosExecutionsOutput"], () => require("./getOosExecutions"));

export { GetOosParametersArgs, GetOosParametersResult, GetOosParametersOutputArgs } from "./getOosParameters";
export const getOosParameters: typeof import("./getOosParameters").getOosParameters = null as any;
export const getOosParametersOutput: typeof import("./getOosParameters").getOosParametersOutput = null as any;
utilities.lazyLoad(exports, ["getOosParameters","getOosParametersOutput"], () => require("./getOosParameters"));

export { GetOosPatchBaselinesArgs, GetOosPatchBaselinesResult, GetOosPatchBaselinesOutputArgs } from "./getOosPatchBaselines";
export const getOosPatchBaselines: typeof import("./getOosPatchBaselines").getOosPatchBaselines = null as any;
export const getOosPatchBaselinesOutput: typeof import("./getOosPatchBaselines").getOosPatchBaselinesOutput = null as any;
utilities.lazyLoad(exports, ["getOosPatchBaselines","getOosPatchBaselinesOutput"], () => require("./getOosPatchBaselines"));

export { GetOosSecretParametersArgs, GetOosSecretParametersResult, GetOosSecretParametersOutputArgs } from "./getOosSecretParameters";
export const getOosSecretParameters: typeof import("./getOosSecretParameters").getOosSecretParameters = null as any;
export const getOosSecretParametersOutput: typeof import("./getOosSecretParameters").getOosSecretParametersOutput = null as any;
utilities.lazyLoad(exports, ["getOosSecretParameters","getOosSecretParametersOutput"], () => require("./getOosSecretParameters"));

export { GetOosStateConfigurationsArgs, GetOosStateConfigurationsResult, GetOosStateConfigurationsOutputArgs } from "./getOosStateConfigurations";
export const getOosStateConfigurations: typeof import("./getOosStateConfigurations").getOosStateConfigurations = null as any;
export const getOosStateConfigurationsOutput: typeof import("./getOosStateConfigurations").getOosStateConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getOosStateConfigurations","getOosStateConfigurationsOutput"], () => require("./getOosStateConfigurations"));

export { GetOosTemplatesArgs, GetOosTemplatesResult, GetOosTemplatesOutputArgs } from "./getOosTemplates";
export const getOosTemplates: typeof import("./getOosTemplates").getOosTemplates = null as any;
export const getOosTemplatesOutput: typeof import("./getOosTemplates").getOosTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getOosTemplates","getOosTemplatesOutput"], () => require("./getOosTemplates"));

export { GetOpenSearchAppGroupsArgs, GetOpenSearchAppGroupsResult, GetOpenSearchAppGroupsOutputArgs } from "./getOpenSearchAppGroups";
export const getOpenSearchAppGroups: typeof import("./getOpenSearchAppGroups").getOpenSearchAppGroups = null as any;
export const getOpenSearchAppGroupsOutput: typeof import("./getOpenSearchAppGroups").getOpenSearchAppGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getOpenSearchAppGroups","getOpenSearchAppGroupsOutput"], () => require("./getOpenSearchAppGroups"));

export { GetOssBucketObjectsArgs, GetOssBucketObjectsResult, GetOssBucketObjectsOutputArgs } from "./getOssBucketObjects";
export const getOssBucketObjects: typeof import("./getOssBucketObjects").getOssBucketObjects = null as any;
export const getOssBucketObjectsOutput: typeof import("./getOssBucketObjects").getOssBucketObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getOssBucketObjects","getOssBucketObjectsOutput"], () => require("./getOssBucketObjects"));

export { GetOssBucketsArgs, GetOssBucketsResult, GetOssBucketsOutputArgs } from "./getOssBuckets";
export const getOssBuckets: typeof import("./getOssBuckets").getOssBuckets = null as any;
export const getOssBucketsOutput: typeof import("./getOssBuckets").getOssBucketsOutput = null as any;
utilities.lazyLoad(exports, ["getOssBuckets","getOssBucketsOutput"], () => require("./getOssBuckets"));

export { GetOssServiceArgs, GetOssServiceResult, GetOssServiceOutputArgs } from "./getOssService";
export const getOssService: typeof import("./getOssService").getOssService = null as any;
export const getOssServiceOutput: typeof import("./getOssService").getOssServiceOutput = null as any;
utilities.lazyLoad(exports, ["getOssService","getOssServiceOutput"], () => require("./getOssService"));

export { GetOtsInstanceAttachmentsArgs, GetOtsInstanceAttachmentsResult, GetOtsInstanceAttachmentsOutputArgs } from "./getOtsInstanceAttachments";
export const getOtsInstanceAttachments: typeof import("./getOtsInstanceAttachments").getOtsInstanceAttachments = null as any;
export const getOtsInstanceAttachmentsOutput: typeof import("./getOtsInstanceAttachments").getOtsInstanceAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getOtsInstanceAttachments","getOtsInstanceAttachmentsOutput"], () => require("./getOtsInstanceAttachments"));

export { GetOtsInstancesArgs, GetOtsInstancesResult, GetOtsInstancesOutputArgs } from "./getOtsInstances";
export const getOtsInstances: typeof import("./getOtsInstances").getOtsInstances = null as any;
export const getOtsInstancesOutput: typeof import("./getOtsInstances").getOtsInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getOtsInstances","getOtsInstancesOutput"], () => require("./getOtsInstances"));

export { GetOtsSearchIndexesArgs, GetOtsSearchIndexesResult, GetOtsSearchIndexesOutputArgs } from "./getOtsSearchIndexes";
export const getOtsSearchIndexes: typeof import("./getOtsSearchIndexes").getOtsSearchIndexes = null as any;
export const getOtsSearchIndexesOutput: typeof import("./getOtsSearchIndexes").getOtsSearchIndexesOutput = null as any;
utilities.lazyLoad(exports, ["getOtsSearchIndexes","getOtsSearchIndexesOutput"], () => require("./getOtsSearchIndexes"));

export { GetOtsSecondaryIndexesArgs, GetOtsSecondaryIndexesResult, GetOtsSecondaryIndexesOutputArgs } from "./getOtsSecondaryIndexes";
export const getOtsSecondaryIndexes: typeof import("./getOtsSecondaryIndexes").getOtsSecondaryIndexes = null as any;
export const getOtsSecondaryIndexesOutput: typeof import("./getOtsSecondaryIndexes").getOtsSecondaryIndexesOutput = null as any;
utilities.lazyLoad(exports, ["getOtsSecondaryIndexes","getOtsSecondaryIndexesOutput"], () => require("./getOtsSecondaryIndexes"));

export { GetOtsServiceArgs, GetOtsServiceResult, GetOtsServiceOutputArgs } from "./getOtsService";
export const getOtsService: typeof import("./getOtsService").getOtsService = null as any;
export const getOtsServiceOutput: typeof import("./getOtsService").getOtsServiceOutput = null as any;
utilities.lazyLoad(exports, ["getOtsService","getOtsServiceOutput"], () => require("./getOtsService"));

export { GetOtsTablesArgs, GetOtsTablesResult, GetOtsTablesOutputArgs } from "./getOtsTables";
export const getOtsTables: typeof import("./getOtsTables").getOtsTables = null as any;
export const getOtsTablesOutput: typeof import("./getOtsTables").getOtsTablesOutput = null as any;
utilities.lazyLoad(exports, ["getOtsTables","getOtsTablesOutput"], () => require("./getOtsTables"));

export { GetOtsTunnelsArgs, GetOtsTunnelsResult, GetOtsTunnelsOutputArgs } from "./getOtsTunnels";
export const getOtsTunnels: typeof import("./getOtsTunnels").getOtsTunnels = null as any;
export const getOtsTunnelsOutput: typeof import("./getOtsTunnels").getOtsTunnelsOutput = null as any;
utilities.lazyLoad(exports, ["getOtsTunnels","getOtsTunnelsOutput"], () => require("./getOtsTunnels"));

export { GetPolardbAccountsArgs, GetPolardbAccountsResult, GetPolardbAccountsOutputArgs } from "./getPolardbAccounts";
export const getPolardbAccounts: typeof import("./getPolardbAccounts").getPolardbAccounts = null as any;
export const getPolardbAccountsOutput: typeof import("./getPolardbAccounts").getPolardbAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getPolardbAccounts","getPolardbAccountsOutput"], () => require("./getPolardbAccounts"));

export { GetPolardbClustersArgs, GetPolardbClustersResult, GetPolardbClustersOutputArgs } from "./getPolardbClusters";
export const getPolardbClusters: typeof import("./getPolardbClusters").getPolardbClusters = null as any;
export const getPolardbClustersOutput: typeof import("./getPolardbClusters").getPolardbClustersOutput = null as any;
utilities.lazyLoad(exports, ["getPolardbClusters","getPolardbClustersOutput"], () => require("./getPolardbClusters"));

export { GetPolardbDatabasesArgs, GetPolardbDatabasesResult, GetPolardbDatabasesOutputArgs } from "./getPolardbDatabases";
export const getPolardbDatabases: typeof import("./getPolardbDatabases").getPolardbDatabases = null as any;
export const getPolardbDatabasesOutput: typeof import("./getPolardbDatabases").getPolardbDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getPolardbDatabases","getPolardbDatabasesOutput"], () => require("./getPolardbDatabases"));

export { GetPolardbEndpointsArgs, GetPolardbEndpointsResult, GetPolardbEndpointsOutputArgs } from "./getPolardbEndpoints";
export const getPolardbEndpoints: typeof import("./getPolardbEndpoints").getPolardbEndpoints = null as any;
export const getPolardbEndpointsOutput: typeof import("./getPolardbEndpoints").getPolardbEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getPolardbEndpoints","getPolardbEndpointsOutput"], () => require("./getPolardbEndpoints"));

export { GetPolardbGlobalDatabaseNetworksArgs, GetPolardbGlobalDatabaseNetworksResult, GetPolardbGlobalDatabaseNetworksOutputArgs } from "./getPolardbGlobalDatabaseNetworks";
export const getPolardbGlobalDatabaseNetworks: typeof import("./getPolardbGlobalDatabaseNetworks").getPolardbGlobalDatabaseNetworks = null as any;
export const getPolardbGlobalDatabaseNetworksOutput: typeof import("./getPolardbGlobalDatabaseNetworks").getPolardbGlobalDatabaseNetworksOutput = null as any;
utilities.lazyLoad(exports, ["getPolardbGlobalDatabaseNetworks","getPolardbGlobalDatabaseNetworksOutput"], () => require("./getPolardbGlobalDatabaseNetworks"));

export { GetPolardbNodeClassesArgs, GetPolardbNodeClassesResult, GetPolardbNodeClassesOutputArgs } from "./getPolardbNodeClasses";
export const getPolardbNodeClasses: typeof import("./getPolardbNodeClasses").getPolardbNodeClasses = null as any;
export const getPolardbNodeClassesOutput: typeof import("./getPolardbNodeClasses").getPolardbNodeClassesOutput = null as any;
utilities.lazyLoad(exports, ["getPolardbNodeClasses","getPolardbNodeClassesOutput"], () => require("./getPolardbNodeClasses"));

export { GetPolardbParameterGroupsArgs, GetPolardbParameterGroupsResult, GetPolardbParameterGroupsOutputArgs } from "./getPolardbParameterGroups";
export const getPolardbParameterGroups: typeof import("./getPolardbParameterGroups").getPolardbParameterGroups = null as any;
export const getPolardbParameterGroupsOutput: typeof import("./getPolardbParameterGroups").getPolardbParameterGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getPolardbParameterGroups","getPolardbParameterGroupsOutput"], () => require("./getPolardbParameterGroups"));

export { GetPolardbZonesArgs, GetPolardbZonesResult, GetPolardbZonesOutputArgs } from "./getPolardbZones";
export const getPolardbZones: typeof import("./getPolardbZones").getPolardbZones = null as any;
export const getPolardbZonesOutput: typeof import("./getPolardbZones").getPolardbZonesOutput = null as any;
utilities.lazyLoad(exports, ["getPolardbZones","getPolardbZonesOutput"], () => require("./getPolardbZones"));

export { GetPrivatelinkServiceArgs, GetPrivatelinkServiceResult, GetPrivatelinkServiceOutputArgs } from "./getPrivatelinkService";
export const getPrivatelinkService: typeof import("./getPrivatelinkService").getPrivatelinkService = null as any;
export const getPrivatelinkServiceOutput: typeof import("./getPrivatelinkService").getPrivatelinkServiceOutput = null as any;
utilities.lazyLoad(exports, ["getPrivatelinkService","getPrivatelinkServiceOutput"], () => require("./getPrivatelinkService"));

export { GetPrivatelinkVpcEndpointConnectionsArgs, GetPrivatelinkVpcEndpointConnectionsResult, GetPrivatelinkVpcEndpointConnectionsOutputArgs } from "./getPrivatelinkVpcEndpointConnections";
export const getPrivatelinkVpcEndpointConnections: typeof import("./getPrivatelinkVpcEndpointConnections").getPrivatelinkVpcEndpointConnections = null as any;
export const getPrivatelinkVpcEndpointConnectionsOutput: typeof import("./getPrivatelinkVpcEndpointConnections").getPrivatelinkVpcEndpointConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getPrivatelinkVpcEndpointConnections","getPrivatelinkVpcEndpointConnectionsOutput"], () => require("./getPrivatelinkVpcEndpointConnections"));

export { GetPrivatelinkVpcEndpointServiceResourcesArgs, GetPrivatelinkVpcEndpointServiceResourcesResult, GetPrivatelinkVpcEndpointServiceResourcesOutputArgs } from "./getPrivatelinkVpcEndpointServiceResources";
export const getPrivatelinkVpcEndpointServiceResources: typeof import("./getPrivatelinkVpcEndpointServiceResources").getPrivatelinkVpcEndpointServiceResources = null as any;
export const getPrivatelinkVpcEndpointServiceResourcesOutput: typeof import("./getPrivatelinkVpcEndpointServiceResources").getPrivatelinkVpcEndpointServiceResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getPrivatelinkVpcEndpointServiceResources","getPrivatelinkVpcEndpointServiceResourcesOutput"], () => require("./getPrivatelinkVpcEndpointServiceResources"));

export { GetPrivatelinkVpcEndpointServiceUsersArgs, GetPrivatelinkVpcEndpointServiceUsersResult, GetPrivatelinkVpcEndpointServiceUsersOutputArgs } from "./getPrivatelinkVpcEndpointServiceUsers";
export const getPrivatelinkVpcEndpointServiceUsers: typeof import("./getPrivatelinkVpcEndpointServiceUsers").getPrivatelinkVpcEndpointServiceUsers = null as any;
export const getPrivatelinkVpcEndpointServiceUsersOutput: typeof import("./getPrivatelinkVpcEndpointServiceUsers").getPrivatelinkVpcEndpointServiceUsersOutput = null as any;
utilities.lazyLoad(exports, ["getPrivatelinkVpcEndpointServiceUsers","getPrivatelinkVpcEndpointServiceUsersOutput"], () => require("./getPrivatelinkVpcEndpointServiceUsers"));

export { GetPrivatelinkVpcEndpointServicesArgs, GetPrivatelinkVpcEndpointServicesResult, GetPrivatelinkVpcEndpointServicesOutputArgs } from "./getPrivatelinkVpcEndpointServices";
export const getPrivatelinkVpcEndpointServices: typeof import("./getPrivatelinkVpcEndpointServices").getPrivatelinkVpcEndpointServices = null as any;
export const getPrivatelinkVpcEndpointServicesOutput: typeof import("./getPrivatelinkVpcEndpointServices").getPrivatelinkVpcEndpointServicesOutput = null as any;
utilities.lazyLoad(exports, ["getPrivatelinkVpcEndpointServices","getPrivatelinkVpcEndpointServicesOutput"], () => require("./getPrivatelinkVpcEndpointServices"));

export { GetPrivatelinkVpcEndpointZonesArgs, GetPrivatelinkVpcEndpointZonesResult, GetPrivatelinkVpcEndpointZonesOutputArgs } from "./getPrivatelinkVpcEndpointZones";
export const getPrivatelinkVpcEndpointZones: typeof import("./getPrivatelinkVpcEndpointZones").getPrivatelinkVpcEndpointZones = null as any;
export const getPrivatelinkVpcEndpointZonesOutput: typeof import("./getPrivatelinkVpcEndpointZones").getPrivatelinkVpcEndpointZonesOutput = null as any;
utilities.lazyLoad(exports, ["getPrivatelinkVpcEndpointZones","getPrivatelinkVpcEndpointZonesOutput"], () => require("./getPrivatelinkVpcEndpointZones"));

export { GetPrivatelinkVpcEndpointsArgs, GetPrivatelinkVpcEndpointsResult, GetPrivatelinkVpcEndpointsOutputArgs } from "./getPrivatelinkVpcEndpoints";
export const getPrivatelinkVpcEndpoints: typeof import("./getPrivatelinkVpcEndpoints").getPrivatelinkVpcEndpoints = null as any;
export const getPrivatelinkVpcEndpointsOutput: typeof import("./getPrivatelinkVpcEndpoints").getPrivatelinkVpcEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getPrivatelinkVpcEndpoints","getPrivatelinkVpcEndpointsOutput"], () => require("./getPrivatelinkVpcEndpoints"));

export { GetPvtzEndpointsArgs, GetPvtzEndpointsResult, GetPvtzEndpointsOutputArgs } from "./getPvtzEndpoints";
export const getPvtzEndpoints: typeof import("./getPvtzEndpoints").getPvtzEndpoints = null as any;
export const getPvtzEndpointsOutput: typeof import("./getPvtzEndpoints").getPvtzEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getPvtzEndpoints","getPvtzEndpointsOutput"], () => require("./getPvtzEndpoints"));

export { GetPvtzResolverZonesArgs, GetPvtzResolverZonesResult, GetPvtzResolverZonesOutputArgs } from "./getPvtzResolverZones";
export const getPvtzResolverZones: typeof import("./getPvtzResolverZones").getPvtzResolverZones = null as any;
export const getPvtzResolverZonesOutput: typeof import("./getPvtzResolverZones").getPvtzResolverZonesOutput = null as any;
utilities.lazyLoad(exports, ["getPvtzResolverZones","getPvtzResolverZonesOutput"], () => require("./getPvtzResolverZones"));

export { GetPvtzRulesArgs, GetPvtzRulesResult, GetPvtzRulesOutputArgs } from "./getPvtzRules";
export const getPvtzRules: typeof import("./getPvtzRules").getPvtzRules = null as any;
export const getPvtzRulesOutput: typeof import("./getPvtzRules").getPvtzRulesOutput = null as any;
utilities.lazyLoad(exports, ["getPvtzRules","getPvtzRulesOutput"], () => require("./getPvtzRules"));

export { GetPvtzServiceArgs, GetPvtzServiceResult, GetPvtzServiceOutputArgs } from "./getPvtzService";
export const getPvtzService: typeof import("./getPvtzService").getPvtzService = null as any;
export const getPvtzServiceOutput: typeof import("./getPvtzService").getPvtzServiceOutput = null as any;
utilities.lazyLoad(exports, ["getPvtzService","getPvtzServiceOutput"], () => require("./getPvtzService"));

export { GetPvtzZoneRecordsArgs, GetPvtzZoneRecordsResult, GetPvtzZoneRecordsOutputArgs } from "./getPvtzZoneRecords";
export const getPvtzZoneRecords: typeof import("./getPvtzZoneRecords").getPvtzZoneRecords = null as any;
export const getPvtzZoneRecordsOutput: typeof import("./getPvtzZoneRecords").getPvtzZoneRecordsOutput = null as any;
utilities.lazyLoad(exports, ["getPvtzZoneRecords","getPvtzZoneRecordsOutput"], () => require("./getPvtzZoneRecords"));

export { GetPvtzZonesArgs, GetPvtzZonesResult, GetPvtzZonesOutputArgs } from "./getPvtzZones";
export const getPvtzZones: typeof import("./getPvtzZones").getPvtzZones = null as any;
export const getPvtzZonesOutput: typeof import("./getPvtzZones").getPvtzZonesOutput = null as any;
utilities.lazyLoad(exports, ["getPvtzZones","getPvtzZonesOutput"], () => require("./getPvtzZones"));

export { GetQuickBiUsersArgs, GetQuickBiUsersResult, GetQuickBiUsersOutputArgs } from "./getQuickBiUsers";
export const getQuickBiUsers: typeof import("./getQuickBiUsers").getQuickBiUsers = null as any;
export const getQuickBiUsersOutput: typeof import("./getQuickBiUsers").getQuickBiUsersOutput = null as any;
utilities.lazyLoad(exports, ["getQuickBiUsers","getQuickBiUsersOutput"], () => require("./getQuickBiUsers"));

export { GetQuotasApplicationInfosArgs, GetQuotasApplicationInfosResult, GetQuotasApplicationInfosOutputArgs } from "./getQuotasApplicationInfos";
export const getQuotasApplicationInfos: typeof import("./getQuotasApplicationInfos").getQuotasApplicationInfos = null as any;
export const getQuotasApplicationInfosOutput: typeof import("./getQuotasApplicationInfos").getQuotasApplicationInfosOutput = null as any;
utilities.lazyLoad(exports, ["getQuotasApplicationInfos","getQuotasApplicationInfosOutput"], () => require("./getQuotasApplicationInfos"));

export { GetQuotasQuotaAlarmsArgs, GetQuotasQuotaAlarmsResult, GetQuotasQuotaAlarmsOutputArgs } from "./getQuotasQuotaAlarms";
export const getQuotasQuotaAlarms: typeof import("./getQuotasQuotaAlarms").getQuotasQuotaAlarms = null as any;
export const getQuotasQuotaAlarmsOutput: typeof import("./getQuotasQuotaAlarms").getQuotasQuotaAlarmsOutput = null as any;
utilities.lazyLoad(exports, ["getQuotasQuotaAlarms","getQuotasQuotaAlarmsOutput"], () => require("./getQuotasQuotaAlarms"));

export { GetQuotasQuotaApplicationsArgs, GetQuotasQuotaApplicationsResult, GetQuotasQuotaApplicationsOutputArgs } from "./getQuotasQuotaApplications";
export const getQuotasQuotaApplications: typeof import("./getQuotasQuotaApplications").getQuotasQuotaApplications = null as any;
export const getQuotasQuotaApplicationsOutput: typeof import("./getQuotasQuotaApplications").getQuotasQuotaApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getQuotasQuotaApplications","getQuotasQuotaApplicationsOutput"], () => require("./getQuotasQuotaApplications"));

export { GetQuotasQuotasArgs, GetQuotasQuotasResult, GetQuotasQuotasOutputArgs } from "./getQuotasQuotas";
export const getQuotasQuotas: typeof import("./getQuotasQuotas").getQuotasQuotas = null as any;
export const getQuotasQuotasOutput: typeof import("./getQuotasQuotas").getQuotasQuotasOutput = null as any;
utilities.lazyLoad(exports, ["getQuotasQuotas","getQuotasQuotasOutput"], () => require("./getQuotasQuotas"));

export { GetQuotasTemplateApplicationsArgs, GetQuotasTemplateApplicationsResult, GetQuotasTemplateApplicationsOutputArgs } from "./getQuotasTemplateApplications";
export const getQuotasTemplateApplications: typeof import("./getQuotasTemplateApplications").getQuotasTemplateApplications = null as any;
export const getQuotasTemplateApplicationsOutput: typeof import("./getQuotasTemplateApplications").getQuotasTemplateApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getQuotasTemplateApplications","getQuotasTemplateApplicationsOutput"], () => require("./getQuotasTemplateApplications"));

export { GetRamAccountAliasArgs, GetRamAccountAliasResult, GetRamAccountAliasOutputArgs } from "./getRamAccountAlias";
export const getRamAccountAlias: typeof import("./getRamAccountAlias").getRamAccountAlias = null as any;
export const getRamAccountAliasOutput: typeof import("./getRamAccountAlias").getRamAccountAliasOutput = null as any;
utilities.lazyLoad(exports, ["getRamAccountAlias","getRamAccountAliasOutput"], () => require("./getRamAccountAlias"));

export { GetRamAccountAliasesArgs, GetRamAccountAliasesResult, GetRamAccountAliasesOutputArgs } from "./getRamAccountAliases";
export const getRamAccountAliases: typeof import("./getRamAccountAliases").getRamAccountAliases = null as any;
export const getRamAccountAliasesOutput: typeof import("./getRamAccountAliases").getRamAccountAliasesOutput = null as any;
utilities.lazyLoad(exports, ["getRamAccountAliases","getRamAccountAliasesOutput"], () => require("./getRamAccountAliases"));

export { GetRamGroupsArgs, GetRamGroupsResult, GetRamGroupsOutputArgs } from "./getRamGroups";
export const getRamGroups: typeof import("./getRamGroups").getRamGroups = null as any;
export const getRamGroupsOutput: typeof import("./getRamGroups").getRamGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getRamGroups","getRamGroupsOutput"], () => require("./getRamGroups"));

export { GetRamPoliciesArgs, GetRamPoliciesResult, GetRamPoliciesOutputArgs } from "./getRamPolicies";
export const getRamPolicies: typeof import("./getRamPolicies").getRamPolicies = null as any;
export const getRamPoliciesOutput: typeof import("./getRamPolicies").getRamPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getRamPolicies","getRamPoliciesOutput"], () => require("./getRamPolicies"));

export { GetRamPolicyDocumentArgs, GetRamPolicyDocumentResult, GetRamPolicyDocumentOutputArgs } from "./getRamPolicyDocument";
export const getRamPolicyDocument: typeof import("./getRamPolicyDocument").getRamPolicyDocument = null as any;
export const getRamPolicyDocumentOutput: typeof import("./getRamPolicyDocument").getRamPolicyDocumentOutput = null as any;
utilities.lazyLoad(exports, ["getRamPolicyDocument","getRamPolicyDocumentOutput"], () => require("./getRamPolicyDocument"));

export { GetRamRolesArgs, GetRamRolesResult, GetRamRolesOutputArgs } from "./getRamRoles";
export const getRamRoles: typeof import("./getRamRoles").getRamRoles = null as any;
export const getRamRolesOutput: typeof import("./getRamRoles").getRamRolesOutput = null as any;
utilities.lazyLoad(exports, ["getRamRoles","getRamRolesOutput"], () => require("./getRamRoles"));

export { GetRamSamlProvidersArgs, GetRamSamlProvidersResult, GetRamSamlProvidersOutputArgs } from "./getRamSamlProviders";
export const getRamSamlProviders: typeof import("./getRamSamlProviders").getRamSamlProviders = null as any;
export const getRamSamlProvidersOutput: typeof import("./getRamSamlProviders").getRamSamlProvidersOutput = null as any;
utilities.lazyLoad(exports, ["getRamSamlProviders","getRamSamlProvidersOutput"], () => require("./getRamSamlProviders"));

export { GetRamUsersArgs, GetRamUsersResult, GetRamUsersOutputArgs } from "./getRamUsers";
export const getRamUsers: typeof import("./getRamUsers").getRamUsers = null as any;
export const getRamUsersOutput: typeof import("./getRamUsers").getRamUsersOutput = null as any;
utilities.lazyLoad(exports, ["getRamUsers","getRamUsersOutput"], () => require("./getRamUsers"));

export { GetRdcOrganizationsArgs, GetRdcOrganizationsResult, GetRdcOrganizationsOutputArgs } from "./getRdcOrganizations";
export const getRdcOrganizations: typeof import("./getRdcOrganizations").getRdcOrganizations = null as any;
export const getRdcOrganizationsOutput: typeof import("./getRdcOrganizations").getRdcOrganizationsOutput = null as any;
utilities.lazyLoad(exports, ["getRdcOrganizations","getRdcOrganizationsOutput"], () => require("./getRdcOrganizations"));

export { GetRdsAccountsArgs, GetRdsAccountsResult, GetRdsAccountsOutputArgs } from "./getRdsAccounts";
export const getRdsAccounts: typeof import("./getRdsAccounts").getRdsAccounts = null as any;
export const getRdsAccountsOutput: typeof import("./getRdsAccounts").getRdsAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getRdsAccounts","getRdsAccountsOutput"], () => require("./getRdsAccounts"));

export { GetRdsBackupsArgs, GetRdsBackupsResult, GetRdsBackupsOutputArgs } from "./getRdsBackups";
export const getRdsBackups: typeof import("./getRdsBackups").getRdsBackups = null as any;
export const getRdsBackupsOutput: typeof import("./getRdsBackups").getRdsBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getRdsBackups","getRdsBackupsOutput"], () => require("./getRdsBackups"));

export { GetRdsCharacterSetNamesArgs, GetRdsCharacterSetNamesResult, GetRdsCharacterSetNamesOutputArgs } from "./getRdsCharacterSetNames";
export const getRdsCharacterSetNames: typeof import("./getRdsCharacterSetNames").getRdsCharacterSetNames = null as any;
export const getRdsCharacterSetNamesOutput: typeof import("./getRdsCharacterSetNames").getRdsCharacterSetNamesOutput = null as any;
utilities.lazyLoad(exports, ["getRdsCharacterSetNames","getRdsCharacterSetNamesOutput"], () => require("./getRdsCharacterSetNames"));

export { GetRdsClassDetailsArgs, GetRdsClassDetailsResult, GetRdsClassDetailsOutputArgs } from "./getRdsClassDetails";
export const getRdsClassDetails: typeof import("./getRdsClassDetails").getRdsClassDetails = null as any;
export const getRdsClassDetailsOutput: typeof import("./getRdsClassDetails").getRdsClassDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getRdsClassDetails","getRdsClassDetailsOutput"], () => require("./getRdsClassDetails"));

export { GetRdsCollationTimeZonesArgs, GetRdsCollationTimeZonesResult, GetRdsCollationTimeZonesOutputArgs } from "./getRdsCollationTimeZones";
export const getRdsCollationTimeZones: typeof import("./getRdsCollationTimeZones").getRdsCollationTimeZones = null as any;
export const getRdsCollationTimeZonesOutput: typeof import("./getRdsCollationTimeZones").getRdsCollationTimeZonesOutput = null as any;
utilities.lazyLoad(exports, ["getRdsCollationTimeZones","getRdsCollationTimeZonesOutput"], () => require("./getRdsCollationTimeZones"));

export { GetRdsCrossRegionBackupsArgs, GetRdsCrossRegionBackupsResult, GetRdsCrossRegionBackupsOutputArgs } from "./getRdsCrossRegionBackups";
export const getRdsCrossRegionBackups: typeof import("./getRdsCrossRegionBackups").getRdsCrossRegionBackups = null as any;
export const getRdsCrossRegionBackupsOutput: typeof import("./getRdsCrossRegionBackups").getRdsCrossRegionBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getRdsCrossRegionBackups","getRdsCrossRegionBackupsOutput"], () => require("./getRdsCrossRegionBackups"));

export { GetRdsCrossRegionsArgs, GetRdsCrossRegionsResult, GetRdsCrossRegionsOutputArgs } from "./getRdsCrossRegions";
export const getRdsCrossRegions: typeof import("./getRdsCrossRegions").getRdsCrossRegions = null as any;
export const getRdsCrossRegionsOutput: typeof import("./getRdsCrossRegions").getRdsCrossRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getRdsCrossRegions","getRdsCrossRegionsOutput"], () => require("./getRdsCrossRegions"));

export { GetRdsModifyParameterLogsArgs, GetRdsModifyParameterLogsResult, GetRdsModifyParameterLogsOutputArgs } from "./getRdsModifyParameterLogs";
export const getRdsModifyParameterLogs: typeof import("./getRdsModifyParameterLogs").getRdsModifyParameterLogs = null as any;
export const getRdsModifyParameterLogsOutput: typeof import("./getRdsModifyParameterLogs").getRdsModifyParameterLogsOutput = null as any;
utilities.lazyLoad(exports, ["getRdsModifyParameterLogs","getRdsModifyParameterLogsOutput"], () => require("./getRdsModifyParameterLogs"));

export { GetRdsParameterGroupsArgs, GetRdsParameterGroupsResult, GetRdsParameterGroupsOutputArgs } from "./getRdsParameterGroups";
export const getRdsParameterGroups: typeof import("./getRdsParameterGroups").getRdsParameterGroups = null as any;
export const getRdsParameterGroupsOutput: typeof import("./getRdsParameterGroups").getRdsParameterGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getRdsParameterGroups","getRdsParameterGroupsOutput"], () => require("./getRdsParameterGroups"));

export { GetRdsSlotsArgs, GetRdsSlotsResult, GetRdsSlotsOutputArgs } from "./getRdsSlots";
export const getRdsSlots: typeof import("./getRdsSlots").getRdsSlots = null as any;
export const getRdsSlotsOutput: typeof import("./getRdsSlots").getRdsSlotsOutput = null as any;
utilities.lazyLoad(exports, ["getRdsSlots","getRdsSlotsOutput"], () => require("./getRdsSlots"));

export { GetRegionsArgs, GetRegionsResult, GetRegionsOutputArgs } from "./getRegions";
export const getRegions: typeof import("./getRegions").getRegions = null as any;
export const getRegionsOutput: typeof import("./getRegions").getRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getRegions","getRegionsOutput"], () => require("./getRegions"));

export { GetResourceManagerAccountDeletionCheckTaskArgs, GetResourceManagerAccountDeletionCheckTaskResult, GetResourceManagerAccountDeletionCheckTaskOutputArgs } from "./getResourceManagerAccountDeletionCheckTask";
export const getResourceManagerAccountDeletionCheckTask: typeof import("./getResourceManagerAccountDeletionCheckTask").getResourceManagerAccountDeletionCheckTask = null as any;
export const getResourceManagerAccountDeletionCheckTaskOutput: typeof import("./getResourceManagerAccountDeletionCheckTask").getResourceManagerAccountDeletionCheckTaskOutput = null as any;
utilities.lazyLoad(exports, ["getResourceManagerAccountDeletionCheckTask","getResourceManagerAccountDeletionCheckTaskOutput"], () => require("./getResourceManagerAccountDeletionCheckTask"));

export { GetResourceManagerAccountsArgs, GetResourceManagerAccountsResult, GetResourceManagerAccountsOutputArgs } from "./getResourceManagerAccounts";
export const getResourceManagerAccounts: typeof import("./getResourceManagerAccounts").getResourceManagerAccounts = null as any;
export const getResourceManagerAccountsOutput: typeof import("./getResourceManagerAccounts").getResourceManagerAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getResourceManagerAccounts","getResourceManagerAccountsOutput"], () => require("./getResourceManagerAccounts"));

export { GetResourceManagerControlPoliciesArgs, GetResourceManagerControlPoliciesResult, GetResourceManagerControlPoliciesOutputArgs } from "./getResourceManagerControlPolicies";
export const getResourceManagerControlPolicies: typeof import("./getResourceManagerControlPolicies").getResourceManagerControlPolicies = null as any;
export const getResourceManagerControlPoliciesOutput: typeof import("./getResourceManagerControlPolicies").getResourceManagerControlPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getResourceManagerControlPolicies","getResourceManagerControlPoliciesOutput"], () => require("./getResourceManagerControlPolicies"));

export { GetResourceManagerControlPolicyAttachmentsArgs, GetResourceManagerControlPolicyAttachmentsResult, GetResourceManagerControlPolicyAttachmentsOutputArgs } from "./getResourceManagerControlPolicyAttachments";
export const getResourceManagerControlPolicyAttachments: typeof import("./getResourceManagerControlPolicyAttachments").getResourceManagerControlPolicyAttachments = null as any;
export const getResourceManagerControlPolicyAttachmentsOutput: typeof import("./getResourceManagerControlPolicyAttachments").getResourceManagerControlPolicyAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getResourceManagerControlPolicyAttachments","getResourceManagerControlPolicyAttachmentsOutput"], () => require("./getResourceManagerControlPolicyAttachments"));

export { GetResourceManagerDelegatedAdministratorsArgs, GetResourceManagerDelegatedAdministratorsResult, GetResourceManagerDelegatedAdministratorsOutputArgs } from "./getResourceManagerDelegatedAdministrators";
export const getResourceManagerDelegatedAdministrators: typeof import("./getResourceManagerDelegatedAdministrators").getResourceManagerDelegatedAdministrators = null as any;
export const getResourceManagerDelegatedAdministratorsOutput: typeof import("./getResourceManagerDelegatedAdministrators").getResourceManagerDelegatedAdministratorsOutput = null as any;
utilities.lazyLoad(exports, ["getResourceManagerDelegatedAdministrators","getResourceManagerDelegatedAdministratorsOutput"], () => require("./getResourceManagerDelegatedAdministrators"));

export { GetResourceManagerFoldersArgs, GetResourceManagerFoldersResult, GetResourceManagerFoldersOutputArgs } from "./getResourceManagerFolders";
export const getResourceManagerFolders: typeof import("./getResourceManagerFolders").getResourceManagerFolders = null as any;
export const getResourceManagerFoldersOutput: typeof import("./getResourceManagerFolders").getResourceManagerFoldersOutput = null as any;
utilities.lazyLoad(exports, ["getResourceManagerFolders","getResourceManagerFoldersOutput"], () => require("./getResourceManagerFolders"));

export { GetResourceManagerHandshakesArgs, GetResourceManagerHandshakesResult, GetResourceManagerHandshakesOutputArgs } from "./getResourceManagerHandshakes";
export const getResourceManagerHandshakes: typeof import("./getResourceManagerHandshakes").getResourceManagerHandshakes = null as any;
export const getResourceManagerHandshakesOutput: typeof import("./getResourceManagerHandshakes").getResourceManagerHandshakesOutput = null as any;
utilities.lazyLoad(exports, ["getResourceManagerHandshakes","getResourceManagerHandshakesOutput"], () => require("./getResourceManagerHandshakes"));

export { GetResourceManagerPoliciesArgs, GetResourceManagerPoliciesResult, GetResourceManagerPoliciesOutputArgs } from "./getResourceManagerPolicies";
export const getResourceManagerPolicies: typeof import("./getResourceManagerPolicies").getResourceManagerPolicies = null as any;
export const getResourceManagerPoliciesOutput: typeof import("./getResourceManagerPolicies").getResourceManagerPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getResourceManagerPolicies","getResourceManagerPoliciesOutput"], () => require("./getResourceManagerPolicies"));

export { GetResourceManagerPolicyAttachmentsArgs, GetResourceManagerPolicyAttachmentsResult, GetResourceManagerPolicyAttachmentsOutputArgs } from "./getResourceManagerPolicyAttachments";
export const getResourceManagerPolicyAttachments: typeof import("./getResourceManagerPolicyAttachments").getResourceManagerPolicyAttachments = null as any;
export const getResourceManagerPolicyAttachmentsOutput: typeof import("./getResourceManagerPolicyAttachments").getResourceManagerPolicyAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getResourceManagerPolicyAttachments","getResourceManagerPolicyAttachmentsOutput"], () => require("./getResourceManagerPolicyAttachments"));

export { GetResourceManagerPolicyVersionsArgs, GetResourceManagerPolicyVersionsResult, GetResourceManagerPolicyVersionsOutputArgs } from "./getResourceManagerPolicyVersions";
export const getResourceManagerPolicyVersions: typeof import("./getResourceManagerPolicyVersions").getResourceManagerPolicyVersions = null as any;
export const getResourceManagerPolicyVersionsOutput: typeof import("./getResourceManagerPolicyVersions").getResourceManagerPolicyVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getResourceManagerPolicyVersions","getResourceManagerPolicyVersionsOutput"], () => require("./getResourceManagerPolicyVersions"));

export { GetResourceManagerResourceDirectoriesArgs, GetResourceManagerResourceDirectoriesResult, GetResourceManagerResourceDirectoriesOutputArgs } from "./getResourceManagerResourceDirectories";
export const getResourceManagerResourceDirectories: typeof import("./getResourceManagerResourceDirectories").getResourceManagerResourceDirectories = null as any;
export const getResourceManagerResourceDirectoriesOutput: typeof import("./getResourceManagerResourceDirectories").getResourceManagerResourceDirectoriesOutput = null as any;
utilities.lazyLoad(exports, ["getResourceManagerResourceDirectories","getResourceManagerResourceDirectoriesOutput"], () => require("./getResourceManagerResourceDirectories"));

export { GetResourceManagerResourceGroupsArgs, GetResourceManagerResourceGroupsResult, GetResourceManagerResourceGroupsOutputArgs } from "./getResourceManagerResourceGroups";
export const getResourceManagerResourceGroups: typeof import("./getResourceManagerResourceGroups").getResourceManagerResourceGroups = null as any;
export const getResourceManagerResourceGroupsOutput: typeof import("./getResourceManagerResourceGroups").getResourceManagerResourceGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getResourceManagerResourceGroups","getResourceManagerResourceGroupsOutput"], () => require("./getResourceManagerResourceGroups"));

export { GetResourceManagerResourceSharesArgs, GetResourceManagerResourceSharesResult, GetResourceManagerResourceSharesOutputArgs } from "./getResourceManagerResourceShares";
export const getResourceManagerResourceShares: typeof import("./getResourceManagerResourceShares").getResourceManagerResourceShares = null as any;
export const getResourceManagerResourceSharesOutput: typeof import("./getResourceManagerResourceShares").getResourceManagerResourceSharesOutput = null as any;
utilities.lazyLoad(exports, ["getResourceManagerResourceShares","getResourceManagerResourceSharesOutput"], () => require("./getResourceManagerResourceShares"));

export { GetResourceManagerRolesArgs, GetResourceManagerRolesResult, GetResourceManagerRolesOutputArgs } from "./getResourceManagerRoles";
export const getResourceManagerRoles: typeof import("./getResourceManagerRoles").getResourceManagerRoles = null as any;
export const getResourceManagerRolesOutput: typeof import("./getResourceManagerRoles").getResourceManagerRolesOutput = null as any;
utilities.lazyLoad(exports, ["getResourceManagerRoles","getResourceManagerRolesOutput"], () => require("./getResourceManagerRoles"));

export { GetResourceManagerSharedResourcesArgs, GetResourceManagerSharedResourcesResult, GetResourceManagerSharedResourcesOutputArgs } from "./getResourceManagerSharedResources";
export const getResourceManagerSharedResources: typeof import("./getResourceManagerSharedResources").getResourceManagerSharedResources = null as any;
export const getResourceManagerSharedResourcesOutput: typeof import("./getResourceManagerSharedResources").getResourceManagerSharedResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getResourceManagerSharedResources","getResourceManagerSharedResourcesOutput"], () => require("./getResourceManagerSharedResources"));

export { GetResourceManagerSharedTargetsArgs, GetResourceManagerSharedTargetsResult, GetResourceManagerSharedTargetsOutputArgs } from "./getResourceManagerSharedTargets";
export const getResourceManagerSharedTargets: typeof import("./getResourceManagerSharedTargets").getResourceManagerSharedTargets = null as any;
export const getResourceManagerSharedTargetsOutput: typeof import("./getResourceManagerSharedTargets").getResourceManagerSharedTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getResourceManagerSharedTargets","getResourceManagerSharedTargetsOutput"], () => require("./getResourceManagerSharedTargets"));

export { GetRosChangeSetsArgs, GetRosChangeSetsResult, GetRosChangeSetsOutputArgs } from "./getRosChangeSets";
export const getRosChangeSets: typeof import("./getRosChangeSets").getRosChangeSets = null as any;
export const getRosChangeSetsOutput: typeof import("./getRosChangeSets").getRosChangeSetsOutput = null as any;
utilities.lazyLoad(exports, ["getRosChangeSets","getRosChangeSetsOutput"], () => require("./getRosChangeSets"));

export { GetRosRegionsArgs, GetRosRegionsResult, GetRosRegionsOutputArgs } from "./getRosRegions";
export const getRosRegions: typeof import("./getRosRegions").getRosRegions = null as any;
export const getRosRegionsOutput: typeof import("./getRosRegions").getRosRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getRosRegions","getRosRegionsOutput"], () => require("./getRosRegions"));

export { GetRosStackGroupsArgs, GetRosStackGroupsResult, GetRosStackGroupsOutputArgs } from "./getRosStackGroups";
export const getRosStackGroups: typeof import("./getRosStackGroups").getRosStackGroups = null as any;
export const getRosStackGroupsOutput: typeof import("./getRosStackGroups").getRosStackGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getRosStackGroups","getRosStackGroupsOutput"], () => require("./getRosStackGroups"));

export { GetRosStackInstancesArgs, GetRosStackInstancesResult, GetRosStackInstancesOutputArgs } from "./getRosStackInstances";
export const getRosStackInstances: typeof import("./getRosStackInstances").getRosStackInstances = null as any;
export const getRosStackInstancesOutput: typeof import("./getRosStackInstances").getRosStackInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getRosStackInstances","getRosStackInstancesOutput"], () => require("./getRosStackInstances"));

export { GetRosStacksArgs, GetRosStacksResult, GetRosStacksOutputArgs } from "./getRosStacks";
export const getRosStacks: typeof import("./getRosStacks").getRosStacks = null as any;
export const getRosStacksOutput: typeof import("./getRosStacks").getRosStacksOutput = null as any;
utilities.lazyLoad(exports, ["getRosStacks","getRosStacksOutput"], () => require("./getRosStacks"));

export { GetRosTemplateScratchesArgs, GetRosTemplateScratchesResult, GetRosTemplateScratchesOutputArgs } from "./getRosTemplateScratches";
export const getRosTemplateScratches: typeof import("./getRosTemplateScratches").getRosTemplateScratches = null as any;
export const getRosTemplateScratchesOutput: typeof import("./getRosTemplateScratches").getRosTemplateScratchesOutput = null as any;
utilities.lazyLoad(exports, ["getRosTemplateScratches","getRosTemplateScratchesOutput"], () => require("./getRosTemplateScratches"));

export { GetRosTemplatesArgs, GetRosTemplatesResult, GetRosTemplatesOutputArgs } from "./getRosTemplates";
export const getRosTemplates: typeof import("./getRosTemplates").getRosTemplates = null as any;
export const getRosTemplatesOutput: typeof import("./getRosTemplates").getRosTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getRosTemplates","getRosTemplatesOutput"], () => require("./getRosTemplates"));

export { GetRouteEntriesArgs, GetRouteEntriesResult, GetRouteEntriesOutputArgs } from "./getRouteEntries";
export const getRouteEntries: typeof import("./getRouteEntries").getRouteEntries = null as any;
export const getRouteEntriesOutput: typeof import("./getRouteEntries").getRouteEntriesOutput = null as any;
utilities.lazyLoad(exports, ["getRouteEntries","getRouteEntriesOutput"], () => require("./getRouteEntries"));

export { GetRouteTablesArgs, GetRouteTablesResult, GetRouteTablesOutputArgs } from "./getRouteTables";
export const getRouteTables: typeof import("./getRouteTables").getRouteTables = null as any;
export const getRouteTablesOutput: typeof import("./getRouteTables").getRouteTablesOutput = null as any;
utilities.lazyLoad(exports, ["getRouteTables","getRouteTablesOutput"], () => require("./getRouteTables"));

export { GetRouterInterfacesArgs, GetRouterInterfacesResult, GetRouterInterfacesOutputArgs } from "./getRouterInterfaces";
export const getRouterInterfaces: typeof import("./getRouterInterfaces").getRouterInterfaces = null as any;
export const getRouterInterfacesOutput: typeof import("./getRouterInterfaces").getRouterInterfacesOutput = null as any;
utilities.lazyLoad(exports, ["getRouterInterfaces","getRouterInterfacesOutput"], () => require("./getRouterInterfaces"));

export { GetSaeApplicationScalingRulesArgs, GetSaeApplicationScalingRulesResult, GetSaeApplicationScalingRulesOutputArgs } from "./getSaeApplicationScalingRules";
export const getSaeApplicationScalingRules: typeof import("./getSaeApplicationScalingRules").getSaeApplicationScalingRules = null as any;
export const getSaeApplicationScalingRulesOutput: typeof import("./getSaeApplicationScalingRules").getSaeApplicationScalingRulesOutput = null as any;
utilities.lazyLoad(exports, ["getSaeApplicationScalingRules","getSaeApplicationScalingRulesOutput"], () => require("./getSaeApplicationScalingRules"));

export { GetSaeApplicationsArgs, GetSaeApplicationsResult, GetSaeApplicationsOutputArgs } from "./getSaeApplications";
export const getSaeApplications: typeof import("./getSaeApplications").getSaeApplications = null as any;
export const getSaeApplicationsOutput: typeof import("./getSaeApplications").getSaeApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getSaeApplications","getSaeApplicationsOutput"], () => require("./getSaeApplications"));

export { GetSaeConfigMapsArgs, GetSaeConfigMapsResult, GetSaeConfigMapsOutputArgs } from "./getSaeConfigMaps";
export const getSaeConfigMaps: typeof import("./getSaeConfigMaps").getSaeConfigMaps = null as any;
export const getSaeConfigMapsOutput: typeof import("./getSaeConfigMaps").getSaeConfigMapsOutput = null as any;
utilities.lazyLoad(exports, ["getSaeConfigMaps","getSaeConfigMapsOutput"], () => require("./getSaeConfigMaps"));

export { GetSaeGreyTagRoutesArgs, GetSaeGreyTagRoutesResult, GetSaeGreyTagRoutesOutputArgs } from "./getSaeGreyTagRoutes";
export const getSaeGreyTagRoutes: typeof import("./getSaeGreyTagRoutes").getSaeGreyTagRoutes = null as any;
export const getSaeGreyTagRoutesOutput: typeof import("./getSaeGreyTagRoutes").getSaeGreyTagRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getSaeGreyTagRoutes","getSaeGreyTagRoutesOutput"], () => require("./getSaeGreyTagRoutes"));

export { GetSaeIngressesArgs, GetSaeIngressesResult, GetSaeIngressesOutputArgs } from "./getSaeIngresses";
export const getSaeIngresses: typeof import("./getSaeIngresses").getSaeIngresses = null as any;
export const getSaeIngressesOutput: typeof import("./getSaeIngresses").getSaeIngressesOutput = null as any;
utilities.lazyLoad(exports, ["getSaeIngresses","getSaeIngressesOutput"], () => require("./getSaeIngresses"));

export { GetSaeInstanceSpecificationsArgs, GetSaeInstanceSpecificationsResult, GetSaeInstanceSpecificationsOutputArgs } from "./getSaeInstanceSpecifications";
export const getSaeInstanceSpecifications: typeof import("./getSaeInstanceSpecifications").getSaeInstanceSpecifications = null as any;
export const getSaeInstanceSpecificationsOutput: typeof import("./getSaeInstanceSpecifications").getSaeInstanceSpecificationsOutput = null as any;
utilities.lazyLoad(exports, ["getSaeInstanceSpecifications","getSaeInstanceSpecificationsOutput"], () => require("./getSaeInstanceSpecifications"));

export { GetSaeNamespacesArgs, GetSaeNamespacesResult, GetSaeNamespacesOutputArgs } from "./getSaeNamespaces";
export const getSaeNamespaces: typeof import("./getSaeNamespaces").getSaeNamespaces = null as any;
export const getSaeNamespacesOutput: typeof import("./getSaeNamespaces").getSaeNamespacesOutput = null as any;
utilities.lazyLoad(exports, ["getSaeNamespaces","getSaeNamespacesOutput"], () => require("./getSaeNamespaces"));

export { GetSaeServiceArgs, GetSaeServiceResult, GetSaeServiceOutputArgs } from "./getSaeService";
export const getSaeService: typeof import("./getSaeService").getSaeService = null as any;
export const getSaeServiceOutput: typeof import("./getSaeService").getSaeServiceOutput = null as any;
utilities.lazyLoad(exports, ["getSaeService","getSaeServiceOutput"], () => require("./getSaeService"));

export { GetSagAclsArgs, GetSagAclsResult, GetSagAclsOutputArgs } from "./getSagAcls";
export const getSagAcls: typeof import("./getSagAcls").getSagAcls = null as any;
export const getSagAclsOutput: typeof import("./getSagAcls").getSagAclsOutput = null as any;
utilities.lazyLoad(exports, ["getSagAcls","getSagAclsOutput"], () => require("./getSagAcls"));

export { GetScdnDomainsArgs, GetScdnDomainsResult, GetScdnDomainsOutputArgs } from "./getScdnDomains";
export const getScdnDomains: typeof import("./getScdnDomains").getScdnDomains = null as any;
export const getScdnDomainsOutput: typeof import("./getScdnDomains").getScdnDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getScdnDomains","getScdnDomainsOutput"], () => require("./getScdnDomains"));

export { GetSchedulerxNamespacesArgs, GetSchedulerxNamespacesResult, GetSchedulerxNamespacesOutputArgs } from "./getSchedulerxNamespaces";
export const getSchedulerxNamespaces: typeof import("./getSchedulerxNamespaces").getSchedulerxNamespaces = null as any;
export const getSchedulerxNamespacesOutput: typeof import("./getSchedulerxNamespaces").getSchedulerxNamespacesOutput = null as any;
utilities.lazyLoad(exports, ["getSchedulerxNamespaces","getSchedulerxNamespacesOutput"], () => require("./getSchedulerxNamespaces"));

export { GetSddpConfigsArgs, GetSddpConfigsResult, GetSddpConfigsOutputArgs } from "./getSddpConfigs";
export const getSddpConfigs: typeof import("./getSddpConfigs").getSddpConfigs = null as any;
export const getSddpConfigsOutput: typeof import("./getSddpConfigs").getSddpConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getSddpConfigs","getSddpConfigsOutput"], () => require("./getSddpConfigs"));

export { GetSddpDataLimitsArgs, GetSddpDataLimitsResult, GetSddpDataLimitsOutputArgs } from "./getSddpDataLimits";
export const getSddpDataLimits: typeof import("./getSddpDataLimits").getSddpDataLimits = null as any;
export const getSddpDataLimitsOutput: typeof import("./getSddpDataLimits").getSddpDataLimitsOutput = null as any;
utilities.lazyLoad(exports, ["getSddpDataLimits","getSddpDataLimitsOutput"], () => require("./getSddpDataLimits"));

export { GetSddpInstancesArgs, GetSddpInstancesResult, GetSddpInstancesOutputArgs } from "./getSddpInstances";
export const getSddpInstances: typeof import("./getSddpInstances").getSddpInstances = null as any;
export const getSddpInstancesOutput: typeof import("./getSddpInstances").getSddpInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getSddpInstances","getSddpInstancesOutput"], () => require("./getSddpInstances"));

export { GetSddpRulesArgs, GetSddpRulesResult, GetSddpRulesOutputArgs } from "./getSddpRules";
export const getSddpRules: typeof import("./getSddpRules").getSddpRules = null as any;
export const getSddpRulesOutput: typeof import("./getSddpRules").getSddpRulesOutput = null as any;
utilities.lazyLoad(exports, ["getSddpRules","getSddpRulesOutput"], () => require("./getSddpRules"));

export { GetSecurityCenterGroupsArgs, GetSecurityCenterGroupsResult, GetSecurityCenterGroupsOutputArgs } from "./getSecurityCenterGroups";
export const getSecurityCenterGroups: typeof import("./getSecurityCenterGroups").getSecurityCenterGroups = null as any;
export const getSecurityCenterGroupsOutput: typeof import("./getSecurityCenterGroups").getSecurityCenterGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityCenterGroups","getSecurityCenterGroupsOutput"], () => require("./getSecurityCenterGroups"));

export { GetSecurityGroupRulesArgs, GetSecurityGroupRulesResult, GetSecurityGroupRulesOutputArgs } from "./getSecurityGroupRules";
export const getSecurityGroupRules: typeof import("./getSecurityGroupRules").getSecurityGroupRules = null as any;
export const getSecurityGroupRulesOutput: typeof import("./getSecurityGroupRules").getSecurityGroupRulesOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroupRules","getSecurityGroupRulesOutput"], () => require("./getSecurityGroupRules"));

export { GetSecurityGroupsArgs, GetSecurityGroupsResult, GetSecurityGroupsOutputArgs } from "./getSecurityGroups";
export const getSecurityGroups: typeof import("./getSecurityGroups").getSecurityGroups = null as any;
export const getSecurityGroupsOutput: typeof import("./getSecurityGroups").getSecurityGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroups","getSecurityGroupsOutput"], () => require("./getSecurityGroups"));

export { GetSelectdbDbClustersArgs, GetSelectdbDbClustersResult, GetSelectdbDbClustersOutputArgs } from "./getSelectdbDbClusters";
export const getSelectdbDbClusters: typeof import("./getSelectdbDbClusters").getSelectdbDbClusters = null as any;
export const getSelectdbDbClustersOutput: typeof import("./getSelectdbDbClusters").getSelectdbDbClustersOutput = null as any;
utilities.lazyLoad(exports, ["getSelectdbDbClusters","getSelectdbDbClustersOutput"], () => require("./getSelectdbDbClusters"));

export { GetSelectdbDbInstancesArgs, GetSelectdbDbInstancesResult, GetSelectdbDbInstancesOutputArgs } from "./getSelectdbDbInstances";
export const getSelectdbDbInstances: typeof import("./getSelectdbDbInstances").getSelectdbDbInstances = null as any;
export const getSelectdbDbInstancesOutput: typeof import("./getSelectdbDbInstances").getSelectdbDbInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getSelectdbDbInstances","getSelectdbDbInstancesOutput"], () => require("./getSelectdbDbInstances"));

export { GetServiceCatalogEndUserProductsArgs, GetServiceCatalogEndUserProductsResult, GetServiceCatalogEndUserProductsOutputArgs } from "./getServiceCatalogEndUserProducts";
export const getServiceCatalogEndUserProducts: typeof import("./getServiceCatalogEndUserProducts").getServiceCatalogEndUserProducts = null as any;
export const getServiceCatalogEndUserProductsOutput: typeof import("./getServiceCatalogEndUserProducts").getServiceCatalogEndUserProductsOutput = null as any;
utilities.lazyLoad(exports, ["getServiceCatalogEndUserProducts","getServiceCatalogEndUserProductsOutput"], () => require("./getServiceCatalogEndUserProducts"));

export { GetServiceCatalogLaunchOptionsArgs, GetServiceCatalogLaunchOptionsResult, GetServiceCatalogLaunchOptionsOutputArgs } from "./getServiceCatalogLaunchOptions";
export const getServiceCatalogLaunchOptions: typeof import("./getServiceCatalogLaunchOptions").getServiceCatalogLaunchOptions = null as any;
export const getServiceCatalogLaunchOptionsOutput: typeof import("./getServiceCatalogLaunchOptions").getServiceCatalogLaunchOptionsOutput = null as any;
utilities.lazyLoad(exports, ["getServiceCatalogLaunchOptions","getServiceCatalogLaunchOptionsOutput"], () => require("./getServiceCatalogLaunchOptions"));

export { GetServiceCatalogPortfoliosArgs, GetServiceCatalogPortfoliosResult, GetServiceCatalogPortfoliosOutputArgs } from "./getServiceCatalogPortfolios";
export const getServiceCatalogPortfolios: typeof import("./getServiceCatalogPortfolios").getServiceCatalogPortfolios = null as any;
export const getServiceCatalogPortfoliosOutput: typeof import("./getServiceCatalogPortfolios").getServiceCatalogPortfoliosOutput = null as any;
utilities.lazyLoad(exports, ["getServiceCatalogPortfolios","getServiceCatalogPortfoliosOutput"], () => require("./getServiceCatalogPortfolios"));

export { GetServiceCatalogProductAsEndUsersArgs, GetServiceCatalogProductAsEndUsersResult, GetServiceCatalogProductAsEndUsersOutputArgs } from "./getServiceCatalogProductAsEndUsers";
export const getServiceCatalogProductAsEndUsers: typeof import("./getServiceCatalogProductAsEndUsers").getServiceCatalogProductAsEndUsers = null as any;
export const getServiceCatalogProductAsEndUsersOutput: typeof import("./getServiceCatalogProductAsEndUsers").getServiceCatalogProductAsEndUsersOutput = null as any;
utilities.lazyLoad(exports, ["getServiceCatalogProductAsEndUsers","getServiceCatalogProductAsEndUsersOutput"], () => require("./getServiceCatalogProductAsEndUsers"));

export { GetServiceCatalogProductVersionsArgs, GetServiceCatalogProductVersionsResult, GetServiceCatalogProductVersionsOutputArgs } from "./getServiceCatalogProductVersions";
export const getServiceCatalogProductVersions: typeof import("./getServiceCatalogProductVersions").getServiceCatalogProductVersions = null as any;
export const getServiceCatalogProductVersionsOutput: typeof import("./getServiceCatalogProductVersions").getServiceCatalogProductVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getServiceCatalogProductVersions","getServiceCatalogProductVersionsOutput"], () => require("./getServiceCatalogProductVersions"));

export { GetServiceCatalogProvisionedProductsArgs, GetServiceCatalogProvisionedProductsResult, GetServiceCatalogProvisionedProductsOutputArgs } from "./getServiceCatalogProvisionedProducts";
export const getServiceCatalogProvisionedProducts: typeof import("./getServiceCatalogProvisionedProducts").getServiceCatalogProvisionedProducts = null as any;
export const getServiceCatalogProvisionedProductsOutput: typeof import("./getServiceCatalogProvisionedProducts").getServiceCatalogProvisionedProductsOutput = null as any;
utilities.lazyLoad(exports, ["getServiceCatalogProvisionedProducts","getServiceCatalogProvisionedProductsOutput"], () => require("./getServiceCatalogProvisionedProducts"));

export { GetServiceMeshExtensionProvidersArgs, GetServiceMeshExtensionProvidersResult, GetServiceMeshExtensionProvidersOutputArgs } from "./getServiceMeshExtensionProviders";
export const getServiceMeshExtensionProviders: typeof import("./getServiceMeshExtensionProviders").getServiceMeshExtensionProviders = null as any;
export const getServiceMeshExtensionProvidersOutput: typeof import("./getServiceMeshExtensionProviders").getServiceMeshExtensionProvidersOutput = null as any;
utilities.lazyLoad(exports, ["getServiceMeshExtensionProviders","getServiceMeshExtensionProvidersOutput"], () => require("./getServiceMeshExtensionProviders"));

export { GetServiceMeshServiceMeshesArgs, GetServiceMeshServiceMeshesResult, GetServiceMeshServiceMeshesOutputArgs } from "./getServiceMeshServiceMeshes";
export const getServiceMeshServiceMeshes: typeof import("./getServiceMeshServiceMeshes").getServiceMeshServiceMeshes = null as any;
export const getServiceMeshServiceMeshesOutput: typeof import("./getServiceMeshServiceMeshes").getServiceMeshServiceMeshesOutput = null as any;
utilities.lazyLoad(exports, ["getServiceMeshServiceMeshes","getServiceMeshServiceMeshesOutput"], () => require("./getServiceMeshServiceMeshes"));

export { GetServiceMeshVersionsArgs, GetServiceMeshVersionsResult, GetServiceMeshVersionsOutputArgs } from "./getServiceMeshVersions";
export const getServiceMeshVersions: typeof import("./getServiceMeshVersions").getServiceMeshVersions = null as any;
export const getServiceMeshVersionsOutput: typeof import("./getServiceMeshVersions").getServiceMeshVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getServiceMeshVersions","getServiceMeshVersionsOutput"], () => require("./getServiceMeshVersions"));

export { GetSimpleApplicationServerCustomImagesArgs, GetSimpleApplicationServerCustomImagesResult, GetSimpleApplicationServerCustomImagesOutputArgs } from "./getSimpleApplicationServerCustomImages";
export const getSimpleApplicationServerCustomImages: typeof import("./getSimpleApplicationServerCustomImages").getSimpleApplicationServerCustomImages = null as any;
export const getSimpleApplicationServerCustomImagesOutput: typeof import("./getSimpleApplicationServerCustomImages").getSimpleApplicationServerCustomImagesOutput = null as any;
utilities.lazyLoad(exports, ["getSimpleApplicationServerCustomImages","getSimpleApplicationServerCustomImagesOutput"], () => require("./getSimpleApplicationServerCustomImages"));

export { GetSimpleApplicationServerDisksArgs, GetSimpleApplicationServerDisksResult, GetSimpleApplicationServerDisksOutputArgs } from "./getSimpleApplicationServerDisks";
export const getSimpleApplicationServerDisks: typeof import("./getSimpleApplicationServerDisks").getSimpleApplicationServerDisks = null as any;
export const getSimpleApplicationServerDisksOutput: typeof import("./getSimpleApplicationServerDisks").getSimpleApplicationServerDisksOutput = null as any;
utilities.lazyLoad(exports, ["getSimpleApplicationServerDisks","getSimpleApplicationServerDisksOutput"], () => require("./getSimpleApplicationServerDisks"));

export { GetSimpleApplicationServerFirewallRulesArgs, GetSimpleApplicationServerFirewallRulesResult, GetSimpleApplicationServerFirewallRulesOutputArgs } from "./getSimpleApplicationServerFirewallRules";
export const getSimpleApplicationServerFirewallRules: typeof import("./getSimpleApplicationServerFirewallRules").getSimpleApplicationServerFirewallRules = null as any;
export const getSimpleApplicationServerFirewallRulesOutput: typeof import("./getSimpleApplicationServerFirewallRules").getSimpleApplicationServerFirewallRulesOutput = null as any;
utilities.lazyLoad(exports, ["getSimpleApplicationServerFirewallRules","getSimpleApplicationServerFirewallRulesOutput"], () => require("./getSimpleApplicationServerFirewallRules"));

export { GetSimpleApplicationServerImagesArgs, GetSimpleApplicationServerImagesResult, GetSimpleApplicationServerImagesOutputArgs } from "./getSimpleApplicationServerImages";
export const getSimpleApplicationServerImages: typeof import("./getSimpleApplicationServerImages").getSimpleApplicationServerImages = null as any;
export const getSimpleApplicationServerImagesOutput: typeof import("./getSimpleApplicationServerImages").getSimpleApplicationServerImagesOutput = null as any;
utilities.lazyLoad(exports, ["getSimpleApplicationServerImages","getSimpleApplicationServerImagesOutput"], () => require("./getSimpleApplicationServerImages"));

export { GetSimpleApplicationServerInstancesArgs, GetSimpleApplicationServerInstancesResult, GetSimpleApplicationServerInstancesOutputArgs } from "./getSimpleApplicationServerInstances";
export const getSimpleApplicationServerInstances: typeof import("./getSimpleApplicationServerInstances").getSimpleApplicationServerInstances = null as any;
export const getSimpleApplicationServerInstancesOutput: typeof import("./getSimpleApplicationServerInstances").getSimpleApplicationServerInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getSimpleApplicationServerInstances","getSimpleApplicationServerInstancesOutput"], () => require("./getSimpleApplicationServerInstances"));

export { GetSimpleApplicationServerPlansArgs, GetSimpleApplicationServerPlansResult, GetSimpleApplicationServerPlansOutputArgs } from "./getSimpleApplicationServerPlans";
export const getSimpleApplicationServerPlans: typeof import("./getSimpleApplicationServerPlans").getSimpleApplicationServerPlans = null as any;
export const getSimpleApplicationServerPlansOutput: typeof import("./getSimpleApplicationServerPlans").getSimpleApplicationServerPlansOutput = null as any;
utilities.lazyLoad(exports, ["getSimpleApplicationServerPlans","getSimpleApplicationServerPlansOutput"], () => require("./getSimpleApplicationServerPlans"));

export { GetSimpleApplicationServerSnapshotsArgs, GetSimpleApplicationServerSnapshotsResult, GetSimpleApplicationServerSnapshotsOutputArgs } from "./getSimpleApplicationServerSnapshots";
export const getSimpleApplicationServerSnapshots: typeof import("./getSimpleApplicationServerSnapshots").getSimpleApplicationServerSnapshots = null as any;
export const getSimpleApplicationServerSnapshotsOutput: typeof import("./getSimpleApplicationServerSnapshots").getSimpleApplicationServerSnapshotsOutput = null as any;
utilities.lazyLoad(exports, ["getSimpleApplicationServerSnapshots","getSimpleApplicationServerSnapshotsOutput"], () => require("./getSimpleApplicationServerSnapshots"));

export { GetSlbAclsArgs, GetSlbAclsResult, GetSlbAclsOutputArgs } from "./getSlbAcls";
export const getSlbAcls: typeof import("./getSlbAcls").getSlbAcls = null as any;
export const getSlbAclsOutput: typeof import("./getSlbAcls").getSlbAclsOutput = null as any;
utilities.lazyLoad(exports, ["getSlbAcls","getSlbAclsOutput"], () => require("./getSlbAcls"));

export { GetSlbAttachmentsArgs, GetSlbAttachmentsResult, GetSlbAttachmentsOutputArgs } from "./getSlbAttachments";
export const getSlbAttachments: typeof import("./getSlbAttachments").getSlbAttachments = null as any;
export const getSlbAttachmentsOutput: typeof import("./getSlbAttachments").getSlbAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getSlbAttachments","getSlbAttachmentsOutput"], () => require("./getSlbAttachments"));

export { GetSlbBackendServersArgs, GetSlbBackendServersResult, GetSlbBackendServersOutputArgs } from "./getSlbBackendServers";
export const getSlbBackendServers: typeof import("./getSlbBackendServers").getSlbBackendServers = null as any;
export const getSlbBackendServersOutput: typeof import("./getSlbBackendServers").getSlbBackendServersOutput = null as any;
utilities.lazyLoad(exports, ["getSlbBackendServers","getSlbBackendServersOutput"], () => require("./getSlbBackendServers"));

export { GetSlbCaCertificatesArgs, GetSlbCaCertificatesResult, GetSlbCaCertificatesOutputArgs } from "./getSlbCaCertificates";
export const getSlbCaCertificates: typeof import("./getSlbCaCertificates").getSlbCaCertificates = null as any;
export const getSlbCaCertificatesOutput: typeof import("./getSlbCaCertificates").getSlbCaCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getSlbCaCertificates","getSlbCaCertificatesOutput"], () => require("./getSlbCaCertificates"));

export { GetSlbDomainExtensionsArgs, GetSlbDomainExtensionsResult, GetSlbDomainExtensionsOutputArgs } from "./getSlbDomainExtensions";
export const getSlbDomainExtensions: typeof import("./getSlbDomainExtensions").getSlbDomainExtensions = null as any;
export const getSlbDomainExtensionsOutput: typeof import("./getSlbDomainExtensions").getSlbDomainExtensionsOutput = null as any;
utilities.lazyLoad(exports, ["getSlbDomainExtensions","getSlbDomainExtensionsOutput"], () => require("./getSlbDomainExtensions"));

export { GetSlbListenersArgs, GetSlbListenersResult, GetSlbListenersOutputArgs } from "./getSlbListeners";
export const getSlbListeners: typeof import("./getSlbListeners").getSlbListeners = null as any;
export const getSlbListenersOutput: typeof import("./getSlbListeners").getSlbListenersOutput = null as any;
utilities.lazyLoad(exports, ["getSlbListeners","getSlbListenersOutput"], () => require("./getSlbListeners"));

export { GetSlbLoadBalancersArgs, GetSlbLoadBalancersResult, GetSlbLoadBalancersOutputArgs } from "./getSlbLoadBalancers";
export const getSlbLoadBalancers: typeof import("./getSlbLoadBalancers").getSlbLoadBalancers = null as any;
export const getSlbLoadBalancersOutput: typeof import("./getSlbLoadBalancers").getSlbLoadBalancersOutput = null as any;
utilities.lazyLoad(exports, ["getSlbLoadBalancers","getSlbLoadBalancersOutput"], () => require("./getSlbLoadBalancers"));

export { GetSlbMasterSlaveServerGroupsArgs, GetSlbMasterSlaveServerGroupsResult, GetSlbMasterSlaveServerGroupsOutputArgs } from "./getSlbMasterSlaveServerGroups";
export const getSlbMasterSlaveServerGroups: typeof import("./getSlbMasterSlaveServerGroups").getSlbMasterSlaveServerGroups = null as any;
export const getSlbMasterSlaveServerGroupsOutput: typeof import("./getSlbMasterSlaveServerGroups").getSlbMasterSlaveServerGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getSlbMasterSlaveServerGroups","getSlbMasterSlaveServerGroupsOutput"], () => require("./getSlbMasterSlaveServerGroups"));

export { GetSlbRulesArgs, GetSlbRulesResult, GetSlbRulesOutputArgs } from "./getSlbRules";
export const getSlbRules: typeof import("./getSlbRules").getSlbRules = null as any;
export const getSlbRulesOutput: typeof import("./getSlbRules").getSlbRulesOutput = null as any;
utilities.lazyLoad(exports, ["getSlbRules","getSlbRulesOutput"], () => require("./getSlbRules"));

export { GetSlbServerCertificatesArgs, GetSlbServerCertificatesResult, GetSlbServerCertificatesOutputArgs } from "./getSlbServerCertificates";
export const getSlbServerCertificates: typeof import("./getSlbServerCertificates").getSlbServerCertificates = null as any;
export const getSlbServerCertificatesOutput: typeof import("./getSlbServerCertificates").getSlbServerCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getSlbServerCertificates","getSlbServerCertificatesOutput"], () => require("./getSlbServerCertificates"));

export { GetSlbServerGroupsArgs, GetSlbServerGroupsResult, GetSlbServerGroupsOutputArgs } from "./getSlbServerGroups";
export const getSlbServerGroups: typeof import("./getSlbServerGroups").getSlbServerGroups = null as any;
export const getSlbServerGroupsOutput: typeof import("./getSlbServerGroups").getSlbServerGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getSlbServerGroups","getSlbServerGroupsOutput"], () => require("./getSlbServerGroups"));

export { GetSlbTlsCipherPoliciesArgs, GetSlbTlsCipherPoliciesResult, GetSlbTlsCipherPoliciesOutputArgs } from "./getSlbTlsCipherPolicies";
export const getSlbTlsCipherPolicies: typeof import("./getSlbTlsCipherPolicies").getSlbTlsCipherPolicies = null as any;
export const getSlbTlsCipherPoliciesOutput: typeof import("./getSlbTlsCipherPolicies").getSlbTlsCipherPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getSlbTlsCipherPolicies","getSlbTlsCipherPoliciesOutput"], () => require("./getSlbTlsCipherPolicies"));

export { GetSlbZonesArgs, GetSlbZonesResult, GetSlbZonesOutputArgs } from "./getSlbZones";
export const getSlbZones: typeof import("./getSlbZones").getSlbZones = null as any;
export const getSlbZonesOutput: typeof import("./getSlbZones").getSlbZonesOutput = null as any;
utilities.lazyLoad(exports, ["getSlbZones","getSlbZonesOutput"], () => require("./getSlbZones"));

export { GetSlbsArgs, GetSlbsResult, GetSlbsOutputArgs } from "./getSlbs";
export const getSlbs: typeof import("./getSlbs").getSlbs = null as any;
export const getSlbsOutput: typeof import("./getSlbs").getSlbsOutput = null as any;
utilities.lazyLoad(exports, ["getSlbs","getSlbsOutput"], () => require("./getSlbs"));

export { GetSmartagFlowLogsArgs, GetSmartagFlowLogsResult, GetSmartagFlowLogsOutputArgs } from "./getSmartagFlowLogs";
export const getSmartagFlowLogs: typeof import("./getSmartagFlowLogs").getSmartagFlowLogs = null as any;
export const getSmartagFlowLogsOutput: typeof import("./getSmartagFlowLogs").getSmartagFlowLogsOutput = null as any;
utilities.lazyLoad(exports, ["getSmartagFlowLogs","getSmartagFlowLogsOutput"], () => require("./getSmartagFlowLogs"));

export { GetSnapshotsArgs, GetSnapshotsResult, GetSnapshotsOutputArgs } from "./getSnapshots";
export const getSnapshots: typeof import("./getSnapshots").getSnapshots = null as any;
export const getSnapshotsOutput: typeof import("./getSnapshots").getSnapshotsOutput = null as any;
utilities.lazyLoad(exports, ["getSnapshots","getSnapshotsOutput"], () => require("./getSnapshots"));

export { GetSnatEntriesArgs, GetSnatEntriesResult, GetSnatEntriesOutputArgs } from "./getSnatEntries";
export const getSnatEntries: typeof import("./getSnatEntries").getSnatEntries = null as any;
export const getSnatEntriesOutput: typeof import("./getSnatEntries").getSnatEntriesOutput = null as any;
utilities.lazyLoad(exports, ["getSnatEntries","getSnatEntriesOutput"], () => require("./getSnatEntries"));

export { GetSslCertificatesServiceCertificatesArgs, GetSslCertificatesServiceCertificatesResult, GetSslCertificatesServiceCertificatesOutputArgs } from "./getSslCertificatesServiceCertificates";
export const getSslCertificatesServiceCertificates: typeof import("./getSslCertificatesServiceCertificates").getSslCertificatesServiceCertificates = null as any;
export const getSslCertificatesServiceCertificatesOutput: typeof import("./getSslCertificatesServiceCertificates").getSslCertificatesServiceCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getSslCertificatesServiceCertificates","getSslCertificatesServiceCertificatesOutput"], () => require("./getSslCertificatesServiceCertificates"));

export { GetSslVpnClientCertsArgs, GetSslVpnClientCertsResult, GetSslVpnClientCertsOutputArgs } from "./getSslVpnClientCerts";
export const getSslVpnClientCerts: typeof import("./getSslVpnClientCerts").getSslVpnClientCerts = null as any;
export const getSslVpnClientCertsOutput: typeof import("./getSslVpnClientCerts").getSslVpnClientCertsOutput = null as any;
utilities.lazyLoad(exports, ["getSslVpnClientCerts","getSslVpnClientCertsOutput"], () => require("./getSslVpnClientCerts"));

export { GetSslVpnServersArgs, GetSslVpnServersResult, GetSslVpnServersOutputArgs } from "./getSslVpnServers";
export const getSslVpnServers: typeof import("./getSslVpnServers").getSslVpnServers = null as any;
export const getSslVpnServersOutput: typeof import("./getSslVpnServers").getSslVpnServersOutput = null as any;
utilities.lazyLoad(exports, ["getSslVpnServers","getSslVpnServersOutput"], () => require("./getSslVpnServers"));

export { GetTagMetaTagsArgs, GetTagMetaTagsResult, GetTagMetaTagsOutputArgs } from "./getTagMetaTags";
export const getTagMetaTags: typeof import("./getTagMetaTags").getTagMetaTags = null as any;
export const getTagMetaTagsOutput: typeof import("./getTagMetaTags").getTagMetaTagsOutput = null as any;
utilities.lazyLoad(exports, ["getTagMetaTags","getTagMetaTagsOutput"], () => require("./getTagMetaTags"));

export { GetThreatDetectionAntiBruteForceRulesArgs, GetThreatDetectionAntiBruteForceRulesResult, GetThreatDetectionAntiBruteForceRulesOutputArgs } from "./getThreatDetectionAntiBruteForceRules";
export const getThreatDetectionAntiBruteForceRules: typeof import("./getThreatDetectionAntiBruteForceRules").getThreatDetectionAntiBruteForceRules = null as any;
export const getThreatDetectionAntiBruteForceRulesOutput: typeof import("./getThreatDetectionAntiBruteForceRules").getThreatDetectionAntiBruteForceRulesOutput = null as any;
utilities.lazyLoad(exports, ["getThreatDetectionAntiBruteForceRules","getThreatDetectionAntiBruteForceRulesOutput"], () => require("./getThreatDetectionAntiBruteForceRules"));

export { GetThreatDetectionAssetsArgs, GetThreatDetectionAssetsResult, GetThreatDetectionAssetsOutputArgs } from "./getThreatDetectionAssets";
export const getThreatDetectionAssets: typeof import("./getThreatDetectionAssets").getThreatDetectionAssets = null as any;
export const getThreatDetectionAssetsOutput: typeof import("./getThreatDetectionAssets").getThreatDetectionAssetsOutput = null as any;
utilities.lazyLoad(exports, ["getThreatDetectionAssets","getThreatDetectionAssetsOutput"], () => require("./getThreatDetectionAssets"));

export { GetThreatDetectionBackupPoliciesArgs, GetThreatDetectionBackupPoliciesResult, GetThreatDetectionBackupPoliciesOutputArgs } from "./getThreatDetectionBackupPolicies";
export const getThreatDetectionBackupPolicies: typeof import("./getThreatDetectionBackupPolicies").getThreatDetectionBackupPolicies = null as any;
export const getThreatDetectionBackupPoliciesOutput: typeof import("./getThreatDetectionBackupPolicies").getThreatDetectionBackupPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getThreatDetectionBackupPolicies","getThreatDetectionBackupPoliciesOutput"], () => require("./getThreatDetectionBackupPolicies"));

export { GetThreatDetectionBaselineStrategiesArgs, GetThreatDetectionBaselineStrategiesResult, GetThreatDetectionBaselineStrategiesOutputArgs } from "./getThreatDetectionBaselineStrategies";
export const getThreatDetectionBaselineStrategies: typeof import("./getThreatDetectionBaselineStrategies").getThreatDetectionBaselineStrategies = null as any;
export const getThreatDetectionBaselineStrategiesOutput: typeof import("./getThreatDetectionBaselineStrategies").getThreatDetectionBaselineStrategiesOutput = null as any;
utilities.lazyLoad(exports, ["getThreatDetectionBaselineStrategies","getThreatDetectionBaselineStrategiesOutput"], () => require("./getThreatDetectionBaselineStrategies"));

export { GetThreatDetectionHoneyPotsArgs, GetThreatDetectionHoneyPotsResult, GetThreatDetectionHoneyPotsOutputArgs } from "./getThreatDetectionHoneyPots";
export const getThreatDetectionHoneyPots: typeof import("./getThreatDetectionHoneyPots").getThreatDetectionHoneyPots = null as any;
export const getThreatDetectionHoneyPotsOutput: typeof import("./getThreatDetectionHoneyPots").getThreatDetectionHoneyPotsOutput = null as any;
utilities.lazyLoad(exports, ["getThreatDetectionHoneyPots","getThreatDetectionHoneyPotsOutput"], () => require("./getThreatDetectionHoneyPots"));

export { GetThreatDetectionHoneypotImagesArgs, GetThreatDetectionHoneypotImagesResult, GetThreatDetectionHoneypotImagesOutputArgs } from "./getThreatDetectionHoneypotImages";
export const getThreatDetectionHoneypotImages: typeof import("./getThreatDetectionHoneypotImages").getThreatDetectionHoneypotImages = null as any;
export const getThreatDetectionHoneypotImagesOutput: typeof import("./getThreatDetectionHoneypotImages").getThreatDetectionHoneypotImagesOutput = null as any;
utilities.lazyLoad(exports, ["getThreatDetectionHoneypotImages","getThreatDetectionHoneypotImagesOutput"], () => require("./getThreatDetectionHoneypotImages"));

export { GetThreatDetectionHoneypotNodesArgs, GetThreatDetectionHoneypotNodesResult, GetThreatDetectionHoneypotNodesOutputArgs } from "./getThreatDetectionHoneypotNodes";
export const getThreatDetectionHoneypotNodes: typeof import("./getThreatDetectionHoneypotNodes").getThreatDetectionHoneypotNodes = null as any;
export const getThreatDetectionHoneypotNodesOutput: typeof import("./getThreatDetectionHoneypotNodes").getThreatDetectionHoneypotNodesOutput = null as any;
utilities.lazyLoad(exports, ["getThreatDetectionHoneypotNodes","getThreatDetectionHoneypotNodesOutput"], () => require("./getThreatDetectionHoneypotNodes"));

export { GetThreatDetectionHoneypotPresetsArgs, GetThreatDetectionHoneypotPresetsResult, GetThreatDetectionHoneypotPresetsOutputArgs } from "./getThreatDetectionHoneypotPresets";
export const getThreatDetectionHoneypotPresets: typeof import("./getThreatDetectionHoneypotPresets").getThreatDetectionHoneypotPresets = null as any;
export const getThreatDetectionHoneypotPresetsOutput: typeof import("./getThreatDetectionHoneypotPresets").getThreatDetectionHoneypotPresetsOutput = null as any;
utilities.lazyLoad(exports, ["getThreatDetectionHoneypotPresets","getThreatDetectionHoneypotPresetsOutput"], () => require("./getThreatDetectionHoneypotPresets"));

export { GetThreatDetectionHoneypotProbesArgs, GetThreatDetectionHoneypotProbesResult, GetThreatDetectionHoneypotProbesOutputArgs } from "./getThreatDetectionHoneypotProbes";
export const getThreatDetectionHoneypotProbes: typeof import("./getThreatDetectionHoneypotProbes").getThreatDetectionHoneypotProbes = null as any;
export const getThreatDetectionHoneypotProbesOutput: typeof import("./getThreatDetectionHoneypotProbes").getThreatDetectionHoneypotProbesOutput = null as any;
utilities.lazyLoad(exports, ["getThreatDetectionHoneypotProbes","getThreatDetectionHoneypotProbesOutput"], () => require("./getThreatDetectionHoneypotProbes"));

export { GetThreatDetectionInstancesArgs, GetThreatDetectionInstancesResult, GetThreatDetectionInstancesOutputArgs } from "./getThreatDetectionInstances";
export const getThreatDetectionInstances: typeof import("./getThreatDetectionInstances").getThreatDetectionInstances = null as any;
export const getThreatDetectionInstancesOutput: typeof import("./getThreatDetectionInstances").getThreatDetectionInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getThreatDetectionInstances","getThreatDetectionInstancesOutput"], () => require("./getThreatDetectionInstances"));

export { GetThreatDetectionLogShipperArgs, GetThreatDetectionLogShipperResult, GetThreatDetectionLogShipperOutputArgs } from "./getThreatDetectionLogShipper";
export const getThreatDetectionLogShipper: typeof import("./getThreatDetectionLogShipper").getThreatDetectionLogShipper = null as any;
export const getThreatDetectionLogShipperOutput: typeof import("./getThreatDetectionLogShipper").getThreatDetectionLogShipperOutput = null as any;
utilities.lazyLoad(exports, ["getThreatDetectionLogShipper","getThreatDetectionLogShipperOutput"], () => require("./getThreatDetectionLogShipper"));

export { GetThreatDetectionVulWhitelistsArgs, GetThreatDetectionVulWhitelistsResult, GetThreatDetectionVulWhitelistsOutputArgs } from "./getThreatDetectionVulWhitelists";
export const getThreatDetectionVulWhitelists: typeof import("./getThreatDetectionVulWhitelists").getThreatDetectionVulWhitelists = null as any;
export const getThreatDetectionVulWhitelistsOutput: typeof import("./getThreatDetectionVulWhitelists").getThreatDetectionVulWhitelistsOutput = null as any;
utilities.lazyLoad(exports, ["getThreatDetectionVulWhitelists","getThreatDetectionVulWhitelistsOutput"], () => require("./getThreatDetectionVulWhitelists"));

export { GetThreatDetectionWebLockConfigsArgs, GetThreatDetectionWebLockConfigsResult, GetThreatDetectionWebLockConfigsOutputArgs } from "./getThreatDetectionWebLockConfigs";
export const getThreatDetectionWebLockConfigs: typeof import("./getThreatDetectionWebLockConfigs").getThreatDetectionWebLockConfigs = null as any;
export const getThreatDetectionWebLockConfigsOutput: typeof import("./getThreatDetectionWebLockConfigs").getThreatDetectionWebLockConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getThreatDetectionWebLockConfigs","getThreatDetectionWebLockConfigsOutput"], () => require("./getThreatDetectionWebLockConfigs"));

export { GetTsdbInstancesArgs, GetTsdbInstancesResult, GetTsdbInstancesOutputArgs } from "./getTsdbInstances";
export const getTsdbInstances: typeof import("./getTsdbInstances").getTsdbInstances = null as any;
export const getTsdbInstancesOutput: typeof import("./getTsdbInstances").getTsdbInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getTsdbInstances","getTsdbInstancesOutput"], () => require("./getTsdbInstances"));

export { GetTsdbZonesArgs, GetTsdbZonesResult, GetTsdbZonesOutputArgs } from "./getTsdbZones";
export const getTsdbZones: typeof import("./getTsdbZones").getTsdbZones = null as any;
export const getTsdbZonesOutput: typeof import("./getTsdbZones").getTsdbZonesOutput = null as any;
utilities.lazyLoad(exports, ["getTsdbZones","getTsdbZonesOutput"], () => require("./getTsdbZones"));

export { GetVideoSurveillanceSystemGroupsArgs, GetVideoSurveillanceSystemGroupsResult, GetVideoSurveillanceSystemGroupsOutputArgs } from "./getVideoSurveillanceSystemGroups";
export const getVideoSurveillanceSystemGroups: typeof import("./getVideoSurveillanceSystemGroups").getVideoSurveillanceSystemGroups = null as any;
export const getVideoSurveillanceSystemGroupsOutput: typeof import("./getVideoSurveillanceSystemGroups").getVideoSurveillanceSystemGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getVideoSurveillanceSystemGroups","getVideoSurveillanceSystemGroupsOutput"], () => require("./getVideoSurveillanceSystemGroups"));

export { GetVodDomainsArgs, GetVodDomainsResult, GetVodDomainsOutputArgs } from "./getVodDomains";
export const getVodDomains: typeof import("./getVodDomains").getVodDomains = null as any;
export const getVodDomainsOutput: typeof import("./getVodDomains").getVodDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getVodDomains","getVodDomainsOutput"], () => require("./getVodDomains"));

export { GetVpcBgpGroupsArgs, GetVpcBgpGroupsResult, GetVpcBgpGroupsOutputArgs } from "./getVpcBgpGroups";
export const getVpcBgpGroups: typeof import("./getVpcBgpGroups").getVpcBgpGroups = null as any;
export const getVpcBgpGroupsOutput: typeof import("./getVpcBgpGroups").getVpcBgpGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcBgpGroups","getVpcBgpGroupsOutput"], () => require("./getVpcBgpGroups"));

export { GetVpcBgpNetworksArgs, GetVpcBgpNetworksResult, GetVpcBgpNetworksOutputArgs } from "./getVpcBgpNetworks";
export const getVpcBgpNetworks: typeof import("./getVpcBgpNetworks").getVpcBgpNetworks = null as any;
export const getVpcBgpNetworksOutput: typeof import("./getVpcBgpNetworks").getVpcBgpNetworksOutput = null as any;
utilities.lazyLoad(exports, ["getVpcBgpNetworks","getVpcBgpNetworksOutput"], () => require("./getVpcBgpNetworks"));

export { GetVpcBgpPeersArgs, GetVpcBgpPeersResult, GetVpcBgpPeersOutputArgs } from "./getVpcBgpPeers";
export const getVpcBgpPeers: typeof import("./getVpcBgpPeers").getVpcBgpPeers = null as any;
export const getVpcBgpPeersOutput: typeof import("./getVpcBgpPeers").getVpcBgpPeersOutput = null as any;
utilities.lazyLoad(exports, ["getVpcBgpPeers","getVpcBgpPeersOutput"], () => require("./getVpcBgpPeers"));

export { GetVpcDhcpOptionsSetsArgs, GetVpcDhcpOptionsSetsResult, GetVpcDhcpOptionsSetsOutputArgs } from "./getVpcDhcpOptionsSets";
export const getVpcDhcpOptionsSets: typeof import("./getVpcDhcpOptionsSets").getVpcDhcpOptionsSets = null as any;
export const getVpcDhcpOptionsSetsOutput: typeof import("./getVpcDhcpOptionsSets").getVpcDhcpOptionsSetsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcDhcpOptionsSets","getVpcDhcpOptionsSetsOutput"], () => require("./getVpcDhcpOptionsSets"));

export { GetVpcFlowLogServiceArgs, GetVpcFlowLogServiceResult, GetVpcFlowLogServiceOutputArgs } from "./getVpcFlowLogService";
export const getVpcFlowLogService: typeof import("./getVpcFlowLogService").getVpcFlowLogService = null as any;
export const getVpcFlowLogServiceOutput: typeof import("./getVpcFlowLogService").getVpcFlowLogServiceOutput = null as any;
utilities.lazyLoad(exports, ["getVpcFlowLogService","getVpcFlowLogServiceOutput"], () => require("./getVpcFlowLogService"));

export { GetVpcFlowLogsArgs, GetVpcFlowLogsResult, GetVpcFlowLogsOutputArgs } from "./getVpcFlowLogs";
export const getVpcFlowLogs: typeof import("./getVpcFlowLogs").getVpcFlowLogs = null as any;
export const getVpcFlowLogsOutput: typeof import("./getVpcFlowLogs").getVpcFlowLogsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcFlowLogs","getVpcFlowLogsOutput"], () => require("./getVpcFlowLogs"));

export { GetVpcIpv4GatewaysArgs, GetVpcIpv4GatewaysResult, GetVpcIpv4GatewaysOutputArgs } from "./getVpcIpv4Gateways";
export const getVpcIpv4Gateways: typeof import("./getVpcIpv4Gateways").getVpcIpv4Gateways = null as any;
export const getVpcIpv4GatewaysOutput: typeof import("./getVpcIpv4Gateways").getVpcIpv4GatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getVpcIpv4Gateways","getVpcIpv4GatewaysOutput"], () => require("./getVpcIpv4Gateways"));

export { GetVpcIpv6AddressesArgs, GetVpcIpv6AddressesResult, GetVpcIpv6AddressesOutputArgs } from "./getVpcIpv6Addresses";
export const getVpcIpv6Addresses: typeof import("./getVpcIpv6Addresses").getVpcIpv6Addresses = null as any;
export const getVpcIpv6AddressesOutput: typeof import("./getVpcIpv6Addresses").getVpcIpv6AddressesOutput = null as any;
utilities.lazyLoad(exports, ["getVpcIpv6Addresses","getVpcIpv6AddressesOutput"], () => require("./getVpcIpv6Addresses"));

export { GetVpcIpv6EgressRulesArgs, GetVpcIpv6EgressRulesResult, GetVpcIpv6EgressRulesOutputArgs } from "./getVpcIpv6EgressRules";
export const getVpcIpv6EgressRules: typeof import("./getVpcIpv6EgressRules").getVpcIpv6EgressRules = null as any;
export const getVpcIpv6EgressRulesOutput: typeof import("./getVpcIpv6EgressRules").getVpcIpv6EgressRulesOutput = null as any;
utilities.lazyLoad(exports, ["getVpcIpv6EgressRules","getVpcIpv6EgressRulesOutput"], () => require("./getVpcIpv6EgressRules"));

export { GetVpcIpv6GatewaysArgs, GetVpcIpv6GatewaysResult, GetVpcIpv6GatewaysOutputArgs } from "./getVpcIpv6Gateways";
export const getVpcIpv6Gateways: typeof import("./getVpcIpv6Gateways").getVpcIpv6Gateways = null as any;
export const getVpcIpv6GatewaysOutput: typeof import("./getVpcIpv6Gateways").getVpcIpv6GatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getVpcIpv6Gateways","getVpcIpv6GatewaysOutput"], () => require("./getVpcIpv6Gateways"));

export { GetVpcIpv6InternetBandwidthsArgs, GetVpcIpv6InternetBandwidthsResult, GetVpcIpv6InternetBandwidthsOutputArgs } from "./getVpcIpv6InternetBandwidths";
export const getVpcIpv6InternetBandwidths: typeof import("./getVpcIpv6InternetBandwidths").getVpcIpv6InternetBandwidths = null as any;
export const getVpcIpv6InternetBandwidthsOutput: typeof import("./getVpcIpv6InternetBandwidths").getVpcIpv6InternetBandwidthsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcIpv6InternetBandwidths","getVpcIpv6InternetBandwidthsOutput"], () => require("./getVpcIpv6InternetBandwidths"));

export { GetVpcNatIpCidrsArgs, GetVpcNatIpCidrsResult, GetVpcNatIpCidrsOutputArgs } from "./getVpcNatIpCidrs";
export const getVpcNatIpCidrs: typeof import("./getVpcNatIpCidrs").getVpcNatIpCidrs = null as any;
export const getVpcNatIpCidrsOutput: typeof import("./getVpcNatIpCidrs").getVpcNatIpCidrsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcNatIpCidrs","getVpcNatIpCidrsOutput"], () => require("./getVpcNatIpCidrs"));

export { GetVpcNatIpsArgs, GetVpcNatIpsResult, GetVpcNatIpsOutputArgs } from "./getVpcNatIps";
export const getVpcNatIps: typeof import("./getVpcNatIps").getVpcNatIps = null as any;
export const getVpcNatIpsOutput: typeof import("./getVpcNatIps").getVpcNatIpsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcNatIps","getVpcNatIpsOutput"], () => require("./getVpcNatIps"));

export { GetVpcPeerConnectionsArgs, GetVpcPeerConnectionsResult, GetVpcPeerConnectionsOutputArgs } from "./getVpcPeerConnections";
export const getVpcPeerConnections: typeof import("./getVpcPeerConnections").getVpcPeerConnections = null as any;
export const getVpcPeerConnectionsOutput: typeof import("./getVpcPeerConnections").getVpcPeerConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcPeerConnections","getVpcPeerConnectionsOutput"], () => require("./getVpcPeerConnections"));

export { GetVpcPrefixListsArgs, GetVpcPrefixListsResult, GetVpcPrefixListsOutputArgs } from "./getVpcPrefixLists";
export const getVpcPrefixLists: typeof import("./getVpcPrefixLists").getVpcPrefixLists = null as any;
export const getVpcPrefixListsOutput: typeof import("./getVpcPrefixLists").getVpcPrefixListsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcPrefixLists","getVpcPrefixListsOutput"], () => require("./getVpcPrefixLists"));

export { GetVpcPublicIpAddressPoolCidrBlocksArgs, GetVpcPublicIpAddressPoolCidrBlocksResult, GetVpcPublicIpAddressPoolCidrBlocksOutputArgs } from "./getVpcPublicIpAddressPoolCidrBlocks";
export const getVpcPublicIpAddressPoolCidrBlocks: typeof import("./getVpcPublicIpAddressPoolCidrBlocks").getVpcPublicIpAddressPoolCidrBlocks = null as any;
export const getVpcPublicIpAddressPoolCidrBlocksOutput: typeof import("./getVpcPublicIpAddressPoolCidrBlocks").getVpcPublicIpAddressPoolCidrBlocksOutput = null as any;
utilities.lazyLoad(exports, ["getVpcPublicIpAddressPoolCidrBlocks","getVpcPublicIpAddressPoolCidrBlocksOutput"], () => require("./getVpcPublicIpAddressPoolCidrBlocks"));

export { GetVpcPublicIpAddressPoolsArgs, GetVpcPublicIpAddressPoolsResult, GetVpcPublicIpAddressPoolsOutputArgs } from "./getVpcPublicIpAddressPools";
export const getVpcPublicIpAddressPools: typeof import("./getVpcPublicIpAddressPools").getVpcPublicIpAddressPools = null as any;
export const getVpcPublicIpAddressPoolsOutput: typeof import("./getVpcPublicIpAddressPools").getVpcPublicIpAddressPoolsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcPublicIpAddressPools","getVpcPublicIpAddressPoolsOutput"], () => require("./getVpcPublicIpAddressPools"));

export { GetVpcTrafficMirrorFilterEgressRulesArgs, GetVpcTrafficMirrorFilterEgressRulesResult, GetVpcTrafficMirrorFilterEgressRulesOutputArgs } from "./getVpcTrafficMirrorFilterEgressRules";
export const getVpcTrafficMirrorFilterEgressRules: typeof import("./getVpcTrafficMirrorFilterEgressRules").getVpcTrafficMirrorFilterEgressRules = null as any;
export const getVpcTrafficMirrorFilterEgressRulesOutput: typeof import("./getVpcTrafficMirrorFilterEgressRules").getVpcTrafficMirrorFilterEgressRulesOutput = null as any;
utilities.lazyLoad(exports, ["getVpcTrafficMirrorFilterEgressRules","getVpcTrafficMirrorFilterEgressRulesOutput"], () => require("./getVpcTrafficMirrorFilterEgressRules"));

export { GetVpcTrafficMirrorFilterIngressRulesArgs, GetVpcTrafficMirrorFilterIngressRulesResult, GetVpcTrafficMirrorFilterIngressRulesOutputArgs } from "./getVpcTrafficMirrorFilterIngressRules";
export const getVpcTrafficMirrorFilterIngressRules: typeof import("./getVpcTrafficMirrorFilterIngressRules").getVpcTrafficMirrorFilterIngressRules = null as any;
export const getVpcTrafficMirrorFilterIngressRulesOutput: typeof import("./getVpcTrafficMirrorFilterIngressRules").getVpcTrafficMirrorFilterIngressRulesOutput = null as any;
utilities.lazyLoad(exports, ["getVpcTrafficMirrorFilterIngressRules","getVpcTrafficMirrorFilterIngressRulesOutput"], () => require("./getVpcTrafficMirrorFilterIngressRules"));

export { GetVpcTrafficMirrorFiltersArgs, GetVpcTrafficMirrorFiltersResult, GetVpcTrafficMirrorFiltersOutputArgs } from "./getVpcTrafficMirrorFilters";
export const getVpcTrafficMirrorFilters: typeof import("./getVpcTrafficMirrorFilters").getVpcTrafficMirrorFilters = null as any;
export const getVpcTrafficMirrorFiltersOutput: typeof import("./getVpcTrafficMirrorFilters").getVpcTrafficMirrorFiltersOutput = null as any;
utilities.lazyLoad(exports, ["getVpcTrafficMirrorFilters","getVpcTrafficMirrorFiltersOutput"], () => require("./getVpcTrafficMirrorFilters"));

export { GetVpcTrafficMirrorServiceArgs, GetVpcTrafficMirrorServiceResult, GetVpcTrafficMirrorServiceOutputArgs } from "./getVpcTrafficMirrorService";
export const getVpcTrafficMirrorService: typeof import("./getVpcTrafficMirrorService").getVpcTrafficMirrorService = null as any;
export const getVpcTrafficMirrorServiceOutput: typeof import("./getVpcTrafficMirrorService").getVpcTrafficMirrorServiceOutput = null as any;
utilities.lazyLoad(exports, ["getVpcTrafficMirrorService","getVpcTrafficMirrorServiceOutput"], () => require("./getVpcTrafficMirrorService"));

export { GetVpcTrafficMirrorSessionsArgs, GetVpcTrafficMirrorSessionsResult, GetVpcTrafficMirrorSessionsOutputArgs } from "./getVpcTrafficMirrorSessions";
export const getVpcTrafficMirrorSessions: typeof import("./getVpcTrafficMirrorSessions").getVpcTrafficMirrorSessions = null as any;
export const getVpcTrafficMirrorSessionsOutput: typeof import("./getVpcTrafficMirrorSessions").getVpcTrafficMirrorSessionsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcTrafficMirrorSessions","getVpcTrafficMirrorSessionsOutput"], () => require("./getVpcTrafficMirrorSessions"));

export { GetVpcsArgs, GetVpcsResult, GetVpcsOutputArgs } from "./getVpcs";
export const getVpcs: typeof import("./getVpcs").getVpcs = null as any;
export const getVpcsOutput: typeof import("./getVpcs").getVpcsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcs","getVpcsOutput"], () => require("./getVpcs"));

export { GetVpnConnectionsArgs, GetVpnConnectionsResult, GetVpnConnectionsOutputArgs } from "./getVpnConnections";
export const getVpnConnections: typeof import("./getVpnConnections").getVpnConnections = null as any;
export const getVpnConnectionsOutput: typeof import("./getVpnConnections").getVpnConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getVpnConnections","getVpnConnectionsOutput"], () => require("./getVpnConnections"));

export { GetVpnCustomerGatewaysArgs, GetVpnCustomerGatewaysResult, GetVpnCustomerGatewaysOutputArgs } from "./getVpnCustomerGateways";
export const getVpnCustomerGateways: typeof import("./getVpnCustomerGateways").getVpnCustomerGateways = null as any;
export const getVpnCustomerGatewaysOutput: typeof import("./getVpnCustomerGateways").getVpnCustomerGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getVpnCustomerGateways","getVpnCustomerGatewaysOutput"], () => require("./getVpnCustomerGateways"));

export { GetVpnGatewayVcoRoutesArgs, GetVpnGatewayVcoRoutesResult, GetVpnGatewayVcoRoutesOutputArgs } from "./getVpnGatewayVcoRoutes";
export const getVpnGatewayVcoRoutes: typeof import("./getVpnGatewayVcoRoutes").getVpnGatewayVcoRoutes = null as any;
export const getVpnGatewayVcoRoutesOutput: typeof import("./getVpnGatewayVcoRoutes").getVpnGatewayVcoRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getVpnGatewayVcoRoutes","getVpnGatewayVcoRoutesOutput"], () => require("./getVpnGatewayVcoRoutes"));

export { GetVpnGatewayVpnAttachmentsArgs, GetVpnGatewayVpnAttachmentsResult, GetVpnGatewayVpnAttachmentsOutputArgs } from "./getVpnGatewayVpnAttachments";
export const getVpnGatewayVpnAttachments: typeof import("./getVpnGatewayVpnAttachments").getVpnGatewayVpnAttachments = null as any;
export const getVpnGatewayVpnAttachmentsOutput: typeof import("./getVpnGatewayVpnAttachments").getVpnGatewayVpnAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getVpnGatewayVpnAttachments","getVpnGatewayVpnAttachmentsOutput"], () => require("./getVpnGatewayVpnAttachments"));

export { GetVpnGatewayZonesArgs, GetVpnGatewayZonesResult, GetVpnGatewayZonesOutputArgs } from "./getVpnGatewayZones";
export const getVpnGatewayZones: typeof import("./getVpnGatewayZones").getVpnGatewayZones = null as any;
export const getVpnGatewayZonesOutput: typeof import("./getVpnGatewayZones").getVpnGatewayZonesOutput = null as any;
utilities.lazyLoad(exports, ["getVpnGatewayZones","getVpnGatewayZonesOutput"], () => require("./getVpnGatewayZones"));

export { GetVpnGatewaysArgs, GetVpnGatewaysResult, GetVpnGatewaysOutputArgs } from "./getVpnGateways";
export const getVpnGateways: typeof import("./getVpnGateways").getVpnGateways = null as any;
export const getVpnGatewaysOutput: typeof import("./getVpnGateways").getVpnGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getVpnGateways","getVpnGatewaysOutput"], () => require("./getVpnGateways"));

export { GetVpnIpsecServersArgs, GetVpnIpsecServersResult, GetVpnIpsecServersOutputArgs } from "./getVpnIpsecServers";
export const getVpnIpsecServers: typeof import("./getVpnIpsecServers").getVpnIpsecServers = null as any;
export const getVpnIpsecServersOutput: typeof import("./getVpnIpsecServers").getVpnIpsecServersOutput = null as any;
utilities.lazyLoad(exports, ["getVpnIpsecServers","getVpnIpsecServersOutput"], () => require("./getVpnIpsecServers"));

export { GetVpnPbrRouteEntriesArgs, GetVpnPbrRouteEntriesResult, GetVpnPbrRouteEntriesOutputArgs } from "./getVpnPbrRouteEntries";
export const getVpnPbrRouteEntries: typeof import("./getVpnPbrRouteEntries").getVpnPbrRouteEntries = null as any;
export const getVpnPbrRouteEntriesOutput: typeof import("./getVpnPbrRouteEntries").getVpnPbrRouteEntriesOutput = null as any;
utilities.lazyLoad(exports, ["getVpnPbrRouteEntries","getVpnPbrRouteEntriesOutput"], () => require("./getVpnPbrRouteEntries"));

export { GetVsServiceArgs, GetVsServiceResult, GetVsServiceOutputArgs } from "./getVsService";
export const getVsService: typeof import("./getVsService").getVsService = null as any;
export const getVsServiceOutput: typeof import("./getVsService").getVsServiceOutput = null as any;
utilities.lazyLoad(exports, ["getVsService","getVsServiceOutput"], () => require("./getVsService"));

export { GetVswitchesArgs, GetVswitchesResult, GetVswitchesOutputArgs } from "./getVswitches";
export const getVswitches: typeof import("./getVswitches").getVswitches = null as any;
export const getVswitchesOutput: typeof import("./getVswitches").getVswitchesOutput = null as any;
utilities.lazyLoad(exports, ["getVswitches","getVswitchesOutput"], () => require("./getVswitches"));

export { GetWafCertificatesArgs, GetWafCertificatesResult, GetWafCertificatesOutputArgs } from "./getWafCertificates";
export const getWafCertificates: typeof import("./getWafCertificates").getWafCertificates = null as any;
export const getWafCertificatesOutput: typeof import("./getWafCertificates").getWafCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getWafCertificates","getWafCertificatesOutput"], () => require("./getWafCertificates"));

export { GetWafDomainsArgs, GetWafDomainsResult, GetWafDomainsOutputArgs } from "./getWafDomains";
export const getWafDomains: typeof import("./getWafDomains").getWafDomains = null as any;
export const getWafDomainsOutput: typeof import("./getWafDomains").getWafDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getWafDomains","getWafDomainsOutput"], () => require("./getWafDomains"));

export { GetWafInstancesArgs, GetWafInstancesResult, GetWafInstancesOutputArgs } from "./getWafInstances";
export const getWafInstances: typeof import("./getWafInstances").getWafInstances = null as any;
export const getWafInstancesOutput: typeof import("./getWafInstances").getWafInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getWafInstances","getWafInstancesOutput"], () => require("./getWafInstances"));

export { GetWafv3DomainsArgs, GetWafv3DomainsResult, GetWafv3DomainsOutputArgs } from "./getWafv3Domains";
export const getWafv3Domains: typeof import("./getWafv3Domains").getWafv3Domains = null as any;
export const getWafv3DomainsOutput: typeof import("./getWafv3Domains").getWafv3DomainsOutput = null as any;
utilities.lazyLoad(exports, ["getWafv3Domains","getWafv3DomainsOutput"], () => require("./getWafv3Domains"));

export { GetWafv3InstancesArgs, GetWafv3InstancesResult, GetWafv3InstancesOutputArgs } from "./getWafv3Instances";
export const getWafv3Instances: typeof import("./getWafv3Instances").getWafv3Instances = null as any;
export const getWafv3InstancesOutput: typeof import("./getWafv3Instances").getWafv3InstancesOutput = null as any;
utilities.lazyLoad(exports, ["getWafv3Instances","getWafv3InstancesOutput"], () => require("./getWafv3Instances"));

export { GetYundunBastionhostInstancesArgs, GetYundunBastionhostInstancesResult, GetYundunBastionhostInstancesOutputArgs } from "./getYundunBastionhostInstances";
export const getYundunBastionhostInstances: typeof import("./getYundunBastionhostInstances").getYundunBastionhostInstances = null as any;
export const getYundunBastionhostInstancesOutput: typeof import("./getYundunBastionhostInstances").getYundunBastionhostInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getYundunBastionhostInstances","getYundunBastionhostInstancesOutput"], () => require("./getYundunBastionhostInstances"));

export { GetYundunDbauditInstanceArgs, GetYundunDbauditInstanceResult, GetYundunDbauditInstanceOutputArgs } from "./getYundunDbauditInstance";
export const getYundunDbauditInstance: typeof import("./getYundunDbauditInstance").getYundunDbauditInstance = null as any;
export const getYundunDbauditInstanceOutput: typeof import("./getYundunDbauditInstance").getYundunDbauditInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getYundunDbauditInstance","getYundunDbauditInstanceOutput"], () => require("./getYundunDbauditInstance"));

export { GetZonesArgs, GetZonesResult, GetZonesOutputArgs } from "./getZones";
export const getZones: typeof import("./getZones").getZones = null as any;
export const getZonesOutput: typeof import("./getZones").getZonesOutput = null as any;
utilities.lazyLoad(exports, ["getZones","getZonesOutput"], () => require("./getZones"));

export { GovernanceAccountArgs, GovernanceAccountState } from "./governanceAccount";
export type GovernanceAccount = import("./governanceAccount").GovernanceAccount;
export const GovernanceAccount: typeof import("./governanceAccount").GovernanceAccount = null as any;
utilities.lazyLoad(exports, ["GovernanceAccount"], () => require("./governanceAccount"));

export { GovernanceBaselineArgs, GovernanceBaselineState } from "./governanceBaseline";
export type GovernanceBaseline = import("./governanceBaseline").GovernanceBaseline;
export const GovernanceBaseline: typeof import("./governanceBaseline").GovernanceBaseline = null as any;
utilities.lazyLoad(exports, ["GovernanceBaseline"], () => require("./governanceBaseline"));

export { GpdbAccountArgs, GpdbAccountState } from "./gpdbAccount";
export type GpdbAccount = import("./gpdbAccount").GpdbAccount;
export const GpdbAccount: typeof import("./gpdbAccount").GpdbAccount = null as any;
utilities.lazyLoad(exports, ["GpdbAccount"], () => require("./gpdbAccount"));

export { GpdbBackupPolicyArgs, GpdbBackupPolicyState } from "./gpdbBackupPolicy";
export type GpdbBackupPolicy = import("./gpdbBackupPolicy").GpdbBackupPolicy;
export const GpdbBackupPolicy: typeof import("./gpdbBackupPolicy").GpdbBackupPolicy = null as any;
utilities.lazyLoad(exports, ["GpdbBackupPolicy"], () => require("./gpdbBackupPolicy"));

export { GpdbConnectionArgs, GpdbConnectionState } from "./gpdbConnection";
export type GpdbConnection = import("./gpdbConnection").GpdbConnection;
export const GpdbConnection: typeof import("./gpdbConnection").GpdbConnection = null as any;
utilities.lazyLoad(exports, ["GpdbConnection"], () => require("./gpdbConnection"));

export { GpdbDbInstancePlanArgs, GpdbDbInstancePlanState } from "./gpdbDbInstancePlan";
export type GpdbDbInstancePlan = import("./gpdbDbInstancePlan").GpdbDbInstancePlan;
export const GpdbDbInstancePlan: typeof import("./gpdbDbInstancePlan").GpdbDbInstancePlan = null as any;
utilities.lazyLoad(exports, ["GpdbDbInstancePlan"], () => require("./gpdbDbInstancePlan"));

export { GpdbDbResourceGroupArgs, GpdbDbResourceGroupState } from "./gpdbDbResourceGroup";
export type GpdbDbResourceGroup = import("./gpdbDbResourceGroup").GpdbDbResourceGroup;
export const GpdbDbResourceGroup: typeof import("./gpdbDbResourceGroup").GpdbDbResourceGroup = null as any;
utilities.lazyLoad(exports, ["GpdbDbResourceGroup"], () => require("./gpdbDbResourceGroup"));

export { GpdbElasticInstanceArgs, GpdbElasticInstanceState } from "./gpdbElasticInstance";
export type GpdbElasticInstance = import("./gpdbElasticInstance").GpdbElasticInstance;
export const GpdbElasticInstance: typeof import("./gpdbElasticInstance").GpdbElasticInstance = null as any;
utilities.lazyLoad(exports, ["GpdbElasticInstance"], () => require("./gpdbElasticInstance"));

export { GpdbExternalDataServiceArgs, GpdbExternalDataServiceState } from "./gpdbExternalDataService";
export type GpdbExternalDataService = import("./gpdbExternalDataService").GpdbExternalDataService;
export const GpdbExternalDataService: typeof import("./gpdbExternalDataService").GpdbExternalDataService = null as any;
utilities.lazyLoad(exports, ["GpdbExternalDataService"], () => require("./gpdbExternalDataService"));

export { GpdbInstanceArgs, GpdbInstanceState } from "./gpdbInstance";
export type GpdbInstance = import("./gpdbInstance").GpdbInstance;
export const GpdbInstance: typeof import("./gpdbInstance").GpdbInstance = null as any;
utilities.lazyLoad(exports, ["GpdbInstance"], () => require("./gpdbInstance"));

export { GpdbRemoteAdbDataSourceArgs, GpdbRemoteAdbDataSourceState } from "./gpdbRemoteAdbDataSource";
export type GpdbRemoteAdbDataSource = import("./gpdbRemoteAdbDataSource").GpdbRemoteAdbDataSource;
export const GpdbRemoteAdbDataSource: typeof import("./gpdbRemoteAdbDataSource").GpdbRemoteAdbDataSource = null as any;
utilities.lazyLoad(exports, ["GpdbRemoteAdbDataSource"], () => require("./gpdbRemoteAdbDataSource"));

export { GpdbStreamingDataServiceArgs, GpdbStreamingDataServiceState } from "./gpdbStreamingDataService";
export type GpdbStreamingDataService = import("./gpdbStreamingDataService").GpdbStreamingDataService;
export const GpdbStreamingDataService: typeof import("./gpdbStreamingDataService").GpdbStreamingDataService = null as any;
utilities.lazyLoad(exports, ["GpdbStreamingDataService"], () => require("./gpdbStreamingDataService"));

export { GpdbStreamingDataSourceArgs, GpdbStreamingDataSourceState } from "./gpdbStreamingDataSource";
export type GpdbStreamingDataSource = import("./gpdbStreamingDataSource").GpdbStreamingDataSource;
export const GpdbStreamingDataSource: typeof import("./gpdbStreamingDataSource").GpdbStreamingDataSource = null as any;
utilities.lazyLoad(exports, ["GpdbStreamingDataSource"], () => require("./gpdbStreamingDataSource"));

export { GraphDatabaseDbInstanceArgs, GraphDatabaseDbInstanceState } from "./graphDatabaseDbInstance";
export type GraphDatabaseDbInstance = import("./graphDatabaseDbInstance").GraphDatabaseDbInstance;
export const GraphDatabaseDbInstance: typeof import("./graphDatabaseDbInstance").GraphDatabaseDbInstance = null as any;
utilities.lazyLoad(exports, ["GraphDatabaseDbInstance"], () => require("./graphDatabaseDbInstance"));

export { HavipArgs, HavipState } from "./havip";
export type Havip = import("./havip").Havip;
export const Havip: typeof import("./havip").Havip = null as any;
utilities.lazyLoad(exports, ["Havip"], () => require("./havip"));

export { HavipAttachmentArgs, HavipAttachmentState } from "./havipAttachment";
export type HavipAttachment = import("./havipAttachment").HavipAttachment;
export const HavipAttachment: typeof import("./havipAttachment").HavipAttachment = null as any;
utilities.lazyLoad(exports, ["HavipAttachment"], () => require("./havipAttachment"));

export { HbaseInstanceArgs, HbaseInstanceState } from "./hbaseInstance";
export type HbaseInstance = import("./hbaseInstance").HbaseInstance;
export const HbaseInstance: typeof import("./hbaseInstance").HbaseInstance = null as any;
utilities.lazyLoad(exports, ["HbaseInstance"], () => require("./hbaseInstance"));

export { HbrEcsBackupClientArgs, HbrEcsBackupClientState } from "./hbrEcsBackupClient";
export type HbrEcsBackupClient = import("./hbrEcsBackupClient").HbrEcsBackupClient;
export const HbrEcsBackupClient: typeof import("./hbrEcsBackupClient").HbrEcsBackupClient = null as any;
utilities.lazyLoad(exports, ["HbrEcsBackupClient"], () => require("./hbrEcsBackupClient"));

export { HbrEcsBackupPlanArgs, HbrEcsBackupPlanState } from "./hbrEcsBackupPlan";
export type HbrEcsBackupPlan = import("./hbrEcsBackupPlan").HbrEcsBackupPlan;
export const HbrEcsBackupPlan: typeof import("./hbrEcsBackupPlan").HbrEcsBackupPlan = null as any;
utilities.lazyLoad(exports, ["HbrEcsBackupPlan"], () => require("./hbrEcsBackupPlan"));

export { HbrHanaBackupClientArgs, HbrHanaBackupClientState } from "./hbrHanaBackupClient";
export type HbrHanaBackupClient = import("./hbrHanaBackupClient").HbrHanaBackupClient;
export const HbrHanaBackupClient: typeof import("./hbrHanaBackupClient").HbrHanaBackupClient = null as any;
utilities.lazyLoad(exports, ["HbrHanaBackupClient"], () => require("./hbrHanaBackupClient"));

export { HbrHanaBackupPlanArgs, HbrHanaBackupPlanState } from "./hbrHanaBackupPlan";
export type HbrHanaBackupPlan = import("./hbrHanaBackupPlan").HbrHanaBackupPlan;
export const HbrHanaBackupPlan: typeof import("./hbrHanaBackupPlan").HbrHanaBackupPlan = null as any;
utilities.lazyLoad(exports, ["HbrHanaBackupPlan"], () => require("./hbrHanaBackupPlan"));

export { HbrHanaInstanceArgs, HbrHanaInstanceState } from "./hbrHanaInstance";
export type HbrHanaInstance = import("./hbrHanaInstance").HbrHanaInstance;
export const HbrHanaInstance: typeof import("./hbrHanaInstance").HbrHanaInstance = null as any;
utilities.lazyLoad(exports, ["HbrHanaInstance"], () => require("./hbrHanaInstance"));

export { HbrNasBackupPlanArgs, HbrNasBackupPlanState } from "./hbrNasBackupPlan";
export type HbrNasBackupPlan = import("./hbrNasBackupPlan").HbrNasBackupPlan;
export const HbrNasBackupPlan: typeof import("./hbrNasBackupPlan").HbrNasBackupPlan = null as any;
utilities.lazyLoad(exports, ["HbrNasBackupPlan"], () => require("./hbrNasBackupPlan"));

export { HbrOssBackupPlanArgs, HbrOssBackupPlanState } from "./hbrOssBackupPlan";
export type HbrOssBackupPlan = import("./hbrOssBackupPlan").HbrOssBackupPlan;
export const HbrOssBackupPlan: typeof import("./hbrOssBackupPlan").HbrOssBackupPlan = null as any;
utilities.lazyLoad(exports, ["HbrOssBackupPlan"], () => require("./hbrOssBackupPlan"));

export { HbrOtsBackupPlanArgs, HbrOtsBackupPlanState } from "./hbrOtsBackupPlan";
export type HbrOtsBackupPlan = import("./hbrOtsBackupPlan").HbrOtsBackupPlan;
export const HbrOtsBackupPlan: typeof import("./hbrOtsBackupPlan").HbrOtsBackupPlan = null as any;
utilities.lazyLoad(exports, ["HbrOtsBackupPlan"], () => require("./hbrOtsBackupPlan"));

export { HbrPolicyArgs, HbrPolicyState } from "./hbrPolicy";
export type HbrPolicy = import("./hbrPolicy").HbrPolicy;
export const HbrPolicy: typeof import("./hbrPolicy").HbrPolicy = null as any;
utilities.lazyLoad(exports, ["HbrPolicy"], () => require("./hbrPolicy"));

export { HbrPolicyBindingArgs, HbrPolicyBindingState } from "./hbrPolicyBinding";
export type HbrPolicyBinding = import("./hbrPolicyBinding").HbrPolicyBinding;
export const HbrPolicyBinding: typeof import("./hbrPolicyBinding").HbrPolicyBinding = null as any;
utilities.lazyLoad(exports, ["HbrPolicyBinding"], () => require("./hbrPolicyBinding"));

export { HbrReplicationVaultArgs, HbrReplicationVaultState } from "./hbrReplicationVault";
export type HbrReplicationVault = import("./hbrReplicationVault").HbrReplicationVault;
export const HbrReplicationVault: typeof import("./hbrReplicationVault").HbrReplicationVault = null as any;
utilities.lazyLoad(exports, ["HbrReplicationVault"], () => require("./hbrReplicationVault"));

export { HbrRestoreJobArgs, HbrRestoreJobState } from "./hbrRestoreJob";
export type HbrRestoreJob = import("./hbrRestoreJob").HbrRestoreJob;
export const HbrRestoreJob: typeof import("./hbrRestoreJob").HbrRestoreJob = null as any;
utilities.lazyLoad(exports, ["HbrRestoreJob"], () => require("./hbrRestoreJob"));

export { HbrServerBackupPlanArgs, HbrServerBackupPlanState } from "./hbrServerBackupPlan";
export type HbrServerBackupPlan = import("./hbrServerBackupPlan").HbrServerBackupPlan;
export const HbrServerBackupPlan: typeof import("./hbrServerBackupPlan").HbrServerBackupPlan = null as any;
utilities.lazyLoad(exports, ["HbrServerBackupPlan"], () => require("./hbrServerBackupPlan"));

export { HbrVaultArgs, HbrVaultState } from "./hbrVault";
export type HbrVault = import("./hbrVault").HbrVault;
export const HbrVault: typeof import("./hbrVault").HbrVault = null as any;
utilities.lazyLoad(exports, ["HbrVault"], () => require("./hbrVault"));

export { HologramInstanceArgs, HologramInstanceState } from "./hologramInstance";
export type HologramInstance = import("./hologramInstance").HologramInstance;
export const HologramInstance: typeof import("./hologramInstance").HologramInstance = null as any;
utilities.lazyLoad(exports, ["HologramInstance"], () => require("./hologramInstance"));

export { ImageArgs, ImageState } from "./image";
export type Image = import("./image").Image;
export const Image: typeof import("./image").Image = null as any;
utilities.lazyLoad(exports, ["Image"], () => require("./image"));

export { ImageCopyArgs, ImageCopyState } from "./imageCopy";
export type ImageCopy = import("./imageCopy").ImageCopy;
export const ImageCopy: typeof import("./imageCopy").ImageCopy = null as any;
utilities.lazyLoad(exports, ["ImageCopy"], () => require("./imageCopy"));

export { ImageExportArgs, ImageExportState } from "./imageExport";
export type ImageExport = import("./imageExport").ImageExport;
export const ImageExport: typeof import("./imageExport").ImageExport = null as any;
utilities.lazyLoad(exports, ["ImageExport"], () => require("./imageExport"));

export { ImageImportArgs, ImageImportState } from "./imageImport";
export type ImageImport = import("./imageImport").ImageImport;
export const ImageImport: typeof import("./imageImport").ImageImport = null as any;
utilities.lazyLoad(exports, ["ImageImport"], () => require("./imageImport"));

export { ImageSharePermissionArgs, ImageSharePermissionState } from "./imageSharePermission";
export type ImageSharePermission = import("./imageSharePermission").ImageSharePermission;
export const ImageSharePermission: typeof import("./imageSharePermission").ImageSharePermission = null as any;
utilities.lazyLoad(exports, ["ImageSharePermission"], () => require("./imageSharePermission"));

export { ImmProjectArgs, ImmProjectState } from "./immProject";
export type ImmProject = import("./immProject").ImmProject;
export const ImmProject: typeof import("./immProject").ImmProject = null as any;
utilities.lazyLoad(exports, ["ImmProject"], () => require("./immProject"));

export { ImpAppTemplateArgs, ImpAppTemplateState } from "./impAppTemplate";
export type ImpAppTemplate = import("./impAppTemplate").ImpAppTemplate;
export const ImpAppTemplate: typeof import("./impAppTemplate").ImpAppTemplate = null as any;
utilities.lazyLoad(exports, ["ImpAppTemplate"], () => require("./impAppTemplate"));

export { ImsOidcProviderArgs, ImsOidcProviderState } from "./imsOidcProvider";
export type ImsOidcProvider = import("./imsOidcProvider").ImsOidcProvider;
export const ImsOidcProvider: typeof import("./imsOidcProvider").ImsOidcProvider = null as any;
utilities.lazyLoad(exports, ["ImsOidcProvider"], () => require("./imsOidcProvider"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { IotDeviceGroupArgs, IotDeviceGroupState } from "./iotDeviceGroup";
export type IotDeviceGroup = import("./iotDeviceGroup").IotDeviceGroup;
export const IotDeviceGroup: typeof import("./iotDeviceGroup").IotDeviceGroup = null as any;
utilities.lazyLoad(exports, ["IotDeviceGroup"], () => require("./iotDeviceGroup"));

export { KeyPairArgs, KeyPairState } from "./keyPair";
export type KeyPair = import("./keyPair").KeyPair;
export const KeyPair: typeof import("./keyPair").KeyPair = null as any;
utilities.lazyLoad(exports, ["KeyPair"], () => require("./keyPair"));

export { KeyPairAttachmentArgs, KeyPairAttachmentState } from "./keyPairAttachment";
export type KeyPairAttachment = import("./keyPairAttachment").KeyPairAttachment;
export const KeyPairAttachment: typeof import("./keyPairAttachment").KeyPairAttachment = null as any;
utilities.lazyLoad(exports, ["KeyPairAttachment"], () => require("./keyPairAttachment"));

export { KmsAliasArgs, KmsAliasState } from "./kmsAlias";
export type KmsAlias = import("./kmsAlias").KmsAlias;
export const KmsAlias: typeof import("./kmsAlias").KmsAlias = null as any;
utilities.lazyLoad(exports, ["KmsAlias"], () => require("./kmsAlias"));

export { KmsApplicationAccessPointArgs, KmsApplicationAccessPointState } from "./kmsApplicationAccessPoint";
export type KmsApplicationAccessPoint = import("./kmsApplicationAccessPoint").KmsApplicationAccessPoint;
export const KmsApplicationAccessPoint: typeof import("./kmsApplicationAccessPoint").KmsApplicationAccessPoint = null as any;
utilities.lazyLoad(exports, ["KmsApplicationAccessPoint"], () => require("./kmsApplicationAccessPoint"));

export { KmsCiphertextArgs, KmsCiphertextState } from "./kmsCiphertext";
export type KmsCiphertext = import("./kmsCiphertext").KmsCiphertext;
export const KmsCiphertext: typeof import("./kmsCiphertext").KmsCiphertext = null as any;
utilities.lazyLoad(exports, ["KmsCiphertext"], () => require("./kmsCiphertext"));

export { KmsClientKeyArgs, KmsClientKeyState } from "./kmsClientKey";
export type KmsClientKey = import("./kmsClientKey").KmsClientKey;
export const KmsClientKey: typeof import("./kmsClientKey").KmsClientKey = null as any;
utilities.lazyLoad(exports, ["KmsClientKey"], () => require("./kmsClientKey"));

export { KmsInstanceArgs, KmsInstanceState } from "./kmsInstance";
export type KmsInstance = import("./kmsInstance").KmsInstance;
export const KmsInstance: typeof import("./kmsInstance").KmsInstance = null as any;
utilities.lazyLoad(exports, ["KmsInstance"], () => require("./kmsInstance"));

export { KmsKeyArgs, KmsKeyState } from "./kmsKey";
export type KmsKey = import("./kmsKey").KmsKey;
export const KmsKey: typeof import("./kmsKey").KmsKey = null as any;
utilities.lazyLoad(exports, ["KmsKey"], () => require("./kmsKey"));

export { KmsKeyVersionArgs, KmsKeyVersionState } from "./kmsKeyVersion";
export type KmsKeyVersion = import("./kmsKeyVersion").KmsKeyVersion;
export const KmsKeyVersion: typeof import("./kmsKeyVersion").KmsKeyVersion = null as any;
utilities.lazyLoad(exports, ["KmsKeyVersion"], () => require("./kmsKeyVersion"));

export { KmsNetworkRuleArgs, KmsNetworkRuleState } from "./kmsNetworkRule";
export type KmsNetworkRule = import("./kmsNetworkRule").KmsNetworkRule;
export const KmsNetworkRule: typeof import("./kmsNetworkRule").KmsNetworkRule = null as any;
utilities.lazyLoad(exports, ["KmsNetworkRule"], () => require("./kmsNetworkRule"));

export { KmsPolicyArgs, KmsPolicyState } from "./kmsPolicy";
export type KmsPolicy = import("./kmsPolicy").KmsPolicy;
export const KmsPolicy: typeof import("./kmsPolicy").KmsPolicy = null as any;
utilities.lazyLoad(exports, ["KmsPolicy"], () => require("./kmsPolicy"));

export { KmsSecretArgs, KmsSecretState } from "./kmsSecret";
export type KmsSecret = import("./kmsSecret").KmsSecret;
export const KmsSecret: typeof import("./kmsSecret").KmsSecret = null as any;
utilities.lazyLoad(exports, ["KmsSecret"], () => require("./kmsSecret"));

export { KvstoreAccountArgs, KvstoreAccountState } from "./kvstoreAccount";
export type KvstoreAccount = import("./kvstoreAccount").KvstoreAccount;
export const KvstoreAccount: typeof import("./kvstoreAccount").KvstoreAccount = null as any;
utilities.lazyLoad(exports, ["KvstoreAccount"], () => require("./kvstoreAccount"));

export { KvstoreAuditLogConfigArgs, KvstoreAuditLogConfigState } from "./kvstoreAuditLogConfig";
export type KvstoreAuditLogConfig = import("./kvstoreAuditLogConfig").KvstoreAuditLogConfig;
export const KvstoreAuditLogConfig: typeof import("./kvstoreAuditLogConfig").KvstoreAuditLogConfig = null as any;
utilities.lazyLoad(exports, ["KvstoreAuditLogConfig"], () => require("./kvstoreAuditLogConfig"));

export { KvstoreBackupPolicyArgs, KvstoreBackupPolicyState } from "./kvstoreBackupPolicy";
export type KvstoreBackupPolicy = import("./kvstoreBackupPolicy").KvstoreBackupPolicy;
export const KvstoreBackupPolicy: typeof import("./kvstoreBackupPolicy").KvstoreBackupPolicy = null as any;
utilities.lazyLoad(exports, ["KvstoreBackupPolicy"], () => require("./kvstoreBackupPolicy"));

export { KvstoreConnectionArgs, KvstoreConnectionState } from "./kvstoreConnection";
export type KvstoreConnection = import("./kvstoreConnection").KvstoreConnection;
export const KvstoreConnection: typeof import("./kvstoreConnection").KvstoreConnection = null as any;
utilities.lazyLoad(exports, ["KvstoreConnection"], () => require("./kvstoreConnection"));

export { KvstoreInstanceArgs, KvstoreInstanceState } from "./kvstoreInstance";
export type KvstoreInstance = import("./kvstoreInstance").KvstoreInstance;
export const KvstoreInstance: typeof import("./kvstoreInstance").KvstoreInstance = null as any;
utilities.lazyLoad(exports, ["KvstoreInstance"], () => require("./kvstoreInstance"));

export { LaunchTemplateArgs, LaunchTemplateState } from "./launchTemplate";
export type LaunchTemplate = import("./launchTemplate").LaunchTemplate;
export const LaunchTemplate: typeof import("./launchTemplate").LaunchTemplate = null as any;
utilities.lazyLoad(exports, ["LaunchTemplate"], () => require("./launchTemplate"));

export { LindormInstanceArgs, LindormInstanceState } from "./lindormInstance";
export type LindormInstance = import("./lindormInstance").LindormInstance;
export const LindormInstance: typeof import("./lindormInstance").LindormInstance = null as any;
utilities.lazyLoad(exports, ["LindormInstance"], () => require("./lindormInstance"));

export { LogAlertArgs, LogAlertState } from "./logAlert";
export type LogAlert = import("./logAlert").LogAlert;
export const LogAlert: typeof import("./logAlert").LogAlert = null as any;
utilities.lazyLoad(exports, ["LogAlert"], () => require("./logAlert"));

export { LogAlertResourceArgs, LogAlertResourceState } from "./logAlertResource";
export type LogAlertResource = import("./logAlertResource").LogAlertResource;
export const LogAlertResource: typeof import("./logAlertResource").LogAlertResource = null as any;
utilities.lazyLoad(exports, ["LogAlertResource"], () => require("./logAlertResource"));

export { LogAuditArgs, LogAuditState } from "./logAudit";
export type LogAudit = import("./logAudit").LogAudit;
export const LogAudit: typeof import("./logAudit").LogAudit = null as any;
utilities.lazyLoad(exports, ["LogAudit"], () => require("./logAudit"));

export { LogDashboardArgs, LogDashboardState } from "./logDashboard";
export type LogDashboard = import("./logDashboard").LogDashboard;
export const LogDashboard: typeof import("./logDashboard").LogDashboard = null as any;
utilities.lazyLoad(exports, ["LogDashboard"], () => require("./logDashboard"));

export { LogEtlArgs, LogEtlState } from "./logEtl";
export type LogEtl = import("./logEtl").LogEtl;
export const LogEtl: typeof import("./logEtl").LogEtl = null as any;
utilities.lazyLoad(exports, ["LogEtl"], () => require("./logEtl"));

export { LogIngestionArgs, LogIngestionState } from "./logIngestion";
export type LogIngestion = import("./logIngestion").LogIngestion;
export const LogIngestion: typeof import("./logIngestion").LogIngestion = null as any;
utilities.lazyLoad(exports, ["LogIngestion"], () => require("./logIngestion"));

export { LogMachineGroupArgs, LogMachineGroupState } from "./logMachineGroup";
export type LogMachineGroup = import("./logMachineGroup").LogMachineGroup;
export const LogMachineGroup: typeof import("./logMachineGroup").LogMachineGroup = null as any;
utilities.lazyLoad(exports, ["LogMachineGroup"], () => require("./logMachineGroup"));

export { LogOssExportArgs, LogOssExportState } from "./logOssExport";
export type LogOssExport = import("./logOssExport").LogOssExport;
export const LogOssExport: typeof import("./logOssExport").LogOssExport = null as any;
utilities.lazyLoad(exports, ["LogOssExport"], () => require("./logOssExport"));

export { LogOssShipperArgs, LogOssShipperState } from "./logOssShipper";
export type LogOssShipper = import("./logOssShipper").LogOssShipper;
export const LogOssShipper: typeof import("./logOssShipper").LogOssShipper = null as any;
utilities.lazyLoad(exports, ["LogOssShipper"], () => require("./logOssShipper"));

export { LogProjectArgs, LogProjectState } from "./logProject";
export type LogProject = import("./logProject").LogProject;
export const LogProject: typeof import("./logProject").LogProject = null as any;
utilities.lazyLoad(exports, ["LogProject"], () => require("./logProject"));

export { LogResourceArgs, LogResourceState } from "./logResource";
export type LogResource = import("./logResource").LogResource;
export const LogResource: typeof import("./logResource").LogResource = null as any;
utilities.lazyLoad(exports, ["LogResource"], () => require("./logResource"));

export { LogResourceRecordArgs, LogResourceRecordState } from "./logResourceRecord";
export type LogResourceRecord = import("./logResourceRecord").LogResourceRecord;
export const LogResourceRecord: typeof import("./logResourceRecord").LogResourceRecord = null as any;
utilities.lazyLoad(exports, ["LogResourceRecord"], () => require("./logResourceRecord"));

export { LogStoreArgs, LogStoreState } from "./logStore";
export type LogStore = import("./logStore").LogStore;
export const LogStore: typeof import("./logStore").LogStore = null as any;
utilities.lazyLoad(exports, ["LogStore"], () => require("./logStore"));

export { LogStoreIndexArgs, LogStoreIndexState } from "./logStoreIndex";
export type LogStoreIndex = import("./logStoreIndex").LogStoreIndex;
export const LogStoreIndex: typeof import("./logStoreIndex").LogStoreIndex = null as any;
utilities.lazyLoad(exports, ["LogStoreIndex"], () => require("./logStoreIndex"));

export { LogtailAttachmentArgs, LogtailAttachmentState } from "./logtailAttachment";
export type LogtailAttachment = import("./logtailAttachment").LogtailAttachment;
export const LogtailAttachment: typeof import("./logtailAttachment").LogtailAttachment = null as any;
utilities.lazyLoad(exports, ["LogtailAttachment"], () => require("./logtailAttachment"));

export { LogtailConfigArgs, LogtailConfigState } from "./logtailConfig";
export type LogtailConfig = import("./logtailConfig").LogtailConfig;
export const LogtailConfig: typeof import("./logtailConfig").LogtailConfig = null as any;
utilities.lazyLoad(exports, ["LogtailConfig"], () => require("./logtailConfig"));

export { MarketOrderArgs, MarketOrderState } from "./marketOrder";
export type MarketOrder = import("./marketOrder").MarketOrder;
export const MarketOrder: typeof import("./marketOrder").MarketOrder = null as any;
utilities.lazyLoad(exports, ["MarketOrder"], () => require("./marketOrder"));

export { MaxcomputeProjectArgs, MaxcomputeProjectState } from "./maxcomputeProject";
export type MaxcomputeProject = import("./maxcomputeProject").MaxcomputeProject;
export const MaxcomputeProject: typeof import("./maxcomputeProject").MaxcomputeProject = null as any;
utilities.lazyLoad(exports, ["MaxcomputeProject"], () => require("./maxcomputeProject"));

export { MessageServiceQueueArgs, MessageServiceQueueState } from "./messageServiceQueue";
export type MessageServiceQueue = import("./messageServiceQueue").MessageServiceQueue;
export const MessageServiceQueue: typeof import("./messageServiceQueue").MessageServiceQueue = null as any;
utilities.lazyLoad(exports, ["MessageServiceQueue"], () => require("./messageServiceQueue"));

export { MessageServiceSubscriptionArgs, MessageServiceSubscriptionState } from "./messageServiceSubscription";
export type MessageServiceSubscription = import("./messageServiceSubscription").MessageServiceSubscription;
export const MessageServiceSubscription: typeof import("./messageServiceSubscription").MessageServiceSubscription = null as any;
utilities.lazyLoad(exports, ["MessageServiceSubscription"], () => require("./messageServiceSubscription"));

export { MessageServiceTopicArgs, MessageServiceTopicState } from "./messageServiceTopic";
export type MessageServiceTopic = import("./messageServiceTopic").MessageServiceTopic;
export const MessageServiceTopic: typeof import("./messageServiceTopic").MessageServiceTopic = null as any;
utilities.lazyLoad(exports, ["MessageServiceTopic"], () => require("./messageServiceTopic"));

export { MhubAppArgs, MhubAppState } from "./mhubApp";
export type MhubApp = import("./mhubApp").MhubApp;
export const MhubApp: typeof import("./mhubApp").MhubApp = null as any;
utilities.lazyLoad(exports, ["MhubApp"], () => require("./mhubApp"));

export { MhubProductArgs, MhubProductState } from "./mhubProduct";
export type MhubProduct = import("./mhubProduct").MhubProduct;
export const MhubProduct: typeof import("./mhubProduct").MhubProduct = null as any;
utilities.lazyLoad(exports, ["MhubProduct"], () => require("./mhubProduct"));

export { MnsQueueArgs, MnsQueueState } from "./mnsQueue";
export type MnsQueue = import("./mnsQueue").MnsQueue;
export const MnsQueue: typeof import("./mnsQueue").MnsQueue = null as any;
utilities.lazyLoad(exports, ["MnsQueue"], () => require("./mnsQueue"));

export { MnsTopicArgs, MnsTopicState } from "./mnsTopic";
export type MnsTopic = import("./mnsTopic").MnsTopic;
export const MnsTopic: typeof import("./mnsTopic").MnsTopic = null as any;
utilities.lazyLoad(exports, ["MnsTopic"], () => require("./mnsTopic"));

export { MnsTopicSubscriptionArgs, MnsTopicSubscriptionState } from "./mnsTopicSubscription";
export type MnsTopicSubscription = import("./mnsTopicSubscription").MnsTopicSubscription;
export const MnsTopicSubscription: typeof import("./mnsTopicSubscription").MnsTopicSubscription = null as any;
utilities.lazyLoad(exports, ["MnsTopicSubscription"], () => require("./mnsTopicSubscription"));

export { MongodbAccountArgs, MongodbAccountState } from "./mongodbAccount";
export type MongodbAccount = import("./mongodbAccount").MongodbAccount;
export const MongodbAccount: typeof import("./mongodbAccount").MongodbAccount = null as any;
utilities.lazyLoad(exports, ["MongodbAccount"], () => require("./mongodbAccount"));

export { MongodbAuditPolicyArgs, MongodbAuditPolicyState } from "./mongodbAuditPolicy";
export type MongodbAuditPolicy = import("./mongodbAuditPolicy").MongodbAuditPolicy;
export const MongodbAuditPolicy: typeof import("./mongodbAuditPolicy").MongodbAuditPolicy = null as any;
utilities.lazyLoad(exports, ["MongodbAuditPolicy"], () => require("./mongodbAuditPolicy"));

export { MongodbInstanceArgs, MongodbInstanceState } from "./mongodbInstance";
export type MongodbInstance = import("./mongodbInstance").MongodbInstance;
export const MongodbInstance: typeof import("./mongodbInstance").MongodbInstance = null as any;
utilities.lazyLoad(exports, ["MongodbInstance"], () => require("./mongodbInstance"));

export { MongodbServerlessInstanceArgs, MongodbServerlessInstanceState } from "./mongodbServerlessInstance";
export type MongodbServerlessInstance = import("./mongodbServerlessInstance").MongodbServerlessInstance;
export const MongodbServerlessInstance: typeof import("./mongodbServerlessInstance").MongodbServerlessInstance = null as any;
utilities.lazyLoad(exports, ["MongodbServerlessInstance"], () => require("./mongodbServerlessInstance"));

export { MongodbShardingInstanceArgs, MongodbShardingInstanceState } from "./mongodbShardingInstance";
export type MongodbShardingInstance = import("./mongodbShardingInstance").MongodbShardingInstance;
export const MongodbShardingInstance: typeof import("./mongodbShardingInstance").MongodbShardingInstance = null as any;
utilities.lazyLoad(exports, ["MongodbShardingInstance"], () => require("./mongodbShardingInstance"));

export { MongodbShardingNetworkPrivateAddressArgs, MongodbShardingNetworkPrivateAddressState } from "./mongodbShardingNetworkPrivateAddress";
export type MongodbShardingNetworkPrivateAddress = import("./mongodbShardingNetworkPrivateAddress").MongodbShardingNetworkPrivateAddress;
export const MongodbShardingNetworkPrivateAddress: typeof import("./mongodbShardingNetworkPrivateAddress").MongodbShardingNetworkPrivateAddress = null as any;
utilities.lazyLoad(exports, ["MongodbShardingNetworkPrivateAddress"], () => require("./mongodbShardingNetworkPrivateAddress"));

export { MongodbShardingNetworkPublicAddressArgs, MongodbShardingNetworkPublicAddressState } from "./mongodbShardingNetworkPublicAddress";
export type MongodbShardingNetworkPublicAddress = import("./mongodbShardingNetworkPublicAddress").MongodbShardingNetworkPublicAddress;
export const MongodbShardingNetworkPublicAddress: typeof import("./mongodbShardingNetworkPublicAddress").MongodbShardingNetworkPublicAddress = null as any;
utilities.lazyLoad(exports, ["MongodbShardingNetworkPublicAddress"], () => require("./mongodbShardingNetworkPublicAddress"));

export { MscSubContactArgs, MscSubContactState } from "./mscSubContact";
export type MscSubContact = import("./mscSubContact").MscSubContact;
export const MscSubContact: typeof import("./mscSubContact").MscSubContact = null as any;
utilities.lazyLoad(exports, ["MscSubContact"], () => require("./mscSubContact"));

export { MscSubSubscriptionArgs, MscSubSubscriptionState } from "./mscSubSubscription";
export type MscSubSubscription = import("./mscSubSubscription").MscSubSubscription;
export const MscSubSubscription: typeof import("./mscSubSubscription").MscSubSubscription = null as any;
utilities.lazyLoad(exports, ["MscSubSubscription"], () => require("./mscSubSubscription"));

export { MscSubWebhookArgs, MscSubWebhookState } from "./mscSubWebhook";
export type MscSubWebhook = import("./mscSubWebhook").MscSubWebhook;
export const MscSubWebhook: typeof import("./mscSubWebhook").MscSubWebhook = null as any;
utilities.lazyLoad(exports, ["MscSubWebhook"], () => require("./mscSubWebhook"));

export { MseClusterArgs, MseClusterState } from "./mseCluster";
export type MseCluster = import("./mseCluster").MseCluster;
export const MseCluster: typeof import("./mseCluster").MseCluster = null as any;
utilities.lazyLoad(exports, ["MseCluster"], () => require("./mseCluster"));

export { MseEngineNamespaceArgs, MseEngineNamespaceState } from "./mseEngineNamespace";
export type MseEngineNamespace = import("./mseEngineNamespace").MseEngineNamespace;
export const MseEngineNamespace: typeof import("./mseEngineNamespace").MseEngineNamespace = null as any;
utilities.lazyLoad(exports, ["MseEngineNamespace"], () => require("./mseEngineNamespace"));

export { MseGatewayArgs, MseGatewayState } from "./mseGateway";
export type MseGateway = import("./mseGateway").MseGateway;
export const MseGateway: typeof import("./mseGateway").MseGateway = null as any;
utilities.lazyLoad(exports, ["MseGateway"], () => require("./mseGateway"));

export { MseZnodeArgs, MseZnodeState } from "./mseZnode";
export type MseZnode = import("./mseZnode").MseZnode;
export const MseZnode: typeof import("./mseZnode").MseZnode = null as any;
utilities.lazyLoad(exports, ["MseZnode"], () => require("./mseZnode"));

export { NasAccessGroupArgs, NasAccessGroupState } from "./nasAccessGroup";
export type NasAccessGroup = import("./nasAccessGroup").NasAccessGroup;
export const NasAccessGroup: typeof import("./nasAccessGroup").NasAccessGroup = null as any;
utilities.lazyLoad(exports, ["NasAccessGroup"], () => require("./nasAccessGroup"));

export { NasAccessPointArgs, NasAccessPointState } from "./nasAccessPoint";
export type NasAccessPoint = import("./nasAccessPoint").NasAccessPoint;
export const NasAccessPoint: typeof import("./nasAccessPoint").NasAccessPoint = null as any;
utilities.lazyLoad(exports, ["NasAccessPoint"], () => require("./nasAccessPoint"));

export { NasAccessRuleArgs, NasAccessRuleState } from "./nasAccessRule";
export type NasAccessRule = import("./nasAccessRule").NasAccessRule;
export const NasAccessRule: typeof import("./nasAccessRule").NasAccessRule = null as any;
utilities.lazyLoad(exports, ["NasAccessRule"], () => require("./nasAccessRule"));

export { NasAutoSnapshotPolicyArgs, NasAutoSnapshotPolicyState } from "./nasAutoSnapshotPolicy";
export type NasAutoSnapshotPolicy = import("./nasAutoSnapshotPolicy").NasAutoSnapshotPolicy;
export const NasAutoSnapshotPolicy: typeof import("./nasAutoSnapshotPolicy").NasAutoSnapshotPolicy = null as any;
utilities.lazyLoad(exports, ["NasAutoSnapshotPolicy"], () => require("./nasAutoSnapshotPolicy"));

export { NasDataFlowArgs, NasDataFlowState } from "./nasDataFlow";
export type NasDataFlow = import("./nasDataFlow").NasDataFlow;
export const NasDataFlow: typeof import("./nasDataFlow").NasDataFlow = null as any;
utilities.lazyLoad(exports, ["NasDataFlow"], () => require("./nasDataFlow"));

export { NasFileSystemArgs, NasFileSystemState } from "./nasFileSystem";
export type NasFileSystem = import("./nasFileSystem").NasFileSystem;
export const NasFileSystem: typeof import("./nasFileSystem").NasFileSystem = null as any;
utilities.lazyLoad(exports, ["NasFileSystem"], () => require("./nasFileSystem"));

export { NasFilesetArgs, NasFilesetState } from "./nasFileset";
export type NasFileset = import("./nasFileset").NasFileset;
export const NasFileset: typeof import("./nasFileset").NasFileset = null as any;
utilities.lazyLoad(exports, ["NasFileset"], () => require("./nasFileset"));

export { NasLifecyclePolicyArgs, NasLifecyclePolicyState } from "./nasLifecyclePolicy";
export type NasLifecyclePolicy = import("./nasLifecyclePolicy").NasLifecyclePolicy;
export const NasLifecyclePolicy: typeof import("./nasLifecyclePolicy").NasLifecyclePolicy = null as any;
utilities.lazyLoad(exports, ["NasLifecyclePolicy"], () => require("./nasLifecyclePolicy"));

export { NasMountTargetArgs, NasMountTargetState } from "./nasMountTarget";
export type NasMountTarget = import("./nasMountTarget").NasMountTarget;
export const NasMountTarget: typeof import("./nasMountTarget").NasMountTarget = null as any;
utilities.lazyLoad(exports, ["NasMountTarget"], () => require("./nasMountTarget"));

export { NasRecycleBinArgs, NasRecycleBinState } from "./nasRecycleBin";
export type NasRecycleBin = import("./nasRecycleBin").NasRecycleBin;
export const NasRecycleBin: typeof import("./nasRecycleBin").NasRecycleBin = null as any;
utilities.lazyLoad(exports, ["NasRecycleBin"], () => require("./nasRecycleBin"));

export { NasSmbAclAttachmentArgs, NasSmbAclAttachmentState } from "./nasSmbAclAttachment";
export type NasSmbAclAttachment = import("./nasSmbAclAttachment").NasSmbAclAttachment;
export const NasSmbAclAttachment: typeof import("./nasSmbAclAttachment").NasSmbAclAttachment = null as any;
utilities.lazyLoad(exports, ["NasSmbAclAttachment"], () => require("./nasSmbAclAttachment"));

export { NasSnapshotArgs, NasSnapshotState } from "./nasSnapshot";
export type NasSnapshot = import("./nasSnapshot").NasSnapshot;
export const NasSnapshot: typeof import("./nasSnapshot").NasSnapshot = null as any;
utilities.lazyLoad(exports, ["NasSnapshot"], () => require("./nasSnapshot"));

export { NatGatewayArgs, NatGatewayState } from "./natGateway";
export type NatGateway = import("./natGateway").NatGateway;
export const NatGateway: typeof import("./natGateway").NatGateway = null as any;
utilities.lazyLoad(exports, ["NatGateway"], () => require("./natGateway"));

export { NetworkAclArgs, NetworkAclState } from "./networkAcl";
export type NetworkAcl = import("./networkAcl").NetworkAcl;
export const NetworkAcl: typeof import("./networkAcl").NetworkAcl = null as any;
utilities.lazyLoad(exports, ["NetworkAcl"], () => require("./networkAcl"));

export { NetworkAclAttachmentArgs, NetworkAclAttachmentState } from "./networkAclAttachment";
export type NetworkAclAttachment = import("./networkAclAttachment").NetworkAclAttachment;
export const NetworkAclAttachment: typeof import("./networkAclAttachment").NetworkAclAttachment = null as any;
utilities.lazyLoad(exports, ["NetworkAclAttachment"], () => require("./networkAclAttachment"));

export { NetworkAclEntriesArgs, NetworkAclEntriesState } from "./networkAclEntries";
export type NetworkAclEntries = import("./networkAclEntries").NetworkAclEntries;
export const NetworkAclEntries: typeof import("./networkAclEntries").NetworkAclEntries = null as any;
utilities.lazyLoad(exports, ["NetworkAclEntries"], () => require("./networkAclEntries"));

export { NetworkInterfaceArgs, NetworkInterfaceState } from "./networkInterface";
export type NetworkInterface = import("./networkInterface").NetworkInterface;
export const NetworkInterface: typeof import("./networkInterface").NetworkInterface = null as any;
utilities.lazyLoad(exports, ["NetworkInterface"], () => require("./networkInterface"));

export { NetworkInterfaceAttachmentArgs, NetworkInterfaceAttachmentState } from "./networkInterfaceAttachment";
export type NetworkInterfaceAttachment = import("./networkInterfaceAttachment").NetworkInterfaceAttachment;
export const NetworkInterfaceAttachment: typeof import("./networkInterfaceAttachment").NetworkInterfaceAttachment = null as any;
utilities.lazyLoad(exports, ["NetworkInterfaceAttachment"], () => require("./networkInterfaceAttachment"));

export { NlbListenerArgs, NlbListenerState } from "./nlbListener";
export type NlbListener = import("./nlbListener").NlbListener;
export const NlbListener: typeof import("./nlbListener").NlbListener = null as any;
utilities.lazyLoad(exports, ["NlbListener"], () => require("./nlbListener"));

export { NlbListenerAdditionalCertificateAttachmentArgs, NlbListenerAdditionalCertificateAttachmentState } from "./nlbListenerAdditionalCertificateAttachment";
export type NlbListenerAdditionalCertificateAttachment = import("./nlbListenerAdditionalCertificateAttachment").NlbListenerAdditionalCertificateAttachment;
export const NlbListenerAdditionalCertificateAttachment: typeof import("./nlbListenerAdditionalCertificateAttachment").NlbListenerAdditionalCertificateAttachment = null as any;
utilities.lazyLoad(exports, ["NlbListenerAdditionalCertificateAttachment"], () => require("./nlbListenerAdditionalCertificateAttachment"));

export { NlbLoadBalancerArgs, NlbLoadBalancerState } from "./nlbLoadBalancer";
export type NlbLoadBalancer = import("./nlbLoadBalancer").NlbLoadBalancer;
export const NlbLoadBalancer: typeof import("./nlbLoadBalancer").NlbLoadBalancer = null as any;
utilities.lazyLoad(exports, ["NlbLoadBalancer"], () => require("./nlbLoadBalancer"));

export { NlbLoadBalancerSecurityGroupAttachmentArgs, NlbLoadBalancerSecurityGroupAttachmentState } from "./nlbLoadBalancerSecurityGroupAttachment";
export type NlbLoadBalancerSecurityGroupAttachment = import("./nlbLoadBalancerSecurityGroupAttachment").NlbLoadBalancerSecurityGroupAttachment;
export const NlbLoadBalancerSecurityGroupAttachment: typeof import("./nlbLoadBalancerSecurityGroupAttachment").NlbLoadBalancerSecurityGroupAttachment = null as any;
utilities.lazyLoad(exports, ["NlbLoadBalancerSecurityGroupAttachment"], () => require("./nlbLoadBalancerSecurityGroupAttachment"));

export { NlbLoadbalancerCommonBandwidthPackageAttachmentArgs, NlbLoadbalancerCommonBandwidthPackageAttachmentState } from "./nlbLoadbalancerCommonBandwidthPackageAttachment";
export type NlbLoadbalancerCommonBandwidthPackageAttachment = import("./nlbLoadbalancerCommonBandwidthPackageAttachment").NlbLoadbalancerCommonBandwidthPackageAttachment;
export const NlbLoadbalancerCommonBandwidthPackageAttachment: typeof import("./nlbLoadbalancerCommonBandwidthPackageAttachment").NlbLoadbalancerCommonBandwidthPackageAttachment = null as any;
utilities.lazyLoad(exports, ["NlbLoadbalancerCommonBandwidthPackageAttachment"], () => require("./nlbLoadbalancerCommonBandwidthPackageAttachment"));

export { NlbSecurityPolicyArgs, NlbSecurityPolicyState } from "./nlbSecurityPolicy";
export type NlbSecurityPolicy = import("./nlbSecurityPolicy").NlbSecurityPolicy;
export const NlbSecurityPolicy: typeof import("./nlbSecurityPolicy").NlbSecurityPolicy = null as any;
utilities.lazyLoad(exports, ["NlbSecurityPolicy"], () => require("./nlbSecurityPolicy"));

export { NlbServerGroupArgs, NlbServerGroupState } from "./nlbServerGroup";
export type NlbServerGroup = import("./nlbServerGroup").NlbServerGroup;
export const NlbServerGroup: typeof import("./nlbServerGroup").NlbServerGroup = null as any;
utilities.lazyLoad(exports, ["NlbServerGroup"], () => require("./nlbServerGroup"));

export { NlbServerGroupServerAttachmentArgs, NlbServerGroupServerAttachmentState } from "./nlbServerGroupServerAttachment";
export type NlbServerGroupServerAttachment = import("./nlbServerGroupServerAttachment").NlbServerGroupServerAttachment;
export const NlbServerGroupServerAttachment: typeof import("./nlbServerGroupServerAttachment").NlbServerGroupServerAttachment = null as any;
utilities.lazyLoad(exports, ["NlbServerGroupServerAttachment"], () => require("./nlbServerGroupServerAttachment"));

export { OceanBaseInstanceArgs, OceanBaseInstanceState } from "./oceanBaseInstance";
export type OceanBaseInstance = import("./oceanBaseInstance").OceanBaseInstance;
export const OceanBaseInstance: typeof import("./oceanBaseInstance").OceanBaseInstance = null as any;
utilities.lazyLoad(exports, ["OceanBaseInstance"], () => require("./oceanBaseInstance"));

export { OnsGroupArgs, OnsGroupState } from "./onsGroup";
export type OnsGroup = import("./onsGroup").OnsGroup;
export const OnsGroup: typeof import("./onsGroup").OnsGroup = null as any;
utilities.lazyLoad(exports, ["OnsGroup"], () => require("./onsGroup"));

export { OnsInstanceArgs, OnsInstanceState } from "./onsInstance";
export type OnsInstance = import("./onsInstance").OnsInstance;
export const OnsInstance: typeof import("./onsInstance").OnsInstance = null as any;
utilities.lazyLoad(exports, ["OnsInstance"], () => require("./onsInstance"));

export { OnsTopicArgs, OnsTopicState } from "./onsTopic";
export type OnsTopic = import("./onsTopic").OnsTopic;
export const OnsTopic: typeof import("./onsTopic").OnsTopic = null as any;
utilities.lazyLoad(exports, ["OnsTopic"], () => require("./onsTopic"));

export { OosApplicationArgs, OosApplicationState } from "./oosApplication";
export type OosApplication = import("./oosApplication").OosApplication;
export const OosApplication: typeof import("./oosApplication").OosApplication = null as any;
utilities.lazyLoad(exports, ["OosApplication"], () => require("./oosApplication"));

export { OosApplicationGroupArgs, OosApplicationGroupState } from "./oosApplicationGroup";
export type OosApplicationGroup = import("./oosApplicationGroup").OosApplicationGroup;
export const OosApplicationGroup: typeof import("./oosApplicationGroup").OosApplicationGroup = null as any;
utilities.lazyLoad(exports, ["OosApplicationGroup"], () => require("./oosApplicationGroup"));

export { OosDefaultPatchBaselineArgs, OosDefaultPatchBaselineState } from "./oosDefaultPatchBaseline";
export type OosDefaultPatchBaseline = import("./oosDefaultPatchBaseline").OosDefaultPatchBaseline;
export const OosDefaultPatchBaseline: typeof import("./oosDefaultPatchBaseline").OosDefaultPatchBaseline = null as any;
utilities.lazyLoad(exports, ["OosDefaultPatchBaseline"], () => require("./oosDefaultPatchBaseline"));

export { OosExecutionArgs, OosExecutionState } from "./oosExecution";
export type OosExecution = import("./oosExecution").OosExecution;
export const OosExecution: typeof import("./oosExecution").OosExecution = null as any;
utilities.lazyLoad(exports, ["OosExecution"], () => require("./oosExecution"));

export { OosParameterArgs, OosParameterState } from "./oosParameter";
export type OosParameter = import("./oosParameter").OosParameter;
export const OosParameter: typeof import("./oosParameter").OosParameter = null as any;
utilities.lazyLoad(exports, ["OosParameter"], () => require("./oosParameter"));

export { OosPatchBaselineArgs, OosPatchBaselineState } from "./oosPatchBaseline";
export type OosPatchBaseline = import("./oosPatchBaseline").OosPatchBaseline;
export const OosPatchBaseline: typeof import("./oosPatchBaseline").OosPatchBaseline = null as any;
utilities.lazyLoad(exports, ["OosPatchBaseline"], () => require("./oosPatchBaseline"));

export { OosSecretParameterArgs, OosSecretParameterState } from "./oosSecretParameter";
export type OosSecretParameter = import("./oosSecretParameter").OosSecretParameter;
export const OosSecretParameter: typeof import("./oosSecretParameter").OosSecretParameter = null as any;
utilities.lazyLoad(exports, ["OosSecretParameter"], () => require("./oosSecretParameter"));

export { OosServiceSettingArgs, OosServiceSettingState } from "./oosServiceSetting";
export type OosServiceSetting = import("./oosServiceSetting").OosServiceSetting;
export const OosServiceSetting: typeof import("./oosServiceSetting").OosServiceSetting = null as any;
utilities.lazyLoad(exports, ["OosServiceSetting"], () => require("./oosServiceSetting"));

export { OosStateConfigurationArgs, OosStateConfigurationState } from "./oosStateConfiguration";
export type OosStateConfiguration = import("./oosStateConfiguration").OosStateConfiguration;
export const OosStateConfiguration: typeof import("./oosStateConfiguration").OosStateConfiguration = null as any;
utilities.lazyLoad(exports, ["OosStateConfiguration"], () => require("./oosStateConfiguration"));

export { OosTemplateArgs, OosTemplateState } from "./oosTemplate";
export type OosTemplate = import("./oosTemplate").OosTemplate;
export const OosTemplate: typeof import("./oosTemplate").OosTemplate = null as any;
utilities.lazyLoad(exports, ["OosTemplate"], () => require("./oosTemplate"));

export { OpenSearchAppGroupArgs, OpenSearchAppGroupState } from "./openSearchAppGroup";
export type OpenSearchAppGroup = import("./openSearchAppGroup").OpenSearchAppGroup;
export const OpenSearchAppGroup: typeof import("./openSearchAppGroup").OpenSearchAppGroup = null as any;
utilities.lazyLoad(exports, ["OpenSearchAppGroup"], () => require("./openSearchAppGroup"));

export { OssAccountPublicAccessBlockArgs, OssAccountPublicAccessBlockState } from "./ossAccountPublicAccessBlock";
export type OssAccountPublicAccessBlock = import("./ossAccountPublicAccessBlock").OssAccountPublicAccessBlock;
export const OssAccountPublicAccessBlock: typeof import("./ossAccountPublicAccessBlock").OssAccountPublicAccessBlock = null as any;
utilities.lazyLoad(exports, ["OssAccountPublicAccessBlock"], () => require("./ossAccountPublicAccessBlock"));

export { OssBucketArgs, OssBucketState } from "./ossBucket";
export type OssBucket = import("./ossBucket").OssBucket;
export const OssBucket: typeof import("./ossBucket").OssBucket = null as any;
utilities.lazyLoad(exports, ["OssBucket"], () => require("./ossBucket"));

export { OssBucketAccessMonitorArgs, OssBucketAccessMonitorState } from "./ossBucketAccessMonitor";
export type OssBucketAccessMonitor = import("./ossBucketAccessMonitor").OssBucketAccessMonitor;
export const OssBucketAccessMonitor: typeof import("./ossBucketAccessMonitor").OssBucketAccessMonitor = null as any;
utilities.lazyLoad(exports, ["OssBucketAccessMonitor"], () => require("./ossBucketAccessMonitor"));

export { OssBucketAclArgs, OssBucketAclState } from "./ossBucketAcl";
export type OssBucketAcl = import("./ossBucketAcl").OssBucketAcl;
export const OssBucketAcl: typeof import("./ossBucketAcl").OssBucketAcl = null as any;
utilities.lazyLoad(exports, ["OssBucketAcl"], () => require("./ossBucketAcl"));

export { OssBucketCorsArgs, OssBucketCorsState } from "./ossBucketCors";
export type OssBucketCors = import("./ossBucketCors").OssBucketCors;
export const OssBucketCors: typeof import("./ossBucketCors").OssBucketCors = null as any;
utilities.lazyLoad(exports, ["OssBucketCors"], () => require("./ossBucketCors"));

export { OssBucketDataRedundancyTransitionArgs, OssBucketDataRedundancyTransitionState } from "./ossBucketDataRedundancyTransition";
export type OssBucketDataRedundancyTransition = import("./ossBucketDataRedundancyTransition").OssBucketDataRedundancyTransition;
export const OssBucketDataRedundancyTransition: typeof import("./ossBucketDataRedundancyTransition").OssBucketDataRedundancyTransition = null as any;
utilities.lazyLoad(exports, ["OssBucketDataRedundancyTransition"], () => require("./ossBucketDataRedundancyTransition"));

export { OssBucketHttpsConfigArgs, OssBucketHttpsConfigState } from "./ossBucketHttpsConfig";
export type OssBucketHttpsConfig = import("./ossBucketHttpsConfig").OssBucketHttpsConfig;
export const OssBucketHttpsConfig: typeof import("./ossBucketHttpsConfig").OssBucketHttpsConfig = null as any;
utilities.lazyLoad(exports, ["OssBucketHttpsConfig"], () => require("./ossBucketHttpsConfig"));

export { OssBucketLoggingArgs, OssBucketLoggingState } from "./ossBucketLogging";
export type OssBucketLogging = import("./ossBucketLogging").OssBucketLogging;
export const OssBucketLogging: typeof import("./ossBucketLogging").OssBucketLogging = null as any;
utilities.lazyLoad(exports, ["OssBucketLogging"], () => require("./ossBucketLogging"));

export { OssBucketMetaQueryArgs, OssBucketMetaQueryState } from "./ossBucketMetaQuery";
export type OssBucketMetaQuery = import("./ossBucketMetaQuery").OssBucketMetaQuery;
export const OssBucketMetaQuery: typeof import("./ossBucketMetaQuery").OssBucketMetaQuery = null as any;
utilities.lazyLoad(exports, ["OssBucketMetaQuery"], () => require("./ossBucketMetaQuery"));

export { OssBucketObjectArgs, OssBucketObjectState } from "./ossBucketObject";
export type OssBucketObject = import("./ossBucketObject").OssBucketObject;
export const OssBucketObject: typeof import("./ossBucketObject").OssBucketObject = null as any;
utilities.lazyLoad(exports, ["OssBucketObject"], () => require("./ossBucketObject"));

export { OssBucketPolicyArgs, OssBucketPolicyState } from "./ossBucketPolicy";
export type OssBucketPolicy = import("./ossBucketPolicy").OssBucketPolicy;
export const OssBucketPolicy: typeof import("./ossBucketPolicy").OssBucketPolicy = null as any;
utilities.lazyLoad(exports, ["OssBucketPolicy"], () => require("./ossBucketPolicy"));

export { OssBucketPublicAccessBlockArgs, OssBucketPublicAccessBlockState } from "./ossBucketPublicAccessBlock";
export type OssBucketPublicAccessBlock = import("./ossBucketPublicAccessBlock").OssBucketPublicAccessBlock;
export const OssBucketPublicAccessBlock: typeof import("./ossBucketPublicAccessBlock").OssBucketPublicAccessBlock = null as any;
utilities.lazyLoad(exports, ["OssBucketPublicAccessBlock"], () => require("./ossBucketPublicAccessBlock"));

export { OssBucketRefererArgs, OssBucketRefererState } from "./ossBucketReferer";
export type OssBucketReferer = import("./ossBucketReferer").OssBucketReferer;
export const OssBucketReferer: typeof import("./ossBucketReferer").OssBucketReferer = null as any;
utilities.lazyLoad(exports, ["OssBucketReferer"], () => require("./ossBucketReferer"));

export { OssBucketReplicationArgs, OssBucketReplicationState } from "./ossBucketReplication";
export type OssBucketReplication = import("./ossBucketReplication").OssBucketReplication;
export const OssBucketReplication: typeof import("./ossBucketReplication").OssBucketReplication = null as any;
utilities.lazyLoad(exports, ["OssBucketReplication"], () => require("./ossBucketReplication"));

export { OssBucketRequestPaymentArgs, OssBucketRequestPaymentState } from "./ossBucketRequestPayment";
export type OssBucketRequestPayment = import("./ossBucketRequestPayment").OssBucketRequestPayment;
export const OssBucketRequestPayment: typeof import("./ossBucketRequestPayment").OssBucketRequestPayment = null as any;
utilities.lazyLoad(exports, ["OssBucketRequestPayment"], () => require("./ossBucketRequestPayment"));

export { OssBucketServerSideEncryptionArgs, OssBucketServerSideEncryptionState } from "./ossBucketServerSideEncryption";
export type OssBucketServerSideEncryption = import("./ossBucketServerSideEncryption").OssBucketServerSideEncryption;
export const OssBucketServerSideEncryption: typeof import("./ossBucketServerSideEncryption").OssBucketServerSideEncryption = null as any;
utilities.lazyLoad(exports, ["OssBucketServerSideEncryption"], () => require("./ossBucketServerSideEncryption"));

export { OssBucketTransferAccelerationArgs, OssBucketTransferAccelerationState } from "./ossBucketTransferAcceleration";
export type OssBucketTransferAcceleration = import("./ossBucketTransferAcceleration").OssBucketTransferAcceleration;
export const OssBucketTransferAcceleration: typeof import("./ossBucketTransferAcceleration").OssBucketTransferAcceleration = null as any;
utilities.lazyLoad(exports, ["OssBucketTransferAcceleration"], () => require("./ossBucketTransferAcceleration"));

export { OssBucketUserDefinedLogFieldsArgs, OssBucketUserDefinedLogFieldsState } from "./ossBucketUserDefinedLogFields";
export type OssBucketUserDefinedLogFields = import("./ossBucketUserDefinedLogFields").OssBucketUserDefinedLogFields;
export const OssBucketUserDefinedLogFields: typeof import("./ossBucketUserDefinedLogFields").OssBucketUserDefinedLogFields = null as any;
utilities.lazyLoad(exports, ["OssBucketUserDefinedLogFields"], () => require("./ossBucketUserDefinedLogFields"));

export { OssBucketVersioningArgs, OssBucketVersioningState } from "./ossBucketVersioning";
export type OssBucketVersioning = import("./ossBucketVersioning").OssBucketVersioning;
export const OssBucketVersioning: typeof import("./ossBucketVersioning").OssBucketVersioning = null as any;
utilities.lazyLoad(exports, ["OssBucketVersioning"], () => require("./ossBucketVersioning"));

export { OtsInstanceArgs, OtsInstanceState } from "./otsInstance";
export type OtsInstance = import("./otsInstance").OtsInstance;
export const OtsInstance: typeof import("./otsInstance").OtsInstance = null as any;
utilities.lazyLoad(exports, ["OtsInstance"], () => require("./otsInstance"));

export { OtsInstanceAttachmentArgs, OtsInstanceAttachmentState } from "./otsInstanceAttachment";
export type OtsInstanceAttachment = import("./otsInstanceAttachment").OtsInstanceAttachment;
export const OtsInstanceAttachment: typeof import("./otsInstanceAttachment").OtsInstanceAttachment = null as any;
utilities.lazyLoad(exports, ["OtsInstanceAttachment"], () => require("./otsInstanceAttachment"));

export { OtsSearchIndexArgs, OtsSearchIndexState } from "./otsSearchIndex";
export type OtsSearchIndex = import("./otsSearchIndex").OtsSearchIndex;
export const OtsSearchIndex: typeof import("./otsSearchIndex").OtsSearchIndex = null as any;
utilities.lazyLoad(exports, ["OtsSearchIndex"], () => require("./otsSearchIndex"));

export { OtsSecondaryIndexArgs, OtsSecondaryIndexState } from "./otsSecondaryIndex";
export type OtsSecondaryIndex = import("./otsSecondaryIndex").OtsSecondaryIndex;
export const OtsSecondaryIndex: typeof import("./otsSecondaryIndex").OtsSecondaryIndex = null as any;
utilities.lazyLoad(exports, ["OtsSecondaryIndex"], () => require("./otsSecondaryIndex"));

export { OtsTableArgs, OtsTableState } from "./otsTable";
export type OtsTable = import("./otsTable").OtsTable;
export const OtsTable: typeof import("./otsTable").OtsTable = null as any;
utilities.lazyLoad(exports, ["OtsTable"], () => require("./otsTable"));

export { OtsTunnelArgs, OtsTunnelState } from "./otsTunnel";
export type OtsTunnel = import("./otsTunnel").OtsTunnel;
export const OtsTunnel: typeof import("./otsTunnel").OtsTunnel = null as any;
utilities.lazyLoad(exports, ["OtsTunnel"], () => require("./otsTunnel"));

export { PolardbAccountArgs, PolardbAccountState } from "./polardbAccount";
export type PolardbAccount = import("./polardbAccount").PolardbAccount;
export const PolardbAccount: typeof import("./polardbAccount").PolardbAccount = null as any;
utilities.lazyLoad(exports, ["PolardbAccount"], () => require("./polardbAccount"));

export { PolardbAccountPrivilegeArgs, PolardbAccountPrivilegeState } from "./polardbAccountPrivilege";
export type PolardbAccountPrivilege = import("./polardbAccountPrivilege").PolardbAccountPrivilege;
export const PolardbAccountPrivilege: typeof import("./polardbAccountPrivilege").PolardbAccountPrivilege = null as any;
utilities.lazyLoad(exports, ["PolardbAccountPrivilege"], () => require("./polardbAccountPrivilege"));

export { PolardbBackupPolicyArgs, PolardbBackupPolicyState } from "./polardbBackupPolicy";
export type PolardbBackupPolicy = import("./polardbBackupPolicy").PolardbBackupPolicy;
export const PolardbBackupPolicy: typeof import("./polardbBackupPolicy").PolardbBackupPolicy = null as any;
utilities.lazyLoad(exports, ["PolardbBackupPolicy"], () => require("./polardbBackupPolicy"));

export { PolardbClusterArgs, PolardbClusterState } from "./polardbCluster";
export type PolardbCluster = import("./polardbCluster").PolardbCluster;
export const PolardbCluster: typeof import("./polardbCluster").PolardbCluster = null as any;
utilities.lazyLoad(exports, ["PolardbCluster"], () => require("./polardbCluster"));

export { PolardbClusterEndpointArgs, PolardbClusterEndpointState } from "./polardbClusterEndpoint";
export type PolardbClusterEndpoint = import("./polardbClusterEndpoint").PolardbClusterEndpoint;
export const PolardbClusterEndpoint: typeof import("./polardbClusterEndpoint").PolardbClusterEndpoint = null as any;
utilities.lazyLoad(exports, ["PolardbClusterEndpoint"], () => require("./polardbClusterEndpoint"));

export { PolardbDatabaseArgs, PolardbDatabaseState } from "./polardbDatabase";
export type PolardbDatabase = import("./polardbDatabase").PolardbDatabase;
export const PolardbDatabase: typeof import("./polardbDatabase").PolardbDatabase = null as any;
utilities.lazyLoad(exports, ["PolardbDatabase"], () => require("./polardbDatabase"));

export { PolardbEndpointArgs, PolardbEndpointState } from "./polardbEndpoint";
export type PolardbEndpoint = import("./polardbEndpoint").PolardbEndpoint;
export const PolardbEndpoint: typeof import("./polardbEndpoint").PolardbEndpoint = null as any;
utilities.lazyLoad(exports, ["PolardbEndpoint"], () => require("./polardbEndpoint"));

export { PolardbEndpointAddressArgs, PolardbEndpointAddressState } from "./polardbEndpointAddress";
export type PolardbEndpointAddress = import("./polardbEndpointAddress").PolardbEndpointAddress;
export const PolardbEndpointAddress: typeof import("./polardbEndpointAddress").PolardbEndpointAddress = null as any;
utilities.lazyLoad(exports, ["PolardbEndpointAddress"], () => require("./polardbEndpointAddress"));

export { PolardbGlobalDatabaseNetworkArgs, PolardbGlobalDatabaseNetworkState } from "./polardbGlobalDatabaseNetwork";
export type PolardbGlobalDatabaseNetwork = import("./polardbGlobalDatabaseNetwork").PolardbGlobalDatabaseNetwork;
export const PolardbGlobalDatabaseNetwork: typeof import("./polardbGlobalDatabaseNetwork").PolardbGlobalDatabaseNetwork = null as any;
utilities.lazyLoad(exports, ["PolardbGlobalDatabaseNetwork"], () => require("./polardbGlobalDatabaseNetwork"));

export { PolardbParameterGroupArgs, PolardbParameterGroupState } from "./polardbParameterGroup";
export type PolardbParameterGroup = import("./polardbParameterGroup").PolardbParameterGroup;
export const PolardbParameterGroup: typeof import("./polardbParameterGroup").PolardbParameterGroup = null as any;
utilities.lazyLoad(exports, ["PolardbParameterGroup"], () => require("./polardbParameterGroup"));

export { PolardbPrimaryEndpointArgs, PolardbPrimaryEndpointState } from "./polardbPrimaryEndpoint";
export type PolardbPrimaryEndpoint = import("./polardbPrimaryEndpoint").PolardbPrimaryEndpoint;
export const PolardbPrimaryEndpoint: typeof import("./polardbPrimaryEndpoint").PolardbPrimaryEndpoint = null as any;
utilities.lazyLoad(exports, ["PolardbPrimaryEndpoint"], () => require("./polardbPrimaryEndpoint"));

export { PrivatelinkVpcEndpointArgs, PrivatelinkVpcEndpointState } from "./privatelinkVpcEndpoint";
export type PrivatelinkVpcEndpoint = import("./privatelinkVpcEndpoint").PrivatelinkVpcEndpoint;
export const PrivatelinkVpcEndpoint: typeof import("./privatelinkVpcEndpoint").PrivatelinkVpcEndpoint = null as any;
utilities.lazyLoad(exports, ["PrivatelinkVpcEndpoint"], () => require("./privatelinkVpcEndpoint"));

export { PrivatelinkVpcEndpointConnectionArgs, PrivatelinkVpcEndpointConnectionState } from "./privatelinkVpcEndpointConnection";
export type PrivatelinkVpcEndpointConnection = import("./privatelinkVpcEndpointConnection").PrivatelinkVpcEndpointConnection;
export const PrivatelinkVpcEndpointConnection: typeof import("./privatelinkVpcEndpointConnection").PrivatelinkVpcEndpointConnection = null as any;
utilities.lazyLoad(exports, ["PrivatelinkVpcEndpointConnection"], () => require("./privatelinkVpcEndpointConnection"));

export { PrivatelinkVpcEndpointServiceArgs, PrivatelinkVpcEndpointServiceState } from "./privatelinkVpcEndpointService";
export type PrivatelinkVpcEndpointService = import("./privatelinkVpcEndpointService").PrivatelinkVpcEndpointService;
export const PrivatelinkVpcEndpointService: typeof import("./privatelinkVpcEndpointService").PrivatelinkVpcEndpointService = null as any;
utilities.lazyLoad(exports, ["PrivatelinkVpcEndpointService"], () => require("./privatelinkVpcEndpointService"));

export { PrivatelinkVpcEndpointServiceResourceArgs, PrivatelinkVpcEndpointServiceResourceState } from "./privatelinkVpcEndpointServiceResource";
export type PrivatelinkVpcEndpointServiceResource = import("./privatelinkVpcEndpointServiceResource").PrivatelinkVpcEndpointServiceResource;
export const PrivatelinkVpcEndpointServiceResource: typeof import("./privatelinkVpcEndpointServiceResource").PrivatelinkVpcEndpointServiceResource = null as any;
utilities.lazyLoad(exports, ["PrivatelinkVpcEndpointServiceResource"], () => require("./privatelinkVpcEndpointServiceResource"));

export { PrivatelinkVpcEndpointServiceUserArgs, PrivatelinkVpcEndpointServiceUserState } from "./privatelinkVpcEndpointServiceUser";
export type PrivatelinkVpcEndpointServiceUser = import("./privatelinkVpcEndpointServiceUser").PrivatelinkVpcEndpointServiceUser;
export const PrivatelinkVpcEndpointServiceUser: typeof import("./privatelinkVpcEndpointServiceUser").PrivatelinkVpcEndpointServiceUser = null as any;
utilities.lazyLoad(exports, ["PrivatelinkVpcEndpointServiceUser"], () => require("./privatelinkVpcEndpointServiceUser"));

export { PrivatelinkVpcEndpointZoneArgs, PrivatelinkVpcEndpointZoneState } from "./privatelinkVpcEndpointZone";
export type PrivatelinkVpcEndpointZone = import("./privatelinkVpcEndpointZone").PrivatelinkVpcEndpointZone;
export const PrivatelinkVpcEndpointZone: typeof import("./privatelinkVpcEndpointZone").PrivatelinkVpcEndpointZone = null as any;
utilities.lazyLoad(exports, ["PrivatelinkVpcEndpointZone"], () => require("./privatelinkVpcEndpointZone"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { PvtzEndpointArgs, PvtzEndpointState } from "./pvtzEndpoint";
export type PvtzEndpoint = import("./pvtzEndpoint").PvtzEndpoint;
export const PvtzEndpoint: typeof import("./pvtzEndpoint").PvtzEndpoint = null as any;
utilities.lazyLoad(exports, ["PvtzEndpoint"], () => require("./pvtzEndpoint"));

export { PvtzRuleArgs, PvtzRuleState } from "./pvtzRule";
export type PvtzRule = import("./pvtzRule").PvtzRule;
export const PvtzRule: typeof import("./pvtzRule").PvtzRule = null as any;
utilities.lazyLoad(exports, ["PvtzRule"], () => require("./pvtzRule"));

export { PvtzRuleAttachmentArgs, PvtzRuleAttachmentState } from "./pvtzRuleAttachment";
export type PvtzRuleAttachment = import("./pvtzRuleAttachment").PvtzRuleAttachment;
export const PvtzRuleAttachment: typeof import("./pvtzRuleAttachment").PvtzRuleAttachment = null as any;
utilities.lazyLoad(exports, ["PvtzRuleAttachment"], () => require("./pvtzRuleAttachment"));

export { PvtzUserVpcAuthorizationArgs, PvtzUserVpcAuthorizationState } from "./pvtzUserVpcAuthorization";
export type PvtzUserVpcAuthorization = import("./pvtzUserVpcAuthorization").PvtzUserVpcAuthorization;
export const PvtzUserVpcAuthorization: typeof import("./pvtzUserVpcAuthorization").PvtzUserVpcAuthorization = null as any;
utilities.lazyLoad(exports, ["PvtzUserVpcAuthorization"], () => require("./pvtzUserVpcAuthorization"));

export { PvtzZoneArgs, PvtzZoneState } from "./pvtzZone";
export type PvtzZone = import("./pvtzZone").PvtzZone;
export const PvtzZone: typeof import("./pvtzZone").PvtzZone = null as any;
utilities.lazyLoad(exports, ["PvtzZone"], () => require("./pvtzZone"));

export { PvtzZoneAttachmentArgs, PvtzZoneAttachmentState } from "./pvtzZoneAttachment";
export type PvtzZoneAttachment = import("./pvtzZoneAttachment").PvtzZoneAttachment;
export const PvtzZoneAttachment: typeof import("./pvtzZoneAttachment").PvtzZoneAttachment = null as any;
utilities.lazyLoad(exports, ["PvtzZoneAttachment"], () => require("./pvtzZoneAttachment"));

export { PvtzZoneRecordArgs, PvtzZoneRecordState } from "./pvtzZoneRecord";
export type PvtzZoneRecord = import("./pvtzZoneRecord").PvtzZoneRecord;
export const PvtzZoneRecord: typeof import("./pvtzZoneRecord").PvtzZoneRecord = null as any;
utilities.lazyLoad(exports, ["PvtzZoneRecord"], () => require("./pvtzZoneRecord"));

export { QuickBiUserArgs, QuickBiUserState } from "./quickBiUser";
export type QuickBiUser = import("./quickBiUser").QuickBiUser;
export const QuickBiUser: typeof import("./quickBiUser").QuickBiUser = null as any;
utilities.lazyLoad(exports, ["QuickBiUser"], () => require("./quickBiUser"));

export { QuotasApplicationInfoArgs, QuotasApplicationInfoState } from "./quotasApplicationInfo";
export type QuotasApplicationInfo = import("./quotasApplicationInfo").QuotasApplicationInfo;
export const QuotasApplicationInfo: typeof import("./quotasApplicationInfo").QuotasApplicationInfo = null as any;
utilities.lazyLoad(exports, ["QuotasApplicationInfo"], () => require("./quotasApplicationInfo"));

export { QuotasQuotaAlarmArgs, QuotasQuotaAlarmState } from "./quotasQuotaAlarm";
export type QuotasQuotaAlarm = import("./quotasQuotaAlarm").QuotasQuotaAlarm;
export const QuotasQuotaAlarm: typeof import("./quotasQuotaAlarm").QuotasQuotaAlarm = null as any;
utilities.lazyLoad(exports, ["QuotasQuotaAlarm"], () => require("./quotasQuotaAlarm"));

export { QuotasQuotaApplicationArgs, QuotasQuotaApplicationState } from "./quotasQuotaApplication";
export type QuotasQuotaApplication = import("./quotasQuotaApplication").QuotasQuotaApplication;
export const QuotasQuotaApplication: typeof import("./quotasQuotaApplication").QuotasQuotaApplication = null as any;
utilities.lazyLoad(exports, ["QuotasQuotaApplication"], () => require("./quotasQuotaApplication"));

export { QuotasTemplateApplicationsArgs, QuotasTemplateApplicationsState } from "./quotasTemplateApplications";
export type QuotasTemplateApplications = import("./quotasTemplateApplications").QuotasTemplateApplications;
export const QuotasTemplateApplications: typeof import("./quotasTemplateApplications").QuotasTemplateApplications = null as any;
utilities.lazyLoad(exports, ["QuotasTemplateApplications"], () => require("./quotasTemplateApplications"));

export { QuotasTemplateQuotaArgs, QuotasTemplateQuotaState } from "./quotasTemplateQuota";
export type QuotasTemplateQuota = import("./quotasTemplateQuota").QuotasTemplateQuota;
export const QuotasTemplateQuota: typeof import("./quotasTemplateQuota").QuotasTemplateQuota = null as any;
utilities.lazyLoad(exports, ["QuotasTemplateQuota"], () => require("./quotasTemplateQuota"));

export { RamAccessKeyArgs, RamAccessKeyState } from "./ramAccessKey";
export type RamAccessKey = import("./ramAccessKey").RamAccessKey;
export const RamAccessKey: typeof import("./ramAccessKey").RamAccessKey = null as any;
utilities.lazyLoad(exports, ["RamAccessKey"], () => require("./ramAccessKey"));

export { RamAccountAliasArgs, RamAccountAliasState } from "./ramAccountAlias";
export type RamAccountAlias = import("./ramAccountAlias").RamAccountAlias;
export const RamAccountAlias: typeof import("./ramAccountAlias").RamAccountAlias = null as any;
utilities.lazyLoad(exports, ["RamAccountAlias"], () => require("./ramAccountAlias"));

export { RamAccountPasswordPolicyArgs, RamAccountPasswordPolicyState } from "./ramAccountPasswordPolicy";
export type RamAccountPasswordPolicy = import("./ramAccountPasswordPolicy").RamAccountPasswordPolicy;
export const RamAccountPasswordPolicy: typeof import("./ramAccountPasswordPolicy").RamAccountPasswordPolicy = null as any;
utilities.lazyLoad(exports, ["RamAccountPasswordPolicy"], () => require("./ramAccountPasswordPolicy"));

export { RamAliasArgs, RamAliasState } from "./ramAlias";
export type RamAlias = import("./ramAlias").RamAlias;
export const RamAlias: typeof import("./ramAlias").RamAlias = null as any;
utilities.lazyLoad(exports, ["RamAlias"], () => require("./ramAlias"));

export { RamGroupArgs, RamGroupState } from "./ramGroup";
export type RamGroup = import("./ramGroup").RamGroup;
export const RamGroup: typeof import("./ramGroup").RamGroup = null as any;
utilities.lazyLoad(exports, ["RamGroup"], () => require("./ramGroup"));

export { RamGroupMembershipArgs, RamGroupMembershipState } from "./ramGroupMembership";
export type RamGroupMembership = import("./ramGroupMembership").RamGroupMembership;
export const RamGroupMembership: typeof import("./ramGroupMembership").RamGroupMembership = null as any;
utilities.lazyLoad(exports, ["RamGroupMembership"], () => require("./ramGroupMembership"));

export { RamGroupPolicyAttachmentArgs, RamGroupPolicyAttachmentState } from "./ramGroupPolicyAttachment";
export type RamGroupPolicyAttachment = import("./ramGroupPolicyAttachment").RamGroupPolicyAttachment;
export const RamGroupPolicyAttachment: typeof import("./ramGroupPolicyAttachment").RamGroupPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["RamGroupPolicyAttachment"], () => require("./ramGroupPolicyAttachment"));

export { RamLoginProfileArgs, RamLoginProfileState } from "./ramLoginProfile";
export type RamLoginProfile = import("./ramLoginProfile").RamLoginProfile;
export const RamLoginProfile: typeof import("./ramLoginProfile").RamLoginProfile = null as any;
utilities.lazyLoad(exports, ["RamLoginProfile"], () => require("./ramLoginProfile"));

export { RamPolicyArgs, RamPolicyState } from "./ramPolicy";
export type RamPolicy = import("./ramPolicy").RamPolicy;
export const RamPolicy: typeof import("./ramPolicy").RamPolicy = null as any;
utilities.lazyLoad(exports, ["RamPolicy"], () => require("./ramPolicy"));

export { RamRoleArgs, RamRoleState } from "./ramRole";
export type RamRole = import("./ramRole").RamRole;
export const RamRole: typeof import("./ramRole").RamRole = null as any;
utilities.lazyLoad(exports, ["RamRole"], () => require("./ramRole"));

export { RamRoleAttachmentArgs, RamRoleAttachmentState } from "./ramRoleAttachment";
export type RamRoleAttachment = import("./ramRoleAttachment").RamRoleAttachment;
export const RamRoleAttachment: typeof import("./ramRoleAttachment").RamRoleAttachment = null as any;
utilities.lazyLoad(exports, ["RamRoleAttachment"], () => require("./ramRoleAttachment"));

export { RamRolePolicyAttachmentArgs, RamRolePolicyAttachmentState } from "./ramRolePolicyAttachment";
export type RamRolePolicyAttachment = import("./ramRolePolicyAttachment").RamRolePolicyAttachment;
export const RamRolePolicyAttachment: typeof import("./ramRolePolicyAttachment").RamRolePolicyAttachment = null as any;
utilities.lazyLoad(exports, ["RamRolePolicyAttachment"], () => require("./ramRolePolicyAttachment"));

export { RamSamlProviderArgs, RamSamlProviderState } from "./ramSamlProvider";
export type RamSamlProvider = import("./ramSamlProvider").RamSamlProvider;
export const RamSamlProvider: typeof import("./ramSamlProvider").RamSamlProvider = null as any;
utilities.lazyLoad(exports, ["RamSamlProvider"], () => require("./ramSamlProvider"));

export { RamSecurityPreferenceArgs, RamSecurityPreferenceState } from "./ramSecurityPreference";
export type RamSecurityPreference = import("./ramSecurityPreference").RamSecurityPreference;
export const RamSecurityPreference: typeof import("./ramSecurityPreference").RamSecurityPreference = null as any;
utilities.lazyLoad(exports, ["RamSecurityPreference"], () => require("./ramSecurityPreference"));

export { RamUserArgs, RamUserState } from "./ramUser";
export type RamUser = import("./ramUser").RamUser;
export const RamUser: typeof import("./ramUser").RamUser = null as any;
utilities.lazyLoad(exports, ["RamUser"], () => require("./ramUser"));

export { RamUserPolicyAttachmentArgs, RamUserPolicyAttachmentState } from "./ramUserPolicyAttachment";
export type RamUserPolicyAttachment = import("./ramUserPolicyAttachment").RamUserPolicyAttachment;
export const RamUserPolicyAttachment: typeof import("./ramUserPolicyAttachment").RamUserPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["RamUserPolicyAttachment"], () => require("./ramUserPolicyAttachment"));

export { RdcOrganizationArgs, RdcOrganizationState } from "./rdcOrganization";
export type RdcOrganization = import("./rdcOrganization").RdcOrganization;
export const RdcOrganization: typeof import("./rdcOrganization").RdcOrganization = null as any;
utilities.lazyLoad(exports, ["RdcOrganization"], () => require("./rdcOrganization"));

export { RdsAccountArgs, RdsAccountState } from "./rdsAccount";
export type RdsAccount = import("./rdsAccount").RdsAccount;
export const RdsAccount: typeof import("./rdsAccount").RdsAccount = null as any;
utilities.lazyLoad(exports, ["RdsAccount"], () => require("./rdsAccount"));

export { RdsBackupArgs, RdsBackupState } from "./rdsBackup";
export type RdsBackup = import("./rdsBackup").RdsBackup;
export const RdsBackup: typeof import("./rdsBackup").RdsBackup = null as any;
utilities.lazyLoad(exports, ["RdsBackup"], () => require("./rdsBackup"));

export { RdsCloneDbInstanceArgs, RdsCloneDbInstanceState } from "./rdsCloneDbInstance";
export type RdsCloneDbInstance = import("./rdsCloneDbInstance").RdsCloneDbInstance;
export const RdsCloneDbInstance: typeof import("./rdsCloneDbInstance").RdsCloneDbInstance = null as any;
utilities.lazyLoad(exports, ["RdsCloneDbInstance"], () => require("./rdsCloneDbInstance"));

export { RdsDbInstanceEndpointArgs, RdsDbInstanceEndpointState } from "./rdsDbInstanceEndpoint";
export type RdsDbInstanceEndpoint = import("./rdsDbInstanceEndpoint").RdsDbInstanceEndpoint;
export const RdsDbInstanceEndpoint: typeof import("./rdsDbInstanceEndpoint").RdsDbInstanceEndpoint = null as any;
utilities.lazyLoad(exports, ["RdsDbInstanceEndpoint"], () => require("./rdsDbInstanceEndpoint"));

export { RdsDbInstanceEndpointAddressArgs, RdsDbInstanceEndpointAddressState } from "./rdsDbInstanceEndpointAddress";
export type RdsDbInstanceEndpointAddress = import("./rdsDbInstanceEndpointAddress").RdsDbInstanceEndpointAddress;
export const RdsDbInstanceEndpointAddress: typeof import("./rdsDbInstanceEndpointAddress").RdsDbInstanceEndpointAddress = null as any;
utilities.lazyLoad(exports, ["RdsDbInstanceEndpointAddress"], () => require("./rdsDbInstanceEndpointAddress"));

export { RdsDbNodeArgs, RdsDbNodeState } from "./rdsDbNode";
export type RdsDbNode = import("./rdsDbNode").RdsDbNode;
export const RdsDbNode: typeof import("./rdsDbNode").RdsDbNode = null as any;
utilities.lazyLoad(exports, ["RdsDbNode"], () => require("./rdsDbNode"));

export { RdsDbProxyArgs, RdsDbProxyState } from "./rdsDbProxy";
export type RdsDbProxy = import("./rdsDbProxy").RdsDbProxy;
export const RdsDbProxy: typeof import("./rdsDbProxy").RdsDbProxy = null as any;
utilities.lazyLoad(exports, ["RdsDbProxy"], () => require("./rdsDbProxy"));

export { RdsDdrInstanceArgs, RdsDdrInstanceState } from "./rdsDdrInstance";
export type RdsDdrInstance = import("./rdsDdrInstance").RdsDdrInstance;
export const RdsDdrInstance: typeof import("./rdsDdrInstance").RdsDdrInstance = null as any;
utilities.lazyLoad(exports, ["RdsDdrInstance"], () => require("./rdsDdrInstance"));

export { RdsInstanceCrossBackupPolicyArgs, RdsInstanceCrossBackupPolicyState } from "./rdsInstanceCrossBackupPolicy";
export type RdsInstanceCrossBackupPolicy = import("./rdsInstanceCrossBackupPolicy").RdsInstanceCrossBackupPolicy;
export const RdsInstanceCrossBackupPolicy: typeof import("./rdsInstanceCrossBackupPolicy").RdsInstanceCrossBackupPolicy = null as any;
utilities.lazyLoad(exports, ["RdsInstanceCrossBackupPolicy"], () => require("./rdsInstanceCrossBackupPolicy"));

export { RdsParameterGroupArgs, RdsParameterGroupState } from "./rdsParameterGroup";
export type RdsParameterGroup = import("./rdsParameterGroup").RdsParameterGroup;
export const RdsParameterGroup: typeof import("./rdsParameterGroup").RdsParameterGroup = null as any;
utilities.lazyLoad(exports, ["RdsParameterGroup"], () => require("./rdsParameterGroup"));

export { RdsServiceLinkedRoleArgs, RdsServiceLinkedRoleState } from "./rdsServiceLinkedRole";
export type RdsServiceLinkedRole = import("./rdsServiceLinkedRole").RdsServiceLinkedRole;
export const RdsServiceLinkedRole: typeof import("./rdsServiceLinkedRole").RdsServiceLinkedRole = null as any;
utilities.lazyLoad(exports, ["RdsServiceLinkedRole"], () => require("./rdsServiceLinkedRole"));

export { RdsUpgradeDbInstanceArgs, RdsUpgradeDbInstanceState } from "./rdsUpgradeDbInstance";
export type RdsUpgradeDbInstance = import("./rdsUpgradeDbInstance").RdsUpgradeDbInstance;
export const RdsUpgradeDbInstance: typeof import("./rdsUpgradeDbInstance").RdsUpgradeDbInstance = null as any;
utilities.lazyLoad(exports, ["RdsUpgradeDbInstance"], () => require("./rdsUpgradeDbInstance"));

export { RealtimeComputeVvpInstanceArgs, RealtimeComputeVvpInstanceState } from "./realtimeComputeVvpInstance";
export type RealtimeComputeVvpInstance = import("./realtimeComputeVvpInstance").RealtimeComputeVvpInstance;
export const RealtimeComputeVvpInstance: typeof import("./realtimeComputeVvpInstance").RealtimeComputeVvpInstance = null as any;
utilities.lazyLoad(exports, ["RealtimeComputeVvpInstance"], () => require("./realtimeComputeVvpInstance"));

export { RedisTairInstanceArgs, RedisTairInstanceState } from "./redisTairInstance";
export type RedisTairInstance = import("./redisTairInstance").RedisTairInstance;
export const RedisTairInstance: typeof import("./redisTairInstance").RedisTairInstance = null as any;
utilities.lazyLoad(exports, ["RedisTairInstance"], () => require("./redisTairInstance"));

export { ReservedInstanceArgs, ReservedInstanceState } from "./reservedInstance";
export type ReservedInstance = import("./reservedInstance").ReservedInstance;
export const ReservedInstance: typeof import("./reservedInstance").ReservedInstance = null as any;
utilities.lazyLoad(exports, ["ReservedInstance"], () => require("./reservedInstance"));

export { ResourceManagerAccountArgs, ResourceManagerAccountState } from "./resourceManagerAccount";
export type ResourceManagerAccount = import("./resourceManagerAccount").ResourceManagerAccount;
export const ResourceManagerAccount: typeof import("./resourceManagerAccount").ResourceManagerAccount = null as any;
utilities.lazyLoad(exports, ["ResourceManagerAccount"], () => require("./resourceManagerAccount"));

export { ResourceManagerControlPolicyArgs, ResourceManagerControlPolicyState } from "./resourceManagerControlPolicy";
export type ResourceManagerControlPolicy = import("./resourceManagerControlPolicy").ResourceManagerControlPolicy;
export const ResourceManagerControlPolicy: typeof import("./resourceManagerControlPolicy").ResourceManagerControlPolicy = null as any;
utilities.lazyLoad(exports, ["ResourceManagerControlPolicy"], () => require("./resourceManagerControlPolicy"));

export { ResourceManagerControlPolicyAttachmentArgs, ResourceManagerControlPolicyAttachmentState } from "./resourceManagerControlPolicyAttachment";
export type ResourceManagerControlPolicyAttachment = import("./resourceManagerControlPolicyAttachment").ResourceManagerControlPolicyAttachment;
export const ResourceManagerControlPolicyAttachment: typeof import("./resourceManagerControlPolicyAttachment").ResourceManagerControlPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["ResourceManagerControlPolicyAttachment"], () => require("./resourceManagerControlPolicyAttachment"));

export { ResourceManagerDelegatedAdministratorArgs, ResourceManagerDelegatedAdministratorState } from "./resourceManagerDelegatedAdministrator";
export type ResourceManagerDelegatedAdministrator = import("./resourceManagerDelegatedAdministrator").ResourceManagerDelegatedAdministrator;
export const ResourceManagerDelegatedAdministrator: typeof import("./resourceManagerDelegatedAdministrator").ResourceManagerDelegatedAdministrator = null as any;
utilities.lazyLoad(exports, ["ResourceManagerDelegatedAdministrator"], () => require("./resourceManagerDelegatedAdministrator"));

export { ResourceManagerFolderArgs, ResourceManagerFolderState } from "./resourceManagerFolder";
export type ResourceManagerFolder = import("./resourceManagerFolder").ResourceManagerFolder;
export const ResourceManagerFolder: typeof import("./resourceManagerFolder").ResourceManagerFolder = null as any;
utilities.lazyLoad(exports, ["ResourceManagerFolder"], () => require("./resourceManagerFolder"));

export { ResourceManagerHandshakeArgs, ResourceManagerHandshakeState } from "./resourceManagerHandshake";
export type ResourceManagerHandshake = import("./resourceManagerHandshake").ResourceManagerHandshake;
export const ResourceManagerHandshake: typeof import("./resourceManagerHandshake").ResourceManagerHandshake = null as any;
utilities.lazyLoad(exports, ["ResourceManagerHandshake"], () => require("./resourceManagerHandshake"));

export { ResourceManagerPolicyArgs, ResourceManagerPolicyState } from "./resourceManagerPolicy";
export type ResourceManagerPolicy = import("./resourceManagerPolicy").ResourceManagerPolicy;
export const ResourceManagerPolicy: typeof import("./resourceManagerPolicy").ResourceManagerPolicy = null as any;
utilities.lazyLoad(exports, ["ResourceManagerPolicy"], () => require("./resourceManagerPolicy"));

export { ResourceManagerPolicyAttachmentArgs, ResourceManagerPolicyAttachmentState } from "./resourceManagerPolicyAttachment";
export type ResourceManagerPolicyAttachment = import("./resourceManagerPolicyAttachment").ResourceManagerPolicyAttachment;
export const ResourceManagerPolicyAttachment: typeof import("./resourceManagerPolicyAttachment").ResourceManagerPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["ResourceManagerPolicyAttachment"], () => require("./resourceManagerPolicyAttachment"));

export { ResourceManagerPolicyVersionArgs, ResourceManagerPolicyVersionState } from "./resourceManagerPolicyVersion";
export type ResourceManagerPolicyVersion = import("./resourceManagerPolicyVersion").ResourceManagerPolicyVersion;
export const ResourceManagerPolicyVersion: typeof import("./resourceManagerPolicyVersion").ResourceManagerPolicyVersion = null as any;
utilities.lazyLoad(exports, ["ResourceManagerPolicyVersion"], () => require("./resourceManagerPolicyVersion"));

export { ResourceManagerResourceDirectoryArgs, ResourceManagerResourceDirectoryState } from "./resourceManagerResourceDirectory";
export type ResourceManagerResourceDirectory = import("./resourceManagerResourceDirectory").ResourceManagerResourceDirectory;
export const ResourceManagerResourceDirectory: typeof import("./resourceManagerResourceDirectory").ResourceManagerResourceDirectory = null as any;
utilities.lazyLoad(exports, ["ResourceManagerResourceDirectory"], () => require("./resourceManagerResourceDirectory"));

export { ResourceManagerResourceGroupArgs, ResourceManagerResourceGroupState } from "./resourceManagerResourceGroup";
export type ResourceManagerResourceGroup = import("./resourceManagerResourceGroup").ResourceManagerResourceGroup;
export const ResourceManagerResourceGroup: typeof import("./resourceManagerResourceGroup").ResourceManagerResourceGroup = null as any;
utilities.lazyLoad(exports, ["ResourceManagerResourceGroup"], () => require("./resourceManagerResourceGroup"));

export { ResourceManagerResourceShareArgs, ResourceManagerResourceShareState } from "./resourceManagerResourceShare";
export type ResourceManagerResourceShare = import("./resourceManagerResourceShare").ResourceManagerResourceShare;
export const ResourceManagerResourceShare: typeof import("./resourceManagerResourceShare").ResourceManagerResourceShare = null as any;
utilities.lazyLoad(exports, ["ResourceManagerResourceShare"], () => require("./resourceManagerResourceShare"));

export { ResourceManagerRoleArgs, ResourceManagerRoleState } from "./resourceManagerRole";
export type ResourceManagerRole = import("./resourceManagerRole").ResourceManagerRole;
export const ResourceManagerRole: typeof import("./resourceManagerRole").ResourceManagerRole = null as any;
utilities.lazyLoad(exports, ["ResourceManagerRole"], () => require("./resourceManagerRole"));

export { ResourceManagerSavedQueryArgs, ResourceManagerSavedQueryState } from "./resourceManagerSavedQuery";
export type ResourceManagerSavedQuery = import("./resourceManagerSavedQuery").ResourceManagerSavedQuery;
export const ResourceManagerSavedQuery: typeof import("./resourceManagerSavedQuery").ResourceManagerSavedQuery = null as any;
utilities.lazyLoad(exports, ["ResourceManagerSavedQuery"], () => require("./resourceManagerSavedQuery"));

export { ResourceManagerServiceLinkedRoleArgs, ResourceManagerServiceLinkedRoleState } from "./resourceManagerServiceLinkedRole";
export type ResourceManagerServiceLinkedRole = import("./resourceManagerServiceLinkedRole").ResourceManagerServiceLinkedRole;
export const ResourceManagerServiceLinkedRole: typeof import("./resourceManagerServiceLinkedRole").ResourceManagerServiceLinkedRole = null as any;
utilities.lazyLoad(exports, ["ResourceManagerServiceLinkedRole"], () => require("./resourceManagerServiceLinkedRole"));

export { ResourceManagerSharedResourceArgs, ResourceManagerSharedResourceState } from "./resourceManagerSharedResource";
export type ResourceManagerSharedResource = import("./resourceManagerSharedResource").ResourceManagerSharedResource;
export const ResourceManagerSharedResource: typeof import("./resourceManagerSharedResource").ResourceManagerSharedResource = null as any;
utilities.lazyLoad(exports, ["ResourceManagerSharedResource"], () => require("./resourceManagerSharedResource"));

export { ResourceManagerSharedTargetArgs, ResourceManagerSharedTargetState } from "./resourceManagerSharedTarget";
export type ResourceManagerSharedTarget = import("./resourceManagerSharedTarget").ResourceManagerSharedTarget;
export const ResourceManagerSharedTarget: typeof import("./resourceManagerSharedTarget").ResourceManagerSharedTarget = null as any;
utilities.lazyLoad(exports, ["ResourceManagerSharedTarget"], () => require("./resourceManagerSharedTarget"));

export { RocketmqConsumerGroupArgs, RocketmqConsumerGroupState } from "./rocketmqConsumerGroup";
export type RocketmqConsumerGroup = import("./rocketmqConsumerGroup").RocketmqConsumerGroup;
export const RocketmqConsumerGroup: typeof import("./rocketmqConsumerGroup").RocketmqConsumerGroup = null as any;
utilities.lazyLoad(exports, ["RocketmqConsumerGroup"], () => require("./rocketmqConsumerGroup"));

export { RocketmqInstanceArgs, RocketmqInstanceState } from "./rocketmqInstance";
export type RocketmqInstance = import("./rocketmqInstance").RocketmqInstance;
export const RocketmqInstance: typeof import("./rocketmqInstance").RocketmqInstance = null as any;
utilities.lazyLoad(exports, ["RocketmqInstance"], () => require("./rocketmqInstance"));

export { RocketmqTopicArgs, RocketmqTopicState } from "./rocketmqTopic";
export type RocketmqTopic = import("./rocketmqTopic").RocketmqTopic;
export const RocketmqTopic: typeof import("./rocketmqTopic").RocketmqTopic = null as any;
utilities.lazyLoad(exports, ["RocketmqTopic"], () => require("./rocketmqTopic"));

export { RosChangeSetArgs, RosChangeSetState } from "./rosChangeSet";
export type RosChangeSet = import("./rosChangeSet").RosChangeSet;
export const RosChangeSet: typeof import("./rosChangeSet").RosChangeSet = null as any;
utilities.lazyLoad(exports, ["RosChangeSet"], () => require("./rosChangeSet"));

export { RosStackArgs, RosStackState } from "./rosStack";
export type RosStack = import("./rosStack").RosStack;
export const RosStack: typeof import("./rosStack").RosStack = null as any;
utilities.lazyLoad(exports, ["RosStack"], () => require("./rosStack"));

export { RosStackGroupArgs, RosStackGroupState } from "./rosStackGroup";
export type RosStackGroup = import("./rosStackGroup").RosStackGroup;
export const RosStackGroup: typeof import("./rosStackGroup").RosStackGroup = null as any;
utilities.lazyLoad(exports, ["RosStackGroup"], () => require("./rosStackGroup"));

export { RosStackInstanceArgs, RosStackInstanceState } from "./rosStackInstance";
export type RosStackInstance = import("./rosStackInstance").RosStackInstance;
export const RosStackInstance: typeof import("./rosStackInstance").RosStackInstance = null as any;
utilities.lazyLoad(exports, ["RosStackInstance"], () => require("./rosStackInstance"));

export { RosTemplateArgs, RosTemplateState } from "./rosTemplate";
export type RosTemplate = import("./rosTemplate").RosTemplate;
export const RosTemplate: typeof import("./rosTemplate").RosTemplate = null as any;
utilities.lazyLoad(exports, ["RosTemplate"], () => require("./rosTemplate"));

export { RosTemplateScratchArgs, RosTemplateScratchState } from "./rosTemplateScratch";
export type RosTemplateScratch = import("./rosTemplateScratch").RosTemplateScratch;
export const RosTemplateScratch: typeof import("./rosTemplateScratch").RosTemplateScratch = null as any;
utilities.lazyLoad(exports, ["RosTemplateScratch"], () => require("./rosTemplateScratch"));

export { RouteEntryArgs, RouteEntryState } from "./routeEntry";
export type RouteEntry = import("./routeEntry").RouteEntry;
export const RouteEntry: typeof import("./routeEntry").RouteEntry = null as any;
utilities.lazyLoad(exports, ["RouteEntry"], () => require("./routeEntry"));

export { RouteTableArgs, RouteTableState } from "./routeTable";
export type RouteTable = import("./routeTable").RouteTable;
export const RouteTable: typeof import("./routeTable").RouteTable = null as any;
utilities.lazyLoad(exports, ["RouteTable"], () => require("./routeTable"));

export { RouteTableAttachmentArgs, RouteTableAttachmentState } from "./routeTableAttachment";
export type RouteTableAttachment = import("./routeTableAttachment").RouteTableAttachment;
export const RouteTableAttachment: typeof import("./routeTableAttachment").RouteTableAttachment = null as any;
utilities.lazyLoad(exports, ["RouteTableAttachment"], () => require("./routeTableAttachment"));

export { RouterInterfaceArgs, RouterInterfaceState } from "./routerInterface";
export type RouterInterface = import("./routerInterface").RouterInterface;
export const RouterInterface: typeof import("./routerInterface").RouterInterface = null as any;
utilities.lazyLoad(exports, ["RouterInterface"], () => require("./routerInterface"));

export { RouterInterfaceConnectionArgs, RouterInterfaceConnectionState } from "./routerInterfaceConnection";
export type RouterInterfaceConnection = import("./routerInterfaceConnection").RouterInterfaceConnection;
export const RouterInterfaceConnection: typeof import("./routerInterfaceConnection").RouterInterfaceConnection = null as any;
utilities.lazyLoad(exports, ["RouterInterfaceConnection"], () => require("./routerInterfaceConnection"));

export { SaeApplicationArgs, SaeApplicationState } from "./saeApplication";
export type SaeApplication = import("./saeApplication").SaeApplication;
export const SaeApplication: typeof import("./saeApplication").SaeApplication = null as any;
utilities.lazyLoad(exports, ["SaeApplication"], () => require("./saeApplication"));

export { SaeApplicationScalingRuleArgs, SaeApplicationScalingRuleState } from "./saeApplicationScalingRule";
export type SaeApplicationScalingRule = import("./saeApplicationScalingRule").SaeApplicationScalingRule;
export const SaeApplicationScalingRule: typeof import("./saeApplicationScalingRule").SaeApplicationScalingRule = null as any;
utilities.lazyLoad(exports, ["SaeApplicationScalingRule"], () => require("./saeApplicationScalingRule"));

export { SaeConfigMapArgs, SaeConfigMapState } from "./saeConfigMap";
export type SaeConfigMap = import("./saeConfigMap").SaeConfigMap;
export const SaeConfigMap: typeof import("./saeConfigMap").SaeConfigMap = null as any;
utilities.lazyLoad(exports, ["SaeConfigMap"], () => require("./saeConfigMap"));

export { SaeGreyTagRouteArgs, SaeGreyTagRouteState } from "./saeGreyTagRoute";
export type SaeGreyTagRoute = import("./saeGreyTagRoute").SaeGreyTagRoute;
export const SaeGreyTagRoute: typeof import("./saeGreyTagRoute").SaeGreyTagRoute = null as any;
utilities.lazyLoad(exports, ["SaeGreyTagRoute"], () => require("./saeGreyTagRoute"));

export { SaeIngressArgs, SaeIngressState } from "./saeIngress";
export type SaeIngress = import("./saeIngress").SaeIngress;
export const SaeIngress: typeof import("./saeIngress").SaeIngress = null as any;
utilities.lazyLoad(exports, ["SaeIngress"], () => require("./saeIngress"));

export { SaeLoadBalancerInternetArgs, SaeLoadBalancerInternetState } from "./saeLoadBalancerInternet";
export type SaeLoadBalancerInternet = import("./saeLoadBalancerInternet").SaeLoadBalancerInternet;
export const SaeLoadBalancerInternet: typeof import("./saeLoadBalancerInternet").SaeLoadBalancerInternet = null as any;
utilities.lazyLoad(exports, ["SaeLoadBalancerInternet"], () => require("./saeLoadBalancerInternet"));

export { SaeLoadBalancerIntranetArgs, SaeLoadBalancerIntranetState } from "./saeLoadBalancerIntranet";
export type SaeLoadBalancerIntranet = import("./saeLoadBalancerIntranet").SaeLoadBalancerIntranet;
export const SaeLoadBalancerIntranet: typeof import("./saeLoadBalancerIntranet").SaeLoadBalancerIntranet = null as any;
utilities.lazyLoad(exports, ["SaeLoadBalancerIntranet"], () => require("./saeLoadBalancerIntranet"));

export { SaeNamespaceArgs, SaeNamespaceState } from "./saeNamespace";
export type SaeNamespace = import("./saeNamespace").SaeNamespace;
export const SaeNamespace: typeof import("./saeNamespace").SaeNamespace = null as any;
utilities.lazyLoad(exports, ["SaeNamespace"], () => require("./saeNamespace"));

export { SagAclArgs, SagAclState } from "./sagAcl";
export type SagAcl = import("./sagAcl").SagAcl;
export const SagAcl: typeof import("./sagAcl").SagAcl = null as any;
utilities.lazyLoad(exports, ["SagAcl"], () => require("./sagAcl"));

export { SagAclRuleArgs, SagAclRuleState } from "./sagAclRule";
export type SagAclRule = import("./sagAclRule").SagAclRule;
export const SagAclRule: typeof import("./sagAclRule").SagAclRule = null as any;
utilities.lazyLoad(exports, ["SagAclRule"], () => require("./sagAclRule"));

export { SagClientUserArgs, SagClientUserState } from "./sagClientUser";
export type SagClientUser = import("./sagClientUser").SagClientUser;
export const SagClientUser: typeof import("./sagClientUser").SagClientUser = null as any;
utilities.lazyLoad(exports, ["SagClientUser"], () => require("./sagClientUser"));

export { SagDnatEntryArgs, SagDnatEntryState } from "./sagDnatEntry";
export type SagDnatEntry = import("./sagDnatEntry").SagDnatEntry;
export const SagDnatEntry: typeof import("./sagDnatEntry").SagDnatEntry = null as any;
utilities.lazyLoad(exports, ["SagDnatEntry"], () => require("./sagDnatEntry"));

export { SagQosArgs, SagQosState } from "./sagQos";
export type SagQos = import("./sagQos").SagQos;
export const SagQos: typeof import("./sagQos").SagQos = null as any;
utilities.lazyLoad(exports, ["SagQos"], () => require("./sagQos"));

export { SagQosCarArgs, SagQosCarState } from "./sagQosCar";
export type SagQosCar = import("./sagQosCar").SagQosCar;
export const SagQosCar: typeof import("./sagQosCar").SagQosCar = null as any;
utilities.lazyLoad(exports, ["SagQosCar"], () => require("./sagQosCar"));

export { SagQosPolicyArgs, SagQosPolicyState } from "./sagQosPolicy";
export type SagQosPolicy = import("./sagQosPolicy").SagQosPolicy;
export const SagQosPolicy: typeof import("./sagQosPolicy").SagQosPolicy = null as any;
utilities.lazyLoad(exports, ["SagQosPolicy"], () => require("./sagQosPolicy"));

export { SagSnatEntryArgs, SagSnatEntryState } from "./sagSnatEntry";
export type SagSnatEntry = import("./sagSnatEntry").SagSnatEntry;
export const SagSnatEntry: typeof import("./sagSnatEntry").SagSnatEntry = null as any;
utilities.lazyLoad(exports, ["SagSnatEntry"], () => require("./sagSnatEntry"));

export { ScdnDomainArgs, ScdnDomainState } from "./scdnDomain";
export type ScdnDomain = import("./scdnDomain").ScdnDomain;
export const ScdnDomain: typeof import("./scdnDomain").ScdnDomain = null as any;
utilities.lazyLoad(exports, ["ScdnDomain"], () => require("./scdnDomain"));

export { ScdnDomainConfigArgs, ScdnDomainConfigState } from "./scdnDomainConfig";
export type ScdnDomainConfig = import("./scdnDomainConfig").ScdnDomainConfig;
export const ScdnDomainConfig: typeof import("./scdnDomainConfig").ScdnDomainConfig = null as any;
utilities.lazyLoad(exports, ["ScdnDomainConfig"], () => require("./scdnDomainConfig"));

export { SchedulerxNamespaceArgs, SchedulerxNamespaceState } from "./schedulerxNamespace";
export type SchedulerxNamespace = import("./schedulerxNamespace").SchedulerxNamespace;
export const SchedulerxNamespace: typeof import("./schedulerxNamespace").SchedulerxNamespace = null as any;
utilities.lazyLoad(exports, ["SchedulerxNamespace"], () => require("./schedulerxNamespace"));

export { SddpConfigArgs, SddpConfigState } from "./sddpConfig";
export type SddpConfig = import("./sddpConfig").SddpConfig;
export const SddpConfig: typeof import("./sddpConfig").SddpConfig = null as any;
utilities.lazyLoad(exports, ["SddpConfig"], () => require("./sddpConfig"));

export { SddpDataLimitArgs, SddpDataLimitState } from "./sddpDataLimit";
export type SddpDataLimit = import("./sddpDataLimit").SddpDataLimit;
export const SddpDataLimit: typeof import("./sddpDataLimit").SddpDataLimit = null as any;
utilities.lazyLoad(exports, ["SddpDataLimit"], () => require("./sddpDataLimit"));

export { SddpInstanceArgs, SddpInstanceState } from "./sddpInstance";
export type SddpInstance = import("./sddpInstance").SddpInstance;
export const SddpInstance: typeof import("./sddpInstance").SddpInstance = null as any;
utilities.lazyLoad(exports, ["SddpInstance"], () => require("./sddpInstance"));

export { SddpRuleArgs, SddpRuleState } from "./sddpRule";
export type SddpRule = import("./sddpRule").SddpRule;
export const SddpRule: typeof import("./sddpRule").SddpRule = null as any;
utilities.lazyLoad(exports, ["SddpRule"], () => require("./sddpRule"));

export { SecurityCenterGroupArgs, SecurityCenterGroupState } from "./securityCenterGroup";
export type SecurityCenterGroup = import("./securityCenterGroup").SecurityCenterGroup;
export const SecurityCenterGroup: typeof import("./securityCenterGroup").SecurityCenterGroup = null as any;
utilities.lazyLoad(exports, ["SecurityCenterGroup"], () => require("./securityCenterGroup"));

export { SecurityCenterServiceLinkedRoleArgs, SecurityCenterServiceLinkedRoleState } from "./securityCenterServiceLinkedRole";
export type SecurityCenterServiceLinkedRole = import("./securityCenterServiceLinkedRole").SecurityCenterServiceLinkedRole;
export const SecurityCenterServiceLinkedRole: typeof import("./securityCenterServiceLinkedRole").SecurityCenterServiceLinkedRole = null as any;
utilities.lazyLoad(exports, ["SecurityCenterServiceLinkedRole"], () => require("./securityCenterServiceLinkedRole"));

export { SecurityGroupArgs, SecurityGroupState } from "./securityGroup";
export type SecurityGroup = import("./securityGroup").SecurityGroup;
export const SecurityGroup: typeof import("./securityGroup").SecurityGroup = null as any;
utilities.lazyLoad(exports, ["SecurityGroup"], () => require("./securityGroup"));

export { SecurityGroupRuleArgs, SecurityGroupRuleState } from "./securityGroupRule";
export type SecurityGroupRule = import("./securityGroupRule").SecurityGroupRule;
export const SecurityGroupRule: typeof import("./securityGroupRule").SecurityGroupRule = null as any;
utilities.lazyLoad(exports, ["SecurityGroupRule"], () => require("./securityGroupRule"));

export { SelectdbDbClusterArgs, SelectdbDbClusterState } from "./selectdbDbCluster";
export type SelectdbDbCluster = import("./selectdbDbCluster").SelectdbDbCluster;
export const SelectdbDbCluster: typeof import("./selectdbDbCluster").SelectdbDbCluster = null as any;
utilities.lazyLoad(exports, ["SelectdbDbCluster"], () => require("./selectdbDbCluster"));

export { SelectdbDbInstanceArgs, SelectdbDbInstanceState } from "./selectdbDbInstance";
export type SelectdbDbInstance = import("./selectdbDbInstance").SelectdbDbInstance;
export const SelectdbDbInstance: typeof import("./selectdbDbInstance").SelectdbDbInstance = null as any;
utilities.lazyLoad(exports, ["SelectdbDbInstance"], () => require("./selectdbDbInstance"));

export { ServiceCatalogPortfolioArgs, ServiceCatalogPortfolioState } from "./serviceCatalogPortfolio";
export type ServiceCatalogPortfolio = import("./serviceCatalogPortfolio").ServiceCatalogPortfolio;
export const ServiceCatalogPortfolio: typeof import("./serviceCatalogPortfolio").ServiceCatalogPortfolio = null as any;
utilities.lazyLoad(exports, ["ServiceCatalogPortfolio"], () => require("./serviceCatalogPortfolio"));

export { ServiceCatalogProvisionedProductArgs, ServiceCatalogProvisionedProductState } from "./serviceCatalogProvisionedProduct";
export type ServiceCatalogProvisionedProduct = import("./serviceCatalogProvisionedProduct").ServiceCatalogProvisionedProduct;
export const ServiceCatalogProvisionedProduct: typeof import("./serviceCatalogProvisionedProduct").ServiceCatalogProvisionedProduct = null as any;
utilities.lazyLoad(exports, ["ServiceCatalogProvisionedProduct"], () => require("./serviceCatalogProvisionedProduct"));

export { ServiceMeshExtensionProviderArgs, ServiceMeshExtensionProviderState } from "./serviceMeshExtensionProvider";
export type ServiceMeshExtensionProvider = import("./serviceMeshExtensionProvider").ServiceMeshExtensionProvider;
export const ServiceMeshExtensionProvider: typeof import("./serviceMeshExtensionProvider").ServiceMeshExtensionProvider = null as any;
utilities.lazyLoad(exports, ["ServiceMeshExtensionProvider"], () => require("./serviceMeshExtensionProvider"));

export { ServiceMeshServiceMeshArgs, ServiceMeshServiceMeshState } from "./serviceMeshServiceMesh";
export type ServiceMeshServiceMesh = import("./serviceMeshServiceMesh").ServiceMeshServiceMesh;
export const ServiceMeshServiceMesh: typeof import("./serviceMeshServiceMesh").ServiceMeshServiceMesh = null as any;
utilities.lazyLoad(exports, ["ServiceMeshServiceMesh"], () => require("./serviceMeshServiceMesh"));

export { ServiceMeshUserPermissionArgs, ServiceMeshUserPermissionState } from "./serviceMeshUserPermission";
export type ServiceMeshUserPermission = import("./serviceMeshUserPermission").ServiceMeshUserPermission;
export const ServiceMeshUserPermission: typeof import("./serviceMeshUserPermission").ServiceMeshUserPermission = null as any;
utilities.lazyLoad(exports, ["ServiceMeshUserPermission"], () => require("./serviceMeshUserPermission"));

export { SimpleApplicationServerCustomImageArgs, SimpleApplicationServerCustomImageState } from "./simpleApplicationServerCustomImage";
export type SimpleApplicationServerCustomImage = import("./simpleApplicationServerCustomImage").SimpleApplicationServerCustomImage;
export const SimpleApplicationServerCustomImage: typeof import("./simpleApplicationServerCustomImage").SimpleApplicationServerCustomImage = null as any;
utilities.lazyLoad(exports, ["SimpleApplicationServerCustomImage"], () => require("./simpleApplicationServerCustomImage"));

export { SimpleApplicationServerFirewallRuleArgs, SimpleApplicationServerFirewallRuleState } from "./simpleApplicationServerFirewallRule";
export type SimpleApplicationServerFirewallRule = import("./simpleApplicationServerFirewallRule").SimpleApplicationServerFirewallRule;
export const SimpleApplicationServerFirewallRule: typeof import("./simpleApplicationServerFirewallRule").SimpleApplicationServerFirewallRule = null as any;
utilities.lazyLoad(exports, ["SimpleApplicationServerFirewallRule"], () => require("./simpleApplicationServerFirewallRule"));

export { SimpleApplicationServerInstanceArgs, SimpleApplicationServerInstanceState } from "./simpleApplicationServerInstance";
export type SimpleApplicationServerInstance = import("./simpleApplicationServerInstance").SimpleApplicationServerInstance;
export const SimpleApplicationServerInstance: typeof import("./simpleApplicationServerInstance").SimpleApplicationServerInstance = null as any;
utilities.lazyLoad(exports, ["SimpleApplicationServerInstance"], () => require("./simpleApplicationServerInstance"));

export { SimpleApplicationServerSnapshotArgs, SimpleApplicationServerSnapshotState } from "./simpleApplicationServerSnapshot";
export type SimpleApplicationServerSnapshot = import("./simpleApplicationServerSnapshot").SimpleApplicationServerSnapshot;
export const SimpleApplicationServerSnapshot: typeof import("./simpleApplicationServerSnapshot").SimpleApplicationServerSnapshot = null as any;
utilities.lazyLoad(exports, ["SimpleApplicationServerSnapshot"], () => require("./simpleApplicationServerSnapshot"));

export { SlbArgs, SlbState } from "./slb";
export type Slb = import("./slb").Slb;
export const Slb: typeof import("./slb").Slb = null as any;
utilities.lazyLoad(exports, ["Slb"], () => require("./slb"));

export { SlbAclArgs, SlbAclState } from "./slbAcl";
export type SlbAcl = import("./slbAcl").SlbAcl;
export const SlbAcl: typeof import("./slbAcl").SlbAcl = null as any;
utilities.lazyLoad(exports, ["SlbAcl"], () => require("./slbAcl"));

export { SlbAclEntryAttachmentArgs, SlbAclEntryAttachmentState } from "./slbAclEntryAttachment";
export type SlbAclEntryAttachment = import("./slbAclEntryAttachment").SlbAclEntryAttachment;
export const SlbAclEntryAttachment: typeof import("./slbAclEntryAttachment").SlbAclEntryAttachment = null as any;
utilities.lazyLoad(exports, ["SlbAclEntryAttachment"], () => require("./slbAclEntryAttachment"));

export { SlbAttachmentArgs, SlbAttachmentState } from "./slbAttachment";
export type SlbAttachment = import("./slbAttachment").SlbAttachment;
export const SlbAttachment: typeof import("./slbAttachment").SlbAttachment = null as any;
utilities.lazyLoad(exports, ["SlbAttachment"], () => require("./slbAttachment"));

export { SlbBackendServerArgs, SlbBackendServerState } from "./slbBackendServer";
export type SlbBackendServer = import("./slbBackendServer").SlbBackendServer;
export const SlbBackendServer: typeof import("./slbBackendServer").SlbBackendServer = null as any;
utilities.lazyLoad(exports, ["SlbBackendServer"], () => require("./slbBackendServer"));

export { SlbCaCertificateArgs, SlbCaCertificateState } from "./slbCaCertificate";
export type SlbCaCertificate = import("./slbCaCertificate").SlbCaCertificate;
export const SlbCaCertificate: typeof import("./slbCaCertificate").SlbCaCertificate = null as any;
utilities.lazyLoad(exports, ["SlbCaCertificate"], () => require("./slbCaCertificate"));

export { SlbDomainExtensionArgs, SlbDomainExtensionState } from "./slbDomainExtension";
export type SlbDomainExtension = import("./slbDomainExtension").SlbDomainExtension;
export const SlbDomainExtension: typeof import("./slbDomainExtension").SlbDomainExtension = null as any;
utilities.lazyLoad(exports, ["SlbDomainExtension"], () => require("./slbDomainExtension"));

export { SlbListenerArgs, SlbListenerState } from "./slbListener";
export type SlbListener = import("./slbListener").SlbListener;
export const SlbListener: typeof import("./slbListener").SlbListener = null as any;
utilities.lazyLoad(exports, ["SlbListener"], () => require("./slbListener"));

export { SlbLoadBalancerArgs, SlbLoadBalancerState } from "./slbLoadBalancer";
export type SlbLoadBalancer = import("./slbLoadBalancer").SlbLoadBalancer;
export const SlbLoadBalancer: typeof import("./slbLoadBalancer").SlbLoadBalancer = null as any;
utilities.lazyLoad(exports, ["SlbLoadBalancer"], () => require("./slbLoadBalancer"));

export { SlbMasterSlaveServerGroupArgs, SlbMasterSlaveServerGroupState } from "./slbMasterSlaveServerGroup";
export type SlbMasterSlaveServerGroup = import("./slbMasterSlaveServerGroup").SlbMasterSlaveServerGroup;
export const SlbMasterSlaveServerGroup: typeof import("./slbMasterSlaveServerGroup").SlbMasterSlaveServerGroup = null as any;
utilities.lazyLoad(exports, ["SlbMasterSlaveServerGroup"], () => require("./slbMasterSlaveServerGroup"));

export { SlbRuleArgs, SlbRuleState } from "./slbRule";
export type SlbRule = import("./slbRule").SlbRule;
export const SlbRule: typeof import("./slbRule").SlbRule = null as any;
utilities.lazyLoad(exports, ["SlbRule"], () => require("./slbRule"));

export { SlbServerCertificateArgs, SlbServerCertificateState } from "./slbServerCertificate";
export type SlbServerCertificate = import("./slbServerCertificate").SlbServerCertificate;
export const SlbServerCertificate: typeof import("./slbServerCertificate").SlbServerCertificate = null as any;
utilities.lazyLoad(exports, ["SlbServerCertificate"], () => require("./slbServerCertificate"));

export { SlbServerGroupArgs, SlbServerGroupState } from "./slbServerGroup";
export type SlbServerGroup = import("./slbServerGroup").SlbServerGroup;
export const SlbServerGroup: typeof import("./slbServerGroup").SlbServerGroup = null as any;
utilities.lazyLoad(exports, ["SlbServerGroup"], () => require("./slbServerGroup"));

export { SlbServerGroupServerAttachmentArgs, SlbServerGroupServerAttachmentState } from "./slbServerGroupServerAttachment";
export type SlbServerGroupServerAttachment = import("./slbServerGroupServerAttachment").SlbServerGroupServerAttachment;
export const SlbServerGroupServerAttachment: typeof import("./slbServerGroupServerAttachment").SlbServerGroupServerAttachment = null as any;
utilities.lazyLoad(exports, ["SlbServerGroupServerAttachment"], () => require("./slbServerGroupServerAttachment"));

export { SlbTlsCipherPolicyArgs, SlbTlsCipherPolicyState } from "./slbTlsCipherPolicy";
export type SlbTlsCipherPolicy = import("./slbTlsCipherPolicy").SlbTlsCipherPolicy;
export const SlbTlsCipherPolicy: typeof import("./slbTlsCipherPolicy").SlbTlsCipherPolicy = null as any;
utilities.lazyLoad(exports, ["SlbTlsCipherPolicy"], () => require("./slbTlsCipherPolicy"));

export { SlsAlertArgs, SlsAlertState } from "./slsAlert";
export type SlsAlert = import("./slsAlert").SlsAlert;
export const SlsAlert: typeof import("./slsAlert").SlsAlert = null as any;
utilities.lazyLoad(exports, ["SlsAlert"], () => require("./slsAlert"));

export { SlsScheduledSqlArgs, SlsScheduledSqlState } from "./slsScheduledSql";
export type SlsScheduledSql = import("./slsScheduledSql").SlsScheduledSql;
export const SlsScheduledSql: typeof import("./slsScheduledSql").SlsScheduledSql = null as any;
utilities.lazyLoad(exports, ["SlsScheduledSql"], () => require("./slsScheduledSql"));

export { SmartagFlowLogArgs, SmartagFlowLogState } from "./smartagFlowLog";
export type SmartagFlowLog = import("./smartagFlowLog").SmartagFlowLog;
export const SmartagFlowLog: typeof import("./smartagFlowLog").SmartagFlowLog = null as any;
utilities.lazyLoad(exports, ["SmartagFlowLog"], () => require("./smartagFlowLog"));

export { SmsShortUrlArgs, SmsShortUrlState } from "./smsShortUrl";
export type SmsShortUrl = import("./smsShortUrl").SmsShortUrl;
export const SmsShortUrl: typeof import("./smsShortUrl").SmsShortUrl = null as any;
utilities.lazyLoad(exports, ["SmsShortUrl"], () => require("./smsShortUrl"));

export { SnapshotArgs, SnapshotState } from "./snapshot";
export type Snapshot = import("./snapshot").Snapshot;
export const Snapshot: typeof import("./snapshot").Snapshot = null as any;
utilities.lazyLoad(exports, ["Snapshot"], () => require("./snapshot"));

export { SnapshotPolicyArgs, SnapshotPolicyState } from "./snapshotPolicy";
export type SnapshotPolicy = import("./snapshotPolicy").SnapshotPolicy;
export const SnapshotPolicy: typeof import("./snapshotPolicy").SnapshotPolicy = null as any;
utilities.lazyLoad(exports, ["SnapshotPolicy"], () => require("./snapshotPolicy"));

export { SnatEntryArgs, SnatEntryState } from "./snatEntry";
export type SnatEntry = import("./snatEntry").SnatEntry;
export const SnatEntry: typeof import("./snatEntry").SnatEntry = null as any;
utilities.lazyLoad(exports, ["SnatEntry"], () => require("./snatEntry"));

export { SslCertificatesServiceCertificateArgs, SslCertificatesServiceCertificateState } from "./sslCertificatesServiceCertificate";
export type SslCertificatesServiceCertificate = import("./sslCertificatesServiceCertificate").SslCertificatesServiceCertificate;
export const SslCertificatesServiceCertificate: typeof import("./sslCertificatesServiceCertificate").SslCertificatesServiceCertificate = null as any;
utilities.lazyLoad(exports, ["SslCertificatesServiceCertificate"], () => require("./sslCertificatesServiceCertificate"));

export { SslVpnClientCertArgs, SslVpnClientCertState } from "./sslVpnClientCert";
export type SslVpnClientCert = import("./sslVpnClientCert").SslVpnClientCert;
export const SslVpnClientCert: typeof import("./sslVpnClientCert").SslVpnClientCert = null as any;
utilities.lazyLoad(exports, ["SslVpnClientCert"], () => require("./sslVpnClientCert"));

export { SslVpnServerArgs, SslVpnServerState } from "./sslVpnServer";
export type SslVpnServer = import("./sslVpnServer").SslVpnServer;
export const SslVpnServer: typeof import("./sslVpnServer").SslVpnServer = null as any;
utilities.lazyLoad(exports, ["SslVpnServer"], () => require("./sslVpnServer"));

export { SubnetArgs, SubnetState } from "./subnet";
export type Subnet = import("./subnet").Subnet;
export const Subnet: typeof import("./subnet").Subnet = null as any;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));

export { TagMetaTagArgs, TagMetaTagState } from "./tagMetaTag";
export type TagMetaTag = import("./tagMetaTag").TagMetaTag;
export const TagMetaTag: typeof import("./tagMetaTag").TagMetaTag = null as any;
utilities.lazyLoad(exports, ["TagMetaTag"], () => require("./tagMetaTag"));

export { TagPolicyArgs, TagPolicyState } from "./tagPolicy";
export type TagPolicy = import("./tagPolicy").TagPolicy;
export const TagPolicy: typeof import("./tagPolicy").TagPolicy = null as any;
utilities.lazyLoad(exports, ["TagPolicy"], () => require("./tagPolicy"));

export { TagPolicyAttachmentArgs, TagPolicyAttachmentState } from "./tagPolicyAttachment";
export type TagPolicyAttachment = import("./tagPolicyAttachment").TagPolicyAttachment;
export const TagPolicyAttachment: typeof import("./tagPolicyAttachment").TagPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["TagPolicyAttachment"], () => require("./tagPolicyAttachment"));

export { ThreatDetectionAntiBruteForceRuleArgs, ThreatDetectionAntiBruteForceRuleState } from "./threatDetectionAntiBruteForceRule";
export type ThreatDetectionAntiBruteForceRule = import("./threatDetectionAntiBruteForceRule").ThreatDetectionAntiBruteForceRule;
export const ThreatDetectionAntiBruteForceRule: typeof import("./threatDetectionAntiBruteForceRule").ThreatDetectionAntiBruteForceRule = null as any;
utilities.lazyLoad(exports, ["ThreatDetectionAntiBruteForceRule"], () => require("./threatDetectionAntiBruteForceRule"));

export { ThreatDetectionBackupPolicyArgs, ThreatDetectionBackupPolicyState } from "./threatDetectionBackupPolicy";
export type ThreatDetectionBackupPolicy = import("./threatDetectionBackupPolicy").ThreatDetectionBackupPolicy;
export const ThreatDetectionBackupPolicy: typeof import("./threatDetectionBackupPolicy").ThreatDetectionBackupPolicy = null as any;
utilities.lazyLoad(exports, ["ThreatDetectionBackupPolicy"], () => require("./threatDetectionBackupPolicy"));

export { ThreatDetectionBaselineStrategyArgs, ThreatDetectionBaselineStrategyState } from "./threatDetectionBaselineStrategy";
export type ThreatDetectionBaselineStrategy = import("./threatDetectionBaselineStrategy").ThreatDetectionBaselineStrategy;
export const ThreatDetectionBaselineStrategy: typeof import("./threatDetectionBaselineStrategy").ThreatDetectionBaselineStrategy = null as any;
utilities.lazyLoad(exports, ["ThreatDetectionBaselineStrategy"], () => require("./threatDetectionBaselineStrategy"));

export { ThreatDetectionClientFileProtectArgs, ThreatDetectionClientFileProtectState } from "./threatDetectionClientFileProtect";
export type ThreatDetectionClientFileProtect = import("./threatDetectionClientFileProtect").ThreatDetectionClientFileProtect;
export const ThreatDetectionClientFileProtect: typeof import("./threatDetectionClientFileProtect").ThreatDetectionClientFileProtect = null as any;
utilities.lazyLoad(exports, ["ThreatDetectionClientFileProtect"], () => require("./threatDetectionClientFileProtect"));

export { ThreatDetectionClientUserDefineRuleArgs, ThreatDetectionClientUserDefineRuleState } from "./threatDetectionClientUserDefineRule";
export type ThreatDetectionClientUserDefineRule = import("./threatDetectionClientUserDefineRule").ThreatDetectionClientUserDefineRule;
export const ThreatDetectionClientUserDefineRule: typeof import("./threatDetectionClientUserDefineRule").ThreatDetectionClientUserDefineRule = null as any;
utilities.lazyLoad(exports, ["ThreatDetectionClientUserDefineRule"], () => require("./threatDetectionClientUserDefineRule"));

export { ThreatDetectionFileUploadLimitArgs, ThreatDetectionFileUploadLimitState } from "./threatDetectionFileUploadLimit";
export type ThreatDetectionFileUploadLimit = import("./threatDetectionFileUploadLimit").ThreatDetectionFileUploadLimit;
export const ThreatDetectionFileUploadLimit: typeof import("./threatDetectionFileUploadLimit").ThreatDetectionFileUploadLimit = null as any;
utilities.lazyLoad(exports, ["ThreatDetectionFileUploadLimit"], () => require("./threatDetectionFileUploadLimit"));

export { ThreatDetectionHoneyPotArgs, ThreatDetectionHoneyPotState } from "./threatDetectionHoneyPot";
export type ThreatDetectionHoneyPot = import("./threatDetectionHoneyPot").ThreatDetectionHoneyPot;
export const ThreatDetectionHoneyPot: typeof import("./threatDetectionHoneyPot").ThreatDetectionHoneyPot = null as any;
utilities.lazyLoad(exports, ["ThreatDetectionHoneyPot"], () => require("./threatDetectionHoneyPot"));

export { ThreatDetectionHoneypotNodeArgs, ThreatDetectionHoneypotNodeState } from "./threatDetectionHoneypotNode";
export type ThreatDetectionHoneypotNode = import("./threatDetectionHoneypotNode").ThreatDetectionHoneypotNode;
export const ThreatDetectionHoneypotNode: typeof import("./threatDetectionHoneypotNode").ThreatDetectionHoneypotNode = null as any;
utilities.lazyLoad(exports, ["ThreatDetectionHoneypotNode"], () => require("./threatDetectionHoneypotNode"));

export { ThreatDetectionHoneypotPresetArgs, ThreatDetectionHoneypotPresetState } from "./threatDetectionHoneypotPreset";
export type ThreatDetectionHoneypotPreset = import("./threatDetectionHoneypotPreset").ThreatDetectionHoneypotPreset;
export const ThreatDetectionHoneypotPreset: typeof import("./threatDetectionHoneypotPreset").ThreatDetectionHoneypotPreset = null as any;
utilities.lazyLoad(exports, ["ThreatDetectionHoneypotPreset"], () => require("./threatDetectionHoneypotPreset"));

export { ThreatDetectionHoneypotProbeArgs, ThreatDetectionHoneypotProbeState } from "./threatDetectionHoneypotProbe";
export type ThreatDetectionHoneypotProbe = import("./threatDetectionHoneypotProbe").ThreatDetectionHoneypotProbe;
export const ThreatDetectionHoneypotProbe: typeof import("./threatDetectionHoneypotProbe").ThreatDetectionHoneypotProbe = null as any;
utilities.lazyLoad(exports, ["ThreatDetectionHoneypotProbe"], () => require("./threatDetectionHoneypotProbe"));

export { ThreatDetectionImageEventOperationArgs, ThreatDetectionImageEventOperationState } from "./threatDetectionImageEventOperation";
export type ThreatDetectionImageEventOperation = import("./threatDetectionImageEventOperation").ThreatDetectionImageEventOperation;
export const ThreatDetectionImageEventOperation: typeof import("./threatDetectionImageEventOperation").ThreatDetectionImageEventOperation = null as any;
utilities.lazyLoad(exports, ["ThreatDetectionImageEventOperation"], () => require("./threatDetectionImageEventOperation"));

export { ThreatDetectionInstanceArgs, ThreatDetectionInstanceState } from "./threatDetectionInstance";
export type ThreatDetectionInstance = import("./threatDetectionInstance").ThreatDetectionInstance;
export const ThreatDetectionInstance: typeof import("./threatDetectionInstance").ThreatDetectionInstance = null as any;
utilities.lazyLoad(exports, ["ThreatDetectionInstance"], () => require("./threatDetectionInstance"));

export { ThreatDetectionMaliciousFileWhitelistConfigArgs, ThreatDetectionMaliciousFileWhitelistConfigState } from "./threatDetectionMaliciousFileWhitelistConfig";
export type ThreatDetectionMaliciousFileWhitelistConfig = import("./threatDetectionMaliciousFileWhitelistConfig").ThreatDetectionMaliciousFileWhitelistConfig;
export const ThreatDetectionMaliciousFileWhitelistConfig: typeof import("./threatDetectionMaliciousFileWhitelistConfig").ThreatDetectionMaliciousFileWhitelistConfig = null as any;
utilities.lazyLoad(exports, ["ThreatDetectionMaliciousFileWhitelistConfig"], () => require("./threatDetectionMaliciousFileWhitelistConfig"));

export { ThreatDetectionOssScanConfigArgs, ThreatDetectionOssScanConfigState } from "./threatDetectionOssScanConfig";
export type ThreatDetectionOssScanConfig = import("./threatDetectionOssScanConfig").ThreatDetectionOssScanConfig;
export const ThreatDetectionOssScanConfig: typeof import("./threatDetectionOssScanConfig").ThreatDetectionOssScanConfig = null as any;
utilities.lazyLoad(exports, ["ThreatDetectionOssScanConfig"], () => require("./threatDetectionOssScanConfig"));

export { ThreatDetectionSasTrailArgs, ThreatDetectionSasTrailState } from "./threatDetectionSasTrail";
export type ThreatDetectionSasTrail = import("./threatDetectionSasTrail").ThreatDetectionSasTrail;
export const ThreatDetectionSasTrail: typeof import("./threatDetectionSasTrail").ThreatDetectionSasTrail = null as any;
utilities.lazyLoad(exports, ["ThreatDetectionSasTrail"], () => require("./threatDetectionSasTrail"));

export { ThreatDetectionVulWhitelistArgs, ThreatDetectionVulWhitelistState } from "./threatDetectionVulWhitelist";
export type ThreatDetectionVulWhitelist = import("./threatDetectionVulWhitelist").ThreatDetectionVulWhitelist;
export const ThreatDetectionVulWhitelist: typeof import("./threatDetectionVulWhitelist").ThreatDetectionVulWhitelist = null as any;
utilities.lazyLoad(exports, ["ThreatDetectionVulWhitelist"], () => require("./threatDetectionVulWhitelist"));

export { ThreatDetectionWebLockConfigArgs, ThreatDetectionWebLockConfigState } from "./threatDetectionWebLockConfig";
export type ThreatDetectionWebLockConfig = import("./threatDetectionWebLockConfig").ThreatDetectionWebLockConfig;
export const ThreatDetectionWebLockConfig: typeof import("./threatDetectionWebLockConfig").ThreatDetectionWebLockConfig = null as any;
utilities.lazyLoad(exports, ["ThreatDetectionWebLockConfig"], () => require("./threatDetectionWebLockConfig"));

export { TsdbInstanceArgs, TsdbInstanceState } from "./tsdbInstance";
export type TsdbInstance = import("./tsdbInstance").TsdbInstance;
export const TsdbInstance: typeof import("./tsdbInstance").TsdbInstance = null as any;
utilities.lazyLoad(exports, ["TsdbInstance"], () => require("./tsdbInstance"));

export { VideoSurveillanceSystemGroupArgs, VideoSurveillanceSystemGroupState } from "./videoSurveillanceSystemGroup";
export type VideoSurveillanceSystemGroup = import("./videoSurveillanceSystemGroup").VideoSurveillanceSystemGroup;
export const VideoSurveillanceSystemGroup: typeof import("./videoSurveillanceSystemGroup").VideoSurveillanceSystemGroup = null as any;
utilities.lazyLoad(exports, ["VideoSurveillanceSystemGroup"], () => require("./videoSurveillanceSystemGroup"));

export { VodDomainArgs, VodDomainState } from "./vodDomain";
export type VodDomain = import("./vodDomain").VodDomain;
export const VodDomain: typeof import("./vodDomain").VodDomain = null as any;
utilities.lazyLoad(exports, ["VodDomain"], () => require("./vodDomain"));

export { VodEditingProjectArgs, VodEditingProjectState } from "./vodEditingProject";
export type VodEditingProject = import("./vodEditingProject").VodEditingProject;
export const VodEditingProject: typeof import("./vodEditingProject").VodEditingProject = null as any;
utilities.lazyLoad(exports, ["VodEditingProject"], () => require("./vodEditingProject"));

export { VpcArgs, VpcState } from "./vpc";
export type Vpc = import("./vpc").Vpc;
export const Vpc: typeof import("./vpc").Vpc = null as any;
utilities.lazyLoad(exports, ["Vpc"], () => require("./vpc"));

export { VpcBgpGroupArgs, VpcBgpGroupState } from "./vpcBgpGroup";
export type VpcBgpGroup = import("./vpcBgpGroup").VpcBgpGroup;
export const VpcBgpGroup: typeof import("./vpcBgpGroup").VpcBgpGroup = null as any;
utilities.lazyLoad(exports, ["VpcBgpGroup"], () => require("./vpcBgpGroup"));

export { VpcBgpNetworkArgs, VpcBgpNetworkState } from "./vpcBgpNetwork";
export type VpcBgpNetwork = import("./vpcBgpNetwork").VpcBgpNetwork;
export const VpcBgpNetwork: typeof import("./vpcBgpNetwork").VpcBgpNetwork = null as any;
utilities.lazyLoad(exports, ["VpcBgpNetwork"], () => require("./vpcBgpNetwork"));

export { VpcBgpPeerArgs, VpcBgpPeerState } from "./vpcBgpPeer";
export type VpcBgpPeer = import("./vpcBgpPeer").VpcBgpPeer;
export const VpcBgpPeer: typeof import("./vpcBgpPeer").VpcBgpPeer = null as any;
utilities.lazyLoad(exports, ["VpcBgpPeer"], () => require("./vpcBgpPeer"));

export { VpcDhcpOptionsSetArgs, VpcDhcpOptionsSetState } from "./vpcDhcpOptionsSet";
export type VpcDhcpOptionsSet = import("./vpcDhcpOptionsSet").VpcDhcpOptionsSet;
export const VpcDhcpOptionsSet: typeof import("./vpcDhcpOptionsSet").VpcDhcpOptionsSet = null as any;
utilities.lazyLoad(exports, ["VpcDhcpOptionsSet"], () => require("./vpcDhcpOptionsSet"));

export { VpcDhcpOptionsSetAttachmentArgs, VpcDhcpOptionsSetAttachmentState } from "./vpcDhcpOptionsSetAttachment";
export type VpcDhcpOptionsSetAttachment = import("./vpcDhcpOptionsSetAttachment").VpcDhcpOptionsSetAttachment;
export const VpcDhcpOptionsSetAttachment: typeof import("./vpcDhcpOptionsSetAttachment").VpcDhcpOptionsSetAttachment = null as any;
utilities.lazyLoad(exports, ["VpcDhcpOptionsSetAttachment"], () => require("./vpcDhcpOptionsSetAttachment"));

export { VpcFlowLogArgs, VpcFlowLogState } from "./vpcFlowLog";
export type VpcFlowLog = import("./vpcFlowLog").VpcFlowLog;
export const VpcFlowLog: typeof import("./vpcFlowLog").VpcFlowLog = null as any;
utilities.lazyLoad(exports, ["VpcFlowLog"], () => require("./vpcFlowLog"));

export { VpcGatewayEndpointArgs, VpcGatewayEndpointState } from "./vpcGatewayEndpoint";
export type VpcGatewayEndpoint = import("./vpcGatewayEndpoint").VpcGatewayEndpoint;
export const VpcGatewayEndpoint: typeof import("./vpcGatewayEndpoint").VpcGatewayEndpoint = null as any;
utilities.lazyLoad(exports, ["VpcGatewayEndpoint"], () => require("./vpcGatewayEndpoint"));

export { VpcGatewayEndpointRouteTableAttachmentArgs, VpcGatewayEndpointRouteTableAttachmentState } from "./vpcGatewayEndpointRouteTableAttachment";
export type VpcGatewayEndpointRouteTableAttachment = import("./vpcGatewayEndpointRouteTableAttachment").VpcGatewayEndpointRouteTableAttachment;
export const VpcGatewayEndpointRouteTableAttachment: typeof import("./vpcGatewayEndpointRouteTableAttachment").VpcGatewayEndpointRouteTableAttachment = null as any;
utilities.lazyLoad(exports, ["VpcGatewayEndpointRouteTableAttachment"], () => require("./vpcGatewayEndpointRouteTableAttachment"));

export { VpcGatewayRouteTableAttachmentArgs, VpcGatewayRouteTableAttachmentState } from "./vpcGatewayRouteTableAttachment";
export type VpcGatewayRouteTableAttachment = import("./vpcGatewayRouteTableAttachment").VpcGatewayRouteTableAttachment;
export const VpcGatewayRouteTableAttachment: typeof import("./vpcGatewayRouteTableAttachment").VpcGatewayRouteTableAttachment = null as any;
utilities.lazyLoad(exports, ["VpcGatewayRouteTableAttachment"], () => require("./vpcGatewayRouteTableAttachment"));

export { VpcHaVipArgs, VpcHaVipState } from "./vpcHaVip";
export type VpcHaVip = import("./vpcHaVip").VpcHaVip;
export const VpcHaVip: typeof import("./vpcHaVip").VpcHaVip = null as any;
utilities.lazyLoad(exports, ["VpcHaVip"], () => require("./vpcHaVip"));

export { VpcIpv4CidrBlockArgs, VpcIpv4CidrBlockState } from "./vpcIpv4CidrBlock";
export type VpcIpv4CidrBlock = import("./vpcIpv4CidrBlock").VpcIpv4CidrBlock;
export const VpcIpv4CidrBlock: typeof import("./vpcIpv4CidrBlock").VpcIpv4CidrBlock = null as any;
utilities.lazyLoad(exports, ["VpcIpv4CidrBlock"], () => require("./vpcIpv4CidrBlock"));

export { VpcIpv4GatewayArgs, VpcIpv4GatewayState } from "./vpcIpv4Gateway";
export type VpcIpv4Gateway = import("./vpcIpv4Gateway").VpcIpv4Gateway;
export const VpcIpv4Gateway: typeof import("./vpcIpv4Gateway").VpcIpv4Gateway = null as any;
utilities.lazyLoad(exports, ["VpcIpv4Gateway"], () => require("./vpcIpv4Gateway"));

export { VpcIpv6AddressArgs, VpcIpv6AddressState } from "./vpcIpv6Address";
export type VpcIpv6Address = import("./vpcIpv6Address").VpcIpv6Address;
export const VpcIpv6Address: typeof import("./vpcIpv6Address").VpcIpv6Address = null as any;
utilities.lazyLoad(exports, ["VpcIpv6Address"], () => require("./vpcIpv6Address"));

export { VpcIpv6EgressRuleArgs, VpcIpv6EgressRuleState } from "./vpcIpv6EgressRule";
export type VpcIpv6EgressRule = import("./vpcIpv6EgressRule").VpcIpv6EgressRule;
export const VpcIpv6EgressRule: typeof import("./vpcIpv6EgressRule").VpcIpv6EgressRule = null as any;
utilities.lazyLoad(exports, ["VpcIpv6EgressRule"], () => require("./vpcIpv6EgressRule"));

export { VpcIpv6GatewayArgs, VpcIpv6GatewayState } from "./vpcIpv6Gateway";
export type VpcIpv6Gateway = import("./vpcIpv6Gateway").VpcIpv6Gateway;
export const VpcIpv6Gateway: typeof import("./vpcIpv6Gateway").VpcIpv6Gateway = null as any;
utilities.lazyLoad(exports, ["VpcIpv6Gateway"], () => require("./vpcIpv6Gateway"));

export { VpcIpv6InternetBandwidthArgs, VpcIpv6InternetBandwidthState } from "./vpcIpv6InternetBandwidth";
export type VpcIpv6InternetBandwidth = import("./vpcIpv6InternetBandwidth").VpcIpv6InternetBandwidth;
export const VpcIpv6InternetBandwidth: typeof import("./vpcIpv6InternetBandwidth").VpcIpv6InternetBandwidth = null as any;
utilities.lazyLoad(exports, ["VpcIpv6InternetBandwidth"], () => require("./vpcIpv6InternetBandwidth"));

export { VpcNatIpArgs, VpcNatIpState } from "./vpcNatIp";
export type VpcNatIp = import("./vpcNatIp").VpcNatIp;
export const VpcNatIp: typeof import("./vpcNatIp").VpcNatIp = null as any;
utilities.lazyLoad(exports, ["VpcNatIp"], () => require("./vpcNatIp"));

export { VpcNatIpCidrArgs, VpcNatIpCidrState } from "./vpcNatIpCidr";
export type VpcNatIpCidr = import("./vpcNatIpCidr").VpcNatIpCidr;
export const VpcNatIpCidr: typeof import("./vpcNatIpCidr").VpcNatIpCidr = null as any;
utilities.lazyLoad(exports, ["VpcNatIpCidr"], () => require("./vpcNatIpCidr"));

export { VpcNetworkAclAttachmentArgs, VpcNetworkAclAttachmentState } from "./vpcNetworkAclAttachment";
export type VpcNetworkAclAttachment = import("./vpcNetworkAclAttachment").VpcNetworkAclAttachment;
export const VpcNetworkAclAttachment: typeof import("./vpcNetworkAclAttachment").VpcNetworkAclAttachment = null as any;
utilities.lazyLoad(exports, ["VpcNetworkAclAttachment"], () => require("./vpcNetworkAclAttachment"));

export { VpcPeerConnectionArgs, VpcPeerConnectionState } from "./vpcPeerConnection";
export type VpcPeerConnection = import("./vpcPeerConnection").VpcPeerConnection;
export const VpcPeerConnection: typeof import("./vpcPeerConnection").VpcPeerConnection = null as any;
utilities.lazyLoad(exports, ["VpcPeerConnection"], () => require("./vpcPeerConnection"));

export { VpcPeerConnectionAccepterArgs, VpcPeerConnectionAccepterState } from "./vpcPeerConnectionAccepter";
export type VpcPeerConnectionAccepter = import("./vpcPeerConnectionAccepter").VpcPeerConnectionAccepter;
export const VpcPeerConnectionAccepter: typeof import("./vpcPeerConnectionAccepter").VpcPeerConnectionAccepter = null as any;
utilities.lazyLoad(exports, ["VpcPeerConnectionAccepter"], () => require("./vpcPeerConnectionAccepter"));

export { VpcPrefixListArgs, VpcPrefixListState } from "./vpcPrefixList";
export type VpcPrefixList = import("./vpcPrefixList").VpcPrefixList;
export const VpcPrefixList: typeof import("./vpcPrefixList").VpcPrefixList = null as any;
utilities.lazyLoad(exports, ["VpcPrefixList"], () => require("./vpcPrefixList"));

export { VpcPublicIpAddressPoolArgs, VpcPublicIpAddressPoolState } from "./vpcPublicIpAddressPool";
export type VpcPublicIpAddressPool = import("./vpcPublicIpAddressPool").VpcPublicIpAddressPool;
export const VpcPublicIpAddressPool: typeof import("./vpcPublicIpAddressPool").VpcPublicIpAddressPool = null as any;
utilities.lazyLoad(exports, ["VpcPublicIpAddressPool"], () => require("./vpcPublicIpAddressPool"));

export { VpcPublicIpAddressPoolCidrBlockArgs, VpcPublicIpAddressPoolCidrBlockState } from "./vpcPublicIpAddressPoolCidrBlock";
export type VpcPublicIpAddressPoolCidrBlock = import("./vpcPublicIpAddressPoolCidrBlock").VpcPublicIpAddressPoolCidrBlock;
export const VpcPublicIpAddressPoolCidrBlock: typeof import("./vpcPublicIpAddressPoolCidrBlock").VpcPublicIpAddressPoolCidrBlock = null as any;
utilities.lazyLoad(exports, ["VpcPublicIpAddressPoolCidrBlock"], () => require("./vpcPublicIpAddressPoolCidrBlock"));

export { VpcTrafficMirrorFilterArgs, VpcTrafficMirrorFilterState } from "./vpcTrafficMirrorFilter";
export type VpcTrafficMirrorFilter = import("./vpcTrafficMirrorFilter").VpcTrafficMirrorFilter;
export const VpcTrafficMirrorFilter: typeof import("./vpcTrafficMirrorFilter").VpcTrafficMirrorFilter = null as any;
utilities.lazyLoad(exports, ["VpcTrafficMirrorFilter"], () => require("./vpcTrafficMirrorFilter"));

export { VpcTrafficMirrorFilterEgressRuleArgs, VpcTrafficMirrorFilterEgressRuleState } from "./vpcTrafficMirrorFilterEgressRule";
export type VpcTrafficMirrorFilterEgressRule = import("./vpcTrafficMirrorFilterEgressRule").VpcTrafficMirrorFilterEgressRule;
export const VpcTrafficMirrorFilterEgressRule: typeof import("./vpcTrafficMirrorFilterEgressRule").VpcTrafficMirrorFilterEgressRule = null as any;
utilities.lazyLoad(exports, ["VpcTrafficMirrorFilterEgressRule"], () => require("./vpcTrafficMirrorFilterEgressRule"));

export { VpcTrafficMirrorFilterIngressRuleArgs, VpcTrafficMirrorFilterIngressRuleState } from "./vpcTrafficMirrorFilterIngressRule";
export type VpcTrafficMirrorFilterIngressRule = import("./vpcTrafficMirrorFilterIngressRule").VpcTrafficMirrorFilterIngressRule;
export const VpcTrafficMirrorFilterIngressRule: typeof import("./vpcTrafficMirrorFilterIngressRule").VpcTrafficMirrorFilterIngressRule = null as any;
utilities.lazyLoad(exports, ["VpcTrafficMirrorFilterIngressRule"], () => require("./vpcTrafficMirrorFilterIngressRule"));

export { VpcTrafficMirrorSessionArgs, VpcTrafficMirrorSessionState } from "./vpcTrafficMirrorSession";
export type VpcTrafficMirrorSession = import("./vpcTrafficMirrorSession").VpcTrafficMirrorSession;
export const VpcTrafficMirrorSession: typeof import("./vpcTrafficMirrorSession").VpcTrafficMirrorSession = null as any;
utilities.lazyLoad(exports, ["VpcTrafficMirrorSession"], () => require("./vpcTrafficMirrorSession"));

export { VpcVbrHaArgs, VpcVbrHaState } from "./vpcVbrHa";
export type VpcVbrHa = import("./vpcVbrHa").VpcVbrHa;
export const VpcVbrHa: typeof import("./vpcVbrHa").VpcVbrHa = null as any;
utilities.lazyLoad(exports, ["VpcVbrHa"], () => require("./vpcVbrHa"));

export { VpcVswitchCidrReservationArgs, VpcVswitchCidrReservationState } from "./vpcVswitchCidrReservation";
export type VpcVswitchCidrReservation = import("./vpcVswitchCidrReservation").VpcVswitchCidrReservation;
export const VpcVswitchCidrReservation: typeof import("./vpcVswitchCidrReservation").VpcVswitchCidrReservation = null as any;
utilities.lazyLoad(exports, ["VpcVswitchCidrReservation"], () => require("./vpcVswitchCidrReservation"));

export { VpnConnectionArgs, VpnConnectionState } from "./vpnConnection";
export type VpnConnection = import("./vpnConnection").VpnConnection;
export const VpnConnection: typeof import("./vpnConnection").VpnConnection = null as any;
utilities.lazyLoad(exports, ["VpnConnection"], () => require("./vpnConnection"));

export { VpnCustomerGatewayArgs, VpnCustomerGatewayState } from "./vpnCustomerGateway";
export type VpnCustomerGateway = import("./vpnCustomerGateway").VpnCustomerGateway;
export const VpnCustomerGateway: typeof import("./vpnCustomerGateway").VpnCustomerGateway = null as any;
utilities.lazyLoad(exports, ["VpnCustomerGateway"], () => require("./vpnCustomerGateway"));

export { VpnGatewayArgs, VpnGatewayState } from "./vpnGateway";
export type VpnGateway = import("./vpnGateway").VpnGateway;
export const VpnGateway: typeof import("./vpnGateway").VpnGateway = null as any;
utilities.lazyLoad(exports, ["VpnGateway"], () => require("./vpnGateway"));

export { VpnGatewayVcoRouteArgs, VpnGatewayVcoRouteState } from "./vpnGatewayVcoRoute";
export type VpnGatewayVcoRoute = import("./vpnGatewayVcoRoute").VpnGatewayVcoRoute;
export const VpnGatewayVcoRoute: typeof import("./vpnGatewayVcoRoute").VpnGatewayVcoRoute = null as any;
utilities.lazyLoad(exports, ["VpnGatewayVcoRoute"], () => require("./vpnGatewayVcoRoute"));

export { VpnGatewayVpnAttachmentArgs, VpnGatewayVpnAttachmentState } from "./vpnGatewayVpnAttachment";
export type VpnGatewayVpnAttachment = import("./vpnGatewayVpnAttachment").VpnGatewayVpnAttachment;
export const VpnGatewayVpnAttachment: typeof import("./vpnGatewayVpnAttachment").VpnGatewayVpnAttachment = null as any;
utilities.lazyLoad(exports, ["VpnGatewayVpnAttachment"], () => require("./vpnGatewayVpnAttachment"));

export { VpnIpsecServerArgs, VpnIpsecServerState } from "./vpnIpsecServer";
export type VpnIpsecServer = import("./vpnIpsecServer").VpnIpsecServer;
export const VpnIpsecServer: typeof import("./vpnIpsecServer").VpnIpsecServer = null as any;
utilities.lazyLoad(exports, ["VpnIpsecServer"], () => require("./vpnIpsecServer"));

export { VpnPbrRouteEntryArgs, VpnPbrRouteEntryState } from "./vpnPbrRouteEntry";
export type VpnPbrRouteEntry = import("./vpnPbrRouteEntry").VpnPbrRouteEntry;
export const VpnPbrRouteEntry: typeof import("./vpnPbrRouteEntry").VpnPbrRouteEntry = null as any;
utilities.lazyLoad(exports, ["VpnPbrRouteEntry"], () => require("./vpnPbrRouteEntry"));

export { VpnRouteEntryArgs, VpnRouteEntryState } from "./vpnRouteEntry";
export type VpnRouteEntry = import("./vpnRouteEntry").VpnRouteEntry;
export const VpnRouteEntry: typeof import("./vpnRouteEntry").VpnRouteEntry = null as any;
utilities.lazyLoad(exports, ["VpnRouteEntry"], () => require("./vpnRouteEntry"));

export { VswitchArgs, VswitchState } from "./vswitch";
export type Vswitch = import("./vswitch").Vswitch;
export const Vswitch: typeof import("./vswitch").Vswitch = null as any;
utilities.lazyLoad(exports, ["Vswitch"], () => require("./vswitch"));

export { WafCertificateArgs, WafCertificateState } from "./wafCertificate";
export type WafCertificate = import("./wafCertificate").WafCertificate;
export const WafCertificate: typeof import("./wafCertificate").WafCertificate = null as any;
utilities.lazyLoad(exports, ["WafCertificate"], () => require("./wafCertificate"));

export { WafDomainArgs, WafDomainState } from "./wafDomain";
export type WafDomain = import("./wafDomain").WafDomain;
export const WafDomain: typeof import("./wafDomain").WafDomain = null as any;
utilities.lazyLoad(exports, ["WafDomain"], () => require("./wafDomain"));

export { WafInstanceArgs, WafInstanceState } from "./wafInstance";
export type WafInstance = import("./wafInstance").WafInstance;
export const WafInstance: typeof import("./wafInstance").WafInstance = null as any;
utilities.lazyLoad(exports, ["WafInstance"], () => require("./wafInstance"));

export { WafProtectionModuleArgs, WafProtectionModuleState } from "./wafProtectionModule";
export type WafProtectionModule = import("./wafProtectionModule").WafProtectionModule;
export const WafProtectionModule: typeof import("./wafProtectionModule").WafProtectionModule = null as any;
utilities.lazyLoad(exports, ["WafProtectionModule"], () => require("./wafProtectionModule"));

export { Wafv3DefenseTemplateArgs, Wafv3DefenseTemplateState } from "./wafv3DefenseTemplate";
export type Wafv3DefenseTemplate = import("./wafv3DefenseTemplate").Wafv3DefenseTemplate;
export const Wafv3DefenseTemplate: typeof import("./wafv3DefenseTemplate").Wafv3DefenseTemplate = null as any;
utilities.lazyLoad(exports, ["Wafv3DefenseTemplate"], () => require("./wafv3DefenseTemplate"));

export { Wafv3DomainArgs, Wafv3DomainState } from "./wafv3Domain";
export type Wafv3Domain = import("./wafv3Domain").Wafv3Domain;
export const Wafv3Domain: typeof import("./wafv3Domain").Wafv3Domain = null as any;
utilities.lazyLoad(exports, ["Wafv3Domain"], () => require("./wafv3Domain"));

export { Wafv3InstanceArgs, Wafv3InstanceState } from "./wafv3Instance";
export type Wafv3Instance = import("./wafv3Instance").Wafv3Instance;
export const Wafv3Instance: typeof import("./wafv3Instance").Wafv3Instance = null as any;
utilities.lazyLoad(exports, ["Wafv3Instance"], () => require("./wafv3Instance"));

export { YundunBastionhostInstanceArgs, YundunBastionhostInstanceState } from "./yundunBastionhostInstance";
export type YundunBastionhostInstance = import("./yundunBastionhostInstance").YundunBastionhostInstance;
export const YundunBastionhostInstance: typeof import("./yundunBastionhostInstance").YundunBastionhostInstance = null as any;
utilities.lazyLoad(exports, ["YundunBastionhostInstance"], () => require("./yundunBastionhostInstance"));

export { YundunDbauditInstanceArgs, YundunDbauditInstanceState } from "./yundunDbauditInstance";
export type YundunDbauditInstance = import("./yundunDbauditInstance").YundunDbauditInstance;
export const YundunDbauditInstance: typeof import("./yundunDbauditInstance").YundunDbauditInstance = null as any;
utilities.lazyLoad(exports, ["YundunDbauditInstance"], () => require("./yundunDbauditInstance"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alicloud:index/ackOneCluster:AckOneCluster":
                return new AckOneCluster(name, <any>undefined, { urn })
            case "alicloud:index/actiontrail:Actiontrail":
                return new Actiontrail(name, <any>undefined, { urn })
            case "alicloud:index/actiontrailGlobalEventsStorageRegion:ActiontrailGlobalEventsStorageRegion":
                return new ActiontrailGlobalEventsStorageRegion(name, <any>undefined, { urn })
            case "alicloud:index/actiontrailHistoryDeliveryJob:ActiontrailHistoryDeliveryJob":
                return new ActiontrailHistoryDeliveryJob(name, <any>undefined, { urn })
            case "alicloud:index/actiontrailTrail:ActiontrailTrail":
                return new ActiontrailTrail(name, <any>undefined, { urn })
            case "alicloud:index/adbAccount:AdbAccount":
                return new AdbAccount(name, <any>undefined, { urn })
            case "alicloud:index/adbBackupPolicy:AdbBackupPolicy":
                return new AdbBackupPolicy(name, <any>undefined, { urn })
            case "alicloud:index/adbCluster:AdbCluster":
                return new AdbCluster(name, <any>undefined, { urn })
            case "alicloud:index/adbConnection:AdbConnection":
                return new AdbConnection(name, <any>undefined, { urn })
            case "alicloud:index/adbDbCluster:AdbDbCluster":
                return new AdbDbCluster(name, <any>undefined, { urn })
            case "alicloud:index/adbDbClusterLakeVersion:AdbDbClusterLakeVersion":
                return new AdbDbClusterLakeVersion(name, <any>undefined, { urn })
            case "alicloud:index/adbLakeAccount:AdbLakeAccount":
                return new AdbLakeAccount(name, <any>undefined, { urn })
            case "alicloud:index/adbResourceGroup:AdbResourceGroup":
                return new AdbResourceGroup(name, <any>undefined, { urn })
            case "alicloud:index/albAcl:AlbAcl":
                return new AlbAcl(name, <any>undefined, { urn })
            case "alicloud:index/albAclEntryAttachment:AlbAclEntryAttachment":
                return new AlbAclEntryAttachment(name, <any>undefined, { urn })
            case "alicloud:index/albAscript:AlbAscript":
                return new AlbAscript(name, <any>undefined, { urn })
            case "alicloud:index/albHealthCheckTemplate:AlbHealthCheckTemplate":
                return new AlbHealthCheckTemplate(name, <any>undefined, { urn })
            case "alicloud:index/albListener:AlbListener":
                return new AlbListener(name, <any>undefined, { urn })
            case "alicloud:index/albListenerAclAttachment:AlbListenerAclAttachment":
                return new AlbListenerAclAttachment(name, <any>undefined, { urn })
            case "alicloud:index/albListenerAdditionalCertificateAttachment:AlbListenerAdditionalCertificateAttachment":
                return new AlbListenerAdditionalCertificateAttachment(name, <any>undefined, { urn })
            case "alicloud:index/albLoadBalancer:AlbLoadBalancer":
                return new AlbLoadBalancer(name, <any>undefined, { urn })
            case "alicloud:index/albLoadBalancerCommonBandwidthPackageAttachment:AlbLoadBalancerCommonBandwidthPackageAttachment":
                return new AlbLoadBalancerCommonBandwidthPackageAttachment(name, <any>undefined, { urn })
            case "alicloud:index/albLoadBalancerSecurityGroupAttachment:AlbLoadBalancerSecurityGroupAttachment":
                return new AlbLoadBalancerSecurityGroupAttachment(name, <any>undefined, { urn })
            case "alicloud:index/albRule:AlbRule":
                return new AlbRule(name, <any>undefined, { urn })
            case "alicloud:index/albSecurityPolicy:AlbSecurityPolicy":
                return new AlbSecurityPolicy(name, <any>undefined, { urn })
            case "alicloud:index/albServerGroup:AlbServerGroup":
                return new AlbServerGroup(name, <any>undefined, { urn })
            case "alicloud:index/alidnsAccessStrategy:AlidnsAccessStrategy":
                return new AlidnsAccessStrategy(name, <any>undefined, { urn })
            case "alicloud:index/alidnsAddressPool:AlidnsAddressPool":
                return new AlidnsAddressPool(name, <any>undefined, { urn })
            case "alicloud:index/alidnsCustomLine:AlidnsCustomLine":
                return new AlidnsCustomLine(name, <any>undefined, { urn })
            case "alicloud:index/alidnsDomain:AlidnsDomain":
                return new AlidnsDomain(name, <any>undefined, { urn })
            case "alicloud:index/alidnsDomainAttachment:AlidnsDomainAttachment":
                return new AlidnsDomainAttachment(name, <any>undefined, { urn })
            case "alicloud:index/alidnsDomainGroup:AlidnsDomainGroup":
                return new AlidnsDomainGroup(name, <any>undefined, { urn })
            case "alicloud:index/alidnsGtmInstance:AlidnsGtmInstance":
                return new AlidnsGtmInstance(name, <any>undefined, { urn })
            case "alicloud:index/alidnsInstance:AlidnsInstance":
                return new AlidnsInstance(name, <any>undefined, { urn })
            case "alicloud:index/alidnsMonitorConfig:AlidnsMonitorConfig":
                return new AlidnsMonitorConfig(name, <any>undefined, { urn })
            case "alicloud:index/alidnsRecord:AlidnsRecord":
                return new AlidnsRecord(name, <any>undefined, { urn })
            case "alicloud:index/aligreenAuditCallback:AligreenAuditCallback":
                return new AligreenAuditCallback(name, <any>undefined, { urn })
            case "alicloud:index/aligreenBizType:AligreenBizType":
                return new AligreenBizType(name, <any>undefined, { urn })
            case "alicloud:index/aligreenCallback:AligreenCallback":
                return new AligreenCallback(name, <any>undefined, { urn })
            case "alicloud:index/aligreenImageLib:AligreenImageLib":
                return new AligreenImageLib(name, <any>undefined, { urn })
            case "alicloud:index/aligreenKeywordLib:AligreenKeywordLib":
                return new AligreenKeywordLib(name, <any>undefined, { urn })
            case "alicloud:index/aligreenOssStockTask:AligreenOssStockTask":
                return new AligreenOssStockTask(name, <any>undefined, { urn })
            case "alicloud:index/alikafkaConsumerGroup:AlikafkaConsumerGroup":
                return new AlikafkaConsumerGroup(name, <any>undefined, { urn })
            case "alicloud:index/alikafkaInstance:AlikafkaInstance":
                return new AlikafkaInstance(name, <any>undefined, { urn })
            case "alicloud:index/alikafkaInstanceAllowedIpAttachment:AlikafkaInstanceAllowedIpAttachment":
                return new AlikafkaInstanceAllowedIpAttachment(name, <any>undefined, { urn })
            case "alicloud:index/alikafkaSaslAcl:AlikafkaSaslAcl":
                return new AlikafkaSaslAcl(name, <any>undefined, { urn })
            case "alicloud:index/alikafkaSaslUser:AlikafkaSaslUser":
                return new AlikafkaSaslUser(name, <any>undefined, { urn })
            case "alicloud:index/alikafkaTopic:AlikafkaTopic":
                return new AlikafkaTopic(name, <any>undefined, { urn })
            case "alicloud:index/amqpBinding:AmqpBinding":
                return new AmqpBinding(name, <any>undefined, { urn })
            case "alicloud:index/amqpExchange:AmqpExchange":
                return new AmqpExchange(name, <any>undefined, { urn })
            case "alicloud:index/amqpInstance:AmqpInstance":
                return new AmqpInstance(name, <any>undefined, { urn })
            case "alicloud:index/amqpQueue:AmqpQueue":
                return new AmqpQueue(name, <any>undefined, { urn })
            case "alicloud:index/amqpStaticAccount:AmqpStaticAccount":
                return new AmqpStaticAccount(name, <any>undefined, { urn })
            case "alicloud:index/amqpVirtualHost:AmqpVirtualHost":
                return new AmqpVirtualHost(name, <any>undefined, { urn })
            case "alicloud:index/apiGatewayAccessControlList:ApiGatewayAccessControlList":
                return new ApiGatewayAccessControlList(name, <any>undefined, { urn })
            case "alicloud:index/apiGatewayAclEntryAttachment:ApiGatewayAclEntryAttachment":
                return new ApiGatewayAclEntryAttachment(name, <any>undefined, { urn })
            case "alicloud:index/apiGatewayApi:ApiGatewayApi":
                return new ApiGatewayApi(name, <any>undefined, { urn })
            case "alicloud:index/apiGatewayApp:ApiGatewayApp":
                return new ApiGatewayApp(name, <any>undefined, { urn })
            case "alicloud:index/apiGatewayAppAttachment:ApiGatewayAppAttachment":
                return new ApiGatewayAppAttachment(name, <any>undefined, { urn })
            case "alicloud:index/apiGatewayBackend:ApiGatewayBackend":
                return new ApiGatewayBackend(name, <any>undefined, { urn })
            case "alicloud:index/apiGatewayGroup:ApiGatewayGroup":
                return new ApiGatewayGroup(name, <any>undefined, { urn })
            case "alicloud:index/apiGatewayInstance:ApiGatewayInstance":
                return new ApiGatewayInstance(name, <any>undefined, { urn })
            case "alicloud:index/apiGatewayInstanceAclAttachment:ApiGatewayInstanceAclAttachment":
                return new ApiGatewayInstanceAclAttachment(name, <any>undefined, { urn })
            case "alicloud:index/apiGatewayLogConfig:ApiGatewayLogConfig":
                return new ApiGatewayLogConfig(name, <any>undefined, { urn })
            case "alicloud:index/apiGatewayModel:ApiGatewayModel":
                return new ApiGatewayModel(name, <any>undefined, { urn })
            case "alicloud:index/apiGatewayPlugin:ApiGatewayPlugin":
                return new ApiGatewayPlugin(name, <any>undefined, { urn })
            case "alicloud:index/apiGatewayPluginAttachment:ApiGatewayPluginAttachment":
                return new ApiGatewayPluginAttachment(name, <any>undefined, { urn })
            case "alicloud:index/apiGatewayVpcAccess:ApiGatewayVpcAccess":
                return new ApiGatewayVpcAccess(name, <any>undefined, { urn })
            case "alicloud:index/armsAddonRelease:ArmsAddonRelease":
                return new ArmsAddonRelease(name, <any>undefined, { urn })
            case "alicloud:index/armsAlertContact:ArmsAlertContact":
                return new ArmsAlertContact(name, <any>undefined, { urn })
            case "alicloud:index/armsAlertContactGroup:ArmsAlertContactGroup":
                return new ArmsAlertContactGroup(name, <any>undefined, { urn })
            case "alicloud:index/armsDispatchRule:ArmsDispatchRule":
                return new ArmsDispatchRule(name, <any>undefined, { urn })
            case "alicloud:index/armsEnvCustomJob:ArmsEnvCustomJob":
                return new ArmsEnvCustomJob(name, <any>undefined, { urn })
            case "alicloud:index/armsEnvFeature:ArmsEnvFeature":
                return new ArmsEnvFeature(name, <any>undefined, { urn })
            case "alicloud:index/armsEnvPodMonitor:ArmsEnvPodMonitor":
                return new ArmsEnvPodMonitor(name, <any>undefined, { urn })
            case "alicloud:index/armsEnvServiceMonitor:ArmsEnvServiceMonitor":
                return new ArmsEnvServiceMonitor(name, <any>undefined, { urn })
            case "alicloud:index/armsEnvironment:ArmsEnvironment":
                return new ArmsEnvironment(name, <any>undefined, { urn })
            case "alicloud:index/armsGrafanaWorkspace:ArmsGrafanaWorkspace":
                return new ArmsGrafanaWorkspace(name, <any>undefined, { urn })
            case "alicloud:index/armsIntegrationExporter:ArmsIntegrationExporter":
                return new ArmsIntegrationExporter(name, <any>undefined, { urn })
            case "alicloud:index/armsPrometheus:ArmsPrometheus":
                return new ArmsPrometheus(name, <any>undefined, { urn })
            case "alicloud:index/armsPrometheusAlertRule:ArmsPrometheusAlertRule":
                return new ArmsPrometheusAlertRule(name, <any>undefined, { urn })
            case "alicloud:index/armsPrometheusMonitoring:ArmsPrometheusMonitoring":
                return new ArmsPrometheusMonitoring(name, <any>undefined, { urn })
            case "alicloud:index/armsRemoteWrite:ArmsRemoteWrite":
                return new ArmsRemoteWrite(name, <any>undefined, { urn })
            case "alicloud:index/armsSyntheticTask:ArmsSyntheticTask":
                return new ArmsSyntheticTask(name, <any>undefined, { urn })
            case "alicloud:index/autoProvisioningGroup:AutoProvisioningGroup":
                return new AutoProvisioningGroup(name, <any>undefined, { urn })
            case "alicloud:index/bastionhostHost:BastionhostHost":
                return new BastionhostHost(name, <any>undefined, { urn })
            case "alicloud:index/bastionhostHostAccount:BastionhostHostAccount":
                return new BastionhostHostAccount(name, <any>undefined, { urn })
            case "alicloud:index/bastionhostHostAccountShareKeyAttachment:BastionhostHostAccountShareKeyAttachment":
                return new BastionhostHostAccountShareKeyAttachment(name, <any>undefined, { urn })
            case "alicloud:index/bastionhostHostAccountUserAttachment:BastionhostHostAccountUserAttachment":
                return new BastionhostHostAccountUserAttachment(name, <any>undefined, { urn })
            case "alicloud:index/bastionhostHostAccountUserGroupAttachment:BastionhostHostAccountUserGroupAttachment":
                return new BastionhostHostAccountUserGroupAttachment(name, <any>undefined, { urn })
            case "alicloud:index/bastionhostHostAttachment:BastionhostHostAttachment":
                return new BastionhostHostAttachment(name, <any>undefined, { urn })
            case "alicloud:index/bastionhostHostGroup:BastionhostHostGroup":
                return new BastionhostHostGroup(name, <any>undefined, { urn })
            case "alicloud:index/bastionhostHostGroupAccountUserAttachment:BastionhostHostGroupAccountUserAttachment":
                return new BastionhostHostGroupAccountUserAttachment(name, <any>undefined, { urn })
            case "alicloud:index/bastionhostHostGroupAccountUserGroupAttachment:BastionhostHostGroupAccountUserGroupAttachment":
                return new BastionhostHostGroupAccountUserGroupAttachment(name, <any>undefined, { urn })
            case "alicloud:index/bastionhostHostShareKey:BastionhostHostShareKey":
                return new BastionhostHostShareKey(name, <any>undefined, { urn })
            case "alicloud:index/bastionhostInstance:BastionhostInstance":
                return new BastionhostInstance(name, <any>undefined, { urn })
            case "alicloud:index/bastionhostUser:BastionhostUser":
                return new BastionhostUser(name, <any>undefined, { urn })
            case "alicloud:index/bastionhostUserAttachment:BastionhostUserAttachment":
                return new BastionhostUserAttachment(name, <any>undefined, { urn })
            case "alicloud:index/bastionhostUserGroup:BastionhostUserGroup":
                return new BastionhostUserGroup(name, <any>undefined, { urn })
            case "alicloud:index/bpStudioApplication:BpStudioApplication":
                return new BpStudioApplication(name, <any>undefined, { urn })
            case "alicloud:index/brainIndustrialPidLoop:BrainIndustrialPidLoop":
                return new BrainIndustrialPidLoop(name, <any>undefined, { urn })
            case "alicloud:index/brainIndustrialPidOrganization:BrainIndustrialPidOrganization":
                return new BrainIndustrialPidOrganization(name, <any>undefined, { urn })
            case "alicloud:index/brainIndustrialPidProject:BrainIndustrialPidProject":
                return new BrainIndustrialPidProject(name, <any>undefined, { urn })
            case "alicloud:index/casCertificate:CasCertificate":
                return new CasCertificate(name, <any>undefined, { urn })
            case "alicloud:index/cassandraBackupPlan:CassandraBackupPlan":
                return new CassandraBackupPlan(name, <any>undefined, { urn })
            case "alicloud:index/cassandraCluster:CassandraCluster":
                return new CassandraCluster(name, <any>undefined, { urn })
            case "alicloud:index/cassandraDataCenter:CassandraDataCenter":
                return new CassandraDataCenter(name, <any>undefined, { urn })
            case "alicloud:index/cddcDedicatedHost:CddcDedicatedHost":
                return new CddcDedicatedHost(name, <any>undefined, { urn })
            case "alicloud:index/cddcDedicatedHostAccount:CddcDedicatedHostAccount":
                return new CddcDedicatedHostAccount(name, <any>undefined, { urn })
            case "alicloud:index/cddcDedicatedHostGroup:CddcDedicatedHostGroup":
                return new CddcDedicatedHostGroup(name, <any>undefined, { urn })
            case "alicloud:index/cddcDedicatedPropreHost:CddcDedicatedPropreHost":
                return new CddcDedicatedPropreHost(name, <any>undefined, { urn })
            case "alicloud:index/cdnDomain:CdnDomain":
                return new CdnDomain(name, <any>undefined, { urn })
            case "alicloud:index/cdnDomainConfig:CdnDomainConfig":
                return new CdnDomainConfig(name, <any>undefined, { urn })
            case "alicloud:index/cdnDomainNew:CdnDomainNew":
                return new CdnDomainNew(name, <any>undefined, { urn })
            case "alicloud:index/cdnFcTrigger:CdnFcTrigger":
                return new CdnFcTrigger(name, <any>undefined, { urn })
            case "alicloud:index/cdnRealTimeLogDelivery:CdnRealTimeLogDelivery":
                return new CdnRealTimeLogDelivery(name, <any>undefined, { urn })
            case "alicloud:index/cenBandwidthLimit:CenBandwidthLimit":
                return new CenBandwidthLimit(name, <any>undefined, { urn })
            case "alicloud:index/cenBandwidthPackage:CenBandwidthPackage":
                return new CenBandwidthPackage(name, <any>undefined, { urn })
            case "alicloud:index/cenBandwidthPackageAttachment:CenBandwidthPackageAttachment":
                return new CenBandwidthPackageAttachment(name, <any>undefined, { urn })
            case "alicloud:index/cenChildInstanceRouteEntryToAttachment:CenChildInstanceRouteEntryToAttachment":
                return new CenChildInstanceRouteEntryToAttachment(name, <any>undefined, { urn })
            case "alicloud:index/cenFlowlog:CenFlowlog":
                return new CenFlowlog(name, <any>undefined, { urn })
            case "alicloud:index/cenInstance:CenInstance":
                return new CenInstance(name, <any>undefined, { urn })
            case "alicloud:index/cenInstanceAttachment:CenInstanceAttachment":
                return new CenInstanceAttachment(name, <any>undefined, { urn })
            case "alicloud:index/cenInstanceGrant:CenInstanceGrant":
                return new CenInstanceGrant(name, <any>undefined, { urn })
            case "alicloud:index/cenInterRegionTrafficQosPolicy:CenInterRegionTrafficQosPolicy":
                return new CenInterRegionTrafficQosPolicy(name, <any>undefined, { urn })
            case "alicloud:index/cenInterRegionTrafficQosQueue:CenInterRegionTrafficQosQueue":
                return new CenInterRegionTrafficQosQueue(name, <any>undefined, { urn })
            case "alicloud:index/cenPrivateZone:CenPrivateZone":
                return new CenPrivateZone(name, <any>undefined, { urn })
            case "alicloud:index/cenRouteEntry:CenRouteEntry":
                return new CenRouteEntry(name, <any>undefined, { urn })
            case "alicloud:index/cenRouteMap:CenRouteMap":
                return new CenRouteMap(name, <any>undefined, { urn })
            case "alicloud:index/cenRouteService:CenRouteService":
                return new CenRouteService(name, <any>undefined, { urn })
            case "alicloud:index/cenTrafficMarkingPolicy:CenTrafficMarkingPolicy":
                return new CenTrafficMarkingPolicy(name, <any>undefined, { urn })
            case "alicloud:index/cenTransitRouteTableAggregation:CenTransitRouteTableAggregation":
                return new CenTransitRouteTableAggregation(name, <any>undefined, { urn })
            case "alicloud:index/cenTransitRouter:CenTransitRouter":
                return new CenTransitRouter(name, <any>undefined, { urn })
            case "alicloud:index/cenTransitRouterCidr:CenTransitRouterCidr":
                return new CenTransitRouterCidr(name, <any>undefined, { urn })
            case "alicloud:index/cenTransitRouterEcrAttachment:CenTransitRouterEcrAttachment":
                return new CenTransitRouterEcrAttachment(name, <any>undefined, { urn })
            case "alicloud:index/cenTransitRouterGrantAttachment:CenTransitRouterGrantAttachment":
                return new CenTransitRouterGrantAttachment(name, <any>undefined, { urn })
            case "alicloud:index/cenTransitRouterMulticastDomain:CenTransitRouterMulticastDomain":
                return new CenTransitRouterMulticastDomain(name, <any>undefined, { urn })
            case "alicloud:index/cenTransitRouterMulticastDomainAssociation:CenTransitRouterMulticastDomainAssociation":
                return new CenTransitRouterMulticastDomainAssociation(name, <any>undefined, { urn })
            case "alicloud:index/cenTransitRouterMulticastDomainMember:CenTransitRouterMulticastDomainMember":
                return new CenTransitRouterMulticastDomainMember(name, <any>undefined, { urn })
            case "alicloud:index/cenTransitRouterMulticastDomainPeerMember:CenTransitRouterMulticastDomainPeerMember":
                return new CenTransitRouterMulticastDomainPeerMember(name, <any>undefined, { urn })
            case "alicloud:index/cenTransitRouterMulticastDomainSource:CenTransitRouterMulticastDomainSource":
                return new CenTransitRouterMulticastDomainSource(name, <any>undefined, { urn })
            case "alicloud:index/cenTransitRouterPeerAttachment:CenTransitRouterPeerAttachment":
                return new CenTransitRouterPeerAttachment(name, <any>undefined, { urn })
            case "alicloud:index/cenTransitRouterPrefixListAssociation:CenTransitRouterPrefixListAssociation":
                return new CenTransitRouterPrefixListAssociation(name, <any>undefined, { urn })
            case "alicloud:index/cenTransitRouterRouteEntry:CenTransitRouterRouteEntry":
                return new CenTransitRouterRouteEntry(name, <any>undefined, { urn })
            case "alicloud:index/cenTransitRouterRouteTable:CenTransitRouterRouteTable":
                return new CenTransitRouterRouteTable(name, <any>undefined, { urn })
            case "alicloud:index/cenTransitRouterRouteTableAssociation:CenTransitRouterRouteTableAssociation":
                return new CenTransitRouterRouteTableAssociation(name, <any>undefined, { urn })
            case "alicloud:index/cenTransitRouterRouteTablePropagation:CenTransitRouterRouteTablePropagation":
                return new CenTransitRouterRouteTablePropagation(name, <any>undefined, { urn })
            case "alicloud:index/cenTransitRouterVbrAttachment:CenTransitRouterVbrAttachment":
                return new CenTransitRouterVbrAttachment(name, <any>undefined, { urn })
            case "alicloud:index/cenTransitRouterVpcAttachment:CenTransitRouterVpcAttachment":
                return new CenTransitRouterVpcAttachment(name, <any>undefined, { urn })
            case "alicloud:index/cenTransitRouterVpnAttachment:CenTransitRouterVpnAttachment":
                return new CenTransitRouterVpnAttachment(name, <any>undefined, { urn })
            case "alicloud:index/cenVbrHealthCheck:CenVbrHealthCheck":
                return new CenVbrHealthCheck(name, <any>undefined, { urn })
            case "alicloud:index/chatbotPublishTask:ChatbotPublishTask":
                return new ChatbotPublishTask(name, <any>undefined, { urn })
            case "alicloud:index/clickHouseAccount:ClickHouseAccount":
                return new ClickHouseAccount(name, <any>undefined, { urn })
            case "alicloud:index/clickHouseBackupPolicy:ClickHouseBackupPolicy":
                return new ClickHouseBackupPolicy(name, <any>undefined, { urn })
            case "alicloud:index/clickHouseDbCluster:ClickHouseDbCluster":
                return new ClickHouseDbCluster(name, <any>undefined, { urn })
            case "alicloud:index/cloudConnectNetwork:CloudConnectNetwork":
                return new CloudConnectNetwork(name, <any>undefined, { urn })
            case "alicloud:index/cloudConnectNetworkAttachment:CloudConnectNetworkAttachment":
                return new CloudConnectNetworkAttachment(name, <any>undefined, { urn })
            case "alicloud:index/cloudConnectNetworkGrant:CloudConnectNetworkGrant":
                return new CloudConnectNetworkGrant(name, <any>undefined, { urn })
            case "alicloud:index/cloudFirewallAddressBook:CloudFirewallAddressBook":
                return new CloudFirewallAddressBook(name, <any>undefined, { urn })
            case "alicloud:index/cloudFirewallControlPolicy:CloudFirewallControlPolicy":
                return new CloudFirewallControlPolicy(name, <any>undefined, { urn })
            case "alicloud:index/cloudFirewallControlPolicyOrder:CloudFirewallControlPolicyOrder":
                return new CloudFirewallControlPolicyOrder(name, <any>undefined, { urn })
            case "alicloud:index/cloudFirewallInstance:CloudFirewallInstance":
                return new CloudFirewallInstance(name, <any>undefined, { urn })
            case "alicloud:index/cloudFirewallInstanceMember:CloudFirewallInstanceMember":
                return new CloudFirewallInstanceMember(name, <any>undefined, { urn })
            case "alicloud:index/cloudFirewallNatFirewall:CloudFirewallNatFirewall":
                return new CloudFirewallNatFirewall(name, <any>undefined, { urn })
            case "alicloud:index/cloudFirewallNatFirewallControlPolicy:CloudFirewallNatFirewallControlPolicy":
                return new CloudFirewallNatFirewallControlPolicy(name, <any>undefined, { urn })
            case "alicloud:index/cloudFirewallVpcCenTrFirewall:CloudFirewallVpcCenTrFirewall":
                return new CloudFirewallVpcCenTrFirewall(name, <any>undefined, { urn })
            case "alicloud:index/cloudFirewallVpcFirewall:CloudFirewallVpcFirewall":
                return new CloudFirewallVpcFirewall(name, <any>undefined, { urn })
            case "alicloud:index/cloudFirewallVpcFirewallCen:CloudFirewallVpcFirewallCen":
                return new CloudFirewallVpcFirewallCen(name, <any>undefined, { urn })
            case "alicloud:index/cloudFirewallVpcFirewallControlPolicy:CloudFirewallVpcFirewallControlPolicy":
                return new CloudFirewallVpcFirewallControlPolicy(name, <any>undefined, { urn })
            case "alicloud:index/cloudMonitorServiceBasicPublic:CloudMonitorServiceBasicPublic":
                return new CloudMonitorServiceBasicPublic(name, <any>undefined, { urn })
            case "alicloud:index/cloudMonitorServiceEnterprisePublic:CloudMonitorServiceEnterprisePublic":
                return new CloudMonitorServiceEnterprisePublic(name, <any>undefined, { urn })
            case "alicloud:index/cloudMonitorServiceGroupMonitoringAgentProcess:CloudMonitorServiceGroupMonitoringAgentProcess":
                return new CloudMonitorServiceGroupMonitoringAgentProcess(name, <any>undefined, { urn })
            case "alicloud:index/cloudMonitorServiceHybridDoubleWrite:CloudMonitorServiceHybridDoubleWrite":
                return new CloudMonitorServiceHybridDoubleWrite(name, <any>undefined, { urn })
            case "alicloud:index/cloudMonitorServiceMonitoringAgentProcess:CloudMonitorServiceMonitoringAgentProcess":
                return new CloudMonitorServiceMonitoringAgentProcess(name, <any>undefined, { urn })
            case "alicloud:index/cloudSsoAccessAssignment:CloudSsoAccessAssignment":
                return new CloudSsoAccessAssignment(name, <any>undefined, { urn })
            case "alicloud:index/cloudSsoAccessConfiguration:CloudSsoAccessConfiguration":
                return new CloudSsoAccessConfiguration(name, <any>undefined, { urn })
            case "alicloud:index/cloudSsoAccessConfigurationProvisioning:CloudSsoAccessConfigurationProvisioning":
                return new CloudSsoAccessConfigurationProvisioning(name, <any>undefined, { urn })
            case "alicloud:index/cloudSsoDirectory:CloudSsoDirectory":
                return new CloudSsoDirectory(name, <any>undefined, { urn })
            case "alicloud:index/cloudSsoGroup:CloudSsoGroup":
                return new CloudSsoGroup(name, <any>undefined, { urn })
            case "alicloud:index/cloudSsoScimServerCredential:CloudSsoScimServerCredential":
                return new CloudSsoScimServerCredential(name, <any>undefined, { urn })
            case "alicloud:index/cloudSsoUser:CloudSsoUser":
                return new CloudSsoUser(name, <any>undefined, { urn })
            case "alicloud:index/cloudSsoUserAttachment:CloudSsoUserAttachment":
                return new CloudSsoUserAttachment(name, <any>undefined, { urn })
            case "alicloud:index/cloudStorageGatewayExpressSync:CloudStorageGatewayExpressSync":
                return new CloudStorageGatewayExpressSync(name, <any>undefined, { urn })
            case "alicloud:index/cloudStorageGatewayExpressSyncShareAttachment:CloudStorageGatewayExpressSyncShareAttachment":
                return new CloudStorageGatewayExpressSyncShareAttachment(name, <any>undefined, { urn })
            case "alicloud:index/cloudStorageGatewayGateway:CloudStorageGatewayGateway":
                return new CloudStorageGatewayGateway(name, <any>undefined, { urn })
            case "alicloud:index/cloudStorageGatewayGatewayBlockVolume:CloudStorageGatewayGatewayBlockVolume":
                return new CloudStorageGatewayGatewayBlockVolume(name, <any>undefined, { urn })
            case "alicloud:index/cloudStorageGatewayGatewayCacheDisk:CloudStorageGatewayGatewayCacheDisk":
                return new CloudStorageGatewayGatewayCacheDisk(name, <any>undefined, { urn })
            case "alicloud:index/cloudStorageGatewayGatewayFileShare:CloudStorageGatewayGatewayFileShare":
                return new CloudStorageGatewayGatewayFileShare(name, <any>undefined, { urn })
            case "alicloud:index/cloudStorageGatewayGatewayLogging:CloudStorageGatewayGatewayLogging":
                return new CloudStorageGatewayGatewayLogging(name, <any>undefined, { urn })
            case "alicloud:index/cloudStorageGatewayGatewaySmbUser:CloudStorageGatewayGatewaySmbUser":
                return new CloudStorageGatewayGatewaySmbUser(name, <any>undefined, { urn })
            case "alicloud:index/cloudStorageGatewayStorageBundle:CloudStorageGatewayStorageBundle":
                return new CloudStorageGatewayStorageBundle(name, <any>undefined, { urn })
            case "alicloud:index/cloudauthFaceConfig:CloudauthFaceConfig":
                return new CloudauthFaceConfig(name, <any>undefined, { urn })
            case "alicloud:index/cmsAlarm:CmsAlarm":
                return new CmsAlarm(name, <any>undefined, { urn })
            case "alicloud:index/cmsAlarmContact:CmsAlarmContact":
                return new CmsAlarmContact(name, <any>undefined, { urn })
            case "alicloud:index/cmsAlarmContactGroup:CmsAlarmContactGroup":
                return new CmsAlarmContactGroup(name, <any>undefined, { urn })
            case "alicloud:index/cmsDynamicTagGroup:CmsDynamicTagGroup":
                return new CmsDynamicTagGroup(name, <any>undefined, { urn })
            case "alicloud:index/cmsEventRule:CmsEventRule":
                return new CmsEventRule(name, <any>undefined, { urn })
            case "alicloud:index/cmsGroupMetricRule:CmsGroupMetricRule":
                return new CmsGroupMetricRule(name, <any>undefined, { urn })
            case "alicloud:index/cmsHybridMonitorFcTask:CmsHybridMonitorFcTask":
                return new CmsHybridMonitorFcTask(name, <any>undefined, { urn })
            case "alicloud:index/cmsHybridMonitorSlsTask:CmsHybridMonitorSlsTask":
                return new CmsHybridMonitorSlsTask(name, <any>undefined, { urn })
            case "alicloud:index/cmsMetricRuleBlackList:CmsMetricRuleBlackList":
                return new CmsMetricRuleBlackList(name, <any>undefined, { urn })
            case "alicloud:index/cmsMetricRuleTemplate:CmsMetricRuleTemplate":
                return new CmsMetricRuleTemplate(name, <any>undefined, { urn })
            case "alicloud:index/cmsMonitorGroup:CmsMonitorGroup":
                return new CmsMonitorGroup(name, <any>undefined, { urn })
            case "alicloud:index/cmsMonitorGroupInstances:CmsMonitorGroupInstances":
                return new CmsMonitorGroupInstances(name, <any>undefined, { urn })
            case "alicloud:index/cmsNamespace:CmsNamespace":
                return new CmsNamespace(name, <any>undefined, { urn })
            case "alicloud:index/cmsSiteMonitor:CmsSiteMonitor":
                return new CmsSiteMonitor(name, <any>undefined, { urn })
            case "alicloud:index/cmsSlsGroup:CmsSlsGroup":
                return new CmsSlsGroup(name, <any>undefined, { urn })
            case "alicloud:index/commonBandwidthPackage:CommonBandwidthPackage":
                return new CommonBandwidthPackage(name, <any>undefined, { urn })
            case "alicloud:index/commonBandwidthPackageAttachment:CommonBandwidthPackageAttachment":
                return new CommonBandwidthPackageAttachment(name, <any>undefined, { urn })
            case "alicloud:index/computeNestServiceInstance:ComputeNestServiceInstance":
                return new ComputeNestServiceInstance(name, <any>undefined, { urn })
            case "alicloud:index/configAggregateCompliancePack:ConfigAggregateCompliancePack":
                return new ConfigAggregateCompliancePack(name, <any>undefined, { urn })
            case "alicloud:index/configAggregateConfigRule:ConfigAggregateConfigRule":
                return new ConfigAggregateConfigRule(name, <any>undefined, { urn })
            case "alicloud:index/configAggregateDelivery:ConfigAggregateDelivery":
                return new ConfigAggregateDelivery(name, <any>undefined, { urn })
            case "alicloud:index/configAggregator:ConfigAggregator":
                return new ConfigAggregator(name, <any>undefined, { urn })
            case "alicloud:index/configCompliancePack:ConfigCompliancePack":
                return new ConfigCompliancePack(name, <any>undefined, { urn })
            case "alicloud:index/configConfigurationRecorder:ConfigConfigurationRecorder":
                return new ConfigConfigurationRecorder(name, <any>undefined, { urn })
            case "alicloud:index/configDelivery:ConfigDelivery":
                return new ConfigDelivery(name, <any>undefined, { urn })
            case "alicloud:index/configDeliveryChannel:ConfigDeliveryChannel":
                return new ConfigDeliveryChannel(name, <any>undefined, { urn })
            case "alicloud:index/configRemediation:ConfigRemediation":
                return new ConfigRemediation(name, <any>undefined, { urn })
            case "alicloud:index/configRule:ConfigRule":
                return new ConfigRule(name, <any>undefined, { urn })
            case "alicloud:index/containerCluster:ContainerCluster":
                return new ContainerCluster(name, <any>undefined, { urn })
            case "alicloud:index/copyImage:CopyImage":
                return new CopyImage(name, <any>undefined, { urn })
            case "alicloud:index/crChain:CrChain":
                return new CrChain(name, <any>undefined, { urn })
            case "alicloud:index/crChartNamespace:CrChartNamespace":
                return new CrChartNamespace(name, <any>undefined, { urn })
            case "alicloud:index/crChartRepository:CrChartRepository":
                return new CrChartRepository(name, <any>undefined, { urn })
            case "alicloud:index/crEeInstance:CrEeInstance":
                return new CrEeInstance(name, <any>undefined, { urn })
            case "alicloud:index/crEeNamespace:CrEeNamespace":
                return new CrEeNamespace(name, <any>undefined, { urn })
            case "alicloud:index/crEeRepo:CrEeRepo":
                return new CrEeRepo(name, <any>undefined, { urn })
            case "alicloud:index/crEeSyncRule:CrEeSyncRule":
                return new CrEeSyncRule(name, <any>undefined, { urn })
            case "alicloud:index/crEndpointAclPolicy:CrEndpointAclPolicy":
                return new CrEndpointAclPolicy(name, <any>undefined, { urn })
            case "alicloud:index/crNamespace:CrNamespace":
                return new CrNamespace(name, <any>undefined, { urn })
            case "alicloud:index/crRepo:CrRepo":
                return new CrRepo(name, <any>undefined, { urn })
            case "alicloud:index/crVpcEndpointLinkedVpc:CrVpcEndpointLinkedVpc":
                return new CrVpcEndpointLinkedVpc(name, <any>undefined, { urn })
            case "alicloud:index/csApplication:CsApplication":
                return new CsApplication(name, <any>undefined, { urn })
            case "alicloud:index/csAutoscalingConfig:CsAutoscalingConfig":
                return new CsAutoscalingConfig(name, <any>undefined, { urn })
            case "alicloud:index/csEdgeKubernetes:CsEdgeKubernetes":
                return new CsEdgeKubernetes(name, <any>undefined, { urn })
            case "alicloud:index/csKubernetes:CsKubernetes":
                return new CsKubernetes(name, <any>undefined, { urn })
            case "alicloud:index/csKubernetesAddon:CsKubernetesAddon":
                return new CsKubernetesAddon(name, <any>undefined, { urn })
            case "alicloud:index/csKubernetesAutoscaler:CsKubernetesAutoscaler":
                return new CsKubernetesAutoscaler(name, <any>undefined, { urn })
            case "alicloud:index/csKubernetesNodePool:CsKubernetesNodePool":
                return new CsKubernetesNodePool(name, <any>undefined, { urn })
            case "alicloud:index/csKubernetesPermissions:CsKubernetesPermissions":
                return new CsKubernetesPermissions(name, <any>undefined, { urn })
            case "alicloud:index/csManagedKubernetes:CsManagedKubernetes":
                return new CsManagedKubernetes(name, <any>undefined, { urn })
            case "alicloud:index/csServerlessKubernetes:CsServerlessKubernetes":
                return new CsServerlessKubernetes(name, <any>undefined, { urn })
            case "alicloud:index/csSwarm:CsSwarm":
                return new CsSwarm(name, <any>undefined, { urn })
            case "alicloud:index/dasSwitchDasPro:DasSwitchDasPro":
                return new DasSwitchDasPro(name, <any>undefined, { urn })
            case "alicloud:index/dataWorksFolder:DataWorksFolder":
                return new DataWorksFolder(name, <any>undefined, { urn })
            case "alicloud:index/dataWorksProject:DataWorksProject":
                return new DataWorksProject(name, <any>undefined, { urn })
            case "alicloud:index/databaseGatewayGateway:DatabaseGatewayGateway":
                return new DatabaseGatewayGateway(name, <any>undefined, { urn })
            case "alicloud:index/datahubProject:DatahubProject":
                return new DatahubProject(name, <any>undefined, { urn })
            case "alicloud:index/datahubSubscription:DatahubSubscription":
                return new DatahubSubscription(name, <any>undefined, { urn })
            case "alicloud:index/datahubTopic:DatahubTopic":
                return new DatahubTopic(name, <any>undefined, { urn })
            case "alicloud:index/dbAccount:DbAccount":
                return new DbAccount(name, <any>undefined, { urn })
            case "alicloud:index/dbAccountPrivilege:DbAccountPrivilege":
                return new DbAccountPrivilege(name, <any>undefined, { urn })
            case "alicloud:index/dbBackupPolicy:DbBackupPolicy":
                return new DbBackupPolicy(name, <any>undefined, { urn })
            case "alicloud:index/dbConnection:DbConnection":
                return new DbConnection(name, <any>undefined, { urn })
            case "alicloud:index/dbDatabase:DbDatabase":
                return new DbDatabase(name, <any>undefined, { urn })
            case "alicloud:index/dbInstance:DbInstance":
                return new DbInstance(name, <any>undefined, { urn })
            case "alicloud:index/dbReadWriteSplittingConnection:DbReadWriteSplittingConnection":
                return new DbReadWriteSplittingConnection(name, <any>undefined, { urn })
            case "alicloud:index/dbReadonlyInstance:DbReadonlyInstance":
                return new DbReadonlyInstance(name, <any>undefined, { urn })
            case "alicloud:index/dbfsAutoSnapShotPolicy:DbfsAutoSnapShotPolicy":
                return new DbfsAutoSnapShotPolicy(name, <any>undefined, { urn })
            case "alicloud:index/dbfsInstance:DbfsInstance":
                return new DbfsInstance(name, <any>undefined, { urn })
            case "alicloud:index/dbfsInstanceAttachment:DbfsInstanceAttachment":
                return new DbfsInstanceAttachment(name, <any>undefined, { urn })
            case "alicloud:index/dbfsServiceLinkedRole:DbfsServiceLinkedRole":
                return new DbfsServiceLinkedRole(name, <any>undefined, { urn })
            case "alicloud:index/dbfsSnapshot:DbfsSnapshot":
                return new DbfsSnapshot(name, <any>undefined, { urn })
            case "alicloud:index/dbsBackupPlan:DbsBackupPlan":
                return new DbsBackupPlan(name, <any>undefined, { urn })
            case "alicloud:index/dcdnDomain:DcdnDomain":
                return new DcdnDomain(name, <any>undefined, { urn })
            case "alicloud:index/dcdnDomainConfig:DcdnDomainConfig":
                return new DcdnDomainConfig(name, <any>undefined, { urn })
            case "alicloud:index/dcdnEr:DcdnEr":
                return new DcdnEr(name, <any>undefined, { urn })
            case "alicloud:index/dcdnIpaDomain:DcdnIpaDomain":
                return new DcdnIpaDomain(name, <any>undefined, { urn })
            case "alicloud:index/dcdnKv:DcdnKv":
                return new DcdnKv(name, <any>undefined, { urn })
            case "alicloud:index/dcdnKvNamespace:DcdnKvNamespace":
                return new DcdnKvNamespace(name, <any>undefined, { urn })
            case "alicloud:index/dcdnWafDomain:DcdnWafDomain":
                return new DcdnWafDomain(name, <any>undefined, { urn })
            case "alicloud:index/dcdnWafPolicy:DcdnWafPolicy":
                return new DcdnWafPolicy(name, <any>undefined, { urn })
            case "alicloud:index/dcdnWafPolicyDomainAttachment:DcdnWafPolicyDomainAttachment":
                return new DcdnWafPolicyDomainAttachment(name, <any>undefined, { urn })
            case "alicloud:index/dcdnWafRule:DcdnWafRule":
                return new DcdnWafRule(name, <any>undefined, { urn })
            case "alicloud:index/ddosBasicDefenseThreshold:DdosBasicDefenseThreshold":
                return new DdosBasicDefenseThreshold(name, <any>undefined, { urn })
            case "alicloud:index/ddosBasicThreshold:DdosBasicThreshold":
                return new DdosBasicThreshold(name, <any>undefined, { urn })
            case "alicloud:index/ddosBgpPolicy:DdosBgpPolicy":
                return new DdosBgpPolicy(name, <any>undefined, { urn })
            case "alicloud:index/ddosbgpInstance:DdosbgpInstance":
                return new DdosbgpInstance(name, <any>undefined, { urn })
            case "alicloud:index/ddosbgpIp:DdosbgpIp":
                return new DdosbgpIp(name, <any>undefined, { urn })
            case "alicloud:index/ddoscooDomainResource:DdoscooDomainResource":
                return new DdoscooDomainResource(name, <any>undefined, { urn })
            case "alicloud:index/ddoscooInstance:DdoscooInstance":
                return new DdoscooInstance(name, <any>undefined, { urn })
            case "alicloud:index/ddoscooPort:DdoscooPort":
                return new DdoscooPort(name, <any>undefined, { urn })
            case "alicloud:index/ddoscooSchedulerRule:DdoscooSchedulerRule":
                return new DdoscooSchedulerRule(name, <any>undefined, { urn })
            case "alicloud:index/dfsAccessGroup:DfsAccessGroup":
                return new DfsAccessGroup(name, <any>undefined, { urn })
            case "alicloud:index/dfsAccessRule:DfsAccessRule":
                return new DfsAccessRule(name, <any>undefined, { urn })
            case "alicloud:index/dfsFileSystem:DfsFileSystem":
                return new DfsFileSystem(name, <any>undefined, { urn })
            case "alicloud:index/dfsMountPoint:DfsMountPoint":
                return new DfsMountPoint(name, <any>undefined, { urn })
            case "alicloud:index/dfsVscMountPoint:DfsVscMountPoint":
                return new DfsVscMountPoint(name, <any>undefined, { urn })
            case "alicloud:index/directMailDomain:DirectMailDomain":
                return new DirectMailDomain(name, <any>undefined, { urn })
            case "alicloud:index/directMailMailAddress:DirectMailMailAddress":
                return new DirectMailMailAddress(name, <any>undefined, { urn })
            case "alicloud:index/directMailReceivers:DirectMailReceivers":
                return new DirectMailReceivers(name, <any>undefined, { urn })
            case "alicloud:index/directMailTag:DirectMailTag":
                return new DirectMailTag(name, <any>undefined, { urn })
            case "alicloud:index/disk:Disk":
                return new Disk(name, <any>undefined, { urn })
            case "alicloud:index/diskAttachment:DiskAttachment":
                return new DiskAttachment(name, <any>undefined, { urn })
            case "alicloud:index/dmsEnterpriseAuthorityTemplate:DmsEnterpriseAuthorityTemplate":
                return new DmsEnterpriseAuthorityTemplate(name, <any>undefined, { urn })
            case "alicloud:index/dmsEnterpriseInstance:DmsEnterpriseInstance":
                return new DmsEnterpriseInstance(name, <any>undefined, { urn })
            case "alicloud:index/dmsEnterpriseLogicDatabase:DmsEnterpriseLogicDatabase":
                return new DmsEnterpriseLogicDatabase(name, <any>undefined, { urn })
            case "alicloud:index/dmsEnterpriseProxy:DmsEnterpriseProxy":
                return new DmsEnterpriseProxy(name, <any>undefined, { urn })
            case "alicloud:index/dmsEnterpriseProxyAccess:DmsEnterpriseProxyAccess":
                return new DmsEnterpriseProxyAccess(name, <any>undefined, { urn })
            case "alicloud:index/dmsEnterpriseUser:DmsEnterpriseUser":
                return new DmsEnterpriseUser(name, <any>undefined, { urn })
            case "alicloud:index/dns:Dns":
                return new Dns(name, <any>undefined, { urn })
            case "alicloud:index/dnsDomain:DnsDomain":
                return new DnsDomain(name, <any>undefined, { urn })
            case "alicloud:index/dnsDomainAttachment:DnsDomainAttachment":
                return new DnsDomainAttachment(name, <any>undefined, { urn })
            case "alicloud:index/dnsGroup:DnsGroup":
                return new DnsGroup(name, <any>undefined, { urn })
            case "alicloud:index/dnsInstance:DnsInstance":
                return new DnsInstance(name, <any>undefined, { urn })
            case "alicloud:index/dnsRecord:DnsRecord":
                return new DnsRecord(name, <any>undefined, { urn })
            case "alicloud:index/drdsInstance:DrdsInstance":
                return new DrdsInstance(name, <any>undefined, { urn })
            case "alicloud:index/drdsPolardbxInstance:DrdsPolardbxInstance":
                return new DrdsPolardbxInstance(name, <any>undefined, { urn })
            case "alicloud:index/dtsConsumerChannel:DtsConsumerChannel":
                return new DtsConsumerChannel(name, <any>undefined, { urn })
            case "alicloud:index/dtsInstance:DtsInstance":
                return new DtsInstance(name, <any>undefined, { urn })
            case "alicloud:index/dtsJobMonitorRule:DtsJobMonitorRule":
                return new DtsJobMonitorRule(name, <any>undefined, { urn })
            case "alicloud:index/dtsMigrationInstance:DtsMigrationInstance":
                return new DtsMigrationInstance(name, <any>undefined, { urn })
            case "alicloud:index/dtsMigrationJob:DtsMigrationJob":
                return new DtsMigrationJob(name, <any>undefined, { urn })
            case "alicloud:index/dtsSubscriptionJob:DtsSubscriptionJob":
                return new DtsSubscriptionJob(name, <any>undefined, { urn })
            case "alicloud:index/dtsSynchronizationInstance:DtsSynchronizationInstance":
                return new DtsSynchronizationInstance(name, <any>undefined, { urn })
            case "alicloud:index/dtsSynchronizationJob:DtsSynchronizationJob":
                return new DtsSynchronizationJob(name, <any>undefined, { urn })
            case "alicloud:index/eaisInstance:EaisInstance":
                return new EaisInstance(name, <any>undefined, { urn })
            case "alicloud:index/ebsDedicatedBlockStorageCluster:EbsDedicatedBlockStorageCluster":
                return new EbsDedicatedBlockStorageCluster(name, <any>undefined, { urn })
            case "alicloud:index/ebsDiskReplicaGroup:EbsDiskReplicaGroup":
                return new EbsDiskReplicaGroup(name, <any>undefined, { urn })
            case "alicloud:index/ebsDiskReplicaPair:EbsDiskReplicaPair":
                return new EbsDiskReplicaPair(name, <any>undefined, { urn })
            case "alicloud:index/ebsEnterpriseSnapshotPolicy:EbsEnterpriseSnapshotPolicy":
                return new EbsEnterpriseSnapshotPolicy(name, <any>undefined, { urn })
            case "alicloud:index/ebsEnterpriseSnapshotPolicyAttachment:EbsEnterpriseSnapshotPolicyAttachment":
                return new EbsEnterpriseSnapshotPolicyAttachment(name, <any>undefined, { urn })
            case "alicloud:index/ebsReplicaGroupDrill:EbsReplicaGroupDrill":
                return new EbsReplicaGroupDrill(name, <any>undefined, { urn })
            case "alicloud:index/ebsReplicaPairDrill:EbsReplicaPairDrill":
                return new EbsReplicaPairDrill(name, <any>undefined, { urn })
            case "alicloud:index/ebsSolutionInstance:EbsSolutionInstance":
                return new EbsSolutionInstance(name, <any>undefined, { urn })
            case "alicloud:index/ecdAdConnectorDirectory:EcdAdConnectorDirectory":
                return new EcdAdConnectorDirectory(name, <any>undefined, { urn })
            case "alicloud:index/ecdAdConnectorOfficeSite:EcdAdConnectorOfficeSite":
                return new EcdAdConnectorOfficeSite(name, <any>undefined, { urn })
            case "alicloud:index/ecdBundle:EcdBundle":
                return new EcdBundle(name, <any>undefined, { urn })
            case "alicloud:index/ecdCommand:EcdCommand":
                return new EcdCommand(name, <any>undefined, { urn })
            case "alicloud:index/ecdCustomProperty:EcdCustomProperty":
                return new EcdCustomProperty(name, <any>undefined, { urn })
            case "alicloud:index/ecdDesktop:EcdDesktop":
                return new EcdDesktop(name, <any>undefined, { urn })
            case "alicloud:index/ecdImage:EcdImage":
                return new EcdImage(name, <any>undefined, { urn })
            case "alicloud:index/ecdNasFileSystem:EcdNasFileSystem":
                return new EcdNasFileSystem(name, <any>undefined, { urn })
            case "alicloud:index/ecdNetworkPackage:EcdNetworkPackage":
                return new EcdNetworkPackage(name, <any>undefined, { urn })
            case "alicloud:index/ecdPolicyGroup:EcdPolicyGroup":
                return new EcdPolicyGroup(name, <any>undefined, { urn })
            case "alicloud:index/ecdRamDirectory:EcdRamDirectory":
                return new EcdRamDirectory(name, <any>undefined, { urn })
            case "alicloud:index/ecdSimpleOfficeSite:EcdSimpleOfficeSite":
                return new EcdSimpleOfficeSite(name, <any>undefined, { urn })
            case "alicloud:index/ecdSnapshot:EcdSnapshot":
                return new EcdSnapshot(name, <any>undefined, { urn })
            case "alicloud:index/ecdUser:EcdUser":
                return new EcdUser(name, <any>undefined, { urn })
            case "alicloud:index/eciContainerGroup:EciContainerGroup":
                return new EciContainerGroup(name, <any>undefined, { urn })
            case "alicloud:index/eciImageCache:EciImageCache":
                return new EciImageCache(name, <any>undefined, { urn })
            case "alicloud:index/eciOpenapiImageCache:EciOpenapiImageCache":
                return new EciOpenapiImageCache(name, <any>undefined, { urn })
            case "alicloud:index/eciVirtualNode:EciVirtualNode":
                return new EciVirtualNode(name, <any>undefined, { urn })
            case "alicloud:index/ecpInstance:EcpInstance":
                return new EcpInstance(name, <any>undefined, { urn })
            case "alicloud:index/ecpKeyPair:EcpKeyPair":
                return new EcpKeyPair(name, <any>undefined, { urn })
            case "alicloud:index/ecsActivation:EcsActivation":
                return new EcsActivation(name, <any>undefined, { urn })
            case "alicloud:index/ecsAutoSnapshotPolicy:EcsAutoSnapshotPolicy":
                return new EcsAutoSnapshotPolicy(name, <any>undefined, { urn })
            case "alicloud:index/ecsAutoSnapshotPolicyAttachment:EcsAutoSnapshotPolicyAttachment":
                return new EcsAutoSnapshotPolicyAttachment(name, <any>undefined, { urn })
            case "alicloud:index/ecsCapacityReservation:EcsCapacityReservation":
                return new EcsCapacityReservation(name, <any>undefined, { urn })
            case "alicloud:index/ecsCommand:EcsCommand":
                return new EcsCommand(name, <any>undefined, { urn })
            case "alicloud:index/ecsDedicatedHost:EcsDedicatedHost":
                return new EcsDedicatedHost(name, <any>undefined, { urn })
            case "alicloud:index/ecsDedicatedHostCluster:EcsDedicatedHostCluster":
                return new EcsDedicatedHostCluster(name, <any>undefined, { urn })
            case "alicloud:index/ecsDeploymentSet:EcsDeploymentSet":
                return new EcsDeploymentSet(name, <any>undefined, { urn })
            case "alicloud:index/ecsDisk:EcsDisk":
                return new EcsDisk(name, <any>undefined, { urn })
            case "alicloud:index/ecsDiskAttachment:EcsDiskAttachment":
                return new EcsDiskAttachment(name, <any>undefined, { urn })
            case "alicloud:index/ecsElasticityAssurance:EcsElasticityAssurance":
                return new EcsElasticityAssurance(name, <any>undefined, { urn })
            case "alicloud:index/ecsHpcCluster:EcsHpcCluster":
                return new EcsHpcCluster(name, <any>undefined, { urn })
            case "alicloud:index/ecsImageComponent:EcsImageComponent":
                return new EcsImageComponent(name, <any>undefined, { urn })
            case "alicloud:index/ecsImagePipeline:EcsImagePipeline":
                return new EcsImagePipeline(name, <any>undefined, { urn })
            case "alicloud:index/ecsInstanceSet:EcsInstanceSet":
                return new EcsInstanceSet(name, <any>undefined, { urn })
            case "alicloud:index/ecsInvocation:EcsInvocation":
                return new EcsInvocation(name, <any>undefined, { urn })
            case "alicloud:index/ecsKeyPair:EcsKeyPair":
                return new EcsKeyPair(name, <any>undefined, { urn })
            case "alicloud:index/ecsKeyPairAttachment:EcsKeyPairAttachment":
                return new EcsKeyPairAttachment(name, <any>undefined, { urn })
            case "alicloud:index/ecsLaunchTemplate:EcsLaunchTemplate":
                return new EcsLaunchTemplate(name, <any>undefined, { urn })
            case "alicloud:index/ecsNetworkInterface:EcsNetworkInterface":
                return new EcsNetworkInterface(name, <any>undefined, { urn })
            case "alicloud:index/ecsNetworkInterfaceAttachment:EcsNetworkInterfaceAttachment":
                return new EcsNetworkInterfaceAttachment(name, <any>undefined, { urn })
            case "alicloud:index/ecsNetworkInterfacePermission:EcsNetworkInterfacePermission":
                return new EcsNetworkInterfacePermission(name, <any>undefined, { urn })
            case "alicloud:index/ecsPrefixList:EcsPrefixList":
                return new EcsPrefixList(name, <any>undefined, { urn })
            case "alicloud:index/ecsSessionManagerStatus:EcsSessionManagerStatus":
                return new EcsSessionManagerStatus(name, <any>undefined, { urn })
            case "alicloud:index/ecsSnapshot:EcsSnapshot":
                return new EcsSnapshot(name, <any>undefined, { urn })
            case "alicloud:index/ecsSnapshotGroup:EcsSnapshotGroup":
                return new EcsSnapshotGroup(name, <any>undefined, { urn })
            case "alicloud:index/ecsStorageCapacityUnit:EcsStorageCapacityUnit":
                return new EcsStorageCapacityUnit(name, <any>undefined, { urn })
            case "alicloud:index/edasApplication:EdasApplication":
                return new EdasApplication(name, <any>undefined, { urn })
            case "alicloud:index/edasApplicationDeployment:EdasApplicationDeployment":
                return new EdasApplicationDeployment(name, <any>undefined, { urn })
            case "alicloud:index/edasApplicationScale:EdasApplicationScale":
                return new EdasApplicationScale(name, <any>undefined, { urn })
            case "alicloud:index/edasCluster:EdasCluster":
                return new EdasCluster(name, <any>undefined, { urn })
            case "alicloud:index/edasDeployGroup:EdasDeployGroup":
                return new EdasDeployGroup(name, <any>undefined, { urn })
            case "alicloud:index/edasInstanceClusterAttachment:EdasInstanceClusterAttachment":
                return new EdasInstanceClusterAttachment(name, <any>undefined, { urn })
            case "alicloud:index/edasK8sApplication:EdasK8sApplication":
                return new EdasK8sApplication(name, <any>undefined, { urn })
            case "alicloud:index/edasK8sCluster:EdasK8sCluster":
                return new EdasK8sCluster(name, <any>undefined, { urn })
            case "alicloud:index/edasK8sSlbAttachment:EdasK8sSlbAttachment":
                return new EdasK8sSlbAttachment(name, <any>undefined, { urn })
            case "alicloud:index/edasNamespace:EdasNamespace":
                return new EdasNamespace(name, <any>undefined, { urn })
            case "alicloud:index/edasSlbAttachment:EdasSlbAttachment":
                return new EdasSlbAttachment(name, <any>undefined, { urn })
            case "alicloud:index/efloSubnet:EfloSubnet":
                return new EfloSubnet(name, <any>undefined, { urn })
            case "alicloud:index/efloVpd:EfloVpd":
                return new EfloVpd(name, <any>undefined, { urn })
            case "alicloud:index/ehpcCluster:EhpcCluster":
                return new EhpcCluster(name, <any>undefined, { urn })
            case "alicloud:index/ehpcJobTemplate:EhpcJobTemplate":
                return new EhpcJobTemplate(name, <any>undefined, { urn })
            case "alicloud:index/eip:Eip":
                return new Eip(name, <any>undefined, { urn })
            case "alicloud:index/eipAddress:EipAddress":
                return new EipAddress(name, <any>undefined, { urn })
            case "alicloud:index/eipAssociation:EipAssociation":
                return new EipAssociation(name, <any>undefined, { urn })
            case "alicloud:index/eipSegmentAddress:EipSegmentAddress":
                return new EipSegmentAddress(name, <any>undefined, { urn })
            case "alicloud:index/eipanycastAnycastEipAddress:EipanycastAnycastEipAddress":
                return new EipanycastAnycastEipAddress(name, <any>undefined, { urn })
            case "alicloud:index/eipanycastAnycastEipAddressAttachment:EipanycastAnycastEipAddressAttachment":
                return new EipanycastAnycastEipAddressAttachment(name, <any>undefined, { urn })
            case "alicloud:index/elasticsearchInstance:ElasticsearchInstance":
                return new ElasticsearchInstance(name, <any>undefined, { urn })
            case "alicloud:index/emrCluster:EmrCluster":
                return new EmrCluster(name, <any>undefined, { urn })
            case "alicloud:index/emrv2Cluster:Emrv2Cluster":
                return new Emrv2Cluster(name, <any>undefined, { urn })
            case "alicloud:index/ensDisk:EnsDisk":
                return new EnsDisk(name, <any>undefined, { urn })
            case "alicloud:index/ensDiskInstanceAttachment:EnsDiskInstanceAttachment":
                return new EnsDiskInstanceAttachment(name, <any>undefined, { urn })
            case "alicloud:index/ensEip:EnsEip":
                return new EnsEip(name, <any>undefined, { urn })
            case "alicloud:index/ensEipInstanceAttachment:EnsEipInstanceAttachment":
                return new EnsEipInstanceAttachment(name, <any>undefined, { urn })
            case "alicloud:index/ensImage:EnsImage":
                return new EnsImage(name, <any>undefined, { urn })
            case "alicloud:index/ensInstance:EnsInstance":
                return new EnsInstance(name, <any>undefined, { urn })
            case "alicloud:index/ensInstanceSecurityGroupAttachment:EnsInstanceSecurityGroupAttachment":
                return new EnsInstanceSecurityGroupAttachment(name, <any>undefined, { urn })
            case "alicloud:index/ensKeyPair:EnsKeyPair":
                return new EnsKeyPair(name, <any>undefined, { urn })
            case "alicloud:index/ensLoadBalancer:EnsLoadBalancer":
                return new EnsLoadBalancer(name, <any>undefined, { urn })
            case "alicloud:index/ensNatGateway:EnsNatGateway":
                return new EnsNatGateway(name, <any>undefined, { urn })
            case "alicloud:index/ensNetwork:EnsNetwork":
                return new EnsNetwork(name, <any>undefined, { urn })
            case "alicloud:index/ensSecurityGroup:EnsSecurityGroup":
                return new EnsSecurityGroup(name, <any>undefined, { urn })
            case "alicloud:index/ensSnapshot:EnsSnapshot":
                return new EnsSnapshot(name, <any>undefined, { urn })
            case "alicloud:index/ensVswitch:EnsVswitch":
                return new EnsVswitch(name, <any>undefined, { urn })
            case "alicloud:index/essAlarm:EssAlarm":
                return new EssAlarm(name, <any>undefined, { urn })
            case "alicloud:index/essAlbServerGroupAttachment:EssAlbServerGroupAttachment":
                return new EssAlbServerGroupAttachment(name, <any>undefined, { urn })
            case "alicloud:index/essAttachment:EssAttachment":
                return new EssAttachment(name, <any>undefined, { urn })
            case "alicloud:index/essEciScalingConfiguration:EssEciScalingConfiguration":
                return new EssEciScalingConfiguration(name, <any>undefined, { urn })
            case "alicloud:index/essLifecycleHook:EssLifecycleHook":
                return new EssLifecycleHook(name, <any>undefined, { urn })
            case "alicloud:index/essNotification:EssNotification":
                return new EssNotification(name, <any>undefined, { urn })
            case "alicloud:index/essScalingConfiguration:EssScalingConfiguration":
                return new EssScalingConfiguration(name, <any>undefined, { urn })
            case "alicloud:index/essScalingGroup:EssScalingGroup":
                return new EssScalingGroup(name, <any>undefined, { urn })
            case "alicloud:index/essScalingRule:EssScalingRule":
                return new EssScalingRule(name, <any>undefined, { urn })
            case "alicloud:index/essScalinggroupVserverGroups:EssScalinggroupVserverGroups":
                return new EssScalinggroupVserverGroups(name, <any>undefined, { urn })
            case "alicloud:index/essSchedule:EssSchedule":
                return new EssSchedule(name, <any>undefined, { urn })
            case "alicloud:index/essScheduledTask:EssScheduledTask":
                return new EssScheduledTask(name, <any>undefined, { urn })
            case "alicloud:index/essSuspendProcess:EssSuspendProcess":
                return new EssSuspendProcess(name, <any>undefined, { urn })
            case "alicloud:index/eventBridgeApiDestination:EventBridgeApiDestination":
                return new EventBridgeApiDestination(name, <any>undefined, { urn })
            case "alicloud:index/eventBridgeConnection:EventBridgeConnection":
                return new EventBridgeConnection(name, <any>undefined, { urn })
            case "alicloud:index/eventBridgeEventBus:EventBridgeEventBus":
                return new EventBridgeEventBus(name, <any>undefined, { urn })
            case "alicloud:index/eventBridgeEventSource:EventBridgeEventSource":
                return new EventBridgeEventSource(name, <any>undefined, { urn })
            case "alicloud:index/eventBridgeRule:EventBridgeRule":
                return new EventBridgeRule(name, <any>undefined, { urn })
            case "alicloud:index/eventBridgeServiceLinkedRole:EventBridgeServiceLinkedRole":
                return new EventBridgeServiceLinkedRole(name, <any>undefined, { urn })
            case "alicloud:index/eventBridgeSlr:EventBridgeSlr":
                return new EventBridgeSlr(name, <any>undefined, { urn })
            case "alicloud:index/expressConnectEcFailoverTestJob:ExpressConnectEcFailoverTestJob":
                return new ExpressConnectEcFailoverTestJob(name, <any>undefined, { urn })
            case "alicloud:index/expressConnectGrantRuleToCen:ExpressConnectGrantRuleToCen":
                return new ExpressConnectGrantRuleToCen(name, <any>undefined, { urn })
            case "alicloud:index/expressConnectPhysicalConnection:ExpressConnectPhysicalConnection":
                return new ExpressConnectPhysicalConnection(name, <any>undefined, { urn })
            case "alicloud:index/expressConnectRouterExpressConnectRouter:ExpressConnectRouterExpressConnectRouter":
                return new ExpressConnectRouterExpressConnectRouter(name, <any>undefined, { urn })
            case "alicloud:index/expressConnectRouterInterface:ExpressConnectRouterInterface":
                return new ExpressConnectRouterInterface(name, <any>undefined, { urn })
            case "alicloud:index/expressConnectRouterTrAssociation:ExpressConnectRouterTrAssociation":
                return new ExpressConnectRouterTrAssociation(name, <any>undefined, { urn })
            case "alicloud:index/expressConnectRouterVbrChildInstance:ExpressConnectRouterVbrChildInstance":
                return new ExpressConnectRouterVbrChildInstance(name, <any>undefined, { urn })
            case "alicloud:index/expressConnectRouterVpcAssociation:ExpressConnectRouterVpcAssociation":
                return new ExpressConnectRouterVpcAssociation(name, <any>undefined, { urn })
            case "alicloud:index/expressConnectTrafficQos:ExpressConnectTrafficQos":
                return new ExpressConnectTrafficQos(name, <any>undefined, { urn })
            case "alicloud:index/expressConnectTrafficQosAssociation:ExpressConnectTrafficQosAssociation":
                return new ExpressConnectTrafficQosAssociation(name, <any>undefined, { urn })
            case "alicloud:index/expressConnectTrafficQosQueue:ExpressConnectTrafficQosQueue":
                return new ExpressConnectTrafficQosQueue(name, <any>undefined, { urn })
            case "alicloud:index/expressConnectTrafficQosRule:ExpressConnectTrafficQosRule":
                return new ExpressConnectTrafficQosRule(name, <any>undefined, { urn })
            case "alicloud:index/expressConnectVbrPconnAssociation:ExpressConnectVbrPconnAssociation":
                return new ExpressConnectVbrPconnAssociation(name, <any>undefined, { urn })
            case "alicloud:index/expressConnectVirtualBorderRouter:ExpressConnectVirtualBorderRouter":
                return new ExpressConnectVirtualBorderRouter(name, <any>undefined, { urn })
            case "alicloud:index/expressConnectVirtualPhysicalConnection:ExpressConnectVirtualPhysicalConnection":
                return new ExpressConnectVirtualPhysicalConnection(name, <any>undefined, { urn })
            case "alicloud:index/fcAlias:FcAlias":
                return new FcAlias(name, <any>undefined, { urn })
            case "alicloud:index/fcCustomDomain:FcCustomDomain":
                return new FcCustomDomain(name, <any>undefined, { urn })
            case "alicloud:index/fcFunction:FcFunction":
                return new FcFunction(name, <any>undefined, { urn })
            case "alicloud:index/fcFunctionAsyncInvokeConfig:FcFunctionAsyncInvokeConfig":
                return new FcFunctionAsyncInvokeConfig(name, <any>undefined, { urn })
            case "alicloud:index/fcLayerVersion:FcLayerVersion":
                return new FcLayerVersion(name, <any>undefined, { urn })
            case "alicloud:index/fcService:FcService":
                return new FcService(name, <any>undefined, { urn })
            case "alicloud:index/fcTrigger:FcTrigger":
                return new FcTrigger(name, <any>undefined, { urn })
            case "alicloud:index/fcv2Function:Fcv2Function":
                return new Fcv2Function(name, <any>undefined, { urn })
            case "alicloud:index/fcv3Alias:Fcv3Alias":
                return new Fcv3Alias(name, <any>undefined, { urn })
            case "alicloud:index/fcv3AsyncInvokeConfig:Fcv3AsyncInvokeConfig":
                return new Fcv3AsyncInvokeConfig(name, <any>undefined, { urn })
            case "alicloud:index/fcv3ConcurrencyConfig:Fcv3ConcurrencyConfig":
                return new Fcv3ConcurrencyConfig(name, <any>undefined, { urn })
            case "alicloud:index/fcv3CustomDomain:Fcv3CustomDomain":
                return new Fcv3CustomDomain(name, <any>undefined, { urn })
            case "alicloud:index/fcv3Function:Fcv3Function":
                return new Fcv3Function(name, <any>undefined, { urn })
            case "alicloud:index/fcv3FunctionVersion:Fcv3FunctionVersion":
                return new Fcv3FunctionVersion(name, <any>undefined, { urn })
            case "alicloud:index/fcv3Trigger:Fcv3Trigger":
                return new Fcv3Trigger(name, <any>undefined, { urn })
            case "alicloud:index/fnfExecution:FnfExecution":
                return new FnfExecution(name, <any>undefined, { urn })
            case "alicloud:index/fnfFlow:FnfFlow":
                return new FnfFlow(name, <any>undefined, { urn })
            case "alicloud:index/fnfSchedule:FnfSchedule":
                return new FnfSchedule(name, <any>undefined, { urn })
            case "alicloud:index/forwardEntry:ForwardEntry":
                return new ForwardEntry(name, <any>undefined, { urn })
            case "alicloud:index/gaAccelerator:GaAccelerator":
                return new GaAccelerator(name, <any>undefined, { urn })
            case "alicloud:index/gaAcceleratorSpareIpAttachment:GaAcceleratorSpareIpAttachment":
                return new GaAcceleratorSpareIpAttachment(name, <any>undefined, { urn })
            case "alicloud:index/gaAccessLog:GaAccessLog":
                return new GaAccessLog(name, <any>undefined, { urn })
            case "alicloud:index/gaAcl:GaAcl":
                return new GaAcl(name, <any>undefined, { urn })
            case "alicloud:index/gaAclAttachment:GaAclAttachment":
                return new GaAclAttachment(name, <any>undefined, { urn })
            case "alicloud:index/gaAclEntryAttachment:GaAclEntryAttachment":
                return new GaAclEntryAttachment(name, <any>undefined, { urn })
            case "alicloud:index/gaAdditionalCertificate:GaAdditionalCertificate":
                return new GaAdditionalCertificate(name, <any>undefined, { urn })
            case "alicloud:index/gaBandwidthPackage:GaBandwidthPackage":
                return new GaBandwidthPackage(name, <any>undefined, { urn })
            case "alicloud:index/gaBandwidthPackageAttachment:GaBandwidthPackageAttachment":
                return new GaBandwidthPackageAttachment(name, <any>undefined, { urn })
            case "alicloud:index/gaBasicAccelerateIp:GaBasicAccelerateIp":
                return new GaBasicAccelerateIp(name, <any>undefined, { urn })
            case "alicloud:index/gaBasicAccelerateIpEndpointRelation:GaBasicAccelerateIpEndpointRelation":
                return new GaBasicAccelerateIpEndpointRelation(name, <any>undefined, { urn })
            case "alicloud:index/gaBasicAccelerator:GaBasicAccelerator":
                return new GaBasicAccelerator(name, <any>undefined, { urn })
            case "alicloud:index/gaBasicEndpoint:GaBasicEndpoint":
                return new GaBasicEndpoint(name, <any>undefined, { urn })
            case "alicloud:index/gaBasicEndpointGroup:GaBasicEndpointGroup":
                return new GaBasicEndpointGroup(name, <any>undefined, { urn })
            case "alicloud:index/gaBasicIpSet:GaBasicIpSet":
                return new GaBasicIpSet(name, <any>undefined, { urn })
            case "alicloud:index/gaCustomRoutingEndpoint:GaCustomRoutingEndpoint":
                return new GaCustomRoutingEndpoint(name, <any>undefined, { urn })
            case "alicloud:index/gaCustomRoutingEndpointGroup:GaCustomRoutingEndpointGroup":
                return new GaCustomRoutingEndpointGroup(name, <any>undefined, { urn })
            case "alicloud:index/gaCustomRoutingEndpointGroupDestination:GaCustomRoutingEndpointGroupDestination":
                return new GaCustomRoutingEndpointGroupDestination(name, <any>undefined, { urn })
            case "alicloud:index/gaCustomRoutingEndpointTrafficPolicy:GaCustomRoutingEndpointTrafficPolicy":
                return new GaCustomRoutingEndpointTrafficPolicy(name, <any>undefined, { urn })
            case "alicloud:index/gaDomain:GaDomain":
                return new GaDomain(name, <any>undefined, { urn })
            case "alicloud:index/gaEndpointGroup:GaEndpointGroup":
                return new GaEndpointGroup(name, <any>undefined, { urn })
            case "alicloud:index/gaForwardingRule:GaForwardingRule":
                return new GaForwardingRule(name, <any>undefined, { urn })
            case "alicloud:index/gaIpSet:GaIpSet":
                return new GaIpSet(name, <any>undefined, { urn })
            case "alicloud:index/gaListener:GaListener":
                return new GaListener(name, <any>undefined, { urn })
            case "alicloud:index/governanceAccount:GovernanceAccount":
                return new GovernanceAccount(name, <any>undefined, { urn })
            case "alicloud:index/governanceBaseline:GovernanceBaseline":
                return new GovernanceBaseline(name, <any>undefined, { urn })
            case "alicloud:index/gpdbAccount:GpdbAccount":
                return new GpdbAccount(name, <any>undefined, { urn })
            case "alicloud:index/gpdbBackupPolicy:GpdbBackupPolicy":
                return new GpdbBackupPolicy(name, <any>undefined, { urn })
            case "alicloud:index/gpdbConnection:GpdbConnection":
                return new GpdbConnection(name, <any>undefined, { urn })
            case "alicloud:index/gpdbDbInstancePlan:GpdbDbInstancePlan":
                return new GpdbDbInstancePlan(name, <any>undefined, { urn })
            case "alicloud:index/gpdbDbResourceGroup:GpdbDbResourceGroup":
                return new GpdbDbResourceGroup(name, <any>undefined, { urn })
            case "alicloud:index/gpdbElasticInstance:GpdbElasticInstance":
                return new GpdbElasticInstance(name, <any>undefined, { urn })
            case "alicloud:index/gpdbExternalDataService:GpdbExternalDataService":
                return new GpdbExternalDataService(name, <any>undefined, { urn })
            case "alicloud:index/gpdbInstance:GpdbInstance":
                return new GpdbInstance(name, <any>undefined, { urn })
            case "alicloud:index/gpdbRemoteAdbDataSource:GpdbRemoteAdbDataSource":
                return new GpdbRemoteAdbDataSource(name, <any>undefined, { urn })
            case "alicloud:index/gpdbStreamingDataService:GpdbStreamingDataService":
                return new GpdbStreamingDataService(name, <any>undefined, { urn })
            case "alicloud:index/gpdbStreamingDataSource:GpdbStreamingDataSource":
                return new GpdbStreamingDataSource(name, <any>undefined, { urn })
            case "alicloud:index/graphDatabaseDbInstance:GraphDatabaseDbInstance":
                return new GraphDatabaseDbInstance(name, <any>undefined, { urn })
            case "alicloud:index/havip:Havip":
                return new Havip(name, <any>undefined, { urn })
            case "alicloud:index/havipAttachment:HavipAttachment":
                return new HavipAttachment(name, <any>undefined, { urn })
            case "alicloud:index/hbaseInstance:HbaseInstance":
                return new HbaseInstance(name, <any>undefined, { urn })
            case "alicloud:index/hbrEcsBackupClient:HbrEcsBackupClient":
                return new HbrEcsBackupClient(name, <any>undefined, { urn })
            case "alicloud:index/hbrEcsBackupPlan:HbrEcsBackupPlan":
                return new HbrEcsBackupPlan(name, <any>undefined, { urn })
            case "alicloud:index/hbrHanaBackupClient:HbrHanaBackupClient":
                return new HbrHanaBackupClient(name, <any>undefined, { urn })
            case "alicloud:index/hbrHanaBackupPlan:HbrHanaBackupPlan":
                return new HbrHanaBackupPlan(name, <any>undefined, { urn })
            case "alicloud:index/hbrHanaInstance:HbrHanaInstance":
                return new HbrHanaInstance(name, <any>undefined, { urn })
            case "alicloud:index/hbrNasBackupPlan:HbrNasBackupPlan":
                return new HbrNasBackupPlan(name, <any>undefined, { urn })
            case "alicloud:index/hbrOssBackupPlan:HbrOssBackupPlan":
                return new HbrOssBackupPlan(name, <any>undefined, { urn })
            case "alicloud:index/hbrOtsBackupPlan:HbrOtsBackupPlan":
                return new HbrOtsBackupPlan(name, <any>undefined, { urn })
            case "alicloud:index/hbrPolicy:HbrPolicy":
                return new HbrPolicy(name, <any>undefined, { urn })
            case "alicloud:index/hbrPolicyBinding:HbrPolicyBinding":
                return new HbrPolicyBinding(name, <any>undefined, { urn })
            case "alicloud:index/hbrReplicationVault:HbrReplicationVault":
                return new HbrReplicationVault(name, <any>undefined, { urn })
            case "alicloud:index/hbrRestoreJob:HbrRestoreJob":
                return new HbrRestoreJob(name, <any>undefined, { urn })
            case "alicloud:index/hbrServerBackupPlan:HbrServerBackupPlan":
                return new HbrServerBackupPlan(name, <any>undefined, { urn })
            case "alicloud:index/hbrVault:HbrVault":
                return new HbrVault(name, <any>undefined, { urn })
            case "alicloud:index/hologramInstance:HologramInstance":
                return new HologramInstance(name, <any>undefined, { urn })
            case "alicloud:index/image:Image":
                return new Image(name, <any>undefined, { urn })
            case "alicloud:index/imageCopy:ImageCopy":
                return new ImageCopy(name, <any>undefined, { urn })
            case "alicloud:index/imageExport:ImageExport":
                return new ImageExport(name, <any>undefined, { urn })
            case "alicloud:index/imageImport:ImageImport":
                return new ImageImport(name, <any>undefined, { urn })
            case "alicloud:index/imageSharePermission:ImageSharePermission":
                return new ImageSharePermission(name, <any>undefined, { urn })
            case "alicloud:index/immProject:ImmProject":
                return new ImmProject(name, <any>undefined, { urn })
            case "alicloud:index/impAppTemplate:ImpAppTemplate":
                return new ImpAppTemplate(name, <any>undefined, { urn })
            case "alicloud:index/imsOidcProvider:ImsOidcProvider":
                return new ImsOidcProvider(name, <any>undefined, { urn })
            case "alicloud:index/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "alicloud:index/iotDeviceGroup:IotDeviceGroup":
                return new IotDeviceGroup(name, <any>undefined, { urn })
            case "alicloud:index/keyPair:KeyPair":
                return new KeyPair(name, <any>undefined, { urn })
            case "alicloud:index/keyPairAttachment:KeyPairAttachment":
                return new KeyPairAttachment(name, <any>undefined, { urn })
            case "alicloud:index/kmsAlias:KmsAlias":
                return new KmsAlias(name, <any>undefined, { urn })
            case "alicloud:index/kmsApplicationAccessPoint:KmsApplicationAccessPoint":
                return new KmsApplicationAccessPoint(name, <any>undefined, { urn })
            case "alicloud:index/kmsCiphertext:KmsCiphertext":
                return new KmsCiphertext(name, <any>undefined, { urn })
            case "alicloud:index/kmsClientKey:KmsClientKey":
                return new KmsClientKey(name, <any>undefined, { urn })
            case "alicloud:index/kmsInstance:KmsInstance":
                return new KmsInstance(name, <any>undefined, { urn })
            case "alicloud:index/kmsKey:KmsKey":
                return new KmsKey(name, <any>undefined, { urn })
            case "alicloud:index/kmsKeyVersion:KmsKeyVersion":
                return new KmsKeyVersion(name, <any>undefined, { urn })
            case "alicloud:index/kmsNetworkRule:KmsNetworkRule":
                return new KmsNetworkRule(name, <any>undefined, { urn })
            case "alicloud:index/kmsPolicy:KmsPolicy":
                return new KmsPolicy(name, <any>undefined, { urn })
            case "alicloud:index/kmsSecret:KmsSecret":
                return new KmsSecret(name, <any>undefined, { urn })
            case "alicloud:index/kvstoreAccount:KvstoreAccount":
                return new KvstoreAccount(name, <any>undefined, { urn })
            case "alicloud:index/kvstoreAuditLogConfig:KvstoreAuditLogConfig":
                return new KvstoreAuditLogConfig(name, <any>undefined, { urn })
            case "alicloud:index/kvstoreBackupPolicy:KvstoreBackupPolicy":
                return new KvstoreBackupPolicy(name, <any>undefined, { urn })
            case "alicloud:index/kvstoreConnection:KvstoreConnection":
                return new KvstoreConnection(name, <any>undefined, { urn })
            case "alicloud:index/kvstoreInstance:KvstoreInstance":
                return new KvstoreInstance(name, <any>undefined, { urn })
            case "alicloud:index/launchTemplate:LaunchTemplate":
                return new LaunchTemplate(name, <any>undefined, { urn })
            case "alicloud:index/lindormInstance:LindormInstance":
                return new LindormInstance(name, <any>undefined, { urn })
            case "alicloud:index/logAlert:LogAlert":
                return new LogAlert(name, <any>undefined, { urn })
            case "alicloud:index/logAlertResource:LogAlertResource":
                return new LogAlertResource(name, <any>undefined, { urn })
            case "alicloud:index/logAudit:LogAudit":
                return new LogAudit(name, <any>undefined, { urn })
            case "alicloud:index/logDashboard:LogDashboard":
                return new LogDashboard(name, <any>undefined, { urn })
            case "alicloud:index/logEtl:LogEtl":
                return new LogEtl(name, <any>undefined, { urn })
            case "alicloud:index/logIngestion:LogIngestion":
                return new LogIngestion(name, <any>undefined, { urn })
            case "alicloud:index/logMachineGroup:LogMachineGroup":
                return new LogMachineGroup(name, <any>undefined, { urn })
            case "alicloud:index/logOssExport:LogOssExport":
                return new LogOssExport(name, <any>undefined, { urn })
            case "alicloud:index/logOssShipper:LogOssShipper":
                return new LogOssShipper(name, <any>undefined, { urn })
            case "alicloud:index/logProject:LogProject":
                return new LogProject(name, <any>undefined, { urn })
            case "alicloud:index/logResource:LogResource":
                return new LogResource(name, <any>undefined, { urn })
            case "alicloud:index/logResourceRecord:LogResourceRecord":
                return new LogResourceRecord(name, <any>undefined, { urn })
            case "alicloud:index/logStore:LogStore":
                return new LogStore(name, <any>undefined, { urn })
            case "alicloud:index/logStoreIndex:LogStoreIndex":
                return new LogStoreIndex(name, <any>undefined, { urn })
            case "alicloud:index/logtailAttachment:LogtailAttachment":
                return new LogtailAttachment(name, <any>undefined, { urn })
            case "alicloud:index/logtailConfig:LogtailConfig":
                return new LogtailConfig(name, <any>undefined, { urn })
            case "alicloud:index/marketOrder:MarketOrder":
                return new MarketOrder(name, <any>undefined, { urn })
            case "alicloud:index/maxcomputeProject:MaxcomputeProject":
                return new MaxcomputeProject(name, <any>undefined, { urn })
            case "alicloud:index/messageServiceQueue:MessageServiceQueue":
                return new MessageServiceQueue(name, <any>undefined, { urn })
            case "alicloud:index/messageServiceSubscription:MessageServiceSubscription":
                return new MessageServiceSubscription(name, <any>undefined, { urn })
            case "alicloud:index/messageServiceTopic:MessageServiceTopic":
                return new MessageServiceTopic(name, <any>undefined, { urn })
            case "alicloud:index/mhubApp:MhubApp":
                return new MhubApp(name, <any>undefined, { urn })
            case "alicloud:index/mhubProduct:MhubProduct":
                return new MhubProduct(name, <any>undefined, { urn })
            case "alicloud:index/mnsQueue:MnsQueue":
                return new MnsQueue(name, <any>undefined, { urn })
            case "alicloud:index/mnsTopic:MnsTopic":
                return new MnsTopic(name, <any>undefined, { urn })
            case "alicloud:index/mnsTopicSubscription:MnsTopicSubscription":
                return new MnsTopicSubscription(name, <any>undefined, { urn })
            case "alicloud:index/mongodbAccount:MongodbAccount":
                return new MongodbAccount(name, <any>undefined, { urn })
            case "alicloud:index/mongodbAuditPolicy:MongodbAuditPolicy":
                return new MongodbAuditPolicy(name, <any>undefined, { urn })
            case "alicloud:index/mongodbInstance:MongodbInstance":
                return new MongodbInstance(name, <any>undefined, { urn })
            case "alicloud:index/mongodbServerlessInstance:MongodbServerlessInstance":
                return new MongodbServerlessInstance(name, <any>undefined, { urn })
            case "alicloud:index/mongodbShardingInstance:MongodbShardingInstance":
                return new MongodbShardingInstance(name, <any>undefined, { urn })
            case "alicloud:index/mongodbShardingNetworkPrivateAddress:MongodbShardingNetworkPrivateAddress":
                return new MongodbShardingNetworkPrivateAddress(name, <any>undefined, { urn })
            case "alicloud:index/mongodbShardingNetworkPublicAddress:MongodbShardingNetworkPublicAddress":
                return new MongodbShardingNetworkPublicAddress(name, <any>undefined, { urn })
            case "alicloud:index/mscSubContact:MscSubContact":
                return new MscSubContact(name, <any>undefined, { urn })
            case "alicloud:index/mscSubSubscription:MscSubSubscription":
                return new MscSubSubscription(name, <any>undefined, { urn })
            case "alicloud:index/mscSubWebhook:MscSubWebhook":
                return new MscSubWebhook(name, <any>undefined, { urn })
            case "alicloud:index/mseCluster:MseCluster":
                return new MseCluster(name, <any>undefined, { urn })
            case "alicloud:index/mseEngineNamespace:MseEngineNamespace":
                return new MseEngineNamespace(name, <any>undefined, { urn })
            case "alicloud:index/mseGateway:MseGateway":
                return new MseGateway(name, <any>undefined, { urn })
            case "alicloud:index/mseZnode:MseZnode":
                return new MseZnode(name, <any>undefined, { urn })
            case "alicloud:index/nasAccessGroup:NasAccessGroup":
                return new NasAccessGroup(name, <any>undefined, { urn })
            case "alicloud:index/nasAccessPoint:NasAccessPoint":
                return new NasAccessPoint(name, <any>undefined, { urn })
            case "alicloud:index/nasAccessRule:NasAccessRule":
                return new NasAccessRule(name, <any>undefined, { urn })
            case "alicloud:index/nasAutoSnapshotPolicy:NasAutoSnapshotPolicy":
                return new NasAutoSnapshotPolicy(name, <any>undefined, { urn })
            case "alicloud:index/nasDataFlow:NasDataFlow":
                return new NasDataFlow(name, <any>undefined, { urn })
            case "alicloud:index/nasFileSystem:NasFileSystem":
                return new NasFileSystem(name, <any>undefined, { urn })
            case "alicloud:index/nasFileset:NasFileset":
                return new NasFileset(name, <any>undefined, { urn })
            case "alicloud:index/nasLifecyclePolicy:NasLifecyclePolicy":
                return new NasLifecyclePolicy(name, <any>undefined, { urn })
            case "alicloud:index/nasMountTarget:NasMountTarget":
                return new NasMountTarget(name, <any>undefined, { urn })
            case "alicloud:index/nasRecycleBin:NasRecycleBin":
                return new NasRecycleBin(name, <any>undefined, { urn })
            case "alicloud:index/nasSmbAclAttachment:NasSmbAclAttachment":
                return new NasSmbAclAttachment(name, <any>undefined, { urn })
            case "alicloud:index/nasSnapshot:NasSnapshot":
                return new NasSnapshot(name, <any>undefined, { urn })
            case "alicloud:index/natGateway:NatGateway":
                return new NatGateway(name, <any>undefined, { urn })
            case "alicloud:index/networkAcl:NetworkAcl":
                return new NetworkAcl(name, <any>undefined, { urn })
            case "alicloud:index/networkAclAttachment:NetworkAclAttachment":
                return new NetworkAclAttachment(name, <any>undefined, { urn })
            case "alicloud:index/networkAclEntries:NetworkAclEntries":
                return new NetworkAclEntries(name, <any>undefined, { urn })
            case "alicloud:index/networkInterface:NetworkInterface":
                return new NetworkInterface(name, <any>undefined, { urn })
            case "alicloud:index/networkInterfaceAttachment:NetworkInterfaceAttachment":
                return new NetworkInterfaceAttachment(name, <any>undefined, { urn })
            case "alicloud:index/nlbListener:NlbListener":
                return new NlbListener(name, <any>undefined, { urn })
            case "alicloud:index/nlbListenerAdditionalCertificateAttachment:NlbListenerAdditionalCertificateAttachment":
                return new NlbListenerAdditionalCertificateAttachment(name, <any>undefined, { urn })
            case "alicloud:index/nlbLoadBalancer:NlbLoadBalancer":
                return new NlbLoadBalancer(name, <any>undefined, { urn })
            case "alicloud:index/nlbLoadBalancerSecurityGroupAttachment:NlbLoadBalancerSecurityGroupAttachment":
                return new NlbLoadBalancerSecurityGroupAttachment(name, <any>undefined, { urn })
            case "alicloud:index/nlbLoadbalancerCommonBandwidthPackageAttachment:NlbLoadbalancerCommonBandwidthPackageAttachment":
                return new NlbLoadbalancerCommonBandwidthPackageAttachment(name, <any>undefined, { urn })
            case "alicloud:index/nlbSecurityPolicy:NlbSecurityPolicy":
                return new NlbSecurityPolicy(name, <any>undefined, { urn })
            case "alicloud:index/nlbServerGroup:NlbServerGroup":
                return new NlbServerGroup(name, <any>undefined, { urn })
            case "alicloud:index/nlbServerGroupServerAttachment:NlbServerGroupServerAttachment":
                return new NlbServerGroupServerAttachment(name, <any>undefined, { urn })
            case "alicloud:index/oceanBaseInstance:OceanBaseInstance":
                return new OceanBaseInstance(name, <any>undefined, { urn })
            case "alicloud:index/onsGroup:OnsGroup":
                return new OnsGroup(name, <any>undefined, { urn })
            case "alicloud:index/onsInstance:OnsInstance":
                return new OnsInstance(name, <any>undefined, { urn })
            case "alicloud:index/onsTopic:OnsTopic":
                return new OnsTopic(name, <any>undefined, { urn })
            case "alicloud:index/oosApplication:OosApplication":
                return new OosApplication(name, <any>undefined, { urn })
            case "alicloud:index/oosApplicationGroup:OosApplicationGroup":
                return new OosApplicationGroup(name, <any>undefined, { urn })
            case "alicloud:index/oosDefaultPatchBaseline:OosDefaultPatchBaseline":
                return new OosDefaultPatchBaseline(name, <any>undefined, { urn })
            case "alicloud:index/oosExecution:OosExecution":
                return new OosExecution(name, <any>undefined, { urn })
            case "alicloud:index/oosParameter:OosParameter":
                return new OosParameter(name, <any>undefined, { urn })
            case "alicloud:index/oosPatchBaseline:OosPatchBaseline":
                return new OosPatchBaseline(name, <any>undefined, { urn })
            case "alicloud:index/oosSecretParameter:OosSecretParameter":
                return new OosSecretParameter(name, <any>undefined, { urn })
            case "alicloud:index/oosServiceSetting:OosServiceSetting":
                return new OosServiceSetting(name, <any>undefined, { urn })
            case "alicloud:index/oosStateConfiguration:OosStateConfiguration":
                return new OosStateConfiguration(name, <any>undefined, { urn })
            case "alicloud:index/oosTemplate:OosTemplate":
                return new OosTemplate(name, <any>undefined, { urn })
            case "alicloud:index/openSearchAppGroup:OpenSearchAppGroup":
                return new OpenSearchAppGroup(name, <any>undefined, { urn })
            case "alicloud:index/ossAccountPublicAccessBlock:OssAccountPublicAccessBlock":
                return new OssAccountPublicAccessBlock(name, <any>undefined, { urn })
            case "alicloud:index/ossBucket:OssBucket":
                return new OssBucket(name, <any>undefined, { urn })
            case "alicloud:index/ossBucketAccessMonitor:OssBucketAccessMonitor":
                return new OssBucketAccessMonitor(name, <any>undefined, { urn })
            case "alicloud:index/ossBucketAcl:OssBucketAcl":
                return new OssBucketAcl(name, <any>undefined, { urn })
            case "alicloud:index/ossBucketCors:OssBucketCors":
                return new OssBucketCors(name, <any>undefined, { urn })
            case "alicloud:index/ossBucketDataRedundancyTransition:OssBucketDataRedundancyTransition":
                return new OssBucketDataRedundancyTransition(name, <any>undefined, { urn })
            case "alicloud:index/ossBucketHttpsConfig:OssBucketHttpsConfig":
                return new OssBucketHttpsConfig(name, <any>undefined, { urn })
            case "alicloud:index/ossBucketLogging:OssBucketLogging":
                return new OssBucketLogging(name, <any>undefined, { urn })
            case "alicloud:index/ossBucketMetaQuery:OssBucketMetaQuery":
                return new OssBucketMetaQuery(name, <any>undefined, { urn })
            case "alicloud:index/ossBucketObject:OssBucketObject":
                return new OssBucketObject(name, <any>undefined, { urn })
            case "alicloud:index/ossBucketPolicy:OssBucketPolicy":
                return new OssBucketPolicy(name, <any>undefined, { urn })
            case "alicloud:index/ossBucketPublicAccessBlock:OssBucketPublicAccessBlock":
                return new OssBucketPublicAccessBlock(name, <any>undefined, { urn })
            case "alicloud:index/ossBucketReferer:OssBucketReferer":
                return new OssBucketReferer(name, <any>undefined, { urn })
            case "alicloud:index/ossBucketReplication:OssBucketReplication":
                return new OssBucketReplication(name, <any>undefined, { urn })
            case "alicloud:index/ossBucketRequestPayment:OssBucketRequestPayment":
                return new OssBucketRequestPayment(name, <any>undefined, { urn })
            case "alicloud:index/ossBucketServerSideEncryption:OssBucketServerSideEncryption":
                return new OssBucketServerSideEncryption(name, <any>undefined, { urn })
            case "alicloud:index/ossBucketTransferAcceleration:OssBucketTransferAcceleration":
                return new OssBucketTransferAcceleration(name, <any>undefined, { urn })
            case "alicloud:index/ossBucketUserDefinedLogFields:OssBucketUserDefinedLogFields":
                return new OssBucketUserDefinedLogFields(name, <any>undefined, { urn })
            case "alicloud:index/ossBucketVersioning:OssBucketVersioning":
                return new OssBucketVersioning(name, <any>undefined, { urn })
            case "alicloud:index/otsInstance:OtsInstance":
                return new OtsInstance(name, <any>undefined, { urn })
            case "alicloud:index/otsInstanceAttachment:OtsInstanceAttachment":
                return new OtsInstanceAttachment(name, <any>undefined, { urn })
            case "alicloud:index/otsSearchIndex:OtsSearchIndex":
                return new OtsSearchIndex(name, <any>undefined, { urn })
            case "alicloud:index/otsSecondaryIndex:OtsSecondaryIndex":
                return new OtsSecondaryIndex(name, <any>undefined, { urn })
            case "alicloud:index/otsTable:OtsTable":
                return new OtsTable(name, <any>undefined, { urn })
            case "alicloud:index/otsTunnel:OtsTunnel":
                return new OtsTunnel(name, <any>undefined, { urn })
            case "alicloud:index/polardbAccount:PolardbAccount":
                return new PolardbAccount(name, <any>undefined, { urn })
            case "alicloud:index/polardbAccountPrivilege:PolardbAccountPrivilege":
                return new PolardbAccountPrivilege(name, <any>undefined, { urn })
            case "alicloud:index/polardbBackupPolicy:PolardbBackupPolicy":
                return new PolardbBackupPolicy(name, <any>undefined, { urn })
            case "alicloud:index/polardbCluster:PolardbCluster":
                return new PolardbCluster(name, <any>undefined, { urn })
            case "alicloud:index/polardbClusterEndpoint:PolardbClusterEndpoint":
                return new PolardbClusterEndpoint(name, <any>undefined, { urn })
            case "alicloud:index/polardbDatabase:PolardbDatabase":
                return new PolardbDatabase(name, <any>undefined, { urn })
            case "alicloud:index/polardbEndpoint:PolardbEndpoint":
                return new PolardbEndpoint(name, <any>undefined, { urn })
            case "alicloud:index/polardbEndpointAddress:PolardbEndpointAddress":
                return new PolardbEndpointAddress(name, <any>undefined, { urn })
            case "alicloud:index/polardbGlobalDatabaseNetwork:PolardbGlobalDatabaseNetwork":
                return new PolardbGlobalDatabaseNetwork(name, <any>undefined, { urn })
            case "alicloud:index/polardbParameterGroup:PolardbParameterGroup":
                return new PolardbParameterGroup(name, <any>undefined, { urn })
            case "alicloud:index/polardbPrimaryEndpoint:PolardbPrimaryEndpoint":
                return new PolardbPrimaryEndpoint(name, <any>undefined, { urn })
            case "alicloud:index/privatelinkVpcEndpoint:PrivatelinkVpcEndpoint":
                return new PrivatelinkVpcEndpoint(name, <any>undefined, { urn })
            case "alicloud:index/privatelinkVpcEndpointConnection:PrivatelinkVpcEndpointConnection":
                return new PrivatelinkVpcEndpointConnection(name, <any>undefined, { urn })
            case "alicloud:index/privatelinkVpcEndpointService:PrivatelinkVpcEndpointService":
                return new PrivatelinkVpcEndpointService(name, <any>undefined, { urn })
            case "alicloud:index/privatelinkVpcEndpointServiceResource:PrivatelinkVpcEndpointServiceResource":
                return new PrivatelinkVpcEndpointServiceResource(name, <any>undefined, { urn })
            case "alicloud:index/privatelinkVpcEndpointServiceUser:PrivatelinkVpcEndpointServiceUser":
                return new PrivatelinkVpcEndpointServiceUser(name, <any>undefined, { urn })
            case "alicloud:index/privatelinkVpcEndpointZone:PrivatelinkVpcEndpointZone":
                return new PrivatelinkVpcEndpointZone(name, <any>undefined, { urn })
            case "alicloud:index/pvtzEndpoint:PvtzEndpoint":
                return new PvtzEndpoint(name, <any>undefined, { urn })
            case "alicloud:index/pvtzRule:PvtzRule":
                return new PvtzRule(name, <any>undefined, { urn })
            case "alicloud:index/pvtzRuleAttachment:PvtzRuleAttachment":
                return new PvtzRuleAttachment(name, <any>undefined, { urn })
            case "alicloud:index/pvtzUserVpcAuthorization:PvtzUserVpcAuthorization":
                return new PvtzUserVpcAuthorization(name, <any>undefined, { urn })
            case "alicloud:index/pvtzZone:PvtzZone":
                return new PvtzZone(name, <any>undefined, { urn })
            case "alicloud:index/pvtzZoneAttachment:PvtzZoneAttachment":
                return new PvtzZoneAttachment(name, <any>undefined, { urn })
            case "alicloud:index/pvtzZoneRecord:PvtzZoneRecord":
                return new PvtzZoneRecord(name, <any>undefined, { urn })
            case "alicloud:index/quickBiUser:QuickBiUser":
                return new QuickBiUser(name, <any>undefined, { urn })
            case "alicloud:index/quotasApplicationInfo:QuotasApplicationInfo":
                return new QuotasApplicationInfo(name, <any>undefined, { urn })
            case "alicloud:index/quotasQuotaAlarm:QuotasQuotaAlarm":
                return new QuotasQuotaAlarm(name, <any>undefined, { urn })
            case "alicloud:index/quotasQuotaApplication:QuotasQuotaApplication":
                return new QuotasQuotaApplication(name, <any>undefined, { urn })
            case "alicloud:index/quotasTemplateApplications:QuotasTemplateApplications":
                return new QuotasTemplateApplications(name, <any>undefined, { urn })
            case "alicloud:index/quotasTemplateQuota:QuotasTemplateQuota":
                return new QuotasTemplateQuota(name, <any>undefined, { urn })
            case "alicloud:index/ramAccessKey:RamAccessKey":
                return new RamAccessKey(name, <any>undefined, { urn })
            case "alicloud:index/ramAccountAlias:RamAccountAlias":
                return new RamAccountAlias(name, <any>undefined, { urn })
            case "alicloud:index/ramAccountPasswordPolicy:RamAccountPasswordPolicy":
                return new RamAccountPasswordPolicy(name, <any>undefined, { urn })
            case "alicloud:index/ramAlias:RamAlias":
                return new RamAlias(name, <any>undefined, { urn })
            case "alicloud:index/ramGroup:RamGroup":
                return new RamGroup(name, <any>undefined, { urn })
            case "alicloud:index/ramGroupMembership:RamGroupMembership":
                return new RamGroupMembership(name, <any>undefined, { urn })
            case "alicloud:index/ramGroupPolicyAttachment:RamGroupPolicyAttachment":
                return new RamGroupPolicyAttachment(name, <any>undefined, { urn })
            case "alicloud:index/ramLoginProfile:RamLoginProfile":
                return new RamLoginProfile(name, <any>undefined, { urn })
            case "alicloud:index/ramPolicy:RamPolicy":
                return new RamPolicy(name, <any>undefined, { urn })
            case "alicloud:index/ramRole:RamRole":
                return new RamRole(name, <any>undefined, { urn })
            case "alicloud:index/ramRoleAttachment:RamRoleAttachment":
                return new RamRoleAttachment(name, <any>undefined, { urn })
            case "alicloud:index/ramRolePolicyAttachment:RamRolePolicyAttachment":
                return new RamRolePolicyAttachment(name, <any>undefined, { urn })
            case "alicloud:index/ramSamlProvider:RamSamlProvider":
                return new RamSamlProvider(name, <any>undefined, { urn })
            case "alicloud:index/ramSecurityPreference:RamSecurityPreference":
                return new RamSecurityPreference(name, <any>undefined, { urn })
            case "alicloud:index/ramUser:RamUser":
                return new RamUser(name, <any>undefined, { urn })
            case "alicloud:index/ramUserPolicyAttachment:RamUserPolicyAttachment":
                return new RamUserPolicyAttachment(name, <any>undefined, { urn })
            case "alicloud:index/rdcOrganization:RdcOrganization":
                return new RdcOrganization(name, <any>undefined, { urn })
            case "alicloud:index/rdsAccount:RdsAccount":
                return new RdsAccount(name, <any>undefined, { urn })
            case "alicloud:index/rdsBackup:RdsBackup":
                return new RdsBackup(name, <any>undefined, { urn })
            case "alicloud:index/rdsCloneDbInstance:RdsCloneDbInstance":
                return new RdsCloneDbInstance(name, <any>undefined, { urn })
            case "alicloud:index/rdsDbInstanceEndpoint:RdsDbInstanceEndpoint":
                return new RdsDbInstanceEndpoint(name, <any>undefined, { urn })
            case "alicloud:index/rdsDbInstanceEndpointAddress:RdsDbInstanceEndpointAddress":
                return new RdsDbInstanceEndpointAddress(name, <any>undefined, { urn })
            case "alicloud:index/rdsDbNode:RdsDbNode":
                return new RdsDbNode(name, <any>undefined, { urn })
            case "alicloud:index/rdsDbProxy:RdsDbProxy":
                return new RdsDbProxy(name, <any>undefined, { urn })
            case "alicloud:index/rdsDdrInstance:RdsDdrInstance":
                return new RdsDdrInstance(name, <any>undefined, { urn })
            case "alicloud:index/rdsInstanceCrossBackupPolicy:RdsInstanceCrossBackupPolicy":
                return new RdsInstanceCrossBackupPolicy(name, <any>undefined, { urn })
            case "alicloud:index/rdsParameterGroup:RdsParameterGroup":
                return new RdsParameterGroup(name, <any>undefined, { urn })
            case "alicloud:index/rdsServiceLinkedRole:RdsServiceLinkedRole":
                return new RdsServiceLinkedRole(name, <any>undefined, { urn })
            case "alicloud:index/rdsUpgradeDbInstance:RdsUpgradeDbInstance":
                return new RdsUpgradeDbInstance(name, <any>undefined, { urn })
            case "alicloud:index/realtimeComputeVvpInstance:RealtimeComputeVvpInstance":
                return new RealtimeComputeVvpInstance(name, <any>undefined, { urn })
            case "alicloud:index/redisTairInstance:RedisTairInstance":
                return new RedisTairInstance(name, <any>undefined, { urn })
            case "alicloud:index/reservedInstance:ReservedInstance":
                return new ReservedInstance(name, <any>undefined, { urn })
            case "alicloud:index/resourceManagerAccount:ResourceManagerAccount":
                return new ResourceManagerAccount(name, <any>undefined, { urn })
            case "alicloud:index/resourceManagerControlPolicy:ResourceManagerControlPolicy":
                return new ResourceManagerControlPolicy(name, <any>undefined, { urn })
            case "alicloud:index/resourceManagerControlPolicyAttachment:ResourceManagerControlPolicyAttachment":
                return new ResourceManagerControlPolicyAttachment(name, <any>undefined, { urn })
            case "alicloud:index/resourceManagerDelegatedAdministrator:ResourceManagerDelegatedAdministrator":
                return new ResourceManagerDelegatedAdministrator(name, <any>undefined, { urn })
            case "alicloud:index/resourceManagerFolder:ResourceManagerFolder":
                return new ResourceManagerFolder(name, <any>undefined, { urn })
            case "alicloud:index/resourceManagerHandshake:ResourceManagerHandshake":
                return new ResourceManagerHandshake(name, <any>undefined, { urn })
            case "alicloud:index/resourceManagerPolicy:ResourceManagerPolicy":
                return new ResourceManagerPolicy(name, <any>undefined, { urn })
            case "alicloud:index/resourceManagerPolicyAttachment:ResourceManagerPolicyAttachment":
                return new ResourceManagerPolicyAttachment(name, <any>undefined, { urn })
            case "alicloud:index/resourceManagerPolicyVersion:ResourceManagerPolicyVersion":
                return new ResourceManagerPolicyVersion(name, <any>undefined, { urn })
            case "alicloud:index/resourceManagerResourceDirectory:ResourceManagerResourceDirectory":
                return new ResourceManagerResourceDirectory(name, <any>undefined, { urn })
            case "alicloud:index/resourceManagerResourceGroup:ResourceManagerResourceGroup":
                return new ResourceManagerResourceGroup(name, <any>undefined, { urn })
            case "alicloud:index/resourceManagerResourceShare:ResourceManagerResourceShare":
                return new ResourceManagerResourceShare(name, <any>undefined, { urn })
            case "alicloud:index/resourceManagerRole:ResourceManagerRole":
                return new ResourceManagerRole(name, <any>undefined, { urn })
            case "alicloud:index/resourceManagerSavedQuery:ResourceManagerSavedQuery":
                return new ResourceManagerSavedQuery(name, <any>undefined, { urn })
            case "alicloud:index/resourceManagerServiceLinkedRole:ResourceManagerServiceLinkedRole":
                return new ResourceManagerServiceLinkedRole(name, <any>undefined, { urn })
            case "alicloud:index/resourceManagerSharedResource:ResourceManagerSharedResource":
                return new ResourceManagerSharedResource(name, <any>undefined, { urn })
            case "alicloud:index/resourceManagerSharedTarget:ResourceManagerSharedTarget":
                return new ResourceManagerSharedTarget(name, <any>undefined, { urn })
            case "alicloud:index/rocketmqConsumerGroup:RocketmqConsumerGroup":
                return new RocketmqConsumerGroup(name, <any>undefined, { urn })
            case "alicloud:index/rocketmqInstance:RocketmqInstance":
                return new RocketmqInstance(name, <any>undefined, { urn })
            case "alicloud:index/rocketmqTopic:RocketmqTopic":
                return new RocketmqTopic(name, <any>undefined, { urn })
            case "alicloud:index/rosChangeSet:RosChangeSet":
                return new RosChangeSet(name, <any>undefined, { urn })
            case "alicloud:index/rosStack:RosStack":
                return new RosStack(name, <any>undefined, { urn })
            case "alicloud:index/rosStackGroup:RosStackGroup":
                return new RosStackGroup(name, <any>undefined, { urn })
            case "alicloud:index/rosStackInstance:RosStackInstance":
                return new RosStackInstance(name, <any>undefined, { urn })
            case "alicloud:index/rosTemplate:RosTemplate":
                return new RosTemplate(name, <any>undefined, { urn })
            case "alicloud:index/rosTemplateScratch:RosTemplateScratch":
                return new RosTemplateScratch(name, <any>undefined, { urn })
            case "alicloud:index/routeEntry:RouteEntry":
                return new RouteEntry(name, <any>undefined, { urn })
            case "alicloud:index/routeTable:RouteTable":
                return new RouteTable(name, <any>undefined, { urn })
            case "alicloud:index/routeTableAttachment:RouteTableAttachment":
                return new RouteTableAttachment(name, <any>undefined, { urn })
            case "alicloud:index/routerInterface:RouterInterface":
                return new RouterInterface(name, <any>undefined, { urn })
            case "alicloud:index/routerInterfaceConnection:RouterInterfaceConnection":
                return new RouterInterfaceConnection(name, <any>undefined, { urn })
            case "alicloud:index/saeApplication:SaeApplication":
                return new SaeApplication(name, <any>undefined, { urn })
            case "alicloud:index/saeApplicationScalingRule:SaeApplicationScalingRule":
                return new SaeApplicationScalingRule(name, <any>undefined, { urn })
            case "alicloud:index/saeConfigMap:SaeConfigMap":
                return new SaeConfigMap(name, <any>undefined, { urn })
            case "alicloud:index/saeGreyTagRoute:SaeGreyTagRoute":
                return new SaeGreyTagRoute(name, <any>undefined, { urn })
            case "alicloud:index/saeIngress:SaeIngress":
                return new SaeIngress(name, <any>undefined, { urn })
            case "alicloud:index/saeLoadBalancerInternet:SaeLoadBalancerInternet":
                return new SaeLoadBalancerInternet(name, <any>undefined, { urn })
            case "alicloud:index/saeLoadBalancerIntranet:SaeLoadBalancerIntranet":
                return new SaeLoadBalancerIntranet(name, <any>undefined, { urn })
            case "alicloud:index/saeNamespace:SaeNamespace":
                return new SaeNamespace(name, <any>undefined, { urn })
            case "alicloud:index/sagAcl:SagAcl":
                return new SagAcl(name, <any>undefined, { urn })
            case "alicloud:index/sagAclRule:SagAclRule":
                return new SagAclRule(name, <any>undefined, { urn })
            case "alicloud:index/sagClientUser:SagClientUser":
                return new SagClientUser(name, <any>undefined, { urn })
            case "alicloud:index/sagDnatEntry:SagDnatEntry":
                return new SagDnatEntry(name, <any>undefined, { urn })
            case "alicloud:index/sagQos:SagQos":
                return new SagQos(name, <any>undefined, { urn })
            case "alicloud:index/sagQosCar:SagQosCar":
                return new SagQosCar(name, <any>undefined, { urn })
            case "alicloud:index/sagQosPolicy:SagQosPolicy":
                return new SagQosPolicy(name, <any>undefined, { urn })
            case "alicloud:index/sagSnatEntry:SagSnatEntry":
                return new SagSnatEntry(name, <any>undefined, { urn })
            case "alicloud:index/scdnDomain:ScdnDomain":
                return new ScdnDomain(name, <any>undefined, { urn })
            case "alicloud:index/scdnDomainConfig:ScdnDomainConfig":
                return new ScdnDomainConfig(name, <any>undefined, { urn })
            case "alicloud:index/schedulerxNamespace:SchedulerxNamespace":
                return new SchedulerxNamespace(name, <any>undefined, { urn })
            case "alicloud:index/sddpConfig:SddpConfig":
                return new SddpConfig(name, <any>undefined, { urn })
            case "alicloud:index/sddpDataLimit:SddpDataLimit":
                return new SddpDataLimit(name, <any>undefined, { urn })
            case "alicloud:index/sddpInstance:SddpInstance":
                return new SddpInstance(name, <any>undefined, { urn })
            case "alicloud:index/sddpRule:SddpRule":
                return new SddpRule(name, <any>undefined, { urn })
            case "alicloud:index/securityCenterGroup:SecurityCenterGroup":
                return new SecurityCenterGroup(name, <any>undefined, { urn })
            case "alicloud:index/securityCenterServiceLinkedRole:SecurityCenterServiceLinkedRole":
                return new SecurityCenterServiceLinkedRole(name, <any>undefined, { urn })
            case "alicloud:index/securityGroup:SecurityGroup":
                return new SecurityGroup(name, <any>undefined, { urn })
            case "alicloud:index/securityGroupRule:SecurityGroupRule":
                return new SecurityGroupRule(name, <any>undefined, { urn })
            case "alicloud:index/selectdbDbCluster:SelectdbDbCluster":
                return new SelectdbDbCluster(name, <any>undefined, { urn })
            case "alicloud:index/selectdbDbInstance:SelectdbDbInstance":
                return new SelectdbDbInstance(name, <any>undefined, { urn })
            case "alicloud:index/serviceCatalogPortfolio:ServiceCatalogPortfolio":
                return new ServiceCatalogPortfolio(name, <any>undefined, { urn })
            case "alicloud:index/serviceCatalogProvisionedProduct:ServiceCatalogProvisionedProduct":
                return new ServiceCatalogProvisionedProduct(name, <any>undefined, { urn })
            case "alicloud:index/serviceMeshExtensionProvider:ServiceMeshExtensionProvider":
                return new ServiceMeshExtensionProvider(name, <any>undefined, { urn })
            case "alicloud:index/serviceMeshServiceMesh:ServiceMeshServiceMesh":
                return new ServiceMeshServiceMesh(name, <any>undefined, { urn })
            case "alicloud:index/serviceMeshUserPermission:ServiceMeshUserPermission":
                return new ServiceMeshUserPermission(name, <any>undefined, { urn })
            case "alicloud:index/simpleApplicationServerCustomImage:SimpleApplicationServerCustomImage":
                return new SimpleApplicationServerCustomImage(name, <any>undefined, { urn })
            case "alicloud:index/simpleApplicationServerFirewallRule:SimpleApplicationServerFirewallRule":
                return new SimpleApplicationServerFirewallRule(name, <any>undefined, { urn })
            case "alicloud:index/simpleApplicationServerInstance:SimpleApplicationServerInstance":
                return new SimpleApplicationServerInstance(name, <any>undefined, { urn })
            case "alicloud:index/simpleApplicationServerSnapshot:SimpleApplicationServerSnapshot":
                return new SimpleApplicationServerSnapshot(name, <any>undefined, { urn })
            case "alicloud:index/slb:Slb":
                return new Slb(name, <any>undefined, { urn })
            case "alicloud:index/slbAcl:SlbAcl":
                return new SlbAcl(name, <any>undefined, { urn })
            case "alicloud:index/slbAclEntryAttachment:SlbAclEntryAttachment":
                return new SlbAclEntryAttachment(name, <any>undefined, { urn })
            case "alicloud:index/slbAttachment:SlbAttachment":
                return new SlbAttachment(name, <any>undefined, { urn })
            case "alicloud:index/slbBackendServer:SlbBackendServer":
                return new SlbBackendServer(name, <any>undefined, { urn })
            case "alicloud:index/slbCaCertificate:SlbCaCertificate":
                return new SlbCaCertificate(name, <any>undefined, { urn })
            case "alicloud:index/slbDomainExtension:SlbDomainExtension":
                return new SlbDomainExtension(name, <any>undefined, { urn })
            case "alicloud:index/slbListener:SlbListener":
                return new SlbListener(name, <any>undefined, { urn })
            case "alicloud:index/slbLoadBalancer:SlbLoadBalancer":
                return new SlbLoadBalancer(name, <any>undefined, { urn })
            case "alicloud:index/slbMasterSlaveServerGroup:SlbMasterSlaveServerGroup":
                return new SlbMasterSlaveServerGroup(name, <any>undefined, { urn })
            case "alicloud:index/slbRule:SlbRule":
                return new SlbRule(name, <any>undefined, { urn })
            case "alicloud:index/slbServerCertificate:SlbServerCertificate":
                return new SlbServerCertificate(name, <any>undefined, { urn })
            case "alicloud:index/slbServerGroup:SlbServerGroup":
                return new SlbServerGroup(name, <any>undefined, { urn })
            case "alicloud:index/slbServerGroupServerAttachment:SlbServerGroupServerAttachment":
                return new SlbServerGroupServerAttachment(name, <any>undefined, { urn })
            case "alicloud:index/slbTlsCipherPolicy:SlbTlsCipherPolicy":
                return new SlbTlsCipherPolicy(name, <any>undefined, { urn })
            case "alicloud:index/slsAlert:SlsAlert":
                return new SlsAlert(name, <any>undefined, { urn })
            case "alicloud:index/slsScheduledSql:SlsScheduledSql":
                return new SlsScheduledSql(name, <any>undefined, { urn })
            case "alicloud:index/smartagFlowLog:SmartagFlowLog":
                return new SmartagFlowLog(name, <any>undefined, { urn })
            case "alicloud:index/smsShortUrl:SmsShortUrl":
                return new SmsShortUrl(name, <any>undefined, { urn })
            case "alicloud:index/snapshot:Snapshot":
                return new Snapshot(name, <any>undefined, { urn })
            case "alicloud:index/snapshotPolicy:SnapshotPolicy":
                return new SnapshotPolicy(name, <any>undefined, { urn })
            case "alicloud:index/snatEntry:SnatEntry":
                return new SnatEntry(name, <any>undefined, { urn })
            case "alicloud:index/sslCertificatesServiceCertificate:SslCertificatesServiceCertificate":
                return new SslCertificatesServiceCertificate(name, <any>undefined, { urn })
            case "alicloud:index/sslVpnClientCert:SslVpnClientCert":
                return new SslVpnClientCert(name, <any>undefined, { urn })
            case "alicloud:index/sslVpnServer:SslVpnServer":
                return new SslVpnServer(name, <any>undefined, { urn })
            case "alicloud:index/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "alicloud:index/tagMetaTag:TagMetaTag":
                return new TagMetaTag(name, <any>undefined, { urn })
            case "alicloud:index/tagPolicy:TagPolicy":
                return new TagPolicy(name, <any>undefined, { urn })
            case "alicloud:index/tagPolicyAttachment:TagPolicyAttachment":
                return new TagPolicyAttachment(name, <any>undefined, { urn })
            case "alicloud:index/threatDetectionAntiBruteForceRule:ThreatDetectionAntiBruteForceRule":
                return new ThreatDetectionAntiBruteForceRule(name, <any>undefined, { urn })
            case "alicloud:index/threatDetectionBackupPolicy:ThreatDetectionBackupPolicy":
                return new ThreatDetectionBackupPolicy(name, <any>undefined, { urn })
            case "alicloud:index/threatDetectionBaselineStrategy:ThreatDetectionBaselineStrategy":
                return new ThreatDetectionBaselineStrategy(name, <any>undefined, { urn })
            case "alicloud:index/threatDetectionClientFileProtect:ThreatDetectionClientFileProtect":
                return new ThreatDetectionClientFileProtect(name, <any>undefined, { urn })
            case "alicloud:index/threatDetectionClientUserDefineRule:ThreatDetectionClientUserDefineRule":
                return new ThreatDetectionClientUserDefineRule(name, <any>undefined, { urn })
            case "alicloud:index/threatDetectionFileUploadLimit:ThreatDetectionFileUploadLimit":
                return new ThreatDetectionFileUploadLimit(name, <any>undefined, { urn })
            case "alicloud:index/threatDetectionHoneyPot:ThreatDetectionHoneyPot":
                return new ThreatDetectionHoneyPot(name, <any>undefined, { urn })
            case "alicloud:index/threatDetectionHoneypotNode:ThreatDetectionHoneypotNode":
                return new ThreatDetectionHoneypotNode(name, <any>undefined, { urn })
            case "alicloud:index/threatDetectionHoneypotPreset:ThreatDetectionHoneypotPreset":
                return new ThreatDetectionHoneypotPreset(name, <any>undefined, { urn })
            case "alicloud:index/threatDetectionHoneypotProbe:ThreatDetectionHoneypotProbe":
                return new ThreatDetectionHoneypotProbe(name, <any>undefined, { urn })
            case "alicloud:index/threatDetectionImageEventOperation:ThreatDetectionImageEventOperation":
                return new ThreatDetectionImageEventOperation(name, <any>undefined, { urn })
            case "alicloud:index/threatDetectionInstance:ThreatDetectionInstance":
                return new ThreatDetectionInstance(name, <any>undefined, { urn })
            case "alicloud:index/threatDetectionMaliciousFileWhitelistConfig:ThreatDetectionMaliciousFileWhitelistConfig":
                return new ThreatDetectionMaliciousFileWhitelistConfig(name, <any>undefined, { urn })
            case "alicloud:index/threatDetectionOssScanConfig:ThreatDetectionOssScanConfig":
                return new ThreatDetectionOssScanConfig(name, <any>undefined, { urn })
            case "alicloud:index/threatDetectionSasTrail:ThreatDetectionSasTrail":
                return new ThreatDetectionSasTrail(name, <any>undefined, { urn })
            case "alicloud:index/threatDetectionVulWhitelist:ThreatDetectionVulWhitelist":
                return new ThreatDetectionVulWhitelist(name, <any>undefined, { urn })
            case "alicloud:index/threatDetectionWebLockConfig:ThreatDetectionWebLockConfig":
                return new ThreatDetectionWebLockConfig(name, <any>undefined, { urn })
            case "alicloud:index/tsdbInstance:TsdbInstance":
                return new TsdbInstance(name, <any>undefined, { urn })
            case "alicloud:index/videoSurveillanceSystemGroup:VideoSurveillanceSystemGroup":
                return new VideoSurveillanceSystemGroup(name, <any>undefined, { urn })
            case "alicloud:index/vodDomain:VodDomain":
                return new VodDomain(name, <any>undefined, { urn })
            case "alicloud:index/vodEditingProject:VodEditingProject":
                return new VodEditingProject(name, <any>undefined, { urn })
            case "alicloud:index/vpc:Vpc":
                return new Vpc(name, <any>undefined, { urn })
            case "alicloud:index/vpcBgpGroup:VpcBgpGroup":
                return new VpcBgpGroup(name, <any>undefined, { urn })
            case "alicloud:index/vpcBgpNetwork:VpcBgpNetwork":
                return new VpcBgpNetwork(name, <any>undefined, { urn })
            case "alicloud:index/vpcBgpPeer:VpcBgpPeer":
                return new VpcBgpPeer(name, <any>undefined, { urn })
            case "alicloud:index/vpcDhcpOptionsSet:VpcDhcpOptionsSet":
                return new VpcDhcpOptionsSet(name, <any>undefined, { urn })
            case "alicloud:index/vpcDhcpOptionsSetAttachment:VpcDhcpOptionsSetAttachment":
                return new VpcDhcpOptionsSetAttachment(name, <any>undefined, { urn })
            case "alicloud:index/vpcFlowLog:VpcFlowLog":
                return new VpcFlowLog(name, <any>undefined, { urn })
            case "alicloud:index/vpcGatewayEndpoint:VpcGatewayEndpoint":
                return new VpcGatewayEndpoint(name, <any>undefined, { urn })
            case "alicloud:index/vpcGatewayEndpointRouteTableAttachment:VpcGatewayEndpointRouteTableAttachment":
                return new VpcGatewayEndpointRouteTableAttachment(name, <any>undefined, { urn })
            case "alicloud:index/vpcGatewayRouteTableAttachment:VpcGatewayRouteTableAttachment":
                return new VpcGatewayRouteTableAttachment(name, <any>undefined, { urn })
            case "alicloud:index/vpcHaVip:VpcHaVip":
                return new VpcHaVip(name, <any>undefined, { urn })
            case "alicloud:index/vpcIpv4CidrBlock:VpcIpv4CidrBlock":
                return new VpcIpv4CidrBlock(name, <any>undefined, { urn })
            case "alicloud:index/vpcIpv4Gateway:VpcIpv4Gateway":
                return new VpcIpv4Gateway(name, <any>undefined, { urn })
            case "alicloud:index/vpcIpv6Address:VpcIpv6Address":
                return new VpcIpv6Address(name, <any>undefined, { urn })
            case "alicloud:index/vpcIpv6EgressRule:VpcIpv6EgressRule":
                return new VpcIpv6EgressRule(name, <any>undefined, { urn })
            case "alicloud:index/vpcIpv6Gateway:VpcIpv6Gateway":
                return new VpcIpv6Gateway(name, <any>undefined, { urn })
            case "alicloud:index/vpcIpv6InternetBandwidth:VpcIpv6InternetBandwidth":
                return new VpcIpv6InternetBandwidth(name, <any>undefined, { urn })
            case "alicloud:index/vpcNatIp:VpcNatIp":
                return new VpcNatIp(name, <any>undefined, { urn })
            case "alicloud:index/vpcNatIpCidr:VpcNatIpCidr":
                return new VpcNatIpCidr(name, <any>undefined, { urn })
            case "alicloud:index/vpcNetworkAclAttachment:VpcNetworkAclAttachment":
                return new VpcNetworkAclAttachment(name, <any>undefined, { urn })
            case "alicloud:index/vpcPeerConnection:VpcPeerConnection":
                return new VpcPeerConnection(name, <any>undefined, { urn })
            case "alicloud:index/vpcPeerConnectionAccepter:VpcPeerConnectionAccepter":
                return new VpcPeerConnectionAccepter(name, <any>undefined, { urn })
            case "alicloud:index/vpcPrefixList:VpcPrefixList":
                return new VpcPrefixList(name, <any>undefined, { urn })
            case "alicloud:index/vpcPublicIpAddressPool:VpcPublicIpAddressPool":
                return new VpcPublicIpAddressPool(name, <any>undefined, { urn })
            case "alicloud:index/vpcPublicIpAddressPoolCidrBlock:VpcPublicIpAddressPoolCidrBlock":
                return new VpcPublicIpAddressPoolCidrBlock(name, <any>undefined, { urn })
            case "alicloud:index/vpcTrafficMirrorFilter:VpcTrafficMirrorFilter":
                return new VpcTrafficMirrorFilter(name, <any>undefined, { urn })
            case "alicloud:index/vpcTrafficMirrorFilterEgressRule:VpcTrafficMirrorFilterEgressRule":
                return new VpcTrafficMirrorFilterEgressRule(name, <any>undefined, { urn })
            case "alicloud:index/vpcTrafficMirrorFilterIngressRule:VpcTrafficMirrorFilterIngressRule":
                return new VpcTrafficMirrorFilterIngressRule(name, <any>undefined, { urn })
            case "alicloud:index/vpcTrafficMirrorSession:VpcTrafficMirrorSession":
                return new VpcTrafficMirrorSession(name, <any>undefined, { urn })
            case "alicloud:index/vpcVbrHa:VpcVbrHa":
                return new VpcVbrHa(name, <any>undefined, { urn })
            case "alicloud:index/vpcVswitchCidrReservation:VpcVswitchCidrReservation":
                return new VpcVswitchCidrReservation(name, <any>undefined, { urn })
            case "alicloud:index/vpnConnection:VpnConnection":
                return new VpnConnection(name, <any>undefined, { urn })
            case "alicloud:index/vpnCustomerGateway:VpnCustomerGateway":
                return new VpnCustomerGateway(name, <any>undefined, { urn })
            case "alicloud:index/vpnGateway:VpnGateway":
                return new VpnGateway(name, <any>undefined, { urn })
            case "alicloud:index/vpnGatewayVcoRoute:VpnGatewayVcoRoute":
                return new VpnGatewayVcoRoute(name, <any>undefined, { urn })
            case "alicloud:index/vpnGatewayVpnAttachment:VpnGatewayVpnAttachment":
                return new VpnGatewayVpnAttachment(name, <any>undefined, { urn })
            case "alicloud:index/vpnIpsecServer:VpnIpsecServer":
                return new VpnIpsecServer(name, <any>undefined, { urn })
            case "alicloud:index/vpnPbrRouteEntry:VpnPbrRouteEntry":
                return new VpnPbrRouteEntry(name, <any>undefined, { urn })
            case "alicloud:index/vpnRouteEntry:VpnRouteEntry":
                return new VpnRouteEntry(name, <any>undefined, { urn })
            case "alicloud:index/vswitch:Vswitch":
                return new Vswitch(name, <any>undefined, { urn })
            case "alicloud:index/wafCertificate:WafCertificate":
                return new WafCertificate(name, <any>undefined, { urn })
            case "alicloud:index/wafDomain:WafDomain":
                return new WafDomain(name, <any>undefined, { urn })
            case "alicloud:index/wafInstance:WafInstance":
                return new WafInstance(name, <any>undefined, { urn })
            case "alicloud:index/wafProtectionModule:WafProtectionModule":
                return new WafProtectionModule(name, <any>undefined, { urn })
            case "alicloud:index/wafv3DefenseTemplate:Wafv3DefenseTemplate":
                return new Wafv3DefenseTemplate(name, <any>undefined, { urn })
            case "alicloud:index/wafv3Domain:Wafv3Domain":
                return new Wafv3Domain(name, <any>undefined, { urn })
            case "alicloud:index/wafv3Instance:Wafv3Instance":
                return new Wafv3Instance(name, <any>undefined, { urn })
            case "alicloud:index/yundunBastionhostInstance:YundunBastionhostInstance":
                return new YundunBastionhostInstance(name, <any>undefined, { urn })
            case "alicloud:index/yundunDbauditInstance:YundunDbauditInstance":
                return new YundunDbauditInstance(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alicloud", "index/ackOneCluster", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/actiontrail", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/actiontrailGlobalEventsStorageRegion", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/actiontrailHistoryDeliveryJob", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/actiontrailTrail", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/adbAccount", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/adbBackupPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/adbCluster", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/adbConnection", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/adbDbCluster", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/adbDbClusterLakeVersion", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/adbLakeAccount", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/adbResourceGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/albAcl", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/albAclEntryAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/albAscript", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/albHealthCheckTemplate", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/albListener", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/albListenerAclAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/albListenerAdditionalCertificateAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/albLoadBalancer", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/albLoadBalancerCommonBandwidthPackageAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/albLoadBalancerSecurityGroupAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/albRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/albSecurityPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/albServerGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/alidnsAccessStrategy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/alidnsAddressPool", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/alidnsCustomLine", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/alidnsDomain", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/alidnsDomainAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/alidnsDomainGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/alidnsGtmInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/alidnsInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/alidnsMonitorConfig", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/alidnsRecord", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/aligreenAuditCallback", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/aligreenBizType", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/aligreenCallback", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/aligreenImageLib", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/aligreenKeywordLib", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/aligreenOssStockTask", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/alikafkaConsumerGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/alikafkaInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/alikafkaInstanceAllowedIpAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/alikafkaSaslAcl", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/alikafkaSaslUser", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/alikafkaTopic", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/amqpBinding", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/amqpExchange", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/amqpInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/amqpQueue", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/amqpStaticAccount", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/amqpVirtualHost", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/apiGatewayAccessControlList", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/apiGatewayAclEntryAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/apiGatewayApi", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/apiGatewayApp", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/apiGatewayAppAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/apiGatewayBackend", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/apiGatewayGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/apiGatewayInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/apiGatewayInstanceAclAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/apiGatewayLogConfig", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/apiGatewayModel", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/apiGatewayPlugin", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/apiGatewayPluginAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/apiGatewayVpcAccess", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/armsAddonRelease", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/armsAlertContact", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/armsAlertContactGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/armsDispatchRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/armsEnvCustomJob", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/armsEnvFeature", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/armsEnvPodMonitor", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/armsEnvServiceMonitor", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/armsEnvironment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/armsGrafanaWorkspace", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/armsIntegrationExporter", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/armsPrometheus", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/armsPrometheusAlertRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/armsPrometheusMonitoring", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/armsRemoteWrite", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/armsSyntheticTask", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/autoProvisioningGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/bastionhostHost", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/bastionhostHostAccount", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/bastionhostHostAccountShareKeyAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/bastionhostHostAccountUserAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/bastionhostHostAccountUserGroupAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/bastionhostHostAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/bastionhostHostGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/bastionhostHostGroupAccountUserAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/bastionhostHostGroupAccountUserGroupAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/bastionhostHostShareKey", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/bastionhostInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/bastionhostUser", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/bastionhostUserAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/bastionhostUserGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/bpStudioApplication", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/brainIndustrialPidLoop", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/brainIndustrialPidOrganization", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/brainIndustrialPidProject", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/casCertificate", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cassandraBackupPlan", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cassandraCluster", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cassandraDataCenter", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cddcDedicatedHost", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cddcDedicatedHostAccount", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cddcDedicatedHostGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cddcDedicatedPropreHost", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cdnDomain", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cdnDomainConfig", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cdnDomainNew", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cdnFcTrigger", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cdnRealTimeLogDelivery", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenBandwidthLimit", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenBandwidthPackage", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenBandwidthPackageAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenChildInstanceRouteEntryToAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenFlowlog", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenInstanceAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenInstanceGrant", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenInterRegionTrafficQosPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenInterRegionTrafficQosQueue", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenPrivateZone", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenRouteEntry", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenRouteMap", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenRouteService", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenTrafficMarkingPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenTransitRouteTableAggregation", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenTransitRouter", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenTransitRouterCidr", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenTransitRouterEcrAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenTransitRouterGrantAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenTransitRouterMulticastDomain", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenTransitRouterMulticastDomainAssociation", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenTransitRouterMulticastDomainMember", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenTransitRouterMulticastDomainPeerMember", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenTransitRouterMulticastDomainSource", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenTransitRouterPeerAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenTransitRouterPrefixListAssociation", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenTransitRouterRouteEntry", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenTransitRouterRouteTable", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenTransitRouterRouteTableAssociation", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenTransitRouterRouteTablePropagation", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenTransitRouterVbrAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenTransitRouterVpcAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenTransitRouterVpnAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cenVbrHealthCheck", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/chatbotPublishTask", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/clickHouseAccount", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/clickHouseBackupPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/clickHouseDbCluster", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudConnectNetwork", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudConnectNetworkAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudConnectNetworkGrant", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudFirewallAddressBook", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudFirewallControlPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudFirewallControlPolicyOrder", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudFirewallInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudFirewallInstanceMember", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudFirewallNatFirewall", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudFirewallNatFirewallControlPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudFirewallVpcCenTrFirewall", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudFirewallVpcFirewall", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudFirewallVpcFirewallCen", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudFirewallVpcFirewallControlPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudMonitorServiceBasicPublic", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudMonitorServiceEnterprisePublic", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudMonitorServiceGroupMonitoringAgentProcess", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudMonitorServiceHybridDoubleWrite", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudMonitorServiceMonitoringAgentProcess", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudSsoAccessAssignment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudSsoAccessConfiguration", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudSsoAccessConfigurationProvisioning", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudSsoDirectory", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudSsoGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudSsoScimServerCredential", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudSsoUser", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudSsoUserAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudStorageGatewayExpressSync", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudStorageGatewayExpressSyncShareAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudStorageGatewayGateway", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudStorageGatewayGatewayBlockVolume", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudStorageGatewayGatewayCacheDisk", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudStorageGatewayGatewayFileShare", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudStorageGatewayGatewayLogging", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudStorageGatewayGatewaySmbUser", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudStorageGatewayStorageBundle", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cloudauthFaceConfig", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cmsAlarm", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cmsAlarmContact", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cmsAlarmContactGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cmsDynamicTagGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cmsEventRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cmsGroupMetricRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cmsHybridMonitorFcTask", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cmsHybridMonitorSlsTask", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cmsMetricRuleBlackList", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cmsMetricRuleTemplate", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cmsMonitorGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cmsMonitorGroupInstances", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cmsNamespace", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cmsSiteMonitor", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/cmsSlsGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/commonBandwidthPackage", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/commonBandwidthPackageAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/computeNestServiceInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/configAggregateCompliancePack", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/configAggregateConfigRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/configAggregateDelivery", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/configAggregator", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/configCompliancePack", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/configConfigurationRecorder", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/configDelivery", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/configDeliveryChannel", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/configRemediation", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/configRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/containerCluster", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/copyImage", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/crChain", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/crChartNamespace", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/crChartRepository", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/crEeInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/crEeNamespace", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/crEeRepo", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/crEeSyncRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/crEndpointAclPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/crNamespace", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/crRepo", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/crVpcEndpointLinkedVpc", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/csApplication", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/csAutoscalingConfig", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/csEdgeKubernetes", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/csKubernetes", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/csKubernetesAddon", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/csKubernetesAutoscaler", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/csKubernetesNodePool", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/csKubernetesPermissions", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/csManagedKubernetes", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/csServerlessKubernetes", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/csSwarm", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dasSwitchDasPro", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dataWorksFolder", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dataWorksProject", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/databaseGatewayGateway", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/datahubProject", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/datahubSubscription", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/datahubTopic", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dbAccount", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dbAccountPrivilege", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dbBackupPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dbConnection", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dbDatabase", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dbInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dbReadWriteSplittingConnection", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dbReadonlyInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dbfsAutoSnapShotPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dbfsInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dbfsInstanceAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dbfsServiceLinkedRole", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dbfsSnapshot", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dbsBackupPlan", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dcdnDomain", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dcdnDomainConfig", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dcdnEr", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dcdnIpaDomain", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dcdnKv", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dcdnKvNamespace", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dcdnWafDomain", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dcdnWafPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dcdnWafPolicyDomainAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dcdnWafRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ddosBasicDefenseThreshold", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ddosBasicThreshold", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ddosBgpPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ddosbgpInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ddosbgpIp", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ddoscooDomainResource", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ddoscooInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ddoscooPort", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ddoscooSchedulerRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dfsAccessGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dfsAccessRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dfsFileSystem", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dfsMountPoint", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dfsVscMountPoint", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/directMailDomain", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/directMailMailAddress", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/directMailReceivers", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/directMailTag", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/disk", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/diskAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dmsEnterpriseAuthorityTemplate", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dmsEnterpriseInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dmsEnterpriseLogicDatabase", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dmsEnterpriseProxy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dmsEnterpriseProxyAccess", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dmsEnterpriseUser", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dns", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dnsDomain", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dnsDomainAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dnsGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dnsInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dnsRecord", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/drdsInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/drdsPolardbxInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dtsConsumerChannel", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dtsInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dtsJobMonitorRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dtsMigrationInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dtsMigrationJob", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dtsSubscriptionJob", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dtsSynchronizationInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/dtsSynchronizationJob", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/eaisInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ebsDedicatedBlockStorageCluster", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ebsDiskReplicaGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ebsDiskReplicaPair", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ebsEnterpriseSnapshotPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ebsEnterpriseSnapshotPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ebsReplicaGroupDrill", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ebsReplicaPairDrill", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ebsSolutionInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecdAdConnectorDirectory", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecdAdConnectorOfficeSite", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecdBundle", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecdCommand", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecdCustomProperty", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecdDesktop", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecdImage", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecdNasFileSystem", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecdNetworkPackage", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecdPolicyGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecdRamDirectory", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecdSimpleOfficeSite", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecdSnapshot", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecdUser", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/eciContainerGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/eciImageCache", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/eciOpenapiImageCache", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/eciVirtualNode", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecpInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecpKeyPair", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecsActivation", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecsAutoSnapshotPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecsAutoSnapshotPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecsCapacityReservation", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecsCommand", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecsDedicatedHost", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecsDedicatedHostCluster", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecsDeploymentSet", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecsDisk", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecsDiskAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecsElasticityAssurance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecsHpcCluster", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecsImageComponent", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecsImagePipeline", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecsInstanceSet", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecsInvocation", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecsKeyPair", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecsKeyPairAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecsLaunchTemplate", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecsNetworkInterface", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecsNetworkInterfaceAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecsNetworkInterfacePermission", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecsPrefixList", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecsSessionManagerStatus", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecsSnapshot", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecsSnapshotGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ecsStorageCapacityUnit", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/edasApplication", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/edasApplicationDeployment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/edasApplicationScale", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/edasCluster", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/edasDeployGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/edasInstanceClusterAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/edasK8sApplication", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/edasK8sCluster", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/edasK8sSlbAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/edasNamespace", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/edasSlbAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/efloSubnet", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/efloVpd", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ehpcCluster", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ehpcJobTemplate", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/eip", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/eipAddress", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/eipAssociation", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/eipSegmentAddress", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/eipanycastAnycastEipAddress", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/eipanycastAnycastEipAddressAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/elasticsearchInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/emrCluster", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/emrv2Cluster", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ensDisk", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ensDiskInstanceAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ensEip", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ensEipInstanceAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ensImage", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ensInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ensInstanceSecurityGroupAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ensKeyPair", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ensLoadBalancer", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ensNatGateway", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ensNetwork", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ensSecurityGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ensSnapshot", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ensVswitch", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/essAlarm", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/essAlbServerGroupAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/essAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/essEciScalingConfiguration", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/essLifecycleHook", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/essNotification", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/essScalingConfiguration", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/essScalingGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/essScalingRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/essScalinggroupVserverGroups", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/essSchedule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/essScheduledTask", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/essSuspendProcess", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/eventBridgeApiDestination", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/eventBridgeConnection", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/eventBridgeEventBus", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/eventBridgeEventSource", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/eventBridgeRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/eventBridgeServiceLinkedRole", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/eventBridgeSlr", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/expressConnectEcFailoverTestJob", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/expressConnectGrantRuleToCen", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/expressConnectPhysicalConnection", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/expressConnectRouterExpressConnectRouter", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/expressConnectRouterInterface", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/expressConnectRouterTrAssociation", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/expressConnectRouterVbrChildInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/expressConnectRouterVpcAssociation", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/expressConnectTrafficQos", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/expressConnectTrafficQosAssociation", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/expressConnectTrafficQosQueue", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/expressConnectTrafficQosRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/expressConnectVbrPconnAssociation", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/expressConnectVirtualBorderRouter", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/expressConnectVirtualPhysicalConnection", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/fcAlias", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/fcCustomDomain", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/fcFunction", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/fcFunctionAsyncInvokeConfig", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/fcLayerVersion", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/fcService", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/fcTrigger", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/fcv2Function", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/fcv3Alias", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/fcv3AsyncInvokeConfig", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/fcv3ConcurrencyConfig", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/fcv3CustomDomain", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/fcv3Function", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/fcv3FunctionVersion", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/fcv3Trigger", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/fnfExecution", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/fnfFlow", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/fnfSchedule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/forwardEntry", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gaAccelerator", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gaAcceleratorSpareIpAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gaAccessLog", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gaAcl", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gaAclAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gaAclEntryAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gaAdditionalCertificate", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gaBandwidthPackage", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gaBandwidthPackageAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gaBasicAccelerateIp", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gaBasicAccelerateIpEndpointRelation", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gaBasicAccelerator", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gaBasicEndpoint", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gaBasicEndpointGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gaBasicIpSet", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gaCustomRoutingEndpoint", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gaCustomRoutingEndpointGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gaCustomRoutingEndpointGroupDestination", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gaCustomRoutingEndpointTrafficPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gaDomain", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gaEndpointGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gaForwardingRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gaIpSet", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gaListener", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/governanceAccount", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/governanceBaseline", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gpdbAccount", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gpdbBackupPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gpdbConnection", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gpdbDbInstancePlan", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gpdbDbResourceGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gpdbElasticInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gpdbExternalDataService", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gpdbInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gpdbRemoteAdbDataSource", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gpdbStreamingDataService", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/gpdbStreamingDataSource", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/graphDatabaseDbInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/havip", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/havipAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/hbaseInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/hbrEcsBackupClient", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/hbrEcsBackupPlan", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/hbrHanaBackupClient", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/hbrHanaBackupPlan", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/hbrHanaInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/hbrNasBackupPlan", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/hbrOssBackupPlan", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/hbrOtsBackupPlan", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/hbrPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/hbrPolicyBinding", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/hbrReplicationVault", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/hbrRestoreJob", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/hbrServerBackupPlan", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/hbrVault", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/hologramInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/image", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/imageCopy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/imageExport", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/imageImport", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/imageSharePermission", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/immProject", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/impAppTemplate", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/imsOidcProvider", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/instance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/iotDeviceGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/keyPair", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/keyPairAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/kmsAlias", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/kmsApplicationAccessPoint", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/kmsCiphertext", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/kmsClientKey", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/kmsInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/kmsKey", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/kmsKeyVersion", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/kmsNetworkRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/kmsPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/kmsSecret", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/kvstoreAccount", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/kvstoreAuditLogConfig", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/kvstoreBackupPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/kvstoreConnection", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/kvstoreInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/launchTemplate", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/lindormInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/logAlert", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/logAlertResource", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/logAudit", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/logDashboard", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/logEtl", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/logIngestion", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/logMachineGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/logOssExport", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/logOssShipper", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/logProject", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/logResource", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/logResourceRecord", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/logStore", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/logStoreIndex", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/logtailAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/logtailConfig", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/marketOrder", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/maxcomputeProject", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/messageServiceQueue", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/messageServiceSubscription", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/messageServiceTopic", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/mhubApp", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/mhubProduct", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/mnsQueue", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/mnsTopic", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/mnsTopicSubscription", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/mongodbAccount", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/mongodbAuditPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/mongodbInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/mongodbServerlessInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/mongodbShardingInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/mongodbShardingNetworkPrivateAddress", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/mongodbShardingNetworkPublicAddress", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/mscSubContact", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/mscSubSubscription", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/mscSubWebhook", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/mseCluster", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/mseEngineNamespace", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/mseGateway", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/mseZnode", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/nasAccessGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/nasAccessPoint", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/nasAccessRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/nasAutoSnapshotPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/nasDataFlow", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/nasFileSystem", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/nasFileset", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/nasLifecyclePolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/nasMountTarget", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/nasRecycleBin", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/nasSmbAclAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/nasSnapshot", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/natGateway", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/networkAcl", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/networkAclAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/networkAclEntries", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/networkInterface", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/networkInterfaceAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/nlbListener", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/nlbListenerAdditionalCertificateAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/nlbLoadBalancer", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/nlbLoadBalancerSecurityGroupAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/nlbLoadbalancerCommonBandwidthPackageAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/nlbSecurityPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/nlbServerGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/nlbServerGroupServerAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/oceanBaseInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/onsGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/onsInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/onsTopic", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/oosApplication", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/oosApplicationGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/oosDefaultPatchBaseline", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/oosExecution", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/oosParameter", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/oosPatchBaseline", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/oosSecretParameter", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/oosServiceSetting", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/oosStateConfiguration", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/oosTemplate", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/openSearchAppGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ossAccountPublicAccessBlock", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ossBucket", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ossBucketAccessMonitor", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ossBucketAcl", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ossBucketCors", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ossBucketDataRedundancyTransition", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ossBucketHttpsConfig", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ossBucketLogging", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ossBucketMetaQuery", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ossBucketObject", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ossBucketPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ossBucketPublicAccessBlock", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ossBucketReferer", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ossBucketReplication", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ossBucketRequestPayment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ossBucketServerSideEncryption", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ossBucketTransferAcceleration", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ossBucketUserDefinedLogFields", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ossBucketVersioning", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/otsInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/otsInstanceAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/otsSearchIndex", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/otsSecondaryIndex", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/otsTable", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/otsTunnel", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/polardbAccount", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/polardbAccountPrivilege", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/polardbBackupPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/polardbCluster", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/polardbClusterEndpoint", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/polardbDatabase", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/polardbEndpoint", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/polardbEndpointAddress", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/polardbGlobalDatabaseNetwork", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/polardbParameterGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/polardbPrimaryEndpoint", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/privatelinkVpcEndpoint", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/privatelinkVpcEndpointConnection", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/privatelinkVpcEndpointService", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/privatelinkVpcEndpointServiceResource", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/privatelinkVpcEndpointServiceUser", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/privatelinkVpcEndpointZone", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/pvtzEndpoint", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/pvtzRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/pvtzRuleAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/pvtzUserVpcAuthorization", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/pvtzZone", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/pvtzZoneAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/pvtzZoneRecord", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/quickBiUser", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/quotasApplicationInfo", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/quotasQuotaAlarm", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/quotasQuotaApplication", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/quotasTemplateApplications", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/quotasTemplateQuota", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ramAccessKey", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ramAccountAlias", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ramAccountPasswordPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ramAlias", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ramGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ramGroupMembership", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ramGroupPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ramLoginProfile", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ramPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ramRole", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ramRoleAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ramRolePolicyAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ramSamlProvider", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ramSecurityPreference", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ramUser", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/ramUserPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/rdcOrganization", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/rdsAccount", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/rdsBackup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/rdsCloneDbInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/rdsDbInstanceEndpoint", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/rdsDbInstanceEndpointAddress", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/rdsDbNode", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/rdsDbProxy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/rdsDdrInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/rdsInstanceCrossBackupPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/rdsParameterGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/rdsServiceLinkedRole", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/rdsUpgradeDbInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/realtimeComputeVvpInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/redisTairInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/reservedInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/resourceManagerAccount", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/resourceManagerControlPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/resourceManagerControlPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/resourceManagerDelegatedAdministrator", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/resourceManagerFolder", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/resourceManagerHandshake", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/resourceManagerPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/resourceManagerPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/resourceManagerPolicyVersion", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/resourceManagerResourceDirectory", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/resourceManagerResourceGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/resourceManagerResourceShare", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/resourceManagerRole", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/resourceManagerSavedQuery", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/resourceManagerServiceLinkedRole", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/resourceManagerSharedResource", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/resourceManagerSharedTarget", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/rocketmqConsumerGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/rocketmqInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/rocketmqTopic", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/rosChangeSet", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/rosStack", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/rosStackGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/rosStackInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/rosTemplate", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/rosTemplateScratch", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/routeEntry", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/routeTable", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/routeTableAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/routerInterface", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/routerInterfaceConnection", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/saeApplication", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/saeApplicationScalingRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/saeConfigMap", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/saeGreyTagRoute", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/saeIngress", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/saeLoadBalancerInternet", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/saeLoadBalancerIntranet", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/saeNamespace", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/sagAcl", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/sagAclRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/sagClientUser", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/sagDnatEntry", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/sagQos", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/sagQosCar", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/sagQosPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/sagSnatEntry", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/scdnDomain", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/scdnDomainConfig", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/schedulerxNamespace", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/sddpConfig", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/sddpDataLimit", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/sddpInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/sddpRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/securityCenterGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/securityCenterServiceLinkedRole", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/securityGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/securityGroupRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/selectdbDbCluster", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/selectdbDbInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/serviceCatalogPortfolio", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/serviceCatalogProvisionedProduct", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/serviceMeshExtensionProvider", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/serviceMeshServiceMesh", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/serviceMeshUserPermission", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/simpleApplicationServerCustomImage", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/simpleApplicationServerFirewallRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/simpleApplicationServerInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/simpleApplicationServerSnapshot", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/slb", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/slbAcl", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/slbAclEntryAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/slbAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/slbBackendServer", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/slbCaCertificate", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/slbDomainExtension", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/slbListener", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/slbLoadBalancer", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/slbMasterSlaveServerGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/slbRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/slbServerCertificate", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/slbServerGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/slbServerGroupServerAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/slbTlsCipherPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/slsAlert", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/slsScheduledSql", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/smartagFlowLog", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/smsShortUrl", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/snapshot", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/snapshotPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/snatEntry", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/sslCertificatesServiceCertificate", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/sslVpnClientCert", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/sslVpnServer", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/subnet", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/tagMetaTag", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/tagPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/tagPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/threatDetectionAntiBruteForceRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/threatDetectionBackupPolicy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/threatDetectionBaselineStrategy", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/threatDetectionClientFileProtect", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/threatDetectionClientUserDefineRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/threatDetectionFileUploadLimit", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/threatDetectionHoneyPot", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/threatDetectionHoneypotNode", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/threatDetectionHoneypotPreset", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/threatDetectionHoneypotProbe", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/threatDetectionImageEventOperation", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/threatDetectionInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/threatDetectionMaliciousFileWhitelistConfig", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/threatDetectionOssScanConfig", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/threatDetectionSasTrail", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/threatDetectionVulWhitelist", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/threatDetectionWebLockConfig", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/tsdbInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/videoSurveillanceSystemGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vodDomain", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vodEditingProject", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpc", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcBgpGroup", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcBgpNetwork", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcBgpPeer", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcDhcpOptionsSet", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcDhcpOptionsSetAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcFlowLog", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcGatewayEndpoint", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcGatewayEndpointRouteTableAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcGatewayRouteTableAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcHaVip", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcIpv4CidrBlock", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcIpv4Gateway", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcIpv6Address", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcIpv6EgressRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcIpv6Gateway", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcIpv6InternetBandwidth", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcNatIp", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcNatIpCidr", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcNetworkAclAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcPeerConnection", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcPeerConnectionAccepter", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcPrefixList", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcPublicIpAddressPool", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcPublicIpAddressPoolCidrBlock", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcTrafficMirrorFilter", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcTrafficMirrorFilterEgressRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcTrafficMirrorFilterIngressRule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcTrafficMirrorSession", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcVbrHa", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpcVswitchCidrReservation", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpnConnection", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpnCustomerGateway", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpnGateway", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpnGatewayVcoRoute", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpnGatewayVpnAttachment", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpnIpsecServer", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpnPbrRouteEntry", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vpnRouteEntry", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/vswitch", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/wafCertificate", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/wafDomain", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/wafInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/wafProtectionModule", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/wafv3DefenseTemplate", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/wafv3Domain", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/wafv3Instance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/yundunBastionhostInstance", _module)
pulumi.runtime.registerResourceModule("alicloud", "index/yundunDbauditInstance", _module)
pulumi.runtime.registerResourcePackage("alicloud", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:alicloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
