// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AmqpExchange extends pulumi.CustomResource {
    /**
     * Get an existing AmqpExchange resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AmqpExchangeState, opts?: pulumi.CustomResourceOptions): AmqpExchange {
        return new AmqpExchange(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/amqpExchange:AmqpExchange';

    /**
     * Returns true if the given object is an instance of AmqpExchange.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AmqpExchange {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AmqpExchange.__pulumiType;
    }

    public readonly alternateExchange!: pulumi.Output<string | undefined>;
    public readonly autoDeleteState!: pulumi.Output<boolean>;
    public readonly exchangeName!: pulumi.Output<string>;
    public readonly exchangeType!: pulumi.Output<string>;
    public readonly instanceId!: pulumi.Output<string>;
    public readonly internal!: pulumi.Output<boolean>;
    public readonly virtualHostName!: pulumi.Output<string>;

    /**
     * Create a AmqpExchange resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AmqpExchangeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AmqpExchangeArgs | AmqpExchangeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AmqpExchangeState | undefined;
            resourceInputs["alternateExchange"] = state ? state.alternateExchange : undefined;
            resourceInputs["autoDeleteState"] = state ? state.autoDeleteState : undefined;
            resourceInputs["exchangeName"] = state ? state.exchangeName : undefined;
            resourceInputs["exchangeType"] = state ? state.exchangeType : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["internal"] = state ? state.internal : undefined;
            resourceInputs["virtualHostName"] = state ? state.virtualHostName : undefined;
        } else {
            const args = argsOrState as AmqpExchangeArgs | undefined;
            if ((!args || args.autoDeleteState === undefined) && !opts.urn) {
                throw new Error("Missing required property 'autoDeleteState'");
            }
            if ((!args || args.exchangeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'exchangeName'");
            }
            if ((!args || args.exchangeType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'exchangeType'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.internal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'internal'");
            }
            if ((!args || args.virtualHostName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualHostName'");
            }
            resourceInputs["alternateExchange"] = args ? args.alternateExchange : undefined;
            resourceInputs["autoDeleteState"] = args ? args.autoDeleteState : undefined;
            resourceInputs["exchangeName"] = args ? args.exchangeName : undefined;
            resourceInputs["exchangeType"] = args ? args.exchangeType : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["internal"] = args ? args.internal : undefined;
            resourceInputs["virtualHostName"] = args ? args.virtualHostName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AmqpExchange.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AmqpExchange resources.
 */
export interface AmqpExchangeState {
    alternateExchange?: pulumi.Input<string>;
    autoDeleteState?: pulumi.Input<boolean>;
    exchangeName?: pulumi.Input<string>;
    exchangeType?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    internal?: pulumi.Input<boolean>;
    virtualHostName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AmqpExchange resource.
 */
export interface AmqpExchangeArgs {
    alternateExchange?: pulumi.Input<string>;
    autoDeleteState: pulumi.Input<boolean>;
    exchangeName: pulumi.Input<string>;
    exchangeType: pulumi.Input<string>;
    instanceId: pulumi.Input<string>;
    internal: pulumi.Input<boolean>;
    virtualHostName: pulumi.Input<string>;
}
