// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GaListener extends pulumi.CustomResource {
    /**
     * Get an existing GaListener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GaListenerState, opts?: pulumi.CustomResourceOptions): GaListener {
        return new GaListener(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/gaListener:GaListener';

    /**
     * Returns true if the given object is an instance of GaListener.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GaListener {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GaListener.__pulumiType;
    }

    public readonly acceleratorId!: pulumi.Output<string>;
    public readonly certificates!: pulumi.Output<outputs.GaListenerCertificate[] | undefined>;
    public readonly clientAffinity!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly forwardedForConfig!: pulumi.Output<outputs.GaListenerForwardedForConfig | undefined>;
    public readonly httpVersion!: pulumi.Output<string>;
    public readonly idleTimeout!: pulumi.Output<number>;
    public readonly listenerType!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly portRanges!: pulumi.Output<outputs.GaListenerPortRange[]>;
    public readonly protocol!: pulumi.Output<string | undefined>;
    public readonly proxyProtocol!: pulumi.Output<boolean | undefined>;
    public readonly requestTimeout!: pulumi.Output<number>;
    public readonly securityPolicyId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.GaListenerTimeouts | undefined>;

    /**
     * Create a GaListener resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GaListenerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GaListenerArgs | GaListenerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GaListenerState | undefined;
            resourceInputs["acceleratorId"] = state ? state.acceleratorId : undefined;
            resourceInputs["certificates"] = state ? state.certificates : undefined;
            resourceInputs["clientAffinity"] = state ? state.clientAffinity : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["forwardedForConfig"] = state ? state.forwardedForConfig : undefined;
            resourceInputs["httpVersion"] = state ? state.httpVersion : undefined;
            resourceInputs["idleTimeout"] = state ? state.idleTimeout : undefined;
            resourceInputs["listenerType"] = state ? state.listenerType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["portRanges"] = state ? state.portRanges : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["proxyProtocol"] = state ? state.proxyProtocol : undefined;
            resourceInputs["requestTimeout"] = state ? state.requestTimeout : undefined;
            resourceInputs["securityPolicyId"] = state ? state.securityPolicyId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as GaListenerArgs | undefined;
            if ((!args || args.acceleratorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'acceleratorId'");
            }
            if ((!args || args.portRanges === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portRanges'");
            }
            resourceInputs["acceleratorId"] = args ? args.acceleratorId : undefined;
            resourceInputs["certificates"] = args ? args.certificates : undefined;
            resourceInputs["clientAffinity"] = args ? args.clientAffinity : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["forwardedForConfig"] = args ? args.forwardedForConfig : undefined;
            resourceInputs["httpVersion"] = args ? args.httpVersion : undefined;
            resourceInputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            resourceInputs["listenerType"] = args ? args.listenerType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["portRanges"] = args ? args.portRanges : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["proxyProtocol"] = args ? args.proxyProtocol : undefined;
            resourceInputs["requestTimeout"] = args ? args.requestTimeout : undefined;
            resourceInputs["securityPolicyId"] = args ? args.securityPolicyId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GaListener.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GaListener resources.
 */
export interface GaListenerState {
    acceleratorId?: pulumi.Input<string>;
    certificates?: pulumi.Input<pulumi.Input<inputs.GaListenerCertificate>[]>;
    clientAffinity?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    forwardedForConfig?: pulumi.Input<inputs.GaListenerForwardedForConfig>;
    httpVersion?: pulumi.Input<string>;
    idleTimeout?: pulumi.Input<number>;
    listenerType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    portRanges?: pulumi.Input<pulumi.Input<inputs.GaListenerPortRange>[]>;
    protocol?: pulumi.Input<string>;
    proxyProtocol?: pulumi.Input<boolean>;
    requestTimeout?: pulumi.Input<number>;
    securityPolicyId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GaListenerTimeouts>;
}

/**
 * The set of arguments for constructing a GaListener resource.
 */
export interface GaListenerArgs {
    acceleratorId: pulumi.Input<string>;
    certificates?: pulumi.Input<pulumi.Input<inputs.GaListenerCertificate>[]>;
    clientAffinity?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    forwardedForConfig?: pulumi.Input<inputs.GaListenerForwardedForConfig>;
    httpVersion?: pulumi.Input<string>;
    idleTimeout?: pulumi.Input<number>;
    listenerType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    portRanges: pulumi.Input<pulumi.Input<inputs.GaListenerPortRange>[]>;
    protocol?: pulumi.Input<string>;
    proxyProtocol?: pulumi.Input<boolean>;
    requestTimeout?: pulumi.Input<number>;
    securityPolicyId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GaListenerTimeouts>;
}
