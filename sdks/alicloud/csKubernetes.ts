// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CsKubernetes extends pulumi.CustomResource {
    /**
     * Get an existing CsKubernetes resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CsKubernetesState, opts?: pulumi.CustomResourceOptions): CsKubernetes {
        return new CsKubernetes(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/csKubernetes:CsKubernetes';

    /**
     * Returns true if the given object is an instance of CsKubernetes.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CsKubernetes {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CsKubernetes.__pulumiType;
    }

    public readonly addons!: pulumi.Output<outputs.CsKubernetesAddon[] | undefined>;
    public readonly apiAudiences!: pulumi.Output<string[] | undefined>;
    public readonly availabilityZone!: pulumi.Output<string>;
    public /*out*/ readonly certificateAuthority!: pulumi.Output<{[key: string]: string}>;
    public readonly clientCert!: pulumi.Output<string | undefined>;
    public readonly clientKey!: pulumi.Output<string | undefined>;
    public readonly clusterCaCert!: pulumi.Output<string | undefined>;
    /**
     * cluster local domain
     */
    public readonly clusterDomain!: pulumi.Output<string | undefined>;
    public readonly clusterNetworkType!: pulumi.Output<string | undefined>;
    public /*out*/ readonly connections!: pulumi.Output<{[key: string]: string}>;
    public readonly cpuPolicy!: pulumi.Output<string | undefined>;
    public readonly customSan!: pulumi.Output<string | undefined>;
    public readonly deleteOptions!: pulumi.Output<outputs.CsKubernetesDeleteOption[] | undefined>;
    public readonly deletionProtection!: pulumi.Output<boolean | undefined>;
    public readonly enableSsh!: pulumi.Output<boolean | undefined>;
    public readonly excludeAutoscalerNodes!: pulumi.Output<boolean | undefined>;
    public readonly forceUpdate!: pulumi.Output<boolean | undefined>;
    public readonly imageId!: pulumi.Output<string>;
    public readonly installCloudMonitor!: pulumi.Output<boolean | undefined>;
    public readonly isEnterpriseSecurityGroup!: pulumi.Output<boolean>;
    public readonly keyName!: pulumi.Output<string | undefined>;
    public readonly kmsEncryptedPassword!: pulumi.Output<string | undefined>;
    public readonly kmsEncryptionContext!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly kubeConfig!: pulumi.Output<string | undefined>;
    public readonly loadBalancerSpec!: pulumi.Output<string | undefined>;
    public readonly logConfig!: pulumi.Output<outputs.CsKubernetesLogConfig | undefined>;
    public readonly masterAutoRenew!: pulumi.Output<boolean | undefined>;
    public readonly masterAutoRenewPeriod!: pulumi.Output<number | undefined>;
    public readonly masterDiskCategory!: pulumi.Output<string | undefined>;
    public readonly masterDiskPerformanceLevel!: pulumi.Output<string | undefined>;
    public readonly masterDiskSize!: pulumi.Output<number | undefined>;
    public readonly masterDiskSnapshotPolicyId!: pulumi.Output<string | undefined>;
    public readonly masterInstanceChargeType!: pulumi.Output<string | undefined>;
    public readonly masterInstanceType!: pulumi.Output<string | undefined>;
    public readonly masterInstanceTypes!: pulumi.Output<string[]>;
    public /*out*/ readonly masterNodes!: pulumi.Output<outputs.CsKubernetesMasterNode[]>;
    public readonly masterPeriod!: pulumi.Output<number | undefined>;
    public readonly masterPeriodUnit!: pulumi.Output<string | undefined>;
    public readonly masterVswitchIds!: pulumi.Output<string[]>;
    public readonly name!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly namePrefix!: pulumi.Output<string | undefined>;
    public /*out*/ readonly natGatewayId!: pulumi.Output<string>;
    public readonly newNatGateway!: pulumi.Output<boolean | undefined>;
    public readonly nodeCidrMask!: pulumi.Output<number | undefined>;
    public readonly nodeNameMode!: pulumi.Output<string>;
    public readonly nodePortRange!: pulumi.Output<string>;
    public readonly nodes!: pulumi.Output<string[] | undefined>;
    public readonly osType!: pulumi.Output<string | undefined>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly platform!: pulumi.Output<string>;
    public readonly podCidr!: pulumi.Output<string | undefined>;
    public readonly podVswitchIds!: pulumi.Output<string[] | undefined>;
    public readonly proxyMode!: pulumi.Output<string | undefined>;
    public readonly rdsInstances!: pulumi.Output<string[] | undefined>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly retainResources!: pulumi.Output<string[] | undefined>;
    public readonly runtime!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly securityGroupId!: pulumi.Output<string>;
    public readonly serviceAccountIssuer!: pulumi.Output<string | undefined>;
    public readonly serviceCidr!: pulumi.Output<string | undefined>;
    public /*out*/ readonly slbId!: pulumi.Output<string>;
    public /*out*/ readonly slbInternet!: pulumi.Output<string>;
    public readonly slbInternetEnabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly slbIntranet!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly taints!: pulumi.Output<outputs.CsKubernetesTaint[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.CsKubernetesTimeouts | undefined>;
    public readonly timezone!: pulumi.Output<string | undefined>;
    public readonly userCa!: pulumi.Output<string | undefined>;
    public readonly userData!: pulumi.Output<string | undefined>;
    public readonly version!: pulumi.Output<string>;
    public /*out*/ readonly vpcId!: pulumi.Output<string>;
    public readonly vswitchId!: pulumi.Output<string | undefined>;
    public readonly vswitchIds!: pulumi.Output<string[] | undefined>;
    public readonly workerAutoRenew!: pulumi.Output<boolean | undefined>;
    public readonly workerAutoRenewPeriod!: pulumi.Output<number>;
    public readonly workerDataDiskCategory!: pulumi.Output<string | undefined>;
    public readonly workerDataDiskSize!: pulumi.Output<number | undefined>;
    public readonly workerDataDisks!: pulumi.Output<outputs.CsKubernetesWorkerDataDisk[] | undefined>;
    public readonly workerDiskCategory!: pulumi.Output<string | undefined>;
    public readonly workerDiskPerformanceLevel!: pulumi.Output<string | undefined>;
    public readonly workerDiskSize!: pulumi.Output<number>;
    public readonly workerDiskSnapshotPolicyId!: pulumi.Output<string | undefined>;
    public readonly workerInstanceChargeType!: pulumi.Output<string>;
    public readonly workerInstanceType!: pulumi.Output<string | undefined>;
    public readonly workerInstanceTypes!: pulumi.Output<string[] | undefined>;
    public readonly workerNodes!: pulumi.Output<outputs.CsKubernetesWorkerNode[] | undefined>;
    public readonly workerNumber!: pulumi.Output<number | undefined>;
    public readonly workerNumbers!: pulumi.Output<number[] | undefined>;
    public readonly workerPeriod!: pulumi.Output<number>;
    public readonly workerPeriodUnit!: pulumi.Output<string>;
    public /*out*/ readonly workerRamRoleName!: pulumi.Output<string>;
    public readonly workerVswitchIds!: pulumi.Output<string[] | undefined>;

    /**
     * Create a CsKubernetes resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CsKubernetesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CsKubernetesArgs | CsKubernetesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CsKubernetesState | undefined;
            resourceInputs["addons"] = state ? state.addons : undefined;
            resourceInputs["apiAudiences"] = state ? state.apiAudiences : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["certificateAuthority"] = state ? state.certificateAuthority : undefined;
            resourceInputs["clientCert"] = state ? state.clientCert : undefined;
            resourceInputs["clientKey"] = state ? state.clientKey : undefined;
            resourceInputs["clusterCaCert"] = state ? state.clusterCaCert : undefined;
            resourceInputs["clusterDomain"] = state ? state.clusterDomain : undefined;
            resourceInputs["clusterNetworkType"] = state ? state.clusterNetworkType : undefined;
            resourceInputs["connections"] = state ? state.connections : undefined;
            resourceInputs["cpuPolicy"] = state ? state.cpuPolicy : undefined;
            resourceInputs["customSan"] = state ? state.customSan : undefined;
            resourceInputs["deleteOptions"] = state ? state.deleteOptions : undefined;
            resourceInputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            resourceInputs["enableSsh"] = state ? state.enableSsh : undefined;
            resourceInputs["excludeAutoscalerNodes"] = state ? state.excludeAutoscalerNodes : undefined;
            resourceInputs["forceUpdate"] = state ? state.forceUpdate : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["installCloudMonitor"] = state ? state.installCloudMonitor : undefined;
            resourceInputs["isEnterpriseSecurityGroup"] = state ? state.isEnterpriseSecurityGroup : undefined;
            resourceInputs["keyName"] = state ? state.keyName : undefined;
            resourceInputs["kmsEncryptedPassword"] = state ? state.kmsEncryptedPassword : undefined;
            resourceInputs["kmsEncryptionContext"] = state ? state.kmsEncryptionContext : undefined;
            resourceInputs["kubeConfig"] = state ? state.kubeConfig : undefined;
            resourceInputs["loadBalancerSpec"] = state ? state.loadBalancerSpec : undefined;
            resourceInputs["logConfig"] = state ? state.logConfig : undefined;
            resourceInputs["masterAutoRenew"] = state ? state.masterAutoRenew : undefined;
            resourceInputs["masterAutoRenewPeriod"] = state ? state.masterAutoRenewPeriod : undefined;
            resourceInputs["masterDiskCategory"] = state ? state.masterDiskCategory : undefined;
            resourceInputs["masterDiskPerformanceLevel"] = state ? state.masterDiskPerformanceLevel : undefined;
            resourceInputs["masterDiskSize"] = state ? state.masterDiskSize : undefined;
            resourceInputs["masterDiskSnapshotPolicyId"] = state ? state.masterDiskSnapshotPolicyId : undefined;
            resourceInputs["masterInstanceChargeType"] = state ? state.masterInstanceChargeType : undefined;
            resourceInputs["masterInstanceType"] = state ? state.masterInstanceType : undefined;
            resourceInputs["masterInstanceTypes"] = state ? state.masterInstanceTypes : undefined;
            resourceInputs["masterNodes"] = state ? state.masterNodes : undefined;
            resourceInputs["masterPeriod"] = state ? state.masterPeriod : undefined;
            resourceInputs["masterPeriodUnit"] = state ? state.masterPeriodUnit : undefined;
            resourceInputs["masterVswitchIds"] = state ? state.masterVswitchIds : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namePrefix"] = state ? state.namePrefix : undefined;
            resourceInputs["natGatewayId"] = state ? state.natGatewayId : undefined;
            resourceInputs["newNatGateway"] = state ? state.newNatGateway : undefined;
            resourceInputs["nodeCidrMask"] = state ? state.nodeCidrMask : undefined;
            resourceInputs["nodeNameMode"] = state ? state.nodeNameMode : undefined;
            resourceInputs["nodePortRange"] = state ? state.nodePortRange : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["osType"] = state ? state.osType : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["podCidr"] = state ? state.podCidr : undefined;
            resourceInputs["podVswitchIds"] = state ? state.podVswitchIds : undefined;
            resourceInputs["proxyMode"] = state ? state.proxyMode : undefined;
            resourceInputs["rdsInstances"] = state ? state.rdsInstances : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["retainResources"] = state ? state.retainResources : undefined;
            resourceInputs["runtime"] = state ? state.runtime : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["serviceAccountIssuer"] = state ? state.serviceAccountIssuer : undefined;
            resourceInputs["serviceCidr"] = state ? state.serviceCidr : undefined;
            resourceInputs["slbId"] = state ? state.slbId : undefined;
            resourceInputs["slbInternet"] = state ? state.slbInternet : undefined;
            resourceInputs["slbInternetEnabled"] = state ? state.slbInternetEnabled : undefined;
            resourceInputs["slbIntranet"] = state ? state.slbIntranet : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["taints"] = state ? state.taints : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
            resourceInputs["userCa"] = state ? state.userCa : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
            resourceInputs["vswitchIds"] = state ? state.vswitchIds : undefined;
            resourceInputs["workerAutoRenew"] = state ? state.workerAutoRenew : undefined;
            resourceInputs["workerAutoRenewPeriod"] = state ? state.workerAutoRenewPeriod : undefined;
            resourceInputs["workerDataDiskCategory"] = state ? state.workerDataDiskCategory : undefined;
            resourceInputs["workerDataDiskSize"] = state ? state.workerDataDiskSize : undefined;
            resourceInputs["workerDataDisks"] = state ? state.workerDataDisks : undefined;
            resourceInputs["workerDiskCategory"] = state ? state.workerDiskCategory : undefined;
            resourceInputs["workerDiskPerformanceLevel"] = state ? state.workerDiskPerformanceLevel : undefined;
            resourceInputs["workerDiskSize"] = state ? state.workerDiskSize : undefined;
            resourceInputs["workerDiskSnapshotPolicyId"] = state ? state.workerDiskSnapshotPolicyId : undefined;
            resourceInputs["workerInstanceChargeType"] = state ? state.workerInstanceChargeType : undefined;
            resourceInputs["workerInstanceType"] = state ? state.workerInstanceType : undefined;
            resourceInputs["workerInstanceTypes"] = state ? state.workerInstanceTypes : undefined;
            resourceInputs["workerNodes"] = state ? state.workerNodes : undefined;
            resourceInputs["workerNumber"] = state ? state.workerNumber : undefined;
            resourceInputs["workerNumbers"] = state ? state.workerNumbers : undefined;
            resourceInputs["workerPeriod"] = state ? state.workerPeriod : undefined;
            resourceInputs["workerPeriodUnit"] = state ? state.workerPeriodUnit : undefined;
            resourceInputs["workerRamRoleName"] = state ? state.workerRamRoleName : undefined;
            resourceInputs["workerVswitchIds"] = state ? state.workerVswitchIds : undefined;
        } else {
            const args = argsOrState as CsKubernetesArgs | undefined;
            if ((!args || args.masterInstanceTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'masterInstanceTypes'");
            }
            if ((!args || args.masterVswitchIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'masterVswitchIds'");
            }
            resourceInputs["addons"] = args ? args.addons : undefined;
            resourceInputs["apiAudiences"] = args ? args.apiAudiences : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["clientCert"] = args ? args.clientCert : undefined;
            resourceInputs["clientKey"] = args ? args.clientKey : undefined;
            resourceInputs["clusterCaCert"] = args ? args.clusterCaCert : undefined;
            resourceInputs["clusterDomain"] = args ? args.clusterDomain : undefined;
            resourceInputs["clusterNetworkType"] = args ? args.clusterNetworkType : undefined;
            resourceInputs["cpuPolicy"] = args ? args.cpuPolicy : undefined;
            resourceInputs["customSan"] = args ? args.customSan : undefined;
            resourceInputs["deleteOptions"] = args ? args.deleteOptions : undefined;
            resourceInputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            resourceInputs["enableSsh"] = args ? args.enableSsh : undefined;
            resourceInputs["excludeAutoscalerNodes"] = args ? args.excludeAutoscalerNodes : undefined;
            resourceInputs["forceUpdate"] = args ? args.forceUpdate : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["installCloudMonitor"] = args ? args.installCloudMonitor : undefined;
            resourceInputs["isEnterpriseSecurityGroup"] = args ? args.isEnterpriseSecurityGroup : undefined;
            resourceInputs["keyName"] = args ? args.keyName : undefined;
            resourceInputs["kmsEncryptedPassword"] = args ? args.kmsEncryptedPassword : undefined;
            resourceInputs["kmsEncryptionContext"] = args ? args.kmsEncryptionContext : undefined;
            resourceInputs["kubeConfig"] = args ? args.kubeConfig : undefined;
            resourceInputs["loadBalancerSpec"] = args ? args.loadBalancerSpec : undefined;
            resourceInputs["logConfig"] = args ? args.logConfig : undefined;
            resourceInputs["masterAutoRenew"] = args ? args.masterAutoRenew : undefined;
            resourceInputs["masterAutoRenewPeriod"] = args ? args.masterAutoRenewPeriod : undefined;
            resourceInputs["masterDiskCategory"] = args ? args.masterDiskCategory : undefined;
            resourceInputs["masterDiskPerformanceLevel"] = args ? args.masterDiskPerformanceLevel : undefined;
            resourceInputs["masterDiskSize"] = args ? args.masterDiskSize : undefined;
            resourceInputs["masterDiskSnapshotPolicyId"] = args ? args.masterDiskSnapshotPolicyId : undefined;
            resourceInputs["masterInstanceChargeType"] = args ? args.masterInstanceChargeType : undefined;
            resourceInputs["masterInstanceType"] = args ? args.masterInstanceType : undefined;
            resourceInputs["masterInstanceTypes"] = args ? args.masterInstanceTypes : undefined;
            resourceInputs["masterPeriod"] = args ? args.masterPeriod : undefined;
            resourceInputs["masterPeriodUnit"] = args ? args.masterPeriodUnit : undefined;
            resourceInputs["masterVswitchIds"] = args ? args.masterVswitchIds : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namePrefix"] = args ? args.namePrefix : undefined;
            resourceInputs["newNatGateway"] = args ? args.newNatGateway : undefined;
            resourceInputs["nodeCidrMask"] = args ? args.nodeCidrMask : undefined;
            resourceInputs["nodeNameMode"] = args ? args.nodeNameMode : undefined;
            resourceInputs["nodePortRange"] = args ? args.nodePortRange : undefined;
            resourceInputs["nodes"] = args ? args.nodes : undefined;
            resourceInputs["osType"] = args ? args.osType : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["platform"] = args ? args.platform : undefined;
            resourceInputs["podCidr"] = args ? args.podCidr : undefined;
            resourceInputs["podVswitchIds"] = args ? args.podVswitchIds : undefined;
            resourceInputs["proxyMode"] = args ? args.proxyMode : undefined;
            resourceInputs["rdsInstances"] = args ? args.rdsInstances : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["retainResources"] = args ? args.retainResources : undefined;
            resourceInputs["runtime"] = args ? args.runtime : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["serviceAccountIssuer"] = args ? args.serviceAccountIssuer : undefined;
            resourceInputs["serviceCidr"] = args ? args.serviceCidr : undefined;
            resourceInputs["slbInternetEnabled"] = args ? args.slbInternetEnabled : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["taints"] = args ? args.taints : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["userCa"] = args ? args.userCa : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["vswitchIds"] = args ? args.vswitchIds : undefined;
            resourceInputs["workerAutoRenew"] = args ? args.workerAutoRenew : undefined;
            resourceInputs["workerAutoRenewPeriod"] = args ? args.workerAutoRenewPeriod : undefined;
            resourceInputs["workerDataDiskCategory"] = args ? args.workerDataDiskCategory : undefined;
            resourceInputs["workerDataDiskSize"] = args ? args.workerDataDiskSize : undefined;
            resourceInputs["workerDataDisks"] = args ? args.workerDataDisks : undefined;
            resourceInputs["workerDiskCategory"] = args ? args.workerDiskCategory : undefined;
            resourceInputs["workerDiskPerformanceLevel"] = args ? args.workerDiskPerformanceLevel : undefined;
            resourceInputs["workerDiskSize"] = args ? args.workerDiskSize : undefined;
            resourceInputs["workerDiskSnapshotPolicyId"] = args ? args.workerDiskSnapshotPolicyId : undefined;
            resourceInputs["workerInstanceChargeType"] = args ? args.workerInstanceChargeType : undefined;
            resourceInputs["workerInstanceType"] = args ? args.workerInstanceType : undefined;
            resourceInputs["workerInstanceTypes"] = args ? args.workerInstanceTypes : undefined;
            resourceInputs["workerNodes"] = args ? args.workerNodes : undefined;
            resourceInputs["workerNumber"] = args ? args.workerNumber : undefined;
            resourceInputs["workerNumbers"] = args ? args.workerNumbers : undefined;
            resourceInputs["workerPeriod"] = args ? args.workerPeriod : undefined;
            resourceInputs["workerPeriodUnit"] = args ? args.workerPeriodUnit : undefined;
            resourceInputs["workerVswitchIds"] = args ? args.workerVswitchIds : undefined;
            resourceInputs["certificateAuthority"] = undefined /*out*/;
            resourceInputs["connections"] = undefined /*out*/;
            resourceInputs["masterNodes"] = undefined /*out*/;
            resourceInputs["natGatewayId"] = undefined /*out*/;
            resourceInputs["slbId"] = undefined /*out*/;
            resourceInputs["slbInternet"] = undefined /*out*/;
            resourceInputs["slbIntranet"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
            resourceInputs["workerRamRoleName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CsKubernetes.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CsKubernetes resources.
 */
export interface CsKubernetesState {
    addons?: pulumi.Input<pulumi.Input<inputs.CsKubernetesAddon>[]>;
    apiAudiences?: pulumi.Input<pulumi.Input<string>[]>;
    availabilityZone?: pulumi.Input<string>;
    certificateAuthority?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    clientCert?: pulumi.Input<string>;
    clientKey?: pulumi.Input<string>;
    clusterCaCert?: pulumi.Input<string>;
    /**
     * cluster local domain
     */
    clusterDomain?: pulumi.Input<string>;
    clusterNetworkType?: pulumi.Input<string>;
    connections?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    cpuPolicy?: pulumi.Input<string>;
    customSan?: pulumi.Input<string>;
    deleteOptions?: pulumi.Input<pulumi.Input<inputs.CsKubernetesDeleteOption>[]>;
    deletionProtection?: pulumi.Input<boolean>;
    enableSsh?: pulumi.Input<boolean>;
    excludeAutoscalerNodes?: pulumi.Input<boolean>;
    forceUpdate?: pulumi.Input<boolean>;
    imageId?: pulumi.Input<string>;
    installCloudMonitor?: pulumi.Input<boolean>;
    isEnterpriseSecurityGroup?: pulumi.Input<boolean>;
    keyName?: pulumi.Input<string>;
    kmsEncryptedPassword?: pulumi.Input<string>;
    kmsEncryptionContext?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    kubeConfig?: pulumi.Input<string>;
    loadBalancerSpec?: pulumi.Input<string>;
    logConfig?: pulumi.Input<inputs.CsKubernetesLogConfig>;
    masterAutoRenew?: pulumi.Input<boolean>;
    masterAutoRenewPeriod?: pulumi.Input<number>;
    masterDiskCategory?: pulumi.Input<string>;
    masterDiskPerformanceLevel?: pulumi.Input<string>;
    masterDiskSize?: pulumi.Input<number>;
    masterDiskSnapshotPolicyId?: pulumi.Input<string>;
    masterInstanceChargeType?: pulumi.Input<string>;
    masterInstanceType?: pulumi.Input<string>;
    masterInstanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    masterNodes?: pulumi.Input<pulumi.Input<inputs.CsKubernetesMasterNode>[]>;
    masterPeriod?: pulumi.Input<number>;
    masterPeriodUnit?: pulumi.Input<string>;
    masterVswitchIds?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    namePrefix?: pulumi.Input<string>;
    natGatewayId?: pulumi.Input<string>;
    newNatGateway?: pulumi.Input<boolean>;
    nodeCidrMask?: pulumi.Input<number>;
    nodeNameMode?: pulumi.Input<string>;
    nodePortRange?: pulumi.Input<string>;
    nodes?: pulumi.Input<pulumi.Input<string>[]>;
    osType?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    platform?: pulumi.Input<string>;
    podCidr?: pulumi.Input<string>;
    podVswitchIds?: pulumi.Input<pulumi.Input<string>[]>;
    proxyMode?: pulumi.Input<string>;
    rdsInstances?: pulumi.Input<pulumi.Input<string>[]>;
    resourceGroupId?: pulumi.Input<string>;
    retainResources?: pulumi.Input<pulumi.Input<string>[]>;
    runtime?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    securityGroupId?: pulumi.Input<string>;
    serviceAccountIssuer?: pulumi.Input<string>;
    serviceCidr?: pulumi.Input<string>;
    slbId?: pulumi.Input<string>;
    slbInternet?: pulumi.Input<string>;
    slbInternetEnabled?: pulumi.Input<boolean>;
    slbIntranet?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taints?: pulumi.Input<pulumi.Input<inputs.CsKubernetesTaint>[]>;
    timeouts?: pulumi.Input<inputs.CsKubernetesTimeouts>;
    timezone?: pulumi.Input<string>;
    userCa?: pulumi.Input<string>;
    userData?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
    vswitchIds?: pulumi.Input<pulumi.Input<string>[]>;
    workerAutoRenew?: pulumi.Input<boolean>;
    workerAutoRenewPeriod?: pulumi.Input<number>;
    workerDataDiskCategory?: pulumi.Input<string>;
    workerDataDiskSize?: pulumi.Input<number>;
    workerDataDisks?: pulumi.Input<pulumi.Input<inputs.CsKubernetesWorkerDataDisk>[]>;
    workerDiskCategory?: pulumi.Input<string>;
    workerDiskPerformanceLevel?: pulumi.Input<string>;
    workerDiskSize?: pulumi.Input<number>;
    workerDiskSnapshotPolicyId?: pulumi.Input<string>;
    workerInstanceChargeType?: pulumi.Input<string>;
    workerInstanceType?: pulumi.Input<string>;
    workerInstanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    workerNodes?: pulumi.Input<pulumi.Input<inputs.CsKubernetesWorkerNode>[]>;
    workerNumber?: pulumi.Input<number>;
    workerNumbers?: pulumi.Input<pulumi.Input<number>[]>;
    workerPeriod?: pulumi.Input<number>;
    workerPeriodUnit?: pulumi.Input<string>;
    workerRamRoleName?: pulumi.Input<string>;
    workerVswitchIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a CsKubernetes resource.
 */
export interface CsKubernetesArgs {
    addons?: pulumi.Input<pulumi.Input<inputs.CsKubernetesAddon>[]>;
    apiAudiences?: pulumi.Input<pulumi.Input<string>[]>;
    availabilityZone?: pulumi.Input<string>;
    clientCert?: pulumi.Input<string>;
    clientKey?: pulumi.Input<string>;
    clusterCaCert?: pulumi.Input<string>;
    /**
     * cluster local domain
     */
    clusterDomain?: pulumi.Input<string>;
    clusterNetworkType?: pulumi.Input<string>;
    cpuPolicy?: pulumi.Input<string>;
    customSan?: pulumi.Input<string>;
    deleteOptions?: pulumi.Input<pulumi.Input<inputs.CsKubernetesDeleteOption>[]>;
    deletionProtection?: pulumi.Input<boolean>;
    enableSsh?: pulumi.Input<boolean>;
    excludeAutoscalerNodes?: pulumi.Input<boolean>;
    forceUpdate?: pulumi.Input<boolean>;
    imageId?: pulumi.Input<string>;
    installCloudMonitor?: pulumi.Input<boolean>;
    isEnterpriseSecurityGroup?: pulumi.Input<boolean>;
    keyName?: pulumi.Input<string>;
    kmsEncryptedPassword?: pulumi.Input<string>;
    kmsEncryptionContext?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    kubeConfig?: pulumi.Input<string>;
    loadBalancerSpec?: pulumi.Input<string>;
    logConfig?: pulumi.Input<inputs.CsKubernetesLogConfig>;
    masterAutoRenew?: pulumi.Input<boolean>;
    masterAutoRenewPeriod?: pulumi.Input<number>;
    masterDiskCategory?: pulumi.Input<string>;
    masterDiskPerformanceLevel?: pulumi.Input<string>;
    masterDiskSize?: pulumi.Input<number>;
    masterDiskSnapshotPolicyId?: pulumi.Input<string>;
    masterInstanceChargeType?: pulumi.Input<string>;
    masterInstanceType?: pulumi.Input<string>;
    masterInstanceTypes: pulumi.Input<pulumi.Input<string>[]>;
    masterPeriod?: pulumi.Input<number>;
    masterPeriodUnit?: pulumi.Input<string>;
    masterVswitchIds: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    namePrefix?: pulumi.Input<string>;
    newNatGateway?: pulumi.Input<boolean>;
    nodeCidrMask?: pulumi.Input<number>;
    nodeNameMode?: pulumi.Input<string>;
    nodePortRange?: pulumi.Input<string>;
    nodes?: pulumi.Input<pulumi.Input<string>[]>;
    osType?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    platform?: pulumi.Input<string>;
    podCidr?: pulumi.Input<string>;
    podVswitchIds?: pulumi.Input<pulumi.Input<string>[]>;
    proxyMode?: pulumi.Input<string>;
    rdsInstances?: pulumi.Input<pulumi.Input<string>[]>;
    resourceGroupId?: pulumi.Input<string>;
    retainResources?: pulumi.Input<pulumi.Input<string>[]>;
    runtime?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    securityGroupId?: pulumi.Input<string>;
    serviceAccountIssuer?: pulumi.Input<string>;
    serviceCidr?: pulumi.Input<string>;
    slbInternetEnabled?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taints?: pulumi.Input<pulumi.Input<inputs.CsKubernetesTaint>[]>;
    timeouts?: pulumi.Input<inputs.CsKubernetesTimeouts>;
    timezone?: pulumi.Input<string>;
    userCa?: pulumi.Input<string>;
    userData?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
    vswitchIds?: pulumi.Input<pulumi.Input<string>[]>;
    workerAutoRenew?: pulumi.Input<boolean>;
    workerAutoRenewPeriod?: pulumi.Input<number>;
    workerDataDiskCategory?: pulumi.Input<string>;
    workerDataDiskSize?: pulumi.Input<number>;
    workerDataDisks?: pulumi.Input<pulumi.Input<inputs.CsKubernetesWorkerDataDisk>[]>;
    workerDiskCategory?: pulumi.Input<string>;
    workerDiskPerformanceLevel?: pulumi.Input<string>;
    workerDiskSize?: pulumi.Input<number>;
    workerDiskSnapshotPolicyId?: pulumi.Input<string>;
    workerInstanceChargeType?: pulumi.Input<string>;
    workerInstanceType?: pulumi.Input<string>;
    workerInstanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    workerNodes?: pulumi.Input<pulumi.Input<inputs.CsKubernetesWorkerNode>[]>;
    workerNumber?: pulumi.Input<number>;
    workerNumbers?: pulumi.Input<pulumi.Input<number>[]>;
    workerPeriod?: pulumi.Input<number>;
    workerPeriodUnit?: pulumi.Input<string>;
    workerVswitchIds?: pulumi.Input<pulumi.Input<string>[]>;
}
