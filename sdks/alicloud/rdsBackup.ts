// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RdsBackup extends pulumi.CustomResource {
    /**
     * Get an existing RdsBackup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RdsBackupState, opts?: pulumi.CustomResourceOptions): RdsBackup {
        return new RdsBackup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/rdsBackup:RdsBackup';

    /**
     * Returns true if the given object is an instance of RdsBackup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RdsBackup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RdsBackup.__pulumiType;
    }

    public /*out*/ readonly backupId!: pulumi.Output<string>;
    public readonly backupMethod!: pulumi.Output<string>;
    public readonly backupStrategy!: pulumi.Output<string | undefined>;
    public readonly backupType!: pulumi.Output<string>;
    public readonly dbInstanceId!: pulumi.Output<string>;
    public readonly dbName!: pulumi.Output<string | undefined>;
    public readonly removeFromState!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly storeStatus!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.RdsBackupTimeouts | undefined>;

    /**
     * Create a RdsBackup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RdsBackupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RdsBackupArgs | RdsBackupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RdsBackupState | undefined;
            resourceInputs["backupId"] = state ? state.backupId : undefined;
            resourceInputs["backupMethod"] = state ? state.backupMethod : undefined;
            resourceInputs["backupStrategy"] = state ? state.backupStrategy : undefined;
            resourceInputs["backupType"] = state ? state.backupType : undefined;
            resourceInputs["dbInstanceId"] = state ? state.dbInstanceId : undefined;
            resourceInputs["dbName"] = state ? state.dbName : undefined;
            resourceInputs["removeFromState"] = state ? state.removeFromState : undefined;
            resourceInputs["storeStatus"] = state ? state.storeStatus : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as RdsBackupArgs | undefined;
            if ((!args || args.dbInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbInstanceId'");
            }
            resourceInputs["backupMethod"] = args ? args.backupMethod : undefined;
            resourceInputs["backupStrategy"] = args ? args.backupStrategy : undefined;
            resourceInputs["backupType"] = args ? args.backupType : undefined;
            resourceInputs["dbInstanceId"] = args ? args.dbInstanceId : undefined;
            resourceInputs["dbName"] = args ? args.dbName : undefined;
            resourceInputs["removeFromState"] = args ? args.removeFromState : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["backupId"] = undefined /*out*/;
            resourceInputs["storeStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RdsBackup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RdsBackup resources.
 */
export interface RdsBackupState {
    backupId?: pulumi.Input<string>;
    backupMethod?: pulumi.Input<string>;
    backupStrategy?: pulumi.Input<string>;
    backupType?: pulumi.Input<string>;
    dbInstanceId?: pulumi.Input<string>;
    dbName?: pulumi.Input<string>;
    removeFromState?: pulumi.Input<boolean>;
    storeStatus?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.RdsBackupTimeouts>;
}

/**
 * The set of arguments for constructing a RdsBackup resource.
 */
export interface RdsBackupArgs {
    backupMethod?: pulumi.Input<string>;
    backupStrategy?: pulumi.Input<string>;
    backupType?: pulumi.Input<string>;
    dbInstanceId: pulumi.Input<string>;
    dbName?: pulumi.Input<string>;
    removeFromState?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.RdsBackupTimeouts>;
}
