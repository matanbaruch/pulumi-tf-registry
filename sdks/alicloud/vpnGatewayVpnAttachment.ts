// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpnGatewayVpnAttachment extends pulumi.CustomResource {
    /**
     * Get an existing VpnGatewayVpnAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnGatewayVpnAttachmentState, opts?: pulumi.CustomResourceOptions): VpnGatewayVpnAttachment {
        return new VpnGatewayVpnAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/vpnGatewayVpnAttachment:VpnGatewayVpnAttachment';

    /**
     * Returns true if the given object is an instance of VpnGatewayVpnAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnGatewayVpnAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnGatewayVpnAttachment.__pulumiType;
    }

    public readonly bgpConfig!: pulumi.Output<outputs.VpnGatewayVpnAttachmentBgpConfig | undefined>;
    public readonly customerGatewayId!: pulumi.Output<string>;
    public readonly effectImmediately!: pulumi.Output<boolean | undefined>;
    public readonly enableDpd!: pulumi.Output<boolean>;
    public readonly enableNatTraversal!: pulumi.Output<boolean>;
    public readonly healthCheckConfig!: pulumi.Output<outputs.VpnGatewayVpnAttachmentHealthCheckConfig | undefined>;
    public readonly ikeConfig!: pulumi.Output<outputs.VpnGatewayVpnAttachmentIkeConfig | undefined>;
    public /*out*/ readonly internetIp!: pulumi.Output<string>;
    public readonly ipsecConfig!: pulumi.Output<outputs.VpnGatewayVpnAttachmentIpsecConfig | undefined>;
    public readonly localSubnet!: pulumi.Output<string>;
    public readonly networkType!: pulumi.Output<string>;
    public readonly remoteSubnet!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.VpnGatewayVpnAttachmentTimeouts | undefined>;
    public readonly vpnAttachmentName!: pulumi.Output<string | undefined>;

    /**
     * Create a VpnGatewayVpnAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnGatewayVpnAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnGatewayVpnAttachmentArgs | VpnGatewayVpnAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnGatewayVpnAttachmentState | undefined;
            resourceInputs["bgpConfig"] = state ? state.bgpConfig : undefined;
            resourceInputs["customerGatewayId"] = state ? state.customerGatewayId : undefined;
            resourceInputs["effectImmediately"] = state ? state.effectImmediately : undefined;
            resourceInputs["enableDpd"] = state ? state.enableDpd : undefined;
            resourceInputs["enableNatTraversal"] = state ? state.enableNatTraversal : undefined;
            resourceInputs["healthCheckConfig"] = state ? state.healthCheckConfig : undefined;
            resourceInputs["ikeConfig"] = state ? state.ikeConfig : undefined;
            resourceInputs["internetIp"] = state ? state.internetIp : undefined;
            resourceInputs["ipsecConfig"] = state ? state.ipsecConfig : undefined;
            resourceInputs["localSubnet"] = state ? state.localSubnet : undefined;
            resourceInputs["networkType"] = state ? state.networkType : undefined;
            resourceInputs["remoteSubnet"] = state ? state.remoteSubnet : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpnAttachmentName"] = state ? state.vpnAttachmentName : undefined;
        } else {
            const args = argsOrState as VpnGatewayVpnAttachmentArgs | undefined;
            if ((!args || args.customerGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'customerGatewayId'");
            }
            if ((!args || args.localSubnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localSubnet'");
            }
            if ((!args || args.remoteSubnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteSubnet'");
            }
            resourceInputs["bgpConfig"] = args ? args.bgpConfig : undefined;
            resourceInputs["customerGatewayId"] = args ? args.customerGatewayId : undefined;
            resourceInputs["effectImmediately"] = args ? args.effectImmediately : undefined;
            resourceInputs["enableDpd"] = args ? args.enableDpd : undefined;
            resourceInputs["enableNatTraversal"] = args ? args.enableNatTraversal : undefined;
            resourceInputs["healthCheckConfig"] = args ? args.healthCheckConfig : undefined;
            resourceInputs["ikeConfig"] = args ? args.ikeConfig : undefined;
            resourceInputs["ipsecConfig"] = args ? args.ipsecConfig : undefined;
            resourceInputs["localSubnet"] = args ? args.localSubnet : undefined;
            resourceInputs["networkType"] = args ? args.networkType : undefined;
            resourceInputs["remoteSubnet"] = args ? args.remoteSubnet : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpnAttachmentName"] = args ? args.vpnAttachmentName : undefined;
            resourceInputs["internetIp"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnGatewayVpnAttachment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpnGatewayVpnAttachment resources.
 */
export interface VpnGatewayVpnAttachmentState {
    bgpConfig?: pulumi.Input<inputs.VpnGatewayVpnAttachmentBgpConfig>;
    customerGatewayId?: pulumi.Input<string>;
    effectImmediately?: pulumi.Input<boolean>;
    enableDpd?: pulumi.Input<boolean>;
    enableNatTraversal?: pulumi.Input<boolean>;
    healthCheckConfig?: pulumi.Input<inputs.VpnGatewayVpnAttachmentHealthCheckConfig>;
    ikeConfig?: pulumi.Input<inputs.VpnGatewayVpnAttachmentIkeConfig>;
    internetIp?: pulumi.Input<string>;
    ipsecConfig?: pulumi.Input<inputs.VpnGatewayVpnAttachmentIpsecConfig>;
    localSubnet?: pulumi.Input<string>;
    networkType?: pulumi.Input<string>;
    remoteSubnet?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VpnGatewayVpnAttachmentTimeouts>;
    vpnAttachmentName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnGatewayVpnAttachment resource.
 */
export interface VpnGatewayVpnAttachmentArgs {
    bgpConfig?: pulumi.Input<inputs.VpnGatewayVpnAttachmentBgpConfig>;
    customerGatewayId: pulumi.Input<string>;
    effectImmediately?: pulumi.Input<boolean>;
    enableDpd?: pulumi.Input<boolean>;
    enableNatTraversal?: pulumi.Input<boolean>;
    healthCheckConfig?: pulumi.Input<inputs.VpnGatewayVpnAttachmentHealthCheckConfig>;
    ikeConfig?: pulumi.Input<inputs.VpnGatewayVpnAttachmentIkeConfig>;
    ipsecConfig?: pulumi.Input<inputs.VpnGatewayVpnAttachmentIpsecConfig>;
    localSubnet: pulumi.Input<string>;
    networkType?: pulumi.Input<string>;
    remoteSubnet: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VpnGatewayVpnAttachmentTimeouts>;
    vpnAttachmentName?: pulumi.Input<string>;
}
