// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AlbServerGroup extends pulumi.CustomResource {
    /**
     * Get an existing AlbServerGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlbServerGroupState, opts?: pulumi.CustomResourceOptions): AlbServerGroup {
        return new AlbServerGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/albServerGroup:AlbServerGroup';

    /**
     * Returns true if the given object is an instance of AlbServerGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlbServerGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlbServerGroup.__pulumiType;
    }

    public readonly dryRun!: pulumi.Output<boolean | undefined>;
    public readonly healthCheckConfig!: pulumi.Output<outputs.AlbServerGroupHealthCheckConfig>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly scheduler!: pulumi.Output<string>;
    public readonly serverGroupName!: pulumi.Output<string>;
    public readonly serverGroupType!: pulumi.Output<string>;
    public readonly servers!: pulumi.Output<outputs.AlbServerGroupServer[] | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly stickySessionConfig!: pulumi.Output<outputs.AlbServerGroupStickySessionConfig | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.AlbServerGroupTimeouts | undefined>;
    public readonly vpcId!: pulumi.Output<string | undefined>;

    /**
     * Create a AlbServerGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlbServerGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlbServerGroupArgs | AlbServerGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlbServerGroupState | undefined;
            resourceInputs["dryRun"] = state ? state.dryRun : undefined;
            resourceInputs["healthCheckConfig"] = state ? state.healthCheckConfig : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["scheduler"] = state ? state.scheduler : undefined;
            resourceInputs["serverGroupName"] = state ? state.serverGroupName : undefined;
            resourceInputs["serverGroupType"] = state ? state.serverGroupType : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["stickySessionConfig"] = state ? state.stickySessionConfig : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as AlbServerGroupArgs | undefined;
            if ((!args || args.healthCheckConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'healthCheckConfig'");
            }
            if ((!args || args.serverGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverGroupName'");
            }
            resourceInputs["dryRun"] = args ? args.dryRun : undefined;
            resourceInputs["healthCheckConfig"] = args ? args.healthCheckConfig : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["scheduler"] = args ? args.scheduler : undefined;
            resourceInputs["serverGroupName"] = args ? args.serverGroupName : undefined;
            resourceInputs["serverGroupType"] = args ? args.serverGroupType : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
            resourceInputs["stickySessionConfig"] = args ? args.stickySessionConfig : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlbServerGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AlbServerGroup resources.
 */
export interface AlbServerGroupState {
    dryRun?: pulumi.Input<boolean>;
    healthCheckConfig?: pulumi.Input<inputs.AlbServerGroupHealthCheckConfig>;
    protocol?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    scheduler?: pulumi.Input<string>;
    serverGroupName?: pulumi.Input<string>;
    serverGroupType?: pulumi.Input<string>;
    servers?: pulumi.Input<pulumi.Input<inputs.AlbServerGroupServer>[]>;
    status?: pulumi.Input<string>;
    stickySessionConfig?: pulumi.Input<inputs.AlbServerGroupStickySessionConfig>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.AlbServerGroupTimeouts>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AlbServerGroup resource.
 */
export interface AlbServerGroupArgs {
    dryRun?: pulumi.Input<boolean>;
    healthCheckConfig: pulumi.Input<inputs.AlbServerGroupHealthCheckConfig>;
    protocol?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    scheduler?: pulumi.Input<string>;
    serverGroupName: pulumi.Input<string>;
    serverGroupType?: pulumi.Input<string>;
    servers?: pulumi.Input<pulumi.Input<inputs.AlbServerGroupServer>[]>;
    stickySessionConfig?: pulumi.Input<inputs.AlbServerGroupStickySessionConfig>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.AlbServerGroupTimeouts>;
    vpcId?: pulumi.Input<string>;
}
