// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApiGatewayLogConfig extends pulumi.CustomResource {
    /**
     * Get an existing ApiGatewayLogConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiGatewayLogConfigState, opts?: pulumi.CustomResourceOptions): ApiGatewayLogConfig {
        return new ApiGatewayLogConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/apiGatewayLogConfig:ApiGatewayLogConfig';

    /**
     * Returns true if the given object is an instance of ApiGatewayLogConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiGatewayLogConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiGatewayLogConfig.__pulumiType;
    }

    public readonly logType!: pulumi.Output<string>;
    public readonly slsLogStore!: pulumi.Output<string>;
    public readonly slsProject!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ApiGatewayLogConfigTimeouts | undefined>;

    /**
     * Create a ApiGatewayLogConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiGatewayLogConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiGatewayLogConfigArgs | ApiGatewayLogConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiGatewayLogConfigState | undefined;
            resourceInputs["logType"] = state ? state.logType : undefined;
            resourceInputs["slsLogStore"] = state ? state.slsLogStore : undefined;
            resourceInputs["slsProject"] = state ? state.slsProject : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ApiGatewayLogConfigArgs | undefined;
            if ((!args || args.logType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logType'");
            }
            if ((!args || args.slsLogStore === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slsLogStore'");
            }
            if ((!args || args.slsProject === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slsProject'");
            }
            resourceInputs["logType"] = args ? args.logType : undefined;
            resourceInputs["slsLogStore"] = args ? args.slsLogStore : undefined;
            resourceInputs["slsProject"] = args ? args.slsProject : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApiGatewayLogConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApiGatewayLogConfig resources.
 */
export interface ApiGatewayLogConfigState {
    logType?: pulumi.Input<string>;
    slsLogStore?: pulumi.Input<string>;
    slsProject?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ApiGatewayLogConfigTimeouts>;
}

/**
 * The set of arguments for constructing a ApiGatewayLogConfig resource.
 */
export interface ApiGatewayLogConfigArgs {
    logType: pulumi.Input<string>;
    slsLogStore: pulumi.Input<string>;
    slsProject: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ApiGatewayLogConfigTimeouts>;
}
