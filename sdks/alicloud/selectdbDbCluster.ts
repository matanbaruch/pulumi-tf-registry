// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SelectdbDbCluster extends pulumi.CustomResource {
    /**
     * Get an existing SelectdbDbCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SelectdbDbClusterState, opts?: pulumi.CustomResourceOptions): SelectdbDbCluster {
        return new SelectdbDbCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/selectdbDbCluster:SelectdbDbCluster';

    /**
     * Returns true if the given object is an instance of SelectdbDbCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SelectdbDbCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SelectdbDbCluster.__pulumiType;
    }

    public readonly cacheSize!: pulumi.Output<number>;
    public /*out*/ readonly cpu!: pulumi.Output<number>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly dbClusterClass!: pulumi.Output<string>;
    public readonly dbClusterDescription!: pulumi.Output<string>;
    public /*out*/ readonly dbClusterId!: pulumi.Output<string>;
    public readonly dbInstanceId!: pulumi.Output<string>;
    public readonly desiredParams!: pulumi.Output<outputs.SelectdbDbClusterDesiredParam[] | undefined>;
    public readonly desiredStatus!: pulumi.Output<string | undefined>;
    public /*out*/ readonly engine!: pulumi.Output<string>;
    public /*out*/ readonly engineVersion!: pulumi.Output<string>;
    public /*out*/ readonly memory!: pulumi.Output<number>;
    public /*out*/ readonly paramChangeLogs!: pulumi.Output<outputs.SelectdbDbClusterParamChangeLog[]>;
    public readonly paymentType!: pulumi.Output<string>;
    public /*out*/ readonly regionId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.SelectdbDbClusterTimeouts | undefined>;
    public /*out*/ readonly vpcId!: pulumi.Output<string>;
    public /*out*/ readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a SelectdbDbCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SelectdbDbClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SelectdbDbClusterArgs | SelectdbDbClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SelectdbDbClusterState | undefined;
            resourceInputs["cacheSize"] = state ? state.cacheSize : undefined;
            resourceInputs["cpu"] = state ? state.cpu : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["dbClusterClass"] = state ? state.dbClusterClass : undefined;
            resourceInputs["dbClusterDescription"] = state ? state.dbClusterDescription : undefined;
            resourceInputs["dbClusterId"] = state ? state.dbClusterId : undefined;
            resourceInputs["dbInstanceId"] = state ? state.dbInstanceId : undefined;
            resourceInputs["desiredParams"] = state ? state.desiredParams : undefined;
            resourceInputs["desiredStatus"] = state ? state.desiredStatus : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["paramChangeLogs"] = state ? state.paramChangeLogs : undefined;
            resourceInputs["paymentType"] = state ? state.paymentType : undefined;
            resourceInputs["regionId"] = state ? state.regionId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as SelectdbDbClusterArgs | undefined;
            if ((!args || args.cacheSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cacheSize'");
            }
            if ((!args || args.dbClusterClass === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbClusterClass'");
            }
            if ((!args || args.dbClusterDescription === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbClusterDescription'");
            }
            if ((!args || args.dbInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbInstanceId'");
            }
            if ((!args || args.paymentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'paymentType'");
            }
            resourceInputs["cacheSize"] = args ? args.cacheSize : undefined;
            resourceInputs["dbClusterClass"] = args ? args.dbClusterClass : undefined;
            resourceInputs["dbClusterDescription"] = args ? args.dbClusterDescription : undefined;
            resourceInputs["dbInstanceId"] = args ? args.dbInstanceId : undefined;
            resourceInputs["desiredParams"] = args ? args.desiredParams : undefined;
            resourceInputs["desiredStatus"] = args ? args.desiredStatus : undefined;
            resourceInputs["paymentType"] = args ? args.paymentType : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["cpu"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["dbClusterId"] = undefined /*out*/;
            resourceInputs["engine"] = undefined /*out*/;
            resourceInputs["engineVersion"] = undefined /*out*/;
            resourceInputs["memory"] = undefined /*out*/;
            resourceInputs["paramChangeLogs"] = undefined /*out*/;
            resourceInputs["regionId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
            resourceInputs["zoneId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SelectdbDbCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SelectdbDbCluster resources.
 */
export interface SelectdbDbClusterState {
    cacheSize?: pulumi.Input<number>;
    cpu?: pulumi.Input<number>;
    createTime?: pulumi.Input<string>;
    dbClusterClass?: pulumi.Input<string>;
    dbClusterDescription?: pulumi.Input<string>;
    dbClusterId?: pulumi.Input<string>;
    dbInstanceId?: pulumi.Input<string>;
    desiredParams?: pulumi.Input<pulumi.Input<inputs.SelectdbDbClusterDesiredParam>[]>;
    desiredStatus?: pulumi.Input<string>;
    engine?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    memory?: pulumi.Input<number>;
    paramChangeLogs?: pulumi.Input<pulumi.Input<inputs.SelectdbDbClusterParamChangeLog>[]>;
    paymentType?: pulumi.Input<string>;
    regionId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SelectdbDbClusterTimeouts>;
    vpcId?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SelectdbDbCluster resource.
 */
export interface SelectdbDbClusterArgs {
    cacheSize: pulumi.Input<number>;
    dbClusterClass: pulumi.Input<string>;
    dbClusterDescription: pulumi.Input<string>;
    dbInstanceId: pulumi.Input<string>;
    desiredParams?: pulumi.Input<pulumi.Input<inputs.SelectdbDbClusterDesiredParam>[]>;
    desiredStatus?: pulumi.Input<string>;
    paymentType: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SelectdbDbClusterTimeouts>;
}
