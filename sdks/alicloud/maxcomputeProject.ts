// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MaxcomputeProject extends pulumi.CustomResource {
    /**
     * Get an existing MaxcomputeProject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MaxcomputeProjectState, opts?: pulumi.CustomResourceOptions): MaxcomputeProject {
        return new MaxcomputeProject(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/maxcomputeProject:MaxcomputeProject';

    /**
     * Returns true if the given object is an instance of MaxcomputeProject.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MaxcomputeProject {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MaxcomputeProject.__pulumiType;
    }

    public readonly comment!: pulumi.Output<string | undefined>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly defaultQuota!: pulumi.Output<string | undefined>;
    public readonly ipWhiteList!: pulumi.Output<outputs.MaxcomputeProjectIpWhiteList | undefined>;
    public readonly isLogical!: pulumi.Output<string | undefined>;
    public /*out*/ readonly owner!: pulumi.Output<string>;
    public readonly productType!: pulumi.Output<string | undefined>;
    public readonly projectName!: pulumi.Output<string>;
    public readonly properties!: pulumi.Output<outputs.MaxcomputeProjectProperties | undefined>;
    public readonly securityProperties!: pulumi.Output<outputs.MaxcomputeProjectSecurityProperties | undefined>;
    public readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.MaxcomputeProjectTimeouts | undefined>;
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a MaxcomputeProject resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: MaxcomputeProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MaxcomputeProjectArgs | MaxcomputeProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MaxcomputeProjectState | undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["defaultQuota"] = state ? state.defaultQuota : undefined;
            resourceInputs["ipWhiteList"] = state ? state.ipWhiteList : undefined;
            resourceInputs["isLogical"] = state ? state.isLogical : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["productType"] = state ? state.productType : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["securityProperties"] = state ? state.securityProperties : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as MaxcomputeProjectArgs | undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["defaultQuota"] = args ? args.defaultQuota : undefined;
            resourceInputs["ipWhiteList"] = args ? args.ipWhiteList : undefined;
            resourceInputs["isLogical"] = args ? args.isLogical : undefined;
            resourceInputs["productType"] = args ? args.productType : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
            resourceInputs["securityProperties"] = args ? args.securityProperties : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MaxcomputeProject.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MaxcomputeProject resources.
 */
export interface MaxcomputeProjectState {
    comment?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    defaultQuota?: pulumi.Input<string>;
    ipWhiteList?: pulumi.Input<inputs.MaxcomputeProjectIpWhiteList>;
    isLogical?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    productType?: pulumi.Input<string>;
    projectName?: pulumi.Input<string>;
    properties?: pulumi.Input<inputs.MaxcomputeProjectProperties>;
    securityProperties?: pulumi.Input<inputs.MaxcomputeProjectSecurityProperties>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.MaxcomputeProjectTimeouts>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MaxcomputeProject resource.
 */
export interface MaxcomputeProjectArgs {
    comment?: pulumi.Input<string>;
    defaultQuota?: pulumi.Input<string>;
    ipWhiteList?: pulumi.Input<inputs.MaxcomputeProjectIpWhiteList>;
    isLogical?: pulumi.Input<string>;
    productType?: pulumi.Input<string>;
    projectName?: pulumi.Input<string>;
    properties?: pulumi.Input<inputs.MaxcomputeProjectProperties>;
    securityProperties?: pulumi.Input<inputs.MaxcomputeProjectSecurityProperties>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.MaxcomputeProjectTimeouts>;
}
