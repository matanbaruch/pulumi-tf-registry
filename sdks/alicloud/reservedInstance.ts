// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ReservedInstance extends pulumi.CustomResource {
    /**
     * Get an existing ReservedInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReservedInstanceState, opts?: pulumi.CustomResourceOptions): ReservedInstance {
        return new ReservedInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/reservedInstance:ReservedInstance';

    /**
     * Returns true if the given object is an instance of ReservedInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ReservedInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReservedInstance.__pulumiType;
    }

    public /*out*/ readonly allocationStatus!: pulumi.Output<string>;
    public readonly autoRenewPeriod!: pulumi.Output<number>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly expiredTime!: pulumi.Output<string>;
    public readonly instanceAmount!: pulumi.Output<number>;
    public readonly instanceType!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly name!: pulumi.Output<string>;
    public readonly offeringType!: pulumi.Output<string>;
    public /*out*/ readonly operationLocks!: pulumi.Output<outputs.ReservedInstanceOperationLock[]>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    public readonly platform!: pulumi.Output<string>;
    public readonly renewalStatus!: pulumi.Output<string>;
    public readonly reservedInstanceName!: pulumi.Output<string>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly scope!: pulumi.Output<string>;
    public /*out*/ readonly startTime!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ReservedInstanceTimeouts | undefined>;
    public readonly zoneId!: pulumi.Output<string | undefined>;

    /**
     * Create a ReservedInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReservedInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReservedInstanceArgs | ReservedInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReservedInstanceState | undefined;
            resourceInputs["allocationStatus"] = state ? state.allocationStatus : undefined;
            resourceInputs["autoRenewPeriod"] = state ? state.autoRenewPeriod : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["expiredTime"] = state ? state.expiredTime : undefined;
            resourceInputs["instanceAmount"] = state ? state.instanceAmount : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["offeringType"] = state ? state.offeringType : undefined;
            resourceInputs["operationLocks"] = state ? state.operationLocks : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["renewalStatus"] = state ? state.renewalStatus : undefined;
            resourceInputs["reservedInstanceName"] = state ? state.reservedInstanceName : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as ReservedInstanceArgs | undefined;
            if ((!args || args.instanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceType'");
            }
            resourceInputs["autoRenewPeriod"] = args ? args.autoRenewPeriod : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["instanceAmount"] = args ? args.instanceAmount : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["offeringType"] = args ? args.offeringType : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["platform"] = args ? args.platform : undefined;
            resourceInputs["renewalStatus"] = args ? args.renewalStatus : undefined;
            resourceInputs["reservedInstanceName"] = args ? args.reservedInstanceName : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["allocationStatus"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["expiredTime"] = undefined /*out*/;
            resourceInputs["operationLocks"] = undefined /*out*/;
            resourceInputs["startTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ReservedInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ReservedInstance resources.
 */
export interface ReservedInstanceState {
    allocationStatus?: pulumi.Input<string>;
    autoRenewPeriod?: pulumi.Input<number>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    expiredTime?: pulumi.Input<string>;
    instanceAmount?: pulumi.Input<number>;
    instanceType?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    name?: pulumi.Input<string>;
    offeringType?: pulumi.Input<string>;
    operationLocks?: pulumi.Input<pulumi.Input<inputs.ReservedInstanceOperationLock>[]>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    platform?: pulumi.Input<string>;
    renewalStatus?: pulumi.Input<string>;
    reservedInstanceName?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ReservedInstanceTimeouts>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ReservedInstance resource.
 */
export interface ReservedInstanceArgs {
    autoRenewPeriod?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    instanceAmount?: pulumi.Input<number>;
    instanceType: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    name?: pulumi.Input<string>;
    offeringType?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    platform?: pulumi.Input<string>;
    renewalStatus?: pulumi.Input<string>;
    reservedInstanceName?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ReservedInstanceTimeouts>;
    zoneId?: pulumi.Input<string>;
}
