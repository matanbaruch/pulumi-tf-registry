// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FnfExecution extends pulumi.CustomResource {
    /**
     * Get an existing FnfExecution resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FnfExecutionState, opts?: pulumi.CustomResourceOptions): FnfExecution {
        return new FnfExecution(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/fnfExecution:FnfExecution';

    /**
     * Returns true if the given object is an instance of FnfExecution.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FnfExecution {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FnfExecution.__pulumiType;
    }

    public readonly executionName!: pulumi.Output<string>;
    public readonly flowName!: pulumi.Output<string>;
    public readonly input!: pulumi.Output<string | undefined>;
    public readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.FnfExecutionTimeouts | undefined>;

    /**
     * Create a FnfExecution resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FnfExecutionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FnfExecutionArgs | FnfExecutionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FnfExecutionState | undefined;
            resourceInputs["executionName"] = state ? state.executionName : undefined;
            resourceInputs["flowName"] = state ? state.flowName : undefined;
            resourceInputs["input"] = state ? state.input : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as FnfExecutionArgs | undefined;
            if ((!args || args.executionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'executionName'");
            }
            if ((!args || args.flowName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flowName'");
            }
            resourceInputs["executionName"] = args ? args.executionName : undefined;
            resourceInputs["flowName"] = args ? args.flowName : undefined;
            resourceInputs["input"] = args ? args.input : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FnfExecution.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FnfExecution resources.
 */
export interface FnfExecutionState {
    executionName?: pulumi.Input<string>;
    flowName?: pulumi.Input<string>;
    input?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FnfExecutionTimeouts>;
}

/**
 * The set of arguments for constructing a FnfExecution resource.
 */
export interface FnfExecutionArgs {
    executionName: pulumi.Input<string>;
    flowName: pulumi.Input<string>;
    input?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FnfExecutionTimeouts>;
}
