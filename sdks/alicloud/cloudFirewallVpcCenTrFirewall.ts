// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudFirewallVpcCenTrFirewall extends pulumi.CustomResource {
    /**
     * Get an existing CloudFirewallVpcCenTrFirewall resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudFirewallVpcCenTrFirewallState, opts?: pulumi.CustomResourceOptions): CloudFirewallVpcCenTrFirewall {
        return new CloudFirewallVpcCenTrFirewall(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/cloudFirewallVpcCenTrFirewall:CloudFirewallVpcCenTrFirewall';

    /**
     * Returns true if the given object is an instance of CloudFirewallVpcCenTrFirewall.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudFirewallVpcCenTrFirewall {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudFirewallVpcCenTrFirewall.__pulumiType;
    }

    public readonly cenId!: pulumi.Output<string>;
    public readonly firewallDescription!: pulumi.Output<string | undefined>;
    public readonly firewallName!: pulumi.Output<string>;
    public readonly firewallSubnetCidr!: pulumi.Output<string>;
    public readonly firewallVpcCidr!: pulumi.Output<string>;
    public readonly regionNo!: pulumi.Output<string>;
    public readonly routeMode!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CloudFirewallVpcCenTrFirewallTimeouts | undefined>;
    public readonly trAttachmentMasterCidr!: pulumi.Output<string>;
    public readonly trAttachmentMasterZone!: pulumi.Output<string | undefined>;
    public readonly trAttachmentSlaveCidr!: pulumi.Output<string>;
    public readonly trAttachmentSlaveZone!: pulumi.Output<string | undefined>;
    public readonly transitRouterId!: pulumi.Output<string>;

    /**
     * Create a CloudFirewallVpcCenTrFirewall resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudFirewallVpcCenTrFirewallArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudFirewallVpcCenTrFirewallArgs | CloudFirewallVpcCenTrFirewallState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudFirewallVpcCenTrFirewallState | undefined;
            resourceInputs["cenId"] = state ? state.cenId : undefined;
            resourceInputs["firewallDescription"] = state ? state.firewallDescription : undefined;
            resourceInputs["firewallName"] = state ? state.firewallName : undefined;
            resourceInputs["firewallSubnetCidr"] = state ? state.firewallSubnetCidr : undefined;
            resourceInputs["firewallVpcCidr"] = state ? state.firewallVpcCidr : undefined;
            resourceInputs["regionNo"] = state ? state.regionNo : undefined;
            resourceInputs["routeMode"] = state ? state.routeMode : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["trAttachmentMasterCidr"] = state ? state.trAttachmentMasterCidr : undefined;
            resourceInputs["trAttachmentMasterZone"] = state ? state.trAttachmentMasterZone : undefined;
            resourceInputs["trAttachmentSlaveCidr"] = state ? state.trAttachmentSlaveCidr : undefined;
            resourceInputs["trAttachmentSlaveZone"] = state ? state.trAttachmentSlaveZone : undefined;
            resourceInputs["transitRouterId"] = state ? state.transitRouterId : undefined;
        } else {
            const args = argsOrState as CloudFirewallVpcCenTrFirewallArgs | undefined;
            if ((!args || args.cenId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cenId'");
            }
            if ((!args || args.firewallName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'firewallName'");
            }
            if ((!args || args.firewallSubnetCidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'firewallSubnetCidr'");
            }
            if ((!args || args.firewallVpcCidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'firewallVpcCidr'");
            }
            if ((!args || args.regionNo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regionNo'");
            }
            if ((!args || args.routeMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routeMode'");
            }
            if ((!args || args.trAttachmentMasterCidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trAttachmentMasterCidr'");
            }
            if ((!args || args.trAttachmentSlaveCidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trAttachmentSlaveCidr'");
            }
            if ((!args || args.transitRouterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'transitRouterId'");
            }
            resourceInputs["cenId"] = args ? args.cenId : undefined;
            resourceInputs["firewallDescription"] = args ? args.firewallDescription : undefined;
            resourceInputs["firewallName"] = args ? args.firewallName : undefined;
            resourceInputs["firewallSubnetCidr"] = args ? args.firewallSubnetCidr : undefined;
            resourceInputs["firewallVpcCidr"] = args ? args.firewallVpcCidr : undefined;
            resourceInputs["regionNo"] = args ? args.regionNo : undefined;
            resourceInputs["routeMode"] = args ? args.routeMode : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["trAttachmentMasterCidr"] = args ? args.trAttachmentMasterCidr : undefined;
            resourceInputs["trAttachmentMasterZone"] = args ? args.trAttachmentMasterZone : undefined;
            resourceInputs["trAttachmentSlaveCidr"] = args ? args.trAttachmentSlaveCidr : undefined;
            resourceInputs["trAttachmentSlaveZone"] = args ? args.trAttachmentSlaveZone : undefined;
            resourceInputs["transitRouterId"] = args ? args.transitRouterId : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudFirewallVpcCenTrFirewall.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudFirewallVpcCenTrFirewall resources.
 */
export interface CloudFirewallVpcCenTrFirewallState {
    cenId?: pulumi.Input<string>;
    firewallDescription?: pulumi.Input<string>;
    firewallName?: pulumi.Input<string>;
    firewallSubnetCidr?: pulumi.Input<string>;
    firewallVpcCidr?: pulumi.Input<string>;
    regionNo?: pulumi.Input<string>;
    routeMode?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CloudFirewallVpcCenTrFirewallTimeouts>;
    trAttachmentMasterCidr?: pulumi.Input<string>;
    trAttachmentMasterZone?: pulumi.Input<string>;
    trAttachmentSlaveCidr?: pulumi.Input<string>;
    trAttachmentSlaveZone?: pulumi.Input<string>;
    transitRouterId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudFirewallVpcCenTrFirewall resource.
 */
export interface CloudFirewallVpcCenTrFirewallArgs {
    cenId: pulumi.Input<string>;
    firewallDescription?: pulumi.Input<string>;
    firewallName: pulumi.Input<string>;
    firewallSubnetCidr: pulumi.Input<string>;
    firewallVpcCidr: pulumi.Input<string>;
    regionNo: pulumi.Input<string>;
    routeMode: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CloudFirewallVpcCenTrFirewallTimeouts>;
    trAttachmentMasterCidr: pulumi.Input<string>;
    trAttachmentMasterZone?: pulumi.Input<string>;
    trAttachmentSlaveCidr: pulumi.Input<string>;
    trAttachmentSlaveZone?: pulumi.Input<string>;
    transitRouterId: pulumi.Input<string>;
}
