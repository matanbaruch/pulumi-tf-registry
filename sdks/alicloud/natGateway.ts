// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NatGateway extends pulumi.CustomResource {
    /**
     * Get an existing NatGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NatGatewayState, opts?: pulumi.CustomResourceOptions): NatGateway {
        return new NatGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/natGateway:NatGateway';

    /**
     * Returns true if the given object is an instance of NatGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NatGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NatGateway.__pulumiType;
    }

    public /*out*/ readonly bandwidthPackageIds!: pulumi.Output<string>;
    public readonly bandwidthPackages!: pulumi.Output<outputs.NatGatewayBandwidthPackage[] | undefined>;
    public readonly deletionProtection!: pulumi.Output<boolean>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dryRun!: pulumi.Output<boolean | undefined>;
    public readonly eipBindMode!: pulumi.Output<string>;
    public readonly force!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly forwardTableIds!: pulumi.Output<string>;
    public readonly instanceChargeType!: pulumi.Output<string>;
    public readonly internetChargeType!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly natGatewayName!: pulumi.Output<string>;
    public readonly natType!: pulumi.Output<string>;
    public readonly networkType!: pulumi.Output<string>;
    public readonly paymentType!: pulumi.Output<string>;
    public readonly period!: pulumi.Output<number | undefined>;
    public /*out*/ readonly snatTableIds!: pulumi.Output<string>;
    public readonly spec!: pulumi.Output<string | undefined>;
    public readonly specification!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.NatGatewayTimeouts | undefined>;
    public readonly vpcId!: pulumi.Output<string>;
    public readonly vswitchId!: pulumi.Output<string | undefined>;

    /**
     * Create a NatGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NatGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NatGatewayArgs | NatGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NatGatewayState | undefined;
            resourceInputs["bandwidthPackageIds"] = state ? state.bandwidthPackageIds : undefined;
            resourceInputs["bandwidthPackages"] = state ? state.bandwidthPackages : undefined;
            resourceInputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dryRun"] = state ? state.dryRun : undefined;
            resourceInputs["eipBindMode"] = state ? state.eipBindMode : undefined;
            resourceInputs["force"] = state ? state.force : undefined;
            resourceInputs["forwardTableIds"] = state ? state.forwardTableIds : undefined;
            resourceInputs["instanceChargeType"] = state ? state.instanceChargeType : undefined;
            resourceInputs["internetChargeType"] = state ? state.internetChargeType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["natGatewayName"] = state ? state.natGatewayName : undefined;
            resourceInputs["natType"] = state ? state.natType : undefined;
            resourceInputs["networkType"] = state ? state.networkType : undefined;
            resourceInputs["paymentType"] = state ? state.paymentType : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["snatTableIds"] = state ? state.snatTableIds : undefined;
            resourceInputs["spec"] = state ? state.spec : undefined;
            resourceInputs["specification"] = state ? state.specification : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
        } else {
            const args = argsOrState as NatGatewayArgs | undefined;
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["bandwidthPackages"] = args ? args.bandwidthPackages : undefined;
            resourceInputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dryRun"] = args ? args.dryRun : undefined;
            resourceInputs["eipBindMode"] = args ? args.eipBindMode : undefined;
            resourceInputs["force"] = args ? args.force : undefined;
            resourceInputs["instanceChargeType"] = args ? args.instanceChargeType : undefined;
            resourceInputs["internetChargeType"] = args ? args.internetChargeType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["natGatewayName"] = args ? args.natGatewayName : undefined;
            resourceInputs["natType"] = args ? args.natType : undefined;
            resourceInputs["networkType"] = args ? args.networkType : undefined;
            resourceInputs["paymentType"] = args ? args.paymentType : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
            resourceInputs["specification"] = args ? args.specification : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["bandwidthPackageIds"] = undefined /*out*/;
            resourceInputs["forwardTableIds"] = undefined /*out*/;
            resourceInputs["snatTableIds"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NatGateway.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NatGateway resources.
 */
export interface NatGatewayState {
    bandwidthPackageIds?: pulumi.Input<string>;
    bandwidthPackages?: pulumi.Input<pulumi.Input<inputs.NatGatewayBandwidthPackage>[]>;
    deletionProtection?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    dryRun?: pulumi.Input<boolean>;
    eipBindMode?: pulumi.Input<string>;
    force?: pulumi.Input<boolean>;
    forwardTableIds?: pulumi.Input<string>;
    instanceChargeType?: pulumi.Input<string>;
    internetChargeType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    natGatewayName?: pulumi.Input<string>;
    natType?: pulumi.Input<string>;
    networkType?: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    snatTableIds?: pulumi.Input<string>;
    spec?: pulumi.Input<string>;
    specification?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.NatGatewayTimeouts>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NatGateway resource.
 */
export interface NatGatewayArgs {
    bandwidthPackages?: pulumi.Input<pulumi.Input<inputs.NatGatewayBandwidthPackage>[]>;
    deletionProtection?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    dryRun?: pulumi.Input<boolean>;
    eipBindMode?: pulumi.Input<string>;
    force?: pulumi.Input<boolean>;
    instanceChargeType?: pulumi.Input<string>;
    internetChargeType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    natGatewayName?: pulumi.Input<string>;
    natType?: pulumi.Input<string>;
    networkType?: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    spec?: pulumi.Input<string>;
    specification?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.NatGatewayTimeouts>;
    vpcId: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
}
