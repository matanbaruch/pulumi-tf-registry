// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RamAccountPasswordPolicy extends pulumi.CustomResource {
    /**
     * Get an existing RamAccountPasswordPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RamAccountPasswordPolicyState, opts?: pulumi.CustomResourceOptions): RamAccountPasswordPolicy {
        return new RamAccountPasswordPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/ramAccountPasswordPolicy:RamAccountPasswordPolicy';

    /**
     * Returns true if the given object is an instance of RamAccountPasswordPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RamAccountPasswordPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RamAccountPasswordPolicy.__pulumiType;
    }

    public readonly hardExpiry!: pulumi.Output<boolean | undefined>;
    public readonly maxLoginAttempts!: pulumi.Output<number | undefined>;
    public readonly maxPasswordAge!: pulumi.Output<number | undefined>;
    public readonly minimumPasswordLength!: pulumi.Output<number | undefined>;
    public readonly passwordReusePrevention!: pulumi.Output<number | undefined>;
    public readonly requireLowercaseCharacters!: pulumi.Output<boolean | undefined>;
    public readonly requireNumbers!: pulumi.Output<boolean | undefined>;
    public readonly requireSymbols!: pulumi.Output<boolean | undefined>;
    public readonly requireUppercaseCharacters!: pulumi.Output<boolean | undefined>;

    /**
     * Create a RamAccountPasswordPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RamAccountPasswordPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RamAccountPasswordPolicyArgs | RamAccountPasswordPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RamAccountPasswordPolicyState | undefined;
            resourceInputs["hardExpiry"] = state ? state.hardExpiry : undefined;
            resourceInputs["maxLoginAttempts"] = state ? state.maxLoginAttempts : undefined;
            resourceInputs["maxPasswordAge"] = state ? state.maxPasswordAge : undefined;
            resourceInputs["minimumPasswordLength"] = state ? state.minimumPasswordLength : undefined;
            resourceInputs["passwordReusePrevention"] = state ? state.passwordReusePrevention : undefined;
            resourceInputs["requireLowercaseCharacters"] = state ? state.requireLowercaseCharacters : undefined;
            resourceInputs["requireNumbers"] = state ? state.requireNumbers : undefined;
            resourceInputs["requireSymbols"] = state ? state.requireSymbols : undefined;
            resourceInputs["requireUppercaseCharacters"] = state ? state.requireUppercaseCharacters : undefined;
        } else {
            const args = argsOrState as RamAccountPasswordPolicyArgs | undefined;
            resourceInputs["hardExpiry"] = args ? args.hardExpiry : undefined;
            resourceInputs["maxLoginAttempts"] = args ? args.maxLoginAttempts : undefined;
            resourceInputs["maxPasswordAge"] = args ? args.maxPasswordAge : undefined;
            resourceInputs["minimumPasswordLength"] = args ? args.minimumPasswordLength : undefined;
            resourceInputs["passwordReusePrevention"] = args ? args.passwordReusePrevention : undefined;
            resourceInputs["requireLowercaseCharacters"] = args ? args.requireLowercaseCharacters : undefined;
            resourceInputs["requireNumbers"] = args ? args.requireNumbers : undefined;
            resourceInputs["requireSymbols"] = args ? args.requireSymbols : undefined;
            resourceInputs["requireUppercaseCharacters"] = args ? args.requireUppercaseCharacters : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RamAccountPasswordPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RamAccountPasswordPolicy resources.
 */
export interface RamAccountPasswordPolicyState {
    hardExpiry?: pulumi.Input<boolean>;
    maxLoginAttempts?: pulumi.Input<number>;
    maxPasswordAge?: pulumi.Input<number>;
    minimumPasswordLength?: pulumi.Input<number>;
    passwordReusePrevention?: pulumi.Input<number>;
    requireLowercaseCharacters?: pulumi.Input<boolean>;
    requireNumbers?: pulumi.Input<boolean>;
    requireSymbols?: pulumi.Input<boolean>;
    requireUppercaseCharacters?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a RamAccountPasswordPolicy resource.
 */
export interface RamAccountPasswordPolicyArgs {
    hardExpiry?: pulumi.Input<boolean>;
    maxLoginAttempts?: pulumi.Input<number>;
    maxPasswordAge?: pulumi.Input<number>;
    minimumPasswordLength?: pulumi.Input<number>;
    passwordReusePrevention?: pulumi.Input<number>;
    requireLowercaseCharacters?: pulumi.Input<boolean>;
    requireNumbers?: pulumi.Input<boolean>;
    requireSymbols?: pulumi.Input<boolean>;
    requireUppercaseCharacters?: pulumi.Input<boolean>;
}
