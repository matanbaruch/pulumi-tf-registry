// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ArmsPrometheus extends pulumi.CustomResource {
    /**
     * Get an existing ArmsPrometheus resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ArmsPrometheusState, opts?: pulumi.CustomResourceOptions): ArmsPrometheus {
        return new ArmsPrometheus(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/armsPrometheus:ArmsPrometheus';

    /**
     * Returns true if the given object is an instance of ArmsPrometheus.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ArmsPrometheus {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ArmsPrometheus.__pulumiType;
    }

    public readonly clusterId!: pulumi.Output<string>;
    public readonly clusterName!: pulumi.Output<string>;
    public readonly clusterType!: pulumi.Output<string>;
    public readonly grafanaInstanceId!: pulumi.Output<string>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly securityGroupId!: pulumi.Output<string | undefined>;
    public readonly subClustersJson!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ArmsPrometheusTimeouts | undefined>;
    public readonly vpcId!: pulumi.Output<string | undefined>;
    public readonly vswitchId!: pulumi.Output<string | undefined>;

    /**
     * Create a ArmsPrometheus resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ArmsPrometheusArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ArmsPrometheusArgs | ArmsPrometheusState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ArmsPrometheusState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["clusterType"] = state ? state.clusterType : undefined;
            resourceInputs["grafanaInstanceId"] = state ? state.grafanaInstanceId : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["subClustersJson"] = state ? state.subClustersJson : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
        } else {
            const args = argsOrState as ArmsPrometheusArgs | undefined;
            if ((!args || args.clusterType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterType'");
            }
            if ((!args || args.grafanaInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'grafanaInstanceId'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["clusterType"] = args ? args.clusterType : undefined;
            resourceInputs["grafanaInstanceId"] = args ? args.grafanaInstanceId : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["subClustersJson"] = args ? args.subClustersJson : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ArmsPrometheus.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ArmsPrometheus resources.
 */
export interface ArmsPrometheusState {
    clusterId?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterType?: pulumi.Input<string>;
    grafanaInstanceId?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    subClustersJson?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ArmsPrometheusTimeouts>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ArmsPrometheus resource.
 */
export interface ArmsPrometheusArgs {
    clusterId?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterType: pulumi.Input<string>;
    grafanaInstanceId: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    subClustersJson?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ArmsPrometheusTimeouts>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
}
