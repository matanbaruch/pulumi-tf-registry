// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PvtzZone extends pulumi.CustomResource {
    /**
     * Get an existing PvtzZone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PvtzZoneState, opts?: pulumi.CustomResourceOptions): PvtzZone {
        return new PvtzZone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/pvtzZone:PvtzZone';

    /**
     * Returns true if the given object is an instance of PvtzZone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PvtzZone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PvtzZone.__pulumiType;
    }

    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    public /*out*/ readonly isPtr!: pulumi.Output<boolean>;
    public readonly lang!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly name!: pulumi.Output<string>;
    public readonly proxyPattern!: pulumi.Output<string | undefined>;
    public /*out*/ readonly recordCount!: pulumi.Output<number>;
    public readonly remark!: pulumi.Output<string | undefined>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly syncStatus!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.PvtzZoneTimeouts | undefined>;
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    public readonly userClientIp!: pulumi.Output<string | undefined>;
    public readonly userInfos!: pulumi.Output<outputs.PvtzZoneUserInfo[] | undefined>;
    public readonly zoneName!: pulumi.Output<string>;

    /**
     * Create a PvtzZone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PvtzZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PvtzZoneArgs | PvtzZoneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PvtzZoneState | undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["isPtr"] = state ? state.isPtr : undefined;
            resourceInputs["lang"] = state ? state.lang : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["proxyPattern"] = state ? state.proxyPattern : undefined;
            resourceInputs["recordCount"] = state ? state.recordCount : undefined;
            resourceInputs["remark"] = state ? state.remark : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["syncStatus"] = state ? state.syncStatus : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["userClientIp"] = state ? state.userClientIp : undefined;
            resourceInputs["userInfos"] = state ? state.userInfos : undefined;
            resourceInputs["zoneName"] = state ? state.zoneName : undefined;
        } else {
            const args = argsOrState as PvtzZoneArgs | undefined;
            resourceInputs["lang"] = args ? args.lang : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["proxyPattern"] = args ? args.proxyPattern : undefined;
            resourceInputs["remark"] = args ? args.remark : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["syncStatus"] = args ? args.syncStatus : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userClientIp"] = args ? args.userClientIp : undefined;
            resourceInputs["userInfos"] = args ? args.userInfos : undefined;
            resourceInputs["zoneName"] = args ? args.zoneName : undefined;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["isPtr"] = undefined /*out*/;
            resourceInputs["recordCount"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PvtzZone.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PvtzZone resources.
 */
export interface PvtzZoneState {
    creationTime?: pulumi.Input<string>;
    isPtr?: pulumi.Input<boolean>;
    lang?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    name?: pulumi.Input<string>;
    proxyPattern?: pulumi.Input<string>;
    recordCount?: pulumi.Input<number>;
    remark?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    syncStatus?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.PvtzZoneTimeouts>;
    updateTime?: pulumi.Input<string>;
    userClientIp?: pulumi.Input<string>;
    userInfos?: pulumi.Input<pulumi.Input<inputs.PvtzZoneUserInfo>[]>;
    zoneName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PvtzZone resource.
 */
export interface PvtzZoneArgs {
    lang?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    name?: pulumi.Input<string>;
    proxyPattern?: pulumi.Input<string>;
    remark?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    syncStatus?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.PvtzZoneTimeouts>;
    userClientIp?: pulumi.Input<string>;
    userInfos?: pulumi.Input<pulumi.Input<inputs.PvtzZoneUserInfo>[]>;
    zoneName?: pulumi.Input<string>;
}
