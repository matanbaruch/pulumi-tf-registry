// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CenRouteMap extends pulumi.CustomResource {
    /**
     * Get an existing CenRouteMap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CenRouteMapState, opts?: pulumi.CustomResourceOptions): CenRouteMap {
        return new CenRouteMap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/cenRouteMap:CenRouteMap';

    /**
     * Returns true if the given object is an instance of CenRouteMap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CenRouteMap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CenRouteMap.__pulumiType;
    }

    public readonly asPathMatchMode!: pulumi.Output<string | undefined>;
    public readonly cenId!: pulumi.Output<string>;
    public readonly cenRegionId!: pulumi.Output<string>;
    public readonly cidrMatchMode!: pulumi.Output<string | undefined>;
    public readonly communityMatchMode!: pulumi.Output<string | undefined>;
    public readonly communityOperateMode!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly destinationChildInstanceTypes!: pulumi.Output<string[] | undefined>;
    public readonly destinationCidrBlocks!: pulumi.Output<string[] | undefined>;
    public readonly destinationInstanceIds!: pulumi.Output<string[] | undefined>;
    public readonly destinationInstanceIdsReverseMatch!: pulumi.Output<boolean | undefined>;
    public readonly destinationRouteTableIds!: pulumi.Output<string[] | undefined>;
    public readonly mapResult!: pulumi.Output<string>;
    public readonly matchAsns!: pulumi.Output<string[] | undefined>;
    public readonly matchCommunitySets!: pulumi.Output<string[] | undefined>;
    public readonly nextPriority!: pulumi.Output<number | undefined>;
    public readonly operateCommunitySets!: pulumi.Output<string[] | undefined>;
    public readonly preference!: pulumi.Output<number | undefined>;
    public readonly prependAsPaths!: pulumi.Output<string[] | undefined>;
    public readonly priority!: pulumi.Output<number>;
    public /*out*/ readonly routeMapId!: pulumi.Output<string>;
    public readonly routeTypes!: pulumi.Output<string[] | undefined>;
    public readonly sourceChildInstanceTypes!: pulumi.Output<string[] | undefined>;
    public readonly sourceInstanceIds!: pulumi.Output<string[] | undefined>;
    public readonly sourceInstanceIdsReverseMatch!: pulumi.Output<boolean | undefined>;
    public readonly sourceRegionIds!: pulumi.Output<string[] | undefined>;
    public readonly sourceRouteTableIds!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CenRouteMapTimeouts | undefined>;
    public readonly transitRouterRouteTableId!: pulumi.Output<string>;
    public readonly transmitDirection!: pulumi.Output<string>;

    /**
     * Create a CenRouteMap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CenRouteMapArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CenRouteMapArgs | CenRouteMapState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CenRouteMapState | undefined;
            resourceInputs["asPathMatchMode"] = state ? state.asPathMatchMode : undefined;
            resourceInputs["cenId"] = state ? state.cenId : undefined;
            resourceInputs["cenRegionId"] = state ? state.cenRegionId : undefined;
            resourceInputs["cidrMatchMode"] = state ? state.cidrMatchMode : undefined;
            resourceInputs["communityMatchMode"] = state ? state.communityMatchMode : undefined;
            resourceInputs["communityOperateMode"] = state ? state.communityOperateMode : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationChildInstanceTypes"] = state ? state.destinationChildInstanceTypes : undefined;
            resourceInputs["destinationCidrBlocks"] = state ? state.destinationCidrBlocks : undefined;
            resourceInputs["destinationInstanceIds"] = state ? state.destinationInstanceIds : undefined;
            resourceInputs["destinationInstanceIdsReverseMatch"] = state ? state.destinationInstanceIdsReverseMatch : undefined;
            resourceInputs["destinationRouteTableIds"] = state ? state.destinationRouteTableIds : undefined;
            resourceInputs["mapResult"] = state ? state.mapResult : undefined;
            resourceInputs["matchAsns"] = state ? state.matchAsns : undefined;
            resourceInputs["matchCommunitySets"] = state ? state.matchCommunitySets : undefined;
            resourceInputs["nextPriority"] = state ? state.nextPriority : undefined;
            resourceInputs["operateCommunitySets"] = state ? state.operateCommunitySets : undefined;
            resourceInputs["preference"] = state ? state.preference : undefined;
            resourceInputs["prependAsPaths"] = state ? state.prependAsPaths : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["routeMapId"] = state ? state.routeMapId : undefined;
            resourceInputs["routeTypes"] = state ? state.routeTypes : undefined;
            resourceInputs["sourceChildInstanceTypes"] = state ? state.sourceChildInstanceTypes : undefined;
            resourceInputs["sourceInstanceIds"] = state ? state.sourceInstanceIds : undefined;
            resourceInputs["sourceInstanceIdsReverseMatch"] = state ? state.sourceInstanceIdsReverseMatch : undefined;
            resourceInputs["sourceRegionIds"] = state ? state.sourceRegionIds : undefined;
            resourceInputs["sourceRouteTableIds"] = state ? state.sourceRouteTableIds : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["transitRouterRouteTableId"] = state ? state.transitRouterRouteTableId : undefined;
            resourceInputs["transmitDirection"] = state ? state.transmitDirection : undefined;
        } else {
            const args = argsOrState as CenRouteMapArgs | undefined;
            if ((!args || args.cenId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cenId'");
            }
            if ((!args || args.cenRegionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cenRegionId'");
            }
            if ((!args || args.mapResult === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mapResult'");
            }
            if ((!args || args.priority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            if ((!args || args.transmitDirection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'transmitDirection'");
            }
            resourceInputs["asPathMatchMode"] = args ? args.asPathMatchMode : undefined;
            resourceInputs["cenId"] = args ? args.cenId : undefined;
            resourceInputs["cenRegionId"] = args ? args.cenRegionId : undefined;
            resourceInputs["cidrMatchMode"] = args ? args.cidrMatchMode : undefined;
            resourceInputs["communityMatchMode"] = args ? args.communityMatchMode : undefined;
            resourceInputs["communityOperateMode"] = args ? args.communityOperateMode : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationChildInstanceTypes"] = args ? args.destinationChildInstanceTypes : undefined;
            resourceInputs["destinationCidrBlocks"] = args ? args.destinationCidrBlocks : undefined;
            resourceInputs["destinationInstanceIds"] = args ? args.destinationInstanceIds : undefined;
            resourceInputs["destinationInstanceIdsReverseMatch"] = args ? args.destinationInstanceIdsReverseMatch : undefined;
            resourceInputs["destinationRouteTableIds"] = args ? args.destinationRouteTableIds : undefined;
            resourceInputs["mapResult"] = args ? args.mapResult : undefined;
            resourceInputs["matchAsns"] = args ? args.matchAsns : undefined;
            resourceInputs["matchCommunitySets"] = args ? args.matchCommunitySets : undefined;
            resourceInputs["nextPriority"] = args ? args.nextPriority : undefined;
            resourceInputs["operateCommunitySets"] = args ? args.operateCommunitySets : undefined;
            resourceInputs["preference"] = args ? args.preference : undefined;
            resourceInputs["prependAsPaths"] = args ? args.prependAsPaths : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["routeTypes"] = args ? args.routeTypes : undefined;
            resourceInputs["sourceChildInstanceTypes"] = args ? args.sourceChildInstanceTypes : undefined;
            resourceInputs["sourceInstanceIds"] = args ? args.sourceInstanceIds : undefined;
            resourceInputs["sourceInstanceIdsReverseMatch"] = args ? args.sourceInstanceIdsReverseMatch : undefined;
            resourceInputs["sourceRegionIds"] = args ? args.sourceRegionIds : undefined;
            resourceInputs["sourceRouteTableIds"] = args ? args.sourceRouteTableIds : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["transitRouterRouteTableId"] = args ? args.transitRouterRouteTableId : undefined;
            resourceInputs["transmitDirection"] = args ? args.transmitDirection : undefined;
            resourceInputs["routeMapId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CenRouteMap.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CenRouteMap resources.
 */
export interface CenRouteMapState {
    asPathMatchMode?: pulumi.Input<string>;
    cenId?: pulumi.Input<string>;
    cenRegionId?: pulumi.Input<string>;
    cidrMatchMode?: pulumi.Input<string>;
    communityMatchMode?: pulumi.Input<string>;
    communityOperateMode?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    destinationChildInstanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    destinationCidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    destinationInstanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    destinationInstanceIdsReverseMatch?: pulumi.Input<boolean>;
    destinationRouteTableIds?: pulumi.Input<pulumi.Input<string>[]>;
    mapResult?: pulumi.Input<string>;
    matchAsns?: pulumi.Input<pulumi.Input<string>[]>;
    matchCommunitySets?: pulumi.Input<pulumi.Input<string>[]>;
    nextPriority?: pulumi.Input<number>;
    operateCommunitySets?: pulumi.Input<pulumi.Input<string>[]>;
    preference?: pulumi.Input<number>;
    prependAsPaths?: pulumi.Input<pulumi.Input<string>[]>;
    priority?: pulumi.Input<number>;
    routeMapId?: pulumi.Input<string>;
    routeTypes?: pulumi.Input<pulumi.Input<string>[]>;
    sourceChildInstanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    sourceInstanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    sourceInstanceIdsReverseMatch?: pulumi.Input<boolean>;
    sourceRegionIds?: pulumi.Input<pulumi.Input<string>[]>;
    sourceRouteTableIds?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CenRouteMapTimeouts>;
    transitRouterRouteTableId?: pulumi.Input<string>;
    transmitDirection?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CenRouteMap resource.
 */
export interface CenRouteMapArgs {
    asPathMatchMode?: pulumi.Input<string>;
    cenId: pulumi.Input<string>;
    cenRegionId: pulumi.Input<string>;
    cidrMatchMode?: pulumi.Input<string>;
    communityMatchMode?: pulumi.Input<string>;
    communityOperateMode?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    destinationChildInstanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    destinationCidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    destinationInstanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    destinationInstanceIdsReverseMatch?: pulumi.Input<boolean>;
    destinationRouteTableIds?: pulumi.Input<pulumi.Input<string>[]>;
    mapResult: pulumi.Input<string>;
    matchAsns?: pulumi.Input<pulumi.Input<string>[]>;
    matchCommunitySets?: pulumi.Input<pulumi.Input<string>[]>;
    nextPriority?: pulumi.Input<number>;
    operateCommunitySets?: pulumi.Input<pulumi.Input<string>[]>;
    preference?: pulumi.Input<number>;
    prependAsPaths?: pulumi.Input<pulumi.Input<string>[]>;
    priority: pulumi.Input<number>;
    routeTypes?: pulumi.Input<pulumi.Input<string>[]>;
    sourceChildInstanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    sourceInstanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    sourceInstanceIdsReverseMatch?: pulumi.Input<boolean>;
    sourceRegionIds?: pulumi.Input<pulumi.Input<string>[]>;
    sourceRouteTableIds?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.CenRouteMapTimeouts>;
    transitRouterRouteTableId?: pulumi.Input<string>;
    transmitDirection: pulumi.Input<string>;
}
