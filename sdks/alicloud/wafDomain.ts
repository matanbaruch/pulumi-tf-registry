// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WafDomain extends pulumi.CustomResource {
    /**
     * Get an existing WafDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WafDomainState, opts?: pulumi.CustomResourceOptions): WafDomain {
        return new WafDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/wafDomain:WafDomain';

    /**
     * Returns true if the given object is an instance of WafDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WafDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WafDomain.__pulumiType;
    }

    public readonly clusterType!: pulumi.Output<string | undefined>;
    public /*out*/ readonly cname!: pulumi.Output<string>;
    public readonly connectionTime!: pulumi.Output<number | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly domain!: pulumi.Output<string>;
    public readonly domainName!: pulumi.Output<string>;
    public readonly http2Ports!: pulumi.Output<string[] | undefined>;
    public readonly httpPorts!: pulumi.Output<string[] | undefined>;
    public readonly httpToUserIp!: pulumi.Output<string | undefined>;
    public readonly httpsPorts!: pulumi.Output<string[] | undefined>;
    public readonly httpsRedirect!: pulumi.Output<string | undefined>;
    public readonly instanceId!: pulumi.Output<string>;
    public readonly isAccessProduct!: pulumi.Output<string>;
    public readonly loadBalancing!: pulumi.Output<string | undefined>;
    public readonly logHeaders!: pulumi.Output<outputs.WafDomainLogHeader[] | undefined>;
    public readonly readTime!: pulumi.Output<number | undefined>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly sourceIps!: pulumi.Output<string[] | undefined>;
    public readonly writeTime!: pulumi.Output<number | undefined>;

    /**
     * Create a WafDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WafDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WafDomainArgs | WafDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WafDomainState | undefined;
            resourceInputs["clusterType"] = state ? state.clusterType : undefined;
            resourceInputs["cname"] = state ? state.cname : undefined;
            resourceInputs["connectionTime"] = state ? state.connectionTime : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["http2Ports"] = state ? state.http2Ports : undefined;
            resourceInputs["httpPorts"] = state ? state.httpPorts : undefined;
            resourceInputs["httpToUserIp"] = state ? state.httpToUserIp : undefined;
            resourceInputs["httpsPorts"] = state ? state.httpsPorts : undefined;
            resourceInputs["httpsRedirect"] = state ? state.httpsRedirect : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["isAccessProduct"] = state ? state.isAccessProduct : undefined;
            resourceInputs["loadBalancing"] = state ? state.loadBalancing : undefined;
            resourceInputs["logHeaders"] = state ? state.logHeaders : undefined;
            resourceInputs["readTime"] = state ? state.readTime : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["sourceIps"] = state ? state.sourceIps : undefined;
            resourceInputs["writeTime"] = state ? state.writeTime : undefined;
        } else {
            const args = argsOrState as WafDomainArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.isAccessProduct === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isAccessProduct'");
            }
            resourceInputs["clusterType"] = args ? args.clusterType : undefined;
            resourceInputs["connectionTime"] = args ? args.connectionTime : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["http2Ports"] = args ? args.http2Ports : undefined;
            resourceInputs["httpPorts"] = args ? args.httpPorts : undefined;
            resourceInputs["httpToUserIp"] = args ? args.httpToUserIp : undefined;
            resourceInputs["httpsPorts"] = args ? args.httpsPorts : undefined;
            resourceInputs["httpsRedirect"] = args ? args.httpsRedirect : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["isAccessProduct"] = args ? args.isAccessProduct : undefined;
            resourceInputs["loadBalancing"] = args ? args.loadBalancing : undefined;
            resourceInputs["logHeaders"] = args ? args.logHeaders : undefined;
            resourceInputs["readTime"] = args ? args.readTime : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["sourceIps"] = args ? args.sourceIps : undefined;
            resourceInputs["writeTime"] = args ? args.writeTime : undefined;
            resourceInputs["cname"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WafDomain.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WafDomain resources.
 */
export interface WafDomainState {
    clusterType?: pulumi.Input<string>;
    cname?: pulumi.Input<string>;
    connectionTime?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    domain?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    http2Ports?: pulumi.Input<pulumi.Input<string>[]>;
    httpPorts?: pulumi.Input<pulumi.Input<string>[]>;
    httpToUserIp?: pulumi.Input<string>;
    httpsPorts?: pulumi.Input<pulumi.Input<string>[]>;
    httpsRedirect?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    isAccessProduct?: pulumi.Input<string>;
    loadBalancing?: pulumi.Input<string>;
    logHeaders?: pulumi.Input<pulumi.Input<inputs.WafDomainLogHeader>[]>;
    readTime?: pulumi.Input<number>;
    resourceGroupId?: pulumi.Input<string>;
    sourceIps?: pulumi.Input<pulumi.Input<string>[]>;
    writeTime?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a WafDomain resource.
 */
export interface WafDomainArgs {
    clusterType?: pulumi.Input<string>;
    connectionTime?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    domain?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    http2Ports?: pulumi.Input<pulumi.Input<string>[]>;
    httpPorts?: pulumi.Input<pulumi.Input<string>[]>;
    httpToUserIp?: pulumi.Input<string>;
    httpsPorts?: pulumi.Input<pulumi.Input<string>[]>;
    httpsRedirect?: pulumi.Input<string>;
    instanceId: pulumi.Input<string>;
    isAccessProduct: pulumi.Input<string>;
    loadBalancing?: pulumi.Input<string>;
    logHeaders?: pulumi.Input<pulumi.Input<inputs.WafDomainLogHeader>[]>;
    readTime?: pulumi.Input<number>;
    resourceGroupId?: pulumi.Input<string>;
    sourceIps?: pulumi.Input<pulumi.Input<string>[]>;
    writeTime?: pulumi.Input<number>;
}
