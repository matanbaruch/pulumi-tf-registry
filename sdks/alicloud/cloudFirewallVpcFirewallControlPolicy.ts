// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudFirewallVpcFirewallControlPolicy extends pulumi.CustomResource {
    /**
     * Get an existing CloudFirewallVpcFirewallControlPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudFirewallVpcFirewallControlPolicyState, opts?: pulumi.CustomResourceOptions): CloudFirewallVpcFirewallControlPolicy {
        return new CloudFirewallVpcFirewallControlPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/cloudFirewallVpcFirewallControlPolicy:CloudFirewallVpcFirewallControlPolicy';

    /**
     * Returns true if the given object is an instance of CloudFirewallVpcFirewallControlPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudFirewallVpcFirewallControlPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudFirewallVpcFirewallControlPolicy.__pulumiType;
    }

    public readonly aclAction!: pulumi.Output<string>;
    public /*out*/ readonly aclUuid!: pulumi.Output<string>;
    public /*out*/ readonly applicationId!: pulumi.Output<string>;
    public readonly applicationName!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly destPort!: pulumi.Output<string>;
    public readonly destPortGroup!: pulumi.Output<string | undefined>;
    public /*out*/ readonly destPortGroupPorts!: pulumi.Output<string[]>;
    public readonly destPortType!: pulumi.Output<string>;
    public readonly destination!: pulumi.Output<string>;
    public /*out*/ readonly destinationGroupCidrs!: pulumi.Output<string[]>;
    public /*out*/ readonly destinationGroupType!: pulumi.Output<string>;
    public readonly destinationType!: pulumi.Output<string>;
    public /*out*/ readonly hitTimes!: pulumi.Output<number>;
    public readonly lang!: pulumi.Output<string | undefined>;
    public readonly memberUid!: pulumi.Output<string>;
    public readonly order!: pulumi.Output<number>;
    public readonly proto!: pulumi.Output<string>;
    public readonly release!: pulumi.Output<boolean>;
    public readonly source!: pulumi.Output<string>;
    public /*out*/ readonly sourceGroupCidrs!: pulumi.Output<string[]>;
    public /*out*/ readonly sourceGroupType!: pulumi.Output<string>;
    public readonly sourceType!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CloudFirewallVpcFirewallControlPolicyTimeouts | undefined>;
    public readonly vpcFirewallId!: pulumi.Output<string>;

    /**
     * Create a CloudFirewallVpcFirewallControlPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudFirewallVpcFirewallControlPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudFirewallVpcFirewallControlPolicyArgs | CloudFirewallVpcFirewallControlPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudFirewallVpcFirewallControlPolicyState | undefined;
            resourceInputs["aclAction"] = state ? state.aclAction : undefined;
            resourceInputs["aclUuid"] = state ? state.aclUuid : undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["applicationName"] = state ? state.applicationName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destPort"] = state ? state.destPort : undefined;
            resourceInputs["destPortGroup"] = state ? state.destPortGroup : undefined;
            resourceInputs["destPortGroupPorts"] = state ? state.destPortGroupPorts : undefined;
            resourceInputs["destPortType"] = state ? state.destPortType : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["destinationGroupCidrs"] = state ? state.destinationGroupCidrs : undefined;
            resourceInputs["destinationGroupType"] = state ? state.destinationGroupType : undefined;
            resourceInputs["destinationType"] = state ? state.destinationType : undefined;
            resourceInputs["hitTimes"] = state ? state.hitTimes : undefined;
            resourceInputs["lang"] = state ? state.lang : undefined;
            resourceInputs["memberUid"] = state ? state.memberUid : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["proto"] = state ? state.proto : undefined;
            resourceInputs["release"] = state ? state.release : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["sourceGroupCidrs"] = state ? state.sourceGroupCidrs : undefined;
            resourceInputs["sourceGroupType"] = state ? state.sourceGroupType : undefined;
            resourceInputs["sourceType"] = state ? state.sourceType : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcFirewallId"] = state ? state.vpcFirewallId : undefined;
        } else {
            const args = argsOrState as CloudFirewallVpcFirewallControlPolicyArgs | undefined;
            if ((!args || args.aclAction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aclAction'");
            }
            if ((!args || args.applicationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationName'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.destination === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            if ((!args || args.destinationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationType'");
            }
            if ((!args || args.order === undefined) && !opts.urn) {
                throw new Error("Missing required property 'order'");
            }
            if ((!args || args.proto === undefined) && !opts.urn) {
                throw new Error("Missing required property 'proto'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            if ((!args || args.sourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceType'");
            }
            if ((!args || args.vpcFirewallId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcFirewallId'");
            }
            resourceInputs["aclAction"] = args ? args.aclAction : undefined;
            resourceInputs["applicationName"] = args ? args.applicationName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destPort"] = args ? args.destPort : undefined;
            resourceInputs["destPortGroup"] = args ? args.destPortGroup : undefined;
            resourceInputs["destPortType"] = args ? args.destPortType : undefined;
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["destinationType"] = args ? args.destinationType : undefined;
            resourceInputs["lang"] = args ? args.lang : undefined;
            resourceInputs["memberUid"] = args ? args.memberUid : undefined;
            resourceInputs["order"] = args ? args.order : undefined;
            resourceInputs["proto"] = args ? args.proto : undefined;
            resourceInputs["release"] = args ? args.release : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["sourceType"] = args ? args.sourceType : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcFirewallId"] = args ? args.vpcFirewallId : undefined;
            resourceInputs["aclUuid"] = undefined /*out*/;
            resourceInputs["applicationId"] = undefined /*out*/;
            resourceInputs["destPortGroupPorts"] = undefined /*out*/;
            resourceInputs["destinationGroupCidrs"] = undefined /*out*/;
            resourceInputs["destinationGroupType"] = undefined /*out*/;
            resourceInputs["hitTimes"] = undefined /*out*/;
            resourceInputs["sourceGroupCidrs"] = undefined /*out*/;
            resourceInputs["sourceGroupType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudFirewallVpcFirewallControlPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudFirewallVpcFirewallControlPolicy resources.
 */
export interface CloudFirewallVpcFirewallControlPolicyState {
    aclAction?: pulumi.Input<string>;
    aclUuid?: pulumi.Input<string>;
    applicationId?: pulumi.Input<string>;
    applicationName?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    destPort?: pulumi.Input<string>;
    destPortGroup?: pulumi.Input<string>;
    destPortGroupPorts?: pulumi.Input<pulumi.Input<string>[]>;
    destPortType?: pulumi.Input<string>;
    destination?: pulumi.Input<string>;
    destinationGroupCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    destinationGroupType?: pulumi.Input<string>;
    destinationType?: pulumi.Input<string>;
    hitTimes?: pulumi.Input<number>;
    lang?: pulumi.Input<string>;
    memberUid?: pulumi.Input<string>;
    order?: pulumi.Input<number>;
    proto?: pulumi.Input<string>;
    release?: pulumi.Input<boolean>;
    source?: pulumi.Input<string>;
    sourceGroupCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    sourceGroupType?: pulumi.Input<string>;
    sourceType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CloudFirewallVpcFirewallControlPolicyTimeouts>;
    vpcFirewallId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudFirewallVpcFirewallControlPolicy resource.
 */
export interface CloudFirewallVpcFirewallControlPolicyArgs {
    aclAction: pulumi.Input<string>;
    applicationName: pulumi.Input<string>;
    description: pulumi.Input<string>;
    destPort?: pulumi.Input<string>;
    destPortGroup?: pulumi.Input<string>;
    destPortType?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    destinationType: pulumi.Input<string>;
    lang?: pulumi.Input<string>;
    memberUid?: pulumi.Input<string>;
    order: pulumi.Input<number>;
    proto: pulumi.Input<string>;
    release?: pulumi.Input<boolean>;
    source: pulumi.Input<string>;
    sourceType: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CloudFirewallVpcFirewallControlPolicyTimeouts>;
    vpcFirewallId: pulumi.Input<string>;
}
