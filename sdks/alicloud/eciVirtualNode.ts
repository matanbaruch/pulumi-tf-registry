// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EciVirtualNode extends pulumi.CustomResource {
    /**
     * Get an existing EciVirtualNode resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EciVirtualNodeState, opts?: pulumi.CustomResourceOptions): EciVirtualNode {
        return new EciVirtualNode(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/eciVirtualNode:EciVirtualNode';

    /**
     * Returns true if the given object is an instance of EciVirtualNode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EciVirtualNode {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EciVirtualNode.__pulumiType;
    }

    public readonly eipInstanceId!: pulumi.Output<string>;
    public readonly enablePublicNetwork!: pulumi.Output<boolean | undefined>;
    public readonly kubeConfig!: pulumi.Output<string>;
    public readonly resourceGroupId!: pulumi.Output<string | undefined>;
    public readonly securityGroupId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly taints!: pulumi.Output<outputs.EciVirtualNodeTaint[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.EciVirtualNodeTimeouts | undefined>;
    public readonly virtualNodeName!: pulumi.Output<string | undefined>;
    public readonly vswitchId!: pulumi.Output<string>;
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a EciVirtualNode resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EciVirtualNodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EciVirtualNodeArgs | EciVirtualNodeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EciVirtualNodeState | undefined;
            resourceInputs["eipInstanceId"] = state ? state.eipInstanceId : undefined;
            resourceInputs["enablePublicNetwork"] = state ? state.enablePublicNetwork : undefined;
            resourceInputs["kubeConfig"] = state ? state.kubeConfig : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["taints"] = state ? state.taints : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["virtualNodeName"] = state ? state.virtualNodeName : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as EciVirtualNodeArgs | undefined;
            if ((!args || args.kubeConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kubeConfig'");
            }
            if ((!args || args.securityGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            if ((!args || args.vswitchId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vswitchId'");
            }
            resourceInputs["eipInstanceId"] = args ? args.eipInstanceId : undefined;
            resourceInputs["enablePublicNetwork"] = args ? args.enablePublicNetwork : undefined;
            resourceInputs["kubeConfig"] = args ? args.kubeConfig : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["taints"] = args ? args.taints : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["virtualNodeName"] = args ? args.virtualNodeName : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EciVirtualNode.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EciVirtualNode resources.
 */
export interface EciVirtualNodeState {
    eipInstanceId?: pulumi.Input<string>;
    enablePublicNetwork?: pulumi.Input<boolean>;
    kubeConfig?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taints?: pulumi.Input<pulumi.Input<inputs.EciVirtualNodeTaint>[]>;
    timeouts?: pulumi.Input<inputs.EciVirtualNodeTimeouts>;
    virtualNodeName?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EciVirtualNode resource.
 */
export interface EciVirtualNodeArgs {
    eipInstanceId?: pulumi.Input<string>;
    enablePublicNetwork?: pulumi.Input<boolean>;
    kubeConfig: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    securityGroupId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taints?: pulumi.Input<pulumi.Input<inputs.EciVirtualNodeTaint>[]>;
    timeouts?: pulumi.Input<inputs.EciVirtualNodeTimeouts>;
    virtualNodeName?: pulumi.Input<string>;
    vswitchId: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}
