// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DcdnDomain extends pulumi.CustomResource {
    /**
     * Get an existing DcdnDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DcdnDomainState, opts?: pulumi.CustomResourceOptions): DcdnDomain {
        return new DcdnDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/dcdnDomain:DcdnDomain';

    /**
     * Returns true if the given object is an instance of DcdnDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DcdnDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DcdnDomain.__pulumiType;
    }

    public readonly certId!: pulumi.Output<string>;
    public readonly certName!: pulumi.Output<string>;
    public readonly certRegion!: pulumi.Output<string>;
    public readonly certType!: pulumi.Output<string>;
    public readonly checkUrl!: pulumi.Output<string | undefined>;
    public /*out*/ readonly cname!: pulumi.Output<string>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly domainName!: pulumi.Output<string>;
    public readonly env!: pulumi.Output<string | undefined>;
    public readonly functionType!: pulumi.Output<string | undefined>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly scene!: pulumi.Output<string | undefined>;
    public readonly scope!: pulumi.Output<string | undefined>;
    public readonly sources!: pulumi.Output<outputs.DcdnDomainSource[] | undefined>;
    public readonly sslPri!: pulumi.Output<string | undefined>;
    public readonly sslProtocol!: pulumi.Output<string | undefined>;
    public readonly sslPub!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.DcdnDomainTimeouts | undefined>;
    public readonly topLevelDomain!: pulumi.Output<string | undefined>;

    /**
     * Create a DcdnDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DcdnDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DcdnDomainArgs | DcdnDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DcdnDomainState | undefined;
            resourceInputs["certId"] = state ? state.certId : undefined;
            resourceInputs["certName"] = state ? state.certName : undefined;
            resourceInputs["certRegion"] = state ? state.certRegion : undefined;
            resourceInputs["certType"] = state ? state.certType : undefined;
            resourceInputs["checkUrl"] = state ? state.checkUrl : undefined;
            resourceInputs["cname"] = state ? state.cname : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["env"] = state ? state.env : undefined;
            resourceInputs["functionType"] = state ? state.functionType : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["scene"] = state ? state.scene : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["sources"] = state ? state.sources : undefined;
            resourceInputs["sslPri"] = state ? state.sslPri : undefined;
            resourceInputs["sslProtocol"] = state ? state.sslProtocol : undefined;
            resourceInputs["sslPub"] = state ? state.sslPub : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["topLevelDomain"] = state ? state.topLevelDomain : undefined;
        } else {
            const args = argsOrState as DcdnDomainArgs | undefined;
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            resourceInputs["certId"] = args ? args.certId : undefined;
            resourceInputs["certName"] = args ? args.certName : undefined;
            resourceInputs["certRegion"] = args ? args.certRegion : undefined;
            resourceInputs["certType"] = args ? args.certType : undefined;
            resourceInputs["checkUrl"] = args ? args.checkUrl : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["env"] = args ? args.env : undefined;
            resourceInputs["functionType"] = args ? args.functionType : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["scene"] = args ? args.scene : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["sources"] = args ? args.sources : undefined;
            resourceInputs["sslPri"] = args?.sslPri ? pulumi.secret(args.sslPri) : undefined;
            resourceInputs["sslProtocol"] = args ? args.sslProtocol : undefined;
            resourceInputs["sslPub"] = args ? args.sslPub : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["topLevelDomain"] = args ? args.topLevelDomain : undefined;
            resourceInputs["cname"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sslPri"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DcdnDomain.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DcdnDomain resources.
 */
export interface DcdnDomainState {
    certId?: pulumi.Input<string>;
    certName?: pulumi.Input<string>;
    certRegion?: pulumi.Input<string>;
    certType?: pulumi.Input<string>;
    checkUrl?: pulumi.Input<string>;
    cname?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    env?: pulumi.Input<string>;
    functionType?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    scene?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    sources?: pulumi.Input<pulumi.Input<inputs.DcdnDomainSource>[]>;
    sslPri?: pulumi.Input<string>;
    sslProtocol?: pulumi.Input<string>;
    sslPub?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.DcdnDomainTimeouts>;
    topLevelDomain?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DcdnDomain resource.
 */
export interface DcdnDomainArgs {
    certId?: pulumi.Input<string>;
    certName?: pulumi.Input<string>;
    certRegion?: pulumi.Input<string>;
    certType?: pulumi.Input<string>;
    checkUrl?: pulumi.Input<string>;
    domainName: pulumi.Input<string>;
    env?: pulumi.Input<string>;
    functionType?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    scene?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    sources?: pulumi.Input<pulumi.Input<inputs.DcdnDomainSource>[]>;
    sslPri?: pulumi.Input<string>;
    sslProtocol?: pulumi.Input<string>;
    sslPub?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.DcdnDomainTimeouts>;
    topLevelDomain?: pulumi.Input<string>;
}
