// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpnConnection extends pulumi.CustomResource {
    /**
     * Get an existing VpnConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnConnectionState, opts?: pulumi.CustomResourceOptions): VpnConnection {
        return new VpnConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/vpnConnection:VpnConnection';

    /**
     * Returns true if the given object is an instance of VpnConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnConnection.__pulumiType;
    }

    public readonly autoConfigRoute!: pulumi.Output<boolean | undefined>;
    public readonly bgpConfig!: pulumi.Output<outputs.VpnConnectionBgpConfig | undefined>;
    public /*out*/ readonly createTime!: pulumi.Output<number>;
    public readonly customerGatewayId!: pulumi.Output<string | undefined>;
    public readonly effectImmediately!: pulumi.Output<boolean | undefined>;
    public readonly enableDpd!: pulumi.Output<boolean>;
    public readonly enableNatTraversal!: pulumi.Output<boolean>;
    public readonly enableTunnelsBgp!: pulumi.Output<boolean>;
    public readonly healthCheckConfig!: pulumi.Output<outputs.VpnConnectionHealthCheckConfig | undefined>;
    public readonly ikeConfig!: pulumi.Output<outputs.VpnConnectionIkeConfig | undefined>;
    public readonly ipsecConfig!: pulumi.Output<outputs.VpnConnectionIpsecConfig | undefined>;
    public readonly localSubnets!: pulumi.Output<string[]>;
    /**
     * @deprecated Deprecated
     */
    public readonly name!: pulumi.Output<string>;
    public readonly networkType!: pulumi.Output<string | undefined>;
    public readonly remoteSubnets!: pulumi.Output<string[]>;
    public /*out*/ readonly resourceGroupId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.VpnConnectionTimeouts | undefined>;
    public readonly tunnelOptionsSpecifications!: pulumi.Output<outputs.VpnConnectionTunnelOptionsSpecification[] | undefined>;
    public readonly vpnConnectionName!: pulumi.Output<string>;
    public readonly vpnGatewayId!: pulumi.Output<string>;

    /**
     * Create a VpnConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnConnectionArgs | VpnConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnConnectionState | undefined;
            resourceInputs["autoConfigRoute"] = state ? state.autoConfigRoute : undefined;
            resourceInputs["bgpConfig"] = state ? state.bgpConfig : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["customerGatewayId"] = state ? state.customerGatewayId : undefined;
            resourceInputs["effectImmediately"] = state ? state.effectImmediately : undefined;
            resourceInputs["enableDpd"] = state ? state.enableDpd : undefined;
            resourceInputs["enableNatTraversal"] = state ? state.enableNatTraversal : undefined;
            resourceInputs["enableTunnelsBgp"] = state ? state.enableTunnelsBgp : undefined;
            resourceInputs["healthCheckConfig"] = state ? state.healthCheckConfig : undefined;
            resourceInputs["ikeConfig"] = state ? state.ikeConfig : undefined;
            resourceInputs["ipsecConfig"] = state ? state.ipsecConfig : undefined;
            resourceInputs["localSubnets"] = state ? state.localSubnets : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkType"] = state ? state.networkType : undefined;
            resourceInputs["remoteSubnets"] = state ? state.remoteSubnets : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["tunnelOptionsSpecifications"] = state ? state.tunnelOptionsSpecifications : undefined;
            resourceInputs["vpnConnectionName"] = state ? state.vpnConnectionName : undefined;
            resourceInputs["vpnGatewayId"] = state ? state.vpnGatewayId : undefined;
        } else {
            const args = argsOrState as VpnConnectionArgs | undefined;
            if ((!args || args.localSubnets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localSubnets'");
            }
            if ((!args || args.remoteSubnets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteSubnets'");
            }
            if ((!args || args.vpnGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpnGatewayId'");
            }
            resourceInputs["autoConfigRoute"] = args ? args.autoConfigRoute : undefined;
            resourceInputs["bgpConfig"] = args ? args.bgpConfig : undefined;
            resourceInputs["customerGatewayId"] = args ? args.customerGatewayId : undefined;
            resourceInputs["effectImmediately"] = args ? args.effectImmediately : undefined;
            resourceInputs["enableDpd"] = args ? args.enableDpd : undefined;
            resourceInputs["enableNatTraversal"] = args ? args.enableNatTraversal : undefined;
            resourceInputs["enableTunnelsBgp"] = args ? args.enableTunnelsBgp : undefined;
            resourceInputs["healthCheckConfig"] = args ? args.healthCheckConfig : undefined;
            resourceInputs["ikeConfig"] = args ? args.ikeConfig : undefined;
            resourceInputs["ipsecConfig"] = args ? args.ipsecConfig : undefined;
            resourceInputs["localSubnets"] = args ? args.localSubnets : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkType"] = args ? args.networkType : undefined;
            resourceInputs["remoteSubnets"] = args ? args.remoteSubnets : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["tunnelOptionsSpecifications"] = args ? args.tunnelOptionsSpecifications : undefined;
            resourceInputs["vpnConnectionName"] = args ? args.vpnConnectionName : undefined;
            resourceInputs["vpnGatewayId"] = args ? args.vpnGatewayId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["resourceGroupId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnConnection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpnConnection resources.
 */
export interface VpnConnectionState {
    autoConfigRoute?: pulumi.Input<boolean>;
    bgpConfig?: pulumi.Input<inputs.VpnConnectionBgpConfig>;
    createTime?: pulumi.Input<number>;
    customerGatewayId?: pulumi.Input<string>;
    effectImmediately?: pulumi.Input<boolean>;
    enableDpd?: pulumi.Input<boolean>;
    enableNatTraversal?: pulumi.Input<boolean>;
    enableTunnelsBgp?: pulumi.Input<boolean>;
    healthCheckConfig?: pulumi.Input<inputs.VpnConnectionHealthCheckConfig>;
    ikeConfig?: pulumi.Input<inputs.VpnConnectionIkeConfig>;
    ipsecConfig?: pulumi.Input<inputs.VpnConnectionIpsecConfig>;
    localSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * @deprecated Deprecated
     */
    name?: pulumi.Input<string>;
    networkType?: pulumi.Input<string>;
    remoteSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    resourceGroupId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VpnConnectionTimeouts>;
    tunnelOptionsSpecifications?: pulumi.Input<pulumi.Input<inputs.VpnConnectionTunnelOptionsSpecification>[]>;
    vpnConnectionName?: pulumi.Input<string>;
    vpnGatewayId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnConnection resource.
 */
export interface VpnConnectionArgs {
    autoConfigRoute?: pulumi.Input<boolean>;
    bgpConfig?: pulumi.Input<inputs.VpnConnectionBgpConfig>;
    customerGatewayId?: pulumi.Input<string>;
    effectImmediately?: pulumi.Input<boolean>;
    enableDpd?: pulumi.Input<boolean>;
    enableNatTraversal?: pulumi.Input<boolean>;
    enableTunnelsBgp?: pulumi.Input<boolean>;
    healthCheckConfig?: pulumi.Input<inputs.VpnConnectionHealthCheckConfig>;
    ikeConfig?: pulumi.Input<inputs.VpnConnectionIkeConfig>;
    ipsecConfig?: pulumi.Input<inputs.VpnConnectionIpsecConfig>;
    localSubnets: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * @deprecated Deprecated
     */
    name?: pulumi.Input<string>;
    networkType?: pulumi.Input<string>;
    remoteSubnets: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VpnConnectionTimeouts>;
    tunnelOptionsSpecifications?: pulumi.Input<pulumi.Input<inputs.VpnConnectionTunnelOptionsSpecification>[]>;
    vpnConnectionName?: pulumi.Input<string>;
    vpnGatewayId: pulumi.Input<string>;
}
