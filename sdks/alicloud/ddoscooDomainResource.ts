// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdoscooDomainResource extends pulumi.CustomResource {
    /**
     * Get an existing DdoscooDomainResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdoscooDomainResourceState, opts?: pulumi.CustomResourceOptions): DdoscooDomainResource {
        return new DdoscooDomainResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/ddoscooDomainResource:DdoscooDomainResource';

    /**
     * Returns true if the given object is an instance of DdoscooDomainResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdoscooDomainResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdoscooDomainResource.__pulumiType;
    }

    public /*out*/ readonly cname!: pulumi.Output<string>;
    public readonly domain!: pulumi.Output<string>;
    public readonly httpsExt!: pulumi.Output<string>;
    public readonly instanceIds!: pulumi.Output<string[]>;
    public readonly ocspEnabled!: pulumi.Output<boolean | undefined>;
    public readonly proxyTypes!: pulumi.Output<outputs.DdoscooDomainResourceProxyType[]>;
    public readonly realServers!: pulumi.Output<string[]>;
    public readonly rsType!: pulumi.Output<number>;

    /**
     * Create a DdoscooDomainResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdoscooDomainResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdoscooDomainResourceArgs | DdoscooDomainResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdoscooDomainResourceState | undefined;
            resourceInputs["cname"] = state ? state.cname : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["httpsExt"] = state ? state.httpsExt : undefined;
            resourceInputs["instanceIds"] = state ? state.instanceIds : undefined;
            resourceInputs["ocspEnabled"] = state ? state.ocspEnabled : undefined;
            resourceInputs["proxyTypes"] = state ? state.proxyTypes : undefined;
            resourceInputs["realServers"] = state ? state.realServers : undefined;
            resourceInputs["rsType"] = state ? state.rsType : undefined;
        } else {
            const args = argsOrState as DdoscooDomainResourceArgs | undefined;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.instanceIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceIds'");
            }
            if ((!args || args.proxyTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'proxyTypes'");
            }
            if ((!args || args.realServers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'realServers'");
            }
            if ((!args || args.rsType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rsType'");
            }
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["httpsExt"] = args ? args.httpsExt : undefined;
            resourceInputs["instanceIds"] = args ? args.instanceIds : undefined;
            resourceInputs["ocspEnabled"] = args ? args.ocspEnabled : undefined;
            resourceInputs["proxyTypes"] = args ? args.proxyTypes : undefined;
            resourceInputs["realServers"] = args ? args.realServers : undefined;
            resourceInputs["rsType"] = args ? args.rsType : undefined;
            resourceInputs["cname"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdoscooDomainResource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdoscooDomainResource resources.
 */
export interface DdoscooDomainResourceState {
    cname?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    httpsExt?: pulumi.Input<string>;
    instanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    ocspEnabled?: pulumi.Input<boolean>;
    proxyTypes?: pulumi.Input<pulumi.Input<inputs.DdoscooDomainResourceProxyType>[]>;
    realServers?: pulumi.Input<pulumi.Input<string>[]>;
    rsType?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DdoscooDomainResource resource.
 */
export interface DdoscooDomainResourceArgs {
    domain: pulumi.Input<string>;
    httpsExt?: pulumi.Input<string>;
    instanceIds: pulumi.Input<pulumi.Input<string>[]>;
    ocspEnabled?: pulumi.Input<boolean>;
    proxyTypes: pulumi.Input<pulumi.Input<inputs.DdoscooDomainResourceProxyType>[]>;
    realServers: pulumi.Input<pulumi.Input<string>[]>;
    rsType: pulumi.Input<number>;
}
