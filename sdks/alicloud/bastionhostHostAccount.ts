// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class BastionhostHostAccount extends pulumi.CustomResource {
    /**
     * Get an existing BastionhostHostAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BastionhostHostAccountState, opts?: pulumi.CustomResourceOptions): BastionhostHostAccount {
        return new BastionhostHostAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/bastionhostHostAccount:BastionhostHostAccount';

    /**
     * Returns true if the given object is an instance of BastionhostHostAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BastionhostHostAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BastionhostHostAccount.__pulumiType;
    }

    public /*out*/ readonly hostAccountId!: pulumi.Output<string>;
    public readonly hostAccountName!: pulumi.Output<string>;
    public readonly hostId!: pulumi.Output<string>;
    public readonly instanceId!: pulumi.Output<string>;
    public readonly passPhrase!: pulumi.Output<string | undefined>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly privateKey!: pulumi.Output<string | undefined>;
    public readonly protocolName!: pulumi.Output<string>;

    /**
     * Create a BastionhostHostAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BastionhostHostAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BastionhostHostAccountArgs | BastionhostHostAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BastionhostHostAccountState | undefined;
            resourceInputs["hostAccountId"] = state ? state.hostAccountId : undefined;
            resourceInputs["hostAccountName"] = state ? state.hostAccountName : undefined;
            resourceInputs["hostId"] = state ? state.hostId : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["passPhrase"] = state ? state.passPhrase : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["protocolName"] = state ? state.protocolName : undefined;
        } else {
            const args = argsOrState as BastionhostHostAccountArgs | undefined;
            if ((!args || args.hostAccountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostAccountName'");
            }
            if ((!args || args.hostId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostId'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.protocolName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocolName'");
            }
            resourceInputs["hostAccountName"] = args ? args.hostAccountName : undefined;
            resourceInputs["hostId"] = args ? args.hostId : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["passPhrase"] = args?.passPhrase ? pulumi.secret(args.passPhrase) : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["protocolName"] = args ? args.protocolName : undefined;
            resourceInputs["hostAccountId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["passPhrase", "password", "privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(BastionhostHostAccount.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BastionhostHostAccount resources.
 */
export interface BastionhostHostAccountState {
    hostAccountId?: pulumi.Input<string>;
    hostAccountName?: pulumi.Input<string>;
    hostId?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    passPhrase?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    protocolName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BastionhostHostAccount resource.
 */
export interface BastionhostHostAccountArgs {
    hostAccountName: pulumi.Input<string>;
    hostId: pulumi.Input<string>;
    instanceId: pulumi.Input<string>;
    passPhrase?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    protocolName: pulumi.Input<string>;
}
