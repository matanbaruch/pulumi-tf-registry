// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OssBucketReplication extends pulumi.CustomResource {
    /**
     * Get an existing OssBucketReplication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OssBucketReplicationState, opts?: pulumi.CustomResourceOptions): OssBucketReplication {
        return new OssBucketReplication(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/ossBucketReplication:OssBucketReplication';

    /**
     * Returns true if the given object is an instance of OssBucketReplication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OssBucketReplication {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OssBucketReplication.__pulumiType;
    }

    public readonly action!: pulumi.Output<string | undefined>;
    public readonly bucket!: pulumi.Output<string>;
    public readonly destination!: pulumi.Output<outputs.OssBucketReplicationDestination>;
    public readonly encryptionConfiguration!: pulumi.Output<outputs.OssBucketReplicationEncryptionConfiguration | undefined>;
    public readonly historicalObjectReplication!: pulumi.Output<string | undefined>;
    public readonly prefixSet!: pulumi.Output<outputs.OssBucketReplicationPrefixSet | undefined>;
    public readonly progress!: pulumi.Output<outputs.OssBucketReplicationProgress | undefined>;
    public /*out*/ readonly ruleId!: pulumi.Output<string>;
    public readonly sourceSelectionCriteria!: pulumi.Output<outputs.OssBucketReplicationSourceSelectionCriteria | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly syncRole!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.OssBucketReplicationTimeouts | undefined>;

    /**
     * Create a OssBucketReplication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OssBucketReplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OssBucketReplicationArgs | OssBucketReplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OssBucketReplicationState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["encryptionConfiguration"] = state ? state.encryptionConfiguration : undefined;
            resourceInputs["historicalObjectReplication"] = state ? state.historicalObjectReplication : undefined;
            resourceInputs["prefixSet"] = state ? state.prefixSet : undefined;
            resourceInputs["progress"] = state ? state.progress : undefined;
            resourceInputs["ruleId"] = state ? state.ruleId : undefined;
            resourceInputs["sourceSelectionCriteria"] = state ? state.sourceSelectionCriteria : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["syncRole"] = state ? state.syncRole : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as OssBucketReplicationArgs | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if ((!args || args.destination === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["encryptionConfiguration"] = args ? args.encryptionConfiguration : undefined;
            resourceInputs["historicalObjectReplication"] = args ? args.historicalObjectReplication : undefined;
            resourceInputs["prefixSet"] = args ? args.prefixSet : undefined;
            resourceInputs["progress"] = args ? args.progress : undefined;
            resourceInputs["sourceSelectionCriteria"] = args ? args.sourceSelectionCriteria : undefined;
            resourceInputs["syncRole"] = args ? args.syncRole : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["ruleId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OssBucketReplication.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OssBucketReplication resources.
 */
export interface OssBucketReplicationState {
    action?: pulumi.Input<string>;
    bucket?: pulumi.Input<string>;
    destination?: pulumi.Input<inputs.OssBucketReplicationDestination>;
    encryptionConfiguration?: pulumi.Input<inputs.OssBucketReplicationEncryptionConfiguration>;
    historicalObjectReplication?: pulumi.Input<string>;
    prefixSet?: pulumi.Input<inputs.OssBucketReplicationPrefixSet>;
    progress?: pulumi.Input<inputs.OssBucketReplicationProgress>;
    ruleId?: pulumi.Input<string>;
    sourceSelectionCriteria?: pulumi.Input<inputs.OssBucketReplicationSourceSelectionCriteria>;
    status?: pulumi.Input<string>;
    syncRole?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OssBucketReplicationTimeouts>;
}

/**
 * The set of arguments for constructing a OssBucketReplication resource.
 */
export interface OssBucketReplicationArgs {
    action?: pulumi.Input<string>;
    bucket: pulumi.Input<string>;
    destination: pulumi.Input<inputs.OssBucketReplicationDestination>;
    encryptionConfiguration?: pulumi.Input<inputs.OssBucketReplicationEncryptionConfiguration>;
    historicalObjectReplication?: pulumi.Input<string>;
    prefixSet?: pulumi.Input<inputs.OssBucketReplicationPrefixSet>;
    progress?: pulumi.Input<inputs.OssBucketReplicationProgress>;
    sourceSelectionCriteria?: pulumi.Input<inputs.OssBucketReplicationSourceSelectionCriteria>;
    syncRole?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OssBucketReplicationTimeouts>;
}
