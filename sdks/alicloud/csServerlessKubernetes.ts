// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CsServerlessKubernetes extends pulumi.CustomResource {
    /**
     * Get an existing CsServerlessKubernetes resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CsServerlessKubernetesState, opts?: pulumi.CustomResourceOptions): CsServerlessKubernetes {
        return new CsServerlessKubernetes(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/csServerlessKubernetes:CsServerlessKubernetes';

    /**
     * Returns true if the given object is an instance of CsServerlessKubernetes.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CsServerlessKubernetes {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CsServerlessKubernetes.__pulumiType;
    }

    public readonly addons!: pulumi.Output<outputs.CsServerlessKubernetesAddon[] | undefined>;
    public readonly clientCert!: pulumi.Output<string | undefined>;
    public readonly clientKey!: pulumi.Output<string | undefined>;
    public readonly clusterCaCert!: pulumi.Output<string | undefined>;
    public readonly clusterSpec!: pulumi.Output<string>;
    public readonly createV2Cluster!: pulumi.Output<boolean>;
    public readonly customSan!: pulumi.Output<string | undefined>;
    public readonly deleteOptions!: pulumi.Output<outputs.CsServerlessKubernetesDeleteOption[] | undefined>;
    public readonly deletionProtection!: pulumi.Output<boolean | undefined>;
    public readonly enableRrsa!: pulumi.Output<boolean | undefined>;
    public readonly endpointPublicAccessEnabled!: pulumi.Output<boolean | undefined>;
    public readonly forceUpdate!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly kubeConfig!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly loadBalancerSpec!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly loggingType!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly namePrefix!: pulumi.Output<string | undefined>;
    public readonly newNatGateway!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly privateZone!: pulumi.Output<boolean | undefined>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly retainResources!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly rrsaMetadatas!: pulumi.Output<outputs.CsServerlessKubernetesRrsaMetadata[]>;
    public readonly securityGroupId!: pulumi.Output<string>;
    public readonly serviceCidr!: pulumi.Output<string | undefined>;
    public readonly serviceDiscoveryTypes!: pulumi.Output<string[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly slsProjectName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeZone!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CsServerlessKubernetesTimeouts | undefined>;
    public readonly version!: pulumi.Output<string>;
    public readonly vpcId!: pulumi.Output<string>;
    public readonly vswitchId!: pulumi.Output<string>;
    public readonly vswitchIds!: pulumi.Output<string[]>;
    public readonly zoneId!: pulumi.Output<string | undefined>;

    /**
     * Create a CsServerlessKubernetes resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CsServerlessKubernetesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CsServerlessKubernetesArgs | CsServerlessKubernetesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CsServerlessKubernetesState | undefined;
            resourceInputs["addons"] = state ? state.addons : undefined;
            resourceInputs["clientCert"] = state ? state.clientCert : undefined;
            resourceInputs["clientKey"] = state ? state.clientKey : undefined;
            resourceInputs["clusterCaCert"] = state ? state.clusterCaCert : undefined;
            resourceInputs["clusterSpec"] = state ? state.clusterSpec : undefined;
            resourceInputs["createV2Cluster"] = state ? state.createV2Cluster : undefined;
            resourceInputs["customSan"] = state ? state.customSan : undefined;
            resourceInputs["deleteOptions"] = state ? state.deleteOptions : undefined;
            resourceInputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            resourceInputs["enableRrsa"] = state ? state.enableRrsa : undefined;
            resourceInputs["endpointPublicAccessEnabled"] = state ? state.endpointPublicAccessEnabled : undefined;
            resourceInputs["forceUpdate"] = state ? state.forceUpdate : undefined;
            resourceInputs["kubeConfig"] = state ? state.kubeConfig : undefined;
            resourceInputs["loadBalancerSpec"] = state ? state.loadBalancerSpec : undefined;
            resourceInputs["loggingType"] = state ? state.loggingType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namePrefix"] = state ? state.namePrefix : undefined;
            resourceInputs["newNatGateway"] = state ? state.newNatGateway : undefined;
            resourceInputs["privateZone"] = state ? state.privateZone : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["retainResources"] = state ? state.retainResources : undefined;
            resourceInputs["rrsaMetadatas"] = state ? state.rrsaMetadatas : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["serviceCidr"] = state ? state.serviceCidr : undefined;
            resourceInputs["serviceDiscoveryTypes"] = state ? state.serviceDiscoveryTypes : undefined;
            resourceInputs["slsProjectName"] = state ? state.slsProjectName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
            resourceInputs["vswitchIds"] = state ? state.vswitchIds : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as CsServerlessKubernetesArgs | undefined;
            resourceInputs["addons"] = args ? args.addons : undefined;
            resourceInputs["clientCert"] = args ? args.clientCert : undefined;
            resourceInputs["clientKey"] = args ? args.clientKey : undefined;
            resourceInputs["clusterCaCert"] = args ? args.clusterCaCert : undefined;
            resourceInputs["clusterSpec"] = args ? args.clusterSpec : undefined;
            resourceInputs["createV2Cluster"] = args ? args.createV2Cluster : undefined;
            resourceInputs["customSan"] = args ? args.customSan : undefined;
            resourceInputs["deleteOptions"] = args ? args.deleteOptions : undefined;
            resourceInputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            resourceInputs["enableRrsa"] = args ? args.enableRrsa : undefined;
            resourceInputs["endpointPublicAccessEnabled"] = args ? args.endpointPublicAccessEnabled : undefined;
            resourceInputs["forceUpdate"] = args ? args.forceUpdate : undefined;
            resourceInputs["kubeConfig"] = args ? args.kubeConfig : undefined;
            resourceInputs["loadBalancerSpec"] = args ? args.loadBalancerSpec : undefined;
            resourceInputs["loggingType"] = args ? args.loggingType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namePrefix"] = args ? args.namePrefix : undefined;
            resourceInputs["newNatGateway"] = args ? args.newNatGateway : undefined;
            resourceInputs["privateZone"] = args ? args.privateZone : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["retainResources"] = args ? args.retainResources : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["serviceCidr"] = args ? args.serviceCidr : undefined;
            resourceInputs["serviceDiscoveryTypes"] = args ? args.serviceDiscoveryTypes : undefined;
            resourceInputs["slsProjectName"] = args ? args.slsProjectName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeZone"] = args ? args.timeZone : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["vswitchIds"] = args ? args.vswitchIds : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["rrsaMetadatas"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CsServerlessKubernetes.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CsServerlessKubernetes resources.
 */
export interface CsServerlessKubernetesState {
    addons?: pulumi.Input<pulumi.Input<inputs.CsServerlessKubernetesAddon>[]>;
    clientCert?: pulumi.Input<string>;
    clientKey?: pulumi.Input<string>;
    clusterCaCert?: pulumi.Input<string>;
    clusterSpec?: pulumi.Input<string>;
    createV2Cluster?: pulumi.Input<boolean>;
    customSan?: pulumi.Input<string>;
    deleteOptions?: pulumi.Input<pulumi.Input<inputs.CsServerlessKubernetesDeleteOption>[]>;
    deletionProtection?: pulumi.Input<boolean>;
    enableRrsa?: pulumi.Input<boolean>;
    endpointPublicAccessEnabled?: pulumi.Input<boolean>;
    forceUpdate?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    kubeConfig?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    loadBalancerSpec?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    loggingType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namePrefix?: pulumi.Input<string>;
    newNatGateway?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    privateZone?: pulumi.Input<boolean>;
    resourceGroupId?: pulumi.Input<string>;
    retainResources?: pulumi.Input<pulumi.Input<string>[]>;
    rrsaMetadatas?: pulumi.Input<pulumi.Input<inputs.CsServerlessKubernetesRrsaMetadata>[]>;
    securityGroupId?: pulumi.Input<string>;
    serviceCidr?: pulumi.Input<string>;
    serviceDiscoveryTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * @deprecated Deprecated
     */
    slsProjectName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeZone?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CsServerlessKubernetesTimeouts>;
    version?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
    vswitchIds?: pulumi.Input<pulumi.Input<string>[]>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CsServerlessKubernetes resource.
 */
export interface CsServerlessKubernetesArgs {
    addons?: pulumi.Input<pulumi.Input<inputs.CsServerlessKubernetesAddon>[]>;
    clientCert?: pulumi.Input<string>;
    clientKey?: pulumi.Input<string>;
    clusterCaCert?: pulumi.Input<string>;
    clusterSpec?: pulumi.Input<string>;
    createV2Cluster?: pulumi.Input<boolean>;
    customSan?: pulumi.Input<string>;
    deleteOptions?: pulumi.Input<pulumi.Input<inputs.CsServerlessKubernetesDeleteOption>[]>;
    deletionProtection?: pulumi.Input<boolean>;
    enableRrsa?: pulumi.Input<boolean>;
    endpointPublicAccessEnabled?: pulumi.Input<boolean>;
    forceUpdate?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    kubeConfig?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    loadBalancerSpec?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    loggingType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namePrefix?: pulumi.Input<string>;
    newNatGateway?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    privateZone?: pulumi.Input<boolean>;
    resourceGroupId?: pulumi.Input<string>;
    retainResources?: pulumi.Input<pulumi.Input<string>[]>;
    securityGroupId?: pulumi.Input<string>;
    serviceCidr?: pulumi.Input<string>;
    serviceDiscoveryTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * @deprecated Deprecated
     */
    slsProjectName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeZone?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CsServerlessKubernetesTimeouts>;
    version?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
    vswitchIds?: pulumi.Input<pulumi.Input<string>[]>;
    zoneId?: pulumi.Input<string>;
}
