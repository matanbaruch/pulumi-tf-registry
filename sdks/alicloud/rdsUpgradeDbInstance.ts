// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RdsUpgradeDbInstance extends pulumi.CustomResource {
    /**
     * Get an existing RdsUpgradeDbInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RdsUpgradeDbInstanceState, opts?: pulumi.CustomResourceOptions): RdsUpgradeDbInstance {
        return new RdsUpgradeDbInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/rdsUpgradeDbInstance:RdsUpgradeDbInstance';

    /**
     * Returns true if the given object is an instance of RdsUpgradeDbInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RdsUpgradeDbInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RdsUpgradeDbInstance.__pulumiType;
    }

    public readonly acl!: pulumi.Output<string>;
    public readonly autoUpgradeMinorVersion!: pulumi.Output<string>;
    public readonly caType!: pulumi.Output<string>;
    public readonly certificate!: pulumi.Output<string | undefined>;
    public readonly clientCaCert!: pulumi.Output<string | undefined>;
    public readonly clientCaEnabled!: pulumi.Output<number | undefined>;
    public readonly clientCertRevocationList!: pulumi.Output<string | undefined>;
    public readonly clientCrlEnabled!: pulumi.Output<number | undefined>;
    public readonly collectStatMode!: pulumi.Output<string>;
    public /*out*/ readonly connectionString!: pulumi.Output<string>;
    public readonly connectionStringPrefix!: pulumi.Output<string | undefined>;
    public readonly dbInstanceClass!: pulumi.Output<string>;
    public readonly dbInstanceDescription!: pulumi.Output<string>;
    public readonly dbInstanceStorage!: pulumi.Output<number>;
    public readonly dbInstanceStorageType!: pulumi.Output<string>;
    public readonly dbName!: pulumi.Output<string | undefined>;
    public readonly dedicatedHostGroupId!: pulumi.Output<string | undefined>;
    public readonly deletionProtection!: pulumi.Output<boolean | undefined>;
    public readonly direction!: pulumi.Output<string | undefined>;
    public readonly effectiveTime!: pulumi.Output<string | undefined>;
    public readonly encryptionKey!: pulumi.Output<string | undefined>;
    public readonly engine!: pulumi.Output<string>;
    public readonly engineVersion!: pulumi.Output<string>;
    public readonly forceRestart!: pulumi.Output<boolean | undefined>;
    public readonly haMode!: pulumi.Output<string>;
    public readonly instanceNetworkType!: pulumi.Output<string>;
    public readonly maintainTime!: pulumi.Output<string>;
    public readonly parameters!: pulumi.Output<outputs.RdsUpgradeDbInstanceParameter[] | undefined>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly paymentType!: pulumi.Output<string>;
    public readonly pgHbaConfs!: pulumi.Output<outputs.RdsUpgradeDbInstancePgHbaConf[] | undefined>;
    public readonly port!: pulumi.Output<string>;
    public readonly privateIpAddress!: pulumi.Output<string>;
    public readonly privateKey!: pulumi.Output<string | undefined>;
    public readonly releasedKeepPolicy!: pulumi.Output<string | undefined>;
    public readonly replicationAcl!: pulumi.Output<string>;
    public readonly resourceGroupId!: pulumi.Output<string | undefined>;
    public readonly roleArn!: pulumi.Output<string | undefined>;
    public readonly securityIps!: pulumi.Output<string[]>;
    public readonly serverCert!: pulumi.Output<string>;
    public readonly serverKey!: pulumi.Output<string>;
    public readonly sourceBiz!: pulumi.Output<string | undefined>;
    public readonly sourceDbInstanceId!: pulumi.Output<string>;
    public readonly sslEnabled!: pulumi.Output<number>;
    public readonly switchOver!: pulumi.Output<string>;
    public readonly switchTime!: pulumi.Output<string | undefined>;
    public readonly switchTimeMode!: pulumi.Output<string | undefined>;
    public readonly syncMode!: pulumi.Output<string>;
    public readonly targetMajorVersion!: pulumi.Output<string>;
    public readonly tcpConnectionType!: pulumi.Output<string>;
    public readonly tdeStatus!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.RdsUpgradeDbInstanceTimeouts | undefined>;
    public readonly vpcId!: pulumi.Output<string>;
    public readonly vswitchId!: pulumi.Output<string>;
    public readonly zoneId!: pulumi.Output<string>;
    public readonly zoneIdSlave1!: pulumi.Output<string>;

    /**
     * Create a RdsUpgradeDbInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RdsUpgradeDbInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RdsUpgradeDbInstanceArgs | RdsUpgradeDbInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RdsUpgradeDbInstanceState | undefined;
            resourceInputs["acl"] = state ? state.acl : undefined;
            resourceInputs["autoUpgradeMinorVersion"] = state ? state.autoUpgradeMinorVersion : undefined;
            resourceInputs["caType"] = state ? state.caType : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["clientCaCert"] = state ? state.clientCaCert : undefined;
            resourceInputs["clientCaEnabled"] = state ? state.clientCaEnabled : undefined;
            resourceInputs["clientCertRevocationList"] = state ? state.clientCertRevocationList : undefined;
            resourceInputs["clientCrlEnabled"] = state ? state.clientCrlEnabled : undefined;
            resourceInputs["collectStatMode"] = state ? state.collectStatMode : undefined;
            resourceInputs["connectionString"] = state ? state.connectionString : undefined;
            resourceInputs["connectionStringPrefix"] = state ? state.connectionStringPrefix : undefined;
            resourceInputs["dbInstanceClass"] = state ? state.dbInstanceClass : undefined;
            resourceInputs["dbInstanceDescription"] = state ? state.dbInstanceDescription : undefined;
            resourceInputs["dbInstanceStorage"] = state ? state.dbInstanceStorage : undefined;
            resourceInputs["dbInstanceStorageType"] = state ? state.dbInstanceStorageType : undefined;
            resourceInputs["dbName"] = state ? state.dbName : undefined;
            resourceInputs["dedicatedHostGroupId"] = state ? state.dedicatedHostGroupId : undefined;
            resourceInputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            resourceInputs["direction"] = state ? state.direction : undefined;
            resourceInputs["effectiveTime"] = state ? state.effectiveTime : undefined;
            resourceInputs["encryptionKey"] = state ? state.encryptionKey : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["forceRestart"] = state ? state.forceRestart : undefined;
            resourceInputs["haMode"] = state ? state.haMode : undefined;
            resourceInputs["instanceNetworkType"] = state ? state.instanceNetworkType : undefined;
            resourceInputs["maintainTime"] = state ? state.maintainTime : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["paymentType"] = state ? state.paymentType : undefined;
            resourceInputs["pgHbaConfs"] = state ? state.pgHbaConfs : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["privateIpAddress"] = state ? state.privateIpAddress : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["releasedKeepPolicy"] = state ? state.releasedKeepPolicy : undefined;
            resourceInputs["replicationAcl"] = state ? state.replicationAcl : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["securityIps"] = state ? state.securityIps : undefined;
            resourceInputs["serverCert"] = state ? state.serverCert : undefined;
            resourceInputs["serverKey"] = state ? state.serverKey : undefined;
            resourceInputs["sourceBiz"] = state ? state.sourceBiz : undefined;
            resourceInputs["sourceDbInstanceId"] = state ? state.sourceDbInstanceId : undefined;
            resourceInputs["sslEnabled"] = state ? state.sslEnabled : undefined;
            resourceInputs["switchOver"] = state ? state.switchOver : undefined;
            resourceInputs["switchTime"] = state ? state.switchTime : undefined;
            resourceInputs["switchTimeMode"] = state ? state.switchTimeMode : undefined;
            resourceInputs["syncMode"] = state ? state.syncMode : undefined;
            resourceInputs["targetMajorVersion"] = state ? state.targetMajorVersion : undefined;
            resourceInputs["tcpConnectionType"] = state ? state.tcpConnectionType : undefined;
            resourceInputs["tdeStatus"] = state ? state.tdeStatus : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
            resourceInputs["zoneIdSlave1"] = state ? state.zoneIdSlave1 : undefined;
        } else {
            const args = argsOrState as RdsUpgradeDbInstanceArgs | undefined;
            if ((!args || args.collectStatMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'collectStatMode'");
            }
            if ((!args || args.dbInstanceClass === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbInstanceClass'");
            }
            if ((!args || args.dbInstanceStorage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbInstanceStorage'");
            }
            if ((!args || args.dbInstanceStorageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbInstanceStorageType'");
            }
            if ((!args || args.instanceNetworkType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceNetworkType'");
            }
            if ((!args || args.paymentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'paymentType'");
            }
            if ((!args || args.sourceDbInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceDbInstanceId'");
            }
            if ((!args || args.switchOver === undefined) && !opts.urn) {
                throw new Error("Missing required property 'switchOver'");
            }
            if ((!args || args.targetMajorVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetMajorVersion'");
            }
            resourceInputs["acl"] = args ? args.acl : undefined;
            resourceInputs["autoUpgradeMinorVersion"] = args ? args.autoUpgradeMinorVersion : undefined;
            resourceInputs["caType"] = args ? args.caType : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["clientCaCert"] = args ? args.clientCaCert : undefined;
            resourceInputs["clientCaEnabled"] = args ? args.clientCaEnabled : undefined;
            resourceInputs["clientCertRevocationList"] = args ? args.clientCertRevocationList : undefined;
            resourceInputs["clientCrlEnabled"] = args ? args.clientCrlEnabled : undefined;
            resourceInputs["collectStatMode"] = args ? args.collectStatMode : undefined;
            resourceInputs["connectionStringPrefix"] = args ? args.connectionStringPrefix : undefined;
            resourceInputs["dbInstanceClass"] = args ? args.dbInstanceClass : undefined;
            resourceInputs["dbInstanceDescription"] = args ? args.dbInstanceDescription : undefined;
            resourceInputs["dbInstanceStorage"] = args ? args.dbInstanceStorage : undefined;
            resourceInputs["dbInstanceStorageType"] = args ? args.dbInstanceStorageType : undefined;
            resourceInputs["dbName"] = args ? args.dbName : undefined;
            resourceInputs["dedicatedHostGroupId"] = args ? args.dedicatedHostGroupId : undefined;
            resourceInputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            resourceInputs["direction"] = args ? args.direction : undefined;
            resourceInputs["effectiveTime"] = args ? args.effectiveTime : undefined;
            resourceInputs["encryptionKey"] = args ? args.encryptionKey : undefined;
            resourceInputs["engine"] = args ? args.engine : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["forceRestart"] = args ? args.forceRestart : undefined;
            resourceInputs["haMode"] = args ? args.haMode : undefined;
            resourceInputs["instanceNetworkType"] = args ? args.instanceNetworkType : undefined;
            resourceInputs["maintainTime"] = args ? args.maintainTime : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["paymentType"] = args ? args.paymentType : undefined;
            resourceInputs["pgHbaConfs"] = args ? args.pgHbaConfs : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["privateIpAddress"] = args ? args.privateIpAddress : undefined;
            resourceInputs["privateKey"] = args ? args.privateKey : undefined;
            resourceInputs["releasedKeepPolicy"] = args ? args.releasedKeepPolicy : undefined;
            resourceInputs["replicationAcl"] = args ? args.replicationAcl : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["securityIps"] = args ? args.securityIps : undefined;
            resourceInputs["serverCert"] = args ? args.serverCert : undefined;
            resourceInputs["serverKey"] = args ? args.serverKey : undefined;
            resourceInputs["sourceBiz"] = args ? args.sourceBiz : undefined;
            resourceInputs["sourceDbInstanceId"] = args ? args.sourceDbInstanceId : undefined;
            resourceInputs["sslEnabled"] = args ? args.sslEnabled : undefined;
            resourceInputs["switchOver"] = args ? args.switchOver : undefined;
            resourceInputs["switchTime"] = args ? args.switchTime : undefined;
            resourceInputs["switchTimeMode"] = args ? args.switchTimeMode : undefined;
            resourceInputs["syncMode"] = args ? args.syncMode : undefined;
            resourceInputs["targetMajorVersion"] = args ? args.targetMajorVersion : undefined;
            resourceInputs["tcpConnectionType"] = args ? args.tcpConnectionType : undefined;
            resourceInputs["tdeStatus"] = args ? args.tdeStatus : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["zoneIdSlave1"] = args ? args.zoneIdSlave1 : undefined;
            resourceInputs["connectionString"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RdsUpgradeDbInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RdsUpgradeDbInstance resources.
 */
export interface RdsUpgradeDbInstanceState {
    acl?: pulumi.Input<string>;
    autoUpgradeMinorVersion?: pulumi.Input<string>;
    caType?: pulumi.Input<string>;
    certificate?: pulumi.Input<string>;
    clientCaCert?: pulumi.Input<string>;
    clientCaEnabled?: pulumi.Input<number>;
    clientCertRevocationList?: pulumi.Input<string>;
    clientCrlEnabled?: pulumi.Input<number>;
    collectStatMode?: pulumi.Input<string>;
    connectionString?: pulumi.Input<string>;
    connectionStringPrefix?: pulumi.Input<string>;
    dbInstanceClass?: pulumi.Input<string>;
    dbInstanceDescription?: pulumi.Input<string>;
    dbInstanceStorage?: pulumi.Input<number>;
    dbInstanceStorageType?: pulumi.Input<string>;
    dbName?: pulumi.Input<string>;
    dedicatedHostGroupId?: pulumi.Input<string>;
    deletionProtection?: pulumi.Input<boolean>;
    direction?: pulumi.Input<string>;
    effectiveTime?: pulumi.Input<string>;
    encryptionKey?: pulumi.Input<string>;
    engine?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    forceRestart?: pulumi.Input<boolean>;
    haMode?: pulumi.Input<string>;
    instanceNetworkType?: pulumi.Input<string>;
    maintainTime?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.RdsUpgradeDbInstanceParameter>[]>;
    password?: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    pgHbaConfs?: pulumi.Input<pulumi.Input<inputs.RdsUpgradeDbInstancePgHbaConf>[]>;
    port?: pulumi.Input<string>;
    privateIpAddress?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    releasedKeepPolicy?: pulumi.Input<string>;
    replicationAcl?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    securityIps?: pulumi.Input<pulumi.Input<string>[]>;
    serverCert?: pulumi.Input<string>;
    serverKey?: pulumi.Input<string>;
    sourceBiz?: pulumi.Input<string>;
    sourceDbInstanceId?: pulumi.Input<string>;
    sslEnabled?: pulumi.Input<number>;
    switchOver?: pulumi.Input<string>;
    switchTime?: pulumi.Input<string>;
    switchTimeMode?: pulumi.Input<string>;
    syncMode?: pulumi.Input<string>;
    targetMajorVersion?: pulumi.Input<string>;
    tcpConnectionType?: pulumi.Input<string>;
    tdeStatus?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.RdsUpgradeDbInstanceTimeouts>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
    zoneIdSlave1?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RdsUpgradeDbInstance resource.
 */
export interface RdsUpgradeDbInstanceArgs {
    acl?: pulumi.Input<string>;
    autoUpgradeMinorVersion?: pulumi.Input<string>;
    caType?: pulumi.Input<string>;
    certificate?: pulumi.Input<string>;
    clientCaCert?: pulumi.Input<string>;
    clientCaEnabled?: pulumi.Input<number>;
    clientCertRevocationList?: pulumi.Input<string>;
    clientCrlEnabled?: pulumi.Input<number>;
    collectStatMode: pulumi.Input<string>;
    connectionStringPrefix?: pulumi.Input<string>;
    dbInstanceClass: pulumi.Input<string>;
    dbInstanceDescription?: pulumi.Input<string>;
    dbInstanceStorage: pulumi.Input<number>;
    dbInstanceStorageType: pulumi.Input<string>;
    dbName?: pulumi.Input<string>;
    dedicatedHostGroupId?: pulumi.Input<string>;
    deletionProtection?: pulumi.Input<boolean>;
    direction?: pulumi.Input<string>;
    effectiveTime?: pulumi.Input<string>;
    encryptionKey?: pulumi.Input<string>;
    engine?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    forceRestart?: pulumi.Input<boolean>;
    haMode?: pulumi.Input<string>;
    instanceNetworkType: pulumi.Input<string>;
    maintainTime?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.RdsUpgradeDbInstanceParameter>[]>;
    password?: pulumi.Input<string>;
    paymentType: pulumi.Input<string>;
    pgHbaConfs?: pulumi.Input<pulumi.Input<inputs.RdsUpgradeDbInstancePgHbaConf>[]>;
    port?: pulumi.Input<string>;
    privateIpAddress?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    releasedKeepPolicy?: pulumi.Input<string>;
    replicationAcl?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    securityIps?: pulumi.Input<pulumi.Input<string>[]>;
    serverCert?: pulumi.Input<string>;
    serverKey?: pulumi.Input<string>;
    sourceBiz?: pulumi.Input<string>;
    sourceDbInstanceId: pulumi.Input<string>;
    sslEnabled?: pulumi.Input<number>;
    switchOver: pulumi.Input<string>;
    switchTime?: pulumi.Input<string>;
    switchTimeMode?: pulumi.Input<string>;
    syncMode?: pulumi.Input<string>;
    targetMajorVersion: pulumi.Input<string>;
    tcpConnectionType?: pulumi.Input<string>;
    tdeStatus?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.RdsUpgradeDbInstanceTimeouts>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
    zoneIdSlave1?: pulumi.Input<string>;
}
