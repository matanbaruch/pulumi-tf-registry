// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GpdbDbInstancePlan extends pulumi.CustomResource {
    /**
     * Get an existing GpdbDbInstancePlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GpdbDbInstancePlanState, opts?: pulumi.CustomResourceOptions): GpdbDbInstancePlan {
        return new GpdbDbInstancePlan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/gpdbDbInstancePlan:GpdbDbInstancePlan';

    /**
     * Returns true if the given object is an instance of GpdbDbInstancePlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GpdbDbInstancePlan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GpdbDbInstancePlan.__pulumiType;
    }

    public readonly dbInstanceId!: pulumi.Output<string>;
    public readonly dbInstancePlanName!: pulumi.Output<string>;
    public readonly planConfig!: pulumi.Output<outputs.GpdbDbInstancePlanPlanConfig>;
    public readonly planDesc!: pulumi.Output<string | undefined>;
    public readonly planEndDate!: pulumi.Output<string | undefined>;
    public /*out*/ readonly planId!: pulumi.Output<string>;
    public readonly planScheduleType!: pulumi.Output<string>;
    public readonly planStartDate!: pulumi.Output<string>;
    public readonly planType!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.GpdbDbInstancePlanTimeouts | undefined>;

    /**
     * Create a GpdbDbInstancePlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GpdbDbInstancePlanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GpdbDbInstancePlanArgs | GpdbDbInstancePlanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GpdbDbInstancePlanState | undefined;
            resourceInputs["dbInstanceId"] = state ? state.dbInstanceId : undefined;
            resourceInputs["dbInstancePlanName"] = state ? state.dbInstancePlanName : undefined;
            resourceInputs["planConfig"] = state ? state.planConfig : undefined;
            resourceInputs["planDesc"] = state ? state.planDesc : undefined;
            resourceInputs["planEndDate"] = state ? state.planEndDate : undefined;
            resourceInputs["planId"] = state ? state.planId : undefined;
            resourceInputs["planScheduleType"] = state ? state.planScheduleType : undefined;
            resourceInputs["planStartDate"] = state ? state.planStartDate : undefined;
            resourceInputs["planType"] = state ? state.planType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as GpdbDbInstancePlanArgs | undefined;
            if ((!args || args.dbInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbInstanceId'");
            }
            if ((!args || args.dbInstancePlanName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbInstancePlanName'");
            }
            if ((!args || args.planConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'planConfig'");
            }
            if ((!args || args.planScheduleType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'planScheduleType'");
            }
            if ((!args || args.planType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'planType'");
            }
            resourceInputs["dbInstanceId"] = args ? args.dbInstanceId : undefined;
            resourceInputs["dbInstancePlanName"] = args ? args.dbInstancePlanName : undefined;
            resourceInputs["planConfig"] = args ? args.planConfig : undefined;
            resourceInputs["planDesc"] = args ? args.planDesc : undefined;
            resourceInputs["planEndDate"] = args ? args.planEndDate : undefined;
            resourceInputs["planScheduleType"] = args ? args.planScheduleType : undefined;
            resourceInputs["planStartDate"] = args ? args.planStartDate : undefined;
            resourceInputs["planType"] = args ? args.planType : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["planId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GpdbDbInstancePlan.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GpdbDbInstancePlan resources.
 */
export interface GpdbDbInstancePlanState {
    dbInstanceId?: pulumi.Input<string>;
    dbInstancePlanName?: pulumi.Input<string>;
    planConfig?: pulumi.Input<inputs.GpdbDbInstancePlanPlanConfig>;
    planDesc?: pulumi.Input<string>;
    planEndDate?: pulumi.Input<string>;
    planId?: pulumi.Input<string>;
    planScheduleType?: pulumi.Input<string>;
    planStartDate?: pulumi.Input<string>;
    planType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GpdbDbInstancePlanTimeouts>;
}

/**
 * The set of arguments for constructing a GpdbDbInstancePlan resource.
 */
export interface GpdbDbInstancePlanArgs {
    dbInstanceId: pulumi.Input<string>;
    dbInstancePlanName: pulumi.Input<string>;
    planConfig: pulumi.Input<inputs.GpdbDbInstancePlanPlanConfig>;
    planDesc?: pulumi.Input<string>;
    planEndDate?: pulumi.Input<string>;
    planScheduleType: pulumi.Input<string>;
    planStartDate?: pulumi.Input<string>;
    planType: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GpdbDbInstancePlanTimeouts>;
}
