// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NasLifecyclePolicy extends pulumi.CustomResource {
    /**
     * Get an existing NasLifecyclePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NasLifecyclePolicyState, opts?: pulumi.CustomResourceOptions): NasLifecyclePolicy {
        return new NasLifecyclePolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/nasLifecyclePolicy:NasLifecyclePolicy';

    /**
     * Returns true if the given object is an instance of NasLifecyclePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NasLifecyclePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NasLifecyclePolicy.__pulumiType;
    }

    public readonly fileSystemId!: pulumi.Output<string>;
    public readonly lifecyclePolicyName!: pulumi.Output<string>;
    public readonly lifecycleRuleName!: pulumi.Output<string>;
    public readonly paths!: pulumi.Output<string[]>;
    public readonly storageType!: pulumi.Output<string>;

    /**
     * Create a NasLifecyclePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NasLifecyclePolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NasLifecyclePolicyArgs | NasLifecyclePolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NasLifecyclePolicyState | undefined;
            resourceInputs["fileSystemId"] = state ? state.fileSystemId : undefined;
            resourceInputs["lifecyclePolicyName"] = state ? state.lifecyclePolicyName : undefined;
            resourceInputs["lifecycleRuleName"] = state ? state.lifecycleRuleName : undefined;
            resourceInputs["paths"] = state ? state.paths : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
        } else {
            const args = argsOrState as NasLifecyclePolicyArgs | undefined;
            if ((!args || args.fileSystemId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystemId'");
            }
            if ((!args || args.lifecyclePolicyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lifecyclePolicyName'");
            }
            if ((!args || args.lifecycleRuleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lifecycleRuleName'");
            }
            if ((!args || args.paths === undefined) && !opts.urn) {
                throw new Error("Missing required property 'paths'");
            }
            if ((!args || args.storageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageType'");
            }
            resourceInputs["fileSystemId"] = args ? args.fileSystemId : undefined;
            resourceInputs["lifecyclePolicyName"] = args ? args.lifecyclePolicyName : undefined;
            resourceInputs["lifecycleRuleName"] = args ? args.lifecycleRuleName : undefined;
            resourceInputs["paths"] = args ? args.paths : undefined;
            resourceInputs["storageType"] = args ? args.storageType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NasLifecyclePolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NasLifecyclePolicy resources.
 */
export interface NasLifecyclePolicyState {
    fileSystemId?: pulumi.Input<string>;
    lifecyclePolicyName?: pulumi.Input<string>;
    lifecycleRuleName?: pulumi.Input<string>;
    paths?: pulumi.Input<pulumi.Input<string>[]>;
    storageType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NasLifecyclePolicy resource.
 */
export interface NasLifecyclePolicyArgs {
    fileSystemId: pulumi.Input<string>;
    lifecyclePolicyName: pulumi.Input<string>;
    lifecycleRuleName: pulumi.Input<string>;
    paths: pulumi.Input<pulumi.Input<string>[]>;
    storageType: pulumi.Input<string>;
}
