// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LogOssExport extends pulumi.CustomResource {
    /**
     * Get an existing LogOssExport resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogOssExportState, opts?: pulumi.CustomResourceOptions): LogOssExport {
        return new LogOssExport(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/logOssExport:LogOssExport';

    /**
     * Returns true if the given object is an instance of LogOssExport.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogOssExport {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogOssExport.__pulumiType;
    }

    public readonly bucket!: pulumi.Output<string>;
    public readonly bufferInterval!: pulumi.Output<number>;
    public readonly bufferSize!: pulumi.Output<number>;
    public readonly compressType!: pulumi.Output<string>;
    public readonly configColumns!: pulumi.Output<outputs.LogOssExportConfigColumn[] | undefined>;
    public readonly contentType!: pulumi.Output<string>;
    public readonly csvConfigColumns!: pulumi.Output<string[] | undefined>;
    public readonly csvConfigDelimiter!: pulumi.Output<string | undefined>;
    public readonly csvConfigEscape!: pulumi.Output<string | undefined>;
    public readonly csvConfigHeader!: pulumi.Output<boolean | undefined>;
    public readonly csvConfigLinefeed!: pulumi.Output<string | undefined>;
    public readonly csvConfigNull!: pulumi.Output<string | undefined>;
    public readonly csvConfigQuote!: pulumi.Output<string | undefined>;
    public readonly displayName!: pulumi.Output<string | undefined>;
    public readonly exportName!: pulumi.Output<string>;
    public readonly fromTime!: pulumi.Output<number | undefined>;
    public readonly jsonEnableTag!: pulumi.Output<boolean | undefined>;
    public readonly logReadRoleArn!: pulumi.Output<string | undefined>;
    public readonly logstoreName!: pulumi.Output<string>;
    public readonly pathFormat!: pulumi.Output<string>;
    public readonly prefix!: pulumi.Output<string | undefined>;
    public readonly projectName!: pulumi.Output<string>;
    public readonly roleArn!: pulumi.Output<string | undefined>;
    public readonly suffix!: pulumi.Output<string | undefined>;
    public readonly timeZone!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.LogOssExportTimeouts | undefined>;

    /**
     * Create a LogOssExport resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogOssExportArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogOssExportArgs | LogOssExportState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogOssExportState | undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["bufferInterval"] = state ? state.bufferInterval : undefined;
            resourceInputs["bufferSize"] = state ? state.bufferSize : undefined;
            resourceInputs["compressType"] = state ? state.compressType : undefined;
            resourceInputs["configColumns"] = state ? state.configColumns : undefined;
            resourceInputs["contentType"] = state ? state.contentType : undefined;
            resourceInputs["csvConfigColumns"] = state ? state.csvConfigColumns : undefined;
            resourceInputs["csvConfigDelimiter"] = state ? state.csvConfigDelimiter : undefined;
            resourceInputs["csvConfigEscape"] = state ? state.csvConfigEscape : undefined;
            resourceInputs["csvConfigHeader"] = state ? state.csvConfigHeader : undefined;
            resourceInputs["csvConfigLinefeed"] = state ? state.csvConfigLinefeed : undefined;
            resourceInputs["csvConfigNull"] = state ? state.csvConfigNull : undefined;
            resourceInputs["csvConfigQuote"] = state ? state.csvConfigQuote : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["exportName"] = state ? state.exportName : undefined;
            resourceInputs["fromTime"] = state ? state.fromTime : undefined;
            resourceInputs["jsonEnableTag"] = state ? state.jsonEnableTag : undefined;
            resourceInputs["logReadRoleArn"] = state ? state.logReadRoleArn : undefined;
            resourceInputs["logstoreName"] = state ? state.logstoreName : undefined;
            resourceInputs["pathFormat"] = state ? state.pathFormat : undefined;
            resourceInputs["prefix"] = state ? state.prefix : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["suffix"] = state ? state.suffix : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as LogOssExportArgs | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if ((!args || args.bufferInterval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bufferInterval'");
            }
            if ((!args || args.bufferSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bufferSize'");
            }
            if ((!args || args.contentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contentType'");
            }
            if ((!args || args.exportName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'exportName'");
            }
            if ((!args || args.logstoreName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logstoreName'");
            }
            if ((!args || args.pathFormat === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pathFormat'");
            }
            if ((!args || args.projectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectName'");
            }
            if ((!args || args.timeZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeZone'");
            }
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["bufferInterval"] = args ? args.bufferInterval : undefined;
            resourceInputs["bufferSize"] = args ? args.bufferSize : undefined;
            resourceInputs["compressType"] = args ? args.compressType : undefined;
            resourceInputs["configColumns"] = args ? args.configColumns : undefined;
            resourceInputs["contentType"] = args ? args.contentType : undefined;
            resourceInputs["csvConfigColumns"] = args ? args.csvConfigColumns : undefined;
            resourceInputs["csvConfigDelimiter"] = args ? args.csvConfigDelimiter : undefined;
            resourceInputs["csvConfigEscape"] = args ? args.csvConfigEscape : undefined;
            resourceInputs["csvConfigHeader"] = args ? args.csvConfigHeader : undefined;
            resourceInputs["csvConfigLinefeed"] = args ? args.csvConfigLinefeed : undefined;
            resourceInputs["csvConfigNull"] = args ? args.csvConfigNull : undefined;
            resourceInputs["csvConfigQuote"] = args ? args.csvConfigQuote : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["exportName"] = args ? args.exportName : undefined;
            resourceInputs["fromTime"] = args ? args.fromTime : undefined;
            resourceInputs["jsonEnableTag"] = args ? args.jsonEnableTag : undefined;
            resourceInputs["logReadRoleArn"] = args ? args.logReadRoleArn : undefined;
            resourceInputs["logstoreName"] = args ? args.logstoreName : undefined;
            resourceInputs["pathFormat"] = args ? args.pathFormat : undefined;
            resourceInputs["prefix"] = args ? args.prefix : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["suffix"] = args ? args.suffix : undefined;
            resourceInputs["timeZone"] = args ? args.timeZone : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogOssExport.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LogOssExport resources.
 */
export interface LogOssExportState {
    bucket?: pulumi.Input<string>;
    bufferInterval?: pulumi.Input<number>;
    bufferSize?: pulumi.Input<number>;
    compressType?: pulumi.Input<string>;
    configColumns?: pulumi.Input<pulumi.Input<inputs.LogOssExportConfigColumn>[]>;
    contentType?: pulumi.Input<string>;
    csvConfigColumns?: pulumi.Input<pulumi.Input<string>[]>;
    csvConfigDelimiter?: pulumi.Input<string>;
    csvConfigEscape?: pulumi.Input<string>;
    csvConfigHeader?: pulumi.Input<boolean>;
    csvConfigLinefeed?: pulumi.Input<string>;
    csvConfigNull?: pulumi.Input<string>;
    csvConfigQuote?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    exportName?: pulumi.Input<string>;
    fromTime?: pulumi.Input<number>;
    jsonEnableTag?: pulumi.Input<boolean>;
    logReadRoleArn?: pulumi.Input<string>;
    logstoreName?: pulumi.Input<string>;
    pathFormat?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
    projectName?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    suffix?: pulumi.Input<string>;
    timeZone?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LogOssExportTimeouts>;
}

/**
 * The set of arguments for constructing a LogOssExport resource.
 */
export interface LogOssExportArgs {
    bucket: pulumi.Input<string>;
    bufferInterval: pulumi.Input<number>;
    bufferSize: pulumi.Input<number>;
    compressType?: pulumi.Input<string>;
    configColumns?: pulumi.Input<pulumi.Input<inputs.LogOssExportConfigColumn>[]>;
    contentType: pulumi.Input<string>;
    csvConfigColumns?: pulumi.Input<pulumi.Input<string>[]>;
    csvConfigDelimiter?: pulumi.Input<string>;
    csvConfigEscape?: pulumi.Input<string>;
    csvConfigHeader?: pulumi.Input<boolean>;
    csvConfigLinefeed?: pulumi.Input<string>;
    csvConfigNull?: pulumi.Input<string>;
    csvConfigQuote?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    exportName: pulumi.Input<string>;
    fromTime?: pulumi.Input<number>;
    jsonEnableTag?: pulumi.Input<boolean>;
    logReadRoleArn?: pulumi.Input<string>;
    logstoreName: pulumi.Input<string>;
    pathFormat: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
    projectName: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    suffix?: pulumi.Input<string>;
    timeZone: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LogOssExportTimeouts>;
}
