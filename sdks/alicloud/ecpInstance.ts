// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EcpInstance extends pulumi.CustomResource {
    /**
     * Get an existing EcpInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcpInstanceState, opts?: pulumi.CustomResourceOptions): EcpInstance {
        return new EcpInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/ecpInstance:EcpInstance';

    /**
     * Returns true if the given object is an instance of EcpInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcpInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcpInstance.__pulumiType;
    }

    public readonly autoPay!: pulumi.Output<boolean | undefined>;
    public readonly autoRenew!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly eipBandwidth!: pulumi.Output<number | undefined>;
    public readonly force!: pulumi.Output<boolean | undefined>;
    public readonly imageId!: pulumi.Output<string>;
    public readonly instanceName!: pulumi.Output<string | undefined>;
    public readonly instanceType!: pulumi.Output<string>;
    public readonly keyPairName!: pulumi.Output<string | undefined>;
    public readonly paymentType!: pulumi.Output<string | undefined>;
    public readonly period!: pulumi.Output<string | undefined>;
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    public readonly resolution!: pulumi.Output<string>;
    public readonly securityGroupId!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.EcpInstanceTimeouts | undefined>;
    public readonly vncPassword!: pulumi.Output<string | undefined>;
    public readonly vswitchId!: pulumi.Output<string>;

    /**
     * Create a EcpInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EcpInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcpInstanceArgs | EcpInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcpInstanceState | undefined;
            resourceInputs["autoPay"] = state ? state.autoPay : undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["eipBandwidth"] = state ? state.eipBandwidth : undefined;
            resourceInputs["force"] = state ? state.force : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["keyPairName"] = state ? state.keyPairName : undefined;
            resourceInputs["paymentType"] = state ? state.paymentType : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["resolution"] = state ? state.resolution : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vncPassword"] = state ? state.vncPassword : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
        } else {
            const args = argsOrState as EcpInstanceArgs | undefined;
            if ((!args || args.imageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            if ((!args || args.instanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceType'");
            }
            if ((!args || args.securityGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            if ((!args || args.vswitchId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vswitchId'");
            }
            resourceInputs["autoPay"] = args ? args.autoPay : undefined;
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["eipBandwidth"] = args ? args.eipBandwidth : undefined;
            resourceInputs["force"] = args ? args.force : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["keyPairName"] = args ? args.keyPairName : undefined;
            resourceInputs["paymentType"] = args ? args.paymentType : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["resolution"] = args ? args.resolution : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vncPassword"] = args?.vncPassword ? pulumi.secret(args.vncPassword) : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["vncPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(EcpInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EcpInstance resources.
 */
export interface EcpInstanceState {
    autoPay?: pulumi.Input<boolean>;
    autoRenew?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    eipBandwidth?: pulumi.Input<number>;
    force?: pulumi.Input<boolean>;
    imageId?: pulumi.Input<string>;
    instanceName?: pulumi.Input<string>;
    instanceType?: pulumi.Input<string>;
    keyPairName?: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
    periodUnit?: pulumi.Input<string>;
    resolution?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EcpInstanceTimeouts>;
    vncPassword?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EcpInstance resource.
 */
export interface EcpInstanceArgs {
    autoPay?: pulumi.Input<boolean>;
    autoRenew?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    eipBandwidth?: pulumi.Input<number>;
    force?: pulumi.Input<boolean>;
    imageId: pulumi.Input<string>;
    instanceName?: pulumi.Input<string>;
    instanceType: pulumi.Input<string>;
    keyPairName?: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
    periodUnit?: pulumi.Input<string>;
    resolution?: pulumi.Input<string>;
    securityGroupId: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EcpInstanceTimeouts>;
    vncPassword?: pulumi.Input<string>;
    vswitchId: pulumi.Input<string>;
}
