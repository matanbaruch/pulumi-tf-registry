// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApiGatewayApi extends pulumi.CustomResource {
    /**
     * Get an existing ApiGatewayApi resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiGatewayApiState, opts?: pulumi.CustomResourceOptions): ApiGatewayApi {
        return new ApiGatewayApi(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/apiGatewayApi:ApiGatewayApi';

    /**
     * Returns true if the given object is an instance of ApiGatewayApi.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiGatewayApi {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiGatewayApi.__pulumiType;
    }

    public /*out*/ readonly apiId!: pulumi.Output<string>;
    public readonly authType!: pulumi.Output<string>;
    public readonly constantParameters!: pulumi.Output<outputs.ApiGatewayApiConstantParameter[] | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly fcServiceConfig!: pulumi.Output<outputs.ApiGatewayApiFcServiceConfig | undefined>;
    public readonly forceNonceCheck!: pulumi.Output<boolean>;
    public readonly groupId!: pulumi.Output<string>;
    public readonly httpServiceConfig!: pulumi.Output<outputs.ApiGatewayApiHttpServiceConfig | undefined>;
    public readonly httpVpcServiceConfig!: pulumi.Output<outputs.ApiGatewayApiHttpVpcServiceConfig | undefined>;
    public readonly mockServiceConfig!: pulumi.Output<outputs.ApiGatewayApiMockServiceConfig | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly requestConfig!: pulumi.Output<outputs.ApiGatewayApiRequestConfig>;
    public readonly requestParameters!: pulumi.Output<outputs.ApiGatewayApiRequestParameter[] | undefined>;
    public readonly serviceType!: pulumi.Output<string>;
    public readonly stageNames!: pulumi.Output<string[] | undefined>;
    public readonly systemParameters!: pulumi.Output<outputs.ApiGatewayApiSystemParameter[] | undefined>;

    /**
     * Create a ApiGatewayApi resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiGatewayApiArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiGatewayApiArgs | ApiGatewayApiState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiGatewayApiState | undefined;
            resourceInputs["apiId"] = state ? state.apiId : undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["constantParameters"] = state ? state.constantParameters : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fcServiceConfig"] = state ? state.fcServiceConfig : undefined;
            resourceInputs["forceNonceCheck"] = state ? state.forceNonceCheck : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["httpServiceConfig"] = state ? state.httpServiceConfig : undefined;
            resourceInputs["httpVpcServiceConfig"] = state ? state.httpVpcServiceConfig : undefined;
            resourceInputs["mockServiceConfig"] = state ? state.mockServiceConfig : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["requestConfig"] = state ? state.requestConfig : undefined;
            resourceInputs["requestParameters"] = state ? state.requestParameters : undefined;
            resourceInputs["serviceType"] = state ? state.serviceType : undefined;
            resourceInputs["stageNames"] = state ? state.stageNames : undefined;
            resourceInputs["systemParameters"] = state ? state.systemParameters : undefined;
        } else {
            const args = argsOrState as ApiGatewayApiArgs | undefined;
            if ((!args || args.authType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authType'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.requestConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'requestConfig'");
            }
            if ((!args || args.serviceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceType'");
            }
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["constantParameters"] = args ? args.constantParameters : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fcServiceConfig"] = args ? args.fcServiceConfig : undefined;
            resourceInputs["forceNonceCheck"] = args ? args.forceNonceCheck : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["httpServiceConfig"] = args ? args.httpServiceConfig : undefined;
            resourceInputs["httpVpcServiceConfig"] = args ? args.httpVpcServiceConfig : undefined;
            resourceInputs["mockServiceConfig"] = args ? args.mockServiceConfig : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["requestConfig"] = args ? args.requestConfig : undefined;
            resourceInputs["requestParameters"] = args ? args.requestParameters : undefined;
            resourceInputs["serviceType"] = args ? args.serviceType : undefined;
            resourceInputs["stageNames"] = args ? args.stageNames : undefined;
            resourceInputs["systemParameters"] = args ? args.systemParameters : undefined;
            resourceInputs["apiId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApiGatewayApi.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApiGatewayApi resources.
 */
export interface ApiGatewayApiState {
    apiId?: pulumi.Input<string>;
    authType?: pulumi.Input<string>;
    constantParameters?: pulumi.Input<pulumi.Input<inputs.ApiGatewayApiConstantParameter>[]>;
    description?: pulumi.Input<string>;
    fcServiceConfig?: pulumi.Input<inputs.ApiGatewayApiFcServiceConfig>;
    forceNonceCheck?: pulumi.Input<boolean>;
    groupId?: pulumi.Input<string>;
    httpServiceConfig?: pulumi.Input<inputs.ApiGatewayApiHttpServiceConfig>;
    httpVpcServiceConfig?: pulumi.Input<inputs.ApiGatewayApiHttpVpcServiceConfig>;
    mockServiceConfig?: pulumi.Input<inputs.ApiGatewayApiMockServiceConfig>;
    name?: pulumi.Input<string>;
    requestConfig?: pulumi.Input<inputs.ApiGatewayApiRequestConfig>;
    requestParameters?: pulumi.Input<pulumi.Input<inputs.ApiGatewayApiRequestParameter>[]>;
    serviceType?: pulumi.Input<string>;
    stageNames?: pulumi.Input<pulumi.Input<string>[]>;
    systemParameters?: pulumi.Input<pulumi.Input<inputs.ApiGatewayApiSystemParameter>[]>;
}

/**
 * The set of arguments for constructing a ApiGatewayApi resource.
 */
export interface ApiGatewayApiArgs {
    authType: pulumi.Input<string>;
    constantParameters?: pulumi.Input<pulumi.Input<inputs.ApiGatewayApiConstantParameter>[]>;
    description: pulumi.Input<string>;
    fcServiceConfig?: pulumi.Input<inputs.ApiGatewayApiFcServiceConfig>;
    forceNonceCheck?: pulumi.Input<boolean>;
    groupId: pulumi.Input<string>;
    httpServiceConfig?: pulumi.Input<inputs.ApiGatewayApiHttpServiceConfig>;
    httpVpcServiceConfig?: pulumi.Input<inputs.ApiGatewayApiHttpVpcServiceConfig>;
    mockServiceConfig?: pulumi.Input<inputs.ApiGatewayApiMockServiceConfig>;
    name?: pulumi.Input<string>;
    requestConfig: pulumi.Input<inputs.ApiGatewayApiRequestConfig>;
    requestParameters?: pulumi.Input<pulumi.Input<inputs.ApiGatewayApiRequestParameter>[]>;
    serviceType: pulumi.Input<string>;
    stageNames?: pulumi.Input<pulumi.Input<string>[]>;
    systemParameters?: pulumi.Input<pulumi.Input<inputs.ApiGatewayApiSystemParameter>[]>;
}
