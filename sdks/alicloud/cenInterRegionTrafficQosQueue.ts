// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CenInterRegionTrafficQosQueue extends pulumi.CustomResource {
    /**
     * Get an existing CenInterRegionTrafficQosQueue resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CenInterRegionTrafficQosQueueState, opts?: pulumi.CustomResourceOptions): CenInterRegionTrafficQosQueue {
        return new CenInterRegionTrafficQosQueue(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/cenInterRegionTrafficQosQueue:CenInterRegionTrafficQosQueue';

    /**
     * Returns true if the given object is an instance of CenInterRegionTrafficQosQueue.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CenInterRegionTrafficQosQueue {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CenInterRegionTrafficQosQueue.__pulumiType;
    }

    public readonly dscps!: pulumi.Output<string[]>;
    public readonly interRegionTrafficQosQueueDescription!: pulumi.Output<string | undefined>;
    public readonly interRegionTrafficQosQueueName!: pulumi.Output<string | undefined>;
    public readonly remainBandwidthPercent!: pulumi.Output<number>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CenInterRegionTrafficQosQueueTimeouts | undefined>;
    public readonly trafficQosPolicyId!: pulumi.Output<string>;

    /**
     * Create a CenInterRegionTrafficQosQueue resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CenInterRegionTrafficQosQueueArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CenInterRegionTrafficQosQueueArgs | CenInterRegionTrafficQosQueueState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CenInterRegionTrafficQosQueueState | undefined;
            resourceInputs["dscps"] = state ? state.dscps : undefined;
            resourceInputs["interRegionTrafficQosQueueDescription"] = state ? state.interRegionTrafficQosQueueDescription : undefined;
            resourceInputs["interRegionTrafficQosQueueName"] = state ? state.interRegionTrafficQosQueueName : undefined;
            resourceInputs["remainBandwidthPercent"] = state ? state.remainBandwidthPercent : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["trafficQosPolicyId"] = state ? state.trafficQosPolicyId : undefined;
        } else {
            const args = argsOrState as CenInterRegionTrafficQosQueueArgs | undefined;
            if ((!args || args.dscps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dscps'");
            }
            if ((!args || args.remainBandwidthPercent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remainBandwidthPercent'");
            }
            if ((!args || args.trafficQosPolicyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trafficQosPolicyId'");
            }
            resourceInputs["dscps"] = args ? args.dscps : undefined;
            resourceInputs["interRegionTrafficQosQueueDescription"] = args ? args.interRegionTrafficQosQueueDescription : undefined;
            resourceInputs["interRegionTrafficQosQueueName"] = args ? args.interRegionTrafficQosQueueName : undefined;
            resourceInputs["remainBandwidthPercent"] = args ? args.remainBandwidthPercent : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["trafficQosPolicyId"] = args ? args.trafficQosPolicyId : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CenInterRegionTrafficQosQueue.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CenInterRegionTrafficQosQueue resources.
 */
export interface CenInterRegionTrafficQosQueueState {
    dscps?: pulumi.Input<pulumi.Input<string>[]>;
    interRegionTrafficQosQueueDescription?: pulumi.Input<string>;
    interRegionTrafficQosQueueName?: pulumi.Input<string>;
    remainBandwidthPercent?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CenInterRegionTrafficQosQueueTimeouts>;
    trafficQosPolicyId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CenInterRegionTrafficQosQueue resource.
 */
export interface CenInterRegionTrafficQosQueueArgs {
    dscps: pulumi.Input<pulumi.Input<string>[]>;
    interRegionTrafficQosQueueDescription?: pulumi.Input<string>;
    interRegionTrafficQosQueueName?: pulumi.Input<string>;
    remainBandwidthPercent: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.CenInterRegionTrafficQosQueueTimeouts>;
    trafficQosPolicyId: pulumi.Input<string>;
}
