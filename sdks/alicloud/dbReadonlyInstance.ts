// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DbReadonlyInstance extends pulumi.CustomResource {
    /**
     * Get an existing DbReadonlyInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DbReadonlyInstanceState, opts?: pulumi.CustomResourceOptions): DbReadonlyInstance {
        return new DbReadonlyInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/dbReadonlyInstance:DbReadonlyInstance';

    /**
     * Returns true if the given object is an instance of DbReadonlyInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DbReadonlyInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DbReadonlyInstance.__pulumiType;
    }

    public readonly acl!: pulumi.Output<string>;
    public readonly autoRenew!: pulumi.Output<boolean | undefined>;
    public readonly autoRenewPeriod!: pulumi.Output<number | undefined>;
    public readonly caType!: pulumi.Output<string>;
    public readonly clientCaCert!: pulumi.Output<string | undefined>;
    public readonly clientCaEnabled!: pulumi.Output<number | undefined>;
    public readonly clientCertRevocationList!: pulumi.Output<string | undefined>;
    public readonly clientCrlEnabled!: pulumi.Output<number | undefined>;
    public /*out*/ readonly connectionString!: pulumi.Output<string>;
    public readonly dbInstanceIpArrayAttribute!: pulumi.Output<string | undefined>;
    public readonly dbInstanceIpArrayName!: pulumi.Output<string | undefined>;
    public readonly dbInstanceStorageType!: pulumi.Output<string>;
    public readonly deletionProtection!: pulumi.Output<boolean | undefined>;
    public readonly direction!: pulumi.Output<string | undefined>;
    public readonly effectiveTime!: pulumi.Output<string | undefined>;
    public /*out*/ readonly engine!: pulumi.Output<string>;
    public readonly engineVersion!: pulumi.Output<string>;
    public readonly forceRestart!: pulumi.Output<boolean | undefined>;
    public readonly instanceChargeType!: pulumi.Output<string | undefined>;
    public readonly instanceName!: pulumi.Output<string>;
    public readonly instanceStorage!: pulumi.Output<number>;
    public readonly instanceType!: pulumi.Output<string>;
    public readonly masterDbInstanceId!: pulumi.Output<string>;
    public readonly modifyMode!: pulumi.Output<string | undefined>;
    public readonly parameters!: pulumi.Output<outputs.DbReadonlyInstanceParameter[] | undefined>;
    public readonly period!: pulumi.Output<number | undefined>;
    public /*out*/ readonly port!: pulumi.Output<string>;
    public readonly replicationAcl!: pulumi.Output<string>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly securityIpType!: pulumi.Output<string | undefined>;
    public readonly securityIps!: pulumi.Output<string[]>;
    public readonly serverCert!: pulumi.Output<string>;
    public readonly serverKey!: pulumi.Output<string>;
    public readonly sslEnabled!: pulumi.Output<number>;
    public readonly switchTime!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly targetMinorVersion!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DbReadonlyInstanceTimeouts | undefined>;
    public readonly upgradeDbInstanceKernelVersion!: pulumi.Output<boolean | undefined>;
    public readonly upgradeTime!: pulumi.Output<string | undefined>;
    public readonly vswitchId!: pulumi.Output<string | undefined>;
    public readonly whitelistNetworkType!: pulumi.Output<string | undefined>;
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a DbReadonlyInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DbReadonlyInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DbReadonlyInstanceArgs | DbReadonlyInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DbReadonlyInstanceState | undefined;
            resourceInputs["acl"] = state ? state.acl : undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["autoRenewPeriod"] = state ? state.autoRenewPeriod : undefined;
            resourceInputs["caType"] = state ? state.caType : undefined;
            resourceInputs["clientCaCert"] = state ? state.clientCaCert : undefined;
            resourceInputs["clientCaEnabled"] = state ? state.clientCaEnabled : undefined;
            resourceInputs["clientCertRevocationList"] = state ? state.clientCertRevocationList : undefined;
            resourceInputs["clientCrlEnabled"] = state ? state.clientCrlEnabled : undefined;
            resourceInputs["connectionString"] = state ? state.connectionString : undefined;
            resourceInputs["dbInstanceIpArrayAttribute"] = state ? state.dbInstanceIpArrayAttribute : undefined;
            resourceInputs["dbInstanceIpArrayName"] = state ? state.dbInstanceIpArrayName : undefined;
            resourceInputs["dbInstanceStorageType"] = state ? state.dbInstanceStorageType : undefined;
            resourceInputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            resourceInputs["direction"] = state ? state.direction : undefined;
            resourceInputs["effectiveTime"] = state ? state.effectiveTime : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["forceRestart"] = state ? state.forceRestart : undefined;
            resourceInputs["instanceChargeType"] = state ? state.instanceChargeType : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["instanceStorage"] = state ? state.instanceStorage : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["masterDbInstanceId"] = state ? state.masterDbInstanceId : undefined;
            resourceInputs["modifyMode"] = state ? state.modifyMode : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["replicationAcl"] = state ? state.replicationAcl : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["securityIpType"] = state ? state.securityIpType : undefined;
            resourceInputs["securityIps"] = state ? state.securityIps : undefined;
            resourceInputs["serverCert"] = state ? state.serverCert : undefined;
            resourceInputs["serverKey"] = state ? state.serverKey : undefined;
            resourceInputs["sslEnabled"] = state ? state.sslEnabled : undefined;
            resourceInputs["switchTime"] = state ? state.switchTime : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["targetMinorVersion"] = state ? state.targetMinorVersion : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["upgradeDbInstanceKernelVersion"] = state ? state.upgradeDbInstanceKernelVersion : undefined;
            resourceInputs["upgradeTime"] = state ? state.upgradeTime : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
            resourceInputs["whitelistNetworkType"] = state ? state.whitelistNetworkType : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as DbReadonlyInstanceArgs | undefined;
            if ((!args || args.engineVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engineVersion'");
            }
            if ((!args || args.instanceStorage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceStorage'");
            }
            if ((!args || args.instanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceType'");
            }
            if ((!args || args.masterDbInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'masterDbInstanceId'");
            }
            resourceInputs["acl"] = args ? args.acl : undefined;
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["autoRenewPeriod"] = args ? args.autoRenewPeriod : undefined;
            resourceInputs["caType"] = args ? args.caType : undefined;
            resourceInputs["clientCaCert"] = args ? args.clientCaCert : undefined;
            resourceInputs["clientCaEnabled"] = args ? args.clientCaEnabled : undefined;
            resourceInputs["clientCertRevocationList"] = args ? args.clientCertRevocationList : undefined;
            resourceInputs["clientCrlEnabled"] = args ? args.clientCrlEnabled : undefined;
            resourceInputs["dbInstanceIpArrayAttribute"] = args ? args.dbInstanceIpArrayAttribute : undefined;
            resourceInputs["dbInstanceIpArrayName"] = args ? args.dbInstanceIpArrayName : undefined;
            resourceInputs["dbInstanceStorageType"] = args ? args.dbInstanceStorageType : undefined;
            resourceInputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            resourceInputs["direction"] = args ? args.direction : undefined;
            resourceInputs["effectiveTime"] = args ? args.effectiveTime : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["forceRestart"] = args ? args.forceRestart : undefined;
            resourceInputs["instanceChargeType"] = args ? args.instanceChargeType : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["instanceStorage"] = args ? args.instanceStorage : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["masterDbInstanceId"] = args ? args.masterDbInstanceId : undefined;
            resourceInputs["modifyMode"] = args ? args.modifyMode : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["replicationAcl"] = args ? args.replicationAcl : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["securityIpType"] = args ? args.securityIpType : undefined;
            resourceInputs["securityIps"] = args ? args.securityIps : undefined;
            resourceInputs["serverCert"] = args ? args.serverCert : undefined;
            resourceInputs["serverKey"] = args ? args.serverKey : undefined;
            resourceInputs["sslEnabled"] = args ? args.sslEnabled : undefined;
            resourceInputs["switchTime"] = args ? args.switchTime : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetMinorVersion"] = args ? args.targetMinorVersion : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["upgradeDbInstanceKernelVersion"] = args ? args.upgradeDbInstanceKernelVersion : undefined;
            resourceInputs["upgradeTime"] = args ? args.upgradeTime : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["whitelistNetworkType"] = args ? args.whitelistNetworkType : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["connectionString"] = undefined /*out*/;
            resourceInputs["engine"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DbReadonlyInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DbReadonlyInstance resources.
 */
export interface DbReadonlyInstanceState {
    acl?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<boolean>;
    autoRenewPeriod?: pulumi.Input<number>;
    caType?: pulumi.Input<string>;
    clientCaCert?: pulumi.Input<string>;
    clientCaEnabled?: pulumi.Input<number>;
    clientCertRevocationList?: pulumi.Input<string>;
    clientCrlEnabled?: pulumi.Input<number>;
    connectionString?: pulumi.Input<string>;
    dbInstanceIpArrayAttribute?: pulumi.Input<string>;
    dbInstanceIpArrayName?: pulumi.Input<string>;
    dbInstanceStorageType?: pulumi.Input<string>;
    deletionProtection?: pulumi.Input<boolean>;
    direction?: pulumi.Input<string>;
    effectiveTime?: pulumi.Input<string>;
    engine?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    forceRestart?: pulumi.Input<boolean>;
    instanceChargeType?: pulumi.Input<string>;
    instanceName?: pulumi.Input<string>;
    instanceStorage?: pulumi.Input<number>;
    instanceType?: pulumi.Input<string>;
    masterDbInstanceId?: pulumi.Input<string>;
    modifyMode?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.DbReadonlyInstanceParameter>[]>;
    period?: pulumi.Input<number>;
    port?: pulumi.Input<string>;
    replicationAcl?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    securityIpType?: pulumi.Input<string>;
    securityIps?: pulumi.Input<pulumi.Input<string>[]>;
    serverCert?: pulumi.Input<string>;
    serverKey?: pulumi.Input<string>;
    sslEnabled?: pulumi.Input<number>;
    switchTime?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    targetMinorVersion?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DbReadonlyInstanceTimeouts>;
    upgradeDbInstanceKernelVersion?: pulumi.Input<boolean>;
    upgradeTime?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
    whitelistNetworkType?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DbReadonlyInstance resource.
 */
export interface DbReadonlyInstanceArgs {
    acl?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<boolean>;
    autoRenewPeriod?: pulumi.Input<number>;
    caType?: pulumi.Input<string>;
    clientCaCert?: pulumi.Input<string>;
    clientCaEnabled?: pulumi.Input<number>;
    clientCertRevocationList?: pulumi.Input<string>;
    clientCrlEnabled?: pulumi.Input<number>;
    dbInstanceIpArrayAttribute?: pulumi.Input<string>;
    dbInstanceIpArrayName?: pulumi.Input<string>;
    dbInstanceStorageType?: pulumi.Input<string>;
    deletionProtection?: pulumi.Input<boolean>;
    direction?: pulumi.Input<string>;
    effectiveTime?: pulumi.Input<string>;
    engineVersion: pulumi.Input<string>;
    forceRestart?: pulumi.Input<boolean>;
    instanceChargeType?: pulumi.Input<string>;
    instanceName?: pulumi.Input<string>;
    instanceStorage: pulumi.Input<number>;
    instanceType: pulumi.Input<string>;
    masterDbInstanceId: pulumi.Input<string>;
    modifyMode?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.DbReadonlyInstanceParameter>[]>;
    period?: pulumi.Input<number>;
    replicationAcl?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    securityIpType?: pulumi.Input<string>;
    securityIps?: pulumi.Input<pulumi.Input<string>[]>;
    serverCert?: pulumi.Input<string>;
    serverKey?: pulumi.Input<string>;
    sslEnabled?: pulumi.Input<number>;
    switchTime?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    targetMinorVersion?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DbReadonlyInstanceTimeouts>;
    upgradeDbInstanceKernelVersion?: pulumi.Input<boolean>;
    upgradeTime?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
    whitelistNetworkType?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}
