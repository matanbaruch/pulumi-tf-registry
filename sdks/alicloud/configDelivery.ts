// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ConfigDelivery extends pulumi.CustomResource {
    /**
     * Get an existing ConfigDelivery resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigDeliveryState, opts?: pulumi.CustomResourceOptions): ConfigDelivery {
        return new ConfigDelivery(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/configDelivery:ConfigDelivery';

    /**
     * Returns true if the given object is an instance of ConfigDelivery.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigDelivery {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigDelivery.__pulumiType;
    }

    public readonly configurationItemChangeNotification!: pulumi.Output<boolean | undefined>;
    public readonly configurationSnapshot!: pulumi.Output<boolean | undefined>;
    public readonly deliveryChannelCondition!: pulumi.Output<string | undefined>;
    public readonly deliveryChannelName!: pulumi.Output<string | undefined>;
    public readonly deliveryChannelTargetArn!: pulumi.Output<string>;
    public readonly deliveryChannelType!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly nonCompliantNotification!: pulumi.Output<boolean | undefined>;
    public readonly oversizedDataOssTargetArn!: pulumi.Output<string | undefined>;
    public readonly status!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.ConfigDeliveryTimeouts | undefined>;

    /**
     * Create a ConfigDelivery resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigDeliveryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigDeliveryArgs | ConfigDeliveryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigDeliveryState | undefined;
            resourceInputs["configurationItemChangeNotification"] = state ? state.configurationItemChangeNotification : undefined;
            resourceInputs["configurationSnapshot"] = state ? state.configurationSnapshot : undefined;
            resourceInputs["deliveryChannelCondition"] = state ? state.deliveryChannelCondition : undefined;
            resourceInputs["deliveryChannelName"] = state ? state.deliveryChannelName : undefined;
            resourceInputs["deliveryChannelTargetArn"] = state ? state.deliveryChannelTargetArn : undefined;
            resourceInputs["deliveryChannelType"] = state ? state.deliveryChannelType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["nonCompliantNotification"] = state ? state.nonCompliantNotification : undefined;
            resourceInputs["oversizedDataOssTargetArn"] = state ? state.oversizedDataOssTargetArn : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ConfigDeliveryArgs | undefined;
            if ((!args || args.deliveryChannelTargetArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deliveryChannelTargetArn'");
            }
            if ((!args || args.deliveryChannelType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deliveryChannelType'");
            }
            resourceInputs["configurationItemChangeNotification"] = args ? args.configurationItemChangeNotification : undefined;
            resourceInputs["configurationSnapshot"] = args ? args.configurationSnapshot : undefined;
            resourceInputs["deliveryChannelCondition"] = args ? args.deliveryChannelCondition : undefined;
            resourceInputs["deliveryChannelName"] = args ? args.deliveryChannelName : undefined;
            resourceInputs["deliveryChannelTargetArn"] = args ? args.deliveryChannelTargetArn : undefined;
            resourceInputs["deliveryChannelType"] = args ? args.deliveryChannelType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["nonCompliantNotification"] = args ? args.nonCompliantNotification : undefined;
            resourceInputs["oversizedDataOssTargetArn"] = args ? args.oversizedDataOssTargetArn : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConfigDelivery.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConfigDelivery resources.
 */
export interface ConfigDeliveryState {
    configurationItemChangeNotification?: pulumi.Input<boolean>;
    configurationSnapshot?: pulumi.Input<boolean>;
    deliveryChannelCondition?: pulumi.Input<string>;
    deliveryChannelName?: pulumi.Input<string>;
    deliveryChannelTargetArn?: pulumi.Input<string>;
    deliveryChannelType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    nonCompliantNotification?: pulumi.Input<boolean>;
    oversizedDataOssTargetArn?: pulumi.Input<string>;
    status?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.ConfigDeliveryTimeouts>;
}

/**
 * The set of arguments for constructing a ConfigDelivery resource.
 */
export interface ConfigDeliveryArgs {
    configurationItemChangeNotification?: pulumi.Input<boolean>;
    configurationSnapshot?: pulumi.Input<boolean>;
    deliveryChannelCondition?: pulumi.Input<string>;
    deliveryChannelName?: pulumi.Input<string>;
    deliveryChannelTargetArn: pulumi.Input<string>;
    deliveryChannelType: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    nonCompliantNotification?: pulumi.Input<boolean>;
    oversizedDataOssTargetArn?: pulumi.Input<string>;
    status?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.ConfigDeliveryTimeouts>;
}
