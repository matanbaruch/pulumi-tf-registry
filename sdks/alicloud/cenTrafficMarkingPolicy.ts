// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CenTrafficMarkingPolicy extends pulumi.CustomResource {
    /**
     * Get an existing CenTrafficMarkingPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CenTrafficMarkingPolicyState, opts?: pulumi.CustomResourceOptions): CenTrafficMarkingPolicy {
        return new CenTrafficMarkingPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/cenTrafficMarkingPolicy:CenTrafficMarkingPolicy';

    /**
     * Returns true if the given object is an instance of CenTrafficMarkingPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CenTrafficMarkingPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CenTrafficMarkingPolicy.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dryRun!: pulumi.Output<boolean | undefined>;
    public readonly markingDscp!: pulumi.Output<number>;
    public readonly priority!: pulumi.Output<number>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CenTrafficMarkingPolicyTimeouts | undefined>;
    public /*out*/ readonly trafficMarkingPolicyId!: pulumi.Output<string>;
    public readonly trafficMarkingPolicyName!: pulumi.Output<string | undefined>;
    public readonly transitRouterId!: pulumi.Output<string>;

    /**
     * Create a CenTrafficMarkingPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CenTrafficMarkingPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CenTrafficMarkingPolicyArgs | CenTrafficMarkingPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CenTrafficMarkingPolicyState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dryRun"] = state ? state.dryRun : undefined;
            resourceInputs["markingDscp"] = state ? state.markingDscp : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["trafficMarkingPolicyId"] = state ? state.trafficMarkingPolicyId : undefined;
            resourceInputs["trafficMarkingPolicyName"] = state ? state.trafficMarkingPolicyName : undefined;
            resourceInputs["transitRouterId"] = state ? state.transitRouterId : undefined;
        } else {
            const args = argsOrState as CenTrafficMarkingPolicyArgs | undefined;
            if ((!args || args.markingDscp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'markingDscp'");
            }
            if ((!args || args.priority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            if ((!args || args.transitRouterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'transitRouterId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dryRun"] = args ? args.dryRun : undefined;
            resourceInputs["markingDscp"] = args ? args.markingDscp : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["trafficMarkingPolicyName"] = args ? args.trafficMarkingPolicyName : undefined;
            resourceInputs["transitRouterId"] = args ? args.transitRouterId : undefined;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["trafficMarkingPolicyId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CenTrafficMarkingPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CenTrafficMarkingPolicy resources.
 */
export interface CenTrafficMarkingPolicyState {
    description?: pulumi.Input<string>;
    dryRun?: pulumi.Input<boolean>;
    markingDscp?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CenTrafficMarkingPolicyTimeouts>;
    trafficMarkingPolicyId?: pulumi.Input<string>;
    trafficMarkingPolicyName?: pulumi.Input<string>;
    transitRouterId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CenTrafficMarkingPolicy resource.
 */
export interface CenTrafficMarkingPolicyArgs {
    description?: pulumi.Input<string>;
    dryRun?: pulumi.Input<boolean>;
    markingDscp: pulumi.Input<number>;
    priority: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.CenTrafficMarkingPolicyTimeouts>;
    trafficMarkingPolicyName?: pulumi.Input<string>;
    transitRouterId: pulumi.Input<string>;
}
