// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GaAccessLog extends pulumi.CustomResource {
    /**
     * Get an existing GaAccessLog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GaAccessLogState, opts?: pulumi.CustomResourceOptions): GaAccessLog {
        return new GaAccessLog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/gaAccessLog:GaAccessLog';

    /**
     * Returns true if the given object is an instance of GaAccessLog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GaAccessLog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GaAccessLog.__pulumiType;
    }

    public readonly acceleratorId!: pulumi.Output<string>;
    public readonly endpointGroupId!: pulumi.Output<string>;
    public readonly listenerId!: pulumi.Output<string>;
    public readonly slsLogStoreName!: pulumi.Output<string>;
    public readonly slsProjectName!: pulumi.Output<string>;
    public readonly slsRegionId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.GaAccessLogTimeouts | undefined>;

    /**
     * Create a GaAccessLog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GaAccessLogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GaAccessLogArgs | GaAccessLogState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GaAccessLogState | undefined;
            resourceInputs["acceleratorId"] = state ? state.acceleratorId : undefined;
            resourceInputs["endpointGroupId"] = state ? state.endpointGroupId : undefined;
            resourceInputs["listenerId"] = state ? state.listenerId : undefined;
            resourceInputs["slsLogStoreName"] = state ? state.slsLogStoreName : undefined;
            resourceInputs["slsProjectName"] = state ? state.slsProjectName : undefined;
            resourceInputs["slsRegionId"] = state ? state.slsRegionId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as GaAccessLogArgs | undefined;
            if ((!args || args.acceleratorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'acceleratorId'");
            }
            if ((!args || args.endpointGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointGroupId'");
            }
            if ((!args || args.listenerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenerId'");
            }
            if ((!args || args.slsLogStoreName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slsLogStoreName'");
            }
            if ((!args || args.slsProjectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slsProjectName'");
            }
            if ((!args || args.slsRegionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slsRegionId'");
            }
            resourceInputs["acceleratorId"] = args ? args.acceleratorId : undefined;
            resourceInputs["endpointGroupId"] = args ? args.endpointGroupId : undefined;
            resourceInputs["listenerId"] = args ? args.listenerId : undefined;
            resourceInputs["slsLogStoreName"] = args ? args.slsLogStoreName : undefined;
            resourceInputs["slsProjectName"] = args ? args.slsProjectName : undefined;
            resourceInputs["slsRegionId"] = args ? args.slsRegionId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GaAccessLog.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GaAccessLog resources.
 */
export interface GaAccessLogState {
    acceleratorId?: pulumi.Input<string>;
    endpointGroupId?: pulumi.Input<string>;
    listenerId?: pulumi.Input<string>;
    slsLogStoreName?: pulumi.Input<string>;
    slsProjectName?: pulumi.Input<string>;
    slsRegionId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GaAccessLogTimeouts>;
}

/**
 * The set of arguments for constructing a GaAccessLog resource.
 */
export interface GaAccessLogArgs {
    acceleratorId: pulumi.Input<string>;
    endpointGroupId: pulumi.Input<string>;
    listenerId: pulumi.Input<string>;
    slsLogStoreName: pulumi.Input<string>;
    slsProjectName: pulumi.Input<string>;
    slsRegionId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GaAccessLogTimeouts>;
}
