// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CenTransitRouterMulticastDomainSource extends pulumi.CustomResource {
    /**
     * Get an existing CenTransitRouterMulticastDomainSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CenTransitRouterMulticastDomainSourceState, opts?: pulumi.CustomResourceOptions): CenTransitRouterMulticastDomainSource {
        return new CenTransitRouterMulticastDomainSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/cenTransitRouterMulticastDomainSource:CenTransitRouterMulticastDomainSource';

    /**
     * Returns true if the given object is an instance of CenTransitRouterMulticastDomainSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CenTransitRouterMulticastDomainSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CenTransitRouterMulticastDomainSource.__pulumiType;
    }

    public readonly groupIpAddress!: pulumi.Output<string>;
    public readonly networkInterfaceId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CenTransitRouterMulticastDomainSourceTimeouts | undefined>;
    public readonly transitRouterMulticastDomainId!: pulumi.Output<string>;
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a CenTransitRouterMulticastDomainSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CenTransitRouterMulticastDomainSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CenTransitRouterMulticastDomainSourceArgs | CenTransitRouterMulticastDomainSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CenTransitRouterMulticastDomainSourceState | undefined;
            resourceInputs["groupIpAddress"] = state ? state.groupIpAddress : undefined;
            resourceInputs["networkInterfaceId"] = state ? state.networkInterfaceId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["transitRouterMulticastDomainId"] = state ? state.transitRouterMulticastDomainId : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as CenTransitRouterMulticastDomainSourceArgs | undefined;
            if ((!args || args.groupIpAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupIpAddress'");
            }
            if ((!args || args.networkInterfaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkInterfaceId'");
            }
            if ((!args || args.transitRouterMulticastDomainId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'transitRouterMulticastDomainId'");
            }
            resourceInputs["groupIpAddress"] = args ? args.groupIpAddress : undefined;
            resourceInputs["networkInterfaceId"] = args ? args.networkInterfaceId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["transitRouterMulticastDomainId"] = args ? args.transitRouterMulticastDomainId : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CenTransitRouterMulticastDomainSource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CenTransitRouterMulticastDomainSource resources.
 */
export interface CenTransitRouterMulticastDomainSourceState {
    groupIpAddress?: pulumi.Input<string>;
    networkInterfaceId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CenTransitRouterMulticastDomainSourceTimeouts>;
    transitRouterMulticastDomainId?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CenTransitRouterMulticastDomainSource resource.
 */
export interface CenTransitRouterMulticastDomainSourceArgs {
    groupIpAddress: pulumi.Input<string>;
    networkInterfaceId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CenTransitRouterMulticastDomainSourceTimeouts>;
    transitRouterMulticastDomainId: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
}
