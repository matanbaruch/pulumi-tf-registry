// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CsKubernetesNodePool extends pulumi.CustomResource {
    /**
     * Get an existing CsKubernetesNodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CsKubernetesNodePoolState, opts?: pulumi.CustomResourceOptions): CsKubernetesNodePool {
        return new CsKubernetesNodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/csKubernetesNodePool:CsKubernetesNodePool';

    /**
     * Returns true if the given object is an instance of CsKubernetesNodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CsKubernetesNodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CsKubernetesNodePool.__pulumiType;
    }

    public readonly autoRenew!: pulumi.Output<boolean | undefined>;
    public readonly autoRenewPeriod!: pulumi.Output<number | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly cisEnabled!: pulumi.Output<boolean | undefined>;
    public readonly clusterId!: pulumi.Output<string>;
    public readonly compensateWithOnDemand!: pulumi.Output<boolean | undefined>;
    public readonly cpuPolicy!: pulumi.Output<string>;
    public readonly dataDisks!: pulumi.Output<outputs.CsKubernetesNodePoolDataDisk[] | undefined>;
    public readonly deploymentSetId!: pulumi.Output<string | undefined>;
    public readonly desiredSize!: pulumi.Output<number | undefined>;
    public readonly forceDelete!: pulumi.Output<boolean | undefined>;
    public readonly formatDisk!: pulumi.Output<boolean>;
    public readonly imageId!: pulumi.Output<string>;
    public readonly imageType!: pulumi.Output<string>;
    public readonly installCloudMonitor!: pulumi.Output<boolean | undefined>;
    public readonly instanceChargeType!: pulumi.Output<string | undefined>;
    public readonly instanceTypes!: pulumi.Output<string[]>;
    public readonly instances!: pulumi.Output<string[] | undefined>;
    public readonly internetChargeType!: pulumi.Output<string | undefined>;
    public readonly internetMaxBandwidthOut!: pulumi.Output<number | undefined>;
    public readonly keepInstanceName!: pulumi.Output<boolean>;
    public readonly keyName!: pulumi.Output<string | undefined>;
    public readonly kmsEncryptedPassword!: pulumi.Output<string | undefined>;
    public readonly kmsEncryptionContext!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly kubeletConfiguration!: pulumi.Output<outputs.CsKubernetesNodePoolKubeletConfiguration | undefined>;
    public readonly labels!: pulumi.Output<outputs.CsKubernetesNodePoolLabel[] | undefined>;
    public readonly loginAsNonRoot!: pulumi.Output<boolean | undefined>;
    public readonly management!: pulumi.Output<outputs.CsKubernetesNodePoolManagement | undefined>;
    public readonly multiAzPolicy!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly nodeCount!: pulumi.Output<number>;
    public readonly nodeNameMode!: pulumi.Output<string>;
    public /*out*/ readonly nodePoolId!: pulumi.Output<string>;
    public readonly nodePoolName!: pulumi.Output<string>;
    public readonly onDemandBaseCapacity!: pulumi.Output<number | undefined>;
    public readonly onDemandPercentageAboveBaseCapacity!: pulumi.Output<number | undefined>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly platform!: pulumi.Output<string>;
    public readonly privatePoolOptions!: pulumi.Output<outputs.CsKubernetesNodePoolPrivatePoolOptions | undefined>;
    public readonly rdsInstances!: pulumi.Output<string[] | undefined>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly rollingPolicy!: pulumi.Output<outputs.CsKubernetesNodePoolRollingPolicy | undefined>;
    public readonly rolloutPolicy!: pulumi.Output<outputs.CsKubernetesNodePoolRolloutPolicy | undefined>;
    public readonly runtimeName!: pulumi.Output<string>;
    public readonly runtimeVersion!: pulumi.Output<string>;
    public readonly scalingConfig!: pulumi.Output<outputs.CsKubernetesNodePoolScalingConfig | undefined>;
    public /*out*/ readonly scalingGroupId!: pulumi.Output<string>;
    public readonly scalingPolicy!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly securityGroupId!: pulumi.Output<string>;
    public readonly securityGroupIds!: pulumi.Output<string[]>;
    public readonly securityHardeningOs!: pulumi.Output<boolean | undefined>;
    public readonly socEnabled!: pulumi.Output<boolean | undefined>;
    public readonly spotInstancePools!: pulumi.Output<number | undefined>;
    public readonly spotInstanceRemedy!: pulumi.Output<boolean | undefined>;
    public readonly spotPriceLimits!: pulumi.Output<outputs.CsKubernetesNodePoolSpotPriceLimit[] | undefined>;
    public readonly spotStrategy!: pulumi.Output<string>;
    public readonly systemDiskBurstingEnabled!: pulumi.Output<boolean | undefined>;
    public readonly systemDiskCategories!: pulumi.Output<string[]>;
    public readonly systemDiskCategory!: pulumi.Output<string>;
    public readonly systemDiskEncryptAlgorithm!: pulumi.Output<string | undefined>;
    public readonly systemDiskEncrypted!: pulumi.Output<boolean | undefined>;
    public readonly systemDiskKmsKey!: pulumi.Output<string | undefined>;
    public readonly systemDiskPerformanceLevel!: pulumi.Output<string | undefined>;
    public readonly systemDiskProvisionedIops!: pulumi.Output<number | undefined>;
    public readonly systemDiskSize!: pulumi.Output<number | undefined>;
    public readonly systemDiskSnapshotPolicyId!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly taints!: pulumi.Output<outputs.CsKubernetesNodePoolTaint[] | undefined>;
    public readonly teeConfig!: pulumi.Output<outputs.CsKubernetesNodePoolTeeConfig | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.CsKubernetesNodePoolTimeouts | undefined>;
    public readonly unschedulable!: pulumi.Output<boolean | undefined>;
    public readonly updateNodes!: pulumi.Output<boolean | undefined>;
    public readonly userData!: pulumi.Output<string | undefined>;
    public /*out*/ readonly vpcId!: pulumi.Output<string>;
    public readonly vswitchIds!: pulumi.Output<string[]>;

    /**
     * Create a CsKubernetesNodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CsKubernetesNodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CsKubernetesNodePoolArgs | CsKubernetesNodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CsKubernetesNodePoolState | undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["autoRenewPeriod"] = state ? state.autoRenewPeriod : undefined;
            resourceInputs["cisEnabled"] = state ? state.cisEnabled : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["compensateWithOnDemand"] = state ? state.compensateWithOnDemand : undefined;
            resourceInputs["cpuPolicy"] = state ? state.cpuPolicy : undefined;
            resourceInputs["dataDisks"] = state ? state.dataDisks : undefined;
            resourceInputs["deploymentSetId"] = state ? state.deploymentSetId : undefined;
            resourceInputs["desiredSize"] = state ? state.desiredSize : undefined;
            resourceInputs["forceDelete"] = state ? state.forceDelete : undefined;
            resourceInputs["formatDisk"] = state ? state.formatDisk : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["imageType"] = state ? state.imageType : undefined;
            resourceInputs["installCloudMonitor"] = state ? state.installCloudMonitor : undefined;
            resourceInputs["instanceChargeType"] = state ? state.instanceChargeType : undefined;
            resourceInputs["instanceTypes"] = state ? state.instanceTypes : undefined;
            resourceInputs["instances"] = state ? state.instances : undefined;
            resourceInputs["internetChargeType"] = state ? state.internetChargeType : undefined;
            resourceInputs["internetMaxBandwidthOut"] = state ? state.internetMaxBandwidthOut : undefined;
            resourceInputs["keepInstanceName"] = state ? state.keepInstanceName : undefined;
            resourceInputs["keyName"] = state ? state.keyName : undefined;
            resourceInputs["kmsEncryptedPassword"] = state ? state.kmsEncryptedPassword : undefined;
            resourceInputs["kmsEncryptionContext"] = state ? state.kmsEncryptionContext : undefined;
            resourceInputs["kubeletConfiguration"] = state ? state.kubeletConfiguration : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["loginAsNonRoot"] = state ? state.loginAsNonRoot : undefined;
            resourceInputs["management"] = state ? state.management : undefined;
            resourceInputs["multiAzPolicy"] = state ? state.multiAzPolicy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeCount"] = state ? state.nodeCount : undefined;
            resourceInputs["nodeNameMode"] = state ? state.nodeNameMode : undefined;
            resourceInputs["nodePoolId"] = state ? state.nodePoolId : undefined;
            resourceInputs["nodePoolName"] = state ? state.nodePoolName : undefined;
            resourceInputs["onDemandBaseCapacity"] = state ? state.onDemandBaseCapacity : undefined;
            resourceInputs["onDemandPercentageAboveBaseCapacity"] = state ? state.onDemandPercentageAboveBaseCapacity : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["privatePoolOptions"] = state ? state.privatePoolOptions : undefined;
            resourceInputs["rdsInstances"] = state ? state.rdsInstances : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["rollingPolicy"] = state ? state.rollingPolicy : undefined;
            resourceInputs["rolloutPolicy"] = state ? state.rolloutPolicy : undefined;
            resourceInputs["runtimeName"] = state ? state.runtimeName : undefined;
            resourceInputs["runtimeVersion"] = state ? state.runtimeVersion : undefined;
            resourceInputs["scalingConfig"] = state ? state.scalingConfig : undefined;
            resourceInputs["scalingGroupId"] = state ? state.scalingGroupId : undefined;
            resourceInputs["scalingPolicy"] = state ? state.scalingPolicy : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["securityHardeningOs"] = state ? state.securityHardeningOs : undefined;
            resourceInputs["socEnabled"] = state ? state.socEnabled : undefined;
            resourceInputs["spotInstancePools"] = state ? state.spotInstancePools : undefined;
            resourceInputs["spotInstanceRemedy"] = state ? state.spotInstanceRemedy : undefined;
            resourceInputs["spotPriceLimits"] = state ? state.spotPriceLimits : undefined;
            resourceInputs["spotStrategy"] = state ? state.spotStrategy : undefined;
            resourceInputs["systemDiskBurstingEnabled"] = state ? state.systemDiskBurstingEnabled : undefined;
            resourceInputs["systemDiskCategories"] = state ? state.systemDiskCategories : undefined;
            resourceInputs["systemDiskCategory"] = state ? state.systemDiskCategory : undefined;
            resourceInputs["systemDiskEncryptAlgorithm"] = state ? state.systemDiskEncryptAlgorithm : undefined;
            resourceInputs["systemDiskEncrypted"] = state ? state.systemDiskEncrypted : undefined;
            resourceInputs["systemDiskKmsKey"] = state ? state.systemDiskKmsKey : undefined;
            resourceInputs["systemDiskPerformanceLevel"] = state ? state.systemDiskPerformanceLevel : undefined;
            resourceInputs["systemDiskProvisionedIops"] = state ? state.systemDiskProvisionedIops : undefined;
            resourceInputs["systemDiskSize"] = state ? state.systemDiskSize : undefined;
            resourceInputs["systemDiskSnapshotPolicyId"] = state ? state.systemDiskSnapshotPolicyId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["taints"] = state ? state.taints : undefined;
            resourceInputs["teeConfig"] = state ? state.teeConfig : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["unschedulable"] = state ? state.unschedulable : undefined;
            resourceInputs["updateNodes"] = state ? state.updateNodes : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchIds"] = state ? state.vswitchIds : undefined;
        } else {
            const args = argsOrState as CsKubernetesNodePoolArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.instanceTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceTypes'");
            }
            if ((!args || args.vswitchIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vswitchIds'");
            }
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["autoRenewPeriod"] = args ? args.autoRenewPeriod : undefined;
            resourceInputs["cisEnabled"] = args ? args.cisEnabled : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["compensateWithOnDemand"] = args ? args.compensateWithOnDemand : undefined;
            resourceInputs["cpuPolicy"] = args ? args.cpuPolicy : undefined;
            resourceInputs["dataDisks"] = args ? args.dataDisks : undefined;
            resourceInputs["deploymentSetId"] = args ? args.deploymentSetId : undefined;
            resourceInputs["desiredSize"] = args ? args.desiredSize : undefined;
            resourceInputs["forceDelete"] = args ? args.forceDelete : undefined;
            resourceInputs["formatDisk"] = args ? args.formatDisk : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["imageType"] = args ? args.imageType : undefined;
            resourceInputs["installCloudMonitor"] = args ? args.installCloudMonitor : undefined;
            resourceInputs["instanceChargeType"] = args ? args.instanceChargeType : undefined;
            resourceInputs["instanceTypes"] = args ? args.instanceTypes : undefined;
            resourceInputs["instances"] = args ? args.instances : undefined;
            resourceInputs["internetChargeType"] = args ? args.internetChargeType : undefined;
            resourceInputs["internetMaxBandwidthOut"] = args ? args.internetMaxBandwidthOut : undefined;
            resourceInputs["keepInstanceName"] = args ? args.keepInstanceName : undefined;
            resourceInputs["keyName"] = args ? args.keyName : undefined;
            resourceInputs["kmsEncryptedPassword"] = args?.kmsEncryptedPassword ? pulumi.secret(args.kmsEncryptedPassword) : undefined;
            resourceInputs["kmsEncryptionContext"] = args ? args.kmsEncryptionContext : undefined;
            resourceInputs["kubeletConfiguration"] = args ? args.kubeletConfiguration : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["loginAsNonRoot"] = args ? args.loginAsNonRoot : undefined;
            resourceInputs["management"] = args ? args.management : undefined;
            resourceInputs["multiAzPolicy"] = args ? args.multiAzPolicy : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeCount"] = args ? args.nodeCount : undefined;
            resourceInputs["nodeNameMode"] = args ? args.nodeNameMode : undefined;
            resourceInputs["nodePoolName"] = args ? args.nodePoolName : undefined;
            resourceInputs["onDemandBaseCapacity"] = args ? args.onDemandBaseCapacity : undefined;
            resourceInputs["onDemandPercentageAboveBaseCapacity"] = args ? args.onDemandPercentageAboveBaseCapacity : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["platform"] = args ? args.platform : undefined;
            resourceInputs["privatePoolOptions"] = args ? args.privatePoolOptions : undefined;
            resourceInputs["rdsInstances"] = args ? args.rdsInstances : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["rollingPolicy"] = args ? args.rollingPolicy : undefined;
            resourceInputs["rolloutPolicy"] = args ? args.rolloutPolicy : undefined;
            resourceInputs["runtimeName"] = args ? args.runtimeName : undefined;
            resourceInputs["runtimeVersion"] = args ? args.runtimeVersion : undefined;
            resourceInputs["scalingConfig"] = args ? args.scalingConfig : undefined;
            resourceInputs["scalingPolicy"] = args ? args.scalingPolicy : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["securityHardeningOs"] = args ? args.securityHardeningOs : undefined;
            resourceInputs["socEnabled"] = args ? args.socEnabled : undefined;
            resourceInputs["spotInstancePools"] = args ? args.spotInstancePools : undefined;
            resourceInputs["spotInstanceRemedy"] = args ? args.spotInstanceRemedy : undefined;
            resourceInputs["spotPriceLimits"] = args ? args.spotPriceLimits : undefined;
            resourceInputs["spotStrategy"] = args ? args.spotStrategy : undefined;
            resourceInputs["systemDiskBurstingEnabled"] = args ? args.systemDiskBurstingEnabled : undefined;
            resourceInputs["systemDiskCategories"] = args ? args.systemDiskCategories : undefined;
            resourceInputs["systemDiskCategory"] = args ? args.systemDiskCategory : undefined;
            resourceInputs["systemDiskEncryptAlgorithm"] = args ? args.systemDiskEncryptAlgorithm : undefined;
            resourceInputs["systemDiskEncrypted"] = args ? args.systemDiskEncrypted : undefined;
            resourceInputs["systemDiskKmsKey"] = args ? args.systemDiskKmsKey : undefined;
            resourceInputs["systemDiskPerformanceLevel"] = args ? args.systemDiskPerformanceLevel : undefined;
            resourceInputs["systemDiskProvisionedIops"] = args ? args.systemDiskProvisionedIops : undefined;
            resourceInputs["systemDiskSize"] = args ? args.systemDiskSize : undefined;
            resourceInputs["systemDiskSnapshotPolicyId"] = args ? args.systemDiskSnapshotPolicyId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["taints"] = args ? args.taints : undefined;
            resourceInputs["teeConfig"] = args ? args.teeConfig : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["unschedulable"] = args ? args.unschedulable : undefined;
            resourceInputs["updateNodes"] = args ? args.updateNodes : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["vswitchIds"] = args ? args.vswitchIds : undefined;
            resourceInputs["nodePoolId"] = undefined /*out*/;
            resourceInputs["scalingGroupId"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["kmsEncryptedPassword", "password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CsKubernetesNodePool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CsKubernetesNodePool resources.
 */
export interface CsKubernetesNodePoolState {
    autoRenew?: pulumi.Input<boolean>;
    autoRenewPeriod?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    cisEnabled?: pulumi.Input<boolean>;
    clusterId?: pulumi.Input<string>;
    compensateWithOnDemand?: pulumi.Input<boolean>;
    cpuPolicy?: pulumi.Input<string>;
    dataDisks?: pulumi.Input<pulumi.Input<inputs.CsKubernetesNodePoolDataDisk>[]>;
    deploymentSetId?: pulumi.Input<string>;
    desiredSize?: pulumi.Input<number>;
    forceDelete?: pulumi.Input<boolean>;
    formatDisk?: pulumi.Input<boolean>;
    imageId?: pulumi.Input<string>;
    imageType?: pulumi.Input<string>;
    installCloudMonitor?: pulumi.Input<boolean>;
    instanceChargeType?: pulumi.Input<string>;
    instanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    instances?: pulumi.Input<pulumi.Input<string>[]>;
    internetChargeType?: pulumi.Input<string>;
    internetMaxBandwidthOut?: pulumi.Input<number>;
    keepInstanceName?: pulumi.Input<boolean>;
    keyName?: pulumi.Input<string>;
    kmsEncryptedPassword?: pulumi.Input<string>;
    kmsEncryptionContext?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    kubeletConfiguration?: pulumi.Input<inputs.CsKubernetesNodePoolKubeletConfiguration>;
    labels?: pulumi.Input<pulumi.Input<inputs.CsKubernetesNodePoolLabel>[]>;
    loginAsNonRoot?: pulumi.Input<boolean>;
    management?: pulumi.Input<inputs.CsKubernetesNodePoolManagement>;
    multiAzPolicy?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    name?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    nodeCount?: pulumi.Input<number>;
    nodeNameMode?: pulumi.Input<string>;
    nodePoolId?: pulumi.Input<string>;
    nodePoolName?: pulumi.Input<string>;
    onDemandBaseCapacity?: pulumi.Input<number>;
    onDemandPercentageAboveBaseCapacity?: pulumi.Input<number>;
    password?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    platform?: pulumi.Input<string>;
    privatePoolOptions?: pulumi.Input<inputs.CsKubernetesNodePoolPrivatePoolOptions>;
    rdsInstances?: pulumi.Input<pulumi.Input<string>[]>;
    resourceGroupId?: pulumi.Input<string>;
    rollingPolicy?: pulumi.Input<inputs.CsKubernetesNodePoolRollingPolicy>;
    rolloutPolicy?: pulumi.Input<inputs.CsKubernetesNodePoolRolloutPolicy>;
    runtimeName?: pulumi.Input<string>;
    runtimeVersion?: pulumi.Input<string>;
    scalingConfig?: pulumi.Input<inputs.CsKubernetesNodePoolScalingConfig>;
    scalingGroupId?: pulumi.Input<string>;
    scalingPolicy?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    securityGroupId?: pulumi.Input<string>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    securityHardeningOs?: pulumi.Input<boolean>;
    socEnabled?: pulumi.Input<boolean>;
    spotInstancePools?: pulumi.Input<number>;
    spotInstanceRemedy?: pulumi.Input<boolean>;
    spotPriceLimits?: pulumi.Input<pulumi.Input<inputs.CsKubernetesNodePoolSpotPriceLimit>[]>;
    spotStrategy?: pulumi.Input<string>;
    systemDiskBurstingEnabled?: pulumi.Input<boolean>;
    systemDiskCategories?: pulumi.Input<pulumi.Input<string>[]>;
    systemDiskCategory?: pulumi.Input<string>;
    systemDiskEncryptAlgorithm?: pulumi.Input<string>;
    systemDiskEncrypted?: pulumi.Input<boolean>;
    systemDiskKmsKey?: pulumi.Input<string>;
    systemDiskPerformanceLevel?: pulumi.Input<string>;
    systemDiskProvisionedIops?: pulumi.Input<number>;
    systemDiskSize?: pulumi.Input<number>;
    systemDiskSnapshotPolicyId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taints?: pulumi.Input<pulumi.Input<inputs.CsKubernetesNodePoolTaint>[]>;
    teeConfig?: pulumi.Input<inputs.CsKubernetesNodePoolTeeConfig>;
    timeouts?: pulumi.Input<inputs.CsKubernetesNodePoolTimeouts>;
    unschedulable?: pulumi.Input<boolean>;
    updateNodes?: pulumi.Input<boolean>;
    userData?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
    vswitchIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a CsKubernetesNodePool resource.
 */
export interface CsKubernetesNodePoolArgs {
    autoRenew?: pulumi.Input<boolean>;
    autoRenewPeriod?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    cisEnabled?: pulumi.Input<boolean>;
    clusterId: pulumi.Input<string>;
    compensateWithOnDemand?: pulumi.Input<boolean>;
    cpuPolicy?: pulumi.Input<string>;
    dataDisks?: pulumi.Input<pulumi.Input<inputs.CsKubernetesNodePoolDataDisk>[]>;
    deploymentSetId?: pulumi.Input<string>;
    desiredSize?: pulumi.Input<number>;
    forceDelete?: pulumi.Input<boolean>;
    formatDisk?: pulumi.Input<boolean>;
    imageId?: pulumi.Input<string>;
    imageType?: pulumi.Input<string>;
    installCloudMonitor?: pulumi.Input<boolean>;
    instanceChargeType?: pulumi.Input<string>;
    instanceTypes: pulumi.Input<pulumi.Input<string>[]>;
    instances?: pulumi.Input<pulumi.Input<string>[]>;
    internetChargeType?: pulumi.Input<string>;
    internetMaxBandwidthOut?: pulumi.Input<number>;
    keepInstanceName?: pulumi.Input<boolean>;
    keyName?: pulumi.Input<string>;
    kmsEncryptedPassword?: pulumi.Input<string>;
    kmsEncryptionContext?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    kubeletConfiguration?: pulumi.Input<inputs.CsKubernetesNodePoolKubeletConfiguration>;
    labels?: pulumi.Input<pulumi.Input<inputs.CsKubernetesNodePoolLabel>[]>;
    loginAsNonRoot?: pulumi.Input<boolean>;
    management?: pulumi.Input<inputs.CsKubernetesNodePoolManagement>;
    multiAzPolicy?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    name?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    nodeCount?: pulumi.Input<number>;
    nodeNameMode?: pulumi.Input<string>;
    nodePoolName?: pulumi.Input<string>;
    onDemandBaseCapacity?: pulumi.Input<number>;
    onDemandPercentageAboveBaseCapacity?: pulumi.Input<number>;
    password?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    platform?: pulumi.Input<string>;
    privatePoolOptions?: pulumi.Input<inputs.CsKubernetesNodePoolPrivatePoolOptions>;
    rdsInstances?: pulumi.Input<pulumi.Input<string>[]>;
    resourceGroupId?: pulumi.Input<string>;
    rollingPolicy?: pulumi.Input<inputs.CsKubernetesNodePoolRollingPolicy>;
    rolloutPolicy?: pulumi.Input<inputs.CsKubernetesNodePoolRolloutPolicy>;
    runtimeName?: pulumi.Input<string>;
    runtimeVersion?: pulumi.Input<string>;
    scalingConfig?: pulumi.Input<inputs.CsKubernetesNodePoolScalingConfig>;
    scalingPolicy?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    securityGroupId?: pulumi.Input<string>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    securityHardeningOs?: pulumi.Input<boolean>;
    socEnabled?: pulumi.Input<boolean>;
    spotInstancePools?: pulumi.Input<number>;
    spotInstanceRemedy?: pulumi.Input<boolean>;
    spotPriceLimits?: pulumi.Input<pulumi.Input<inputs.CsKubernetesNodePoolSpotPriceLimit>[]>;
    spotStrategy?: pulumi.Input<string>;
    systemDiskBurstingEnabled?: pulumi.Input<boolean>;
    systemDiskCategories?: pulumi.Input<pulumi.Input<string>[]>;
    systemDiskCategory?: pulumi.Input<string>;
    systemDiskEncryptAlgorithm?: pulumi.Input<string>;
    systemDiskEncrypted?: pulumi.Input<boolean>;
    systemDiskKmsKey?: pulumi.Input<string>;
    systemDiskPerformanceLevel?: pulumi.Input<string>;
    systemDiskProvisionedIops?: pulumi.Input<number>;
    systemDiskSize?: pulumi.Input<number>;
    systemDiskSnapshotPolicyId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taints?: pulumi.Input<pulumi.Input<inputs.CsKubernetesNodePoolTaint>[]>;
    teeConfig?: pulumi.Input<inputs.CsKubernetesNodePoolTeeConfig>;
    timeouts?: pulumi.Input<inputs.CsKubernetesNodePoolTimeouts>;
    unschedulable?: pulumi.Input<boolean>;
    updateNodes?: pulumi.Input<boolean>;
    userData?: pulumi.Input<string>;
    vswitchIds: pulumi.Input<pulumi.Input<string>[]>;
}
