// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GaForwardingRule extends pulumi.CustomResource {
    /**
     * Get an existing GaForwardingRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GaForwardingRuleState, opts?: pulumi.CustomResourceOptions): GaForwardingRule {
        return new GaForwardingRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/gaForwardingRule:GaForwardingRule';

    /**
     * Returns true if the given object is an instance of GaForwardingRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GaForwardingRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GaForwardingRule.__pulumiType;
    }

    public readonly acceleratorId!: pulumi.Output<string>;
    public /*out*/ readonly forwardingRuleId!: pulumi.Output<string>;
    public readonly forwardingRuleName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly forwardingRuleStatus!: pulumi.Output<string>;
    public readonly listenerId!: pulumi.Output<string>;
    public readonly priority!: pulumi.Output<number>;
    public readonly ruleActions!: pulumi.Output<outputs.GaForwardingRuleRuleAction[]>;
    public readonly ruleConditions!: pulumi.Output<outputs.GaForwardingRuleRuleCondition[]>;
    public readonly timeouts!: pulumi.Output<outputs.GaForwardingRuleTimeouts | undefined>;

    /**
     * Create a GaForwardingRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GaForwardingRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GaForwardingRuleArgs | GaForwardingRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GaForwardingRuleState | undefined;
            resourceInputs["acceleratorId"] = state ? state.acceleratorId : undefined;
            resourceInputs["forwardingRuleId"] = state ? state.forwardingRuleId : undefined;
            resourceInputs["forwardingRuleName"] = state ? state.forwardingRuleName : undefined;
            resourceInputs["forwardingRuleStatus"] = state ? state.forwardingRuleStatus : undefined;
            resourceInputs["listenerId"] = state ? state.listenerId : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["ruleActions"] = state ? state.ruleActions : undefined;
            resourceInputs["ruleConditions"] = state ? state.ruleConditions : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as GaForwardingRuleArgs | undefined;
            if ((!args || args.acceleratorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'acceleratorId'");
            }
            if ((!args || args.listenerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenerId'");
            }
            if ((!args || args.ruleActions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleActions'");
            }
            if ((!args || args.ruleConditions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleConditions'");
            }
            resourceInputs["acceleratorId"] = args ? args.acceleratorId : undefined;
            resourceInputs["forwardingRuleName"] = args ? args.forwardingRuleName : undefined;
            resourceInputs["listenerId"] = args ? args.listenerId : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["ruleActions"] = args ? args.ruleActions : undefined;
            resourceInputs["ruleConditions"] = args ? args.ruleConditions : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["forwardingRuleId"] = undefined /*out*/;
            resourceInputs["forwardingRuleStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GaForwardingRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GaForwardingRule resources.
 */
export interface GaForwardingRuleState {
    acceleratorId?: pulumi.Input<string>;
    forwardingRuleId?: pulumi.Input<string>;
    forwardingRuleName?: pulumi.Input<string>;
    forwardingRuleStatus?: pulumi.Input<string>;
    listenerId?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    ruleActions?: pulumi.Input<pulumi.Input<inputs.GaForwardingRuleRuleAction>[]>;
    ruleConditions?: pulumi.Input<pulumi.Input<inputs.GaForwardingRuleRuleCondition>[]>;
    timeouts?: pulumi.Input<inputs.GaForwardingRuleTimeouts>;
}

/**
 * The set of arguments for constructing a GaForwardingRule resource.
 */
export interface GaForwardingRuleArgs {
    acceleratorId: pulumi.Input<string>;
    forwardingRuleName?: pulumi.Input<string>;
    listenerId: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    ruleActions: pulumi.Input<pulumi.Input<inputs.GaForwardingRuleRuleAction>[]>;
    ruleConditions: pulumi.Input<pulumi.Input<inputs.GaForwardingRuleRuleCondition>[]>;
    timeouts?: pulumi.Input<inputs.GaForwardingRuleTimeouts>;
}
