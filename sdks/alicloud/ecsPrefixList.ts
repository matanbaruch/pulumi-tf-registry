// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EcsPrefixList extends pulumi.CustomResource {
    /**
     * Get an existing EcsPrefixList resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcsPrefixListState, opts?: pulumi.CustomResourceOptions): EcsPrefixList {
        return new EcsPrefixList(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/ecsPrefixList:EcsPrefixList';

    /**
     * Returns true if the given object is an instance of EcsPrefixList.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcsPrefixList {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcsPrefixList.__pulumiType;
    }

    public readonly addressFamily!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly entries!: pulumi.Output<outputs.EcsPrefixListEntry[]>;
    public readonly maxEntries!: pulumi.Output<number>;
    public readonly prefixListName!: pulumi.Output<string>;

    /**
     * Create a EcsPrefixList resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EcsPrefixListArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcsPrefixListArgs | EcsPrefixListState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcsPrefixListState | undefined;
            resourceInputs["addressFamily"] = state ? state.addressFamily : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["entries"] = state ? state.entries : undefined;
            resourceInputs["maxEntries"] = state ? state.maxEntries : undefined;
            resourceInputs["prefixListName"] = state ? state.prefixListName : undefined;
        } else {
            const args = argsOrState as EcsPrefixListArgs | undefined;
            if ((!args || args.addressFamily === undefined) && !opts.urn) {
                throw new Error("Missing required property 'addressFamily'");
            }
            if ((!args || args.entries === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entries'");
            }
            if ((!args || args.maxEntries === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxEntries'");
            }
            if ((!args || args.prefixListName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'prefixListName'");
            }
            resourceInputs["addressFamily"] = args ? args.addressFamily : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["entries"] = args ? args.entries : undefined;
            resourceInputs["maxEntries"] = args ? args.maxEntries : undefined;
            resourceInputs["prefixListName"] = args ? args.prefixListName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EcsPrefixList.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EcsPrefixList resources.
 */
export interface EcsPrefixListState {
    addressFamily?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    entries?: pulumi.Input<pulumi.Input<inputs.EcsPrefixListEntry>[]>;
    maxEntries?: pulumi.Input<number>;
    prefixListName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EcsPrefixList resource.
 */
export interface EcsPrefixListArgs {
    addressFamily: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    entries: pulumi.Input<pulumi.Input<inputs.EcsPrefixListEntry>[]>;
    maxEntries: pulumi.Input<number>;
    prefixListName: pulumi.Input<string>;
}
