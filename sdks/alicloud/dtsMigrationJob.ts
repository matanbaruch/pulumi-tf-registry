// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DtsMigrationJob extends pulumi.CustomResource {
    /**
     * Get an existing DtsMigrationJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DtsMigrationJobState, opts?: pulumi.CustomResourceOptions): DtsMigrationJob {
        return new DtsMigrationJob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/dtsMigrationJob:DtsMigrationJob';

    /**
     * Returns true if the given object is an instance of DtsMigrationJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DtsMigrationJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DtsMigrationJob.__pulumiType;
    }

    public readonly checkpoint!: pulumi.Output<string>;
    public readonly dataInitialization!: pulumi.Output<boolean>;
    public readonly dataSynchronization!: pulumi.Output<boolean>;
    public readonly dbList!: pulumi.Output<string>;
    public readonly destinationEndpointDatabaseName!: pulumi.Output<string | undefined>;
    public readonly destinationEndpointEngineName!: pulumi.Output<string>;
    public readonly destinationEndpointInstanceId!: pulumi.Output<string | undefined>;
    public readonly destinationEndpointInstanceType!: pulumi.Output<string>;
    public readonly destinationEndpointIp!: pulumi.Output<string | undefined>;
    public readonly destinationEndpointOracleSid!: pulumi.Output<string | undefined>;
    public readonly destinationEndpointPassword!: pulumi.Output<string | undefined>;
    public readonly destinationEndpointPort!: pulumi.Output<string | undefined>;
    public readonly destinationEndpointRegion!: pulumi.Output<string | undefined>;
    public readonly destinationEndpointUserName!: pulumi.Output<string | undefined>;
    public readonly dtsInstanceId!: pulumi.Output<string>;
    public readonly dtsJobName!: pulumi.Output<string>;
    public readonly instanceClass!: pulumi.Output<string>;
    public readonly sourceEndpointDatabaseName!: pulumi.Output<string | undefined>;
    public readonly sourceEndpointEngineName!: pulumi.Output<string>;
    public readonly sourceEndpointInstanceId!: pulumi.Output<string | undefined>;
    public readonly sourceEndpointInstanceType!: pulumi.Output<string>;
    public readonly sourceEndpointIp!: pulumi.Output<string | undefined>;
    public readonly sourceEndpointOracleSid!: pulumi.Output<string | undefined>;
    public readonly sourceEndpointOwnerId!: pulumi.Output<string | undefined>;
    public readonly sourceEndpointPassword!: pulumi.Output<string | undefined>;
    public readonly sourceEndpointPort!: pulumi.Output<string | undefined>;
    public readonly sourceEndpointRegion!: pulumi.Output<string | undefined>;
    public readonly sourceEndpointRole!: pulumi.Output<string | undefined>;
    public readonly sourceEndpointUserName!: pulumi.Output<string | undefined>;
    public readonly status!: pulumi.Output<string>;
    public readonly structureInitialization!: pulumi.Output<boolean>;
    public readonly timeouts!: pulumi.Output<outputs.DtsMigrationJobTimeouts | undefined>;

    /**
     * Create a DtsMigrationJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DtsMigrationJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DtsMigrationJobArgs | DtsMigrationJobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DtsMigrationJobState | undefined;
            resourceInputs["checkpoint"] = state ? state.checkpoint : undefined;
            resourceInputs["dataInitialization"] = state ? state.dataInitialization : undefined;
            resourceInputs["dataSynchronization"] = state ? state.dataSynchronization : undefined;
            resourceInputs["dbList"] = state ? state.dbList : undefined;
            resourceInputs["destinationEndpointDatabaseName"] = state ? state.destinationEndpointDatabaseName : undefined;
            resourceInputs["destinationEndpointEngineName"] = state ? state.destinationEndpointEngineName : undefined;
            resourceInputs["destinationEndpointInstanceId"] = state ? state.destinationEndpointInstanceId : undefined;
            resourceInputs["destinationEndpointInstanceType"] = state ? state.destinationEndpointInstanceType : undefined;
            resourceInputs["destinationEndpointIp"] = state ? state.destinationEndpointIp : undefined;
            resourceInputs["destinationEndpointOracleSid"] = state ? state.destinationEndpointOracleSid : undefined;
            resourceInputs["destinationEndpointPassword"] = state ? state.destinationEndpointPassword : undefined;
            resourceInputs["destinationEndpointPort"] = state ? state.destinationEndpointPort : undefined;
            resourceInputs["destinationEndpointRegion"] = state ? state.destinationEndpointRegion : undefined;
            resourceInputs["destinationEndpointUserName"] = state ? state.destinationEndpointUserName : undefined;
            resourceInputs["dtsInstanceId"] = state ? state.dtsInstanceId : undefined;
            resourceInputs["dtsJobName"] = state ? state.dtsJobName : undefined;
            resourceInputs["instanceClass"] = state ? state.instanceClass : undefined;
            resourceInputs["sourceEndpointDatabaseName"] = state ? state.sourceEndpointDatabaseName : undefined;
            resourceInputs["sourceEndpointEngineName"] = state ? state.sourceEndpointEngineName : undefined;
            resourceInputs["sourceEndpointInstanceId"] = state ? state.sourceEndpointInstanceId : undefined;
            resourceInputs["sourceEndpointInstanceType"] = state ? state.sourceEndpointInstanceType : undefined;
            resourceInputs["sourceEndpointIp"] = state ? state.sourceEndpointIp : undefined;
            resourceInputs["sourceEndpointOracleSid"] = state ? state.sourceEndpointOracleSid : undefined;
            resourceInputs["sourceEndpointOwnerId"] = state ? state.sourceEndpointOwnerId : undefined;
            resourceInputs["sourceEndpointPassword"] = state ? state.sourceEndpointPassword : undefined;
            resourceInputs["sourceEndpointPort"] = state ? state.sourceEndpointPort : undefined;
            resourceInputs["sourceEndpointRegion"] = state ? state.sourceEndpointRegion : undefined;
            resourceInputs["sourceEndpointRole"] = state ? state.sourceEndpointRole : undefined;
            resourceInputs["sourceEndpointUserName"] = state ? state.sourceEndpointUserName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["structureInitialization"] = state ? state.structureInitialization : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DtsMigrationJobArgs | undefined;
            if ((!args || args.dataInitialization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataInitialization'");
            }
            if ((!args || args.dataSynchronization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataSynchronization'");
            }
            if ((!args || args.dbList === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbList'");
            }
            if ((!args || args.destinationEndpointEngineName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationEndpointEngineName'");
            }
            if ((!args || args.destinationEndpointInstanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationEndpointInstanceType'");
            }
            if ((!args || args.dtsInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dtsInstanceId'");
            }
            if ((!args || args.sourceEndpointEngineName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceEndpointEngineName'");
            }
            if ((!args || args.sourceEndpointInstanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceEndpointInstanceType'");
            }
            if ((!args || args.structureInitialization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'structureInitialization'");
            }
            resourceInputs["checkpoint"] = args ? args.checkpoint : undefined;
            resourceInputs["dataInitialization"] = args ? args.dataInitialization : undefined;
            resourceInputs["dataSynchronization"] = args ? args.dataSynchronization : undefined;
            resourceInputs["dbList"] = args ? args.dbList : undefined;
            resourceInputs["destinationEndpointDatabaseName"] = args ? args.destinationEndpointDatabaseName : undefined;
            resourceInputs["destinationEndpointEngineName"] = args ? args.destinationEndpointEngineName : undefined;
            resourceInputs["destinationEndpointInstanceId"] = args ? args.destinationEndpointInstanceId : undefined;
            resourceInputs["destinationEndpointInstanceType"] = args ? args.destinationEndpointInstanceType : undefined;
            resourceInputs["destinationEndpointIp"] = args ? args.destinationEndpointIp : undefined;
            resourceInputs["destinationEndpointOracleSid"] = args ? args.destinationEndpointOracleSid : undefined;
            resourceInputs["destinationEndpointPassword"] = args ? args.destinationEndpointPassword : undefined;
            resourceInputs["destinationEndpointPort"] = args ? args.destinationEndpointPort : undefined;
            resourceInputs["destinationEndpointRegion"] = args ? args.destinationEndpointRegion : undefined;
            resourceInputs["destinationEndpointUserName"] = args ? args.destinationEndpointUserName : undefined;
            resourceInputs["dtsInstanceId"] = args ? args.dtsInstanceId : undefined;
            resourceInputs["dtsJobName"] = args ? args.dtsJobName : undefined;
            resourceInputs["instanceClass"] = args ? args.instanceClass : undefined;
            resourceInputs["sourceEndpointDatabaseName"] = args ? args.sourceEndpointDatabaseName : undefined;
            resourceInputs["sourceEndpointEngineName"] = args ? args.sourceEndpointEngineName : undefined;
            resourceInputs["sourceEndpointInstanceId"] = args ? args.sourceEndpointInstanceId : undefined;
            resourceInputs["sourceEndpointInstanceType"] = args ? args.sourceEndpointInstanceType : undefined;
            resourceInputs["sourceEndpointIp"] = args ? args.sourceEndpointIp : undefined;
            resourceInputs["sourceEndpointOracleSid"] = args ? args.sourceEndpointOracleSid : undefined;
            resourceInputs["sourceEndpointOwnerId"] = args ? args.sourceEndpointOwnerId : undefined;
            resourceInputs["sourceEndpointPassword"] = args ? args.sourceEndpointPassword : undefined;
            resourceInputs["sourceEndpointPort"] = args ? args.sourceEndpointPort : undefined;
            resourceInputs["sourceEndpointRegion"] = args ? args.sourceEndpointRegion : undefined;
            resourceInputs["sourceEndpointRole"] = args ? args.sourceEndpointRole : undefined;
            resourceInputs["sourceEndpointUserName"] = args ? args.sourceEndpointUserName : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["structureInitialization"] = args ? args.structureInitialization : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DtsMigrationJob.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DtsMigrationJob resources.
 */
export interface DtsMigrationJobState {
    checkpoint?: pulumi.Input<string>;
    dataInitialization?: pulumi.Input<boolean>;
    dataSynchronization?: pulumi.Input<boolean>;
    dbList?: pulumi.Input<string>;
    destinationEndpointDatabaseName?: pulumi.Input<string>;
    destinationEndpointEngineName?: pulumi.Input<string>;
    destinationEndpointInstanceId?: pulumi.Input<string>;
    destinationEndpointInstanceType?: pulumi.Input<string>;
    destinationEndpointIp?: pulumi.Input<string>;
    destinationEndpointOracleSid?: pulumi.Input<string>;
    destinationEndpointPassword?: pulumi.Input<string>;
    destinationEndpointPort?: pulumi.Input<string>;
    destinationEndpointRegion?: pulumi.Input<string>;
    destinationEndpointUserName?: pulumi.Input<string>;
    dtsInstanceId?: pulumi.Input<string>;
    dtsJobName?: pulumi.Input<string>;
    instanceClass?: pulumi.Input<string>;
    sourceEndpointDatabaseName?: pulumi.Input<string>;
    sourceEndpointEngineName?: pulumi.Input<string>;
    sourceEndpointInstanceId?: pulumi.Input<string>;
    sourceEndpointInstanceType?: pulumi.Input<string>;
    sourceEndpointIp?: pulumi.Input<string>;
    sourceEndpointOracleSid?: pulumi.Input<string>;
    sourceEndpointOwnerId?: pulumi.Input<string>;
    sourceEndpointPassword?: pulumi.Input<string>;
    sourceEndpointPort?: pulumi.Input<string>;
    sourceEndpointRegion?: pulumi.Input<string>;
    sourceEndpointRole?: pulumi.Input<string>;
    sourceEndpointUserName?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    structureInitialization?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.DtsMigrationJobTimeouts>;
}

/**
 * The set of arguments for constructing a DtsMigrationJob resource.
 */
export interface DtsMigrationJobArgs {
    checkpoint?: pulumi.Input<string>;
    dataInitialization: pulumi.Input<boolean>;
    dataSynchronization: pulumi.Input<boolean>;
    dbList: pulumi.Input<string>;
    destinationEndpointDatabaseName?: pulumi.Input<string>;
    destinationEndpointEngineName: pulumi.Input<string>;
    destinationEndpointInstanceId?: pulumi.Input<string>;
    destinationEndpointInstanceType: pulumi.Input<string>;
    destinationEndpointIp?: pulumi.Input<string>;
    destinationEndpointOracleSid?: pulumi.Input<string>;
    destinationEndpointPassword?: pulumi.Input<string>;
    destinationEndpointPort?: pulumi.Input<string>;
    destinationEndpointRegion?: pulumi.Input<string>;
    destinationEndpointUserName?: pulumi.Input<string>;
    dtsInstanceId: pulumi.Input<string>;
    dtsJobName?: pulumi.Input<string>;
    instanceClass?: pulumi.Input<string>;
    sourceEndpointDatabaseName?: pulumi.Input<string>;
    sourceEndpointEngineName: pulumi.Input<string>;
    sourceEndpointInstanceId?: pulumi.Input<string>;
    sourceEndpointInstanceType: pulumi.Input<string>;
    sourceEndpointIp?: pulumi.Input<string>;
    sourceEndpointOracleSid?: pulumi.Input<string>;
    sourceEndpointOwnerId?: pulumi.Input<string>;
    sourceEndpointPassword?: pulumi.Input<string>;
    sourceEndpointPort?: pulumi.Input<string>;
    sourceEndpointRegion?: pulumi.Input<string>;
    sourceEndpointRole?: pulumi.Input<string>;
    sourceEndpointUserName?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    structureInitialization: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.DtsMigrationJobTimeouts>;
}
