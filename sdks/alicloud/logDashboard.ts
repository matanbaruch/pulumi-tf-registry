// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LogDashboard extends pulumi.CustomResource {
    /**
     * Get an existing LogDashboard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogDashboardState, opts?: pulumi.CustomResourceOptions): LogDashboard {
        return new LogDashboard(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/logDashboard:LogDashboard';

    /**
     * Returns true if the given object is an instance of LogDashboard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogDashboard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogDashboard.__pulumiType;
    }

    public readonly attribute!: pulumi.Output<string>;
    public readonly charList!: pulumi.Output<string>;
    public readonly dashboardName!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string | undefined>;
    public readonly projectName!: pulumi.Output<string>;

    /**
     * Create a LogDashboard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogDashboardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogDashboardArgs | LogDashboardState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogDashboardState | undefined;
            resourceInputs["attribute"] = state ? state.attribute : undefined;
            resourceInputs["charList"] = state ? state.charList : undefined;
            resourceInputs["dashboardName"] = state ? state.dashboardName : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
        } else {
            const args = argsOrState as LogDashboardArgs | undefined;
            if ((!args || args.charList === undefined) && !opts.urn) {
                throw new Error("Missing required property 'charList'");
            }
            if ((!args || args.dashboardName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dashboardName'");
            }
            if ((!args || args.projectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectName'");
            }
            resourceInputs["attribute"] = args ? args.attribute : undefined;
            resourceInputs["charList"] = args ? args.charList : undefined;
            resourceInputs["dashboardName"] = args ? args.dashboardName : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogDashboard.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LogDashboard resources.
 */
export interface LogDashboardState {
    attribute?: pulumi.Input<string>;
    charList?: pulumi.Input<string>;
    dashboardName?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    projectName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogDashboard resource.
 */
export interface LogDashboardArgs {
    attribute?: pulumi.Input<string>;
    charList: pulumi.Input<string>;
    dashboardName: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    projectName: pulumi.Input<string>;
}
