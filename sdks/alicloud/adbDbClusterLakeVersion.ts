// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AdbDbClusterLakeVersion extends pulumi.CustomResource {
    /**
     * Get an existing AdbDbClusterLakeVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AdbDbClusterLakeVersionState, opts?: pulumi.CustomResourceOptions): AdbDbClusterLakeVersion {
        return new AdbDbClusterLakeVersion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/adbDbClusterLakeVersion:AdbDbClusterLakeVersion';

    /**
     * Returns true if the given object is an instance of AdbDbClusterLakeVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AdbDbClusterLakeVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AdbDbClusterLakeVersion.__pulumiType;
    }

    public readonly backupSetId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly commodityCode!: pulumi.Output<string>;
    public readonly computeResource!: pulumi.Output<string>;
    public /*out*/ readonly connectionString!: pulumi.Output<string>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly dbClusterDescription!: pulumi.Output<string>;
    public readonly dbClusterVersion!: pulumi.Output<string>;
    public readonly enableDefaultResourceGroup!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly engine!: pulumi.Output<string>;
    public /*out*/ readonly engineVersion!: pulumi.Output<string>;
    public /*out*/ readonly expireTime!: pulumi.Output<string>;
    public /*out*/ readonly expired!: pulumi.Output<string>;
    public /*out*/ readonly lockMode!: pulumi.Output<string>;
    public /*out*/ readonly lockReason!: pulumi.Output<string>;
    public readonly paymentType!: pulumi.Output<string>;
    public /*out*/ readonly port!: pulumi.Output<string>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly restoreToTime!: pulumi.Output<string | undefined>;
    public readonly restoreType!: pulumi.Output<string | undefined>;
    public readonly securityIps!: pulumi.Output<string>;
    public readonly sourceDbClusterId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly storageResource!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.AdbDbClusterLakeVersionTimeouts | undefined>;
    public readonly vpcId!: pulumi.Output<string>;
    public readonly vswitchId!: pulumi.Output<string>;
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a AdbDbClusterLakeVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AdbDbClusterLakeVersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AdbDbClusterLakeVersionArgs | AdbDbClusterLakeVersionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AdbDbClusterLakeVersionState | undefined;
            resourceInputs["backupSetId"] = state ? state.backupSetId : undefined;
            resourceInputs["commodityCode"] = state ? state.commodityCode : undefined;
            resourceInputs["computeResource"] = state ? state.computeResource : undefined;
            resourceInputs["connectionString"] = state ? state.connectionString : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["dbClusterDescription"] = state ? state.dbClusterDescription : undefined;
            resourceInputs["dbClusterVersion"] = state ? state.dbClusterVersion : undefined;
            resourceInputs["enableDefaultResourceGroup"] = state ? state.enableDefaultResourceGroup : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["expireTime"] = state ? state.expireTime : undefined;
            resourceInputs["expired"] = state ? state.expired : undefined;
            resourceInputs["lockMode"] = state ? state.lockMode : undefined;
            resourceInputs["lockReason"] = state ? state.lockReason : undefined;
            resourceInputs["paymentType"] = state ? state.paymentType : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["restoreToTime"] = state ? state.restoreToTime : undefined;
            resourceInputs["restoreType"] = state ? state.restoreType : undefined;
            resourceInputs["securityIps"] = state ? state.securityIps : undefined;
            resourceInputs["sourceDbClusterId"] = state ? state.sourceDbClusterId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storageResource"] = state ? state.storageResource : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as AdbDbClusterLakeVersionArgs | undefined;
            if ((!args || args.computeResource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'computeResource'");
            }
            if ((!args || args.dbClusterVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbClusterVersion'");
            }
            if ((!args || args.paymentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'paymentType'");
            }
            if ((!args || args.storageResource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageResource'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            if ((!args || args.vswitchId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vswitchId'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["backupSetId"] = args ? args.backupSetId : undefined;
            resourceInputs["computeResource"] = args ? args.computeResource : undefined;
            resourceInputs["dbClusterDescription"] = args ? args.dbClusterDescription : undefined;
            resourceInputs["dbClusterVersion"] = args ? args.dbClusterVersion : undefined;
            resourceInputs["enableDefaultResourceGroup"] = args ? args.enableDefaultResourceGroup : undefined;
            resourceInputs["paymentType"] = args ? args.paymentType : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["restoreToTime"] = args ? args.restoreToTime : undefined;
            resourceInputs["restoreType"] = args ? args.restoreType : undefined;
            resourceInputs["securityIps"] = args ? args.securityIps : undefined;
            resourceInputs["sourceDbClusterId"] = args ? args.sourceDbClusterId : undefined;
            resourceInputs["storageResource"] = args ? args.storageResource : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["commodityCode"] = undefined /*out*/;
            resourceInputs["connectionString"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["engine"] = undefined /*out*/;
            resourceInputs["engineVersion"] = undefined /*out*/;
            resourceInputs["expireTime"] = undefined /*out*/;
            resourceInputs["expired"] = undefined /*out*/;
            resourceInputs["lockMode"] = undefined /*out*/;
            resourceInputs["lockReason"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AdbDbClusterLakeVersion.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AdbDbClusterLakeVersion resources.
 */
export interface AdbDbClusterLakeVersionState {
    backupSetId?: pulumi.Input<string>;
    commodityCode?: pulumi.Input<string>;
    computeResource?: pulumi.Input<string>;
    connectionString?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    dbClusterDescription?: pulumi.Input<string>;
    dbClusterVersion?: pulumi.Input<string>;
    enableDefaultResourceGroup?: pulumi.Input<boolean>;
    engine?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    expireTime?: pulumi.Input<string>;
    expired?: pulumi.Input<string>;
    lockMode?: pulumi.Input<string>;
    lockReason?: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    restoreToTime?: pulumi.Input<string>;
    restoreType?: pulumi.Input<string>;
    securityIps?: pulumi.Input<string>;
    sourceDbClusterId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    storageResource?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.AdbDbClusterLakeVersionTimeouts>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AdbDbClusterLakeVersion resource.
 */
export interface AdbDbClusterLakeVersionArgs {
    backupSetId?: pulumi.Input<string>;
    computeResource: pulumi.Input<string>;
    dbClusterDescription?: pulumi.Input<string>;
    dbClusterVersion: pulumi.Input<string>;
    enableDefaultResourceGroup?: pulumi.Input<boolean>;
    paymentType: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    restoreToTime?: pulumi.Input<string>;
    restoreType?: pulumi.Input<string>;
    securityIps?: pulumi.Input<string>;
    sourceDbClusterId?: pulumi.Input<string>;
    storageResource: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.AdbDbClusterLakeVersionTimeouts>;
    vpcId: pulumi.Input<string>;
    vswitchId: pulumi.Input<string>;
    zoneId: pulumi.Input<string>;
}
