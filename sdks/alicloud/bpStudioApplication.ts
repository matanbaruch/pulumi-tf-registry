// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BpStudioApplication extends pulumi.CustomResource {
    /**
     * Get an existing BpStudioApplication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BpStudioApplicationState, opts?: pulumi.CustomResourceOptions): BpStudioApplication {
        return new BpStudioApplication(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/bpStudioApplication:BpStudioApplication';

    /**
     * Returns true if the given object is an instance of BpStudioApplication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BpStudioApplication {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BpStudioApplication.__pulumiType;
    }

    public readonly applicationName!: pulumi.Output<string>;
    public readonly areaId!: pulumi.Output<string | undefined>;
    public readonly configuration!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly instances!: pulumi.Output<outputs.BpStudioApplicationInstance[] | undefined>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly templateId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.BpStudioApplicationTimeouts | undefined>;
    public readonly variables!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a BpStudioApplication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BpStudioApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BpStudioApplicationArgs | BpStudioApplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BpStudioApplicationState | undefined;
            resourceInputs["applicationName"] = state ? state.applicationName : undefined;
            resourceInputs["areaId"] = state ? state.areaId : undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["instances"] = state ? state.instances : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["templateId"] = state ? state.templateId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["variables"] = state ? state.variables : undefined;
        } else {
            const args = argsOrState as BpStudioApplicationArgs | undefined;
            if ((!args || args.applicationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationName'");
            }
            if ((!args || args.templateId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateId'");
            }
            resourceInputs["applicationName"] = args ? args.applicationName : undefined;
            resourceInputs["areaId"] = args ? args.areaId : undefined;
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["instances"] = args ? args.instances : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["templateId"] = args ? args.templateId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["variables"] = args ? args.variables : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BpStudioApplication.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BpStudioApplication resources.
 */
export interface BpStudioApplicationState {
    applicationName?: pulumi.Input<string>;
    areaId?: pulumi.Input<string>;
    configuration?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    instances?: pulumi.Input<pulumi.Input<inputs.BpStudioApplicationInstance>[]>;
    resourceGroupId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    templateId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BpStudioApplicationTimeouts>;
    variables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a BpStudioApplication resource.
 */
export interface BpStudioApplicationArgs {
    applicationName: pulumi.Input<string>;
    areaId?: pulumi.Input<string>;
    configuration?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    instances?: pulumi.Input<pulumi.Input<inputs.BpStudioApplicationInstance>[]>;
    resourceGroupId?: pulumi.Input<string>;
    templateId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BpStudioApplicationTimeouts>;
    variables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
