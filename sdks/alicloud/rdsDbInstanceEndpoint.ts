// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RdsDbInstanceEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing RdsDbInstanceEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RdsDbInstanceEndpointState, opts?: pulumi.CustomResourceOptions): RdsDbInstanceEndpoint {
        return new RdsDbInstanceEndpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/rdsDbInstanceEndpoint:RdsDbInstanceEndpoint';

    /**
     * Returns true if the given object is an instance of RdsDbInstanceEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RdsDbInstanceEndpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RdsDbInstanceEndpoint.__pulumiType;
    }

    public /*out*/ readonly connectionString!: pulumi.Output<string>;
    public readonly connectionStringPrefix!: pulumi.Output<string>;
    public readonly dbInstanceEndpointDescription!: pulumi.Output<string>;
    public /*out*/ readonly dbInstanceEndpointId!: pulumi.Output<string>;
    public /*out*/ readonly dbInstanceEndpointType!: pulumi.Output<string>;
    public readonly dbInstanceId!: pulumi.Output<string>;
    public /*out*/ readonly ipType!: pulumi.Output<string>;
    public readonly nodeItems!: pulumi.Output<outputs.RdsDbInstanceEndpointNodeItem[]>;
    public readonly port!: pulumi.Output<string>;
    public /*out*/ readonly privateIpAddress!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.RdsDbInstanceEndpointTimeouts | undefined>;
    public readonly vpcId!: pulumi.Output<string>;
    public readonly vswitchId!: pulumi.Output<string>;

    /**
     * Create a RdsDbInstanceEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RdsDbInstanceEndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RdsDbInstanceEndpointArgs | RdsDbInstanceEndpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RdsDbInstanceEndpointState | undefined;
            resourceInputs["connectionString"] = state ? state.connectionString : undefined;
            resourceInputs["connectionStringPrefix"] = state ? state.connectionStringPrefix : undefined;
            resourceInputs["dbInstanceEndpointDescription"] = state ? state.dbInstanceEndpointDescription : undefined;
            resourceInputs["dbInstanceEndpointId"] = state ? state.dbInstanceEndpointId : undefined;
            resourceInputs["dbInstanceEndpointType"] = state ? state.dbInstanceEndpointType : undefined;
            resourceInputs["dbInstanceId"] = state ? state.dbInstanceId : undefined;
            resourceInputs["ipType"] = state ? state.ipType : undefined;
            resourceInputs["nodeItems"] = state ? state.nodeItems : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["privateIpAddress"] = state ? state.privateIpAddress : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
        } else {
            const args = argsOrState as RdsDbInstanceEndpointArgs | undefined;
            if ((!args || args.connectionStringPrefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionStringPrefix'");
            }
            if ((!args || args.dbInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbInstanceId'");
            }
            if ((!args || args.nodeItems === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeItems'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            if ((!args || args.vswitchId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vswitchId'");
            }
            resourceInputs["connectionStringPrefix"] = args ? args.connectionStringPrefix : undefined;
            resourceInputs["dbInstanceEndpointDescription"] = args ? args.dbInstanceEndpointDescription : undefined;
            resourceInputs["dbInstanceId"] = args ? args.dbInstanceId : undefined;
            resourceInputs["nodeItems"] = args ? args.nodeItems : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["connectionString"] = undefined /*out*/;
            resourceInputs["dbInstanceEndpointId"] = undefined /*out*/;
            resourceInputs["dbInstanceEndpointType"] = undefined /*out*/;
            resourceInputs["ipType"] = undefined /*out*/;
            resourceInputs["privateIpAddress"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RdsDbInstanceEndpoint.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RdsDbInstanceEndpoint resources.
 */
export interface RdsDbInstanceEndpointState {
    connectionString?: pulumi.Input<string>;
    connectionStringPrefix?: pulumi.Input<string>;
    dbInstanceEndpointDescription?: pulumi.Input<string>;
    dbInstanceEndpointId?: pulumi.Input<string>;
    dbInstanceEndpointType?: pulumi.Input<string>;
    dbInstanceId?: pulumi.Input<string>;
    ipType?: pulumi.Input<string>;
    nodeItems?: pulumi.Input<pulumi.Input<inputs.RdsDbInstanceEndpointNodeItem>[]>;
    port?: pulumi.Input<string>;
    privateIpAddress?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.RdsDbInstanceEndpointTimeouts>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RdsDbInstanceEndpoint resource.
 */
export interface RdsDbInstanceEndpointArgs {
    connectionStringPrefix: pulumi.Input<string>;
    dbInstanceEndpointDescription?: pulumi.Input<string>;
    dbInstanceId: pulumi.Input<string>;
    nodeItems: pulumi.Input<pulumi.Input<inputs.RdsDbInstanceEndpointNodeItem>[]>;
    port: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.RdsDbInstanceEndpointTimeouts>;
    vpcId: pulumi.Input<string>;
    vswitchId: pulumi.Input<string>;
}
