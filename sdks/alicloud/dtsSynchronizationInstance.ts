// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DtsSynchronizationInstance extends pulumi.CustomResource {
    /**
     * Get an existing DtsSynchronizationInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DtsSynchronizationInstanceState, opts?: pulumi.CustomResourceOptions): DtsSynchronizationInstance {
        return new DtsSynchronizationInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/dtsSynchronizationInstance:DtsSynchronizationInstance';

    /**
     * Returns true if the given object is an instance of DtsSynchronizationInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DtsSynchronizationInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DtsSynchronizationInstance.__pulumiType;
    }

    public readonly autoPay!: pulumi.Output<string | undefined>;
    public readonly autoStart!: pulumi.Output<string | undefined>;
    public readonly computeUnit!: pulumi.Output<number | undefined>;
    public readonly databaseCount!: pulumi.Output<number | undefined>;
    public readonly destinationEndpointEngineName!: pulumi.Output<string>;
    public readonly destinationEndpointRegion!: pulumi.Output<string>;
    public readonly instanceClass!: pulumi.Output<string>;
    public readonly paymentDuration!: pulumi.Output<number | undefined>;
    public readonly paymentDurationUnit!: pulumi.Output<string | undefined>;
    public readonly paymentType!: pulumi.Output<string>;
    public readonly quantity!: pulumi.Output<number | undefined>;
    public readonly sourceEndpointEngineName!: pulumi.Output<string>;
    public readonly sourceEndpointRegion!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly syncArchitecture!: pulumi.Output<string | undefined>;

    /**
     * Create a DtsSynchronizationInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DtsSynchronizationInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DtsSynchronizationInstanceArgs | DtsSynchronizationInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DtsSynchronizationInstanceState | undefined;
            resourceInputs["autoPay"] = state ? state.autoPay : undefined;
            resourceInputs["autoStart"] = state ? state.autoStart : undefined;
            resourceInputs["computeUnit"] = state ? state.computeUnit : undefined;
            resourceInputs["databaseCount"] = state ? state.databaseCount : undefined;
            resourceInputs["destinationEndpointEngineName"] = state ? state.destinationEndpointEngineName : undefined;
            resourceInputs["destinationEndpointRegion"] = state ? state.destinationEndpointRegion : undefined;
            resourceInputs["instanceClass"] = state ? state.instanceClass : undefined;
            resourceInputs["paymentDuration"] = state ? state.paymentDuration : undefined;
            resourceInputs["paymentDurationUnit"] = state ? state.paymentDurationUnit : undefined;
            resourceInputs["paymentType"] = state ? state.paymentType : undefined;
            resourceInputs["quantity"] = state ? state.quantity : undefined;
            resourceInputs["sourceEndpointEngineName"] = state ? state.sourceEndpointEngineName : undefined;
            resourceInputs["sourceEndpointRegion"] = state ? state.sourceEndpointRegion : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["syncArchitecture"] = state ? state.syncArchitecture : undefined;
        } else {
            const args = argsOrState as DtsSynchronizationInstanceArgs | undefined;
            if ((!args || args.destinationEndpointEngineName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationEndpointEngineName'");
            }
            if ((!args || args.destinationEndpointRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationEndpointRegion'");
            }
            if ((!args || args.paymentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'paymentType'");
            }
            if ((!args || args.sourceEndpointEngineName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceEndpointEngineName'");
            }
            if ((!args || args.sourceEndpointRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceEndpointRegion'");
            }
            resourceInputs["autoPay"] = args ? args.autoPay : undefined;
            resourceInputs["autoStart"] = args ? args.autoStart : undefined;
            resourceInputs["computeUnit"] = args ? args.computeUnit : undefined;
            resourceInputs["databaseCount"] = args ? args.databaseCount : undefined;
            resourceInputs["destinationEndpointEngineName"] = args ? args.destinationEndpointEngineName : undefined;
            resourceInputs["destinationEndpointRegion"] = args ? args.destinationEndpointRegion : undefined;
            resourceInputs["instanceClass"] = args ? args.instanceClass : undefined;
            resourceInputs["paymentDuration"] = args ? args.paymentDuration : undefined;
            resourceInputs["paymentDurationUnit"] = args ? args.paymentDurationUnit : undefined;
            resourceInputs["paymentType"] = args ? args.paymentType : undefined;
            resourceInputs["quantity"] = args ? args.quantity : undefined;
            resourceInputs["sourceEndpointEngineName"] = args ? args.sourceEndpointEngineName : undefined;
            resourceInputs["sourceEndpointRegion"] = args ? args.sourceEndpointRegion : undefined;
            resourceInputs["syncArchitecture"] = args ? args.syncArchitecture : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DtsSynchronizationInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DtsSynchronizationInstance resources.
 */
export interface DtsSynchronizationInstanceState {
    autoPay?: pulumi.Input<string>;
    autoStart?: pulumi.Input<string>;
    computeUnit?: pulumi.Input<number>;
    databaseCount?: pulumi.Input<number>;
    destinationEndpointEngineName?: pulumi.Input<string>;
    destinationEndpointRegion?: pulumi.Input<string>;
    instanceClass?: pulumi.Input<string>;
    paymentDuration?: pulumi.Input<number>;
    paymentDurationUnit?: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    quantity?: pulumi.Input<number>;
    sourceEndpointEngineName?: pulumi.Input<string>;
    sourceEndpointRegion?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    syncArchitecture?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DtsSynchronizationInstance resource.
 */
export interface DtsSynchronizationInstanceArgs {
    autoPay?: pulumi.Input<string>;
    autoStart?: pulumi.Input<string>;
    computeUnit?: pulumi.Input<number>;
    databaseCount?: pulumi.Input<number>;
    destinationEndpointEngineName: pulumi.Input<string>;
    destinationEndpointRegion: pulumi.Input<string>;
    instanceClass?: pulumi.Input<string>;
    paymentDuration?: pulumi.Input<number>;
    paymentDurationUnit?: pulumi.Input<string>;
    paymentType: pulumi.Input<string>;
    quantity?: pulumi.Input<number>;
    sourceEndpointEngineName: pulumi.Input<string>;
    sourceEndpointRegion: pulumi.Input<string>;
    syncArchitecture?: pulumi.Input<string>;
}
