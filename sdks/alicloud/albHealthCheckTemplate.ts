// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AlbHealthCheckTemplate extends pulumi.CustomResource {
    /**
     * Get an existing AlbHealthCheckTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlbHealthCheckTemplateState, opts?: pulumi.CustomResourceOptions): AlbHealthCheckTemplate {
        return new AlbHealthCheckTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/albHealthCheckTemplate:AlbHealthCheckTemplate';

    /**
     * Returns true if the given object is an instance of AlbHealthCheckTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlbHealthCheckTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlbHealthCheckTemplate.__pulumiType;
    }

    public readonly dryRun!: pulumi.Output<boolean | undefined>;
    public readonly healthCheckCodes!: pulumi.Output<string[]>;
    public readonly healthCheckConnectPort!: pulumi.Output<number>;
    public readonly healthCheckHost!: pulumi.Output<string>;
    public readonly healthCheckHttpVersion!: pulumi.Output<string>;
    public readonly healthCheckInterval!: pulumi.Output<number>;
    public readonly healthCheckMethod!: pulumi.Output<string>;
    public readonly healthCheckPath!: pulumi.Output<string>;
    public readonly healthCheckProtocol!: pulumi.Output<string>;
    public readonly healthCheckTemplateName!: pulumi.Output<string>;
    public readonly healthCheckTimeout!: pulumi.Output<number>;
    public readonly healthyThreshold!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.AlbHealthCheckTemplateTimeouts | undefined>;
    public readonly unhealthyThreshold!: pulumi.Output<number>;

    /**
     * Create a AlbHealthCheckTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlbHealthCheckTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlbHealthCheckTemplateArgs | AlbHealthCheckTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlbHealthCheckTemplateState | undefined;
            resourceInputs["dryRun"] = state ? state.dryRun : undefined;
            resourceInputs["healthCheckCodes"] = state ? state.healthCheckCodes : undefined;
            resourceInputs["healthCheckConnectPort"] = state ? state.healthCheckConnectPort : undefined;
            resourceInputs["healthCheckHost"] = state ? state.healthCheckHost : undefined;
            resourceInputs["healthCheckHttpVersion"] = state ? state.healthCheckHttpVersion : undefined;
            resourceInputs["healthCheckInterval"] = state ? state.healthCheckInterval : undefined;
            resourceInputs["healthCheckMethod"] = state ? state.healthCheckMethod : undefined;
            resourceInputs["healthCheckPath"] = state ? state.healthCheckPath : undefined;
            resourceInputs["healthCheckProtocol"] = state ? state.healthCheckProtocol : undefined;
            resourceInputs["healthCheckTemplateName"] = state ? state.healthCheckTemplateName : undefined;
            resourceInputs["healthCheckTimeout"] = state ? state.healthCheckTimeout : undefined;
            resourceInputs["healthyThreshold"] = state ? state.healthyThreshold : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["unhealthyThreshold"] = state ? state.unhealthyThreshold : undefined;
        } else {
            const args = argsOrState as AlbHealthCheckTemplateArgs | undefined;
            if ((!args || args.healthCheckTemplateName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'healthCheckTemplateName'");
            }
            resourceInputs["dryRun"] = args ? args.dryRun : undefined;
            resourceInputs["healthCheckCodes"] = args ? args.healthCheckCodes : undefined;
            resourceInputs["healthCheckConnectPort"] = args ? args.healthCheckConnectPort : undefined;
            resourceInputs["healthCheckHost"] = args ? args.healthCheckHost : undefined;
            resourceInputs["healthCheckHttpVersion"] = args ? args.healthCheckHttpVersion : undefined;
            resourceInputs["healthCheckInterval"] = args ? args.healthCheckInterval : undefined;
            resourceInputs["healthCheckMethod"] = args ? args.healthCheckMethod : undefined;
            resourceInputs["healthCheckPath"] = args ? args.healthCheckPath : undefined;
            resourceInputs["healthCheckProtocol"] = args ? args.healthCheckProtocol : undefined;
            resourceInputs["healthCheckTemplateName"] = args ? args.healthCheckTemplateName : undefined;
            resourceInputs["healthCheckTimeout"] = args ? args.healthCheckTimeout : undefined;
            resourceInputs["healthyThreshold"] = args ? args.healthyThreshold : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["unhealthyThreshold"] = args ? args.unhealthyThreshold : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlbHealthCheckTemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AlbHealthCheckTemplate resources.
 */
export interface AlbHealthCheckTemplateState {
    dryRun?: pulumi.Input<boolean>;
    healthCheckCodes?: pulumi.Input<pulumi.Input<string>[]>;
    healthCheckConnectPort?: pulumi.Input<number>;
    healthCheckHost?: pulumi.Input<string>;
    healthCheckHttpVersion?: pulumi.Input<string>;
    healthCheckInterval?: pulumi.Input<number>;
    healthCheckMethod?: pulumi.Input<string>;
    healthCheckPath?: pulumi.Input<string>;
    healthCheckProtocol?: pulumi.Input<string>;
    healthCheckTemplateName?: pulumi.Input<string>;
    healthCheckTimeout?: pulumi.Input<number>;
    healthyThreshold?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.AlbHealthCheckTemplateTimeouts>;
    unhealthyThreshold?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AlbHealthCheckTemplate resource.
 */
export interface AlbHealthCheckTemplateArgs {
    dryRun?: pulumi.Input<boolean>;
    healthCheckCodes?: pulumi.Input<pulumi.Input<string>[]>;
    healthCheckConnectPort?: pulumi.Input<number>;
    healthCheckHost?: pulumi.Input<string>;
    healthCheckHttpVersion?: pulumi.Input<string>;
    healthCheckInterval?: pulumi.Input<number>;
    healthCheckMethod?: pulumi.Input<string>;
    healthCheckPath?: pulumi.Input<string>;
    healthCheckProtocol?: pulumi.Input<string>;
    healthCheckTemplateName: pulumi.Input<string>;
    healthCheckTimeout?: pulumi.Input<number>;
    healthyThreshold?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.AlbHealthCheckTemplateTimeouts>;
    unhealthyThreshold?: pulumi.Input<number>;
}
