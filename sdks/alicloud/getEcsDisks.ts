// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEcsDisks(args?: GetEcsDisksArgs, opts?: pulumi.InvokeOptions): Promise<GetEcsDisksResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("alicloud:index/getEcsDisks:getEcsDisks", {
        "additionalAttributes": args.additionalAttributes,
        "autoSnapshotPolicyId": args.autoSnapshotPolicyId,
        "availabilityZone": args.availabilityZone,
        "category": args.category,
        "deleteAutoSnapshot": args.deleteAutoSnapshot,
        "deleteWithInstance": args.deleteWithInstance,
        "diskName": args.diskName,
        "diskType": args.diskType,
        "dryRun": args.dryRun,
        "enableAutoSnapshot": args.enableAutoSnapshot,
        "enableAutomatedSnapshotPolicy": args.enableAutomatedSnapshotPolicy,
        "enableShared": args.enableShared,
        "encrypted": args.encrypted,
        "id": args.id,
        "ids": args.ids,
        "instanceId": args.instanceId,
        "kmsKeyId": args.kmsKeyId,
        "nameRegex": args.nameRegex,
        "operationLocks": args.operationLocks,
        "outputFile": args.outputFile,
        "pageNumber": args.pageNumber,
        "pageSize": args.pageSize,
        "paymentType": args.paymentType,
        "portable": args.portable,
        "resourceGroupId": args.resourceGroupId,
        "snapshotId": args.snapshotId,
        "status": args.status,
        "tags": args.tags,
        "type": args.type,
        "zoneId": args.zoneId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEcsDisks.
 */
export interface GetEcsDisksArgs {
    additionalAttributes?: string[];
    autoSnapshotPolicyId?: string;
    /**
     * @deprecated Deprecated
     */
    availabilityZone?: string;
    category?: string;
    deleteAutoSnapshot?: boolean;
    deleteWithInstance?: boolean;
    diskName?: string;
    diskType?: string;
    dryRun?: boolean;
    enableAutoSnapshot?: boolean;
    enableAutomatedSnapshotPolicy?: boolean;
    enableShared?: boolean;
    encrypted?: string;
    id?: string;
    ids?: string[];
    instanceId?: string;
    kmsKeyId?: string;
    nameRegex?: string;
    operationLocks?: inputs.GetEcsDisksOperationLock[];
    outputFile?: string;
    pageNumber?: number;
    pageSize?: number;
    paymentType?: string;
    portable?: boolean;
    resourceGroupId?: string;
    snapshotId?: string;
    status?: string;
    tags?: {[key: string]: string};
    /**
     * @deprecated Deprecated
     */
    type?: string;
    zoneId?: string;
}

/**
 * A collection of values returned by getEcsDisks.
 */
export interface GetEcsDisksResult {
    readonly additionalAttributes?: string[];
    readonly autoSnapshotPolicyId?: string;
    /**
     * @deprecated Deprecated
     */
    readonly availabilityZone?: string;
    readonly category?: string;
    readonly deleteAutoSnapshot?: boolean;
    readonly deleteWithInstance?: boolean;
    readonly diskName?: string;
    readonly diskType?: string;
    readonly disks: outputs.GetEcsDisksDisk[];
    readonly dryRun?: boolean;
    readonly enableAutoSnapshot?: boolean;
    readonly enableAutomatedSnapshotPolicy?: boolean;
    readonly enableShared?: boolean;
    readonly encrypted?: string;
    readonly id: string;
    readonly ids: string[];
    readonly instanceId?: string;
    readonly kmsKeyId?: string;
    readonly nameRegex?: string;
    readonly names: string[];
    readonly operationLocks?: outputs.GetEcsDisksOperationLock[];
    readonly outputFile?: string;
    readonly pageNumber?: number;
    readonly pageSize?: number;
    readonly paymentType?: string;
    readonly portable?: boolean;
    readonly resourceGroupId?: string;
    readonly snapshotId?: string;
    readonly status?: string;
    readonly tags?: {[key: string]: string};
    readonly totalCount: number;
    /**
     * @deprecated Deprecated
     */
    readonly type?: string;
    readonly zoneId?: string;
}
export function getEcsDisksOutput(args?: GetEcsDisksOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEcsDisksResult> {
    return pulumi.output(args).apply((a: any) => getEcsDisks(a, opts))
}

/**
 * A collection of arguments for invoking getEcsDisks.
 */
export interface GetEcsDisksOutputArgs {
    additionalAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    autoSnapshotPolicyId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    availabilityZone?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    deleteAutoSnapshot?: pulumi.Input<boolean>;
    deleteWithInstance?: pulumi.Input<boolean>;
    diskName?: pulumi.Input<string>;
    diskType?: pulumi.Input<string>;
    dryRun?: pulumi.Input<boolean>;
    enableAutoSnapshot?: pulumi.Input<boolean>;
    enableAutomatedSnapshotPolicy?: pulumi.Input<boolean>;
    enableShared?: pulumi.Input<boolean>;
    encrypted?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    instanceId?: pulumi.Input<string>;
    kmsKeyId?: pulumi.Input<string>;
    nameRegex?: pulumi.Input<string>;
    operationLocks?: pulumi.Input<pulumi.Input<inputs.GetEcsDisksOperationLockArgs>[]>;
    outputFile?: pulumi.Input<string>;
    pageNumber?: pulumi.Input<number>;
    pageSize?: pulumi.Input<number>;
    paymentType?: pulumi.Input<string>;
    portable?: pulumi.Input<boolean>;
    resourceGroupId?: pulumi.Input<string>;
    snapshotId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated Deprecated
     */
    type?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}
