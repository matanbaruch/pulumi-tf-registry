// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Vpc extends pulumi.CustomResource {
    /**
     * Get an existing Vpc resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcState, opts?: pulumi.CustomResourceOptions): Vpc {
        return new Vpc(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/vpc:Vpc';

    /**
     * Returns true if the given object is an instance of Vpc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vpc {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vpc.__pulumiType;
    }

    public readonly cidrBlock!: pulumi.Output<string>;
    public readonly classicLinkEnabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dryRun!: pulumi.Output<boolean | undefined>;
    public readonly enableIpv6!: pulumi.Output<boolean | undefined>;
    public readonly ipv4IpamPoolId!: pulumi.Output<string | undefined>;
    public readonly ipv6CidrBlock!: pulumi.Output<string>;
    public /*out*/ readonly ipv6CidrBlocks!: pulumi.Output<outputs.VpcIpv6CidrBlock[]>;
    public readonly ipv6Isp!: pulumi.Output<string | undefined>;
    public readonly isDefault!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly name!: pulumi.Output<string>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public /*out*/ readonly routeTableId!: pulumi.Output<string>;
    public /*out*/ readonly routerId!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public /*out*/ readonly routerTableId!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly secondaryCidrBlocks!: pulumi.Output<string[]>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly systemRouteTableDescription!: pulumi.Output<string | undefined>;
    public readonly systemRouteTableName!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.VpcTimeouts | undefined>;
    public readonly userCidrs!: pulumi.Output<string[]>;
    public readonly vpcName!: pulumi.Output<string>;

    /**
     * Create a Vpc resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VpcArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcArgs | VpcState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcState | undefined;
            resourceInputs["cidrBlock"] = state ? state.cidrBlock : undefined;
            resourceInputs["classicLinkEnabled"] = state ? state.classicLinkEnabled : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dryRun"] = state ? state.dryRun : undefined;
            resourceInputs["enableIpv6"] = state ? state.enableIpv6 : undefined;
            resourceInputs["ipv4IpamPoolId"] = state ? state.ipv4IpamPoolId : undefined;
            resourceInputs["ipv6CidrBlock"] = state ? state.ipv6CidrBlock : undefined;
            resourceInputs["ipv6CidrBlocks"] = state ? state.ipv6CidrBlocks : undefined;
            resourceInputs["ipv6Isp"] = state ? state.ipv6Isp : undefined;
            resourceInputs["isDefault"] = state ? state.isDefault : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["routeTableId"] = state ? state.routeTableId : undefined;
            resourceInputs["routerId"] = state ? state.routerId : undefined;
            resourceInputs["routerTableId"] = state ? state.routerTableId : undefined;
            resourceInputs["secondaryCidrBlocks"] = state ? state.secondaryCidrBlocks : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["systemRouteTableDescription"] = state ? state.systemRouteTableDescription : undefined;
            resourceInputs["systemRouteTableName"] = state ? state.systemRouteTableName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userCidrs"] = state ? state.userCidrs : undefined;
            resourceInputs["vpcName"] = state ? state.vpcName : undefined;
        } else {
            const args = argsOrState as VpcArgs | undefined;
            resourceInputs["cidrBlock"] = args ? args.cidrBlock : undefined;
            resourceInputs["classicLinkEnabled"] = args ? args.classicLinkEnabled : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dryRun"] = args ? args.dryRun : undefined;
            resourceInputs["enableIpv6"] = args ? args.enableIpv6 : undefined;
            resourceInputs["ipv4IpamPoolId"] = args ? args.ipv4IpamPoolId : undefined;
            resourceInputs["ipv6CidrBlock"] = args ? args.ipv6CidrBlock : undefined;
            resourceInputs["ipv6Isp"] = args ? args.ipv6Isp : undefined;
            resourceInputs["isDefault"] = args ? args.isDefault : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["secondaryCidrBlocks"] = args ? args.secondaryCidrBlocks : undefined;
            resourceInputs["systemRouteTableDescription"] = args ? args.systemRouteTableDescription : undefined;
            resourceInputs["systemRouteTableName"] = args ? args.systemRouteTableName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userCidrs"] = args ? args.userCidrs : undefined;
            resourceInputs["vpcName"] = args ? args.vpcName : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["ipv6CidrBlocks"] = undefined /*out*/;
            resourceInputs["routeTableId"] = undefined /*out*/;
            resourceInputs["routerId"] = undefined /*out*/;
            resourceInputs["routerTableId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vpc.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Vpc resources.
 */
export interface VpcState {
    cidrBlock?: pulumi.Input<string>;
    classicLinkEnabled?: pulumi.Input<boolean>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dryRun?: pulumi.Input<boolean>;
    enableIpv6?: pulumi.Input<boolean>;
    ipv4IpamPoolId?: pulumi.Input<string>;
    ipv6CidrBlock?: pulumi.Input<string>;
    ipv6CidrBlocks?: pulumi.Input<pulumi.Input<inputs.VpcIpv6CidrBlock>[]>;
    ipv6Isp?: pulumi.Input<string>;
    isDefault?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    name?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    routeTableId?: pulumi.Input<string>;
    routerId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    routerTableId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    secondaryCidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    systemRouteTableDescription?: pulumi.Input<string>;
    systemRouteTableName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VpcTimeouts>;
    userCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    vpcName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vpc resource.
 */
export interface VpcArgs {
    cidrBlock?: pulumi.Input<string>;
    classicLinkEnabled?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    dryRun?: pulumi.Input<boolean>;
    enableIpv6?: pulumi.Input<boolean>;
    ipv4IpamPoolId?: pulumi.Input<string>;
    ipv6CidrBlock?: pulumi.Input<string>;
    ipv6Isp?: pulumi.Input<string>;
    isDefault?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    name?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    secondaryCidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    systemRouteTableDescription?: pulumi.Input<string>;
    systemRouteTableName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VpcTimeouts>;
    userCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    vpcName?: pulumi.Input<string>;
}
