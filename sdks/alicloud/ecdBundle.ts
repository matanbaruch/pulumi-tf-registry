// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EcdBundle extends pulumi.CustomResource {
    /**
     * Get an existing EcdBundle resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcdBundleState, opts?: pulumi.CustomResourceOptions): EcdBundle {
        return new EcdBundle(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/ecdBundle:EcdBundle';

    /**
     * Returns true if the given object is an instance of EcdBundle.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcdBundle {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcdBundle.__pulumiType;
    }

    public readonly bundleName!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly desktopType!: pulumi.Output<string>;
    public readonly imageId!: pulumi.Output<string>;
    public readonly language!: pulumi.Output<string | undefined>;
    public readonly rootDiskPerformanceLevel!: pulumi.Output<string>;
    public readonly rootDiskSizeGib!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.EcdBundleTimeouts | undefined>;
    public readonly userDiskPerformanceLevel!: pulumi.Output<string>;
    public readonly userDiskSizeGibs!: pulumi.Output<number[]>;

    /**
     * Create a EcdBundle resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EcdBundleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcdBundleArgs | EcdBundleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcdBundleState | undefined;
            resourceInputs["bundleName"] = state ? state.bundleName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["desktopType"] = state ? state.desktopType : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["language"] = state ? state.language : undefined;
            resourceInputs["rootDiskPerformanceLevel"] = state ? state.rootDiskPerformanceLevel : undefined;
            resourceInputs["rootDiskSizeGib"] = state ? state.rootDiskSizeGib : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userDiskPerformanceLevel"] = state ? state.userDiskPerformanceLevel : undefined;
            resourceInputs["userDiskSizeGibs"] = state ? state.userDiskSizeGibs : undefined;
        } else {
            const args = argsOrState as EcdBundleArgs | undefined;
            if ((!args || args.desktopType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'desktopType'");
            }
            if ((!args || args.imageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            if ((!args || args.rootDiskSizeGib === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rootDiskSizeGib'");
            }
            if ((!args || args.userDiskSizeGibs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userDiskSizeGibs'");
            }
            resourceInputs["bundleName"] = args ? args.bundleName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["desktopType"] = args ? args.desktopType : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["language"] = args ? args.language : undefined;
            resourceInputs["rootDiskPerformanceLevel"] = args ? args.rootDiskPerformanceLevel : undefined;
            resourceInputs["rootDiskSizeGib"] = args ? args.rootDiskSizeGib : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userDiskPerformanceLevel"] = args ? args.userDiskPerformanceLevel : undefined;
            resourceInputs["userDiskSizeGibs"] = args ? args.userDiskSizeGibs : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EcdBundle.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EcdBundle resources.
 */
export interface EcdBundleState {
    bundleName?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    desktopType?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    language?: pulumi.Input<string>;
    rootDiskPerformanceLevel?: pulumi.Input<string>;
    rootDiskSizeGib?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.EcdBundleTimeouts>;
    userDiskPerformanceLevel?: pulumi.Input<string>;
    userDiskSizeGibs?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * The set of arguments for constructing a EcdBundle resource.
 */
export interface EcdBundleArgs {
    bundleName?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    desktopType: pulumi.Input<string>;
    imageId: pulumi.Input<string>;
    language?: pulumi.Input<string>;
    rootDiskPerformanceLevel?: pulumi.Input<string>;
    rootDiskSizeGib: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.EcdBundleTimeouts>;
    userDiskPerformanceLevel?: pulumi.Input<string>;
    userDiskSizeGibs: pulumi.Input<pulumi.Input<number>[]>;
}
