// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getInstances(args?: GetInstancesArgs, opts?: pulumi.InvokeOptions): Promise<GetInstancesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("alicloud:index/getInstances:getInstances", {
        "availabilityZone": args.availabilityZone,
        "enableDetails": args.enableDetails,
        "id": args.id,
        "ids": args.ids,
        "imageId": args.imageId,
        "instanceName": args.instanceName,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "pageNumber": args.pageNumber,
        "pageSize": args.pageSize,
        "ramRoleName": args.ramRoleName,
        "resourceGroupId": args.resourceGroupId,
        "status": args.status,
        "tags": args.tags,
        "vpcId": args.vpcId,
        "vswitchId": args.vswitchId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getInstances.
 */
export interface GetInstancesArgs {
    availabilityZone?: string;
    enableDetails?: boolean;
    id?: string;
    ids?: string[];
    imageId?: string;
    instanceName?: string;
    nameRegex?: string;
    outputFile?: string;
    pageNumber?: number;
    pageSize?: number;
    ramRoleName?: string;
    resourceGroupId?: string;
    status?: string;
    tags?: {[key: string]: string};
    vpcId?: string;
    vswitchId?: string;
}

/**
 * A collection of values returned by getInstances.
 */
export interface GetInstancesResult {
    readonly availabilityZone?: string;
    readonly enableDetails?: boolean;
    readonly id: string;
    readonly ids: string[];
    readonly imageId?: string;
    readonly instanceName?: string;
    readonly instances: outputs.GetInstancesInstance[];
    readonly nameRegex?: string;
    readonly names: string[];
    readonly outputFile?: string;
    readonly pageNumber?: number;
    readonly pageSize?: number;
    readonly ramRoleName?: string;
    readonly resourceGroupId?: string;
    readonly status?: string;
    readonly tags?: {[key: string]: string};
    readonly totalCount: number;
    readonly vpcId?: string;
    readonly vswitchId?: string;
}
export function getInstancesOutput(args?: GetInstancesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetInstancesResult> {
    return pulumi.output(args).apply((a: any) => getInstances(a, opts))
}

/**
 * A collection of arguments for invoking getInstances.
 */
export interface GetInstancesOutputArgs {
    availabilityZone?: pulumi.Input<string>;
    enableDetails?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    imageId?: pulumi.Input<string>;
    instanceName?: pulumi.Input<string>;
    nameRegex?: pulumi.Input<string>;
    outputFile?: pulumi.Input<string>;
    pageNumber?: pulumi.Input<number>;
    pageSize?: pulumi.Input<number>;
    ramRoleName?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
}
