// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DnsInstance extends pulumi.CustomResource {
    /**
     * Get an existing DnsInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsInstanceState, opts?: pulumi.CustomResourceOptions): DnsInstance {
        return new DnsInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/dnsInstance:DnsInstance';

    /**
     * Returns true if the given object is an instance of DnsInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsInstance.__pulumiType;
    }

    public readonly dnsSecurity!: pulumi.Output<string>;
    public readonly domainNumbers!: pulumi.Output<string>;
    public readonly paymentType!: pulumi.Output<string | undefined>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly renewPeriod!: pulumi.Output<number | undefined>;
    public readonly renewalStatus!: pulumi.Output<string>;
    public readonly versionCode!: pulumi.Output<string>;
    public /*out*/ readonly versionName!: pulumi.Output<string>;

    /**
     * Create a DnsInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsInstanceArgs | DnsInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsInstanceState | undefined;
            resourceInputs["dnsSecurity"] = state ? state.dnsSecurity : undefined;
            resourceInputs["domainNumbers"] = state ? state.domainNumbers : undefined;
            resourceInputs["paymentType"] = state ? state.paymentType : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["renewPeriod"] = state ? state.renewPeriod : undefined;
            resourceInputs["renewalStatus"] = state ? state.renewalStatus : undefined;
            resourceInputs["versionCode"] = state ? state.versionCode : undefined;
            resourceInputs["versionName"] = state ? state.versionName : undefined;
        } else {
            const args = argsOrState as DnsInstanceArgs | undefined;
            if ((!args || args.dnsSecurity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnsSecurity'");
            }
            if ((!args || args.domainNumbers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainNumbers'");
            }
            if ((!args || args.versionCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'versionCode'");
            }
            resourceInputs["dnsSecurity"] = args ? args.dnsSecurity : undefined;
            resourceInputs["domainNumbers"] = args ? args.domainNumbers : undefined;
            resourceInputs["paymentType"] = args ? args.paymentType : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["renewPeriod"] = args ? args.renewPeriod : undefined;
            resourceInputs["renewalStatus"] = args ? args.renewalStatus : undefined;
            resourceInputs["versionCode"] = args ? args.versionCode : undefined;
            resourceInputs["versionName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DnsInstance resources.
 */
export interface DnsInstanceState {
    dnsSecurity?: pulumi.Input<string>;
    domainNumbers?: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    renewPeriod?: pulumi.Input<number>;
    renewalStatus?: pulumi.Input<string>;
    versionCode?: pulumi.Input<string>;
    versionName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnsInstance resource.
 */
export interface DnsInstanceArgs {
    dnsSecurity: pulumi.Input<string>;
    domainNumbers: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    renewPeriod?: pulumi.Input<number>;
    renewalStatus?: pulumi.Input<string>;
    versionCode: pulumi.Input<string>;
}
