// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CrChain extends pulumi.CustomResource {
    /**
     * Get an existing CrChain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CrChainState, opts?: pulumi.CustomResourceOptions): CrChain {
        return new CrChain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/crChain:CrChain';

    /**
     * Returns true if the given object is an instance of CrChain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CrChain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CrChain.__pulumiType;
    }

    public readonly chainConfigs!: pulumi.Output<outputs.CrChainChainConfig[] | undefined>;
    public /*out*/ readonly chainId!: pulumi.Output<string>;
    public readonly chainName!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly instanceId!: pulumi.Output<string>;
    public readonly repoName!: pulumi.Output<string | undefined>;
    public readonly repoNamespaceName!: pulumi.Output<string | undefined>;

    /**
     * Create a CrChain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CrChainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CrChainArgs | CrChainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CrChainState | undefined;
            resourceInputs["chainConfigs"] = state ? state.chainConfigs : undefined;
            resourceInputs["chainId"] = state ? state.chainId : undefined;
            resourceInputs["chainName"] = state ? state.chainName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["repoName"] = state ? state.repoName : undefined;
            resourceInputs["repoNamespaceName"] = state ? state.repoNamespaceName : undefined;
        } else {
            const args = argsOrState as CrChainArgs | undefined;
            if ((!args || args.chainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'chainName'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["chainConfigs"] = args ? args.chainConfigs : undefined;
            resourceInputs["chainName"] = args ? args.chainName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["repoName"] = args ? args.repoName : undefined;
            resourceInputs["repoNamespaceName"] = args ? args.repoNamespaceName : undefined;
            resourceInputs["chainId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CrChain.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CrChain resources.
 */
export interface CrChainState {
    chainConfigs?: pulumi.Input<pulumi.Input<inputs.CrChainChainConfig>[]>;
    chainId?: pulumi.Input<string>;
    chainName?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    repoName?: pulumi.Input<string>;
    repoNamespaceName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CrChain resource.
 */
export interface CrChainArgs {
    chainConfigs?: pulumi.Input<pulumi.Input<inputs.CrChainChainConfig>[]>;
    chainName: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    instanceId: pulumi.Input<string>;
    repoName?: pulumi.Input<string>;
    repoNamespaceName?: pulumi.Input<string>;
}
