// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MarketOrder extends pulumi.CustomResource {
    /**
     * Get an existing MarketOrder resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MarketOrderState, opts?: pulumi.CustomResourceOptions): MarketOrder {
        return new MarketOrder(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/marketOrder:MarketOrder';

    /**
     * Returns true if the given object is an instance of MarketOrder.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MarketOrder {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MarketOrder.__pulumiType;
    }

    public readonly components!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly couponId!: pulumi.Output<string | undefined>;
    public readonly duration!: pulumi.Output<number | undefined>;
    public readonly packageVersion!: pulumi.Output<string>;
    public readonly payType!: pulumi.Output<string | undefined>;
    public readonly pricingCycle!: pulumi.Output<string>;
    public readonly productCode!: pulumi.Output<string>;
    public readonly quantity!: pulumi.Output<number | undefined>;

    /**
     * Create a MarketOrder resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MarketOrderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MarketOrderArgs | MarketOrderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MarketOrderState | undefined;
            resourceInputs["components"] = state ? state.components : undefined;
            resourceInputs["couponId"] = state ? state.couponId : undefined;
            resourceInputs["duration"] = state ? state.duration : undefined;
            resourceInputs["packageVersion"] = state ? state.packageVersion : undefined;
            resourceInputs["payType"] = state ? state.payType : undefined;
            resourceInputs["pricingCycle"] = state ? state.pricingCycle : undefined;
            resourceInputs["productCode"] = state ? state.productCode : undefined;
            resourceInputs["quantity"] = state ? state.quantity : undefined;
        } else {
            const args = argsOrState as MarketOrderArgs | undefined;
            if ((!args || args.packageVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'packageVersion'");
            }
            if ((!args || args.pricingCycle === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pricingCycle'");
            }
            if ((!args || args.productCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'productCode'");
            }
            resourceInputs["components"] = args ? args.components : undefined;
            resourceInputs["couponId"] = args ? args.couponId : undefined;
            resourceInputs["duration"] = args ? args.duration : undefined;
            resourceInputs["packageVersion"] = args ? args.packageVersion : undefined;
            resourceInputs["payType"] = args ? args.payType : undefined;
            resourceInputs["pricingCycle"] = args ? args.pricingCycle : undefined;
            resourceInputs["productCode"] = args ? args.productCode : undefined;
            resourceInputs["quantity"] = args ? args.quantity : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MarketOrder.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MarketOrder resources.
 */
export interface MarketOrderState {
    components?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    couponId?: pulumi.Input<string>;
    duration?: pulumi.Input<number>;
    packageVersion?: pulumi.Input<string>;
    payType?: pulumi.Input<string>;
    pricingCycle?: pulumi.Input<string>;
    productCode?: pulumi.Input<string>;
    quantity?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a MarketOrder resource.
 */
export interface MarketOrderArgs {
    components?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    couponId?: pulumi.Input<string>;
    duration?: pulumi.Input<number>;
    packageVersion: pulumi.Input<string>;
    payType?: pulumi.Input<string>;
    pricingCycle: pulumi.Input<string>;
    productCode: pulumi.Input<string>;
    quantity?: pulumi.Input<number>;
}
