// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CdnFcTrigger extends pulumi.CustomResource {
    /**
     * Get an existing CdnFcTrigger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CdnFcTriggerState, opts?: pulumi.CustomResourceOptions): CdnFcTrigger {
        return new CdnFcTrigger(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/cdnFcTrigger:CdnFcTrigger';

    /**
     * Returns true if the given object is an instance of CdnFcTrigger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CdnFcTrigger {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CdnFcTrigger.__pulumiType;
    }

    public readonly eventMetaName!: pulumi.Output<string>;
    public readonly eventMetaVersion!: pulumi.Output<string>;
    public readonly functionArn!: pulumi.Output<string | undefined>;
    public readonly notes!: pulumi.Output<string>;
    public readonly roleArn!: pulumi.Output<string>;
    public readonly sourceArn!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CdnFcTriggerTimeouts | undefined>;
    public readonly triggerArn!: pulumi.Output<string>;

    /**
     * Create a CdnFcTrigger resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CdnFcTriggerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CdnFcTriggerArgs | CdnFcTriggerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CdnFcTriggerState | undefined;
            resourceInputs["eventMetaName"] = state ? state.eventMetaName : undefined;
            resourceInputs["eventMetaVersion"] = state ? state.eventMetaVersion : undefined;
            resourceInputs["functionArn"] = state ? state.functionArn : undefined;
            resourceInputs["notes"] = state ? state.notes : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["sourceArn"] = state ? state.sourceArn : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["triggerArn"] = state ? state.triggerArn : undefined;
        } else {
            const args = argsOrState as CdnFcTriggerArgs | undefined;
            if ((!args || args.eventMetaName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventMetaName'");
            }
            if ((!args || args.eventMetaVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventMetaVersion'");
            }
            if ((!args || args.notes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notes'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.sourceArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceArn'");
            }
            if ((!args || args.triggerArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'triggerArn'");
            }
            resourceInputs["eventMetaName"] = args ? args.eventMetaName : undefined;
            resourceInputs["eventMetaVersion"] = args ? args.eventMetaVersion : undefined;
            resourceInputs["functionArn"] = args ? args.functionArn : undefined;
            resourceInputs["notes"] = args ? args.notes : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["sourceArn"] = args ? args.sourceArn : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["triggerArn"] = args ? args.triggerArn : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CdnFcTrigger.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CdnFcTrigger resources.
 */
export interface CdnFcTriggerState {
    eventMetaName?: pulumi.Input<string>;
    eventMetaVersion?: pulumi.Input<string>;
    functionArn?: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    sourceArn?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CdnFcTriggerTimeouts>;
    triggerArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CdnFcTrigger resource.
 */
export interface CdnFcTriggerArgs {
    eventMetaName: pulumi.Input<string>;
    eventMetaVersion: pulumi.Input<string>;
    functionArn?: pulumi.Input<string>;
    notes: pulumi.Input<string>;
    roleArn: pulumi.Input<string>;
    sourceArn: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CdnFcTriggerTimeouts>;
    triggerArn: pulumi.Input<string>;
}
