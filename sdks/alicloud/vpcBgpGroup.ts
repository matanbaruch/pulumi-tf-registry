// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpcBgpGroup extends pulumi.CustomResource {
    /**
     * Get an existing VpcBgpGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcBgpGroupState, opts?: pulumi.CustomResourceOptions): VpcBgpGroup {
        return new VpcBgpGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/vpcBgpGroup:VpcBgpGroup';

    /**
     * Returns true if the given object is an instance of VpcBgpGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcBgpGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcBgpGroup.__pulumiType;
    }

    public readonly authKey!: pulumi.Output<string | undefined>;
    public readonly bgpGroupName!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly isFakeAsn!: pulumi.Output<boolean>;
    public readonly localAsn!: pulumi.Output<number>;
    public readonly peerAsn!: pulumi.Output<number>;
    public readonly routerId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.VpcBgpGroupTimeouts | undefined>;

    /**
     * Create a VpcBgpGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcBgpGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcBgpGroupArgs | VpcBgpGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcBgpGroupState | undefined;
            resourceInputs["authKey"] = state ? state.authKey : undefined;
            resourceInputs["bgpGroupName"] = state ? state.bgpGroupName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["isFakeAsn"] = state ? state.isFakeAsn : undefined;
            resourceInputs["localAsn"] = state ? state.localAsn : undefined;
            resourceInputs["peerAsn"] = state ? state.peerAsn : undefined;
            resourceInputs["routerId"] = state ? state.routerId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as VpcBgpGroupArgs | undefined;
            if ((!args || args.peerAsn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerAsn'");
            }
            if ((!args || args.routerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routerId'");
            }
            resourceInputs["authKey"] = args ? args.authKey : undefined;
            resourceInputs["bgpGroupName"] = args ? args.bgpGroupName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["isFakeAsn"] = args ? args.isFakeAsn : undefined;
            resourceInputs["localAsn"] = args ? args.localAsn : undefined;
            resourceInputs["peerAsn"] = args ? args.peerAsn : undefined;
            resourceInputs["routerId"] = args ? args.routerId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcBgpGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpcBgpGroup resources.
 */
export interface VpcBgpGroupState {
    authKey?: pulumi.Input<string>;
    bgpGroupName?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    isFakeAsn?: pulumi.Input<boolean>;
    localAsn?: pulumi.Input<number>;
    peerAsn?: pulumi.Input<number>;
    routerId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VpcBgpGroupTimeouts>;
}

/**
 * The set of arguments for constructing a VpcBgpGroup resource.
 */
export interface VpcBgpGroupArgs {
    authKey?: pulumi.Input<string>;
    bgpGroupName?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    isFakeAsn?: pulumi.Input<boolean>;
    localAsn?: pulumi.Input<number>;
    peerAsn: pulumi.Input<number>;
    routerId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VpcBgpGroupTimeouts>;
}
