// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ThreatDetectionHoneyPot extends pulumi.CustomResource {
    /**
     * Get an existing ThreatDetectionHoneyPot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ThreatDetectionHoneyPotState, opts?: pulumi.CustomResourceOptions): ThreatDetectionHoneyPot {
        return new ThreatDetectionHoneyPot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/threatDetectionHoneyPot:ThreatDetectionHoneyPot';

    /**
     * Returns true if the given object is an instance of ThreatDetectionHoneyPot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ThreatDetectionHoneyPot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ThreatDetectionHoneyPot.__pulumiType;
    }

    public /*out*/ readonly honeypotId!: pulumi.Output<string>;
    public readonly honeypotImageId!: pulumi.Output<string>;
    public readonly honeypotImageName!: pulumi.Output<string>;
    public readonly honeypotName!: pulumi.Output<string>;
    public readonly nodeId!: pulumi.Output<string>;
    public /*out*/ readonly presetId!: pulumi.Output<string>;
    public /*out*/ readonly states!: pulumi.Output<string[]>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ThreatDetectionHoneyPotTimeouts | undefined>;

    /**
     * Create a ThreatDetectionHoneyPot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ThreatDetectionHoneyPotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ThreatDetectionHoneyPotArgs | ThreatDetectionHoneyPotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ThreatDetectionHoneyPotState | undefined;
            resourceInputs["honeypotId"] = state ? state.honeypotId : undefined;
            resourceInputs["honeypotImageId"] = state ? state.honeypotImageId : undefined;
            resourceInputs["honeypotImageName"] = state ? state.honeypotImageName : undefined;
            resourceInputs["honeypotName"] = state ? state.honeypotName : undefined;
            resourceInputs["nodeId"] = state ? state.nodeId : undefined;
            resourceInputs["presetId"] = state ? state.presetId : undefined;
            resourceInputs["states"] = state ? state.states : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ThreatDetectionHoneyPotArgs | undefined;
            if ((!args || args.honeypotImageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'honeypotImageId'");
            }
            if ((!args || args.honeypotImageName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'honeypotImageName'");
            }
            if ((!args || args.honeypotName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'honeypotName'");
            }
            if ((!args || args.nodeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeId'");
            }
            resourceInputs["honeypotImageId"] = args ? args.honeypotImageId : undefined;
            resourceInputs["honeypotImageName"] = args ? args.honeypotImageName : undefined;
            resourceInputs["honeypotName"] = args ? args.honeypotName : undefined;
            resourceInputs["nodeId"] = args ? args.nodeId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["honeypotId"] = undefined /*out*/;
            resourceInputs["presetId"] = undefined /*out*/;
            resourceInputs["states"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ThreatDetectionHoneyPot.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ThreatDetectionHoneyPot resources.
 */
export interface ThreatDetectionHoneyPotState {
    honeypotId?: pulumi.Input<string>;
    honeypotImageId?: pulumi.Input<string>;
    honeypotImageName?: pulumi.Input<string>;
    honeypotName?: pulumi.Input<string>;
    nodeId?: pulumi.Input<string>;
    presetId?: pulumi.Input<string>;
    states?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ThreatDetectionHoneyPotTimeouts>;
}

/**
 * The set of arguments for constructing a ThreatDetectionHoneyPot resource.
 */
export interface ThreatDetectionHoneyPotArgs {
    honeypotImageId: pulumi.Input<string>;
    honeypotImageName: pulumi.Input<string>;
    honeypotName: pulumi.Input<string>;
    nodeId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ThreatDetectionHoneyPotTimeouts>;
}
