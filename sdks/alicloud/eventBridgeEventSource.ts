// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class EventBridgeEventSource extends pulumi.CustomResource {
    /**
     * Get an existing EventBridgeEventSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EventBridgeEventSourceState, opts?: pulumi.CustomResourceOptions): EventBridgeEventSource {
        return new EventBridgeEventSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/eventBridgeEventSource:EventBridgeEventSource';

    /**
     * Returns true if the given object is an instance of EventBridgeEventSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventBridgeEventSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventBridgeEventSource.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly eventBusName!: pulumi.Output<string>;
    public readonly eventSourceName!: pulumi.Output<string>;
    public readonly externalSourceConfig!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly externalSourceType!: pulumi.Output<string | undefined>;
    public readonly linkedExternalSource!: pulumi.Output<boolean>;

    /**
     * Create a EventBridgeEventSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventBridgeEventSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EventBridgeEventSourceArgs | EventBridgeEventSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EventBridgeEventSourceState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["eventBusName"] = state ? state.eventBusName : undefined;
            resourceInputs["eventSourceName"] = state ? state.eventSourceName : undefined;
            resourceInputs["externalSourceConfig"] = state ? state.externalSourceConfig : undefined;
            resourceInputs["externalSourceType"] = state ? state.externalSourceType : undefined;
            resourceInputs["linkedExternalSource"] = state ? state.linkedExternalSource : undefined;
        } else {
            const args = argsOrState as EventBridgeEventSourceArgs | undefined;
            if ((!args || args.eventBusName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventBusName'");
            }
            if ((!args || args.eventSourceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventSourceName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["eventBusName"] = args ? args.eventBusName : undefined;
            resourceInputs["eventSourceName"] = args ? args.eventSourceName : undefined;
            resourceInputs["externalSourceConfig"] = args ? args.externalSourceConfig : undefined;
            resourceInputs["externalSourceType"] = args ? args.externalSourceType : undefined;
            resourceInputs["linkedExternalSource"] = args ? args.linkedExternalSource : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EventBridgeEventSource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EventBridgeEventSource resources.
 */
export interface EventBridgeEventSourceState {
    description?: pulumi.Input<string>;
    eventBusName?: pulumi.Input<string>;
    eventSourceName?: pulumi.Input<string>;
    externalSourceConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    externalSourceType?: pulumi.Input<string>;
    linkedExternalSource?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a EventBridgeEventSource resource.
 */
export interface EventBridgeEventSourceArgs {
    description?: pulumi.Input<string>;
    eventBusName: pulumi.Input<string>;
    eventSourceName: pulumi.Input<string>;
    externalSourceConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    externalSourceType?: pulumi.Input<string>;
    linkedExternalSource?: pulumi.Input<boolean>;
}
