// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServiceMeshServiceMesh extends pulumi.CustomResource {
    /**
     * Get an existing ServiceMeshServiceMesh resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceMeshServiceMeshState, opts?: pulumi.CustomResourceOptions): ServiceMeshServiceMesh {
        return new ServiceMeshServiceMesh(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/serviceMeshServiceMesh:ServiceMeshServiceMesh';

    /**
     * Returns true if the given object is an instance of ServiceMeshServiceMesh.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceMeshServiceMesh {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceMeshServiceMesh.__pulumiType;
    }

    public readonly clusterIds!: pulumi.Output<string[] | undefined>;
    public readonly clusterSpec!: pulumi.Output<string>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly customizedPrometheus!: pulumi.Output<boolean | undefined>;
    public readonly edition!: pulumi.Output<string | undefined>;
    public readonly extraConfiguration!: pulumi.Output<outputs.ServiceMeshServiceMeshExtraConfiguration | undefined>;
    public readonly force!: pulumi.Output<boolean | undefined>;
    public readonly loadBalancer!: pulumi.Output<outputs.ServiceMeshServiceMeshLoadBalancer | undefined>;
    public readonly meshConfig!: pulumi.Output<outputs.ServiceMeshServiceMeshMeshConfig | undefined>;
    public readonly network!: pulumi.Output<outputs.ServiceMeshServiceMeshNetwork>;
    public readonly prometheusUrl!: pulumi.Output<string | undefined>;
    public readonly serviceMeshName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ServiceMeshServiceMeshTimeouts | undefined>;
    public readonly version!: pulumi.Output<string | undefined>;

    /**
     * Create a ServiceMeshServiceMesh resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceMeshServiceMeshArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceMeshServiceMeshArgs | ServiceMeshServiceMeshState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceMeshServiceMeshState | undefined;
            resourceInputs["clusterIds"] = state ? state.clusterIds : undefined;
            resourceInputs["clusterSpec"] = state ? state.clusterSpec : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["customizedPrometheus"] = state ? state.customizedPrometheus : undefined;
            resourceInputs["edition"] = state ? state.edition : undefined;
            resourceInputs["extraConfiguration"] = state ? state.extraConfiguration : undefined;
            resourceInputs["force"] = state ? state.force : undefined;
            resourceInputs["loadBalancer"] = state ? state.loadBalancer : undefined;
            resourceInputs["meshConfig"] = state ? state.meshConfig : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["prometheusUrl"] = state ? state.prometheusUrl : undefined;
            resourceInputs["serviceMeshName"] = state ? state.serviceMeshName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as ServiceMeshServiceMeshArgs | undefined;
            if ((!args || args.network === undefined) && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            resourceInputs["clusterIds"] = args ? args.clusterIds : undefined;
            resourceInputs["clusterSpec"] = args ? args.clusterSpec : undefined;
            resourceInputs["customizedPrometheus"] = args ? args.customizedPrometheus : undefined;
            resourceInputs["edition"] = args ? args.edition : undefined;
            resourceInputs["extraConfiguration"] = args ? args.extraConfiguration : undefined;
            resourceInputs["force"] = args ? args.force : undefined;
            resourceInputs["loadBalancer"] = args ? args.loadBalancer : undefined;
            resourceInputs["meshConfig"] = args ? args.meshConfig : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["prometheusUrl"] = args ? args.prometheusUrl : undefined;
            resourceInputs["serviceMeshName"] = args ? args.serviceMeshName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceMeshServiceMesh.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServiceMeshServiceMesh resources.
 */
export interface ServiceMeshServiceMeshState {
    clusterIds?: pulumi.Input<pulumi.Input<string>[]>;
    clusterSpec?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    customizedPrometheus?: pulumi.Input<boolean>;
    edition?: pulumi.Input<string>;
    extraConfiguration?: pulumi.Input<inputs.ServiceMeshServiceMeshExtraConfiguration>;
    force?: pulumi.Input<boolean>;
    loadBalancer?: pulumi.Input<inputs.ServiceMeshServiceMeshLoadBalancer>;
    meshConfig?: pulumi.Input<inputs.ServiceMeshServiceMeshMeshConfig>;
    network?: pulumi.Input<inputs.ServiceMeshServiceMeshNetwork>;
    prometheusUrl?: pulumi.Input<string>;
    serviceMeshName?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ServiceMeshServiceMeshTimeouts>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceMeshServiceMesh resource.
 */
export interface ServiceMeshServiceMeshArgs {
    clusterIds?: pulumi.Input<pulumi.Input<string>[]>;
    clusterSpec?: pulumi.Input<string>;
    customizedPrometheus?: pulumi.Input<boolean>;
    edition?: pulumi.Input<string>;
    extraConfiguration?: pulumi.Input<inputs.ServiceMeshServiceMeshExtraConfiguration>;
    force?: pulumi.Input<boolean>;
    loadBalancer?: pulumi.Input<inputs.ServiceMeshServiceMeshLoadBalancer>;
    meshConfig?: pulumi.Input<inputs.ServiceMeshServiceMeshMeshConfig>;
    network: pulumi.Input<inputs.ServiceMeshServiceMeshNetwork>;
    prometheusUrl?: pulumi.Input<string>;
    serviceMeshName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ServiceMeshServiceMeshTimeouts>;
    version?: pulumi.Input<string>;
}
