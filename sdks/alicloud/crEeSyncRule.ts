// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CrEeSyncRule extends pulumi.CustomResource {
    /**
     * Get an existing CrEeSyncRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CrEeSyncRuleState, opts?: pulumi.CustomResourceOptions): CrEeSyncRule {
        return new CrEeSyncRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/crEeSyncRule:CrEeSyncRule';

    /**
     * Returns true if the given object is an instance of CrEeSyncRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CrEeSyncRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CrEeSyncRule.__pulumiType;
    }

    public readonly instanceId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespaceName!: pulumi.Output<string>;
    public readonly repoName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly ruleId!: pulumi.Output<string>;
    public /*out*/ readonly syncDirection!: pulumi.Output<string>;
    public /*out*/ readonly syncScope!: pulumi.Output<string>;
    public readonly tagFilter!: pulumi.Output<string>;
    public readonly targetInstanceId!: pulumi.Output<string>;
    public readonly targetNamespaceName!: pulumi.Output<string>;
    public readonly targetRegionId!: pulumi.Output<string>;
    public readonly targetRepoName!: pulumi.Output<string | undefined>;

    /**
     * Create a CrEeSyncRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CrEeSyncRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CrEeSyncRuleArgs | CrEeSyncRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CrEeSyncRuleState | undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespaceName"] = state ? state.namespaceName : undefined;
            resourceInputs["repoName"] = state ? state.repoName : undefined;
            resourceInputs["ruleId"] = state ? state.ruleId : undefined;
            resourceInputs["syncDirection"] = state ? state.syncDirection : undefined;
            resourceInputs["syncScope"] = state ? state.syncScope : undefined;
            resourceInputs["tagFilter"] = state ? state.tagFilter : undefined;
            resourceInputs["targetInstanceId"] = state ? state.targetInstanceId : undefined;
            resourceInputs["targetNamespaceName"] = state ? state.targetNamespaceName : undefined;
            resourceInputs["targetRegionId"] = state ? state.targetRegionId : undefined;
            resourceInputs["targetRepoName"] = state ? state.targetRepoName : undefined;
        } else {
            const args = argsOrState as CrEeSyncRuleArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.namespaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespaceName'");
            }
            if ((!args || args.tagFilter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tagFilter'");
            }
            if ((!args || args.targetInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetInstanceId'");
            }
            if ((!args || args.targetNamespaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetNamespaceName'");
            }
            if ((!args || args.targetRegionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetRegionId'");
            }
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespaceName"] = args ? args.namespaceName : undefined;
            resourceInputs["repoName"] = args ? args.repoName : undefined;
            resourceInputs["tagFilter"] = args ? args.tagFilter : undefined;
            resourceInputs["targetInstanceId"] = args ? args.targetInstanceId : undefined;
            resourceInputs["targetNamespaceName"] = args ? args.targetNamespaceName : undefined;
            resourceInputs["targetRegionId"] = args ? args.targetRegionId : undefined;
            resourceInputs["targetRepoName"] = args ? args.targetRepoName : undefined;
            resourceInputs["ruleId"] = undefined /*out*/;
            resourceInputs["syncDirection"] = undefined /*out*/;
            resourceInputs["syncScope"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CrEeSyncRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CrEeSyncRule resources.
 */
export interface CrEeSyncRuleState {
    instanceId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namespaceName?: pulumi.Input<string>;
    repoName?: pulumi.Input<string>;
    ruleId?: pulumi.Input<string>;
    syncDirection?: pulumi.Input<string>;
    syncScope?: pulumi.Input<string>;
    tagFilter?: pulumi.Input<string>;
    targetInstanceId?: pulumi.Input<string>;
    targetNamespaceName?: pulumi.Input<string>;
    targetRegionId?: pulumi.Input<string>;
    targetRepoName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CrEeSyncRule resource.
 */
export interface CrEeSyncRuleArgs {
    instanceId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namespaceName: pulumi.Input<string>;
    repoName?: pulumi.Input<string>;
    tagFilter: pulumi.Input<string>;
    targetInstanceId: pulumi.Input<string>;
    targetNamespaceName: pulumi.Input<string>;
    targetRegionId: pulumi.Input<string>;
    targetRepoName?: pulumi.Input<string>;
}
