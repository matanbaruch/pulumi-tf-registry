// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ConfigAggregateConfigRule extends pulumi.CustomResource {
    /**
     * Get an existing ConfigAggregateConfigRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigAggregateConfigRuleState, opts?: pulumi.CustomResourceOptions): ConfigAggregateConfigRule {
        return new ConfigAggregateConfigRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/configAggregateConfigRule:ConfigAggregateConfigRule';

    /**
     * Returns true if the given object is an instance of ConfigAggregateConfigRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigAggregateConfigRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigAggregateConfigRule.__pulumiType;
    }

    public readonly aggregateConfigRuleName!: pulumi.Output<string>;
    public readonly aggregatorId!: pulumi.Output<string>;
    public /*out*/ readonly configRuleId!: pulumi.Output<string>;
    public readonly configRuleTriggerTypes!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly excludeResourceIdsScope!: pulumi.Output<string | undefined>;
    public readonly inputParameters!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly maximumExecutionFrequency!: pulumi.Output<string>;
    public readonly regionIdsScope!: pulumi.Output<string | undefined>;
    public readonly resourceGroupIdsScope!: pulumi.Output<string | undefined>;
    public readonly resourceTypesScopes!: pulumi.Output<string[]>;
    public readonly riskLevel!: pulumi.Output<number>;
    public readonly sourceIdentifier!: pulumi.Output<string>;
    public readonly sourceOwner!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly tagKeyScope!: pulumi.Output<string | undefined>;
    public readonly tagValueScope!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ConfigAggregateConfigRuleTimeouts | undefined>;

    /**
     * Create a ConfigAggregateConfigRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigAggregateConfigRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigAggregateConfigRuleArgs | ConfigAggregateConfigRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigAggregateConfigRuleState | undefined;
            resourceInputs["aggregateConfigRuleName"] = state ? state.aggregateConfigRuleName : undefined;
            resourceInputs["aggregatorId"] = state ? state.aggregatorId : undefined;
            resourceInputs["configRuleId"] = state ? state.configRuleId : undefined;
            resourceInputs["configRuleTriggerTypes"] = state ? state.configRuleTriggerTypes : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["excludeResourceIdsScope"] = state ? state.excludeResourceIdsScope : undefined;
            resourceInputs["inputParameters"] = state ? state.inputParameters : undefined;
            resourceInputs["maximumExecutionFrequency"] = state ? state.maximumExecutionFrequency : undefined;
            resourceInputs["regionIdsScope"] = state ? state.regionIdsScope : undefined;
            resourceInputs["resourceGroupIdsScope"] = state ? state.resourceGroupIdsScope : undefined;
            resourceInputs["resourceTypesScopes"] = state ? state.resourceTypesScopes : undefined;
            resourceInputs["riskLevel"] = state ? state.riskLevel : undefined;
            resourceInputs["sourceIdentifier"] = state ? state.sourceIdentifier : undefined;
            resourceInputs["sourceOwner"] = state ? state.sourceOwner : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tagKeyScope"] = state ? state.tagKeyScope : undefined;
            resourceInputs["tagValueScope"] = state ? state.tagValueScope : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ConfigAggregateConfigRuleArgs | undefined;
            if ((!args || args.aggregateConfigRuleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aggregateConfigRuleName'");
            }
            if ((!args || args.aggregatorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aggregatorId'");
            }
            if ((!args || args.configRuleTriggerTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configRuleTriggerTypes'");
            }
            if ((!args || args.resourceTypesScopes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceTypesScopes'");
            }
            if ((!args || args.riskLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'riskLevel'");
            }
            if ((!args || args.sourceIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceIdentifier'");
            }
            if ((!args || args.sourceOwner === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceOwner'");
            }
            resourceInputs["aggregateConfigRuleName"] = args ? args.aggregateConfigRuleName : undefined;
            resourceInputs["aggregatorId"] = args ? args.aggregatorId : undefined;
            resourceInputs["configRuleTriggerTypes"] = args ? args.configRuleTriggerTypes : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["excludeResourceIdsScope"] = args ? args.excludeResourceIdsScope : undefined;
            resourceInputs["inputParameters"] = args ? args.inputParameters : undefined;
            resourceInputs["maximumExecutionFrequency"] = args ? args.maximumExecutionFrequency : undefined;
            resourceInputs["regionIdsScope"] = args ? args.regionIdsScope : undefined;
            resourceInputs["resourceGroupIdsScope"] = args ? args.resourceGroupIdsScope : undefined;
            resourceInputs["resourceTypesScopes"] = args ? args.resourceTypesScopes : undefined;
            resourceInputs["riskLevel"] = args ? args.riskLevel : undefined;
            resourceInputs["sourceIdentifier"] = args ? args.sourceIdentifier : undefined;
            resourceInputs["sourceOwner"] = args ? args.sourceOwner : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tagKeyScope"] = args ? args.tagKeyScope : undefined;
            resourceInputs["tagValueScope"] = args ? args.tagValueScope : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["configRuleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConfigAggregateConfigRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConfigAggregateConfigRule resources.
 */
export interface ConfigAggregateConfigRuleState {
    aggregateConfigRuleName?: pulumi.Input<string>;
    aggregatorId?: pulumi.Input<string>;
    configRuleId?: pulumi.Input<string>;
    configRuleTriggerTypes?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    excludeResourceIdsScope?: pulumi.Input<string>;
    inputParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    maximumExecutionFrequency?: pulumi.Input<string>;
    regionIdsScope?: pulumi.Input<string>;
    resourceGroupIdsScope?: pulumi.Input<string>;
    resourceTypesScopes?: pulumi.Input<pulumi.Input<string>[]>;
    riskLevel?: pulumi.Input<number>;
    sourceIdentifier?: pulumi.Input<string>;
    sourceOwner?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tagKeyScope?: pulumi.Input<string>;
    tagValueScope?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ConfigAggregateConfigRuleTimeouts>;
}

/**
 * The set of arguments for constructing a ConfigAggregateConfigRule resource.
 */
export interface ConfigAggregateConfigRuleArgs {
    aggregateConfigRuleName: pulumi.Input<string>;
    aggregatorId: pulumi.Input<string>;
    configRuleTriggerTypes: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    excludeResourceIdsScope?: pulumi.Input<string>;
    inputParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    maximumExecutionFrequency?: pulumi.Input<string>;
    regionIdsScope?: pulumi.Input<string>;
    resourceGroupIdsScope?: pulumi.Input<string>;
    resourceTypesScopes: pulumi.Input<pulumi.Input<string>[]>;
    riskLevel: pulumi.Input<number>;
    sourceIdentifier: pulumi.Input<string>;
    sourceOwner: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tagKeyScope?: pulumi.Input<string>;
    tagValueScope?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ConfigAggregateConfigRuleTimeouts>;
}
