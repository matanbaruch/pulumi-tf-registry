// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DcdnDomainConfig extends pulumi.CustomResource {
    /**
     * Get an existing DcdnDomainConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DcdnDomainConfigState, opts?: pulumi.CustomResourceOptions): DcdnDomainConfig {
        return new DcdnDomainConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/dcdnDomainConfig:DcdnDomainConfig';

    /**
     * Returns true if the given object is an instance of DcdnDomainConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DcdnDomainConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DcdnDomainConfig.__pulumiType;
    }

    public /*out*/ readonly configId!: pulumi.Output<string>;
    public readonly domainName!: pulumi.Output<string>;
    public readonly functionArgs!: pulumi.Output<outputs.DcdnDomainConfigFunctionArg[]>;
    public readonly functionName!: pulumi.Output<string>;
    public readonly parentId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a DcdnDomainConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DcdnDomainConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DcdnDomainConfigArgs | DcdnDomainConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DcdnDomainConfigState | undefined;
            resourceInputs["configId"] = state ? state.configId : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["functionArgs"] = state ? state.functionArgs : undefined;
            resourceInputs["functionName"] = state ? state.functionName : undefined;
            resourceInputs["parentId"] = state ? state.parentId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as DcdnDomainConfigArgs | undefined;
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if ((!args || args.functionArgs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionArgs'");
            }
            if ((!args || args.functionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionName'");
            }
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["functionArgs"] = args ? args.functionArgs : undefined;
            resourceInputs["functionName"] = args ? args.functionName : undefined;
            resourceInputs["parentId"] = args ? args.parentId : undefined;
            resourceInputs["configId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DcdnDomainConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DcdnDomainConfig resources.
 */
export interface DcdnDomainConfigState {
    configId?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    functionArgs?: pulumi.Input<pulumi.Input<inputs.DcdnDomainConfigFunctionArg>[]>;
    functionName?: pulumi.Input<string>;
    parentId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DcdnDomainConfig resource.
 */
export interface DcdnDomainConfigArgs {
    domainName: pulumi.Input<string>;
    functionArgs: pulumi.Input<pulumi.Input<inputs.DcdnDomainConfigFunctionArg>[]>;
    functionName: pulumi.Input<string>;
    parentId?: pulumi.Input<string>;
}
