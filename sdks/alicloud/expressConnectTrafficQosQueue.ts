// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ExpressConnectTrafficQosQueue extends pulumi.CustomResource {
    /**
     * Get an existing ExpressConnectTrafficQosQueue resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExpressConnectTrafficQosQueueState, opts?: pulumi.CustomResourceOptions): ExpressConnectTrafficQosQueue {
        return new ExpressConnectTrafficQosQueue(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/expressConnectTrafficQosQueue:ExpressConnectTrafficQosQueue';

    /**
     * Returns true if the given object is an instance of ExpressConnectTrafficQosQueue.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExpressConnectTrafficQosQueue {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExpressConnectTrafficQosQueue.__pulumiType;
    }

    public readonly bandwidthPercent!: pulumi.Output<string>;
    public readonly qosId!: pulumi.Output<string>;
    public readonly queueDescription!: pulumi.Output<string | undefined>;
    public /*out*/ readonly queueId!: pulumi.Output<string>;
    public readonly queueName!: pulumi.Output<string | undefined>;
    public readonly queueType!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ExpressConnectTrafficQosQueueTimeouts | undefined>;

    /**
     * Create a ExpressConnectTrafficQosQueue resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExpressConnectTrafficQosQueueArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExpressConnectTrafficQosQueueArgs | ExpressConnectTrafficQosQueueState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExpressConnectTrafficQosQueueState | undefined;
            resourceInputs["bandwidthPercent"] = state ? state.bandwidthPercent : undefined;
            resourceInputs["qosId"] = state ? state.qosId : undefined;
            resourceInputs["queueDescription"] = state ? state.queueDescription : undefined;
            resourceInputs["queueId"] = state ? state.queueId : undefined;
            resourceInputs["queueName"] = state ? state.queueName : undefined;
            resourceInputs["queueType"] = state ? state.queueType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ExpressConnectTrafficQosQueueArgs | undefined;
            if ((!args || args.qosId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'qosId'");
            }
            if ((!args || args.queueType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queueType'");
            }
            resourceInputs["bandwidthPercent"] = args ? args.bandwidthPercent : undefined;
            resourceInputs["qosId"] = args ? args.qosId : undefined;
            resourceInputs["queueDescription"] = args ? args.queueDescription : undefined;
            resourceInputs["queueName"] = args ? args.queueName : undefined;
            resourceInputs["queueType"] = args ? args.queueType : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["queueId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExpressConnectTrafficQosQueue.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ExpressConnectTrafficQosQueue resources.
 */
export interface ExpressConnectTrafficQosQueueState {
    bandwidthPercent?: pulumi.Input<string>;
    qosId?: pulumi.Input<string>;
    queueDescription?: pulumi.Input<string>;
    queueId?: pulumi.Input<string>;
    queueName?: pulumi.Input<string>;
    queueType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ExpressConnectTrafficQosQueueTimeouts>;
}

/**
 * The set of arguments for constructing a ExpressConnectTrafficQosQueue resource.
 */
export interface ExpressConnectTrafficQosQueueArgs {
    bandwidthPercent?: pulumi.Input<string>;
    qosId: pulumi.Input<string>;
    queueDescription?: pulumi.Input<string>;
    queueName?: pulumi.Input<string>;
    queueType: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ExpressConnectTrafficQosQueueTimeouts>;
}
