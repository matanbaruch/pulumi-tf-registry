// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ConfigConfigurationRecorder extends pulumi.CustomResource {
    /**
     * Get an existing ConfigConfigurationRecorder resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigConfigurationRecorderState, opts?: pulumi.CustomResourceOptions): ConfigConfigurationRecorder {
        return new ConfigConfigurationRecorder(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/configConfigurationRecorder:ConfigConfigurationRecorder';

    /**
     * Returns true if the given object is an instance of ConfigConfigurationRecorder.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigConfigurationRecorder {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigConfigurationRecorder.__pulumiType;
    }

    public readonly enterpriseEdition!: pulumi.Output<boolean>;
    public /*out*/ readonly organizationEnableStatus!: pulumi.Output<string>;
    public /*out*/ readonly organizationMasterId!: pulumi.Output<number>;
    public readonly resourceTypes!: pulumi.Output<string[]>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ConfigConfigurationRecorderTimeouts | undefined>;

    /**
     * Create a ConfigConfigurationRecorder resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ConfigConfigurationRecorderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigConfigurationRecorderArgs | ConfigConfigurationRecorderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigConfigurationRecorderState | undefined;
            resourceInputs["enterpriseEdition"] = state ? state.enterpriseEdition : undefined;
            resourceInputs["organizationEnableStatus"] = state ? state.organizationEnableStatus : undefined;
            resourceInputs["organizationMasterId"] = state ? state.organizationMasterId : undefined;
            resourceInputs["resourceTypes"] = state ? state.resourceTypes : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ConfigConfigurationRecorderArgs | undefined;
            resourceInputs["enterpriseEdition"] = args ? args.enterpriseEdition : undefined;
            resourceInputs["resourceTypes"] = args ? args.resourceTypes : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["organizationEnableStatus"] = undefined /*out*/;
            resourceInputs["organizationMasterId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConfigConfigurationRecorder.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConfigConfigurationRecorder resources.
 */
export interface ConfigConfigurationRecorderState {
    enterpriseEdition?: pulumi.Input<boolean>;
    organizationEnableStatus?: pulumi.Input<string>;
    organizationMasterId?: pulumi.Input<number>;
    resourceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ConfigConfigurationRecorderTimeouts>;
}

/**
 * The set of arguments for constructing a ConfigConfigurationRecorder resource.
 */
export interface ConfigConfigurationRecorderArgs {
    enterpriseEdition?: pulumi.Input<boolean>;
    resourceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ConfigConfigurationRecorderTimeouts>;
}
