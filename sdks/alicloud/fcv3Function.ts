// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Fcv3Function extends pulumi.CustomResource {
    /**
     * Get an existing Fcv3Function resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Fcv3FunctionState, opts?: pulumi.CustomResourceOptions): Fcv3Function {
        return new Fcv3Function(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/fcv3Function:Fcv3Function';

    /**
     * Returns true if the given object is an instance of Fcv3Function.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Fcv3Function {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Fcv3Function.__pulumiType;
    }

    public readonly code!: pulumi.Output<outputs.Fcv3FunctionCode | undefined>;
    public readonly cpu!: pulumi.Output<number>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly customContainerConfig!: pulumi.Output<outputs.Fcv3FunctionCustomContainerConfig | undefined>;
    public readonly customDns!: pulumi.Output<outputs.Fcv3FunctionCustomDns | undefined>;
    public readonly customRuntimeConfig!: pulumi.Output<outputs.Fcv3FunctionCustomRuntimeConfig | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly diskSize!: pulumi.Output<number>;
    public readonly environmentVariables!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly functionName!: pulumi.Output<string>;
    public readonly gpuConfig!: pulumi.Output<outputs.Fcv3FunctionGpuConfig | undefined>;
    public readonly handler!: pulumi.Output<string>;
    public readonly instanceConcurrency!: pulumi.Output<number>;
    public readonly instanceLifecycleConfig!: pulumi.Output<outputs.Fcv3FunctionInstanceLifecycleConfig | undefined>;
    public readonly internetAccess!: pulumi.Output<boolean>;
    public readonly layers!: pulumi.Output<string[] | undefined>;
    public readonly logConfig!: pulumi.Output<outputs.Fcv3FunctionLogConfig | undefined>;
    public readonly memorySize!: pulumi.Output<number>;
    public readonly nasConfig!: pulumi.Output<outputs.Fcv3FunctionNasConfig | undefined>;
    public readonly ossMountConfig!: pulumi.Output<outputs.Fcv3FunctionOssMountConfig | undefined>;
    public readonly role!: pulumi.Output<string | undefined>;
    public readonly runtime!: pulumi.Output<string>;
    public readonly timeout!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.Fcv3FunctionTimeouts | undefined>;
    public readonly vpcConfig!: pulumi.Output<outputs.Fcv3FunctionVpcConfig | undefined>;

    /**
     * Create a Fcv3Function resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Fcv3FunctionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Fcv3FunctionArgs | Fcv3FunctionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Fcv3FunctionState | undefined;
            resourceInputs["code"] = state ? state.code : undefined;
            resourceInputs["cpu"] = state ? state.cpu : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["customContainerConfig"] = state ? state.customContainerConfig : undefined;
            resourceInputs["customDns"] = state ? state.customDns : undefined;
            resourceInputs["customRuntimeConfig"] = state ? state.customRuntimeConfig : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diskSize"] = state ? state.diskSize : undefined;
            resourceInputs["environmentVariables"] = state ? state.environmentVariables : undefined;
            resourceInputs["functionName"] = state ? state.functionName : undefined;
            resourceInputs["gpuConfig"] = state ? state.gpuConfig : undefined;
            resourceInputs["handler"] = state ? state.handler : undefined;
            resourceInputs["instanceConcurrency"] = state ? state.instanceConcurrency : undefined;
            resourceInputs["instanceLifecycleConfig"] = state ? state.instanceLifecycleConfig : undefined;
            resourceInputs["internetAccess"] = state ? state.internetAccess : undefined;
            resourceInputs["layers"] = state ? state.layers : undefined;
            resourceInputs["logConfig"] = state ? state.logConfig : undefined;
            resourceInputs["memorySize"] = state ? state.memorySize : undefined;
            resourceInputs["nasConfig"] = state ? state.nasConfig : undefined;
            resourceInputs["ossMountConfig"] = state ? state.ossMountConfig : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["runtime"] = state ? state.runtime : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcConfig"] = state ? state.vpcConfig : undefined;
        } else {
            const args = argsOrState as Fcv3FunctionArgs | undefined;
            if ((!args || args.handler === undefined) && !opts.urn) {
                throw new Error("Missing required property 'handler'");
            }
            if ((!args || args.runtime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtime'");
            }
            resourceInputs["code"] = args ? args.code : undefined;
            resourceInputs["cpu"] = args ? args.cpu : undefined;
            resourceInputs["customContainerConfig"] = args ? args.customContainerConfig : undefined;
            resourceInputs["customDns"] = args ? args.customDns : undefined;
            resourceInputs["customRuntimeConfig"] = args ? args.customRuntimeConfig : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["diskSize"] = args ? args.diskSize : undefined;
            resourceInputs["environmentVariables"] = args ? args.environmentVariables : undefined;
            resourceInputs["functionName"] = args ? args.functionName : undefined;
            resourceInputs["gpuConfig"] = args ? args.gpuConfig : undefined;
            resourceInputs["handler"] = args ? args.handler : undefined;
            resourceInputs["instanceConcurrency"] = args ? args.instanceConcurrency : undefined;
            resourceInputs["instanceLifecycleConfig"] = args ? args.instanceLifecycleConfig : undefined;
            resourceInputs["internetAccess"] = args ? args.internetAccess : undefined;
            resourceInputs["layers"] = args?.layers ? pulumi.secret(args.layers) : undefined;
            resourceInputs["logConfig"] = args ? args.logConfig : undefined;
            resourceInputs["memorySize"] = args ? args.memorySize : undefined;
            resourceInputs["nasConfig"] = args ? args.nasConfig : undefined;
            resourceInputs["ossMountConfig"] = args ? args.ossMountConfig : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["runtime"] = args ? args.runtime : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcConfig"] = args ? args.vpcConfig : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["layers"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Fcv3Function.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Fcv3Function resources.
 */
export interface Fcv3FunctionState {
    code?: pulumi.Input<inputs.Fcv3FunctionCode>;
    cpu?: pulumi.Input<number>;
    createTime?: pulumi.Input<string>;
    customContainerConfig?: pulumi.Input<inputs.Fcv3FunctionCustomContainerConfig>;
    customDns?: pulumi.Input<inputs.Fcv3FunctionCustomDns>;
    customRuntimeConfig?: pulumi.Input<inputs.Fcv3FunctionCustomRuntimeConfig>;
    description?: pulumi.Input<string>;
    diskSize?: pulumi.Input<number>;
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    functionName?: pulumi.Input<string>;
    gpuConfig?: pulumi.Input<inputs.Fcv3FunctionGpuConfig>;
    handler?: pulumi.Input<string>;
    instanceConcurrency?: pulumi.Input<number>;
    instanceLifecycleConfig?: pulumi.Input<inputs.Fcv3FunctionInstanceLifecycleConfig>;
    internetAccess?: pulumi.Input<boolean>;
    layers?: pulumi.Input<pulumi.Input<string>[]>;
    logConfig?: pulumi.Input<inputs.Fcv3FunctionLogConfig>;
    memorySize?: pulumi.Input<number>;
    nasConfig?: pulumi.Input<inputs.Fcv3FunctionNasConfig>;
    ossMountConfig?: pulumi.Input<inputs.Fcv3FunctionOssMountConfig>;
    role?: pulumi.Input<string>;
    runtime?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.Fcv3FunctionTimeouts>;
    vpcConfig?: pulumi.Input<inputs.Fcv3FunctionVpcConfig>;
}

/**
 * The set of arguments for constructing a Fcv3Function resource.
 */
export interface Fcv3FunctionArgs {
    code?: pulumi.Input<inputs.Fcv3FunctionCode>;
    cpu?: pulumi.Input<number>;
    customContainerConfig?: pulumi.Input<inputs.Fcv3FunctionCustomContainerConfig>;
    customDns?: pulumi.Input<inputs.Fcv3FunctionCustomDns>;
    customRuntimeConfig?: pulumi.Input<inputs.Fcv3FunctionCustomRuntimeConfig>;
    description?: pulumi.Input<string>;
    diskSize?: pulumi.Input<number>;
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    functionName?: pulumi.Input<string>;
    gpuConfig?: pulumi.Input<inputs.Fcv3FunctionGpuConfig>;
    handler: pulumi.Input<string>;
    instanceConcurrency?: pulumi.Input<number>;
    instanceLifecycleConfig?: pulumi.Input<inputs.Fcv3FunctionInstanceLifecycleConfig>;
    internetAccess?: pulumi.Input<boolean>;
    layers?: pulumi.Input<pulumi.Input<string>[]>;
    logConfig?: pulumi.Input<inputs.Fcv3FunctionLogConfig>;
    memorySize?: pulumi.Input<number>;
    nasConfig?: pulumi.Input<inputs.Fcv3FunctionNasConfig>;
    ossMountConfig?: pulumi.Input<inputs.Fcv3FunctionOssMountConfig>;
    role?: pulumi.Input<string>;
    runtime: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.Fcv3FunctionTimeouts>;
    vpcConfig?: pulumi.Input<inputs.Fcv3FunctionVpcConfig>;
}
