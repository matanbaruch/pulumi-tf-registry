// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AmqpQueue extends pulumi.CustomResource {
    /**
     * Get an existing AmqpQueue resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AmqpQueueState, opts?: pulumi.CustomResourceOptions): AmqpQueue {
        return new AmqpQueue(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/amqpQueue:AmqpQueue';

    /**
     * Returns true if the given object is an instance of AmqpQueue.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AmqpQueue {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AmqpQueue.__pulumiType;
    }

    public readonly autoDeleteState!: pulumi.Output<boolean | undefined>;
    public readonly autoExpireState!: pulumi.Output<string | undefined>;
    public readonly deadLetterExchange!: pulumi.Output<string | undefined>;
    public readonly deadLetterRoutingKey!: pulumi.Output<string | undefined>;
    public readonly exclusiveState!: pulumi.Output<boolean | undefined>;
    public readonly instanceId!: pulumi.Output<string>;
    public readonly maxLength!: pulumi.Output<string | undefined>;
    public readonly maximumPriority!: pulumi.Output<number | undefined>;
    public readonly messageTtl!: pulumi.Output<string | undefined>;
    public readonly queueName!: pulumi.Output<string>;
    public readonly virtualHostName!: pulumi.Output<string>;

    /**
     * Create a AmqpQueue resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AmqpQueueArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AmqpQueueArgs | AmqpQueueState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AmqpQueueState | undefined;
            resourceInputs["autoDeleteState"] = state ? state.autoDeleteState : undefined;
            resourceInputs["autoExpireState"] = state ? state.autoExpireState : undefined;
            resourceInputs["deadLetterExchange"] = state ? state.deadLetterExchange : undefined;
            resourceInputs["deadLetterRoutingKey"] = state ? state.deadLetterRoutingKey : undefined;
            resourceInputs["exclusiveState"] = state ? state.exclusiveState : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["maxLength"] = state ? state.maxLength : undefined;
            resourceInputs["maximumPriority"] = state ? state.maximumPriority : undefined;
            resourceInputs["messageTtl"] = state ? state.messageTtl : undefined;
            resourceInputs["queueName"] = state ? state.queueName : undefined;
            resourceInputs["virtualHostName"] = state ? state.virtualHostName : undefined;
        } else {
            const args = argsOrState as AmqpQueueArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.queueName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queueName'");
            }
            if ((!args || args.virtualHostName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualHostName'");
            }
            resourceInputs["autoDeleteState"] = args ? args.autoDeleteState : undefined;
            resourceInputs["autoExpireState"] = args ? args.autoExpireState : undefined;
            resourceInputs["deadLetterExchange"] = args ? args.deadLetterExchange : undefined;
            resourceInputs["deadLetterRoutingKey"] = args ? args.deadLetterRoutingKey : undefined;
            resourceInputs["exclusiveState"] = args ? args.exclusiveState : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["maxLength"] = args ? args.maxLength : undefined;
            resourceInputs["maximumPriority"] = args ? args.maximumPriority : undefined;
            resourceInputs["messageTtl"] = args ? args.messageTtl : undefined;
            resourceInputs["queueName"] = args ? args.queueName : undefined;
            resourceInputs["virtualHostName"] = args ? args.virtualHostName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AmqpQueue.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AmqpQueue resources.
 */
export interface AmqpQueueState {
    autoDeleteState?: pulumi.Input<boolean>;
    autoExpireState?: pulumi.Input<string>;
    deadLetterExchange?: pulumi.Input<string>;
    deadLetterRoutingKey?: pulumi.Input<string>;
    exclusiveState?: pulumi.Input<boolean>;
    instanceId?: pulumi.Input<string>;
    maxLength?: pulumi.Input<string>;
    maximumPriority?: pulumi.Input<number>;
    messageTtl?: pulumi.Input<string>;
    queueName?: pulumi.Input<string>;
    virtualHostName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AmqpQueue resource.
 */
export interface AmqpQueueArgs {
    autoDeleteState?: pulumi.Input<boolean>;
    autoExpireState?: pulumi.Input<string>;
    deadLetterExchange?: pulumi.Input<string>;
    deadLetterRoutingKey?: pulumi.Input<string>;
    exclusiveState?: pulumi.Input<boolean>;
    instanceId: pulumi.Input<string>;
    maxLength?: pulumi.Input<string>;
    maximumPriority?: pulumi.Input<number>;
    messageTtl?: pulumi.Input<string>;
    queueName: pulumi.Input<string>;
    virtualHostName: pulumi.Input<string>;
}
