// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRouterInterfaces(args?: GetRouterInterfacesArgs, opts?: pulumi.InvokeOptions): Promise<GetRouterInterfacesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("alicloud:index/getRouterInterfaces:getRouterInterfaces", {
        "id": args.id,
        "ids": args.ids,
        "nameRegex": args.nameRegex,
        "oppositeInterfaceId": args.oppositeInterfaceId,
        "oppositeInterfaceOwnerId": args.oppositeInterfaceOwnerId,
        "outputFile": args.outputFile,
        "role": args.role,
        "routerId": args.routerId,
        "routerType": args.routerType,
        "specification": args.specification,
        "status": args.status,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRouterInterfaces.
 */
export interface GetRouterInterfacesArgs {
    id?: string;
    ids?: string[];
    nameRegex?: string;
    oppositeInterfaceId?: string;
    oppositeInterfaceOwnerId?: string;
    outputFile?: string;
    role?: string;
    routerId?: string;
    routerType?: string;
    specification?: string;
    status?: string;
}

/**
 * A collection of values returned by getRouterInterfaces.
 */
export interface GetRouterInterfacesResult {
    readonly id: string;
    readonly ids: string[];
    readonly interfaces: outputs.GetRouterInterfacesInterface[];
    readonly nameRegex?: string;
    readonly names: string[];
    readonly oppositeInterfaceId?: string;
    readonly oppositeInterfaceOwnerId?: string;
    readonly outputFile?: string;
    readonly role?: string;
    readonly routerId?: string;
    readonly routerType?: string;
    readonly specification?: string;
    readonly status?: string;
}
export function getRouterInterfacesOutput(args?: GetRouterInterfacesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRouterInterfacesResult> {
    return pulumi.output(args).apply((a: any) => getRouterInterfaces(a, opts))
}

/**
 * A collection of arguments for invoking getRouterInterfaces.
 */
export interface GetRouterInterfacesOutputArgs {
    id?: pulumi.Input<string>;
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    nameRegex?: pulumi.Input<string>;
    oppositeInterfaceId?: pulumi.Input<string>;
    oppositeInterfaceOwnerId?: pulumi.Input<string>;
    outputFile?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    routerId?: pulumi.Input<string>;
    routerType?: pulumi.Input<string>;
    specification?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}
