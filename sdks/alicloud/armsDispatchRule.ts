// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ArmsDispatchRule extends pulumi.CustomResource {
    /**
     * Get an existing ArmsDispatchRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ArmsDispatchRuleState, opts?: pulumi.CustomResourceOptions): ArmsDispatchRule {
        return new ArmsDispatchRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/armsDispatchRule:ArmsDispatchRule';

    /**
     * Returns true if the given object is an instance of ArmsDispatchRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ArmsDispatchRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ArmsDispatchRule.__pulumiType;
    }

    public readonly dispatchRuleName!: pulumi.Output<string>;
    public readonly dispatchType!: pulumi.Output<string | undefined>;
    public readonly groupRules!: pulumi.Output<outputs.ArmsDispatchRuleGroupRule[]>;
    public readonly isRecover!: pulumi.Output<boolean | undefined>;
    public readonly labelMatchExpressionGrids!: pulumi.Output<outputs.ArmsDispatchRuleLabelMatchExpressionGrid[]>;
    public readonly notifyRules!: pulumi.Output<outputs.ArmsDispatchRuleNotifyRule[]>;
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a ArmsDispatchRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ArmsDispatchRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ArmsDispatchRuleArgs | ArmsDispatchRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ArmsDispatchRuleState | undefined;
            resourceInputs["dispatchRuleName"] = state ? state.dispatchRuleName : undefined;
            resourceInputs["dispatchType"] = state ? state.dispatchType : undefined;
            resourceInputs["groupRules"] = state ? state.groupRules : undefined;
            resourceInputs["isRecover"] = state ? state.isRecover : undefined;
            resourceInputs["labelMatchExpressionGrids"] = state ? state.labelMatchExpressionGrids : undefined;
            resourceInputs["notifyRules"] = state ? state.notifyRules : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as ArmsDispatchRuleArgs | undefined;
            if ((!args || args.dispatchRuleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dispatchRuleName'");
            }
            if ((!args || args.groupRules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupRules'");
            }
            if ((!args || args.labelMatchExpressionGrids === undefined) && !opts.urn) {
                throw new Error("Missing required property 'labelMatchExpressionGrids'");
            }
            if ((!args || args.notifyRules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notifyRules'");
            }
            resourceInputs["dispatchRuleName"] = args ? args.dispatchRuleName : undefined;
            resourceInputs["dispatchType"] = args ? args.dispatchType : undefined;
            resourceInputs["groupRules"] = args ? args.groupRules : undefined;
            resourceInputs["isRecover"] = args ? args.isRecover : undefined;
            resourceInputs["labelMatchExpressionGrids"] = args ? args.labelMatchExpressionGrids : undefined;
            resourceInputs["notifyRules"] = args ? args.notifyRules : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ArmsDispatchRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ArmsDispatchRule resources.
 */
export interface ArmsDispatchRuleState {
    dispatchRuleName?: pulumi.Input<string>;
    dispatchType?: pulumi.Input<string>;
    groupRules?: pulumi.Input<pulumi.Input<inputs.ArmsDispatchRuleGroupRule>[]>;
    isRecover?: pulumi.Input<boolean>;
    labelMatchExpressionGrids?: pulumi.Input<pulumi.Input<inputs.ArmsDispatchRuleLabelMatchExpressionGrid>[]>;
    notifyRules?: pulumi.Input<pulumi.Input<inputs.ArmsDispatchRuleNotifyRule>[]>;
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ArmsDispatchRule resource.
 */
export interface ArmsDispatchRuleArgs {
    dispatchRuleName: pulumi.Input<string>;
    dispatchType?: pulumi.Input<string>;
    groupRules: pulumi.Input<pulumi.Input<inputs.ArmsDispatchRuleGroupRule>[]>;
    isRecover?: pulumi.Input<boolean>;
    labelMatchExpressionGrids: pulumi.Input<pulumi.Input<inputs.ArmsDispatchRuleLabelMatchExpressionGrid>[]>;
    notifyRules: pulumi.Input<pulumi.Input<inputs.ArmsDispatchRuleNotifyRule>[]>;
}
