// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NlbListener extends pulumi.CustomResource {
    /**
     * Get an existing NlbListener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NlbListenerState, opts?: pulumi.CustomResourceOptions): NlbListener {
        return new NlbListener(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/nlbListener:NlbListener';

    /**
     * Returns true if the given object is an instance of NlbListener.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NlbListener {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NlbListener.__pulumiType;
    }

    public readonly alpnEnabled!: pulumi.Output<boolean>;
    public readonly alpnPolicy!: pulumi.Output<string | undefined>;
    public readonly caCertificateIds!: pulumi.Output<string[] | undefined>;
    public readonly caEnabled!: pulumi.Output<boolean>;
    public readonly certificateIds!: pulumi.Output<string[] | undefined>;
    public readonly cps!: pulumi.Output<number | undefined>;
    public readonly endPort!: pulumi.Output<number | undefined>;
    public readonly idleTimeout!: pulumi.Output<number>;
    public readonly listenerDescription!: pulumi.Output<string | undefined>;
    public readonly listenerPort!: pulumi.Output<number>;
    public readonly listenerProtocol!: pulumi.Output<string>;
    public readonly loadBalancerId!: pulumi.Output<string>;
    public readonly mss!: pulumi.Output<number | undefined>;
    public readonly proxyProtocolEnabled!: pulumi.Output<boolean>;
    public readonly secSensorEnabled!: pulumi.Output<boolean>;
    public readonly securityPolicyId!: pulumi.Output<string>;
    public readonly serverGroupId!: pulumi.Output<string>;
    public readonly startPort!: pulumi.Output<number | undefined>;
    public readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.NlbListenerTimeouts | undefined>;

    /**
     * Create a NlbListener resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NlbListenerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NlbListenerArgs | NlbListenerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NlbListenerState | undefined;
            resourceInputs["alpnEnabled"] = state ? state.alpnEnabled : undefined;
            resourceInputs["alpnPolicy"] = state ? state.alpnPolicy : undefined;
            resourceInputs["caCertificateIds"] = state ? state.caCertificateIds : undefined;
            resourceInputs["caEnabled"] = state ? state.caEnabled : undefined;
            resourceInputs["certificateIds"] = state ? state.certificateIds : undefined;
            resourceInputs["cps"] = state ? state.cps : undefined;
            resourceInputs["endPort"] = state ? state.endPort : undefined;
            resourceInputs["idleTimeout"] = state ? state.idleTimeout : undefined;
            resourceInputs["listenerDescription"] = state ? state.listenerDescription : undefined;
            resourceInputs["listenerPort"] = state ? state.listenerPort : undefined;
            resourceInputs["listenerProtocol"] = state ? state.listenerProtocol : undefined;
            resourceInputs["loadBalancerId"] = state ? state.loadBalancerId : undefined;
            resourceInputs["mss"] = state ? state.mss : undefined;
            resourceInputs["proxyProtocolEnabled"] = state ? state.proxyProtocolEnabled : undefined;
            resourceInputs["secSensorEnabled"] = state ? state.secSensorEnabled : undefined;
            resourceInputs["securityPolicyId"] = state ? state.securityPolicyId : undefined;
            resourceInputs["serverGroupId"] = state ? state.serverGroupId : undefined;
            resourceInputs["startPort"] = state ? state.startPort : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as NlbListenerArgs | undefined;
            if ((!args || args.listenerPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenerPort'");
            }
            if ((!args || args.listenerProtocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenerProtocol'");
            }
            if ((!args || args.loadBalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerId'");
            }
            if ((!args || args.serverGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverGroupId'");
            }
            resourceInputs["alpnEnabled"] = args ? args.alpnEnabled : undefined;
            resourceInputs["alpnPolicy"] = args ? args.alpnPolicy : undefined;
            resourceInputs["caCertificateIds"] = args ? args.caCertificateIds : undefined;
            resourceInputs["caEnabled"] = args ? args.caEnabled : undefined;
            resourceInputs["certificateIds"] = args ? args.certificateIds : undefined;
            resourceInputs["cps"] = args ? args.cps : undefined;
            resourceInputs["endPort"] = args ? args.endPort : undefined;
            resourceInputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            resourceInputs["listenerDescription"] = args ? args.listenerDescription : undefined;
            resourceInputs["listenerPort"] = args ? args.listenerPort : undefined;
            resourceInputs["listenerProtocol"] = args ? args.listenerProtocol : undefined;
            resourceInputs["loadBalancerId"] = args ? args.loadBalancerId : undefined;
            resourceInputs["mss"] = args ? args.mss : undefined;
            resourceInputs["proxyProtocolEnabled"] = args ? args.proxyProtocolEnabled : undefined;
            resourceInputs["secSensorEnabled"] = args ? args.secSensorEnabled : undefined;
            resourceInputs["securityPolicyId"] = args ? args.securityPolicyId : undefined;
            resourceInputs["serverGroupId"] = args ? args.serverGroupId : undefined;
            resourceInputs["startPort"] = args ? args.startPort : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NlbListener.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NlbListener resources.
 */
export interface NlbListenerState {
    alpnEnabled?: pulumi.Input<boolean>;
    alpnPolicy?: pulumi.Input<string>;
    caCertificateIds?: pulumi.Input<pulumi.Input<string>[]>;
    caEnabled?: pulumi.Input<boolean>;
    certificateIds?: pulumi.Input<pulumi.Input<string>[]>;
    cps?: pulumi.Input<number>;
    endPort?: pulumi.Input<number>;
    idleTimeout?: pulumi.Input<number>;
    listenerDescription?: pulumi.Input<string>;
    listenerPort?: pulumi.Input<number>;
    listenerProtocol?: pulumi.Input<string>;
    loadBalancerId?: pulumi.Input<string>;
    mss?: pulumi.Input<number>;
    proxyProtocolEnabled?: pulumi.Input<boolean>;
    secSensorEnabled?: pulumi.Input<boolean>;
    securityPolicyId?: pulumi.Input<string>;
    serverGroupId?: pulumi.Input<string>;
    startPort?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.NlbListenerTimeouts>;
}

/**
 * The set of arguments for constructing a NlbListener resource.
 */
export interface NlbListenerArgs {
    alpnEnabled?: pulumi.Input<boolean>;
    alpnPolicy?: pulumi.Input<string>;
    caCertificateIds?: pulumi.Input<pulumi.Input<string>[]>;
    caEnabled?: pulumi.Input<boolean>;
    certificateIds?: pulumi.Input<pulumi.Input<string>[]>;
    cps?: pulumi.Input<number>;
    endPort?: pulumi.Input<number>;
    idleTimeout?: pulumi.Input<number>;
    listenerDescription?: pulumi.Input<string>;
    listenerPort: pulumi.Input<number>;
    listenerProtocol: pulumi.Input<string>;
    loadBalancerId: pulumi.Input<string>;
    mss?: pulumi.Input<number>;
    proxyProtocolEnabled?: pulumi.Input<boolean>;
    secSensorEnabled?: pulumi.Input<boolean>;
    securityPolicyId?: pulumi.Input<string>;
    serverGroupId: pulumi.Input<string>;
    startPort?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.NlbListenerTimeouts>;
}
