// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EciContainerGroup extends pulumi.CustomResource {
    /**
     * Get an existing EciContainerGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EciContainerGroupState, opts?: pulumi.CustomResourceOptions): EciContainerGroup {
        return new EciContainerGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/eciContainerGroup:EciContainerGroup';

    /**
     * Returns true if the given object is an instance of EciContainerGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EciContainerGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EciContainerGroup.__pulumiType;
    }

    public readonly acrRegistryInfos!: pulumi.Output<outputs.EciContainerGroupAcrRegistryInfo[] | undefined>;
    public readonly autoCreateEip!: pulumi.Output<boolean | undefined>;
    public readonly autoMatchImageCache!: pulumi.Output<boolean>;
    public readonly containerGroupName!: pulumi.Output<string>;
    public readonly containers!: pulumi.Output<outputs.EciContainerGroupContainer[]>;
    public readonly cpu!: pulumi.Output<number>;
    public readonly dnsConfig!: pulumi.Output<outputs.EciContainerGroupDnsConfig | undefined>;
    public readonly eciSecurityContext!: pulumi.Output<outputs.EciContainerGroupEciSecurityContext | undefined>;
    public readonly eipBandwidth!: pulumi.Output<number | undefined>;
    public readonly eipInstanceId!: pulumi.Output<string | undefined>;
    public readonly hostAliases!: pulumi.Output<outputs.EciContainerGroupHostAlias[] | undefined>;
    public readonly imageRegistryCredentials!: pulumi.Output<outputs.EciContainerGroupImageRegistryCredential[] | undefined>;
    public readonly initContainers!: pulumi.Output<outputs.EciContainerGroupInitContainer[] | undefined>;
    public readonly insecureRegistry!: pulumi.Output<string | undefined>;
    public readonly instanceType!: pulumi.Output<string>;
    public /*out*/ readonly internetIp!: pulumi.Output<string>;
    public /*out*/ readonly intranetIp!: pulumi.Output<string>;
    public readonly memory!: pulumi.Output<number>;
    public readonly plainHttpRegistry!: pulumi.Output<string | undefined>;
    public readonly ramRoleName!: pulumi.Output<string | undefined>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly restartPolicy!: pulumi.Output<string>;
    public readonly securityContext!: pulumi.Output<outputs.EciContainerGroupSecurityContext | undefined>;
    public readonly securityGroupId!: pulumi.Output<string>;
    public readonly spotPriceLimit!: pulumi.Output<number>;
    public readonly spotStrategy!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly terminationGracePeriodSeconds!: pulumi.Output<number | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.EciContainerGroupTimeouts | undefined>;
    public readonly volumes!: pulumi.Output<outputs.EciContainerGroupVolume[] | undefined>;
    public readonly vswitchId!: pulumi.Output<string>;
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a EciContainerGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EciContainerGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EciContainerGroupArgs | EciContainerGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EciContainerGroupState | undefined;
            resourceInputs["acrRegistryInfos"] = state ? state.acrRegistryInfos : undefined;
            resourceInputs["autoCreateEip"] = state ? state.autoCreateEip : undefined;
            resourceInputs["autoMatchImageCache"] = state ? state.autoMatchImageCache : undefined;
            resourceInputs["containerGroupName"] = state ? state.containerGroupName : undefined;
            resourceInputs["containers"] = state ? state.containers : undefined;
            resourceInputs["cpu"] = state ? state.cpu : undefined;
            resourceInputs["dnsConfig"] = state ? state.dnsConfig : undefined;
            resourceInputs["eciSecurityContext"] = state ? state.eciSecurityContext : undefined;
            resourceInputs["eipBandwidth"] = state ? state.eipBandwidth : undefined;
            resourceInputs["eipInstanceId"] = state ? state.eipInstanceId : undefined;
            resourceInputs["hostAliases"] = state ? state.hostAliases : undefined;
            resourceInputs["imageRegistryCredentials"] = state ? state.imageRegistryCredentials : undefined;
            resourceInputs["initContainers"] = state ? state.initContainers : undefined;
            resourceInputs["insecureRegistry"] = state ? state.insecureRegistry : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["internetIp"] = state ? state.internetIp : undefined;
            resourceInputs["intranetIp"] = state ? state.intranetIp : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["plainHttpRegistry"] = state ? state.plainHttpRegistry : undefined;
            resourceInputs["ramRoleName"] = state ? state.ramRoleName : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["restartPolicy"] = state ? state.restartPolicy : undefined;
            resourceInputs["securityContext"] = state ? state.securityContext : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["spotPriceLimit"] = state ? state.spotPriceLimit : undefined;
            resourceInputs["spotStrategy"] = state ? state.spotStrategy : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["terminationGracePeriodSeconds"] = state ? state.terminationGracePeriodSeconds : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["volumes"] = state ? state.volumes : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as EciContainerGroupArgs | undefined;
            if ((!args || args.containerGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerGroupName'");
            }
            if ((!args || args.containers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containers'");
            }
            if ((!args || args.securityGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            if ((!args || args.vswitchId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vswitchId'");
            }
            resourceInputs["acrRegistryInfos"] = args ? args.acrRegistryInfos : undefined;
            resourceInputs["autoCreateEip"] = args ? args.autoCreateEip : undefined;
            resourceInputs["autoMatchImageCache"] = args ? args.autoMatchImageCache : undefined;
            resourceInputs["containerGroupName"] = args ? args.containerGroupName : undefined;
            resourceInputs["containers"] = args ? args.containers : undefined;
            resourceInputs["cpu"] = args ? args.cpu : undefined;
            resourceInputs["dnsConfig"] = args ? args.dnsConfig : undefined;
            resourceInputs["eciSecurityContext"] = args ? args.eciSecurityContext : undefined;
            resourceInputs["eipBandwidth"] = args ? args.eipBandwidth : undefined;
            resourceInputs["eipInstanceId"] = args ? args.eipInstanceId : undefined;
            resourceInputs["hostAliases"] = args ? args.hostAliases : undefined;
            resourceInputs["imageRegistryCredentials"] = args ? args.imageRegistryCredentials : undefined;
            resourceInputs["initContainers"] = args ? args.initContainers : undefined;
            resourceInputs["insecureRegistry"] = args ? args.insecureRegistry : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["plainHttpRegistry"] = args ? args.plainHttpRegistry : undefined;
            resourceInputs["ramRoleName"] = args ? args.ramRoleName : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["restartPolicy"] = args ? args.restartPolicy : undefined;
            resourceInputs["securityContext"] = args ? args.securityContext : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["spotPriceLimit"] = args ? args.spotPriceLimit : undefined;
            resourceInputs["spotStrategy"] = args ? args.spotStrategy : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["terminationGracePeriodSeconds"] = args ? args.terminationGracePeriodSeconds : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["volumes"] = args ? args.volumes : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["internetIp"] = undefined /*out*/;
            resourceInputs["intranetIp"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EciContainerGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EciContainerGroup resources.
 */
export interface EciContainerGroupState {
    acrRegistryInfos?: pulumi.Input<pulumi.Input<inputs.EciContainerGroupAcrRegistryInfo>[]>;
    autoCreateEip?: pulumi.Input<boolean>;
    autoMatchImageCache?: pulumi.Input<boolean>;
    containerGroupName?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.EciContainerGroupContainer>[]>;
    cpu?: pulumi.Input<number>;
    dnsConfig?: pulumi.Input<inputs.EciContainerGroupDnsConfig>;
    eciSecurityContext?: pulumi.Input<inputs.EciContainerGroupEciSecurityContext>;
    eipBandwidth?: pulumi.Input<number>;
    eipInstanceId?: pulumi.Input<string>;
    hostAliases?: pulumi.Input<pulumi.Input<inputs.EciContainerGroupHostAlias>[]>;
    imageRegistryCredentials?: pulumi.Input<pulumi.Input<inputs.EciContainerGroupImageRegistryCredential>[]>;
    initContainers?: pulumi.Input<pulumi.Input<inputs.EciContainerGroupInitContainer>[]>;
    insecureRegistry?: pulumi.Input<string>;
    instanceType?: pulumi.Input<string>;
    internetIp?: pulumi.Input<string>;
    intranetIp?: pulumi.Input<string>;
    memory?: pulumi.Input<number>;
    plainHttpRegistry?: pulumi.Input<string>;
    ramRoleName?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    restartPolicy?: pulumi.Input<string>;
    securityContext?: pulumi.Input<inputs.EciContainerGroupSecurityContext>;
    securityGroupId?: pulumi.Input<string>;
    spotPriceLimit?: pulumi.Input<number>;
    spotStrategy?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    terminationGracePeriodSeconds?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.EciContainerGroupTimeouts>;
    volumes?: pulumi.Input<pulumi.Input<inputs.EciContainerGroupVolume>[]>;
    vswitchId?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EciContainerGroup resource.
 */
export interface EciContainerGroupArgs {
    acrRegistryInfos?: pulumi.Input<pulumi.Input<inputs.EciContainerGroupAcrRegistryInfo>[]>;
    autoCreateEip?: pulumi.Input<boolean>;
    autoMatchImageCache?: pulumi.Input<boolean>;
    containerGroupName: pulumi.Input<string>;
    containers: pulumi.Input<pulumi.Input<inputs.EciContainerGroupContainer>[]>;
    cpu?: pulumi.Input<number>;
    dnsConfig?: pulumi.Input<inputs.EciContainerGroupDnsConfig>;
    eciSecurityContext?: pulumi.Input<inputs.EciContainerGroupEciSecurityContext>;
    eipBandwidth?: pulumi.Input<number>;
    eipInstanceId?: pulumi.Input<string>;
    hostAliases?: pulumi.Input<pulumi.Input<inputs.EciContainerGroupHostAlias>[]>;
    imageRegistryCredentials?: pulumi.Input<pulumi.Input<inputs.EciContainerGroupImageRegistryCredential>[]>;
    initContainers?: pulumi.Input<pulumi.Input<inputs.EciContainerGroupInitContainer>[]>;
    insecureRegistry?: pulumi.Input<string>;
    instanceType?: pulumi.Input<string>;
    memory?: pulumi.Input<number>;
    plainHttpRegistry?: pulumi.Input<string>;
    ramRoleName?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    restartPolicy?: pulumi.Input<string>;
    securityContext?: pulumi.Input<inputs.EciContainerGroupSecurityContext>;
    securityGroupId: pulumi.Input<string>;
    spotPriceLimit?: pulumi.Input<number>;
    spotStrategy?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    terminationGracePeriodSeconds?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.EciContainerGroupTimeouts>;
    volumes?: pulumi.Input<pulumi.Input<inputs.EciContainerGroupVolume>[]>;
    vswitchId: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}
