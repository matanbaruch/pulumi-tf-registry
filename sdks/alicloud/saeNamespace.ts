// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SaeNamespace extends pulumi.CustomResource {
    /**
     * Get an existing SaeNamespace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SaeNamespaceState, opts?: pulumi.CustomResourceOptions): SaeNamespace {
        return new SaeNamespace(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/saeNamespace:SaeNamespace';

    /**
     * Returns true if the given object is an instance of SaeNamespace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SaeNamespace {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SaeNamespace.__pulumiType;
    }

    public readonly enableMicroRegistration!: pulumi.Output<boolean>;
    public readonly namespaceDescription!: pulumi.Output<string | undefined>;
    public readonly namespaceId!: pulumi.Output<string>;
    public readonly namespaceName!: pulumi.Output<string>;
    public readonly namespaceShortId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.SaeNamespaceTimeouts | undefined>;

    /**
     * Create a SaeNamespace resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SaeNamespaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SaeNamespaceArgs | SaeNamespaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SaeNamespaceState | undefined;
            resourceInputs["enableMicroRegistration"] = state ? state.enableMicroRegistration : undefined;
            resourceInputs["namespaceDescription"] = state ? state.namespaceDescription : undefined;
            resourceInputs["namespaceId"] = state ? state.namespaceId : undefined;
            resourceInputs["namespaceName"] = state ? state.namespaceName : undefined;
            resourceInputs["namespaceShortId"] = state ? state.namespaceShortId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as SaeNamespaceArgs | undefined;
            if ((!args || args.namespaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespaceName'");
            }
            resourceInputs["enableMicroRegistration"] = args ? args.enableMicroRegistration : undefined;
            resourceInputs["namespaceDescription"] = args ? args.namespaceDescription : undefined;
            resourceInputs["namespaceId"] = args ? args.namespaceId : undefined;
            resourceInputs["namespaceName"] = args ? args.namespaceName : undefined;
            resourceInputs["namespaceShortId"] = args ? args.namespaceShortId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SaeNamespace.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SaeNamespace resources.
 */
export interface SaeNamespaceState {
    enableMicroRegistration?: pulumi.Input<boolean>;
    namespaceDescription?: pulumi.Input<string>;
    namespaceId?: pulumi.Input<string>;
    namespaceName?: pulumi.Input<string>;
    namespaceShortId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SaeNamespaceTimeouts>;
}

/**
 * The set of arguments for constructing a SaeNamespace resource.
 */
export interface SaeNamespaceArgs {
    enableMicroRegistration?: pulumi.Input<boolean>;
    namespaceDescription?: pulumi.Input<string>;
    namespaceId?: pulumi.Input<string>;
    namespaceName: pulumi.Input<string>;
    namespaceShortId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SaeNamespaceTimeouts>;
}
