// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EventBridgeApiDestination extends pulumi.CustomResource {
    /**
     * Get an existing EventBridgeApiDestination resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EventBridgeApiDestinationState, opts?: pulumi.CustomResourceOptions): EventBridgeApiDestination {
        return new EventBridgeApiDestination(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/eventBridgeApiDestination:EventBridgeApiDestination';

    /**
     * Returns true if the given object is an instance of EventBridgeApiDestination.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventBridgeApiDestination {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventBridgeApiDestination.__pulumiType;
    }

    public readonly apiDestinationName!: pulumi.Output<string>;
    public readonly connectionName!: pulumi.Output<string>;
    public /*out*/ readonly createTime!: pulumi.Output<number>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly httpApiParameters!: pulumi.Output<outputs.EventBridgeApiDestinationHttpApiParameters>;
    public readonly timeouts!: pulumi.Output<outputs.EventBridgeApiDestinationTimeouts | undefined>;

    /**
     * Create a EventBridgeApiDestination resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventBridgeApiDestinationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EventBridgeApiDestinationArgs | EventBridgeApiDestinationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EventBridgeApiDestinationState | undefined;
            resourceInputs["apiDestinationName"] = state ? state.apiDestinationName : undefined;
            resourceInputs["connectionName"] = state ? state.connectionName : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["httpApiParameters"] = state ? state.httpApiParameters : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as EventBridgeApiDestinationArgs | undefined;
            if ((!args || args.apiDestinationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiDestinationName'");
            }
            if ((!args || args.connectionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionName'");
            }
            if ((!args || args.httpApiParameters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'httpApiParameters'");
            }
            resourceInputs["apiDestinationName"] = args ? args.apiDestinationName : undefined;
            resourceInputs["connectionName"] = args ? args.connectionName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["httpApiParameters"] = args ? args.httpApiParameters : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EventBridgeApiDestination.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EventBridgeApiDestination resources.
 */
export interface EventBridgeApiDestinationState {
    apiDestinationName?: pulumi.Input<string>;
    connectionName?: pulumi.Input<string>;
    createTime?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    httpApiParameters?: pulumi.Input<inputs.EventBridgeApiDestinationHttpApiParameters>;
    timeouts?: pulumi.Input<inputs.EventBridgeApiDestinationTimeouts>;
}

/**
 * The set of arguments for constructing a EventBridgeApiDestination resource.
 */
export interface EventBridgeApiDestinationArgs {
    apiDestinationName: pulumi.Input<string>;
    connectionName: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    httpApiParameters: pulumi.Input<inputs.EventBridgeApiDestinationHttpApiParameters>;
    timeouts?: pulumi.Input<inputs.EventBridgeApiDestinationTimeouts>;
}
