// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ThreatDetectionHoneypotPreset extends pulumi.CustomResource {
    /**
     * Get an existing ThreatDetectionHoneypotPreset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ThreatDetectionHoneypotPresetState, opts?: pulumi.CustomResourceOptions): ThreatDetectionHoneypotPreset {
        return new ThreatDetectionHoneypotPreset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/threatDetectionHoneypotPreset:ThreatDetectionHoneypotPreset';

    /**
     * Returns true if the given object is an instance of ThreatDetectionHoneypotPreset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ThreatDetectionHoneypotPreset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ThreatDetectionHoneypotPreset.__pulumiType;
    }

    public readonly honeypotImageName!: pulumi.Output<string>;
    public /*out*/ readonly honeypotPresetId!: pulumi.Output<string>;
    public readonly meta!: pulumi.Output<outputs.ThreatDetectionHoneypotPresetMeta>;
    public readonly nodeId!: pulumi.Output<string>;
    public readonly presetName!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ThreatDetectionHoneypotPresetTimeouts | undefined>;

    /**
     * Create a ThreatDetectionHoneypotPreset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ThreatDetectionHoneypotPresetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ThreatDetectionHoneypotPresetArgs | ThreatDetectionHoneypotPresetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ThreatDetectionHoneypotPresetState | undefined;
            resourceInputs["honeypotImageName"] = state ? state.honeypotImageName : undefined;
            resourceInputs["honeypotPresetId"] = state ? state.honeypotPresetId : undefined;
            resourceInputs["meta"] = state ? state.meta : undefined;
            resourceInputs["nodeId"] = state ? state.nodeId : undefined;
            resourceInputs["presetName"] = state ? state.presetName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ThreatDetectionHoneypotPresetArgs | undefined;
            if ((!args || args.honeypotImageName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'honeypotImageName'");
            }
            if ((!args || args.meta === undefined) && !opts.urn) {
                throw new Error("Missing required property 'meta'");
            }
            if ((!args || args.nodeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeId'");
            }
            if ((!args || args.presetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'presetName'");
            }
            resourceInputs["honeypotImageName"] = args ? args.honeypotImageName : undefined;
            resourceInputs["meta"] = args ? args.meta : undefined;
            resourceInputs["nodeId"] = args ? args.nodeId : undefined;
            resourceInputs["presetName"] = args ? args.presetName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["honeypotPresetId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ThreatDetectionHoneypotPreset.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ThreatDetectionHoneypotPreset resources.
 */
export interface ThreatDetectionHoneypotPresetState {
    honeypotImageName?: pulumi.Input<string>;
    honeypotPresetId?: pulumi.Input<string>;
    meta?: pulumi.Input<inputs.ThreatDetectionHoneypotPresetMeta>;
    nodeId?: pulumi.Input<string>;
    presetName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ThreatDetectionHoneypotPresetTimeouts>;
}

/**
 * The set of arguments for constructing a ThreatDetectionHoneypotPreset resource.
 */
export interface ThreatDetectionHoneypotPresetArgs {
    honeypotImageName: pulumi.Input<string>;
    meta: pulumi.Input<inputs.ThreatDetectionHoneypotPresetMeta>;
    nodeId: pulumi.Input<string>;
    presetName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ThreatDetectionHoneypotPresetTimeouts>;
}
