// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OtsSearchIndex extends pulumi.CustomResource {
    /**
     * Get an existing OtsSearchIndex resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OtsSearchIndexState, opts?: pulumi.CustomResourceOptions): OtsSearchIndex {
        return new OtsSearchIndex(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/otsSearchIndex:OtsSearchIndex';

    /**
     * Returns true if the given object is an instance of OtsSearchIndex.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OtsSearchIndex {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OtsSearchIndex.__pulumiType;
    }

    public /*out*/ readonly createTime!: pulumi.Output<number>;
    public /*out*/ readonly currentSyncTimestamp!: pulumi.Output<number>;
    public /*out*/ readonly indexId!: pulumi.Output<string>;
    public readonly indexName!: pulumi.Output<string>;
    public readonly instanceName!: pulumi.Output<string>;
    public readonly schemas!: pulumi.Output<outputs.OtsSearchIndexSchema[]>;
    public /*out*/ readonly syncPhase!: pulumi.Output<string>;
    public readonly tableName!: pulumi.Output<string>;
    public readonly timeToLive!: pulumi.Output<number | undefined>;

    /**
     * Create a OtsSearchIndex resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OtsSearchIndexArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OtsSearchIndexArgs | OtsSearchIndexState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OtsSearchIndexState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["currentSyncTimestamp"] = state ? state.currentSyncTimestamp : undefined;
            resourceInputs["indexId"] = state ? state.indexId : undefined;
            resourceInputs["indexName"] = state ? state.indexName : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["schemas"] = state ? state.schemas : undefined;
            resourceInputs["syncPhase"] = state ? state.syncPhase : undefined;
            resourceInputs["tableName"] = state ? state.tableName : undefined;
            resourceInputs["timeToLive"] = state ? state.timeToLive : undefined;
        } else {
            const args = argsOrState as OtsSearchIndexArgs | undefined;
            if ((!args || args.indexName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'indexName'");
            }
            if ((!args || args.instanceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceName'");
            }
            if ((!args || args.schemas === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemas'");
            }
            if ((!args || args.tableName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tableName'");
            }
            resourceInputs["indexName"] = args ? args.indexName : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["schemas"] = args ? args.schemas : undefined;
            resourceInputs["tableName"] = args ? args.tableName : undefined;
            resourceInputs["timeToLive"] = args ? args.timeToLive : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["currentSyncTimestamp"] = undefined /*out*/;
            resourceInputs["indexId"] = undefined /*out*/;
            resourceInputs["syncPhase"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OtsSearchIndex.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OtsSearchIndex resources.
 */
export interface OtsSearchIndexState {
    createTime?: pulumi.Input<number>;
    currentSyncTimestamp?: pulumi.Input<number>;
    indexId?: pulumi.Input<string>;
    indexName?: pulumi.Input<string>;
    instanceName?: pulumi.Input<string>;
    schemas?: pulumi.Input<pulumi.Input<inputs.OtsSearchIndexSchema>[]>;
    syncPhase?: pulumi.Input<string>;
    tableName?: pulumi.Input<string>;
    timeToLive?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a OtsSearchIndex resource.
 */
export interface OtsSearchIndexArgs {
    indexName: pulumi.Input<string>;
    instanceName: pulumi.Input<string>;
    schemas: pulumi.Input<pulumi.Input<inputs.OtsSearchIndexSchema>[]>;
    tableName: pulumi.Input<string>;
    timeToLive?: pulumi.Input<number>;
}
