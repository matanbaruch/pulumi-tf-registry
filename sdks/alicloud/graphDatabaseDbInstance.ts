// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GraphDatabaseDbInstance extends pulumi.CustomResource {
    /**
     * Get an existing GraphDatabaseDbInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GraphDatabaseDbInstanceState, opts?: pulumi.CustomResourceOptions): GraphDatabaseDbInstance {
        return new GraphDatabaseDbInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/graphDatabaseDbInstance:GraphDatabaseDbInstance';

    /**
     * Returns true if the given object is an instance of GraphDatabaseDbInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GraphDatabaseDbInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GraphDatabaseDbInstance.__pulumiType;
    }

    public /*out*/ readonly connectionString!: pulumi.Output<string>;
    public readonly dbInstanceCategory!: pulumi.Output<string>;
    public readonly dbInstanceDescription!: pulumi.Output<string | undefined>;
    public readonly dbInstanceIpArrays!: pulumi.Output<outputs.GraphDatabaseDbInstanceDbInstanceIpArray[] | undefined>;
    public readonly dbInstanceNetworkType!: pulumi.Output<string>;
    public readonly dbInstanceStorageType!: pulumi.Output<string>;
    public readonly dbNodeClass!: pulumi.Output<string>;
    public readonly dbNodeStorage!: pulumi.Output<number>;
    public readonly dbVersion!: pulumi.Output<string>;
    public readonly paymentType!: pulumi.Output<string>;
    public /*out*/ readonly port!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.GraphDatabaseDbInstanceTimeouts | undefined>;
    public readonly vpcId!: pulumi.Output<string>;
    public readonly vswitchId!: pulumi.Output<string>;
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a GraphDatabaseDbInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GraphDatabaseDbInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GraphDatabaseDbInstanceArgs | GraphDatabaseDbInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GraphDatabaseDbInstanceState | undefined;
            resourceInputs["connectionString"] = state ? state.connectionString : undefined;
            resourceInputs["dbInstanceCategory"] = state ? state.dbInstanceCategory : undefined;
            resourceInputs["dbInstanceDescription"] = state ? state.dbInstanceDescription : undefined;
            resourceInputs["dbInstanceIpArrays"] = state ? state.dbInstanceIpArrays : undefined;
            resourceInputs["dbInstanceNetworkType"] = state ? state.dbInstanceNetworkType : undefined;
            resourceInputs["dbInstanceStorageType"] = state ? state.dbInstanceStorageType : undefined;
            resourceInputs["dbNodeClass"] = state ? state.dbNodeClass : undefined;
            resourceInputs["dbNodeStorage"] = state ? state.dbNodeStorage : undefined;
            resourceInputs["dbVersion"] = state ? state.dbVersion : undefined;
            resourceInputs["paymentType"] = state ? state.paymentType : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as GraphDatabaseDbInstanceArgs | undefined;
            if ((!args || args.dbInstanceCategory === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbInstanceCategory'");
            }
            if ((!args || args.dbInstanceNetworkType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbInstanceNetworkType'");
            }
            if ((!args || args.dbInstanceStorageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbInstanceStorageType'");
            }
            if ((!args || args.dbNodeClass === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbNodeClass'");
            }
            if ((!args || args.dbNodeStorage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbNodeStorage'");
            }
            if ((!args || args.dbVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbVersion'");
            }
            if ((!args || args.paymentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'paymentType'");
            }
            resourceInputs["dbInstanceCategory"] = args ? args.dbInstanceCategory : undefined;
            resourceInputs["dbInstanceDescription"] = args ? args.dbInstanceDescription : undefined;
            resourceInputs["dbInstanceIpArrays"] = args ? args.dbInstanceIpArrays : undefined;
            resourceInputs["dbInstanceNetworkType"] = args ? args.dbInstanceNetworkType : undefined;
            resourceInputs["dbInstanceStorageType"] = args ? args.dbInstanceStorageType : undefined;
            resourceInputs["dbNodeClass"] = args ? args.dbNodeClass : undefined;
            resourceInputs["dbNodeStorage"] = args ? args.dbNodeStorage : undefined;
            resourceInputs["dbVersion"] = args ? args.dbVersion : undefined;
            resourceInputs["paymentType"] = args ? args.paymentType : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["connectionString"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GraphDatabaseDbInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GraphDatabaseDbInstance resources.
 */
export interface GraphDatabaseDbInstanceState {
    connectionString?: pulumi.Input<string>;
    dbInstanceCategory?: pulumi.Input<string>;
    dbInstanceDescription?: pulumi.Input<string>;
    dbInstanceIpArrays?: pulumi.Input<pulumi.Input<inputs.GraphDatabaseDbInstanceDbInstanceIpArray>[]>;
    dbInstanceNetworkType?: pulumi.Input<string>;
    dbInstanceStorageType?: pulumi.Input<string>;
    dbNodeClass?: pulumi.Input<string>;
    dbNodeStorage?: pulumi.Input<number>;
    dbVersion?: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GraphDatabaseDbInstanceTimeouts>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GraphDatabaseDbInstance resource.
 */
export interface GraphDatabaseDbInstanceArgs {
    dbInstanceCategory: pulumi.Input<string>;
    dbInstanceDescription?: pulumi.Input<string>;
    dbInstanceIpArrays?: pulumi.Input<pulumi.Input<inputs.GraphDatabaseDbInstanceDbInstanceIpArray>[]>;
    dbInstanceNetworkType: pulumi.Input<string>;
    dbInstanceStorageType: pulumi.Input<string>;
    dbNodeClass: pulumi.Input<string>;
    dbNodeStorage: pulumi.Input<number>;
    dbVersion: pulumi.Input<string>;
    paymentType: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GraphDatabaseDbInstanceTimeouts>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}
