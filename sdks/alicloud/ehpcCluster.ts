// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EhpcCluster extends pulumi.CustomResource {
    /**
     * Get an existing EhpcCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EhpcClusterState, opts?: pulumi.CustomResourceOptions): EhpcCluster {
        return new EhpcCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/ehpcCluster:EhpcCluster';

    /**
     * Returns true if the given object is an instance of EhpcCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EhpcCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EhpcCluster.__pulumiType;
    }

    public readonly accountType!: pulumi.Output<string>;
    public readonly additionalVolumes!: pulumi.Output<outputs.EhpcClusterAdditionalVolume[] | undefined>;
    public readonly applications!: pulumi.Output<outputs.EhpcClusterApplication[] | undefined>;
    public readonly autoRenew!: pulumi.Output<boolean | undefined>;
    public readonly autoRenewPeriod!: pulumi.Output<number | undefined>;
    public readonly clientVersion!: pulumi.Output<string>;
    public readonly clusterName!: pulumi.Output<string>;
    public readonly clusterVersion!: pulumi.Output<string>;
    public readonly computeCount!: pulumi.Output<number>;
    public readonly computeEnableHt!: pulumi.Output<boolean | undefined>;
    public readonly computeInstanceType!: pulumi.Output<string>;
    public readonly computeSpotPriceLimit!: pulumi.Output<string | undefined>;
    public readonly computeSpotStrategy!: pulumi.Output<string | undefined>;
    public readonly deployMode!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly domain!: pulumi.Output<string | undefined>;
    public readonly ecsChargeType!: pulumi.Output<string>;
    public readonly ehpcVersion!: pulumi.Output<string>;
    public readonly haEnable!: pulumi.Output<boolean>;
    public readonly imageId!: pulumi.Output<string>;
    public readonly imageOwnerAlias!: pulumi.Output<string>;
    public readonly inputFileUrl!: pulumi.Output<string | undefined>;
    public readonly isComputeEss!: pulumi.Output<boolean | undefined>;
    public readonly jobQueue!: pulumi.Output<string | undefined>;
    public readonly keyPairName!: pulumi.Output<string | undefined>;
    public readonly loginCount!: pulumi.Output<number>;
    public readonly loginInstanceType!: pulumi.Output<string>;
    public readonly managerCount!: pulumi.Output<number>;
    public readonly managerInstanceType!: pulumi.Output<string>;
    public readonly osTag!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    public readonly plugin!: pulumi.Output<string | undefined>;
    public readonly postInstallScripts!: pulumi.Output<outputs.EhpcClusterPostInstallScript[] | undefined>;
    public readonly ramNodeTypes!: pulumi.Output<string[] | undefined>;
    public readonly ramRoleName!: pulumi.Output<string | undefined>;
    public readonly releaseInstance!: pulumi.Output<boolean | undefined>;
    public readonly remoteDirectory!: pulumi.Output<string>;
    public readonly remoteVisEnable!: pulumi.Output<boolean | undefined>;
    public readonly resourceGroupId!: pulumi.Output<string | undefined>;
    public readonly sccClusterId!: pulumi.Output<string>;
    public readonly schedulerType!: pulumi.Output<string>;
    public readonly securityGroupId!: pulumi.Output<string>;
    public readonly securityGroupName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly systemDiskLevel!: pulumi.Output<string | undefined>;
    public readonly systemDiskSize!: pulumi.Output<number | undefined>;
    public readonly systemDiskType!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.EhpcClusterTimeouts | undefined>;
    public readonly volumeId!: pulumi.Output<string>;
    public readonly volumeMountOption!: pulumi.Output<string | undefined>;
    public readonly volumeMountpoint!: pulumi.Output<string>;
    public readonly volumeProtocol!: pulumi.Output<string>;
    public readonly volumeType!: pulumi.Output<string>;
    public readonly vpcId!: pulumi.Output<string>;
    public readonly vswitchId!: pulumi.Output<string>;
    public readonly withoutAgent!: pulumi.Output<boolean | undefined>;
    public readonly withoutElasticIp!: pulumi.Output<boolean | undefined>;
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a EhpcCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EhpcClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EhpcClusterArgs | EhpcClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EhpcClusterState | undefined;
            resourceInputs["accountType"] = state ? state.accountType : undefined;
            resourceInputs["additionalVolumes"] = state ? state.additionalVolumes : undefined;
            resourceInputs["applications"] = state ? state.applications : undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["autoRenewPeriod"] = state ? state.autoRenewPeriod : undefined;
            resourceInputs["clientVersion"] = state ? state.clientVersion : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["clusterVersion"] = state ? state.clusterVersion : undefined;
            resourceInputs["computeCount"] = state ? state.computeCount : undefined;
            resourceInputs["computeEnableHt"] = state ? state.computeEnableHt : undefined;
            resourceInputs["computeInstanceType"] = state ? state.computeInstanceType : undefined;
            resourceInputs["computeSpotPriceLimit"] = state ? state.computeSpotPriceLimit : undefined;
            resourceInputs["computeSpotStrategy"] = state ? state.computeSpotStrategy : undefined;
            resourceInputs["deployMode"] = state ? state.deployMode : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["ecsChargeType"] = state ? state.ecsChargeType : undefined;
            resourceInputs["ehpcVersion"] = state ? state.ehpcVersion : undefined;
            resourceInputs["haEnable"] = state ? state.haEnable : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["imageOwnerAlias"] = state ? state.imageOwnerAlias : undefined;
            resourceInputs["inputFileUrl"] = state ? state.inputFileUrl : undefined;
            resourceInputs["isComputeEss"] = state ? state.isComputeEss : undefined;
            resourceInputs["jobQueue"] = state ? state.jobQueue : undefined;
            resourceInputs["keyPairName"] = state ? state.keyPairName : undefined;
            resourceInputs["loginCount"] = state ? state.loginCount : undefined;
            resourceInputs["loginInstanceType"] = state ? state.loginInstanceType : undefined;
            resourceInputs["managerCount"] = state ? state.managerCount : undefined;
            resourceInputs["managerInstanceType"] = state ? state.managerInstanceType : undefined;
            resourceInputs["osTag"] = state ? state.osTag : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["plugin"] = state ? state.plugin : undefined;
            resourceInputs["postInstallScripts"] = state ? state.postInstallScripts : undefined;
            resourceInputs["ramNodeTypes"] = state ? state.ramNodeTypes : undefined;
            resourceInputs["ramRoleName"] = state ? state.ramRoleName : undefined;
            resourceInputs["releaseInstance"] = state ? state.releaseInstance : undefined;
            resourceInputs["remoteDirectory"] = state ? state.remoteDirectory : undefined;
            resourceInputs["remoteVisEnable"] = state ? state.remoteVisEnable : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["sccClusterId"] = state ? state.sccClusterId : undefined;
            resourceInputs["schedulerType"] = state ? state.schedulerType : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["securityGroupName"] = state ? state.securityGroupName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["systemDiskLevel"] = state ? state.systemDiskLevel : undefined;
            resourceInputs["systemDiskSize"] = state ? state.systemDiskSize : undefined;
            resourceInputs["systemDiskType"] = state ? state.systemDiskType : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["volumeId"] = state ? state.volumeId : undefined;
            resourceInputs["volumeMountOption"] = state ? state.volumeMountOption : undefined;
            resourceInputs["volumeMountpoint"] = state ? state.volumeMountpoint : undefined;
            resourceInputs["volumeProtocol"] = state ? state.volumeProtocol : undefined;
            resourceInputs["volumeType"] = state ? state.volumeType : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
            resourceInputs["withoutAgent"] = state ? state.withoutAgent : undefined;
            resourceInputs["withoutElasticIp"] = state ? state.withoutElasticIp : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as EhpcClusterArgs | undefined;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.computeCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'computeCount'");
            }
            if ((!args || args.computeInstanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'computeInstanceType'");
            }
            if ((!args || args.loginCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loginCount'");
            }
            if ((!args || args.loginInstanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loginInstanceType'");
            }
            if ((!args || args.managerInstanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managerInstanceType'");
            }
            if ((!args || args.osTag === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osTag'");
            }
            resourceInputs["accountType"] = args ? args.accountType : undefined;
            resourceInputs["additionalVolumes"] = args ? args.additionalVolumes : undefined;
            resourceInputs["applications"] = args ? args.applications : undefined;
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["autoRenewPeriod"] = args ? args.autoRenewPeriod : undefined;
            resourceInputs["clientVersion"] = args ? args.clientVersion : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["clusterVersion"] = args ? args.clusterVersion : undefined;
            resourceInputs["computeCount"] = args ? args.computeCount : undefined;
            resourceInputs["computeEnableHt"] = args ? args.computeEnableHt : undefined;
            resourceInputs["computeInstanceType"] = args ? args.computeInstanceType : undefined;
            resourceInputs["computeSpotPriceLimit"] = args ? args.computeSpotPriceLimit : undefined;
            resourceInputs["computeSpotStrategy"] = args ? args.computeSpotStrategy : undefined;
            resourceInputs["deployMode"] = args ? args.deployMode : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["ecsChargeType"] = args ? args.ecsChargeType : undefined;
            resourceInputs["ehpcVersion"] = args ? args.ehpcVersion : undefined;
            resourceInputs["haEnable"] = args ? args.haEnable : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["imageOwnerAlias"] = args ? args.imageOwnerAlias : undefined;
            resourceInputs["inputFileUrl"] = args ? args.inputFileUrl : undefined;
            resourceInputs["isComputeEss"] = args ? args.isComputeEss : undefined;
            resourceInputs["jobQueue"] = args ? args.jobQueue : undefined;
            resourceInputs["keyPairName"] = args ? args.keyPairName : undefined;
            resourceInputs["loginCount"] = args ? args.loginCount : undefined;
            resourceInputs["loginInstanceType"] = args ? args.loginInstanceType : undefined;
            resourceInputs["managerCount"] = args ? args.managerCount : undefined;
            resourceInputs["managerInstanceType"] = args ? args.managerInstanceType : undefined;
            resourceInputs["osTag"] = args ? args.osTag : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["plugin"] = args ? args.plugin : undefined;
            resourceInputs["postInstallScripts"] = args ? args.postInstallScripts : undefined;
            resourceInputs["ramNodeTypes"] = args ? args.ramNodeTypes : undefined;
            resourceInputs["ramRoleName"] = args ? args.ramRoleName : undefined;
            resourceInputs["releaseInstance"] = args ? args.releaseInstance : undefined;
            resourceInputs["remoteDirectory"] = args ? args.remoteDirectory : undefined;
            resourceInputs["remoteVisEnable"] = args ? args.remoteVisEnable : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["sccClusterId"] = args ? args.sccClusterId : undefined;
            resourceInputs["schedulerType"] = args ? args.schedulerType : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["securityGroupName"] = args ? args.securityGroupName : undefined;
            resourceInputs["systemDiskLevel"] = args ? args.systemDiskLevel : undefined;
            resourceInputs["systemDiskSize"] = args ? args.systemDiskSize : undefined;
            resourceInputs["systemDiskType"] = args ? args.systemDiskType : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["volumeId"] = args ? args.volumeId : undefined;
            resourceInputs["volumeMountOption"] = args ? args.volumeMountOption : undefined;
            resourceInputs["volumeMountpoint"] = args ? args.volumeMountpoint : undefined;
            resourceInputs["volumeProtocol"] = args ? args.volumeProtocol : undefined;
            resourceInputs["volumeType"] = args ? args.volumeType : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["withoutAgent"] = args ? args.withoutAgent : undefined;
            resourceInputs["withoutElasticIp"] = args ? args.withoutElasticIp : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(EhpcCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EhpcCluster resources.
 */
export interface EhpcClusterState {
    accountType?: pulumi.Input<string>;
    additionalVolumes?: pulumi.Input<pulumi.Input<inputs.EhpcClusterAdditionalVolume>[]>;
    applications?: pulumi.Input<pulumi.Input<inputs.EhpcClusterApplication>[]>;
    autoRenew?: pulumi.Input<boolean>;
    autoRenewPeriod?: pulumi.Input<number>;
    clientVersion?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterVersion?: pulumi.Input<string>;
    computeCount?: pulumi.Input<number>;
    computeEnableHt?: pulumi.Input<boolean>;
    computeInstanceType?: pulumi.Input<string>;
    computeSpotPriceLimit?: pulumi.Input<string>;
    computeSpotStrategy?: pulumi.Input<string>;
    deployMode?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    ecsChargeType?: pulumi.Input<string>;
    ehpcVersion?: pulumi.Input<string>;
    haEnable?: pulumi.Input<boolean>;
    imageId?: pulumi.Input<string>;
    imageOwnerAlias?: pulumi.Input<string>;
    inputFileUrl?: pulumi.Input<string>;
    isComputeEss?: pulumi.Input<boolean>;
    jobQueue?: pulumi.Input<string>;
    keyPairName?: pulumi.Input<string>;
    loginCount?: pulumi.Input<number>;
    loginInstanceType?: pulumi.Input<string>;
    managerCount?: pulumi.Input<number>;
    managerInstanceType?: pulumi.Input<string>;
    osTag?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    plugin?: pulumi.Input<string>;
    postInstallScripts?: pulumi.Input<pulumi.Input<inputs.EhpcClusterPostInstallScript>[]>;
    ramNodeTypes?: pulumi.Input<pulumi.Input<string>[]>;
    ramRoleName?: pulumi.Input<string>;
    releaseInstance?: pulumi.Input<boolean>;
    remoteDirectory?: pulumi.Input<string>;
    remoteVisEnable?: pulumi.Input<boolean>;
    resourceGroupId?: pulumi.Input<string>;
    sccClusterId?: pulumi.Input<string>;
    schedulerType?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    securityGroupName?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    systemDiskLevel?: pulumi.Input<string>;
    systemDiskSize?: pulumi.Input<number>;
    systemDiskType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EhpcClusterTimeouts>;
    volumeId?: pulumi.Input<string>;
    volumeMountOption?: pulumi.Input<string>;
    volumeMountpoint?: pulumi.Input<string>;
    volumeProtocol?: pulumi.Input<string>;
    volumeType?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
    withoutAgent?: pulumi.Input<boolean>;
    withoutElasticIp?: pulumi.Input<boolean>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EhpcCluster resource.
 */
export interface EhpcClusterArgs {
    accountType?: pulumi.Input<string>;
    additionalVolumes?: pulumi.Input<pulumi.Input<inputs.EhpcClusterAdditionalVolume>[]>;
    applications?: pulumi.Input<pulumi.Input<inputs.EhpcClusterApplication>[]>;
    autoRenew?: pulumi.Input<boolean>;
    autoRenewPeriod?: pulumi.Input<number>;
    clientVersion?: pulumi.Input<string>;
    clusterName: pulumi.Input<string>;
    clusterVersion?: pulumi.Input<string>;
    computeCount: pulumi.Input<number>;
    computeEnableHt?: pulumi.Input<boolean>;
    computeInstanceType: pulumi.Input<string>;
    computeSpotPriceLimit?: pulumi.Input<string>;
    computeSpotStrategy?: pulumi.Input<string>;
    deployMode?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    ecsChargeType?: pulumi.Input<string>;
    ehpcVersion?: pulumi.Input<string>;
    haEnable?: pulumi.Input<boolean>;
    imageId?: pulumi.Input<string>;
    imageOwnerAlias?: pulumi.Input<string>;
    inputFileUrl?: pulumi.Input<string>;
    isComputeEss?: pulumi.Input<boolean>;
    jobQueue?: pulumi.Input<string>;
    keyPairName?: pulumi.Input<string>;
    loginCount: pulumi.Input<number>;
    loginInstanceType: pulumi.Input<string>;
    managerCount?: pulumi.Input<number>;
    managerInstanceType: pulumi.Input<string>;
    osTag: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    plugin?: pulumi.Input<string>;
    postInstallScripts?: pulumi.Input<pulumi.Input<inputs.EhpcClusterPostInstallScript>[]>;
    ramNodeTypes?: pulumi.Input<pulumi.Input<string>[]>;
    ramRoleName?: pulumi.Input<string>;
    releaseInstance?: pulumi.Input<boolean>;
    remoteDirectory?: pulumi.Input<string>;
    remoteVisEnable?: pulumi.Input<boolean>;
    resourceGroupId?: pulumi.Input<string>;
    sccClusterId?: pulumi.Input<string>;
    schedulerType?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    securityGroupName?: pulumi.Input<string>;
    systemDiskLevel?: pulumi.Input<string>;
    systemDiskSize?: pulumi.Input<number>;
    systemDiskType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EhpcClusterTimeouts>;
    volumeId?: pulumi.Input<string>;
    volumeMountOption?: pulumi.Input<string>;
    volumeMountpoint?: pulumi.Input<string>;
    volumeProtocol?: pulumi.Input<string>;
    volumeType?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
    withoutAgent?: pulumi.Input<boolean>;
    withoutElasticIp?: pulumi.Input<boolean>;
    zoneId?: pulumi.Input<string>;
}
