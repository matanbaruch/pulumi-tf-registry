// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdoscooInstance extends pulumi.CustomResource {
    /**
     * Get an existing DdoscooInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdoscooInstanceState, opts?: pulumi.CustomResourceOptions): DdoscooInstance {
        return new DdoscooInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/ddoscooInstance:DdoscooInstance';

    /**
     * Returns true if the given object is an instance of DdoscooInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdoscooInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdoscooInstance.__pulumiType;
    }

    public readonly addressType!: pulumi.Output<string>;
    public readonly bandwidth!: pulumi.Output<string>;
    public readonly bandwidthMode!: pulumi.Output<string | undefined>;
    public readonly baseBandwidth!: pulumi.Output<string>;
    public readonly domainCount!: pulumi.Output<string>;
    public readonly editionSale!: pulumi.Output<string>;
    public readonly functionVersion!: pulumi.Output<string>;
    public /*out*/ readonly ip!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly normalBandwidth!: pulumi.Output<string>;
    public readonly normalQps!: pulumi.Output<string>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly portCount!: pulumi.Output<string>;
    public readonly productPlan!: pulumi.Output<string>;
    public readonly productType!: pulumi.Output<string | undefined>;
    public readonly serviceBandwidth!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DdoscooInstanceTimeouts | undefined>;

    /**
     * Create a DdoscooInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdoscooInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdoscooInstanceArgs | DdoscooInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdoscooInstanceState | undefined;
            resourceInputs["addressType"] = state ? state.addressType : undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["bandwidthMode"] = state ? state.bandwidthMode : undefined;
            resourceInputs["baseBandwidth"] = state ? state.baseBandwidth : undefined;
            resourceInputs["domainCount"] = state ? state.domainCount : undefined;
            resourceInputs["editionSale"] = state ? state.editionSale : undefined;
            resourceInputs["functionVersion"] = state ? state.functionVersion : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["normalBandwidth"] = state ? state.normalBandwidth : undefined;
            resourceInputs["normalQps"] = state ? state.normalQps : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["portCount"] = state ? state.portCount : undefined;
            resourceInputs["productPlan"] = state ? state.productPlan : undefined;
            resourceInputs["productType"] = state ? state.productType : undefined;
            resourceInputs["serviceBandwidth"] = state ? state.serviceBandwidth : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DdoscooInstanceArgs | undefined;
            if ((!args || args.domainCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainCount'");
            }
            if ((!args || args.portCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portCount'");
            }
            resourceInputs["addressType"] = args ? args.addressType : undefined;
            resourceInputs["bandwidth"] = args ? args.bandwidth : undefined;
            resourceInputs["bandwidthMode"] = args ? args.bandwidthMode : undefined;
            resourceInputs["baseBandwidth"] = args ? args.baseBandwidth : undefined;
            resourceInputs["domainCount"] = args ? args.domainCount : undefined;
            resourceInputs["editionSale"] = args ? args.editionSale : undefined;
            resourceInputs["functionVersion"] = args ? args.functionVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["normalBandwidth"] = args ? args.normalBandwidth : undefined;
            resourceInputs["normalQps"] = args ? args.normalQps : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["portCount"] = args ? args.portCount : undefined;
            resourceInputs["productPlan"] = args ? args.productPlan : undefined;
            resourceInputs["productType"] = args ? args.productType : undefined;
            resourceInputs["serviceBandwidth"] = args ? args.serviceBandwidth : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["ip"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdoscooInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdoscooInstance resources.
 */
export interface DdoscooInstanceState {
    addressType?: pulumi.Input<string>;
    bandwidth?: pulumi.Input<string>;
    bandwidthMode?: pulumi.Input<string>;
    baseBandwidth?: pulumi.Input<string>;
    domainCount?: pulumi.Input<string>;
    editionSale?: pulumi.Input<string>;
    functionVersion?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    normalBandwidth?: pulumi.Input<string>;
    normalQps?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    portCount?: pulumi.Input<string>;
    productPlan?: pulumi.Input<string>;
    productType?: pulumi.Input<string>;
    serviceBandwidth?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DdoscooInstanceTimeouts>;
}

/**
 * The set of arguments for constructing a DdoscooInstance resource.
 */
export interface DdoscooInstanceArgs {
    addressType?: pulumi.Input<string>;
    bandwidth?: pulumi.Input<string>;
    bandwidthMode?: pulumi.Input<string>;
    baseBandwidth?: pulumi.Input<string>;
    domainCount: pulumi.Input<string>;
    editionSale?: pulumi.Input<string>;
    functionVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    normalBandwidth?: pulumi.Input<string>;
    normalQps?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    portCount: pulumi.Input<string>;
    productPlan?: pulumi.Input<string>;
    productType?: pulumi.Input<string>;
    serviceBandwidth?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DdoscooInstanceTimeouts>;
}
