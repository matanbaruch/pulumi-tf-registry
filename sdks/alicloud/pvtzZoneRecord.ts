// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PvtzZoneRecord extends pulumi.CustomResource {
    /**
     * Get an existing PvtzZoneRecord resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PvtzZoneRecordState, opts?: pulumi.CustomResourceOptions): PvtzZoneRecord {
        return new PvtzZoneRecord(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/pvtzZoneRecord:PvtzZoneRecord';

    /**
     * Returns true if the given object is an instance of PvtzZoneRecord.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PvtzZoneRecord {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PvtzZoneRecord.__pulumiType;
    }

    public readonly lang!: pulumi.Output<string | undefined>;
    public readonly priority!: pulumi.Output<number | undefined>;
    public /*out*/ readonly recordId!: pulumi.Output<string>;
    public readonly remark!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly resourceRecord!: pulumi.Output<string>;
    public readonly rr!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.PvtzZoneRecordTimeouts | undefined>;
    public readonly ttl!: pulumi.Output<number | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly userClientIp!: pulumi.Output<string | undefined>;
    public readonly value!: pulumi.Output<string>;
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a PvtzZoneRecord resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PvtzZoneRecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PvtzZoneRecordArgs | PvtzZoneRecordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PvtzZoneRecordState | undefined;
            resourceInputs["lang"] = state ? state.lang : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["recordId"] = state ? state.recordId : undefined;
            resourceInputs["remark"] = state ? state.remark : undefined;
            resourceInputs["resourceRecord"] = state ? state.resourceRecord : undefined;
            resourceInputs["rr"] = state ? state.rr : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["userClientIp"] = state ? state.userClientIp : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as PvtzZoneRecordArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["lang"] = args ? args.lang : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["remark"] = args ? args.remark : undefined;
            resourceInputs["resourceRecord"] = args ? args.resourceRecord : undefined;
            resourceInputs["rr"] = args ? args.rr : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["userClientIp"] = args ? args.userClientIp : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["recordId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PvtzZoneRecord.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PvtzZoneRecord resources.
 */
export interface PvtzZoneRecordState {
    lang?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    recordId?: pulumi.Input<string>;
    remark?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    resourceRecord?: pulumi.Input<string>;
    rr?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.PvtzZoneRecordTimeouts>;
    ttl?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    userClientIp?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PvtzZoneRecord resource.
 */
export interface PvtzZoneRecordArgs {
    lang?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    remark?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    resourceRecord?: pulumi.Input<string>;
    rr?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.PvtzZoneRecordTimeouts>;
    ttl?: pulumi.Input<number>;
    type: pulumi.Input<string>;
    userClientIp?: pulumi.Input<string>;
    value: pulumi.Input<string>;
    zoneId: pulumi.Input<string>;
}
