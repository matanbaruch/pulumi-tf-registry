// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RdsDbProxy extends pulumi.CustomResource {
    /**
     * Get an existing RdsDbProxy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RdsDbProxyState, opts?: pulumi.CustomResourceOptions): RdsDbProxy {
        return new RdsDbProxy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/rdsDbProxy:RdsDbProxy';

    /**
     * Returns true if the given object is an instance of RdsDbProxy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RdsDbProxy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RdsDbProxy.__pulumiType;
    }

    public readonly dbProxyConnectStringPort!: pulumi.Output<number>;
    public readonly dbProxyConnectionPrefix!: pulumi.Output<string>;
    public /*out*/ readonly dbProxyConnectionString!: pulumi.Output<string>;
    public /*out*/ readonly dbProxyEndpointAliases!: pulumi.Output<string>;
    public /*out*/ readonly dbProxyEndpointId!: pulumi.Output<string>;
    public readonly dbProxyEndpointReadWriteMode!: pulumi.Output<string>;
    public readonly dbProxyFeatures!: pulumi.Output<string>;
    public readonly dbProxyInstanceNum!: pulumi.Output<number>;
    public readonly dbProxySslEnabled!: pulumi.Output<string>;
    public readonly effectiveSpecificTime!: pulumi.Output<string>;
    public readonly effectiveTime!: pulumi.Output<string>;
    public readonly instanceId!: pulumi.Output<string>;
    public readonly instanceNetworkType!: pulumi.Output<string>;
    public /*out*/ readonly netType!: pulumi.Output<string>;
    public readonly readOnlyInstanceDistributionType!: pulumi.Output<string>;
    public readonly readOnlyInstanceMaxDelayTime!: pulumi.Output<number>;
    public readonly readOnlyInstanceWeights!: pulumi.Output<outputs.RdsDbProxyReadOnlyInstanceWeight[] | undefined>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public /*out*/ readonly sslExpiredTime!: pulumi.Output<string>;
    public readonly switchTime!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.RdsDbProxyTimeouts | undefined>;
    public readonly upgradeTime!: pulumi.Output<string | undefined>;
    public readonly vpcId!: pulumi.Output<string>;
    public readonly vswitchId!: pulumi.Output<string>;

    /**
     * Create a RdsDbProxy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RdsDbProxyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RdsDbProxyArgs | RdsDbProxyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RdsDbProxyState | undefined;
            resourceInputs["dbProxyConnectStringPort"] = state ? state.dbProxyConnectStringPort : undefined;
            resourceInputs["dbProxyConnectionPrefix"] = state ? state.dbProxyConnectionPrefix : undefined;
            resourceInputs["dbProxyConnectionString"] = state ? state.dbProxyConnectionString : undefined;
            resourceInputs["dbProxyEndpointAliases"] = state ? state.dbProxyEndpointAliases : undefined;
            resourceInputs["dbProxyEndpointId"] = state ? state.dbProxyEndpointId : undefined;
            resourceInputs["dbProxyEndpointReadWriteMode"] = state ? state.dbProxyEndpointReadWriteMode : undefined;
            resourceInputs["dbProxyFeatures"] = state ? state.dbProxyFeatures : undefined;
            resourceInputs["dbProxyInstanceNum"] = state ? state.dbProxyInstanceNum : undefined;
            resourceInputs["dbProxySslEnabled"] = state ? state.dbProxySslEnabled : undefined;
            resourceInputs["effectiveSpecificTime"] = state ? state.effectiveSpecificTime : undefined;
            resourceInputs["effectiveTime"] = state ? state.effectiveTime : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["instanceNetworkType"] = state ? state.instanceNetworkType : undefined;
            resourceInputs["netType"] = state ? state.netType : undefined;
            resourceInputs["readOnlyInstanceDistributionType"] = state ? state.readOnlyInstanceDistributionType : undefined;
            resourceInputs["readOnlyInstanceMaxDelayTime"] = state ? state.readOnlyInstanceMaxDelayTime : undefined;
            resourceInputs["readOnlyInstanceWeights"] = state ? state.readOnlyInstanceWeights : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["sslExpiredTime"] = state ? state.sslExpiredTime : undefined;
            resourceInputs["switchTime"] = state ? state.switchTime : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["upgradeTime"] = state ? state.upgradeTime : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
        } else {
            const args = argsOrState as RdsDbProxyArgs | undefined;
            if ((!args || args.dbProxyInstanceNum === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbProxyInstanceNum'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.instanceNetworkType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceNetworkType'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            if ((!args || args.vswitchId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vswitchId'");
            }
            resourceInputs["dbProxyConnectStringPort"] = args ? args.dbProxyConnectStringPort : undefined;
            resourceInputs["dbProxyConnectionPrefix"] = args ? args.dbProxyConnectionPrefix : undefined;
            resourceInputs["dbProxyEndpointReadWriteMode"] = args ? args.dbProxyEndpointReadWriteMode : undefined;
            resourceInputs["dbProxyFeatures"] = args ? args.dbProxyFeatures : undefined;
            resourceInputs["dbProxyInstanceNum"] = args ? args.dbProxyInstanceNum : undefined;
            resourceInputs["dbProxySslEnabled"] = args ? args.dbProxySslEnabled : undefined;
            resourceInputs["effectiveSpecificTime"] = args ? args.effectiveSpecificTime : undefined;
            resourceInputs["effectiveTime"] = args ? args.effectiveTime : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["instanceNetworkType"] = args ? args.instanceNetworkType : undefined;
            resourceInputs["readOnlyInstanceDistributionType"] = args ? args.readOnlyInstanceDistributionType : undefined;
            resourceInputs["readOnlyInstanceMaxDelayTime"] = args ? args.readOnlyInstanceMaxDelayTime : undefined;
            resourceInputs["readOnlyInstanceWeights"] = args ? args.readOnlyInstanceWeights : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["switchTime"] = args ? args.switchTime : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["upgradeTime"] = args ? args.upgradeTime : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["dbProxyConnectionString"] = undefined /*out*/;
            resourceInputs["dbProxyEndpointAliases"] = undefined /*out*/;
            resourceInputs["dbProxyEndpointId"] = undefined /*out*/;
            resourceInputs["netType"] = undefined /*out*/;
            resourceInputs["sslExpiredTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RdsDbProxy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RdsDbProxy resources.
 */
export interface RdsDbProxyState {
    dbProxyConnectStringPort?: pulumi.Input<number>;
    dbProxyConnectionPrefix?: pulumi.Input<string>;
    dbProxyConnectionString?: pulumi.Input<string>;
    dbProxyEndpointAliases?: pulumi.Input<string>;
    dbProxyEndpointId?: pulumi.Input<string>;
    dbProxyEndpointReadWriteMode?: pulumi.Input<string>;
    dbProxyFeatures?: pulumi.Input<string>;
    dbProxyInstanceNum?: pulumi.Input<number>;
    dbProxySslEnabled?: pulumi.Input<string>;
    effectiveSpecificTime?: pulumi.Input<string>;
    effectiveTime?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    instanceNetworkType?: pulumi.Input<string>;
    netType?: pulumi.Input<string>;
    readOnlyInstanceDistributionType?: pulumi.Input<string>;
    readOnlyInstanceMaxDelayTime?: pulumi.Input<number>;
    readOnlyInstanceWeights?: pulumi.Input<pulumi.Input<inputs.RdsDbProxyReadOnlyInstanceWeight>[]>;
    resourceGroupId?: pulumi.Input<string>;
    sslExpiredTime?: pulumi.Input<string>;
    switchTime?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.RdsDbProxyTimeouts>;
    upgradeTime?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RdsDbProxy resource.
 */
export interface RdsDbProxyArgs {
    dbProxyConnectStringPort?: pulumi.Input<number>;
    dbProxyConnectionPrefix?: pulumi.Input<string>;
    dbProxyEndpointReadWriteMode?: pulumi.Input<string>;
    dbProxyFeatures?: pulumi.Input<string>;
    dbProxyInstanceNum: pulumi.Input<number>;
    dbProxySslEnabled?: pulumi.Input<string>;
    effectiveSpecificTime?: pulumi.Input<string>;
    effectiveTime?: pulumi.Input<string>;
    instanceId: pulumi.Input<string>;
    instanceNetworkType: pulumi.Input<string>;
    readOnlyInstanceDistributionType?: pulumi.Input<string>;
    readOnlyInstanceMaxDelayTime?: pulumi.Input<number>;
    readOnlyInstanceWeights?: pulumi.Input<pulumi.Input<inputs.RdsDbProxyReadOnlyInstanceWeight>[]>;
    resourceGroupId?: pulumi.Input<string>;
    switchTime?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.RdsDbProxyTimeouts>;
    upgradeTime?: pulumi.Input<string>;
    vpcId: pulumi.Input<string>;
    vswitchId: pulumi.Input<string>;
}
