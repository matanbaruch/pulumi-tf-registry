// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HbrHanaBackupPlan extends pulumi.CustomResource {
    /**
     * Get an existing HbrHanaBackupPlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HbrHanaBackupPlanState, opts?: pulumi.CustomResourceOptions): HbrHanaBackupPlan {
        return new HbrHanaBackupPlan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/hbrHanaBackupPlan:HbrHanaBackupPlan';

    /**
     * Returns true if the given object is an instance of HbrHanaBackupPlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HbrHanaBackupPlan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HbrHanaBackupPlan.__pulumiType;
    }

    public readonly backupPrefix!: pulumi.Output<string | undefined>;
    public readonly backupType!: pulumi.Output<string>;
    public readonly clusterId!: pulumi.Output<string>;
    public readonly databaseName!: pulumi.Output<string>;
    public /*out*/ readonly planId!: pulumi.Output<string>;
    public readonly planName!: pulumi.Output<string>;
    public readonly resourceGroupId!: pulumi.Output<string | undefined>;
    public readonly schedule!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.HbrHanaBackupPlanTimeouts | undefined>;
    public readonly vaultId!: pulumi.Output<string>;

    /**
     * Create a HbrHanaBackupPlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HbrHanaBackupPlanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HbrHanaBackupPlanArgs | HbrHanaBackupPlanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HbrHanaBackupPlanState | undefined;
            resourceInputs["backupPrefix"] = state ? state.backupPrefix : undefined;
            resourceInputs["backupType"] = state ? state.backupType : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["planId"] = state ? state.planId : undefined;
            resourceInputs["planName"] = state ? state.planName : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vaultId"] = state ? state.vaultId : undefined;
        } else {
            const args = argsOrState as HbrHanaBackupPlanArgs | undefined;
            if ((!args || args.backupType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backupType'");
            }
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.databaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if ((!args || args.planName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'planName'");
            }
            if ((!args || args.schedule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schedule'");
            }
            if ((!args || args.vaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vaultId'");
            }
            resourceInputs["backupPrefix"] = args ? args.backupPrefix : undefined;
            resourceInputs["backupType"] = args ? args.backupType : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["planName"] = args ? args.planName : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vaultId"] = args ? args.vaultId : undefined;
            resourceInputs["planId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HbrHanaBackupPlan.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HbrHanaBackupPlan resources.
 */
export interface HbrHanaBackupPlanState {
    backupPrefix?: pulumi.Input<string>;
    backupType?: pulumi.Input<string>;
    clusterId?: pulumi.Input<string>;
    databaseName?: pulumi.Input<string>;
    planId?: pulumi.Input<string>;
    planName?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    schedule?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.HbrHanaBackupPlanTimeouts>;
    vaultId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HbrHanaBackupPlan resource.
 */
export interface HbrHanaBackupPlanArgs {
    backupPrefix?: pulumi.Input<string>;
    backupType: pulumi.Input<string>;
    clusterId: pulumi.Input<string>;
    databaseName: pulumi.Input<string>;
    planName: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    schedule: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.HbrHanaBackupPlanTimeouts>;
    vaultId: pulumi.Input<string>;
}
