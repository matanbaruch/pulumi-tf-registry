// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HbrHanaInstance extends pulumi.CustomResource {
    /**
     * Get an existing HbrHanaInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HbrHanaInstanceState, opts?: pulumi.CustomResourceOptions): HbrHanaInstance {
        return new HbrHanaInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/hbrHanaInstance:HbrHanaInstance';

    /**
     * Returns true if the given object is an instance of HbrHanaInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HbrHanaInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HbrHanaInstance.__pulumiType;
    }

    public readonly alertSetting!: pulumi.Output<string>;
    public readonly ecsInstanceIds!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly hanaInstanceId!: pulumi.Output<string>;
    public readonly hanaName!: pulumi.Output<string | undefined>;
    public readonly host!: pulumi.Output<string | undefined>;
    public readonly instanceNumber!: pulumi.Output<number | undefined>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly sid!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.HbrHanaInstanceTimeouts | undefined>;
    public readonly useSsl!: pulumi.Output<boolean | undefined>;
    public readonly userName!: pulumi.Output<string | undefined>;
    public readonly validateCertificate!: pulumi.Output<boolean | undefined>;
    public readonly vaultId!: pulumi.Output<string>;

    /**
     * Create a HbrHanaInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HbrHanaInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HbrHanaInstanceArgs | HbrHanaInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HbrHanaInstanceState | undefined;
            resourceInputs["alertSetting"] = state ? state.alertSetting : undefined;
            resourceInputs["ecsInstanceIds"] = state ? state.ecsInstanceIds : undefined;
            resourceInputs["hanaInstanceId"] = state ? state.hanaInstanceId : undefined;
            resourceInputs["hanaName"] = state ? state.hanaName : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["instanceNumber"] = state ? state.instanceNumber : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["sid"] = state ? state.sid : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["useSsl"] = state ? state.useSsl : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
            resourceInputs["validateCertificate"] = state ? state.validateCertificate : undefined;
            resourceInputs["vaultId"] = state ? state.vaultId : undefined;
        } else {
            const args = argsOrState as HbrHanaInstanceArgs | undefined;
            if ((!args || args.vaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vaultId'");
            }
            resourceInputs["alertSetting"] = args ? args.alertSetting : undefined;
            resourceInputs["ecsInstanceIds"] = args ? args.ecsInstanceIds : undefined;
            resourceInputs["hanaName"] = args ? args.hanaName : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["instanceNumber"] = args ? args.instanceNumber : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["sid"] = args ? args.sid : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["useSsl"] = args ? args.useSsl : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["validateCertificate"] = args ? args.validateCertificate : undefined;
            resourceInputs["vaultId"] = args ? args.vaultId : undefined;
            resourceInputs["hanaInstanceId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(HbrHanaInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HbrHanaInstance resources.
 */
export interface HbrHanaInstanceState {
    alertSetting?: pulumi.Input<string>;
    ecsInstanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    hanaInstanceId?: pulumi.Input<string>;
    hanaName?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    instanceNumber?: pulumi.Input<number>;
    password?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    sid?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.HbrHanaInstanceTimeouts>;
    useSsl?: pulumi.Input<boolean>;
    userName?: pulumi.Input<string>;
    validateCertificate?: pulumi.Input<boolean>;
    vaultId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HbrHanaInstance resource.
 */
export interface HbrHanaInstanceArgs {
    alertSetting?: pulumi.Input<string>;
    ecsInstanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    hanaName?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    instanceNumber?: pulumi.Input<number>;
    password?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    sid?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.HbrHanaInstanceTimeouts>;
    useSsl?: pulumi.Input<boolean>;
    userName?: pulumi.Input<string>;
    validateCertificate?: pulumi.Input<boolean>;
    vaultId: pulumi.Input<string>;
}
