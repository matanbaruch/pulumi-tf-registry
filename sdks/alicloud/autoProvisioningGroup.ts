// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AutoProvisioningGroup extends pulumi.CustomResource {
    /**
     * Get an existing AutoProvisioningGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutoProvisioningGroupState, opts?: pulumi.CustomResourceOptions): AutoProvisioningGroup {
        return new AutoProvisioningGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/autoProvisioningGroup:AutoProvisioningGroup';

    /**
     * Returns true if the given object is an instance of AutoProvisioningGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AutoProvisioningGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutoProvisioningGroup.__pulumiType;
    }

    public readonly autoProvisioningGroupName!: pulumi.Output<string>;
    public readonly autoProvisioningGroupType!: pulumi.Output<string | undefined>;
    public readonly defaultTargetCapacityType!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly excessCapacityTerminationPolicy!: pulumi.Output<string | undefined>;
    public readonly launchTemplateConfigs!: pulumi.Output<outputs.AutoProvisioningGroupLaunchTemplateConfig[]>;
    public readonly launchTemplateId!: pulumi.Output<string>;
    public readonly launchTemplateVersion!: pulumi.Output<string>;
    public readonly maxSpotPrice!: pulumi.Output<number>;
    public readonly payAsYouGoAllocationStrategy!: pulumi.Output<string | undefined>;
    public readonly payAsYouGoTargetCapacity!: pulumi.Output<string | undefined>;
    public readonly spotAllocationStrategy!: pulumi.Output<string | undefined>;
    public readonly spotInstanceInterruptionBehavior!: pulumi.Output<string | undefined>;
    public readonly spotInstancePoolsToUseCount!: pulumi.Output<number>;
    public readonly spotTargetCapacity!: pulumi.Output<string | undefined>;
    public readonly terminateInstances!: pulumi.Output<boolean | undefined>;
    public readonly terminateInstancesWithExpiration!: pulumi.Output<boolean | undefined>;
    public readonly totalTargetCapacity!: pulumi.Output<string>;
    public readonly validFrom!: pulumi.Output<string>;
    public readonly validUntil!: pulumi.Output<string>;

    /**
     * Create a AutoProvisioningGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutoProvisioningGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutoProvisioningGroupArgs | AutoProvisioningGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutoProvisioningGroupState | undefined;
            resourceInputs["autoProvisioningGroupName"] = state ? state.autoProvisioningGroupName : undefined;
            resourceInputs["autoProvisioningGroupType"] = state ? state.autoProvisioningGroupType : undefined;
            resourceInputs["defaultTargetCapacityType"] = state ? state.defaultTargetCapacityType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["excessCapacityTerminationPolicy"] = state ? state.excessCapacityTerminationPolicy : undefined;
            resourceInputs["launchTemplateConfigs"] = state ? state.launchTemplateConfigs : undefined;
            resourceInputs["launchTemplateId"] = state ? state.launchTemplateId : undefined;
            resourceInputs["launchTemplateVersion"] = state ? state.launchTemplateVersion : undefined;
            resourceInputs["maxSpotPrice"] = state ? state.maxSpotPrice : undefined;
            resourceInputs["payAsYouGoAllocationStrategy"] = state ? state.payAsYouGoAllocationStrategy : undefined;
            resourceInputs["payAsYouGoTargetCapacity"] = state ? state.payAsYouGoTargetCapacity : undefined;
            resourceInputs["spotAllocationStrategy"] = state ? state.spotAllocationStrategy : undefined;
            resourceInputs["spotInstanceInterruptionBehavior"] = state ? state.spotInstanceInterruptionBehavior : undefined;
            resourceInputs["spotInstancePoolsToUseCount"] = state ? state.spotInstancePoolsToUseCount : undefined;
            resourceInputs["spotTargetCapacity"] = state ? state.spotTargetCapacity : undefined;
            resourceInputs["terminateInstances"] = state ? state.terminateInstances : undefined;
            resourceInputs["terminateInstancesWithExpiration"] = state ? state.terminateInstancesWithExpiration : undefined;
            resourceInputs["totalTargetCapacity"] = state ? state.totalTargetCapacity : undefined;
            resourceInputs["validFrom"] = state ? state.validFrom : undefined;
            resourceInputs["validUntil"] = state ? state.validUntil : undefined;
        } else {
            const args = argsOrState as AutoProvisioningGroupArgs | undefined;
            if ((!args || args.launchTemplateConfigs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'launchTemplateConfigs'");
            }
            if ((!args || args.launchTemplateId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'launchTemplateId'");
            }
            if ((!args || args.totalTargetCapacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'totalTargetCapacity'");
            }
            resourceInputs["autoProvisioningGroupName"] = args ? args.autoProvisioningGroupName : undefined;
            resourceInputs["autoProvisioningGroupType"] = args ? args.autoProvisioningGroupType : undefined;
            resourceInputs["defaultTargetCapacityType"] = args ? args.defaultTargetCapacityType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["excessCapacityTerminationPolicy"] = args ? args.excessCapacityTerminationPolicy : undefined;
            resourceInputs["launchTemplateConfigs"] = args ? args.launchTemplateConfigs : undefined;
            resourceInputs["launchTemplateId"] = args ? args.launchTemplateId : undefined;
            resourceInputs["launchTemplateVersion"] = args ? args.launchTemplateVersion : undefined;
            resourceInputs["maxSpotPrice"] = args ? args.maxSpotPrice : undefined;
            resourceInputs["payAsYouGoAllocationStrategy"] = args ? args.payAsYouGoAllocationStrategy : undefined;
            resourceInputs["payAsYouGoTargetCapacity"] = args ? args.payAsYouGoTargetCapacity : undefined;
            resourceInputs["spotAllocationStrategy"] = args ? args.spotAllocationStrategy : undefined;
            resourceInputs["spotInstanceInterruptionBehavior"] = args ? args.spotInstanceInterruptionBehavior : undefined;
            resourceInputs["spotInstancePoolsToUseCount"] = args ? args.spotInstancePoolsToUseCount : undefined;
            resourceInputs["spotTargetCapacity"] = args ? args.spotTargetCapacity : undefined;
            resourceInputs["terminateInstances"] = args ? args.terminateInstances : undefined;
            resourceInputs["terminateInstancesWithExpiration"] = args ? args.terminateInstancesWithExpiration : undefined;
            resourceInputs["totalTargetCapacity"] = args ? args.totalTargetCapacity : undefined;
            resourceInputs["validFrom"] = args ? args.validFrom : undefined;
            resourceInputs["validUntil"] = args ? args.validUntil : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AutoProvisioningGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AutoProvisioningGroup resources.
 */
export interface AutoProvisioningGroupState {
    autoProvisioningGroupName?: pulumi.Input<string>;
    autoProvisioningGroupType?: pulumi.Input<string>;
    defaultTargetCapacityType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    excessCapacityTerminationPolicy?: pulumi.Input<string>;
    launchTemplateConfigs?: pulumi.Input<pulumi.Input<inputs.AutoProvisioningGroupLaunchTemplateConfig>[]>;
    launchTemplateId?: pulumi.Input<string>;
    launchTemplateVersion?: pulumi.Input<string>;
    maxSpotPrice?: pulumi.Input<number>;
    payAsYouGoAllocationStrategy?: pulumi.Input<string>;
    payAsYouGoTargetCapacity?: pulumi.Input<string>;
    spotAllocationStrategy?: pulumi.Input<string>;
    spotInstanceInterruptionBehavior?: pulumi.Input<string>;
    spotInstancePoolsToUseCount?: pulumi.Input<number>;
    spotTargetCapacity?: pulumi.Input<string>;
    terminateInstances?: pulumi.Input<boolean>;
    terminateInstancesWithExpiration?: pulumi.Input<boolean>;
    totalTargetCapacity?: pulumi.Input<string>;
    validFrom?: pulumi.Input<string>;
    validUntil?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AutoProvisioningGroup resource.
 */
export interface AutoProvisioningGroupArgs {
    autoProvisioningGroupName?: pulumi.Input<string>;
    autoProvisioningGroupType?: pulumi.Input<string>;
    defaultTargetCapacityType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    excessCapacityTerminationPolicy?: pulumi.Input<string>;
    launchTemplateConfigs: pulumi.Input<pulumi.Input<inputs.AutoProvisioningGroupLaunchTemplateConfig>[]>;
    launchTemplateId: pulumi.Input<string>;
    launchTemplateVersion?: pulumi.Input<string>;
    maxSpotPrice?: pulumi.Input<number>;
    payAsYouGoAllocationStrategy?: pulumi.Input<string>;
    payAsYouGoTargetCapacity?: pulumi.Input<string>;
    spotAllocationStrategy?: pulumi.Input<string>;
    spotInstanceInterruptionBehavior?: pulumi.Input<string>;
    spotInstancePoolsToUseCount?: pulumi.Input<number>;
    spotTargetCapacity?: pulumi.Input<string>;
    terminateInstances?: pulumi.Input<boolean>;
    terminateInstancesWithExpiration?: pulumi.Input<boolean>;
    totalTargetCapacity: pulumi.Input<string>;
    validFrom?: pulumi.Input<string>;
    validUntil?: pulumi.Input<string>;
}
