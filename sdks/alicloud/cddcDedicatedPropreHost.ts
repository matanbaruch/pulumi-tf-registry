// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CddcDedicatedPropreHost extends pulumi.CustomResource {
    /**
     * Get an existing CddcDedicatedPropreHost resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CddcDedicatedPropreHostState, opts?: pulumi.CustomResourceOptions): CddcDedicatedPropreHost {
        return new CddcDedicatedPropreHost(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/cddcDedicatedPropreHost:CddcDedicatedPropreHost';

    /**
     * Returns true if the given object is an instance of CddcDedicatedPropreHost.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CddcDedicatedPropreHost {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CddcDedicatedPropreHost.__pulumiType;
    }

    public readonly autoPay!: pulumi.Output<boolean | undefined>;
    public readonly autoRenew!: pulumi.Output<string | undefined>;
    public readonly dedicatedHostGroupId!: pulumi.Output<string>;
    public readonly ecsClassLists!: pulumi.Output<outputs.CddcDedicatedPropreHostEcsClassList[]>;
    public readonly ecsDeploymentSetId!: pulumi.Output<string | undefined>;
    public readonly ecsHostName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly ecsInstanceId!: pulumi.Output<string>;
    public readonly ecsInstanceName!: pulumi.Output<string | undefined>;
    public readonly ecsUniqueSuffix!: pulumi.Output<string | undefined>;
    public readonly ecsZoneId!: pulumi.Output<string>;
    public readonly engine!: pulumi.Output<string>;
    public readonly imageId!: pulumi.Output<string | undefined>;
    public readonly internetChargeType!: pulumi.Output<string | undefined>;
    public readonly internetMaxBandwidthOut!: pulumi.Output<number | undefined>;
    public readonly keyPairName!: pulumi.Output<string | undefined>;
    public readonly osPassword!: pulumi.Output<string | undefined>;
    public readonly passwordInherit!: pulumi.Output<string | undefined>;
    public readonly paymentType!: pulumi.Output<string>;
    public readonly period!: pulumi.Output<string | undefined>;
    public readonly periodType!: pulumi.Output<string | undefined>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly securityGroupId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.CddcDedicatedPropreHostTimeouts | undefined>;
    public readonly userData!: pulumi.Output<string | undefined>;
    public readonly userDataEncoded!: pulumi.Output<boolean | undefined>;
    public readonly vpcId!: pulumi.Output<string>;
    public readonly vswitchId!: pulumi.Output<string>;

    /**
     * Create a CddcDedicatedPropreHost resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CddcDedicatedPropreHostArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CddcDedicatedPropreHostArgs | CddcDedicatedPropreHostState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CddcDedicatedPropreHostState | undefined;
            resourceInputs["autoPay"] = state ? state.autoPay : undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["dedicatedHostGroupId"] = state ? state.dedicatedHostGroupId : undefined;
            resourceInputs["ecsClassLists"] = state ? state.ecsClassLists : undefined;
            resourceInputs["ecsDeploymentSetId"] = state ? state.ecsDeploymentSetId : undefined;
            resourceInputs["ecsHostName"] = state ? state.ecsHostName : undefined;
            resourceInputs["ecsInstanceId"] = state ? state.ecsInstanceId : undefined;
            resourceInputs["ecsInstanceName"] = state ? state.ecsInstanceName : undefined;
            resourceInputs["ecsUniqueSuffix"] = state ? state.ecsUniqueSuffix : undefined;
            resourceInputs["ecsZoneId"] = state ? state.ecsZoneId : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["internetChargeType"] = state ? state.internetChargeType : undefined;
            resourceInputs["internetMaxBandwidthOut"] = state ? state.internetMaxBandwidthOut : undefined;
            resourceInputs["keyPairName"] = state ? state.keyPairName : undefined;
            resourceInputs["osPassword"] = state ? state.osPassword : undefined;
            resourceInputs["passwordInherit"] = state ? state.passwordInherit : undefined;
            resourceInputs["paymentType"] = state ? state.paymentType : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodType"] = state ? state.periodType : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["userDataEncoded"] = state ? state.userDataEncoded : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
        } else {
            const args = argsOrState as CddcDedicatedPropreHostArgs | undefined;
            if ((!args || args.ecsClassLists === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ecsClassLists'");
            }
            if ((!args || args.ecsZoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ecsZoneId'");
            }
            if ((!args || args.engine === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engine'");
            }
            if ((!args || args.paymentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'paymentType'");
            }
            if ((!args || args.securityGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            if ((!args || args.vswitchId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vswitchId'");
            }
            resourceInputs["autoPay"] = args ? args.autoPay : undefined;
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["dedicatedHostGroupId"] = args ? args.dedicatedHostGroupId : undefined;
            resourceInputs["ecsClassLists"] = args ? args.ecsClassLists : undefined;
            resourceInputs["ecsDeploymentSetId"] = args ? args.ecsDeploymentSetId : undefined;
            resourceInputs["ecsHostName"] = args ? args.ecsHostName : undefined;
            resourceInputs["ecsInstanceName"] = args ? args.ecsInstanceName : undefined;
            resourceInputs["ecsUniqueSuffix"] = args ? args.ecsUniqueSuffix : undefined;
            resourceInputs["ecsZoneId"] = args ? args.ecsZoneId : undefined;
            resourceInputs["engine"] = args ? args.engine : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["internetChargeType"] = args ? args.internetChargeType : undefined;
            resourceInputs["internetMaxBandwidthOut"] = args ? args.internetMaxBandwidthOut : undefined;
            resourceInputs["keyPairName"] = args ? args.keyPairName : undefined;
            resourceInputs["osPassword"] = args ? args.osPassword : undefined;
            resourceInputs["passwordInherit"] = args ? args.passwordInherit : undefined;
            resourceInputs["paymentType"] = args ? args.paymentType : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodType"] = args ? args.periodType : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["userDataEncoded"] = args ? args.userDataEncoded : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["ecsInstanceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CddcDedicatedPropreHost.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CddcDedicatedPropreHost resources.
 */
export interface CddcDedicatedPropreHostState {
    autoPay?: pulumi.Input<boolean>;
    autoRenew?: pulumi.Input<string>;
    dedicatedHostGroupId?: pulumi.Input<string>;
    ecsClassLists?: pulumi.Input<pulumi.Input<inputs.CddcDedicatedPropreHostEcsClassList>[]>;
    ecsDeploymentSetId?: pulumi.Input<string>;
    ecsHostName?: pulumi.Input<string>;
    ecsInstanceId?: pulumi.Input<string>;
    ecsInstanceName?: pulumi.Input<string>;
    ecsUniqueSuffix?: pulumi.Input<string>;
    ecsZoneId?: pulumi.Input<string>;
    engine?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    internetChargeType?: pulumi.Input<string>;
    internetMaxBandwidthOut?: pulumi.Input<number>;
    keyPairName?: pulumi.Input<string>;
    osPassword?: pulumi.Input<string>;
    passwordInherit?: pulumi.Input<string>;
    paymentType?: pulumi.Input<string>;
    period?: pulumi.Input<string>;
    periodType?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.CddcDedicatedPropreHostTimeouts>;
    userData?: pulumi.Input<string>;
    userDataEncoded?: pulumi.Input<boolean>;
    vpcId?: pulumi.Input<string>;
    vswitchId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CddcDedicatedPropreHost resource.
 */
export interface CddcDedicatedPropreHostArgs {
    autoPay?: pulumi.Input<boolean>;
    autoRenew?: pulumi.Input<string>;
    dedicatedHostGroupId?: pulumi.Input<string>;
    ecsClassLists: pulumi.Input<pulumi.Input<inputs.CddcDedicatedPropreHostEcsClassList>[]>;
    ecsDeploymentSetId?: pulumi.Input<string>;
    ecsHostName?: pulumi.Input<string>;
    ecsInstanceName?: pulumi.Input<string>;
    ecsUniqueSuffix?: pulumi.Input<string>;
    ecsZoneId: pulumi.Input<string>;
    engine: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    internetChargeType?: pulumi.Input<string>;
    internetMaxBandwidthOut?: pulumi.Input<number>;
    keyPairName?: pulumi.Input<string>;
    osPassword?: pulumi.Input<string>;
    passwordInherit?: pulumi.Input<string>;
    paymentType: pulumi.Input<string>;
    period?: pulumi.Input<string>;
    periodType?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    securityGroupId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.CddcDedicatedPropreHostTimeouts>;
    userData?: pulumi.Input<string>;
    userDataEncoded?: pulumi.Input<boolean>;
    vpcId: pulumi.Input<string>;
    vswitchId: pulumi.Input<string>;
}
