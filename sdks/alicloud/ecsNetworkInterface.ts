// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EcsNetworkInterface extends pulumi.CustomResource {
    /**
     * Get an existing EcsNetworkInterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcsNetworkInterfaceState, opts?: pulumi.CustomResourceOptions): EcsNetworkInterface {
        return new EcsNetworkInterface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/ecsNetworkInterface:EcsNetworkInterface';

    /**
     * Returns true if the given object is an instance of EcsNetworkInterface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcsNetworkInterface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcsNetworkInterface.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly instanceType!: pulumi.Output<string>;
    public readonly ipv4PrefixCount!: pulumi.Output<number>;
    public readonly ipv4Prefixes!: pulumi.Output<string[]>;
    public readonly ipv6AddressCount!: pulumi.Output<number>;
    public readonly ipv6Addresses!: pulumi.Output<string[]>;
    public /*out*/ readonly mac!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly name!: pulumi.Output<string>;
    public readonly networkInterfaceName!: pulumi.Output<string>;
    public readonly networkInterfaceTrafficMode!: pulumi.Output<string>;
    public readonly primaryIpAddress!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly privateIp!: pulumi.Output<string>;
    public readonly privateIpAddresses!: pulumi.Output<string[]>;
    /**
     * @deprecated Deprecated
     */
    public readonly privateIps!: pulumi.Output<string[]>;
    /**
     * @deprecated Deprecated
     */
    public readonly privateIpsCount!: pulumi.Output<number>;
    public readonly queueNumber!: pulumi.Output<number>;
    public readonly resourceGroupId!: pulumi.Output<string | undefined>;
    public readonly secondaryPrivateIpAddressCount!: pulumi.Output<number>;
    public readonly securityGroupIds!: pulumi.Output<string[]>;
    /**
     * @deprecated Deprecated
     */
    public readonly securityGroups!: pulumi.Output<string[]>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.EcsNetworkInterfaceTimeouts | undefined>;
    public readonly vswitchId!: pulumi.Output<string>;

    /**
     * Create a EcsNetworkInterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EcsNetworkInterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcsNetworkInterfaceArgs | EcsNetworkInterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcsNetworkInterfaceState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["ipv4PrefixCount"] = state ? state.ipv4PrefixCount : undefined;
            resourceInputs["ipv4Prefixes"] = state ? state.ipv4Prefixes : undefined;
            resourceInputs["ipv6AddressCount"] = state ? state.ipv6AddressCount : undefined;
            resourceInputs["ipv6Addresses"] = state ? state.ipv6Addresses : undefined;
            resourceInputs["mac"] = state ? state.mac : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkInterfaceName"] = state ? state.networkInterfaceName : undefined;
            resourceInputs["networkInterfaceTrafficMode"] = state ? state.networkInterfaceTrafficMode : undefined;
            resourceInputs["primaryIpAddress"] = state ? state.primaryIpAddress : undefined;
            resourceInputs["privateIp"] = state ? state.privateIp : undefined;
            resourceInputs["privateIpAddresses"] = state ? state.privateIpAddresses : undefined;
            resourceInputs["privateIps"] = state ? state.privateIps : undefined;
            resourceInputs["privateIpsCount"] = state ? state.privateIpsCount : undefined;
            resourceInputs["queueNumber"] = state ? state.queueNumber : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["secondaryPrivateIpAddressCount"] = state ? state.secondaryPrivateIpAddressCount : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vswitchId"] = state ? state.vswitchId : undefined;
        } else {
            const args = argsOrState as EcsNetworkInterfaceArgs | undefined;
            if ((!args || args.vswitchId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vswitchId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["ipv4PrefixCount"] = args ? args.ipv4PrefixCount : undefined;
            resourceInputs["ipv4Prefixes"] = args ? args.ipv4Prefixes : undefined;
            resourceInputs["ipv6AddressCount"] = args ? args.ipv6AddressCount : undefined;
            resourceInputs["ipv6Addresses"] = args ? args.ipv6Addresses : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkInterfaceName"] = args ? args.networkInterfaceName : undefined;
            resourceInputs["networkInterfaceTrafficMode"] = args ? args.networkInterfaceTrafficMode : undefined;
            resourceInputs["primaryIpAddress"] = args ? args.primaryIpAddress : undefined;
            resourceInputs["privateIp"] = args ? args.privateIp : undefined;
            resourceInputs["privateIpAddresses"] = args ? args.privateIpAddresses : undefined;
            resourceInputs["privateIps"] = args ? args.privateIps : undefined;
            resourceInputs["privateIpsCount"] = args ? args.privateIpsCount : undefined;
            resourceInputs["queueNumber"] = args ? args.queueNumber : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["secondaryPrivateIpAddressCount"] = args ? args.secondaryPrivateIpAddressCount : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["securityGroups"] = args ? args.securityGroups : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vswitchId"] = args ? args.vswitchId : undefined;
            resourceInputs["mac"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EcsNetworkInterface.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EcsNetworkInterface resources.
 */
export interface EcsNetworkInterfaceState {
    description?: pulumi.Input<string>;
    instanceType?: pulumi.Input<string>;
    ipv4PrefixCount?: pulumi.Input<number>;
    ipv4Prefixes?: pulumi.Input<pulumi.Input<string>[]>;
    ipv6AddressCount?: pulumi.Input<number>;
    ipv6Addresses?: pulumi.Input<pulumi.Input<string>[]>;
    mac?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    name?: pulumi.Input<string>;
    networkInterfaceName?: pulumi.Input<string>;
    networkInterfaceTrafficMode?: pulumi.Input<string>;
    primaryIpAddress?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    privateIp?: pulumi.Input<string>;
    privateIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * @deprecated Deprecated
     */
    privateIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * @deprecated Deprecated
     */
    privateIpsCount?: pulumi.Input<number>;
    queueNumber?: pulumi.Input<number>;
    resourceGroupId?: pulumi.Input<string>;
    secondaryPrivateIpAddressCount?: pulumi.Input<number>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * @deprecated Deprecated
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.EcsNetworkInterfaceTimeouts>;
    vswitchId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EcsNetworkInterface resource.
 */
export interface EcsNetworkInterfaceArgs {
    description?: pulumi.Input<string>;
    instanceType?: pulumi.Input<string>;
    ipv4PrefixCount?: pulumi.Input<number>;
    ipv4Prefixes?: pulumi.Input<pulumi.Input<string>[]>;
    ipv6AddressCount?: pulumi.Input<number>;
    ipv6Addresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * @deprecated Deprecated
     */
    name?: pulumi.Input<string>;
    networkInterfaceName?: pulumi.Input<string>;
    networkInterfaceTrafficMode?: pulumi.Input<string>;
    primaryIpAddress?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    privateIp?: pulumi.Input<string>;
    privateIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * @deprecated Deprecated
     */
    privateIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * @deprecated Deprecated
     */
    privateIpsCount?: pulumi.Input<number>;
    queueNumber?: pulumi.Input<number>;
    resourceGroupId?: pulumi.Input<string>;
    secondaryPrivateIpAddressCount?: pulumi.Input<number>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * @deprecated Deprecated
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.EcsNetworkInterfaceTimeouts>;
    vswitchId: pulumi.Input<string>;
}
