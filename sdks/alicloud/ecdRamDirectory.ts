// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EcdRamDirectory extends pulumi.CustomResource {
    /**
     * Get an existing EcdRamDirectory resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcdRamDirectoryState, opts?: pulumi.CustomResourceOptions): EcdRamDirectory {
        return new EcdRamDirectory(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/ecdRamDirectory:EcdRamDirectory';

    /**
     * Returns true if the given object is an instance of EcdRamDirectory.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcdRamDirectory {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcdRamDirectory.__pulumiType;
    }

    public readonly desktopAccessType!: pulumi.Output<string>;
    public readonly enableAdminAccess!: pulumi.Output<boolean>;
    public readonly enableInternetAccess!: pulumi.Output<boolean>;
    public readonly ramDirectoryName!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.EcdRamDirectoryTimeouts | undefined>;
    public readonly vswitchIds!: pulumi.Output<string[]>;

    /**
     * Create a EcdRamDirectory resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EcdRamDirectoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcdRamDirectoryArgs | EcdRamDirectoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcdRamDirectoryState | undefined;
            resourceInputs["desktopAccessType"] = state ? state.desktopAccessType : undefined;
            resourceInputs["enableAdminAccess"] = state ? state.enableAdminAccess : undefined;
            resourceInputs["enableInternetAccess"] = state ? state.enableInternetAccess : undefined;
            resourceInputs["ramDirectoryName"] = state ? state.ramDirectoryName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vswitchIds"] = state ? state.vswitchIds : undefined;
        } else {
            const args = argsOrState as EcdRamDirectoryArgs | undefined;
            if ((!args || args.ramDirectoryName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ramDirectoryName'");
            }
            if ((!args || args.vswitchIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vswitchIds'");
            }
            resourceInputs["desktopAccessType"] = args ? args.desktopAccessType : undefined;
            resourceInputs["enableAdminAccess"] = args ? args.enableAdminAccess : undefined;
            resourceInputs["enableInternetAccess"] = args ? args.enableInternetAccess : undefined;
            resourceInputs["ramDirectoryName"] = args ? args.ramDirectoryName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vswitchIds"] = args ? args.vswitchIds : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EcdRamDirectory.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EcdRamDirectory resources.
 */
export interface EcdRamDirectoryState {
    desktopAccessType?: pulumi.Input<string>;
    enableAdminAccess?: pulumi.Input<boolean>;
    enableInternetAccess?: pulumi.Input<boolean>;
    ramDirectoryName?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EcdRamDirectoryTimeouts>;
    vswitchIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a EcdRamDirectory resource.
 */
export interface EcdRamDirectoryArgs {
    desktopAccessType?: pulumi.Input<string>;
    enableAdminAccess?: pulumi.Input<boolean>;
    enableInternetAccess?: pulumi.Input<boolean>;
    ramDirectoryName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EcdRamDirectoryTimeouts>;
    vswitchIds: pulumi.Input<pulumi.Input<string>[]>;
}
