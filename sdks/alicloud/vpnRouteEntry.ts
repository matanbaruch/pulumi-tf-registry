// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpnRouteEntry extends pulumi.CustomResource {
    /**
     * Get an existing VpnRouteEntry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnRouteEntryState, opts?: pulumi.CustomResourceOptions): VpnRouteEntry {
        return new VpnRouteEntry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/vpnRouteEntry:VpnRouteEntry';

    /**
     * Returns true if the given object is an instance of VpnRouteEntry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnRouteEntry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnRouteEntry.__pulumiType;
    }

    public readonly nextHop!: pulumi.Output<string>;
    public readonly publishVpc!: pulumi.Output<boolean>;
    public readonly routeDest!: pulumi.Output<string>;
    public /*out*/ readonly routeEntryType!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.VpnRouteEntryTimeouts | undefined>;
    public readonly vpnGatewayId!: pulumi.Output<string>;
    public readonly weight!: pulumi.Output<number>;

    /**
     * Create a VpnRouteEntry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnRouteEntryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnRouteEntryArgs | VpnRouteEntryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnRouteEntryState | undefined;
            resourceInputs["nextHop"] = state ? state.nextHop : undefined;
            resourceInputs["publishVpc"] = state ? state.publishVpc : undefined;
            resourceInputs["routeDest"] = state ? state.routeDest : undefined;
            resourceInputs["routeEntryType"] = state ? state.routeEntryType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpnGatewayId"] = state ? state.vpnGatewayId : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as VpnRouteEntryArgs | undefined;
            if ((!args || args.nextHop === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nextHop'");
            }
            if ((!args || args.publishVpc === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publishVpc'");
            }
            if ((!args || args.routeDest === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routeDest'");
            }
            if ((!args || args.vpnGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpnGatewayId'");
            }
            if ((!args || args.weight === undefined) && !opts.urn) {
                throw new Error("Missing required property 'weight'");
            }
            resourceInputs["nextHop"] = args ? args.nextHop : undefined;
            resourceInputs["publishVpc"] = args ? args.publishVpc : undefined;
            resourceInputs["routeDest"] = args ? args.routeDest : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpnGatewayId"] = args ? args.vpnGatewayId : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
            resourceInputs["routeEntryType"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnRouteEntry.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpnRouteEntry resources.
 */
export interface VpnRouteEntryState {
    nextHop?: pulumi.Input<string>;
    publishVpc?: pulumi.Input<boolean>;
    routeDest?: pulumi.Input<string>;
    routeEntryType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VpnRouteEntryTimeouts>;
    vpnGatewayId?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a VpnRouteEntry resource.
 */
export interface VpnRouteEntryArgs {
    nextHop: pulumi.Input<string>;
    publishVpc: pulumi.Input<boolean>;
    routeDest: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VpnRouteEntryTimeouts>;
    vpnGatewayId: pulumi.Input<string>;
    weight: pulumi.Input<number>;
}
