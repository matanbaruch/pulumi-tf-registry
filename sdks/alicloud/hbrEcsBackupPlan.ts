// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class HbrEcsBackupPlan extends pulumi.CustomResource {
    /**
     * Get an existing HbrEcsBackupPlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HbrEcsBackupPlanState, opts?: pulumi.CustomResourceOptions): HbrEcsBackupPlan {
        return new HbrEcsBackupPlan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/hbrEcsBackupPlan:HbrEcsBackupPlan';

    /**
     * Returns true if the given object is an instance of HbrEcsBackupPlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HbrEcsBackupPlan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HbrEcsBackupPlan.__pulumiType;
    }

    public readonly backupType!: pulumi.Output<string>;
    public readonly crossAccountRoleName!: pulumi.Output<string | undefined>;
    public readonly crossAccountType!: pulumi.Output<string>;
    public readonly crossAccountUserId!: pulumi.Output<number | undefined>;
    public readonly detail!: pulumi.Output<string | undefined>;
    public readonly disabled!: pulumi.Output<boolean>;
    public readonly ecsBackupPlanName!: pulumi.Output<string>;
    public readonly exclude!: pulumi.Output<string | undefined>;
    public readonly include!: pulumi.Output<string | undefined>;
    public readonly instanceId!: pulumi.Output<string>;
    public readonly options!: pulumi.Output<string | undefined>;
    public readonly paths!: pulumi.Output<string[] | undefined>;
    public readonly retention!: pulumi.Output<string>;
    public readonly schedule!: pulumi.Output<string>;
    public readonly speedLimit!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly updatePaths!: pulumi.Output<boolean | undefined>;
    public readonly vaultId!: pulumi.Output<string>;

    /**
     * Create a HbrEcsBackupPlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HbrEcsBackupPlanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HbrEcsBackupPlanArgs | HbrEcsBackupPlanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HbrEcsBackupPlanState | undefined;
            resourceInputs["backupType"] = state ? state.backupType : undefined;
            resourceInputs["crossAccountRoleName"] = state ? state.crossAccountRoleName : undefined;
            resourceInputs["crossAccountType"] = state ? state.crossAccountType : undefined;
            resourceInputs["crossAccountUserId"] = state ? state.crossAccountUserId : undefined;
            resourceInputs["detail"] = state ? state.detail : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["ecsBackupPlanName"] = state ? state.ecsBackupPlanName : undefined;
            resourceInputs["exclude"] = state ? state.exclude : undefined;
            resourceInputs["include"] = state ? state.include : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["paths"] = state ? state.paths : undefined;
            resourceInputs["retention"] = state ? state.retention : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["speedLimit"] = state ? state.speedLimit : undefined;
            resourceInputs["updatePaths"] = state ? state.updatePaths : undefined;
            resourceInputs["vaultId"] = state ? state.vaultId : undefined;
        } else {
            const args = argsOrState as HbrEcsBackupPlanArgs | undefined;
            if ((!args || args.backupType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backupType'");
            }
            if ((!args || args.ecsBackupPlanName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ecsBackupPlanName'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.retention === undefined) && !opts.urn) {
                throw new Error("Missing required property 'retention'");
            }
            if ((!args || args.schedule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schedule'");
            }
            if ((!args || args.vaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vaultId'");
            }
            resourceInputs["backupType"] = args ? args.backupType : undefined;
            resourceInputs["crossAccountRoleName"] = args ? args.crossAccountRoleName : undefined;
            resourceInputs["crossAccountType"] = args ? args.crossAccountType : undefined;
            resourceInputs["crossAccountUserId"] = args ? args.crossAccountUserId : undefined;
            resourceInputs["detail"] = args ? args.detail : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["ecsBackupPlanName"] = args ? args.ecsBackupPlanName : undefined;
            resourceInputs["exclude"] = args ? args.exclude : undefined;
            resourceInputs["include"] = args ? args.include : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["paths"] = args ? args.paths : undefined;
            resourceInputs["retention"] = args ? args.retention : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["speedLimit"] = args ? args.speedLimit : undefined;
            resourceInputs["updatePaths"] = args ? args.updatePaths : undefined;
            resourceInputs["vaultId"] = args ? args.vaultId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HbrEcsBackupPlan.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HbrEcsBackupPlan resources.
 */
export interface HbrEcsBackupPlanState {
    backupType?: pulumi.Input<string>;
    crossAccountRoleName?: pulumi.Input<string>;
    crossAccountType?: pulumi.Input<string>;
    crossAccountUserId?: pulumi.Input<number>;
    detail?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    ecsBackupPlanName?: pulumi.Input<string>;
    exclude?: pulumi.Input<string>;
    include?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    paths?: pulumi.Input<pulumi.Input<string>[]>;
    retention?: pulumi.Input<string>;
    schedule?: pulumi.Input<string>;
    speedLimit?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    updatePaths?: pulumi.Input<boolean>;
    vaultId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HbrEcsBackupPlan resource.
 */
export interface HbrEcsBackupPlanArgs {
    backupType: pulumi.Input<string>;
    crossAccountRoleName?: pulumi.Input<string>;
    crossAccountType?: pulumi.Input<string>;
    crossAccountUserId?: pulumi.Input<number>;
    detail?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    ecsBackupPlanName: pulumi.Input<string>;
    exclude?: pulumi.Input<string>;
    include?: pulumi.Input<string>;
    instanceId: pulumi.Input<string>;
    options?: pulumi.Input<string>;
    paths?: pulumi.Input<pulumi.Input<string>[]>;
    retention: pulumi.Input<string>;
    schedule: pulumi.Input<string>;
    speedLimit?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    updatePaths?: pulumi.Input<boolean>;
    vaultId: pulumi.Input<string>;
}
