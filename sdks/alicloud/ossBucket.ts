// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OssBucket extends pulumi.CustomResource {
    /**
     * Get an existing OssBucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OssBucketState, opts?: pulumi.CustomResourceOptions): OssBucket {
        return new OssBucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/ossBucket:OssBucket';

    /**
     * Returns true if the given object is an instance of OssBucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OssBucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OssBucket.__pulumiType;
    }

    public readonly accessMonitor!: pulumi.Output<outputs.OssBucketAccessMonitor | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly acl!: pulumi.Output<string>;
    public readonly bucket!: pulumi.Output<string | undefined>;
    public readonly corsRules!: pulumi.Output<outputs.OssBucketCorsRule[] | undefined>;
    public /*out*/ readonly creationDate!: pulumi.Output<string>;
    public /*out*/ readonly extranetEndpoint!: pulumi.Output<string>;
    public readonly forceDestroy!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly intranetEndpoint!: pulumi.Output<string>;
    public readonly lifecycleRuleAllowSameActionOverlap!: pulumi.Output<boolean | undefined>;
    public readonly lifecycleRules!: pulumi.Output<outputs.OssBucketLifecycleRule[] | undefined>;
    public /*out*/ readonly location!: pulumi.Output<string>;
    public readonly logging!: pulumi.Output<outputs.OssBucketLogging | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly loggingIsenable!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly owner!: pulumi.Output<string>;
    public readonly policy!: pulumi.Output<string | undefined>;
    public readonly redundancyType!: pulumi.Output<string | undefined>;
    public readonly refererConfig!: pulumi.Output<outputs.OssBucketRefererConfig | undefined>;
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly serverSideEncryptionRule!: pulumi.Output<outputs.OssBucketServerSideEncryptionRule | undefined>;
    public readonly storageClass!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly transferAcceleration!: pulumi.Output<outputs.OssBucketTransferAcceleration | undefined>;
    public readonly versioning!: pulumi.Output<outputs.OssBucketVersioning | undefined>;
    public readonly website!: pulumi.Output<outputs.OssBucketWebsite | undefined>;

    /**
     * Create a OssBucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: OssBucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OssBucketArgs | OssBucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OssBucketState | undefined;
            resourceInputs["accessMonitor"] = state ? state.accessMonitor : undefined;
            resourceInputs["acl"] = state ? state.acl : undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["corsRules"] = state ? state.corsRules : undefined;
            resourceInputs["creationDate"] = state ? state.creationDate : undefined;
            resourceInputs["extranetEndpoint"] = state ? state.extranetEndpoint : undefined;
            resourceInputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            resourceInputs["intranetEndpoint"] = state ? state.intranetEndpoint : undefined;
            resourceInputs["lifecycleRuleAllowSameActionOverlap"] = state ? state.lifecycleRuleAllowSameActionOverlap : undefined;
            resourceInputs["lifecycleRules"] = state ? state.lifecycleRules : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["logging"] = state ? state.logging : undefined;
            resourceInputs["loggingIsenable"] = state ? state.loggingIsenable : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["redundancyType"] = state ? state.redundancyType : undefined;
            resourceInputs["refererConfig"] = state ? state.refererConfig : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["serverSideEncryptionRule"] = state ? state.serverSideEncryptionRule : undefined;
            resourceInputs["storageClass"] = state ? state.storageClass : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["transferAcceleration"] = state ? state.transferAcceleration : undefined;
            resourceInputs["versioning"] = state ? state.versioning : undefined;
            resourceInputs["website"] = state ? state.website : undefined;
        } else {
            const args = argsOrState as OssBucketArgs | undefined;
            resourceInputs["accessMonitor"] = args ? args.accessMonitor : undefined;
            resourceInputs["acl"] = args ? args.acl : undefined;
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["corsRules"] = args ? args.corsRules : undefined;
            resourceInputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            resourceInputs["lifecycleRuleAllowSameActionOverlap"] = args ? args.lifecycleRuleAllowSameActionOverlap : undefined;
            resourceInputs["lifecycleRules"] = args ? args.lifecycleRules : undefined;
            resourceInputs["logging"] = args ? args.logging : undefined;
            resourceInputs["loggingIsenable"] = args ? args.loggingIsenable : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["redundancyType"] = args ? args.redundancyType : undefined;
            resourceInputs["refererConfig"] = args ? args.refererConfig : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["serverSideEncryptionRule"] = args ? args.serverSideEncryptionRule : undefined;
            resourceInputs["storageClass"] = args ? args.storageClass : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["transferAcceleration"] = args ? args.transferAcceleration : undefined;
            resourceInputs["versioning"] = args ? args.versioning : undefined;
            resourceInputs["website"] = args ? args.website : undefined;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["extranetEndpoint"] = undefined /*out*/;
            resourceInputs["intranetEndpoint"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OssBucket.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OssBucket resources.
 */
export interface OssBucketState {
    accessMonitor?: pulumi.Input<inputs.OssBucketAccessMonitor>;
    /**
     * @deprecated Deprecated
     */
    acl?: pulumi.Input<string>;
    bucket?: pulumi.Input<string>;
    corsRules?: pulumi.Input<pulumi.Input<inputs.OssBucketCorsRule>[]>;
    creationDate?: pulumi.Input<string>;
    extranetEndpoint?: pulumi.Input<string>;
    forceDestroy?: pulumi.Input<boolean>;
    intranetEndpoint?: pulumi.Input<string>;
    lifecycleRuleAllowSameActionOverlap?: pulumi.Input<boolean>;
    lifecycleRules?: pulumi.Input<pulumi.Input<inputs.OssBucketLifecycleRule>[]>;
    location?: pulumi.Input<string>;
    logging?: pulumi.Input<inputs.OssBucketLogging>;
    /**
     * @deprecated Deprecated
     */
    loggingIsenable?: pulumi.Input<boolean>;
    owner?: pulumi.Input<string>;
    policy?: pulumi.Input<string>;
    redundancyType?: pulumi.Input<string>;
    refererConfig?: pulumi.Input<inputs.OssBucketRefererConfig>;
    resourceGroupId?: pulumi.Input<string>;
    serverSideEncryptionRule?: pulumi.Input<inputs.OssBucketServerSideEncryptionRule>;
    storageClass?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    transferAcceleration?: pulumi.Input<inputs.OssBucketTransferAcceleration>;
    versioning?: pulumi.Input<inputs.OssBucketVersioning>;
    website?: pulumi.Input<inputs.OssBucketWebsite>;
}

/**
 * The set of arguments for constructing a OssBucket resource.
 */
export interface OssBucketArgs {
    accessMonitor?: pulumi.Input<inputs.OssBucketAccessMonitor>;
    /**
     * @deprecated Deprecated
     */
    acl?: pulumi.Input<string>;
    bucket?: pulumi.Input<string>;
    corsRules?: pulumi.Input<pulumi.Input<inputs.OssBucketCorsRule>[]>;
    forceDestroy?: pulumi.Input<boolean>;
    lifecycleRuleAllowSameActionOverlap?: pulumi.Input<boolean>;
    lifecycleRules?: pulumi.Input<pulumi.Input<inputs.OssBucketLifecycleRule>[]>;
    logging?: pulumi.Input<inputs.OssBucketLogging>;
    /**
     * @deprecated Deprecated
     */
    loggingIsenable?: pulumi.Input<boolean>;
    policy?: pulumi.Input<string>;
    redundancyType?: pulumi.Input<string>;
    refererConfig?: pulumi.Input<inputs.OssBucketRefererConfig>;
    resourceGroupId?: pulumi.Input<string>;
    serverSideEncryptionRule?: pulumi.Input<inputs.OssBucketServerSideEncryptionRule>;
    storageClass?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    transferAcceleration?: pulumi.Input<inputs.OssBucketTransferAcceleration>;
    versioning?: pulumi.Input<inputs.OssBucketVersioning>;
    website?: pulumi.Input<inputs.OssBucketWebsite>;
}
