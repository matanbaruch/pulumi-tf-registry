// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEcsSnapshots(args?: GetEcsSnapshotsArgs, opts?: pulumi.InvokeOptions): Promise<GetEcsSnapshotsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("alicloud:index/getEcsSnapshots:getEcsSnapshots", {
        "category": args.category,
        "dryRun": args.dryRun,
        "encrypted": args.encrypted,
        "id": args.id,
        "ids": args.ids,
        "kmsKeyId": args.kmsKeyId,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "resourceGroupId": args.resourceGroupId,
        "snapshotLinkId": args.snapshotLinkId,
        "snapshotName": args.snapshotName,
        "snapshotType": args.snapshotType,
        "sourceDiskType": args.sourceDiskType,
        "status": args.status,
        "tags": args.tags,
        "type": args.type,
        "usage": args.usage,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEcsSnapshots.
 */
export interface GetEcsSnapshotsArgs {
    category?: string;
    dryRun?: boolean;
    encrypted?: boolean;
    id?: string;
    ids?: string[];
    kmsKeyId?: string;
    nameRegex?: string;
    outputFile?: string;
    resourceGroupId?: string;
    snapshotLinkId?: string;
    snapshotName?: string;
    snapshotType?: string;
    sourceDiskType?: string;
    status?: string;
    tags?: {[key: string]: string};
    type?: string;
    usage?: string;
}

/**
 * A collection of values returned by getEcsSnapshots.
 */
export interface GetEcsSnapshotsResult {
    readonly category?: string;
    readonly dryRun?: boolean;
    readonly encrypted?: boolean;
    readonly id: string;
    readonly ids: string[];
    readonly kmsKeyId?: string;
    readonly nameRegex?: string;
    readonly names: string[];
    readonly outputFile?: string;
    readonly resourceGroupId?: string;
    readonly snapshotLinkId?: string;
    readonly snapshotName?: string;
    readonly snapshotType?: string;
    readonly snapshots: outputs.GetEcsSnapshotsSnapshot[];
    readonly sourceDiskType?: string;
    readonly status?: string;
    readonly tags?: {[key: string]: string};
    readonly type?: string;
    readonly usage?: string;
}
export function getEcsSnapshotsOutput(args?: GetEcsSnapshotsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEcsSnapshotsResult> {
    return pulumi.output(args).apply((a: any) => getEcsSnapshots(a, opts))
}

/**
 * A collection of arguments for invoking getEcsSnapshots.
 */
export interface GetEcsSnapshotsOutputArgs {
    category?: pulumi.Input<string>;
    dryRun?: pulumi.Input<boolean>;
    encrypted?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    kmsKeyId?: pulumi.Input<string>;
    nameRegex?: pulumi.Input<string>;
    outputFile?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    snapshotLinkId?: pulumi.Input<string>;
    snapshotName?: pulumi.Input<string>;
    snapshotType?: pulumi.Input<string>;
    sourceDiskType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type?: pulumi.Input<string>;
    usage?: pulumi.Input<string>;
}
