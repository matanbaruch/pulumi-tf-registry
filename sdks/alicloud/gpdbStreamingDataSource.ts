// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GpdbStreamingDataSource extends pulumi.CustomResource {
    /**
     * Get an existing GpdbStreamingDataSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GpdbStreamingDataSourceState, opts?: pulumi.CustomResourceOptions): GpdbStreamingDataSource {
        return new GpdbStreamingDataSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/gpdbStreamingDataSource:GpdbStreamingDataSource';

    /**
     * Returns true if the given object is an instance of GpdbStreamingDataSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GpdbStreamingDataSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GpdbStreamingDataSource.__pulumiType;
    }

    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly dataSourceConfig!: pulumi.Output<string>;
    public readonly dataSourceDescription!: pulumi.Output<string | undefined>;
    public /*out*/ readonly dataSourceId!: pulumi.Output<string>;
    public readonly dataSourceName!: pulumi.Output<string>;
    public readonly dataSourceType!: pulumi.Output<string>;
    public readonly dbInstanceId!: pulumi.Output<string>;
    public readonly serviceId!: pulumi.Output<number>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.GpdbStreamingDataSourceTimeouts | undefined>;

    /**
     * Create a GpdbStreamingDataSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GpdbStreamingDataSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GpdbStreamingDataSourceArgs | GpdbStreamingDataSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GpdbStreamingDataSourceState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["dataSourceConfig"] = state ? state.dataSourceConfig : undefined;
            resourceInputs["dataSourceDescription"] = state ? state.dataSourceDescription : undefined;
            resourceInputs["dataSourceId"] = state ? state.dataSourceId : undefined;
            resourceInputs["dataSourceName"] = state ? state.dataSourceName : undefined;
            resourceInputs["dataSourceType"] = state ? state.dataSourceType : undefined;
            resourceInputs["dbInstanceId"] = state ? state.dbInstanceId : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as GpdbStreamingDataSourceArgs | undefined;
            if ((!args || args.dataSourceConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataSourceConfig'");
            }
            if ((!args || args.dataSourceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataSourceName'");
            }
            if ((!args || args.dataSourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataSourceType'");
            }
            if ((!args || args.dbInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbInstanceId'");
            }
            if ((!args || args.serviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            resourceInputs["dataSourceConfig"] = args ? args.dataSourceConfig : undefined;
            resourceInputs["dataSourceDescription"] = args ? args.dataSourceDescription : undefined;
            resourceInputs["dataSourceName"] = args ? args.dataSourceName : undefined;
            resourceInputs["dataSourceType"] = args ? args.dataSourceType : undefined;
            resourceInputs["dbInstanceId"] = args ? args.dbInstanceId : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["dataSourceId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GpdbStreamingDataSource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GpdbStreamingDataSource resources.
 */
export interface GpdbStreamingDataSourceState {
    createTime?: pulumi.Input<string>;
    dataSourceConfig?: pulumi.Input<string>;
    dataSourceDescription?: pulumi.Input<string>;
    dataSourceId?: pulumi.Input<string>;
    dataSourceName?: pulumi.Input<string>;
    dataSourceType?: pulumi.Input<string>;
    dbInstanceId?: pulumi.Input<string>;
    serviceId?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GpdbStreamingDataSourceTimeouts>;
}

/**
 * The set of arguments for constructing a GpdbStreamingDataSource resource.
 */
export interface GpdbStreamingDataSourceArgs {
    dataSourceConfig: pulumi.Input<string>;
    dataSourceDescription?: pulumi.Input<string>;
    dataSourceName: pulumi.Input<string>;
    dataSourceType: pulumi.Input<string>;
    dbInstanceId: pulumi.Input<string>;
    serviceId: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.GpdbStreamingDataSourceTimeouts>;
}
