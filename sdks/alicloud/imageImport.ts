// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ImageImport extends pulumi.CustomResource {
    /**
     * Get an existing ImageImport resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageImportState, opts?: pulumi.CustomResourceOptions): ImageImport {
        return new ImageImport(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alicloud:index/imageImport:ImageImport';

    /**
     * Returns true if the given object is an instance of ImageImport.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImageImport {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImageImport.__pulumiType;
    }

    public readonly architecture!: pulumi.Output<string | undefined>;
    public readonly bootMode!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly diskDeviceMappings!: pulumi.Output<outputs.ImageImportDiskDeviceMapping[]>;
    public readonly imageName!: pulumi.Output<string>;
    public readonly licenseType!: pulumi.Output<string | undefined>;
    public readonly osType!: pulumi.Output<string | undefined>;
    public readonly platform!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ImageImportTimeouts | undefined>;

    /**
     * Create a ImageImport resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageImportArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageImportArgs | ImageImportState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageImportState | undefined;
            resourceInputs["architecture"] = state ? state.architecture : undefined;
            resourceInputs["bootMode"] = state ? state.bootMode : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diskDeviceMappings"] = state ? state.diskDeviceMappings : undefined;
            resourceInputs["imageName"] = state ? state.imageName : undefined;
            resourceInputs["licenseType"] = state ? state.licenseType : undefined;
            resourceInputs["osType"] = state ? state.osType : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ImageImportArgs | undefined;
            if ((!args || args.diskDeviceMappings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskDeviceMappings'");
            }
            resourceInputs["architecture"] = args ? args.architecture : undefined;
            resourceInputs["bootMode"] = args ? args.bootMode : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["diskDeviceMappings"] = args ? args.diskDeviceMappings : undefined;
            resourceInputs["imageName"] = args ? args.imageName : undefined;
            resourceInputs["licenseType"] = args ? args.licenseType : undefined;
            resourceInputs["osType"] = args ? args.osType : undefined;
            resourceInputs["platform"] = args ? args.platform : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImageImport.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ImageImport resources.
 */
export interface ImageImportState {
    architecture?: pulumi.Input<string>;
    bootMode?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    diskDeviceMappings?: pulumi.Input<pulumi.Input<inputs.ImageImportDiskDeviceMapping>[]>;
    imageName?: pulumi.Input<string>;
    licenseType?: pulumi.Input<string>;
    osType?: pulumi.Input<string>;
    platform?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ImageImportTimeouts>;
}

/**
 * The set of arguments for constructing a ImageImport resource.
 */
export interface ImageImportArgs {
    architecture?: pulumi.Input<string>;
    bootMode?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    diskDeviceMappings: pulumi.Input<pulumi.Input<inputs.ImageImportDiskDeviceMapping>[]>;
    imageName?: pulumi.Input<string>;
    licenseType?: pulumi.Input<string>;
    osType?: pulumi.Input<string>;
    platform?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ImageImportTimeouts>;
}
