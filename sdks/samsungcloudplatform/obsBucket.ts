// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ObsBucket extends pulumi.CustomResource {
    /**
     * Get an existing ObsBucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObsBucketState, opts?: pulumi.CustomResourceOptions): ObsBucket {
        return new ObsBucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'samsungcloudplatform:index/obsBucket:ObsBucket';

    /**
     * Returns true if the given object is an instance of ObsBucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObsBucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObsBucket.__pulumiType;
    }

    /**
     * Object Storage Bucket Access Control Rules
     */
    public readonly accessControlRules!: pulumi.Output<outputs.ObsBucketAccessControlRule[] | undefined>;
    /**
     * Object Storage Bucket Access Control Enabled
     */
    public readonly objectStorageBucketAccessControlEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Object Storage Bucket DR Enabled
     */
    public readonly objectStorageBucketDrEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Object Storage Bucket DR Type
     */
    public /*out*/ readonly objectStorageBucketDrType!: pulumi.Output<string>;
    /**
     * Object Storage Bucket File Encryption Enabled
     */
    public readonly objectStorageBucketFileEncryptionEnabled!: pulumi.Output<boolean>;
    /**
     * Object Storage Bucket Name
     */
    public readonly objectStorageBucketName!: pulumi.Output<string>;
    /**
     * Object Storage Bucket Purpose
     */
    public /*out*/ readonly objectStorageBucketPurpose!: pulumi.Output<string>;
    /**
     * Object Storage Bucket User Purpose
     */
    public readonly objectStorageBucketUserPurpose!: pulumi.Output<string | undefined>;
    /**
     * Object Storage Bucket Version Enabled
     */
    public readonly objectStorageBucketVersionEnabled!: pulumi.Output<boolean>;
    /**
     * Object Storage ID
     */
    public readonly objectStorageId!: pulumi.Output<string>;
    /**
     * Product Names
     */
    public readonly productNames!: pulumi.Output<string[]>;
    /**
     * Service Zone ID
     */
    public readonly serviceZoneId!: pulumi.Output<string>;
    /**
     * Sync Object Storage Bucket ID
     */
    public readonly syncObjectStorageBucketId!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a ObsBucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObsBucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObsBucketArgs | ObsBucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObsBucketState | undefined;
            resourceInputs["accessControlRules"] = state ? state.accessControlRules : undefined;
            resourceInputs["objectStorageBucketAccessControlEnabled"] = state ? state.objectStorageBucketAccessControlEnabled : undefined;
            resourceInputs["objectStorageBucketDrEnabled"] = state ? state.objectStorageBucketDrEnabled : undefined;
            resourceInputs["objectStorageBucketDrType"] = state ? state.objectStorageBucketDrType : undefined;
            resourceInputs["objectStorageBucketFileEncryptionEnabled"] = state ? state.objectStorageBucketFileEncryptionEnabled : undefined;
            resourceInputs["objectStorageBucketName"] = state ? state.objectStorageBucketName : undefined;
            resourceInputs["objectStorageBucketPurpose"] = state ? state.objectStorageBucketPurpose : undefined;
            resourceInputs["objectStorageBucketUserPurpose"] = state ? state.objectStorageBucketUserPurpose : undefined;
            resourceInputs["objectStorageBucketVersionEnabled"] = state ? state.objectStorageBucketVersionEnabled : undefined;
            resourceInputs["objectStorageId"] = state ? state.objectStorageId : undefined;
            resourceInputs["productNames"] = state ? state.productNames : undefined;
            resourceInputs["serviceZoneId"] = state ? state.serviceZoneId : undefined;
            resourceInputs["syncObjectStorageBucketId"] = state ? state.syncObjectStorageBucketId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ObsBucketArgs | undefined;
            if ((!args || args.objectStorageBucketFileEncryptionEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'objectStorageBucketFileEncryptionEnabled'");
            }
            if ((!args || args.objectStorageBucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'objectStorageBucketName'");
            }
            if ((!args || args.objectStorageBucketVersionEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'objectStorageBucketVersionEnabled'");
            }
            if ((!args || args.objectStorageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'objectStorageId'");
            }
            if ((!args || args.productNames === undefined) && !opts.urn) {
                throw new Error("Missing required property 'productNames'");
            }
            if ((!args || args.serviceZoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceZoneId'");
            }
            resourceInputs["accessControlRules"] = args ? args.accessControlRules : undefined;
            resourceInputs["objectStorageBucketAccessControlEnabled"] = args ? args.objectStorageBucketAccessControlEnabled : undefined;
            resourceInputs["objectStorageBucketDrEnabled"] = args ? args.objectStorageBucketDrEnabled : undefined;
            resourceInputs["objectStorageBucketFileEncryptionEnabled"] = args ? args.objectStorageBucketFileEncryptionEnabled : undefined;
            resourceInputs["objectStorageBucketName"] = args ? args.objectStorageBucketName : undefined;
            resourceInputs["objectStorageBucketUserPurpose"] = args ? args.objectStorageBucketUserPurpose : undefined;
            resourceInputs["objectStorageBucketVersionEnabled"] = args ? args.objectStorageBucketVersionEnabled : undefined;
            resourceInputs["objectStorageId"] = args ? args.objectStorageId : undefined;
            resourceInputs["productNames"] = args ? args.productNames : undefined;
            resourceInputs["serviceZoneId"] = args ? args.serviceZoneId : undefined;
            resourceInputs["syncObjectStorageBucketId"] = args ? args.syncObjectStorageBucketId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["objectStorageBucketDrType"] = undefined /*out*/;
            resourceInputs["objectStorageBucketPurpose"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObsBucket.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObsBucket resources.
 */
export interface ObsBucketState {
    /**
     * Object Storage Bucket Access Control Rules
     */
    accessControlRules?: pulumi.Input<pulumi.Input<inputs.ObsBucketAccessControlRule>[]>;
    /**
     * Object Storage Bucket Access Control Enabled
     */
    objectStorageBucketAccessControlEnabled?: pulumi.Input<boolean>;
    /**
     * Object Storage Bucket DR Enabled
     */
    objectStorageBucketDrEnabled?: pulumi.Input<boolean>;
    /**
     * Object Storage Bucket DR Type
     */
    objectStorageBucketDrType?: pulumi.Input<string>;
    /**
     * Object Storage Bucket File Encryption Enabled
     */
    objectStorageBucketFileEncryptionEnabled?: pulumi.Input<boolean>;
    /**
     * Object Storage Bucket Name
     */
    objectStorageBucketName?: pulumi.Input<string>;
    /**
     * Object Storage Bucket Purpose
     */
    objectStorageBucketPurpose?: pulumi.Input<string>;
    /**
     * Object Storage Bucket User Purpose
     */
    objectStorageBucketUserPurpose?: pulumi.Input<string>;
    /**
     * Object Storage Bucket Version Enabled
     */
    objectStorageBucketVersionEnabled?: pulumi.Input<boolean>;
    /**
     * Object Storage ID
     */
    objectStorageId?: pulumi.Input<string>;
    /**
     * Product Names
     */
    productNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Service Zone ID
     */
    serviceZoneId?: pulumi.Input<string>;
    /**
     * Sync Object Storage Bucket ID
     */
    syncObjectStorageBucketId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a ObsBucket resource.
 */
export interface ObsBucketArgs {
    /**
     * Object Storage Bucket Access Control Rules
     */
    accessControlRules?: pulumi.Input<pulumi.Input<inputs.ObsBucketAccessControlRule>[]>;
    /**
     * Object Storage Bucket Access Control Enabled
     */
    objectStorageBucketAccessControlEnabled?: pulumi.Input<boolean>;
    /**
     * Object Storage Bucket DR Enabled
     */
    objectStorageBucketDrEnabled?: pulumi.Input<boolean>;
    /**
     * Object Storage Bucket File Encryption Enabled
     */
    objectStorageBucketFileEncryptionEnabled: pulumi.Input<boolean>;
    /**
     * Object Storage Bucket Name
     */
    objectStorageBucketName: pulumi.Input<string>;
    /**
     * Object Storage Bucket User Purpose
     */
    objectStorageBucketUserPurpose?: pulumi.Input<string>;
    /**
     * Object Storage Bucket Version Enabled
     */
    objectStorageBucketVersionEnabled: pulumi.Input<boolean>;
    /**
     * Object Storage ID
     */
    objectStorageId: pulumi.Input<string>;
    /**
     * Product Names
     */
    productNames: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Service Zone ID
     */
    serviceZoneId: pulumi.Input<string>;
    /**
     * Sync Object Storage Bucket ID
     */
    syncObjectStorageBucketId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
