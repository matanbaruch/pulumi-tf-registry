// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVirtualServers(args?: GetVirtualServersArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualServersResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("samsungcloudplatform:index/getVirtualServers:getVirtualServers", {
        "autoScalingEnabled": args.autoScalingEnabled,
        "autoScalingGroupId": args.autoScalingGroupId,
        "filters": args.filters,
        "id": args.id,
        "page": args.page,
        "serverGroupId": args.serverGroupId,
        "size": args.size,
        "sort": args.sort,
        "virtualServerId": args.virtualServerId,
        "virtualServerName": args.virtualServerName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVirtualServers.
 */
export interface GetVirtualServersArgs {
    autoScalingEnabled?: boolean;
    autoScalingGroupId?: string;
    filters?: inputs.GetVirtualServersFilter[];
    id?: string;
    page?: number;
    serverGroupId?: string;
    size?: number;
    sort?: string;
    virtualServerId?: string;
    virtualServerName?: string;
}

/**
 * A collection of values returned by getVirtualServers.
 */
export interface GetVirtualServersResult {
    readonly autoScalingEnabled?: boolean;
    readonly autoScalingGroupId?: string;
    readonly contents: outputs.GetVirtualServersContent[];
    readonly filters?: outputs.GetVirtualServersFilter[];
    readonly id: string;
    readonly page?: number;
    readonly serverGroupId?: string;
    readonly size?: number;
    readonly sort?: string;
    readonly totalCount: number;
    readonly virtualServerId?: string;
    readonly virtualServerName?: string;
}
export function getVirtualServersOutput(args?: GetVirtualServersOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualServersResult> {
    return pulumi.output(args).apply((a: any) => getVirtualServers(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualServers.
 */
export interface GetVirtualServersOutputArgs {
    autoScalingEnabled?: pulumi.Input<boolean>;
    autoScalingGroupId?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetVirtualServersFilterArgs>[]>;
    id?: pulumi.Input<string>;
    page?: pulumi.Input<number>;
    serverGroupId?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    sort?: pulumi.Input<string>;
    virtualServerId?: pulumi.Input<string>;
    virtualServerName?: pulumi.Input<string>;
}
