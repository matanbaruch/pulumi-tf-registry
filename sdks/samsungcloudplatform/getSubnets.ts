// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSubnets(args?: GetSubnetsArgs, opts?: pulumi.InvokeOptions): Promise<GetSubnetsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("samsungcloudplatform:index/getSubnets:getSubnets", {
        "contents": args.contents,
        "createdBy": args.createdBy,
        "id": args.id,
        "page": args.page,
        "size": args.size,
        "subnetCidrBlock": args.subnetCidrBlock,
        "subnetId": args.subnetId,
        "subnetName": args.subnetName,
        "subnetStates": args.subnetStates,
        "subnetTypes": args.subnetTypes,
        "vpcId": args.vpcId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSubnets.
 */
export interface GetSubnetsArgs {
    contents?: inputs.GetSubnetsContent[];
    createdBy?: string;
    id?: string;
    page?: number;
    size?: number;
    subnetCidrBlock?: string;
    subnetId?: string;
    subnetName?: string;
    subnetStates?: string;
    subnetTypes?: string;
    vpcId?: string;
}

/**
 * A collection of values returned by getSubnets.
 */
export interface GetSubnetsResult {
    readonly contents?: outputs.GetSubnetsContent[];
    readonly createdBy?: string;
    readonly id: string;
    readonly page?: number;
    readonly size?: number;
    readonly subnetCidrBlock?: string;
    readonly subnetId?: string;
    readonly subnetName?: string;
    readonly subnetStates?: string;
    readonly subnetTypes?: string;
    readonly totalCount: number;
    readonly vpcId?: string;
}
export function getSubnetsOutput(args?: GetSubnetsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSubnetsResult> {
    return pulumi.output(args).apply((a: any) => getSubnets(a, opts))
}

/**
 * A collection of arguments for invoking getSubnets.
 */
export interface GetSubnetsOutputArgs {
    contents?: pulumi.Input<pulumi.Input<inputs.GetSubnetsContentArgs>[]>;
    createdBy?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    page?: pulumi.Input<number>;
    size?: pulumi.Input<number>;
    subnetCidrBlock?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    subnetName?: pulumi.Input<string>;
    subnetStates?: pulumi.Input<string>;
    subnetTypes?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
}
