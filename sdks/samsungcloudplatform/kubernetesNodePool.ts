// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KubernetesNodePool extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesNodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesNodePoolState, opts?: pulumi.CustomResourceOptions): KubernetesNodePool {
        return new KubernetesNodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'samsungcloudplatform:index/kubernetesNodePool:KubernetesNodePool';

    /**
     * Returns true if the given object is an instance of KubernetesNodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesNodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesNodePool.__pulumiType;
    }

    /**
     * Enable auto recovery
     */
    public readonly autoRecovery!: pulumi.Output<boolean>;
    /**
     * Enable auto scale
     */
    public readonly autoScale!: pulumi.Output<boolean>;
    /**
     * Availability zone name.
     */
    public readonly availabilityZoneName!: pulumi.Output<string | undefined>;
    /**
     * Desired node count in the pool (Desired node count is 0 when auto_scale is enabled)
     */
    public readonly desiredNodeCount!: pulumi.Output<number | undefined>;
    /**
     * Encrypt enabled
     */
    public readonly encryptEnabled!: pulumi.Output<boolean>;
    /**
     * ID of samsungcloudplatform.KubernetesEngine resource
     */
    public readonly engineId!: pulumi.Output<string>;
    /**
     * Image ID (use samsungcloudplatform.getStandardImage data source)
     */
    public readonly imageId!: pulumi.Output<string>;
    /**
     * Maximum node count
     */
    public readonly maxNodeCount!: pulumi.Output<number>;
    /**
     * Minimum node count
     */
    public readonly minNodeCount!: pulumi.Output<number>;
    /**
     * Node pool name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Scale name
     */
    public readonly scaleName!: pulumi.Output<string | undefined>;
    /**
     * Storage name (Currently only SSD is supported)
     */
    public readonly storageName!: pulumi.Output<string | undefined>;
    /**
     * Storage size in GB (default 100)
     */
    public readonly storageSizeGb!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.KubernetesNodePoolTimeouts | undefined>;

    /**
     * Create a KubernetesNodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesNodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesNodePoolArgs | KubernetesNodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubernetesNodePoolState | undefined;
            resourceInputs["autoRecovery"] = state ? state.autoRecovery : undefined;
            resourceInputs["autoScale"] = state ? state.autoScale : undefined;
            resourceInputs["availabilityZoneName"] = state ? state.availabilityZoneName : undefined;
            resourceInputs["desiredNodeCount"] = state ? state.desiredNodeCount : undefined;
            resourceInputs["encryptEnabled"] = state ? state.encryptEnabled : undefined;
            resourceInputs["engineId"] = state ? state.engineId : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["maxNodeCount"] = state ? state.maxNodeCount : undefined;
            resourceInputs["minNodeCount"] = state ? state.minNodeCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scaleName"] = state ? state.scaleName : undefined;
            resourceInputs["storageName"] = state ? state.storageName : undefined;
            resourceInputs["storageSizeGb"] = state ? state.storageSizeGb : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as KubernetesNodePoolArgs | undefined;
            if ((!args || args.engineId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engineId'");
            }
            if ((!args || args.imageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            resourceInputs["autoRecovery"] = args ? args.autoRecovery : undefined;
            resourceInputs["autoScale"] = args ? args.autoScale : undefined;
            resourceInputs["availabilityZoneName"] = args ? args.availabilityZoneName : undefined;
            resourceInputs["desiredNodeCount"] = args ? args.desiredNodeCount : undefined;
            resourceInputs["encryptEnabled"] = args ? args.encryptEnabled : undefined;
            resourceInputs["engineId"] = args ? args.engineId : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["maxNodeCount"] = args ? args.maxNodeCount : undefined;
            resourceInputs["minNodeCount"] = args ? args.minNodeCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scaleName"] = args ? args.scaleName : undefined;
            resourceInputs["storageName"] = args ? args.storageName : undefined;
            resourceInputs["storageSizeGb"] = args ? args.storageSizeGb : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KubernetesNodePool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KubernetesNodePool resources.
 */
export interface KubernetesNodePoolState {
    /**
     * Enable auto recovery
     */
    autoRecovery?: pulumi.Input<boolean>;
    /**
     * Enable auto scale
     */
    autoScale?: pulumi.Input<boolean>;
    /**
     * Availability zone name.
     */
    availabilityZoneName?: pulumi.Input<string>;
    /**
     * Desired node count in the pool (Desired node count is 0 when auto_scale is enabled)
     */
    desiredNodeCount?: pulumi.Input<number>;
    /**
     * Encrypt enabled
     */
    encryptEnabled?: pulumi.Input<boolean>;
    /**
     * ID of samsungcloudplatform.KubernetesEngine resource
     */
    engineId?: pulumi.Input<string>;
    /**
     * Image ID (use samsungcloudplatform.getStandardImage data source)
     */
    imageId?: pulumi.Input<string>;
    /**
     * Maximum node count
     */
    maxNodeCount?: pulumi.Input<number>;
    /**
     * Minimum node count
     */
    minNodeCount?: pulumi.Input<number>;
    /**
     * Node pool name
     */
    name?: pulumi.Input<string>;
    /**
     * Scale name
     */
    scaleName?: pulumi.Input<string>;
    /**
     * Storage name (Currently only SSD is supported)
     */
    storageName?: pulumi.Input<string>;
    /**
     * Storage size in GB (default 100)
     */
    storageSizeGb?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KubernetesNodePoolTimeouts>;
}

/**
 * The set of arguments for constructing a KubernetesNodePool resource.
 */
export interface KubernetesNodePoolArgs {
    /**
     * Enable auto recovery
     */
    autoRecovery?: pulumi.Input<boolean>;
    /**
     * Enable auto scale
     */
    autoScale?: pulumi.Input<boolean>;
    /**
     * Availability zone name.
     */
    availabilityZoneName?: pulumi.Input<string>;
    /**
     * Desired node count in the pool (Desired node count is 0 when auto_scale is enabled)
     */
    desiredNodeCount?: pulumi.Input<number>;
    /**
     * Encrypt enabled
     */
    encryptEnabled?: pulumi.Input<boolean>;
    /**
     * ID of samsungcloudplatform.KubernetesEngine resource
     */
    engineId: pulumi.Input<string>;
    /**
     * Image ID (use samsungcloudplatform.getStandardImage data source)
     */
    imageId: pulumi.Input<string>;
    /**
     * Maximum node count
     */
    maxNodeCount?: pulumi.Input<number>;
    /**
     * Minimum node count
     */
    minNodeCount?: pulumi.Input<number>;
    /**
     * Node pool name
     */
    name?: pulumi.Input<string>;
    /**
     * Scale name
     */
    scaleName?: pulumi.Input<string>;
    /**
     * Storage name (Currently only SSD is supported)
     */
    storageName?: pulumi.Input<string>;
    /**
     * Storage size in GB (default 100)
     */
    storageSizeGb?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KubernetesNodePoolTimeouts>;
}
