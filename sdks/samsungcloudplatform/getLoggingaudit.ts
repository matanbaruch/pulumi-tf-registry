// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getLoggingaudit(args: GetLoggingauditArgs, opts?: pulumi.InvokeOptions): Promise<GetLoggingauditResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("samsungcloudplatform:index/getLoggingaudit:getLoggingaudit", {
        "loggingId": args.loggingId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLoggingaudit.
 */
export interface GetLoggingauditArgs {
    loggingId: string;
}

/**
 * A collection of values returned by getLoggingaudit.
 */
export interface GetLoggingauditResult {
    readonly auditContent: string;
    readonly auditDetailContent: string;
    readonly clusterId: string;
    readonly clusterNamespaceId: string;
    readonly eventTopicName: string;
    readonly id: string;
    readonly logErrorMessage: string;
    readonly loggingId: string;
    readonly objectId: string;
    readonly objectName: string;
    readonly productName: string;
    readonly projectId: string;
    readonly projectName: string;
    readonly region: string;
    readonly requestClientType: string;
    readonly requestDt: string;
    readonly requestedBy: string;
    readonly resourceType: string;
    readonly state: string;
    readonly userEmail: string;
    readonly userName: string;
}
export function getLoggingauditOutput(args: GetLoggingauditOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLoggingauditResult> {
    return pulumi.output(args).apply((a: any) => getLoggingaudit(a, opts))
}

/**
 * A collection of arguments for invoking getLoggingaudit.
 */
export interface GetLoggingauditOutputArgs {
    loggingId: pulumi.Input<string>;
}
