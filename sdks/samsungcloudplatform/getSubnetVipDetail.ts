// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSubnetVipDetail(args: GetSubnetVipDetailArgs, opts?: pulumi.InvokeOptions): Promise<GetSubnetVipDetailResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("samsungcloudplatform:index/getSubnetVipDetail:getSubnetVipDetail", {
        "id": args.id,
        "subnetId": args.subnetId,
        "vipId": args.vipId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSubnetVipDetail.
 */
export interface GetSubnetVipDetailArgs {
    id?: string;
    subnetId: string;
    vipId: string;
}

/**
 * A collection of values returned by getSubnetVipDetail.
 */
export interface GetSubnetVipDetailResult {
    readonly createdBy: string;
    readonly createdDt: string;
    readonly id: string;
    readonly modifiedBy: string;
    readonly modifiedDt: string;
    readonly natIpAddress: string;
    readonly natIpId: string;
    readonly projectId: string;
    readonly securityGroupIds: outputs.GetSubnetVipDetailSecurityGroupId[];
    readonly serviceZoneId: string;
    readonly subnetId: string;
    readonly subnetIpAddress: string;
    readonly subnetIpId: string;
    readonly vipDescription: string;
    readonly vipId: string;
    readonly vipState: string;
}
export function getSubnetVipDetailOutput(args: GetSubnetVipDetailOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSubnetVipDetailResult> {
    return pulumi.output(args).apply((a: any) => getSubnetVipDetail(a, opts))
}

/**
 * A collection of arguments for invoking getSubnetVipDetail.
 */
export interface GetSubnetVipDetailOutputArgs {
    id?: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
    vipId: pulumi.Input<string>;
}
