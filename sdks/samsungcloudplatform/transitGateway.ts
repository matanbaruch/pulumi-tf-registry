// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class TransitGateway extends pulumi.CustomResource {
    /**
     * Get an existing TransitGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TransitGatewayState, opts?: pulumi.CustomResourceOptions): TransitGateway {
        return new TransitGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'samsungcloudplatform:index/transitGateway:TransitGateway';

    /**
     * Returns true if the given object is an instance of TransitGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TransitGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TransitGateway.__pulumiType;
    }

    /**
     * Bandwidth Gbps(UplinkEnable=false : 1, UplinkEnable=true : 1/10, Reserved for designated: 20/40)
     */
    public readonly bandwidthGbps!: pulumi.Output<number>;
    /**
     * Region Name
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Transit Gateway description. (Up to 50 characters)
     */
    public readonly transitGatewayDescription!: pulumi.Output<string | undefined>;
    /**
     * Transit Gateway Name. ( 3 to 20 characters consist of alphabets and numbers)
     */
    public readonly transitGatewayName!: pulumi.Output<string>;
    /**
     * Option for Uplink
     */
    public readonly uplinkEnabled!: pulumi.Output<boolean | undefined>;

    /**
     * Create a TransitGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TransitGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TransitGatewayArgs | TransitGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TransitGatewayState | undefined;
            resourceInputs["bandwidthGbps"] = state ? state.bandwidthGbps : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["transitGatewayDescription"] = state ? state.transitGatewayDescription : undefined;
            resourceInputs["transitGatewayName"] = state ? state.transitGatewayName : undefined;
            resourceInputs["uplinkEnabled"] = state ? state.uplinkEnabled : undefined;
        } else {
            const args = argsOrState as TransitGatewayArgs | undefined;
            if ((!args || args.bandwidthGbps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bandwidthGbps'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.transitGatewayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'transitGatewayName'");
            }
            resourceInputs["bandwidthGbps"] = args ? args.bandwidthGbps : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["transitGatewayDescription"] = args ? args.transitGatewayDescription : undefined;
            resourceInputs["transitGatewayName"] = args ? args.transitGatewayName : undefined;
            resourceInputs["uplinkEnabled"] = args ? args.uplinkEnabled : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TransitGateway.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TransitGateway resources.
 */
export interface TransitGatewayState {
    /**
     * Bandwidth Gbps(UplinkEnable=false : 1, UplinkEnable=true : 1/10, Reserved for designated: 20/40)
     */
    bandwidthGbps?: pulumi.Input<number>;
    /**
     * Region Name
     */
    region?: pulumi.Input<string>;
    /**
     * Transit Gateway description. (Up to 50 characters)
     */
    transitGatewayDescription?: pulumi.Input<string>;
    /**
     * Transit Gateway Name. ( 3 to 20 characters consist of alphabets and numbers)
     */
    transitGatewayName?: pulumi.Input<string>;
    /**
     * Option for Uplink
     */
    uplinkEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a TransitGateway resource.
 */
export interface TransitGatewayArgs {
    /**
     * Bandwidth Gbps(UplinkEnable=false : 1, UplinkEnable=true : 1/10, Reserved for designated: 20/40)
     */
    bandwidthGbps: pulumi.Input<number>;
    /**
     * Region Name
     */
    region: pulumi.Input<string>;
    /**
     * Transit Gateway description. (Up to 50 characters)
     */
    transitGatewayDescription?: pulumi.Input<string>;
    /**
     * Transit Gateway Name. ( 3 to 20 characters consist of alphabets and numbers)
     */
    transitGatewayName: pulumi.Input<string>;
    /**
     * Option for Uplink
     */
    uplinkEnabled?: pulumi.Input<boolean>;
}
