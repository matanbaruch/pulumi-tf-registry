// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VpcPeering extends pulumi.CustomResource {
    /**
     * Get an existing VpcPeering resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcPeeringState, opts?: pulumi.CustomResourceOptions): VpcPeering {
        return new VpcPeering(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'samsungcloudplatform:index/vpcPeering:VpcPeering';

    /**
     * Returns true if the given object is an instance of VpcPeering.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcPeering {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcPeering.__pulumiType;
    }

    /**
     * Approver VPC Id
     */
    public readonly approverVpcId!: pulumi.Output<string>;
    /**
     * Firewall Enabled
     */
    public readonly firewallEnabled!: pulumi.Output<boolean>;
    /**
     * Requester VPC Id
     */
    public readonly requesterVpcId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * VPC Peering Description
     */
    public readonly vpcPeeringDescription!: pulumi.Output<string | undefined>;
    /**
     * Vpc Peering State
     */
    public /*out*/ readonly vpcPeeringState!: pulumi.Output<string>;

    /**
     * Create a VpcPeering resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcPeeringArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcPeeringArgs | VpcPeeringState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcPeeringState | undefined;
            resourceInputs["approverVpcId"] = state ? state.approverVpcId : undefined;
            resourceInputs["firewallEnabled"] = state ? state.firewallEnabled : undefined;
            resourceInputs["requesterVpcId"] = state ? state.requesterVpcId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vpcPeeringDescription"] = state ? state.vpcPeeringDescription : undefined;
            resourceInputs["vpcPeeringState"] = state ? state.vpcPeeringState : undefined;
        } else {
            const args = argsOrState as VpcPeeringArgs | undefined;
            if ((!args || args.approverVpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'approverVpcId'");
            }
            if ((!args || args.firewallEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'firewallEnabled'");
            }
            if ((!args || args.requesterVpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'requesterVpcId'");
            }
            resourceInputs["approverVpcId"] = args ? args.approverVpcId : undefined;
            resourceInputs["firewallEnabled"] = args ? args.firewallEnabled : undefined;
            resourceInputs["requesterVpcId"] = args ? args.requesterVpcId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcPeeringDescription"] = args ? args.vpcPeeringDescription : undefined;
            resourceInputs["vpcPeeringState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcPeering.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpcPeering resources.
 */
export interface VpcPeeringState {
    /**
     * Approver VPC Id
     */
    approverVpcId?: pulumi.Input<string>;
    /**
     * Firewall Enabled
     */
    firewallEnabled?: pulumi.Input<boolean>;
    /**
     * Requester VPC Id
     */
    requesterVpcId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * VPC Peering Description
     */
    vpcPeeringDescription?: pulumi.Input<string>;
    /**
     * Vpc Peering State
     */
    vpcPeeringState?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpcPeering resource.
 */
export interface VpcPeeringArgs {
    /**
     * Approver VPC Id
     */
    approverVpcId: pulumi.Input<string>;
    /**
     * Firewall Enabled
     */
    firewallEnabled: pulumi.Input<boolean>;
    /**
     * Requester VPC Id
     */
    requesterVpcId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * VPC Peering Description
     */
    vpcPeeringDescription?: pulumi.Input<string>;
}
