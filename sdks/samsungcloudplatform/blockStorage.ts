// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class BlockStorage extends pulumi.CustomResource {
    /**
     * Get an existing BlockStorage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BlockStorageState, opts?: pulumi.CustomResourceOptions): BlockStorage {
        return new BlockStorage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'samsungcloudplatform:index/blockStorage:BlockStorage';

    /**
     * Returns true if the given object is an instance of BlockStorage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BlockStorage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BlockStorage.__pulumiType;
    }

    /**
     * The block storage whether to use encryption. This can be enabled when the virtual server is encryption enabled.
     */
    public readonly encryptEnable!: pulumi.Output<boolean | undefined>;
    /**
     * The block storage name to create. (3 to 28 characters with -)
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * You can use by selecting SSD or HDD based storage.
     */
    public readonly productName!: pulumi.Output<string>;
    /**
     * You can use by selecting DEDICATED or SHARED
     */
    public readonly sharedType!: pulumi.Output<string>;
    /**
     * The storage size(GB) of the block storage to create. (4 to 12288 GB)
     */
    public readonly storageSizeGb!: pulumi.Output<number>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Virtual server ID to which you want to assign the block storage.
     */
    public readonly virtualServerId!: pulumi.Output<string | undefined>;
    /**
     * Virtual server IDs to which you want to assign the block storage.
     */
    public readonly virtualServerIds!: pulumi.Output<string[] | undefined>;

    /**
     * Create a BlockStorage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BlockStorageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BlockStorageArgs | BlockStorageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BlockStorageState | undefined;
            resourceInputs["encryptEnable"] = state ? state.encryptEnable : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["productName"] = state ? state.productName : undefined;
            resourceInputs["sharedType"] = state ? state.sharedType : undefined;
            resourceInputs["storageSizeGb"] = state ? state.storageSizeGb : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["virtualServerId"] = state ? state.virtualServerId : undefined;
            resourceInputs["virtualServerIds"] = state ? state.virtualServerIds : undefined;
        } else {
            const args = argsOrState as BlockStorageArgs | undefined;
            if ((!args || args.productName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'productName'");
            }
            if ((!args || args.sharedType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sharedType'");
            }
            if ((!args || args.storageSizeGb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageSizeGb'");
            }
            resourceInputs["encryptEnable"] = args ? args.encryptEnable : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["productName"] = args ? args.productName : undefined;
            resourceInputs["sharedType"] = args ? args.sharedType : undefined;
            resourceInputs["storageSizeGb"] = args ? args.storageSizeGb : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["virtualServerId"] = args ? args.virtualServerId : undefined;
            resourceInputs["virtualServerIds"] = args ? args.virtualServerIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BlockStorage.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BlockStorage resources.
 */
export interface BlockStorageState {
    /**
     * The block storage whether to use encryption. This can be enabled when the virtual server is encryption enabled.
     */
    encryptEnable?: pulumi.Input<boolean>;
    /**
     * The block storage name to create. (3 to 28 characters with -)
     */
    name?: pulumi.Input<string>;
    /**
     * You can use by selecting SSD or HDD based storage.
     */
    productName?: pulumi.Input<string>;
    /**
     * You can use by selecting DEDICATED or SHARED
     */
    sharedType?: pulumi.Input<string>;
    /**
     * The storage size(GB) of the block storage to create. (4 to 12288 GB)
     */
    storageSizeGb?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Virtual server ID to which you want to assign the block storage.
     */
    virtualServerId?: pulumi.Input<string>;
    /**
     * Virtual server IDs to which you want to assign the block storage.
     */
    virtualServerIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a BlockStorage resource.
 */
export interface BlockStorageArgs {
    /**
     * The block storage whether to use encryption. This can be enabled when the virtual server is encryption enabled.
     */
    encryptEnable?: pulumi.Input<boolean>;
    /**
     * The block storage name to create. (3 to 28 characters with -)
     */
    name?: pulumi.Input<string>;
    /**
     * You can use by selecting SSD or HDD based storage.
     */
    productName: pulumi.Input<string>;
    /**
     * You can use by selecting DEDICATED or SHARED
     */
    sharedType: pulumi.Input<string>;
    /**
     * The storage size(GB) of the block storage to create. (4 to 12288 GB)
     */
    storageSizeGb: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Virtual server ID to which you want to assign the block storage.
     */
    virtualServerId?: pulumi.Input<string>;
    /**
     * Virtual server IDs to which you want to assign the block storage.
     */
    virtualServerIds?: pulumi.Input<pulumi.Input<string>[]>;
}
