// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Trail extends pulumi.CustomResource {
    /**
     * Get an existing Trail resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrailState, opts?: pulumi.CustomResourceOptions): Trail {
        return new Trail(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'samsungcloudplatform:index/trail:Trail';

    /**
     * Returns true if the given object is an instance of Trail.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Trail {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Trail.__pulumiType;
    }

    /**
     * Batch processing end date and time
     */
    public /*out*/ readonly batchEndDt!: pulumi.Output<string>;
    /**
     * Batch processing first start date and time
     */
    public /*out*/ readonly batchFirstStartDt!: pulumi.Output<string>;
    /**
     * Date and time of last successful batch processing
     */
    public /*out*/ readonly batchLastSuccessDt!: pulumi.Output<string>;
    /**
     * Batch processing start date and time
     */
    public /*out*/ readonly batchStartDt!: pulumi.Output<string>;
    /**
     * batch processing status
     */
    public /*out*/ readonly batchState!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Whether to target all regions
     */
    public readonly isLoggingTargetAllRegion!: pulumi.Output<boolean>;
    /**
     * Whether to log all resources
     */
    public readonly isLoggingTargetAllResource!: pulumi.Output<boolean>;
    /**
     * Whether for all users
     */
    public readonly isLoggingTargetAllUser!: pulumi.Output<boolean>;
    /**
     * Logging target regions list
     */
    public readonly loggingTargetRegions!: pulumi.Output<string[] | undefined>;
    /**
     * Logging target resource ID list
     */
    public readonly loggingTargetResourceIds!: pulumi.Output<string[] | undefined>;
    /**
     * Logging target user ID list
     */
    public readonly loggingTargetUsers!: pulumi.Output<string[] | undefined>;
    /**
     * Trail name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Object storage bucket ID
     */
    public readonly obsBucketId!: pulumi.Output<string>;
    /**
     * Object storage bucket name
     */
    public /*out*/ readonly obsBucketName!: pulumi.Output<string>;
    /**
     * Object storage folder name
     */
    public /*out*/ readonly obsFolderName!: pulumi.Output<string>;
    /**
     * Object storage name
     */
    public /*out*/ readonly obsName!: pulumi.Output<string>;
    /**
     * Trail save type. JSON or CSV
     */
    public readonly saveType!: pulumi.Output<string>;
    public readonly state!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Use trail verification
     */
    public readonly useVerification!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Trail resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TrailArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrailArgs | TrailState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TrailState | undefined;
            resourceInputs["batchEndDt"] = state ? state.batchEndDt : undefined;
            resourceInputs["batchFirstStartDt"] = state ? state.batchFirstStartDt : undefined;
            resourceInputs["batchLastSuccessDt"] = state ? state.batchLastSuccessDt : undefined;
            resourceInputs["batchStartDt"] = state ? state.batchStartDt : undefined;
            resourceInputs["batchState"] = state ? state.batchState : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["isLoggingTargetAllRegion"] = state ? state.isLoggingTargetAllRegion : undefined;
            resourceInputs["isLoggingTargetAllResource"] = state ? state.isLoggingTargetAllResource : undefined;
            resourceInputs["isLoggingTargetAllUser"] = state ? state.isLoggingTargetAllUser : undefined;
            resourceInputs["loggingTargetRegions"] = state ? state.loggingTargetRegions : undefined;
            resourceInputs["loggingTargetResourceIds"] = state ? state.loggingTargetResourceIds : undefined;
            resourceInputs["loggingTargetUsers"] = state ? state.loggingTargetUsers : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["obsBucketId"] = state ? state.obsBucketId : undefined;
            resourceInputs["obsBucketName"] = state ? state.obsBucketName : undefined;
            resourceInputs["obsFolderName"] = state ? state.obsFolderName : undefined;
            resourceInputs["obsName"] = state ? state.obsName : undefined;
            resourceInputs["saveType"] = state ? state.saveType : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["useVerification"] = state ? state.useVerification : undefined;
        } else {
            const args = argsOrState as TrailArgs | undefined;
            if ((!args || args.isLoggingTargetAllRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isLoggingTargetAllRegion'");
            }
            if ((!args || args.isLoggingTargetAllResource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isLoggingTargetAllResource'");
            }
            if ((!args || args.isLoggingTargetAllUser === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isLoggingTargetAllUser'");
            }
            if ((!args || args.obsBucketId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'obsBucketId'");
            }
            if ((!args || args.saveType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'saveType'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["isLoggingTargetAllRegion"] = args ? args.isLoggingTargetAllRegion : undefined;
            resourceInputs["isLoggingTargetAllResource"] = args ? args.isLoggingTargetAllResource : undefined;
            resourceInputs["isLoggingTargetAllUser"] = args ? args.isLoggingTargetAllUser : undefined;
            resourceInputs["loggingTargetRegions"] = args ? args.loggingTargetRegions : undefined;
            resourceInputs["loggingTargetResourceIds"] = args ? args.loggingTargetResourceIds : undefined;
            resourceInputs["loggingTargetUsers"] = args ? args.loggingTargetUsers : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["obsBucketId"] = args ? args.obsBucketId : undefined;
            resourceInputs["saveType"] = args ? args.saveType : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["useVerification"] = args ? args.useVerification : undefined;
            resourceInputs["batchEndDt"] = undefined /*out*/;
            resourceInputs["batchFirstStartDt"] = undefined /*out*/;
            resourceInputs["batchLastSuccessDt"] = undefined /*out*/;
            resourceInputs["batchStartDt"] = undefined /*out*/;
            resourceInputs["batchState"] = undefined /*out*/;
            resourceInputs["obsBucketName"] = undefined /*out*/;
            resourceInputs["obsFolderName"] = undefined /*out*/;
            resourceInputs["obsName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Trail.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Trail resources.
 */
export interface TrailState {
    /**
     * Batch processing end date and time
     */
    batchEndDt?: pulumi.Input<string>;
    /**
     * Batch processing first start date and time
     */
    batchFirstStartDt?: pulumi.Input<string>;
    /**
     * Date and time of last successful batch processing
     */
    batchLastSuccessDt?: pulumi.Input<string>;
    /**
     * Batch processing start date and time
     */
    batchStartDt?: pulumi.Input<string>;
    /**
     * batch processing status
     */
    batchState?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    /**
     * Whether to target all regions
     */
    isLoggingTargetAllRegion?: pulumi.Input<boolean>;
    /**
     * Whether to log all resources
     */
    isLoggingTargetAllResource?: pulumi.Input<boolean>;
    /**
     * Whether for all users
     */
    isLoggingTargetAllUser?: pulumi.Input<boolean>;
    /**
     * Logging target regions list
     */
    loggingTargetRegions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Logging target resource ID list
     */
    loggingTargetResourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Logging target user ID list
     */
    loggingTargetUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Trail name
     */
    name?: pulumi.Input<string>;
    /**
     * Object storage bucket ID
     */
    obsBucketId?: pulumi.Input<string>;
    /**
     * Object storage bucket name
     */
    obsBucketName?: pulumi.Input<string>;
    /**
     * Object storage folder name
     */
    obsFolderName?: pulumi.Input<string>;
    /**
     * Object storage name
     */
    obsName?: pulumi.Input<string>;
    /**
     * Trail save type. JSON or CSV
     */
    saveType?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Use trail verification
     */
    useVerification?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Trail resource.
 */
export interface TrailArgs {
    description?: pulumi.Input<string>;
    /**
     * Whether to target all regions
     */
    isLoggingTargetAllRegion: pulumi.Input<boolean>;
    /**
     * Whether to log all resources
     */
    isLoggingTargetAllResource: pulumi.Input<boolean>;
    /**
     * Whether for all users
     */
    isLoggingTargetAllUser: pulumi.Input<boolean>;
    /**
     * Logging target regions list
     */
    loggingTargetRegions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Logging target resource ID list
     */
    loggingTargetResourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Logging target user ID list
     */
    loggingTargetUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Trail name
     */
    name?: pulumi.Input<string>;
    /**
     * Object storage bucket ID
     */
    obsBucketId: pulumi.Input<string>;
    /**
     * Trail save type. JSON or CSV
     */
    saveType: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Use trail verification
     */
    useVerification?: pulumi.Input<boolean>;
}
