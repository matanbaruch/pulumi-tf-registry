// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getTrails(args?: GetTrailsArgs, opts?: pulumi.InvokeOptions): Promise<GetTrailsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("samsungcloudplatform:index/getTrails:getTrails", {
        "filters": args.filters,
        "id": args.id,
        "isMine": args.isMine,
        "loggingTargetRegions": args.loggingTargetRegions,
        "loggingTargetResourceIds": args.loggingTargetResourceIds,
        "name": args.name,
        "state": args.state,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getTrails.
 */
export interface GetTrailsArgs {
    filters?: inputs.GetTrailsFilter[];
    id?: string;
    isMine?: boolean;
    loggingTargetRegions?: string[];
    loggingTargetResourceIds?: string[];
    name?: string;
    state?: string;
}

/**
 * A collection of values returned by getTrails.
 */
export interface GetTrailsResult {
    readonly contents: outputs.GetTrailsContent[];
    readonly filters?: outputs.GetTrailsFilter[];
    readonly id: string;
    readonly isMine?: boolean;
    readonly loggingTargetRegions?: string[];
    readonly loggingTargetResourceIds?: string[];
    readonly name?: string;
    readonly state?: string;
    readonly totalCount: number;
}
export function getTrailsOutput(args?: GetTrailsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTrailsResult> {
    return pulumi.output(args).apply((a: any) => getTrails(a, opts))
}

/**
 * A collection of arguments for invoking getTrails.
 */
export interface GetTrailsOutputArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.GetTrailsFilterArgs>[]>;
    id?: pulumi.Input<string>;
    isMine?: pulumi.Input<boolean>;
    loggingTargetRegions?: pulumi.Input<pulumi.Input<string>[]>;
    loggingTargetResourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}
