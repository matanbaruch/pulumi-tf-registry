// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getSubnetIpCheck(args: GetSubnetIpCheckArgs, opts?: pulumi.InvokeOptions): Promise<GetSubnetIpCheckResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("samsungcloudplatform:index/getSubnetIpCheck:getSubnetIpCheck", {
        "id": args.id,
        "ipAddress": args.ipAddress,
        "result": args.result,
        "subnetId": args.subnetId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSubnetIpCheck.
 */
export interface GetSubnetIpCheckArgs {
    id?: string;
    ipAddress: string;
    result?: boolean;
    subnetId: string;
}

/**
 * A collection of values returned by getSubnetIpCheck.
 */
export interface GetSubnetIpCheckResult {
    readonly id: string;
    readonly ipAddress: string;
    readonly result?: boolean;
    readonly subnetId: string;
}
export function getSubnetIpCheckOutput(args: GetSubnetIpCheckOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSubnetIpCheckResult> {
    return pulumi.output(args).apply((a: any) => getSubnetIpCheck(a, opts))
}

/**
 * A collection of arguments for invoking getSubnetIpCheck.
 */
export interface GetSubnetIpCheckOutputArgs {
    id?: pulumi.Input<string>;
    ipAddress: pulumi.Input<string>;
    result?: pulumi.Input<boolean>;
    subnetId: pulumi.Input<string>;
}
