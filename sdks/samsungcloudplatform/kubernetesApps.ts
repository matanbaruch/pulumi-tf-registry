// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class KubernetesApps extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesApps resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesAppsState, opts?: pulumi.CustomResourceOptions): KubernetesApps {
        return new KubernetesApps(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'samsungcloudplatform:index/kubernetesApps:KubernetesApps';

    /**
     * Returns true if the given object is an instance of KubernetesApps.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesApps {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesApps.__pulumiType;
    }

    /**
     * Additional Params
     */
    public readonly additionalParams!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * ID of samsungcloudplatform.KubernetesEngine resource
     */
    public readonly engineId!: pulumi.Output<string>;
    /**
     * Image ID (use samsungcloudplatform.getStandardImage data source)
     */
    public readonly imageId!: pulumi.Output<string>;
    /**
     * Kubernetes app name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Namespace name
     */
    public readonly namespace!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a KubernetesApps resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesAppsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesAppsArgs | KubernetesAppsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubernetesAppsState | undefined;
            resourceInputs["additionalParams"] = state ? state.additionalParams : undefined;
            resourceInputs["engineId"] = state ? state.engineId : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as KubernetesAppsArgs | undefined;
            if ((!args || args.engineId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engineId'");
            }
            if ((!args || args.imageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            resourceInputs["additionalParams"] = args ? args.additionalParams : undefined;
            resourceInputs["engineId"] = args ? args.engineId : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KubernetesApps.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KubernetesApps resources.
 */
export interface KubernetesAppsState {
    /**
     * Additional Params
     */
    additionalParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ID of samsungcloudplatform.KubernetesEngine resource
     */
    engineId?: pulumi.Input<string>;
    /**
     * Image ID (use samsungcloudplatform.getStandardImage data source)
     */
    imageId?: pulumi.Input<string>;
    /**
     * Kubernetes app name
     */
    name?: pulumi.Input<string>;
    /**
     * Namespace name
     */
    namespace?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a KubernetesApps resource.
 */
export interface KubernetesAppsArgs {
    /**
     * Additional Params
     */
    additionalParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ID of samsungcloudplatform.KubernetesEngine resource
     */
    engineId: pulumi.Input<string>;
    /**
     * Image ID (use samsungcloudplatform.getStandardImage data source)
     */
    imageId: pulumi.Input<string>;
    /**
     * Kubernetes app name
     */
    name?: pulumi.Input<string>;
    /**
     * Namespace name
     */
    namespace: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
