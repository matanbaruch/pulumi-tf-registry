// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getPublicIps(args?: GetPublicIpsArgs, opts?: pulumi.InvokeOptions): Promise<GetPublicIpsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("samsungcloudplatform:index/getPublicIps:getPublicIps", {
        "contents": args.contents,
        "createdBy": args.createdBy,
        "id": args.id,
        "ipAddress": args.ipAddress,
        "isBillable": args.isBillable,
        "isViewable": args.isViewable,
        "page": args.page,
        "publicIpPurpose": args.publicIpPurpose,
        "publicIpState": args.publicIpState,
        "serviceZoneId": args.serviceZoneId,
        "size": args.size,
        "uplinkType": args.uplinkType,
        "vpcId": args.vpcId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPublicIps.
 */
export interface GetPublicIpsArgs {
    contents?: inputs.GetPublicIpsContent[];
    createdBy?: string;
    id?: string;
    ipAddress?: string;
    isBillable?: boolean;
    isViewable?: boolean;
    page?: number;
    publicIpPurpose?: string;
    publicIpState?: string;
    serviceZoneId?: string;
    size?: number;
    uplinkType?: string;
    vpcId?: string;
}

/**
 * A collection of values returned by getPublicIps.
 */
export interface GetPublicIpsResult {
    readonly contents?: outputs.GetPublicIpsContent[];
    readonly createdBy?: string;
    readonly id: string;
    readonly ipAddress?: string;
    readonly isBillable?: boolean;
    readonly isViewable?: boolean;
    readonly page?: number;
    readonly publicIpPurpose?: string;
    readonly publicIpState?: string;
    readonly serviceZoneId?: string;
    readonly size?: number;
    readonly totalCount: number;
    readonly uplinkType?: string;
    readonly vpcId?: string;
}
export function getPublicIpsOutput(args?: GetPublicIpsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPublicIpsResult> {
    return pulumi.output(args).apply((a: any) => getPublicIps(a, opts))
}

/**
 * A collection of arguments for invoking getPublicIps.
 */
export interface GetPublicIpsOutputArgs {
    contents?: pulumi.Input<pulumi.Input<inputs.GetPublicIpsContentArgs>[]>;
    createdBy?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    isBillable?: pulumi.Input<boolean>;
    isViewable?: pulumi.Input<boolean>;
    page?: pulumi.Input<number>;
    publicIpPurpose?: pulumi.Input<string>;
    publicIpState?: pulumi.Input<string>;
    serviceZoneId?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    uplinkType?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
}
