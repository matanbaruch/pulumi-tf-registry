// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IamMember extends pulumi.CustomResource {
    /**
     * Get an existing IamMember resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IamMemberState, opts?: pulumi.CustomResourceOptions): IamMember {
        return new IamMember(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'samsungcloudplatform:index/iamMember:IamMember';

    /**
     * Returns true if the given object is an instance of IamMember.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IamMember {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IamMember.__pulumiType;
    }

    /**
     * Company name
     */
    public /*out*/ readonly companyName!: pulumi.Output<string>;
    /**
     * Email
     */
    public /*out*/ readonly email!: pulumi.Output<string>;
    /**
     * Group ID list
     */
    public readonly groupIds!: pulumi.Output<string[]>;
    /**
     * Last access data
     */
    public /*out*/ readonly lastAccessDate!: pulumi.Output<string>;
    /**
     * Organization ID
     */
    public /*out*/ readonly organizationId!: pulumi.Output<string>;
    /**
     * Position within the company
     */
    public /*out*/ readonly positionName!: pulumi.Output<string>;
    /**
     * Project ID
     */
    public /*out*/ readonly projectId!: pulumi.Output<string>;
    /**
     * Register's email
     */
    public /*out*/ readonly registeredBy!: pulumi.Output<string>;
    /**
     * Registered date
     */
    public /*out*/ readonly registeredDt!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * User email
     */
    public readonly userEmail!: pulumi.Output<string>;
    /**
     * Number of user's groups
     */
    public /*out*/ readonly userGroupCount!: pulumi.Output<number>;
    /**
     * User ID
     */
    public /*out*/ readonly userId!: pulumi.Output<string>;
    /**
     * User name
     */
    public /*out*/ readonly userName!: pulumi.Output<string>;
    /**
     * User SRN
     */
    public /*out*/ readonly userSrn!: pulumi.Output<string>;

    /**
     * Create a IamMember resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IamMemberArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IamMemberArgs | IamMemberState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IamMemberState | undefined;
            resourceInputs["companyName"] = state ? state.companyName : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["groupIds"] = state ? state.groupIds : undefined;
            resourceInputs["lastAccessDate"] = state ? state.lastAccessDate : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["positionName"] = state ? state.positionName : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["registeredBy"] = state ? state.registeredBy : undefined;
            resourceInputs["registeredDt"] = state ? state.registeredDt : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["userEmail"] = state ? state.userEmail : undefined;
            resourceInputs["userGroupCount"] = state ? state.userGroupCount : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
            resourceInputs["userSrn"] = state ? state.userSrn : undefined;
        } else {
            const args = argsOrState as IamMemberArgs | undefined;
            if ((!args || args.groupIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupIds'");
            }
            if ((!args || args.userEmail === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userEmail'");
            }
            resourceInputs["groupIds"] = args ? args.groupIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userEmail"] = args ? args.userEmail : undefined;
            resourceInputs["companyName"] = undefined /*out*/;
            resourceInputs["email"] = undefined /*out*/;
            resourceInputs["lastAccessDate"] = undefined /*out*/;
            resourceInputs["organizationId"] = undefined /*out*/;
            resourceInputs["positionName"] = undefined /*out*/;
            resourceInputs["projectId"] = undefined /*out*/;
            resourceInputs["registeredBy"] = undefined /*out*/;
            resourceInputs["registeredDt"] = undefined /*out*/;
            resourceInputs["userGroupCount"] = undefined /*out*/;
            resourceInputs["userId"] = undefined /*out*/;
            resourceInputs["userName"] = undefined /*out*/;
            resourceInputs["userSrn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IamMember.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IamMember resources.
 */
export interface IamMemberState {
    /**
     * Company name
     */
    companyName?: pulumi.Input<string>;
    /**
     * Email
     */
    email?: pulumi.Input<string>;
    /**
     * Group ID list
     */
    groupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Last access data
     */
    lastAccessDate?: pulumi.Input<string>;
    /**
     * Organization ID
     */
    organizationId?: pulumi.Input<string>;
    /**
     * Position within the company
     */
    positionName?: pulumi.Input<string>;
    /**
     * Project ID
     */
    projectId?: pulumi.Input<string>;
    /**
     * Register's email
     */
    registeredBy?: pulumi.Input<string>;
    /**
     * Registered date
     */
    registeredDt?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * User email
     */
    userEmail?: pulumi.Input<string>;
    /**
     * Number of user's groups
     */
    userGroupCount?: pulumi.Input<number>;
    /**
     * User ID
     */
    userId?: pulumi.Input<string>;
    /**
     * User name
     */
    userName?: pulumi.Input<string>;
    /**
     * User SRN
     */
    userSrn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IamMember resource.
 */
export interface IamMemberArgs {
    /**
     * Group ID list
     */
    groupIds: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * User email
     */
    userEmail: pulumi.Input<string>;
}
