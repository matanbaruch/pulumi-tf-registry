// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getPublicIp(args: GetPublicIpArgs, opts?: pulumi.InvokeOptions): Promise<GetPublicIpResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("samsungcloudplatform:index/getPublicIp:getPublicIp", {
        "attachedObjectName": args.attachedObjectName,
        "createdBy": args.createdBy,
        "id": args.id,
        "ipAddress": args.ipAddress,
        "ipAddressId": args.ipAddressId,
        "publicIpAddressDescription": args.publicIpAddressDescription,
        "publicIpId": args.publicIpId,
        "publicIpPurpose": args.publicIpPurpose,
        "publicIpState": args.publicIpState,
        "serviceZoneId": args.serviceZoneId,
        "uplinkType": args.uplinkType,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPublicIp.
 */
export interface GetPublicIpArgs {
    attachedObjectName?: string;
    createdBy?: string;
    id?: string;
    ipAddress?: string;
    ipAddressId?: string;
    publicIpAddressDescription?: string;
    publicIpId: string;
    publicIpPurpose?: string;
    publicIpState?: string;
    serviceZoneId?: string;
    uplinkType?: string;
}

/**
 * A collection of values returned by getPublicIp.
 */
export interface GetPublicIpResult {
    readonly attachedObjectName?: string;
    readonly createdBy?: string;
    readonly id: string;
    readonly ipAddress?: string;
    readonly ipAddressId?: string;
    readonly publicIpAddressDescription?: string;
    readonly publicIpId: string;
    readonly publicIpPurpose?: string;
    readonly publicIpState?: string;
    readonly serviceZoneId?: string;
    readonly uplinkType?: string;
}
export function getPublicIpOutput(args: GetPublicIpOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPublicIpResult> {
    return pulumi.output(args).apply((a: any) => getPublicIp(a, opts))
}

/**
 * A collection of arguments for invoking getPublicIp.
 */
export interface GetPublicIpOutputArgs {
    attachedObjectName?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    ipAddressId?: pulumi.Input<string>;
    publicIpAddressDescription?: pulumi.Input<string>;
    publicIpId: pulumi.Input<string>;
    publicIpPurpose?: pulumi.Input<string>;
    publicIpState?: pulumi.Input<string>;
    serviceZoneId?: pulumi.Input<string>;
    uplinkType?: pulumi.Input<string>;
}
