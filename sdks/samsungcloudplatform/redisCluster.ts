// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RedisCluster extends pulumi.CustomResource {
    /**
     * Get an existing RedisCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RedisClusterState, opts?: pulumi.CustomResourceOptions): RedisCluster {
        return new RedisCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'samsungcloudplatform:index/redisCluster:RedisCluster';

    /**
     * Returns true if the given object is an instance of RedisCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RedisCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RedisCluster.__pulumiType;
    }

    public readonly backup!: pulumi.Output<outputs.RedisClusterBackup | undefined>;
    /**
     * block storage. (It can't be deleted.)
     */
    public readonly blockStorages!: pulumi.Output<outputs.RedisClusterBlockStorage[]>;
    /**
     * Contract (None|1 Year|3 Year)
     */
    public readonly contractPeriod!: pulumi.Output<string>;
    /**
     * Port number of this database. (1024 to 65535)
     */
    public readonly databasePort!: pulumi.Output<number | undefined>;
    /**
     * User account password of database.
     */
    public readonly databaseUserPassword!: pulumi.Output<string>;
    /**
     * Whether to use storage encryption.
     */
    public readonly encryptionEnabled!: pulumi.Output<boolean>;
    /**
     * Redis Cluster virtual server image id.
     */
    public readonly imageId!: pulumi.Output<string>;
    /**
     * Whether to use nat.
     */
    public readonly natEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Next contract (None|1 Year|3 Year)
     */
    public readonly nextContractPeriod!: pulumi.Output<string | undefined>;
    /**
     * Name of database cluster. (3 to 20 characters only)
     */
    public readonly redisClusterName!: pulumi.Output<string>;
    /**
     * Redis Cluster state (RUNNING|STOPPED)
     */
    public readonly redisClusterState!: pulumi.Output<string>;
    /**
     * RedisCluster servers
     */
    public readonly redisServers!: pulumi.Output<outputs.RedisClusterRedisServer[]>;
    /**
     * Security-Group ids of this redisCluster DB. Each security-group must be a valid security-group resource which is
     * attached to the VPC.
     */
    public readonly securityGroupIds!: pulumi.Output<string[]>;
    /**
     * Server type.
     */
    public readonly serverType!: pulumi.Output<string>;
    /**
     * Service Zone Id
     */
    public readonly serviceZoneId!: pulumi.Output<string>;
    /**
     * Number of Masters.
     */
    public readonly shardsCount!: pulumi.Output<number | undefined>;
    /**
     * Number of Replicas created per Master.
     */
    public readonly shardsReplicaCount!: pulumi.Output<number | undefined>;
    /**
     * Subnet id of this database server. Subnet must be a valid subnet resource which is attached to the VPC.
     */
    public readonly subnetId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.RedisClusterTimeouts | undefined>;
    /**
     * Timezone setting of this database.
     */
    public readonly timezone!: pulumi.Output<string>;
    /**
     * vpc id
     */
    public /*out*/ readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a RedisCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedisClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RedisClusterArgs | RedisClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RedisClusterState | undefined;
            resourceInputs["backup"] = state ? state.backup : undefined;
            resourceInputs["blockStorages"] = state ? state.blockStorages : undefined;
            resourceInputs["contractPeriod"] = state ? state.contractPeriod : undefined;
            resourceInputs["databasePort"] = state ? state.databasePort : undefined;
            resourceInputs["databaseUserPassword"] = state ? state.databaseUserPassword : undefined;
            resourceInputs["encryptionEnabled"] = state ? state.encryptionEnabled : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["natEnabled"] = state ? state.natEnabled : undefined;
            resourceInputs["nextContractPeriod"] = state ? state.nextContractPeriod : undefined;
            resourceInputs["redisClusterName"] = state ? state.redisClusterName : undefined;
            resourceInputs["redisClusterState"] = state ? state.redisClusterState : undefined;
            resourceInputs["redisServers"] = state ? state.redisServers : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["serverType"] = state ? state.serverType : undefined;
            resourceInputs["serviceZoneId"] = state ? state.serviceZoneId : undefined;
            resourceInputs["shardsCount"] = state ? state.shardsCount : undefined;
            resourceInputs["shardsReplicaCount"] = state ? state.shardsReplicaCount : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as RedisClusterArgs | undefined;
            if ((!args || args.blockStorages === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blockStorages'");
            }
            if ((!args || args.contractPeriod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contractPeriod'");
            }
            if ((!args || args.databaseUserPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseUserPassword'");
            }
            if ((!args || args.encryptionEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'encryptionEnabled'");
            }
            if ((!args || args.imageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            if ((!args || args.redisClusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'redisClusterName'");
            }
            if ((!args || args.redisClusterState === undefined) && !opts.urn) {
                throw new Error("Missing required property 'redisClusterState'");
            }
            if ((!args || args.redisServers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'redisServers'");
            }
            if ((!args || args.securityGroupIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupIds'");
            }
            if ((!args || args.serverType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverType'");
            }
            if ((!args || args.serviceZoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceZoneId'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.timezone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timezone'");
            }
            resourceInputs["backup"] = args ? args.backup : undefined;
            resourceInputs["blockStorages"] = args ? args.blockStorages : undefined;
            resourceInputs["contractPeriod"] = args ? args.contractPeriod : undefined;
            resourceInputs["databasePort"] = args ? args.databasePort : undefined;
            resourceInputs["databaseUserPassword"] = args?.databaseUserPassword ? pulumi.secret(args.databaseUserPassword) : undefined;
            resourceInputs["encryptionEnabled"] = args ? args.encryptionEnabled : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["natEnabled"] = args ? args.natEnabled : undefined;
            resourceInputs["nextContractPeriod"] = args ? args.nextContractPeriod : undefined;
            resourceInputs["redisClusterName"] = args ? args.redisClusterName : undefined;
            resourceInputs["redisClusterState"] = args ? args.redisClusterState : undefined;
            resourceInputs["redisServers"] = args ? args.redisServers : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["serverType"] = args ? args.serverType : undefined;
            resourceInputs["serviceZoneId"] = args ? args.serviceZoneId : undefined;
            resourceInputs["shardsCount"] = args ? args.shardsCount : undefined;
            resourceInputs["shardsReplicaCount"] = args ? args.shardsReplicaCount : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["databaseUserPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RedisCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RedisCluster resources.
 */
export interface RedisClusterState {
    backup?: pulumi.Input<inputs.RedisClusterBackup>;
    /**
     * block storage. (It can't be deleted.)
     */
    blockStorages?: pulumi.Input<pulumi.Input<inputs.RedisClusterBlockStorage>[]>;
    /**
     * Contract (None|1 Year|3 Year)
     */
    contractPeriod?: pulumi.Input<string>;
    /**
     * Port number of this database. (1024 to 65535)
     */
    databasePort?: pulumi.Input<number>;
    /**
     * User account password of database.
     */
    databaseUserPassword?: pulumi.Input<string>;
    /**
     * Whether to use storage encryption.
     */
    encryptionEnabled?: pulumi.Input<boolean>;
    /**
     * Redis Cluster virtual server image id.
     */
    imageId?: pulumi.Input<string>;
    /**
     * Whether to use nat.
     */
    natEnabled?: pulumi.Input<boolean>;
    /**
     * Next contract (None|1 Year|3 Year)
     */
    nextContractPeriod?: pulumi.Input<string>;
    /**
     * Name of database cluster. (3 to 20 characters only)
     */
    redisClusterName?: pulumi.Input<string>;
    /**
     * Redis Cluster state (RUNNING|STOPPED)
     */
    redisClusterState?: pulumi.Input<string>;
    /**
     * RedisCluster servers
     */
    redisServers?: pulumi.Input<pulumi.Input<inputs.RedisClusterRedisServer>[]>;
    /**
     * Security-Group ids of this redisCluster DB. Each security-group must be a valid security-group resource which is
     * attached to the VPC.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Server type.
     */
    serverType?: pulumi.Input<string>;
    /**
     * Service Zone Id
     */
    serviceZoneId?: pulumi.Input<string>;
    /**
     * Number of Masters.
     */
    shardsCount?: pulumi.Input<number>;
    /**
     * Number of Replicas created per Master.
     */
    shardsReplicaCount?: pulumi.Input<number>;
    /**
     * Subnet id of this database server. Subnet must be a valid subnet resource which is attached to the VPC.
     */
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.RedisClusterTimeouts>;
    /**
     * Timezone setting of this database.
     */
    timezone?: pulumi.Input<string>;
    /**
     * vpc id
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RedisCluster resource.
 */
export interface RedisClusterArgs {
    backup?: pulumi.Input<inputs.RedisClusterBackup>;
    /**
     * block storage. (It can't be deleted.)
     */
    blockStorages: pulumi.Input<pulumi.Input<inputs.RedisClusterBlockStorage>[]>;
    /**
     * Contract (None|1 Year|3 Year)
     */
    contractPeriod: pulumi.Input<string>;
    /**
     * Port number of this database. (1024 to 65535)
     */
    databasePort?: pulumi.Input<number>;
    /**
     * User account password of database.
     */
    databaseUserPassword: pulumi.Input<string>;
    /**
     * Whether to use storage encryption.
     */
    encryptionEnabled: pulumi.Input<boolean>;
    /**
     * Redis Cluster virtual server image id.
     */
    imageId: pulumi.Input<string>;
    /**
     * Whether to use nat.
     */
    natEnabled?: pulumi.Input<boolean>;
    /**
     * Next contract (None|1 Year|3 Year)
     */
    nextContractPeriod?: pulumi.Input<string>;
    /**
     * Name of database cluster. (3 to 20 characters only)
     */
    redisClusterName: pulumi.Input<string>;
    /**
     * Redis Cluster state (RUNNING|STOPPED)
     */
    redisClusterState: pulumi.Input<string>;
    /**
     * RedisCluster servers
     */
    redisServers: pulumi.Input<pulumi.Input<inputs.RedisClusterRedisServer>[]>;
    /**
     * Security-Group ids of this redisCluster DB. Each security-group must be a valid security-group resource which is
     * attached to the VPC.
     */
    securityGroupIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Server type.
     */
    serverType: pulumi.Input<string>;
    /**
     * Service Zone Id
     */
    serviceZoneId: pulumi.Input<string>;
    /**
     * Number of Masters.
     */
    shardsCount?: pulumi.Input<number>;
    /**
     * Number of Replicas created per Master.
     */
    shardsReplicaCount?: pulumi.Input<number>;
    /**
     * Subnet id of this database server. Subnet must be a valid subnet resource which is attached to the VPC.
     */
    subnetId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.RedisClusterTimeouts>;
    /**
     * Timezone setting of this database.
     */
    timezone: pulumi.Input<string>;
}
