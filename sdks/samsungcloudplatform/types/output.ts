// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AutoScalingGroupVpcInfo {
    /**
     * Local subnet ID
     */
    localSubnetId?: string;
    /**
     * NAT enabled
     */
    natEnabled: boolean;
    /**
     * Subnet ID
     */
    subnetId: string;
    /**
     * VPC ID
     */
    vpcId: string;
}

export interface BackupSchedule {
    /**
     * Backup Schedule Frequency (MONTHLY, WEEKLY, DAYS)
     */
    scheduleFrequency: string;
    /**
     * Backup Schedule Frequency details
     */
    scheduleFrequencyDetail: string;
    /**
     * Backup Schedule ID
     */
    scheduleId: string;
    /**
     * Backup Schedule Name
     */
    scheduleName: string;
    /**
     * Backup Schedule Type (FULL, INCREMENTAL)
     */
    scheduleType: string;
    /**
     * Backup Start Time (format:HH:mmÂ±hh:mm)
     */
    startTime: string;
}

export interface BmServerBlockStorage {
    /**
     * Use encryption for this storage
     */
    encrypted?: boolean;
    /**
     * Block storage name
     */
    name: string;
    /**
     * Storage product name : SSD
     */
    productName?: string;
    /**
     * Storage size in gigabytes
     */
    storageSizeGb: number;
}

export interface BmServerServer {
    /**
     * Bare-metal server name
     */
    bmServerName: string;
    /**
     * IP address of this bare-metal server
     */
    ipv4?: string;
    /**
     * Enable local subnet for this bare-metal server
     */
    localSubnetEnabled?: boolean;
    /**
     * Local Subnet id of this bare-metal server. Subnet must be a valid subnet resource which is attached to the VPC.
     */
    localSubnetId?: string;
    /**
     * Local IP address of this bare-metal server
     */
    localSubnetIpv4?: string;
    /**
     * Enable NAT feature for this bare-metal server.
     */
    natEnabled?: boolean;
    /**
     * Public IP id of this bare-metal server. Public-IP must be a valid public-ip resource which is attached to the VPC.
     */
    publicIpId?: string;
    /**
     * Baremetal Server State(ex. RUNNING, STOPPED)
     */
    state: string;
    /**
     * Enable DNS feature for this bare-metal server.
     */
    useDns?: boolean;
    /**
     * Enable hyper-threading feature for this bare-metal server.(ex. Y, N)
     */
    useHyperThreading?: string;
}

export interface BmServerTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface BmServerVdcBlockStorage {
    /**
     * Use encryption for this storage
     */
    encrypted?: boolean;
    /**
     * Block storage name
     */
    name: string;
    /**
     * Storage product name : SSD
     */
    productName?: string;
    /**
     * Storage size in gigabytes
     */
    storageSizeGb: number;
}

export interface BmServerVdcServer {
    /**
     * Enable DNS feature for this bare-metal server.
     */
    dnsEnabled?: boolean;
    /**
     * IP address of this bare-metal server
     */
    ipAddress?: string;
    /**
     * Server name
     */
    name: string;
    /**
     * Enable hyper-threading feature for this bare-metal server.(ex Y, N)
     */
    useHyperThreading?: string;
}

export interface BmServerVdcTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface CustomImageDisk {
    bootEnabled: boolean;
    createdBy: string;
    createdDt: string;
    deviceNode: string;
    diskSize: number;
    encryptEnabled: boolean;
    imageId: string;
    modifiedBy: string;
    modifiedDt: string;
    productId: string;
    seq: number;
}

export interface CustomImageProduct {
    createdDt: string;
    imageId: string;
    productId: string;
    productName: string;
    productType: string;
    productValue: string;
    seq: number;
}

export interface DnsDomainTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DnsRecordDnsRecordMapping {
    /**
     * DnsDomain Resource Weight
     */
    preference?: number;
    /**
     * DnsDomain Resource Destination
     */
    recordDestination: string;
}

export interface DnsRecordTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface EpasBackup {
    /**
     * Backup File Schedule Frequency.(5M|10M|30M|1H)
     */
    archiveBackupScheduleFrequency: string;
    /**
     * Backup File Retention Day.(7D <= day <= 35D)
     */
    backupRetentionPeriod: string;
    /**
     * The time at which the backup starts. (from 0 to 23)
     */
    backupStartHour: number;
    /**
     * Object storage ID where backup files will be stored.
     */
    objectStorageId?: string;
}

export interface EpasBlockStorage {
    /**
     * Block storage group id
     */
    blockStorageGroupId: string;
    /**
     * Storage usage. (DATA|ARCHIVE|TEMP|BACKUP)
     */
    blockStorageRoleType: string;
    /**
     * Block Storage Size (10 to 5120)
     */
    blockStorageSize: number;
    /**
     * Storage product name. (SSD|HDD)
     */
    blockStorageType: string;
}

export interface EpasEpasServer {
    /**
     * Availability Zone Name. The single server does not input anything. (AZ1|AZ2)
     */
    availabilityZoneName?: string;
    /**
     * Epas database server names. (3 to 20 lowercase and number with dash and the first character should be an lowercase letter.)
     */
    epasServerName: string;
    /**
     * Server role type Enter 'ACTIVE' for a single server configuration. (ACTIVE | STANDBY)
     */
    serverRoleType: string;
}

export interface EpasTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface FileStorageLinkObject {
    /**
     * Link object ID
     */
    linkObjectId?: string;
    /**
     * Type
     */
    type?: string;
}

export interface FileStorageUnlinkObject {
    /**
     * Link object ID
     */
    linkObjectId?: string;
    /**
     * Type
     */
    type?: string;
}

export interface FirewallBulkRuleRule {
    /**
     * Rule action. (ALLOW, DROP)
     */
    action: string;
    /**
     * Rule description. (0 to 100 characters)
     */
    description?: string;
    /**
     * Destination ip addresses cidr list
     */
    destinationAddressesIpv4s: string[];
    /**
     * Rule direction. (IN, OUT, IN_OUT)
     */
    direction: string;
    /**
     * Rule enabled state.
     */
    enabled?: boolean;
    /**
     * Firewall Rule service
     */
    services: outputs.FirewallBulkRuleRuleService[];
    /**
     * Source ip addresses cidr list
     */
    sourceAddressesIpv4s: string[];
}

export interface FirewallBulkRuleRuleService {
    /**
     * Protocol type. (TCP, UDP, ICMP, ALL)
     */
    type: string;
    /**
     * Port value
     */
    value?: string;
}

export interface FirewallRuleService {
    /**
     * Protocol type. (TCP, UDP, ICMP, ALL)
     */
    type: string;
    /**
     * Port value
     */
    value?: string;
}

export interface GetAutoScalingGroupPoliciesContent {
    asgId: string;
    comparisonOperator: string;
    cooldownSeconds: number;
    createdBy: string;
    createdDt: string;
    evaluationMinutes: number;
    metricMethod: string;
    metricType: string;
    modifiedBy: string;
    modifiedDt: string;
    policyId: string;
    policyName: string;
    policyState: string;
    scaleMethod: string;
    scaleType: string;
    scaleValue: number;
    threshold: string;
    thresholdUnit: string;
}

export interface GetAutoScalingGroupPoliciesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetAutoScalingGroupVirtualServersContent {
    createdBy: string;
    createdDt: string;
    fileStorageLinkedState: string;
    filters: outputs.GetAutoScalingGroupVirtualServersContentFilter[];
    imageId: string;
    ip: string;
    modifiedBy: string;
    modifiedDt: string;
    properties: {[key: string]: string};
    serverGroupId: string;
    servicedFor: string;
    servicedGroupFor: string;
    virtualServerId: string;
    virtualServerName: string;
    virtualServerState: string;
}

export interface GetAutoScalingGroupVirtualServersContentFilter {
    name: string;
    useRegex: boolean;
    values: string[];
}

export interface GetAutoScalingGroupVirtualServersFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetAutoScalingGroupVpcInfo {
    localSubnetId: string;
    natEnabled: boolean;
    subnetId: string;
    vpcId: string;
}

export interface GetAutoScalingGroupsContent {
    asgId: string;
    asgName: string;
    asgState: string;
    availabilityZoneName: string;
    blockId: string;
    createdBy: string;
    createdDt: string;
    desiredServerCount: number;
    desiredServerCountEditable: boolean;
    isTerminating: boolean;
    lcId: string;
    lcName: string;
    localSubnetId: string;
    maxServerCount: number;
    minServerCount: number;
    modifiedBy: string;
    modifiedDt: string;
    multiAvailabilityZoneEnabled: boolean;
    projectId: string;
    serverNamePrefix: string;
    serviceId: string;
    serviceZoneId: string;
    subnetId: string;
    vpcId: string;
}

export interface GetAutoScalingGroupsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetBackupsContent {
    backupDrId: string;
    backupId: string;
    backupName: string;
    backupPolicyTypeCategory: string;
    backupState: string;
    blockId: string;
    createdBy: string;
    createdDt: string;
    isBackupDrEnabled: string;
    isBackupDrOrigin: string;
    modifiedBy: string;
    modifiedDt: string;
    objectId: string;
    objectType: string;
    policyType: string;
    projectId: string;
    region: string;
    retentionPeriod: string;
    serviceZoneId: string;
    zoneName: string;
}

export interface GetBlockStoragesContent {
    /**
     * Block id of this region
     */
    blockId: string;
    /**
     * Block Storage id
     */
    blockStorageId: string;
    /**
     * Block storage name to create.
     */
    blockStorageName: string;
    /**
     * Storage size(GB)
     */
    blockStorageSize: number;
    /**
     * Block storage status
     */
    blockStorageState: string;
    /**
     * Block Storage uuid
     */
    blockStorageUuid: string;
    /**
     * Person who created the resource
     */
    createdBy: string;
    /**
     * Creation time
     */
    createdDt: string;
    /**
     * Device node
     */
    deviceNode: string;
    /**
     * Enable encryption feature in storage
     */
    encryptEnabled: boolean;
    /**
     * Check whether it is OS(Boot) disk or not
     */
    isBootDisk: boolean;
    /**
     * Person who modified the resource
     */
    modifiedBy: string;
    /**
     * Modification time
     */
    modifiedDt: string;
    /**
     * Mount path
     */
    mountPath: string;
    /**
     * Product id of block storage
     */
    productId: string;
    /**
     * Project id
     */
    projectId: string;
    /**
     * Service zone id
     */
    serviceZoneId: string;
    /**
     * Shared type of block storage
     */
    sharedType: string;
    /**
     * Virtual server id to assign the block storage.
     */
    virtualServerId: string;
    /**
     * Mounted Virtual Servers
     */
    virtualServers: outputs.GetBlockStoragesContentVirtualServer[];
}

export interface GetBlockStoragesContentVirtualServer {
    mountState: string;
    virtualServerId: string;
}

export interface GetBmBlockStorageOriginBareMetalBlockStorage {
    bareMetalBlockStorageId: string;
    bareMetalBlockStorageName: string;
    blockId: string;
    serviceZoneId: string;
}

export interface GetBmBlockStorageServer {
    serverId: string;
    serverType: string;
}

export interface GetBmBlockStoragesContent {
    /**
     * Baremetal Block Storage Id
     */
    bareMetalBlockStorageId: string;
    /**
     * Baremetal Block Storage Name
     */
    bareMetalBlockStorageName: string;
    /**
     * Baremetal Block Storage Purpose
     */
    bareMetalBlockStoragePurpose: string;
    /**
     * Baremetal Block Storage Size
     */
    bareMetalBlockStorageSize: number;
    /**
     * Baremetal Block Storage State
     */
    bareMetalBlockStorageState: string;
    /**
     * Baremetal Block Storage Type
     */
    bareMetalBlockStorageTypeId: string;
    /**
     * Baremetal Server Ids
     */
    bareMetalServerIds: string[];
    /**
     * Block Id
     */
    blockId: string;
    /**
     * Created By
     */
    createdBy: string;
    /**
     * Created Date
     */
    createdDt: string;
    /**
     * Encryption Enabled
     */
    encryptionEnabled: boolean;
    /**
     * Location
     */
    location: string;
    /**
     * Modified By
     */
    modifiedBy: string;
    /**
     * Modified Date
     */
    modifiedDt: string;
    /**
     * Service Zone Id
     */
    serviceZoneId: string;
}

export interface GetBmServersContent {
    /**
     * Baremetal Server Id
     */
    bareMetalServerId: string;
    /**
     * Baremetal Server Name
     */
    bareMetalServerName: string;
    /**
     * Baremetal Server State
     */
    bareMetalServerState: string;
    /**
     * Block Id
     */
    blockId: string;
    /**
     * Created By
     */
    createdBy: string;
    /**
     * Created Date
     */
    createdDt: string;
    /**
     * Image Id
     */
    imageId: string;
    /**
     * Ip Address
     */
    ipAddress: string;
    /**
     * Modified By
     */
    modifiedBy: string;
    /**
     * Modified Date
     */
    modifiedDt: string;
    /**
     * Project Id
     */
    projectId: string;
    /**
     * Server Type Id
     */
    serverTypeId: string;
    /**
     * Service Zone Id
     */
    serviceZoneId: string;
}

export interface GetBmVdcServersContent {
    /**
     * Baremetal Server Id
     */
    bareMetalServerId: string;
    /**
     * Baremetal Server Name
     */
    bareMetalServerName: string;
    /**
     * Baremetal Server State
     */
    bareMetalServerState: string;
    /**
     * Block Id
     */
    blockId: string;
    /**
     * Created By
     */
    createdBy: string;
    /**
     * Created Date
     */
    createdDt: string;
    /**
     * Image Id
     */
    imageId: string;
    /**
     * Ip Address
     */
    ipAddress: string;
    /**
     * Modified By
     */
    modifiedBy: string;
    /**
     * Modified Date
     */
    modifiedDt: string;
    /**
     * Project Id
     */
    projectId: string;
    /**
     * Server Type Id
     */
    serverTypeId: string;
    /**
     * Service Zone Id
     */
    serviceZoneId: string;
}

export interface GetCustomImageDisk {
    bootEnabled: boolean;
    createdBy: string;
    createdDt: string;
    deviceNode: string;
    diskSize: number;
    encryptEnabled: boolean;
    imageId: string;
    modifiedBy: string;
    modifiedDt: string;
    productId: string;
    seq: number;
}

export interface GetCustomImageProduct {
    createdDt: string;
    imageId: string;
    productId: string;
    productName: string;
    productType: string;
    productValue: string;
    seq: number;
}

export interface GetCustomImagesContent {
    availabilityZoneName: string;
    baseImage: string;
    blockId: string;
    category: string;
    createdBy: string;
    createdDt: string;
    defaultDiskSize: number;
    /**
     * Extra disk size.
     */
    diskSize: number;
    disks: outputs.GetCustomImagesContentDisk[];
    icon: {[key: string]: string};
    /**
     * Custom image description. (Up to 50 characters)
     */
    imageDescription: string;
    imageId: string;
    imageName: string;
    /**
     * Image state (ACTIVE)
     */
    imageState: string;
    /**
     * Image type (STANDARD, CUSTOM, MIGRATION)
     */
    imageType: string;
    modifiedBy: string;
    modifiedDt: string;
    originImageId: string;
    originImageName: string;
    originVirtualServerId: string;
    /**
     * OS type (Windows, Ubuntu, ..)
     */
    osType: string;
    productGroupId: string;
    products: outputs.GetCustomImagesContentProduct[];
    projectId: string;
    properties: {[key: string]: string};
    serviceZoneId: string;
}

export interface GetCustomImagesContentDisk {
    bootEnabled: boolean;
    createdBy: string;
    createdDt: string;
    deviceNode: string;
    diskSize: number;
    encryptEnabled: boolean;
    imageId: string;
    modifiedBy: string;
    modifiedDt: string;
    productId: string;
    seq: number;
}

export interface GetCustomImagesContentProduct {
    createdDt: string;
    imageId: string;
    productId: string;
    productName: string;
    productType: string;
    productValue: string;
    seq: number;
}

export interface GetDconVpcConnectionsContent {
    /**
     * Project id of approver
     */
    approverProjectId: string;
    /**
     * Vpc id of approver
     */
    approverVpcId: string;
    /**
     * Complete date
     */
    completedDt: string;
    /**
     * DirectConnect connection description
     */
    createdBy: string;
    /**
     * Creation date
     */
    createdDt: string;
    /**
     * Uplink enabled
     */
    directConnectConnectionDescription: string;
    /**
     * DirectConnect connection id
     */
    directConnectConnectionId: string;
    /**
     * DirectConnect connection name
     */
    directConnectConnectionName: string;
    /**
     * DirectConnect connection state
     */
    directConnectConnectionState: string;
    /**
     * DirectConnect connection type
     */
    directConnectConnectionType: string;
    /**
     * The person who modified the resource
     */
    modifiedBy: string;
    /**
     * Modification date
     */
    modifiedDt: string;
    /**
     * Project id
     */
    projectId: string;
    /**
     * DirectConnect id of requester
     */
    requesterDirectConnectId: string;
    /**
     * Project id of requester
     */
    requesterProjectId: string;
}

export interface GetDirectConnectRoutingRoutesContent {
    /**
     * Source Interface Id
     */
    sourceServiceInterfaceId: string;
    /**
     * Source Interface Name
     */
    sourceServiceInterfaceName: string;
}

export interface GetDirectConnectRoutingRoutesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetDirectConnectRoutingRulesContent {
    /**
     * Created By
     */
    createdBy: string;
    /**
     * Created Date
     */
    createdDt: string;
    /**
     * Destination Network Cidr
     */
    destinationNetworkCidr: string;
    /**
     * is Editable
     */
    editable: boolean;
    /**
     * Modified By
     */
    modifiedBy: string;
    /**
     * Modified Date
     */
    modifiedDt: string;
    /**
     * Project Id
     */
    projectId: string;
    /**
     * Routing Rule Id
     */
    routingRuleId: string;
    /**
     * Routing Rule State
     */
    routingRuleState: string;
    /**
     * Source DirectConnect Connection Id
     */
    sourceDirectConnectConnectionId: string;
    /**
     * Source Interface Id
     */
    sourceServiceInterfaceId: string;
    /**
     * Source Interface Name
     */
    sourceServiceInterfaceName: string;
}

export interface GetDirectConnectRoutingTablesContent {
    /**
     * DirectConnect Connention Id
     */
    directConnectConnectionId: string;
    /**
     * Routing Rule Count
     */
    routingRuleCount: number;
    /**
     * Routing Table ID
     */
    routingTableId: string;
    /**
     * Routing Table name
     */
    routingTableName: string;
    /**
     * Routing Table Type
     */
    routingTableType: string;
    /**
     * Service Zone ID
     */
    serviceZoneId: string;
    /**
     * t1 Router ID
     */
    t1RouterId: string;
}

export interface GetDirectConnectsContent {
    /**
     * Bandwidth gbps
     */
    bandwidthGbps: number;
    /**
     * The person who created the resource
     */
    createdBy: string;
    /**
     * Creation date
     */
    createdDt: string;
    /**
     * DirectConnect description
     */
    directConnectDescription: string;
    /**
     * DirectConnect id
     */
    directConnectId: string;
    /**
     * DirectConnect name
     */
    directConnectName: string;
    /**
     * DirectConnect status
     */
    directConnectState: string;
    /**
     * The person who modified the resource
     */
    modifiedBy: string;
    /**
     * Modification date
     */
    modifiedDt: string;
    /**
     * ProductGroup id
     */
    productGroupId: string;
    /**
     * Project id
     */
    projectId: string;
    /**
     * Service zone id
     */
    serviceZoneId: string;
    /**
     * Uplink enabled
     */
    uplinkEnabled: boolean;
}

export interface GetDnsDomainsContent {
    autoExtension: boolean;
    dnsDomainId: string;
    dnsDomainName: string;
    dnsDomainType: string;
    dnsEnvUsage: string;
    dnsState: string;
    expiredDate: string;
    linkedRecordCount: number;
    region: string;
    startDate: string;
}

export interface GetDnsRecordsContent {
    dnsRecordId: string;
    dnsRecordName: string;
    dnsRecordType: string;
    dnsState: string;
    recordDestinations: string[];
    ttl: number;
}

export interface GetEndpointsContent {
    /**
     * The person who created the resource
     */
    createdBy: string;
    /**
     * Creation date
     */
    createdDt: string;
    /**
     * Endpoint id
     */
    endpointId: string;
    /**
     * Endpoint ip address
     */
    endpointIpAddress: string;
    /**
     * Endpoint name
     */
    endpointName: string;
    /**
     * Endpoint status
     */
    endpointState: string;
    /**
     * Endpoint type
     */
    endpointType: string;
    /**
     * The person who modified the resource
     */
    modifiedBy: string;
    /**
     * Modification date
     */
    modifiedDt: string;
    /**
     * Object id
     */
    objectId: string;
    /**
     * Project id
     */
    projectId: string;
    /**
     * Service zone id
     */
    serviceZoneId: string;
    /**
     * VPC id
     */
    vpcId: string;
}

export interface GetEpasBackupConfig {
    fullBackupConfigs: outputs.GetEpasBackupConfigFullBackupConfig[];
    incrementalBackupConfigs: outputs.GetEpasBackupConfigIncrementalBackupConfig[];
}

export interface GetEpasBackupConfigFullBackupConfig {
    archiveBackupScheduleFrequency: string;
    backupRetentionPeriod: string;
    backupStartHour: number;
    objectStorageBucketId: string;
}

export interface GetEpasBackupConfigIncrementalBackupConfig {
    archiveBackupScheduleFrequency: string;
    backupRetentionPeriod: string;
    backupScheduleFrequency: string;
    objectStorageBucketId: string;
}

export interface GetEpasContract {
    contractEndDate: string;
    contractPeriod: string;
    contractStartDate: string;
    nextContractEndDate: string;
    nextContractPeriod: string;
}

export interface GetEpasEpasInitialConfig {
    databaseEncoding: string;
    databaseLocale: string;
    databaseName: string;
    databasePort: number;
    databaseUserName: string;
}

export interface GetEpasEpasServerGroup {
    blockStorages: outputs.GetEpasEpasServerGroupBlockStorage[];
    encryptionEnabled: boolean;
    epasServers: outputs.GetEpasEpasServerGroupEpasServer[];
    serverGroupRoleType: string;
    serverType: string;
    virtualIpAddress: string;
}

export interface GetEpasEpasServerGroupBlockStorage {
    blockStorageGroupId: string;
    blockStorageName: string;
    blockStorageRoleType: string;
    blockStorageSize: number;
    blockStorageType: string;
}

export interface GetEpasEpasServerGroupEpasServer {
    availabilityZoneName: string;
    createdBy: string;
    createdDt: string;
    epasServerId: string;
    epasServerName: string;
    epasServerState: string;
    modifiedBy: string;
    modifiedDt: string;
    serverRoleType: string;
    subnetIpAddress: string;
}

export interface GetEpasMaintenance {
    maintenancePeriod: number;
    maintenanceStartDayOfWeek: string;
    maintenanceStartTime: string;
}

export interface GetEpassContent {
    /**
     * Block ID.
     */
    blockId: string;
    /**
     * The person who created the resource
     */
    createdBy: string;
    /**
     * Creation date
     */
    createdDt: string;
    /**
     * EPAS Cluster ID
     */
    epasClusterId: string;
    /**
     * EPAS Cluster Name
     */
    epasClusterName: string;
    /**
     * EPAS Cluster State
     */
    epasClusterState: string;
    /**
     * The person who modified the resource
     */
    modifiedBy: string;
    /**
     * Modification date
     */
    modifiedDt: string;
    /**
     * Project ID.
     */
    projectId: string;
    /**
     * Service Zone ID
     */
    serviceZoneId: string;
}

export interface GetFileStoragesContent {
    blockId: string;
    createdBy: string;
    createdDt: string;
    diskType: string;
    encryptionEnabled: boolean;
    fileStorageId: string;
    fileStorageName: string;
    fileStorageProtocol: string;
    fileStoragePurpose: string;
    fileStorageState: string;
    linkedObjectCount: number;
    modifiedBy: string;
    modifiedDt: string;
    productGroupId: string;
    projectId: string;
    serviceZoneId: string;
    tieringEnabled: boolean;
}

export interface GetFirewallFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetFirewallsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetFirewallsFirewall {
    /**
     * Firewall id
     */
    id: string;
    /**
     * Name of firewall
     */
    name: string;
    /**
     * Firewall status
     */
    state: string;
    /**
     * Target firewall resource id
     */
    targetId: string;
    /**
     * Target firewall resource type
     */
    targetType: string;
    /**
     * VPC id
     */
    vpcId: string;
}

export interface GetGslbResourcesContent {
    gslbDestination: string;
    gslbRegion: string;
    gslbResourceDescription: string;
    gslbResourceId: string;
    gslbResourceName: string;
    gslbResourceWeight: number;
}

export interface GetGslbsContent {
    createdDt: string;
    gslbAlgorithm: string;
    gslbEnvUsage: string;
    gslbId: string;
    gslbName: string;
    gslbState: string;
    linkedResourceCount: number;
}

export interface GetIamAccessKeysContent {
    accessKey: string;
    accessKeyActivated: boolean;
    accessKeyId: string;
    accessKeyState: string;
    createdBy: string;
    createdByEmail: string;
    createdByName: string;
    createdDt: string;
    expiredDt: string;
    modifiedBy: string;
    modifiedByEmail: string;
    modifiedByName: string;
    modifiedDt: string;
    projectId: string;
    projectName: string;
    secretVaultCount: number;
}

export interface GetIamAccessKeysFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetIamGroupMembersContent {
    companyName: string;
    createdBy: string;
    createdByEmail: string;
    createdByName: string;
    createdDt: string;
    email: string;
    lastAccessDt: string;
    modifiedBy: string;
    modifiedByEmail: string;
    modifiedByName: string;
    modifiedDt: string;
    userGroupId: string;
    userId: string;
    userName: string;
}

export interface GetIamGroupMembersFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetIamGroupPoliciesContent {
    createdBy: string;
    createdByEmail: string;
    createdByName: string;
    createdDt: string;
    description: string;
    modifiedBy: string;
    modifiedByEmail: string;
    modifiedByName: string;
    modifiedDt: string;
    policyId: string;
    policyName: string;
    policyType: string;
    principalPolicyId: string;
}

export interface GetIamGroupPoliciesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetIamGroupsContent {
    createdBy: string;
    createdByEmail: string;
    createdByName: string;
    createdDt: string;
    description: string;
    groupId: string;
    groupName: string;
    groupType: string;
    groupUserCount: number;
    modifiedBy: string;
    modifiedByEmail: string;
    modifiedByName: string;
    modifiedDt: string;
    projectId: string;
}

export interface GetIamGroupsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetIamMemberGroupsContent {
    createdBy: string;
    createdByEmail: string;
    createdByName: string;
    createdDt: string;
    groupId: string;
    groupName: string;
    groupType: string;
    modifiedBy: string;
    modifiedByEmail: string;
    modifiedByName: string;
    modifiedDt: string;
    userGroupId: string;
}

export interface GetIamMemberGroupsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetIamMemberSystemgroupsContent {
    groupId: string;
    groupName: string;
    groupType: string;
    userGroupId: string;
}

export interface GetIamMemberSystemgroupsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetIamMemberTag {
    tagKey: string;
    tagValue: string;
}

export interface GetIamMembersContent {
    companyName: string;
    createdBy: string;
    createdByEmail: string;
    createdByName: string;
    createdDt: string;
    email: string;
    lastAccessDt: string;
    modifiedBy: string;
    modifiedByEmail: string;
    modifiedByName: string;
    modifiedDt: string;
    organizationId: string;
    positionName: string;
    userGroupCount: number;
    userId: string;
    userName: string;
    userPasswordReuseLimitCount: string;
}

export interface GetIamMembersFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetIamPoliciesContent {
    createdBy: string;
    createdByEmail: string;
    createdByName: string;
    createdDt: string;
    description: string;
    modifiedBy: string;
    modifiedByEmail: string;
    modifiedByName: string;
    modifiedDt: string;
    policyId: string;
    policyName: string;
    policyType: string;
}

export interface GetIamPoliciesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetIamPolicyGroupsContent {
    createdBy: string;
    createdByEmail: string;
    createdByName: string;
    createdDt: string;
    groupId: string;
    groupName: string;
    groupType: string;
    modifiedBy: string;
    modifiedByEmail: string;
    modifiedByName: string;
    modifiedDt: string;
    principalPolicyId: string;
}

export interface GetIamPolicyGroupsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetIamPolicyRolesContent {
    createdBy: string;
    createdByEmail: string;
    createdByName: string;
    createdDt: string;
    description: string;
    modifiedBy: string;
    modifiedByEmail: string;
    modifiedByName: string;
    modifiedDt: string;
    principalPolicyId: string;
    roleId: string;
    roleName: string;
}

export interface GetIamPolicyRolesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetIamPolicyTag {
    tagKey: string;
    tagValue: string;
}

export interface GetIamRolePoliciesContent {
    createdBy: string;
    createdByEmail: string;
    createdByName: string;
    createdDt: string;
    description: string;
    modifiedBy: string;
    modifiedByEmail: string;
    modifiedByName: string;
    modifiedDt: string;
    policyId: string;
    policyName: string;
    policyType: string;
}

export interface GetIamRolePoliciesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetIamRoleTag {
    tagKey: string;
    tagValue: string;
}

export interface GetIamRoleTrustPrincipal {
    projectIds: string[];
    userSrns: string[];
}

export interface GetIamRolesContent {
    createdBy: string;
    createdByEmail: string;
    createdByName: string;
    createdDt: string;
    description: string;
    modifiedBy: string;
    modifiedByEmail: string;
    modifiedByName: string;
    modifiedDt: string;
    projectId: string;
    roleId: string;
    roleName: string;
}

export interface GetIamRolesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetInternetGatewaysContent {
    /**
     * The person who created the resource
     */
    createdBy: string;
    /**
     * Creation date
     */
    createdDt: string;
    /**
     * InternetGateway description
     */
    internetGatewayDescription: string;
    /**
     * InternetGateway id
     */
    internetGatewayId: string;
    /**
     * InternetGateway name
     */
    internetGatewayName: string;
    /**
     * InternetGateway status
     */
    internetGatewayState: string;
    /**
     * The person who modified the resource
     */
    modifiedBy: string;
    /**
     * Modification date
     */
    modifiedDt: string;
    /**
     * Project id
     */
    projectId: string;
    /**
     * Service zone id
     */
    serviceZoneId: string;
    /**
     * VPC id
     */
    vpcId: string;
}

export interface GetKeyPairsContent {
    /**
     * Person who created the resource
     */
    createdBy: string;
    /**
     * Creation time
     */
    createdDt: string;
    /**
     * Key Pair Id
     */
    keyPairId: string;
    /**
     * Key Pair Name
     */
    keyPairName: string;
    /**
     * Key Pair State
     */
    keyPairState: string;
    /**
     * Launch Configuration Id List
     */
    launchConfigurationIdLists: string[];
    /**
     * Person who modified the resource
     */
    modifiedBy: string;
    /**
     * Modification time
     */
    modifiedDt: string;
    /**
     * Project id
     */
    projectId: string;
    /**
     * Virtual Server Id List
     */
    virtualServerIdLists: string[];
}

export interface GetKubernetesAppsImageContent {
    baseImage: string;
    category: string;
    createdBy: string;
    createdDt: string;
    description: string;
    iconFile: string;
    iconFileName: string;
    imageId: string;
    imageName: string;
    modifiedBy: string;
    modifiedDt: string;
    poolId: string;
    productGroupId: string;
    productGroupName: string;
    zoneId: string;
}

export interface GetKubernetesAppsImageFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetKubernetesAppsImagesContent {
    /**
     * Base image of Apps
     */
    baseImage: string;
    /**
     * App image category
     */
    category: string;
    /**
     * The person who created the resource
     */
    createdBy: string;
    /**
     * Creation time
     */
    createdDt: string;
    /**
     * Description
     */
    description: string;
    /**
     * Icon file encoded in base64
     */
    iconFile: string;
    /**
     * Icon file name
     */
    iconFileName: string;
    /**
     * App image attributes
     */
    imageAttr: {[key: string]: string};
    /**
     * App image id
     */
    imageId: string;
    /**
     * App image name
     */
    imageName: string;
    /**
     * The person who modified the resource
     */
    modifiedBy: string;
    /**
     * Modification time
     */
    modifiedDt: string;
    /**
     * Block id of this region
     */
    poolId: string;
    /**
     * Product group attributes
     */
    productGroupAttr: {[key: string]: string};
    /**
     * Product group id
     */
    productGroupId: string;
    /**
     * Product group name
     */
    productGroupName: string;
    /**
     * Project id
     */
    projectId: string;
    /**
     * Service zone id
     */
    zoneId: string;
}

export interface GetKubernetesEnginePrivateEndpointAccessControlResourceList {
    resourceId: string;
    resourceName: string;
    resourceType: string;
}

export interface GetKubernetesEngineVersionsContent {
    /**
     * K8s version
     */
    k8sVersion: string;
    /**
     * Project id
     */
    projectId: string;
}

export interface GetKubernetesEnginesContent {
    /**
     * The person who created the resource
     */
    createdBy: string;
    /**
     * Creation time
     */
    createdDt: string;
    /**
     * K8s version
     */
    k8sVersion: string;
    /**
     * K8s engine id
     */
    kubernetesEngineId: string;
    /**
     * K8s engine name
     */
    kubernetesEngineName: string;
    /**
     * K8s engine status
     */
    kubernetesEngineStatus: string;
    /**
     * The person who modified the resource
     */
    modifiedBy: string;
    /**
     * Modification time
     */
    modifiedDt: string;
    /**
     * K8s node count
     */
    nodeCount: number;
    /**
     * Project id
     */
    projectId: string;
    /**
     * Region name
     */
    region: string;
    /**
     * Security group id
     */
    securityGroupId: string;
    /**
     * Subnet id
     */
    subnetId: string;
    /**
     * File storage volume id
     */
    volumeId: string;
    /**
     * Vpc id
     */
    vpcId: string;
}

export interface GetKubernetesNodePoolsContent {
    /**
     * Enable auto recovery
     */
    autoRecovery: boolean;
    /**
     * Enable auto scale
     */
    autoScale: boolean;
    /**
     * Contract id
     */
    contractId: string;
    /**
     * The person who created the resource
     */
    createdBy: string;
    /**
     * Creation Date
     */
    createdDt: string;
    /**
     * Current node count in the pool
     */
    currentNodeCount: number;
    /**
     * Desired node count in the pool
     */
    desiredNodeCount: number;
    /**
     * Image id
     */
    imageId: string;
    /**
     * Check inProgress status
     */
    inProgress: boolean;
    /**
     * K8s version
     */
    k8sVersion: string;
    /**
     * Maximum node count
     */
    maxNodeCount: number;
    /**
     * Minimum node count
     */
    minNodeCount: number;
    /**
     * The person who modified the resource
     */
    modifiedBy: string;
    /**
     * Modification Date
     */
    modifiedDt: string;
    /**
     * NodePool id
     */
    nodePoolId: string;
    /**
     * NodePool name
     */
    nodePoolName: string;
    /**
     * NodePool status
     */
    nodePoolState: string;
    /**
     * Host OS type (Ubuntu, Window,..)
     */
    osType: string;
    /**
     * Product group id
     */
    productGroupId: string;
    /**
     * Project id
     */
    projectId: string;
    /**
     * Modification Date
     */
    region: string;
    /**
     * Scale id
     */
    scaleId: string;
    /**
     * Service level id
     */
    serviceLevelId: string;
    /**
     * Storage id
     */
    storageId: string;
    /**
     * Storage size in GB
     */
    storageSize: string;
    /**
     * Where to enable upgrade
     */
    upgradable: boolean;
}

export interface GetLaunchConfigurationBlockStorage {
    blockStorageSize: number;
    diskType: string;
    encryptionEnabled: boolean;
    isBootDisk: boolean;
    productId: string;
}

export interface GetLaunchConfigurationsContent {
    asgCount: number;
    blockId: string;
    createdBy: string;
    createdDt: string;
    imageId: string;
    keyPairId: string;
    lcId: string;
    lcName: string;
    modifiedBy: string;
    modifiedDt: string;
    projectId: string;
    serviceZoneId: string;
}

export interface GetLaunchConfigurationsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetLbProfilesContent {
    blockId: string;
    createdBy: string;
    createdDt: string;
    lbProfileCategory: string;
    lbProfileName: string;
    lbProfileState: string;
    lbProfileType: string;
    lbServiceNames: string[];
    modifiedBy: string;
    modifiedDt: string;
    projectId: string;
    serviceZoneId: string;
}

export interface GetLbServerGroupsContent {
    /**
     * Block Id
     */
    blockId: string;
    /**
     * The person who created the resource
     */
    createdBy: string;
    /**
     * Creation Date
     */
    createdDt: string;
    /**
     * Load balancer server group id
     */
    lbServerGroupId: string;
    /**
     * Load balancer server group name
     */
    lbServerGroupName: string;
    /**
     * Load balancer server status
     */
    lbServerGroupState: string;
    /**
     * Load balancer server group type
     */
    lbServerGroupType: string;
    /**
     * Load balancer id
     */
    loadBalancerId: string;
    /**
     * Load balancer name
     */
    loadBalancerName: string;
    /**
     * Load balancer status
     */
    loadBalancerState: string;
    /**
     * The person who modified the resource
     */
    modifiedBy: string;
    /**
     * Modification Date
     */
    modifiedDt: string;
    /**
     * Persistence
     */
    persistence: string;
    /**
     * Project Id
     */
    projectId: string;
    /**
     * Service zone id
     */
    serviceZoneId: string;
}

export interface GetLbServiceIpsContent {
    /**
     * Id of load balancer service ip
     */
    lbServiceIpId: string;
    /**
     * Status of load balancer service
     */
    lbServiceIpState: string;
    /**
     * Nat ip address
     */
    natIpAddress: string;
    /**
     * Nat ip id
     */
    natIpId: string;
    /**
     * Service ip address
     */
    serviceIpAddress: string;
    /**
     * Service ip cidr
     */
    serviceIpCidr: string;
    /**
     * Service ip id
     */
    serviceIpId: string;
    /**
     * pool id of service ip
     */
    serviceIpPoolId: string;
}

export interface GetLbServicesConnectableToAsgContent {
    autoScaleGroupIds: string[];
    defaultForwardingPorts: string;
    layerType: string;
    lbRules: outputs.GetLbServicesConnectableToAsgContentLbRule[];
    lbServiceId: string;
    lbServiceIpAddress: string;
    lbServiceName: string;
    lbServiceState: string;
    loadBalancerId: string;
    loadBalancerName: string;
    natIpAddress: string;
    persistence: string;
    protocol: string;
    servicePorts: string;
}

export interface GetLbServicesConnectableToAsgContentLbRule {
    autoScaleGroupIds: string[];
    lbRuleId: string;
    lbServerGroupId: string;
    patternUrl: string;
    seq: number;
}

export interface GetLbServicesConnectedToAsgContent {
    autoScaleGroupIds: string[];
    defaultForwardingPorts: string;
    layerType: string;
    lbRules: outputs.GetLbServicesConnectedToAsgContentLbRule[];
    lbServiceId: string;
    lbServiceIpAddress: string;
    lbServiceName: string;
    lbServiceState: string;
    loadBalancerId: string;
    loadBalancerName: string;
    natIpAddress: string;
    persistence: string;
    protocol: string;
    servicePorts: string;
}

export interface GetLbServicesConnectedToAsgContentLbRule {
    autoScaleGroupIds: string[];
    lbRuleId: string;
    lbServerGroupId: string;
    patternUrl: string;
    seq: number;
}

export interface GetLbServicesContent {
    blockId: string;
    createdBy: string;
    createdDt: string;
    defaultForwardingPorts: string;
    layerType: string;
    lbServiceId: string;
    lbServiceIpId: string;
    lbServiceName: string;
    lbServiceState: string;
    modifiedBy: string;
    modifiedDt: string;
    natIpAddress: string;
    projectId: string;
    protocol: string;
    serviceIpAddress: string;
    servicePorts: string;
    serviceZoneId: string;
}

export interface GetLoadBalancersContent {
    /**
     * Block id
     */
    blockId: string;
    /**
     * The person who created the resource
     */
    createdBy: string;
    /**
     * Creation date
     */
    createdDt: string;
    /**
     * Load balancer id
     */
    loadBalancerId: string;
    /**
     * Load balancer name
     */
    loadBalancerName: string;
    /**
     * Size of load balancer to be created (SMALL,MEDIUM,LARGE)
     */
    loadBalancerSize: string;
    /**
     * Load balancer status
     */
    loadBalancerState: string;
    /**
     * The person who modified the resource
     */
    modifiedBy: string;
    /**
     * Modification date
     */
    modifiedDt: string;
    /**
     * Project id
     */
    projectId: string;
    /**
     * Service zone id
     */
    serviceZoneId: string;
    /**
     * Vpc id
     */
    vpcId: string;
}

export interface GetLoggingauditUsersContent {
    email: string;
    userId: string;
    userName: string;
}

export interface GetLoggingauditUsersFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetLoggingauditsContent {
    auditContent: string;
    auditDetailContent: string;
    clusterId: string;
    clusterNamespaceId: string;
    eventTopicName: string;
    id: string;
    logErrorMessage: string;
    objectId: string;
    objectName: string;
    productName: string;
    projectId: string;
    projectName: string;
    region: string;
    requestClientType: string;
    requestDt: string;
    requestedBy: string;
    resourceType: string;
    state: string;
    userEmail: string;
    userName: string;
}

export interface GetLoggingauditsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetMariadbBackupConfig {
    fullBackupConfigs: outputs.GetMariadbBackupConfigFullBackupConfig[];
    incrementalBackupConfigs: outputs.GetMariadbBackupConfigIncrementalBackupConfig[];
}

export interface GetMariadbBackupConfigFullBackupConfig {
    archiveBackupScheduleFrequency: string;
    backupRetentionPeriod: string;
    backupStartHour: number;
    objectStorageBucketId: string;
}

export interface GetMariadbBackupConfigIncrementalBackupConfig {
    archiveBackupScheduleFrequency: string;
    backupRetentionPeriod: string;
    backupScheduleFrequency: string;
    objectStorageBucketId: string;
}

export interface GetMariadbContract {
    contractEndDate: string;
    contractPeriod: string;
    contractStartDate: string;
    nextContractEndDate: string;
    nextContractPeriod: string;
}

export interface GetMariadbMaintenance {
    maintenancePeriod: number;
    maintenanceStartDayOfWeek: string;
    maintenanceStartTime: string;
}

export interface GetMariadbMariadbInitialConfig {
    databaseCharacterSet: string;
    databaseName: string;
    databasePort: number;
    databaseUserName: string;
}

export interface GetMariadbMariadbServerGroup {
    blockStorages: outputs.GetMariadbMariadbServerGroupBlockStorage[];
    encryptionEnabled: boolean;
    mariadbServers: outputs.GetMariadbMariadbServerGroupMariadbServer[];
    serverGroupRoleType: string;
    serverType: string;
    virtualIpAddress: string;
}

export interface GetMariadbMariadbServerGroupBlockStorage {
    blockStorageGroupId: string;
    blockStorageName: string;
    blockStorageRoleType: string;
    blockStorageSize: number;
    blockStorageType: string;
}

export interface GetMariadbMariadbServerGroupMariadbServer {
    availabilityZoneName: string;
    createdBy: string;
    createdDt: string;
    mariadbServerId: string;
    mariadbServerName: string;
    mariadbServerState: string;
    modifiedBy: string;
    modifiedDt: string;
    serverRoleType: string;
    subnetIpAddress: string;
}

export interface GetMariadbsContent {
    /**
     * Block ID.
     */
    blockId: string;
    /**
     * The person who created the resource
     */
    createdBy: string;
    /**
     * Creation date
     */
    createdDt: string;
    /**
     * Mariadb Cluster ID
     */
    mariadbClusterId: string;
    /**
     * Mariadb Cluster Name
     */
    mariadbClusterName: string;
    /**
     * Mariadb Cluster State
     */
    mariadbClusterState: string;
    /**
     * The person who modified the resource
     */
    modifiedBy: string;
    /**
     * Modification date
     */
    modifiedDt: string;
    /**
     * Project ID.
     */
    projectId: string;
    /**
     * Service Zone ID
     */
    serviceZoneId: string;
}

export interface GetMigrationImageDisk {
    bootEnabled: boolean;
    createdBy: string;
    createdDt: string;
    deviceNode: string;
    diskSize: number;
    encryptEnabled: boolean;
    imageId: string;
    modifiedBy: string;
    modifiedDt: string;
    productId: string;
    seq: number;
}

export interface GetMigrationImageProduct {
    createdDt: string;
    imageId: string;
    productId: string;
    productName: string;
    productType: string;
    productValue: string;
    seq: number;
}

export interface GetMigrationImagesContent {
    availabilityZoneName: string;
    baseImage: string;
    blockId: string;
    category: string;
    createdBy: string;
    createdDt: string;
    defaultDiskSize: number;
    /**
     * Extra disk size.
     */
    diskSize: number;
    disks: outputs.GetMigrationImagesContentDisk[];
    icon: {[key: string]: string};
    /**
     * Migration image description. (Up to 50 characters)
     */
    imageDescription: string;
    imageId: string;
    imageName: string;
    /**
     * Image state (ACTIVE)
     */
    imageState: string;
    imageType: string;
    modifiedBy: string;
    modifiedDt: string;
    originImageId: string;
    originImageName: string;
    originVirtualServerId: string;
    /**
     * OS type (Windows, Ubuntu, ..)
     */
    osType: string;
    productGroupId: string;
    products: outputs.GetMigrationImagesContentProduct[];
    projectId: string;
    properties: {[key: string]: string};
    serviceZoneId: string;
}

export interface GetMigrationImagesContentDisk {
    bootEnabled: boolean;
    createdBy: string;
    createdDt: string;
    deviceNode: string;
    diskSize: number;
    encryptEnabled: boolean;
    imageId: string;
    modifiedBy: string;
    modifiedDt: string;
    productId: string;
    seq: number;
}

export interface GetMigrationImagesContentProduct {
    createdDt: string;
    imageId: string;
    productId: string;
    productName: string;
    productType: string;
    productValue: string;
    seq: number;
}

export interface GetMysqlBackupConfig {
    fullBackupConfigs: outputs.GetMysqlBackupConfigFullBackupConfig[];
    incrementalBackupConfigs: outputs.GetMysqlBackupConfigIncrementalBackupConfig[];
}

export interface GetMysqlBackupConfigFullBackupConfig {
    archiveBackupScheduleFrequency: string;
    backupRetentionPeriod: string;
    backupStartHour: number;
    objectStorageBucketId: string;
}

export interface GetMysqlBackupConfigIncrementalBackupConfig {
    archiveBackupScheduleFrequency: string;
    backupRetentionPeriod: string;
    backupScheduleFrequency: string;
    objectStorageBucketId: string;
}

export interface GetMysqlContract {
    contractEndDate: string;
    contractPeriod: string;
    contractStartDate: string;
    nextContractEndDate: string;
    nextContractPeriod: string;
}

export interface GetMysqlMaintenance {
    maintenancePeriod: number;
    maintenanceStartDayOfWeek: string;
    maintenanceStartTime: string;
}

export interface GetMysqlMysqlInitialConfig {
    databaseCharacterSet: string;
    databaseName: string;
    databasePort: number;
    databaseUserName: string;
}

export interface GetMysqlMysqlServerGroup {
    blockStorages: outputs.GetMysqlMysqlServerGroupBlockStorage[];
    encryptionEnabled: boolean;
    mysqlServers: outputs.GetMysqlMysqlServerGroupMysqlServer[];
    serverGroupRoleType: string;
    serverType: string;
    virtualIpAddress: string;
}

export interface GetMysqlMysqlServerGroupBlockStorage {
    blockStorageGroupId: string;
    blockStorageName: string;
    blockStorageRoleType: string;
    blockStorageSize: number;
    blockStorageType: string;
}

export interface GetMysqlMysqlServerGroupMysqlServer {
    availabilityZoneName: string;
    createdBy: string;
    createdDt: string;
    modifiedBy: string;
    modifiedDt: string;
    mysqlServerId: string;
    mysqlServerName: string;
    mysqlServerState: string;
    serverRoleType: string;
    subnetIpAddress: string;
}

export interface GetMysqlsContent {
    /**
     * Block ID.
     */
    blockId: string;
    /**
     * The person who created the resource
     */
    createdBy: string;
    /**
     * Creation date
     */
    createdDt: string;
    /**
     * The person who modified the resource
     */
    modifiedBy: string;
    /**
     * Modification date
     */
    modifiedDt: string;
    /**
     * Mysql Cluster ID
     */
    mysqlClusterId: string;
    /**
     * Mysql Cluster Name
     */
    mysqlClusterName: string;
    /**
     * Mysql Cluster State
     */
    mysqlClusterState: string;
    /**
     * Project ID.
     */
    projectId: string;
    /**
     * Service Zone ID
     */
    serviceZoneId: string;
}

export interface GetNatGatewaysContent {
    /**
     * The person who created the resource
     */
    createdBy: string;
    /**
     * Creation date
     */
    createdDt: string;
    /**
     * The person who modified the resource
     */
    modifiedBy: string;
    /**
     * Modification date
     */
    modifiedDt: string;
    /**
     * NatGateway id
     */
    natGatewayId: string;
    /**
     * NatGateway Ip Id
     */
    natGatewayIpAddress: string;
    /**
     * NatGateway name
     */
    natGatewayName: string;
    /**
     * NatGateway status
     */
    natGatewayState: string;
    /**
     * Project id
     */
    projectId: string;
    /**
     * Service zone id
     */
    serviceZoneId: string;
    /**
     * Subnet id
     */
    subnetId: string;
    /**
     * VPC id
     */
    vpcId: string;
}

export interface GetObsBucketObjectStorageBucketAccessControlRule {
    ruleType: string;
    ruleValue: string;
}

export interface GetObsBucketsContent {
    createdBy: string;
    createdDt: string;
    modifiedBy: string;
    modifiedDt: string;
    objectStorageBucketAccessControlEnabled: boolean;
    objectStorageBucketDrEnabled: boolean;
    objectStorageBucketDrType: string;
    objectStorageBucketId: string;
    objectStorageBucketName: string;
    objectStorageBucketPurpose: string;
    objectStorageBucketState: string;
    objectStorageBucketUserPurpose: string;
    objectStorageBucketVersionEnabled: boolean;
    objectStorageId: string;
    objectStorageName: string;
    objectStorageQuotaId: string;
    objectStorageQuotaName: string;
    objectStorageSystemBucketEnabled: boolean;
    objectStorageTenantName: string;
    projectId: string;
    serviceZoneId: string;
}

export interface GetObsStoragesContent {
    blockId: string;
    createdBy: string;
    createdDt: string;
    isMultiAvailabilityZone: boolean;
    modifiedBy: string;
    modifiedDt: string;
    objectStorageDescription: string;
    objectStorageId: string;
    objectStorageName: string;
    projectId: string;
    serviceZoneId: string;
}

export interface GetPlacementGroupsContent {
    availabilityZoneName: string;
    createdBy: string;
    createdDt: string;
    modifiedBy: string;
    modifiedDt: string;
    placementGroupDescription: string;
    placementGroupId: string;
    placementGroupName: string;
    placementGroupState: string;
    projectId: string;
    serviceZoneId: string;
    virtualServerIdLists: string[];
    virtualServerType: string;
}

export interface GetPlacementGroupsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetPostgresqlBackupConfig {
    fullBackupConfigs: outputs.GetPostgresqlBackupConfigFullBackupConfig[];
    incrementalBackupConfigs: outputs.GetPostgresqlBackupConfigIncrementalBackupConfig[];
}

export interface GetPostgresqlBackupConfigFullBackupConfig {
    archiveBackupScheduleFrequency: string;
    backupRetentionPeriod: string;
    backupStartHour: number;
    objectStorageBucketId: string;
}

export interface GetPostgresqlBackupConfigIncrementalBackupConfig {
    archiveBackupScheduleFrequency: string;
    backupRetentionPeriod: string;
    backupScheduleFrequency: string;
    objectStorageBucketId: string;
}

export interface GetPostgresqlContract {
    contractEndDate: string;
    contractPeriod: string;
    contractStartDate: string;
    nextContractEndDate: string;
    nextContractPeriod: string;
}

export interface GetPostgresqlMaintenance {
    maintenancePeriod: number;
    maintenanceStartDayOfWeek: string;
    maintenanceStartTime: string;
}

export interface GetPostgresqlPostgresqlInitialConfig {
    databaseEncoding: string;
    databaseLocale: string;
    databaseName: string;
    databasePort: number;
    databaseUserName: string;
}

export interface GetPostgresqlPostgresqlServerGroup {
    blockStorages: outputs.GetPostgresqlPostgresqlServerGroupBlockStorage[];
    encryptionEnabled: boolean;
    postgresqlServers: outputs.GetPostgresqlPostgresqlServerGroupPostgresqlServer[];
    serverGroupRoleType: string;
    serverType: string;
    virtualIpAddress: string;
}

export interface GetPostgresqlPostgresqlServerGroupBlockStorage {
    blockStorageGroupId: string;
    blockStorageName: string;
    blockStorageRoleType: string;
    blockStorageSize: number;
    blockStorageType: string;
}

export interface GetPostgresqlPostgresqlServerGroupPostgresqlServer {
    availabilityZoneName: string;
    createdBy: string;
    createdDt: string;
    modifiedBy: string;
    modifiedDt: string;
    postgresqlServerId: string;
    postgresqlServerName: string;
    postgresqlServerState: string;
    serverRoleType: string;
    subnetIpAddress: string;
}

export interface GetPostgresqlsContent {
    /**
     * Block ID.
     */
    blockId: string;
    /**
     * The person who created the resource
     */
    createdBy: string;
    /**
     * Creation date
     */
    createdDt: string;
    /**
     * The person who modified the resource
     */
    modifiedBy: string;
    /**
     * Modification date
     */
    modifiedDt: string;
    /**
     * PostgreSQL Cluster ID
     */
    postgresqlClusterId: string;
    /**
     * PostgreSQL Cluster Name
     */
    postgresqlClusterName: string;
    /**
     * PostgreSQL Cluster State
     */
    postgresqlClusterState: string;
    /**
     * Project ID.
     */
    projectId: string;
    /**
     * Service Zone ID
     */
    serviceZoneId: string;
}

export interface GetProductCategoriesContent {
    /**
     * Icon file name
     */
    iconFileName: string;
    /**
     * Description of product category
     */
    productCategoryDescription: string;
    /**
     * Product category id
     */
    productCategoryId: string;
    /**
     * Product category name
     */
    productCategoryName: string;
    /**
     * Product category path
     */
    productCategoryPath: string;
    /**
     * Product category status
     */
    productCategoryState: string;
    /**
     * Product set type (SE, PAAS)
     */
    productSet: string;
}

export interface GetProductCategoriesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetProductGroupsContent {
    productGroupId: string;
    productGroupName: string;
    productGroupSequence: string;
    productGroupType: string;
    productGroups: outputs.GetProductGroupsContentProductGroup[];
    targetProduct: string;
    targetProductGroup: string;
}

export interface GetProductGroupsContentProductGroup {
    productGroupId: string;
    productGroupName: string;
    productGroupSequence: string;
    productGroupType: string;
    targetProduct: string;
    targetProductGroup: string;
}

export interface GetProductItem {
    code: string;
    cost: string;
    description: string;
    name: string;
    productId: string;
    productIdList: string;
    properties: {[key: string]: string};
    servicedFor: string;
    state: string;
    type: string;
    unit: string;
    value: string;
    version: string;
}

export interface GetProductsByGroupProduct {
    items: outputs.GetProductsByGroupProductItem[];
    productDescription: string;
    productId: string;
    productName: string;
    productState: string;
    productType: string;
}

export interface GetProductsByGroupProductItem {
    itemName: string;
    itemType: string;
    itemValue: string;
}

export interface GetProductsByZoneContent {
    createdBy: string;
    createdDt: string;
    modifiedBy: string;
    modifiedDt: string;
    productId: string;
    productName: string;
    productType: string;
}

export interface GetProjectBudget {
    alarmThresholds: number[];
    budgetAmount: number;
    createPreventThreshold: number;
    isBudgetUsed: boolean;
    isCreatePrevent: boolean;
    requestGuide: string;
}

export interface GetProjectBusinessCategoryUser {
    businessCategoryUserEmail: string;
    businessCategoryUserName: string;
}

export interface GetProjectProductResourcesContent {
    productCategoryName: string;
    productResources: outputs.GetProjectProductResourcesContentProductResource[];
}

export interface GetProjectProductResourcesContentProductResource {
    productOfferingName: string;
    productOfferingResourceCount: number;
}

export interface GetProjectProductResourcesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetProjectProductsContent {
    productCategoryDescription: string;
    productCategoryId: string;
    productCategoryName: string;
    productCategoryState: string;
    productSet: string;
    products: outputs.GetProjectProductsContentProduct[];
}

export interface GetProjectProductsContentProduct {
    isProductCreatable: string;
    productOfferingDescription: string;
    productOfferingDetailInfo: string;
    productOfferingId: string;
    productOfferingName: string;
    productOfferingState: string;
}

export interface GetProjectProductsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetProjectServiceZone {
    availabilityZones: outputs.GetProjectServiceZoneAvailabilityZone[];
    blockId: string;
    isMultiAvailabilityZone: boolean;
    serviceZoneId: string;
    serviceZoneLocation: string;
    serviceZoneName: string;
}

export interface GetProjectServiceZoneAvailabilityZone {
    availabilityZoneName: string;
}

export interface GetProjectUserProductsResourcesContent {
    productCategoryName: string;
    productResources: outputs.GetProjectUserProductsResourcesContentProductResource[];
}

export interface GetProjectUserProductsResourcesContentProductResource {
    productOfferingName: string;
    productOfferingResourceCount: number;
}

export interface GetProjectUserProductsResourcesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetProjectZonesContent {
    availabilityZones: outputs.GetProjectZonesContentAvailabilityZone[];
    blockId: string;
    isMultiAvailabilityZone: boolean;
    serviceZoneId: string;
    serviceZoneLocation: string;
    serviceZoneName: string;
}

export interface GetProjectZonesContentAvailabilityZone {
    availabilityZoneName: string;
}

export interface GetProjectZonesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetProjectsContent {
    accountAdminEmail: string;
    accountAdminName: string;
    accountId: string;
    accountName: string;
    accountType: string;
    billingOrganizationCode: string;
    businessCategoryId: string;
    businessCategoryName: string;
    businessCategoryUsers: outputs.GetProjectsContentBusinessCategoryUser[];
    businessGroupId: string;
    companyId: string;
    companyName: string;
    createdBy: string;
    createdByEmail: string;
    createdByName: string;
    createdDt: string;
    currentMonthBillAmount: number;
    defaultZoneId: string;
    estimatedUsedAmount: number;
    freeTrialExpiredDate: string;
    freeTrialExpiredDday: string;
    freeTrialStartDate: string;
    igwCreateYn: string;
    lastMonthBillAmount: number;
    modifiedBy: string;
    modifiedByEmail: string;
    modifiedByName: string;
    modifiedDt: string;
    networkType: string;
    priceSystemYear: string;
    projectDescription: string;
    projectId: string;
    projectMemberCount: number;
    projectName: string;
    projectResourceCount: number;
    projectServiceCount: number;
    projectState: string;
    serviceZones: outputs.GetProjectsContentServiceZone[];
    vpcVersion: string;
}

export interface GetProjectsContentBusinessCategoryUser {
    businessCategoryUserEmail: string;
    businessCategoryUserName: string;
}

export interface GetProjectsContentServiceZone {
    availabilityZones: outputs.GetProjectsContentServiceZoneAvailabilityZone[];
    blockId: string;
    isMultiAvailabilityZone: boolean;
    serviceZoneId: string;
    serviceZoneLocation: string;
    serviceZoneName: string;
}

export interface GetProjectsContentServiceZoneAvailabilityZone {
    availabilityZoneName: string;
}

export interface GetPublicIpsContent {
    /**
     * Name of object with public ip
     */
    attachedObjectName: string;
    /**
     * The person who created the resource
     */
    createdBy: string;
    /**
     * Creation time
     */
    createdDt: string;
    /**
     * Ip address
     */
    ipAddress: string;
    /**
     * Id of ip address
     */
    ipAddressId: string;
    /**
     * The person who modified the resource
     */
    modifiedBy: string;
    /**
     * Modification time
     */
    modifiedDt: string;
    /**
     * Product group id
     */
    productGroupId: string;
    /**
     * Project id
     */
    projectId: string;
    /**
     * Description of public ip address
     */
    publicIpAddressDescription: string;
    /**
     * Id of Public ip address
     */
    publicIpAddressId: string;
    /**
     * Purpose of public ip (NAT)
     */
    publicIpPurpose: string;
    /**
     * Public ip status
     */
    publicIpState: string;
    /**
     * Service zone id
     */
    serviceZoneId: string;
    /**
     * Uplink type (INTERNET)
     */
    uplinkType: string;
}

export interface GetRedisBackupConfig {
    fullBackupConfigs: outputs.GetRedisBackupConfigFullBackupConfig[];
}

export interface GetRedisBackupConfigFullBackupConfig {
    archiveBackupScheduleFrequency: string;
    backupRetentionPeriod: string;
    backupStartHour: number;
    objectStorageBucketId: string;
}

export interface GetRedisClusterBackupConfig {
    fullBackupConfigs: outputs.GetRedisClusterBackupConfigFullBackupConfig[];
}

export interface GetRedisClusterBackupConfigFullBackupConfig {
    backupRetentionPeriod: string;
    backupStartHour: number;
    objectStorageBucketId: string;
}

export interface GetRedisClusterContract {
    contractEndDate: string;
    contractPeriod: string;
    contractStartDate: string;
    nextContractEndDate: string;
    nextContractPeriod: string;
}

export interface GetRedisClusterMaintenance {
    maintenancePeriod: number;
    maintenanceStartDayOfWeek: string;
    maintenanceStartTime: string;
}

export interface GetRedisClusterRedisInitialConfig {
    databasePort: number;
}

export interface GetRedisClusterRedisServerGroup {
    blockStorages: outputs.GetRedisClusterRedisServerGroupBlockStorage[];
    encryptionEnabled: boolean;
    redisServers: outputs.GetRedisClusterRedisServerGroupRedisServer[];
    serverGroupRoleType: string;
    serverType: string;
}

export interface GetRedisClusterRedisServerGroupBlockStorage {
    blockStorageGroupId: string;
    blockStorageName: string;
    blockStorageRoleType: string;
    blockStorageSize: number;
    blockStorageType: string;
}

export interface GetRedisClusterRedisServerGroupRedisServer {
    createdBy: string;
    createdDt: string;
    modifiedBy: string;
    modifiedDt: string;
    natPublicIpAddress: string;
    redisServerId: string;
    redisServerName: string;
    redisServerState: string;
    serverRoleType: string;
    subnetIpAddress: string;
}

export interface GetRedisClustersContent {
    /**
     * Block ID.
     */
    blockId: string;
    /**
     * The person who created the resource
     */
    createdBy: string;
    /**
     * Creation date
     */
    createdDt: string;
    /**
     * The person who modified the resource
     */
    modifiedBy: string;
    /**
     * Modification date
     */
    modifiedDt: string;
    /**
     * Project ID.
     */
    projectId: string;
    /**
     * Redis Cluster ID
     */
    redisId: string;
    /**
     * Redis Cluster Name
     */
    redisName: string;
    /**
     * Redis Cluster State
     */
    redisState: string;
    /**
     * Service Zone ID
     */
    serviceZoneId: string;
}

export interface GetRedisContract {
    contractEndDate: string;
    contractPeriod: string;
    contractStartDate: string;
    nextContractEndDate: string;
    nextContractPeriod: string;
}

export interface GetRedisListContent {
    /**
     * Block ID.
     */
    blockId: string;
    /**
     * The person who created the resource
     */
    createdBy: string;
    /**
     * Creation date
     */
    createdDt: string;
    /**
     * The person who modified the resource
     */
    modifiedBy: string;
    /**
     * Modification date
     */
    modifiedDt: string;
    /**
     * Project ID.
     */
    projectId: string;
    /**
     * Redis ID
     */
    redisId: string;
    /**
     * Redis Name
     */
    redisName: string;
    /**
     * Redis State
     */
    redisState: string;
    /**
     * Service Zone ID
     */
    serviceZoneId: string;
}

export interface GetRedisMaintenance {
    maintenancePeriod: number;
    maintenanceStartDayOfWeek: string;
    maintenanceStartTime: string;
}

export interface GetRedisRedisInitialConfig {
    databasePort: number;
    sentinelPort: number;
}

export interface GetRedisRedisServerGroup {
    blockStorages: outputs.GetRedisRedisServerGroupBlockStorage[];
    encryptionEnabled: boolean;
    redisServers: outputs.GetRedisRedisServerGroupRedisServer[];
    serverGroupRoleType: string;
    serverType: string;
}

export interface GetRedisRedisServerGroupBlockStorage {
    blockStorageGroupId: string;
    blockStorageName: string;
    blockStorageRoleType: string;
    blockStorageSize: number;
    blockStorageType: string;
}

export interface GetRedisRedisServerGroupRedisServer {
    createdBy: string;
    createdDt: string;
    modifiedBy: string;
    modifiedDt: string;
    natPublicIpAddress: string;
    redisServerId: string;
    redisServerName: string;
    redisServerState: string;
    serverRoleType: string;
    subnetIpAddress: string;
}

export interface GetRedisSentinelServer {
    blockStorages: outputs.GetRedisSentinelServerBlockStorage[];
    createdBy: string;
    createdDt: string;
    encryptionEnabled: boolean;
    modifiedBy: string;
    modifiedDt: string;
    natPublicIpAddress: string;
    sentinelServerId: string;
    sentinelServerName: string;
    sentinelServerState: string;
    serverType: string;
    subnetIpAddress: string;
}

export interface GetRedisSentinelServerBlockStorage {
    blockStorageGroupId: string;
    blockStorageName: string;
    blockStorageRoleType: string;
    blockStorageSize: number;
    blockStorageType: string;
}

export interface GetRegionFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetRegionsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetRegionsRegion {
    /**
     * Block id of this region
     */
    blockId: string;
    id: string;
    /**
     * Location of this region
     */
    location: string;
    /**
     * Name of this region
     */
    name: string;
}

export interface GetResourceGroupInMyProjectsTargetResourceTag {
    tagKey: string;
    tagValue: string;
}

export interface GetResourceGroupResourceTypesResourceType {
    resourceType: string;
    serviceType: string;
    tagPolicy: boolean;
}

export interface GetResourceGroupResourcesContent {
    createdBy: string;
    createdByEmail: string;
    createdByName: string;
    createdDt: string;
    eventState: string;
    modifiedBy: string;
    modifiedByEmail: string;
    modifiedByName: string;
    modifiedDt: string;
    partition: string;
    region: string;
    resourceId: string;
    resourceName: string;
    resourceSrn: string;
    resourceState: string;
    resourceType: string;
    serviceType: string;
    tags: outputs.GetResourceGroupResourcesContentTag[];
    zone: string;
}

export interface GetResourceGroupResourcesContentTag {
    tagKey: string;
    tagValue: string;
}

export interface GetResourceGroupTargetResourceTag {
    tagKey: string;
    tagValue: string;
}

export interface GetResourceGroupsContent {
    createdByEmail: string;
    createdById: string;
    createdByName: string;
    createdDt: string;
    modifiedByEmail: string;
    modifiedById: string;
    modifiedByName: string;
    modifiedDt: string;
    resourceGroupDescription: string;
    resourceGroupId: string;
    resourceGroupName: string;
}

export interface GetResourceGroupsInMyProjectsContent {
    accountName: string;
    createdByEmail: string;
    createdById: string;
    createdByName: string;
    createdDt: string;
    modifiedByEmail: string;
    modifiedById: string;
    modifiedByName: string;
    modifiedDt: string;
    projectId: string;
    projectName: string;
    resourceGroupDescription: string;
    resourceGroupId: string;
    resourceGroupName: string;
}

export interface GetResourceInMyProjectTag {
    tagKey: string;
    tagValue: string;
}

export interface GetResourceTag {
    tagKey: string;
    tagValue: string;
}

export interface GetResourceTagsContent {
    tagKey: string;
    tagValue: string;
}

export interface GetResourceTagsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetResourcesContent {
    createdBy: string;
    createdByEmail: string;
    createdByName: string;
    createdDt: string;
    eventState: string;
    modifiedBy: string;
    modifiedByEmail: string;
    modifiedByName: string;
    modifiedDt: string;
    partition: string;
    region: string;
    resourceId: string;
    resourceName: string;
    resourceSrn: string;
    resourceState: string;
    resourceType: string;
    serviceType: string;
    tags: outputs.GetResourcesContentTag[];
    zone: string;
}

export interface GetResourcesContentTag {
    tagKey: string;
    tagValue: string;
}

export interface GetResourcesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetResourcesInMyProjectContent {
    accountName: string;
    createdBy: string;
    createdByEmail: string;
    createdByName: string;
    createdDt: string;
    eventState: string;
    modifiedBy: string;
    modifiedByEmail: string;
    modifiedByName: string;
    modifiedDt: string;
    partition: string;
    projectId: string;
    projectName: string;
    region: string;
    resourceId: string;
    resourceName: string;
    resourceSrn: string;
    resourceState: string;
    resourceType: string;
    serviceType: string;
    tags: outputs.GetResourcesInMyProjectContentTag[];
    zone: string;
}

export interface GetResourcesInMyProjectContentTag {
    tagKey: string;
    tagValue: string;
}

export interface GetResourcesInMyProjectFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetResourcesInMyProjectTag {
    /**
     * Tag key
     */
    tagKey: string;
    /**
     * Tag value
     */
    tagValue?: string;
}

export interface GetResourcesTag {
    /**
     * Tag key
     */
    tagKey: string;
    /**
     * Tag value
     */
    tagValue?: string;
}

export interface GetSecurityGroupLogStorageFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetSecurityGroupLogStoragesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetSecurityGroupLogStoragesLogStorage {
    /**
     * creator
     */
    createdBy: string;
    /**
     * created datetime
     */
    createdDt: string;
    id: string;
    /**
     * Log Storage ID
     */
    logStorageId: string;
    /**
     * Log Storage Type
     */
    logStorageType: string;
    /**
     * last modified user
     */
    modifiedBy: string;
    /**
     * Resource modified datetime
     */
    modifiedDt: string;
    /**
     * Bucket ID for saving logs
     */
    obsBucketId: string;
    /**
     * Project ID
     */
    projectId: string;
    /**
     * VPC ID
     */
    vpcId: string;
}

export interface GetSecurityGroupRulesContent {
    /**
     * List of ICMP Services
     */
    icmpServices: string[];
    /**
     * Is all Service
     */
    isAllService: boolean;
    /**
     * Rule action
     */
    ruleAction: string;
    /**
     * Rule description
     */
    ruleDescription: string;
    /**
     * Rule direction
     */
    ruleDirection: string;
    /**
     * Rule ID
     */
    ruleId: string;
    /**
     * Rule Owner ID
     */
    ruleOwnerId: string;
    /**
     * Rule Owner type
     */
    ruleOwnerType: string;
    /**
     * Rule state
     */
    ruleState: string;
    /**
     * Target networks
     */
    targetNetworks: string[];
    /**
     * List of TCP Services
     */
    tcpServices: string[];
    /**
     * List of UDP Services
     */
    udpServices: string[];
    /**
     * Vendor Object ID
     */
    vendorObjectId: string;
    /**
     * Vendor Rule ID
     */
    vendorRuleId: number;
}

export interface GetSecurityGroupRulesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetSecurityGroupUserIpsContent {
    /**
     * IP attach state
     */
    state: string;
    /**
     * Address of Directly Attached IP
     */
    userIpAddress: string;
    /**
     * Description of Directly Attached IP
     */
    userIpDescription: string;
    /**
     * Type of Directly Attached IP
     */
    userIpType: string;
}

export interface GetSecurityGroupUserIpsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetSecurityGroupsContent {
    /**
     * The number of Objects which is attached with Security Group
     */
    attachedObjectCount: number;
    /**
     * Resource creator
     */
    createdBy: string;
    /**
     * Resource created date
     */
    createdDt: string;
    /**
     * Is loggable
     */
    isLoggable: boolean;
    /**
     * Resource last modifier
     */
    modifiedBy: string;
    /**
     * Resource last modified date
     */
    modifiedDt: string;
    /**
     * The number of Rules
     */
    ruleCount: number;
    /**
     * Security Group Scope of Use
     */
    scope: string;
    /**
     * Security Group ID
     */
    securityGroupId: string;
    /**
     * Security Group name
     */
    securityGroupName: string;
    /**
     * Security Group state
     */
    securityGroupState: string;
    /**
     * Zone ID of Resource
     */
    zoneId: string;
}

export interface GetSecurityGroupsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetSqlserverBackupConfig {
    fullBackupConfigs: outputs.GetSqlserverBackupConfigFullBackupConfig[];
}

export interface GetSqlserverBackupConfigFullBackupConfig {
    archiveBackupScheduleFrequency: string;
    backupRetentionPeriod: string;
    backupStartHour: number;
    fullBackupDayOfWeek: string;
    objectStorageBucketId: string;
}

export interface GetSqlserverContract {
    contractEndDate: string;
    contractPeriod: string;
    contractStartDate: string;
    nextContractEndDate: string;
    nextContractPeriod: string;
}

export interface GetSqlserverMaintenance {
    maintenancePeriod: number;
    maintenanceStartDayOfWeek: string;
    maintenanceStartTime: string;
}

export interface GetSqlserverQuorumServerGroup {
    blockStorages: outputs.GetSqlserverQuorumServerGroupBlockStorage[];
    encryptionEnabled: boolean;
    serverGroupRoleType: string;
    serverType: string;
    sqlserverServers: outputs.GetSqlserverQuorumServerGroupSqlserverServer[];
    virtualIpAddress: string;
}

export interface GetSqlserverQuorumServerGroupBlockStorage {
    blockStorageGroupId: string;
    blockStorageName: string;
    blockStorageRoleType: string;
    blockStorageSize: number;
    blockStorageType: string;
}

export interface GetSqlserverQuorumServerGroupSqlserverServer {
    availabilityZoneName: string;
    createdBy: string;
    createdDt: string;
    modifiedBy: string;
    modifiedDt: string;
    serverRoleType: string;
    sqlserverServerId: string;
    sqlserverServerName: string;
    sqlserverServerState: string;
    subnetIpAddress: string;
}

export interface GetSqlserverSqlserverInitialConfig {
    databaseCollation: string;
    databaseNames: string[];
    databasePort: number;
    databaseServiceName: string;
    databaseUserName: string;
    sqlserverActiveDirectories: outputs.GetSqlserverSqlserverInitialConfigSqlserverActiveDirectory[];
}

export interface GetSqlserverSqlserverInitialConfigSqlserverActiveDirectory {
    adServerUserId: string;
    adServerUserPassword: string;
    dnsServerIps: string[];
    domainName: string;
    domainNetBiosName: string;
    failoverClusterName: string;
}

export interface GetSqlserverSqlserverServerGroup {
    blockStorages: outputs.GetSqlserverSqlserverServerGroupBlockStorage[];
    encryptionEnabled: boolean;
    serverGroupRoleType: string;
    serverType: string;
    sqlserverServers: outputs.GetSqlserverSqlserverServerGroupSqlserverServer[];
    virtualIpAddress: string;
}

export interface GetSqlserverSqlserverServerGroupBlockStorage {
    blockStorageGroupId: string;
    blockStorageName: string;
    blockStorageRoleType: string;
    blockStorageSize: number;
    blockStorageType: string;
}

export interface GetSqlserverSqlserverServerGroupSqlserverServer {
    availabilityZoneName: string;
    createdBy: string;
    createdDt: string;
    modifiedBy: string;
    modifiedDt: string;
    serverRoleType: string;
    sqlserverServerId: string;
    sqlserverServerName: string;
    sqlserverServerState: string;
    subnetIpAddress: string;
}

export interface GetSqlserversContent {
    /**
     * Block ID.
     */
    blockId: string;
    /**
     * The person who created the resource
     */
    createdBy: string;
    /**
     * Creation date
     */
    createdDt: string;
    /**
     * The person who modified the resource
     */
    modifiedBy: string;
    /**
     * Modification date
     */
    modifiedDt: string;
    /**
     * Project ID.
     */
    projectId: string;
    /**
     * Service Zone ID
     */
    serviceZoneId: string;
    /**
     * MS SQL Server Cluster ID
     */
    sqlserverClusterId: string;
    /**
     * MS SQL Server Cluster Name
     */
    sqlserverClusterName: string;
    /**
     * MS SQL Server Cluster State
     */
    sqlserverClusterState: string;
}

export interface GetStandardImageFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetStandardImagesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetStandardImagesStandardImage {
    /**
     * Base image for service
     */
    baseImage: string;
    /**
     * Image category
     */
    category: string;
    /**
     * Description
     */
    description: string;
    id: string;
    /**
     * Image name
     */
    imageName: string;
    /**
     * Image type (STANDARD)
     */
    imageType: string;
    /**
     * OS type (Windows, Ubuntu, ..)
     */
    osType: string;
    /**
     * Region name
     */
    region: string;
    /**
     * Service (Virtual Server, Kubernetes Engine VM, ...)
     */
    service: string;
    /**
     * Service group (COMPUTE, CONTAINER, ...)
     */
    serviceGroup: string;
}

export interface GetSubnetAvailableIpsContent {
    /**
     * The person who created the resource
     */
    createdBy: string;
    /**
     * Creation date
     */
    createdDt: string;
    /**
     * Ip id
     */
    ipId: string;
    /**
     * The person who modified the resource
     */
    modifiedBy: string;
    /**
     * Modification date
     */
    modifiedDt: string;
    /**
     * Subnet Ip address
     */
    subnetIpAddress: string;
    /**
     * Description of Ip
     */
    vipDescription: string;
    /**
     * Subnet Virtual Ip state
     */
    vipState: string;
}

export interface GetSubnetResourcesContent {
    /**
     * The person who created the resource
     */
    createdBy: string;
    /**
     * Creation date
     */
    createdDt: string;
    /**
     * Ip address
     */
    ipAddress: string;
    /**
     * Description of ip
     */
    ipDescription: string;
    /**
     * ip id
     */
    ipId: string;
    /**
     * Ip status
     */
    ipState: string;
    /**
     * Id of object linked by subnet
     */
    linkedObjectId: string;
    /**
     * Name of object linked by subnet
     */
    linkedObjectName: string;
    /**
     * Type of object linked by subnet
     */
    linkedObjectType: string;
    /**
     * The person who modified the resource
     */
    modifiedBy: string;
    /**
     * Modification date
     */
    modifiedDt: string;
}

export interface GetSubnetVipDetailSecurityGroupId {
    securityGroupId: string;
    securityGroupMemberState: string;
}

export interface GetSubnetVipsContent {
    /**
     * The person who created the resource
     */
    createdBy: string;
    /**
     * Creation date
     */
    createdDt: string;
    /**
     * The person who modified the resource
     */
    modifiedBy: string;
    /**
     * Modification date
     */
    modifiedDt: string;
    /**
     * Nat Ip address
     */
    natIpAddress: string;
    /**
     * Nat Ip id
     */
    natIpId: string;
    /**
     * Project id
     */
    projectId: string;
    securityGroupIds: outputs.GetSubnetVipsContentSecurityGroupId[];
    /**
     * Service zone id
     */
    serviceZoneId: string;
    /**
     * Subnet Ip address
     */
    subnetIpAddress: string;
    /**
     * Subnet Ip id
     */
    subnetIpId: string;
    /**
     * Description of Ip
     */
    vipDescription: string;
    /**
     * Subnet Virtual Ip id
     */
    vipId: string;
    /**
     * Subnet Virtual Ip state
     */
    vipState: string;
}

export interface GetSubnetVipsContentSecurityGroupId {
    securityGroupId: string;
    securityGroupMemberState: string;
}

export interface GetSubnetsContent {
    /**
     * Creation date
     */
    createdDt: string;
    /**
     * Ip address of gateway
     */
    gatewayIpAddress: string;
    /**
     * Subnet CIDR block
     */
    subnetCidrBlock: string;
    /**
     * Subnet id
     */
    subnetId: string;
    /**
     * Subnet name
     */
    subnetName: string;
    /**
     * Purpose of subnet (GENERAL)
     */
    subnetPurpose: string;
    /**
     * Subnet status
     */
    subnetState: string;
    /**
     * Subnet type (PUBLIC, PRIVATE)
     */
    subnetType: string;
    /**
     * VPC id
     */
    vpcId: string;
}

export interface GetTrailLoggingTargetUser {
    email: string;
    id: string;
    loginId: string;
    name: string;
}

export interface GetTrailTargetLoggingResourceList {
    loggingItem: string;
    resourceTypeName: string;
}

export interface GetTrailsContent {
    createdBy: string;
    createdByName: string;
    createdDt: string;
    description: string;
    isLoggingTargetAllRegion: string;
    isLoggingTargetAllResource: string;
    isLoggingTargetAllUser: string;
    isTrailDeleted: string;
    lastDigestFileCreateDt: string;
    loggingTargetRegions: string[];
    loggingTargetResourceIds: string[];
    loggingTargetUsers: outputs.GetTrailsContentLoggingTargetUser[];
    modifiedBy: string;
    modifiedByName: string;
    modifiedDt: string;
    objectStorageFolderName: string;
    objectStorageName: string;
    obsBucketId: string;
    obsBucketName: string;
    projectId: string;
    projectName: string;
    region: string;
    serviceZoneId: string;
    targetLoggingResourceLists: outputs.GetTrailsContentTargetLoggingResourceList[];
    trailBatchEndDt: string;
    trailBatchFirstStartDt: string;
    trailBatchLastSuccessDt: string;
    trailBatchStartDt: string;
    trailBatchState: string;
    trailId: string;
    trailName: string;
    trailSaveType: string;
    trailState: string;
    validationYn: string;
}

export interface GetTrailsContentLoggingTargetUser {
    email: string;
    id: string;
    loginId: string;
    name: string;
}

export interface GetTrailsContentTargetLoggingResourceList {
    loggingItem: string;
    resourceTypeName: string;
}

export interface GetTrailsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetTransitGatewayConnectionsContent {
    /**
     * Approver VPC's ProjectId
     */
    approverProjectId: string;
    /**
     * Approver ProjectId
     */
    approverVpcId: string;
    /**
     * User ID who create the resources
     */
    createdBy: string;
    /**
     * Creation date
     */
    createdDt: string;
    /**
     * User ID who modified the resources last
     */
    modifiedBy: string;
    /**
     * Modification date
     */
    modifiedDt: string;
    /**
     * ProjectId
     */
    projectId: string;
    /**
     * Requester TGW's ProjectId
     */
    requesterProjectId: string;
    /**
     * Requester TGW ID
     */
    requesterTransitGatewayId: string;
    /**
     * Service Zone Id
     */
    serviceZoneId: string;
    /**
     * TGW - VPC Connection Description
     */
    transitGatewayConnectionDescription: string;
    /**
     * TGW - VPC Connection ID
     */
    transitGatewayConnectionId: string;
    /**
     * TGW - VPC Connection Name
     */
    transitGatewayConnectionName: string;
    /**
     * TGW - VPC Connection State
     */
    transitGatewayConnectionState: string;
    /**
     * TGW - VPC Connection Type
     */
    transitGatewayConnectionType: string;
}

export interface GetTransitGatewayRoutingRoutesContent {
    /**
     * Source Interface Id
     */
    sourceServiceInterfaceId: string;
    /**
     * Source Interface Name
     */
    sourceServiceInterfaceName: string;
}

export interface GetTransitGatewayRoutingRulesContent {
    /**
     * Created By
     */
    createdBy: string;
    /**
     * Created Date
     */
    createdDt: string;
    /**
     * Destination Network Cidr
     */
    destinationNetworkCidr: string;
    /**
     * is Editable
     */
    editable: boolean;
    /**
     * Modified By
     */
    modifiedBy: string;
    /**
     * Modified Date
     */
    modifiedDt: string;
    /**
     * Project Id
     */
    projectId: string;
    /**
     * Routing Rule Id
     */
    routingRuleId: string;
    /**
     * Routing Rule State
     */
    routingRuleState: string;
    /**
     * Source Interface Id
     */
    sourceServiceInterfaceId: string;
    /**
     * Source Interface Name
     */
    sourceServiceInterfaceName: string;
    /**
     * Source Transit Gateway Connection Id
     */
    sourceTransitGatewayConnectionId: string;
}

export interface GetTransitGatewayRoutingTablesContent {
    /**
     * Routing Rule Count
     */
    routingRuleCount: number;
    /**
     * Routing Table ID
     */
    routingTableId: string;
    /**
     * Routing Table name
     */
    routingTableName: string;
    /**
     * Routing Table Type
     */
    routingTableType: string;
    /**
     * Service Zone ID
     */
    serviceZoneId: string;
    /**
     * t1 Router ID
     */
    t1RouterId: string;
    /**
     * Transit Gateway Connection ID
     */
    transitGatewayConnectionId?: string;
}

export interface GetTransitGatewaysContent {
    /**
     * BandwidthGbps
     */
    bandwidthGbps: number;
    /**
     * User ID who create the resources
     */
    createdBy: string;
    /**
     * Creation date
     */
    createdDt: string;
    /**
     * User ID who modified the resources last
     */
    modifiedBy: string;
    /**
     * Modification date
     */
    modifiedDt: string;
    /**
     * Project id
     */
    projectId: string;
    /**
     * Service zone id
     */
    serviceZoneId: string;
    /**
     * TransitGateway Description
     */
    transitGatewayDescription: string;
    /**
     * TransitGateway ID
     */
    transitGatewayId: string;
    /**
     * TransitGateway Name
     */
    transitGatewayName: string;
    /**
     * TransitGateway State
     */
    transitGatewayState: string;
    /**
     * UplinkEnabled
     */
    uplinkEnabled: boolean;
    /**
     * vpcCount
     */
    vpcCount: number;
}

export interface GetVirtualServersContent {
    autoscalingEnabled: boolean;
    availabilityZoneName: string;
    blockId: string;
    blockStorageIds: string[];
    contract: string;
    contractEndDate: string;
    contractId: string;
    contractStartDate: string;
    createdBy: string;
    createdDt: string;
    deletionProtectionEnabled: boolean;
    dnsEnabled: boolean;
    encryptEnabled: boolean;
    imageId: string;
    initialScriptContent: string;
    ip: string;
    isDr: boolean;
    keyPairId: string;
    modifiedBy: string;
    modifiedDt: string;
    nextContractEndDate: string;
    nextContractId: string;
    nicIds: string[];
    osType: string;
    placementGroupId: string;
    productGroupId: string;
    projectId: string;
    securityGroupIds: outputs.GetVirtualServersContentSecurityGroupId[];
    serverGroupId: string;
    serverType: string;
    serverTypeId: string;
    serviceZoneId: string;
    servicedFor: string;
    servicedGroupFor: string;
    virtualServerDrId: string;
    virtualServerId: string;
    virtualServerName: string;
    virtualServerState: string;
    vpcId: string;
}

export interface GetVirtualServersContentSecurityGroupId {
    securityGroupId: string;
    securityGroupMemberState: string;
}

export interface GetVirtualServersFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetVpcDnssContent {
    /**
     * Zone Domain
     */
    dnsUserZoneDomain: string;
    /**
     * Zone Domain Id
     */
    dnsUserZoneId: string;
    /**
     * Zone Name
     */
    dnsUserZoneName: string;
    /**
     * Zone Dns IP
     */
    dnsUserZoneServerIp: string;
    /**
     * Zone Source IP
     */
    dnsUserZoneSourceIp: string;
    /**
     * Zone State
     */
    dnsUserZoneState: string;
}

export interface GetVpcPeeringsContent {
    /**
     * Approver Project Id
     */
    approverProjectId: string;
    /**
     * Approver Vpc Id
     */
    approverVpcId: string;
    /**
     * Is Automated
     */
    automated: boolean;
    /**
     * Complated Date
     */
    completedDt: string;
    /**
     * Created By
     */
    createdBy: string;
    /**
     * Created Date
     */
    createdDt: string;
    /**
     * Modified By
     */
    modifiedBy: string;
    /**
     * Modified Date
     */
    modifiedDt: string;
    /**
     * Requester Project Id
     */
    requesterProjectId: string;
    /**
     * Requester Vpc Id
     */
    requesterVpcId: string;
    /**
     * Vpc Peering Description
     */
    vpcPeeringDescription: string;
    /**
     * Vpc Peering Id
     */
    vpcPeeringId: string;
    /**
     * Vpc Peering Name
     */
    vpcPeeringName: string;
    /**
     * Vpc Peering State
     */
    vpcPeeringState: string;
    /**
     * Vpc Peering Type
     */
    vpcPeeringType: string;
}

export interface GetVpcRoutingRoutesContent {
    /**
     * Source Interface Id
     */
    sourceServiceInterfaceId: string;
    /**
     * Source Interface Name
     */
    sourceServiceInterfaceName: string;
}

export interface GetVpcRoutingRulesContent {
    /**
     * Block Id
     */
    blockId: string;
    /**
     * Created By
     */
    createdBy: string;
    /**
     * Created Date
     */
    createdDt: string;
    /**
     * Destination Network Cidr
     */
    destinationNetworkCidr: string;
    /**
     * is Editable
     */
    editable: boolean;
    /**
     * Modified By
     */
    modifiedBy: string;
    /**
     * Modified Date
     */
    modifiedDt: string;
    /**
     * Project Id
     */
    projectId: string;
    /**
     * Routing Rule Id
     */
    routingRuleId: string;
    /**
     * Routing Rule State
     */
    routingRuleState: string;
    /**
     * Service Zone Id
     */
    serviceZoneId: string;
    /**
     * Source Interface Id
     */
    sourceServiceInterfaceId: string;
    /**
     * Source Interface Name
     */
    sourceServiceInterfaceName: string;
    /**
     * Source VPC Id
     */
    sourceVpcId: string;
}

export interface GetVpcRoutingTablesContent {
    /**
     * Routing Rule Count
     */
    routingRuleCount: number;
    /**
     * Routing Table ID
     */
    routingTableId: string;
    /**
     * Routing Table name
     */
    routingTableName: string;
    /**
     * Routing Table Type
     */
    routingTableType: string;
    /**
     * Service Zone ID
     */
    serviceZoneId: string;
    /**
     * t1 Router ID
     */
    t1RouterId: string;
    /**
     * VPC ID
     */
    vpcId: string;
}

export interface GetVpcsContent {
    /**
     * Block id
     */
    blockId: string;
    /**
     * The person who created the resource
     */
    createdBy: string;
    /**
     * Creation date
     */
    createdDt: string;
    /**
     * The person who modified the resource
     */
    modifiedBy: string;
    /**
     * Modification date
     */
    modifiedDt: string;
    /**
     * Project id
     */
    projectId: string;
    /**
     * Service zone id
     */
    serviceZoneId: string;
    /**
     * VPC id
     */
    vpcId: string;
    /**
     * VPC name
     */
    vpcName: string;
    /**
     * VPC status
     */
    vpcState: string;
}

export interface GslbGslbResource {
    /**
     * Gslb Resource Destination
     */
    gslbDestination: string;
    /**
     * Gslb Resource Region
     */
    gslbRegion: string;
    /**
     * Gslb Resource Description
     */
    gslbResourceDescription?: string;
    /**
     * Gslb Resource Weight
     */
    gslbResourceWeight?: number;
}

export interface GslbTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface HpcLiteNewServerDetail {
    /**
     * HPC Lite(New) ID
     */
    id: string;
    /**
     * HPC Lite(New) Server Detail ip address
     */
    ipAddress: string;
    /**
     * HPC Lite(New) Server Detail Name
     */
    serverName: string;
}

export interface HpcLiteNewTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface IamPolicyPrincipal {
    /**
     * Principal ID
     */
    principalId: string;
    /**
     * Principal type
     */
    principalType: string;
}

export interface IamRoleTrustPrincipal {
    /**
     * Project IDs
     */
    projectIds?: string[];
    /**
     * User SRNs
     */
    userSrns?: string[];
}

export interface KubernetesEnginePrivateAclResource {
    /**
     * Resource ID
     */
    resourceId?: string;
    /**
     * Resource Type
     */
    resourceType?: string;
    /**
     * Resource Value
     */
    resourceValue?: string;
}

export interface KubernetesNodePoolTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LaunchConfigurationBlockStorage {
    /**
     * Block Storage size (GB)
     */
    blockStorageSize: number;
    /**
     * Block Storage product (default value : SSD)
     */
    diskType: string;
    /**
     * Encryption enabled
     */
    encryptionEnabled: boolean;
    /**
     * Is boot disk or not
     */
    isBootDisk: boolean;
    /**
     * Product ID
     */
    productId: string;
}

export interface LbServerGroupServerGroupMember {
    /**
     * Target service joining state. (ENABLED, DISABLED, GRACEFUL_DISABLED)
     */
    joinState: string;
    /**
     * Target object id (VM server or BareMetal server). This can not be set with 'object_ipv4'. Input resource should be in the same VPC.
     */
    objectId?: string;
    /**
     * Target object ip
     */
    objectIpAddress?: string;
    /**
     * Target object port for manual setting. (1 to 65535)
     */
    objectPort?: number;
    /**
     * Target object type. (INSTANCE, BAREMETAL, MANUAL)
     */
    objectType: string;
    /**
     * Balancing weight. This is used with when weighted algorithm is set. (1 to 256)
     */
    weight: number;
}

export interface LbServiceLbRule {
    lbRuleId: string;
    lbRuleSeq: number;
    /**
     * Target server-group id.
     */
    lbServerGroupId?: string;
    /**
     * Pattern URL.
     */
    patternUrl?: string;
}

export interface MariadbBackup {
    /**
     * Backup File Schedule Frequency.(5M|10M|30M|1H)
     */
    archiveBackupScheduleFrequency: string;
    /**
     * Backup File Retention Day.(7D <= day <= 35D)
     */
    backupRetentionPeriod: string;
    /**
     * The time at which the backup starts. (from 0 to 23)
     */
    backupStartHour: number;
    /**
     * Object storage ID where backup files will be stored.
     */
    objectStorageId?: string;
}

export interface MariadbBlockStorage {
    /**
     * Block storage group id
     */
    blockStorageGroupId: string;
    /**
     * Storage usage. (DATA|ARCHIVE|TEMP|BACKUP)
     */
    blockStorageRoleType: string;
    /**
     * Block Storage Size (10 to 5120)
     */
    blockStorageSize: number;
    /**
     * Storage product name. (SSD|HDD)
     */
    blockStorageType: string;
}

export interface MariadbMariadbServer {
    /**
     * Availability Zone Name. The single server does not input anything. (AZ1|AZ2)
     */
    availabilityZoneName?: string;
    /**
     * MariaDB database server names. (3 to 20 lowercase and number with dash and the first character should be an lowercase letter.)
     */
    mariadbServerName: string;
    /**
     * Server role type Enter 'ACTIVE' for a single server configuration. (ACTIVE | STANDBY)
     */
    serverRoleType: string;
}

export interface MariadbTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface MigrationImageProduct {
    createdDt: string;
    imageId: string;
    productId: string;
    productName: string;
    productType: string;
    productValue: string;
    seq: number;
}

export interface MysqlBackup {
    /**
     * Backup File Schedule Frequency.(5M|10M|30M|1H)
     */
    archiveBackupScheduleFrequency: string;
    /**
     * Backup File Retention Day.(7D <= day <= 35D)
     */
    backupRetentionPeriod: string;
    /**
     * The time at which the backup starts. (from 0 to 23)
     */
    backupStartHour: number;
    /**
     * Object storage ID where backup files will be stored.
     */
    objectStorageId?: string;
}

export interface MysqlBlockStorage {
    /**
     * Block storage group id
     */
    blockStorageGroupId: string;
    /**
     * Storage usage. (DATA|ARCHIVE|TEMP|BACKUP)
     */
    blockStorageRoleType: string;
    /**
     * Block Storage Size (10 to 5120)
     */
    blockStorageSize: number;
    /**
     * Storage product name. (SSD|HDD)
     */
    blockStorageType: string;
}

export interface MysqlMysqlServer {
    /**
     * Availability Zone Name. The single server does not input anything. (AZ1|AZ2)
     */
    availabilityZoneName?: string;
    /**
     * Mysql database server names. (3 to 20 lowercase and number with dash and the first character should be an lowercase letter.)
     */
    mysqlServerName: string;
    /**
     * Server role type Enter 'ACTIVE' for a single server configuration. (ACTIVE | STANDBY)
     */
    serverRoleType: string;
}

export interface MysqlTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ObsBucketAccessControlRule {
    /**
     * Access Control Rule Type
     */
    ruleType?: string;
    /**
     * Access Control Rule Value
     */
    ruleValue?: string;
}

export interface PostgresqlBackup {
    /**
     * Backup File Schedule Frequency.(5M|10M|30M|1H)
     */
    archiveBackupScheduleFrequency: string;
    /**
     * Backup File Retention Day.(7D <= day <= 35D)
     */
    backupRetentionPeriod: string;
    /**
     * The time at which the backup starts. (from 0 to 23)
     */
    backupStartHour: number;
    /**
     * Object storage ID where backup files will be stored.
     */
    objectStorageId?: string;
}

export interface PostgresqlBlockStorage {
    /**
     * Block storage group id
     */
    blockStorageGroupId: string;
    /**
     * Storage usage. (DATA|ARCHIVE|TEMP|BACKUP)
     */
    blockStorageRoleType: string;
    /**
     * Block Storage Size (10 to 5120)
     */
    blockStorageSize: number;
    /**
     * Storage product name. (SSD|HDD)
     */
    blockStorageType: string;
}

export interface PostgresqlPostgresqlServer {
    /**
     * Availability Zone Name. The single server does not input anything. (AZ1|AZ2)
     */
    availabilityZoneName?: string;
    /**
     * Postgresql database server names. (3 to 20 lowercase and number with dash and the first character should be an lowercase letter.)
     */
    postgresqlServerName: string;
    /**
     * Server role type Enter 'ACTIVE' for a single server configuration. (ACTIVE | STANDBY)
     */
    serverRoleType: string;
}

export interface PostgresqlTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface RedisBackup {
    /**
     * Backup File Retention Day.(7D <= day <= 35D)
     */
    backupRetentionPeriod: string;
    /**
     * The time at which the backup starts. (from 0 to 23)
     */
    backupStartHour: number;
    /**
     * Object storage ID where backup files will be stored.
     */
    objectStorageId?: string;
}

export interface RedisBlockStorage {
    /**
     * Block storage group id
     */
    blockStorageGroupId: string;
    /**
     * Block Storage Size (10 to 5120)
     */
    blockStorageSize: number;
    /**
     * Storage product name. (SSD|HDD)
     */
    blockStorageType: string;
}

export interface RedisClusterBackup {
    /**
     * Backup File Retention Day.(7D <= day <= 35D)
     */
    backupRetentionPeriod: string;
    /**
     * The time at which the backup starts. (from 0 to 23)
     */
    backupStartHour: number;
    /**
     * Object storage ID where backup files will be stored.
     */
    objectStorageId?: string;
}

export interface RedisClusterBlockStorage {
    /**
     * Block storage group id
     */
    blockStorageGroupId: string;
    /**
     * Storage usage. (Only DATA)
     */
    blockStorageRoleType?: string;
    /**
     * Block Storage Size (50 to 5120)
     */
    blockStorageSize: number;
    /**
     * Storage product name. (SSD|HDD)
     */
    blockStorageType: string;
}

export interface RedisClusterRedisServer {
    /**
     * nat ip address
     */
    natIpAddress: string;
    /**
     * Public IP for NAT. If it is null, it is automatically allocated.
     */
    natPublicIpId?: string;
    /**
     * RedisCluster database server names. (3 to 20 lowercase and number with dash and the first character should be an lowercase letter.)
     */
    redisServerName: string;
    /**
     * Server role type Enter 'MASTER' for a single server configuration. (MASTER | REPLICA)",
     */
    serverRoleType: string;
}

export interface RedisClusterTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface RedisRedisSentinelServer {
    /**
     * nat ip address
     */
    natPublicIpAddress: string;
    /**
     * ublic IP for NAT. If it is null, it is automatically allocated.
     */
    sentinelNatPublicIpId?: string;
    /**
     * Server role type Enter 'ACTIVE' for a single server configuration. (ACTIVE | STANDBY)
     */
    sentinelPort: number;
    /**
     * Redis database server names. (3 to 20 lowercase and number with dash and the first character should be an lowercase letter.)
     */
    sentinelServerName: string;
}

export interface RedisRedisServer {
    /**
     * nat ip address
     */
    natPublicIpAddress: string;
    /**
     * Public IP for NAT. If it is null, it is automatically allocated.
     */
    natPublicIpId?: string;
    /**
     * Redis database server names. (3 to 20 lowercase and number with dash and the first character should be an lowercase letter.)
     */
    redisServerName: string;
    /**
     * Server role type Enter 'ACTIVE' for a single server configuration. (MASTER | REPLICA)
     */
    serverRoleType: string;
}

export interface RedisTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ResourceGroupTargetResourceTag {
    tagKey: string;
    tagValue: string;
}

export interface SecurityGroupBulkRuleRule {
    /**
     * SecurityGroup Rule target cidr addresses
     */
    addressesIpv4s: string[];
    /**
     * SecurityGroup Rule description. (Up to 50 characters)
     */
    description?: string;
    /**
     * SecurityGroup Rule direction (Can be 'in' or 'out')
     */
    direction: string;
    /**
     * SecurityGroup Rule service
     */
    services: outputs.SecurityGroupBulkRuleRuleService[];
}

export interface SecurityGroupBulkRuleRuleService {
    /**
     * Protocol type. (TCP, UDP, ICMP, ALL)
     */
    type: string;
    /**
     * Port value
     */
    value?: string;
}

export interface SecurityGroupRuleService {
    /**
     * Protocol type. (TCP, UDP, ICMP, ALL)
     */
    type: string;
    /**
     * Port value
     */
    value?: string;
}

export interface SqlserverBackup {
    /**
     * Backup File Schedule Frequency.(5M, 10M, 30M, 1H)
     */
    archiveBackupScheduleFrequency: string;
    /**
     * Backup File Retention Day.(7D <= day <= 35D)
     */
    backupRetentionPeriod: string;
    /**
     * The time at which the backup starts. (from 0 to 23)
     */
    backupStartHour: number;
    /**
     * Full backup schedule(Day). (MONDAY to SUNDAY)
     */
    fullBackupDayOfWeek: string;
    /**
     * Object storage ID where backup files will be stored.
     */
    objectStorageId?: string;
}

export interface SqlserverBlockStorage {
    /**
     * Block storage group id
     */
    blockStorageGroupId: string;
    /**
     * Block Storage Size (10 to 7168)
     */
    blockStorageSize: number;
    /**
     * Storage product name. (SSD|HDD)
     */
    blockStorageType: string;
}

export interface SqlserverSqlserverActiveDirectory {
    /**
     * Active Directory Server User ID
     */
    adServerUserId?: string;
    /**
     * Active Directory Server User password
     */
    adServerUserPassword?: string;
    /**
     * Active Directory DNS Server IPs
     */
    dnsServerIps?: string[];
    /**
     * Active Directory Domain name
     */
    domainName?: string;
    /**
     * Active Directory NetBios name
     */
    domainNetBiosName?: string;
    /**
     * Active Directory Failover Cluster name
     */
    failoverClusterName?: string;
}

export interface SqlserverSqlserverServer {
    /**
     * Availability Zone Name. (AZ1 | AZ2)
     */
    availabilityZoneName?: string;
    /**
     * Server role type Enter 'ACTIVE' for a single server configuration. (ACTIVE | PRIMARY | SECONDARY)",
     */
    serverRoleType: string;
    /**
     * MS SQL Server database server names. (3 to 15 lowercase and number with dash and the first character should be an lowercase letter.)
     */
    sqlserverServerName: string;
}

export interface SqlserverTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface VirtualServerExternalStorage {
    /**
     * Block Storage Id
     */
    blockStorageId: string;
    /**
     * Use encryption for this storage
     */
    encrypted?: boolean;
    /**
     * External storage name
     */
    name: string;
    /**
     * Storage product Id
     */
    productId: string;
    /**
     * Storage product name : SSD
     */
    productName?: string;
    /**
     * SHARED/DEDICATED
     */
    sharedType?: string;
    /**
     * Storage size in gigabytes
     */
    storageSizeGb: number;
    /**
     * Tags
     */
    tags?: {[key: string]: string};
}

export interface VirtualServerLocalSubnet {
    /**
     * Network interface id
     */
    id: string;
    /**
     * Subnet ip address.
     */
    ipv4: string;
    /**
     * Subnet Id
     */
    subnetId: string;
}

