// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AutoScalingGroupVpcInfo {
    /**
     * Local subnet ID
     */
    localSubnetId?: pulumi.Input<string>;
    /**
     * NAT enabled
     */
    natEnabled: pulumi.Input<boolean>;
    /**
     * Subnet ID
     */
    subnetId: pulumi.Input<string>;
    /**
     * VPC ID
     */
    vpcId: pulumi.Input<string>;
}

export interface BackupSchedule {
    /**
     * Backup Schedule Frequency (MONTHLY, WEEKLY, DAYS)
     */
    scheduleFrequency: pulumi.Input<string>;
    /**
     * Backup Schedule Frequency details
     */
    scheduleFrequencyDetail: pulumi.Input<string>;
    /**
     * Backup Schedule ID
     */
    scheduleId?: pulumi.Input<string>;
    /**
     * Backup Schedule Name
     */
    scheduleName?: pulumi.Input<string>;
    /**
     * Backup Schedule Type (FULL, INCREMENTAL)
     */
    scheduleType: pulumi.Input<string>;
    /**
     * Backup Start Time (format:HH:mmÂ±hh:mm)
     */
    startTime: pulumi.Input<string>;
}

export interface BmServerBlockStorage {
    /**
     * Use encryption for this storage
     */
    encrypted?: pulumi.Input<boolean>;
    /**
     * Block storage name
     */
    name: pulumi.Input<string>;
    /**
     * Storage product name : SSD
     */
    productName?: pulumi.Input<string>;
    /**
     * Storage size in gigabytes
     */
    storageSizeGb: pulumi.Input<number>;
}

export interface BmServerServer {
    /**
     * Bare-metal server name
     */
    bmServerName: pulumi.Input<string>;
    /**
     * IP address of this bare-metal server
     */
    ipv4?: pulumi.Input<string>;
    /**
     * Enable local subnet for this bare-metal server
     */
    localSubnetEnabled?: pulumi.Input<boolean>;
    /**
     * Local Subnet id of this bare-metal server. Subnet must be a valid subnet resource which is attached to the VPC.
     */
    localSubnetId?: pulumi.Input<string>;
    /**
     * Local IP address of this bare-metal server
     */
    localSubnetIpv4?: pulumi.Input<string>;
    /**
     * Enable NAT feature for this bare-metal server.
     */
    natEnabled?: pulumi.Input<boolean>;
    /**
     * Public IP id of this bare-metal server. Public-IP must be a valid public-ip resource which is attached to the VPC.
     */
    publicIpId?: pulumi.Input<string>;
    /**
     * Baremetal Server State(ex. RUNNING, STOPPED)
     */
    state: pulumi.Input<string>;
    /**
     * Enable DNS feature for this bare-metal server.
     */
    useDns?: pulumi.Input<boolean>;
    /**
     * Enable hyper-threading feature for this bare-metal server.(ex. Y, N)
     */
    useHyperThreading?: pulumi.Input<string>;
}

export interface BmServerTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface BmServerVdcBlockStorage {
    /**
     * Use encryption for this storage
     */
    encrypted?: pulumi.Input<boolean>;
    /**
     * Block storage name
     */
    name: pulumi.Input<string>;
    /**
     * Storage product name : SSD
     */
    productName?: pulumi.Input<string>;
    /**
     * Storage size in gigabytes
     */
    storageSizeGb: pulumi.Input<number>;
}

export interface BmServerVdcServer {
    /**
     * Enable DNS feature for this bare-metal server.
     */
    dnsEnabled?: pulumi.Input<boolean>;
    /**
     * IP address of this bare-metal server
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Server name
     */
    name: pulumi.Input<string>;
    /**
     * Enable hyper-threading feature for this bare-metal server.(ex Y, N)
     */
    useHyperThreading?: pulumi.Input<string>;
}

export interface BmServerVdcTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface CustomImageDisk {
    bootEnabled: pulumi.Input<boolean>;
    createdBy: pulumi.Input<string>;
    createdDt: pulumi.Input<string>;
    deviceNode: pulumi.Input<string>;
    diskSize: pulumi.Input<number>;
    encryptEnabled: pulumi.Input<boolean>;
    imageId: pulumi.Input<string>;
    modifiedBy: pulumi.Input<string>;
    modifiedDt: pulumi.Input<string>;
    productId: pulumi.Input<string>;
    seq: pulumi.Input<number>;
}

export interface CustomImageProduct {
    createdDt: pulumi.Input<string>;
    imageId: pulumi.Input<string>;
    productId: pulumi.Input<string>;
    productName: pulumi.Input<string>;
    productType: pulumi.Input<string>;
    productValue: pulumi.Input<string>;
    seq: pulumi.Input<number>;
}

export interface DnsDomainTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface DnsRecordDnsRecordMapping {
    /**
     * DnsDomain Resource Weight
     */
    preference?: pulumi.Input<number>;
    /**
     * DnsDomain Resource Destination
     */
    recordDestination: pulumi.Input<string>;
}

export interface DnsRecordTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface EpasBackup {
    /**
     * Backup File Schedule Frequency.(5M|10M|30M|1H)
     */
    archiveBackupScheduleFrequency: pulumi.Input<string>;
    /**
     * Backup File Retention Day.(7D <= day <= 35D)
     */
    backupRetentionPeriod: pulumi.Input<string>;
    /**
     * The time at which the backup starts. (from 0 to 23)
     */
    backupStartHour: pulumi.Input<number>;
    /**
     * Object storage ID where backup files will be stored.
     */
    objectStorageId?: pulumi.Input<string>;
}

export interface EpasBlockStorage {
    /**
     * Block storage group id
     */
    blockStorageGroupId?: pulumi.Input<string>;
    /**
     * Storage usage. (DATA|ARCHIVE|TEMP|BACKUP)
     */
    blockStorageRoleType: pulumi.Input<string>;
    /**
     * Block Storage Size (10 to 5120)
     */
    blockStorageSize: pulumi.Input<number>;
    /**
     * Storage product name. (SSD|HDD)
     */
    blockStorageType: pulumi.Input<string>;
}

export interface EpasEpasServer {
    /**
     * Availability Zone Name. The single server does not input anything. (AZ1|AZ2)
     */
    availabilityZoneName?: pulumi.Input<string>;
    /**
     * Epas database server names. (3 to 20 lowercase and number with dash and the first character should be an lowercase letter.)
     */
    epasServerName: pulumi.Input<string>;
    /**
     * Server role type Enter 'ACTIVE' for a single server configuration. (ACTIVE | STANDBY)
     */
    serverRoleType: pulumi.Input<string>;
}

export interface EpasTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface FileStorageLinkObject {
    /**
     * Link object ID
     */
    linkObjectId?: pulumi.Input<string>;
    /**
     * Type
     */
    type?: pulumi.Input<string>;
}

export interface FileStorageUnlinkObject {
    /**
     * Link object ID
     */
    linkObjectId?: pulumi.Input<string>;
    /**
     * Type
     */
    type?: pulumi.Input<string>;
}

export interface FirewallBulkRuleRule {
    /**
     * Rule action. (ALLOW, DROP)
     */
    action: pulumi.Input<string>;
    /**
     * Rule description. (0 to 100 characters)
     */
    description?: pulumi.Input<string>;
    /**
     * Destination ip addresses cidr list
     */
    destinationAddressesIpv4s: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Rule direction. (IN, OUT, IN_OUT)
     */
    direction: pulumi.Input<string>;
    /**
     * Rule enabled state.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Firewall Rule service
     */
    services: pulumi.Input<pulumi.Input<inputs.FirewallBulkRuleRuleService>[]>;
    /**
     * Source ip addresses cidr list
     */
    sourceAddressesIpv4s: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FirewallBulkRuleRuleService {
    /**
     * Protocol type. (TCP, UDP, ICMP, ALL)
     */
    type: pulumi.Input<string>;
    /**
     * Port value
     */
    value?: pulumi.Input<string>;
}

export interface FirewallRuleService {
    /**
     * Protocol type. (TCP, UDP, ICMP, ALL)
     */
    type: pulumi.Input<string>;
    /**
     * Port value
     */
    value?: pulumi.Input<string>;
}

export interface GetAutoScalingGroupPoliciesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetAutoScalingGroupPoliciesFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetAutoScalingGroupVirtualServersFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetAutoScalingGroupVirtualServersFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetAutoScalingGroupsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetAutoScalingGroupsFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetBlockStoragesContent {
    /**
     * Block id of this region
     */
    blockId?: string;
    /**
     * Block Storage id
     */
    blockStorageId?: string;
    /**
     * Block storage name to create.
     */
    blockStorageName?: string;
    /**
     * Storage size(GB)
     */
    blockStorageSize?: number;
    /**
     * Block storage status
     */
    blockStorageState?: string;
    /**
     * Block Storage uuid
     */
    blockStorageUuid?: string;
    /**
     * Person who created the resource
     */
    createdBy?: string;
    /**
     * Creation time
     */
    createdDt?: string;
    /**
     * Device node
     */
    deviceNode?: string;
    /**
     * Enable encryption feature in storage
     */
    encryptEnabled?: boolean;
    /**
     * Check whether it is OS(Boot) disk or not
     */
    isBootDisk?: boolean;
    /**
     * Person who modified the resource
     */
    modifiedBy?: string;
    /**
     * Modification time
     */
    modifiedDt?: string;
    /**
     * Mount path
     */
    mountPath?: string;
    /**
     * Product id of block storage
     */
    productId?: string;
    /**
     * Project id
     */
    projectId?: string;
    /**
     * Service zone id
     */
    serviceZoneId?: string;
    /**
     * Shared type of block storage
     */
    sharedType?: string;
    /**
     * Virtual server id to assign the block storage.
     */
    virtualServerId?: string;
    /**
     * Mounted Virtual Servers
     */
    virtualServers?: inputs.GetBlockStoragesContentVirtualServer[];
}

export interface GetBlockStoragesContentArgs {
    /**
     * Block id of this region
     */
    blockId?: pulumi.Input<string>;
    /**
     * Block Storage id
     */
    blockStorageId?: pulumi.Input<string>;
    /**
     * Block storage name to create.
     */
    blockStorageName?: pulumi.Input<string>;
    /**
     * Storage size(GB)
     */
    blockStorageSize?: pulumi.Input<number>;
    /**
     * Block storage status
     */
    blockStorageState?: pulumi.Input<string>;
    /**
     * Block Storage uuid
     */
    blockStorageUuid?: pulumi.Input<string>;
    /**
     * Person who created the resource
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Creation time
     */
    createdDt?: pulumi.Input<string>;
    /**
     * Device node
     */
    deviceNode?: pulumi.Input<string>;
    /**
     * Enable encryption feature in storage
     */
    encryptEnabled?: pulumi.Input<boolean>;
    /**
     * Check whether it is OS(Boot) disk or not
     */
    isBootDisk?: pulumi.Input<boolean>;
    /**
     * Person who modified the resource
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modification time
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * Mount path
     */
    mountPath?: pulumi.Input<string>;
    /**
     * Product id of block storage
     */
    productId?: pulumi.Input<string>;
    /**
     * Project id
     */
    projectId?: pulumi.Input<string>;
    /**
     * Service zone id
     */
    serviceZoneId?: pulumi.Input<string>;
    /**
     * Shared type of block storage
     */
    sharedType?: pulumi.Input<string>;
    /**
     * Virtual server id to assign the block storage.
     */
    virtualServerId?: pulumi.Input<string>;
    /**
     * Mounted Virtual Servers
     */
    virtualServers?: pulumi.Input<pulumi.Input<inputs.GetBlockStoragesContentVirtualServerArgs>[]>;
}

export interface GetBlockStoragesContentVirtualServer {
    mountState: string;
    virtualServerId: string;
}

export interface GetBlockStoragesContentVirtualServerArgs {
    mountState: pulumi.Input<string>;
    virtualServerId: pulumi.Input<string>;
}

export interface GetBmBlockStoragesContent {
    /**
     * Baremetal Block Storage Id
     */
    bareMetalBlockStorageId?: string;
    /**
     * Baremetal Block Storage Name
     */
    bareMetalBlockStorageName?: string;
    /**
     * Baremetal Block Storage Purpose
     */
    bareMetalBlockStoragePurpose?: string;
    /**
     * Baremetal Block Storage Size
     */
    bareMetalBlockStorageSize?: number;
    /**
     * Baremetal Block Storage State
     */
    bareMetalBlockStorageState?: string;
    /**
     * Baremetal Block Storage Type
     */
    bareMetalBlockStorageTypeId?: string;
    /**
     * Baremetal Server Ids
     */
    bareMetalServerIds?: string[];
    /**
     * Block Id
     */
    blockId?: string;
    /**
     * Created By
     */
    createdBy?: string;
    /**
     * Created Date
     */
    createdDt?: string;
    /**
     * Encryption Enabled
     */
    encryptionEnabled?: boolean;
    /**
     * Location
     */
    location?: string;
    /**
     * Modified By
     */
    modifiedBy?: string;
    /**
     * Modified Date
     */
    modifiedDt?: string;
    /**
     * Service Zone Id
     */
    serviceZoneId?: string;
}

export interface GetBmBlockStoragesContentArgs {
    /**
     * Baremetal Block Storage Id
     */
    bareMetalBlockStorageId?: pulumi.Input<string>;
    /**
     * Baremetal Block Storage Name
     */
    bareMetalBlockStorageName?: pulumi.Input<string>;
    /**
     * Baremetal Block Storage Purpose
     */
    bareMetalBlockStoragePurpose?: pulumi.Input<string>;
    /**
     * Baremetal Block Storage Size
     */
    bareMetalBlockStorageSize?: pulumi.Input<number>;
    /**
     * Baremetal Block Storage State
     */
    bareMetalBlockStorageState?: pulumi.Input<string>;
    /**
     * Baremetal Block Storage Type
     */
    bareMetalBlockStorageTypeId?: pulumi.Input<string>;
    /**
     * Baremetal Server Ids
     */
    bareMetalServerIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Block Id
     */
    blockId?: pulumi.Input<string>;
    /**
     * Created By
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Created Date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * Encryption Enabled
     */
    encryptionEnabled?: pulumi.Input<boolean>;
    /**
     * Location
     */
    location?: pulumi.Input<string>;
    /**
     * Modified By
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modified Date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * Service Zone Id
     */
    serviceZoneId?: pulumi.Input<string>;
}

export interface GetBmServersContent {
    /**
     * Baremetal Server Id
     */
    bareMetalServerId?: string;
    /**
     * Baremetal Server Name
     */
    bareMetalServerName?: string;
    /**
     * Baremetal Server State
     */
    bareMetalServerState?: string;
    /**
     * Block Id
     */
    blockId?: string;
    /**
     * Created By
     */
    createdBy?: string;
    /**
     * Created Date
     */
    createdDt?: string;
    /**
     * Image Id
     */
    imageId?: string;
    /**
     * Ip Address
     */
    ipAddress?: string;
    /**
     * Modified By
     */
    modifiedBy?: string;
    /**
     * Modified Date
     */
    modifiedDt?: string;
    /**
     * Project Id
     */
    projectId?: string;
    /**
     * Server Type Id
     */
    serverTypeId?: string;
    /**
     * Service Zone Id
     */
    serviceZoneId?: string;
}

export interface GetBmServersContentArgs {
    /**
     * Baremetal Server Id
     */
    bareMetalServerId?: pulumi.Input<string>;
    /**
     * Baremetal Server Name
     */
    bareMetalServerName?: pulumi.Input<string>;
    /**
     * Baremetal Server State
     */
    bareMetalServerState?: pulumi.Input<string>;
    /**
     * Block Id
     */
    blockId?: pulumi.Input<string>;
    /**
     * Created By
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Created Date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * Image Id
     */
    imageId?: pulumi.Input<string>;
    /**
     * Ip Address
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Modified By
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modified Date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * Project Id
     */
    projectId?: pulumi.Input<string>;
    /**
     * Server Type Id
     */
    serverTypeId?: pulumi.Input<string>;
    /**
     * Service Zone Id
     */
    serviceZoneId?: pulumi.Input<string>;
}

export interface GetBmVdcServersContent {
    /**
     * Baremetal Server Id
     */
    bareMetalServerId?: string;
    /**
     * Baremetal Server Name
     */
    bareMetalServerName?: string;
    /**
     * Baremetal Server State
     */
    bareMetalServerState?: string;
    /**
     * Block Id
     */
    blockId?: string;
    /**
     * Created By
     */
    createdBy?: string;
    /**
     * Created Date
     */
    createdDt?: string;
    /**
     * Image Id
     */
    imageId?: string;
    /**
     * Ip Address
     */
    ipAddress?: string;
    /**
     * Modified By
     */
    modifiedBy?: string;
    /**
     * Modified Date
     */
    modifiedDt?: string;
    /**
     * Project Id
     */
    projectId?: string;
    /**
     * Server Type Id
     */
    serverTypeId?: string;
    /**
     * Service Zone Id
     */
    serviceZoneId?: string;
}

export interface GetBmVdcServersContentArgs {
    /**
     * Baremetal Server Id
     */
    bareMetalServerId?: pulumi.Input<string>;
    /**
     * Baremetal Server Name
     */
    bareMetalServerName?: pulumi.Input<string>;
    /**
     * Baremetal Server State
     */
    bareMetalServerState?: pulumi.Input<string>;
    /**
     * Block Id
     */
    blockId?: pulumi.Input<string>;
    /**
     * Created By
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Created Date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * Image Id
     */
    imageId?: pulumi.Input<string>;
    /**
     * Ip Address
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Modified By
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modified Date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * Project Id
     */
    projectId?: pulumi.Input<string>;
    /**
     * Server Type Id
     */
    serverTypeId?: pulumi.Input<string>;
    /**
     * Service Zone Id
     */
    serviceZoneId?: pulumi.Input<string>;
}

export interface GetCustomImagesContent {
    availabilityZoneName?: string;
    baseImage?: string;
    blockId?: string;
    category?: string;
    createdBy?: string;
    createdDt?: string;
    defaultDiskSize?: number;
    /**
     * Extra disk size.
     */
    diskSize?: number;
    disks?: inputs.GetCustomImagesContentDisk[];
    icon?: {[key: string]: string};
    /**
     * Custom image description. (Up to 50 characters)
     */
    imageDescription?: string;
    imageId: string;
    imageName?: string;
    /**
     * Image state (ACTIVE)
     */
    imageState?: string;
    /**
     * Image type (STANDARD, CUSTOM, MIGRATION)
     */
    imageType?: string;
    modifiedBy?: string;
    modifiedDt?: string;
    originImageId?: string;
    originImageName?: string;
    originVirtualServerId?: string;
    /**
     * OS type (Windows, Ubuntu, ..)
     */
    osType?: string;
    productGroupId?: string;
    products?: inputs.GetCustomImagesContentProduct[];
    projectId?: string;
    properties?: {[key: string]: string};
    serviceZoneId?: string;
}

export interface GetCustomImagesContentArgs {
    availabilityZoneName?: pulumi.Input<string>;
    baseImage?: pulumi.Input<string>;
    blockId?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    createdDt?: pulumi.Input<string>;
    defaultDiskSize?: pulumi.Input<number>;
    /**
     * Extra disk size.
     */
    diskSize?: pulumi.Input<number>;
    disks?: pulumi.Input<pulumi.Input<inputs.GetCustomImagesContentDiskArgs>[]>;
    icon?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Custom image description. (Up to 50 characters)
     */
    imageDescription?: pulumi.Input<string>;
    imageId: pulumi.Input<string>;
    imageName?: pulumi.Input<string>;
    /**
     * Image state (ACTIVE)
     */
    imageState?: pulumi.Input<string>;
    /**
     * Image type (STANDARD, CUSTOM, MIGRATION)
     */
    imageType?: pulumi.Input<string>;
    modifiedBy?: pulumi.Input<string>;
    modifiedDt?: pulumi.Input<string>;
    originImageId?: pulumi.Input<string>;
    originImageName?: pulumi.Input<string>;
    originVirtualServerId?: pulumi.Input<string>;
    /**
     * OS type (Windows, Ubuntu, ..)
     */
    osType?: pulumi.Input<string>;
    productGroupId?: pulumi.Input<string>;
    products?: pulumi.Input<pulumi.Input<inputs.GetCustomImagesContentProductArgs>[]>;
    projectId?: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    serviceZoneId?: pulumi.Input<string>;
}

export interface GetCustomImagesContentDisk {
    bootEnabled: boolean;
    createdBy: string;
    createdDt: string;
    deviceNode: string;
    diskSize: number;
    encryptEnabled: boolean;
    imageId: string;
    modifiedBy: string;
    modifiedDt: string;
    productId: string;
    seq: number;
}

export interface GetCustomImagesContentDiskArgs {
    bootEnabled: pulumi.Input<boolean>;
    createdBy: pulumi.Input<string>;
    createdDt: pulumi.Input<string>;
    deviceNode: pulumi.Input<string>;
    diskSize: pulumi.Input<number>;
    encryptEnabled: pulumi.Input<boolean>;
    imageId: pulumi.Input<string>;
    modifiedBy: pulumi.Input<string>;
    modifiedDt: pulumi.Input<string>;
    productId: pulumi.Input<string>;
    seq: pulumi.Input<number>;
}

export interface GetCustomImagesContentProduct {
    createdDt: string;
    imageId: string;
    productId: string;
    productName: string;
    productType: string;
    productValue: string;
    seq: number;
}

export interface GetCustomImagesContentProductArgs {
    createdDt: pulumi.Input<string>;
    imageId: pulumi.Input<string>;
    productId: pulumi.Input<string>;
    productName: pulumi.Input<string>;
    productType: pulumi.Input<string>;
    productValue: pulumi.Input<string>;
    seq: pulumi.Input<number>;
}

export interface GetDconVpcConnectionsContent {
    /**
     * Project id of approver
     */
    approverProjectId?: string;
    /**
     * Vpc id of approver
     */
    approverVpcId?: string;
    /**
     * Complete date
     */
    completedDt?: string;
    /**
     * DirectConnect connection description
     */
    createdBy?: string;
    /**
     * Creation date
     */
    createdDt?: string;
    /**
     * Uplink enabled
     */
    directConnectConnectionDescription?: string;
    /**
     * DirectConnect connection id
     */
    directConnectConnectionId?: string;
    /**
     * DirectConnect connection name
     */
    directConnectConnectionName?: string;
    /**
     * DirectConnect connection state
     */
    directConnectConnectionState?: string;
    /**
     * DirectConnect connection type
     */
    directConnectConnectionType?: string;
    /**
     * The person who modified the resource
     */
    modifiedBy?: string;
    /**
     * Modification date
     */
    modifiedDt?: string;
    /**
     * Project id
     */
    projectId?: string;
    /**
     * DirectConnect id of requester
     */
    requesterDirectConnectId?: string;
    /**
     * Project id of requester
     */
    requesterProjectId?: string;
}

export interface GetDconVpcConnectionsContentArgs {
    /**
     * Project id of approver
     */
    approverProjectId?: pulumi.Input<string>;
    /**
     * Vpc id of approver
     */
    approverVpcId?: pulumi.Input<string>;
    /**
     * Complete date
     */
    completedDt?: pulumi.Input<string>;
    /**
     * DirectConnect connection description
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Creation date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * Uplink enabled
     */
    directConnectConnectionDescription?: pulumi.Input<string>;
    /**
     * DirectConnect connection id
     */
    directConnectConnectionId?: pulumi.Input<string>;
    /**
     * DirectConnect connection name
     */
    directConnectConnectionName?: pulumi.Input<string>;
    /**
     * DirectConnect connection state
     */
    directConnectConnectionState?: pulumi.Input<string>;
    /**
     * DirectConnect connection type
     */
    directConnectConnectionType?: pulumi.Input<string>;
    /**
     * The person who modified the resource
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modification date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * Project id
     */
    projectId?: pulumi.Input<string>;
    /**
     * DirectConnect id of requester
     */
    requesterDirectConnectId?: pulumi.Input<string>;
    /**
     * Project id of requester
     */
    requesterProjectId?: pulumi.Input<string>;
}

export interface GetDirectConnectRoutingRoutesContent {
    /**
     * Source Interface Id
     */
    sourceServiceInterfaceId?: string;
    /**
     * Source Interface Name
     */
    sourceServiceInterfaceName?: string;
}

export interface GetDirectConnectRoutingRoutesContentArgs {
    /**
     * Source Interface Id
     */
    sourceServiceInterfaceId?: pulumi.Input<string>;
    /**
     * Source Interface Name
     */
    sourceServiceInterfaceName?: pulumi.Input<string>;
}

export interface GetDirectConnectRoutingRoutesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetDirectConnectRoutingRoutesFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetDirectConnectRoutingRulesContent {
    /**
     * Created By
     */
    createdBy?: string;
    /**
     * Created Date
     */
    createdDt?: string;
    /**
     * Destination Network Cidr
     */
    destinationNetworkCidr?: string;
    /**
     * is Editable
     */
    editable?: boolean;
    /**
     * Modified By
     */
    modifiedBy?: string;
    /**
     * Modified Date
     */
    modifiedDt?: string;
    /**
     * Project Id
     */
    projectId?: string;
    /**
     * Routing Rule Id
     */
    routingRuleId?: string;
    /**
     * Routing Rule State
     */
    routingRuleState?: string;
    /**
     * Source DirectConnect Connection Id
     */
    sourceDirectConnectConnectionId?: string;
    /**
     * Source Interface Id
     */
    sourceServiceInterfaceId?: string;
    /**
     * Source Interface Name
     */
    sourceServiceInterfaceName?: string;
}

export interface GetDirectConnectRoutingRulesContentArgs {
    /**
     * Created By
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Created Date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * Destination Network Cidr
     */
    destinationNetworkCidr?: pulumi.Input<string>;
    /**
     * is Editable
     */
    editable?: pulumi.Input<boolean>;
    /**
     * Modified By
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modified Date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * Project Id
     */
    projectId?: pulumi.Input<string>;
    /**
     * Routing Rule Id
     */
    routingRuleId?: pulumi.Input<string>;
    /**
     * Routing Rule State
     */
    routingRuleState?: pulumi.Input<string>;
    /**
     * Source DirectConnect Connection Id
     */
    sourceDirectConnectConnectionId?: pulumi.Input<string>;
    /**
     * Source Interface Id
     */
    sourceServiceInterfaceId?: pulumi.Input<string>;
    /**
     * Source Interface Name
     */
    sourceServiceInterfaceName?: pulumi.Input<string>;
}

export interface GetDirectConnectRoutingTablesContent {
    /**
     * DirectConnect Connention Id
     */
    directConnectConnectionId?: string;
    /**
     * Routing Rule Count
     */
    routingRuleCount?: number;
    /**
     * Routing Table ID
     */
    routingTableId?: string;
    /**
     * Routing Table name
     */
    routingTableName?: string;
    /**
     * Routing Table Type
     */
    routingTableType?: string;
    /**
     * Service Zone ID
     */
    serviceZoneId?: string;
    /**
     * t1 Router ID
     */
    t1RouterId?: string;
}

export interface GetDirectConnectRoutingTablesContentArgs {
    /**
     * DirectConnect Connention Id
     */
    directConnectConnectionId?: pulumi.Input<string>;
    /**
     * Routing Rule Count
     */
    routingRuleCount?: pulumi.Input<number>;
    /**
     * Routing Table ID
     */
    routingTableId?: pulumi.Input<string>;
    /**
     * Routing Table name
     */
    routingTableName?: pulumi.Input<string>;
    /**
     * Routing Table Type
     */
    routingTableType?: pulumi.Input<string>;
    /**
     * Service Zone ID
     */
    serviceZoneId?: pulumi.Input<string>;
    /**
     * t1 Router ID
     */
    t1RouterId?: pulumi.Input<string>;
}

export interface GetDirectConnectsContent {
    /**
     * Bandwidth gbps
     */
    bandwidthGbps?: number;
    /**
     * The person who created the resource
     */
    createdBy?: string;
    /**
     * Creation date
     */
    createdDt?: string;
    /**
     * DirectConnect description
     */
    directConnectDescription?: string;
    /**
     * DirectConnect id
     */
    directConnectId?: string;
    /**
     * DirectConnect name
     */
    directConnectName?: string;
    /**
     * DirectConnect status
     */
    directConnectState?: string;
    /**
     * The person who modified the resource
     */
    modifiedBy?: string;
    /**
     * Modification date
     */
    modifiedDt?: string;
    /**
     * ProductGroup id
     */
    productGroupId?: string;
    /**
     * Project id
     */
    projectId?: string;
    /**
     * Service zone id
     */
    serviceZoneId?: string;
    /**
     * Uplink enabled
     */
    uplinkEnabled?: boolean;
}

export interface GetDirectConnectsContentArgs {
    /**
     * Bandwidth gbps
     */
    bandwidthGbps?: pulumi.Input<number>;
    /**
     * The person who created the resource
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Creation date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * DirectConnect description
     */
    directConnectDescription?: pulumi.Input<string>;
    /**
     * DirectConnect id
     */
    directConnectId?: pulumi.Input<string>;
    /**
     * DirectConnect name
     */
    directConnectName?: pulumi.Input<string>;
    /**
     * DirectConnect status
     */
    directConnectState?: pulumi.Input<string>;
    /**
     * The person who modified the resource
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modification date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * ProductGroup id
     */
    productGroupId?: pulumi.Input<string>;
    /**
     * Project id
     */
    projectId?: pulumi.Input<string>;
    /**
     * Service zone id
     */
    serviceZoneId?: pulumi.Input<string>;
    /**
     * Uplink enabled
     */
    uplinkEnabled?: pulumi.Input<boolean>;
}

export interface GetEndpointsContent {
    /**
     * The person who created the resource
     */
    createdBy?: string;
    /**
     * Creation date
     */
    createdDt?: string;
    /**
     * Endpoint id
     */
    endpointId?: string;
    /**
     * Endpoint ip address
     */
    endpointIpAddress?: string;
    /**
     * Endpoint name
     */
    endpointName?: string;
    /**
     * Endpoint status
     */
    endpointState?: string;
    /**
     * Endpoint type
     */
    endpointType?: string;
    /**
     * The person who modified the resource
     */
    modifiedBy?: string;
    /**
     * Modification date
     */
    modifiedDt?: string;
    /**
     * Object id
     */
    objectId?: string;
    /**
     * Project id
     */
    projectId?: string;
    /**
     * Service zone id
     */
    serviceZoneId?: string;
    /**
     * VPC id
     */
    vpcId?: string;
}

export interface GetEndpointsContentArgs {
    /**
     * The person who created the resource
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Creation date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * Endpoint id
     */
    endpointId?: pulumi.Input<string>;
    /**
     * Endpoint ip address
     */
    endpointIpAddress?: pulumi.Input<string>;
    /**
     * Endpoint name
     */
    endpointName?: pulumi.Input<string>;
    /**
     * Endpoint status
     */
    endpointState?: pulumi.Input<string>;
    /**
     * Endpoint type
     */
    endpointType?: pulumi.Input<string>;
    /**
     * The person who modified the resource
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modification date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * Object id
     */
    objectId?: pulumi.Input<string>;
    /**
     * Project id
     */
    projectId?: pulumi.Input<string>;
    /**
     * Service zone id
     */
    serviceZoneId?: pulumi.Input<string>;
    /**
     * VPC id
     */
    vpcId?: pulumi.Input<string>;
}

export interface GetEpassContent {
    /**
     * Block ID.
     */
    blockId?: string;
    /**
     * The person who created the resource
     */
    createdBy?: string;
    /**
     * Creation date
     */
    createdDt?: string;
    /**
     * EPAS Cluster ID
     */
    epasClusterId?: string;
    /**
     * EPAS Cluster Name
     */
    epasClusterName?: string;
    /**
     * EPAS Cluster State
     */
    epasClusterState?: string;
    /**
     * The person who modified the resource
     */
    modifiedBy?: string;
    /**
     * Modification date
     */
    modifiedDt?: string;
    /**
     * Project ID.
     */
    projectId?: string;
    /**
     * Service Zone ID
     */
    serviceZoneId?: string;
}

export interface GetEpassContentArgs {
    /**
     * Block ID.
     */
    blockId?: pulumi.Input<string>;
    /**
     * The person who created the resource
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Creation date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * EPAS Cluster ID
     */
    epasClusterId?: pulumi.Input<string>;
    /**
     * EPAS Cluster Name
     */
    epasClusterName?: pulumi.Input<string>;
    /**
     * EPAS Cluster State
     */
    epasClusterState?: pulumi.Input<string>;
    /**
     * The person who modified the resource
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modification date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * Project ID.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Service Zone ID
     */
    serviceZoneId?: pulumi.Input<string>;
}

export interface GetFirewallFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetFirewallFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetFirewallsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetFirewallsFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetFirewallsFirewall {
    /**
     * Firewall id
     */
    id?: string;
    /**
     * Name of firewall
     */
    name?: string;
    /**
     * Firewall status
     */
    state?: string;
    /**
     * Target firewall resource id
     */
    targetId?: string;
    /**
     * Target firewall resource type
     */
    targetType?: string;
    /**
     * VPC id
     */
    vpcId?: string;
}

export interface GetFirewallsFirewallArgs {
    /**
     * Firewall id
     */
    id?: pulumi.Input<string>;
    /**
     * Name of firewall
     */
    name?: pulumi.Input<string>;
    /**
     * Firewall status
     */
    state?: pulumi.Input<string>;
    /**
     * Target firewall resource id
     */
    targetId?: pulumi.Input<string>;
    /**
     * Target firewall resource type
     */
    targetType?: pulumi.Input<string>;
    /**
     * VPC id
     */
    vpcId?: pulumi.Input<string>;
}

export interface GetIamAccessKeysFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetIamAccessKeysFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetIamGroupMembersFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetIamGroupMembersFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetIamGroupPoliciesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetIamGroupPoliciesFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetIamGroupsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetIamGroupsFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetIamMemberGroupsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetIamMemberGroupsFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetIamMemberSystemgroupsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetIamMemberSystemgroupsFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetIamMembersFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetIamMembersFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetIamPoliciesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetIamPoliciesFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetIamPolicyGroupsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetIamPolicyGroupsFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetIamPolicyRolesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetIamPolicyRolesFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetIamRolePoliciesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetIamRolePoliciesFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetIamRolesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetIamRolesFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetInternetGatewaysContent {
    /**
     * The person who created the resource
     */
    createdBy?: string;
    /**
     * Creation date
     */
    createdDt?: string;
    /**
     * InternetGateway description
     */
    internetGatewayDescription?: string;
    /**
     * InternetGateway id
     */
    internetGatewayId?: string;
    /**
     * InternetGateway name
     */
    internetGatewayName?: string;
    /**
     * InternetGateway status
     */
    internetGatewayState?: string;
    /**
     * The person who modified the resource
     */
    modifiedBy?: string;
    /**
     * Modification date
     */
    modifiedDt?: string;
    /**
     * Project id
     */
    projectId?: string;
    /**
     * Service zone id
     */
    serviceZoneId?: string;
    /**
     * VPC id
     */
    vpcId?: string;
}

export interface GetInternetGatewaysContentArgs {
    /**
     * The person who created the resource
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Creation date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * InternetGateway description
     */
    internetGatewayDescription?: pulumi.Input<string>;
    /**
     * InternetGateway id
     */
    internetGatewayId?: pulumi.Input<string>;
    /**
     * InternetGateway name
     */
    internetGatewayName?: pulumi.Input<string>;
    /**
     * InternetGateway status
     */
    internetGatewayState?: pulumi.Input<string>;
    /**
     * The person who modified the resource
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modification date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * Project id
     */
    projectId?: pulumi.Input<string>;
    /**
     * Service zone id
     */
    serviceZoneId?: pulumi.Input<string>;
    /**
     * VPC id
     */
    vpcId?: pulumi.Input<string>;
}

export interface GetKeyPairsContent {
    /**
     * Person who created the resource
     */
    createdBy?: string;
    /**
     * Creation time
     */
    createdDt?: string;
    /**
     * Key Pair Id
     */
    keyPairId?: string;
    /**
     * Key Pair Name
     */
    keyPairName?: string;
    /**
     * Key Pair State
     */
    keyPairState?: string;
    /**
     * Launch Configuration Id List
     */
    launchConfigurationIdLists?: string[];
    /**
     * Person who modified the resource
     */
    modifiedBy?: string;
    /**
     * Modification time
     */
    modifiedDt?: string;
    /**
     * Project id
     */
    projectId?: string;
    /**
     * Virtual Server Id List
     */
    virtualServerIdLists?: string[];
}

export interface GetKeyPairsContentArgs {
    /**
     * Person who created the resource
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Creation time
     */
    createdDt?: pulumi.Input<string>;
    /**
     * Key Pair Id
     */
    keyPairId?: pulumi.Input<string>;
    /**
     * Key Pair Name
     */
    keyPairName?: pulumi.Input<string>;
    /**
     * Key Pair State
     */
    keyPairState?: pulumi.Input<string>;
    /**
     * Launch Configuration Id List
     */
    launchConfigurationIdLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Person who modified the resource
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modification time
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * Project id
     */
    projectId?: pulumi.Input<string>;
    /**
     * Virtual Server Id List
     */
    virtualServerIdLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetKubernetesAppsImageFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetKubernetesAppsImageFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetKubernetesAppsImagesContent {
    /**
     * Base image of Apps
     */
    baseImage?: string;
    /**
     * App image category
     */
    category?: string;
    /**
     * The person who created the resource
     */
    createdBy?: string;
    /**
     * Creation time
     */
    createdDt?: string;
    /**
     * Description
     */
    description?: string;
    /**
     * Icon file encoded in base64
     */
    iconFile?: string;
    /**
     * Icon file name
     */
    iconFileName?: string;
    /**
     * App image attributes
     */
    imageAttr?: {[key: string]: string};
    /**
     * App image id
     */
    imageId?: string;
    /**
     * App image name
     */
    imageName?: string;
    /**
     * The person who modified the resource
     */
    modifiedBy?: string;
    /**
     * Modification time
     */
    modifiedDt?: string;
    /**
     * Block id of this region
     */
    poolId?: string;
    /**
     * Product group attributes
     */
    productGroupAttr?: {[key: string]: string};
    /**
     * Product group id
     */
    productGroupId?: string;
    /**
     * Product group name
     */
    productGroupName?: string;
    /**
     * Project id
     */
    projectId?: string;
    /**
     * Service zone id
     */
    zoneId?: string;
}

export interface GetKubernetesAppsImagesContentArgs {
    /**
     * Base image of Apps
     */
    baseImage?: pulumi.Input<string>;
    /**
     * App image category
     */
    category?: pulumi.Input<string>;
    /**
     * The person who created the resource
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Creation time
     */
    createdDt?: pulumi.Input<string>;
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * Icon file encoded in base64
     */
    iconFile?: pulumi.Input<string>;
    /**
     * Icon file name
     */
    iconFileName?: pulumi.Input<string>;
    /**
     * App image attributes
     */
    imageAttr?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * App image id
     */
    imageId?: pulumi.Input<string>;
    /**
     * App image name
     */
    imageName?: pulumi.Input<string>;
    /**
     * The person who modified the resource
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modification time
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * Block id of this region
     */
    poolId?: pulumi.Input<string>;
    /**
     * Product group attributes
     */
    productGroupAttr?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Product group id
     */
    productGroupId?: pulumi.Input<string>;
    /**
     * Product group name
     */
    productGroupName?: pulumi.Input<string>;
    /**
     * Project id
     */
    projectId?: pulumi.Input<string>;
    /**
     * Service zone id
     */
    zoneId?: pulumi.Input<string>;
}

export interface GetKubernetesEngineVersionsContent {
    /**
     * K8s version
     */
    k8sVersion?: string;
    /**
     * Project id
     */
    projectId?: string;
}

export interface GetKubernetesEngineVersionsContentArgs {
    /**
     * K8s version
     */
    k8sVersion?: pulumi.Input<string>;
    /**
     * Project id
     */
    projectId?: pulumi.Input<string>;
}

export interface GetKubernetesEnginesContent {
    /**
     * The person who created the resource
     */
    createdBy?: string;
    /**
     * Creation time
     */
    createdDt?: string;
    /**
     * K8s version
     */
    k8sVersion?: string;
    /**
     * K8s engine id
     */
    kubernetesEngineId?: string;
    /**
     * K8s engine name
     */
    kubernetesEngineName?: string;
    /**
     * K8s engine status
     */
    kubernetesEngineStatus?: string;
    /**
     * The person who modified the resource
     */
    modifiedBy?: string;
    /**
     * Modification time
     */
    modifiedDt?: string;
    /**
     * K8s node count
     */
    nodeCount?: number;
    /**
     * Project id
     */
    projectId?: string;
    /**
     * Region name
     */
    region?: string;
    /**
     * Security group id
     */
    securityGroupId?: string;
    /**
     * Subnet id
     */
    subnetId?: string;
    /**
     * File storage volume id
     */
    volumeId?: string;
    /**
     * Vpc id
     */
    vpcId?: string;
}

export interface GetKubernetesEnginesContentArgs {
    /**
     * The person who created the resource
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Creation time
     */
    createdDt?: pulumi.Input<string>;
    /**
     * K8s version
     */
    k8sVersion?: pulumi.Input<string>;
    /**
     * K8s engine id
     */
    kubernetesEngineId?: pulumi.Input<string>;
    /**
     * K8s engine name
     */
    kubernetesEngineName?: pulumi.Input<string>;
    /**
     * K8s engine status
     */
    kubernetesEngineStatus?: pulumi.Input<string>;
    /**
     * The person who modified the resource
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modification time
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * K8s node count
     */
    nodeCount?: pulumi.Input<number>;
    /**
     * Project id
     */
    projectId?: pulumi.Input<string>;
    /**
     * Region name
     */
    region?: pulumi.Input<string>;
    /**
     * Security group id
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * Subnet id
     */
    subnetId?: pulumi.Input<string>;
    /**
     * File storage volume id
     */
    volumeId?: pulumi.Input<string>;
    /**
     * Vpc id
     */
    vpcId?: pulumi.Input<string>;
}

export interface GetKubernetesNodePoolsContent {
    /**
     * Enable auto recovery
     */
    autoRecovery?: boolean;
    /**
     * Enable auto scale
     */
    autoScale?: boolean;
    /**
     * Contract id
     */
    contractId?: string;
    /**
     * The person who created the resource
     */
    createdBy?: string;
    /**
     * Creation Date
     */
    createdDt?: string;
    /**
     * Current node count in the pool
     */
    currentNodeCount?: number;
    /**
     * Desired node count in the pool
     */
    desiredNodeCount?: number;
    /**
     * Image id
     */
    imageId?: string;
    /**
     * Check inProgress status
     */
    inProgress?: boolean;
    /**
     * K8s version
     */
    k8sVersion?: string;
    /**
     * Maximum node count
     */
    maxNodeCount?: number;
    /**
     * Minimum node count
     */
    minNodeCount?: number;
    /**
     * The person who modified the resource
     */
    modifiedBy?: string;
    /**
     * Modification Date
     */
    modifiedDt?: string;
    /**
     * NodePool id
     */
    nodePoolId?: string;
    /**
     * NodePool name
     */
    nodePoolName?: string;
    /**
     * NodePool status
     */
    nodePoolState?: string;
    /**
     * Host OS type (Ubuntu, Window,..)
     */
    osType?: string;
    /**
     * Product group id
     */
    productGroupId?: string;
    /**
     * Project id
     */
    projectId?: string;
    /**
     * Modification Date
     */
    region?: string;
    /**
     * Scale id
     */
    scaleId?: string;
    /**
     * Service level id
     */
    serviceLevelId?: string;
    /**
     * Storage id
     */
    storageId?: string;
    /**
     * Storage size in GB
     */
    storageSize?: string;
    /**
     * Where to enable upgrade
     */
    upgradable?: boolean;
}

export interface GetKubernetesNodePoolsContentArgs {
    /**
     * Enable auto recovery
     */
    autoRecovery?: pulumi.Input<boolean>;
    /**
     * Enable auto scale
     */
    autoScale?: pulumi.Input<boolean>;
    /**
     * Contract id
     */
    contractId?: pulumi.Input<string>;
    /**
     * The person who created the resource
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Creation Date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * Current node count in the pool
     */
    currentNodeCount?: pulumi.Input<number>;
    /**
     * Desired node count in the pool
     */
    desiredNodeCount?: pulumi.Input<number>;
    /**
     * Image id
     */
    imageId?: pulumi.Input<string>;
    /**
     * Check inProgress status
     */
    inProgress?: pulumi.Input<boolean>;
    /**
     * K8s version
     */
    k8sVersion?: pulumi.Input<string>;
    /**
     * Maximum node count
     */
    maxNodeCount?: pulumi.Input<number>;
    /**
     * Minimum node count
     */
    minNodeCount?: pulumi.Input<number>;
    /**
     * The person who modified the resource
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modification Date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * NodePool id
     */
    nodePoolId?: pulumi.Input<string>;
    /**
     * NodePool name
     */
    nodePoolName?: pulumi.Input<string>;
    /**
     * NodePool status
     */
    nodePoolState?: pulumi.Input<string>;
    /**
     * Host OS type (Ubuntu, Window,..)
     */
    osType?: pulumi.Input<string>;
    /**
     * Product group id
     */
    productGroupId?: pulumi.Input<string>;
    /**
     * Project id
     */
    projectId?: pulumi.Input<string>;
    /**
     * Modification Date
     */
    region?: pulumi.Input<string>;
    /**
     * Scale id
     */
    scaleId?: pulumi.Input<string>;
    /**
     * Service level id
     */
    serviceLevelId?: pulumi.Input<string>;
    /**
     * Storage id
     */
    storageId?: pulumi.Input<string>;
    /**
     * Storage size in GB
     */
    storageSize?: pulumi.Input<string>;
    /**
     * Where to enable upgrade
     */
    upgradable?: pulumi.Input<boolean>;
}

export interface GetLaunchConfigurationsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetLaunchConfigurationsFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetLbServerGroupsContent {
    /**
     * Block Id
     */
    blockId?: string;
    /**
     * The person who created the resource
     */
    createdBy?: string;
    /**
     * Creation Date
     */
    createdDt?: string;
    /**
     * Load balancer server group id
     */
    lbServerGroupId?: string;
    /**
     * Load balancer server group name
     */
    lbServerGroupName?: string;
    /**
     * Load balancer server status
     */
    lbServerGroupState?: string;
    /**
     * Load balancer server group type
     */
    lbServerGroupType?: string;
    /**
     * Load balancer id
     */
    loadBalancerId?: string;
    /**
     * Load balancer name
     */
    loadBalancerName?: string;
    /**
     * Load balancer status
     */
    loadBalancerState?: string;
    /**
     * The person who modified the resource
     */
    modifiedBy?: string;
    /**
     * Modification Date
     */
    modifiedDt?: string;
    /**
     * Persistence
     */
    persistence?: string;
    /**
     * Project Id
     */
    projectId?: string;
    /**
     * Service zone id
     */
    serviceZoneId?: string;
}

export interface GetLbServerGroupsContentArgs {
    /**
     * Block Id
     */
    blockId?: pulumi.Input<string>;
    /**
     * The person who created the resource
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Creation Date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * Load balancer server group id
     */
    lbServerGroupId?: pulumi.Input<string>;
    /**
     * Load balancer server group name
     */
    lbServerGroupName?: pulumi.Input<string>;
    /**
     * Load balancer server status
     */
    lbServerGroupState?: pulumi.Input<string>;
    /**
     * Load balancer server group type
     */
    lbServerGroupType?: pulumi.Input<string>;
    /**
     * Load balancer id
     */
    loadBalancerId?: pulumi.Input<string>;
    /**
     * Load balancer name
     */
    loadBalancerName?: pulumi.Input<string>;
    /**
     * Load balancer status
     */
    loadBalancerState?: pulumi.Input<string>;
    /**
     * The person who modified the resource
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modification Date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * Persistence
     */
    persistence?: pulumi.Input<string>;
    /**
     * Project Id
     */
    projectId?: pulumi.Input<string>;
    /**
     * Service zone id
     */
    serviceZoneId?: pulumi.Input<string>;
}

export interface GetLbServiceIpsContent {
    /**
     * Id of load balancer service ip
     */
    lbServiceIpId?: string;
    /**
     * Status of load balancer service
     */
    lbServiceIpState?: string;
    /**
     * Nat ip address
     */
    natIpAddress?: string;
    /**
     * Nat ip id
     */
    natIpId?: string;
    /**
     * Service ip address
     */
    serviceIpAddress?: string;
    /**
     * Service ip cidr
     */
    serviceIpCidr?: string;
    /**
     * Service ip id
     */
    serviceIpId?: string;
    /**
     * pool id of service ip
     */
    serviceIpPoolId?: string;
}

export interface GetLbServiceIpsContentArgs {
    /**
     * Id of load balancer service ip
     */
    lbServiceIpId?: pulumi.Input<string>;
    /**
     * Status of load balancer service
     */
    lbServiceIpState?: pulumi.Input<string>;
    /**
     * Nat ip address
     */
    natIpAddress?: pulumi.Input<string>;
    /**
     * Nat ip id
     */
    natIpId?: pulumi.Input<string>;
    /**
     * Service ip address
     */
    serviceIpAddress?: pulumi.Input<string>;
    /**
     * Service ip cidr
     */
    serviceIpCidr?: pulumi.Input<string>;
    /**
     * Service ip id
     */
    serviceIpId?: pulumi.Input<string>;
    /**
     * pool id of service ip
     */
    serviceIpPoolId?: pulumi.Input<string>;
}

export interface GetLoadBalancersContent {
    /**
     * Block id
     */
    blockId?: string;
    /**
     * The person who created the resource
     */
    createdBy?: string;
    /**
     * Creation date
     */
    createdDt?: string;
    /**
     * Load balancer id
     */
    loadBalancerId?: string;
    /**
     * Load balancer name
     */
    loadBalancerName?: string;
    /**
     * Size of load balancer to be created (SMALL,MEDIUM,LARGE)
     */
    loadBalancerSize?: string;
    /**
     * Load balancer status
     */
    loadBalancerState?: string;
    /**
     * The person who modified the resource
     */
    modifiedBy?: string;
    /**
     * Modification date
     */
    modifiedDt?: string;
    /**
     * Project id
     */
    projectId?: string;
    /**
     * Service zone id
     */
    serviceZoneId?: string;
    /**
     * Vpc id
     */
    vpcId?: string;
}

export interface GetLoadBalancersContentArgs {
    /**
     * Block id
     */
    blockId?: pulumi.Input<string>;
    /**
     * The person who created the resource
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Creation date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * Load balancer id
     */
    loadBalancerId?: pulumi.Input<string>;
    /**
     * Load balancer name
     */
    loadBalancerName?: pulumi.Input<string>;
    /**
     * Size of load balancer to be created (SMALL,MEDIUM,LARGE)
     */
    loadBalancerSize?: pulumi.Input<string>;
    /**
     * Load balancer status
     */
    loadBalancerState?: pulumi.Input<string>;
    /**
     * The person who modified the resource
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modification date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * Project id
     */
    projectId?: pulumi.Input<string>;
    /**
     * Service zone id
     */
    serviceZoneId?: pulumi.Input<string>;
    /**
     * Vpc id
     */
    vpcId?: pulumi.Input<string>;
}

export interface GetLoggingauditUsersFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetLoggingauditUsersFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetLoggingauditsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetLoggingauditsFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetMariadbsContent {
    /**
     * Block ID.
     */
    blockId?: string;
    /**
     * The person who created the resource
     */
    createdBy?: string;
    /**
     * Creation date
     */
    createdDt?: string;
    /**
     * Mariadb Cluster ID
     */
    mariadbClusterId?: string;
    /**
     * Mariadb Cluster Name
     */
    mariadbClusterName?: string;
    /**
     * Mariadb Cluster State
     */
    mariadbClusterState?: string;
    /**
     * The person who modified the resource
     */
    modifiedBy?: string;
    /**
     * Modification date
     */
    modifiedDt?: string;
    /**
     * Project ID.
     */
    projectId?: string;
    /**
     * Service Zone ID
     */
    serviceZoneId?: string;
}

export interface GetMariadbsContentArgs {
    /**
     * Block ID.
     */
    blockId?: pulumi.Input<string>;
    /**
     * The person who created the resource
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Creation date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * Mariadb Cluster ID
     */
    mariadbClusterId?: pulumi.Input<string>;
    /**
     * Mariadb Cluster Name
     */
    mariadbClusterName?: pulumi.Input<string>;
    /**
     * Mariadb Cluster State
     */
    mariadbClusterState?: pulumi.Input<string>;
    /**
     * The person who modified the resource
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modification date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * Project ID.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Service Zone ID
     */
    serviceZoneId?: pulumi.Input<string>;
}

export interface GetMigrationImagesContent {
    availabilityZoneName?: string;
    baseImage?: string;
    blockId?: string;
    category?: string;
    createdBy?: string;
    createdDt?: string;
    defaultDiskSize?: number;
    /**
     * Extra disk size.
     */
    diskSize?: number;
    disks?: inputs.GetMigrationImagesContentDisk[];
    icon?: {[key: string]: string};
    /**
     * Migration image description. (Up to 50 characters)
     */
    imageDescription?: string;
    imageId: string;
    imageName?: string;
    /**
     * Image state (ACTIVE)
     */
    imageState?: string;
    imageType?: string;
    modifiedBy?: string;
    modifiedDt?: string;
    originImageId?: string;
    originImageName?: string;
    originVirtualServerId?: string;
    /**
     * OS type (Windows, Ubuntu, ..)
     */
    osType?: string;
    productGroupId?: string;
    products?: inputs.GetMigrationImagesContentProduct[];
    projectId?: string;
    properties?: {[key: string]: string};
    serviceZoneId: string;
}

export interface GetMigrationImagesContentArgs {
    availabilityZoneName?: pulumi.Input<string>;
    baseImage?: pulumi.Input<string>;
    blockId?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    createdDt?: pulumi.Input<string>;
    defaultDiskSize?: pulumi.Input<number>;
    /**
     * Extra disk size.
     */
    diskSize?: pulumi.Input<number>;
    disks?: pulumi.Input<pulumi.Input<inputs.GetMigrationImagesContentDiskArgs>[]>;
    icon?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Migration image description. (Up to 50 characters)
     */
    imageDescription?: pulumi.Input<string>;
    imageId: pulumi.Input<string>;
    imageName?: pulumi.Input<string>;
    /**
     * Image state (ACTIVE)
     */
    imageState?: pulumi.Input<string>;
    imageType?: pulumi.Input<string>;
    modifiedBy?: pulumi.Input<string>;
    modifiedDt?: pulumi.Input<string>;
    originImageId?: pulumi.Input<string>;
    originImageName?: pulumi.Input<string>;
    originVirtualServerId?: pulumi.Input<string>;
    /**
     * OS type (Windows, Ubuntu, ..)
     */
    osType?: pulumi.Input<string>;
    productGroupId?: pulumi.Input<string>;
    products?: pulumi.Input<pulumi.Input<inputs.GetMigrationImagesContentProductArgs>[]>;
    projectId?: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    serviceZoneId: pulumi.Input<string>;
}

export interface GetMigrationImagesContentDisk {
    bootEnabled: boolean;
    createdBy: string;
    createdDt: string;
    deviceNode: string;
    diskSize: number;
    encryptEnabled: boolean;
    imageId: string;
    modifiedBy: string;
    modifiedDt: string;
    productId: string;
    seq: number;
}

export interface GetMigrationImagesContentDiskArgs {
    bootEnabled: pulumi.Input<boolean>;
    createdBy: pulumi.Input<string>;
    createdDt: pulumi.Input<string>;
    deviceNode: pulumi.Input<string>;
    diskSize: pulumi.Input<number>;
    encryptEnabled: pulumi.Input<boolean>;
    imageId: pulumi.Input<string>;
    modifiedBy: pulumi.Input<string>;
    modifiedDt: pulumi.Input<string>;
    productId: pulumi.Input<string>;
    seq: pulumi.Input<number>;
}

export interface GetMigrationImagesContentProduct {
    createdDt: string;
    imageId: string;
    productId: string;
    productName: string;
    productType: string;
    productValue: string;
    seq: number;
}

export interface GetMigrationImagesContentProductArgs {
    createdDt: pulumi.Input<string>;
    imageId: pulumi.Input<string>;
    productId: pulumi.Input<string>;
    productName: pulumi.Input<string>;
    productType: pulumi.Input<string>;
    productValue: pulumi.Input<string>;
    seq: pulumi.Input<number>;
}

export interface GetMysqlsContent {
    /**
     * Block ID.
     */
    blockId?: string;
    /**
     * The person who created the resource
     */
    createdBy?: string;
    /**
     * Creation date
     */
    createdDt?: string;
    /**
     * The person who modified the resource
     */
    modifiedBy?: string;
    /**
     * Modification date
     */
    modifiedDt?: string;
    /**
     * Mysql Cluster ID
     */
    mysqlClusterId?: string;
    /**
     * Mysql Cluster Name
     */
    mysqlClusterName?: string;
    /**
     * Mysql Cluster State
     */
    mysqlClusterState?: string;
    /**
     * Project ID.
     */
    projectId?: string;
    /**
     * Service Zone ID
     */
    serviceZoneId?: string;
}

export interface GetMysqlsContentArgs {
    /**
     * Block ID.
     */
    blockId?: pulumi.Input<string>;
    /**
     * The person who created the resource
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Creation date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * The person who modified the resource
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modification date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * Mysql Cluster ID
     */
    mysqlClusterId?: pulumi.Input<string>;
    /**
     * Mysql Cluster Name
     */
    mysqlClusterName?: pulumi.Input<string>;
    /**
     * Mysql Cluster State
     */
    mysqlClusterState?: pulumi.Input<string>;
    /**
     * Project ID.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Service Zone ID
     */
    serviceZoneId?: pulumi.Input<string>;
}

export interface GetNatGatewaysContent {
    /**
     * The person who created the resource
     */
    createdBy?: string;
    /**
     * Creation date
     */
    createdDt?: string;
    /**
     * The person who modified the resource
     */
    modifiedBy?: string;
    /**
     * Modification date
     */
    modifiedDt?: string;
    /**
     * NatGateway id
     */
    natGatewayId?: string;
    /**
     * NatGateway Ip Id
     */
    natGatewayIpAddress?: string;
    /**
     * NatGateway name
     */
    natGatewayName?: string;
    /**
     * NatGateway status
     */
    natGatewayState?: string;
    /**
     * Project id
     */
    projectId?: string;
    /**
     * Service zone id
     */
    serviceZoneId?: string;
    /**
     * Subnet id
     */
    subnetId?: string;
    /**
     * VPC id
     */
    vpcId?: string;
}

export interface GetNatGatewaysContentArgs {
    /**
     * The person who created the resource
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Creation date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * The person who modified the resource
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modification date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * NatGateway id
     */
    natGatewayId?: pulumi.Input<string>;
    /**
     * NatGateway Ip Id
     */
    natGatewayIpAddress?: pulumi.Input<string>;
    /**
     * NatGateway name
     */
    natGatewayName?: pulumi.Input<string>;
    /**
     * NatGateway status
     */
    natGatewayState?: pulumi.Input<string>;
    /**
     * Project id
     */
    projectId?: pulumi.Input<string>;
    /**
     * Service zone id
     */
    serviceZoneId?: pulumi.Input<string>;
    /**
     * Subnet id
     */
    subnetId?: pulumi.Input<string>;
    /**
     * VPC id
     */
    vpcId?: pulumi.Input<string>;
}

export interface GetPlacementGroupsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetPlacementGroupsFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetPostgresqlsContent {
    /**
     * Block ID.
     */
    blockId?: string;
    /**
     * The person who created the resource
     */
    createdBy?: string;
    /**
     * Creation date
     */
    createdDt?: string;
    /**
     * The person who modified the resource
     */
    modifiedBy?: string;
    /**
     * Modification date
     */
    modifiedDt?: string;
    /**
     * PostgreSQL Cluster ID
     */
    postgresqlClusterId?: string;
    /**
     * PostgreSQL Cluster Name
     */
    postgresqlClusterName?: string;
    /**
     * PostgreSQL Cluster State
     */
    postgresqlClusterState?: string;
    /**
     * Project ID.
     */
    projectId?: string;
    /**
     * Service Zone ID
     */
    serviceZoneId?: string;
}

export interface GetPostgresqlsContentArgs {
    /**
     * Block ID.
     */
    blockId?: pulumi.Input<string>;
    /**
     * The person who created the resource
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Creation date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * The person who modified the resource
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modification date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * PostgreSQL Cluster ID
     */
    postgresqlClusterId?: pulumi.Input<string>;
    /**
     * PostgreSQL Cluster Name
     */
    postgresqlClusterName?: pulumi.Input<string>;
    /**
     * PostgreSQL Cluster State
     */
    postgresqlClusterState?: pulumi.Input<string>;
    /**
     * Project ID.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Service Zone ID
     */
    serviceZoneId?: pulumi.Input<string>;
}

export interface GetProductCategoriesContent {
    /**
     * Icon file name
     */
    iconFileName?: string;
    /**
     * Description of product category
     */
    productCategoryDescription?: string;
    /**
     * Product category id
     */
    productCategoryId?: string;
    /**
     * Product category name
     */
    productCategoryName?: string;
    /**
     * Product category path
     */
    productCategoryPath?: string;
    /**
     * Product category status
     */
    productCategoryState?: string;
    /**
     * Product set type (SE, PAAS)
     */
    productSet?: string;
}

export interface GetProductCategoriesContentArgs {
    /**
     * Icon file name
     */
    iconFileName?: pulumi.Input<string>;
    /**
     * Description of product category
     */
    productCategoryDescription?: pulumi.Input<string>;
    /**
     * Product category id
     */
    productCategoryId?: pulumi.Input<string>;
    /**
     * Product category name
     */
    productCategoryName?: pulumi.Input<string>;
    /**
     * Product category path
     */
    productCategoryPath?: pulumi.Input<string>;
    /**
     * Product category status
     */
    productCategoryState?: pulumi.Input<string>;
    /**
     * Product set type (SE, PAAS)
     */
    productSet?: pulumi.Input<string>;
}

export interface GetProductCategoriesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetProductCategoriesFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetProjectProductResourcesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetProjectProductResourcesFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetProjectProductsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetProjectProductsFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetProjectUserProductsResourcesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetProjectUserProductsResourcesFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetProjectZonesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetProjectZonesFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetPublicIpsContent {
    /**
     * Name of object with public ip
     */
    attachedObjectName?: string;
    /**
     * The person who created the resource
     */
    createdBy?: string;
    /**
     * Creation time
     */
    createdDt?: string;
    /**
     * Ip address
     */
    ipAddress?: string;
    /**
     * Id of ip address
     */
    ipAddressId?: string;
    /**
     * The person who modified the resource
     */
    modifiedBy?: string;
    /**
     * Modification time
     */
    modifiedDt?: string;
    /**
     * Product group id
     */
    productGroupId?: string;
    /**
     * Project id
     */
    projectId?: string;
    /**
     * Description of public ip address
     */
    publicIpAddressDescription?: string;
    /**
     * Id of Public ip address
     */
    publicIpAddressId?: string;
    /**
     * Purpose of public ip (NAT)
     */
    publicIpPurpose?: string;
    /**
     * Public ip status
     */
    publicIpState?: string;
    /**
     * Service zone id
     */
    serviceZoneId?: string;
    /**
     * Uplink type (INTERNET)
     */
    uplinkType?: string;
}

export interface GetPublicIpsContentArgs {
    /**
     * Name of object with public ip
     */
    attachedObjectName?: pulumi.Input<string>;
    /**
     * The person who created the resource
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Creation time
     */
    createdDt?: pulumi.Input<string>;
    /**
     * Ip address
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Id of ip address
     */
    ipAddressId?: pulumi.Input<string>;
    /**
     * The person who modified the resource
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modification time
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * Product group id
     */
    productGroupId?: pulumi.Input<string>;
    /**
     * Project id
     */
    projectId?: pulumi.Input<string>;
    /**
     * Description of public ip address
     */
    publicIpAddressDescription?: pulumi.Input<string>;
    /**
     * Id of Public ip address
     */
    publicIpAddressId?: pulumi.Input<string>;
    /**
     * Purpose of public ip (NAT)
     */
    publicIpPurpose?: pulumi.Input<string>;
    /**
     * Public ip status
     */
    publicIpState?: pulumi.Input<string>;
    /**
     * Service zone id
     */
    serviceZoneId?: pulumi.Input<string>;
    /**
     * Uplink type (INTERNET)
     */
    uplinkType?: pulumi.Input<string>;
}

export interface GetRedisClustersContent {
    /**
     * Block ID.
     */
    blockId?: string;
    /**
     * The person who created the resource
     */
    createdBy?: string;
    /**
     * Creation date
     */
    createdDt?: string;
    /**
     * The person who modified the resource
     */
    modifiedBy?: string;
    /**
     * Modification date
     */
    modifiedDt?: string;
    /**
     * Project ID.
     */
    projectId?: string;
    /**
     * Redis Cluster ID
     */
    redisId?: string;
    /**
     * Redis Cluster Name
     */
    redisName?: string;
    /**
     * Redis Cluster State
     */
    redisState?: string;
    /**
     * Service Zone ID
     */
    serviceZoneId?: string;
}

export interface GetRedisClustersContentArgs {
    /**
     * Block ID.
     */
    blockId?: pulumi.Input<string>;
    /**
     * The person who created the resource
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Creation date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * The person who modified the resource
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modification date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * Project ID.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Redis Cluster ID
     */
    redisId?: pulumi.Input<string>;
    /**
     * Redis Cluster Name
     */
    redisName?: pulumi.Input<string>;
    /**
     * Redis Cluster State
     */
    redisState?: pulumi.Input<string>;
    /**
     * Service Zone ID
     */
    serviceZoneId?: pulumi.Input<string>;
}

export interface GetRedisListContent {
    /**
     * Block ID.
     */
    blockId?: string;
    /**
     * The person who created the resource
     */
    createdBy?: string;
    /**
     * Creation date
     */
    createdDt?: string;
    /**
     * The person who modified the resource
     */
    modifiedBy?: string;
    /**
     * Modification date
     */
    modifiedDt?: string;
    /**
     * Project ID.
     */
    projectId?: string;
    /**
     * Redis ID
     */
    redisId?: string;
    /**
     * Redis Name
     */
    redisName?: string;
    /**
     * Redis State
     */
    redisState?: string;
    /**
     * Service Zone ID
     */
    serviceZoneId?: string;
}

export interface GetRedisListContentArgs {
    /**
     * Block ID.
     */
    blockId?: pulumi.Input<string>;
    /**
     * The person who created the resource
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Creation date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * The person who modified the resource
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modification date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * Project ID.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Redis ID
     */
    redisId?: pulumi.Input<string>;
    /**
     * Redis Name
     */
    redisName?: pulumi.Input<string>;
    /**
     * Redis State
     */
    redisState?: pulumi.Input<string>;
    /**
     * Service Zone ID
     */
    serviceZoneId?: pulumi.Input<string>;
}

export interface GetRegionFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetRegionFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetRegionsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetRegionsFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetRegionsRegion {
    /**
     * Block id of this region
     */
    blockId?: string;
    id?: string;
    /**
     * Location of this region
     */
    location?: string;
    /**
     * Name of this region
     */
    name?: string;
}

export interface GetRegionsRegionArgs {
    /**
     * Block id of this region
     */
    blockId?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    /**
     * Location of this region
     */
    location?: pulumi.Input<string>;
    /**
     * Name of this region
     */
    name?: pulumi.Input<string>;
}

export interface GetResourceTagsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetResourceTagsFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetResourcesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetResourcesFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetResourcesInMyProjectFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetResourcesInMyProjectFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetResourcesInMyProjectTag {
    /**
     * Tag key
     */
    tagKey: string;
    /**
     * Tag value
     */
    tagValue?: string;
}

export interface GetResourcesInMyProjectTagArgs {
    /**
     * Tag key
     */
    tagKey: pulumi.Input<string>;
    /**
     * Tag value
     */
    tagValue?: pulumi.Input<string>;
}

export interface GetResourcesTag {
    /**
     * Tag key
     */
    tagKey: string;
    /**
     * Tag value
     */
    tagValue?: string;
}

export interface GetResourcesTagArgs {
    /**
     * Tag key
     */
    tagKey: pulumi.Input<string>;
    /**
     * Tag value
     */
    tagValue?: pulumi.Input<string>;
}

export interface GetSecurityGroupLogStorageFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetSecurityGroupLogStorageFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetSecurityGroupLogStoragesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetSecurityGroupLogStoragesFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetSecurityGroupLogStoragesLogStorage {
    /**
     * creator
     */
    createdBy?: string;
    /**
     * created datetime
     */
    createdDt?: string;
    id?: string;
    /**
     * Log Storage ID
     */
    logStorageId?: string;
    /**
     * Log Storage Type
     */
    logStorageType?: string;
    /**
     * last modified user
     */
    modifiedBy?: string;
    /**
     * Resource modified datetime
     */
    modifiedDt?: string;
    /**
     * Bucket ID for saving logs
     */
    obsBucketId?: string;
    /**
     * Project ID
     */
    projectId?: string;
    /**
     * VPC ID
     */
    vpcId?: string;
}

export interface GetSecurityGroupLogStoragesLogStorageArgs {
    /**
     * creator
     */
    createdBy?: pulumi.Input<string>;
    /**
     * created datetime
     */
    createdDt?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    /**
     * Log Storage ID
     */
    logStorageId?: pulumi.Input<string>;
    /**
     * Log Storage Type
     */
    logStorageType?: pulumi.Input<string>;
    /**
     * last modified user
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Resource modified datetime
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * Bucket ID for saving logs
     */
    obsBucketId?: pulumi.Input<string>;
    /**
     * Project ID
     */
    projectId?: pulumi.Input<string>;
    /**
     * VPC ID
     */
    vpcId?: pulumi.Input<string>;
}

export interface GetSecurityGroupRulesContent {
    /**
     * List of ICMP Services
     */
    icmpServices?: string[];
    /**
     * Is all Service
     */
    isAllService?: boolean;
    /**
     * Rule action
     */
    ruleAction?: string;
    /**
     * Rule description
     */
    ruleDescription?: string;
    /**
     * Rule direction
     */
    ruleDirection?: string;
    /**
     * Rule ID
     */
    ruleId?: string;
    /**
     * Rule Owner ID
     */
    ruleOwnerId?: string;
    /**
     * Rule Owner type
     */
    ruleOwnerType?: string;
    /**
     * Rule state
     */
    ruleState?: string;
    /**
     * Target networks
     */
    targetNetworks?: string[];
    /**
     * List of TCP Services
     */
    tcpServices?: string[];
    /**
     * List of UDP Services
     */
    udpServices?: string[];
    /**
     * Vendor Object ID
     */
    vendorObjectId?: string;
    /**
     * Vendor Rule ID
     */
    vendorRuleId?: number;
}

export interface GetSecurityGroupRulesContentArgs {
    /**
     * List of ICMP Services
     */
    icmpServices?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Is all Service
     */
    isAllService?: pulumi.Input<boolean>;
    /**
     * Rule action
     */
    ruleAction?: pulumi.Input<string>;
    /**
     * Rule description
     */
    ruleDescription?: pulumi.Input<string>;
    /**
     * Rule direction
     */
    ruleDirection?: pulumi.Input<string>;
    /**
     * Rule ID
     */
    ruleId?: pulumi.Input<string>;
    /**
     * Rule Owner ID
     */
    ruleOwnerId?: pulumi.Input<string>;
    /**
     * Rule Owner type
     */
    ruleOwnerType?: pulumi.Input<string>;
    /**
     * Rule state
     */
    ruleState?: pulumi.Input<string>;
    /**
     * Target networks
     */
    targetNetworks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of TCP Services
     */
    tcpServices?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of UDP Services
     */
    udpServices?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Vendor Object ID
     */
    vendorObjectId?: pulumi.Input<string>;
    /**
     * Vendor Rule ID
     */
    vendorRuleId?: pulumi.Input<number>;
}

export interface GetSecurityGroupRulesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetSecurityGroupRulesFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetSecurityGroupUserIpsContent {
    /**
     * IP attach state
     */
    state?: string;
    /**
     * Address of Directly Attached IP
     */
    userIpAddress?: string;
    /**
     * Description of Directly Attached IP
     */
    userIpDescription?: string;
    /**
     * Type of Directly Attached IP
     */
    userIpType?: string;
}

export interface GetSecurityGroupUserIpsContentArgs {
    /**
     * IP attach state
     */
    state?: pulumi.Input<string>;
    /**
     * Address of Directly Attached IP
     */
    userIpAddress?: pulumi.Input<string>;
    /**
     * Description of Directly Attached IP
     */
    userIpDescription?: pulumi.Input<string>;
    /**
     * Type of Directly Attached IP
     */
    userIpType?: pulumi.Input<string>;
}

export interface GetSecurityGroupUserIpsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetSecurityGroupUserIpsFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetSecurityGroupsContent {
    /**
     * The number of Objects which is attached with Security Group
     */
    attachedObjectCount?: number;
    /**
     * Resource creator
     */
    createdBy?: string;
    /**
     * Resource created date
     */
    createdDt?: string;
    /**
     * Is loggable
     */
    isLoggable?: boolean;
    /**
     * Resource last modifier
     */
    modifiedBy?: string;
    /**
     * Resource last modified date
     */
    modifiedDt?: string;
    /**
     * The number of Rules
     */
    ruleCount?: number;
    /**
     * Security Group Scope of Use
     */
    scope?: string;
    /**
     * Security Group ID
     */
    securityGroupId?: string;
    /**
     * Security Group name
     */
    securityGroupName?: string;
    /**
     * Security Group state
     */
    securityGroupState?: string;
    /**
     * Zone ID of Resource
     */
    zoneId?: string;
}

export interface GetSecurityGroupsContentArgs {
    /**
     * The number of Objects which is attached with Security Group
     */
    attachedObjectCount?: pulumi.Input<number>;
    /**
     * Resource creator
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Resource created date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * Is loggable
     */
    isLoggable?: pulumi.Input<boolean>;
    /**
     * Resource last modifier
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Resource last modified date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * The number of Rules
     */
    ruleCount?: pulumi.Input<number>;
    /**
     * Security Group Scope of Use
     */
    scope?: pulumi.Input<string>;
    /**
     * Security Group ID
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * Security Group name
     */
    securityGroupName?: pulumi.Input<string>;
    /**
     * Security Group state
     */
    securityGroupState?: pulumi.Input<string>;
    /**
     * Zone ID of Resource
     */
    zoneId?: pulumi.Input<string>;
}

export interface GetSecurityGroupsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetSecurityGroupsFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetSqlserversContent {
    /**
     * Block ID.
     */
    blockId?: string;
    /**
     * The person who created the resource
     */
    createdBy?: string;
    /**
     * Creation date
     */
    createdDt?: string;
    /**
     * The person who modified the resource
     */
    modifiedBy?: string;
    /**
     * Modification date
     */
    modifiedDt?: string;
    /**
     * Project ID.
     */
    projectId?: string;
    /**
     * Service Zone ID
     */
    serviceZoneId?: string;
    /**
     * MS SQL Server Cluster ID
     */
    sqlserverClusterId?: string;
    /**
     * MS SQL Server Cluster Name
     */
    sqlserverClusterName?: string;
    /**
     * MS SQL Server Cluster State
     */
    sqlserverClusterState?: string;
}

export interface GetSqlserversContentArgs {
    /**
     * Block ID.
     */
    blockId?: pulumi.Input<string>;
    /**
     * The person who created the resource
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Creation date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * The person who modified the resource
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modification date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * Project ID.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Service Zone ID
     */
    serviceZoneId?: pulumi.Input<string>;
    /**
     * MS SQL Server Cluster ID
     */
    sqlserverClusterId?: pulumi.Input<string>;
    /**
     * MS SQL Server Cluster Name
     */
    sqlserverClusterName?: pulumi.Input<string>;
    /**
     * MS SQL Server Cluster State
     */
    sqlserverClusterState?: pulumi.Input<string>;
}

export interface GetStandardImageFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetStandardImageFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetStandardImagesFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetStandardImagesFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetStandardImagesStandardImage {
    /**
     * Base image for service
     */
    baseImage?: string;
    /**
     * Image category
     */
    category?: string;
    /**
     * Description
     */
    description?: string;
    id?: string;
    /**
     * Image name
     */
    imageName?: string;
    /**
     * Image type (STANDARD)
     */
    imageType?: string;
    /**
     * OS type (Windows, Ubuntu, ..)
     */
    osType?: string;
    /**
     * Region name
     */
    region?: string;
    /**
     * Service (Virtual Server, Kubernetes Engine VM, ...)
     */
    service?: string;
    /**
     * Service group (COMPUTE, CONTAINER, ...)
     */
    serviceGroup?: string;
}

export interface GetStandardImagesStandardImageArgs {
    /**
     * Base image for service
     */
    baseImage?: pulumi.Input<string>;
    /**
     * Image category
     */
    category?: pulumi.Input<string>;
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    /**
     * Image name
     */
    imageName?: pulumi.Input<string>;
    /**
     * Image type (STANDARD)
     */
    imageType?: pulumi.Input<string>;
    /**
     * OS type (Windows, Ubuntu, ..)
     */
    osType?: pulumi.Input<string>;
    /**
     * Region name
     */
    region?: pulumi.Input<string>;
    /**
     * Service (Virtual Server, Kubernetes Engine VM, ...)
     */
    service?: pulumi.Input<string>;
    /**
     * Service group (COMPUTE, CONTAINER, ...)
     */
    serviceGroup?: pulumi.Input<string>;
}

export interface GetSubnetAvailableIpsContent {
    /**
     * The person who created the resource
     */
    createdBy?: string;
    /**
     * Creation date
     */
    createdDt?: string;
    /**
     * Ip id
     */
    ipId?: string;
    /**
     * The person who modified the resource
     */
    modifiedBy?: string;
    /**
     * Modification date
     */
    modifiedDt?: string;
    /**
     * Subnet Ip address
     */
    subnetIpAddress?: string;
    /**
     * Description of Ip
     */
    vipDescription?: string;
    /**
     * Subnet Virtual Ip state
     */
    vipState?: string;
}

export interface GetSubnetAvailableIpsContentArgs {
    /**
     * The person who created the resource
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Creation date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * Ip id
     */
    ipId?: pulumi.Input<string>;
    /**
     * The person who modified the resource
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modification date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * Subnet Ip address
     */
    subnetIpAddress?: pulumi.Input<string>;
    /**
     * Description of Ip
     */
    vipDescription?: pulumi.Input<string>;
    /**
     * Subnet Virtual Ip state
     */
    vipState?: pulumi.Input<string>;
}

export interface GetSubnetResourcesContent {
    /**
     * The person who created the resource
     */
    createdBy?: string;
    /**
     * Creation date
     */
    createdDt?: string;
    /**
     * Ip address
     */
    ipAddress?: string;
    /**
     * Description of ip
     */
    ipDescription?: string;
    /**
     * ip id
     */
    ipId?: string;
    /**
     * Ip status
     */
    ipState?: string;
    /**
     * Id of object linked by subnet
     */
    linkedObjectId?: string;
    /**
     * Name of object linked by subnet
     */
    linkedObjectName?: string;
    /**
     * Type of object linked by subnet
     */
    linkedObjectType?: string;
    /**
     * The person who modified the resource
     */
    modifiedBy?: string;
    /**
     * Modification date
     */
    modifiedDt?: string;
}

export interface GetSubnetResourcesContentArgs {
    /**
     * The person who created the resource
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Creation date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * Ip address
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Description of ip
     */
    ipDescription?: pulumi.Input<string>;
    /**
     * ip id
     */
    ipId?: pulumi.Input<string>;
    /**
     * Ip status
     */
    ipState?: pulumi.Input<string>;
    /**
     * Id of object linked by subnet
     */
    linkedObjectId?: pulumi.Input<string>;
    /**
     * Name of object linked by subnet
     */
    linkedObjectName?: pulumi.Input<string>;
    /**
     * Type of object linked by subnet
     */
    linkedObjectType?: pulumi.Input<string>;
    /**
     * The person who modified the resource
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modification date
     */
    modifiedDt?: pulumi.Input<string>;
}

export interface GetSubnetVipsContent {
    /**
     * The person who created the resource
     */
    createdBy?: string;
    /**
     * Creation date
     */
    createdDt?: string;
    /**
     * The person who modified the resource
     */
    modifiedBy?: string;
    /**
     * Modification date
     */
    modifiedDt?: string;
    /**
     * Nat Ip address
     */
    natIpAddress?: string;
    /**
     * Nat Ip id
     */
    natIpId?: string;
    /**
     * Project id
     */
    projectId?: string;
    securityGroupIds?: inputs.GetSubnetVipsContentSecurityGroupId[];
    /**
     * Service zone id
     */
    serviceZoneId?: string;
    /**
     * Subnet Ip address
     */
    subnetIpAddress?: string;
    /**
     * Subnet Ip id
     */
    subnetIpId?: string;
    /**
     * Description of Ip
     */
    vipDescription?: string;
    /**
     * Subnet Virtual Ip id
     */
    vipId?: string;
    /**
     * Subnet Virtual Ip state
     */
    vipState?: string;
}

export interface GetSubnetVipsContentArgs {
    /**
     * The person who created the resource
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Creation date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * The person who modified the resource
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modification date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * Nat Ip address
     */
    natIpAddress?: pulumi.Input<string>;
    /**
     * Nat Ip id
     */
    natIpId?: pulumi.Input<string>;
    /**
     * Project id
     */
    projectId?: pulumi.Input<string>;
    securityGroupIds?: pulumi.Input<pulumi.Input<inputs.GetSubnetVipsContentSecurityGroupIdArgs>[]>;
    /**
     * Service zone id
     */
    serviceZoneId?: pulumi.Input<string>;
    /**
     * Subnet Ip address
     */
    subnetIpAddress?: pulumi.Input<string>;
    /**
     * Subnet Ip id
     */
    subnetIpId?: pulumi.Input<string>;
    /**
     * Description of Ip
     */
    vipDescription?: pulumi.Input<string>;
    /**
     * Subnet Virtual Ip id
     */
    vipId?: pulumi.Input<string>;
    /**
     * Subnet Virtual Ip state
     */
    vipState?: pulumi.Input<string>;
}

export interface GetSubnetVipsContentSecurityGroupId {
    securityGroupId: string;
    securityGroupMemberState: string;
}

export interface GetSubnetVipsContentSecurityGroupIdArgs {
    securityGroupId: pulumi.Input<string>;
    securityGroupMemberState: pulumi.Input<string>;
}

export interface GetSubnetsContent {
    /**
     * Creation date
     */
    createdDt?: string;
    /**
     * Ip address of gateway
     */
    gatewayIpAddress?: string;
    /**
     * Subnet CIDR block
     */
    subnetCidrBlock?: string;
    /**
     * Subnet id
     */
    subnetId?: string;
    /**
     * Subnet name
     */
    subnetName?: string;
    /**
     * Purpose of subnet (GENERAL)
     */
    subnetPurpose?: string;
    /**
     * Subnet status
     */
    subnetState?: string;
    /**
     * Subnet type (PUBLIC, PRIVATE)
     */
    subnetType?: string;
    /**
     * VPC id
     */
    vpcId?: string;
}

export interface GetSubnetsContentArgs {
    /**
     * Creation date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * Ip address of gateway
     */
    gatewayIpAddress?: pulumi.Input<string>;
    /**
     * Subnet CIDR block
     */
    subnetCidrBlock?: pulumi.Input<string>;
    /**
     * Subnet id
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Subnet name
     */
    subnetName?: pulumi.Input<string>;
    /**
     * Purpose of subnet (GENERAL)
     */
    subnetPurpose?: pulumi.Input<string>;
    /**
     * Subnet status
     */
    subnetState?: pulumi.Input<string>;
    /**
     * Subnet type (PUBLIC, PRIVATE)
     */
    subnetType?: pulumi.Input<string>;
    /**
     * VPC id
     */
    vpcId?: pulumi.Input<string>;
}

export interface GetTrailsFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetTrailsFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetTransitGatewayConnectionsContent {
    /**
     * Approver VPC's ProjectId
     */
    approverProjectId?: string;
    /**
     * Approver ProjectId
     */
    approverVpcId?: string;
    /**
     * User ID who create the resources
     */
    createdBy?: string;
    /**
     * Creation date
     */
    createdDt?: string;
    /**
     * User ID who modified the resources last
     */
    modifiedBy?: string;
    /**
     * Modification date
     */
    modifiedDt?: string;
    /**
     * ProjectId
     */
    projectId?: string;
    /**
     * Requester TGW's ProjectId
     */
    requesterProjectId?: string;
    /**
     * Requester TGW ID
     */
    requesterTransitGatewayId?: string;
    /**
     * Service Zone Id
     */
    serviceZoneId?: string;
    /**
     * TGW - VPC Connection Description
     */
    transitGatewayConnectionDescription?: string;
    /**
     * TGW - VPC Connection ID
     */
    transitGatewayConnectionId?: string;
    /**
     * TGW - VPC Connection Name
     */
    transitGatewayConnectionName?: string;
    /**
     * TGW - VPC Connection State
     */
    transitGatewayConnectionState?: string;
    /**
     * TGW - VPC Connection Type
     */
    transitGatewayConnectionType?: string;
}

export interface GetTransitGatewayConnectionsContentArgs {
    /**
     * Approver VPC's ProjectId
     */
    approverProjectId?: pulumi.Input<string>;
    /**
     * Approver ProjectId
     */
    approverVpcId?: pulumi.Input<string>;
    /**
     * User ID who create the resources
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Creation date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * User ID who modified the resources last
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modification date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * ProjectId
     */
    projectId?: pulumi.Input<string>;
    /**
     * Requester TGW's ProjectId
     */
    requesterProjectId?: pulumi.Input<string>;
    /**
     * Requester TGW ID
     */
    requesterTransitGatewayId?: pulumi.Input<string>;
    /**
     * Service Zone Id
     */
    serviceZoneId?: pulumi.Input<string>;
    /**
     * TGW - VPC Connection Description
     */
    transitGatewayConnectionDescription?: pulumi.Input<string>;
    /**
     * TGW - VPC Connection ID
     */
    transitGatewayConnectionId?: pulumi.Input<string>;
    /**
     * TGW - VPC Connection Name
     */
    transitGatewayConnectionName?: pulumi.Input<string>;
    /**
     * TGW - VPC Connection State
     */
    transitGatewayConnectionState?: pulumi.Input<string>;
    /**
     * TGW - VPC Connection Type
     */
    transitGatewayConnectionType?: pulumi.Input<string>;
}

export interface GetTransitGatewayRoutingRoutesContent {
    /**
     * Source Interface Id
     */
    sourceServiceInterfaceId?: string;
    /**
     * Source Interface Name
     */
    sourceServiceInterfaceName?: string;
}

export interface GetTransitGatewayRoutingRoutesContentArgs {
    /**
     * Source Interface Id
     */
    sourceServiceInterfaceId?: pulumi.Input<string>;
    /**
     * Source Interface Name
     */
    sourceServiceInterfaceName?: pulumi.Input<string>;
}

export interface GetTransitGatewayRoutingRulesContent {
    /**
     * Created By
     */
    createdBy?: string;
    /**
     * Created Date
     */
    createdDt?: string;
    /**
     * Destination Network Cidr
     */
    destinationNetworkCidr?: string;
    /**
     * is Editable
     */
    editable?: boolean;
    /**
     * Modified By
     */
    modifiedBy?: string;
    /**
     * Modified Date
     */
    modifiedDt?: string;
    /**
     * Project Id
     */
    projectId?: string;
    /**
     * Routing Rule Id
     */
    routingRuleId?: string;
    /**
     * Routing Rule State
     */
    routingRuleState?: string;
    /**
     * Source Interface Id
     */
    sourceServiceInterfaceId?: string;
    /**
     * Source Interface Name
     */
    sourceServiceInterfaceName?: string;
    /**
     * Source Transit Gateway Connection Id
     */
    sourceTransitGatewayConnectionId?: string;
}

export interface GetTransitGatewayRoutingRulesContentArgs {
    /**
     * Created By
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Created Date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * Destination Network Cidr
     */
    destinationNetworkCidr?: pulumi.Input<string>;
    /**
     * is Editable
     */
    editable?: pulumi.Input<boolean>;
    /**
     * Modified By
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modified Date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * Project Id
     */
    projectId?: pulumi.Input<string>;
    /**
     * Routing Rule Id
     */
    routingRuleId?: pulumi.Input<string>;
    /**
     * Routing Rule State
     */
    routingRuleState?: pulumi.Input<string>;
    /**
     * Source Interface Id
     */
    sourceServiceInterfaceId?: pulumi.Input<string>;
    /**
     * Source Interface Name
     */
    sourceServiceInterfaceName?: pulumi.Input<string>;
    /**
     * Source Transit Gateway Connection Id
     */
    sourceTransitGatewayConnectionId?: pulumi.Input<string>;
}

export interface GetTransitGatewayRoutingTablesContent {
    /**
     * Routing Rule Count
     */
    routingRuleCount?: number;
    /**
     * Routing Table ID
     */
    routingTableId?: string;
    /**
     * Routing Table name
     */
    routingTableName?: string;
    /**
     * Routing Table Type
     */
    routingTableType?: string;
    /**
     * Service Zone ID
     */
    serviceZoneId?: string;
    /**
     * t1 Router ID
     */
    t1RouterId?: string;
    /**
     * Transit Gateway Connection ID
     */
    transitGatewayConnectionId?: string;
}

export interface GetTransitGatewayRoutingTablesContentArgs {
    /**
     * Routing Rule Count
     */
    routingRuleCount?: pulumi.Input<number>;
    /**
     * Routing Table ID
     */
    routingTableId?: pulumi.Input<string>;
    /**
     * Routing Table name
     */
    routingTableName?: pulumi.Input<string>;
    /**
     * Routing Table Type
     */
    routingTableType?: pulumi.Input<string>;
    /**
     * Service Zone ID
     */
    serviceZoneId?: pulumi.Input<string>;
    /**
     * t1 Router ID
     */
    t1RouterId?: pulumi.Input<string>;
    /**
     * Transit Gateway Connection ID
     */
    transitGatewayConnectionId?: pulumi.Input<string>;
}

export interface GetTransitGatewaysContent {
    /**
     * BandwidthGbps
     */
    bandwidthGbps?: number;
    /**
     * User ID who create the resources
     */
    createdBy?: string;
    /**
     * Creation date
     */
    createdDt?: string;
    /**
     * User ID who modified the resources last
     */
    modifiedBy?: string;
    /**
     * Modification date
     */
    modifiedDt?: string;
    /**
     * Project id
     */
    projectId?: string;
    /**
     * Service zone id
     */
    serviceZoneId?: string;
    /**
     * TransitGateway Description
     */
    transitGatewayDescription?: string;
    /**
     * TransitGateway ID
     */
    transitGatewayId?: string;
    /**
     * TransitGateway Name
     */
    transitGatewayName?: string;
    /**
     * TransitGateway State
     */
    transitGatewayState?: string;
    /**
     * UplinkEnabled
     */
    uplinkEnabled?: boolean;
    /**
     * vpcCount
     */
    vpcCount?: number;
}

export interface GetTransitGatewaysContentArgs {
    /**
     * BandwidthGbps
     */
    bandwidthGbps?: pulumi.Input<number>;
    /**
     * User ID who create the resources
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Creation date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * User ID who modified the resources last
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modification date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * Project id
     */
    projectId?: pulumi.Input<string>;
    /**
     * Service zone id
     */
    serviceZoneId?: pulumi.Input<string>;
    /**
     * TransitGateway Description
     */
    transitGatewayDescription?: pulumi.Input<string>;
    /**
     * TransitGateway ID
     */
    transitGatewayId?: pulumi.Input<string>;
    /**
     * TransitGateway Name
     */
    transitGatewayName?: pulumi.Input<string>;
    /**
     * TransitGateway State
     */
    transitGatewayState?: pulumi.Input<string>;
    /**
     * UplinkEnabled
     */
    uplinkEnabled?: pulumi.Input<boolean>;
    /**
     * vpcCount
     */
    vpcCount?: pulumi.Input<number>;
}

export interface GetVirtualServersFilter {
    /**
     * Filtering target name
     */
    name: string;
    /**
     * Enable regex match for values
     */
    useRegex?: boolean;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: string[];
}

export interface GetVirtualServersFilterArgs {
    /**
     * Filtering target name
     */
    name: pulumi.Input<string>;
    /**
     * Enable regex match for values
     */
    useRegex?: pulumi.Input<boolean>;
    /**
     * Filtering values. Each matching value is appended. (OR rule)
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetVpcDnssContent {
    /**
     * Zone Domain
     */
    dnsUserZoneDomain?: string;
    /**
     * Zone Domain Id
     */
    dnsUserZoneId?: string;
    /**
     * Zone Name
     */
    dnsUserZoneName?: string;
    /**
     * Zone Dns IP
     */
    dnsUserZoneServerIp?: string;
    /**
     * Zone Source IP
     */
    dnsUserZoneSourceIp?: string;
    /**
     * Zone State
     */
    dnsUserZoneState?: string;
}

export interface GetVpcDnssContentArgs {
    /**
     * Zone Domain
     */
    dnsUserZoneDomain?: pulumi.Input<string>;
    /**
     * Zone Domain Id
     */
    dnsUserZoneId?: pulumi.Input<string>;
    /**
     * Zone Name
     */
    dnsUserZoneName?: pulumi.Input<string>;
    /**
     * Zone Dns IP
     */
    dnsUserZoneServerIp?: pulumi.Input<string>;
    /**
     * Zone Source IP
     */
    dnsUserZoneSourceIp?: pulumi.Input<string>;
    /**
     * Zone State
     */
    dnsUserZoneState?: pulumi.Input<string>;
}

export interface GetVpcPeeringsContent {
    /**
     * Approver Project Id
     */
    approverProjectId?: string;
    /**
     * Approver Vpc Id
     */
    approverVpcId?: string;
    /**
     * Is Automated
     */
    automated?: boolean;
    /**
     * Complated Date
     */
    completedDt?: string;
    /**
     * Created By
     */
    createdBy?: string;
    /**
     * Created Date
     */
    createdDt?: string;
    /**
     * Modified By
     */
    modifiedBy?: string;
    /**
     * Modified Date
     */
    modifiedDt?: string;
    /**
     * Requester Project Id
     */
    requesterProjectId?: string;
    /**
     * Requester Vpc Id
     */
    requesterVpcId?: string;
    /**
     * Vpc Peering Description
     */
    vpcPeeringDescription?: string;
    /**
     * Vpc Peering Id
     */
    vpcPeeringId?: string;
    /**
     * Vpc Peering Name
     */
    vpcPeeringName?: string;
    /**
     * Vpc Peering State
     */
    vpcPeeringState?: string;
    /**
     * Vpc Peering Type
     */
    vpcPeeringType?: string;
}

export interface GetVpcPeeringsContentArgs {
    /**
     * Approver Project Id
     */
    approverProjectId?: pulumi.Input<string>;
    /**
     * Approver Vpc Id
     */
    approverVpcId?: pulumi.Input<string>;
    /**
     * Is Automated
     */
    automated?: pulumi.Input<boolean>;
    /**
     * Complated Date
     */
    completedDt?: pulumi.Input<string>;
    /**
     * Created By
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Created Date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * Modified By
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modified Date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * Requester Project Id
     */
    requesterProjectId?: pulumi.Input<string>;
    /**
     * Requester Vpc Id
     */
    requesterVpcId?: pulumi.Input<string>;
    /**
     * Vpc Peering Description
     */
    vpcPeeringDescription?: pulumi.Input<string>;
    /**
     * Vpc Peering Id
     */
    vpcPeeringId?: pulumi.Input<string>;
    /**
     * Vpc Peering Name
     */
    vpcPeeringName?: pulumi.Input<string>;
    /**
     * Vpc Peering State
     */
    vpcPeeringState?: pulumi.Input<string>;
    /**
     * Vpc Peering Type
     */
    vpcPeeringType?: pulumi.Input<string>;
}

export interface GetVpcRoutingRoutesContent {
    /**
     * Source Interface Id
     */
    sourceServiceInterfaceId?: string;
    /**
     * Source Interface Name
     */
    sourceServiceInterfaceName?: string;
}

export interface GetVpcRoutingRoutesContentArgs {
    /**
     * Source Interface Id
     */
    sourceServiceInterfaceId?: pulumi.Input<string>;
    /**
     * Source Interface Name
     */
    sourceServiceInterfaceName?: pulumi.Input<string>;
}

export interface GetVpcRoutingRulesContent {
    /**
     * Block Id
     */
    blockId?: string;
    /**
     * Created By
     */
    createdBy?: string;
    /**
     * Created Date
     */
    createdDt?: string;
    /**
     * Destination Network Cidr
     */
    destinationNetworkCidr?: string;
    /**
     * is Editable
     */
    editable?: boolean;
    /**
     * Modified By
     */
    modifiedBy?: string;
    /**
     * Modified Date
     */
    modifiedDt?: string;
    /**
     * Project Id
     */
    projectId?: string;
    /**
     * Routing Rule Id
     */
    routingRuleId?: string;
    /**
     * Routing Rule State
     */
    routingRuleState?: string;
    /**
     * Service Zone Id
     */
    serviceZoneId?: string;
    /**
     * Source Interface Id
     */
    sourceServiceInterfaceId?: string;
    /**
     * Source Interface Name
     */
    sourceServiceInterfaceName?: string;
    /**
     * Source VPC Id
     */
    sourceVpcId?: string;
}

export interface GetVpcRoutingRulesContentArgs {
    /**
     * Block Id
     */
    blockId?: pulumi.Input<string>;
    /**
     * Created By
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Created Date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * Destination Network Cidr
     */
    destinationNetworkCidr?: pulumi.Input<string>;
    /**
     * is Editable
     */
    editable?: pulumi.Input<boolean>;
    /**
     * Modified By
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modified Date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * Project Id
     */
    projectId?: pulumi.Input<string>;
    /**
     * Routing Rule Id
     */
    routingRuleId?: pulumi.Input<string>;
    /**
     * Routing Rule State
     */
    routingRuleState?: pulumi.Input<string>;
    /**
     * Service Zone Id
     */
    serviceZoneId?: pulumi.Input<string>;
    /**
     * Source Interface Id
     */
    sourceServiceInterfaceId?: pulumi.Input<string>;
    /**
     * Source Interface Name
     */
    sourceServiceInterfaceName?: pulumi.Input<string>;
    /**
     * Source VPC Id
     */
    sourceVpcId?: pulumi.Input<string>;
}

export interface GetVpcRoutingTablesContent {
    /**
     * Routing Rule Count
     */
    routingRuleCount?: number;
    /**
     * Routing Table ID
     */
    routingTableId?: string;
    /**
     * Routing Table name
     */
    routingTableName?: string;
    /**
     * Routing Table Type
     */
    routingTableType?: string;
    /**
     * Service Zone ID
     */
    serviceZoneId?: string;
    /**
     * t1 Router ID
     */
    t1RouterId?: string;
    /**
     * VPC ID
     */
    vpcId?: string;
}

export interface GetVpcRoutingTablesContentArgs {
    /**
     * Routing Rule Count
     */
    routingRuleCount?: pulumi.Input<number>;
    /**
     * Routing Table ID
     */
    routingTableId?: pulumi.Input<string>;
    /**
     * Routing Table name
     */
    routingTableName?: pulumi.Input<string>;
    /**
     * Routing Table Type
     */
    routingTableType?: pulumi.Input<string>;
    /**
     * Service Zone ID
     */
    serviceZoneId?: pulumi.Input<string>;
    /**
     * t1 Router ID
     */
    t1RouterId?: pulumi.Input<string>;
    /**
     * VPC ID
     */
    vpcId?: pulumi.Input<string>;
}

export interface GetVpcsContent {
    /**
     * Block id
     */
    blockId?: string;
    /**
     * The person who created the resource
     */
    createdBy?: string;
    /**
     * Creation date
     */
    createdDt?: string;
    /**
     * The person who modified the resource
     */
    modifiedBy?: string;
    /**
     * Modification date
     */
    modifiedDt?: string;
    /**
     * Project id
     */
    projectId?: string;
    /**
     * Service zone id
     */
    serviceZoneId?: string;
    /**
     * VPC id
     */
    vpcId?: string;
    /**
     * VPC name
     */
    vpcName?: string;
    /**
     * VPC status
     */
    vpcState?: string;
}

export interface GetVpcsContentArgs {
    /**
     * Block id
     */
    blockId?: pulumi.Input<string>;
    /**
     * The person who created the resource
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Creation date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * The person who modified the resource
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modification date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * Project id
     */
    projectId?: pulumi.Input<string>;
    /**
     * Service zone id
     */
    serviceZoneId?: pulumi.Input<string>;
    /**
     * VPC id
     */
    vpcId?: pulumi.Input<string>;
    /**
     * VPC name
     */
    vpcName?: pulumi.Input<string>;
    /**
     * VPC status
     */
    vpcState?: pulumi.Input<string>;
}

export interface GslbGslbResource {
    /**
     * Gslb Resource Destination
     */
    gslbDestination: pulumi.Input<string>;
    /**
     * Gslb Resource Region
     */
    gslbRegion: pulumi.Input<string>;
    /**
     * Gslb Resource Description
     */
    gslbResourceDescription?: pulumi.Input<string>;
    /**
     * Gslb Resource Weight
     */
    gslbResourceWeight?: pulumi.Input<number>;
}

export interface GslbTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface HpcLiteNewServerDetail {
    /**
     * HPC Lite(New) ID
     */
    id?: pulumi.Input<string>;
    /**
     * HPC Lite(New) Server Detail ip address
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * HPC Lite(New) Server Detail Name
     */
    serverName: pulumi.Input<string>;
}

export interface HpcLiteNewTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface IamPolicyPrincipal {
    /**
     * Principal ID
     */
    principalId: pulumi.Input<string>;
    /**
     * Principal type
     */
    principalType: pulumi.Input<string>;
}

export interface IamRoleTrustPrincipal {
    /**
     * Project IDs
     */
    projectIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User SRNs
     */
    userSrns?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface KubernetesEnginePrivateAclResource {
    /**
     * Resource ID
     */
    resourceId?: pulumi.Input<string>;
    /**
     * Resource Type
     */
    resourceType?: pulumi.Input<string>;
    /**
     * Resource Value
     */
    resourceValue?: pulumi.Input<string>;
}

export interface KubernetesNodePoolTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface LaunchConfigurationBlockStorage {
    /**
     * Block Storage size (GB)
     */
    blockStorageSize: pulumi.Input<number>;
    /**
     * Block Storage product (default value : SSD)
     */
    diskType: pulumi.Input<string>;
    /**
     * Encryption enabled
     */
    encryptionEnabled: pulumi.Input<boolean>;
    /**
     * Is boot disk or not
     */
    isBootDisk: pulumi.Input<boolean>;
    /**
     * Product ID
     */
    productId?: pulumi.Input<string>;
}

export interface LbServerGroupServerGroupMember {
    /**
     * Target service joining state. (ENABLED, DISABLED, GRACEFUL_DISABLED)
     */
    joinState: pulumi.Input<string>;
    /**
     * Target object id (VM server or BareMetal server). This can not be set with 'object_ipv4'. Input resource should be in the same VPC.
     */
    objectId?: pulumi.Input<string>;
    /**
     * Target object ip
     */
    objectIpAddress?: pulumi.Input<string>;
    /**
     * Target object port for manual setting. (1 to 65535)
     */
    objectPort?: pulumi.Input<number>;
    /**
     * Target object type. (INSTANCE, BAREMETAL, MANUAL)
     */
    objectType: pulumi.Input<string>;
    /**
     * Balancing weight. This is used with when weighted algorithm is set. (1 to 256)
     */
    weight: pulumi.Input<number>;
}

export interface LbServiceLbRule {
    lbRuleId?: pulumi.Input<string>;
    lbRuleSeq: pulumi.Input<number>;
    /**
     * Target server-group id.
     */
    lbServerGroupId?: pulumi.Input<string>;
    /**
     * Pattern URL.
     */
    patternUrl?: pulumi.Input<string>;
}

export interface MariadbBackup {
    /**
     * Backup File Schedule Frequency.(5M|10M|30M|1H)
     */
    archiveBackupScheduleFrequency: pulumi.Input<string>;
    /**
     * Backup File Retention Day.(7D <= day <= 35D)
     */
    backupRetentionPeriod: pulumi.Input<string>;
    /**
     * The time at which the backup starts. (from 0 to 23)
     */
    backupStartHour: pulumi.Input<number>;
    /**
     * Object storage ID where backup files will be stored.
     */
    objectStorageId?: pulumi.Input<string>;
}

export interface MariadbBlockStorage {
    /**
     * Block storage group id
     */
    blockStorageGroupId?: pulumi.Input<string>;
    /**
     * Storage usage. (DATA|ARCHIVE|TEMP|BACKUP)
     */
    blockStorageRoleType: pulumi.Input<string>;
    /**
     * Block Storage Size (10 to 5120)
     */
    blockStorageSize: pulumi.Input<number>;
    /**
     * Storage product name. (SSD|HDD)
     */
    blockStorageType: pulumi.Input<string>;
}

export interface MariadbMariadbServer {
    /**
     * Availability Zone Name. The single server does not input anything. (AZ1|AZ2)
     */
    availabilityZoneName?: pulumi.Input<string>;
    /**
     * MariaDB database server names. (3 to 20 lowercase and number with dash and the first character should be an lowercase letter.)
     */
    mariadbServerName: pulumi.Input<string>;
    /**
     * Server role type Enter 'ACTIVE' for a single server configuration. (ACTIVE | STANDBY)
     */
    serverRoleType: pulumi.Input<string>;
}

export interface MariadbTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface MigrationImageProduct {
    createdDt: pulumi.Input<string>;
    imageId: pulumi.Input<string>;
    productId: pulumi.Input<string>;
    productName: pulumi.Input<string>;
    productType: pulumi.Input<string>;
    productValue: pulumi.Input<string>;
    seq: pulumi.Input<number>;
}

export interface MysqlBackup {
    /**
     * Backup File Schedule Frequency.(5M|10M|30M|1H)
     */
    archiveBackupScheduleFrequency: pulumi.Input<string>;
    /**
     * Backup File Retention Day.(7D <= day <= 35D)
     */
    backupRetentionPeriod: pulumi.Input<string>;
    /**
     * The time at which the backup starts. (from 0 to 23)
     */
    backupStartHour: pulumi.Input<number>;
    /**
     * Object storage ID where backup files will be stored.
     */
    objectStorageId?: pulumi.Input<string>;
}

export interface MysqlBlockStorage {
    /**
     * Block storage group id
     */
    blockStorageGroupId?: pulumi.Input<string>;
    /**
     * Storage usage. (DATA|ARCHIVE|TEMP|BACKUP)
     */
    blockStorageRoleType: pulumi.Input<string>;
    /**
     * Block Storage Size (10 to 5120)
     */
    blockStorageSize: pulumi.Input<number>;
    /**
     * Storage product name. (SSD|HDD)
     */
    blockStorageType: pulumi.Input<string>;
}

export interface MysqlMysqlServer {
    /**
     * Availability Zone Name. The single server does not input anything. (AZ1|AZ2)
     */
    availabilityZoneName?: pulumi.Input<string>;
    /**
     * Mysql database server names. (3 to 20 lowercase and number with dash and the first character should be an lowercase letter.)
     */
    mysqlServerName: pulumi.Input<string>;
    /**
     * Server role type Enter 'ACTIVE' for a single server configuration. (ACTIVE | STANDBY)
     */
    serverRoleType: pulumi.Input<string>;
}

export interface MysqlTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ObsBucketAccessControlRule {
    /**
     * Access Control Rule Type
     */
    ruleType?: pulumi.Input<string>;
    /**
     * Access Control Rule Value
     */
    ruleValue?: pulumi.Input<string>;
}

export interface PostgresqlBackup {
    /**
     * Backup File Schedule Frequency.(5M|10M|30M|1H)
     */
    archiveBackupScheduleFrequency: pulumi.Input<string>;
    /**
     * Backup File Retention Day.(7D <= day <= 35D)
     */
    backupRetentionPeriod: pulumi.Input<string>;
    /**
     * The time at which the backup starts. (from 0 to 23)
     */
    backupStartHour: pulumi.Input<number>;
    /**
     * Object storage ID where backup files will be stored.
     */
    objectStorageId?: pulumi.Input<string>;
}

export interface PostgresqlBlockStorage {
    /**
     * Block storage group id
     */
    blockStorageGroupId?: pulumi.Input<string>;
    /**
     * Storage usage. (DATA|ARCHIVE|TEMP|BACKUP)
     */
    blockStorageRoleType: pulumi.Input<string>;
    /**
     * Block Storage Size (10 to 5120)
     */
    blockStorageSize: pulumi.Input<number>;
    /**
     * Storage product name. (SSD|HDD)
     */
    blockStorageType: pulumi.Input<string>;
}

export interface PostgresqlPostgresqlServer {
    /**
     * Availability Zone Name. The single server does not input anything. (AZ1|AZ2)
     */
    availabilityZoneName?: pulumi.Input<string>;
    /**
     * Postgresql database server names. (3 to 20 lowercase and number with dash and the first character should be an lowercase letter.)
     */
    postgresqlServerName: pulumi.Input<string>;
    /**
     * Server role type Enter 'ACTIVE' for a single server configuration. (ACTIVE | STANDBY)
     */
    serverRoleType: pulumi.Input<string>;
}

export interface PostgresqlTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface RedisBackup {
    /**
     * Backup File Retention Day.(7D <= day <= 35D)
     */
    backupRetentionPeriod: pulumi.Input<string>;
    /**
     * The time at which the backup starts. (from 0 to 23)
     */
    backupStartHour: pulumi.Input<number>;
    /**
     * Object storage ID where backup files will be stored.
     */
    objectStorageId?: pulumi.Input<string>;
}

export interface RedisBlockStorage {
    /**
     * Block storage group id
     */
    blockStorageGroupId?: pulumi.Input<string>;
    /**
     * Block Storage Size (10 to 5120)
     */
    blockStorageSize: pulumi.Input<number>;
    /**
     * Storage product name. (SSD|HDD)
     */
    blockStorageType: pulumi.Input<string>;
}

export interface RedisClusterBackup {
    /**
     * Backup File Retention Day.(7D <= day <= 35D)
     */
    backupRetentionPeriod: pulumi.Input<string>;
    /**
     * The time at which the backup starts. (from 0 to 23)
     */
    backupStartHour: pulumi.Input<number>;
    /**
     * Object storage ID where backup files will be stored.
     */
    objectStorageId?: pulumi.Input<string>;
}

export interface RedisClusterBlockStorage {
    /**
     * Block storage group id
     */
    blockStorageGroupId?: pulumi.Input<string>;
    /**
     * Storage usage. (Only DATA)
     */
    blockStorageRoleType?: pulumi.Input<string>;
    /**
     * Block Storage Size (50 to 5120)
     */
    blockStorageSize: pulumi.Input<number>;
    /**
     * Storage product name. (SSD|HDD)
     */
    blockStorageType: pulumi.Input<string>;
}

export interface RedisClusterRedisServer {
    /**
     * nat ip address
     */
    natIpAddress?: pulumi.Input<string>;
    /**
     * Public IP for NAT. If it is null, it is automatically allocated.
     */
    natPublicIpId?: pulumi.Input<string>;
    /**
     * RedisCluster database server names. (3 to 20 lowercase and number with dash and the first character should be an lowercase letter.)
     */
    redisServerName: pulumi.Input<string>;
    /**
     * Server role type Enter 'MASTER' for a single server configuration. (MASTER | REPLICA)",
     */
    serverRoleType: pulumi.Input<string>;
}

export interface RedisClusterTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface RedisRedisSentinelServer {
    /**
     * nat ip address
     */
    natPublicIpAddress?: pulumi.Input<string>;
    /**
     * ublic IP for NAT. If it is null, it is automatically allocated.
     */
    sentinelNatPublicIpId?: pulumi.Input<string>;
    /**
     * Server role type Enter 'ACTIVE' for a single server configuration. (ACTIVE | STANDBY)
     */
    sentinelPort: pulumi.Input<number>;
    /**
     * Redis database server names. (3 to 20 lowercase and number with dash and the first character should be an lowercase letter.)
     */
    sentinelServerName: pulumi.Input<string>;
}

export interface RedisRedisServer {
    /**
     * nat ip address
     */
    natPublicIpAddress?: pulumi.Input<string>;
    /**
     * Public IP for NAT. If it is null, it is automatically allocated.
     */
    natPublicIpId?: pulumi.Input<string>;
    /**
     * Redis database server names. (3 to 20 lowercase and number with dash and the first character should be an lowercase letter.)
     */
    redisServerName: pulumi.Input<string>;
    /**
     * Server role type Enter 'ACTIVE' for a single server configuration. (MASTER | REPLICA)
     */
    serverRoleType: pulumi.Input<string>;
}

export interface RedisTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ResourceGroupTargetResourceTag {
    tagKey: pulumi.Input<string>;
    tagValue: pulumi.Input<string>;
}

export interface SecurityGroupBulkRuleRule {
    /**
     * SecurityGroup Rule target cidr addresses
     */
    addressesIpv4s: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * SecurityGroup Rule description. (Up to 50 characters)
     */
    description?: pulumi.Input<string>;
    /**
     * SecurityGroup Rule direction (Can be 'in' or 'out')
     */
    direction: pulumi.Input<string>;
    /**
     * SecurityGroup Rule service
     */
    services: pulumi.Input<pulumi.Input<inputs.SecurityGroupBulkRuleRuleService>[]>;
}

export interface SecurityGroupBulkRuleRuleService {
    /**
     * Protocol type. (TCP, UDP, ICMP, ALL)
     */
    type: pulumi.Input<string>;
    /**
     * Port value
     */
    value?: pulumi.Input<string>;
}

export interface SecurityGroupRuleService {
    /**
     * Protocol type. (TCP, UDP, ICMP, ALL)
     */
    type: pulumi.Input<string>;
    /**
     * Port value
     */
    value?: pulumi.Input<string>;
}

export interface SqlserverBackup {
    /**
     * Backup File Schedule Frequency.(5M, 10M, 30M, 1H)
     */
    archiveBackupScheduleFrequency: pulumi.Input<string>;
    /**
     * Backup File Retention Day.(7D <= day <= 35D)
     */
    backupRetentionPeriod: pulumi.Input<string>;
    /**
     * The time at which the backup starts. (from 0 to 23)
     */
    backupStartHour: pulumi.Input<number>;
    /**
     * Full backup schedule(Day). (MONDAY to SUNDAY)
     */
    fullBackupDayOfWeek: pulumi.Input<string>;
    /**
     * Object storage ID where backup files will be stored.
     */
    objectStorageId?: pulumi.Input<string>;
}

export interface SqlserverBlockStorage {
    /**
     * Block storage group id
     */
    blockStorageGroupId?: pulumi.Input<string>;
    /**
     * Block Storage Size (10 to 7168)
     */
    blockStorageSize: pulumi.Input<number>;
    /**
     * Storage product name. (SSD|HDD)
     */
    blockStorageType: pulumi.Input<string>;
}

export interface SqlserverSqlserverActiveDirectory {
    /**
     * Active Directory Server User ID
     */
    adServerUserId?: pulumi.Input<string>;
    /**
     * Active Directory Server User password
     */
    adServerUserPassword?: pulumi.Input<string>;
    /**
     * Active Directory DNS Server IPs
     */
    dnsServerIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Active Directory Domain name
     */
    domainName?: pulumi.Input<string>;
    /**
     * Active Directory NetBios name
     */
    domainNetBiosName?: pulumi.Input<string>;
    /**
     * Active Directory Failover Cluster name
     */
    failoverClusterName?: pulumi.Input<string>;
}

export interface SqlserverSqlserverServer {
    /**
     * Availability Zone Name. (AZ1 | AZ2)
     */
    availabilityZoneName?: pulumi.Input<string>;
    /**
     * Server role type Enter 'ACTIVE' for a single server configuration. (ACTIVE | PRIMARY | SECONDARY)",
     */
    serverRoleType: pulumi.Input<string>;
    /**
     * MS SQL Server database server names. (3 to 15 lowercase and number with dash and the first character should be an lowercase letter.)
     */
    sqlserverServerName: pulumi.Input<string>;
}

export interface SqlserverTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface VirtualServerExternalStorage {
    /**
     * Block Storage Id
     */
    blockStorageId?: pulumi.Input<string>;
    /**
     * Use encryption for this storage
     */
    encrypted?: pulumi.Input<boolean>;
    /**
     * External storage name
     */
    name: pulumi.Input<string>;
    /**
     * Storage product Id
     */
    productId?: pulumi.Input<string>;
    /**
     * Storage product name : SSD
     */
    productName?: pulumi.Input<string>;
    /**
     * SHARED/DEDICATED
     */
    sharedType?: pulumi.Input<string>;
    /**
     * Storage size in gigabytes
     */
    storageSizeGb: pulumi.Input<number>;
    /**
     * Tags
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface VirtualServerLocalSubnet {
    /**
     * Network interface id
     */
    id?: pulumi.Input<string>;
    /**
     * Subnet ip address.
     */
    ipv4?: pulumi.Input<string>;
    /**
     * Subnet Id
     */
    subnetId: pulumi.Input<string>;
}
