// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BmServer extends pulumi.CustomResource {
    /**
     * Get an existing BmServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BmServerState, opts?: pulumi.CustomResourceOptions): BmServer {
        return new BmServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'samsungcloudplatform:index/bmServer:BmServer';

    /**
     * Returns true if the given object is an instance of BmServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BmServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BmServer.__pulumiType;
    }

    /**
     * Admin account for this bare-metal server OS. For linux, this must be 'root'. For Windows, this must not be
     * 'administrator'.
     */
    public readonly adminAccount!: pulumi.Output<string | undefined>;
    /**
     * Admin account password for this bare-metal server OS. (CAUTION) The actual plain-text password will be sent to your
     * email.
     */
    public readonly adminPassword!: pulumi.Output<string>;
    /**
     * block storages
     */
    public readonly blockStorages!: pulumi.Output<outputs.BmServerBlockStorage[] | undefined>;
    /**
     * Contract : None, 1-year, 3-year
     */
    public readonly contractDiscount!: pulumi.Output<string>;
    /**
     * CPU core count(8, 16, ..)
     */
    public readonly cpuCount!: pulumi.Output<number>;
    /**
     * Enable delete protection for this bare-metal server
     */
    public readonly deleteProtection!: pulumi.Output<boolean | undefined>;
    /**
     * Image id of this bare-metal server
     */
    public readonly imageId!: pulumi.Output<string>;
    /**
     * Initialization script
     */
    public readonly initialScript!: pulumi.Output<string | undefined>;
    /**
     * Memory size in gigabytes(16, 32,..)
     */
    public readonly memorySizeGb!: pulumi.Output<number>;
    public readonly servers!: pulumi.Output<outputs.BmServerServer[]>;
    /**
     * Subnet id of this bare-metal server. Subnet must be a valid subnet resource which is attached to the VPC.
     */
    public readonly subnetId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.BmServerTimeouts | undefined>;
    /**
     * VPC id of this bare-metal server
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a BmServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BmServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BmServerArgs | BmServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BmServerState | undefined;
            resourceInputs["adminAccount"] = state ? state.adminAccount : undefined;
            resourceInputs["adminPassword"] = state ? state.adminPassword : undefined;
            resourceInputs["blockStorages"] = state ? state.blockStorages : undefined;
            resourceInputs["contractDiscount"] = state ? state.contractDiscount : undefined;
            resourceInputs["cpuCount"] = state ? state.cpuCount : undefined;
            resourceInputs["deleteProtection"] = state ? state.deleteProtection : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["initialScript"] = state ? state.initialScript : undefined;
            resourceInputs["memorySizeGb"] = state ? state.memorySizeGb : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as BmServerArgs | undefined;
            if ((!args || args.adminPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminPassword'");
            }
            if ((!args || args.contractDiscount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contractDiscount'");
            }
            if ((!args || args.cpuCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cpuCount'");
            }
            if ((!args || args.imageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            if ((!args || args.memorySizeGb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'memorySizeGb'");
            }
            if ((!args || args.servers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servers'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["adminAccount"] = args ? args.adminAccount : undefined;
            resourceInputs["adminPassword"] = args?.adminPassword ? pulumi.secret(args.adminPassword) : undefined;
            resourceInputs["blockStorages"] = args ? args.blockStorages : undefined;
            resourceInputs["contractDiscount"] = args ? args.contractDiscount : undefined;
            resourceInputs["cpuCount"] = args ? args.cpuCount : undefined;
            resourceInputs["deleteProtection"] = args ? args.deleteProtection : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["initialScript"] = args ? args.initialScript : undefined;
            resourceInputs["memorySizeGb"] = args ? args.memorySizeGb : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["adminPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(BmServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BmServer resources.
 */
export interface BmServerState {
    /**
     * Admin account for this bare-metal server OS. For linux, this must be 'root'. For Windows, this must not be
     * 'administrator'.
     */
    adminAccount?: pulumi.Input<string>;
    /**
     * Admin account password for this bare-metal server OS. (CAUTION) The actual plain-text password will be sent to your
     * email.
     */
    adminPassword?: pulumi.Input<string>;
    /**
     * block storages
     */
    blockStorages?: pulumi.Input<pulumi.Input<inputs.BmServerBlockStorage>[]>;
    /**
     * Contract : None, 1-year, 3-year
     */
    contractDiscount?: pulumi.Input<string>;
    /**
     * CPU core count(8, 16, ..)
     */
    cpuCount?: pulumi.Input<number>;
    /**
     * Enable delete protection for this bare-metal server
     */
    deleteProtection?: pulumi.Input<boolean>;
    /**
     * Image id of this bare-metal server
     */
    imageId?: pulumi.Input<string>;
    /**
     * Initialization script
     */
    initialScript?: pulumi.Input<string>;
    /**
     * Memory size in gigabytes(16, 32,..)
     */
    memorySizeGb?: pulumi.Input<number>;
    servers?: pulumi.Input<pulumi.Input<inputs.BmServerServer>[]>;
    /**
     * Subnet id of this bare-metal server. Subnet must be a valid subnet resource which is attached to the VPC.
     */
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.BmServerTimeouts>;
    /**
     * VPC id of this bare-metal server
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BmServer resource.
 */
export interface BmServerArgs {
    /**
     * Admin account for this bare-metal server OS. For linux, this must be 'root'. For Windows, this must not be
     * 'administrator'.
     */
    adminAccount?: pulumi.Input<string>;
    /**
     * Admin account password for this bare-metal server OS. (CAUTION) The actual plain-text password will be sent to your
     * email.
     */
    adminPassword: pulumi.Input<string>;
    /**
     * block storages
     */
    blockStorages?: pulumi.Input<pulumi.Input<inputs.BmServerBlockStorage>[]>;
    /**
     * Contract : None, 1-year, 3-year
     */
    contractDiscount: pulumi.Input<string>;
    /**
     * CPU core count(8, 16, ..)
     */
    cpuCount: pulumi.Input<number>;
    /**
     * Enable delete protection for this bare-metal server
     */
    deleteProtection?: pulumi.Input<boolean>;
    /**
     * Image id of this bare-metal server
     */
    imageId: pulumi.Input<string>;
    /**
     * Initialization script
     */
    initialScript?: pulumi.Input<string>;
    /**
     * Memory size in gigabytes(16, 32,..)
     */
    memorySizeGb: pulumi.Input<number>;
    servers: pulumi.Input<pulumi.Input<inputs.BmServerServer>[]>;
    /**
     * Subnet id of this bare-metal server. Subnet must be a valid subnet resource which is attached to the VPC.
     */
    subnetId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.BmServerTimeouts>;
    /**
     * VPC id of this bare-metal server
     */
    vpcId: pulumi.Input<string>;
}
