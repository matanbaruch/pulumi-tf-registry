// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VirtualServer extends pulumi.CustomResource {
    /**
     * Get an existing VirtualServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualServerState, opts?: pulumi.CustomResourceOptions): VirtualServer {
        return new VirtualServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'samsungcloudplatform:index/virtualServer:VirtualServer';

    /**
     * Returns true if the given object is an instance of VirtualServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualServer.__pulumiType;
    }

    /**
     * Admin account for this virtual server OS. For linux, this must be 'root'. For Windows, this must not be 'administrator'.
     */
    public readonly adminAccount!: pulumi.Output<string | undefined>;
    /**
     * Admin account password for this virtual server OS.
     */
    public readonly adminPassword!: pulumi.Output<string | undefined>;
    /**
     * Enable anti-affinity feature for this virtual server
     */
    public readonly antiAffinity!: pulumi.Output<boolean | undefined>;
    /**
     * Availability Zone Name
     */
    public readonly availabilityZoneName!: pulumi.Output<string | undefined>;
    /**
     * Contract : None, 1 Year, 3 Year
     */
    public readonly contractDiscount!: pulumi.Output<string>;
    /**
     * CPU core count(2, 4, 8,..)
     */
    public readonly cpuCount!: pulumi.Output<number | undefined>;
    /**
     * Enable delete protection for this virtual server
     */
    public readonly deleteProtection!: pulumi.Output<boolean | undefined>;
    /**
     * External block storage.
     */
    public readonly externalStorages!: pulumi.Output<outputs.VirtualServerExternalStorage[] | undefined>;
    /**
     * Image id of this virtual server
     */
    public readonly imageId!: pulumi.Output<string>;
    /**
     * Initialization script
     */
    public readonly initialScriptContent!: pulumi.Output<string | undefined>;
    /**
     * IP address for internal IP assignment.
     */
    public readonly internalIpAddress!: pulumi.Output<string | undefined>;
    /**
     * IP address of this virtual server
     */
    public /*out*/ readonly ipv4!: pulumi.Output<string>;
    /**
     * Key Pair Id
     */
    public readonly keyPairId!: pulumi.Output<string | undefined>;
    /**
     * Local subnet id of this virtual server. Local subnet must be a valid local subnet resource which is attached to the
     * Subnet.
     */
    public readonly localSubnets!: pulumi.Output<outputs.VirtualServerLocalSubnet[] | undefined>;
    /**
     * Memory size in gigabytes(4, 8, 16,..)
     */
    public readonly memorySizeGb!: pulumi.Output<number | undefined>;
    /**
     * Enable NAT IP feature.
     */
    public readonly natEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * NAT IP address of this virtual server
     */
    public /*out*/ readonly natIpv4!: pulumi.Output<string>;
    /**
     * Next Contract : None, 1 Year, 3 Year
     */
    public readonly nextContractDiscount!: pulumi.Output<string | undefined>;
    /**
     * Enable encryption feature in OS(Boot) storage. (WARNING) This option can not be changed after creation.
     */
    public readonly osStorageEncrypted!: pulumi.Output<boolean | undefined>;
    /**
     * OS(Boot) storage name. 3 to 28 alpha-numeric characters with space and dash starting with alphabet
     */
    public readonly osStorageName!: pulumi.Output<string>;
    /**
     * OS(Boot) storage size in gigabytes. (At least 100 GB required and size must be multiple of 10)
     */
    public readonly osStorageSizeGb!: pulumi.Output<number>;
    /**
     * Placement Group Id
     */
    public readonly placementGroupId!: pulumi.Output<string | undefined>;
    /**
     * Public IP id of this virtual server. Public-IP must be a valid public-ip resource which is attached to the VPC.
     */
    public readonly publicIpId!: pulumi.Output<string | undefined>;
    /**
     * Role Id
     */
    public readonly roleId!: pulumi.Output<string | undefined>;
    /**
     * Security-Group ids of this virtual server. Each security-group must be a valid security-group resource which is attached
     * to the VPC.
     */
    public readonly securityGroupIds!: pulumi.Output<string[]>;
    /**
     * Server Group Id for Anti-affinity
     */
    public readonly serverGroupId!: pulumi.Output<string | undefined>;
    /**
     * Server Type (s1v1m2,..)
     */
    public readonly serverType!: pulumi.Output<string | undefined>;
    /**
     * Virtual Server State
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * Subnet id of this virtual server. Subnet must be a valid subnet resource which is attached to the VPC.
     */
    public readonly subnetId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Enable DNS feature for this virtual server.
     */
    public readonly useDns!: pulumi.Output<boolean | undefined>;
    /**
     * Virtual server name
     */
    public readonly virtualServerName!: pulumi.Output<string>;
    /**
     * VPC id of this virtual server
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a VirtualServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualServerArgs | VirtualServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualServerState | undefined;
            resourceInputs["adminAccount"] = state ? state.adminAccount : undefined;
            resourceInputs["adminPassword"] = state ? state.adminPassword : undefined;
            resourceInputs["antiAffinity"] = state ? state.antiAffinity : undefined;
            resourceInputs["availabilityZoneName"] = state ? state.availabilityZoneName : undefined;
            resourceInputs["contractDiscount"] = state ? state.contractDiscount : undefined;
            resourceInputs["cpuCount"] = state ? state.cpuCount : undefined;
            resourceInputs["deleteProtection"] = state ? state.deleteProtection : undefined;
            resourceInputs["externalStorages"] = state ? state.externalStorages : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["initialScriptContent"] = state ? state.initialScriptContent : undefined;
            resourceInputs["internalIpAddress"] = state ? state.internalIpAddress : undefined;
            resourceInputs["ipv4"] = state ? state.ipv4 : undefined;
            resourceInputs["keyPairId"] = state ? state.keyPairId : undefined;
            resourceInputs["localSubnets"] = state ? state.localSubnets : undefined;
            resourceInputs["memorySizeGb"] = state ? state.memorySizeGb : undefined;
            resourceInputs["natEnabled"] = state ? state.natEnabled : undefined;
            resourceInputs["natIpv4"] = state ? state.natIpv4 : undefined;
            resourceInputs["nextContractDiscount"] = state ? state.nextContractDiscount : undefined;
            resourceInputs["osStorageEncrypted"] = state ? state.osStorageEncrypted : undefined;
            resourceInputs["osStorageName"] = state ? state.osStorageName : undefined;
            resourceInputs["osStorageSizeGb"] = state ? state.osStorageSizeGb : undefined;
            resourceInputs["placementGroupId"] = state ? state.placementGroupId : undefined;
            resourceInputs["publicIpId"] = state ? state.publicIpId : undefined;
            resourceInputs["roleId"] = state ? state.roleId : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["serverGroupId"] = state ? state.serverGroupId : undefined;
            resourceInputs["serverType"] = state ? state.serverType : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["useDns"] = state ? state.useDns : undefined;
            resourceInputs["virtualServerName"] = state ? state.virtualServerName : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as VirtualServerArgs | undefined;
            if ((!args || args.contractDiscount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contractDiscount'");
            }
            if ((!args || args.imageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            if ((!args || args.osStorageName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osStorageName'");
            }
            if ((!args || args.osStorageSizeGb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osStorageSizeGb'");
            }
            if ((!args || args.securityGroupIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupIds'");
            }
            if ((!args || args.state === undefined) && !opts.urn) {
                throw new Error("Missing required property 'state'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.virtualServerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualServerName'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["adminAccount"] = args ? args.adminAccount : undefined;
            resourceInputs["adminPassword"] = args?.adminPassword ? pulumi.secret(args.adminPassword) : undefined;
            resourceInputs["antiAffinity"] = args ? args.antiAffinity : undefined;
            resourceInputs["availabilityZoneName"] = args ? args.availabilityZoneName : undefined;
            resourceInputs["contractDiscount"] = args ? args.contractDiscount : undefined;
            resourceInputs["cpuCount"] = args ? args.cpuCount : undefined;
            resourceInputs["deleteProtection"] = args ? args.deleteProtection : undefined;
            resourceInputs["externalStorages"] = args ? args.externalStorages : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["initialScriptContent"] = args ? args.initialScriptContent : undefined;
            resourceInputs["internalIpAddress"] = args ? args.internalIpAddress : undefined;
            resourceInputs["keyPairId"] = args ? args.keyPairId : undefined;
            resourceInputs["localSubnets"] = args ? args.localSubnets : undefined;
            resourceInputs["memorySizeGb"] = args ? args.memorySizeGb : undefined;
            resourceInputs["natEnabled"] = args ? args.natEnabled : undefined;
            resourceInputs["nextContractDiscount"] = args ? args.nextContractDiscount : undefined;
            resourceInputs["osStorageEncrypted"] = args ? args.osStorageEncrypted : undefined;
            resourceInputs["osStorageName"] = args ? args.osStorageName : undefined;
            resourceInputs["osStorageSizeGb"] = args ? args.osStorageSizeGb : undefined;
            resourceInputs["placementGroupId"] = args ? args.placementGroupId : undefined;
            resourceInputs["publicIpId"] = args ? args.publicIpId : undefined;
            resourceInputs["roleId"] = args ? args.roleId : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["serverGroupId"] = args ? args.serverGroupId : undefined;
            resourceInputs["serverType"] = args ? args.serverType : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["useDns"] = args ? args.useDns : undefined;
            resourceInputs["virtualServerName"] = args ? args.virtualServerName : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["ipv4"] = undefined /*out*/;
            resourceInputs["natIpv4"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["adminPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(VirtualServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VirtualServer resources.
 */
export interface VirtualServerState {
    /**
     * Admin account for this virtual server OS. For linux, this must be 'root'. For Windows, this must not be 'administrator'.
     */
    adminAccount?: pulumi.Input<string>;
    /**
     * Admin account password for this virtual server OS.
     */
    adminPassword?: pulumi.Input<string>;
    /**
     * Enable anti-affinity feature for this virtual server
     */
    antiAffinity?: pulumi.Input<boolean>;
    /**
     * Availability Zone Name
     */
    availabilityZoneName?: pulumi.Input<string>;
    /**
     * Contract : None, 1 Year, 3 Year
     */
    contractDiscount?: pulumi.Input<string>;
    /**
     * CPU core count(2, 4, 8,..)
     */
    cpuCount?: pulumi.Input<number>;
    /**
     * Enable delete protection for this virtual server
     */
    deleteProtection?: pulumi.Input<boolean>;
    /**
     * External block storage.
     */
    externalStorages?: pulumi.Input<pulumi.Input<inputs.VirtualServerExternalStorage>[]>;
    /**
     * Image id of this virtual server
     */
    imageId?: pulumi.Input<string>;
    /**
     * Initialization script
     */
    initialScriptContent?: pulumi.Input<string>;
    /**
     * IP address for internal IP assignment.
     */
    internalIpAddress?: pulumi.Input<string>;
    /**
     * IP address of this virtual server
     */
    ipv4?: pulumi.Input<string>;
    /**
     * Key Pair Id
     */
    keyPairId?: pulumi.Input<string>;
    /**
     * Local subnet id of this virtual server. Local subnet must be a valid local subnet resource which is attached to the
     * Subnet.
     */
    localSubnets?: pulumi.Input<pulumi.Input<inputs.VirtualServerLocalSubnet>[]>;
    /**
     * Memory size in gigabytes(4, 8, 16,..)
     */
    memorySizeGb?: pulumi.Input<number>;
    /**
     * Enable NAT IP feature.
     */
    natEnabled?: pulumi.Input<boolean>;
    /**
     * NAT IP address of this virtual server
     */
    natIpv4?: pulumi.Input<string>;
    /**
     * Next Contract : None, 1 Year, 3 Year
     */
    nextContractDiscount?: pulumi.Input<string>;
    /**
     * Enable encryption feature in OS(Boot) storage. (WARNING) This option can not be changed after creation.
     */
    osStorageEncrypted?: pulumi.Input<boolean>;
    /**
     * OS(Boot) storage name. 3 to 28 alpha-numeric characters with space and dash starting with alphabet
     */
    osStorageName?: pulumi.Input<string>;
    /**
     * OS(Boot) storage size in gigabytes. (At least 100 GB required and size must be multiple of 10)
     */
    osStorageSizeGb?: pulumi.Input<number>;
    /**
     * Placement Group Id
     */
    placementGroupId?: pulumi.Input<string>;
    /**
     * Public IP id of this virtual server. Public-IP must be a valid public-ip resource which is attached to the VPC.
     */
    publicIpId?: pulumi.Input<string>;
    /**
     * Role Id
     */
    roleId?: pulumi.Input<string>;
    /**
     * Security-Group ids of this virtual server. Each security-group must be a valid security-group resource which is attached
     * to the VPC.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Server Group Id for Anti-affinity
     */
    serverGroupId?: pulumi.Input<string>;
    /**
     * Server Type (s1v1m2,..)
     */
    serverType?: pulumi.Input<string>;
    /**
     * Virtual Server State
     */
    state?: pulumi.Input<string>;
    /**
     * Subnet id of this virtual server. Subnet must be a valid subnet resource which is attached to the VPC.
     */
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Enable DNS feature for this virtual server.
     */
    useDns?: pulumi.Input<boolean>;
    /**
     * Virtual server name
     */
    virtualServerName?: pulumi.Input<string>;
    /**
     * VPC id of this virtual server
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VirtualServer resource.
 */
export interface VirtualServerArgs {
    /**
     * Admin account for this virtual server OS. For linux, this must be 'root'. For Windows, this must not be 'administrator'.
     */
    adminAccount?: pulumi.Input<string>;
    /**
     * Admin account password for this virtual server OS.
     */
    adminPassword?: pulumi.Input<string>;
    /**
     * Enable anti-affinity feature for this virtual server
     */
    antiAffinity?: pulumi.Input<boolean>;
    /**
     * Availability Zone Name
     */
    availabilityZoneName?: pulumi.Input<string>;
    /**
     * Contract : None, 1 Year, 3 Year
     */
    contractDiscount: pulumi.Input<string>;
    /**
     * CPU core count(2, 4, 8,..)
     */
    cpuCount?: pulumi.Input<number>;
    /**
     * Enable delete protection for this virtual server
     */
    deleteProtection?: pulumi.Input<boolean>;
    /**
     * External block storage.
     */
    externalStorages?: pulumi.Input<pulumi.Input<inputs.VirtualServerExternalStorage>[]>;
    /**
     * Image id of this virtual server
     */
    imageId: pulumi.Input<string>;
    /**
     * Initialization script
     */
    initialScriptContent?: pulumi.Input<string>;
    /**
     * IP address for internal IP assignment.
     */
    internalIpAddress?: pulumi.Input<string>;
    /**
     * Key Pair Id
     */
    keyPairId?: pulumi.Input<string>;
    /**
     * Local subnet id of this virtual server. Local subnet must be a valid local subnet resource which is attached to the
     * Subnet.
     */
    localSubnets?: pulumi.Input<pulumi.Input<inputs.VirtualServerLocalSubnet>[]>;
    /**
     * Memory size in gigabytes(4, 8, 16,..)
     */
    memorySizeGb?: pulumi.Input<number>;
    /**
     * Enable NAT IP feature.
     */
    natEnabled?: pulumi.Input<boolean>;
    /**
     * Next Contract : None, 1 Year, 3 Year
     */
    nextContractDiscount?: pulumi.Input<string>;
    /**
     * Enable encryption feature in OS(Boot) storage. (WARNING) This option can not be changed after creation.
     */
    osStorageEncrypted?: pulumi.Input<boolean>;
    /**
     * OS(Boot) storage name. 3 to 28 alpha-numeric characters with space and dash starting with alphabet
     */
    osStorageName: pulumi.Input<string>;
    /**
     * OS(Boot) storage size in gigabytes. (At least 100 GB required and size must be multiple of 10)
     */
    osStorageSizeGb: pulumi.Input<number>;
    /**
     * Placement Group Id
     */
    placementGroupId?: pulumi.Input<string>;
    /**
     * Public IP id of this virtual server. Public-IP must be a valid public-ip resource which is attached to the VPC.
     */
    publicIpId?: pulumi.Input<string>;
    /**
     * Role Id
     */
    roleId?: pulumi.Input<string>;
    /**
     * Security-Group ids of this virtual server. Each security-group must be a valid security-group resource which is attached
     * to the VPC.
     */
    securityGroupIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Server Group Id for Anti-affinity
     */
    serverGroupId?: pulumi.Input<string>;
    /**
     * Server Type (s1v1m2,..)
     */
    serverType?: pulumi.Input<string>;
    /**
     * Virtual Server State
     */
    state: pulumi.Input<string>;
    /**
     * Subnet id of this virtual server. Subnet must be a valid subnet resource which is attached to the VPC.
     */
    subnetId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Enable DNS feature for this virtual server.
     */
    useDns?: pulumi.Input<boolean>;
    /**
     * Virtual server name
     */
    virtualServerName: pulumi.Input<string>;
    /**
     * VPC id of this virtual server
     */
    vpcId: pulumi.Input<string>;
}
