// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LbService extends pulumi.CustomResource {
    /**
     * Get an existing LbService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbServiceState, opts?: pulumi.CustomResourceOptions): LbService {
        return new LbService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'samsungcloudplatform:index/lbService:LbService';

    /**
     * Returns true if the given object is an instance of LbService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LbService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LbService.__pulumiType;
    }

    /**
     * Application Profile ID
     */
    public readonly appProfileId!: pulumi.Output<string>;
    /**
     * SSL client certification id.
     */
    public readonly clientCertificateId!: pulumi.Output<string | undefined>;
    /**
     * SSL client security level.
     */
    public readonly clientSslSecurityLevel!: pulumi.Output<string | undefined>;
    /**
     * Forwarding port numbers. Multiple ports can be inserted using comma and dash. (e.g. 8000-8100,8200)
     */
    public readonly forwardingPorts!: pulumi.Output<string | undefined>;
    /**
     * Servicing protocol layer. (L4 for TCP, L7 for HTTP or HTTPS)
     */
    public readonly layerType!: pulumi.Output<string>;
    /**
     * Target Load-Balancer id.
     */
    public readonly lbId!: pulumi.Output<string>;
    /**
     * Server-Group rules.
     */
    public readonly lbRules!: pulumi.Output<outputs.LbServiceLbRule[] | undefined>;
    public readonly lbServiceIpId!: pulumi.Output<string>;
    /**
     * Name of Load-Balancer Service. (3 to 20 characters with dash in middle)
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Wheter to use NAT IP (public IP) or not.
     */
    public readonly natActive!: pulumi.Output<boolean | undefined>;
    /**
     * Persistence option. (DISABLED, SOURCE_IP, COOKIE)
     */
    public readonly persistence!: pulumi.Output<string>;
    /**
     * Persistence target profile id.
     */
    public readonly persistenceProfileId!: pulumi.Output<string | undefined>;
    /**
     * Servicing protocol. (TCP, HTTP, HTTPS)
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * NAT IP attached to LB service IP.
     */
    public readonly publicIpId!: pulumi.Output<string | undefined>;
    /**
     * SSL server certification id.
     */
    public readonly serverCertificateId!: pulumi.Output<string | undefined>;
    /**
     * SSL server security level.
     */
    public readonly serverSslSecurityLevel!: pulumi.Output<string | undefined>;
    /**
     * Servicing IP address
     */
    public readonly serviceIpv4!: pulumi.Output<string | undefined>;
    /**
     * Servicing port numbers. Multiple ports can be inserted using comma and dash. (e.g. 8000-8100,8200)
     */
    public readonly servicePorts!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly useAccessLog!: pulumi.Output<boolean | undefined>;

    /**
     * Create a LbService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LbServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbServiceArgs | LbServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LbServiceState | undefined;
            resourceInputs["appProfileId"] = state ? state.appProfileId : undefined;
            resourceInputs["clientCertificateId"] = state ? state.clientCertificateId : undefined;
            resourceInputs["clientSslSecurityLevel"] = state ? state.clientSslSecurityLevel : undefined;
            resourceInputs["forwardingPorts"] = state ? state.forwardingPorts : undefined;
            resourceInputs["layerType"] = state ? state.layerType : undefined;
            resourceInputs["lbId"] = state ? state.lbId : undefined;
            resourceInputs["lbRules"] = state ? state.lbRules : undefined;
            resourceInputs["lbServiceIpId"] = state ? state.lbServiceIpId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["natActive"] = state ? state.natActive : undefined;
            resourceInputs["persistence"] = state ? state.persistence : undefined;
            resourceInputs["persistenceProfileId"] = state ? state.persistenceProfileId : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["publicIpId"] = state ? state.publicIpId : undefined;
            resourceInputs["serverCertificateId"] = state ? state.serverCertificateId : undefined;
            resourceInputs["serverSslSecurityLevel"] = state ? state.serverSslSecurityLevel : undefined;
            resourceInputs["serviceIpv4"] = state ? state.serviceIpv4 : undefined;
            resourceInputs["servicePorts"] = state ? state.servicePorts : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["useAccessLog"] = state ? state.useAccessLog : undefined;
        } else {
            const args = argsOrState as LbServiceArgs | undefined;
            if ((!args || args.appProfileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appProfileId'");
            }
            if ((!args || args.layerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'layerType'");
            }
            if ((!args || args.lbId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lbId'");
            }
            if ((!args || args.persistence === undefined) && !opts.urn) {
                throw new Error("Missing required property 'persistence'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.servicePorts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servicePorts'");
            }
            resourceInputs["appProfileId"] = args ? args.appProfileId : undefined;
            resourceInputs["clientCertificateId"] = args ? args.clientCertificateId : undefined;
            resourceInputs["clientSslSecurityLevel"] = args ? args.clientSslSecurityLevel : undefined;
            resourceInputs["forwardingPorts"] = args ? args.forwardingPorts : undefined;
            resourceInputs["layerType"] = args ? args.layerType : undefined;
            resourceInputs["lbId"] = args ? args.lbId : undefined;
            resourceInputs["lbRules"] = args ? args.lbRules : undefined;
            resourceInputs["lbServiceIpId"] = args ? args.lbServiceIpId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["natActive"] = args ? args.natActive : undefined;
            resourceInputs["persistence"] = args ? args.persistence : undefined;
            resourceInputs["persistenceProfileId"] = args ? args.persistenceProfileId : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["publicIpId"] = args ? args.publicIpId : undefined;
            resourceInputs["serverCertificateId"] = args ? args.serverCertificateId : undefined;
            resourceInputs["serverSslSecurityLevel"] = args ? args.serverSslSecurityLevel : undefined;
            resourceInputs["serviceIpv4"] = args ? args.serviceIpv4 : undefined;
            resourceInputs["servicePorts"] = args ? args.servicePorts : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["useAccessLog"] = args ? args.useAccessLog : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LbService.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LbService resources.
 */
export interface LbServiceState {
    /**
     * Application Profile ID
     */
    appProfileId?: pulumi.Input<string>;
    /**
     * SSL client certification id.
     */
    clientCertificateId?: pulumi.Input<string>;
    /**
     * SSL client security level.
     */
    clientSslSecurityLevel?: pulumi.Input<string>;
    /**
     * Forwarding port numbers. Multiple ports can be inserted using comma and dash. (e.g. 8000-8100,8200)
     */
    forwardingPorts?: pulumi.Input<string>;
    /**
     * Servicing protocol layer. (L4 for TCP, L7 for HTTP or HTTPS)
     */
    layerType?: pulumi.Input<string>;
    /**
     * Target Load-Balancer id.
     */
    lbId?: pulumi.Input<string>;
    /**
     * Server-Group rules.
     */
    lbRules?: pulumi.Input<pulumi.Input<inputs.LbServiceLbRule>[]>;
    lbServiceIpId?: pulumi.Input<string>;
    /**
     * Name of Load-Balancer Service. (3 to 20 characters with dash in middle)
     */
    name?: pulumi.Input<string>;
    /**
     * Wheter to use NAT IP (public IP) or not.
     */
    natActive?: pulumi.Input<boolean>;
    /**
     * Persistence option. (DISABLED, SOURCE_IP, COOKIE)
     */
    persistence?: pulumi.Input<string>;
    /**
     * Persistence target profile id.
     */
    persistenceProfileId?: pulumi.Input<string>;
    /**
     * Servicing protocol. (TCP, HTTP, HTTPS)
     */
    protocol?: pulumi.Input<string>;
    /**
     * NAT IP attached to LB service IP.
     */
    publicIpId?: pulumi.Input<string>;
    /**
     * SSL server certification id.
     */
    serverCertificateId?: pulumi.Input<string>;
    /**
     * SSL server security level.
     */
    serverSslSecurityLevel?: pulumi.Input<string>;
    /**
     * Servicing IP address
     */
    serviceIpv4?: pulumi.Input<string>;
    /**
     * Servicing port numbers. Multiple ports can be inserted using comma and dash. (e.g. 8000-8100,8200)
     */
    servicePorts?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    useAccessLog?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a LbService resource.
 */
export interface LbServiceArgs {
    /**
     * Application Profile ID
     */
    appProfileId: pulumi.Input<string>;
    /**
     * SSL client certification id.
     */
    clientCertificateId?: pulumi.Input<string>;
    /**
     * SSL client security level.
     */
    clientSslSecurityLevel?: pulumi.Input<string>;
    /**
     * Forwarding port numbers. Multiple ports can be inserted using comma and dash. (e.g. 8000-8100,8200)
     */
    forwardingPorts?: pulumi.Input<string>;
    /**
     * Servicing protocol layer. (L4 for TCP, L7 for HTTP or HTTPS)
     */
    layerType: pulumi.Input<string>;
    /**
     * Target Load-Balancer id.
     */
    lbId: pulumi.Input<string>;
    /**
     * Server-Group rules.
     */
    lbRules?: pulumi.Input<pulumi.Input<inputs.LbServiceLbRule>[]>;
    lbServiceIpId?: pulumi.Input<string>;
    /**
     * Name of Load-Balancer Service. (3 to 20 characters with dash in middle)
     */
    name?: pulumi.Input<string>;
    /**
     * Wheter to use NAT IP (public IP) or not.
     */
    natActive?: pulumi.Input<boolean>;
    /**
     * Persistence option. (DISABLED, SOURCE_IP, COOKIE)
     */
    persistence: pulumi.Input<string>;
    /**
     * Persistence target profile id.
     */
    persistenceProfileId?: pulumi.Input<string>;
    /**
     * Servicing protocol. (TCP, HTTP, HTTPS)
     */
    protocol: pulumi.Input<string>;
    /**
     * NAT IP attached to LB service IP.
     */
    publicIpId?: pulumi.Input<string>;
    /**
     * SSL server certification id.
     */
    serverCertificateId?: pulumi.Input<string>;
    /**
     * SSL server security level.
     */
    serverSslSecurityLevel?: pulumi.Input<string>;
    /**
     * Servicing IP address
     */
    serviceIpv4?: pulumi.Input<string>;
    /**
     * Servicing port numbers. Multiple ports can be inserted using comma and dash. (e.g. 8000-8100,8200)
     */
    servicePorts: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    useAccessLog?: pulumi.Input<boolean>;
}
