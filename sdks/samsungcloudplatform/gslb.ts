// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Gslb extends pulumi.CustomResource {
    /**
     * Get an existing Gslb resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GslbState, opts?: pulumi.CustomResourceOptions): Gslb {
        return new Gslb(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'samsungcloudplatform:index/gslb:Gslb';

    /**
     * Returns true if the given object is an instance of Gslb.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Gslb {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Gslb.__pulumiType;
    }

    /**
     * GSLB Algorithm. One of RATIO, RTT
     */
    public readonly gslbAlgorithm!: pulumi.Output<string>;
    /**
     * GSLB Environment Usage
     */
    public readonly gslbEnvUsage!: pulumi.Output<string>;
    /**
     * GSLB Health Check Interval. (5 to 300)
     */
    public readonly gslbHealthCheckInterval!: pulumi.Output<number>;
    /**
     * GSLB Health Check Timeout. (5 to 300, greater than gslb_health_check_interval)
     */
    public readonly gslbHealthCheckTimeout!: pulumi.Output<number>;
    /**
     * GSLB Health Check User Id
     */
    public readonly gslbHealthCheckUserId!: pulumi.Output<string | undefined>;
    /**
     * GSLB Health Check User Password
     */
    public readonly gslbHealthCheckUserPassword!: pulumi.Output<string | undefined>;
    /**
     * GSLB Name
     */
    public readonly gslbName!: pulumi.Output<string>;
    /**
     * GSLB Resources
     */
    public readonly gslbResources!: pulumi.Output<outputs.GslbGslbResource[]>;
    /**
     * GSLB Health Check Response String
     */
    public readonly gslbResponseString!: pulumi.Output<string | undefined>;
    /**
     * GSLB Health Check Send String
     */
    public readonly gslbSendString!: pulumi.Output<string | undefined>;
    /**
     * GSLB Health Check Probe Timeout. (5 to 300), It must be greater than the Heath Check Interval.
     */
    public readonly probeTimeout!: pulumi.Output<number>;
    /**
     * GSLB Health Check Protocol. One of ICMP, TCP, HTTP, HTTPS, NONE
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * GSLB Health Check Service Port. (5 to 300), It must be greater than the Heath Check Interval.
     */
    public readonly servicePort!: pulumi.Output<number | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.GslbTimeouts | undefined>;

    /**
     * Create a Gslb resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GslbArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GslbArgs | GslbState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GslbState | undefined;
            resourceInputs["gslbAlgorithm"] = state ? state.gslbAlgorithm : undefined;
            resourceInputs["gslbEnvUsage"] = state ? state.gslbEnvUsage : undefined;
            resourceInputs["gslbHealthCheckInterval"] = state ? state.gslbHealthCheckInterval : undefined;
            resourceInputs["gslbHealthCheckTimeout"] = state ? state.gslbHealthCheckTimeout : undefined;
            resourceInputs["gslbHealthCheckUserId"] = state ? state.gslbHealthCheckUserId : undefined;
            resourceInputs["gslbHealthCheckUserPassword"] = state ? state.gslbHealthCheckUserPassword : undefined;
            resourceInputs["gslbName"] = state ? state.gslbName : undefined;
            resourceInputs["gslbResources"] = state ? state.gslbResources : undefined;
            resourceInputs["gslbResponseString"] = state ? state.gslbResponseString : undefined;
            resourceInputs["gslbSendString"] = state ? state.gslbSendString : undefined;
            resourceInputs["probeTimeout"] = state ? state.probeTimeout : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["servicePort"] = state ? state.servicePort : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as GslbArgs | undefined;
            if ((!args || args.gslbAlgorithm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gslbAlgorithm'");
            }
            if ((!args || args.gslbEnvUsage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gslbEnvUsage'");
            }
            if ((!args || args.gslbHealthCheckInterval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gslbHealthCheckInterval'");
            }
            if ((!args || args.gslbHealthCheckTimeout === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gslbHealthCheckTimeout'");
            }
            if ((!args || args.gslbName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gslbName'");
            }
            if ((!args || args.gslbResources === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gslbResources'");
            }
            if ((!args || args.probeTimeout === undefined) && !opts.urn) {
                throw new Error("Missing required property 'probeTimeout'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["gslbAlgorithm"] = args ? args.gslbAlgorithm : undefined;
            resourceInputs["gslbEnvUsage"] = args ? args.gslbEnvUsage : undefined;
            resourceInputs["gslbHealthCheckInterval"] = args ? args.gslbHealthCheckInterval : undefined;
            resourceInputs["gslbHealthCheckTimeout"] = args ? args.gslbHealthCheckTimeout : undefined;
            resourceInputs["gslbHealthCheckUserId"] = args ? args.gslbHealthCheckUserId : undefined;
            resourceInputs["gslbHealthCheckUserPassword"] = args ? args.gslbHealthCheckUserPassword : undefined;
            resourceInputs["gslbName"] = args ? args.gslbName : undefined;
            resourceInputs["gslbResources"] = args ? args.gslbResources : undefined;
            resourceInputs["gslbResponseString"] = args ? args.gslbResponseString : undefined;
            resourceInputs["gslbSendString"] = args ? args.gslbSendString : undefined;
            resourceInputs["probeTimeout"] = args ? args.probeTimeout : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["servicePort"] = args ? args.servicePort : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Gslb.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Gslb resources.
 */
export interface GslbState {
    /**
     * GSLB Algorithm. One of RATIO, RTT
     */
    gslbAlgorithm?: pulumi.Input<string>;
    /**
     * GSLB Environment Usage
     */
    gslbEnvUsage?: pulumi.Input<string>;
    /**
     * GSLB Health Check Interval. (5 to 300)
     */
    gslbHealthCheckInterval?: pulumi.Input<number>;
    /**
     * GSLB Health Check Timeout. (5 to 300, greater than gslb_health_check_interval)
     */
    gslbHealthCheckTimeout?: pulumi.Input<number>;
    /**
     * GSLB Health Check User Id
     */
    gslbHealthCheckUserId?: pulumi.Input<string>;
    /**
     * GSLB Health Check User Password
     */
    gslbHealthCheckUserPassword?: pulumi.Input<string>;
    /**
     * GSLB Name
     */
    gslbName?: pulumi.Input<string>;
    /**
     * GSLB Resources
     */
    gslbResources?: pulumi.Input<pulumi.Input<inputs.GslbGslbResource>[]>;
    /**
     * GSLB Health Check Response String
     */
    gslbResponseString?: pulumi.Input<string>;
    /**
     * GSLB Health Check Send String
     */
    gslbSendString?: pulumi.Input<string>;
    /**
     * GSLB Health Check Probe Timeout. (5 to 300), It must be greater than the Heath Check Interval.
     */
    probeTimeout?: pulumi.Input<number>;
    /**
     * GSLB Health Check Protocol. One of ICMP, TCP, HTTP, HTTPS, NONE
     */
    protocol?: pulumi.Input<string>;
    /**
     * GSLB Health Check Service Port. (5 to 300), It must be greater than the Heath Check Interval.
     */
    servicePort?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.GslbTimeouts>;
}

/**
 * The set of arguments for constructing a Gslb resource.
 */
export interface GslbArgs {
    /**
     * GSLB Algorithm. One of RATIO, RTT
     */
    gslbAlgorithm: pulumi.Input<string>;
    /**
     * GSLB Environment Usage
     */
    gslbEnvUsage: pulumi.Input<string>;
    /**
     * GSLB Health Check Interval. (5 to 300)
     */
    gslbHealthCheckInterval: pulumi.Input<number>;
    /**
     * GSLB Health Check Timeout. (5 to 300, greater than gslb_health_check_interval)
     */
    gslbHealthCheckTimeout: pulumi.Input<number>;
    /**
     * GSLB Health Check User Id
     */
    gslbHealthCheckUserId?: pulumi.Input<string>;
    /**
     * GSLB Health Check User Password
     */
    gslbHealthCheckUserPassword?: pulumi.Input<string>;
    /**
     * GSLB Name
     */
    gslbName: pulumi.Input<string>;
    /**
     * GSLB Resources
     */
    gslbResources: pulumi.Input<pulumi.Input<inputs.GslbGslbResource>[]>;
    /**
     * GSLB Health Check Response String
     */
    gslbResponseString?: pulumi.Input<string>;
    /**
     * GSLB Health Check Send String
     */
    gslbSendString?: pulumi.Input<string>;
    /**
     * GSLB Health Check Probe Timeout. (5 to 300), It must be greater than the Heath Check Interval.
     */
    probeTimeout: pulumi.Input<number>;
    /**
     * GSLB Health Check Protocol. One of ICMP, TCP, HTTP, HTTPS, NONE
     */
    protocol: pulumi.Input<string>;
    /**
     * GSLB Health Check Service Port. (5 to 300), It must be greater than the Heath Check Interval.
     */
    servicePort?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.GslbTimeouts>;
}
