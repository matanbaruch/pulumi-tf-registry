// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSqlserver(args: GetSqlserverArgs, opts?: pulumi.InvokeOptions): Promise<GetSqlserverResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("samsungcloudplatform:index/getSqlserver:getSqlserver", {
        "id": args.id,
        "sqlserverClusterId": args.sqlserverClusterId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSqlserver.
 */
export interface GetSqlserverArgs {
    id?: string;
    sqlserverClusterId: string;
}

/**
 * A collection of values returned by getSqlserver.
 */
export interface GetSqlserverResult {
    readonly auditEnabled: boolean;
    readonly backupConfigs: outputs.GetSqlserverBackupConfig[];
    readonly blockId: string;
    readonly contracts: outputs.GetSqlserverContract[];
    readonly createdBy: string;
    readonly createdDt: string;
    readonly databaseVersion: string;
    readonly id: string;
    readonly imageId: string;
    readonly maintenances: outputs.GetSqlserverMaintenance[];
    readonly modifiedBy: string;
    readonly modifiedDt: string;
    readonly natIpAddress: string;
    readonly projectId: string;
    readonly quorumServerGroups: outputs.GetSqlserverQuorumServerGroup[];
    readonly securityGroupIds: string[];
    readonly serviceZoneId: string;
    readonly sqlserverClusterId: string;
    readonly sqlserverClusterName: string;
    readonly sqlserverClusterState: string;
    readonly sqlserverInitialConfigs: outputs.GetSqlserverSqlserverInitialConfig[];
    readonly sqlserverMasterClusterId: string;
    readonly sqlserverSecondaryClusterId: string;
    readonly sqlserverServerGroups: outputs.GetSqlserverSqlserverServerGroup[];
    readonly subnetId: string;
    readonly timezone: string;
    readonly vpcId: string;
}
export function getSqlserverOutput(args: GetSqlserverOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSqlserverResult> {
    return pulumi.output(args).apply((a: any) => getSqlserver(a, opts))
}

/**
 * A collection of arguments for invoking getSqlserver.
 */
export interface GetSqlserverOutputArgs {
    id?: pulumi.Input<string>;
    sqlserverClusterId: pulumi.Input<string>;
}
