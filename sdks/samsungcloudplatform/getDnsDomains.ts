// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDnsDomains(args?: GetDnsDomainsArgs, opts?: pulumi.InvokeOptions): Promise<GetDnsDomainsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("samsungcloudplatform:index/getDnsDomains:getDnsDomains", {
        "createdBy": args.createdBy,
        "dnsDomainName": args.dnsDomainName,
        "dnsEnvUsage": args.dnsEnvUsage,
        "id": args.id,
        "page": args.page,
        "size": args.size,
        "sort": args.sort,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDnsDomains.
 */
export interface GetDnsDomainsArgs {
    createdBy?: string;
    dnsDomainName?: string;
    dnsEnvUsage?: string;
    id?: string;
    page?: number;
    size?: number;
    sort?: string;
}

/**
 * A collection of values returned by getDnsDomains.
 */
export interface GetDnsDomainsResult {
    readonly contents: outputs.GetDnsDomainsContent[];
    readonly createdBy?: string;
    readonly dnsDomainName?: string;
    readonly dnsEnvUsage?: string;
    readonly id: string;
    readonly page?: number;
    readonly size?: number;
    readonly sort?: string;
    readonly totalCount: number;
}
export function getDnsDomainsOutput(args?: GetDnsDomainsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDnsDomainsResult> {
    return pulumi.output(args).apply((a: any) => getDnsDomains(a, opts))
}

/**
 * A collection of arguments for invoking getDnsDomains.
 */
export interface GetDnsDomainsOutputArgs {
    createdBy?: pulumi.Input<string>;
    dnsDomainName?: pulumi.Input<string>;
    dnsEnvUsage?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    page?: pulumi.Input<number>;
    size?: pulumi.Input<number>;
    sort?: pulumi.Input<string>;
}
