// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSubnetAvailableIps(args: GetSubnetAvailableIpsArgs, opts?: pulumi.InvokeOptions): Promise<GetSubnetAvailableIpsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("samsungcloudplatform:index/getSubnetAvailableIps:getSubnetAvailableIps", {
        "contents": args.contents,
        "id": args.id,
        "page": args.page,
        "size": args.size,
        "subnetId": args.subnetId,
        "subnetIpAddress": args.subnetIpAddress,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSubnetAvailableIps.
 */
export interface GetSubnetAvailableIpsArgs {
    contents?: inputs.GetSubnetAvailableIpsContent[];
    id?: string;
    page?: number;
    size?: number;
    subnetId: string;
    subnetIpAddress?: string;
}

/**
 * A collection of values returned by getSubnetAvailableIps.
 */
export interface GetSubnetAvailableIpsResult {
    readonly contents?: outputs.GetSubnetAvailableIpsContent[];
    readonly id: string;
    readonly page?: number;
    readonly size?: number;
    readonly subnetId: string;
    readonly subnetIpAddress?: string;
    readonly totalCount: number;
}
export function getSubnetAvailableIpsOutput(args: GetSubnetAvailableIpsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSubnetAvailableIpsResult> {
    return pulumi.output(args).apply((a: any) => getSubnetAvailableIps(a, opts))
}

/**
 * A collection of arguments for invoking getSubnetAvailableIps.
 */
export interface GetSubnetAvailableIpsOutputArgs {
    contents?: pulumi.Input<pulumi.Input<inputs.GetSubnetAvailableIpsContentArgs>[]>;
    id?: pulumi.Input<string>;
    page?: pulumi.Input<number>;
    size?: pulumi.Input<number>;
    subnetId: pulumi.Input<string>;
    subnetIpAddress?: pulumi.Input<string>;
}
