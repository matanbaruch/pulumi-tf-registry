// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HpcLiteNew extends pulumi.CustomResource {
    /**
     * Get an existing HpcLiteNew resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HpcLiteNewState, opts?: pulumi.CustomResourceOptions): HpcLiteNew {
        return new HpcLiteNew(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'samsungcloudplatform:index/hpcLiteNew:HpcLiteNew';

    /**
     * Returns true if the given object is an instance of HpcLiteNew.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HpcLiteNew {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HpcLiteNew.__pulumiType;
    }

    /**
     * HPC Lite(New) CO Pool ID
     */
    public readonly coServiceZoneId!: pulumi.Output<string>;
    /**
     * HPC Lite(New) Contract
     */
    public readonly contract!: pulumi.Output<string>;
    /**
     * HPC Lite(New) HT Enabled
     */
    public readonly hyperThreadingEnabled!: pulumi.Output<string>;
    /**
     * HPC Lite(New) Image ID
     */
    public readonly imageId!: pulumi.Output<string>;
    /**
     * HPC Lite(New) Init Script
     */
    public readonly initScript!: pulumi.Output<string | undefined>;
    /**
     * HPC Lite(New) OS User ID
     */
    public readonly osUserId!: pulumi.Output<string>;
    /**
     * HPC Lite(New) OS User PWD
     */
    public readonly osUserPassword!: pulumi.Output<string>;
    /**
     * HPC Lite(New) Product Group ID
     */
    public readonly productGroupId!: pulumi.Output<string>;
    /**
     * HPC Lite(New) block Id
     */
    public readonly resourcePoolId!: pulumi.Output<string>;
    public readonly serverDetails!: pulumi.Output<outputs.HpcLiteNewServerDetail[]>;
    /**
     * HPC Lite(New) Server Type
     */
    public readonly serverType!: pulumi.Output<string>;
    /**
     * HPC Lite(New) Service Zone ID
     */
    public readonly serviceZoneId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.HpcLiteNewTimeouts | undefined>;
    /**
     * HPC Lite(New) Vlan Pool CIDR
     */
    public readonly vlanPoolCidr!: pulumi.Output<string>;

    /**
     * Create a HpcLiteNew resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HpcLiteNewArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HpcLiteNewArgs | HpcLiteNewState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HpcLiteNewState | undefined;
            resourceInputs["coServiceZoneId"] = state ? state.coServiceZoneId : undefined;
            resourceInputs["contract"] = state ? state.contract : undefined;
            resourceInputs["hyperThreadingEnabled"] = state ? state.hyperThreadingEnabled : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["initScript"] = state ? state.initScript : undefined;
            resourceInputs["osUserId"] = state ? state.osUserId : undefined;
            resourceInputs["osUserPassword"] = state ? state.osUserPassword : undefined;
            resourceInputs["productGroupId"] = state ? state.productGroupId : undefined;
            resourceInputs["resourcePoolId"] = state ? state.resourcePoolId : undefined;
            resourceInputs["serverDetails"] = state ? state.serverDetails : undefined;
            resourceInputs["serverType"] = state ? state.serverType : undefined;
            resourceInputs["serviceZoneId"] = state ? state.serviceZoneId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vlanPoolCidr"] = state ? state.vlanPoolCidr : undefined;
        } else {
            const args = argsOrState as HpcLiteNewArgs | undefined;
            if ((!args || args.coServiceZoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'coServiceZoneId'");
            }
            if ((!args || args.contract === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contract'");
            }
            if ((!args || args.hyperThreadingEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hyperThreadingEnabled'");
            }
            if ((!args || args.imageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            if ((!args || args.osUserId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osUserId'");
            }
            if ((!args || args.osUserPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osUserPassword'");
            }
            if ((!args || args.productGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'productGroupId'");
            }
            if ((!args || args.resourcePoolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourcePoolId'");
            }
            if ((!args || args.serverDetails === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverDetails'");
            }
            if ((!args || args.serverType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverType'");
            }
            if ((!args || args.serviceZoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceZoneId'");
            }
            if ((!args || args.vlanPoolCidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vlanPoolCidr'");
            }
            resourceInputs["coServiceZoneId"] = args ? args.coServiceZoneId : undefined;
            resourceInputs["contract"] = args ? args.contract : undefined;
            resourceInputs["hyperThreadingEnabled"] = args ? args.hyperThreadingEnabled : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["initScript"] = args ? args.initScript : undefined;
            resourceInputs["osUserId"] = args ? args.osUserId : undefined;
            resourceInputs["osUserPassword"] = args?.osUserPassword ? pulumi.secret(args.osUserPassword) : undefined;
            resourceInputs["productGroupId"] = args ? args.productGroupId : undefined;
            resourceInputs["resourcePoolId"] = args ? args.resourcePoolId : undefined;
            resourceInputs["serverDetails"] = args ? args.serverDetails : undefined;
            resourceInputs["serverType"] = args ? args.serverType : undefined;
            resourceInputs["serviceZoneId"] = args ? args.serviceZoneId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vlanPoolCidr"] = args ? args.vlanPoolCidr : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["osUserPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(HpcLiteNew.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HpcLiteNew resources.
 */
export interface HpcLiteNewState {
    /**
     * HPC Lite(New) CO Pool ID
     */
    coServiceZoneId?: pulumi.Input<string>;
    /**
     * HPC Lite(New) Contract
     */
    contract?: pulumi.Input<string>;
    /**
     * HPC Lite(New) HT Enabled
     */
    hyperThreadingEnabled?: pulumi.Input<string>;
    /**
     * HPC Lite(New) Image ID
     */
    imageId?: pulumi.Input<string>;
    /**
     * HPC Lite(New) Init Script
     */
    initScript?: pulumi.Input<string>;
    /**
     * HPC Lite(New) OS User ID
     */
    osUserId?: pulumi.Input<string>;
    /**
     * HPC Lite(New) OS User PWD
     */
    osUserPassword?: pulumi.Input<string>;
    /**
     * HPC Lite(New) Product Group ID
     */
    productGroupId?: pulumi.Input<string>;
    /**
     * HPC Lite(New) block Id
     */
    resourcePoolId?: pulumi.Input<string>;
    serverDetails?: pulumi.Input<pulumi.Input<inputs.HpcLiteNewServerDetail>[]>;
    /**
     * HPC Lite(New) Server Type
     */
    serverType?: pulumi.Input<string>;
    /**
     * HPC Lite(New) Service Zone ID
     */
    serviceZoneId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.HpcLiteNewTimeouts>;
    /**
     * HPC Lite(New) Vlan Pool CIDR
     */
    vlanPoolCidr?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HpcLiteNew resource.
 */
export interface HpcLiteNewArgs {
    /**
     * HPC Lite(New) CO Pool ID
     */
    coServiceZoneId: pulumi.Input<string>;
    /**
     * HPC Lite(New) Contract
     */
    contract: pulumi.Input<string>;
    /**
     * HPC Lite(New) HT Enabled
     */
    hyperThreadingEnabled: pulumi.Input<string>;
    /**
     * HPC Lite(New) Image ID
     */
    imageId: pulumi.Input<string>;
    /**
     * HPC Lite(New) Init Script
     */
    initScript?: pulumi.Input<string>;
    /**
     * HPC Lite(New) OS User ID
     */
    osUserId: pulumi.Input<string>;
    /**
     * HPC Lite(New) OS User PWD
     */
    osUserPassword: pulumi.Input<string>;
    /**
     * HPC Lite(New) Product Group ID
     */
    productGroupId: pulumi.Input<string>;
    /**
     * HPC Lite(New) block Id
     */
    resourcePoolId: pulumi.Input<string>;
    serverDetails: pulumi.Input<pulumi.Input<inputs.HpcLiteNewServerDetail>[]>;
    /**
     * HPC Lite(New) Server Type
     */
    serverType: pulumi.Input<string>;
    /**
     * HPC Lite(New) Service Zone ID
     */
    serviceZoneId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.HpcLiteNewTimeouts>;
    /**
     * HPC Lite(New) Vlan Pool CIDR
     */
    vlanPoolCidr: pulumi.Input<string>;
}
