// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Postgresql extends pulumi.CustomResource {
    /**
     * Get an existing Postgresql resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PostgresqlState, opts?: pulumi.CustomResourceOptions): Postgresql {
        return new Postgresql(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'samsungcloudplatform:index/postgresql:Postgresql';

    /**
     * Returns true if the given object is an instance of Postgresql.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Postgresql {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Postgresql.__pulumiType;
    }

    /**
     * Whether to use database audit logging.
     */
    public readonly auditEnabled!: pulumi.Output<boolean>;
    public readonly backup!: pulumi.Output<outputs.PostgresqlBackup | undefined>;
    /**
     * block storage.
     */
    public readonly blockStorages!: pulumi.Output<outputs.PostgresqlBlockStorage[]>;
    /**
     * Contract (None|1 Year|3 Year)
     */
    public readonly contractPeriod!: pulumi.Output<string>;
    /**
     * Postgresql encoding. (Only 'UTF8' for now)
     */
    public readonly databaseEncoding!: pulumi.Output<string>;
    /**
     * Postgresql locale. (Only 'C' for now)
     */
    public readonly databaseLocale!: pulumi.Output<string>;
    /**
     * Name of database. (only English alphabets or numbers between 3 and 20 characters)
     */
    public readonly databaseName!: pulumi.Output<string>;
    /**
     * Port number of database. (1024 to 65535)
     */
    public readonly databasePort!: pulumi.Output<number>;
    /**
     * User account id of database. (2 to 20 lowercase alphabets)
     */
    public readonly databaseUserName!: pulumi.Output<string>;
    /**
     * User account password of database.
     */
    public readonly databaseUserPassword!: pulumi.Output<string>;
    /**
     * Whether to use storage encryption.
     */
    public readonly encryptionEnabled!: pulumi.Output<boolean>;
    /**
     * Postgresql virtual server image id.
     */
    public readonly imageId!: pulumi.Output<string>;
    /**
     * Whether to use nat.
     */
    public readonly natEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * nat ip address
     */
    public /*out*/ readonly natIpAddress!: pulumi.Output<string>;
    /**
     * Public IP for NAT. If it is null, it is automatically allocated.
     */
    public readonly natPublicIpId!: pulumi.Output<string | undefined>;
    /**
     * Next contract (None|1 Year|3 Year)
     */
    public readonly nextContractPeriod!: pulumi.Output<string | undefined>;
    /**
     * Name of database cluster. (3 to 20 characters only)
     */
    public readonly postgresqlClusterName!: pulumi.Output<string>;
    /**
     * postgresql cluster state (RUNNING|STOPPED)
     */
    public readonly postgresqlClusterState!: pulumi.Output<string>;
    /**
     * postgresql servers (HA configuration when entering two server specifications)
     */
    public readonly postgresqlServers!: pulumi.Output<outputs.PostgresqlPostgresqlServer[]>;
    /**
     * Security-Group ids of this postgresql DB. Each security-group must be a valid security-group resource which is attached
     * to the VPC.
     */
    public readonly securityGroupIds!: pulumi.Output<string[]>;
    /**
     * Server type
     */
    public readonly serverType!: pulumi.Output<string>;
    /**
     * Service Zone Id
     */
    public readonly serviceZoneId!: pulumi.Output<string>;
    /**
     * Subnet id of this database server. Subnet must be a valid subnet resource which is attached to the VPC.
     */
    public readonly subnetId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.PostgresqlTimeouts | undefined>;
    /**
     * Timezone setting of this database.
     */
    public readonly timezone!: pulumi.Output<string>;
    /**
     * virtual ip address
     */
    public /*out*/ readonly virtualIpAddress!: pulumi.Output<string>;
    /**
     * vpc id
     */
    public /*out*/ readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a Postgresql resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PostgresqlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PostgresqlArgs | PostgresqlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PostgresqlState | undefined;
            resourceInputs["auditEnabled"] = state ? state.auditEnabled : undefined;
            resourceInputs["backup"] = state ? state.backup : undefined;
            resourceInputs["blockStorages"] = state ? state.blockStorages : undefined;
            resourceInputs["contractPeriod"] = state ? state.contractPeriod : undefined;
            resourceInputs["databaseEncoding"] = state ? state.databaseEncoding : undefined;
            resourceInputs["databaseLocale"] = state ? state.databaseLocale : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["databasePort"] = state ? state.databasePort : undefined;
            resourceInputs["databaseUserName"] = state ? state.databaseUserName : undefined;
            resourceInputs["databaseUserPassword"] = state ? state.databaseUserPassword : undefined;
            resourceInputs["encryptionEnabled"] = state ? state.encryptionEnabled : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["natEnabled"] = state ? state.natEnabled : undefined;
            resourceInputs["natIpAddress"] = state ? state.natIpAddress : undefined;
            resourceInputs["natPublicIpId"] = state ? state.natPublicIpId : undefined;
            resourceInputs["nextContractPeriod"] = state ? state.nextContractPeriod : undefined;
            resourceInputs["postgresqlClusterName"] = state ? state.postgresqlClusterName : undefined;
            resourceInputs["postgresqlClusterState"] = state ? state.postgresqlClusterState : undefined;
            resourceInputs["postgresqlServers"] = state ? state.postgresqlServers : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["serverType"] = state ? state.serverType : undefined;
            resourceInputs["serviceZoneId"] = state ? state.serviceZoneId : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
            resourceInputs["virtualIpAddress"] = state ? state.virtualIpAddress : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as PostgresqlArgs | undefined;
            if ((!args || args.auditEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'auditEnabled'");
            }
            if ((!args || args.blockStorages === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blockStorages'");
            }
            if ((!args || args.contractPeriod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contractPeriod'");
            }
            if ((!args || args.databaseEncoding === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseEncoding'");
            }
            if ((!args || args.databaseLocale === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseLocale'");
            }
            if ((!args || args.databaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if ((!args || args.databasePort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databasePort'");
            }
            if ((!args || args.databaseUserName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseUserName'");
            }
            if ((!args || args.databaseUserPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseUserPassword'");
            }
            if ((!args || args.encryptionEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'encryptionEnabled'");
            }
            if ((!args || args.imageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            if ((!args || args.postgresqlClusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'postgresqlClusterName'");
            }
            if ((!args || args.postgresqlClusterState === undefined) && !opts.urn) {
                throw new Error("Missing required property 'postgresqlClusterState'");
            }
            if ((!args || args.postgresqlServers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'postgresqlServers'");
            }
            if ((!args || args.securityGroupIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupIds'");
            }
            if ((!args || args.serverType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverType'");
            }
            if ((!args || args.serviceZoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceZoneId'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.timezone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timezone'");
            }
            resourceInputs["auditEnabled"] = args ? args.auditEnabled : undefined;
            resourceInputs["backup"] = args ? args.backup : undefined;
            resourceInputs["blockStorages"] = args ? args.blockStorages : undefined;
            resourceInputs["contractPeriod"] = args ? args.contractPeriod : undefined;
            resourceInputs["databaseEncoding"] = args ? args.databaseEncoding : undefined;
            resourceInputs["databaseLocale"] = args ? args.databaseLocale : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["databasePort"] = args ? args.databasePort : undefined;
            resourceInputs["databaseUserName"] = args ? args.databaseUserName : undefined;
            resourceInputs["databaseUserPassword"] = args?.databaseUserPassword ? pulumi.secret(args.databaseUserPassword) : undefined;
            resourceInputs["encryptionEnabled"] = args ? args.encryptionEnabled : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["natEnabled"] = args ? args.natEnabled : undefined;
            resourceInputs["natPublicIpId"] = args ? args.natPublicIpId : undefined;
            resourceInputs["nextContractPeriod"] = args ? args.nextContractPeriod : undefined;
            resourceInputs["postgresqlClusterName"] = args ? args.postgresqlClusterName : undefined;
            resourceInputs["postgresqlClusterState"] = args ? args.postgresqlClusterState : undefined;
            resourceInputs["postgresqlServers"] = args ? args.postgresqlServers : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["serverType"] = args ? args.serverType : undefined;
            resourceInputs["serviceZoneId"] = args ? args.serviceZoneId : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["natIpAddress"] = undefined /*out*/;
            resourceInputs["virtualIpAddress"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["databaseUserPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Postgresql.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Postgresql resources.
 */
export interface PostgresqlState {
    /**
     * Whether to use database audit logging.
     */
    auditEnabled?: pulumi.Input<boolean>;
    backup?: pulumi.Input<inputs.PostgresqlBackup>;
    /**
     * block storage.
     */
    blockStorages?: pulumi.Input<pulumi.Input<inputs.PostgresqlBlockStorage>[]>;
    /**
     * Contract (None|1 Year|3 Year)
     */
    contractPeriod?: pulumi.Input<string>;
    /**
     * Postgresql encoding. (Only 'UTF8' for now)
     */
    databaseEncoding?: pulumi.Input<string>;
    /**
     * Postgresql locale. (Only 'C' for now)
     */
    databaseLocale?: pulumi.Input<string>;
    /**
     * Name of database. (only English alphabets or numbers between 3 and 20 characters)
     */
    databaseName?: pulumi.Input<string>;
    /**
     * Port number of database. (1024 to 65535)
     */
    databasePort?: pulumi.Input<number>;
    /**
     * User account id of database. (2 to 20 lowercase alphabets)
     */
    databaseUserName?: pulumi.Input<string>;
    /**
     * User account password of database.
     */
    databaseUserPassword?: pulumi.Input<string>;
    /**
     * Whether to use storage encryption.
     */
    encryptionEnabled?: pulumi.Input<boolean>;
    /**
     * Postgresql virtual server image id.
     */
    imageId?: pulumi.Input<string>;
    /**
     * Whether to use nat.
     */
    natEnabled?: pulumi.Input<boolean>;
    /**
     * nat ip address
     */
    natIpAddress?: pulumi.Input<string>;
    /**
     * Public IP for NAT. If it is null, it is automatically allocated.
     */
    natPublicIpId?: pulumi.Input<string>;
    /**
     * Next contract (None|1 Year|3 Year)
     */
    nextContractPeriod?: pulumi.Input<string>;
    /**
     * Name of database cluster. (3 to 20 characters only)
     */
    postgresqlClusterName?: pulumi.Input<string>;
    /**
     * postgresql cluster state (RUNNING|STOPPED)
     */
    postgresqlClusterState?: pulumi.Input<string>;
    /**
     * postgresql servers (HA configuration when entering two server specifications)
     */
    postgresqlServers?: pulumi.Input<pulumi.Input<inputs.PostgresqlPostgresqlServer>[]>;
    /**
     * Security-Group ids of this postgresql DB. Each security-group must be a valid security-group resource which is attached
     * to the VPC.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Server type
     */
    serverType?: pulumi.Input<string>;
    /**
     * Service Zone Id
     */
    serviceZoneId?: pulumi.Input<string>;
    /**
     * Subnet id of this database server. Subnet must be a valid subnet resource which is attached to the VPC.
     */
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.PostgresqlTimeouts>;
    /**
     * Timezone setting of this database.
     */
    timezone?: pulumi.Input<string>;
    /**
     * virtual ip address
     */
    virtualIpAddress?: pulumi.Input<string>;
    /**
     * vpc id
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Postgresql resource.
 */
export interface PostgresqlArgs {
    /**
     * Whether to use database audit logging.
     */
    auditEnabled: pulumi.Input<boolean>;
    backup?: pulumi.Input<inputs.PostgresqlBackup>;
    /**
     * block storage.
     */
    blockStorages: pulumi.Input<pulumi.Input<inputs.PostgresqlBlockStorage>[]>;
    /**
     * Contract (None|1 Year|3 Year)
     */
    contractPeriod: pulumi.Input<string>;
    /**
     * Postgresql encoding. (Only 'UTF8' for now)
     */
    databaseEncoding: pulumi.Input<string>;
    /**
     * Postgresql locale. (Only 'C' for now)
     */
    databaseLocale: pulumi.Input<string>;
    /**
     * Name of database. (only English alphabets or numbers between 3 and 20 characters)
     */
    databaseName: pulumi.Input<string>;
    /**
     * Port number of database. (1024 to 65535)
     */
    databasePort: pulumi.Input<number>;
    /**
     * User account id of database. (2 to 20 lowercase alphabets)
     */
    databaseUserName: pulumi.Input<string>;
    /**
     * User account password of database.
     */
    databaseUserPassword: pulumi.Input<string>;
    /**
     * Whether to use storage encryption.
     */
    encryptionEnabled: pulumi.Input<boolean>;
    /**
     * Postgresql virtual server image id.
     */
    imageId: pulumi.Input<string>;
    /**
     * Whether to use nat.
     */
    natEnabled?: pulumi.Input<boolean>;
    /**
     * Public IP for NAT. If it is null, it is automatically allocated.
     */
    natPublicIpId?: pulumi.Input<string>;
    /**
     * Next contract (None|1 Year|3 Year)
     */
    nextContractPeriod?: pulumi.Input<string>;
    /**
     * Name of database cluster. (3 to 20 characters only)
     */
    postgresqlClusterName: pulumi.Input<string>;
    /**
     * postgresql cluster state (RUNNING|STOPPED)
     */
    postgresqlClusterState: pulumi.Input<string>;
    /**
     * postgresql servers (HA configuration when entering two server specifications)
     */
    postgresqlServers: pulumi.Input<pulumi.Input<inputs.PostgresqlPostgresqlServer>[]>;
    /**
     * Security-Group ids of this postgresql DB. Each security-group must be a valid security-group resource which is attached
     * to the VPC.
     */
    securityGroupIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Server type
     */
    serverType: pulumi.Input<string>;
    /**
     * Service Zone Id
     */
    serviceZoneId: pulumi.Input<string>;
    /**
     * Subnet id of this database server. Subnet must be a valid subnet resource which is attached to the VPC.
     */
    subnetId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.PostgresqlTimeouts>;
    /**
     * Timezone setting of this database.
     */
    timezone: pulumi.Input<string>;
}
