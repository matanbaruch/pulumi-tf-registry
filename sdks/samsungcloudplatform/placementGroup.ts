// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PlacementGroup extends pulumi.CustomResource {
    /**
     * Get an existing PlacementGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PlacementGroupState, opts?: pulumi.CustomResourceOptions): PlacementGroup {
        return new PlacementGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'samsungcloudplatform:index/placementGroup:PlacementGroup';

    /**
     * Returns true if the given object is an instance of PlacementGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PlacementGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PlacementGroup.__pulumiType;
    }

    /**
     * Availability Zone Name
     */
    public readonly availabilityZoneName!: pulumi.Output<string | undefined>;
    /**
     * Description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Placement Group Name
     */
    public readonly placementGroupName!: pulumi.Output<string>;
    /**
     * Service Zone Id
     */
    public readonly serviceZoneId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Virtual Server Id List
     */
    public readonly virtualServerIds!: pulumi.Output<string[]>;
    /**
     * Virtual Server Type
     */
    public readonly virtualServerType!: pulumi.Output<string>;

    /**
     * Create a PlacementGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PlacementGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PlacementGroupArgs | PlacementGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PlacementGroupState | undefined;
            resourceInputs["availabilityZoneName"] = state ? state.availabilityZoneName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["placementGroupName"] = state ? state.placementGroupName : undefined;
            resourceInputs["serviceZoneId"] = state ? state.serviceZoneId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["virtualServerIds"] = state ? state.virtualServerIds : undefined;
            resourceInputs["virtualServerType"] = state ? state.virtualServerType : undefined;
        } else {
            const args = argsOrState as PlacementGroupArgs | undefined;
            if ((!args || args.placementGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'placementGroupName'");
            }
            if ((!args || args.serviceZoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceZoneId'");
            }
            if ((!args || args.virtualServerIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualServerIds'");
            }
            if ((!args || args.virtualServerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualServerType'");
            }
            resourceInputs["availabilityZoneName"] = args ? args.availabilityZoneName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["placementGroupName"] = args ? args.placementGroupName : undefined;
            resourceInputs["serviceZoneId"] = args ? args.serviceZoneId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["virtualServerIds"] = args ? args.virtualServerIds : undefined;
            resourceInputs["virtualServerType"] = args ? args.virtualServerType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PlacementGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PlacementGroup resources.
 */
export interface PlacementGroupState {
    /**
     * Availability Zone Name
     */
    availabilityZoneName?: pulumi.Input<string>;
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * Placement Group Name
     */
    placementGroupName?: pulumi.Input<string>;
    /**
     * Service Zone Id
     */
    serviceZoneId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Virtual Server Id List
     */
    virtualServerIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Virtual Server Type
     */
    virtualServerType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PlacementGroup resource.
 */
export interface PlacementGroupArgs {
    /**
     * Availability Zone Name
     */
    availabilityZoneName?: pulumi.Input<string>;
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * Placement Group Name
     */
    placementGroupName: pulumi.Input<string>;
    /**
     * Service Zone Id
     */
    serviceZoneId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Virtual Server Id List
     */
    virtualServerIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Virtual Server Type
     */
    virtualServerType: pulumi.Input<string>;
}
