// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LbProfile extends pulumi.CustomResource {
    /**
     * Get an existing LbProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbProfileState, opts?: pulumi.CustomResourceOptions): LbProfile {
        return new LbProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'samsungcloudplatform:index/lbProfile:LbProfile';

    /**
     * Returns true if the given object is an instance of LbProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LbProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LbProfile.__pulumiType;
    }

    /**
     * Category of profile. (PERSISTENCE or APPLICATION)
     */
    public readonly category!: pulumi.Output<string>;
    /**
     * Protocol layer type (Only application category). (L4, L7)
     */
    public readonly layerType!: pulumi.Output<string | undefined>;
    /**
     * Target Load Balancer id
     */
    public readonly lbId!: pulumi.Output<string>;
    /**
     * Name of profile. (3 to 20 with dash in middle)
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Persistence type. (SOURCE_IP, COOKIE) (Only persistence category)
     */
    public readonly persistenceType!: pulumi.Output<string | undefined>;
    /**
     * HTTP redirection option.
     */
    public readonly redirectType!: pulumi.Output<string | undefined>;
    /**
     * Request header size (Only application category with L7 layer. Recommend: 1024). (1 to 65536)
     */
    public readonly requestHeaderSize!: pulumi.Output<number | undefined>;
    /**
     * Response header size (Only application category with L7 layer. Recommend: 4096). (1 to 65536)
     */
    public readonly responseHeaderSize!: pulumi.Output<number | undefined>;
    /**
     * Request header size (Only application category with L7 layer. Recommend: 60). (1 to 2147483647)
     */
    public readonly responseTimeout!: pulumi.Output<number | undefined>;
    /**
     * Session timeout value (Only application category. Recommend: 300). (30 to 5400)
     */
    public readonly sessionTimeout!: pulumi.Output<number | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Forwarded for value (Only application category with L7 layer). (None, INSERT, REPLACE)
     */
    public readonly xForwardedFor!: pulumi.Output<string | undefined>;

    /**
     * Create a LbProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LbProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbProfileArgs | LbProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LbProfileState | undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["layerType"] = state ? state.layerType : undefined;
            resourceInputs["lbId"] = state ? state.lbId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["persistenceType"] = state ? state.persistenceType : undefined;
            resourceInputs["redirectType"] = state ? state.redirectType : undefined;
            resourceInputs["requestHeaderSize"] = state ? state.requestHeaderSize : undefined;
            resourceInputs["responseHeaderSize"] = state ? state.responseHeaderSize : undefined;
            resourceInputs["responseTimeout"] = state ? state.responseTimeout : undefined;
            resourceInputs["sessionTimeout"] = state ? state.sessionTimeout : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["xForwardedFor"] = state ? state.xForwardedFor : undefined;
        } else {
            const args = argsOrState as LbProfileArgs | undefined;
            if ((!args || args.category === undefined) && !opts.urn) {
                throw new Error("Missing required property 'category'");
            }
            if ((!args || args.lbId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lbId'");
            }
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["layerType"] = args ? args.layerType : undefined;
            resourceInputs["lbId"] = args ? args.lbId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["persistenceType"] = args ? args.persistenceType : undefined;
            resourceInputs["redirectType"] = args ? args.redirectType : undefined;
            resourceInputs["requestHeaderSize"] = args ? args.requestHeaderSize : undefined;
            resourceInputs["responseHeaderSize"] = args ? args.responseHeaderSize : undefined;
            resourceInputs["responseTimeout"] = args ? args.responseTimeout : undefined;
            resourceInputs["sessionTimeout"] = args ? args.sessionTimeout : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["xForwardedFor"] = args ? args.xForwardedFor : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LbProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LbProfile resources.
 */
export interface LbProfileState {
    /**
     * Category of profile. (PERSISTENCE or APPLICATION)
     */
    category?: pulumi.Input<string>;
    /**
     * Protocol layer type (Only application category). (L4, L7)
     */
    layerType?: pulumi.Input<string>;
    /**
     * Target Load Balancer id
     */
    lbId?: pulumi.Input<string>;
    /**
     * Name of profile. (3 to 20 with dash in middle)
     */
    name?: pulumi.Input<string>;
    /**
     * Persistence type. (SOURCE_IP, COOKIE) (Only persistence category)
     */
    persistenceType?: pulumi.Input<string>;
    /**
     * HTTP redirection option.
     */
    redirectType?: pulumi.Input<string>;
    /**
     * Request header size (Only application category with L7 layer. Recommend: 1024). (1 to 65536)
     */
    requestHeaderSize?: pulumi.Input<number>;
    /**
     * Response header size (Only application category with L7 layer. Recommend: 4096). (1 to 65536)
     */
    responseHeaderSize?: pulumi.Input<number>;
    /**
     * Request header size (Only application category with L7 layer. Recommend: 60). (1 to 2147483647)
     */
    responseTimeout?: pulumi.Input<number>;
    /**
     * Session timeout value (Only application category. Recommend: 300). (30 to 5400)
     */
    sessionTimeout?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Forwarded for value (Only application category with L7 layer). (None, INSERT, REPLACE)
     */
    xForwardedFor?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LbProfile resource.
 */
export interface LbProfileArgs {
    /**
     * Category of profile. (PERSISTENCE or APPLICATION)
     */
    category: pulumi.Input<string>;
    /**
     * Protocol layer type (Only application category). (L4, L7)
     */
    layerType?: pulumi.Input<string>;
    /**
     * Target Load Balancer id
     */
    lbId: pulumi.Input<string>;
    /**
     * Name of profile. (3 to 20 with dash in middle)
     */
    name?: pulumi.Input<string>;
    /**
     * Persistence type. (SOURCE_IP, COOKIE) (Only persistence category)
     */
    persistenceType?: pulumi.Input<string>;
    /**
     * HTTP redirection option.
     */
    redirectType?: pulumi.Input<string>;
    /**
     * Request header size (Only application category with L7 layer. Recommend: 1024). (1 to 65536)
     */
    requestHeaderSize?: pulumi.Input<number>;
    /**
     * Response header size (Only application category with L7 layer. Recommend: 4096). (1 to 65536)
     */
    responseHeaderSize?: pulumi.Input<number>;
    /**
     * Request header size (Only application category with L7 layer. Recommend: 60). (1 to 2147483647)
     */
    responseTimeout?: pulumi.Input<number>;
    /**
     * Session timeout value (Only application category. Recommend: 300). (30 to 5400)
     */
    sessionTimeout?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Forwarded for value (Only application category with L7 layer). (None, INSERT, REPLACE)
     */
    xForwardedFor?: pulumi.Input<string>;
}
