// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLoggingaudits(args?: GetLoggingauditsArgs, opts?: pulumi.InvokeOptions): Promise<GetLoggingauditsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("samsungcloudplatform:index/getLoggingaudits:getLoggingaudits", {
        "filters": args.filters,
        "id": args.id,
        "objectId": args.objectId,
        "objectName": args.objectName,
        "page": args.page,
        "productOffering": args.productOffering,
        "requestClientType": args.requestClientType,
        "requestEndDt": args.requestEndDt,
        "requestStartDt": args.requestStartDt,
        "size": args.size,
        "sorts": args.sorts,
        "state": args.state,
        "targetProductNames": args.targetProductNames,
        "targetRegions": args.targetRegions,
        "targetResources": args.targetResources,
        "userName": args.userName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLoggingaudits.
 */
export interface GetLoggingauditsArgs {
    filters?: inputs.GetLoggingauditsFilter[];
    id?: string;
    objectId?: string;
    objectName?: string;
    page?: number;
    productOffering?: string;
    requestClientType?: string;
    requestEndDt?: string;
    requestStartDt?: string;
    size?: number;
    sorts?: string[];
    state?: string;
    targetProductNames?: string[];
    targetRegions?: string[];
    targetResources?: string[];
    userName?: string;
}

/**
 * A collection of values returned by getLoggingaudits.
 */
export interface GetLoggingauditsResult {
    readonly contents: outputs.GetLoggingauditsContent[];
    readonly filters?: outputs.GetLoggingauditsFilter[];
    readonly id: string;
    readonly objectId?: string;
    readonly objectName?: string;
    readonly page?: number;
    readonly productOffering?: string;
    readonly requestClientType?: string;
    readonly requestEndDt?: string;
    readonly requestStartDt?: string;
    readonly size?: number;
    readonly sorts?: string[];
    readonly state?: string;
    readonly targetProductNames?: string[];
    readonly targetRegions?: string[];
    readonly targetResources?: string[];
    readonly totalCount: number;
    readonly userName?: string;
}
export function getLoggingauditsOutput(args?: GetLoggingauditsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLoggingauditsResult> {
    return pulumi.output(args).apply((a: any) => getLoggingaudits(a, opts))
}

/**
 * A collection of arguments for invoking getLoggingaudits.
 */
export interface GetLoggingauditsOutputArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.GetLoggingauditsFilterArgs>[]>;
    id?: pulumi.Input<string>;
    objectId?: pulumi.Input<string>;
    objectName?: pulumi.Input<string>;
    page?: pulumi.Input<number>;
    productOffering?: pulumi.Input<string>;
    requestClientType?: pulumi.Input<string>;
    requestEndDt?: pulumi.Input<string>;
    requestStartDt?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    sorts?: pulumi.Input<pulumi.Input<string>[]>;
    state?: pulumi.Input<string>;
    targetProductNames?: pulumi.Input<pulumi.Input<string>[]>;
    targetRegions?: pulumi.Input<pulumi.Input<string>[]>;
    targetResources?: pulumi.Input<pulumi.Input<string>[]>;
    userName?: pulumi.Input<string>;
}
