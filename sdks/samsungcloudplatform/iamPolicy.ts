// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IamPolicy extends pulumi.CustomResource {
    /**
     * Get an existing IamPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IamPolicyState, opts?: pulumi.CustomResourceOptions): IamPolicy {
        return new IamPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'samsungcloudplatform:index/iamPolicy:IamPolicy';

    /**
     * Returns true if the given object is an instance of IamPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IamPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IamPolicy.__pulumiType;
    }

    /**
     * Creator's ID
     */
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * Creator's email
     */
    public /*out*/ readonly createdByEmail!: pulumi.Output<string>;
    /**
     * Creator's name
     */
    public /*out*/ readonly createdByName!: pulumi.Output<string>;
    /**
     * Created date
     */
    public /*out*/ readonly createdDt!: pulumi.Output<string>;
    /**
     * Description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Modifier's ID
     */
    public /*out*/ readonly modifiedBy!: pulumi.Output<string>;
    /**
     * Modifier's email
     */
    public /*out*/ readonly modifiedByEmail!: pulumi.Output<string>;
    /**
     * Modifier's name
     */
    public /*out*/ readonly modifiedByName!: pulumi.Output<string>;
    /**
     * Modified date
     */
    public /*out*/ readonly modifiedDt!: pulumi.Output<string>;
    /**
     * Policy ID
     */
    public /*out*/ readonly policyId!: pulumi.Output<string>;
    /**
     * Policy json statement
     */
    public readonly policyJson!: pulumi.Output<string>;
    /**
     * Policy name
     */
    public readonly policyName!: pulumi.Output<string>;
    /**
     * Policy principal count
     */
    public /*out*/ readonly policyPrincipalCount!: pulumi.Output<number>;
    /**
     * Policy SRN
     */
    public /*out*/ readonly policySrn!: pulumi.Output<string>;
    /**
     * Policy type
     */
    public /*out*/ readonly policyType!: pulumi.Output<string>;
    /**
     * Policy version
     */
    public /*out*/ readonly policyVersion!: pulumi.Output<string>;
    /**
     * Policy principal list
     */
    public readonly principals!: pulumi.Output<outputs.IamPolicyPrincipal[] | undefined>;
    /**
     * Project ID
     */
    public /*out*/ readonly projectId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a IamPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IamPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IamPolicyArgs | IamPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IamPolicyState | undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["createdByEmail"] = state ? state.createdByEmail : undefined;
            resourceInputs["createdByName"] = state ? state.createdByName : undefined;
            resourceInputs["createdDt"] = state ? state.createdDt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["modifiedBy"] = state ? state.modifiedBy : undefined;
            resourceInputs["modifiedByEmail"] = state ? state.modifiedByEmail : undefined;
            resourceInputs["modifiedByName"] = state ? state.modifiedByName : undefined;
            resourceInputs["modifiedDt"] = state ? state.modifiedDt : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["policyJson"] = state ? state.policyJson : undefined;
            resourceInputs["policyName"] = state ? state.policyName : undefined;
            resourceInputs["policyPrincipalCount"] = state ? state.policyPrincipalCount : undefined;
            resourceInputs["policySrn"] = state ? state.policySrn : undefined;
            resourceInputs["policyType"] = state ? state.policyType : undefined;
            resourceInputs["policyVersion"] = state ? state.policyVersion : undefined;
            resourceInputs["principals"] = state ? state.principals : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as IamPolicyArgs | undefined;
            if ((!args || args.policyJson === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyJson'");
            }
            if ((!args || args.policyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["policyJson"] = args ? args.policyJson : undefined;
            resourceInputs["policyName"] = args ? args.policyName : undefined;
            resourceInputs["principals"] = args ? args.principals : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["createdByEmail"] = undefined /*out*/;
            resourceInputs["createdByName"] = undefined /*out*/;
            resourceInputs["createdDt"] = undefined /*out*/;
            resourceInputs["modifiedBy"] = undefined /*out*/;
            resourceInputs["modifiedByEmail"] = undefined /*out*/;
            resourceInputs["modifiedByName"] = undefined /*out*/;
            resourceInputs["modifiedDt"] = undefined /*out*/;
            resourceInputs["policyId"] = undefined /*out*/;
            resourceInputs["policyPrincipalCount"] = undefined /*out*/;
            resourceInputs["policySrn"] = undefined /*out*/;
            resourceInputs["policyType"] = undefined /*out*/;
            resourceInputs["policyVersion"] = undefined /*out*/;
            resourceInputs["projectId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IamPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IamPolicy resources.
 */
export interface IamPolicyState {
    /**
     * Creator's ID
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Creator's email
     */
    createdByEmail?: pulumi.Input<string>;
    /**
     * Creator's name
     */
    createdByName?: pulumi.Input<string>;
    /**
     * Created date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * Modifier's ID
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modifier's email
     */
    modifiedByEmail?: pulumi.Input<string>;
    /**
     * Modifier's name
     */
    modifiedByName?: pulumi.Input<string>;
    /**
     * Modified date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * Policy ID
     */
    policyId?: pulumi.Input<string>;
    /**
     * Policy json statement
     */
    policyJson?: pulumi.Input<string>;
    /**
     * Policy name
     */
    policyName?: pulumi.Input<string>;
    /**
     * Policy principal count
     */
    policyPrincipalCount?: pulumi.Input<number>;
    /**
     * Policy SRN
     */
    policySrn?: pulumi.Input<string>;
    /**
     * Policy type
     */
    policyType?: pulumi.Input<string>;
    /**
     * Policy version
     */
    policyVersion?: pulumi.Input<string>;
    /**
     * Policy principal list
     */
    principals?: pulumi.Input<pulumi.Input<inputs.IamPolicyPrincipal>[]>;
    /**
     * Project ID
     */
    projectId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a IamPolicy resource.
 */
export interface IamPolicyArgs {
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * Policy json statement
     */
    policyJson: pulumi.Input<string>;
    /**
     * Policy name
     */
    policyName: pulumi.Input<string>;
    /**
     * Policy principal list
     */
    principals?: pulumi.Input<pulumi.Input<inputs.IamPolicyPrincipal>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
