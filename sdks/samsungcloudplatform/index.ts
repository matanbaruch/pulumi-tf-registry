// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AutoScalingGroupArgs, AutoScalingGroupState } from "./autoScalingGroup";
export type AutoScalingGroup = import("./autoScalingGroup").AutoScalingGroup;
export const AutoScalingGroup: typeof import("./autoScalingGroup").AutoScalingGroup = null as any;
utilities.lazyLoad(exports, ["AutoScalingGroup"], () => require("./autoScalingGroup"));

export { AutoScalingGroupLoadBalancerArgs, AutoScalingGroupLoadBalancerState } from "./autoScalingGroupLoadBalancer";
export type AutoScalingGroupLoadBalancer = import("./autoScalingGroupLoadBalancer").AutoScalingGroupLoadBalancer;
export const AutoScalingGroupLoadBalancer: typeof import("./autoScalingGroupLoadBalancer").AutoScalingGroupLoadBalancer = null as any;
utilities.lazyLoad(exports, ["AutoScalingGroupLoadBalancer"], () => require("./autoScalingGroupLoadBalancer"));

export { AutoScalingGroupPolicyArgs, AutoScalingGroupPolicyState } from "./autoScalingGroupPolicy";
export type AutoScalingGroupPolicy = import("./autoScalingGroupPolicy").AutoScalingGroupPolicy;
export const AutoScalingGroupPolicy: typeof import("./autoScalingGroupPolicy").AutoScalingGroupPolicy = null as any;
utilities.lazyLoad(exports, ["AutoScalingGroupPolicy"], () => require("./autoScalingGroupPolicy"));

export { BackupArgs, BackupState } from "./backup";
export type Backup = import("./backup").Backup;
export const Backup: typeof import("./backup").Backup = null as any;
utilities.lazyLoad(exports, ["Backup"], () => require("./backup"));

export { BlockStorageArgs, BlockStorageState } from "./blockStorage";
export type BlockStorage = import("./blockStorage").BlockStorage;
export const BlockStorage: typeof import("./blockStorage").BlockStorage = null as any;
utilities.lazyLoad(exports, ["BlockStorage"], () => require("./blockStorage"));

export { BmBlockStorageArgs, BmBlockStorageState } from "./bmBlockStorage";
export type BmBlockStorage = import("./bmBlockStorage").BmBlockStorage;
export const BmBlockStorage: typeof import("./bmBlockStorage").BmBlockStorage = null as any;
utilities.lazyLoad(exports, ["BmBlockStorage"], () => require("./bmBlockStorage"));

export { BmServerArgs, BmServerState } from "./bmServer";
export type BmServer = import("./bmServer").BmServer;
export const BmServer: typeof import("./bmServer").BmServer = null as any;
utilities.lazyLoad(exports, ["BmServer"], () => require("./bmServer"));

export { BmServerVdcArgs, BmServerVdcState } from "./bmServerVdc";
export type BmServerVdc = import("./bmServerVdc").BmServerVdc;
export const BmServerVdc: typeof import("./bmServerVdc").BmServerVdc = null as any;
utilities.lazyLoad(exports, ["BmServerVdc"], () => require("./bmServerVdc"));

export { CustomImageArgs, CustomImageState } from "./customImage";
export type CustomImage = import("./customImage").CustomImage;
export const CustomImage: typeof import("./customImage").CustomImage = null as any;
utilities.lazyLoad(exports, ["CustomImage"], () => require("./customImage"));

export { DconVpcConnectionArgs, DconVpcConnectionState } from "./dconVpcConnection";
export type DconVpcConnection = import("./dconVpcConnection").DconVpcConnection;
export const DconVpcConnection: typeof import("./dconVpcConnection").DconVpcConnection = null as any;
utilities.lazyLoad(exports, ["DconVpcConnection"], () => require("./dconVpcConnection"));

export { DirectConnectArgs, DirectConnectState } from "./directConnect";
export type DirectConnect = import("./directConnect").DirectConnect;
export const DirectConnect: typeof import("./directConnect").DirectConnect = null as any;
utilities.lazyLoad(exports, ["DirectConnect"], () => require("./directConnect"));

export { DirectConnectRoutingArgs, DirectConnectRoutingState } from "./directConnectRouting";
export type DirectConnectRouting = import("./directConnectRouting").DirectConnectRouting;
export const DirectConnectRouting: typeof import("./directConnectRouting").DirectConnectRouting = null as any;
utilities.lazyLoad(exports, ["DirectConnectRouting"], () => require("./directConnectRouting"));

export { DnsDomainArgs, DnsDomainState } from "./dnsDomain";
export type DnsDomain = import("./dnsDomain").DnsDomain;
export const DnsDomain: typeof import("./dnsDomain").DnsDomain = null as any;
utilities.lazyLoad(exports, ["DnsDomain"], () => require("./dnsDomain"));

export { DnsRecordArgs, DnsRecordState } from "./dnsRecord";
export type DnsRecord = import("./dnsRecord").DnsRecord;
export const DnsRecord: typeof import("./dnsRecord").DnsRecord = null as any;
utilities.lazyLoad(exports, ["DnsRecord"], () => require("./dnsRecord"));

export { EndpointArgs, EndpointState } from "./endpoint";
export type Endpoint = import("./endpoint").Endpoint;
export const Endpoint: typeof import("./endpoint").Endpoint = null as any;
utilities.lazyLoad(exports, ["Endpoint"], () => require("./endpoint"));

export { EpasArgs, EpasState } from "./epas";
export type Epas = import("./epas").Epas;
export const Epas: typeof import("./epas").Epas = null as any;
utilities.lazyLoad(exports, ["Epas"], () => require("./epas"));

export { FileStorageArgs, FileStorageState } from "./fileStorage";
export type FileStorage = import("./fileStorage").FileStorage;
export const FileStorage: typeof import("./fileStorage").FileStorage = null as any;
utilities.lazyLoad(exports, ["FileStorage"], () => require("./fileStorage"));

export { FirewallArgs, FirewallState } from "./firewall";
export type Firewall = import("./firewall").Firewall;
export const Firewall: typeof import("./firewall").Firewall = null as any;
utilities.lazyLoad(exports, ["Firewall"], () => require("./firewall"));

export { FirewallBulkRuleArgs, FirewallBulkRuleState } from "./firewallBulkRule";
export type FirewallBulkRule = import("./firewallBulkRule").FirewallBulkRule;
export const FirewallBulkRule: typeof import("./firewallBulkRule").FirewallBulkRule = null as any;
utilities.lazyLoad(exports, ["FirewallBulkRule"], () => require("./firewallBulkRule"));

export { FirewallLogstorageArgs, FirewallLogstorageState } from "./firewallLogstorage";
export type FirewallLogstorage = import("./firewallLogstorage").FirewallLogstorage;
export const FirewallLogstorage: typeof import("./firewallLogstorage").FirewallLogstorage = null as any;
utilities.lazyLoad(exports, ["FirewallLogstorage"], () => require("./firewallLogstorage"));

export { FirewallRuleArgs, FirewallRuleState } from "./firewallRule";
export type FirewallRule = import("./firewallRule").FirewallRule;
export const FirewallRule: typeof import("./firewallRule").FirewallRule = null as any;
utilities.lazyLoad(exports, ["FirewallRule"], () => require("./firewallRule"));

export { GetAutoScalingGroupArgs, GetAutoScalingGroupResult, GetAutoScalingGroupOutputArgs } from "./getAutoScalingGroup";
export const getAutoScalingGroup: typeof import("./getAutoScalingGroup").getAutoScalingGroup = null as any;
export const getAutoScalingGroupOutput: typeof import("./getAutoScalingGroup").getAutoScalingGroupOutput = null as any;
utilities.lazyLoad(exports, ["getAutoScalingGroup","getAutoScalingGroupOutput"], () => require("./getAutoScalingGroup"));

export { GetAutoScalingGroupPoliciesArgs, GetAutoScalingGroupPoliciesResult, GetAutoScalingGroupPoliciesOutputArgs } from "./getAutoScalingGroupPolicies";
export const getAutoScalingGroupPolicies: typeof import("./getAutoScalingGroupPolicies").getAutoScalingGroupPolicies = null as any;
export const getAutoScalingGroupPoliciesOutput: typeof import("./getAutoScalingGroupPolicies").getAutoScalingGroupPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getAutoScalingGroupPolicies","getAutoScalingGroupPoliciesOutput"], () => require("./getAutoScalingGroupPolicies"));

export { GetAutoScalingGroupPolicyArgs, GetAutoScalingGroupPolicyResult, GetAutoScalingGroupPolicyOutputArgs } from "./getAutoScalingGroupPolicy";
export const getAutoScalingGroupPolicy: typeof import("./getAutoScalingGroupPolicy").getAutoScalingGroupPolicy = null as any;
export const getAutoScalingGroupPolicyOutput: typeof import("./getAutoScalingGroupPolicy").getAutoScalingGroupPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAutoScalingGroupPolicy","getAutoScalingGroupPolicyOutput"], () => require("./getAutoScalingGroupPolicy"));

export { GetAutoScalingGroupVirtualServersArgs, GetAutoScalingGroupVirtualServersResult, GetAutoScalingGroupVirtualServersOutputArgs } from "./getAutoScalingGroupVirtualServers";
export const getAutoScalingGroupVirtualServers: typeof import("./getAutoScalingGroupVirtualServers").getAutoScalingGroupVirtualServers = null as any;
export const getAutoScalingGroupVirtualServersOutput: typeof import("./getAutoScalingGroupVirtualServers").getAutoScalingGroupVirtualServersOutput = null as any;
utilities.lazyLoad(exports, ["getAutoScalingGroupVirtualServers","getAutoScalingGroupVirtualServersOutput"], () => require("./getAutoScalingGroupVirtualServers"));

export { GetAutoScalingGroupsArgs, GetAutoScalingGroupsResult, GetAutoScalingGroupsOutputArgs } from "./getAutoScalingGroups";
export const getAutoScalingGroups: typeof import("./getAutoScalingGroups").getAutoScalingGroups = null as any;
export const getAutoScalingGroupsOutput: typeof import("./getAutoScalingGroups").getAutoScalingGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getAutoScalingGroups","getAutoScalingGroupsOutput"], () => require("./getAutoScalingGroups"));

export { GetBackupsArgs, GetBackupsResult, GetBackupsOutputArgs } from "./getBackups";
export const getBackups: typeof import("./getBackups").getBackups = null as any;
export const getBackupsOutput: typeof import("./getBackups").getBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getBackups","getBackupsOutput"], () => require("./getBackups"));

export { GetBlockStoragesArgs, GetBlockStoragesResult, GetBlockStoragesOutputArgs } from "./getBlockStorages";
export const getBlockStorages: typeof import("./getBlockStorages").getBlockStorages = null as any;
export const getBlockStoragesOutput: typeof import("./getBlockStorages").getBlockStoragesOutput = null as any;
utilities.lazyLoad(exports, ["getBlockStorages","getBlockStoragesOutput"], () => require("./getBlockStorages"));

export { GetBmBlockStorageArgs, GetBmBlockStorageResult, GetBmBlockStorageOutputArgs } from "./getBmBlockStorage";
export const getBmBlockStorage: typeof import("./getBmBlockStorage").getBmBlockStorage = null as any;
export const getBmBlockStorageOutput: typeof import("./getBmBlockStorage").getBmBlockStorageOutput = null as any;
utilities.lazyLoad(exports, ["getBmBlockStorage","getBmBlockStorageOutput"], () => require("./getBmBlockStorage"));

export { GetBmBlockStoragesArgs, GetBmBlockStoragesResult, GetBmBlockStoragesOutputArgs } from "./getBmBlockStorages";
export const getBmBlockStorages: typeof import("./getBmBlockStorages").getBmBlockStorages = null as any;
export const getBmBlockStoragesOutput: typeof import("./getBmBlockStorages").getBmBlockStoragesOutput = null as any;
utilities.lazyLoad(exports, ["getBmBlockStorages","getBmBlockStoragesOutput"], () => require("./getBmBlockStorages"));

export { GetBmServerArgs, GetBmServerResult, GetBmServerOutputArgs } from "./getBmServer";
export const getBmServer: typeof import("./getBmServer").getBmServer = null as any;
export const getBmServerOutput: typeof import("./getBmServer").getBmServerOutput = null as any;
utilities.lazyLoad(exports, ["getBmServer","getBmServerOutput"], () => require("./getBmServer"));

export { GetBmServersArgs, GetBmServersResult, GetBmServersOutputArgs } from "./getBmServers";
export const getBmServers: typeof import("./getBmServers").getBmServers = null as any;
export const getBmServersOutput: typeof import("./getBmServers").getBmServersOutput = null as any;
utilities.lazyLoad(exports, ["getBmServers","getBmServersOutput"], () => require("./getBmServers"));

export { GetBmVdcServerArgs, GetBmVdcServerResult, GetBmVdcServerOutputArgs } from "./getBmVdcServer";
export const getBmVdcServer: typeof import("./getBmVdcServer").getBmVdcServer = null as any;
export const getBmVdcServerOutput: typeof import("./getBmVdcServer").getBmVdcServerOutput = null as any;
utilities.lazyLoad(exports, ["getBmVdcServer","getBmVdcServerOutput"], () => require("./getBmVdcServer"));

export { GetBmVdcServersArgs, GetBmVdcServersResult, GetBmVdcServersOutputArgs } from "./getBmVdcServers";
export const getBmVdcServers: typeof import("./getBmVdcServers").getBmVdcServers = null as any;
export const getBmVdcServersOutput: typeof import("./getBmVdcServers").getBmVdcServersOutput = null as any;
utilities.lazyLoad(exports, ["getBmVdcServers","getBmVdcServersOutput"], () => require("./getBmVdcServers"));

export { GetCustomImageArgs, GetCustomImageResult, GetCustomImageOutputArgs } from "./getCustomImage";
export const getCustomImage: typeof import("./getCustomImage").getCustomImage = null as any;
export const getCustomImageOutput: typeof import("./getCustomImage").getCustomImageOutput = null as any;
utilities.lazyLoad(exports, ["getCustomImage","getCustomImageOutput"], () => require("./getCustomImage"));

export { GetCustomImagesArgs, GetCustomImagesResult, GetCustomImagesOutputArgs } from "./getCustomImages";
export const getCustomImages: typeof import("./getCustomImages").getCustomImages = null as any;
export const getCustomImagesOutput: typeof import("./getCustomImages").getCustomImagesOutput = null as any;
utilities.lazyLoad(exports, ["getCustomImages","getCustomImagesOutput"], () => require("./getCustomImages"));

export { GetDconVpcConnectionsArgs, GetDconVpcConnectionsResult, GetDconVpcConnectionsOutputArgs } from "./getDconVpcConnections";
export const getDconVpcConnections: typeof import("./getDconVpcConnections").getDconVpcConnections = null as any;
export const getDconVpcConnectionsOutput: typeof import("./getDconVpcConnections").getDconVpcConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getDconVpcConnections","getDconVpcConnectionsOutput"], () => require("./getDconVpcConnections"));

export { GetDirectConnectRoutingRoutesArgs, GetDirectConnectRoutingRoutesResult, GetDirectConnectRoutingRoutesOutputArgs } from "./getDirectConnectRoutingRoutes";
export const getDirectConnectRoutingRoutes: typeof import("./getDirectConnectRoutingRoutes").getDirectConnectRoutingRoutes = null as any;
export const getDirectConnectRoutingRoutesOutput: typeof import("./getDirectConnectRoutingRoutes").getDirectConnectRoutingRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getDirectConnectRoutingRoutes","getDirectConnectRoutingRoutesOutput"], () => require("./getDirectConnectRoutingRoutes"));

export { GetDirectConnectRoutingRulesArgs, GetDirectConnectRoutingRulesResult, GetDirectConnectRoutingRulesOutputArgs } from "./getDirectConnectRoutingRules";
export const getDirectConnectRoutingRules: typeof import("./getDirectConnectRoutingRules").getDirectConnectRoutingRules = null as any;
export const getDirectConnectRoutingRulesOutput: typeof import("./getDirectConnectRoutingRules").getDirectConnectRoutingRulesOutput = null as any;
utilities.lazyLoad(exports, ["getDirectConnectRoutingRules","getDirectConnectRoutingRulesOutput"], () => require("./getDirectConnectRoutingRules"));

export { GetDirectConnectRoutingTablesArgs, GetDirectConnectRoutingTablesResult, GetDirectConnectRoutingTablesOutputArgs } from "./getDirectConnectRoutingTables";
export const getDirectConnectRoutingTables: typeof import("./getDirectConnectRoutingTables").getDirectConnectRoutingTables = null as any;
export const getDirectConnectRoutingTablesOutput: typeof import("./getDirectConnectRoutingTables").getDirectConnectRoutingTablesOutput = null as any;
utilities.lazyLoad(exports, ["getDirectConnectRoutingTables","getDirectConnectRoutingTablesOutput"], () => require("./getDirectConnectRoutingTables"));

export { GetDirectConnectsArgs, GetDirectConnectsResult, GetDirectConnectsOutputArgs } from "./getDirectConnects";
export const getDirectConnects: typeof import("./getDirectConnects").getDirectConnects = null as any;
export const getDirectConnectsOutput: typeof import("./getDirectConnects").getDirectConnectsOutput = null as any;
utilities.lazyLoad(exports, ["getDirectConnects","getDirectConnectsOutput"], () => require("./getDirectConnects"));

export { GetDnsDomainsArgs, GetDnsDomainsResult, GetDnsDomainsOutputArgs } from "./getDnsDomains";
export const getDnsDomains: typeof import("./getDnsDomains").getDnsDomains = null as any;
export const getDnsDomainsOutput: typeof import("./getDnsDomains").getDnsDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getDnsDomains","getDnsDomainsOutput"], () => require("./getDnsDomains"));

export { GetDnsRecordsArgs, GetDnsRecordsResult, GetDnsRecordsOutputArgs } from "./getDnsRecords";
export const getDnsRecords: typeof import("./getDnsRecords").getDnsRecords = null as any;
export const getDnsRecordsOutput: typeof import("./getDnsRecords").getDnsRecordsOutput = null as any;
utilities.lazyLoad(exports, ["getDnsRecords","getDnsRecordsOutput"], () => require("./getDnsRecords"));

export { GetEndpointArgs, GetEndpointResult, GetEndpointOutputArgs } from "./getEndpoint";
export const getEndpoint: typeof import("./getEndpoint").getEndpoint = null as any;
export const getEndpointOutput: typeof import("./getEndpoint").getEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getEndpoint","getEndpointOutput"], () => require("./getEndpoint"));

export { GetEndpointsArgs, GetEndpointsResult, GetEndpointsOutputArgs } from "./getEndpoints";
export const getEndpoints: typeof import("./getEndpoints").getEndpoints = null as any;
export const getEndpointsOutput: typeof import("./getEndpoints").getEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getEndpoints","getEndpointsOutput"], () => require("./getEndpoints"));

export { GetEpasArgs, GetEpasResult, GetEpasOutputArgs } from "./getEpas";
export const getEpas: typeof import("./getEpas").getEpas = null as any;
export const getEpasOutput: typeof import("./getEpas").getEpasOutput = null as any;
utilities.lazyLoad(exports, ["getEpas","getEpasOutput"], () => require("./getEpas"));

export { GetEpassArgs, GetEpassResult, GetEpassOutputArgs } from "./getEpass";
export const getEpass: typeof import("./getEpass").getEpass = null as any;
export const getEpassOutput: typeof import("./getEpass").getEpassOutput = null as any;
utilities.lazyLoad(exports, ["getEpass","getEpassOutput"], () => require("./getEpass"));

export { GetFileStoragesArgs, GetFileStoragesResult, GetFileStoragesOutputArgs } from "./getFileStorages";
export const getFileStorages: typeof import("./getFileStorages").getFileStorages = null as any;
export const getFileStoragesOutput: typeof import("./getFileStorages").getFileStoragesOutput = null as any;
utilities.lazyLoad(exports, ["getFileStorages","getFileStoragesOutput"], () => require("./getFileStorages"));

export { GetFirewallArgs, GetFirewallResult, GetFirewallOutputArgs } from "./getFirewall";
export const getFirewall: typeof import("./getFirewall").getFirewall = null as any;
export const getFirewallOutput: typeof import("./getFirewall").getFirewallOutput = null as any;
utilities.lazyLoad(exports, ["getFirewall","getFirewallOutput"], () => require("./getFirewall"));

export { GetFirewallsArgs, GetFirewallsResult, GetFirewallsOutputArgs } from "./getFirewalls";
export const getFirewalls: typeof import("./getFirewalls").getFirewalls = null as any;
export const getFirewallsOutput: typeof import("./getFirewalls").getFirewallsOutput = null as any;
utilities.lazyLoad(exports, ["getFirewalls","getFirewallsOutput"], () => require("./getFirewalls"));

export { GetGslbResourcesArgs, GetGslbResourcesResult, GetGslbResourcesOutputArgs } from "./getGslbResources";
export const getGslbResources: typeof import("./getGslbResources").getGslbResources = null as any;
export const getGslbResourcesOutput: typeof import("./getGslbResources").getGslbResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getGslbResources","getGslbResourcesOutput"], () => require("./getGslbResources"));

export { GetGslbsArgs, GetGslbsResult, GetGslbsOutputArgs } from "./getGslbs";
export const getGslbs: typeof import("./getGslbs").getGslbs = null as any;
export const getGslbsOutput: typeof import("./getGslbs").getGslbsOutput = null as any;
utilities.lazyLoad(exports, ["getGslbs","getGslbsOutput"], () => require("./getGslbs"));

export { GetIamAccessKeysArgs, GetIamAccessKeysResult, GetIamAccessKeysOutputArgs } from "./getIamAccessKeys";
export const getIamAccessKeys: typeof import("./getIamAccessKeys").getIamAccessKeys = null as any;
export const getIamAccessKeysOutput: typeof import("./getIamAccessKeys").getIamAccessKeysOutput = null as any;
utilities.lazyLoad(exports, ["getIamAccessKeys","getIamAccessKeysOutput"], () => require("./getIamAccessKeys"));

export { GetIamGroupArgs, GetIamGroupResult, GetIamGroupOutputArgs } from "./getIamGroup";
export const getIamGroup: typeof import("./getIamGroup").getIamGroup = null as any;
export const getIamGroupOutput: typeof import("./getIamGroup").getIamGroupOutput = null as any;
utilities.lazyLoad(exports, ["getIamGroup","getIamGroupOutput"], () => require("./getIamGroup"));

export { GetIamGroupMembersArgs, GetIamGroupMembersResult, GetIamGroupMembersOutputArgs } from "./getIamGroupMembers";
export const getIamGroupMembers: typeof import("./getIamGroupMembers").getIamGroupMembers = null as any;
export const getIamGroupMembersOutput: typeof import("./getIamGroupMembers").getIamGroupMembersOutput = null as any;
utilities.lazyLoad(exports, ["getIamGroupMembers","getIamGroupMembersOutput"], () => require("./getIamGroupMembers"));

export { GetIamGroupPoliciesArgs, GetIamGroupPoliciesResult, GetIamGroupPoliciesOutputArgs } from "./getIamGroupPolicies";
export const getIamGroupPolicies: typeof import("./getIamGroupPolicies").getIamGroupPolicies = null as any;
export const getIamGroupPoliciesOutput: typeof import("./getIamGroupPolicies").getIamGroupPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getIamGroupPolicies","getIamGroupPoliciesOutput"], () => require("./getIamGroupPolicies"));

export { GetIamGroupsArgs, GetIamGroupsResult, GetIamGroupsOutputArgs } from "./getIamGroups";
export const getIamGroups: typeof import("./getIamGroups").getIamGroups = null as any;
export const getIamGroupsOutput: typeof import("./getIamGroups").getIamGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getIamGroups","getIamGroupsOutput"], () => require("./getIamGroups"));

export { GetIamMemberArgs, GetIamMemberResult, GetIamMemberOutputArgs } from "./getIamMember";
export const getIamMember: typeof import("./getIamMember").getIamMember = null as any;
export const getIamMemberOutput: typeof import("./getIamMember").getIamMemberOutput = null as any;
utilities.lazyLoad(exports, ["getIamMember","getIamMemberOutput"], () => require("./getIamMember"));

export { GetIamMemberGroupsArgs, GetIamMemberGroupsResult, GetIamMemberGroupsOutputArgs } from "./getIamMemberGroups";
export const getIamMemberGroups: typeof import("./getIamMemberGroups").getIamMemberGroups = null as any;
export const getIamMemberGroupsOutput: typeof import("./getIamMemberGroups").getIamMemberGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getIamMemberGroups","getIamMemberGroupsOutput"], () => require("./getIamMemberGroups"));

export { GetIamMemberSystemgroupsArgs, GetIamMemberSystemgroupsResult, GetIamMemberSystemgroupsOutputArgs } from "./getIamMemberSystemgroups";
export const getIamMemberSystemgroups: typeof import("./getIamMemberSystemgroups").getIamMemberSystemgroups = null as any;
export const getIamMemberSystemgroupsOutput: typeof import("./getIamMemberSystemgroups").getIamMemberSystemgroupsOutput = null as any;
utilities.lazyLoad(exports, ["getIamMemberSystemgroups","getIamMemberSystemgroupsOutput"], () => require("./getIamMemberSystemgroups"));

export { GetIamMembersArgs, GetIamMembersResult, GetIamMembersOutputArgs } from "./getIamMembers";
export const getIamMembers: typeof import("./getIamMembers").getIamMembers = null as any;
export const getIamMembersOutput: typeof import("./getIamMembers").getIamMembersOutput = null as any;
utilities.lazyLoad(exports, ["getIamMembers","getIamMembersOutput"], () => require("./getIamMembers"));

export { GetIamPoliciesArgs, GetIamPoliciesResult, GetIamPoliciesOutputArgs } from "./getIamPolicies";
export const getIamPolicies: typeof import("./getIamPolicies").getIamPolicies = null as any;
export const getIamPoliciesOutput: typeof import("./getIamPolicies").getIamPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getIamPolicies","getIamPoliciesOutput"], () => require("./getIamPolicies"));

export { GetIamPolicyArgs, GetIamPolicyResult, GetIamPolicyOutputArgs } from "./getIamPolicy";
export const getIamPolicy: typeof import("./getIamPolicy").getIamPolicy = null as any;
export const getIamPolicyOutput: typeof import("./getIamPolicy").getIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIamPolicy","getIamPolicyOutput"], () => require("./getIamPolicy"));

export { GetIamPolicyGroupsArgs, GetIamPolicyGroupsResult, GetIamPolicyGroupsOutputArgs } from "./getIamPolicyGroups";
export const getIamPolicyGroups: typeof import("./getIamPolicyGroups").getIamPolicyGroups = null as any;
export const getIamPolicyGroupsOutput: typeof import("./getIamPolicyGroups").getIamPolicyGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getIamPolicyGroups","getIamPolicyGroupsOutput"], () => require("./getIamPolicyGroups"));

export { GetIamPolicyRolesArgs, GetIamPolicyRolesResult, GetIamPolicyRolesOutputArgs } from "./getIamPolicyRoles";
export const getIamPolicyRoles: typeof import("./getIamPolicyRoles").getIamPolicyRoles = null as any;
export const getIamPolicyRolesOutput: typeof import("./getIamPolicyRoles").getIamPolicyRolesOutput = null as any;
utilities.lazyLoad(exports, ["getIamPolicyRoles","getIamPolicyRolesOutput"], () => require("./getIamPolicyRoles"));

export { GetIamRoleArgs, GetIamRoleResult, GetIamRoleOutputArgs } from "./getIamRole";
export const getIamRole: typeof import("./getIamRole").getIamRole = null as any;
export const getIamRoleOutput: typeof import("./getIamRole").getIamRoleOutput = null as any;
utilities.lazyLoad(exports, ["getIamRole","getIamRoleOutput"], () => require("./getIamRole"));

export { GetIamRolePoliciesArgs, GetIamRolePoliciesResult, GetIamRolePoliciesOutputArgs } from "./getIamRolePolicies";
export const getIamRolePolicies: typeof import("./getIamRolePolicies").getIamRolePolicies = null as any;
export const getIamRolePoliciesOutput: typeof import("./getIamRolePolicies").getIamRolePoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getIamRolePolicies","getIamRolePoliciesOutput"], () => require("./getIamRolePolicies"));

export { GetIamRolesArgs, GetIamRolesResult, GetIamRolesOutputArgs } from "./getIamRoles";
export const getIamRoles: typeof import("./getIamRoles").getIamRoles = null as any;
export const getIamRolesOutput: typeof import("./getIamRoles").getIamRolesOutput = null as any;
utilities.lazyLoad(exports, ["getIamRoles","getIamRolesOutput"], () => require("./getIamRoles"));

export { GetInternetGatewaysArgs, GetInternetGatewaysResult, GetInternetGatewaysOutputArgs } from "./getInternetGateways";
export const getInternetGateways: typeof import("./getInternetGateways").getInternetGateways = null as any;
export const getInternetGatewaysOutput: typeof import("./getInternetGateways").getInternetGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getInternetGateways","getInternetGatewaysOutput"], () => require("./getInternetGateways"));

export { GetKeyPairsArgs, GetKeyPairsResult, GetKeyPairsOutputArgs } from "./getKeyPairs";
export const getKeyPairs: typeof import("./getKeyPairs").getKeyPairs = null as any;
export const getKeyPairsOutput: typeof import("./getKeyPairs").getKeyPairsOutput = null as any;
utilities.lazyLoad(exports, ["getKeyPairs","getKeyPairsOutput"], () => require("./getKeyPairs"));

export { GetKubernetesAppsImageArgs, GetKubernetesAppsImageResult, GetKubernetesAppsImageOutputArgs } from "./getKubernetesAppsImage";
export const getKubernetesAppsImage: typeof import("./getKubernetesAppsImage").getKubernetesAppsImage = null as any;
export const getKubernetesAppsImageOutput: typeof import("./getKubernetesAppsImage").getKubernetesAppsImageOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesAppsImage","getKubernetesAppsImageOutput"], () => require("./getKubernetesAppsImage"));

export { GetKubernetesAppsImagesArgs, GetKubernetesAppsImagesResult, GetKubernetesAppsImagesOutputArgs } from "./getKubernetesAppsImages";
export const getKubernetesAppsImages: typeof import("./getKubernetesAppsImages").getKubernetesAppsImages = null as any;
export const getKubernetesAppsImagesOutput: typeof import("./getKubernetesAppsImages").getKubernetesAppsImagesOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesAppsImages","getKubernetesAppsImagesOutput"], () => require("./getKubernetesAppsImages"));

export { GetKubernetesEngineArgs, GetKubernetesEngineResult, GetKubernetesEngineOutputArgs } from "./getKubernetesEngine";
export const getKubernetesEngine: typeof import("./getKubernetesEngine").getKubernetesEngine = null as any;
export const getKubernetesEngineOutput: typeof import("./getKubernetesEngine").getKubernetesEngineOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesEngine","getKubernetesEngineOutput"], () => require("./getKubernetesEngine"));

export { GetKubernetesEngineVersionsArgs, GetKubernetesEngineVersionsResult, GetKubernetesEngineVersionsOutputArgs } from "./getKubernetesEngineVersions";
export const getKubernetesEngineVersions: typeof import("./getKubernetesEngineVersions").getKubernetesEngineVersions = null as any;
export const getKubernetesEngineVersionsOutput: typeof import("./getKubernetesEngineVersions").getKubernetesEngineVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesEngineVersions","getKubernetesEngineVersionsOutput"], () => require("./getKubernetesEngineVersions"));

export { GetKubernetesEnginesArgs, GetKubernetesEnginesResult, GetKubernetesEnginesOutputArgs } from "./getKubernetesEngines";
export const getKubernetesEngines: typeof import("./getKubernetesEngines").getKubernetesEngines = null as any;
export const getKubernetesEnginesOutput: typeof import("./getKubernetesEngines").getKubernetesEnginesOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesEngines","getKubernetesEnginesOutput"], () => require("./getKubernetesEngines"));

export { GetKubernetesKubeconfigArgs, GetKubernetesKubeconfigResult, GetKubernetesKubeconfigOutputArgs } from "./getKubernetesKubeconfig";
export const getKubernetesKubeconfig: typeof import("./getKubernetesKubeconfig").getKubernetesKubeconfig = null as any;
export const getKubernetesKubeconfigOutput: typeof import("./getKubernetesKubeconfig").getKubernetesKubeconfigOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesKubeconfig","getKubernetesKubeconfigOutput"], () => require("./getKubernetesKubeconfig"));

export { GetKubernetesNodePoolArgs, GetKubernetesNodePoolResult, GetKubernetesNodePoolOutputArgs } from "./getKubernetesNodePool";
export const getKubernetesNodePool: typeof import("./getKubernetesNodePool").getKubernetesNodePool = null as any;
export const getKubernetesNodePoolOutput: typeof import("./getKubernetesNodePool").getKubernetesNodePoolOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesNodePool","getKubernetesNodePoolOutput"], () => require("./getKubernetesNodePool"));

export { GetKubernetesNodePoolsArgs, GetKubernetesNodePoolsResult, GetKubernetesNodePoolsOutputArgs } from "./getKubernetesNodePools";
export const getKubernetesNodePools: typeof import("./getKubernetesNodePools").getKubernetesNodePools = null as any;
export const getKubernetesNodePoolsOutput: typeof import("./getKubernetesNodePools").getKubernetesNodePoolsOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesNodePools","getKubernetesNodePoolsOutput"], () => require("./getKubernetesNodePools"));

export { GetKubernetesSubnetArgs, GetKubernetesSubnetResult, GetKubernetesSubnetOutputArgs } from "./getKubernetesSubnet";
export const getKubernetesSubnet: typeof import("./getKubernetesSubnet").getKubernetesSubnet = null as any;
export const getKubernetesSubnetOutput: typeof import("./getKubernetesSubnet").getKubernetesSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesSubnet","getKubernetesSubnetOutput"], () => require("./getKubernetesSubnet"));

export { GetLaunchConfigurationArgs, GetLaunchConfigurationResult, GetLaunchConfigurationOutputArgs } from "./getLaunchConfiguration";
export const getLaunchConfiguration: typeof import("./getLaunchConfiguration").getLaunchConfiguration = null as any;
export const getLaunchConfigurationOutput: typeof import("./getLaunchConfiguration").getLaunchConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getLaunchConfiguration","getLaunchConfigurationOutput"], () => require("./getLaunchConfiguration"));

export { GetLaunchConfigurationsArgs, GetLaunchConfigurationsResult, GetLaunchConfigurationsOutputArgs } from "./getLaunchConfigurations";
export const getLaunchConfigurations: typeof import("./getLaunchConfigurations").getLaunchConfigurations = null as any;
export const getLaunchConfigurationsOutput: typeof import("./getLaunchConfigurations").getLaunchConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getLaunchConfigurations","getLaunchConfigurationsOutput"], () => require("./getLaunchConfigurations"));

export { GetLbProfilesArgs, GetLbProfilesResult, GetLbProfilesOutputArgs } from "./getLbProfiles";
export const getLbProfiles: typeof import("./getLbProfiles").getLbProfiles = null as any;
export const getLbProfilesOutput: typeof import("./getLbProfiles").getLbProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getLbProfiles","getLbProfilesOutput"], () => require("./getLbProfiles"));

export { GetLbServerGroupsArgs, GetLbServerGroupsResult, GetLbServerGroupsOutputArgs } from "./getLbServerGroups";
export const getLbServerGroups: typeof import("./getLbServerGroups").getLbServerGroups = null as any;
export const getLbServerGroupsOutput: typeof import("./getLbServerGroups").getLbServerGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getLbServerGroups","getLbServerGroupsOutput"], () => require("./getLbServerGroups"));

export { GetLbServiceIpsArgs, GetLbServiceIpsResult, GetLbServiceIpsOutputArgs } from "./getLbServiceIps";
export const getLbServiceIps: typeof import("./getLbServiceIps").getLbServiceIps = null as any;
export const getLbServiceIpsOutput: typeof import("./getLbServiceIps").getLbServiceIpsOutput = null as any;
utilities.lazyLoad(exports, ["getLbServiceIps","getLbServiceIpsOutput"], () => require("./getLbServiceIps"));

export { GetLbServicesArgs, GetLbServicesResult, GetLbServicesOutputArgs } from "./getLbServices";
export const getLbServices: typeof import("./getLbServices").getLbServices = null as any;
export const getLbServicesOutput: typeof import("./getLbServices").getLbServicesOutput = null as any;
utilities.lazyLoad(exports, ["getLbServices","getLbServicesOutput"], () => require("./getLbServices"));

export { GetLbServicesConnectableToAsgArgs, GetLbServicesConnectableToAsgResult, GetLbServicesConnectableToAsgOutputArgs } from "./getLbServicesConnectableToAsg";
export const getLbServicesConnectableToAsg: typeof import("./getLbServicesConnectableToAsg").getLbServicesConnectableToAsg = null as any;
export const getLbServicesConnectableToAsgOutput: typeof import("./getLbServicesConnectableToAsg").getLbServicesConnectableToAsgOutput = null as any;
utilities.lazyLoad(exports, ["getLbServicesConnectableToAsg","getLbServicesConnectableToAsgOutput"], () => require("./getLbServicesConnectableToAsg"));

export { GetLbServicesConnectedToAsgArgs, GetLbServicesConnectedToAsgResult, GetLbServicesConnectedToAsgOutputArgs } from "./getLbServicesConnectedToAsg";
export const getLbServicesConnectedToAsg: typeof import("./getLbServicesConnectedToAsg").getLbServicesConnectedToAsg = null as any;
export const getLbServicesConnectedToAsgOutput: typeof import("./getLbServicesConnectedToAsg").getLbServicesConnectedToAsgOutput = null as any;
utilities.lazyLoad(exports, ["getLbServicesConnectedToAsg","getLbServicesConnectedToAsgOutput"], () => require("./getLbServicesConnectedToAsg"));

export { GetLoadBalancersArgs, GetLoadBalancersResult, GetLoadBalancersOutputArgs } from "./getLoadBalancers";
export const getLoadBalancers: typeof import("./getLoadBalancers").getLoadBalancers = null as any;
export const getLoadBalancersOutput: typeof import("./getLoadBalancers").getLoadBalancersOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancers","getLoadBalancersOutput"], () => require("./getLoadBalancers"));

export { GetLoggingauditArgs, GetLoggingauditResult, GetLoggingauditOutputArgs } from "./getLoggingaudit";
export const getLoggingaudit: typeof import("./getLoggingaudit").getLoggingaudit = null as any;
export const getLoggingauditOutput: typeof import("./getLoggingaudit").getLoggingauditOutput = null as any;
utilities.lazyLoad(exports, ["getLoggingaudit","getLoggingauditOutput"], () => require("./getLoggingaudit"));

export { GetLoggingauditUsersArgs, GetLoggingauditUsersResult, GetLoggingauditUsersOutputArgs } from "./getLoggingauditUsers";
export const getLoggingauditUsers: typeof import("./getLoggingauditUsers").getLoggingauditUsers = null as any;
export const getLoggingauditUsersOutput: typeof import("./getLoggingauditUsers").getLoggingauditUsersOutput = null as any;
utilities.lazyLoad(exports, ["getLoggingauditUsers","getLoggingauditUsersOutput"], () => require("./getLoggingauditUsers"));

export { GetLoggingauditsArgs, GetLoggingauditsResult, GetLoggingauditsOutputArgs } from "./getLoggingaudits";
export const getLoggingaudits: typeof import("./getLoggingaudits").getLoggingaudits = null as any;
export const getLoggingauditsOutput: typeof import("./getLoggingaudits").getLoggingauditsOutput = null as any;
utilities.lazyLoad(exports, ["getLoggingaudits","getLoggingauditsOutput"], () => require("./getLoggingaudits"));

export { GetMariadbArgs, GetMariadbResult, GetMariadbOutputArgs } from "./getMariadb";
export const getMariadb: typeof import("./getMariadb").getMariadb = null as any;
export const getMariadbOutput: typeof import("./getMariadb").getMariadbOutput = null as any;
utilities.lazyLoad(exports, ["getMariadb","getMariadbOutput"], () => require("./getMariadb"));

export { GetMariadbsArgs, GetMariadbsResult, GetMariadbsOutputArgs } from "./getMariadbs";
export const getMariadbs: typeof import("./getMariadbs").getMariadbs = null as any;
export const getMariadbsOutput: typeof import("./getMariadbs").getMariadbsOutput = null as any;
utilities.lazyLoad(exports, ["getMariadbs","getMariadbsOutput"], () => require("./getMariadbs"));

export { GetMigrationImageArgs, GetMigrationImageResult, GetMigrationImageOutputArgs } from "./getMigrationImage";
export const getMigrationImage: typeof import("./getMigrationImage").getMigrationImage = null as any;
export const getMigrationImageOutput: typeof import("./getMigrationImage").getMigrationImageOutput = null as any;
utilities.lazyLoad(exports, ["getMigrationImage","getMigrationImageOutput"], () => require("./getMigrationImage"));

export { GetMigrationImagesArgs, GetMigrationImagesResult, GetMigrationImagesOutputArgs } from "./getMigrationImages";
export const getMigrationImages: typeof import("./getMigrationImages").getMigrationImages = null as any;
export const getMigrationImagesOutput: typeof import("./getMigrationImages").getMigrationImagesOutput = null as any;
utilities.lazyLoad(exports, ["getMigrationImages","getMigrationImagesOutput"], () => require("./getMigrationImages"));

export { GetMysqlArgs, GetMysqlResult, GetMysqlOutputArgs } from "./getMysql";
export const getMysql: typeof import("./getMysql").getMysql = null as any;
export const getMysqlOutput: typeof import("./getMysql").getMysqlOutput = null as any;
utilities.lazyLoad(exports, ["getMysql","getMysqlOutput"], () => require("./getMysql"));

export { GetMysqlsArgs, GetMysqlsResult, GetMysqlsOutputArgs } from "./getMysqls";
export const getMysqls: typeof import("./getMysqls").getMysqls = null as any;
export const getMysqlsOutput: typeof import("./getMysqls").getMysqlsOutput = null as any;
utilities.lazyLoad(exports, ["getMysqls","getMysqlsOutput"], () => require("./getMysqls"));

export { GetNatGatewaysArgs, GetNatGatewaysResult, GetNatGatewaysOutputArgs } from "./getNatGateways";
export const getNatGateways: typeof import("./getNatGateways").getNatGateways = null as any;
export const getNatGatewaysOutput: typeof import("./getNatGateways").getNatGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getNatGateways","getNatGatewaysOutput"], () => require("./getNatGateways"));

export { GetObsBucketArgs, GetObsBucketResult, GetObsBucketOutputArgs } from "./getObsBucket";
export const getObsBucket: typeof import("./getObsBucket").getObsBucket = null as any;
export const getObsBucketOutput: typeof import("./getObsBucket").getObsBucketOutput = null as any;
utilities.lazyLoad(exports, ["getObsBucket","getObsBucketOutput"], () => require("./getObsBucket"));

export { GetObsBucketsArgs, GetObsBucketsResult, GetObsBucketsOutputArgs } from "./getObsBuckets";
export const getObsBuckets: typeof import("./getObsBuckets").getObsBuckets = null as any;
export const getObsBucketsOutput: typeof import("./getObsBuckets").getObsBucketsOutput = null as any;
utilities.lazyLoad(exports, ["getObsBuckets","getObsBucketsOutput"], () => require("./getObsBuckets"));

export { GetObsStoragesArgs, GetObsStoragesResult, GetObsStoragesOutputArgs } from "./getObsStorages";
export const getObsStorages: typeof import("./getObsStorages").getObsStorages = null as any;
export const getObsStoragesOutput: typeof import("./getObsStorages").getObsStoragesOutput = null as any;
utilities.lazyLoad(exports, ["getObsStorages","getObsStoragesOutput"], () => require("./getObsStorages"));

export { GetPlacementGroupsArgs, GetPlacementGroupsResult, GetPlacementGroupsOutputArgs } from "./getPlacementGroups";
export const getPlacementGroups: typeof import("./getPlacementGroups").getPlacementGroups = null as any;
export const getPlacementGroupsOutput: typeof import("./getPlacementGroups").getPlacementGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getPlacementGroups","getPlacementGroupsOutput"], () => require("./getPlacementGroups"));

export { GetPostgresqlArgs, GetPostgresqlResult, GetPostgresqlOutputArgs } from "./getPostgresql";
export const getPostgresql: typeof import("./getPostgresql").getPostgresql = null as any;
export const getPostgresqlOutput: typeof import("./getPostgresql").getPostgresqlOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresql","getPostgresqlOutput"], () => require("./getPostgresql"));

export { GetPostgresqlsArgs, GetPostgresqlsResult, GetPostgresqlsOutputArgs } from "./getPostgresqls";
export const getPostgresqls: typeof import("./getPostgresqls").getPostgresqls = null as any;
export const getPostgresqlsOutput: typeof import("./getPostgresqls").getPostgresqlsOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresqls","getPostgresqlsOutput"], () => require("./getPostgresqls"));

export { GetProductArgs, GetProductResult, GetProductOutputArgs } from "./getProduct";
export const getProduct: typeof import("./getProduct").getProduct = null as any;
export const getProductOutput: typeof import("./getProduct").getProductOutput = null as any;
utilities.lazyLoad(exports, ["getProduct","getProductOutput"], () => require("./getProduct"));

export { GetProductCategoriesArgs, GetProductCategoriesResult, GetProductCategoriesOutputArgs } from "./getProductCategories";
export const getProductCategories: typeof import("./getProductCategories").getProductCategories = null as any;
export const getProductCategoriesOutput: typeof import("./getProductCategories").getProductCategoriesOutput = null as any;
utilities.lazyLoad(exports, ["getProductCategories","getProductCategoriesOutput"], () => require("./getProductCategories"));

export { GetProductGroupsArgs, GetProductGroupsResult, GetProductGroupsOutputArgs } from "./getProductGroups";
export const getProductGroups: typeof import("./getProductGroups").getProductGroups = null as any;
export const getProductGroupsOutput: typeof import("./getProductGroups").getProductGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getProductGroups","getProductGroupsOutput"], () => require("./getProductGroups"));

export { GetProductsByGroupArgs, GetProductsByGroupResult, GetProductsByGroupOutputArgs } from "./getProductsByGroup";
export const getProductsByGroup: typeof import("./getProductsByGroup").getProductsByGroup = null as any;
export const getProductsByGroupOutput: typeof import("./getProductsByGroup").getProductsByGroupOutput = null as any;
utilities.lazyLoad(exports, ["getProductsByGroup","getProductsByGroupOutput"], () => require("./getProductsByGroup"));

export { GetProductsByZoneArgs, GetProductsByZoneResult, GetProductsByZoneOutputArgs } from "./getProductsByZone";
export const getProductsByZone: typeof import("./getProductsByZone").getProductsByZone = null as any;
export const getProductsByZoneOutput: typeof import("./getProductsByZone").getProductsByZoneOutput = null as any;
utilities.lazyLoad(exports, ["getProductsByZone","getProductsByZoneOutput"], () => require("./getProductsByZone"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetProjectProductResourcesArgs, GetProjectProductResourcesResult, GetProjectProductResourcesOutputArgs } from "./getProjectProductResources";
export const getProjectProductResources: typeof import("./getProjectProductResources").getProjectProductResources = null as any;
export const getProjectProductResourcesOutput: typeof import("./getProjectProductResources").getProjectProductResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getProjectProductResources","getProjectProductResourcesOutput"], () => require("./getProjectProductResources"));

export { GetProjectProductsArgs, GetProjectProductsResult, GetProjectProductsOutputArgs } from "./getProjectProducts";
export const getProjectProducts: typeof import("./getProjectProducts").getProjectProducts = null as any;
export const getProjectProductsOutput: typeof import("./getProjectProducts").getProjectProductsOutput = null as any;
utilities.lazyLoad(exports, ["getProjectProducts","getProjectProductsOutput"], () => require("./getProjectProducts"));

export { GetProjectUserProductsResourcesArgs, GetProjectUserProductsResourcesResult, GetProjectUserProductsResourcesOutputArgs } from "./getProjectUserProductsResources";
export const getProjectUserProductsResources: typeof import("./getProjectUserProductsResources").getProjectUserProductsResources = null as any;
export const getProjectUserProductsResourcesOutput: typeof import("./getProjectUserProductsResources").getProjectUserProductsResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getProjectUserProductsResources","getProjectUserProductsResourcesOutput"], () => require("./getProjectUserProductsResources"));

export { GetProjectZonesArgs, GetProjectZonesResult, GetProjectZonesOutputArgs } from "./getProjectZones";
export const getProjectZones: typeof import("./getProjectZones").getProjectZones = null as any;
export const getProjectZonesOutput: typeof import("./getProjectZones").getProjectZonesOutput = null as any;
utilities.lazyLoad(exports, ["getProjectZones","getProjectZonesOutput"], () => require("./getProjectZones"));

export { GetProjectsArgs, GetProjectsResult, GetProjectsOutputArgs } from "./getProjects";
export const getProjects: typeof import("./getProjects").getProjects = null as any;
export const getProjectsOutput: typeof import("./getProjects").getProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getProjects","getProjectsOutput"], () => require("./getProjects"));

export { GetPublicIpArgs, GetPublicIpResult, GetPublicIpOutputArgs } from "./getPublicIp";
export const getPublicIp: typeof import("./getPublicIp").getPublicIp = null as any;
export const getPublicIpOutput: typeof import("./getPublicIp").getPublicIpOutput = null as any;
utilities.lazyLoad(exports, ["getPublicIp","getPublicIpOutput"], () => require("./getPublicIp"));

export { GetPublicIpsArgs, GetPublicIpsResult, GetPublicIpsOutputArgs } from "./getPublicIps";
export const getPublicIps: typeof import("./getPublicIps").getPublicIps = null as any;
export const getPublicIpsOutput: typeof import("./getPublicIps").getPublicIpsOutput = null as any;
utilities.lazyLoad(exports, ["getPublicIps","getPublicIpsOutput"], () => require("./getPublicIps"));

export { GetRedisArgs, GetRedisResult, GetRedisOutputArgs } from "./getRedis";
export const getRedis: typeof import("./getRedis").getRedis = null as any;
export const getRedisOutput: typeof import("./getRedis").getRedisOutput = null as any;
utilities.lazyLoad(exports, ["getRedis","getRedisOutput"], () => require("./getRedis"));

export { GetRedisClusterArgs, GetRedisClusterResult, GetRedisClusterOutputArgs } from "./getRedisCluster";
export const getRedisCluster: typeof import("./getRedisCluster").getRedisCluster = null as any;
export const getRedisClusterOutput: typeof import("./getRedisCluster").getRedisClusterOutput = null as any;
utilities.lazyLoad(exports, ["getRedisCluster","getRedisClusterOutput"], () => require("./getRedisCluster"));

export { GetRedisClustersArgs, GetRedisClustersResult, GetRedisClustersOutputArgs } from "./getRedisClusters";
export const getRedisClusters: typeof import("./getRedisClusters").getRedisClusters = null as any;
export const getRedisClustersOutput: typeof import("./getRedisClusters").getRedisClustersOutput = null as any;
utilities.lazyLoad(exports, ["getRedisClusters","getRedisClustersOutput"], () => require("./getRedisClusters"));

export { GetRedisListArgs, GetRedisListResult, GetRedisListOutputArgs } from "./getRedisList";
export const getRedisList: typeof import("./getRedisList").getRedisList = null as any;
export const getRedisListOutput: typeof import("./getRedisList").getRedisListOutput = null as any;
utilities.lazyLoad(exports, ["getRedisList","getRedisListOutput"], () => require("./getRedisList"));

export { GetRegionArgs, GetRegionResult, GetRegionOutputArgs } from "./getRegion";
export const getRegion: typeof import("./getRegion").getRegion = null as any;
export const getRegionOutput: typeof import("./getRegion").getRegionOutput = null as any;
utilities.lazyLoad(exports, ["getRegion","getRegionOutput"], () => require("./getRegion"));

export { GetRegionsArgs, GetRegionsResult, GetRegionsOutputArgs } from "./getRegions";
export const getRegions: typeof import("./getRegions").getRegions = null as any;
export const getRegionsOutput: typeof import("./getRegions").getRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getRegions","getRegionsOutput"], () => require("./getRegions"));

export { GetResourceArgs, GetResourceResult, GetResourceOutputArgs } from "./getResource";
export const getResource: typeof import("./getResource").getResource = null as any;
export const getResourceOutput: typeof import("./getResource").getResourceOutput = null as any;
utilities.lazyLoad(exports, ["getResource","getResourceOutput"], () => require("./getResource"));

export { GetResourceGroupArgs, GetResourceGroupResult, GetResourceGroupOutputArgs } from "./getResourceGroup";
export const getResourceGroup: typeof import("./getResourceGroup").getResourceGroup = null as any;
export const getResourceGroupOutput: typeof import("./getResourceGroup").getResourceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getResourceGroup","getResourceGroupOutput"], () => require("./getResourceGroup"));

export { GetResourceGroupInMyProjectsArgs, GetResourceGroupInMyProjectsResult, GetResourceGroupInMyProjectsOutputArgs } from "./getResourceGroupInMyProjects";
export const getResourceGroupInMyProjects: typeof import("./getResourceGroupInMyProjects").getResourceGroupInMyProjects = null as any;
export const getResourceGroupInMyProjectsOutput: typeof import("./getResourceGroupInMyProjects").getResourceGroupInMyProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getResourceGroupInMyProjects","getResourceGroupInMyProjectsOutput"], () => require("./getResourceGroupInMyProjects"));

export { GetResourceGroupResourceTypesArgs, GetResourceGroupResourceTypesResult, GetResourceGroupResourceTypesOutputArgs } from "./getResourceGroupResourceTypes";
export const getResourceGroupResourceTypes: typeof import("./getResourceGroupResourceTypes").getResourceGroupResourceTypes = null as any;
export const getResourceGroupResourceTypesOutput: typeof import("./getResourceGroupResourceTypes").getResourceGroupResourceTypesOutput = null as any;
utilities.lazyLoad(exports, ["getResourceGroupResourceTypes","getResourceGroupResourceTypesOutput"], () => require("./getResourceGroupResourceTypes"));

export { GetResourceGroupResourcesArgs, GetResourceGroupResourcesResult, GetResourceGroupResourcesOutputArgs } from "./getResourceGroupResources";
export const getResourceGroupResources: typeof import("./getResourceGroupResources").getResourceGroupResources = null as any;
export const getResourceGroupResourcesOutput: typeof import("./getResourceGroupResources").getResourceGroupResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getResourceGroupResources","getResourceGroupResourcesOutput"], () => require("./getResourceGroupResources"));

export { GetResourceGroupResourcesInMyProjectsArgs, GetResourceGroupResourcesInMyProjectsResult, GetResourceGroupResourcesInMyProjectsOutputArgs } from "./getResourceGroupResourcesInMyProjects";
export const getResourceGroupResourcesInMyProjects: typeof import("./getResourceGroupResourcesInMyProjects").getResourceGroupResourcesInMyProjects = null as any;
export const getResourceGroupResourcesInMyProjectsOutput: typeof import("./getResourceGroupResourcesInMyProjects").getResourceGroupResourcesInMyProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getResourceGroupResourcesInMyProjects","getResourceGroupResourcesInMyProjectsOutput"], () => require("./getResourceGroupResourcesInMyProjects"));

export { GetResourceGroupServiceTypesArgs, GetResourceGroupServiceTypesResult, GetResourceGroupServiceTypesOutputArgs } from "./getResourceGroupServiceTypes";
export const getResourceGroupServiceTypes: typeof import("./getResourceGroupServiceTypes").getResourceGroupServiceTypes = null as any;
export const getResourceGroupServiceTypesOutput: typeof import("./getResourceGroupServiceTypes").getResourceGroupServiceTypesOutput = null as any;
utilities.lazyLoad(exports, ["getResourceGroupServiceTypes","getResourceGroupServiceTypesOutput"], () => require("./getResourceGroupServiceTypes"));

export { GetResourceGroupsArgs, GetResourceGroupsResult, GetResourceGroupsOutputArgs } from "./getResourceGroups";
export const getResourceGroups: typeof import("./getResourceGroups").getResourceGroups = null as any;
export const getResourceGroupsOutput: typeof import("./getResourceGroups").getResourceGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getResourceGroups","getResourceGroupsOutput"], () => require("./getResourceGroups"));

export { GetResourceGroupsInMyProjectsArgs, GetResourceGroupsInMyProjectsResult, GetResourceGroupsInMyProjectsOutputArgs } from "./getResourceGroupsInMyProjects";
export const getResourceGroupsInMyProjects: typeof import("./getResourceGroupsInMyProjects").getResourceGroupsInMyProjects = null as any;
export const getResourceGroupsInMyProjectsOutput: typeof import("./getResourceGroupsInMyProjects").getResourceGroupsInMyProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getResourceGroupsInMyProjects","getResourceGroupsInMyProjectsOutput"], () => require("./getResourceGroupsInMyProjects"));

export { GetResourceInMyProjectArgs, GetResourceInMyProjectResult, GetResourceInMyProjectOutputArgs } from "./getResourceInMyProject";
export const getResourceInMyProject: typeof import("./getResourceInMyProject").getResourceInMyProject = null as any;
export const getResourceInMyProjectOutput: typeof import("./getResourceInMyProject").getResourceInMyProjectOutput = null as any;
utilities.lazyLoad(exports, ["getResourceInMyProject","getResourceInMyProjectOutput"], () => require("./getResourceInMyProject"));

export { GetResourceTagsArgs, GetResourceTagsResult, GetResourceTagsOutputArgs } from "./getResourceTags";
export const getResourceTags: typeof import("./getResourceTags").getResourceTags = null as any;
export const getResourceTagsOutput: typeof import("./getResourceTags").getResourceTagsOutput = null as any;
utilities.lazyLoad(exports, ["getResourceTags","getResourceTagsOutput"], () => require("./getResourceTags"));

export { GetResourcesArgs, GetResourcesResult, GetResourcesOutputArgs } from "./getResources";
export const getResources: typeof import("./getResources").getResources = null as any;
export const getResourcesOutput: typeof import("./getResources").getResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getResources","getResourcesOutput"], () => require("./getResources"));

export { GetResourcesInMyProjectArgs, GetResourcesInMyProjectResult, GetResourcesInMyProjectOutputArgs } from "./getResourcesInMyProject";
export const getResourcesInMyProject: typeof import("./getResourcesInMyProject").getResourcesInMyProject = null as any;
export const getResourcesInMyProjectOutput: typeof import("./getResourcesInMyProject").getResourcesInMyProjectOutput = null as any;
utilities.lazyLoad(exports, ["getResourcesInMyProject","getResourcesInMyProjectOutput"], () => require("./getResourcesInMyProject"));

export { GetSecurityGroupArgs, GetSecurityGroupResult, GetSecurityGroupOutputArgs } from "./getSecurityGroup";
export const getSecurityGroup: typeof import("./getSecurityGroup").getSecurityGroup = null as any;
export const getSecurityGroupOutput: typeof import("./getSecurityGroup").getSecurityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroup","getSecurityGroupOutput"], () => require("./getSecurityGroup"));

export { GetSecurityGroupLogStorageArgs, GetSecurityGroupLogStorageResult, GetSecurityGroupLogStorageOutputArgs } from "./getSecurityGroupLogStorage";
export const getSecurityGroupLogStorage: typeof import("./getSecurityGroupLogStorage").getSecurityGroupLogStorage = null as any;
export const getSecurityGroupLogStorageOutput: typeof import("./getSecurityGroupLogStorage").getSecurityGroupLogStorageOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroupLogStorage","getSecurityGroupLogStorageOutput"], () => require("./getSecurityGroupLogStorage"));

export { GetSecurityGroupLogStoragesArgs, GetSecurityGroupLogStoragesResult, GetSecurityGroupLogStoragesOutputArgs } from "./getSecurityGroupLogStorages";
export const getSecurityGroupLogStorages: typeof import("./getSecurityGroupLogStorages").getSecurityGroupLogStorages = null as any;
export const getSecurityGroupLogStoragesOutput: typeof import("./getSecurityGroupLogStorages").getSecurityGroupLogStoragesOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroupLogStorages","getSecurityGroupLogStoragesOutput"], () => require("./getSecurityGroupLogStorages"));

export { GetSecurityGroupRuleArgs, GetSecurityGroupRuleResult, GetSecurityGroupRuleOutputArgs } from "./getSecurityGroupRule";
export const getSecurityGroupRule: typeof import("./getSecurityGroupRule").getSecurityGroupRule = null as any;
export const getSecurityGroupRuleOutput: typeof import("./getSecurityGroupRule").getSecurityGroupRuleOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroupRule","getSecurityGroupRuleOutput"], () => require("./getSecurityGroupRule"));

export { GetSecurityGroupRulesArgs, GetSecurityGroupRulesResult, GetSecurityGroupRulesOutputArgs } from "./getSecurityGroupRules";
export const getSecurityGroupRules: typeof import("./getSecurityGroupRules").getSecurityGroupRules = null as any;
export const getSecurityGroupRulesOutput: typeof import("./getSecurityGroupRules").getSecurityGroupRulesOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroupRules","getSecurityGroupRulesOutput"], () => require("./getSecurityGroupRules"));

export { GetSecurityGroupUserIpsArgs, GetSecurityGroupUserIpsResult, GetSecurityGroupUserIpsOutputArgs } from "./getSecurityGroupUserIps";
export const getSecurityGroupUserIps: typeof import("./getSecurityGroupUserIps").getSecurityGroupUserIps = null as any;
export const getSecurityGroupUserIpsOutput: typeof import("./getSecurityGroupUserIps").getSecurityGroupUserIpsOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroupUserIps","getSecurityGroupUserIpsOutput"], () => require("./getSecurityGroupUserIps"));

export { GetSecurityGroupsArgs, GetSecurityGroupsResult, GetSecurityGroupsOutputArgs } from "./getSecurityGroups";
export const getSecurityGroups: typeof import("./getSecurityGroups").getSecurityGroups = null as any;
export const getSecurityGroupsOutput: typeof import("./getSecurityGroups").getSecurityGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroups","getSecurityGroupsOutput"], () => require("./getSecurityGroups"));

export { GetSqlserverArgs, GetSqlserverResult, GetSqlserverOutputArgs } from "./getSqlserver";
export const getSqlserver: typeof import("./getSqlserver").getSqlserver = null as any;
export const getSqlserverOutput: typeof import("./getSqlserver").getSqlserverOutput = null as any;
utilities.lazyLoad(exports, ["getSqlserver","getSqlserverOutput"], () => require("./getSqlserver"));

export { GetSqlserversArgs, GetSqlserversResult, GetSqlserversOutputArgs } from "./getSqlservers";
export const getSqlservers: typeof import("./getSqlservers").getSqlservers = null as any;
export const getSqlserversOutput: typeof import("./getSqlservers").getSqlserversOutput = null as any;
utilities.lazyLoad(exports, ["getSqlservers","getSqlserversOutput"], () => require("./getSqlservers"));

export { GetStandardImageArgs, GetStandardImageResult, GetStandardImageOutputArgs } from "./getStandardImage";
export const getStandardImage: typeof import("./getStandardImage").getStandardImage = null as any;
export const getStandardImageOutput: typeof import("./getStandardImage").getStandardImageOutput = null as any;
utilities.lazyLoad(exports, ["getStandardImage","getStandardImageOutput"], () => require("./getStandardImage"));

export { GetStandardImagesArgs, GetStandardImagesResult, GetStandardImagesOutputArgs } from "./getStandardImages";
export const getStandardImages: typeof import("./getStandardImages").getStandardImages = null as any;
export const getStandardImagesOutput: typeof import("./getStandardImages").getStandardImagesOutput = null as any;
utilities.lazyLoad(exports, ["getStandardImages","getStandardImagesOutput"], () => require("./getStandardImages"));

export { GetSubnetAvailableIpsArgs, GetSubnetAvailableIpsResult, GetSubnetAvailableIpsOutputArgs } from "./getSubnetAvailableIps";
export const getSubnetAvailableIps: typeof import("./getSubnetAvailableIps").getSubnetAvailableIps = null as any;
export const getSubnetAvailableIpsOutput: typeof import("./getSubnetAvailableIps").getSubnetAvailableIpsOutput = null as any;
utilities.lazyLoad(exports, ["getSubnetAvailableIps","getSubnetAvailableIpsOutput"], () => require("./getSubnetAvailableIps"));

export { GetSubnetIpCheckArgs, GetSubnetIpCheckResult, GetSubnetIpCheckOutputArgs } from "./getSubnetIpCheck";
export const getSubnetIpCheck: typeof import("./getSubnetIpCheck").getSubnetIpCheck = null as any;
export const getSubnetIpCheckOutput: typeof import("./getSubnetIpCheck").getSubnetIpCheckOutput = null as any;
utilities.lazyLoad(exports, ["getSubnetIpCheck","getSubnetIpCheckOutput"], () => require("./getSubnetIpCheck"));

export { GetSubnetResourcesArgs, GetSubnetResourcesResult, GetSubnetResourcesOutputArgs } from "./getSubnetResources";
export const getSubnetResources: typeof import("./getSubnetResources").getSubnetResources = null as any;
export const getSubnetResourcesOutput: typeof import("./getSubnetResources").getSubnetResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getSubnetResources","getSubnetResourcesOutput"], () => require("./getSubnetResources"));

export { GetSubnetVipDetailArgs, GetSubnetVipDetailResult, GetSubnetVipDetailOutputArgs } from "./getSubnetVipDetail";
export const getSubnetVipDetail: typeof import("./getSubnetVipDetail").getSubnetVipDetail = null as any;
export const getSubnetVipDetailOutput: typeof import("./getSubnetVipDetail").getSubnetVipDetailOutput = null as any;
utilities.lazyLoad(exports, ["getSubnetVipDetail","getSubnetVipDetailOutput"], () => require("./getSubnetVipDetail"));

export { GetSubnetVipsArgs, GetSubnetVipsResult, GetSubnetVipsOutputArgs } from "./getSubnetVips";
export const getSubnetVips: typeof import("./getSubnetVips").getSubnetVips = null as any;
export const getSubnetVipsOutput: typeof import("./getSubnetVips").getSubnetVipsOutput = null as any;
utilities.lazyLoad(exports, ["getSubnetVips","getSubnetVipsOutput"], () => require("./getSubnetVips"));

export { GetSubnetsArgs, GetSubnetsResult, GetSubnetsOutputArgs } from "./getSubnets";
export const getSubnets: typeof import("./getSubnets").getSubnets = null as any;
export const getSubnetsOutput: typeof import("./getSubnets").getSubnetsOutput = null as any;
utilities.lazyLoad(exports, ["getSubnets","getSubnetsOutput"], () => require("./getSubnets"));

export { GetTrailArgs, GetTrailResult, GetTrailOutputArgs } from "./getTrail";
export const getTrail: typeof import("./getTrail").getTrail = null as any;
export const getTrailOutput: typeof import("./getTrail").getTrailOutput = null as any;
utilities.lazyLoad(exports, ["getTrail","getTrailOutput"], () => require("./getTrail"));

export { GetTrailsArgs, GetTrailsResult, GetTrailsOutputArgs } from "./getTrails";
export const getTrails: typeof import("./getTrails").getTrails = null as any;
export const getTrailsOutput: typeof import("./getTrails").getTrailsOutput = null as any;
utilities.lazyLoad(exports, ["getTrails","getTrailsOutput"], () => require("./getTrails"));

export { GetTransitGatewayConnectionsArgs, GetTransitGatewayConnectionsResult, GetTransitGatewayConnectionsOutputArgs } from "./getTransitGatewayConnections";
export const getTransitGatewayConnections: typeof import("./getTransitGatewayConnections").getTransitGatewayConnections = null as any;
export const getTransitGatewayConnectionsOutput: typeof import("./getTransitGatewayConnections").getTransitGatewayConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getTransitGatewayConnections","getTransitGatewayConnectionsOutput"], () => require("./getTransitGatewayConnections"));

export { GetTransitGatewayRoutingRoutesArgs, GetTransitGatewayRoutingRoutesResult, GetTransitGatewayRoutingRoutesOutputArgs } from "./getTransitGatewayRoutingRoutes";
export const getTransitGatewayRoutingRoutes: typeof import("./getTransitGatewayRoutingRoutes").getTransitGatewayRoutingRoutes = null as any;
export const getTransitGatewayRoutingRoutesOutput: typeof import("./getTransitGatewayRoutingRoutes").getTransitGatewayRoutingRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getTransitGatewayRoutingRoutes","getTransitGatewayRoutingRoutesOutput"], () => require("./getTransitGatewayRoutingRoutes"));

export { GetTransitGatewayRoutingRulesArgs, GetTransitGatewayRoutingRulesResult, GetTransitGatewayRoutingRulesOutputArgs } from "./getTransitGatewayRoutingRules";
export const getTransitGatewayRoutingRules: typeof import("./getTransitGatewayRoutingRules").getTransitGatewayRoutingRules = null as any;
export const getTransitGatewayRoutingRulesOutput: typeof import("./getTransitGatewayRoutingRules").getTransitGatewayRoutingRulesOutput = null as any;
utilities.lazyLoad(exports, ["getTransitGatewayRoutingRules","getTransitGatewayRoutingRulesOutput"], () => require("./getTransitGatewayRoutingRules"));

export { GetTransitGatewayRoutingTablesArgs, GetTransitGatewayRoutingTablesResult, GetTransitGatewayRoutingTablesOutputArgs } from "./getTransitGatewayRoutingTables";
export const getTransitGatewayRoutingTables: typeof import("./getTransitGatewayRoutingTables").getTransitGatewayRoutingTables = null as any;
export const getTransitGatewayRoutingTablesOutput: typeof import("./getTransitGatewayRoutingTables").getTransitGatewayRoutingTablesOutput = null as any;
utilities.lazyLoad(exports, ["getTransitGatewayRoutingTables","getTransitGatewayRoutingTablesOutput"], () => require("./getTransitGatewayRoutingTables"));

export { GetTransitGatewaysArgs, GetTransitGatewaysResult, GetTransitGatewaysOutputArgs } from "./getTransitGateways";
export const getTransitGateways: typeof import("./getTransitGateways").getTransitGateways = null as any;
export const getTransitGatewaysOutput: typeof import("./getTransitGateways").getTransitGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getTransitGateways","getTransitGatewaysOutput"], () => require("./getTransitGateways"));

export { GetVirtualServersArgs, GetVirtualServersResult, GetVirtualServersOutputArgs } from "./getVirtualServers";
export const getVirtualServers: typeof import("./getVirtualServers").getVirtualServers = null as any;
export const getVirtualServersOutput: typeof import("./getVirtualServers").getVirtualServersOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualServers","getVirtualServersOutput"], () => require("./getVirtualServers"));

export { GetVpcDnssArgs, GetVpcDnssResult, GetVpcDnssOutputArgs } from "./getVpcDnss";
export const getVpcDnss: typeof import("./getVpcDnss").getVpcDnss = null as any;
export const getVpcDnssOutput: typeof import("./getVpcDnss").getVpcDnssOutput = null as any;
utilities.lazyLoad(exports, ["getVpcDnss","getVpcDnssOutput"], () => require("./getVpcDnss"));

export { GetVpcPeeringDetailArgs, GetVpcPeeringDetailResult, GetVpcPeeringDetailOutputArgs } from "./getVpcPeeringDetail";
export const getVpcPeeringDetail: typeof import("./getVpcPeeringDetail").getVpcPeeringDetail = null as any;
export const getVpcPeeringDetailOutput: typeof import("./getVpcPeeringDetail").getVpcPeeringDetailOutput = null as any;
utilities.lazyLoad(exports, ["getVpcPeeringDetail","getVpcPeeringDetailOutput"], () => require("./getVpcPeeringDetail"));

export { GetVpcPeeringsArgs, GetVpcPeeringsResult, GetVpcPeeringsOutputArgs } from "./getVpcPeerings";
export const getVpcPeerings: typeof import("./getVpcPeerings").getVpcPeerings = null as any;
export const getVpcPeeringsOutput: typeof import("./getVpcPeerings").getVpcPeeringsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcPeerings","getVpcPeeringsOutput"], () => require("./getVpcPeerings"));

export { GetVpcRoutingRoutesArgs, GetVpcRoutingRoutesResult, GetVpcRoutingRoutesOutputArgs } from "./getVpcRoutingRoutes";
export const getVpcRoutingRoutes: typeof import("./getVpcRoutingRoutes").getVpcRoutingRoutes = null as any;
export const getVpcRoutingRoutesOutput: typeof import("./getVpcRoutingRoutes").getVpcRoutingRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getVpcRoutingRoutes","getVpcRoutingRoutesOutput"], () => require("./getVpcRoutingRoutes"));

export { GetVpcRoutingRulesArgs, GetVpcRoutingRulesResult, GetVpcRoutingRulesOutputArgs } from "./getVpcRoutingRules";
export const getVpcRoutingRules: typeof import("./getVpcRoutingRules").getVpcRoutingRules = null as any;
export const getVpcRoutingRulesOutput: typeof import("./getVpcRoutingRules").getVpcRoutingRulesOutput = null as any;
utilities.lazyLoad(exports, ["getVpcRoutingRules","getVpcRoutingRulesOutput"], () => require("./getVpcRoutingRules"));

export { GetVpcRoutingTablesArgs, GetVpcRoutingTablesResult, GetVpcRoutingTablesOutputArgs } from "./getVpcRoutingTables";
export const getVpcRoutingTables: typeof import("./getVpcRoutingTables").getVpcRoutingTables = null as any;
export const getVpcRoutingTablesOutput: typeof import("./getVpcRoutingTables").getVpcRoutingTablesOutput = null as any;
utilities.lazyLoad(exports, ["getVpcRoutingTables","getVpcRoutingTablesOutput"], () => require("./getVpcRoutingTables"));

export { GetVpcsArgs, GetVpcsResult, GetVpcsOutputArgs } from "./getVpcs";
export const getVpcs: typeof import("./getVpcs").getVpcs = null as any;
export const getVpcsOutput: typeof import("./getVpcs").getVpcsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcs","getVpcsOutput"], () => require("./getVpcs"));

export { GslbArgs, GslbState } from "./gslb";
export type Gslb = import("./gslb").Gslb;
export const Gslb: typeof import("./gslb").Gslb = null as any;
utilities.lazyLoad(exports, ["Gslb"], () => require("./gslb"));

export { HpcLiteNewArgs, HpcLiteNewState } from "./hpcLiteNew";
export type HpcLiteNew = import("./hpcLiteNew").HpcLiteNew;
export const HpcLiteNew: typeof import("./hpcLiteNew").HpcLiteNew = null as any;
utilities.lazyLoad(exports, ["HpcLiteNew"], () => require("./hpcLiteNew"));

export { IamAccessKeyArgs, IamAccessKeyState } from "./iamAccessKey";
export type IamAccessKey = import("./iamAccessKey").IamAccessKey;
export const IamAccessKey: typeof import("./iamAccessKey").IamAccessKey = null as any;
utilities.lazyLoad(exports, ["IamAccessKey"], () => require("./iamAccessKey"));

export { IamGroupArgs, IamGroupState } from "./iamGroup";
export type IamGroup = import("./iamGroup").IamGroup;
export const IamGroup: typeof import("./iamGroup").IamGroup = null as any;
utilities.lazyLoad(exports, ["IamGroup"], () => require("./iamGroup"));

export { IamMemberArgs, IamMemberState } from "./iamMember";
export type IamMember = import("./iamMember").IamMember;
export const IamMember: typeof import("./iamMember").IamMember = null as any;
utilities.lazyLoad(exports, ["IamMember"], () => require("./iamMember"));

export { IamPolicyArgs, IamPolicyState } from "./iamPolicy";
export type IamPolicy = import("./iamPolicy").IamPolicy;
export const IamPolicy: typeof import("./iamPolicy").IamPolicy = null as any;
utilities.lazyLoad(exports, ["IamPolicy"], () => require("./iamPolicy"));

export { IamRoleArgs, IamRoleState } from "./iamRole";
export type IamRole = import("./iamRole").IamRole;
export const IamRole: typeof import("./iamRole").IamRole = null as any;
utilities.lazyLoad(exports, ["IamRole"], () => require("./iamRole"));

export { InternetGatewayArgs, InternetGatewayState } from "./internetGateway";
export type InternetGateway = import("./internetGateway").InternetGateway;
export const InternetGateway: typeof import("./internetGateway").InternetGateway = null as any;
utilities.lazyLoad(exports, ["InternetGateway"], () => require("./internetGateway"));

export { KeyPairArgs, KeyPairState } from "./keyPair";
export type KeyPair = import("./keyPair").KeyPair;
export const KeyPair: typeof import("./keyPair").KeyPair = null as any;
utilities.lazyLoad(exports, ["KeyPair"], () => require("./keyPair"));

export { KubernetesAppsArgs, KubernetesAppsState } from "./kubernetesApps";
export type KubernetesApps = import("./kubernetesApps").KubernetesApps;
export const KubernetesApps: typeof import("./kubernetesApps").KubernetesApps = null as any;
utilities.lazyLoad(exports, ["KubernetesApps"], () => require("./kubernetesApps"));

export { KubernetesEngineArgs, KubernetesEngineState } from "./kubernetesEngine";
export type KubernetesEngine = import("./kubernetesEngine").KubernetesEngine;
export const KubernetesEngine: typeof import("./kubernetesEngine").KubernetesEngine = null as any;
utilities.lazyLoad(exports, ["KubernetesEngine"], () => require("./kubernetesEngine"));

export { KubernetesNamespaceArgs, KubernetesNamespaceState } from "./kubernetesNamespace";
export type KubernetesNamespace = import("./kubernetesNamespace").KubernetesNamespace;
export const KubernetesNamespace: typeof import("./kubernetesNamespace").KubernetesNamespace = null as any;
utilities.lazyLoad(exports, ["KubernetesNamespace"], () => require("./kubernetesNamespace"));

export { KubernetesNodePoolArgs, KubernetesNodePoolState } from "./kubernetesNodePool";
export type KubernetesNodePool = import("./kubernetesNodePool").KubernetesNodePool;
export const KubernetesNodePool: typeof import("./kubernetesNodePool").KubernetesNodePool = null as any;
utilities.lazyLoad(exports, ["KubernetesNodePool"], () => require("./kubernetesNodePool"));

export { LaunchConfigurationArgs, LaunchConfigurationState } from "./launchConfiguration";
export type LaunchConfiguration = import("./launchConfiguration").LaunchConfiguration;
export const LaunchConfiguration: typeof import("./launchConfiguration").LaunchConfiguration = null as any;
utilities.lazyLoad(exports, ["LaunchConfiguration"], () => require("./launchConfiguration"));

export { LbProfileArgs, LbProfileState } from "./lbProfile";
export type LbProfile = import("./lbProfile").LbProfile;
export const LbProfile: typeof import("./lbProfile").LbProfile = null as any;
utilities.lazyLoad(exports, ["LbProfile"], () => require("./lbProfile"));

export { LbServerGroupArgs, LbServerGroupState } from "./lbServerGroup";
export type LbServerGroup = import("./lbServerGroup").LbServerGroup;
export const LbServerGroup: typeof import("./lbServerGroup").LbServerGroup = null as any;
utilities.lazyLoad(exports, ["LbServerGroup"], () => require("./lbServerGroup"));

export { LbServiceArgs, LbServiceState } from "./lbService";
export type LbService = import("./lbService").LbService;
export const LbService: typeof import("./lbService").LbService = null as any;
utilities.lazyLoad(exports, ["LbService"], () => require("./lbService"));

export { LoadBalancerArgs, LoadBalancerState } from "./loadBalancer";
export type LoadBalancer = import("./loadBalancer").LoadBalancer;
export const LoadBalancer: typeof import("./loadBalancer").LoadBalancer = null as any;
utilities.lazyLoad(exports, ["LoadBalancer"], () => require("./loadBalancer"));

export { MariadbArgs, MariadbState } from "./mariadb";
export type Mariadb = import("./mariadb").Mariadb;
export const Mariadb: typeof import("./mariadb").Mariadb = null as any;
utilities.lazyLoad(exports, ["Mariadb"], () => require("./mariadb"));

export { MigrationImageArgs, MigrationImageState } from "./migrationImage";
export type MigrationImage = import("./migrationImage").MigrationImage;
export const MigrationImage: typeof import("./migrationImage").MigrationImage = null as any;
utilities.lazyLoad(exports, ["MigrationImage"], () => require("./migrationImage"));

export { MysqlArgs, MysqlState } from "./mysql";
export type Mysql = import("./mysql").Mysql;
export const Mysql: typeof import("./mysql").Mysql = null as any;
utilities.lazyLoad(exports, ["Mysql"], () => require("./mysql"));

export { NatGatewayArgs, NatGatewayState } from "./natGateway";
export type NatGateway = import("./natGateway").NatGateway;
export const NatGateway: typeof import("./natGateway").NatGateway = null as any;
utilities.lazyLoad(exports, ["NatGateway"], () => require("./natGateway"));

export { ObsBucketArgs, ObsBucketState } from "./obsBucket";
export type ObsBucket = import("./obsBucket").ObsBucket;
export const ObsBucket: typeof import("./obsBucket").ObsBucket = null as any;
utilities.lazyLoad(exports, ["ObsBucket"], () => require("./obsBucket"));

export { PlacementGroupArgs, PlacementGroupState } from "./placementGroup";
export type PlacementGroup = import("./placementGroup").PlacementGroup;
export const PlacementGroup: typeof import("./placementGroup").PlacementGroup = null as any;
utilities.lazyLoad(exports, ["PlacementGroup"], () => require("./placementGroup"));

export { PostgresqlArgs, PostgresqlState } from "./postgresql";
export type Postgresql = import("./postgresql").Postgresql;
export const Postgresql: typeof import("./postgresql").Postgresql = null as any;
utilities.lazyLoad(exports, ["Postgresql"], () => require("./postgresql"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { PublicIpArgs, PublicIpState } from "./publicIp";
export type PublicIp = import("./publicIp").PublicIp;
export const PublicIp: typeof import("./publicIp").PublicIp = null as any;
utilities.lazyLoad(exports, ["PublicIp"], () => require("./publicIp"));

export { RedisArgs, RedisState } from "./redis";
export type Redis = import("./redis").Redis;
export const Redis: typeof import("./redis").Redis = null as any;
utilities.lazyLoad(exports, ["Redis"], () => require("./redis"));

export { RedisClusterArgs, RedisClusterState } from "./redisCluster";
export type RedisCluster = import("./redisCluster").RedisCluster;
export const RedisCluster: typeof import("./redisCluster").RedisCluster = null as any;
utilities.lazyLoad(exports, ["RedisCluster"], () => require("./redisCluster"));

export { ResourceGroupArgs, ResourceGroupState } from "./resourceGroup";
export type ResourceGroup = import("./resourceGroup").ResourceGroup;
export const ResourceGroup: typeof import("./resourceGroup").ResourceGroup = null as any;
utilities.lazyLoad(exports, ["ResourceGroup"], () => require("./resourceGroup"));

export { SecurityGroupArgs, SecurityGroupState } from "./securityGroup";
export type SecurityGroup = import("./securityGroup").SecurityGroup;
export const SecurityGroup: typeof import("./securityGroup").SecurityGroup = null as any;
utilities.lazyLoad(exports, ["SecurityGroup"], () => require("./securityGroup"));

export { SecurityGroupBulkRuleArgs, SecurityGroupBulkRuleState } from "./securityGroupBulkRule";
export type SecurityGroupBulkRule = import("./securityGroupBulkRule").SecurityGroupBulkRule;
export const SecurityGroupBulkRule: typeof import("./securityGroupBulkRule").SecurityGroupBulkRule = null as any;
utilities.lazyLoad(exports, ["SecurityGroupBulkRule"], () => require("./securityGroupBulkRule"));

export { SecurityGroupLogstorageArgs, SecurityGroupLogstorageState } from "./securityGroupLogstorage";
export type SecurityGroupLogstorage = import("./securityGroupLogstorage").SecurityGroupLogstorage;
export const SecurityGroupLogstorage: typeof import("./securityGroupLogstorage").SecurityGroupLogstorage = null as any;
utilities.lazyLoad(exports, ["SecurityGroupLogstorage"], () => require("./securityGroupLogstorage"));

export { SecurityGroupRuleArgs, SecurityGroupRuleState } from "./securityGroupRule";
export type SecurityGroupRule = import("./securityGroupRule").SecurityGroupRule;
export const SecurityGroupRule: typeof import("./securityGroupRule").SecurityGroupRule = null as any;
utilities.lazyLoad(exports, ["SecurityGroupRule"], () => require("./securityGroupRule"));

export { SecurityGroupUserIpArgs, SecurityGroupUserIpState } from "./securityGroupUserIp";
export type SecurityGroupUserIp = import("./securityGroupUserIp").SecurityGroupUserIp;
export const SecurityGroupUserIp: typeof import("./securityGroupUserIp").SecurityGroupUserIp = null as any;
utilities.lazyLoad(exports, ["SecurityGroupUserIp"], () => require("./securityGroupUserIp"));

export { SqlserverArgs, SqlserverState } from "./sqlserver";
export type Sqlserver = import("./sqlserver").Sqlserver;
export const Sqlserver: typeof import("./sqlserver").Sqlserver = null as any;
utilities.lazyLoad(exports, ["Sqlserver"], () => require("./sqlserver"));

export { SubnetArgs, SubnetState } from "./subnet";
export type Subnet = import("./subnet").Subnet;
export const Subnet: typeof import("./subnet").Subnet = null as any;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));

export { SubnetPublicIpArgs, SubnetPublicIpState } from "./subnetPublicIp";
export type SubnetPublicIp = import("./subnetPublicIp").SubnetPublicIp;
export const SubnetPublicIp: typeof import("./subnetPublicIp").SubnetPublicIp = null as any;
utilities.lazyLoad(exports, ["SubnetPublicIp"], () => require("./subnetPublicIp"));

export { SubnetSecurityGroupArgs, SubnetSecurityGroupState } from "./subnetSecurityGroup";
export type SubnetSecurityGroup = import("./subnetSecurityGroup").SubnetSecurityGroup;
export const SubnetSecurityGroup: typeof import("./subnetSecurityGroup").SubnetSecurityGroup = null as any;
utilities.lazyLoad(exports, ["SubnetSecurityGroup"], () => require("./subnetSecurityGroup"));

export { SubnetVipArgs, SubnetVipState } from "./subnetVip";
export type SubnetVip = import("./subnetVip").SubnetVip;
export const SubnetVip: typeof import("./subnetVip").SubnetVip = null as any;
utilities.lazyLoad(exports, ["SubnetVip"], () => require("./subnetVip"));

export { TrailArgs, TrailState } from "./trail";
export type Trail = import("./trail").Trail;
export const Trail: typeof import("./trail").Trail = null as any;
utilities.lazyLoad(exports, ["Trail"], () => require("./trail"));

export { TransitGatewayArgs, TransitGatewayState } from "./transitGateway";
export type TransitGateway = import("./transitGateway").TransitGateway;
export const TransitGateway: typeof import("./transitGateway").TransitGateway = null as any;
utilities.lazyLoad(exports, ["TransitGateway"], () => require("./transitGateway"));

export { TransitGatewayConnectionArgs, TransitGatewayConnectionState } from "./transitGatewayConnection";
export type TransitGatewayConnection = import("./transitGatewayConnection").TransitGatewayConnection;
export const TransitGatewayConnection: typeof import("./transitGatewayConnection").TransitGatewayConnection = null as any;
utilities.lazyLoad(exports, ["TransitGatewayConnection"], () => require("./transitGatewayConnection"));

export { TransitGatewayConnectionApproveArgs, TransitGatewayConnectionApproveState } from "./transitGatewayConnectionApprove";
export type TransitGatewayConnectionApprove = import("./transitGatewayConnectionApprove").TransitGatewayConnectionApprove;
export const TransitGatewayConnectionApprove: typeof import("./transitGatewayConnectionApprove").TransitGatewayConnectionApprove = null as any;
utilities.lazyLoad(exports, ["TransitGatewayConnectionApprove"], () => require("./transitGatewayConnectionApprove"));

export { TransitGatewayRoutingArgs, TransitGatewayRoutingState } from "./transitGatewayRouting";
export type TransitGatewayRouting = import("./transitGatewayRouting").TransitGatewayRouting;
export const TransitGatewayRouting: typeof import("./transitGatewayRouting").TransitGatewayRouting = null as any;
utilities.lazyLoad(exports, ["TransitGatewayRouting"], () => require("./transitGatewayRouting"));

export { VirtualServerArgs, VirtualServerState } from "./virtualServer";
export type VirtualServer = import("./virtualServer").VirtualServer;
export const VirtualServer: typeof import("./virtualServer").VirtualServer = null as any;
utilities.lazyLoad(exports, ["VirtualServer"], () => require("./virtualServer"));

export { VpcArgs, VpcState } from "./vpc";
export type Vpc = import("./vpc").Vpc;
export const Vpc: typeof import("./vpc").Vpc = null as any;
utilities.lazyLoad(exports, ["Vpc"], () => require("./vpc"));

export { VpcDnsArgs, VpcDnsState } from "./vpcDns";
export type VpcDns = import("./vpcDns").VpcDns;
export const VpcDns: typeof import("./vpcDns").VpcDns = null as any;
utilities.lazyLoad(exports, ["VpcDns"], () => require("./vpcDns"));

export { VpcPeeringArgs, VpcPeeringState } from "./vpcPeering";
export type VpcPeering = import("./vpcPeering").VpcPeering;
export const VpcPeering: typeof import("./vpcPeering").VpcPeering = null as any;
utilities.lazyLoad(exports, ["VpcPeering"], () => require("./vpcPeering"));

export { VpcPeeringApproveArgs, VpcPeeringApproveState } from "./vpcPeeringApprove";
export type VpcPeeringApprove = import("./vpcPeeringApprove").VpcPeeringApprove;
export const VpcPeeringApprove: typeof import("./vpcPeeringApprove").VpcPeeringApprove = null as any;
utilities.lazyLoad(exports, ["VpcPeeringApprove"], () => require("./vpcPeeringApprove"));

export { VpcPeeringCancelArgs, VpcPeeringCancelState } from "./vpcPeeringCancel";
export type VpcPeeringCancel = import("./vpcPeeringCancel").VpcPeeringCancel;
export const VpcPeeringCancel: typeof import("./vpcPeeringCancel").VpcPeeringCancel = null as any;
utilities.lazyLoad(exports, ["VpcPeeringCancel"], () => require("./vpcPeeringCancel"));

export { VpcPeeringRejectArgs, VpcPeeringRejectState } from "./vpcPeeringReject";
export type VpcPeeringReject = import("./vpcPeeringReject").VpcPeeringReject;
export const VpcPeeringReject: typeof import("./vpcPeeringReject").VpcPeeringReject = null as any;
utilities.lazyLoad(exports, ["VpcPeeringReject"], () => require("./vpcPeeringReject"));

export { VpcRoutingArgs, VpcRoutingState } from "./vpcRouting";
export type VpcRouting = import("./vpcRouting").VpcRouting;
export const VpcRouting: typeof import("./vpcRouting").VpcRouting = null as any;
utilities.lazyLoad(exports, ["VpcRouting"], () => require("./vpcRouting"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "samsungcloudplatform:index/autoScalingGroup:AutoScalingGroup":
                return new AutoScalingGroup(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/autoScalingGroupLoadBalancer:AutoScalingGroupLoadBalancer":
                return new AutoScalingGroupLoadBalancer(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/autoScalingGroupPolicy:AutoScalingGroupPolicy":
                return new AutoScalingGroupPolicy(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/backup:Backup":
                return new Backup(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/blockStorage:BlockStorage":
                return new BlockStorage(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/bmBlockStorage:BmBlockStorage":
                return new BmBlockStorage(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/bmServer:BmServer":
                return new BmServer(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/bmServerVdc:BmServerVdc":
                return new BmServerVdc(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/customImage:CustomImage":
                return new CustomImage(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/dconVpcConnection:DconVpcConnection":
                return new DconVpcConnection(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/directConnect:DirectConnect":
                return new DirectConnect(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/directConnectRouting:DirectConnectRouting":
                return new DirectConnectRouting(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/dnsDomain:DnsDomain":
                return new DnsDomain(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/dnsRecord:DnsRecord":
                return new DnsRecord(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/endpoint:Endpoint":
                return new Endpoint(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/epas:Epas":
                return new Epas(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/fileStorage:FileStorage":
                return new FileStorage(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/firewall:Firewall":
                return new Firewall(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/firewallBulkRule:FirewallBulkRule":
                return new FirewallBulkRule(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/firewallLogstorage:FirewallLogstorage":
                return new FirewallLogstorage(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/firewallRule:FirewallRule":
                return new FirewallRule(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/gslb:Gslb":
                return new Gslb(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/hpcLiteNew:HpcLiteNew":
                return new HpcLiteNew(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/iamAccessKey:IamAccessKey":
                return new IamAccessKey(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/iamGroup:IamGroup":
                return new IamGroup(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/iamMember:IamMember":
                return new IamMember(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/iamPolicy:IamPolicy":
                return new IamPolicy(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/iamRole:IamRole":
                return new IamRole(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/internetGateway:InternetGateway":
                return new InternetGateway(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/keyPair:KeyPair":
                return new KeyPair(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/kubernetesApps:KubernetesApps":
                return new KubernetesApps(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/kubernetesEngine:KubernetesEngine":
                return new KubernetesEngine(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/kubernetesNamespace:KubernetesNamespace":
                return new KubernetesNamespace(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/kubernetesNodePool:KubernetesNodePool":
                return new KubernetesNodePool(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/launchConfiguration:LaunchConfiguration":
                return new LaunchConfiguration(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/lbProfile:LbProfile":
                return new LbProfile(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/lbServerGroup:LbServerGroup":
                return new LbServerGroup(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/lbService:LbService":
                return new LbService(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/loadBalancer:LoadBalancer":
                return new LoadBalancer(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/mariadb:Mariadb":
                return new Mariadb(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/migrationImage:MigrationImage":
                return new MigrationImage(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/mysql:Mysql":
                return new Mysql(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/natGateway:NatGateway":
                return new NatGateway(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/obsBucket:ObsBucket":
                return new ObsBucket(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/placementGroup:PlacementGroup":
                return new PlacementGroup(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/postgresql:Postgresql":
                return new Postgresql(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/publicIp:PublicIp":
                return new PublicIp(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/redis:Redis":
                return new Redis(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/redisCluster:RedisCluster":
                return new RedisCluster(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/resourceGroup:ResourceGroup":
                return new ResourceGroup(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/securityGroup:SecurityGroup":
                return new SecurityGroup(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/securityGroupBulkRule:SecurityGroupBulkRule":
                return new SecurityGroupBulkRule(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/securityGroupLogstorage:SecurityGroupLogstorage":
                return new SecurityGroupLogstorage(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/securityGroupRule:SecurityGroupRule":
                return new SecurityGroupRule(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/securityGroupUserIp:SecurityGroupUserIp":
                return new SecurityGroupUserIp(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/sqlserver:Sqlserver":
                return new Sqlserver(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/subnetPublicIp:SubnetPublicIp":
                return new SubnetPublicIp(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/subnetSecurityGroup:SubnetSecurityGroup":
                return new SubnetSecurityGroup(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/subnetVip:SubnetVip":
                return new SubnetVip(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/trail:Trail":
                return new Trail(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/transitGateway:TransitGateway":
                return new TransitGateway(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/transitGatewayConnection:TransitGatewayConnection":
                return new TransitGatewayConnection(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/transitGatewayConnectionApprove:TransitGatewayConnectionApprove":
                return new TransitGatewayConnectionApprove(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/transitGatewayRouting:TransitGatewayRouting":
                return new TransitGatewayRouting(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/virtualServer:VirtualServer":
                return new VirtualServer(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/vpc:Vpc":
                return new Vpc(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/vpcDns:VpcDns":
                return new VpcDns(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/vpcPeering:VpcPeering":
                return new VpcPeering(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/vpcPeeringApprove:VpcPeeringApprove":
                return new VpcPeeringApprove(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/vpcPeeringCancel:VpcPeeringCancel":
                return new VpcPeeringCancel(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/vpcPeeringReject:VpcPeeringReject":
                return new VpcPeeringReject(name, <any>undefined, { urn })
            case "samsungcloudplatform:index/vpcRouting:VpcRouting":
                return new VpcRouting(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/autoScalingGroup", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/autoScalingGroupLoadBalancer", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/autoScalingGroupPolicy", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/backup", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/blockStorage", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/bmBlockStorage", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/bmServer", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/bmServerVdc", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/customImage", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/dconVpcConnection", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/directConnect", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/directConnectRouting", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/dnsDomain", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/dnsRecord", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/endpoint", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/epas", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/fileStorage", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/firewall", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/firewallBulkRule", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/firewallLogstorage", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/firewallRule", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/gslb", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/hpcLiteNew", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/iamAccessKey", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/iamGroup", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/iamMember", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/iamPolicy", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/iamRole", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/internetGateway", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/keyPair", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/kubernetesApps", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/kubernetesEngine", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/kubernetesNamespace", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/kubernetesNodePool", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/launchConfiguration", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/lbProfile", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/lbServerGroup", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/lbService", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/loadBalancer", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/mariadb", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/migrationImage", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/mysql", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/natGateway", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/obsBucket", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/placementGroup", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/postgresql", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/publicIp", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/redis", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/redisCluster", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/resourceGroup", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/securityGroup", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/securityGroupBulkRule", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/securityGroupLogstorage", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/securityGroupRule", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/securityGroupUserIp", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/sqlserver", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/subnet", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/subnetPublicIp", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/subnetSecurityGroup", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/subnetVip", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/trail", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/transitGateway", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/transitGatewayConnection", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/transitGatewayConnectionApprove", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/transitGatewayRouting", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/virtualServer", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/vpc", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/vpcDns", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/vpcPeering", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/vpcPeeringApprove", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/vpcPeeringCancel", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/vpcPeeringReject", _module)
pulumi.runtime.registerResourceModule("samsungcloudplatform", "index/vpcRouting", _module)
pulumi.runtime.registerResourcePackage("samsungcloudplatform", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:samsungcloudplatform") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
