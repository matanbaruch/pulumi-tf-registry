// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEpas(args: GetEpasArgs, opts?: pulumi.InvokeOptions): Promise<GetEpasResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("samsungcloudplatform:index/getEpas:getEpas", {
        "epasClusterId": args.epasClusterId,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEpas.
 */
export interface GetEpasArgs {
    epasClusterId: string;
    id?: string;
}

/**
 * A collection of values returned by getEpas.
 */
export interface GetEpasResult {
    readonly auditEnabled: boolean;
    readonly backupConfigs: outputs.GetEpasBackupConfig[];
    readonly blockId: string;
    readonly contracts: outputs.GetEpasContract[];
    readonly createdBy: string;
    readonly createdDt: string;
    readonly databaseVersion: string;
    readonly epasClusterId: string;
    readonly epasClusterName: string;
    readonly epasClusterState: string;
    readonly epasInitialConfigs: outputs.GetEpasEpasInitialConfig[];
    readonly epasMasterClusterId: string;
    readonly epasReplicaClusterIds: string[];
    readonly epasServerGroups: outputs.GetEpasEpasServerGroup[];
    readonly id: string;
    readonly imageId: string;
    readonly maintenances: outputs.GetEpasMaintenance[];
    readonly modifiedBy: string;
    readonly modifiedDt: string;
    readonly natIpAddress: string;
    readonly projectId: string;
    readonly securityGroupIds: string[];
    readonly serviceZoneId: string;
    readonly subnetId: string;
    readonly timezone: string;
    readonly vpcId: string;
}
export function getEpasOutput(args: GetEpasOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEpasResult> {
    return pulumi.output(args).apply((a: any) => getEpas(a, opts))
}

/**
 * A collection of arguments for invoking getEpas.
 */
export interface GetEpasOutputArgs {
    epasClusterId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
}
