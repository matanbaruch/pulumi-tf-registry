// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LbServerGroup extends pulumi.CustomResource {
    /**
     * Get an existing LbServerGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbServerGroupState, opts?: pulumi.CustomResourceOptions): LbServerGroup {
        return new LbServerGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'samsungcloudplatform:index/lbServerGroup:LbServerGroup';

    /**
     * Returns true if the given object is an instance of LbServerGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LbServerGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LbServerGroup.__pulumiType;
    }

    /**
     * Balancing algorithm. (ROUND_ROBIN, WEIGHTED_ROUND_ROBIN, LEAST_CONNECTION, WEIGHTED_LEAST_CONNECTION, IP_HASH)
     */
    public readonly algorithm!: pulumi.Output<string>;
    /**
     * Load-Balancer id
     */
    public readonly lbId!: pulumi.Output<string>;
    /**
     * Monitor count
     */
    public readonly monitorCount!: pulumi.Output<number>;
    /**
     * Monitor http method. (Only HTTP monitor_protocol. GET, POST)
     */
    public readonly monitorHttpMethod!: pulumi.Output<string | undefined>;
    /**
     * Request body content. (Only POST monitor_http_method. 0 to 300 byte characters)
     */
    public readonly monitorHttpRequestBody!: pulumi.Output<string | undefined>;
    /**
     * Response body content. (Only HTTP monitor_protocol. 0 to 300 byte characters)
     */
    public readonly monitorHttpResponseBody!: pulumi.Output<string | undefined>;
    /**
     * Monitor http url path. (Only HTTP monitor_protocol. 0 to 50 alpha-numeric characters with period, dash, underscore)
     */
    public readonly monitorHttpUrl!: pulumi.Output<string | undefined>;
    /**
     * Monitor http version. (Only HTTP monitor_protocol. 1.0, 1.1)
     */
    public readonly monitorHttpVersion!: pulumi.Output<string | undefined>;
    /**
     * Monitor id
     */
    public /*out*/ readonly monitorId!: pulumi.Output<string>;
    /**
     * Monitor interval time(s)
     */
    public readonly monitorIntervalSec!: pulumi.Output<number>;
    /**
     * Monitor port
     */
    public readonly monitorPort!: pulumi.Output<number>;
    /**
     * Monitor protocol
     */
    public readonly monitorProtocol!: pulumi.Output<string>;
    /**
     * Monitor timeout second
     */
    public readonly monitorTimeoutSec!: pulumi.Output<number>;
    /**
     * Load-Balancer server group name. (3 to 20 characters with dash in middle)
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Server-Group members
     */
    public readonly serverGroupMembers!: pulumi.Output<outputs.LbServerGroupServerGroupMember[] | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a LbServerGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LbServerGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbServerGroupArgs | LbServerGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LbServerGroupState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["lbId"] = state ? state.lbId : undefined;
            resourceInputs["monitorCount"] = state ? state.monitorCount : undefined;
            resourceInputs["monitorHttpMethod"] = state ? state.monitorHttpMethod : undefined;
            resourceInputs["monitorHttpRequestBody"] = state ? state.monitorHttpRequestBody : undefined;
            resourceInputs["monitorHttpResponseBody"] = state ? state.monitorHttpResponseBody : undefined;
            resourceInputs["monitorHttpUrl"] = state ? state.monitorHttpUrl : undefined;
            resourceInputs["monitorHttpVersion"] = state ? state.monitorHttpVersion : undefined;
            resourceInputs["monitorId"] = state ? state.monitorId : undefined;
            resourceInputs["monitorIntervalSec"] = state ? state.monitorIntervalSec : undefined;
            resourceInputs["monitorPort"] = state ? state.monitorPort : undefined;
            resourceInputs["monitorProtocol"] = state ? state.monitorProtocol : undefined;
            resourceInputs["monitorTimeoutSec"] = state ? state.monitorTimeoutSec : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["serverGroupMembers"] = state ? state.serverGroupMembers : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as LbServerGroupArgs | undefined;
            if ((!args || args.algorithm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'algorithm'");
            }
            if ((!args || args.lbId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lbId'");
            }
            if ((!args || args.monitorCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitorCount'");
            }
            if ((!args || args.monitorIntervalSec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitorIntervalSec'");
            }
            if ((!args || args.monitorPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitorPort'");
            }
            if ((!args || args.monitorProtocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitorProtocol'");
            }
            if ((!args || args.monitorTimeoutSec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitorTimeoutSec'");
            }
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["lbId"] = args ? args.lbId : undefined;
            resourceInputs["monitorCount"] = args ? args.monitorCount : undefined;
            resourceInputs["monitorHttpMethod"] = args ? args.monitorHttpMethod : undefined;
            resourceInputs["monitorHttpRequestBody"] = args ? args.monitorHttpRequestBody : undefined;
            resourceInputs["monitorHttpResponseBody"] = args ? args.monitorHttpResponseBody : undefined;
            resourceInputs["monitorHttpUrl"] = args ? args.monitorHttpUrl : undefined;
            resourceInputs["monitorHttpVersion"] = args ? args.monitorHttpVersion : undefined;
            resourceInputs["monitorIntervalSec"] = args ? args.monitorIntervalSec : undefined;
            resourceInputs["monitorPort"] = args ? args.monitorPort : undefined;
            resourceInputs["monitorProtocol"] = args ? args.monitorProtocol : undefined;
            resourceInputs["monitorTimeoutSec"] = args ? args.monitorTimeoutSec : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serverGroupMembers"] = args ? args.serverGroupMembers : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["monitorId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LbServerGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LbServerGroup resources.
 */
export interface LbServerGroupState {
    /**
     * Balancing algorithm. (ROUND_ROBIN, WEIGHTED_ROUND_ROBIN, LEAST_CONNECTION, WEIGHTED_LEAST_CONNECTION, IP_HASH)
     */
    algorithm?: pulumi.Input<string>;
    /**
     * Load-Balancer id
     */
    lbId?: pulumi.Input<string>;
    /**
     * Monitor count
     */
    monitorCount?: pulumi.Input<number>;
    /**
     * Monitor http method. (Only HTTP monitor_protocol. GET, POST)
     */
    monitorHttpMethod?: pulumi.Input<string>;
    /**
     * Request body content. (Only POST monitor_http_method. 0 to 300 byte characters)
     */
    monitorHttpRequestBody?: pulumi.Input<string>;
    /**
     * Response body content. (Only HTTP monitor_protocol. 0 to 300 byte characters)
     */
    monitorHttpResponseBody?: pulumi.Input<string>;
    /**
     * Monitor http url path. (Only HTTP monitor_protocol. 0 to 50 alpha-numeric characters with period, dash, underscore)
     */
    monitorHttpUrl?: pulumi.Input<string>;
    /**
     * Monitor http version. (Only HTTP monitor_protocol. 1.0, 1.1)
     */
    monitorHttpVersion?: pulumi.Input<string>;
    /**
     * Monitor id
     */
    monitorId?: pulumi.Input<string>;
    /**
     * Monitor interval time(s)
     */
    monitorIntervalSec?: pulumi.Input<number>;
    /**
     * Monitor port
     */
    monitorPort?: pulumi.Input<number>;
    /**
     * Monitor protocol
     */
    monitorProtocol?: pulumi.Input<string>;
    /**
     * Monitor timeout second
     */
    monitorTimeoutSec?: pulumi.Input<number>;
    /**
     * Load-Balancer server group name. (3 to 20 characters with dash in middle)
     */
    name?: pulumi.Input<string>;
    /**
     * Server-Group members
     */
    serverGroupMembers?: pulumi.Input<pulumi.Input<inputs.LbServerGroupServerGroupMember>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a LbServerGroup resource.
 */
export interface LbServerGroupArgs {
    /**
     * Balancing algorithm. (ROUND_ROBIN, WEIGHTED_ROUND_ROBIN, LEAST_CONNECTION, WEIGHTED_LEAST_CONNECTION, IP_HASH)
     */
    algorithm: pulumi.Input<string>;
    /**
     * Load-Balancer id
     */
    lbId: pulumi.Input<string>;
    /**
     * Monitor count
     */
    monitorCount: pulumi.Input<number>;
    /**
     * Monitor http method. (Only HTTP monitor_protocol. GET, POST)
     */
    monitorHttpMethod?: pulumi.Input<string>;
    /**
     * Request body content. (Only POST monitor_http_method. 0 to 300 byte characters)
     */
    monitorHttpRequestBody?: pulumi.Input<string>;
    /**
     * Response body content. (Only HTTP monitor_protocol. 0 to 300 byte characters)
     */
    monitorHttpResponseBody?: pulumi.Input<string>;
    /**
     * Monitor http url path. (Only HTTP monitor_protocol. 0 to 50 alpha-numeric characters with period, dash, underscore)
     */
    monitorHttpUrl?: pulumi.Input<string>;
    /**
     * Monitor http version. (Only HTTP monitor_protocol. 1.0, 1.1)
     */
    monitorHttpVersion?: pulumi.Input<string>;
    /**
     * Monitor interval time(s)
     */
    monitorIntervalSec: pulumi.Input<number>;
    /**
     * Monitor port
     */
    monitorPort: pulumi.Input<number>;
    /**
     * Monitor protocol
     */
    monitorProtocol: pulumi.Input<string>;
    /**
     * Monitor timeout second
     */
    monitorTimeoutSec: pulumi.Input<number>;
    /**
     * Load-Balancer server group name. (3 to 20 characters with dash in middle)
     */
    name?: pulumi.Input<string>;
    /**
     * Server-Group members
     */
    serverGroupMembers?: pulumi.Input<pulumi.Input<inputs.LbServerGroupServerGroupMember>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
