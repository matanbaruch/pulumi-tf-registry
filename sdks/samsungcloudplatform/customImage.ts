// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CustomImage extends pulumi.CustomResource {
    /**
     * Get an existing CustomImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomImageState, opts?: pulumi.CustomResourceOptions): CustomImage {
        return new CustomImage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'samsungcloudplatform:index/customImage:CustomImage';

    /**
     * Returns true if the given object is an instance of CustomImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomImage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomImage.__pulumiType;
    }

    public /*out*/ readonly availabilityZoneName!: pulumi.Output<string>;
    public /*out*/ readonly baseImage!: pulumi.Output<string>;
    public /*out*/ readonly blockId!: pulumi.Output<string>;
    public /*out*/ readonly category!: pulumi.Output<string>;
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    public /*out*/ readonly createdDt!: pulumi.Output<string>;
    public /*out*/ readonly defaultDiskSize!: pulumi.Output<number>;
    /**
     * Extra disk size.
     */
    public /*out*/ readonly diskSize!: pulumi.Output<number>;
    public /*out*/ readonly disks!: pulumi.Output<outputs.CustomImageDisk[]>;
    public /*out*/ readonly icon!: pulumi.Output<{[key: string]: string}>;
    /**
     * Custom image description.
     */
    public readonly imageDescription!: pulumi.Output<string | undefined>;
    public /*out*/ readonly imageId!: pulumi.Output<string>;
    /**
     * Custom image name.
     */
    public readonly imageName!: pulumi.Output<string>;
    /**
     * Image state (ACTIVE)
     */
    public /*out*/ readonly imageState!: pulumi.Output<string>;
    /**
     * Image type (STANDARD, CUSTOM, MIGRATION)
     */
    public /*out*/ readonly imageType!: pulumi.Output<string>;
    public /*out*/ readonly modifiedBy!: pulumi.Output<string>;
    public /*out*/ readonly modifiedDt!: pulumi.Output<string>;
    public /*out*/ readonly originImageId!: pulumi.Output<string>;
    public /*out*/ readonly originImageName!: pulumi.Output<string>;
    /**
     * Origin virtual server id.
     */
    public readonly originVirtualServerId!: pulumi.Output<string>;
    /**
     * OS type (Windows, Ubuntu, ..)
     */
    public /*out*/ readonly osType!: pulumi.Output<string>;
    public /*out*/ readonly productGroupId!: pulumi.Output<string>;
    public /*out*/ readonly products!: pulumi.Output<outputs.CustomImageProduct[]>;
    public /*out*/ readonly projectId!: pulumi.Output<string>;
    public /*out*/ readonly properties!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly serviceZoneId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a CustomImage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomImageArgs | CustomImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomImageState | undefined;
            resourceInputs["availabilityZoneName"] = state ? state.availabilityZoneName : undefined;
            resourceInputs["baseImage"] = state ? state.baseImage : undefined;
            resourceInputs["blockId"] = state ? state.blockId : undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["createdDt"] = state ? state.createdDt : undefined;
            resourceInputs["defaultDiskSize"] = state ? state.defaultDiskSize : undefined;
            resourceInputs["diskSize"] = state ? state.diskSize : undefined;
            resourceInputs["disks"] = state ? state.disks : undefined;
            resourceInputs["icon"] = state ? state.icon : undefined;
            resourceInputs["imageDescription"] = state ? state.imageDescription : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["imageName"] = state ? state.imageName : undefined;
            resourceInputs["imageState"] = state ? state.imageState : undefined;
            resourceInputs["imageType"] = state ? state.imageType : undefined;
            resourceInputs["modifiedBy"] = state ? state.modifiedBy : undefined;
            resourceInputs["modifiedDt"] = state ? state.modifiedDt : undefined;
            resourceInputs["originImageId"] = state ? state.originImageId : undefined;
            resourceInputs["originImageName"] = state ? state.originImageName : undefined;
            resourceInputs["originVirtualServerId"] = state ? state.originVirtualServerId : undefined;
            resourceInputs["osType"] = state ? state.osType : undefined;
            resourceInputs["productGroupId"] = state ? state.productGroupId : undefined;
            resourceInputs["products"] = state ? state.products : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["serviceZoneId"] = state ? state.serviceZoneId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as CustomImageArgs | undefined;
            if ((!args || args.imageName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageName'");
            }
            if ((!args || args.originVirtualServerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'originVirtualServerId'");
            }
            resourceInputs["imageDescription"] = args ? args.imageDescription : undefined;
            resourceInputs["imageName"] = args ? args.imageName : undefined;
            resourceInputs["originVirtualServerId"] = args ? args.originVirtualServerId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["availabilityZoneName"] = undefined /*out*/;
            resourceInputs["baseImage"] = undefined /*out*/;
            resourceInputs["blockId"] = undefined /*out*/;
            resourceInputs["category"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["createdDt"] = undefined /*out*/;
            resourceInputs["defaultDiskSize"] = undefined /*out*/;
            resourceInputs["diskSize"] = undefined /*out*/;
            resourceInputs["disks"] = undefined /*out*/;
            resourceInputs["icon"] = undefined /*out*/;
            resourceInputs["imageId"] = undefined /*out*/;
            resourceInputs["imageState"] = undefined /*out*/;
            resourceInputs["imageType"] = undefined /*out*/;
            resourceInputs["modifiedBy"] = undefined /*out*/;
            resourceInputs["modifiedDt"] = undefined /*out*/;
            resourceInputs["originImageId"] = undefined /*out*/;
            resourceInputs["originImageName"] = undefined /*out*/;
            resourceInputs["osType"] = undefined /*out*/;
            resourceInputs["productGroupId"] = undefined /*out*/;
            resourceInputs["products"] = undefined /*out*/;
            resourceInputs["projectId"] = undefined /*out*/;
            resourceInputs["properties"] = undefined /*out*/;
            resourceInputs["serviceZoneId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomImage.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CustomImage resources.
 */
export interface CustomImageState {
    availabilityZoneName?: pulumi.Input<string>;
    baseImage?: pulumi.Input<string>;
    blockId?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    createdDt?: pulumi.Input<string>;
    defaultDiskSize?: pulumi.Input<number>;
    /**
     * Extra disk size.
     */
    diskSize?: pulumi.Input<number>;
    disks?: pulumi.Input<pulumi.Input<inputs.CustomImageDisk>[]>;
    icon?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Custom image description.
     */
    imageDescription?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    /**
     * Custom image name.
     */
    imageName?: pulumi.Input<string>;
    /**
     * Image state (ACTIVE)
     */
    imageState?: pulumi.Input<string>;
    /**
     * Image type (STANDARD, CUSTOM, MIGRATION)
     */
    imageType?: pulumi.Input<string>;
    modifiedBy?: pulumi.Input<string>;
    modifiedDt?: pulumi.Input<string>;
    originImageId?: pulumi.Input<string>;
    originImageName?: pulumi.Input<string>;
    /**
     * Origin virtual server id.
     */
    originVirtualServerId?: pulumi.Input<string>;
    /**
     * OS type (Windows, Ubuntu, ..)
     */
    osType?: pulumi.Input<string>;
    productGroupId?: pulumi.Input<string>;
    products?: pulumi.Input<pulumi.Input<inputs.CustomImageProduct>[]>;
    projectId?: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    serviceZoneId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a CustomImage resource.
 */
export interface CustomImageArgs {
    /**
     * Custom image description.
     */
    imageDescription?: pulumi.Input<string>;
    /**
     * Custom image name.
     */
    imageName: pulumi.Input<string>;
    /**
     * Origin virtual server id.
     */
    originVirtualServerId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
