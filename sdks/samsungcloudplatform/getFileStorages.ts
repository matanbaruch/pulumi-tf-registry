// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getFileStorages(args?: GetFileStoragesArgs, opts?: pulumi.InvokeOptions): Promise<GetFileStoragesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("samsungcloudplatform:index/getFileStorages:getFileStorages", {
        "blockId": args.blockId,
        "createdBy": args.createdBy,
        "fileStorageId": args.fileStorageId,
        "fileStorageName": args.fileStorageName,
        "fileStorageProtocol": args.fileStorageProtocol,
        "fileStorageState": args.fileStorageState,
        "fileStorageStates": args.fileStorageStates,
        "id": args.id,
        "page": args.page,
        "serviceZoneId": args.serviceZoneId,
        "size": args.size,
        "sorts": args.sorts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFileStorages.
 */
export interface GetFileStoragesArgs {
    blockId?: string;
    createdBy?: string;
    fileStorageId?: string;
    fileStorageName?: string;
    fileStorageProtocol?: string;
    fileStorageState?: string;
    fileStorageStates?: string[];
    id?: string;
    page?: number;
    serviceZoneId?: string;
    size?: number;
    sorts?: string[];
}

/**
 * A collection of values returned by getFileStorages.
 */
export interface GetFileStoragesResult {
    readonly blockId?: string;
    readonly contents: outputs.GetFileStoragesContent[];
    readonly createdBy?: string;
    readonly fileStorageId?: string;
    readonly fileStorageName?: string;
    readonly fileStorageProtocol?: string;
    readonly fileStorageState?: string;
    readonly fileStorageStates?: string[];
    readonly id: string;
    readonly page?: number;
    readonly serviceZoneId?: string;
    readonly size?: number;
    readonly sorts?: string[];
    readonly totalCount: number;
}
export function getFileStoragesOutput(args?: GetFileStoragesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFileStoragesResult> {
    return pulumi.output(args).apply((a: any) => getFileStorages(a, opts))
}

/**
 * A collection of arguments for invoking getFileStorages.
 */
export interface GetFileStoragesOutputArgs {
    blockId?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    fileStorageId?: pulumi.Input<string>;
    fileStorageName?: pulumi.Input<string>;
    fileStorageProtocol?: pulumi.Input<string>;
    fileStorageState?: pulumi.Input<string>;
    fileStorageStates?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<string>;
    page?: pulumi.Input<number>;
    serviceZoneId?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    sorts?: pulumi.Input<pulumi.Input<string>[]>;
}
