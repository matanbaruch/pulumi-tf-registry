// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KubernetesEngine extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesEngine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesEngineState, opts?: pulumi.CustomResourceOptions): KubernetesEngine {
        return new KubernetesEngine(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'samsungcloudplatform:index/kubernetesEngine:KubernetesEngine';

    /**
     * Returns true if the given object is an instance of KubernetesEngine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesEngine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesEngine.__pulumiType;
    }

    /**
     * CIFS volume id
     */
    public readonly cifsVolumeId!: pulumi.Output<string | undefined>;
    /**
     * Enable cloud logging
     */
    public readonly cloudLoggingEnabled!: pulumi.Output<boolean>;
    /**
     * Kube config of the kubernetes cluster
     */
    public /*out*/ readonly kubeConfig!: pulumi.Output<string>;
    /**
     * Kubernetes version (Contact administrator to check supported version)
     */
    public readonly kubernetesVersion!: pulumi.Output<string>;
    /**
     * Load balancer ID
     */
    public readonly loadBalancerId!: pulumi.Output<string | undefined>;
    /**
     * Kubernetes engine name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Tag list
     */
    public readonly privateAclResources!: pulumi.Output<outputs.KubernetesEnginePrivateAclResource[] | undefined>;
    /**
     * List of comma separated IP addresses (CIDR or Single IP) for access control
     */
    public readonly publicAclIpAddress!: pulumi.Output<string | undefined>;
    /**
     * Public endpoint URL for the kubernetes cluster
     */
    public /*out*/ readonly publicEndpoint!: pulumi.Output<string>;
    /**
     * Security group ID
     */
    public readonly securityGroupId!: pulumi.Output<string>;
    /**
     * Subnet ID
     */
    public readonly subnetId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * File storage volume ID
     */
    public readonly volumeId!: pulumi.Output<string>;
    /**
     * VPC ID
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a KubernetesEngine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesEngineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesEngineArgs | KubernetesEngineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubernetesEngineState | undefined;
            resourceInputs["cifsVolumeId"] = state ? state.cifsVolumeId : undefined;
            resourceInputs["cloudLoggingEnabled"] = state ? state.cloudLoggingEnabled : undefined;
            resourceInputs["kubeConfig"] = state ? state.kubeConfig : undefined;
            resourceInputs["kubernetesVersion"] = state ? state.kubernetesVersion : undefined;
            resourceInputs["loadBalancerId"] = state ? state.loadBalancerId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateAclResources"] = state ? state.privateAclResources : undefined;
            resourceInputs["publicAclIpAddress"] = state ? state.publicAclIpAddress : undefined;
            resourceInputs["publicEndpoint"] = state ? state.publicEndpoint : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["volumeId"] = state ? state.volumeId : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as KubernetesEngineArgs | undefined;
            if ((!args || args.kubernetesVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kubernetesVersion'");
            }
            if ((!args || args.securityGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.volumeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeId'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["cifsVolumeId"] = args ? args.cifsVolumeId : undefined;
            resourceInputs["cloudLoggingEnabled"] = args ? args.cloudLoggingEnabled : undefined;
            resourceInputs["kubernetesVersion"] = args ? args.kubernetesVersion : undefined;
            resourceInputs["loadBalancerId"] = args ? args.loadBalancerId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privateAclResources"] = args ? args.privateAclResources : undefined;
            resourceInputs["publicAclIpAddress"] = args ? args.publicAclIpAddress : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["volumeId"] = args ? args.volumeId : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["kubeConfig"] = undefined /*out*/;
            resourceInputs["publicEndpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KubernetesEngine.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KubernetesEngine resources.
 */
export interface KubernetesEngineState {
    /**
     * CIFS volume id
     */
    cifsVolumeId?: pulumi.Input<string>;
    /**
     * Enable cloud logging
     */
    cloudLoggingEnabled?: pulumi.Input<boolean>;
    /**
     * Kube config of the kubernetes cluster
     */
    kubeConfig?: pulumi.Input<string>;
    /**
     * Kubernetes version (Contact administrator to check supported version)
     */
    kubernetesVersion?: pulumi.Input<string>;
    /**
     * Load balancer ID
     */
    loadBalancerId?: pulumi.Input<string>;
    /**
     * Kubernetes engine name
     */
    name?: pulumi.Input<string>;
    /**
     * Tag list
     */
    privateAclResources?: pulumi.Input<pulumi.Input<inputs.KubernetesEnginePrivateAclResource>[]>;
    /**
     * List of comma separated IP addresses (CIDR or Single IP) for access control
     */
    publicAclIpAddress?: pulumi.Input<string>;
    /**
     * Public endpoint URL for the kubernetes cluster
     */
    publicEndpoint?: pulumi.Input<string>;
    /**
     * Security group ID
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * Subnet ID
     */
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * File storage volume ID
     */
    volumeId?: pulumi.Input<string>;
    /**
     * VPC ID
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KubernetesEngine resource.
 */
export interface KubernetesEngineArgs {
    /**
     * CIFS volume id
     */
    cifsVolumeId?: pulumi.Input<string>;
    /**
     * Enable cloud logging
     */
    cloudLoggingEnabled?: pulumi.Input<boolean>;
    /**
     * Kubernetes version (Contact administrator to check supported version)
     */
    kubernetesVersion: pulumi.Input<string>;
    /**
     * Load balancer ID
     */
    loadBalancerId?: pulumi.Input<string>;
    /**
     * Kubernetes engine name
     */
    name?: pulumi.Input<string>;
    /**
     * Tag list
     */
    privateAclResources?: pulumi.Input<pulumi.Input<inputs.KubernetesEnginePrivateAclResource>[]>;
    /**
     * List of comma separated IP addresses (CIDR or Single IP) for access control
     */
    publicAclIpAddress?: pulumi.Input<string>;
    /**
     * Security group ID
     */
    securityGroupId: pulumi.Input<string>;
    /**
     * Subnet ID
     */
    subnetId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * File storage volume ID
     */
    volumeId: pulumi.Input<string>;
    /**
     * VPC ID
     */
    vpcId: pulumi.Input<string>;
}
