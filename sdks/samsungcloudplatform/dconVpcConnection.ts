// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DconVpcConnection extends pulumi.CustomResource {
    /**
     * Get an existing DconVpcConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DconVpcConnectionState, opts?: pulumi.CustomResourceOptions): DconVpcConnection {
        return new DconVpcConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'samsungcloudplatform:index/dconVpcConnection:DconVpcConnection';

    /**
     * Returns true if the given object is an instance of DconVpcConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DconVpcConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DconVpcConnection.__pulumiType;
    }

    /**
     * Dcon-Vpc connection description. (0 to 100 characters)
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Direct connect id of requester
     */
    public readonly directConnectId!: pulumi.Output<string>;
    /**
     * Firewall enabled
     */
    public readonly firewallEnabled!: pulumi.Output<boolean>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Vpc id of approver
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a DconVpcConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DconVpcConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DconVpcConnectionArgs | DconVpcConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DconVpcConnectionState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["directConnectId"] = state ? state.directConnectId : undefined;
            resourceInputs["firewallEnabled"] = state ? state.firewallEnabled : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as DconVpcConnectionArgs | undefined;
            if ((!args || args.directConnectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'directConnectId'");
            }
            if ((!args || args.firewallEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'firewallEnabled'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["directConnectId"] = args ? args.directConnectId : undefined;
            resourceInputs["firewallEnabled"] = args ? args.firewallEnabled : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DconVpcConnection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DconVpcConnection resources.
 */
export interface DconVpcConnectionState {
    /**
     * Dcon-Vpc connection description. (0 to 100 characters)
     */
    description?: pulumi.Input<string>;
    /**
     * Direct connect id of requester
     */
    directConnectId?: pulumi.Input<string>;
    /**
     * Firewall enabled
     */
    firewallEnabled?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Vpc id of approver
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DconVpcConnection resource.
 */
export interface DconVpcConnectionArgs {
    /**
     * Dcon-Vpc connection description. (0 to 100 characters)
     */
    description?: pulumi.Input<string>;
    /**
     * Direct connect id of requester
     */
    directConnectId: pulumi.Input<string>;
    /**
     * Firewall enabled
     */
    firewallEnabled: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Vpc id of approver
     */
    vpcId: pulumi.Input<string>;
}
