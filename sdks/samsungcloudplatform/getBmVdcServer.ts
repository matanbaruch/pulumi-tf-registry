// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getBmVdcServer(args: GetBmVdcServerArgs, opts?: pulumi.InvokeOptions): Promise<GetBmVdcServerResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("samsungcloudplatform:index/getBmVdcServer:getBmVdcServer", {
        "id": args.id,
        "serverId": args.serverId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getBmVdcServer.
 */
export interface GetBmVdcServerArgs {
    id?: string;
    serverId: string;
}

/**
 * A collection of values returned by getBmVdcServer.
 */
export interface GetBmVdcServerResult {
    readonly allMountedStorage: boolean;
    readonly bareMetalBlockStorageIds: string[];
    readonly bareMetalServerId: string;
    readonly bareMetalServerName: string;
    readonly bareMetalServerState: string;
    readonly blockId: string;
    readonly checkCriticalError: boolean;
    readonly contract: string;
    readonly contractEndDate: string;
    readonly contractId: string;
    readonly contractStartDate: string;
    readonly createdBy: string;
    readonly createdDt: string;
    readonly deletionProtectionEnabled: string;
    readonly dnsEnabled: string;
    readonly errorCheck: boolean;
    readonly id: string;
    readonly imageId: string;
    readonly initialScriptContent: string;
    readonly ipAddress: string;
    readonly localSubnetStatus: string;
    readonly modifiedBy: string;
    readonly modifiedDt: string;
    readonly nextContract: string;
    readonly nextContractEndDate: string;
    readonly osType: string;
    readonly productGroupId: string;
    readonly productType: string;
    readonly projectId: string;
    readonly serverId: string;
    readonly serverType: string;
    readonly serverTypeId: string;
    readonly serviceLevelId: string;
    readonly serviceZoneId: string;
    readonly subnetId: string;
    readonly timezone: string;
    readonly useHyperThreading: string;
    readonly vdcId: string;
}
export function getBmVdcServerOutput(args: GetBmVdcServerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBmVdcServerResult> {
    return pulumi.output(args).apply((a: any) => getBmVdcServer(a, opts))
}

/**
 * A collection of arguments for invoking getBmVdcServer.
 */
export interface GetBmVdcServerOutputArgs {
    id?: pulumi.Input<string>;
    serverId: pulumi.Input<string>;
}
