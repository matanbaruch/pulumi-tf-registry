// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IamGroup extends pulumi.CustomResource {
    /**
     * Get an existing IamGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IamGroupState, opts?: pulumi.CustomResourceOptions): IamGroup {
        return new IamGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'samsungcloudplatform:index/iamGroup:IamGroup';

    /**
     * Returns true if the given object is an instance of IamGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IamGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IamGroup.__pulumiType;
    }

    /**
     * Creator's ID
     */
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * Creator's email
     */
    public /*out*/ readonly createdByEmail!: pulumi.Output<string>;
    /**
     * Creator's name
     */
    public /*out*/ readonly createdByName!: pulumi.Output<string>;
    /**
     * Created date
     */
    public /*out*/ readonly createdDt!: pulumi.Output<string>;
    /**
     * Description (1000 characters or less)
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Name of the authority-group (3 to 24 characters using Korean, English, numbers, +=,.@-_)
     */
    public readonly groupName!: pulumi.Output<string>;
    /**
     * Group policies' count
     */
    public /*out*/ readonly groupPolicyCount!: pulumi.Output<number>;
    /**
     * Group SRN
     */
    public /*out*/ readonly groupSrn!: pulumi.Output<string>;
    /**
     * Group type
     */
    public /*out*/ readonly groupType!: pulumi.Output<string>;
    /**
     * Group users' count
     */
    public /*out*/ readonly groupUserCount!: pulumi.Output<number>;
    /**
     * Modifier's ID
     */
    public /*out*/ readonly modifiedBy!: pulumi.Output<string>;
    /**
     * Modifier's email
     */
    public /*out*/ readonly modifiedByEmail!: pulumi.Output<string>;
    /**
     * Modifier's name
     */
    public /*out*/ readonly modifiedByName!: pulumi.Output<string>;
    /**
     * Modified date
     */
    public /*out*/ readonly modifiedDt!: pulumi.Output<string>;
    /**
     * List of policy IDs
     */
    public readonly policyIds!: pulumi.Output<string[] | undefined>;
    /**
     * List of user IDs
     */
    public readonly userIds!: pulumi.Output<string[] | undefined>;

    /**
     * Create a IamGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IamGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IamGroupArgs | IamGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IamGroupState | undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["createdByEmail"] = state ? state.createdByEmail : undefined;
            resourceInputs["createdByName"] = state ? state.createdByName : undefined;
            resourceInputs["createdDt"] = state ? state.createdDt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["groupPolicyCount"] = state ? state.groupPolicyCount : undefined;
            resourceInputs["groupSrn"] = state ? state.groupSrn : undefined;
            resourceInputs["groupType"] = state ? state.groupType : undefined;
            resourceInputs["groupUserCount"] = state ? state.groupUserCount : undefined;
            resourceInputs["modifiedBy"] = state ? state.modifiedBy : undefined;
            resourceInputs["modifiedByEmail"] = state ? state.modifiedByEmail : undefined;
            resourceInputs["modifiedByName"] = state ? state.modifiedByName : undefined;
            resourceInputs["modifiedDt"] = state ? state.modifiedDt : undefined;
            resourceInputs["policyIds"] = state ? state.policyIds : undefined;
            resourceInputs["userIds"] = state ? state.userIds : undefined;
        } else {
            const args = argsOrState as IamGroupArgs | undefined;
            if ((!args || args.groupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["groupName"] = args ? args.groupName : undefined;
            resourceInputs["policyIds"] = args ? args.policyIds : undefined;
            resourceInputs["userIds"] = args ? args.userIds : undefined;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["createdByEmail"] = undefined /*out*/;
            resourceInputs["createdByName"] = undefined /*out*/;
            resourceInputs["createdDt"] = undefined /*out*/;
            resourceInputs["groupPolicyCount"] = undefined /*out*/;
            resourceInputs["groupSrn"] = undefined /*out*/;
            resourceInputs["groupType"] = undefined /*out*/;
            resourceInputs["groupUserCount"] = undefined /*out*/;
            resourceInputs["modifiedBy"] = undefined /*out*/;
            resourceInputs["modifiedByEmail"] = undefined /*out*/;
            resourceInputs["modifiedByName"] = undefined /*out*/;
            resourceInputs["modifiedDt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IamGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IamGroup resources.
 */
export interface IamGroupState {
    /**
     * Creator's ID
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Creator's email
     */
    createdByEmail?: pulumi.Input<string>;
    /**
     * Creator's name
     */
    createdByName?: pulumi.Input<string>;
    /**
     * Created date
     */
    createdDt?: pulumi.Input<string>;
    /**
     * Description (1000 characters or less)
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the authority-group (3 to 24 characters using Korean, English, numbers, +=,.@-_)
     */
    groupName?: pulumi.Input<string>;
    /**
     * Group policies' count
     */
    groupPolicyCount?: pulumi.Input<number>;
    /**
     * Group SRN
     */
    groupSrn?: pulumi.Input<string>;
    /**
     * Group type
     */
    groupType?: pulumi.Input<string>;
    /**
     * Group users' count
     */
    groupUserCount?: pulumi.Input<number>;
    /**
     * Modifier's ID
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * Modifier's email
     */
    modifiedByEmail?: pulumi.Input<string>;
    /**
     * Modifier's name
     */
    modifiedByName?: pulumi.Input<string>;
    /**
     * Modified date
     */
    modifiedDt?: pulumi.Input<string>;
    /**
     * List of policy IDs
     */
    policyIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of user IDs
     */
    userIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a IamGroup resource.
 */
export interface IamGroupArgs {
    /**
     * Description (1000 characters or less)
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the authority-group (3 to 24 characters using Korean, English, numbers, +=,.@-_)
     */
    groupName: pulumi.Input<string>;
    /**
     * List of policy IDs
     */
    policyIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of user IDs
     */
    userIds?: pulumi.Input<pulumi.Input<string>[]>;
}
