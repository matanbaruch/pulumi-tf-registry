// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FirewallRule extends pulumi.CustomResource {
    /**
     * Get an existing FirewallRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallRuleState, opts?: pulumi.CustomResourceOptions): FirewallRule {
        return new FirewallRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'samsungcloudplatform:index/firewallRule:FirewallRule';

    /**
     * Returns true if the given object is an instance of FirewallRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallRule.__pulumiType;
    }

    /**
     * Rule action. (ALLOW, DROP)
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * Rule description. (0 to 100 characters)
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Destination ip addresses list
     */
    public readonly destinationAddressesIpv4s!: pulumi.Output<string[]>;
    /**
     * Rule direction. (IN, OUT, IN_OUT)
     */
    public readonly direction!: pulumi.Output<string>;
    /**
     * Rule enabled state.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Firewall id
     */
    public readonly firewallId!: pulumi.Output<string>;
    /**
     * Location Rule id
     */
    public readonly locationRuleId!: pulumi.Output<string | undefined>;
    /**
     * Rule location type. (FIRST, BEFORE, AFTER, LAST)
     */
    public readonly ruleLocationType!: pulumi.Output<string | undefined>;
    /**
     * Firewall Rule service
     */
    public readonly services!: pulumi.Output<outputs.FirewallRuleService[]>;
    /**
     * Source ip addresses list
     */
    public readonly sourceAddressesIpv4s!: pulumi.Output<string[]>;
    /**
     * Target firewall resource id
     */
    public /*out*/ readonly targetId!: pulumi.Output<string>;

    /**
     * Create a FirewallRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirewallRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallRuleArgs | FirewallRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallRuleState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationAddressesIpv4s"] = state ? state.destinationAddressesIpv4s : undefined;
            resourceInputs["direction"] = state ? state.direction : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["firewallId"] = state ? state.firewallId : undefined;
            resourceInputs["locationRuleId"] = state ? state.locationRuleId : undefined;
            resourceInputs["ruleLocationType"] = state ? state.ruleLocationType : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["sourceAddressesIpv4s"] = state ? state.sourceAddressesIpv4s : undefined;
            resourceInputs["targetId"] = state ? state.targetId : undefined;
        } else {
            const args = argsOrState as FirewallRuleArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.destinationAddressesIpv4s === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationAddressesIpv4s'");
            }
            if ((!args || args.direction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'direction'");
            }
            if ((!args || args.firewallId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'firewallId'");
            }
            if ((!args || args.services === undefined) && !opts.urn) {
                throw new Error("Missing required property 'services'");
            }
            if ((!args || args.sourceAddressesIpv4s === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceAddressesIpv4s'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationAddressesIpv4s"] = args ? args.destinationAddressesIpv4s : undefined;
            resourceInputs["direction"] = args ? args.direction : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["firewallId"] = args ? args.firewallId : undefined;
            resourceInputs["locationRuleId"] = args ? args.locationRuleId : undefined;
            resourceInputs["ruleLocationType"] = args ? args.ruleLocationType : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["sourceAddressesIpv4s"] = args ? args.sourceAddressesIpv4s : undefined;
            resourceInputs["targetId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirewallRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FirewallRule resources.
 */
export interface FirewallRuleState {
    /**
     * Rule action. (ALLOW, DROP)
     */
    action?: pulumi.Input<string>;
    /**
     * Rule description. (0 to 100 characters)
     */
    description?: pulumi.Input<string>;
    /**
     * Destination ip addresses list
     */
    destinationAddressesIpv4s?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Rule direction. (IN, OUT, IN_OUT)
     */
    direction?: pulumi.Input<string>;
    /**
     * Rule enabled state.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Firewall id
     */
    firewallId?: pulumi.Input<string>;
    /**
     * Location Rule id
     */
    locationRuleId?: pulumi.Input<string>;
    /**
     * Rule location type. (FIRST, BEFORE, AFTER, LAST)
     */
    ruleLocationType?: pulumi.Input<string>;
    /**
     * Firewall Rule service
     */
    services?: pulumi.Input<pulumi.Input<inputs.FirewallRuleService>[]>;
    /**
     * Source ip addresses list
     */
    sourceAddressesIpv4s?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Target firewall resource id
     */
    targetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirewallRule resource.
 */
export interface FirewallRuleArgs {
    /**
     * Rule action. (ALLOW, DROP)
     */
    action: pulumi.Input<string>;
    /**
     * Rule description. (0 to 100 characters)
     */
    description?: pulumi.Input<string>;
    /**
     * Destination ip addresses list
     */
    destinationAddressesIpv4s: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Rule direction. (IN, OUT, IN_OUT)
     */
    direction: pulumi.Input<string>;
    /**
     * Rule enabled state.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Firewall id
     */
    firewallId: pulumi.Input<string>;
    /**
     * Location Rule id
     */
    locationRuleId?: pulumi.Input<string>;
    /**
     * Rule location type. (FIRST, BEFORE, AFTER, LAST)
     */
    ruleLocationType?: pulumi.Input<string>;
    /**
     * Firewall Rule service
     */
    services: pulumi.Input<pulumi.Input<inputs.FirewallRuleService>[]>;
    /**
     * Source ip addresses list
     */
    sourceAddressesIpv4s: pulumi.Input<pulumi.Input<string>[]>;
}
