// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GcpIntegration extends pulumi.CustomResource {
    /**
     * Get an existing GcpIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GcpIntegrationState, opts?: pulumi.CustomResourceOptions): GcpIntegration {
        return new GcpIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'signalfx:index/gcpIntegration:GcpIntegration';

    /**
     * Returns true if the given object is an instance of GcpIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GcpIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GcpIntegration.__pulumiType;
    }

    /**
     * List of additional GCP service domain names that you want to monitor
     */
    public readonly customMetricTypeDomains!: pulumi.Output<string[] | undefined>;
    /**
     * Whether the integration is enabled or not
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * If enabled, Splunk Observability Cloud will sync also Google Cloud Metrics data. If disabled, Splunk Observability Cloud
     * will import only metadata. Defaults to true.
     */
    public readonly importGcpMetrics!: pulumi.Output<boolean | undefined>;
    /**
     * List of custom metadata keys that you want Observability Cloud to collect for Compute Engine instances.
     */
    public readonly includeLists!: pulumi.Output<string[] | undefined>;
    /**
     * Name of the integration
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A named token to use for ingest
     */
    public readonly namedToken!: pulumi.Output<string | undefined>;
    /**
     * GCP poll rate (in seconds). Between `60` and `600`.
     */
    public readonly pollRate!: pulumi.Output<number | undefined>;
    /**
     * GCP project service keys
     */
    public readonly projectServiceKeys!: pulumi.Output<outputs.GcpIntegrationProjectServiceKey[] | undefined>;
    /**
     * GCP enabled services
     */
    public readonly services!: pulumi.Output<string[] | undefined>;
    /**
     * When this value is set to true Observability Cloud will force usage of a quota from the project where metrics are
     * stored. For this to work the service account provided for the project needs to be provided with
     * serviceusage.services.use permission or Service Usage Consumer role in this project. When set to false default quota
     * settings are used.
     */
    public readonly useMetricSourceProjectForQuota!: pulumi.Output<boolean | undefined>;

    /**
     * Create a GcpIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GcpIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GcpIntegrationArgs | GcpIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GcpIntegrationState | undefined;
            resourceInputs["customMetricTypeDomains"] = state ? state.customMetricTypeDomains : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["importGcpMetrics"] = state ? state.importGcpMetrics : undefined;
            resourceInputs["includeLists"] = state ? state.includeLists : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namedToken"] = state ? state.namedToken : undefined;
            resourceInputs["pollRate"] = state ? state.pollRate : undefined;
            resourceInputs["projectServiceKeys"] = state ? state.projectServiceKeys : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["useMetricSourceProjectForQuota"] = state ? state.useMetricSourceProjectForQuota : undefined;
        } else {
            const args = argsOrState as GcpIntegrationArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            resourceInputs["customMetricTypeDomains"] = args ? args.customMetricTypeDomains : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["importGcpMetrics"] = args ? args.importGcpMetrics : undefined;
            resourceInputs["includeLists"] = args ? args.includeLists : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namedToken"] = args ? args.namedToken : undefined;
            resourceInputs["pollRate"] = args ? args.pollRate : undefined;
            resourceInputs["projectServiceKeys"] = args ? args.projectServiceKeys : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["useMetricSourceProjectForQuota"] = args ? args.useMetricSourceProjectForQuota : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GcpIntegration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GcpIntegration resources.
 */
export interface GcpIntegrationState {
    /**
     * List of additional GCP service domain names that you want to monitor
     */
    customMetricTypeDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether the integration is enabled or not
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * If enabled, Splunk Observability Cloud will sync also Google Cloud Metrics data. If disabled, Splunk Observability Cloud
     * will import only metadata. Defaults to true.
     */
    importGcpMetrics?: pulumi.Input<boolean>;
    /**
     * List of custom metadata keys that you want Observability Cloud to collect for Compute Engine instances.
     */
    includeLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the integration
     */
    name?: pulumi.Input<string>;
    /**
     * A named token to use for ingest
     */
    namedToken?: pulumi.Input<string>;
    /**
     * GCP poll rate (in seconds). Between `60` and `600`.
     */
    pollRate?: pulumi.Input<number>;
    /**
     * GCP project service keys
     */
    projectServiceKeys?: pulumi.Input<pulumi.Input<inputs.GcpIntegrationProjectServiceKey>[]>;
    /**
     * GCP enabled services
     */
    services?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When this value is set to true Observability Cloud will force usage of a quota from the project where metrics are
     * stored. For this to work the service account provided for the project needs to be provided with
     * serviceusage.services.use permission or Service Usage Consumer role in this project. When set to false default quota
     * settings are used.
     */
    useMetricSourceProjectForQuota?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a GcpIntegration resource.
 */
export interface GcpIntegrationArgs {
    /**
     * List of additional GCP service domain names that you want to monitor
     */
    customMetricTypeDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether the integration is enabled or not
     */
    enabled: pulumi.Input<boolean>;
    /**
     * If enabled, Splunk Observability Cloud will sync also Google Cloud Metrics data. If disabled, Splunk Observability Cloud
     * will import only metadata. Defaults to true.
     */
    importGcpMetrics?: pulumi.Input<boolean>;
    /**
     * List of custom metadata keys that you want Observability Cloud to collect for Compute Engine instances.
     */
    includeLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the integration
     */
    name?: pulumi.Input<string>;
    /**
     * A named token to use for ingest
     */
    namedToken?: pulumi.Input<string>;
    /**
     * GCP poll rate (in seconds). Between `60` and `600`.
     */
    pollRate?: pulumi.Input<number>;
    /**
     * GCP project service keys
     */
    projectServiceKeys?: pulumi.Input<pulumi.Input<inputs.GcpIntegrationProjectServiceKey>[]>;
    /**
     * GCP enabled services
     */
    services?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When this value is set to true Observability Cloud will force usage of a quota from the project where metrics are
     * stored. For this to work the service account provided for the project needs to be provided with
     * serviceusage.services.use permission or Service Usage Consumer role in this project. When set to false default quota
     * settings are used.
     */
    useMetricSourceProjectForQuota?: pulumi.Input<boolean>;
}
