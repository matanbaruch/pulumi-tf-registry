// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WebhookIntegration extends pulumi.CustomResource {
    /**
     * Get an existing WebhookIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebhookIntegrationState, opts?: pulumi.CustomResourceOptions): WebhookIntegration {
        return new WebhookIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'signalfx:index/webhookIntegration:WebhookIntegration';

    /**
     * Returns true if the given object is an instance of WebhookIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WebhookIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WebhookIntegration.__pulumiType;
    }

    /**
     * Whether the integration is enabled or not
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * HTTP headers to pass in the request
     */
    public readonly headers!: pulumi.Output<outputs.WebhookIntegrationHeader[] | undefined>;
    /**
     * HTTP method used for the webhook request, such as 'GET', 'POST' and 'PUT'
     */
    public readonly method!: pulumi.Output<string | undefined>;
    /**
     * Name of the integration
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Template for the payload to be sent with the webhook request in JSON format
     */
    public readonly payloadTemplate!: pulumi.Output<string | undefined>;
    public readonly sharedSecret!: pulumi.Output<string | undefined>;
    /**
     * Webhook URL
     */
    public readonly url!: pulumi.Output<string | undefined>;

    /**
     * Create a WebhookIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebhookIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebhookIntegrationArgs | WebhookIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebhookIntegrationState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["headers"] = state ? state.headers : undefined;
            resourceInputs["method"] = state ? state.method : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["payloadTemplate"] = state ? state.payloadTemplate : undefined;
            resourceInputs["sharedSecret"] = state ? state.sharedSecret : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as WebhookIntegrationArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["headers"] = args ? args.headers : undefined;
            resourceInputs["method"] = args ? args.method : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["payloadTemplate"] = args ? args.payloadTemplate : undefined;
            resourceInputs["sharedSecret"] = args?.sharedSecret ? pulumi.secret(args.sharedSecret) : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sharedSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(WebhookIntegration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WebhookIntegration resources.
 */
export interface WebhookIntegrationState {
    /**
     * Whether the integration is enabled or not
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * HTTP headers to pass in the request
     */
    headers?: pulumi.Input<pulumi.Input<inputs.WebhookIntegrationHeader>[]>;
    /**
     * HTTP method used for the webhook request, such as 'GET', 'POST' and 'PUT'
     */
    method?: pulumi.Input<string>;
    /**
     * Name of the integration
     */
    name?: pulumi.Input<string>;
    /**
     * Template for the payload to be sent with the webhook request in JSON format
     */
    payloadTemplate?: pulumi.Input<string>;
    sharedSecret?: pulumi.Input<string>;
    /**
     * Webhook URL
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WebhookIntegration resource.
 */
export interface WebhookIntegrationArgs {
    /**
     * Whether the integration is enabled or not
     */
    enabled: pulumi.Input<boolean>;
    /**
     * HTTP headers to pass in the request
     */
    headers?: pulumi.Input<pulumi.Input<inputs.WebhookIntegrationHeader>[]>;
    /**
     * HTTP method used for the webhook request, such as 'GET', 'POST' and 'PUT'
     */
    method?: pulumi.Input<string>;
    /**
     * Name of the integration
     */
    name?: pulumi.Input<string>;
    /**
     * Template for the payload to be sent with the webhook request in JSON format
     */
    payloadTemplate?: pulumi.Input<string>;
    sharedSecret?: pulumi.Input<string>;
    /**
     * Webhook URL
     */
    url?: pulumi.Input<string>;
}
