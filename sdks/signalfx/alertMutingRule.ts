// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AlertMutingRule extends pulumi.CustomResource {
    /**
     * Get an existing AlertMutingRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertMutingRuleState, opts?: pulumi.CustomResourceOptions): AlertMutingRule {
        return new AlertMutingRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'signalfx:index/alertMutingRule:AlertMutingRule';

    /**
     * Returns true if the given object is an instance of AlertMutingRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlertMutingRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertMutingRule.__pulumiType;
    }

    /**
     * description of the rule
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * detectors to which this muting rule applies
     */
    public readonly detectors!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly effectiveStartTime!: pulumi.Output<number>;
    /**
     * list of alert muting filters for this rule
     */
    public readonly filters!: pulumi.Output<outputs.AlertMutingRuleFilter[] | undefined>;
    public readonly recurrence!: pulumi.Output<outputs.AlertMutingRuleRecurrence | undefined>;
    /**
     * starting time of an alert muting rule as a Unix timestamp, in seconds
     */
    public readonly startTime!: pulumi.Output<number>;
    /**
     * stop time of an alert muting rule as a Unix timestamp, in seconds
     */
    public readonly stopTime!: pulumi.Output<number | undefined>;

    /**
     * Create a AlertMutingRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertMutingRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertMutingRuleArgs | AlertMutingRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertMutingRuleState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["detectors"] = state ? state.detectors : undefined;
            resourceInputs["effectiveStartTime"] = state ? state.effectiveStartTime : undefined;
            resourceInputs["filters"] = state ? state.filters : undefined;
            resourceInputs["recurrence"] = state ? state.recurrence : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
            resourceInputs["stopTime"] = state ? state.stopTime : undefined;
        } else {
            const args = argsOrState as AlertMutingRuleArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.startTime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'startTime'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["detectors"] = args ? args.detectors : undefined;
            resourceInputs["filters"] = args ? args.filters : undefined;
            resourceInputs["recurrence"] = args ? args.recurrence : undefined;
            resourceInputs["startTime"] = args ? args.startTime : undefined;
            resourceInputs["stopTime"] = args ? args.stopTime : undefined;
            resourceInputs["effectiveStartTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlertMutingRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AlertMutingRule resources.
 */
export interface AlertMutingRuleState {
    /**
     * description of the rule
     */
    description?: pulumi.Input<string>;
    /**
     * detectors to which this muting rule applies
     */
    detectors?: pulumi.Input<pulumi.Input<string>[]>;
    effectiveStartTime?: pulumi.Input<number>;
    /**
     * list of alert muting filters for this rule
     */
    filters?: pulumi.Input<pulumi.Input<inputs.AlertMutingRuleFilter>[]>;
    recurrence?: pulumi.Input<inputs.AlertMutingRuleRecurrence>;
    /**
     * starting time of an alert muting rule as a Unix timestamp, in seconds
     */
    startTime?: pulumi.Input<number>;
    /**
     * stop time of an alert muting rule as a Unix timestamp, in seconds
     */
    stopTime?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AlertMutingRule resource.
 */
export interface AlertMutingRuleArgs {
    /**
     * description of the rule
     */
    description: pulumi.Input<string>;
    /**
     * detectors to which this muting rule applies
     */
    detectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of alert muting filters for this rule
     */
    filters?: pulumi.Input<pulumi.Input<inputs.AlertMutingRuleFilter>[]>;
    recurrence?: pulumi.Input<inputs.AlertMutingRuleRecurrence>;
    /**
     * starting time of an alert muting rule as a Unix timestamp, in seconds
     */
    startTime: pulumi.Input<number>;
    /**
     * stop time of an alert muting rule as a Unix timestamp, in seconds
     */
    stopTime?: pulumi.Input<number>;
}
