// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AwsIntegration extends pulumi.CustomResource {
    /**
     * Get an existing AwsIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsIntegrationState, opts?: pulumi.CustomResourceOptions): AwsIntegration {
        return new AwsIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'signalfx:index/awsIntegration:AwsIntegration';

    /**
     * Returns true if the given object is an instance of AwsIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsIntegration.__pulumiType;
    }

    /**
     * The mechanism used to authenticate with AWS. Use one of `signalfx.AwsExternalIntegration` or
     * `signalfx.AwsTokenIntegration` to define this
     */
    public /*out*/ readonly authMethod!: pulumi.Output<string>;
    /**
     * List of custom AWS CloudWatch namespaces to monitor. Custom namespaces contain custom metrics that you define in AWS;
     * Splunk Observability imports the metrics so you can monitor them.
     */
    public readonly customCloudwatchNamespaces!: pulumi.Output<string[] | undefined>;
    /**
     * Each element controls the data collected by Splunk Observability for the specified namespace. If you specify this
     * property, Splunk Observability ignores values in the "custom_cloudwatch_namespaces" property.
     */
    public readonly customNamespaceSyncRules!: pulumi.Output<outputs.AwsIntegrationCustomNamespaceSyncRule[] | undefined>;
    /**
     * Flag that controls how Splunk Observability imports usage metrics from AWS to use with AWS Cost Optimizer. If `true`,
     * Splunk Observability imports the metrics.
     */
    public readonly enableAwsUsage!: pulumi.Output<boolean | undefined>;
    /**
     * Controls how Splunk Observability checks for large amounts of data for this AWS integration. If true, Splunk
     * Observability monitors the amount of data coming in from the integration.
     */
    public readonly enableCheckLargeVolume!: pulumi.Output<boolean | undefined>;
    /**
     * Enables AWS logs synchronization.
     */
    public readonly enableLogsSync!: pulumi.Output<boolean>;
    /**
     * Whether the integration is enabled or not
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Used with `signalfx.AwsExternalIntegration`. Use this property to specify the external id.
     */
    public readonly externalId!: pulumi.Output<string | undefined>;
    /**
     * Flag that controls how Splunk Observability imports Cloud Watch metrics. If true, Splunk Observability imports Cloud
     * Watch metrics from AWS.
     */
    public readonly importCloudWatch!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of this integration
     */
    public readonly integrationId!: pulumi.Output<string>;
    /**
     * Used with `signalfx.AwsTokenIntegration`. Use this property to specify the token.
     */
    public readonly key!: pulumi.Output<string | undefined>;
    /**
     * Each element in the array is an object that contains an AWS namespace name, AWS metric name and a list of statistics
     * that Splunk Observability collects for this metric. If you specify this property, Splunk Observability retrieves only
     * specified AWS statistics. If you don't specify this property, Splunk Observability retrieves the AWS standard set of
     * statistics.
     */
    public readonly metricStatsToSyncs!: pulumi.Output<outputs.AwsIntegrationMetricStatsToSync[] | undefined>;
    /**
     * Name of the integration. Please specify the name in `signalfx.AwsExternalIntegration` or
     * `signalfx_aws_integration_token`
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * A named token to use for ingest
     */
    public readonly namedToken!: pulumi.Output<string | undefined>;
    /**
     * Each element in the array is an object that contains an AWS namespace name and a filter that controls the data that
     * Splunk Observability collects for the namespace. If you specify this property, Splunk Observability ignores the values
     * in the AWS CloudWatch Integration Model "services" property. If you don't specify either property, Splunk Observability
     * syncs all data in all AWS namespaces.
     */
    public readonly namespaceSyncRules!: pulumi.Output<outputs.AwsIntegrationNamespaceSyncRule[] | undefined>;
    /**
     * AWS poll rate (in seconds). Between `60` and `600`.
     */
    public readonly pollRate!: pulumi.Output<number | undefined>;
    /**
     * List of AWS regions that Splunk Observability should monitor.
     */
    public readonly regions!: pulumi.Output<string[]>;
    /**
     * Used with `signalfx.AwsExternalIntegration`. Use this property to specify the AIM role ARN.
     */
    public readonly roleArn!: pulumi.Output<string | undefined>;
    /**
     * List of AWS services that you want Splunk Observability to monitor. Each element is a string designating an AWS service.
     */
    public readonly services!: pulumi.Output<string[] | undefined>;
    /**
     * Indicates that Splunk Observability should sync metrics and metadata from custom AWS namespaces only (see the
     * `custom_namespace_sync_rule` field for details). Defaults to `false`.
     */
    public readonly syncCustomNamespacesOnly!: pulumi.Output<boolean | undefined>;
    /**
     * Used with `signalfx.AwsTokenIntegration`. Use this property to specify the token.
     */
    public readonly token!: pulumi.Output<string | undefined>;
    /**
     * Enables the use of Cloudwatch Metric Streams for metrics synchronization.
     */
    public readonly useMetricStreamsSync!: pulumi.Output<boolean>;

    /**
     * Create a AwsIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AwsIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsIntegrationArgs | AwsIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsIntegrationState | undefined;
            resourceInputs["authMethod"] = state ? state.authMethod : undefined;
            resourceInputs["customCloudwatchNamespaces"] = state ? state.customCloudwatchNamespaces : undefined;
            resourceInputs["customNamespaceSyncRules"] = state ? state.customNamespaceSyncRules : undefined;
            resourceInputs["enableAwsUsage"] = state ? state.enableAwsUsage : undefined;
            resourceInputs["enableCheckLargeVolume"] = state ? state.enableCheckLargeVolume : undefined;
            resourceInputs["enableLogsSync"] = state ? state.enableLogsSync : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["externalId"] = state ? state.externalId : undefined;
            resourceInputs["importCloudWatch"] = state ? state.importCloudWatch : undefined;
            resourceInputs["integrationId"] = state ? state.integrationId : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["metricStatsToSyncs"] = state ? state.metricStatsToSyncs : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namedToken"] = state ? state.namedToken : undefined;
            resourceInputs["namespaceSyncRules"] = state ? state.namespaceSyncRules : undefined;
            resourceInputs["pollRate"] = state ? state.pollRate : undefined;
            resourceInputs["regions"] = state ? state.regions : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["syncCustomNamespacesOnly"] = state ? state.syncCustomNamespacesOnly : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["useMetricStreamsSync"] = state ? state.useMetricStreamsSync : undefined;
        } else {
            const args = argsOrState as AwsIntegrationArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.integrationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integrationId'");
            }
            if ((!args || args.regions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regions'");
            }
            resourceInputs["customCloudwatchNamespaces"] = args ? args.customCloudwatchNamespaces : undefined;
            resourceInputs["customNamespaceSyncRules"] = args ? args.customNamespaceSyncRules : undefined;
            resourceInputs["enableAwsUsage"] = args ? args.enableAwsUsage : undefined;
            resourceInputs["enableCheckLargeVolume"] = args ? args.enableCheckLargeVolume : undefined;
            resourceInputs["enableLogsSync"] = args ? args.enableLogsSync : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["externalId"] = args?.externalId ? pulumi.secret(args.externalId) : undefined;
            resourceInputs["importCloudWatch"] = args ? args.importCloudWatch : undefined;
            resourceInputs["integrationId"] = args ? args.integrationId : undefined;
            resourceInputs["key"] = args?.key ? pulumi.secret(args.key) : undefined;
            resourceInputs["metricStatsToSyncs"] = args ? args.metricStatsToSyncs : undefined;
            resourceInputs["namedToken"] = args ? args.namedToken : undefined;
            resourceInputs["namespaceSyncRules"] = args ? args.namespaceSyncRules : undefined;
            resourceInputs["pollRate"] = args ? args.pollRate : undefined;
            resourceInputs["regions"] = args ? args.regions : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["syncCustomNamespacesOnly"] = args ? args.syncCustomNamespacesOnly : undefined;
            resourceInputs["token"] = args ? args.token : undefined;
            resourceInputs["useMetricStreamsSync"] = args ? args.useMetricStreamsSync : undefined;
            resourceInputs["authMethod"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["externalId", "key"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AwsIntegration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AwsIntegration resources.
 */
export interface AwsIntegrationState {
    /**
     * The mechanism used to authenticate with AWS. Use one of `signalfx.AwsExternalIntegration` or
     * `signalfx.AwsTokenIntegration` to define this
     */
    authMethod?: pulumi.Input<string>;
    /**
     * List of custom AWS CloudWatch namespaces to monitor. Custom namespaces contain custom metrics that you define in AWS;
     * Splunk Observability imports the metrics so you can monitor them.
     */
    customCloudwatchNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Each element controls the data collected by Splunk Observability for the specified namespace. If you specify this
     * property, Splunk Observability ignores values in the "custom_cloudwatch_namespaces" property.
     */
    customNamespaceSyncRules?: pulumi.Input<pulumi.Input<inputs.AwsIntegrationCustomNamespaceSyncRule>[]>;
    /**
     * Flag that controls how Splunk Observability imports usage metrics from AWS to use with AWS Cost Optimizer. If `true`,
     * Splunk Observability imports the metrics.
     */
    enableAwsUsage?: pulumi.Input<boolean>;
    /**
     * Controls how Splunk Observability checks for large amounts of data for this AWS integration. If true, Splunk
     * Observability monitors the amount of data coming in from the integration.
     */
    enableCheckLargeVolume?: pulumi.Input<boolean>;
    /**
     * Enables AWS logs synchronization.
     */
    enableLogsSync?: pulumi.Input<boolean>;
    /**
     * Whether the integration is enabled or not
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Used with `signalfx.AwsExternalIntegration`. Use this property to specify the external id.
     */
    externalId?: pulumi.Input<string>;
    /**
     * Flag that controls how Splunk Observability imports Cloud Watch metrics. If true, Splunk Observability imports Cloud
     * Watch metrics from AWS.
     */
    importCloudWatch?: pulumi.Input<boolean>;
    /**
     * The ID of this integration
     */
    integrationId?: pulumi.Input<string>;
    /**
     * Used with `signalfx.AwsTokenIntegration`. Use this property to specify the token.
     */
    key?: pulumi.Input<string>;
    /**
     * Each element in the array is an object that contains an AWS namespace name, AWS metric name and a list of statistics
     * that Splunk Observability collects for this metric. If you specify this property, Splunk Observability retrieves only
     * specified AWS statistics. If you don't specify this property, Splunk Observability retrieves the AWS standard set of
     * statistics.
     */
    metricStatsToSyncs?: pulumi.Input<pulumi.Input<inputs.AwsIntegrationMetricStatsToSync>[]>;
    /**
     * Name of the integration. Please specify the name in `signalfx.AwsExternalIntegration` or
     * `signalfx_aws_integration_token`
     */
    name?: pulumi.Input<string>;
    /**
     * A named token to use for ingest
     */
    namedToken?: pulumi.Input<string>;
    /**
     * Each element in the array is an object that contains an AWS namespace name and a filter that controls the data that
     * Splunk Observability collects for the namespace. If you specify this property, Splunk Observability ignores the values
     * in the AWS CloudWatch Integration Model "services" property. If you don't specify either property, Splunk Observability
     * syncs all data in all AWS namespaces.
     */
    namespaceSyncRules?: pulumi.Input<pulumi.Input<inputs.AwsIntegrationNamespaceSyncRule>[]>;
    /**
     * AWS poll rate (in seconds). Between `60` and `600`.
     */
    pollRate?: pulumi.Input<number>;
    /**
     * List of AWS regions that Splunk Observability should monitor.
     */
    regions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Used with `signalfx.AwsExternalIntegration`. Use this property to specify the AIM role ARN.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * List of AWS services that you want Splunk Observability to monitor. Each element is a string designating an AWS service.
     */
    services?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates that Splunk Observability should sync metrics and metadata from custom AWS namespaces only (see the
     * `custom_namespace_sync_rule` field for details). Defaults to `false`.
     */
    syncCustomNamespacesOnly?: pulumi.Input<boolean>;
    /**
     * Used with `signalfx.AwsTokenIntegration`. Use this property to specify the token.
     */
    token?: pulumi.Input<string>;
    /**
     * Enables the use of Cloudwatch Metric Streams for metrics synchronization.
     */
    useMetricStreamsSync?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AwsIntegration resource.
 */
export interface AwsIntegrationArgs {
    /**
     * List of custom AWS CloudWatch namespaces to monitor. Custom namespaces contain custom metrics that you define in AWS;
     * Splunk Observability imports the metrics so you can monitor them.
     */
    customCloudwatchNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Each element controls the data collected by Splunk Observability for the specified namespace. If you specify this
     * property, Splunk Observability ignores values in the "custom_cloudwatch_namespaces" property.
     */
    customNamespaceSyncRules?: pulumi.Input<pulumi.Input<inputs.AwsIntegrationCustomNamespaceSyncRule>[]>;
    /**
     * Flag that controls how Splunk Observability imports usage metrics from AWS to use with AWS Cost Optimizer. If `true`,
     * Splunk Observability imports the metrics.
     */
    enableAwsUsage?: pulumi.Input<boolean>;
    /**
     * Controls how Splunk Observability checks for large amounts of data for this AWS integration. If true, Splunk
     * Observability monitors the amount of data coming in from the integration.
     */
    enableCheckLargeVolume?: pulumi.Input<boolean>;
    /**
     * Enables AWS logs synchronization.
     */
    enableLogsSync?: pulumi.Input<boolean>;
    /**
     * Whether the integration is enabled or not
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Used with `signalfx.AwsExternalIntegration`. Use this property to specify the external id.
     */
    externalId?: pulumi.Input<string>;
    /**
     * Flag that controls how Splunk Observability imports Cloud Watch metrics. If true, Splunk Observability imports Cloud
     * Watch metrics from AWS.
     */
    importCloudWatch?: pulumi.Input<boolean>;
    /**
     * The ID of this integration
     */
    integrationId: pulumi.Input<string>;
    /**
     * Used with `signalfx.AwsTokenIntegration`. Use this property to specify the token.
     */
    key?: pulumi.Input<string>;
    /**
     * Each element in the array is an object that contains an AWS namespace name, AWS metric name and a list of statistics
     * that Splunk Observability collects for this metric. If you specify this property, Splunk Observability retrieves only
     * specified AWS statistics. If you don't specify this property, Splunk Observability retrieves the AWS standard set of
     * statistics.
     */
    metricStatsToSyncs?: pulumi.Input<pulumi.Input<inputs.AwsIntegrationMetricStatsToSync>[]>;
    /**
     * A named token to use for ingest
     */
    namedToken?: pulumi.Input<string>;
    /**
     * Each element in the array is an object that contains an AWS namespace name and a filter that controls the data that
     * Splunk Observability collects for the namespace. If you specify this property, Splunk Observability ignores the values
     * in the AWS CloudWatch Integration Model "services" property. If you don't specify either property, Splunk Observability
     * syncs all data in all AWS namespaces.
     */
    namespaceSyncRules?: pulumi.Input<pulumi.Input<inputs.AwsIntegrationNamespaceSyncRule>[]>;
    /**
     * AWS poll rate (in seconds). Between `60` and `600`.
     */
    pollRate?: pulumi.Input<number>;
    /**
     * List of AWS regions that Splunk Observability should monitor.
     */
    regions: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Used with `signalfx.AwsExternalIntegration`. Use this property to specify the AIM role ARN.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * List of AWS services that you want Splunk Observability to monitor. Each element is a string designating an AWS service.
     */
    services?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates that Splunk Observability should sync metrics and metadata from custom AWS namespaces only (see the
     * `custom_namespace_sync_rule` field for details). Defaults to `false`.
     */
    syncCustomNamespacesOnly?: pulumi.Input<boolean>;
    /**
     * Used with `signalfx.AwsTokenIntegration`. Use this property to specify the token.
     */
    token?: pulumi.Input<string>;
    /**
     * Enables the use of Cloudwatch Metric Streams for metrics synchronization.
     */
    useMetricStreamsSync?: pulumi.Input<boolean>;
}
