// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Detector extends pulumi.CustomResource {
    /**
     * Get an existing Detector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DetectorState, opts?: pulumi.CustomResourceOptions): Detector {
        return new Detector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'signalfx:index/detector:Detector';

    /**
     * Returns true if the given object is an instance of Detector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Detector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Detector.__pulumiType;
    }

    /**
     * Team IDs that have write access to this dashboard
     */
    public readonly authorizedWriterTeams!: pulumi.Output<string[] | undefined>;
    /**
     * User IDs that have write access to this dashboard
     */
    public readonly authorizedWriterUsers!: pulumi.Output<string[] | undefined>;
    /**
     * Description of the detector
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Indicates how a detector was created
     */
    public readonly detectorOrigin!: pulumi.Output<string | undefined>;
    /**
     * (false by default) When false, samples a subset of the output MTS in the visualization.
     */
    public readonly disableSampling!: pulumi.Output<boolean | undefined>;
    /**
     * Seconds since epoch. Used for visualization
     */
    public readonly endTime!: pulumi.Output<number | undefined>;
    /**
     * Resolutions of the detector alerts in milliseconds that indicate how often data is analyzed to determine if an alert
     * should be triggered
     */
    public /*out*/ readonly labelResolutions!: pulumi.Output<{[key: string]: number}>;
    /**
     * Maximum time (in seconds) to wait for late datapoints. Max value is 900 (15m)
     */
    public readonly maxDelay!: pulumi.Output<number | undefined>;
    /**
     * Minimum time (in seconds) for the computation to wait even if the datapoints are arriving in a timely fashion. Max value
     * is 900 (15m)
     */
    public readonly minDelay!: pulumi.Output<number | undefined>;
    /**
     * Name of the detector
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of the parent AutoDetect detector from which this detector is customized and created. This property is required for
     * detectors with detector_origin of type AutoDetectCustomization.
     */
    public readonly parentDetectorId!: pulumi.Output<string | undefined>;
    /**
     * Signalflow program text for the detector. More info at "https://developers.signalfx.com/docs/signalflow-overview"
     */
    public readonly programText!: pulumi.Output<string>;
    /**
     * Set of rules used for alerting
     */
    public readonly rules!: pulumi.Output<outputs.DetectorRule[]>;
    /**
     * (true by default) When true, markers will be drawn for each datapoint within the visualization.
     */
    public readonly showDataMarkers!: pulumi.Output<boolean | undefined>;
    /**
     * (false by default) When true, vertical lines will be drawn for each triggered event within the visualization.
     */
    public readonly showEventLines!: pulumi.Output<boolean | undefined>;
    /**
     * Seconds since epoch. Used for visualization
     */
    public readonly startTime!: pulumi.Output<number | undefined>;
    /**
     * Tags associated with the detector
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Team IDs to associate the detector to
     */
    public readonly teams!: pulumi.Output<string[] | undefined>;
    /**
     * Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`. Defaults
     * to 3600
     */
    public readonly timeRange!: pulumi.Output<number | undefined>;
    /**
     * The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)
     */
    public readonly timezone!: pulumi.Output<string | undefined>;
    /**
     * URL of the detector
     */
    public /*out*/ readonly url!: pulumi.Output<string>;
    /**
     * Plot-level customization options, associated with a publish statement
     */
    public readonly vizOptions!: pulumi.Output<outputs.DetectorVizOption[] | undefined>;

    /**
     * Create a Detector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DetectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DetectorArgs | DetectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DetectorState | undefined;
            resourceInputs["authorizedWriterTeams"] = state ? state.authorizedWriterTeams : undefined;
            resourceInputs["authorizedWriterUsers"] = state ? state.authorizedWriterUsers : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["detectorOrigin"] = state ? state.detectorOrigin : undefined;
            resourceInputs["disableSampling"] = state ? state.disableSampling : undefined;
            resourceInputs["endTime"] = state ? state.endTime : undefined;
            resourceInputs["labelResolutions"] = state ? state.labelResolutions : undefined;
            resourceInputs["maxDelay"] = state ? state.maxDelay : undefined;
            resourceInputs["minDelay"] = state ? state.minDelay : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentDetectorId"] = state ? state.parentDetectorId : undefined;
            resourceInputs["programText"] = state ? state.programText : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["showDataMarkers"] = state ? state.showDataMarkers : undefined;
            resourceInputs["showEventLines"] = state ? state.showEventLines : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["teams"] = state ? state.teams : undefined;
            resourceInputs["timeRange"] = state ? state.timeRange : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["vizOptions"] = state ? state.vizOptions : undefined;
        } else {
            const args = argsOrState as DetectorArgs | undefined;
            if ((!args || args.programText === undefined) && !opts.urn) {
                throw new Error("Missing required property 'programText'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["authorizedWriterTeams"] = args ? args.authorizedWriterTeams : undefined;
            resourceInputs["authorizedWriterUsers"] = args ? args.authorizedWriterUsers : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["detectorOrigin"] = args ? args.detectorOrigin : undefined;
            resourceInputs["disableSampling"] = args ? args.disableSampling : undefined;
            resourceInputs["endTime"] = args ? args.endTime : undefined;
            resourceInputs["maxDelay"] = args ? args.maxDelay : undefined;
            resourceInputs["minDelay"] = args ? args.minDelay : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentDetectorId"] = args ? args.parentDetectorId : undefined;
            resourceInputs["programText"] = args ? args.programText : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["showDataMarkers"] = args ? args.showDataMarkers : undefined;
            resourceInputs["showEventLines"] = args ? args.showEventLines : undefined;
            resourceInputs["startTime"] = args ? args.startTime : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["teams"] = args ? args.teams : undefined;
            resourceInputs["timeRange"] = args ? args.timeRange : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["vizOptions"] = args ? args.vizOptions : undefined;
            resourceInputs["labelResolutions"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Detector.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Detector resources.
 */
export interface DetectorState {
    /**
     * Team IDs that have write access to this dashboard
     */
    authorizedWriterTeams?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User IDs that have write access to this dashboard
     */
    authorizedWriterUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the detector
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates how a detector was created
     */
    detectorOrigin?: pulumi.Input<string>;
    /**
     * (false by default) When false, samples a subset of the output MTS in the visualization.
     */
    disableSampling?: pulumi.Input<boolean>;
    /**
     * Seconds since epoch. Used for visualization
     */
    endTime?: pulumi.Input<number>;
    /**
     * Resolutions of the detector alerts in milliseconds that indicate how often data is analyzed to determine if an alert
     * should be triggered
     */
    labelResolutions?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    /**
     * Maximum time (in seconds) to wait for late datapoints. Max value is 900 (15m)
     */
    maxDelay?: pulumi.Input<number>;
    /**
     * Minimum time (in seconds) for the computation to wait even if the datapoints are arriving in a timely fashion. Max value
     * is 900 (15m)
     */
    minDelay?: pulumi.Input<number>;
    /**
     * Name of the detector
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the parent AutoDetect detector from which this detector is customized and created. This property is required for
     * detectors with detector_origin of type AutoDetectCustomization.
     */
    parentDetectorId?: pulumi.Input<string>;
    /**
     * Signalflow program text for the detector. More info at "https://developers.signalfx.com/docs/signalflow-overview"
     */
    programText?: pulumi.Input<string>;
    /**
     * Set of rules used for alerting
     */
    rules?: pulumi.Input<pulumi.Input<inputs.DetectorRule>[]>;
    /**
     * (true by default) When true, markers will be drawn for each datapoint within the visualization.
     */
    showDataMarkers?: pulumi.Input<boolean>;
    /**
     * (false by default) When true, vertical lines will be drawn for each triggered event within the visualization.
     */
    showEventLines?: pulumi.Input<boolean>;
    /**
     * Seconds since epoch. Used for visualization
     */
    startTime?: pulumi.Input<number>;
    /**
     * Tags associated with the detector
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Team IDs to associate the detector to
     */
    teams?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`. Defaults
     * to 3600
     */
    timeRange?: pulumi.Input<number>;
    /**
     * The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)
     */
    timezone?: pulumi.Input<string>;
    /**
     * URL of the detector
     */
    url?: pulumi.Input<string>;
    /**
     * Plot-level customization options, associated with a publish statement
     */
    vizOptions?: pulumi.Input<pulumi.Input<inputs.DetectorVizOption>[]>;
}

/**
 * The set of arguments for constructing a Detector resource.
 */
export interface DetectorArgs {
    /**
     * Team IDs that have write access to this dashboard
     */
    authorizedWriterTeams?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User IDs that have write access to this dashboard
     */
    authorizedWriterUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the detector
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates how a detector was created
     */
    detectorOrigin?: pulumi.Input<string>;
    /**
     * (false by default) When false, samples a subset of the output MTS in the visualization.
     */
    disableSampling?: pulumi.Input<boolean>;
    /**
     * Seconds since epoch. Used for visualization
     */
    endTime?: pulumi.Input<number>;
    /**
     * Maximum time (in seconds) to wait for late datapoints. Max value is 900 (15m)
     */
    maxDelay?: pulumi.Input<number>;
    /**
     * Minimum time (in seconds) for the computation to wait even if the datapoints are arriving in a timely fashion. Max value
     * is 900 (15m)
     */
    minDelay?: pulumi.Input<number>;
    /**
     * Name of the detector
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the parent AutoDetect detector from which this detector is customized and created. This property is required for
     * detectors with detector_origin of type AutoDetectCustomization.
     */
    parentDetectorId?: pulumi.Input<string>;
    /**
     * Signalflow program text for the detector. More info at "https://developers.signalfx.com/docs/signalflow-overview"
     */
    programText: pulumi.Input<string>;
    /**
     * Set of rules used for alerting
     */
    rules: pulumi.Input<pulumi.Input<inputs.DetectorRule>[]>;
    /**
     * (true by default) When true, markers will be drawn for each datapoint within the visualization.
     */
    showDataMarkers?: pulumi.Input<boolean>;
    /**
     * (false by default) When true, vertical lines will be drawn for each triggered event within the visualization.
     */
    showEventLines?: pulumi.Input<boolean>;
    /**
     * Seconds since epoch. Used for visualization
     */
    startTime?: pulumi.Input<number>;
    /**
     * Tags associated with the detector
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Team IDs to associate the detector to
     */
    teams?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Seconds to display in the visualization. This is a rolling range from the current time. Example: 3600 = `-1h`. Defaults
     * to 3600
     */
    timeRange?: pulumi.Input<number>;
    /**
     * The property value is a string that denotes the geographic region associated with the time zone, (e.g. Australia/Sydney)
     */
    timezone?: pulumi.Input<string>;
    /**
     * Plot-level customization options, associated with a publish statement
     */
    vizOptions?: pulumi.Input<pulumi.Input<inputs.DetectorVizOption>[]>;
}
