// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AlertMutingRuleArgs, AlertMutingRuleState } from "./alertMutingRule";
export type AlertMutingRule = import("./alertMutingRule").AlertMutingRule;
export const AlertMutingRule: typeof import("./alertMutingRule").AlertMutingRule = null as any;
utilities.lazyLoad(exports, ["AlertMutingRule"], () => require("./alertMutingRule"));

export { AwsExternalIntegrationArgs, AwsExternalIntegrationState } from "./awsExternalIntegration";
export type AwsExternalIntegration = import("./awsExternalIntegration").AwsExternalIntegration;
export const AwsExternalIntegration: typeof import("./awsExternalIntegration").AwsExternalIntegration = null as any;
utilities.lazyLoad(exports, ["AwsExternalIntegration"], () => require("./awsExternalIntegration"));

export { AwsIntegrationArgs, AwsIntegrationState } from "./awsIntegration";
export type AwsIntegration = import("./awsIntegration").AwsIntegration;
export const AwsIntegration: typeof import("./awsIntegration").AwsIntegration = null as any;
utilities.lazyLoad(exports, ["AwsIntegration"], () => require("./awsIntegration"));

export { AwsTokenIntegrationArgs, AwsTokenIntegrationState } from "./awsTokenIntegration";
export type AwsTokenIntegration = import("./awsTokenIntegration").AwsTokenIntegration;
export const AwsTokenIntegration: typeof import("./awsTokenIntegration").AwsTokenIntegration = null as any;
utilities.lazyLoad(exports, ["AwsTokenIntegration"], () => require("./awsTokenIntegration"));

export { AzureIntegrationArgs, AzureIntegrationState } from "./azureIntegration";
export type AzureIntegration = import("./azureIntegration").AzureIntegration;
export const AzureIntegration: typeof import("./azureIntegration").AzureIntegration = null as any;
utilities.lazyLoad(exports, ["AzureIntegration"], () => require("./azureIntegration"));

export { DashboardArgs, DashboardState } from "./dashboard";
export type Dashboard = import("./dashboard").Dashboard;
export const Dashboard: typeof import("./dashboard").Dashboard = null as any;
utilities.lazyLoad(exports, ["Dashboard"], () => require("./dashboard"));

export { DashboardGroupArgs, DashboardGroupState } from "./dashboardGroup";
export type DashboardGroup = import("./dashboardGroup").DashboardGroup;
export const DashboardGroup: typeof import("./dashboardGroup").DashboardGroup = null as any;
utilities.lazyLoad(exports, ["DashboardGroup"], () => require("./dashboardGroup"));

export { DataLinkArgs, DataLinkState } from "./dataLink";
export type DataLink = import("./dataLink").DataLink;
export const DataLink: typeof import("./dataLink").DataLink = null as any;
utilities.lazyLoad(exports, ["DataLink"], () => require("./dataLink"));

export { DetectorArgs, DetectorState } from "./detector";
export type Detector = import("./detector").Detector;
export const Detector: typeof import("./detector").Detector = null as any;
utilities.lazyLoad(exports, ["Detector"], () => require("./detector"));

export { EventFeedChartArgs, EventFeedChartState } from "./eventFeedChart";
export type EventFeedChart = import("./eventFeedChart").EventFeedChart;
export const EventFeedChart: typeof import("./eventFeedChart").EventFeedChart = null as any;
utilities.lazyLoad(exports, ["EventFeedChart"], () => require("./eventFeedChart"));

export { GcpIntegrationArgs, GcpIntegrationState } from "./gcpIntegration";
export type GcpIntegration = import("./gcpIntegration").GcpIntegration;
export const GcpIntegration: typeof import("./gcpIntegration").GcpIntegration = null as any;
utilities.lazyLoad(exports, ["GcpIntegration"], () => require("./gcpIntegration"));

export { GetDimensionValuesArgs, GetDimensionValuesResult, GetDimensionValuesOutputArgs } from "./getDimensionValues";
export const getDimensionValues: typeof import("./getDimensionValues").getDimensionValues = null as any;
export const getDimensionValuesOutput: typeof import("./getDimensionValues").getDimensionValuesOutput = null as any;
utilities.lazyLoad(exports, ["getDimensionValues","getDimensionValuesOutput"], () => require("./getDimensionValues"));

export { GetPagerdutyIntegrationArgs, GetPagerdutyIntegrationResult, GetPagerdutyIntegrationOutputArgs } from "./getPagerdutyIntegration";
export const getPagerdutyIntegration: typeof import("./getPagerdutyIntegration").getPagerdutyIntegration = null as any;
export const getPagerdutyIntegrationOutput: typeof import("./getPagerdutyIntegration").getPagerdutyIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getPagerdutyIntegration","getPagerdutyIntegrationOutput"], () => require("./getPagerdutyIntegration"));

export { HeatmapChartArgs, HeatmapChartState } from "./heatmapChart";
export type HeatmapChart = import("./heatmapChart").HeatmapChart;
export const HeatmapChart: typeof import("./heatmapChart").HeatmapChart = null as any;
utilities.lazyLoad(exports, ["HeatmapChart"], () => require("./heatmapChart"));

export { JiraIntegrationArgs, JiraIntegrationState } from "./jiraIntegration";
export type JiraIntegration = import("./jiraIntegration").JiraIntegration;
export const JiraIntegration: typeof import("./jiraIntegration").JiraIntegration = null as any;
utilities.lazyLoad(exports, ["JiraIntegration"], () => require("./jiraIntegration"));

export { ListChartArgs, ListChartState } from "./listChart";
export type ListChart = import("./listChart").ListChart;
export const ListChart: typeof import("./listChart").ListChart = null as any;
utilities.lazyLoad(exports, ["ListChart"], () => require("./listChart"));

export { LogTimelineArgs, LogTimelineState } from "./logTimeline";
export type LogTimeline = import("./logTimeline").LogTimeline;
export const LogTimeline: typeof import("./logTimeline").LogTimeline = null as any;
utilities.lazyLoad(exports, ["LogTimeline"], () => require("./logTimeline"));

export { LogViewArgs, LogViewState } from "./logView";
export type LogView = import("./logView").LogView;
export const LogView: typeof import("./logView").LogView = null as any;
utilities.lazyLoad(exports, ["LogView"], () => require("./logView"));

export { MetricRulesetArgs, MetricRulesetState } from "./metricRuleset";
export type MetricRuleset = import("./metricRuleset").MetricRuleset;
export const MetricRuleset: typeof import("./metricRuleset").MetricRuleset = null as any;
utilities.lazyLoad(exports, ["MetricRuleset"], () => require("./metricRuleset"));

export { OpsgenieIntegrationArgs, OpsgenieIntegrationState } from "./opsgenieIntegration";
export type OpsgenieIntegration = import("./opsgenieIntegration").OpsgenieIntegration;
export const OpsgenieIntegration: typeof import("./opsgenieIntegration").OpsgenieIntegration = null as any;
utilities.lazyLoad(exports, ["OpsgenieIntegration"], () => require("./opsgenieIntegration"));

export { OrgTokenArgs, OrgTokenState } from "./orgToken";
export type OrgToken = import("./orgToken").OrgToken;
export const OrgToken: typeof import("./orgToken").OrgToken = null as any;
utilities.lazyLoad(exports, ["OrgToken"], () => require("./orgToken"));

export { PagerdutyIntegrationArgs, PagerdutyIntegrationState } from "./pagerdutyIntegration";
export type PagerdutyIntegration = import("./pagerdutyIntegration").PagerdutyIntegration;
export const PagerdutyIntegration: typeof import("./pagerdutyIntegration").PagerdutyIntegration = null as any;
utilities.lazyLoad(exports, ["PagerdutyIntegration"], () => require("./pagerdutyIntegration"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ServiceNowIntegrationArgs, ServiceNowIntegrationState } from "./serviceNowIntegration";
export type ServiceNowIntegration = import("./serviceNowIntegration").ServiceNowIntegration;
export const ServiceNowIntegration: typeof import("./serviceNowIntegration").ServiceNowIntegration = null as any;
utilities.lazyLoad(exports, ["ServiceNowIntegration"], () => require("./serviceNowIntegration"));

export { SingleValueChartArgs, SingleValueChartState } from "./singleValueChart";
export type SingleValueChart = import("./singleValueChart").SingleValueChart;
export const SingleValueChart: typeof import("./singleValueChart").SingleValueChart = null as any;
utilities.lazyLoad(exports, ["SingleValueChart"], () => require("./singleValueChart"));

export { SlackIntegrationArgs, SlackIntegrationState } from "./slackIntegration";
export type SlackIntegration = import("./slackIntegration").SlackIntegration;
export const SlackIntegration: typeof import("./slackIntegration").SlackIntegration = null as any;
utilities.lazyLoad(exports, ["SlackIntegration"], () => require("./slackIntegration"));

export { SloArgs, SloState } from "./slo";
export type Slo = import("./slo").Slo;
export const Slo: typeof import("./slo").Slo = null as any;
utilities.lazyLoad(exports, ["Slo"], () => require("./slo"));

export { TableChartArgs, TableChartState } from "./tableChart";
export type TableChart = import("./tableChart").TableChart;
export const TableChart: typeof import("./tableChart").TableChart = null as any;
utilities.lazyLoad(exports, ["TableChart"], () => require("./tableChart"));

export { TeamArgs, TeamState } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

export { TextChartArgs, TextChartState } from "./textChart";
export type TextChart = import("./textChart").TextChart;
export const TextChart: typeof import("./textChart").TextChart = null as any;
utilities.lazyLoad(exports, ["TextChart"], () => require("./textChart"));

export { TimeChartArgs, TimeChartState } from "./timeChart";
export type TimeChart = import("./timeChart").TimeChart;
export const TimeChart: typeof import("./timeChart").TimeChart = null as any;
utilities.lazyLoad(exports, ["TimeChart"], () => require("./timeChart"));

export { VictorOpsIntegrationArgs, VictorOpsIntegrationState } from "./victorOpsIntegration";
export type VictorOpsIntegration = import("./victorOpsIntegration").VictorOpsIntegration;
export const VictorOpsIntegration: typeof import("./victorOpsIntegration").VictorOpsIntegration = null as any;
utilities.lazyLoad(exports, ["VictorOpsIntegration"], () => require("./victorOpsIntegration"));

export { WebhookIntegrationArgs, WebhookIntegrationState } from "./webhookIntegration";
export type WebhookIntegration = import("./webhookIntegration").WebhookIntegration;
export const WebhookIntegration: typeof import("./webhookIntegration").WebhookIntegration = null as any;
utilities.lazyLoad(exports, ["WebhookIntegration"], () => require("./webhookIntegration"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "signalfx:index/alertMutingRule:AlertMutingRule":
                return new AlertMutingRule(name, <any>undefined, { urn })
            case "signalfx:index/awsExternalIntegration:AwsExternalIntegration":
                return new AwsExternalIntegration(name, <any>undefined, { urn })
            case "signalfx:index/awsIntegration:AwsIntegration":
                return new AwsIntegration(name, <any>undefined, { urn })
            case "signalfx:index/awsTokenIntegration:AwsTokenIntegration":
                return new AwsTokenIntegration(name, <any>undefined, { urn })
            case "signalfx:index/azureIntegration:AzureIntegration":
                return new AzureIntegration(name, <any>undefined, { urn })
            case "signalfx:index/dashboard:Dashboard":
                return new Dashboard(name, <any>undefined, { urn })
            case "signalfx:index/dashboardGroup:DashboardGroup":
                return new DashboardGroup(name, <any>undefined, { urn })
            case "signalfx:index/dataLink:DataLink":
                return new DataLink(name, <any>undefined, { urn })
            case "signalfx:index/detector:Detector":
                return new Detector(name, <any>undefined, { urn })
            case "signalfx:index/eventFeedChart:EventFeedChart":
                return new EventFeedChart(name, <any>undefined, { urn })
            case "signalfx:index/gcpIntegration:GcpIntegration":
                return new GcpIntegration(name, <any>undefined, { urn })
            case "signalfx:index/heatmapChart:HeatmapChart":
                return new HeatmapChart(name, <any>undefined, { urn })
            case "signalfx:index/jiraIntegration:JiraIntegration":
                return new JiraIntegration(name, <any>undefined, { urn })
            case "signalfx:index/listChart:ListChart":
                return new ListChart(name, <any>undefined, { urn })
            case "signalfx:index/logTimeline:LogTimeline":
                return new LogTimeline(name, <any>undefined, { urn })
            case "signalfx:index/logView:LogView":
                return new LogView(name, <any>undefined, { urn })
            case "signalfx:index/metricRuleset:MetricRuleset":
                return new MetricRuleset(name, <any>undefined, { urn })
            case "signalfx:index/opsgenieIntegration:OpsgenieIntegration":
                return new OpsgenieIntegration(name, <any>undefined, { urn })
            case "signalfx:index/orgToken:OrgToken":
                return new OrgToken(name, <any>undefined, { urn })
            case "signalfx:index/pagerdutyIntegration:PagerdutyIntegration":
                return new PagerdutyIntegration(name, <any>undefined, { urn })
            case "signalfx:index/serviceNowIntegration:ServiceNowIntegration":
                return new ServiceNowIntegration(name, <any>undefined, { urn })
            case "signalfx:index/singleValueChart:SingleValueChart":
                return new SingleValueChart(name, <any>undefined, { urn })
            case "signalfx:index/slackIntegration:SlackIntegration":
                return new SlackIntegration(name, <any>undefined, { urn })
            case "signalfx:index/slo:Slo":
                return new Slo(name, <any>undefined, { urn })
            case "signalfx:index/tableChart:TableChart":
                return new TableChart(name, <any>undefined, { urn })
            case "signalfx:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "signalfx:index/textChart:TextChart":
                return new TextChart(name, <any>undefined, { urn })
            case "signalfx:index/timeChart:TimeChart":
                return new TimeChart(name, <any>undefined, { urn })
            case "signalfx:index/victorOpsIntegration:VictorOpsIntegration":
                return new VictorOpsIntegration(name, <any>undefined, { urn })
            case "signalfx:index/webhookIntegration:WebhookIntegration":
                return new WebhookIntegration(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("signalfx", "index/alertMutingRule", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/awsExternalIntegration", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/awsIntegration", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/awsTokenIntegration", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/azureIntegration", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/dashboard", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/dashboardGroup", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/dataLink", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/detector", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/eventFeedChart", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/gcpIntegration", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/heatmapChart", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/jiraIntegration", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/listChart", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/logTimeline", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/logView", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/metricRuleset", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/opsgenieIntegration", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/orgToken", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/pagerdutyIntegration", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/serviceNowIntegration", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/singleValueChart", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/slackIntegration", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/slo", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/tableChart", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/team", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/textChart", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/timeChart", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/victorOpsIntegration", _module)
pulumi.runtime.registerResourceModule("signalfx", "index/webhookIntegration", _module)
pulumi.runtime.registerResourcePackage("signalfx", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:signalfx") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
