// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AzureIntegration extends pulumi.CustomResource {
    /**
     * Get an existing AzureIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AzureIntegrationState, opts?: pulumi.CustomResourceOptions): AzureIntegration {
        return new AzureIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'signalfx:index/azureIntegration:AzureIntegration';

    /**
     * Returns true if the given object is an instance of AzureIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AzureIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AzureIntegration.__pulumiType;
    }

    /**
     * Additional Azure resource types that you want to sync with Observability Cloud.
     */
    public readonly additionalServices!: pulumi.Output<string[] | undefined>;
    /**
     * Azure application ID for the Splunk Observability Cloud app.
     */
    public readonly appId!: pulumi.Output<string>;
    /**
     * Allows for more fine-grained control of syncing of custom namespaces, should the boolean convenience parameter
     * `sync_guest_os_namespaces` be not enough. The customer may specify a map of services to custom namespaces. If they do
     * so, for each service which is a key in this map, we will attempt to sync metrics from namespaces in the value list in
     * addition to the default namespaces.
     */
    public readonly customNamespacesPerServices!: pulumi.Output<outputs.AzureIntegrationCustomNamespacesPerService[] | undefined>;
    /**
     * Whether the integration is enabled or not
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * what type of Azure integration this is. The allowed values are `"azure_us_government"` and `"azure"`. Defaults to
     * `"azure"`
     */
    public readonly environment!: pulumi.Output<string | undefined>;
    /**
     * If enabled, Splunk Observability Cloud will sync also Azure Monitor data. If disabled, Splunk Observability Cloud will
     * import only metadata. Defaults to true.
     */
    public readonly importAzureMonitor!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the integration
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A named token to use for ingest
     */
    public readonly namedToken!: pulumi.Output<string | undefined>;
    /**
     * Azure poll rate (in seconds). Between `60` and `600`.
     */
    public readonly pollRate!: pulumi.Output<number | undefined>;
    /**
     * List of rules for filtering Azure resources by their tags. The source of each filter rule must be in the form
     * filter('key', 'value'). You can join multiple filter statements using the and and or operators. Referenced keys are
     * limited to tags and must start with the azure_tag_ prefix..
     */
    public readonly resourceFilterRules!: pulumi.Output<outputs.AzureIntegrationResourceFilterRule[] | undefined>;
    /**
     * Azure secret key that associates the Splunk Observability Cloud app in Azure with the Azure tenant.
     */
    public readonly secretKey!: pulumi.Output<string>;
    /**
     * List of Microsoft Azure service names for the Azure services you want Splunk Observability Cloud to monitor. Splunk
     * Observability Cloud only supports certain services, and if you specify an unsupported one, you receive an API error.
     */
    public readonly services!: pulumi.Output<string[]>;
    /**
     * List of Azure subscriptions that Splunk Observability Cloud should monitor.
     */
    public readonly subscriptions!: pulumi.Output<string[]>;
    /**
     * If enabled, Splunk Observability Cloud will try to sync additional namespaces for VMs (including VMs in scale sets):
     * telegraf/mem, telegraf/cpu, azure.vm.windows.guest (these are namespaces recommended by Azure when enabling their
     * Diagnostic Extension). If there are no metrics there, no new datapoints will be ingested.
     */
    public readonly syncGuestOsNamespaces!: pulumi.Output<boolean | undefined>;
    /**
     * Azure ID of the Azure tenant.
     */
    public readonly tenantId!: pulumi.Output<string>;

    /**
     * Create a AzureIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AzureIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AzureIntegrationArgs | AzureIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AzureIntegrationState | undefined;
            resourceInputs["additionalServices"] = state ? state.additionalServices : undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["customNamespacesPerServices"] = state ? state.customNamespacesPerServices : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["importAzureMonitor"] = state ? state.importAzureMonitor : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namedToken"] = state ? state.namedToken : undefined;
            resourceInputs["pollRate"] = state ? state.pollRate : undefined;
            resourceInputs["resourceFilterRules"] = state ? state.resourceFilterRules : undefined;
            resourceInputs["secretKey"] = state ? state.secretKey : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["subscriptions"] = state ? state.subscriptions : undefined;
            resourceInputs["syncGuestOsNamespaces"] = state ? state.syncGuestOsNamespaces : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
        } else {
            const args = argsOrState as AzureIntegrationArgs | undefined;
            if ((!args || args.appId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.secretKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretKey'");
            }
            if ((!args || args.services === undefined) && !opts.urn) {
                throw new Error("Missing required property 'services'");
            }
            if ((!args || args.subscriptions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriptions'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["additionalServices"] = args ? args.additionalServices : undefined;
            resourceInputs["appId"] = args?.appId ? pulumi.secret(args.appId) : undefined;
            resourceInputs["customNamespacesPerServices"] = args ? args.customNamespacesPerServices : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["environment"] = args?.environment ? pulumi.secret(args.environment) : undefined;
            resourceInputs["importAzureMonitor"] = args ? args.importAzureMonitor : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namedToken"] = args ? args.namedToken : undefined;
            resourceInputs["pollRate"] = args ? args.pollRate : undefined;
            resourceInputs["resourceFilterRules"] = args ? args.resourceFilterRules : undefined;
            resourceInputs["secretKey"] = args?.secretKey ? pulumi.secret(args.secretKey) : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["subscriptions"] = args ? args.subscriptions : undefined;
            resourceInputs["syncGuestOsNamespaces"] = args ? args.syncGuestOsNamespaces : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["appId", "environment", "secretKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AzureIntegration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AzureIntegration resources.
 */
export interface AzureIntegrationState {
    /**
     * Additional Azure resource types that you want to sync with Observability Cloud.
     */
    additionalServices?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Azure application ID for the Splunk Observability Cloud app.
     */
    appId?: pulumi.Input<string>;
    /**
     * Allows for more fine-grained control of syncing of custom namespaces, should the boolean convenience parameter
     * `sync_guest_os_namespaces` be not enough. The customer may specify a map of services to custom namespaces. If they do
     * so, for each service which is a key in this map, we will attempt to sync metrics from namespaces in the value list in
     * addition to the default namespaces.
     */
    customNamespacesPerServices?: pulumi.Input<pulumi.Input<inputs.AzureIntegrationCustomNamespacesPerService>[]>;
    /**
     * Whether the integration is enabled or not
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * what type of Azure integration this is. The allowed values are `"azure_us_government"` and `"azure"`. Defaults to
     * `"azure"`
     */
    environment?: pulumi.Input<string>;
    /**
     * If enabled, Splunk Observability Cloud will sync also Azure Monitor data. If disabled, Splunk Observability Cloud will
     * import only metadata. Defaults to true.
     */
    importAzureMonitor?: pulumi.Input<boolean>;
    /**
     * Name of the integration
     */
    name?: pulumi.Input<string>;
    /**
     * A named token to use for ingest
     */
    namedToken?: pulumi.Input<string>;
    /**
     * Azure poll rate (in seconds). Between `60` and `600`.
     */
    pollRate?: pulumi.Input<number>;
    /**
     * List of rules for filtering Azure resources by their tags. The source of each filter rule must be in the form
     * filter('key', 'value'). You can join multiple filter statements using the and and or operators. Referenced keys are
     * limited to tags and must start with the azure_tag_ prefix..
     */
    resourceFilterRules?: pulumi.Input<pulumi.Input<inputs.AzureIntegrationResourceFilterRule>[]>;
    /**
     * Azure secret key that associates the Splunk Observability Cloud app in Azure with the Azure tenant.
     */
    secretKey?: pulumi.Input<string>;
    /**
     * List of Microsoft Azure service names for the Azure services you want Splunk Observability Cloud to monitor. Splunk
     * Observability Cloud only supports certain services, and if you specify an unsupported one, you receive an API error.
     */
    services?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Azure subscriptions that Splunk Observability Cloud should monitor.
     */
    subscriptions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If enabled, Splunk Observability Cloud will try to sync additional namespaces for VMs (including VMs in scale sets):
     * telegraf/mem, telegraf/cpu, azure.vm.windows.guest (these are namespaces recommended by Azure when enabling their
     * Diagnostic Extension). If there are no metrics there, no new datapoints will be ingested.
     */
    syncGuestOsNamespaces?: pulumi.Input<boolean>;
    /**
     * Azure ID of the Azure tenant.
     */
    tenantId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AzureIntegration resource.
 */
export interface AzureIntegrationArgs {
    /**
     * Additional Azure resource types that you want to sync with Observability Cloud.
     */
    additionalServices?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Azure application ID for the Splunk Observability Cloud app.
     */
    appId: pulumi.Input<string>;
    /**
     * Allows for more fine-grained control of syncing of custom namespaces, should the boolean convenience parameter
     * `sync_guest_os_namespaces` be not enough. The customer may specify a map of services to custom namespaces. If they do
     * so, for each service which is a key in this map, we will attempt to sync metrics from namespaces in the value list in
     * addition to the default namespaces.
     */
    customNamespacesPerServices?: pulumi.Input<pulumi.Input<inputs.AzureIntegrationCustomNamespacesPerService>[]>;
    /**
     * Whether the integration is enabled or not
     */
    enabled: pulumi.Input<boolean>;
    /**
     * what type of Azure integration this is. The allowed values are `"azure_us_government"` and `"azure"`. Defaults to
     * `"azure"`
     */
    environment?: pulumi.Input<string>;
    /**
     * If enabled, Splunk Observability Cloud will sync also Azure Monitor data. If disabled, Splunk Observability Cloud will
     * import only metadata. Defaults to true.
     */
    importAzureMonitor?: pulumi.Input<boolean>;
    /**
     * Name of the integration
     */
    name?: pulumi.Input<string>;
    /**
     * A named token to use for ingest
     */
    namedToken?: pulumi.Input<string>;
    /**
     * Azure poll rate (in seconds). Between `60` and `600`.
     */
    pollRate?: pulumi.Input<number>;
    /**
     * List of rules for filtering Azure resources by their tags. The source of each filter rule must be in the form
     * filter('key', 'value'). You can join multiple filter statements using the and and or operators. Referenced keys are
     * limited to tags and must start with the azure_tag_ prefix..
     */
    resourceFilterRules?: pulumi.Input<pulumi.Input<inputs.AzureIntegrationResourceFilterRule>[]>;
    /**
     * Azure secret key that associates the Splunk Observability Cloud app in Azure with the Azure tenant.
     */
    secretKey: pulumi.Input<string>;
    /**
     * List of Microsoft Azure service names for the Azure services you want Splunk Observability Cloud to monitor. Splunk
     * Observability Cloud only supports certain services, and if you specify an unsupported one, you receive an API error.
     */
    services: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Azure subscriptions that Splunk Observability Cloud should monitor.
     */
    subscriptions: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If enabled, Splunk Observability Cloud will try to sync additional namespaces for VMs (including VMs in scale sets):
     * telegraf/mem, telegraf/cpu, azure.vm.windows.guest (these are namespaces recommended by Azure when enabling their
     * Diagnostic Extension). If there are no metrics there, no new datapoints will be ingested.
     */
    syncGuestOsNamespaces?: pulumi.Input<boolean>;
    /**
     * Azure ID of the Azure tenant.
     */
    tenantId: pulumi.Input<string>;
}
