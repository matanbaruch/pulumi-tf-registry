// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class JiraIntegration extends pulumi.CustomResource {
    /**
     * Get an existing JiraIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: JiraIntegrationState, opts?: pulumi.CustomResourceOptions): JiraIntegration {
        return new JiraIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'signalfx:index/jiraIntegration:JiraIntegration';

    /**
     * Returns true if the given object is an instance of JiraIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is JiraIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === JiraIntegration.__pulumiType;
    }

    /**
     * The API token for the user email
     */
    public readonly apiToken!: pulumi.Output<string | undefined>;
    /**
     * Jira display name for the assignee
     */
    public readonly assigneeDisplayName!: pulumi.Output<string | undefined>;
    /**
     * Jira user name for the assignee
     */
    public readonly assigneeName!: pulumi.Output<string>;
    /**
     * Authentication method used when creating the Jira integration. One of `EmailAndToken` or `UsernameAndPassword`
     */
    public readonly authMethod!: pulumi.Output<string>;
    /**
     * Base URL of the Jira instance that's integrated with SignalFx.
     */
    public readonly baseUrl!: pulumi.Output<string>;
    /**
     * Whether the integration is enabled or not
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Issue type (for example, Story) for tickets that Jira creates for detector notifications. Splunk Observability Cloud
     * validates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.
     */
    public readonly issueType!: pulumi.Output<string>;
    /**
     * Name of the integration
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Password used to authenticate the Jira integration.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to
     * this project.
     */
    public readonly projectKey!: pulumi.Output<string>;
    /**
     * Email address used to authenticate the Jira integration.
     */
    public readonly userEmail!: pulumi.Output<string | undefined>;
    /**
     * User name used to authenticate the Jira integration.
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a JiraIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: JiraIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: JiraIntegrationArgs | JiraIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as JiraIntegrationState | undefined;
            resourceInputs["apiToken"] = state ? state.apiToken : undefined;
            resourceInputs["assigneeDisplayName"] = state ? state.assigneeDisplayName : undefined;
            resourceInputs["assigneeName"] = state ? state.assigneeName : undefined;
            resourceInputs["authMethod"] = state ? state.authMethod : undefined;
            resourceInputs["baseUrl"] = state ? state.baseUrl : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["issueType"] = state ? state.issueType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["projectKey"] = state ? state.projectKey : undefined;
            resourceInputs["userEmail"] = state ? state.userEmail : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as JiraIntegrationArgs | undefined;
            if ((!args || args.assigneeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'assigneeName'");
            }
            if ((!args || args.authMethod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authMethod'");
            }
            if ((!args || args.baseUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'baseUrl'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.issueType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'issueType'");
            }
            if ((!args || args.projectKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectKey'");
            }
            resourceInputs["apiToken"] = args?.apiToken ? pulumi.secret(args.apiToken) : undefined;
            resourceInputs["assigneeDisplayName"] = args ? args.assigneeDisplayName : undefined;
            resourceInputs["assigneeName"] = args ? args.assigneeName : undefined;
            resourceInputs["authMethod"] = args ? args.authMethod : undefined;
            resourceInputs["baseUrl"] = args ? args.baseUrl : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["issueType"] = args ? args.issueType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["projectKey"] = args ? args.projectKey : undefined;
            resourceInputs["userEmail"] = args ? args.userEmail : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiToken", "password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(JiraIntegration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering JiraIntegration resources.
 */
export interface JiraIntegrationState {
    /**
     * The API token for the user email
     */
    apiToken?: pulumi.Input<string>;
    /**
     * Jira display name for the assignee
     */
    assigneeDisplayName?: pulumi.Input<string>;
    /**
     * Jira user name for the assignee
     */
    assigneeName?: pulumi.Input<string>;
    /**
     * Authentication method used when creating the Jira integration. One of `EmailAndToken` or `UsernameAndPassword`
     */
    authMethod?: pulumi.Input<string>;
    /**
     * Base URL of the Jira instance that's integrated with SignalFx.
     */
    baseUrl?: pulumi.Input<string>;
    /**
     * Whether the integration is enabled or not
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Issue type (for example, Story) for tickets that Jira creates for detector notifications. Splunk Observability Cloud
     * validates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.
     */
    issueType?: pulumi.Input<string>;
    /**
     * Name of the integration
     */
    name?: pulumi.Input<string>;
    /**
     * Password used to authenticate the Jira integration.
     */
    password?: pulumi.Input<string>;
    /**
     * Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to
     * this project.
     */
    projectKey?: pulumi.Input<string>;
    /**
     * Email address used to authenticate the Jira integration.
     */
    userEmail?: pulumi.Input<string>;
    /**
     * User name used to authenticate the Jira integration.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a JiraIntegration resource.
 */
export interface JiraIntegrationArgs {
    /**
     * The API token for the user email
     */
    apiToken?: pulumi.Input<string>;
    /**
     * Jira display name for the assignee
     */
    assigneeDisplayName?: pulumi.Input<string>;
    /**
     * Jira user name for the assignee
     */
    assigneeName: pulumi.Input<string>;
    /**
     * Authentication method used when creating the Jira integration. One of `EmailAndToken` or `UsernameAndPassword`
     */
    authMethod: pulumi.Input<string>;
    /**
     * Base URL of the Jira instance that's integrated with SignalFx.
     */
    baseUrl: pulumi.Input<string>;
    /**
     * Whether the integration is enabled or not
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Issue type (for example, Story) for tickets that Jira creates for detector notifications. Splunk Observability Cloud
     * validates issue types, so you must specify a type that's valid for the Jira project specified in `projectKey`.
     */
    issueType: pulumi.Input<string>;
    /**
     * Name of the integration
     */
    name?: pulumi.Input<string>;
    /**
     * Password used to authenticate the Jira integration.
     */
    password?: pulumi.Input<string>;
    /**
     * Jira key of an existing project. When Jira creates a new ticket for a detector notification, the ticket is assigned to
     * this project.
     */
    projectKey: pulumi.Input<string>;
    /**
     * Email address used to authenticate the Jira integration.
     */
    userEmail?: pulumi.Input<string>;
    /**
     * User name used to authenticate the Jira integration.
     */
    username?: pulumi.Input<string>;
}
