// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DeviceCvContainer extends pulumi.CustomResource {
    /**
     * Get an existing DeviceCvContainer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeviceCvContainerState, opts?: pulumi.CustomResourceOptions): DeviceCvContainer {
        return new DeviceCvContainer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudvision:index/deviceCvContainer:DeviceCvContainer';

    /**
     * Returns true if the given object is an instance of DeviceCvContainer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeviceCvContainer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeviceCvContainer.__pulumiType;
    }

    public readonly deviceContainerkey!: pulumi.Output<string>;
    public readonly deviceContainername!: pulumi.Output<string>;
    public readonly deviceContainertaskid!: pulumi.Output<number>;
    public readonly deviceFqdn!: pulumi.Output<string | undefined>;
    public readonly deviceTaskstatus!: pulumi.Output<string>;
    public readonly deviceTaskstatus2!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DeviceCvContainerTimeouts | undefined>;

    /**
     * Create a DeviceCvContainer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeviceCvContainerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeviceCvContainerArgs | DeviceCvContainerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeviceCvContainerState | undefined;
            resourceInputs["deviceContainerkey"] = state ? state.deviceContainerkey : undefined;
            resourceInputs["deviceContainername"] = state ? state.deviceContainername : undefined;
            resourceInputs["deviceContainertaskid"] = state ? state.deviceContainertaskid : undefined;
            resourceInputs["deviceFqdn"] = state ? state.deviceFqdn : undefined;
            resourceInputs["deviceTaskstatus"] = state ? state.deviceTaskstatus : undefined;
            resourceInputs["deviceTaskstatus2"] = state ? state.deviceTaskstatus2 : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DeviceCvContainerArgs | undefined;
            if ((!args || args.deviceContainername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deviceContainername'");
            }
            resourceInputs["deviceContainerkey"] = args ? args.deviceContainerkey : undefined;
            resourceInputs["deviceContainername"] = args ? args.deviceContainername : undefined;
            resourceInputs["deviceContainertaskid"] = args ? args.deviceContainertaskid : undefined;
            resourceInputs["deviceFqdn"] = args ? args.deviceFqdn : undefined;
            resourceInputs["deviceTaskstatus"] = args ? args.deviceTaskstatus : undefined;
            resourceInputs["deviceTaskstatus2"] = args ? args.deviceTaskstatus2 : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeviceCvContainer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DeviceCvContainer resources.
 */
export interface DeviceCvContainerState {
    deviceContainerkey?: pulumi.Input<string>;
    deviceContainername?: pulumi.Input<string>;
    deviceContainertaskid?: pulumi.Input<number>;
    deviceFqdn?: pulumi.Input<string>;
    deviceTaskstatus?: pulumi.Input<string>;
    deviceTaskstatus2?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DeviceCvContainerTimeouts>;
}

/**
 * The set of arguments for constructing a DeviceCvContainer resource.
 */
export interface DeviceCvContainerArgs {
    deviceContainerkey?: pulumi.Input<string>;
    deviceContainername: pulumi.Input<string>;
    deviceContainertaskid?: pulumi.Input<number>;
    deviceFqdn?: pulumi.Input<string>;
    deviceTaskstatus?: pulumi.Input<string>;
    deviceTaskstatus2?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DeviceCvContainerTimeouts>;
}
