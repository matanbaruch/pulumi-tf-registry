// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CvConfigletArgs, CvConfigletState } from "./cvConfiglet";
export type CvConfiglet = import("./cvConfiglet").CvConfiglet;
export const CvConfiglet: typeof import("./cvConfiglet").CvConfiglet = null as any;
utilities.lazyLoad(exports, ["CvConfiglet"], () => require("./cvConfiglet"));

export { CvContainerArgs, CvContainerState } from "./cvContainer";
export type CvContainer = import("./cvContainer").CvContainer;
export const CvContainer: typeof import("./cvContainer").CvContainer = null as any;
utilities.lazyLoad(exports, ["CvContainer"], () => require("./cvContainer"));

export { DeviceCvConfigletArgs, DeviceCvConfigletState } from "./deviceCvConfiglet";
export type DeviceCvConfiglet = import("./deviceCvConfiglet").DeviceCvConfiglet;
export const DeviceCvConfiglet: typeof import("./deviceCvConfiglet").DeviceCvConfiglet = null as any;
utilities.lazyLoad(exports, ["DeviceCvConfiglet"], () => require("./deviceCvConfiglet"));

export { DeviceCvContainerArgs, DeviceCvContainerState } from "./deviceCvContainer";
export type DeviceCvContainer = import("./deviceCvContainer").DeviceCvContainer;
export const DeviceCvContainer: typeof import("./deviceCvContainer").DeviceCvContainer = null as any;
utilities.lazyLoad(exports, ["DeviceCvContainer"], () => require("./deviceCvContainer"));

export { GetDataInventoryArgs, GetDataInventoryResult, GetDataInventoryOutputArgs } from "./getDataInventory";
export const getDataInventory: typeof import("./getDataInventory").getDataInventory = null as any;
export const getDataInventoryOutput: typeof import("./getDataInventory").getDataInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getDataInventory","getDataInventoryOutput"], () => require("./getDataInventory"));

export { OnboardInventoryArgs, OnboardInventoryState } from "./onboardInventory";
export type OnboardInventory = import("./onboardInventory").OnboardInventory;
export const OnboardInventory: typeof import("./onboardInventory").OnboardInventory = null as any;
utilities.lazyLoad(exports, ["OnboardInventory"], () => require("./onboardInventory"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cloudvision:index/cvConfiglet:CvConfiglet":
                return new CvConfiglet(name, <any>undefined, { urn })
            case "cloudvision:index/cvContainer:CvContainer":
                return new CvContainer(name, <any>undefined, { urn })
            case "cloudvision:index/deviceCvConfiglet:DeviceCvConfiglet":
                return new DeviceCvConfiglet(name, <any>undefined, { urn })
            case "cloudvision:index/deviceCvContainer:DeviceCvContainer":
                return new DeviceCvContainer(name, <any>undefined, { urn })
            case "cloudvision:index/onboardInventory:OnboardInventory":
                return new OnboardInventory(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cloudvision", "index/cvConfiglet", _module)
pulumi.runtime.registerResourceModule("cloudvision", "index/cvContainer", _module)
pulumi.runtime.registerResourceModule("cloudvision", "index/deviceCvConfiglet", _module)
pulumi.runtime.registerResourceModule("cloudvision", "index/deviceCvContainer", _module)
pulumi.runtime.registerResourceModule("cloudvision", "index/onboardInventory", _module)
pulumi.runtime.registerResourcePackage("cloudvision", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:cloudvision") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
