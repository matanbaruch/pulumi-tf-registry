// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getRepositories(args: GetRepositoriesArgs, opts?: pulumi.InvokeOptions): Promise<GetRepositoriesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("github:index/getRepositories:getRepositories", {
        "id": args.id,
        "includeRepoId": args.includeRepoId,
        "query": args.query,
        "resultsPerPage": args.resultsPerPage,
        "sort": args.sort,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRepositories.
 */
export interface GetRepositoriesArgs {
    id?: string;
    includeRepoId?: boolean;
    query: string;
    resultsPerPage?: number;
    sort?: string;
}

/**
 * A collection of values returned by getRepositories.
 */
export interface GetRepositoriesResult {
    readonly fullNames: string[];
    readonly id: string;
    readonly includeRepoId?: boolean;
    readonly names: string[];
    readonly query: string;
    readonly repoIds: number[];
    readonly resultsPerPage?: number;
    readonly sort?: string;
}
export function getRepositoriesOutput(args: GetRepositoriesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRepositoriesResult> {
    return pulumi.output(args).apply((a: any) => getRepositories(a, opts))
}

/**
 * A collection of arguments for invoking getRepositories.
 */
export interface GetRepositoriesOutputArgs {
    id?: pulumi.Input<string>;
    includeRepoId?: pulumi.Input<boolean>;
    query: pulumi.Input<string>;
    resultsPerPage?: pulumi.Input<number>;
    sort?: pulumi.Input<string>;
}
