// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRepositoryDeploymentBranchPolicies(args: GetRepositoryDeploymentBranchPoliciesArgs, opts?: pulumi.InvokeOptions): Promise<GetRepositoryDeploymentBranchPoliciesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("github:index/getRepositoryDeploymentBranchPolicies:getRepositoryDeploymentBranchPolicies", {
        "environmentName": args.environmentName,
        "id": args.id,
        "repository": args.repository,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRepositoryDeploymentBranchPolicies.
 */
export interface GetRepositoryDeploymentBranchPoliciesArgs {
    environmentName: string;
    id?: string;
    repository: string;
}

/**
 * A collection of values returned by getRepositoryDeploymentBranchPolicies.
 */
export interface GetRepositoryDeploymentBranchPoliciesResult {
    readonly deploymentBranchPolicies: outputs.GetRepositoryDeploymentBranchPoliciesDeploymentBranchPolicy[];
    readonly environmentName: string;
    readonly id: string;
    readonly repository: string;
}
export function getRepositoryDeploymentBranchPoliciesOutput(args: GetRepositoryDeploymentBranchPoliciesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRepositoryDeploymentBranchPoliciesResult> {
    return pulumi.output(args).apply((a: any) => getRepositoryDeploymentBranchPolicies(a, opts))
}

/**
 * A collection of arguments for invoking getRepositoryDeploymentBranchPolicies.
 */
export interface GetRepositoryDeploymentBranchPoliciesOutputArgs {
    environmentName: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    repository: pulumi.Input<string>;
}
