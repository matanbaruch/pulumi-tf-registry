// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getUserExternalIdentity(args: GetUserExternalIdentityArgs, opts?: pulumi.InvokeOptions): Promise<GetUserExternalIdentityResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("github:index/getUserExternalIdentity:getUserExternalIdentity", {
        "id": args.id,
        "username": args.username,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getUserExternalIdentity.
 */
export interface GetUserExternalIdentityArgs {
    id?: string;
    username: string;
}

/**
 * A collection of values returned by getUserExternalIdentity.
 */
export interface GetUserExternalIdentityResult {
    readonly id: string;
    readonly login: string;
    readonly samlIdentity: {[key: string]: string};
    readonly scimIdentity: {[key: string]: string};
    readonly username: string;
}
export function getUserExternalIdentityOutput(args: GetUserExternalIdentityOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUserExternalIdentityResult> {
    return pulumi.output(args).apply((a: any) => getUserExternalIdentity(a, opts))
}

/**
 * A collection of arguments for invoking getUserExternalIdentity.
 */
export interface GetUserExternalIdentityOutputArgs {
    id?: pulumi.Input<string>;
    username: pulumi.Input<string>;
}
