// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Membership extends pulumi.CustomResource {
    /**
     * Get an existing Membership resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MembershipState, opts?: pulumi.CustomResourceOptions): Membership {
        return new Membership(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'github:index/membership:Membership';

    /**
     * Returns true if the given object is an instance of Membership.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Membership {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Membership.__pulumiType;
    }

    /**
     * Instead of removing the member from the org, you can choose to downgrade their membership to 'member' when this resource
     * is destroyed. This is useful when wanting to downgrade admins while keeping them in the organization
     */
    public readonly downgradeOnDestroy!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * The role of the user within the organization. Must be one of 'member' or 'admin'.
     */
    public readonly role!: pulumi.Output<string | undefined>;
    /**
     * The user to add to the organization.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a Membership resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MembershipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MembershipArgs | MembershipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MembershipState | undefined;
            resourceInputs["downgradeOnDestroy"] = state ? state.downgradeOnDestroy : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as MembershipArgs | undefined;
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["downgradeOnDestroy"] = args ? args.downgradeOnDestroy : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["etag"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Membership.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Membership resources.
 */
export interface MembershipState {
    /**
     * Instead of removing the member from the org, you can choose to downgrade their membership to 'member' when this resource
     * is destroyed. This is useful when wanting to downgrade admins while keeping them in the organization
     */
    downgradeOnDestroy?: pulumi.Input<boolean>;
    etag?: pulumi.Input<string>;
    /**
     * The role of the user within the organization. Must be one of 'member' or 'admin'.
     */
    role?: pulumi.Input<string>;
    /**
     * The user to add to the organization.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Membership resource.
 */
export interface MembershipArgs {
    /**
     * Instead of removing the member from the org, you can choose to downgrade their membership to 'member' when this resource
     * is destroyed. This is useful when wanting to downgrade admins while keeping them in the organization
     */
    downgradeOnDestroy?: pulumi.Input<boolean>;
    /**
     * The role of the user within the organization. Must be one of 'member' or 'admin'.
     */
    role?: pulumi.Input<string>;
    /**
     * The user to add to the organization.
     */
    username: pulumi.Input<string>;
}
