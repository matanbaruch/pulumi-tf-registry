// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getOrganization(args: GetOrganizationArgs, opts?: pulumi.InvokeOptions): Promise<GetOrganizationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("github:index/getOrganization:getOrganization", {
        "id": args.id,
        "ignoreArchivedRepos": args.ignoreArchivedRepos,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getOrganization.
 */
export interface GetOrganizationArgs {
    id?: string;
    ignoreArchivedRepos?: boolean;
    name: string;
}

/**
 * A collection of values returned by getOrganization.
 */
export interface GetOrganizationResult {
    readonly advancedSecurityEnabledForNewRepositories: boolean;
    readonly defaultRepositoryPermission: string;
    readonly dependabotAlertsEnabledForNewRepositories: boolean;
    readonly dependabotSecurityUpdatesEnabledForNewRepositories: boolean;
    readonly dependencyGraphEnabledForNewRepositories: boolean;
    readonly description: string;
    readonly id: string;
    readonly ignoreArchivedRepos?: boolean;
    readonly login: string;
    /**
     * @deprecated Deprecated
     */
    readonly members: string[];
    readonly membersAllowedRepositoryCreationType: string;
    readonly membersCanCreateInternalRepositories: boolean;
    readonly membersCanCreatePages: boolean;
    readonly membersCanCreatePrivatePages: boolean;
    readonly membersCanCreatePrivateRepositories: boolean;
    readonly membersCanCreatePublicPages: boolean;
    readonly membersCanCreatePublicRepositories: boolean;
    readonly membersCanCreateRepositories: boolean;
    readonly membersCanForkPrivateRepositories: boolean;
    readonly name: string;
    readonly nodeId: string;
    readonly orgname: string;
    readonly plan: string;
    readonly repositories: string[];
    readonly secretScanningEnabledForNewRepositories: boolean;
    readonly secretScanningPushProtectionEnabledForNewRepositories: boolean;
    readonly twoFactorRequirementEnabled: boolean;
    readonly users: {[key: string]: string}[];
    readonly webCommitSignoffRequired: boolean;
}
export function getOrganizationOutput(args: GetOrganizationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOrganizationResult> {
    return pulumi.output(args).apply((a: any) => getOrganization(a, opts))
}

/**
 * A collection of arguments for invoking getOrganization.
 */
export interface GetOrganizationOutputArgs {
    id?: pulumi.Input<string>;
    ignoreArchivedRepos?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
}
