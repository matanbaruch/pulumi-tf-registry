// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RepositoryRuleset extends pulumi.CustomResource {
    /**
     * Get an existing RepositoryRuleset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryRulesetState, opts?: pulumi.CustomResourceOptions): RepositoryRuleset {
        return new RepositoryRuleset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'github:index/repositoryRuleset:RepositoryRuleset';

    /**
     * Returns true if the given object is an instance of RepositoryRuleset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RepositoryRuleset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RepositoryRuleset.__pulumiType;
    }

    /**
     * The actors that can bypass the rules in this ruleset.
     */
    public readonly bypassActors!: pulumi.Output<outputs.RepositoryRulesetBypassActor[] | undefined>;
    /**
     * Parameters for a repository ruleset ref name condition.
     */
    public readonly conditions!: pulumi.Output<outputs.RepositoryRulesetConditions | undefined>;
    /**
     * Possible values for Enforcement are `disabled`, `active`, `evaluate`. Note: `evaluate` is currently only supported for
     * owners of type `organization`.
     */
    public readonly enforcement!: pulumi.Output<string>;
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * The name of the ruleset.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * GraphQL global node id for use with v4 API.
     */
    public /*out*/ readonly nodeId!: pulumi.Output<string>;
    /**
     * Name of the repository to apply rulset to.
     */
    public readonly repository!: pulumi.Output<string | undefined>;
    /**
     * Rules within the ruleset.
     */
    public readonly rules!: pulumi.Output<outputs.RepositoryRulesetRules>;
    /**
     * GitHub ID for the ruleset.
     */
    public /*out*/ readonly rulesetId!: pulumi.Output<number>;
    /**
     * Possible values are `branch` and `tag`.
     */
    public readonly target!: pulumi.Output<string>;

    /**
     * Create a RepositoryRuleset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryRulesetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryRulesetArgs | RepositoryRulesetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryRulesetState | undefined;
            resourceInputs["bypassActors"] = state ? state.bypassActors : undefined;
            resourceInputs["conditions"] = state ? state.conditions : undefined;
            resourceInputs["enforcement"] = state ? state.enforcement : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeId"] = state ? state.nodeId : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["rulesetId"] = state ? state.rulesetId : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
        } else {
            const args = argsOrState as RepositoryRulesetArgs | undefined;
            if ((!args || args.enforcement === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enforcement'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            if ((!args || args.target === undefined) && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            resourceInputs["bypassActors"] = args ? args.bypassActors : undefined;
            resourceInputs["conditions"] = args ? args.conditions : undefined;
            resourceInputs["enforcement"] = args ? args.enforcement : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["nodeId"] = undefined /*out*/;
            resourceInputs["rulesetId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RepositoryRuleset.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RepositoryRuleset resources.
 */
export interface RepositoryRulesetState {
    /**
     * The actors that can bypass the rules in this ruleset.
     */
    bypassActors?: pulumi.Input<pulumi.Input<inputs.RepositoryRulesetBypassActor>[]>;
    /**
     * Parameters for a repository ruleset ref name condition.
     */
    conditions?: pulumi.Input<inputs.RepositoryRulesetConditions>;
    /**
     * Possible values for Enforcement are `disabled`, `active`, `evaluate`. Note: `evaluate` is currently only supported for
     * owners of type `organization`.
     */
    enforcement?: pulumi.Input<string>;
    etag?: pulumi.Input<string>;
    /**
     * The name of the ruleset.
     */
    name?: pulumi.Input<string>;
    /**
     * GraphQL global node id for use with v4 API.
     */
    nodeId?: pulumi.Input<string>;
    /**
     * Name of the repository to apply rulset to.
     */
    repository?: pulumi.Input<string>;
    /**
     * Rules within the ruleset.
     */
    rules?: pulumi.Input<inputs.RepositoryRulesetRules>;
    /**
     * GitHub ID for the ruleset.
     */
    rulesetId?: pulumi.Input<number>;
    /**
     * Possible values are `branch` and `tag`.
     */
    target?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RepositoryRuleset resource.
 */
export interface RepositoryRulesetArgs {
    /**
     * The actors that can bypass the rules in this ruleset.
     */
    bypassActors?: pulumi.Input<pulumi.Input<inputs.RepositoryRulesetBypassActor>[]>;
    /**
     * Parameters for a repository ruleset ref name condition.
     */
    conditions?: pulumi.Input<inputs.RepositoryRulesetConditions>;
    /**
     * Possible values for Enforcement are `disabled`, `active`, `evaluate`. Note: `evaluate` is currently only supported for
     * owners of type `organization`.
     */
    enforcement: pulumi.Input<string>;
    /**
     * The name of the ruleset.
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the repository to apply rulset to.
     */
    repository?: pulumi.Input<string>;
    /**
     * Rules within the ruleset.
     */
    rules: pulumi.Input<inputs.RepositoryRulesetRules>;
    /**
     * Possible values are `branch` and `tag`.
     */
    target: pulumi.Input<string>;
}
