// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AlertingRule extends pulumi.CustomResource {
    /**
     * Get an existing AlertingRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertingRuleState, opts?: pulumi.CustomResourceOptions): AlertingRule {
        return new AlertingRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'lightstep:index/alertingRule:AlertingRule';

    /**
     * Returns true if the given object is an instance of AlertingRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlertingRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertingRule.__pulumiType;
    }

    public readonly conditionId!: pulumi.Output<string>;
    public readonly destinationId!: pulumi.Output<string>;
    public readonly projectName!: pulumi.Output<string>;
    /**
     * Represents the frequency at which to re-send an alert notification if an alert remains in a triggered state. By default,
     * notifications will only be sent when the alert status changes.Values should be expressed as a duration (example: "2d").
     */
    public readonly updateInterval!: pulumi.Output<string>;

    /**
     * Create a AlertingRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertingRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertingRuleArgs | AlertingRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertingRuleState | undefined;
            resourceInputs["conditionId"] = state ? state.conditionId : undefined;
            resourceInputs["destinationId"] = state ? state.destinationId : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["updateInterval"] = state ? state.updateInterval : undefined;
        } else {
            const args = argsOrState as AlertingRuleArgs | undefined;
            if ((!args || args.conditionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'conditionId'");
            }
            if ((!args || args.destinationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationId'");
            }
            if ((!args || args.projectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectName'");
            }
            if ((!args || args.updateInterval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'updateInterval'");
            }
            resourceInputs["conditionId"] = args ? args.conditionId : undefined;
            resourceInputs["destinationId"] = args ? args.destinationId : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["updateInterval"] = args ? args.updateInterval : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlertingRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AlertingRule resources.
 */
export interface AlertingRuleState {
    conditionId?: pulumi.Input<string>;
    destinationId?: pulumi.Input<string>;
    projectName?: pulumi.Input<string>;
    /**
     * Represents the frequency at which to re-send an alert notification if an alert remains in a triggered state. By default,
     * notifications will only be sent when the alert status changes.Values should be expressed as a duration (example: "2d").
     */
    updateInterval?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AlertingRule resource.
 */
export interface AlertingRuleArgs {
    conditionId: pulumi.Input<string>;
    destinationId: pulumi.Input<string>;
    projectName: pulumi.Input<string>;
    /**
     * Represents the frequency at which to re-send an alert notification if an alert remains in a triggered state. By default,
     * notifications will only be sent when the alert status changes.Values should be expressed as a duration (example: "2d").
     */
    updateInterval: pulumi.Input<string>;
}
