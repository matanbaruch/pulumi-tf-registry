// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class InferredServiceRule extends pulumi.CustomResource {
    /**
     * Get an existing InferredServiceRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InferredServiceRuleState, opts?: pulumi.CustomResourceOptions): InferredServiceRule {
        return new InferredServiceRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'lightstep:index/inferredServiceRule:InferredServiceRule';

    /**
     * Returns true if the given object is an instance of InferredServiceRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InferredServiceRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InferredServiceRule.__pulumiType;
    }

    /**
     * Attribute filters that are checked against a leaf span's attributes to indicate the presence of the inferred service
     */
    public readonly attributeFilters!: pulumi.Output<outputs.InferredServiceRuleAttributeFilter[]>;
    /**
     * A description of the rule and what services it should infer
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Attribute keys whose values will be included in the inferred service name
     */
    public readonly groupByKeys!: pulumi.Output<string[] | undefined>;
    /**
     * The name of the inferred service rule, which is included in the name of each inferred service created from this rule
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the project to which the inferred service rule will apply
     */
    public readonly projectName!: pulumi.Output<string>;

    /**
     * Create a InferredServiceRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InferredServiceRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InferredServiceRuleArgs | InferredServiceRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InferredServiceRuleState | undefined;
            resourceInputs["attributeFilters"] = state ? state.attributeFilters : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["groupByKeys"] = state ? state.groupByKeys : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
        } else {
            const args = argsOrState as InferredServiceRuleArgs | undefined;
            if ((!args || args.attributeFilters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'attributeFilters'");
            }
            if ((!args || args.projectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectName'");
            }
            resourceInputs["attributeFilters"] = args ? args.attributeFilters : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["groupByKeys"] = args ? args.groupByKeys : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InferredServiceRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering InferredServiceRule resources.
 */
export interface InferredServiceRuleState {
    /**
     * Attribute filters that are checked against a leaf span's attributes to indicate the presence of the inferred service
     */
    attributeFilters?: pulumi.Input<pulumi.Input<inputs.InferredServiceRuleAttributeFilter>[]>;
    /**
     * A description of the rule and what services it should infer
     */
    description?: pulumi.Input<string>;
    /**
     * Attribute keys whose values will be included in the inferred service name
     */
    groupByKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the inferred service rule, which is included in the name of each inferred service created from this rule
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the project to which the inferred service rule will apply
     */
    projectName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InferredServiceRule resource.
 */
export interface InferredServiceRuleArgs {
    /**
     * Attribute filters that are checked against a leaf span's attributes to indicate the presence of the inferred service
     */
    attributeFilters: pulumi.Input<pulumi.Input<inputs.InferredServiceRuleAttributeFilter>[]>;
    /**
     * A description of the rule and what services it should infer
     */
    description?: pulumi.Input<string>;
    /**
     * Attribute keys whose values will be included in the inferred service name
     */
    groupByKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the inferred service rule, which is included in the name of each inferred service created from this rule
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the project to which the inferred service rule will apply
     */
    projectName: pulumi.Input<string>;
}
