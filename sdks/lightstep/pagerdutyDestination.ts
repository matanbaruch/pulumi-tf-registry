// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PagerdutyDestination extends pulumi.CustomResource {
    /**
     * Get an existing PagerdutyDestination resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PagerdutyDestinationState, opts?: pulumi.CustomResourceOptions): PagerdutyDestination {
        return new PagerdutyDestination(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'lightstep:index/pagerdutyDestination:PagerdutyDestination';

    /**
     * Returns true if the given object is an instance of PagerdutyDestination.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PagerdutyDestination {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PagerdutyDestination.__pulumiType;
    }

    /**
     * Lightstep destination name
     */
    public readonly destinationName!: pulumi.Output<string>;
    /**
     * PagerDuty Service Integration Key. To create one follow the docs here -
     * https://support.pagerduty.com/docs/services-and-integrations#add-integrations-to-an-existing-service
     */
    public readonly integrationKey!: pulumi.Output<string>;
    /**
     * Lightstep project name
     */
    public readonly projectName!: pulumi.Output<string>;

    /**
     * Create a PagerdutyDestination resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PagerdutyDestinationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PagerdutyDestinationArgs | PagerdutyDestinationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PagerdutyDestinationState | undefined;
            resourceInputs["destinationName"] = state ? state.destinationName : undefined;
            resourceInputs["integrationKey"] = state ? state.integrationKey : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
        } else {
            const args = argsOrState as PagerdutyDestinationArgs | undefined;
            if ((!args || args.destinationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationName'");
            }
            if ((!args || args.integrationKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integrationKey'");
            }
            if ((!args || args.projectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectName'");
            }
            resourceInputs["destinationName"] = args ? args.destinationName : undefined;
            resourceInputs["integrationKey"] = args ? args.integrationKey : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PagerdutyDestination.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PagerdutyDestination resources.
 */
export interface PagerdutyDestinationState {
    /**
     * Lightstep destination name
     */
    destinationName?: pulumi.Input<string>;
    /**
     * PagerDuty Service Integration Key. To create one follow the docs here -
     * https://support.pagerduty.com/docs/services-and-integrations#add-integrations-to-an-existing-service
     */
    integrationKey?: pulumi.Input<string>;
    /**
     * Lightstep project name
     */
    projectName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PagerdutyDestination resource.
 */
export interface PagerdutyDestinationArgs {
    /**
     * Lightstep destination name
     */
    destinationName: pulumi.Input<string>;
    /**
     * PagerDuty Service Integration Key. To create one follow the docs here -
     * https://support.pagerduty.com/docs/services-and-integrations#add-integrations-to-an-existing-service
     */
    integrationKey: pulumi.Input<string>;
    /**
     * Lightstep project name
     */
    projectName: pulumi.Input<string>;
}
