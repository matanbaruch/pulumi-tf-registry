// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServicenowDestination extends pulumi.CustomResource {
    /**
     * Get an existing ServicenowDestination resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServicenowDestinationState, opts?: pulumi.CustomResourceOptions): ServicenowDestination {
        return new ServicenowDestination(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'lightstep:index/servicenowDestination:ServicenowDestination';

    /**
     * Returns true if the given object is an instance of ServicenowDestination.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServicenowDestination {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServicenowDestination.__pulumiType;
    }

    /**
     * Basic auth used to authenticate with the ServiceNow instance
     */
    public readonly auth!: pulumi.Output<outputs.ServicenowDestinationAuth>;
    /**
     * Name of the ServiceNow destination
     */
    public readonly destinationName!: pulumi.Output<string>;
    public readonly projectName!: pulumi.Output<string>;
    /**
     * ServiceNow instance URL
     */
    public readonly url!: pulumi.Output<string>;

    /**
     * Create a ServicenowDestination resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServicenowDestinationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServicenowDestinationArgs | ServicenowDestinationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServicenowDestinationState | undefined;
            resourceInputs["auth"] = state ? state.auth : undefined;
            resourceInputs["destinationName"] = state ? state.destinationName : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as ServicenowDestinationArgs | undefined;
            if ((!args || args.auth === undefined) && !opts.urn) {
                throw new Error("Missing required property 'auth'");
            }
            if ((!args || args.destinationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationName'");
            }
            if ((!args || args.projectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectName'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["auth"] = args ? args.auth : undefined;
            resourceInputs["destinationName"] = args ? args.destinationName : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServicenowDestination.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServicenowDestination resources.
 */
export interface ServicenowDestinationState {
    /**
     * Basic auth used to authenticate with the ServiceNow instance
     */
    auth?: pulumi.Input<inputs.ServicenowDestinationAuth>;
    /**
     * Name of the ServiceNow destination
     */
    destinationName?: pulumi.Input<string>;
    projectName?: pulumi.Input<string>;
    /**
     * ServiceNow instance URL
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServicenowDestination resource.
 */
export interface ServicenowDestinationArgs {
    /**
     * Basic auth used to authenticate with the ServiceNow instance
     */
    auth: pulumi.Input<inputs.ServicenowDestinationAuth>;
    /**
     * Name of the ServiceNow destination
     */
    destinationName: pulumi.Input<string>;
    projectName: pulumi.Input<string>;
    /**
     * ServiceNow instance URL
     */
    url: pulumi.Input<string>;
}
