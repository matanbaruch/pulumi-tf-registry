// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AlertAlertingRule {
    /**
     * The identifier of the destination to receive notifications for this alert.
     */
    id: pulumi.Input<string>;
    /**
     * An optional duration that represents the frequency at which to re-send an alert notification if an alert remains in a triggered state. 
     * By default, notifications will only be sent when the alert status changes.  
     * Values should be expressed as a duration (example: "2d").
     */
    updateInterval?: pulumi.Input<string>;
}

export interface AlertCompositeAlert {
    /**
     * Defines one of the sub alerts within a composite alert.
     */
    alerts: pulumi.Input<pulumi.Input<inputs.AlertCompositeAlertAlert>[]>;
}

export interface AlertCompositeAlertAlert {
    expression: pulumi.Input<inputs.AlertCompositeAlertAlertExpression>;
    /**
     * The identifier for this sub alert. Must be a single uppercase letter (examples: "A", "B", "C")
     */
    name: pulumi.Input<string>;
    query: pulumi.Input<inputs.AlertCompositeAlertAlertQuery>;
    /**
     * Optional free-form title for this sub alert.
     */
    title?: pulumi.Input<string>;
}

export interface AlertCompositeAlertAlertExpression {
    /**
     * If true, a notification is sent when the alert query returns no data. If false, notifications aren't sent in this scenario.
     */
    isNoData?: pulumi.Input<boolean>;
    /**
     * No data must be seen for this duration before the status changes.
     */
    noDataDurationMs?: pulumi.Input<number>;
    /**
     * Required when at least one threshold (Critical, Warning) is defined. Indicates whether the alert triggers when the value is above the threshold or below the threshold.
     */
    operand?: pulumi.Input<string>;
    /**
     * Optional values defining the thresholds at which this alert transitions into Critical or Warning states. If a particular threshold is not specified, the alert never transitions into that state.
     */
    thresholds?: pulumi.Input<inputs.AlertCompositeAlertAlertExpressionThresholds>;
}

export interface AlertCompositeAlertAlertExpressionThresholds {
    /**
     * Defines the threshold for the alert to transition to a Critical (more severe) status.
     */
    critical?: pulumi.Input<string>;
    /**
     * Critical threshold must be breached for this duration before the status changes.
     */
    criticalDurationMs?: pulumi.Input<number>;
    /**
     * Defines the threshold for the alert to transition to a Warning (less severe) status.
     */
    warning?: pulumi.Input<string>;
    /**
     * Critical threshold must be breached for this duration before the status changes.
     */
    warningDurationMs?: pulumi.Input<number>;
}

export interface AlertCompositeAlertAlertQuery {
    display?: pulumi.Input<string>;
    /**
     * Applicable options vary depending on the display type. Please see the Lightstep documentation for a full description.
     */
    displayTypeOptions?: pulumi.Input<inputs.AlertCompositeAlertAlertQueryDisplayTypeOptions>;
    hidden: pulumi.Input<boolean>;
    /**
     * An optional map of sub-query names in the query_string to a boolean string to hide/show that query. If specified, the map must have an entry for all named sub-queries in the query_string. A value of "true" indicates the query should be hidden. Example: `hidden_queries = {  "a" = "true",  "b" = "false" }`.
     */
    hiddenQueries?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    queryName: pulumi.Input<string>;
    queryString: pulumi.Input<string>;
}

export interface AlertCompositeAlertAlertQueryDisplayTypeOptions {
    comparisonWindowMs?: pulumi.Input<number>;
    displayType?: pulumi.Input<string>;
    isDonut?: pulumi.Input<boolean>;
    max?: pulumi.Input<string>;
    min?: pulumi.Input<string>;
    sortBy?: pulumi.Input<string>;
    sortDirection?: pulumi.Input<string>;
    yAxisLogBase?: pulumi.Input<number>;
    yAxisMax?: pulumi.Input<number>;
    yAxisMin?: pulumi.Input<number>;
    yAxisScale?: pulumi.Input<string>;
}

export interface AlertExpression {
    /**
     * When false, send a single notification whenever any number of group_by values exceeds the alert threshold. When true, send individual notifications for each distinct group_by value that exceeds the threshold.
     */
    isMulti?: pulumi.Input<boolean>;
    /**
     * If true, a notification is sent when the alert query returns no data. If false, notifications aren't sent in this scenario.
     */
    isNoData?: pulumi.Input<boolean>;
    /**
     * No data must be seen for this duration before the status changes.
     */
    noDataDurationMs?: pulumi.Input<number>;
    /**
     * Required when at least one threshold (Critical, Warning) is defined. Indicates whether the alert triggers when the value is above the threshold or below the threshold.
     */
    operand?: pulumi.Input<string>;
    /**
     * Optional values defining the thresholds at which this alert transitions into Critical or Warning states. If a particular threshold is not specified, the alert never transitions into that state.
     */
    thresholds?: pulumi.Input<inputs.AlertExpressionThresholds>;
}

export interface AlertExpressionThresholds {
    /**
     * Defines the threshold for the alert to transition to a Critical (more severe) status.
     */
    critical?: pulumi.Input<string>;
    /**
     * Critical threshold must be breached for this duration before the status changes.
     */
    criticalDurationMs?: pulumi.Input<number>;
    /**
     * Defines the threshold for the alert to transition to a Warning (less severe) status.
     */
    warning?: pulumi.Input<string>;
    /**
     * Critical threshold must be breached for this duration before the status changes.
     */
    warningDurationMs?: pulumi.Input<number>;
}

export interface AlertLabel {
    key?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface AlertQuery {
    display?: pulumi.Input<string>;
    /**
     * Applicable options vary depending on the display type. Please see the Lightstep documentation for a full description.
     */
    displayTypeOptions?: pulumi.Input<inputs.AlertQueryDisplayTypeOptions>;
    hidden: pulumi.Input<boolean>;
    /**
     * An optional map of sub-query names in the query_string to a boolean string to hide/show that query. If specified, the map must have an entry for all named sub-queries in the query_string. A value of "true" indicates the query should be hidden. Example: `hidden_queries = {  "a" = "true",  "b" = "false" }`.
     */
    hiddenQueries?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    queryName: pulumi.Input<string>;
    queryString: pulumi.Input<string>;
}

export interface AlertQueryDisplayTypeOptions {
    comparisonWindowMs?: pulumi.Input<number>;
    displayType?: pulumi.Input<string>;
    isDonut?: pulumi.Input<boolean>;
    max?: pulumi.Input<string>;
    min?: pulumi.Input<string>;
    sortBy?: pulumi.Input<string>;
    sortDirection?: pulumi.Input<string>;
    yAxisLogBase?: pulumi.Input<number>;
    yAxisMax?: pulumi.Input<number>;
    yAxisMin?: pulumi.Input<number>;
    yAxisScale?: pulumi.Input<string>;
}

export interface DashboardChart {
    description?: pulumi.Input<string>;
    height?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    queries: pulumi.Input<pulumi.Input<inputs.DashboardChartQuery>[]>;
    rank: pulumi.Input<number>;
    /**
     * Subtitle to show beneath big number, unused in other chart types
     */
    subtitle?: pulumi.Input<string>;
    thresholds?: pulumi.Input<pulumi.Input<inputs.DashboardChartThreshold>[]>;
    type: pulumi.Input<string>;
    width?: pulumi.Input<number>;
    /**
     * Links to other resources
     */
    workflowLinks?: pulumi.Input<pulumi.Input<inputs.DashboardChartWorkflowLink>[]>;
    xPos?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    yAxis?: pulumi.Input<inputs.DashboardChartYAxis>;
    yPos?: pulumi.Input<number>;
}

export interface DashboardChartQuery {
    dependencyMapOptions?: pulumi.Input<inputs.DashboardChartQueryDependencyMapOptions>;
    display?: pulumi.Input<string>;
    /**
     * Applicable options vary depending on the display type. Please see the Lightstep documentation for a full description.
     */
    displayTypeOptions?: pulumi.Input<inputs.DashboardChartQueryDisplayTypeOptions>;
    hidden: pulumi.Input<boolean>;
    /**
     * An optional map of sub-query names in the query_string to a boolean string to hide/show that query. If specified, the map must have an entry for all named sub-queries in the query_string. A value of "true" indicates the query should be hidden. Example: `hidden_queries = {  "a" = "true",  "b" = "false" }`.
     */
    hiddenQueries?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    queryName: pulumi.Input<string>;
    queryString: pulumi.Input<string>;
}

export interface DashboardChartQueryDependencyMapOptions {
    mapType?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
}

export interface DashboardChartQueryDisplayTypeOptions {
    comparisonWindowMs?: pulumi.Input<number>;
    displayType?: pulumi.Input<string>;
    isDonut?: pulumi.Input<boolean>;
    max?: pulumi.Input<string>;
    min?: pulumi.Input<string>;
    sortBy?: pulumi.Input<string>;
    sortDirection?: pulumi.Input<string>;
    yAxisLogBase?: pulumi.Input<number>;
    yAxisMax?: pulumi.Input<number>;
    yAxisMin?: pulumi.Input<number>;
    yAxisScale?: pulumi.Input<string>;
}

export interface DashboardChartThreshold {
    color: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    operator: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface DashboardChartWorkflowLink {
    name: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface DashboardChartYAxis {
    max: pulumi.Input<number>;
    min: pulumi.Input<number>;
}

export interface DashboardGroup {
    /**
     * A dashboard panel to view a list of your alerts and their status
     */
    alertsListPanels?: pulumi.Input<pulumi.Input<inputs.DashboardGroupAlertsListPanel>[]>;
    charts?: pulumi.Input<pulumi.Input<inputs.DashboardGroupChart>[]>;
    id?: pulumi.Input<string>;
    rank: pulumi.Input<number>;
    /**
     * A dashboard panel to view the health of your services
     */
    serviceHealthPanels?: pulumi.Input<pulumi.Input<inputs.DashboardGroupServiceHealthPanel>[]>;
    textPanels?: pulumi.Input<pulumi.Input<inputs.DashboardGroupTextPanel>[]>;
    title?: pulumi.Input<string>;
    visibilityType: pulumi.Input<string>;
}

export interface DashboardGroupAlertsListPanel {
    /**
     * a list of predicates that are implicitly ANDed together to filter alerts
     */
    filterBy?: pulumi.Input<inputs.DashboardGroupAlertsListPanelFilterBy>;
    height?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * custom options for the service health panel
     */
    panelOptions?: pulumi.Input<inputs.DashboardGroupAlertsListPanelPanelOptions>;
    width?: pulumi.Input<number>;
    xPos?: pulumi.Input<number>;
    yPos?: pulumi.Input<number>;
}

export interface DashboardGroupAlertsListPanelFilterBy {
    /**
     * a single predicate
     */
    predicates?: pulumi.Input<pulumi.Input<inputs.DashboardGroupAlertsListPanelFilterByPredicate>[]>;
}

export interface DashboardGroupAlertsListPanelFilterByPredicate {
    /**
     * Labels can be key/value pairs or standalone values.
     */
    labels?: pulumi.Input<pulumi.Input<inputs.DashboardGroupAlertsListPanelFilterByPredicateLabel>[]>;
    operator?: pulumi.Input<string>;
}

export interface DashboardGroupAlertsListPanelFilterByPredicateLabel {
    key?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface DashboardGroupAlertsListPanelPanelOptions {
    sortBy?: pulumi.Input<string>;
    sortDirection?: pulumi.Input<string>;
}

export interface DashboardGroupChart {
    description?: pulumi.Input<string>;
    height?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    queries: pulumi.Input<pulumi.Input<inputs.DashboardGroupChartQuery>[]>;
    rank: pulumi.Input<number>;
    /**
     * Subtitle to show beneath big number, unused in other chart types
     */
    subtitle?: pulumi.Input<string>;
    thresholds?: pulumi.Input<pulumi.Input<inputs.DashboardGroupChartThreshold>[]>;
    type: pulumi.Input<string>;
    width?: pulumi.Input<number>;
    /**
     * Links to other resources
     */
    workflowLinks?: pulumi.Input<pulumi.Input<inputs.DashboardGroupChartWorkflowLink>[]>;
    xPos?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    yAxis?: pulumi.Input<inputs.DashboardGroupChartYAxis>;
    yPos?: pulumi.Input<number>;
}

export interface DashboardGroupChartQuery {
    dependencyMapOptions?: pulumi.Input<inputs.DashboardGroupChartQueryDependencyMapOptions>;
    display?: pulumi.Input<string>;
    /**
     * Applicable options vary depending on the display type. Please see the Lightstep documentation for a full description.
     */
    displayTypeOptions?: pulumi.Input<inputs.DashboardGroupChartQueryDisplayTypeOptions>;
    hidden: pulumi.Input<boolean>;
    /**
     * An optional map of sub-query names in the query_string to a boolean string to hide/show that query. If specified, the map must have an entry for all named sub-queries in the query_string. A value of "true" indicates the query should be hidden. Example: `hidden_queries = {  "a" = "true",  "b" = "false" }`.
     */
    hiddenQueries?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    queryName: pulumi.Input<string>;
    queryString: pulumi.Input<string>;
}

export interface DashboardGroupChartQueryDependencyMapOptions {
    mapType?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
}

export interface DashboardGroupChartQueryDisplayTypeOptions {
    comparisonWindowMs?: pulumi.Input<number>;
    displayType?: pulumi.Input<string>;
    isDonut?: pulumi.Input<boolean>;
    max?: pulumi.Input<string>;
    min?: pulumi.Input<string>;
    sortBy?: pulumi.Input<string>;
    sortDirection?: pulumi.Input<string>;
    yAxisLogBase?: pulumi.Input<number>;
    yAxisMax?: pulumi.Input<number>;
    yAxisMin?: pulumi.Input<number>;
    yAxisScale?: pulumi.Input<string>;
}

export interface DashboardGroupChartThreshold {
    color: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    operator: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface DashboardGroupChartWorkflowLink {
    name: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface DashboardGroupChartYAxis {
    max: pulumi.Input<number>;
    min: pulumi.Input<number>;
}

export interface DashboardGroupServiceHealthPanel {
    height?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * custom options for the service health panel
     */
    panelOptions?: pulumi.Input<inputs.DashboardGroupServiceHealthPanelPanelOptions>;
    width?: pulumi.Input<number>;
    xPos?: pulumi.Input<number>;
    yPos?: pulumi.Input<number>;
}

export interface DashboardGroupServiceHealthPanelPanelOptions {
    changeSince?: pulumi.Input<string>;
    percentile?: pulumi.Input<string>;
    sortBy?: pulumi.Input<string>;
    sortDirection?: pulumi.Input<string>;
}

export interface DashboardGroupTextPanel {
    description?: pulumi.Input<string>;
    height?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    text: pulumi.Input<string>;
    width?: pulumi.Input<number>;
    xPos?: pulumi.Input<number>;
    yPos?: pulumi.Input<number>;
}

export interface DashboardLabel {
    key?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface DashboardTemplateVariable {
    /**
     * One or more values to set the template variable to by default (if none are provided, defaults to all possible values)
     */
    defaultValues: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique (per dashboard) name for template variable, beginning with a letter or underscore and only containing letters, numbers, and underscores
     */
    name: pulumi.Input<string>;
    /**
     * Attribute key used as source for suggested template variable values appearing in Lightstep UI
     */
    suggestionAttributeKey: pulumi.Input<string>;
}

export interface DashboardWorkflowLink {
    name: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface InferredServiceRuleAttributeFilter {
    /**
     * Key of a span attribute
     */
    key: pulumi.Input<string>;
    /**
     * Values for the attribute
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MetricConditionAlertingRule {
    /**
     * The identifier of the destination to receive notifications for this alert.
     */
    id: pulumi.Input<string>;
    /**
     * An optional duration that represents the frequency at which to re-send an alert notification if an alert remains in a triggered state. 
     * By default, notifications will only be sent when the alert status changes.  
     * Values should be expressed as a duration (example: "2d").
     */
    updateInterval?: pulumi.Input<string>;
}

export interface MetricConditionExpression {
    /**
     * When false, send a single notification whenever any number of group_by values exceeds the alert threshold. When true, send individual notifications for each distinct group_by value that exceeds the threshold.
     */
    isMulti?: pulumi.Input<boolean>;
    /**
     * If true, a notification is sent when the alert query returns no data. If false, notifications aren't sent in this scenario.
     */
    isNoData?: pulumi.Input<boolean>;
    /**
     * No data must be seen for this duration before the status changes.
     */
    noDataDurationMs?: pulumi.Input<number>;
    /**
     * Required when at least one threshold (Critical, Warning) is defined. Indicates whether the alert triggers when the value is above the threshold or below the threshold.
     */
    operand?: pulumi.Input<string>;
    /**
     * Optional values defining the thresholds at which this alert transitions into Critical or Warning states. If a particular threshold is not specified, the alert never transitions into that state.
     */
    thresholds?: pulumi.Input<inputs.MetricConditionExpressionThresholds>;
}

export interface MetricConditionExpressionThresholds {
    /**
     * Defines the threshold for the alert to transition to a Critical (more severe) status.
     */
    critical?: pulumi.Input<string>;
    /**
     * Critical threshold must be breached for this duration before the status changes.
     */
    criticalDurationMs?: pulumi.Input<number>;
    /**
     * Defines the threshold for the alert to transition to a Warning (less severe) status.
     */
    warning?: pulumi.Input<string>;
    /**
     * Critical threshold must be breached for this duration before the status changes.
     */
    warningDurationMs?: pulumi.Input<number>;
}

export interface MetricConditionLabel {
    key?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface MetricConditionMetricQuery {
    display?: pulumi.Input<string>;
    /**
     * Not-equals filters (operand: neq)
     */
    excludeFilters?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * Non-equality filters (operand: contains, regexp)
     */
    filters?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    finalWindowOperation?: pulumi.Input<inputs.MetricConditionMetricQueryFinalWindowOperation>;
    groupBy?: pulumi.Input<inputs.MetricConditionMetricQueryGroupBy>;
    hidden: pulumi.Input<boolean>;
    /**
     * Equality filters (operand: eq)
     */
    includeFilters?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    metric?: pulumi.Input<string>;
    queryName: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    spans?: pulumi.Input<inputs.MetricConditionMetricQuerySpans>;
    timeseriesOperator?: pulumi.Input<string>;
    /**
     * Unit specified in milliseconds, but must be at least 30,000 and a round number of seconds (i.e. evenly divisible by 1,000).
     */
    timeseriesOperatorInputWindowMs?: pulumi.Input<number>;
    /**
     * Deprecated, use the query_string field in lightstep.Dashboard or lightstep.Alert instead
     *
     * @deprecated Deprecated
     */
    tql?: pulumi.Input<string>;
}

export interface MetricConditionMetricQueryFinalWindowOperation {
    /**
     * Unit specified in milliseconds, but must be at least 30,000 and a round number of seconds (i.e. evenly divisible by 1,000).
     */
    inputWindowMs?: pulumi.Input<number>;
    operator?: pulumi.Input<string>;
}

export interface MetricConditionMetricQueryGroupBy {
    aggregationMethod?: pulumi.Input<string>;
    keys?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MetricConditionMetricQuerySpans {
    groupByKeys?: pulumi.Input<pulumi.Input<string>[]>;
    latencyPercentiles?: pulumi.Input<pulumi.Input<number>[]>;
    operator: pulumi.Input<string>;
    operatorInputWindowMs?: pulumi.Input<number>;
    query: pulumi.Input<string>;
}

export interface MetricDashboardChart {
    description?: pulumi.Input<string>;
    height?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    queries: pulumi.Input<pulumi.Input<inputs.MetricDashboardChartQuery>[]>;
    rank: pulumi.Input<number>;
    /**
     * Subtitle to show beneath big number, unused in other chart types
     */
    subtitle?: pulumi.Input<string>;
    thresholds?: pulumi.Input<pulumi.Input<inputs.MetricDashboardChartThreshold>[]>;
    type: pulumi.Input<string>;
    width?: pulumi.Input<number>;
    /**
     * Links to other resources
     */
    workflowLinks?: pulumi.Input<pulumi.Input<inputs.MetricDashboardChartWorkflowLink>[]>;
    xPos?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    yAxis?: pulumi.Input<inputs.MetricDashboardChartYAxis>;
    yPos?: pulumi.Input<number>;
}

export interface MetricDashboardChartQuery {
    display?: pulumi.Input<string>;
    /**
     * Not-equals filters (operand: neq)
     */
    excludeFilters?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * Non-equality filters (operand: contains, regexp)
     */
    filters?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    finalWindowOperation?: pulumi.Input<inputs.MetricDashboardChartQueryFinalWindowOperation>;
    groupBy?: pulumi.Input<inputs.MetricDashboardChartQueryGroupBy>;
    hidden: pulumi.Input<boolean>;
    /**
     * Equality filters (operand: eq)
     */
    includeFilters?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    metric?: pulumi.Input<string>;
    queryName: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    spans?: pulumi.Input<inputs.MetricDashboardChartQuerySpans>;
    timeseriesOperator?: pulumi.Input<string>;
    /**
     * Unit specified in milliseconds, but must be at least 30,000 and a round number of seconds (i.e. evenly divisible by 1,000).
     */
    timeseriesOperatorInputWindowMs?: pulumi.Input<number>;
    /**
     * Deprecated, use the query_string field in lightstep.Dashboard or lightstep.Alert instead
     *
     * @deprecated Deprecated
     */
    tql?: pulumi.Input<string>;
}

export interface MetricDashboardChartQueryFinalWindowOperation {
    /**
     * Unit specified in milliseconds, but must be at least 30,000 and a round number of seconds (i.e. evenly divisible by 1,000).
     */
    inputWindowMs?: pulumi.Input<number>;
    operator?: pulumi.Input<string>;
}

export interface MetricDashboardChartQueryGroupBy {
    aggregationMethod?: pulumi.Input<string>;
    keys?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MetricDashboardChartQuerySpans {
    groupByKeys?: pulumi.Input<pulumi.Input<string>[]>;
    latencyPercentiles?: pulumi.Input<pulumi.Input<number>[]>;
    operator: pulumi.Input<string>;
    operatorInputWindowMs?: pulumi.Input<number>;
    query: pulumi.Input<string>;
}

export interface MetricDashboardChartThreshold {
    color: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    operator: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface MetricDashboardChartWorkflowLink {
    name: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface MetricDashboardChartYAxis {
    max: pulumi.Input<number>;
    min: pulumi.Input<number>;
}

export interface MetricDashboardGroup {
    /**
     * A dashboard panel to view a list of your alerts and their status
     */
    alertsListPanels?: pulumi.Input<pulumi.Input<inputs.MetricDashboardGroupAlertsListPanel>[]>;
    charts?: pulumi.Input<pulumi.Input<inputs.MetricDashboardGroupChart>[]>;
    id?: pulumi.Input<string>;
    rank: pulumi.Input<number>;
    /**
     * A dashboard panel to view the health of your services
     */
    serviceHealthPanels?: pulumi.Input<pulumi.Input<inputs.MetricDashboardGroupServiceHealthPanel>[]>;
    textPanels?: pulumi.Input<pulumi.Input<inputs.MetricDashboardGroupTextPanel>[]>;
    title?: pulumi.Input<string>;
    visibilityType: pulumi.Input<string>;
}

export interface MetricDashboardGroupAlertsListPanel {
    /**
     * a list of predicates that are implicitly ANDed together to filter alerts
     */
    filterBy?: pulumi.Input<inputs.MetricDashboardGroupAlertsListPanelFilterBy>;
    height?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * custom options for the service health panel
     */
    panelOptions?: pulumi.Input<inputs.MetricDashboardGroupAlertsListPanelPanelOptions>;
    width?: pulumi.Input<number>;
    xPos?: pulumi.Input<number>;
    yPos?: pulumi.Input<number>;
}

export interface MetricDashboardGroupAlertsListPanelFilterBy {
    /**
     * a single predicate
     */
    predicates?: pulumi.Input<pulumi.Input<inputs.MetricDashboardGroupAlertsListPanelFilterByPredicate>[]>;
}

export interface MetricDashboardGroupAlertsListPanelFilterByPredicate {
    /**
     * Labels can be key/value pairs or standalone values.
     */
    labels?: pulumi.Input<pulumi.Input<inputs.MetricDashboardGroupAlertsListPanelFilterByPredicateLabel>[]>;
    operator?: pulumi.Input<string>;
}

export interface MetricDashboardGroupAlertsListPanelFilterByPredicateLabel {
    key?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface MetricDashboardGroupAlertsListPanelPanelOptions {
    sortBy?: pulumi.Input<string>;
    sortDirection?: pulumi.Input<string>;
}

export interface MetricDashboardGroupChart {
    description?: pulumi.Input<string>;
    height?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    queries: pulumi.Input<pulumi.Input<inputs.MetricDashboardGroupChartQuery>[]>;
    rank: pulumi.Input<number>;
    /**
     * Subtitle to show beneath big number, unused in other chart types
     */
    subtitle?: pulumi.Input<string>;
    thresholds?: pulumi.Input<pulumi.Input<inputs.MetricDashboardGroupChartThreshold>[]>;
    type: pulumi.Input<string>;
    width?: pulumi.Input<number>;
    /**
     * Links to other resources
     */
    workflowLinks?: pulumi.Input<pulumi.Input<inputs.MetricDashboardGroupChartWorkflowLink>[]>;
    xPos?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    yAxis?: pulumi.Input<inputs.MetricDashboardGroupChartYAxis>;
    yPos?: pulumi.Input<number>;
}

export interface MetricDashboardGroupChartQuery {
    display?: pulumi.Input<string>;
    /**
     * Not-equals filters (operand: neq)
     */
    excludeFilters?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * Non-equality filters (operand: contains, regexp)
     */
    filters?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    finalWindowOperation?: pulumi.Input<inputs.MetricDashboardGroupChartQueryFinalWindowOperation>;
    groupBy?: pulumi.Input<inputs.MetricDashboardGroupChartQueryGroupBy>;
    hidden: pulumi.Input<boolean>;
    /**
     * Equality filters (operand: eq)
     */
    includeFilters?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    metric?: pulumi.Input<string>;
    queryName: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    spans?: pulumi.Input<inputs.MetricDashboardGroupChartQuerySpans>;
    timeseriesOperator?: pulumi.Input<string>;
    /**
     * Unit specified in milliseconds, but must be at least 30,000 and a round number of seconds (i.e. evenly divisible by 1,000).
     */
    timeseriesOperatorInputWindowMs?: pulumi.Input<number>;
    /**
     * Deprecated, use the query_string field in lightstep.Dashboard or lightstep.Alert instead
     *
     * @deprecated Deprecated
     */
    tql?: pulumi.Input<string>;
}

export interface MetricDashboardGroupChartQueryFinalWindowOperation {
    /**
     * Unit specified in milliseconds, but must be at least 30,000 and a round number of seconds (i.e. evenly divisible by 1,000).
     */
    inputWindowMs?: pulumi.Input<number>;
    operator?: pulumi.Input<string>;
}

export interface MetricDashboardGroupChartQueryGroupBy {
    aggregationMethod?: pulumi.Input<string>;
    keys?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MetricDashboardGroupChartQuerySpans {
    groupByKeys?: pulumi.Input<pulumi.Input<string>[]>;
    latencyPercentiles?: pulumi.Input<pulumi.Input<number>[]>;
    operator: pulumi.Input<string>;
    operatorInputWindowMs?: pulumi.Input<number>;
    query: pulumi.Input<string>;
}

export interface MetricDashboardGroupChartThreshold {
    color: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    operator: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface MetricDashboardGroupChartWorkflowLink {
    name: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface MetricDashboardGroupChartYAxis {
    max: pulumi.Input<number>;
    min: pulumi.Input<number>;
}

export interface MetricDashboardGroupServiceHealthPanel {
    height?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * custom options for the service health panel
     */
    panelOptions?: pulumi.Input<inputs.MetricDashboardGroupServiceHealthPanelPanelOptions>;
    width?: pulumi.Input<number>;
    xPos?: pulumi.Input<number>;
    yPos?: pulumi.Input<number>;
}

export interface MetricDashboardGroupServiceHealthPanelPanelOptions {
    changeSince?: pulumi.Input<string>;
    percentile?: pulumi.Input<string>;
    sortBy?: pulumi.Input<string>;
    sortDirection?: pulumi.Input<string>;
}

export interface MetricDashboardGroupTextPanel {
    description?: pulumi.Input<string>;
    height?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    text: pulumi.Input<string>;
    width?: pulumi.Input<number>;
    xPos?: pulumi.Input<number>;
    yPos?: pulumi.Input<number>;
}

export interface MetricDashboardLabel {
    key?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface MetricDashboardTemplateVariable {
    /**
     * One or more values to set the template variable to by default (if none are provided, defaults to all possible values)
     */
    defaultValues: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique (per dashboard) name for template variable, beginning with a letter or underscore and only containing letters, numbers, and underscores
     */
    name: pulumi.Input<string>;
    /**
     * Attribute key used as source for suggested template variable values appearing in Lightstep UI
     */
    suggestionAttributeKey: pulumi.Input<string>;
}

export interface MetricDashboardWorkflowLink {
    name: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface SamlGroupMappingsMapping {
    /**
     * Key/Value attribute pair to match against the user's SAML attributes.
     */
    match: pulumi.Input<inputs.SamlGroupMappingsMappingMatch>;
    /**
     * Roles to assign to the user if the match is successful.
     */
    roles: pulumi.Input<inputs.SamlGroupMappingsMappingRoles>;
}

export interface SamlGroupMappingsMappingMatch {
    /**
     * Attribute Key to match against the user's SAML attributes.
     */
    attributeKey: pulumi.Input<string>;
    /**
     * Attribute Value to match against the user's SAML attributes
     */
    attributeValue: pulumi.Input<string>;
}

export interface SamlGroupMappingsMappingRoles {
    /**
     * Organization Role. Only 'Organization Editor', 'Organization Viewer' and 'Organization Restricted Member'  are supported.
     */
    organizationRole: pulumi.Input<string>;
    /**
     * Map of Project Name to Project Role. Only 'Project Editor' and 'Project Viewer' are supported.
     */
    projectRoles?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ServicenowDestinationAuth {
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface SnoozeRuleSchedule {
    /**
     * Effective during the entire specified window
     */
    oneTime?: pulumi.Input<inputs.SnoozeRuleScheduleOneTime>;
    /**
     * Effective beginning at the start date and follows the schedules defined. When schedules overlap, the rule is effective
     */
    recurring?: pulumi.Input<inputs.SnoozeRuleScheduleRecurring>;
}

export interface SnoozeRuleScheduleOneTime {
    /**
     * ISO 8601 relative date/time format. Example: '2021-04-04T14:30:00'
     */
    endDateTime?: pulumi.Input<string>;
    /**
     * ISO 8601 relative date/time format. Example: '2021-04-04T14:30:00'
     */
    startDateTime: pulumi.Input<string>;
    /**
     * IANA format timezone. Examples: 'UTC', 'US/Pacific', 'Europe/Paris'
     */
    timezone: pulumi.Input<string>;
}

export interface SnoozeRuleScheduleRecurring {
    /**
     * ISO 8601 date format. Example: 2021-01-01
     */
    endDate?: pulumi.Input<string>;
    schedule: pulumi.Input<inputs.SnoozeRuleScheduleRecurringSchedule>;
    /**
     * ISO 8601 date format. Example: 2021-01-01
     */
    startDate: pulumi.Input<string>;
    /**
     * IANA format timezone. Examples: 'UTC', 'US/Pacific', 'Europe/Paris'
     */
    timezone: pulumi.Input<string>;
}

export interface SnoozeRuleScheduleRecurringSchedule {
    /**
     * Defines which days should have an instance of this reoccurrence
     */
    cadence: pulumi.Input<inputs.SnoozeRuleScheduleRecurringScheduleCadence>;
    /**
     * How long each occurrence lasts specified in milliseconds. Must be a multiple of 1 minute (no fractional minutes)
     */
    durationMillis: pulumi.Input<number>;
    /**
     * Human-readable name for this reoccurrence
     */
    name?: pulumi.Input<string>;
    /**
     * ISO 8601 time format defining when the silencing period begins on each relevant day defined by the cadence. Must NOT include UTC time offset (the time zone is specified in the 'recurring' block instead. Example '16:07:29'
     */
    startTime: pulumi.Input<string>;
}

export interface SnoozeRuleScheduleRecurringScheduleCadence {
    /**
     * Comma-separated List of number or ranges (crontab-style). The empty string is defined as no days. Leaving this field undefined or null is defined as all days.a The string '*' is also defined as all days. Format: 0, 7 = sun, 1 = mon, ..., 6 = stat. Examples: '1-5' or '6-7' or '2,4', '*', ''
     */
    daysOfWeek: pulumi.Input<string>;
}

export interface SnoozeRuleScope {
    /**
     * Defines which alerts the rule applies to
     */
    basic: pulumi.Input<inputs.SnoozeRuleScopeBasic>;
}

export interface SnoozeRuleScopeBasic {
    /**
     * Defines which alerts the rule applies to
     */
    scopeFilters: pulumi.Input<pulumi.Input<inputs.SnoozeRuleScopeBasicScopeFilter>[]>;
}

export interface SnoozeRuleScopeBasicScopeFilter {
    alertIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Optional configuration to receive alert notifications.
     */
    labelPredicate?: pulumi.Input<inputs.SnoozeRuleScopeBasicScopeFilterLabelPredicate>;
}

export interface SnoozeRuleScopeBasicScopeFilterLabelPredicate {
    /**
     * Labels can be key/value pairs or standalone values.
     */
    labels?: pulumi.Input<pulumi.Input<inputs.SnoozeRuleScopeBasicScopeFilterLabelPredicateLabel>[]>;
    operator?: pulumi.Input<string>;
}

export interface SnoozeRuleScopeBasicScopeFilterLabelPredicateLabel {
    key?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface StreamTimeouts {
    create?: pulumi.Input<string>;
}
