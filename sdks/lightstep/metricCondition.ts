// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MetricCondition extends pulumi.CustomResource {
    /**
     * Get an existing MetricCondition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetricConditionState, opts?: pulumi.CustomResourceOptions): MetricCondition {
        return new MetricCondition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'lightstep:index/metricCondition:MetricCondition';

    /**
     * Returns true if the given object is an instance of MetricCondition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetricCondition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetricCondition.__pulumiType;
    }

    /**
     * Optional configuration to receive alert notifications.
     */
    public readonly alertingRules!: pulumi.Output<outputs.MetricConditionAlertingRule[] | undefined>;
    /**
     * Optional free-form string to include in alert notifications (max length 4096 bytes).
     */
    public readonly customData!: pulumi.Output<string | undefined>;
    /**
     * Optional extended description for the alert (supports Markdown).
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Describes the conditions that trigger the alert.
     */
    public readonly expression!: pulumi.Output<outputs.MetricConditionExpression>;
    /**
     * Optional labels to attach to this alert. Labels can be key/value pairs or standalone values.
     */
    public readonly labels!: pulumi.Output<outputs.MetricConditionLabel[] | undefined>;
    /**
     * Defines the alert query
     */
    public readonly metricQueries!: pulumi.Output<outputs.MetricConditionMetricQuery[]>;
    /**
     * The title of the alert.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the [project](https://docs.lightstep.com/docs/glossary#project) in which to create this alert.
     */
    public readonly projectName!: pulumi.Output<string>;
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a MetricCondition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetricConditionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetricConditionArgs | MetricConditionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetricConditionState | undefined;
            resourceInputs["alertingRules"] = state ? state.alertingRules : undefined;
            resourceInputs["customData"] = state ? state.customData : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["expression"] = state ? state.expression : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["metricQueries"] = state ? state.metricQueries : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as MetricConditionArgs | undefined;
            if ((!args || args.expression === undefined) && !opts.urn) {
                throw new Error("Missing required property 'expression'");
            }
            if ((!args || args.metricQueries === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metricQueries'");
            }
            if ((!args || args.projectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectName'");
            }
            resourceInputs["alertingRules"] = args ? args.alertingRules : undefined;
            resourceInputs["customData"] = args ? args.customData : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["expression"] = args ? args.expression : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["metricQueries"] = args ? args.metricQueries : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MetricCondition.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MetricCondition resources.
 */
export interface MetricConditionState {
    /**
     * Optional configuration to receive alert notifications.
     */
    alertingRules?: pulumi.Input<pulumi.Input<inputs.MetricConditionAlertingRule>[]>;
    /**
     * Optional free-form string to include in alert notifications (max length 4096 bytes).
     */
    customData?: pulumi.Input<string>;
    /**
     * Optional extended description for the alert (supports Markdown).
     */
    description?: pulumi.Input<string>;
    /**
     * Describes the conditions that trigger the alert.
     */
    expression?: pulumi.Input<inputs.MetricConditionExpression>;
    /**
     * Optional labels to attach to this alert. Labels can be key/value pairs or standalone values.
     */
    labels?: pulumi.Input<pulumi.Input<inputs.MetricConditionLabel>[]>;
    /**
     * Defines the alert query
     */
    metricQueries?: pulumi.Input<pulumi.Input<inputs.MetricConditionMetricQuery>[]>;
    /**
     * The title of the alert.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the [project](https://docs.lightstep.com/docs/glossary#project) in which to create this alert.
     */
    projectName?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MetricCondition resource.
 */
export interface MetricConditionArgs {
    /**
     * Optional configuration to receive alert notifications.
     */
    alertingRules?: pulumi.Input<pulumi.Input<inputs.MetricConditionAlertingRule>[]>;
    /**
     * Optional free-form string to include in alert notifications (max length 4096 bytes).
     */
    customData?: pulumi.Input<string>;
    /**
     * Optional extended description for the alert (supports Markdown).
     */
    description?: pulumi.Input<string>;
    /**
     * Describes the conditions that trigger the alert.
     */
    expression: pulumi.Input<inputs.MetricConditionExpression>;
    /**
     * Optional labels to attach to this alert. Labels can be key/value pairs or standalone values.
     */
    labels?: pulumi.Input<pulumi.Input<inputs.MetricConditionLabel>[]>;
    /**
     * Defines the alert query
     */
    metricQueries: pulumi.Input<pulumi.Input<inputs.MetricConditionMetricQuery>[]>;
    /**
     * The title of the alert.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the [project](https://docs.lightstep.com/docs/glossary#project) in which to create this alert.
     */
    projectName: pulumi.Input<string>;
}
