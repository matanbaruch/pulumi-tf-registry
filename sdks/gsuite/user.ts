// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gsuite:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    public /*out*/ readonly 2sEnforced!: pulumi.Output<boolean>;
    public /*out*/ readonly 2sEnrolled!: pulumi.Output<boolean>;
    public /*out*/ readonly agreedToTerms!: pulumi.Output<string>;
    public readonly aliases!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    public readonly customSchemas!: pulumi.Output<outputs.UserCustomSchema[] | undefined>;
    public /*out*/ readonly customerId!: pulumi.Output<string>;
    public readonly deletionTime!: pulumi.Output<string | undefined>;
    public /*out*/ readonly etag!: pulumi.Output<string>;
    public readonly externalIds!: pulumi.Output<outputs.UserExternalId[] | undefined>;
    public readonly hashFunction!: pulumi.Output<string | undefined>;
    public readonly includeInGlobalList!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly isAdmin!: pulumi.Output<boolean>;
    public /*out*/ readonly isDelegatedAdmin!: pulumi.Output<boolean>;
    public readonly isIpWhitelisted!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly isMailboxSetup!: pulumi.Output<boolean>;
    public readonly isSuspended!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly lastLoginTime!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<{[key: string]: string}>;
    public readonly orgUnitPath!: pulumi.Output<string | undefined>;
    public readonly organizations!: pulumi.Output<outputs.UserOrganization[] | undefined>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly posixAccounts!: pulumi.Output<outputs.UserPosixAccount[] | undefined>;
    public readonly primaryEmail!: pulumi.Output<string>;
    public readonly recoveryEmail!: pulumi.Output<string | undefined>;
    public readonly recoveryPhone!: pulumi.Output<string | undefined>;
    public readonly sshPublicKeys!: pulumi.Output<outputs.UserSshPublicKey[] | undefined>;
    public readonly suspensionReason!: pulumi.Output<string | undefined>;
    public readonly updateExisting!: pulumi.Output<boolean | undefined>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["2sEnforced"] = state ? state.2sEnforced : undefined;
            resourceInputs["2sEnrolled"] = state ? state.2sEnrolled : undefined;
            resourceInputs["agreedToTerms"] = state ? state.agreedToTerms : undefined;
            resourceInputs["aliases"] = state ? state.aliases : undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["customSchemas"] = state ? state.customSchemas : undefined;
            resourceInputs["customerId"] = state ? state.customerId : undefined;
            resourceInputs["deletionTime"] = state ? state.deletionTime : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["externalIds"] = state ? state.externalIds : undefined;
            resourceInputs["hashFunction"] = state ? state.hashFunction : undefined;
            resourceInputs["includeInGlobalList"] = state ? state.includeInGlobalList : undefined;
            resourceInputs["isAdmin"] = state ? state.isAdmin : undefined;
            resourceInputs["isDelegatedAdmin"] = state ? state.isDelegatedAdmin : undefined;
            resourceInputs["isIpWhitelisted"] = state ? state.isIpWhitelisted : undefined;
            resourceInputs["isMailboxSetup"] = state ? state.isMailboxSetup : undefined;
            resourceInputs["isSuspended"] = state ? state.isSuspended : undefined;
            resourceInputs["lastLoginTime"] = state ? state.lastLoginTime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgUnitPath"] = state ? state.orgUnitPath : undefined;
            resourceInputs["organizations"] = state ? state.organizations : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["posixAccounts"] = state ? state.posixAccounts : undefined;
            resourceInputs["primaryEmail"] = state ? state.primaryEmail : undefined;
            resourceInputs["recoveryEmail"] = state ? state.recoveryEmail : undefined;
            resourceInputs["recoveryPhone"] = state ? state.recoveryPhone : undefined;
            resourceInputs["sshPublicKeys"] = state ? state.sshPublicKeys : undefined;
            resourceInputs["suspensionReason"] = state ? state.suspensionReason : undefined;
            resourceInputs["updateExisting"] = state ? state.updateExisting : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.primaryEmail === undefined) && !opts.urn) {
                throw new Error("Missing required property 'primaryEmail'");
            }
            resourceInputs["aliases"] = args ? args.aliases : undefined;
            resourceInputs["customSchemas"] = args ? args.customSchemas : undefined;
            resourceInputs["deletionTime"] = args ? args.deletionTime : undefined;
            resourceInputs["externalIds"] = args ? args.externalIds : undefined;
            resourceInputs["hashFunction"] = args ? args.hashFunction : undefined;
            resourceInputs["includeInGlobalList"] = args ? args.includeInGlobalList : undefined;
            resourceInputs["isIpWhitelisted"] = args ? args.isIpWhitelisted : undefined;
            resourceInputs["isSuspended"] = args ? args.isSuspended : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgUnitPath"] = args ? args.orgUnitPath : undefined;
            resourceInputs["organizations"] = args ? args.organizations : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["posixAccounts"] = args ? args.posixAccounts : undefined;
            resourceInputs["primaryEmail"] = args ? args.primaryEmail : undefined;
            resourceInputs["recoveryEmail"] = args ? args.recoveryEmail : undefined;
            resourceInputs["recoveryPhone"] = args ? args.recoveryPhone : undefined;
            resourceInputs["sshPublicKeys"] = args ? args.sshPublicKeys : undefined;
            resourceInputs["suspensionReason"] = args ? args.suspensionReason : undefined;
            resourceInputs["updateExisting"] = args ? args.updateExisting : undefined;
            resourceInputs["2sEnforced"] = undefined /*out*/;
            resourceInputs["2sEnrolled"] = undefined /*out*/;
            resourceInputs["agreedToTerms"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["customerId"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["isAdmin"] = undefined /*out*/;
            resourceInputs["isDelegatedAdmin"] = undefined /*out*/;
            resourceInputs["isMailboxSetup"] = undefined /*out*/;
            resourceInputs["lastLoginTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(User.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    2sEnforced?: pulumi.Input<boolean>;
    2sEnrolled?: pulumi.Input<boolean>;
    agreedToTerms?: pulumi.Input<string>;
    aliases?: pulumi.Input<pulumi.Input<string>[]>;
    creationTime?: pulumi.Input<string>;
    customSchemas?: pulumi.Input<pulumi.Input<inputs.UserCustomSchema>[]>;
    customerId?: pulumi.Input<string>;
    deletionTime?: pulumi.Input<string>;
    etag?: pulumi.Input<string>;
    externalIds?: pulumi.Input<pulumi.Input<inputs.UserExternalId>[]>;
    hashFunction?: pulumi.Input<string>;
    includeInGlobalList?: pulumi.Input<boolean>;
    isAdmin?: pulumi.Input<boolean>;
    isDelegatedAdmin?: pulumi.Input<boolean>;
    isIpWhitelisted?: pulumi.Input<boolean>;
    isMailboxSetup?: pulumi.Input<boolean>;
    isSuspended?: pulumi.Input<boolean>;
    lastLoginTime?: pulumi.Input<string>;
    name?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    orgUnitPath?: pulumi.Input<string>;
    organizations?: pulumi.Input<pulumi.Input<inputs.UserOrganization>[]>;
    password?: pulumi.Input<string>;
    posixAccounts?: pulumi.Input<pulumi.Input<inputs.UserPosixAccount>[]>;
    primaryEmail?: pulumi.Input<string>;
    recoveryEmail?: pulumi.Input<string>;
    recoveryPhone?: pulumi.Input<string>;
    sshPublicKeys?: pulumi.Input<pulumi.Input<inputs.UserSshPublicKey>[]>;
    suspensionReason?: pulumi.Input<string>;
    updateExisting?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    aliases?: pulumi.Input<pulumi.Input<string>[]>;
    customSchemas?: pulumi.Input<pulumi.Input<inputs.UserCustomSchema>[]>;
    deletionTime?: pulumi.Input<string>;
    externalIds?: pulumi.Input<pulumi.Input<inputs.UserExternalId>[]>;
    hashFunction?: pulumi.Input<string>;
    includeInGlobalList?: pulumi.Input<boolean>;
    isIpWhitelisted?: pulumi.Input<boolean>;
    isSuspended?: pulumi.Input<boolean>;
    name: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    orgUnitPath?: pulumi.Input<string>;
    organizations?: pulumi.Input<pulumi.Input<inputs.UserOrganization>[]>;
    password?: pulumi.Input<string>;
    posixAccounts?: pulumi.Input<pulumi.Input<inputs.UserPosixAccount>[]>;
    primaryEmail: pulumi.Input<string>;
    recoveryEmail?: pulumi.Input<string>;
    recoveryPhone?: pulumi.Input<string>;
    sshPublicKeys?: pulumi.Input<pulumi.Input<inputs.UserSshPublicKey>[]>;
    suspensionReason?: pulumi.Input<string>;
    updateExisting?: pulumi.Input<boolean>;
}
