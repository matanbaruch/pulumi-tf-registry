// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getGroupSettings(args: GetGroupSettingsArgs, opts?: pulumi.InvokeOptions): Promise<GetGroupSettingsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gsuite:index/getGroupSettings:getGroupSettings", {
        "email": args.email,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getGroupSettings.
 */
export interface GetGroupSettingsArgs {
    email: string;
    id?: string;
}

/**
 * A collection of values returned by getGroupSettings.
 */
export interface GetGroupSettingsResult {
    readonly allowExternalMembers: string;
    readonly allowGoogleCommunication: string;
    readonly allowWebPosting: string;
    readonly archiveOnly: string;
    readonly customFooterText: string;
    readonly customReplyTo: string;
    readonly description: string;
    readonly email: string;
    readonly favoriteRepliesOnTop: string;
    readonly id: string;
    readonly includeCustomFooter: string;
    readonly includeInGlobalAddressList: string;
    readonly isArchived: string;
    readonly kind: string;
    readonly maxMessageBytes: number;
    readonly membersCanPostAsTheGroup: string;
    readonly messageDisplayFont: string;
    readonly messageModerationLevel: string;
    readonly name: string;
    readonly primaryLanguage: string;
    readonly replyTo: string;
    readonly sendMessageDenyNotification: string;
    readonly showInGroupDirectory: string;
    readonly spamModerationLevel: string;
    readonly whoCanAdd: string;
    readonly whoCanAddReferences: string;
    readonly whoCanApproveMembers: string;
    readonly whoCanApproveMessages: string;
    readonly whoCanAssignTopics: string;
    readonly whoCanAssistContent: string;
    readonly whoCanBanUsers: string;
    readonly whoCanContactOwner: string;
    readonly whoCanDeleteAnyPost: string;
    readonly whoCanDeleteTopics: string;
    readonly whoCanDiscoverGroup: string;
    readonly whoCanEnterFreeFormTags: string;
    readonly whoCanHideAbuse: string;
    readonly whoCanInvite: string;
    readonly whoCanJoin: string;
    readonly whoCanLeaveGroup: string;
    readonly whoCanLockTopics: string;
    readonly whoCanMakeTopicsSticky: string;
    readonly whoCanMarkDuplicate: string;
    readonly whoCanMarkFavoriteReplyOnAnyTopic: string;
    readonly whoCanMarkFavoriteReplyOnOwnTopic: string;
    readonly whoCanMarkNoResponseNeeded: string;
    readonly whoCanModerateContent: string;
    readonly whoCanModerateMembers: string;
    readonly whoCanModifyMembers: string;
    readonly whoCanModifyTagsAndCategories: string;
    readonly whoCanMoveTopicsIn: string;
    readonly whoCanMoveTopicsOut: string;
    readonly whoCanPostAnnouncements: string;
    readonly whoCanPostMessage: string;
    readonly whoCanTakeTopics: string;
    readonly whoCanUnassignTopic: string;
    readonly whoCanUnmarkFavoriteReplyOnAnyTopic: string;
    readonly whoCanViewGroup: string;
    readonly whoCanViewMembership: string;
}
export function getGroupSettingsOutput(args: GetGroupSettingsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGroupSettingsResult> {
    return pulumi.output(args).apply((a: any) => getGroupSettings(a, opts))
}

/**
 * A collection of arguments for invoking getGroupSettings.
 */
export interface GetGroupSettingsOutputArgs {
    email: pulumi.Input<string>;
    id?: pulumi.Input<string>;
}
