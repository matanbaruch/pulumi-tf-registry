// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DomainArgs, DomainState } from "./domain";
export type Domain = import("./domain").Domain;
export const Domain: typeof import("./domain").Domain = null as any;
utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetGroupSettingsArgs, GetGroupSettingsResult, GetGroupSettingsOutputArgs } from "./getGroupSettings";
export const getGroupSettings: typeof import("./getGroupSettings").getGroupSettings = null as any;
export const getGroupSettingsOutput: typeof import("./getGroupSettings").getGroupSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getGroupSettings","getGroupSettingsOutput"], () => require("./getGroupSettings"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUserAttributesArgs, GetUserAttributesResult, GetUserAttributesOutputArgs } from "./getUserAttributes";
export const getUserAttributes: typeof import("./getUserAttributes").getUserAttributes = null as any;
export const getUserAttributesOutput: typeof import("./getUserAttributes").getUserAttributesOutput = null as any;
utilities.lazyLoad(exports, ["getUserAttributes","getUserAttributesOutput"], () => require("./getUserAttributes"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupMemberArgs, GroupMemberState } from "./groupMember";
export type GroupMember = import("./groupMember").GroupMember;
export const GroupMember: typeof import("./groupMember").GroupMember = null as any;
utilities.lazyLoad(exports, ["GroupMember"], () => require("./groupMember"));

export { GroupMembersArgs, GroupMembersState } from "./groupMembers";
export type GroupMembers = import("./groupMembers").GroupMembers;
export const GroupMembers: typeof import("./groupMembers").GroupMembers = null as any;
utilities.lazyLoad(exports, ["GroupMembers"], () => require("./groupMembers"));

export { GroupSettingsArgs, GroupSettingsState } from "./groupSettings";
export type GroupSettings = import("./groupSettings").GroupSettings;
export const GroupSettings: typeof import("./groupSettings").GroupSettings = null as any;
utilities.lazyLoad(exports, ["GroupSettings"], () => require("./groupSettings"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserAttributesArgs, UserAttributesState } from "./userAttributes";
export type UserAttributes = import("./userAttributes").UserAttributes;
export const UserAttributes: typeof import("./userAttributes").UserAttributes = null as any;
utilities.lazyLoad(exports, ["UserAttributes"], () => require("./userAttributes"));

export { UserSchemaArgs, UserSchemaState } from "./userSchema";
export type UserSchema = import("./userSchema").UserSchema;
export const UserSchema: typeof import("./userSchema").UserSchema = null as any;
utilities.lazyLoad(exports, ["UserSchema"], () => require("./userSchema"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gsuite:index/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "gsuite:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "gsuite:index/groupMember:GroupMember":
                return new GroupMember(name, <any>undefined, { urn })
            case "gsuite:index/groupMembers:GroupMembers":
                return new GroupMembers(name, <any>undefined, { urn })
            case "gsuite:index/groupSettings:GroupSettings":
                return new GroupSettings(name, <any>undefined, { urn })
            case "gsuite:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "gsuite:index/userAttributes:UserAttributes":
                return new UserAttributes(name, <any>undefined, { urn })
            case "gsuite:index/userSchema:UserSchema":
                return new UserSchema(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gsuite", "index/domain", _module)
pulumi.runtime.registerResourceModule("gsuite", "index/group", _module)
pulumi.runtime.registerResourceModule("gsuite", "index/groupMember", _module)
pulumi.runtime.registerResourceModule("gsuite", "index/groupMembers", _module)
pulumi.runtime.registerResourceModule("gsuite", "index/groupSettings", _module)
pulumi.runtime.registerResourceModule("gsuite", "index/user", _module)
pulumi.runtime.registerResourceModule("gsuite", "index/userAttributes", _module)
pulumi.runtime.registerResourceModule("gsuite", "index/userSchema", _module)
pulumi.runtime.registerResourcePackage("gsuite", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:gsuite") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
