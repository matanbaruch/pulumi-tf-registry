// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getUser(args: GetUserArgs, opts?: pulumi.InvokeOptions): Promise<GetUserResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gsuite:index/getUser:getUser", {
        "id": args.id,
        "primaryEmail": args.primaryEmail,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserArgs {
    id?: string;
    primaryEmail: string;
}

/**
 * A collection of values returned by getUser.
 */
export interface GetUserResult {
    readonly 2sEnforced: boolean;
    readonly 2sEnrolled: boolean;
    readonly agreedToTerms: string;
    readonly aliases: string[];
    readonly changePasswordNextLogin: boolean;
    readonly creationTime: string;
    readonly customSchemas: outputs.GetUserCustomSchema[];
    readonly customerId: string;
    readonly deletionTime: string;
    readonly etag: string;
    readonly externalIds: outputs.GetUserExternalId[];
    readonly hashFunction: string;
    readonly id: string;
    readonly includeInGlobalList: boolean;
    readonly isAdmin: boolean;
    readonly isDelegatedAdmin: boolean;
    readonly isIpWhitelisted: boolean;
    readonly isMailboxSetup: boolean;
    readonly isSuspended: boolean;
    readonly lastLoginTime: string;
    readonly name: {[key: string]: string};
    readonly orgUnitPath: string;
    readonly organizations: outputs.GetUserOrganization[];
    readonly password: string;
    readonly posixAccounts: outputs.GetUserPosixAccount[];
    readonly primaryEmail: string;
    readonly recoveryEmail: string;
    readonly recoveryPhone: string;
    readonly sshPublicKeys: outputs.GetUserSshPublicKey[];
    readonly suspensionReason: string;
}
export function getUserOutput(args: GetUserOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUserResult> {
    return pulumi.output(args).apply((a: any) => getUser(a, opts))
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserOutputArgs {
    id?: pulumi.Input<string>;
    primaryEmail: pulumi.Input<string>;
}
