// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ProtectionDomain extends pulumi.CustomResource {
    /**
     * Get an existing ProtectionDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProtectionDomainState, opts?: pulumi.CustomResourceOptions): ProtectionDomain {
        return new ProtectionDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerflex:index/protectionDomain:ProtectionDomain';

    /**
     * Returns true if the given object is an instance of ProtectionDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProtectionDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProtectionDomain.__pulumiType;
    }

    /**
     * Whether the PD should be in `Active` state. Default value is `true`.
     */
    public readonly active!: pulumi.Output<boolean>;
    /**
     * Fine Granularity Metadata Cache size. Can be set only when `fgl_metadata_cache_enabled` is set to `true`.
     */
    public readonly fglDefaultMetadataCacheSize!: pulumi.Output<number>;
    /**
     * Fine Granularity default number of concurrent writes.
     */
    public /*out*/ readonly fglDefaultNumConcurrentWrites!: pulumi.Output<number>;
    /**
     * Whether Fine Granularity Metadata Cache is enabled or not.
     */
    public readonly fglMetadataCacheEnabled!: pulumi.Output<boolean>;
    /**
     * Underlying REST API links.
     */
    public /*out*/ readonly links!: pulumi.Output<outputs.ProtectionDomainLink[]>;
    /**
     * Unique name of the protection domain instance.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Maximum allowed IO for protected maintenance mode in KBps. Must be greater than any other network throttling parameter.
     * The value `0` represents unlimited bandwidth. The default value is `0`.
     */
    public readonly overallIoNetworkThrottlingInKbps!: pulumi.Output<number>;
    /**
     * Maximum allowed IO for protected maintenance mode in KBps. The value `0` represents unlimited bandwidth. The default
     * value is `0`.
     */
    public readonly protectedMaintenanceModeNetworkThrottlingInKbps!: pulumi.Output<number>;
    /**
     * Maximum allowed IO for rebalancing in KBps. The value `0` represents unlimited bandwidth. The default value is `0`.
     */
    public readonly rebalanceNetworkThrottlingInKbps!: pulumi.Output<number>;
    /**
     * Maximum allowed IO for rebuilding in KBps. The value `0` represents unlimited bandwidth. The default value is `0`.
     */
    public readonly rebuildNetworkThrottlingInKbps!: pulumi.Output<number>;
    /**
     * Maximum Replication Capacity Ratio.
     */
    public /*out*/ readonly replicationCapacityMaxRatio!: pulumi.Output<number>;
    /**
     * ID of the RF Cache Acceleration Pool attached to the PD.
     */
    public /*out*/ readonly rfCacheAccpId!: pulumi.Output<string>;
    /**
     * Whether SDS Rf Cache is enabled or not. Default value is `true`.
     */
    public readonly rfCacheEnabled!: pulumi.Output<boolean>;
    /**
     * Maximum IO of the SDS RF Cache in KB. Can be set only when `rf_cache_enabled` is set to `true`.
     */
    public readonly rfCacheMaxIoSizeKb!: pulumi.Output<number>;
    /**
     * Operational Mode of the SDS RF Cache. Accepted values are `Read`, `Write`, `ReadAndWrite` and `WriteMiss`. Can be set
     * only when `rf_cache_enabled` is set to `true`.
     */
    public readonly rfCacheOperationalMode!: pulumi.Output<string>;
    /**
     * Page size of the SDS RF Cache in KB. Can be set only when `rf_cache_enabled` is set to `true`.
     */
    public readonly rfCachePageSizeKb!: pulumi.Output<number>;
    /**
     * State of the PD.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Maximum allowed IO for vtree migration in KBps. The value `0` represents unlimited bandwidth. The default value is `0`.
     */
    public readonly vtreeMigrationNetworkThrottlingInKbps!: pulumi.Output<number>;

    /**
     * Create a ProtectionDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProtectionDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProtectionDomainArgs | ProtectionDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProtectionDomainState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["fglDefaultMetadataCacheSize"] = state ? state.fglDefaultMetadataCacheSize : undefined;
            resourceInputs["fglDefaultNumConcurrentWrites"] = state ? state.fglDefaultNumConcurrentWrites : undefined;
            resourceInputs["fglMetadataCacheEnabled"] = state ? state.fglMetadataCacheEnabled : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["overallIoNetworkThrottlingInKbps"] = state ? state.overallIoNetworkThrottlingInKbps : undefined;
            resourceInputs["protectedMaintenanceModeNetworkThrottlingInKbps"] = state ? state.protectedMaintenanceModeNetworkThrottlingInKbps : undefined;
            resourceInputs["rebalanceNetworkThrottlingInKbps"] = state ? state.rebalanceNetworkThrottlingInKbps : undefined;
            resourceInputs["rebuildNetworkThrottlingInKbps"] = state ? state.rebuildNetworkThrottlingInKbps : undefined;
            resourceInputs["replicationCapacityMaxRatio"] = state ? state.replicationCapacityMaxRatio : undefined;
            resourceInputs["rfCacheAccpId"] = state ? state.rfCacheAccpId : undefined;
            resourceInputs["rfCacheEnabled"] = state ? state.rfCacheEnabled : undefined;
            resourceInputs["rfCacheMaxIoSizeKb"] = state ? state.rfCacheMaxIoSizeKb : undefined;
            resourceInputs["rfCacheOperationalMode"] = state ? state.rfCacheOperationalMode : undefined;
            resourceInputs["rfCachePageSizeKb"] = state ? state.rfCachePageSizeKb : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["vtreeMigrationNetworkThrottlingInKbps"] = state ? state.vtreeMigrationNetworkThrottlingInKbps : undefined;
        } else {
            const args = argsOrState as ProtectionDomainArgs | undefined;
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["fglDefaultMetadataCacheSize"] = args ? args.fglDefaultMetadataCacheSize : undefined;
            resourceInputs["fglMetadataCacheEnabled"] = args ? args.fglMetadataCacheEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["overallIoNetworkThrottlingInKbps"] = args ? args.overallIoNetworkThrottlingInKbps : undefined;
            resourceInputs["protectedMaintenanceModeNetworkThrottlingInKbps"] = args ? args.protectedMaintenanceModeNetworkThrottlingInKbps : undefined;
            resourceInputs["rebalanceNetworkThrottlingInKbps"] = args ? args.rebalanceNetworkThrottlingInKbps : undefined;
            resourceInputs["rebuildNetworkThrottlingInKbps"] = args ? args.rebuildNetworkThrottlingInKbps : undefined;
            resourceInputs["rfCacheEnabled"] = args ? args.rfCacheEnabled : undefined;
            resourceInputs["rfCacheMaxIoSizeKb"] = args ? args.rfCacheMaxIoSizeKb : undefined;
            resourceInputs["rfCacheOperationalMode"] = args ? args.rfCacheOperationalMode : undefined;
            resourceInputs["rfCachePageSizeKb"] = args ? args.rfCachePageSizeKb : undefined;
            resourceInputs["vtreeMigrationNetworkThrottlingInKbps"] = args ? args.vtreeMigrationNetworkThrottlingInKbps : undefined;
            resourceInputs["fglDefaultNumConcurrentWrites"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["replicationCapacityMaxRatio"] = undefined /*out*/;
            resourceInputs["rfCacheAccpId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProtectionDomain.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ProtectionDomain resources.
 */
export interface ProtectionDomainState {
    /**
     * Whether the PD should be in `Active` state. Default value is `true`.
     */
    active?: pulumi.Input<boolean>;
    /**
     * Fine Granularity Metadata Cache size. Can be set only when `fgl_metadata_cache_enabled` is set to `true`.
     */
    fglDefaultMetadataCacheSize?: pulumi.Input<number>;
    /**
     * Fine Granularity default number of concurrent writes.
     */
    fglDefaultNumConcurrentWrites?: pulumi.Input<number>;
    /**
     * Whether Fine Granularity Metadata Cache is enabled or not.
     */
    fglMetadataCacheEnabled?: pulumi.Input<boolean>;
    /**
     * Underlying REST API links.
     */
    links?: pulumi.Input<pulumi.Input<inputs.ProtectionDomainLink>[]>;
    /**
     * Unique name of the protection domain instance.
     */
    name?: pulumi.Input<string>;
    /**
     * Maximum allowed IO for protected maintenance mode in KBps. Must be greater than any other network throttling parameter.
     * The value `0` represents unlimited bandwidth. The default value is `0`.
     */
    overallIoNetworkThrottlingInKbps?: pulumi.Input<number>;
    /**
     * Maximum allowed IO for protected maintenance mode in KBps. The value `0` represents unlimited bandwidth. The default
     * value is `0`.
     */
    protectedMaintenanceModeNetworkThrottlingInKbps?: pulumi.Input<number>;
    /**
     * Maximum allowed IO for rebalancing in KBps. The value `0` represents unlimited bandwidth. The default value is `0`.
     */
    rebalanceNetworkThrottlingInKbps?: pulumi.Input<number>;
    /**
     * Maximum allowed IO for rebuilding in KBps. The value `0` represents unlimited bandwidth. The default value is `0`.
     */
    rebuildNetworkThrottlingInKbps?: pulumi.Input<number>;
    /**
     * Maximum Replication Capacity Ratio.
     */
    replicationCapacityMaxRatio?: pulumi.Input<number>;
    /**
     * ID of the RF Cache Acceleration Pool attached to the PD.
     */
    rfCacheAccpId?: pulumi.Input<string>;
    /**
     * Whether SDS Rf Cache is enabled or not. Default value is `true`.
     */
    rfCacheEnabled?: pulumi.Input<boolean>;
    /**
     * Maximum IO of the SDS RF Cache in KB. Can be set only when `rf_cache_enabled` is set to `true`.
     */
    rfCacheMaxIoSizeKb?: pulumi.Input<number>;
    /**
     * Operational Mode of the SDS RF Cache. Accepted values are `Read`, `Write`, `ReadAndWrite` and `WriteMiss`. Can be set
     * only when `rf_cache_enabled` is set to `true`.
     */
    rfCacheOperationalMode?: pulumi.Input<string>;
    /**
     * Page size of the SDS RF Cache in KB. Can be set only when `rf_cache_enabled` is set to `true`.
     */
    rfCachePageSizeKb?: pulumi.Input<number>;
    /**
     * State of the PD.
     */
    state?: pulumi.Input<string>;
    /**
     * Maximum allowed IO for vtree migration in KBps. The value `0` represents unlimited bandwidth. The default value is `0`.
     */
    vtreeMigrationNetworkThrottlingInKbps?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ProtectionDomain resource.
 */
export interface ProtectionDomainArgs {
    /**
     * Whether the PD should be in `Active` state. Default value is `true`.
     */
    active?: pulumi.Input<boolean>;
    /**
     * Fine Granularity Metadata Cache size. Can be set only when `fgl_metadata_cache_enabled` is set to `true`.
     */
    fglDefaultMetadataCacheSize?: pulumi.Input<number>;
    /**
     * Whether Fine Granularity Metadata Cache is enabled or not.
     */
    fglMetadataCacheEnabled?: pulumi.Input<boolean>;
    /**
     * Unique name of the protection domain instance.
     */
    name?: pulumi.Input<string>;
    /**
     * Maximum allowed IO for protected maintenance mode in KBps. Must be greater than any other network throttling parameter.
     * The value `0` represents unlimited bandwidth. The default value is `0`.
     */
    overallIoNetworkThrottlingInKbps?: pulumi.Input<number>;
    /**
     * Maximum allowed IO for protected maintenance mode in KBps. The value `0` represents unlimited bandwidth. The default
     * value is `0`.
     */
    protectedMaintenanceModeNetworkThrottlingInKbps?: pulumi.Input<number>;
    /**
     * Maximum allowed IO for rebalancing in KBps. The value `0` represents unlimited bandwidth. The default value is `0`.
     */
    rebalanceNetworkThrottlingInKbps?: pulumi.Input<number>;
    /**
     * Maximum allowed IO for rebuilding in KBps. The value `0` represents unlimited bandwidth. The default value is `0`.
     */
    rebuildNetworkThrottlingInKbps?: pulumi.Input<number>;
    /**
     * Whether SDS Rf Cache is enabled or not. Default value is `true`.
     */
    rfCacheEnabled?: pulumi.Input<boolean>;
    /**
     * Maximum IO of the SDS RF Cache in KB. Can be set only when `rf_cache_enabled` is set to `true`.
     */
    rfCacheMaxIoSizeKb?: pulumi.Input<number>;
    /**
     * Operational Mode of the SDS RF Cache. Accepted values are `Read`, `Write`, `ReadAndWrite` and `WriteMiss`. Can be set
     * only when `rf_cache_enabled` is set to `true`.
     */
    rfCacheOperationalMode?: pulumi.Input<string>;
    /**
     * Page size of the SDS RF Cache in KB. Can be set only when `rf_cache_enabled` is set to `true`.
     */
    rfCachePageSizeKb?: pulumi.Input<number>;
    /**
     * Maximum allowed IO for vtree migration in KBps. The value `0` represents unlimited bandwidth. The default value is `0`.
     */
    vtreeMigrationNetworkThrottlingInKbps?: pulumi.Input<number>;
}
