// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ResourceGroup extends pulumi.CustomResource {
    /**
     * Get an existing ResourceGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceGroupState, opts?: pulumi.CustomResourceOptions): ResourceGroup {
        return new ResourceGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerflex:index/resourceGroup:ResourceGroup';

    /**
     * Returns true if the given object is an instance of ResourceGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourceGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceGroup.__pulumiType;
    }

    /**
     * Resource to Duplicate From Host
     */
    public readonly cloneFromHost!: pulumi.Output<string | undefined>;
    /**
     * Deployment Compliant Status
     */
    public /*out*/ readonly compliant!: pulumi.Output<boolean>;
    /**
     * Deployment Description
     */
    public readonly deploymentDescription!: pulumi.Output<string>;
    /**
     * Deployment Name
     */
    public readonly deploymentName!: pulumi.Output<string>;
    /**
     * Deployment Timeout, It should be in multiples of 5
     */
    public readonly deploymentTimeout!: pulumi.Output<number>;
    /**
     * Firmware ID
     */
    public readonly firmwareId!: pulumi.Output<string>;
    /**
     * Number of Nodes
     */
    public readonly nodes!: pulumi.Output<number>;
    /**
     * After Delete the Service, Servers in inventory `Keep` or `Remove`. Default value is `Keep`
     */
    public readonly serversInInventory!: pulumi.Output<string>;
    /**
     * After Delete the Service, Servers's state `Managed` or `Unmanaged`. Default value is `Unmanaged`.
     */
    public readonly serversManagedState!: pulumi.Output<string>;
    /**
     * Deployment Status
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Published Template ID
     */
    public readonly templateId!: pulumi.Output<string>;
    /**
     * Service Template Name
     */
    public /*out*/ readonly templateName!: pulumi.Output<string>;

    /**
     * Create a ResourceGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceGroupArgs | ResourceGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceGroupState | undefined;
            resourceInputs["cloneFromHost"] = state ? state.cloneFromHost : undefined;
            resourceInputs["compliant"] = state ? state.compliant : undefined;
            resourceInputs["deploymentDescription"] = state ? state.deploymentDescription : undefined;
            resourceInputs["deploymentName"] = state ? state.deploymentName : undefined;
            resourceInputs["deploymentTimeout"] = state ? state.deploymentTimeout : undefined;
            resourceInputs["firmwareId"] = state ? state.firmwareId : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["serversInInventory"] = state ? state.serversInInventory : undefined;
            resourceInputs["serversManagedState"] = state ? state.serversManagedState : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["templateId"] = state ? state.templateId : undefined;
            resourceInputs["templateName"] = state ? state.templateName : undefined;
        } else {
            const args = argsOrState as ResourceGroupArgs | undefined;
            if ((!args || args.deploymentDescription === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deploymentDescription'");
            }
            if ((!args || args.deploymentName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deploymentName'");
            }
            if ((!args || args.firmwareId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'firmwareId'");
            }
            if ((!args || args.templateId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateId'");
            }
            resourceInputs["cloneFromHost"] = args ? args.cloneFromHost : undefined;
            resourceInputs["deploymentDescription"] = args ? args.deploymentDescription : undefined;
            resourceInputs["deploymentName"] = args ? args.deploymentName : undefined;
            resourceInputs["deploymentTimeout"] = args ? args.deploymentTimeout : undefined;
            resourceInputs["firmwareId"] = args ? args.firmwareId : undefined;
            resourceInputs["nodes"] = args ? args.nodes : undefined;
            resourceInputs["serversInInventory"] = args ? args.serversInInventory : undefined;
            resourceInputs["serversManagedState"] = args ? args.serversManagedState : undefined;
            resourceInputs["templateId"] = args ? args.templateId : undefined;
            resourceInputs["compliant"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["templateName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourceGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ResourceGroup resources.
 */
export interface ResourceGroupState {
    /**
     * Resource to Duplicate From Host
     */
    cloneFromHost?: pulumi.Input<string>;
    /**
     * Deployment Compliant Status
     */
    compliant?: pulumi.Input<boolean>;
    /**
     * Deployment Description
     */
    deploymentDescription?: pulumi.Input<string>;
    /**
     * Deployment Name
     */
    deploymentName?: pulumi.Input<string>;
    /**
     * Deployment Timeout, It should be in multiples of 5
     */
    deploymentTimeout?: pulumi.Input<number>;
    /**
     * Firmware ID
     */
    firmwareId?: pulumi.Input<string>;
    /**
     * Number of Nodes
     */
    nodes?: pulumi.Input<number>;
    /**
     * After Delete the Service, Servers in inventory `Keep` or `Remove`. Default value is `Keep`
     */
    serversInInventory?: pulumi.Input<string>;
    /**
     * After Delete the Service, Servers's state `Managed` or `Unmanaged`. Default value is `Unmanaged`.
     */
    serversManagedState?: pulumi.Input<string>;
    /**
     * Deployment Status
     */
    status?: pulumi.Input<string>;
    /**
     * Published Template ID
     */
    templateId?: pulumi.Input<string>;
    /**
     * Service Template Name
     */
    templateName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ResourceGroup resource.
 */
export interface ResourceGroupArgs {
    /**
     * Resource to Duplicate From Host
     */
    cloneFromHost?: pulumi.Input<string>;
    /**
     * Deployment Description
     */
    deploymentDescription: pulumi.Input<string>;
    /**
     * Deployment Name
     */
    deploymentName: pulumi.Input<string>;
    /**
     * Deployment Timeout, It should be in multiples of 5
     */
    deploymentTimeout?: pulumi.Input<number>;
    /**
     * Firmware ID
     */
    firmwareId: pulumi.Input<string>;
    /**
     * Number of Nodes
     */
    nodes?: pulumi.Input<number>;
    /**
     * After Delete the Service, Servers in inventory `Keep` or `Remove`. Default value is `Keep`
     */
    serversInInventory?: pulumi.Input<string>;
    /**
     * After Delete the Service, Servers's state `Managed` or `Unmanaged`. Default value is `Unmanaged`.
     */
    serversManagedState?: pulumi.Input<string>;
    /**
     * Published Template ID
     */
    templateId: pulumi.Input<string>;
}
