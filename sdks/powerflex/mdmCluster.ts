// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MdmCluster extends pulumi.CustomResource {
    /**
     * Get an existing MdmCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MdmClusterState, opts?: pulumi.CustomResourceOptions): MdmCluster {
        return new MdmCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerflex:index/mdmCluster:MdmCluster';

    /**
     * Returns true if the given object is an instance of MdmCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MdmCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MdmCluster.__pulumiType;
    }

    /**
     * Mode of the MDM cluster. Accepted values are `ThreeNodes` and `FiveNodes`.
     */
    public readonly clusterMode!: pulumi.Output<string>;
    /**
     * Performance profile of the MDM cluster. Accepted values are `Compact` and `HighPerformance`.
     */
    public readonly performanceProfile!: pulumi.Output<string>;
    /**
     * Primary MDM details.
     */
    public readonly primaryMdm!: pulumi.Output<outputs.MdmClusterPrimaryMdm>;
    /**
     * Secondary MDM details.
     */
    public readonly secondaryMdms!: pulumi.Output<outputs.MdmClusterSecondaryMdm[]>;
    /**
     * StandBy MDM details. StandBy MDM can be added/removed/promoted to manager/tiebreaker role.
     */
    public readonly standbyMdms!: pulumi.Output<outputs.MdmClusterStandbyMdm[]>;
    /**
     * TieBreaker MDM details.
     */
    public readonly tiebreakerMdms!: pulumi.Output<outputs.MdmClusterTiebreakerMdm[]>;

    /**
     * Create a MdmCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MdmClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MdmClusterArgs | MdmClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MdmClusterState | undefined;
            resourceInputs["clusterMode"] = state ? state.clusterMode : undefined;
            resourceInputs["performanceProfile"] = state ? state.performanceProfile : undefined;
            resourceInputs["primaryMdm"] = state ? state.primaryMdm : undefined;
            resourceInputs["secondaryMdms"] = state ? state.secondaryMdms : undefined;
            resourceInputs["standbyMdms"] = state ? state.standbyMdms : undefined;
            resourceInputs["tiebreakerMdms"] = state ? state.tiebreakerMdms : undefined;
        } else {
            const args = argsOrState as MdmClusterArgs | undefined;
            if ((!args || args.clusterMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterMode'");
            }
            if ((!args || args.primaryMdm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'primaryMdm'");
            }
            if ((!args || args.secondaryMdms === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secondaryMdms'");
            }
            if ((!args || args.tiebreakerMdms === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tiebreakerMdms'");
            }
            resourceInputs["clusterMode"] = args ? args.clusterMode : undefined;
            resourceInputs["performanceProfile"] = args ? args.performanceProfile : undefined;
            resourceInputs["primaryMdm"] = args ? args.primaryMdm : undefined;
            resourceInputs["secondaryMdms"] = args ? args.secondaryMdms : undefined;
            resourceInputs["standbyMdms"] = args ? args.standbyMdms : undefined;
            resourceInputs["tiebreakerMdms"] = args ? args.tiebreakerMdms : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MdmCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MdmCluster resources.
 */
export interface MdmClusterState {
    /**
     * Mode of the MDM cluster. Accepted values are `ThreeNodes` and `FiveNodes`.
     */
    clusterMode?: pulumi.Input<string>;
    /**
     * Performance profile of the MDM cluster. Accepted values are `Compact` and `HighPerformance`.
     */
    performanceProfile?: pulumi.Input<string>;
    /**
     * Primary MDM details.
     */
    primaryMdm?: pulumi.Input<inputs.MdmClusterPrimaryMdm>;
    /**
     * Secondary MDM details.
     */
    secondaryMdms?: pulumi.Input<pulumi.Input<inputs.MdmClusterSecondaryMdm>[]>;
    /**
     * StandBy MDM details. StandBy MDM can be added/removed/promoted to manager/tiebreaker role.
     */
    standbyMdms?: pulumi.Input<pulumi.Input<inputs.MdmClusterStandbyMdm>[]>;
    /**
     * TieBreaker MDM details.
     */
    tiebreakerMdms?: pulumi.Input<pulumi.Input<inputs.MdmClusterTiebreakerMdm>[]>;
}

/**
 * The set of arguments for constructing a MdmCluster resource.
 */
export interface MdmClusterArgs {
    /**
     * Mode of the MDM cluster. Accepted values are `ThreeNodes` and `FiveNodes`.
     */
    clusterMode: pulumi.Input<string>;
    /**
     * Performance profile of the MDM cluster. Accepted values are `Compact` and `HighPerformance`.
     */
    performanceProfile?: pulumi.Input<string>;
    /**
     * Primary MDM details.
     */
    primaryMdm: pulumi.Input<inputs.MdmClusterPrimaryMdm>;
    /**
     * Secondary MDM details.
     */
    secondaryMdms: pulumi.Input<pulumi.Input<inputs.MdmClusterSecondaryMdm>[]>;
    /**
     * StandBy MDM details. StandBy MDM can be added/removed/promoted to manager/tiebreaker role.
     */
    standbyMdms?: pulumi.Input<pulumi.Input<inputs.MdmClusterStandbyMdm>[]>;
    /**
     * TieBreaker MDM details.
     */
    tiebreakerMdms: pulumi.Input<pulumi.Input<inputs.MdmClusterTiebreakerMdm>[]>;
}
