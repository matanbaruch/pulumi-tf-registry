// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { CompatibilityManagementArgs, CompatibilityManagementState } from "./compatibilityManagement";
export type CompatibilityManagement = import("./compatibilityManagement").CompatibilityManagement;
export const CompatibilityManagement: typeof import("./compatibilityManagement").CompatibilityManagement = null as any;
utilities.lazyLoad(exports, ["CompatibilityManagement"], () => require("./compatibilityManagement"));

export { DeviceArgs, DeviceState } from "./device";
export type Device = import("./device").Device;
export const Device: typeof import("./device").Device = null as any;
utilities.lazyLoad(exports, ["Device"], () => require("./device"));

export { FaultSetArgs, FaultSetState } from "./faultSet";
export type FaultSet = import("./faultSet").FaultSet;
export const FaultSet: typeof import("./faultSet").FaultSet = null as any;
utilities.lazyLoad(exports, ["FaultSet"], () => require("./faultSet"));

export { FirmwareRepositoryArgs, FirmwareRepositoryState } from "./firmwareRepository";
export type FirmwareRepository = import("./firmwareRepository").FirmwareRepository;
export const FirmwareRepository: typeof import("./firmwareRepository").FirmwareRepository = null as any;
utilities.lazyLoad(exports, ["FirmwareRepository"], () => require("./firmwareRepository"));

export { GetCompatibilityManagementArgs, GetCompatibilityManagementResult, GetCompatibilityManagementOutputArgs } from "./getCompatibilityManagement";
export const getCompatibilityManagement: typeof import("./getCompatibilityManagement").getCompatibilityManagement = null as any;
export const getCompatibilityManagementOutput: typeof import("./getCompatibilityManagement").getCompatibilityManagementOutput = null as any;
utilities.lazyLoad(exports, ["getCompatibilityManagement","getCompatibilityManagementOutput"], () => require("./getCompatibilityManagement"));

export { GetComplianceReportResourceGroupArgs, GetComplianceReportResourceGroupResult, GetComplianceReportResourceGroupOutputArgs } from "./getComplianceReportResourceGroup";
export const getComplianceReportResourceGroup: typeof import("./getComplianceReportResourceGroup").getComplianceReportResourceGroup = null as any;
export const getComplianceReportResourceGroupOutput: typeof import("./getComplianceReportResourceGroup").getComplianceReportResourceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getComplianceReportResourceGroup","getComplianceReportResourceGroupOutput"], () => require("./getComplianceReportResourceGroup"));

export { GetDeviceArgs, GetDeviceResult, GetDeviceOutputArgs } from "./getDevice";
export const getDevice: typeof import("./getDevice").getDevice = null as any;
export const getDeviceOutput: typeof import("./getDevice").getDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getDevice","getDeviceOutput"], () => require("./getDevice"));

export { GetFaultSetArgs, GetFaultSetResult, GetFaultSetOutputArgs } from "./getFaultSet";
export const getFaultSet: typeof import("./getFaultSet").getFaultSet = null as any;
export const getFaultSetOutput: typeof import("./getFaultSet").getFaultSetOutput = null as any;
utilities.lazyLoad(exports, ["getFaultSet","getFaultSetOutput"], () => require("./getFaultSet"));

export { GetFirmwareRepositoryArgs, GetFirmwareRepositoryResult, GetFirmwareRepositoryOutputArgs } from "./getFirmwareRepository";
export const getFirmwareRepository: typeof import("./getFirmwareRepository").getFirmwareRepository = null as any;
export const getFirmwareRepositoryOutput: typeof import("./getFirmwareRepository").getFirmwareRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareRepository","getFirmwareRepositoryOutput"], () => require("./getFirmwareRepository"));

export { GetNodeArgs, GetNodeResult, GetNodeOutputArgs } from "./getNode";
export const getNode: typeof import("./getNode").getNode = null as any;
export const getNodeOutput: typeof import("./getNode").getNodeOutput = null as any;
utilities.lazyLoad(exports, ["getNode","getNodeOutput"], () => require("./getNode"));

export { GetOsRepositoryArgs, GetOsRepositoryResult, GetOsRepositoryOutputArgs } from "./getOsRepository";
export const getOsRepository: typeof import("./getOsRepository").getOsRepository = null as any;
export const getOsRepositoryOutput: typeof import("./getOsRepository").getOsRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getOsRepository","getOsRepositoryOutput"], () => require("./getOsRepository"));

export { GetProtectionDomainArgs, GetProtectionDomainResult, GetProtectionDomainOutputArgs } from "./getProtectionDomain";
export const getProtectionDomain: typeof import("./getProtectionDomain").getProtectionDomain = null as any;
export const getProtectionDomainOutput: typeof import("./getProtectionDomain").getProtectionDomainOutput = null as any;
utilities.lazyLoad(exports, ["getProtectionDomain","getProtectionDomainOutput"], () => require("./getProtectionDomain"));

export { GetResourceGroupArgs, GetResourceGroupResult, GetResourceGroupOutputArgs } from "./getResourceGroup";
export const getResourceGroup: typeof import("./getResourceGroup").getResourceGroup = null as any;
export const getResourceGroupOutput: typeof import("./getResourceGroup").getResourceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getResourceGroup","getResourceGroupOutput"], () => require("./getResourceGroup"));

export { GetSdcArgs, GetSdcResult, GetSdcOutputArgs } from "./getSdc";
export const getSdc: typeof import("./getSdc").getSdc = null as any;
export const getSdcOutput: typeof import("./getSdc").getSdcOutput = null as any;
utilities.lazyLoad(exports, ["getSdc","getSdcOutput"], () => require("./getSdc"));

export { GetSdsArgs, GetSdsResult, GetSdsOutputArgs } from "./getSds";
export const getSds: typeof import("./getSds").getSds = null as any;
export const getSdsOutput: typeof import("./getSds").getSdsOutput = null as any;
utilities.lazyLoad(exports, ["getSds","getSdsOutput"], () => require("./getSds"));

export { GetSnapshotPolicyArgs, GetSnapshotPolicyResult, GetSnapshotPolicyOutputArgs } from "./getSnapshotPolicy";
export const getSnapshotPolicy: typeof import("./getSnapshotPolicy").getSnapshotPolicy = null as any;
export const getSnapshotPolicyOutput: typeof import("./getSnapshotPolicy").getSnapshotPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSnapshotPolicy","getSnapshotPolicyOutput"], () => require("./getSnapshotPolicy"));

export { GetStoragePoolArgs, GetStoragePoolResult, GetStoragePoolOutputArgs } from "./getStoragePool";
export const getStoragePool: typeof import("./getStoragePool").getStoragePool = null as any;
export const getStoragePoolOutput: typeof import("./getStoragePool").getStoragePoolOutput = null as any;
utilities.lazyLoad(exports, ["getStoragePool","getStoragePoolOutput"], () => require("./getStoragePool"));

export { GetTemplateArgs, GetTemplateResult, GetTemplateOutputArgs } from "./getTemplate";
export const getTemplate: typeof import("./getTemplate").getTemplate = null as any;
export const getTemplateOutput: typeof import("./getTemplate").getTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getTemplate","getTemplateOutput"], () => require("./getTemplate"));

export { GetVolumeArgs, GetVolumeResult, GetVolumeOutputArgs } from "./getVolume";
export const getVolume: typeof import("./getVolume").getVolume = null as any;
export const getVolumeOutput: typeof import("./getVolume").getVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getVolume","getVolumeOutput"], () => require("./getVolume"));

export { GetVtreeArgs, GetVtreeResult, GetVtreeOutputArgs } from "./getVtree";
export const getVtree: typeof import("./getVtree").getVtree = null as any;
export const getVtreeOutput: typeof import("./getVtree").getVtreeOutput = null as any;
utilities.lazyLoad(exports, ["getVtree","getVtreeOutput"], () => require("./getVtree"));

export { MdmClusterArgs, MdmClusterState } from "./mdmCluster";
export type MdmCluster = import("./mdmCluster").MdmCluster;
export const MdmCluster: typeof import("./mdmCluster").MdmCluster = null as any;
utilities.lazyLoad(exports, ["MdmCluster"], () => require("./mdmCluster"));

export { OsRepositoryArgs, OsRepositoryState } from "./osRepository";
export type OsRepository = import("./osRepository").OsRepository;
export const OsRepository: typeof import("./osRepository").OsRepository = null as any;
utilities.lazyLoad(exports, ["OsRepository"], () => require("./osRepository"));

export { PackageArgs, PackageState } from "./package";
export type Package = import("./package").Package;
export const Package: typeof import("./package").Package = null as any;
utilities.lazyLoad(exports, ["Package"], () => require("./package"));

export { ProtectionDomainArgs, ProtectionDomainState } from "./protectionDomain";
export type ProtectionDomain = import("./protectionDomain").ProtectionDomain;
export const ProtectionDomain: typeof import("./protectionDomain").ProtectionDomain = null as any;
utilities.lazyLoad(exports, ["ProtectionDomain"], () => require("./protectionDomain"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ResourceGroupArgs, ResourceGroupState } from "./resourceGroup";
export type ResourceGroup = import("./resourceGroup").ResourceGroup;
export const ResourceGroup: typeof import("./resourceGroup").ResourceGroup = null as any;
utilities.lazyLoad(exports, ["ResourceGroup"], () => require("./resourceGroup"));

export { SdcHostArgs, SdcHostState } from "./sdcHost";
export type SdcHost = import("./sdcHost").SdcHost;
export const SdcHost: typeof import("./sdcHost").SdcHost = null as any;
utilities.lazyLoad(exports, ["SdcHost"], () => require("./sdcHost"));

export { SdcVolumesMappingArgs, SdcVolumesMappingState } from "./sdcVolumesMapping";
export type SdcVolumesMapping = import("./sdcVolumesMapping").SdcVolumesMapping;
export const SdcVolumesMapping: typeof import("./sdcVolumesMapping").SdcVolumesMapping = null as any;
utilities.lazyLoad(exports, ["SdcVolumesMapping"], () => require("./sdcVolumesMapping"));

export { SdsArgs, SdsState } from "./sds";
export type Sds = import("./sds").Sds;
export const Sds: typeof import("./sds").Sds = null as any;
utilities.lazyLoad(exports, ["Sds"], () => require("./sds"));

export { SnapshotArgs, SnapshotState } from "./snapshot";
export type Snapshot = import("./snapshot").Snapshot;
export const Snapshot: typeof import("./snapshot").Snapshot = null as any;
utilities.lazyLoad(exports, ["Snapshot"], () => require("./snapshot"));

export { SnapshotPolicyArgs, SnapshotPolicyState } from "./snapshotPolicy";
export type SnapshotPolicy = import("./snapshotPolicy").SnapshotPolicy;
export const SnapshotPolicy: typeof import("./snapshotPolicy").SnapshotPolicy = null as any;
utilities.lazyLoad(exports, ["SnapshotPolicy"], () => require("./snapshotPolicy"));

export { StoragePoolArgs, StoragePoolState } from "./storagePool";
export type StoragePool = import("./storagePool").StoragePool;
export const StoragePool: typeof import("./storagePool").StoragePool = null as any;
utilities.lazyLoad(exports, ["StoragePool"], () => require("./storagePool"));

export { SystemArgs, SystemState } from "./system";
export type System = import("./system").System;
export const System: typeof import("./system").System = null as any;
utilities.lazyLoad(exports, ["System"], () => require("./system"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { VolumeArgs, VolumeState } from "./volume";
export type Volume = import("./volume").Volume;
export const Volume: typeof import("./volume").Volume = null as any;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "powerflex:index/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "powerflex:index/compatibilityManagement:CompatibilityManagement":
                return new CompatibilityManagement(name, <any>undefined, { urn })
            case "powerflex:index/device:Device":
                return new Device(name, <any>undefined, { urn })
            case "powerflex:index/faultSet:FaultSet":
                return new FaultSet(name, <any>undefined, { urn })
            case "powerflex:index/firmwareRepository:FirmwareRepository":
                return new FirmwareRepository(name, <any>undefined, { urn })
            case "powerflex:index/mdmCluster:MdmCluster":
                return new MdmCluster(name, <any>undefined, { urn })
            case "powerflex:index/osRepository:OsRepository":
                return new OsRepository(name, <any>undefined, { urn })
            case "powerflex:index/package:Package":
                return new Package(name, <any>undefined, { urn })
            case "powerflex:index/protectionDomain:ProtectionDomain":
                return new ProtectionDomain(name, <any>undefined, { urn })
            case "powerflex:index/resourceGroup:ResourceGroup":
                return new ResourceGroup(name, <any>undefined, { urn })
            case "powerflex:index/sdcHost:SdcHost":
                return new SdcHost(name, <any>undefined, { urn })
            case "powerflex:index/sdcVolumesMapping:SdcVolumesMapping":
                return new SdcVolumesMapping(name, <any>undefined, { urn })
            case "powerflex:index/sds:Sds":
                return new Sds(name, <any>undefined, { urn })
            case "powerflex:index/snapshot:Snapshot":
                return new Snapshot(name, <any>undefined, { urn })
            case "powerflex:index/snapshotPolicy:SnapshotPolicy":
                return new SnapshotPolicy(name, <any>undefined, { urn })
            case "powerflex:index/storagePool:StoragePool":
                return new StoragePool(name, <any>undefined, { urn })
            case "powerflex:index/system:System":
                return new System(name, <any>undefined, { urn })
            case "powerflex:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "powerflex:index/volume:Volume":
                return new Volume(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("powerflex", "index/cluster", _module)
pulumi.runtime.registerResourceModule("powerflex", "index/compatibilityManagement", _module)
pulumi.runtime.registerResourceModule("powerflex", "index/device", _module)
pulumi.runtime.registerResourceModule("powerflex", "index/faultSet", _module)
pulumi.runtime.registerResourceModule("powerflex", "index/firmwareRepository", _module)
pulumi.runtime.registerResourceModule("powerflex", "index/mdmCluster", _module)
pulumi.runtime.registerResourceModule("powerflex", "index/osRepository", _module)
pulumi.runtime.registerResourceModule("powerflex", "index/package", _module)
pulumi.runtime.registerResourceModule("powerflex", "index/protectionDomain", _module)
pulumi.runtime.registerResourceModule("powerflex", "index/resourceGroup", _module)
pulumi.runtime.registerResourceModule("powerflex", "index/sdcHost", _module)
pulumi.runtime.registerResourceModule("powerflex", "index/sdcVolumesMapping", _module)
pulumi.runtime.registerResourceModule("powerflex", "index/sds", _module)
pulumi.runtime.registerResourceModule("powerflex", "index/snapshot", _module)
pulumi.runtime.registerResourceModule("powerflex", "index/snapshotPolicy", _module)
pulumi.runtime.registerResourceModule("powerflex", "index/storagePool", _module)
pulumi.runtime.registerResourceModule("powerflex", "index/system", _module)
pulumi.runtime.registerResourceModule("powerflex", "index/user", _module)
pulumi.runtime.registerResourceModule("powerflex", "index/volume", _module)
pulumi.runtime.registerResourcePackage("powerflex", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:powerflex") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
