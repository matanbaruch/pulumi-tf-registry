// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ClusterCluster {
    /**
     * Fault Set
     */
    faultSet?: string;
    /**
     * Use this field to assign a single IP address for all the MDM IP, MDM Mgmt IP, and SDS All IP. This option is useful when separate networks for data and management are not required.
     */
    ips?: string;
    /**
     * Is Mdm Or Tb
     */
    isMdmOrTb: string;
    /**
     * Is RFCache. The acceptable values are `Yes` and `No`. Default value is `No`.
     */
    isRfcache: string;
    /**
     * Is Sdc. The acceptable values are `Yes` and `No`. Default value is `No`.
     */
    isSdc: string;
    /**
     * Is SDR. The acceptable values are `Yes` and `No`. Default value is `No`.
     */
    isSdr: string;
    /**
     * Is Sds. The acceptable values are `Yes` and `No`. Default value is `No`.
     */
    isSds: string;
    /**
     * MDM IP addresses used to communicate with other PowerFlex components in the storage network. This is required for all MDMs, Tiebreakers and Standbys.Leave this field blank for hosts that are not part of the MDM cluster.
     */
    mdmIps?: string;
    /**
     * This IP address is for the management-only network. The management ip is not required for Tiebreaker MDM, Standby Tiebreaker MDM and any host that is not an MDM.
     */
    mdmMgmtIp?: string;
    /**
     * MDMName
     */
    mdmName?: string;
    /**
     * Operating System
     */
    operatingSystem: string;
    /**
     * Password used to log in to the node.
     */
    password?: string;
    /**
     * Performance Profile For MDM
     */
    perfProfileForMdm?: string;
    /**
     * Performance Profile For SDC
     */
    perfProfileForSdc?: string;
    /**
     * Performance Profile For SDR
     */
    perfProfileForSdr?: string;
    /**
     * Performance Profile For SDS
     */
    perfProfileForSds?: string;
    /**
     * Protection Domain
     */
    protectionDomain?: string;
    /**
     * List of SSD devices to provide RFcache acceleration for Medium Granularity data layout Storage Pools.
     */
    rfCacheSsdDeviceList?: string;
    /**
     * SDC Name
     */
    sdcName?: string;
    /**
     * SDR IP addresses to be used for communication among all nodes (including all three roles)
     */
    sdrAllIps?: string;
    /**
     * The IP addresses through which the SDC communicates with the SDR.
     */
    sdrApplicationIps?: string;
    /**
     * The IP addresses through which the SDR communicates with peer systems SDRs
     */
    sdrExternalIps?: string;
    /**
     * SDR Name
     */
    sdrName?: string;
    /**
     * SDR Port
     */
    sdrPort?: string;
    /**
     * The IP addresses through which the SDR communicates with the MDM for server side control communications.
     */
    sdrStorageIps?: string;
    /**
     * SDS IP addresses to be used for communication among all nodes.
     */
    sdsAllIps?: string;
    /**
     * SDS Name
     */
    sdsName?: string;
    /**
     * Storage devices to be added to an SDS. For more than one device, use a comma separated list, with no spaces.
     */
    sdsStorageDeviceList?: string;
    /**
     * Sets names for devices.
     */
    sdsStorageDeviceNames?: string;
    /**
     * SDS IP addresses to be used for communication among SDS and SDC nodes only.
     */
    sdsToSdcOnlyIps?: string;
    /**
     * SDS IP addresses to be used for communication among SDS nodes. When the replication feature is used, these addresses are also used for SDS-SDR communication.
     */
    sdsToSdsOnlyIps?: string;
    /**
     * Sets Storage Pool names
     */
    storagePoolList?: string;
    /**
     * The value can be either `root` or any non-root user name with appropriate permissions.
     */
    username: string;
    /**
     * The NIC to which the virtual IP addresses are mapped.
     */
    virtualIpNics?: string;
    /**
     * Virtual IPs
     */
    virtualIps?: string;
}

export interface ClusterMdmList {
    /**
     * ID
     */
    id: string;
    /**
     * MDM Node IP
     */
    ip: string;
    /**
     * MDM IP
     */
    mdmIp: string;
    /**
     * MGMTIP
     */
    mgmtIp: string;
    /**
     * Mode
     */
    mode: string;
    /**
     * Name
     */
    name: string;
    /**
     * Role
     */
    role: string;
    /**
     * Virtual IP
     */
    virtualIp: string;
    /**
     * Virtual IPNIC
     */
    virtualIpNic: string;
}

export interface ClusterProtectionDomain {
    /**
     * Name
     */
    name: string;
    /**
     * Storage Pools
     */
    storagePoolLists: outputs.ClusterProtectionDomainStoragePoolList[];
}

export interface ClusterProtectionDomainStoragePoolList {
    /**
     * Compression Method
     */
    compressionMethod: string;
    /**
     * Data Layout
     */
    dataLayout: string;
    /**
     * External Acceleration
     */
    externalAcceleration: string;
    /**
     * Media Type
     */
    mediaType: string;
    /**
     * Name
     */
    name: string;
    /**
     * Replication Journal Capacity Percentage
     */
    replicationJournalCapacityPercentage: number;
    /**
     * Zero Padding
     */
    zeroPadding: string;
}

export interface ClusterSdcList {
    /**
     * GUID
     */
    guid: string;
    /**
     * ID
     */
    id: string;
    /**
     * SDC Node IP
     */
    ip: string;
    /**
     * Name
     */
    name: string;
}

export interface ClusterSdrList {
    /**
     * All IP
     */
    allIps: string;
    /**
     * Application IP
     */
    applicationIps: string;
    /**
     * External IP
     */
    externalIps: string;
    /**
     * ID
     */
    id: string;
    /**
     * SDR Node IP
     */
    ip: string;
    /**
     * Name
     */
    name: string;
    /**
     * Port
     */
    port: number;
    /**
     * Storage IP
     */
    storageIps: string;
}

export interface ClusterSdsList {
    /**
     * All IP
     */
    allIps: string;
    /**
     * Devices
     */
    devices: outputs.ClusterSdsListDevice[];
    /**
     * Fault Set
     */
    faultSet: string;
    /**
     * ID
     */
    id: string;
    /**
     * SDS Node IP
     */
    ip: string;
    /**
     * Name
     */
    name: string;
    /**
     * Protection Domain Name
     */
    protectionDomainId: string;
    /**
     * Protection Domain Name
     */
    protectionDomainName: string;
    /**
     * SDSOnly IP
     */
    sdsOnlyIps: string;
    /**
     * SDSSDCIP
     */
    sdsSdcIps: string;
}

export interface ClusterSdsListDevice {
    /**
     * Max Capacity
     */
    maxCapacityInKb: number;
    /**
     * Name
     */
    name: string;
    /**
     * Path
     */
    path: string;
    /**
     * Storage Pool Name
     */
    storagePool: string;
}

export interface ClusterStoragePool {
    /**
     * Compression Method
     */
    compressionMethod?: string;
    /**
     * Data Layout
     */
    dataLayout?: string;
    /**
     * External Acceleration
     */
    externalAcceleration?: string;
    /**
     * Media Type
     */
    mediaType: string;
    /**
     * Protection Domain
     */
    protectionDomain?: string;
    /**
     * Replication Journal Capacity Percentage
     */
    replicationJournalCapacityPercentage?: string;
    /**
     * Storage Pool
     */
    storagePool?: string;
    /**
     * Zero Padding
     */
    zeroPadding?: string;
}

export interface GetComplianceReportResourceGroupComplianceReport {
    /**
     * The availability status of the device.
     */
    available: boolean;
    /**
     * The update capability of the resource group.
     */
    canUpdate: boolean;
    /**
     * The compliance status of the resource.
     */
    compliant: boolean;
    /**
     * The state of the device.
     */
    deviceState: string;
    /**
     * The type of the device.
     */
    deviceType: string;
    /**
     * The presence of an embedded report.
     */
    embeddedReport: boolean;
    /**
     * The list of firmware compliance report components.
     */
    firmwareComplianceReportComponents: outputs.GetComplianceReportResourceGroupComplianceReportFirmwareComplianceReportComponent[];
    /**
     * The name of the firmware repository.
     */
    firmwareRepositoryName: string;
    /**
     * The hostname of the resource group.
     */
    hostName: string;
    /**
     * The unique identifier of the resource group.
     */
    id: string;
    /**
     * The IP address of the resource.
     */
    ipAddress: string;
    /**
     * The managed state of the device.
     */
    managedState: string;
    /**
     * The model of the device.
     */
    model: string;
    /**
     * The service tag of the resource.
     */
    serviceTag: string;
}

export interface GetComplianceReportResourceGroupComplianceReportFirmwareComplianceReportComponent {
    /**
     * The compliance status of the component.
     */
    compliant: boolean;
    /**
     * The current version of the component.
     */
    currentVersion: outputs.GetComplianceReportResourceGroupComplianceReportFirmwareComplianceReportComponentCurrentVersion;
    /**
     * The unique identifier of the component.
     */
    id: string;
    /**
     * The name of the component.
     */
    name: string;
    /**
     * The operating system of the component.
     */
    operatingSystem: string;
    osCompatible: boolean;
    rpm: boolean;
    software: boolean;
    /**
     * The target version of the component.
     */
    targetVersion: outputs.GetComplianceReportResourceGroupComplianceReportFirmwareComplianceReportComponentTargetVersion;
    /**
     * The vendor of the component.
     */
    vendor: string;
}

export interface GetComplianceReportResourceGroupComplianceReportFirmwareComplianceReportComponentCurrentVersion {
    /**
     * The last update time of the firmware.
     */
    firmwareLastUpdate: string;
    /**
     * The level of the firmware.
     */
    firmwareLevel: string;
    /**
     * The name of the firmware.
     */
    firmwareName: string;
    /**
     * The type of the firmware.
     */
    firmwareType: string;
    /**
     * The version of the firmware.
     */
    firmwareVersion: string;
    /**
     * The unique identifier of the version.
     */
    id: string;
}

export interface GetComplianceReportResourceGroupComplianceReportFirmwareComplianceReportComponentTargetVersion {
    /**
     * The last update time of the firmware.
     */
    firmwareLastUpdate: string;
    /**
     * The level of the firmware.
     */
    firmwareLevel: string;
    /**
     * The name of the firmware.
     */
    firmwareName: string;
    /**
     * The type of the firmware.
     */
    firmwareType: string;
    /**
     * The version of the firmware.
     */
    firmwareVersion: string;
    /**
     * The unique identifier of the version.
     */
    id: string;
}

export interface GetComplianceReportResourceGroupFilter {
    /**
     * Compliant status for resources.
     */
    compliant?: boolean;
    /**
     * List of host names for resources.
     */
    hostNames?: string[];
    /**
     * List of Ip Address for resources.
     */
    ipAddresses?: string[];
    /**
     * List of resource ids.
     */
    resourceIds?: string[];
    /**
     * List of service tags for resources.
     */
    serviceTags?: string[];
}

export interface GetDeviceDeviceModel {
    /**
     * Acceleration Pool_id Of The Device Instance.
     */
    accelerationPoolId: string;
    /**
     * Acceleration Props Of The Device Instance.
     */
    accelerationProps: outputs.GetDeviceDeviceModelAccelerationProps;
    /**
     * Aggregated State Of The Device Instance.
     */
    aggregatedState: string;
    /**
     * Ata Security Active Of The Device Instance.
     */
    ataSecurityActive: boolean;
    /**
     * Auto Detect Media Type Of The Device Instance.
     */
    autoDetectMediaType: string;
    /**
     * Cache Look Ahead Active Of The Device Instance.
     */
    cacheLookAheadActive: boolean;
    /**
     * Capacity Of The Device Instance.
     */
    capacity: number;
    /**
     * Capacity Limit In Kb Of The Device Instance.
     */
    capacityLimitInKb: number;
    /**
     * Device Current Path Name Of The Device Instance.
     */
    deviceCurrentPathName: string;
    /**
     * Device Original Path Name Of The Device Instance.
     */
    deviceOriginalPathName: string;
    /**
     * State Of The Device Instance.
     */
    deviceState: string;
    /**
     * Device Type Of The Device Instance.
     */
    deviceType: string;
    /**
     * Error State Of The Device Instance.
     */
    errorState: string;
    /**
     * External Acceleration Type Of The Device Instance.
     */
    externalAccelerationType: string;
    /**
     * Fgl Nvdimm Metadata Amortization X100 Of The Device Instance.
     */
    fglNvdimmMetadataAmortizationX100: number;
    /**
     * Fgl Nvdimm Write Cache Size Of The Device Instance.
     */
    fglNvdimmWriteCacheSize: number;
    /**
     * Firmware Version Of The Device Instance.
     */
    firmwareVersion: string;
    /**
     * Unique ID Of The Device Instance.
     */
    id: string;
    /**
     * LED Setting Of The Device Instance.
     */
    ledSetting: string;
    /**
     * Underlying REST API links.
     */
    links: outputs.GetDeviceDeviceModelLink[];
    /**
     * Logical Sector Size In Bytes Of The Device Instance.
     */
    logicalSectorSizeInBytes: number;
    /**
     * Long Successful Ios Of The Device Instance.
     */
    longSuccessfulIos: outputs.GetDeviceDeviceModelLongSuccessfulIos;
    /**
     * Max Capacity In Kb Of The Device Instance.
     */
    maxCapacityInKb: number;
    /**
     * Media Failing Of The Device Instance.
     */
    mediaFailing: boolean;
    /**
     * Media Type Of The Device Instance.
     */
    mediaType: string;
    /**
     * Model Name Of The Device Instance.
     */
    modelName: string;
    /**
     * Name Of The Device Instance.
     */
    name: string;
    /**
     * Persistent Checksum State Of The Device Instance.
     */
    persistentChecksumState: string;
    /**
     * Physical Sector Size In Bytes Of The Device Instance.
     */
    physicalSectorSizeInBytes: number;
    /**
     * Raid Controller Serial Number Of The Device Instance.
     */
    raidControllerSerialNumber: string;
    /**
     * Rfcache Error Device Does Not Exist Of The Device Instance.
     */
    rfcacheErrorDeviceDoesNotExist: boolean;
    /**
     * Rfcache Props Of The Device Instance.
     */
    rfcacheProps: outputs.GetDeviceDeviceModelRfcacheProps;
    /**
     * Sds ID Of The Device Instance.
     */
    sdsId: string;
    /**
     * Serial Number Of The Device Instance.
     */
    serialNumber: string;
    /**
     * Slot Number Of The Device Instance.
     */
    slotNumber: string;
    /**
     * Sp Sds Id Of The Device Instance.
     */
    spSdsId: string;
    /**
     * Ssd End Of Life State Of The Device Instance.
     */
    ssdEndOfLifeState: string;
    /**
     * Storage Pool ID Of The Device Instance.
     */
    storagePoolId: string;
    /**
     * Storage Props Of The Device Instance.
     */
    storageProps: outputs.GetDeviceDeviceModelStorageProps;
    /**
     * Temperature State Of The Device Instance.
     */
    temperatureState: string;
    /**
     * Vendor Name Of The Device Instance.
     */
    vendorName: string;
    /**
     * Write Cache Active Of The Device Instance.
     */
    writeCacheActive: boolean;
}

export interface GetDeviceDeviceModelAccelerationProps {
    /**
     * Accelerator(ACC) Used Capacity In KB Acceleration Properties Parameters Of The Device Instance.
     */
    accUsedCapacityInKb: string;
}

export interface GetDeviceDeviceModelLink {
    /**
     * Specifies the exact path to fetch the details.
     */
    href: string;
    /**
     * Specifies the relationship with the Protection Domain.
     */
    rel: string;
}

export interface GetDeviceDeviceModelLongSuccessfulIos {
    /**
     * Long Window Parameters.
     */
    longWindow: outputs.GetDeviceDeviceModelLongSuccessfulIosLongWindow;
    /**
     * Medium Window Parameters.
     */
    mediumWindow: outputs.GetDeviceDeviceModelLongSuccessfulIosMediumWindow;
    /**
     * Short Window Parameters.
     */
    shortWindow: outputs.GetDeviceDeviceModelLongSuccessfulIosShortWindow;
}

export interface GetDeviceDeviceModelLongSuccessfulIosLongWindow {
    /**
     * Last Oscillation Count Window Parameters Of The Device Instance.
     */
    lastOscillationCount: number;
    /**
     * Last Oscillation Time Window Parameters Of The Device Instance.
     */
    lastOscillationTime: number;
    /**
     * Max Failures Count Window Parameters Of The Device Instance.
     */
    maxFailuresCount: number;
    /**
     * Threshold Window Parameters Of The Device Instance.
     */
    threshold: number;
    /**
     * Window Size in seconds Window Parameters Of The Device Instance.
     */
    windowSizeInSec: number;
}

export interface GetDeviceDeviceModelLongSuccessfulIosMediumWindow {
    /**
     * Last Oscillation Count Window Parameters Of The Device Instance.
     */
    lastOscillationCount: number;
    /**
     * Last Oscillation Time Window Parameters Of The Device Instance.
     */
    lastOscillationTime: number;
    /**
     * Max Failures Count Window Parameters Of The Device Instance.
     */
    maxFailuresCount: number;
    /**
     * Threshold Window Parameters Of The Device Instance.
     */
    threshold: number;
    /**
     * Window Size in seconds Window Parameters Of The Device Instance.
     */
    windowSizeInSec: number;
}

export interface GetDeviceDeviceModelLongSuccessfulIosShortWindow {
    /**
     * Last Oscillation Count Window Parameters Of The Device Instance.
     */
    lastOscillationCount: number;
    /**
     * Last Oscillation Time Window Parameters Of The Device Instance.
     */
    lastOscillationTime: number;
    /**
     * Max Failures Count Window Parameters Of The Device Instance.
     */
    maxFailuresCount: number;
    /**
     * Threshold Window Parameters Of The Device Instance.
     */
    threshold: number;
    /**
     * Window Size in seconds Window Parameters Of The Device Instance.
     */
    windowSizeInSec: number;
}

export interface GetDeviceDeviceModelRfcacheProps {
    /**
     * Device UUID RfCache Parameters Of The Device Instance.
     */
    deviceUuid: string;
    /**
     * Rfcache Error Card Io error RfCache Parameters Of The Device Instance.
     */
    rfcacheErrorCardIoError: boolean;
    /**
     * rfcache_error_heavy_load_cache_skip RfCache Parameters Of The Device Instance.
     */
    rfcacheErrorHeavyLoadCacheSkip: boolean;
    /**
     * Rfcache Error Stuck Io RfCache Parameters Of The Device Instance.
     */
    rfcacheErrorStuckIo: boolean;
}

export interface GetDeviceDeviceModelStorageProps {
    /**
     * Checksum Accelerator(ACC) Device ID Storage Properties Parameters Of The Device Instance.
     */
    checksumAccDeviceId: string;
    /**
     * Checksum Changelog Accelerator(ACC) Device ID Storage Properties Parameters Of The Device Instance.
     */
    checksumChangelogAccDeviceId: string;
    /**
     * Checksum Changelog Size MB Storage Properties Parameters Of The Device Instance.
     */
    checksumChangelogSizeMb: number;
    /**
     * Checksum Mode Storage Properties Parameters Of The Device Instance.
     */
    checksumMode: string;
    /**
     * Checksum Size MB Storage Properties Parameters Of The Device Instance.
     */
    checksumSizeMb: number;
    /**
     * Destination Checksum Accelerator(ACC) Device ID Storage Properties Parameters Of The Device Instance.
     */
    destChecksumAccDeviceId: string;
    /**
     * Destination Checksum Changelog Accelerator(ACC) Device ID Storage Properties Parameters Of The Device Instance.
     */
    destChecksumChangelogAccDeviceId: string;
    /**
     * Destination Checksum Changelog Size MB Storage Properties Parameters Of The Device Instance.
     */
    destChecksumChangelogSizeMb: number;
    /**
     * Destination Checksum Mode Storage Properties Parameters Of The Device Instance.
     */
    destChecksumMode: string;
    /**
     * Destination FGL(Fujitsu General Limited) Accelerator(ACC) Device ID Storage Properties Parameters Of The Device Instance.
     */
    destFglAccDeviceId: string;
    /**
     * Destination FGL(Fujitsu General Limited) Non-Volatile Dual In-line Memory Module(NVDIMM) Size In MB Storage Properties Parameters Of The Device Instance.
     */
    destFglNvdimmSizeMb: number;
    /**
     * FGL(Fujitsu General Limited) Accelerator(ACC) Device Id Storage Properties Parameters Of The Device Instance.
     */
    fglAccDeviceId: string;
    /**
     * FGL(Fujitsu General Limited) Non-Volatile Dual In-line Memory Module(NVDIMM) Size In MB Storage Properties Parameters Of The Device Instance.
     */
    fglNvdimmSizeMb: number;
    /**
     * Is Checksum Fully Calculated Storage Properties Parameters Of The Device Instance.
     */
    isChecksumFullyCalculated: boolean;
}

export interface GetFaultSetFaultSetDetail {
    /**
     * Fault set ID
     */
    id: string;
    /**
     * Specifies the links asscociated with fault set
     */
    links: outputs.GetFaultSetFaultSetDetailLink[];
    /**
     * Fault set name
     */
    name: string;
    /**
     * Protection Domain ID
     */
    protectionDomainId: string;
    /**
     * List of fetched SDS.
     */
    sdsDetails: outputs.GetFaultSetFaultSetDetailSdsDetail[];
}

export interface GetFaultSetFaultSetDetailLink {
    /**
     * Specifies the exact path to fetch the details
     */
    href: string;
    /**
     * Specifies the relationship with the fault set
     */
    rel: string;
}

export interface GetFaultSetFaultSetDetailSdsDetail {
    /**
     * Authentication error.
     */
    authenticationError: string;
    /**
     * Certificate Information.
     */
    certificateInfo: outputs.GetFaultSetFaultSetDetailSdsDetailCertificateInfo;
    /**
     * Configured DRL mode.
     */
    configuredDrlMode: string;
    /**
     * DRL mode.
     */
    drlMode: string;
    /**
     * Fault set ID.
     */
    faultSetId: string;
    /**
     * FGL metadata cache size.
     */
    fglMetadataCacheSize: number;
    /**
     * FGL metadata cache state.
     */
    fglMetadataCacheState: string;
    /**
     * FGL concurrent writes.
     */
    fglNumConcurrentWrites: number;
    /**
     * SDS ID.
     */
    id: string;
    /**
     * List of IPs associated with SDS.
     */
    ipLists: outputs.GetFaultSetFaultSetDetailSdsDetailIpList[];
    /**
     * Last time SDS was upgraded.
     */
    lastUpgradeTime: number;
    /**
     * Specifies the links asscociated with SDS.
     */
    links: outputs.GetFaultSetFaultSetDetailSdsDetailLink[];
    /**
     * Maintenance state.
     */
    maintenanceState: string;
    /**
     * Maintenance type.
     */
    maintenanceType: string;
    /**
     * MDM connection state.
     */
    mdmConnectionState: string;
    /**
     * Membership state.
     */
    membershipState: string;
    /**
     * SDS name.
     */
    name: string;
    /**
     * Number of IO buffers.
     */
    numIoBuffers: number;
    /**
     * Number of restarts.
     */
    numRestarts: number;
    /**
     * Presence on VMware.
     */
    onVmware: boolean;
    /**
     * Performance profile.
     */
    performanceProfile: string;
    /**
     * SDS port.
     */
    port: number;
    /**
     * RAID controllers information.
     */
    raidControllers: outputs.GetFaultSetFaultSetDetailSdsDetailRaidController[];
    /**
     * Whether RF cache is enabled or not.
     */
    rfcacheEnabled: boolean;
    /**
     * RF cache error for API version mismatch.
     */
    rfcacheErrorApiVersionMismatch: boolean;
    /**
     * RF cache error for device does not exist.
     */
    rfcacheErrorDeviceDoesNotExist: boolean;
    /**
     * RF cache error for inconsistent cache configuration.
     */
    rfcacheErrorInconsistentCacheConfiguration: boolean;
    /**
     * RF cache error for inconsistent source configuration.
     */
    rfcacheErrorInconsistentSourceConfiguration: boolean;
    /**
     * RF cache error for invalid driver path.
     */
    rfcacheErrorInvalidDriverPath: boolean;
    /**
     * RF cache error for low resources.
     */
    rfcacheErrorLowResources: boolean;
    /**
     * Whether RM cache is enabled or not.
     */
    rmcacheEnabled: boolean;
    /**
     * Indicates whether the Read RAM Cache is currently temporarily not in use.
     */
    rmcacheFrozen: boolean;
    /**
     * Indicates the state of the memory allocation process. Can be one of `in progress` and `done`.
     */
    rmcacheMemoryAllocationState: string;
    /**
     * Indicates the size of Read RAM Cache on the specified SDS in KB.
     */
    rmcacheSize: number;
    /**
     * SDS configuration failure windows.
     */
    sdsConfigurationFailure: outputs.GetFaultSetFaultSetDetailSdsDetailSdsConfigurationFailure;
    /**
     * SDS decoupled windows.
     */
    sdsDecoupled: outputs.GetFaultSetFaultSetDetailSdsDetailSdsDecoupled;
    /**
     * SDS receive buffer allocation failure windows.
     */
    sdsReceiveBufferAllocationFailures: outputs.GetFaultSetFaultSetDetailSdsDetailSdsReceiveBufferAllocationFailures;
    /**
     * SDS state.
     */
    sdsState: string;
    /**
     * Software version information.
     */
    softwareVersionInfo: string;
}

export interface GetFaultSetFaultSetDetailSdsDetailCertificateInfo {
    /**
     * Certificate issuer.
     */
    issuer: string;
    /**
     * Certificate subject.
     */
    subject: string;
    /**
     * Certificate thumbprint.
     */
    thumbprint: string;
    /**
     * The start date of the certificate validity.
     */
    validFrom: string;
    /**
     * The start date of the Asn1 format.
     */
    validFromAsn1Format: string;
    /**
     * The end date of the certificate validity.
     */
    validTo: string;
    /**
     * The end date of the Asn1 format.
     */
    validToAsn1Format: string;
}

export interface GetFaultSetFaultSetDetailSdsDetailIpList {
    /**
     * SDS IP.
     */
    ip: string;
    /**
     * SDS IP role.
     */
    role: string;
}

export interface GetFaultSetFaultSetDetailSdsDetailLink {
    /**
     * Specifies the exact path to fetch the details.
     */
    href: string;
    /**
     * Specifies the relationship with the SDS.
     */
    rel: string;
}

export interface GetFaultSetFaultSetDetailSdsDetailRaidController {
    /**
     * Battery status
     */
    batteryStatus: string;
    /**
     * Driver name.
     */
    driverName: string;
    /**
     * Driver version.
     */
    driverVersion: string;
    /**
     * Firmware version.
     */
    firmwareVersion: string;
    /**
     * Model name.
     */
    modelName: string;
    /**
     * PCI address.
     */
    pciAddress: string;
    /**
     * Serial number.
     */
    serialNumber: string;
    /**
     * RAID status.
     */
    status: string;
    /**
     * Vendor name.
     */
    vendorName: string;
}

export interface GetFaultSetFaultSetDetailSdsDetailSdsConfigurationFailure {
    /**
     * Long Window Parameters.
     */
    longWindow: outputs.GetFaultSetFaultSetDetailSdsDetailSdsConfigurationFailureLongWindow;
    /**
     * Medium Window Parameters.
     */
    mediumWindow: outputs.GetFaultSetFaultSetDetailSdsDetailSdsConfigurationFailureMediumWindow;
    /**
     * Short Window Parameters.
     */
    shortWindow: outputs.GetFaultSetFaultSetDetailSdsDetailSdsConfigurationFailureShortWindow;
}

export interface GetFaultSetFaultSetDetailSdsDetailSdsConfigurationFailureLongWindow {
    /**
     * Last oscillation count.
     */
    lastOscillationCount: number;
    /**
     * Last oscillation time.
     */
    lastOscillationTime: number;
    /**
     * Maximum failures count.
     */
    maxFailuresCount: number;
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetFaultSetFaultSetDetailSdsDetailSdsConfigurationFailureMediumWindow {
    /**
     * Last oscillation count.
     */
    lastOscillationCount: number;
    /**
     * Last oscillation time.
     */
    lastOscillationTime: number;
    /**
     * Maximum failures count.
     */
    maxFailuresCount: number;
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetFaultSetFaultSetDetailSdsDetailSdsConfigurationFailureShortWindow {
    /**
     * Last oscillation count.
     */
    lastOscillationCount: number;
    /**
     * Last oscillation time.
     */
    lastOscillationTime: number;
    /**
     * Maximum failures count.
     */
    maxFailuresCount: number;
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetFaultSetFaultSetDetailSdsDetailSdsDecoupled {
    /**
     * Long Window Parameters.
     */
    longWindow: outputs.GetFaultSetFaultSetDetailSdsDetailSdsDecoupledLongWindow;
    /**
     * Medium Window Parameters.
     */
    mediumWindow: outputs.GetFaultSetFaultSetDetailSdsDetailSdsDecoupledMediumWindow;
    /**
     * Short Window Parameters.
     */
    shortWindow: outputs.GetFaultSetFaultSetDetailSdsDetailSdsDecoupledShortWindow;
}

export interface GetFaultSetFaultSetDetailSdsDetailSdsDecoupledLongWindow {
    /**
     * Last oscillation count.
     */
    lastOscillationCount: number;
    /**
     * Last oscillation time.
     */
    lastOscillationTime: number;
    /**
     * Maximum failures count.
     */
    maxFailuresCount: number;
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetFaultSetFaultSetDetailSdsDetailSdsDecoupledMediumWindow {
    /**
     * Last oscillation count.
     */
    lastOscillationCount: number;
    /**
     * Last oscillation time.
     */
    lastOscillationTime: number;
    /**
     * Maximum failures count.
     */
    maxFailuresCount: number;
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetFaultSetFaultSetDetailSdsDetailSdsDecoupledShortWindow {
    /**
     * Last oscillation count.
     */
    lastOscillationCount: number;
    /**
     * Last oscillation time.
     */
    lastOscillationTime: number;
    /**
     * Maximum failures count.
     */
    maxFailuresCount: number;
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetFaultSetFaultSetDetailSdsDetailSdsReceiveBufferAllocationFailures {
    /**
     * Long Window Parameters.
     */
    longWindow: outputs.GetFaultSetFaultSetDetailSdsDetailSdsReceiveBufferAllocationFailuresLongWindow;
    /**
     * Medium Window Parameters.
     */
    mediumWindow: outputs.GetFaultSetFaultSetDetailSdsDetailSdsReceiveBufferAllocationFailuresMediumWindow;
    /**
     * Short Window Parameters.
     */
    shortWindow: outputs.GetFaultSetFaultSetDetailSdsDetailSdsReceiveBufferAllocationFailuresShortWindow;
}

export interface GetFaultSetFaultSetDetailSdsDetailSdsReceiveBufferAllocationFailuresLongWindow {
    /**
     * Last oscillation count.
     */
    lastOscillationCount: number;
    /**
     * Last oscillation time.
     */
    lastOscillationTime: number;
    /**
     * Maximum failures count.
     */
    maxFailuresCount: number;
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetFaultSetFaultSetDetailSdsDetailSdsReceiveBufferAllocationFailuresMediumWindow {
    /**
     * Last oscillation count.
     */
    lastOscillationCount: number;
    /**
     * Last oscillation time.
     */
    lastOscillationTime: number;
    /**
     * Maximum failures count.
     */
    maxFailuresCount: number;
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetFaultSetFaultSetDetailSdsDetailSdsReceiveBufferAllocationFailuresShortWindow {
    /**
     * Last oscillation count.
     */
    lastOscillationCount: number;
    /**
     * Last oscillation time.
     */
    lastOscillationTime: number;
    /**
     * Maximum failures count.
     */
    maxFailuresCount: number;
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetFirmwareRepositoryFirmwareRepositoryDetail {
    /**
     * Bundle Count
     */
    bundleCount: number;
    /**
     * Component Count
     */
    componentCount: number;
    /**
     * Created By
     */
    createdBy: string;
    /**
     * Created Date
     */
    createdDate: string;
    /**
     * Custom
     */
    custom: boolean;
    /**
     * Default Catalog
     */
    defaultCatalog: boolean;
    /**
     * Disk Location
     */
    diskLocation: string;
    /**
     * Download Progress
     */
    downloadProgress: number;
    /**
     * Download Status
     */
    downloadStatus: string;
    /**
     * Embedded
     */
    embedded: boolean;
    /**
     * Extract Progress
     */
    extractProgress: number;
    /**
     * File Size In Gigabytes
     */
    fileSizeInGigabytes: number;
    /**
     * Filename
     */
    filename: string;
    /**
     * ID of the Firmware Repository
     */
    id: string;
    /**
     * Job ID
     */
    jobId: string;
    /**
     * Minimal
     */
    minimal: boolean;
    /**
     * Firmware Repository name
     */
    name: string;
    /**
     * Needs Attention
     */
    needsAttention: boolean;
    /**
     * Password
     */
    password: string;
    /**
     * Rcmapproved
     */
    rcmapproved: boolean;
    /**
     * Signature
     */
    signature: string;
    /**
     * Software Bundles
     */
    softwareBundles: outputs.GetFirmwareRepositoryFirmwareRepositoryDetailSoftwareBundle[];
    /**
     * Software Components
     */
    softwareComponents: outputs.GetFirmwareRepositoryFirmwareRepositoryDetailSoftwareComponent[];
    /**
     * Source Location
     */
    sourceLocation: string;
    /**
     * Source Type
     */
    sourceType: string;
    /**
     * State
     */
    state: string;
    /**
     * Updated By
     */
    updatedBy: string;
    /**
     * Updated Date
     */
    updatedDate: string;
    /**
     * User Bundle Count
     */
    userBundleCount: number;
    /**
     * Username
     */
    username: string;
}

export interface GetFirmwareRepositoryFirmwareRepositoryDetailSoftwareBundle {
    /**
     * Bundle Date
     */
    bundleDate: string;
    /**
     * Bundle Type
     */
    bundleType: string;
    /**
     * Created By
     */
    createdBy: string;
    /**
     * Created Date
     */
    createdDate: string;
    /**
     * Custom
     */
    custom: boolean;
    /**
     * Description
     */
    description: string;
    /**
     * Device Model
     */
    deviceModel: string;
    /**
     * Device Type
     */
    deviceType: string;
    /**
     * Fw Repository ID
     */
    fwRepositoryId: string;
    /**
     * ID
     */
    id: string;
    /**
     * Name
     */
    name: string;
    /**
     * Needs Attention
     */
    needsAttention: boolean;
    /**
     * Software Components
     */
    softwareComponents: outputs.GetFirmwareRepositoryFirmwareRepositoryDetailSoftwareBundleSoftwareComponent[];
    /**
     * Updated By
     */
    updatedBy: string;
    /**
     * Updated Date
     */
    updatedDate: string;
    /**
     * User Bundle
     */
    userBundle: boolean;
    /**
     * User Bundle Path
     */
    userBundlePath: string;
    /**
     * Version
     */
    version: string;
}

export interface GetFirmwareRepositoryFirmwareRepositoryDetailSoftwareBundleSoftwareComponent {
    /**
     * Category
     */
    category: string;
    /**
     * Component ID
     */
    componentId: string;
    /**
     * Component Type
     */
    componentType: string;
    /**
     * Created By
     */
    createdBy: string;
    /**
     * Created Date
     */
    createdDate: string;
    /**
     * Custom
     */
    custom: boolean;
    /**
     * Dell Version
     */
    dellVersion: string;
    /**
     * Device ID
     */
    deviceId: string;
    /**
     * Firmware Repo Name
     */
    firmwareRepoName: string;
    /**
     * Hash Md5
     */
    hashMd5: string;
    /**
     * ID
     */
    id: string;
    /**
     * Ignore
     */
    ignore: boolean;
    /**
     * Name
     */
    name: string;
    /**
     * Needs Attention
     */
    needsAttention: boolean;
    /**
     * Operating System
     */
    operatingSystem: string;
    /**
     * Original Component ID
     */
    originalComponentId: string;
    /**
     * Package ID
     */
    packageId: string;
    /**
     * Path
     */
    path: string;
    /**
     * Sub Device ID
     */
    subDeviceId: string;
    /**
     * Sub Vendor ID
     */
    subVendorId: string;
    /**
     * System IDs
     */
    systemIds: string[];
    /**
     * Updated By
     */
    updatedBy: string;
    /**
     * Updated Date
     */
    updatedDate: string;
    /**
     * Vendor ID
     */
    vendorId: string;
    /**
     * Vendor Version
     */
    vendorVersion: string;
}

export interface GetFirmwareRepositoryFirmwareRepositoryDetailSoftwareComponent {
    /**
     * Category
     */
    category: string;
    /**
     * Component ID
     */
    componentId: string;
    /**
     * Component Type
     */
    componentType: string;
    /**
     * Created By
     */
    createdBy: string;
    /**
     * Created Date
     */
    createdDate: string;
    /**
     * Custom
     */
    custom: boolean;
    /**
     * Dell Version
     */
    dellVersion: string;
    /**
     * Device ID
     */
    deviceId: string;
    /**
     * Firmware Repo Name
     */
    firmwareRepoName: string;
    /**
     * Hash Md5
     */
    hashMd5: string;
    /**
     * ID
     */
    id: string;
    /**
     * Ignore
     */
    ignore: boolean;
    /**
     * Name
     */
    name: string;
    /**
     * Needs Attention
     */
    needsAttention: boolean;
    /**
     * Operating System
     */
    operatingSystem: string;
    /**
     * Original Component ID
     */
    originalComponentId: string;
    /**
     * Package ID
     */
    packageId: string;
    /**
     * Path
     */
    path: string;
    /**
     * Sub Device ID
     */
    subDeviceId: string;
    /**
     * Sub Vendor ID
     */
    subVendorId: string;
    /**
     * System IDs
     */
    systemIds: string[];
    /**
     * Updated By
     */
    updatedBy: string;
    /**
     * Updated Date
     */
    updatedDate: string;
    /**
     * Vendor ID
     */
    vendorId: string;
    /**
     * Vendor Version
     */
    vendorVersion: string;
}

export interface GetNodeNodeDetail {
    /**
     * Node compliance.
     */
    compliance: string;
    /**
     * Compliance check date.
     */
    complianceCheckDate: string;
    /**
     * Cred ID.
     */
    credId: string;
    /**
     * Current IP address of the node.
     */
    currentIpAddress: string;
    /**
     * Custom firmware of the node.
     */
    customFirmware: boolean;
    /**
     * Device group list.
     */
    deviceGroupList: outputs.GetNodeNodeDetailDeviceGroupList;
    /**
     * Device type of the node.
     */
    deviceType: string;
    /**
     * Discover device type of the node.
     */
    discoverDeviceType: string;
    /**
     * Discovered date of the node.
     */
    discoveredDate: string;
    /**
     * Display name of the node.
     */
    displayName: string;
    /**
     * ESXi maintenance mode.
     */
    esxiMaintMode: number;
    /**
     * Facts of the node.
     */
    facts: string;
    /**
     * Failures count.
     */
    failuresCount: number;
    /**
     * FLEX OS maintenance mode.
     */
    flexOsMaintMode: number;
    /**
     * Health of the node.
     */
    health: string;
    /**
     * Health message.
     */
    healthMessage: string;
    /**
     * Flag specifying if node is in use.
     */
    inUse: boolean;
    /**
     * IP address of the node.
     */
    ipAddress: string;
    /**
     * Managed state of the node.
     */
    managedState: string;
    /**
     * Manufacturer of the node.
     */
    manufacturer: string;
    /**
     * Memory in GB.
     */
    memoryInGb: number;
    /**
     * Model of the node.
     */
    model: string;
    /**
     * Flag specifying if node needs attention.
     */
    needsAttention: boolean;
    /**
     * NICs of the node.
     */
    nics: number;
    /**
     * Number of CPUs of the node.
     */
    numberOfCpus: number;
    /**
     * Operating system of the node.
     */
    operatingSystem: string;
    /**
     * Puppet cert name of the node.
     */
    puppetCertName: string;
    /**
     * Reference ID of the node.
     */
    refId: string;
    /**
     * Service tag of the node.
     */
    serviceTag: string;
    /**
     * State of the node.
     */
    state: string;
    /**
     * System ID.
     */
    systemId: string;
}

export interface GetNodeNodeDetailDeviceGroupList {
    /**
     * Device group information.
     */
    deviceGroups: outputs.GetNodeNodeDetailDeviceGroupListDeviceGroup[];
}

export interface GetNodeNodeDetailDeviceGroupListDeviceGroup {
    /**
     * User who created the group.
     */
    createdBy: string;
    /**
     * Creation date.
     */
    createdDate: string;
    /**
     * Group description.
     */
    groupDescription: string;
    /**
     * Group name.
     */
    groupName: string;
    /**
     * Group Sequence ID.
     */
    groupSeqId: number;
    /**
     * Group user list.
     */
    groupUserList: outputs.GetNodeNodeDetailDeviceGroupListDeviceGroupGroupUserList;
    /**
     * User who updated the group.
     */
    updatedBy: string;
    /**
     * Updated date.
     */
    updatedDate: string;
}

export interface GetNodeNodeDetailDeviceGroupListDeviceGroupGroupUserList {
    /**
     * Group user information.
     */
    groupUsers: outputs.GetNodeNodeDetailDeviceGroupListDeviceGroupGroupUserListGroupUser[];
    /**
     * Total number of records.
     */
    totalRecords: number;
}

export interface GetNodeNodeDetailDeviceGroupListDeviceGroupGroupUserListGroupUser {
    /**
     * Enabled flag.
     */
    enabled: boolean;
    /**
     * First name of the user.
     */
    firstName: string;
    /**
     * Last name of the user.
     */
    lastName: string;
    /**
     * User name.
     */
    userName: string;
    /**
     * User sequence ID.
     */
    userSeqId: number;
}

export interface GetOsRepositoryFilter {
    /**
     * List of OS Repository Ids.
     */
    osRepoIds?: string[];
    /**
     * List of OS Repository names.
     */
    osRepoNames?: string[];
}

export interface GetOsRepositoryOsRepository {
    /**
     * Base URL of the OS repository
     */
    baseUrl: string;
    /**
     * User who created the OS repository
     */
    createdBy: string;
    /**
     * Date of creation of the OS Repository
     */
    createdDate: string;
    /**
     * Whether the OS repository is from the web or not
     */
    fromWeb: boolean;
    /**
     * ID of the OS Repository
     */
    id: string;
    /**
     * Type of the OS image. Supported types are redhat7, vmware_esxi, sles, windows2016, windows2019
     */
    imageType: string;
    /**
     * Whether the OS repository is in use or not
     */
    inUse: boolean;
    /**
     * Metadata of the OS Repository
     */
    metadata: outputs.GetOsRepositoryOsRepositoryMetadata;
    /**
     * Name of the OS repository
     */
    name: string;
    /**
     * Password of the OS repository
     */
    password: string;
    /**
     * Name of the Razor
     */
    razorName: string;
    /**
     * Path of the RCM
     */
    rcmPath: string;
    /**
     * Type of the OS repository. Default is ISO
     */
    repoType: string;
    /**
     * Source path of the OS image
     */
    sourcePath: string;
    /**
     * State of the OS repository
     */
    state: string;
    /**
     * Username of the OS repository
     */
    username: string;
}

export interface GetOsRepositoryOsRepositoryMetadata {
    /**
     * List of OS Repository Metadata Repos
     */
    repos: outputs.GetOsRepositoryOsRepositoryMetadataRepo[];
}

export interface GetOsRepositoryOsRepositoryMetadataRepo {
    /**
     * Base path of the OS Repository Metadata Repo
     */
    basePath: string;
    /**
     * Description of the OS Repository Metadata Repo
     */
    description: string;
    /**
     * GPG key of the OS Repository Metadata Repo
     */
    gpgKey: string;
    /**
     * Name of the OS Repository Metadata Repo
     */
    name: string;
    /**
     * Whether the OS Repository Metadata Repo has OS packages or not
     */
    osPackages: boolean;
}

export interface GetProtectionDomainProtectionDomain {
    /**
     * Fine Granularity Metadata Cache size.
     */
    fglDefaultMetadataCacheSize: number;
    /**
     * Fine Granularity default number of concurrent writes.
     */
    fglDefaultNumConcurrentWrites: number;
    /**
     * Whether Fine Granularity Metadata Cache is enabled or not.
     */
    fglMetadataCacheEnabled: boolean;
    /**
     * Unique identifier of the protection domain instance.
     */
    id: string;
    /**
     * Underlying REST API links.
     */
    links: outputs.GetProtectionDomainProtectionDomainLink[];
    /**
     * MDM-SDS Network Disconnection Counter windows.
     */
    mdmSdsNetworkDisconnectionsCounter: outputs.GetProtectionDomainProtectionDomainMdmSdsNetworkDisconnectionsCounter;
    /**
     * Unique name of the protection domain instance.
     */
    name: string;
    /**
     * Whether network throttling is enabled for overall io.
     */
    overallIoNetworkThrottlingEnabled: boolean;
    /**
     * Maximum allowed io for protected maintenance mode in KBps. Must be greater than any other network throttling parameter.
     */
    overallIoNetworkThrottlingInKbps: number;
    /**
     * Whether network throttling is enabled for protected maintenance mode.
     */
    protectedMaintenanceModeNetworkThrottlingEnabled: boolean;
    /**
     * Maximum allowed io for protected maintenance mode in KBps.
     */
    protectedMaintenanceModeNetworkThrottlingInKbps: number;
    /**
     * Whether network throttling is enabled for rebalancing.
     */
    rebalanceNetworkThrottlingEnabled: boolean;
    /**
     * Maximum allowed io for rebalancing in KBps.
     */
    rebalanceNetworkThrottlingInKbps: number;
    /**
     * Whether network throttling is enabled for rebuilding.
     */
    rebuildNetworkThrottlingEnabled: boolean;
    /**
     * Maximum allowed io for rebuilding in KBps.
     */
    rebuildNetworkThrottlingInKbps: number;
    /**
     * Maximum Replication Capacity Ratio.
     */
    replicationCapacityMaxRatio: number;
    /**
     * ID of the Rf Cache Acceleration Pool attached to the PD.
     */
    rfCacheAccpId: string;
    /**
     * Whether SDS Rf Cache is enabled or not.
     */
    rfCacheEnabled: boolean;
    /**
     * Maximum io of the SDS RF Cache in KB.
     */
    rfCacheMaxIoSizeKb: number;
    /**
     * Operational Mode of the SDS RF Cache.
     */
    rfCacheOpertionalMode: string;
    /**
     * Page size of the SDS RF Cache in KB.
     */
    rfCachePageSizeKb: number;
    /**
     * SDR-SDS Connectivity information.
     */
    sdrSdsConnectivity: outputs.GetProtectionDomainProtectionDomainSdrSdsConnectivity;
    /**
     * SDS Configuration Failure Counter windows.
     */
    sdsConfigurationFailureCounter: outputs.GetProtectionDomainProtectionDomainSdsConfigurationFailureCounter;
    /**
     * SDS Decoupled Counter windows.
     */
    sdsDecoupledCounter: outputs.GetProtectionDomainProtectionDomainSdsDecoupledCounter;
    /**
     * SDS receive Buffer Allocation Failure Counter windows.
     */
    sdsReceiveBufferAllocationFailuresCounter: outputs.GetProtectionDomainProtectionDomainSdsReceiveBufferAllocationFailuresCounter;
    /**
     * SDS-SDS Network Disconnection Counter windows.
     */
    sdsSdsNetworkDisconnectionsCounter: outputs.GetProtectionDomainProtectionDomainSdsSdsNetworkDisconnectionsCounter;
    /**
     * State of a PD. Valid values are `Active`, `ActivePending`, `Inactive` or `InactivePending`.
     */
    state: string;
    /**
     * System ID of the PD.
     */
    systemId: string;
    /**
     * Whether network throttling is enabled for vtree migration.
     */
    vtreeMigrationNetworkThrottlingEnabled: boolean;
    /**
     * Maximum allowed io for vtree migration in KBps.
     */
    vtreeMigrationNetworkThrottlingInKbps: number;
}

export interface GetProtectionDomainProtectionDomainLink {
    /**
     * Specifies the exact path to fetch the details.
     */
    href: string;
    /**
     * Specifies the relationship with the Protection Domain.
     */
    rel: string;
}

export interface GetProtectionDomainProtectionDomainMdmSdsNetworkDisconnectionsCounter {
    /**
     * Long Window Parameters.
     */
    longWindow: outputs.GetProtectionDomainProtectionDomainMdmSdsNetworkDisconnectionsCounterLongWindow;
    /**
     * Medium Window Parameters.
     */
    mediumWindow: outputs.GetProtectionDomainProtectionDomainMdmSdsNetworkDisconnectionsCounterMediumWindow;
    /**
     * Short Window Parameters.
     */
    shortWindow: outputs.GetProtectionDomainProtectionDomainMdmSdsNetworkDisconnectionsCounterShortWindow;
}

export interface GetProtectionDomainProtectionDomainMdmSdsNetworkDisconnectionsCounterLongWindow {
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetProtectionDomainProtectionDomainMdmSdsNetworkDisconnectionsCounterMediumWindow {
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetProtectionDomainProtectionDomainMdmSdsNetworkDisconnectionsCounterShortWindow {
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetProtectionDomainProtectionDomainSdrSdsConnectivity {
    /**
     * Connectivity Status.
     */
    clientServerConnStatus: string;
    /**
     * ID of the disconnected client.
     */
    disconnectedClientId: string;
    /**
     * Name of the disconnected client.
     */
    disconnectedClientName: string;
    /**
     * ID of the disconnected server.
     */
    disconnectedServerId: string;
    /**
     * IP address of the disconnected server.
     */
    disconnectedServerIp: string;
    /**
     * Name of the disconnected server.
     */
    disconnectedServerName: string;
}

export interface GetProtectionDomainProtectionDomainSdsConfigurationFailureCounter {
    /**
     * Long Window Parameters.
     */
    longWindow: outputs.GetProtectionDomainProtectionDomainSdsConfigurationFailureCounterLongWindow;
    /**
     * Medium Window Parameters.
     */
    mediumWindow: outputs.GetProtectionDomainProtectionDomainSdsConfigurationFailureCounterMediumWindow;
    /**
     * Short Window Parameters.
     */
    shortWindow: outputs.GetProtectionDomainProtectionDomainSdsConfigurationFailureCounterShortWindow;
}

export interface GetProtectionDomainProtectionDomainSdsConfigurationFailureCounterLongWindow {
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetProtectionDomainProtectionDomainSdsConfigurationFailureCounterMediumWindow {
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetProtectionDomainProtectionDomainSdsConfigurationFailureCounterShortWindow {
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetProtectionDomainProtectionDomainSdsDecoupledCounter {
    /**
     * Long Window Parameters.
     */
    longWindow: outputs.GetProtectionDomainProtectionDomainSdsDecoupledCounterLongWindow;
    /**
     * Medium Window Parameters.
     */
    mediumWindow: outputs.GetProtectionDomainProtectionDomainSdsDecoupledCounterMediumWindow;
    /**
     * Short Window Parameters.
     */
    shortWindow: outputs.GetProtectionDomainProtectionDomainSdsDecoupledCounterShortWindow;
}

export interface GetProtectionDomainProtectionDomainSdsDecoupledCounterLongWindow {
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetProtectionDomainProtectionDomainSdsDecoupledCounterMediumWindow {
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetProtectionDomainProtectionDomainSdsDecoupledCounterShortWindow {
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetProtectionDomainProtectionDomainSdsReceiveBufferAllocationFailuresCounter {
    /**
     * Long Window Parameters.
     */
    longWindow: outputs.GetProtectionDomainProtectionDomainSdsReceiveBufferAllocationFailuresCounterLongWindow;
    /**
     * Medium Window Parameters.
     */
    mediumWindow: outputs.GetProtectionDomainProtectionDomainSdsReceiveBufferAllocationFailuresCounterMediumWindow;
    /**
     * Short Window Parameters.
     */
    shortWindow: outputs.GetProtectionDomainProtectionDomainSdsReceiveBufferAllocationFailuresCounterShortWindow;
}

export interface GetProtectionDomainProtectionDomainSdsReceiveBufferAllocationFailuresCounterLongWindow {
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetProtectionDomainProtectionDomainSdsReceiveBufferAllocationFailuresCounterMediumWindow {
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetProtectionDomainProtectionDomainSdsReceiveBufferAllocationFailuresCounterShortWindow {
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetProtectionDomainProtectionDomainSdsSdsNetworkDisconnectionsCounter {
    /**
     * Long Window Parameters.
     */
    longWindow: outputs.GetProtectionDomainProtectionDomainSdsSdsNetworkDisconnectionsCounterLongWindow;
    /**
     * Medium Window Parameters.
     */
    mediumWindow: outputs.GetProtectionDomainProtectionDomainSdsSdsNetworkDisconnectionsCounterMediumWindow;
    /**
     * Short Window Parameters.
     */
    shortWindow: outputs.GetProtectionDomainProtectionDomainSdsSdsNetworkDisconnectionsCounterShortWindow;
}

export interface GetProtectionDomainProtectionDomainSdsSdsNetworkDisconnectionsCounterLongWindow {
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetProtectionDomainProtectionDomainSdsSdsNetworkDisconnectionsCounterMediumWindow {
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetProtectionDomainProtectionDomainSdsSdsNetworkDisconnectionsCounterShortWindow {
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetResourceGroupResourceGroupDetail {
    /**
     * Indicates whether all users are allowed for the deployment.
     */
    allUsersAllowed: boolean;
    /**
     * List of users assigned to the deployment.
     */
    assignedUsers: outputs.GetResourceGroupResourceGroupDetailAssignedUser[];
    /**
     * Indicates whether the deployment involves brownfield operations.
     */
    brownfield: boolean;
    /**
     * Indicates whether migration of cluster virtual machines is allowed.
     */
    canMigratevClsvMs: boolean;
    /**
     * Indicates whether the deployment is compliant.
     */
    compliant: boolean;
    /**
     * Specifies whether there has been a change in the deployment configuration.
     */
    configurationChange: boolean;
    /**
     * The user who created the deployment.
     */
    createdBy: string;
    /**
     * The date when the deployment was created.
     */
    createdDate: string;
    /**
     * The current batch count during deployment.
     */
    currentBatchCount: string;
    /**
     * The current step count during deployment.
     */
    currentStepCount: string;
    /**
     * The message associated with the current step during deployment.
     */
    currentStepMessage: string;
    /**
     * The custom image used for deployment.
     */
    customImage: string;
    /**
     * The description of the ResourceGroup
     */
    deploymentDescription: string;
    /**
     * List of devices associated with the deployment.
     */
    deploymentDevices: outputs.GetResourceGroupResourceGroupDetailDeploymentDevice[];
    /**
     * The date when the deployment finished.
     */
    deploymentFinishedDate: string;
    /**
     * The type of health status associated with the deployment.
     */
    deploymentHealthStatusType: string;
    /**
     * The name of the ResourceGroup
     */
    deploymentName: string;
    /**
     * The scheduled date for the deployment.
     */
    deploymentScheduledDate: string;
    /**
     * The date when the deployment started.
     */
    deploymentStartedDate: string;
    /**
     * Details about the validity of the Resource Group
     */
    deploymentValid: outputs.GetResourceGroupResourceGroupDetailDeploymentValid;
    /**
     * Details about the validation response for the deployment.
     */
    deploymentValidationResponse: outputs.GetResourceGroupResourceGroupDetailDeploymentValidationResponse;
    /**
     * Detailed Message
     */
    detailMessage: string;
    /**
     * Indicates whether disruptive firmware actions are allowed.
     */
    disruptiveFirmware: boolean;
    /**
     * Error
     */
    error: string;
    /**
     * Indicates whether firmware initialization is performed during deployment.
     */
    firmwareInit: boolean;
    /**
     * Details about the firmware repository used by the template.
     */
    firmwareRepository: outputs.GetResourceGroupResourceGroupDetailFirmwareRepository;
    /**
     * The ID of the firmware repository associated with the deployment.
     */
    firmwareRepositoryId: string;
    /**
     * The unique identifier for the Resource Group
     */
    id: string;
    /**
     * Indicates whether to perform individual teardown for the deployment.
     */
    individualTeardown: boolean;
    /**
     * List of job details associated with the deployment.
     */
    jobDetails: outputs.GetResourceGroupResourceGroupDetailJobDetail[];
    /**
     * Details about the license repository associated with the deployment.
     */
    licenseRepository: outputs.GetResourceGroupResourceGroupDetailLicenseRepository;
    /**
     * The ID of the license repository associated with the deployment.
     */
    licenseRepositoryId: string;
    /**
     * Indicates whether the deployment is in lifecycle mode.
     */
    lifecycleMode: boolean;
    /**
     * List of reasons for the lifecycle mode of the deployment.
     */
    lifecycleModeReasons: string[];
    /**
     * Messages
     */
    messages: outputs.GetResourceGroupResourceGroupDetailMessage[];
    /**
     * Indicates whether the deployment is a no-op (no operation).
     */
    noOp: boolean;
    /**
     * The total number of deployments.
     */
    numberOfDeployments: number;
    /**
     * Additional data associated with the operation.
     */
    operationData: string;
    /**
     * The status of the operation associated with the deployment.
     */
    operationStatus: string;
    /**
     * The type of operation associated with the deployment.
     */
    operationType: string;
    /**
     * The ID of the original deployment.
     */
    originalDeploymentId: string;
    /**
     * The overall health status of the device in the deployment.
     */
    overallDeviceHealth: string;
    /**
     * The owner of the deployment.
     */
    owner: string;
    /**
     * Path
     */
    path: string;
    /**
     * The precalculated health of devices associated with the deployment.
     */
    precalculatedDeviceHealth: string;
    /**
     * Indicates whether to preconfigure SVM (Storage Virtual Machine).
     */
    preconfigureSvm: boolean;
    /**
     * Indicates whether to preconfigure SVM and perform an update.
     */
    preconfigureSvmAndUpdate: boolean;
    /**
     * Indicates whether the associated service should be removed.
     */
    removeService: boolean;
    /**
     * Indicates whether the deployment should be retried.
     */
    retry: boolean;
    /**
     * Indicates whether the deployment involves scaling up.
     */
    scaleUp: boolean;
    /**
     * The date when the deployment is scheduled.
     */
    scheduleDate: string;
    /**
     * Template details
     */
    serviceTemplate: outputs.GetResourceGroupResourceGroupDetailServiceTemplate;
    /**
     * Details about the services deployed during the deployment.
     */
    servicesDeployed: string;
    /**
     * The status of the deployment.
     */
    status: string;
    /**
     * teardown
     */
    teardown: boolean;
    /**
     * Indicates whether teardown should occur after canceling the deployment.
     */
    teardownAfterCancel: boolean;
    /**
     * Details about the validity of the template.
     */
    templateValid: boolean;
    /**
     * The timestamp indicating when the message was generated.
     */
    timestamp: string;
    /**
     * The total number of batches involved in the deployment.
     */
    totalBatchCount: string;
    /**
     * The total number of steps involved in the deployment.
     */
    totalNumOfSteps: string;
    /**
     * Indicates whether to update server firmware during the deployment.
     */
    updateServerFirmware: boolean;
    /**
     * The user who last updated the deployment.
     */
    updatedBy: string;
    /**
     * The date when the deployment was last updated.
     */
    updatedDate: string;
    /**
     * Indicates whether to use the default catalog for the deployment.
     */
    useDefaultCatalog: boolean;
    /**
     * Specifies whether the deployment involves Virtual Desktop Infrastructure (VDI) configuration.
     */
    vds: boolean;
    /**
     * List of virtual machines associated with the deployment.
     */
    vms: outputs.GetResourceGroupResourceGroupDetailVm[];
}

export interface GetResourceGroupResourceGroupDetailAssignedUser {
    /**
     * The user who created the assigned user.
     */
    createdBy: string;
    /**
     * The date when the assigned user was created.
     */
    createdDate: string;
    /**
     * The domain name of the assigned user.
     */
    domainName: string;
    /**
     * The email address of the assigned user.
     */
    email: string;
    /**
     * Indicates whether the assigned user is enabled.
     */
    enabled: boolean;
    /**
     * The first name of the assigned user.
     */
    firstName: string;
    /**
     * The distinguished name (DN) of the group associated with the assigned user.
     */
    groupDn: string;
    /**
     * The name of the group associated with the assigned user.
     */
    groupName: string;
    /**
     * The unique identifier of the assigned user.
     */
    id: string;
    /**
     * The last name of the assigned user.
     */
    lastName: string;
    /**
     * The password associated with the assigned user.
     */
    password: string;
    /**
     * The phone number of the assigned user.
     */
    phoneNumber: string;
    /**
     * The role associated with the assigned user.
     */
    role: string;
    /**
     * The roles associated with the assigned user.
     */
    roles: string[];
    /**
     * Indicates whether the assigned user is a system user.
     */
    systemUser: boolean;
    /**
     * Indicates whether the user password needs to be updated.
     */
    updatePassword: boolean;
    /**
     * The user who last updated the assigned user.
     */
    updatedBy: string;
    /**
     * The date when the assigned user was last updated.
     */
    updatedDate: string;
    /**
     * The username of the assigned user.
     */
    userName: string;
    /**
     * The preferences of the assigned user.
     */
    userPreference: string;
    /**
     * The sequential ID of the assigned user.
     */
    userSeqId: number;
}

export interface GetResourceGroupResourceGroupDetailDeploymentDevice {
    /**
     * Indicates whether the deployment device is associated with a brownfield deployment.
     */
    brownfield: boolean;
    /**
     * The brownfield status of the deployment device.
     */
    brownfieldStatus: string;
    /**
     * Indicates whether the deployment device has a cloud link.
     */
    cloudLink: boolean;
    /**
     * The compliant state of the deployment device.
     */
    compliantState: string;
    /**
     * The component ID associated with the deployment device.
     */
    componentId: string;
    /**
     * The current IP address of the deployment device.
     */
    currentIpAddress: string;
    /**
     * Indicates whether the deployment device has Direct-Attached Storage (DAS) cache.
     */
    dasCache: boolean;
    /**
     * The name of the device group associated with the deployment device.
     */
    deviceGroupName: string;
    /**
     * The health status of the deployment device.
     */
    deviceHealth: string;
    /**
     * The state of the deployment device.
     */
    deviceState: string;
    /**
     * The type of device associated with the deployment device.
     */
    deviceType: string;
    /**
     * The health message associated with the deployment device.
     */
    healthMessage: string;
    /**
     * The IP address of the deployment device.
     */
    ipAddress: string;
    /**
     * The log dump information associated with the deployment device.
     */
    logDump: string;
    /**
     * The model of the deployment device.
     */
    model: string;
    /**
     * The Puppet certificate name associated with the deployment device.
     */
    puppetCertName: string;
    /**
     * The reference ID associated with the deployment device.
     */
    refId: string;
    /**
     * The reference type associated with the deployment device.
     */
    refType: string;
    /**
     * The service tag associated with the deployment device.
     */
    serviceTag: string;
    /**
     * The status of the deployment device.
     */
    status: string;
    /**
     * The end time of the status for the deployment device.
     */
    statusEndTime: string;
    /**
     * The status message associated with the deployment device.
     */
    statusMessage: string;
    /**
     * The start time of the status for the deployment device.
     */
    statusStartTime: string;
}

export interface GetResourceGroupResourceGroupDetailDeploymentValid {
    /**
     * List of messages related to the deployment.
     */
    messages: outputs.GetResourceGroupResourceGroupDetailDeploymentValidMessage[];
    /**
     * Indicates whether the deployment is valid.
     */
    valid: boolean;
}

export interface GetResourceGroupResourceGroupDetailDeploymentValidMessage {
    /**
     * The identifier of the agent associated with the message.
     */
    agentId: string;
    /**
     * The category or type of the message.
     */
    category: string;
    /**
     * The identifier used to correlate related messages.
     */
    correlationId: string;
    /**
     * A detailed version or description of the message.
     */
    detailedMessage: string;
    /**
     * The message to be displayed or shown.
     */
    displayMessage: string;
    /**
     * The unique identifier for the message.
     */
    id: string;
    /**
     * The bundle or group to which the message belongs.
     */
    messageBundle: string;
    /**
     * The code associated with the message.
     */
    messageCode: string;
    /**
     * The action to be taken in response to the message.
     */
    responseAction: string;
    /**
     * The sequence number of the message in a series.
     */
    sequenceNumber: number;
    /**
     * The severity level of the message (e.g., INFO, WARNING, ERROR).
     */
    severity: string;
    /**
     * The timestamp indicating when the message was generated.
     */
    timeStamp: string;
}

export interface GetResourceGroupResourceGroupDetailDeploymentValidationResponse {
    /**
     * Indicates whether the deployment can be executed.
     */
    canDeploy: boolean;
    /**
     * Indicates whether there is a disk type mismatch in the deployment.
     */
    diskTypeMismatch: boolean;
    /**
     * The number of drives per storage pool in the deployment.
     */
    drivesPerStoragePool: number;
    /**
     * A list of hostnames associated with the deployment.
     */
    hostnames: string[];
    /**
     * The maximum scalability of the deployment.
     */
    maxScalability: number;
    /**
     * The disk types associated with new nodes in the deployment.
     */
    newNodeDiskTypes: string[];
    /**
     * The number of fault sets in the deployment.
     */
    noOfFaultSets: number;
    /**
     * The number of nodes in the deployment.
     */
    nodes: number;
    /**
     * The number of nodes per fault set in the deployment.
     */
    nodesPerFaultSet: number;
    /**
     * The number of service volumes in the deployment.
     */
    numberOfServiceVolumes: number;
    /**
     * The protection domain associated with the deployment.
     */
    protectionDomain: string;
    /**
     * The disk types associated with each storage pool in the deployment.
     */
    storagePoolDiskTypes: string[];
    /**
     * The number of storage pools in the deployment.
     */
    storagePools: number;
    /**
     * The number of virtual machines in the deployment.
     */
    virtualMachines: number;
    /**
     * A list of warning messages associated with the deployment validation.
     */
    warningMessages: string[];
}

export interface GetResourceGroupResourceGroupDetailFirmwareRepository {
    /**
     * The count of software bundles in the firmware repository.
     */
    bundleCount: number;
    /**
     * The count of software components in the firmware repository.
     */
    componentCount: number;
    /**
     * The user who created the firmware repository.
     */
    createdBy: string;
    /**
     * The date when the firmware repository was created.
     */
    createdDate: string;
    /**
     * Indicates whether the firmware repository is custom.
     */
    custom: boolean;
    /**
     * Indicates whether the firmware repository is the default catalog.
     */
    defaultCatalog: boolean;
    /**
     * List of deployments associated with the firmware repository.
     */
    deployments: outputs.GetResourceGroupResourceGroupDetailFirmwareRepositoryDeployment[];
    /**
     * The location on disk where the firmware repository is stored.
     */
    diskLocation: string;
    /**
     * The progress of the download for the firmware repository.
     */
    downloadProgress: number;
    /**
     * The download status of the firmware repository.
     */
    downloadStatus: string;
    /**
     * Indicates whether the firmware repository is embedded.
     */
    embedded: boolean;
    /**
     * The progress of the extraction for the firmware repository.
     */
    extractProgress: number;
    /**
     * The size of the firmware repository file in gigabytes.
     */
    fileSizeInGigabytes: number;
    /**
     * The filename of the firmware repository.
     */
    filename: string;
    /**
     * The unique identifier of the firmware repository.
     */
    id: string;
    /**
     * The unique identifier of the job associated with the firmware repository.
     */
    jobId: string;
    /**
     * The MD5 hash of the firmware repository.
     */
    md5Hash: string;
    /**
     * Indicates whether the firmware repository is minimal.
     */
    minimal: boolean;
    /**
     * The name of the firmware repository.
     */
    name: string;
    /**
     * Indicates whether the firmware repository needs attention.
     */
    needsAttention: boolean;
    /**
     * The password associated with the firmware repository.
     */
    password: string;
    /**
     * Indicates whether the firmware repository is RCM approved.
     */
    rcmapproved: boolean;
    /**
     * The signature of the firmware repository.
     */
    signature: string;
    /**
     * The source location of the signed key associated with the firmware repository.
     */
    signedKeySourceLocation: string;
    /**
     * List of software bundles associated with the firmware repository.
     */
    softwareBundles: outputs.GetResourceGroupResourceGroupDetailFirmwareRepositorySoftwareBundle[];
    /**
     * List of software components associated with the firmware repository.
     */
    softwareComponents: outputs.GetResourceGroupResourceGroupDetailFirmwareRepositorySoftwareComponent[];
    /**
     * The location of the source for the firmware repository.
     */
    sourceLocation: string;
    /**
     * The type of the source for the firmware repository.
     */
    sourceType: string;
    /**
     * The state of the firmware repository.
     */
    state: string;
    /**
     * The user who last updated the firmware repository.
     */
    updatedBy: string;
    /**
     * The date when the firmware repository was last updated.
     */
    updatedDate: string;
    /**
     * The count of user-specific software bundles in the firmware repository.
     */
    userBundleCount: number;
    /**
     * The username associated with the firmware repository.
     */
    username: string;
}

export interface GetResourceGroupResourceGroupDetailFirmwareRepositoryDeployment {
    /**
     * Indicates whether all users are allowed for the deployment.
     */
    allUsersAllowed: boolean;
    /**
     * List of users assigned to the deployment.
     */
    assignedUsers: outputs.GetResourceGroupResourceGroupDetailFirmwareRepositoryDeploymentAssignedUser[];
    /**
     * Indicates whether the deployment involves brownfield operations.
     */
    brownfield: boolean;
    /**
     * Indicates whether migration of cluster virtual machines is allowed.
     */
    canMigratevClsvMs: boolean;
    /**
     * Indicates whether the deployment is compliant.
     */
    compliant: boolean;
    /**
     * Specifies whether there has been a change in the deployment configuration.
     */
    configurationChange: boolean;
    /**
     * The user who created the deployment.
     */
    createdBy: string;
    /**
     * The date when the deployment was created.
     */
    createdDate: string;
    /**
     * The current batch count during deployment.
     */
    currentBatchCount: string;
    /**
     * The current step count during deployment.
     */
    currentStepCount: string;
    /**
     * The message associated with the current step during deployment.
     */
    currentStepMessage: string;
    /**
     * The custom image used for deployment.
     */
    customImage: string;
    /**
     * The description of the deployment.
     */
    deploymentDescription: string;
    /**
     * List of devices associated with the deployment.
     */
    deploymentDevices: outputs.GetResourceGroupResourceGroupDetailFirmwareRepositoryDeploymentDeploymentDevice[];
    /**
     * The date when the deployment finished.
     */
    deploymentFinishedDate: string;
    /**
     * The type of health status associated with the deployment.
     */
    deploymentHealthStatusType: string;
    /**
     * The name of the deployment.
     */
    deploymentName: string;
    /**
     * The scheduled date for the deployment.
     */
    deploymentScheduledDate: string;
    /**
     * The date when the deployment started.
     */
    deploymentStartedDate: string;
    /**
     * Details about the validity of the deployment.
     */
    deploymentValid: outputs.GetResourceGroupResourceGroupDetailFirmwareRepositoryDeploymentDeploymentValid;
    /**
     * Details about the validation response for the deployment.
     */
    deploymentValidationResponse: outputs.GetResourceGroupResourceGroupDetailFirmwareRepositoryDeploymentDeploymentValidationResponse;
    /**
     * Indicates whether disruptive firmware actions are allowed.
     */
    disruptiveFirmware: boolean;
    /**
     * Indicates whether firmware initialization is performed during deployment.
     */
    firmwareInit: boolean;
    /**
     * The ID of the firmware repository associated with the deployment.
     */
    firmwareRepositoryId: string;
    /**
     * The unique identifier of the deployment.
     */
    id: string;
    /**
     * Indicates whether to perform individual teardown for the deployment.
     */
    individualTeardown: boolean;
    /**
     * List of job details associated with the deployment.
     */
    jobDetails: outputs.GetResourceGroupResourceGroupDetailFirmwareRepositoryDeploymentJobDetail[];
    /**
     * Details about the license repository associated with the deployment.
     */
    licenseRepository: outputs.GetResourceGroupResourceGroupDetailFirmwareRepositoryDeploymentLicenseRepository;
    /**
     * The ID of the license repository associated with the deployment.
     */
    licenseRepositoryId: string;
    /**
     * Indicates whether the deployment is in lifecycle mode.
     */
    lifecycleMode: boolean;
    /**
     * List of reasons for the lifecycle mode of the deployment.
     */
    lifecycleModeReasons: string[];
    /**
     * Indicates whether the deployment is a no-op (no operation).
     */
    noOp: boolean;
    /**
     * The total number of deployments.
     */
    numberOfDeployments: number;
    /**
     * Additional data associated with the operation.
     */
    operationData: string;
    /**
     * The status of the operation associated with the deployment.
     */
    operationStatus: string;
    /**
     * The type of operation associated with the deployment.
     */
    operationType: string;
    /**
     * The ID of the original deployment.
     */
    originalDeploymentId: string;
    /**
     * The overall health status of the device in the deployment.
     */
    overallDeviceHealth: string;
    /**
     * The owner of the deployment.
     */
    owner: string;
    /**
     * The precalculated health of devices associated with the deployment.
     */
    precalculatedDeviceHealth: string;
    /**
     * Indicates whether to preconfigure SVM (Storage Virtual Machine).
     */
    preconfigureSvm: boolean;
    /**
     * Indicates whether to preconfigure SVM and perform an update.
     */
    preconfigureSvmAndUpdate: boolean;
    /**
     * Indicates whether the associated service should be removed.
     */
    removeService: boolean;
    /**
     * Indicates whether the deployment should be retried.
     */
    retry: boolean;
    /**
     * Indicates whether the deployment involves scaling up.
     */
    scaleUp: boolean;
    /**
     * The date when the deployment is scheduled.
     */
    scheduleDate: string;
    /**
     * Details about the services deployed during the deployment.
     */
    servicesDeployed: string;
    /**
     * The status of the deployment.
     */
    status: string;
    /**
     * Indicates whether the deployment should be torn down.
     */
    teardown: boolean;
    /**
     * Indicates whether teardown should occur after canceling the deployment.
     */
    teardownAfterCancel: boolean;
    /**
     * Indicates if the deployment template is valid.
     */
    templateValid: boolean;
    /**
     * The total number of batches involved in the deployment.
     */
    totalBatchCount: string;
    /**
     * The total number of steps involved in the deployment.
     */
    totalNumOfSteps: string;
    /**
     * Indicates whether to update server firmware during the deployment.
     */
    updateServerFirmware: boolean;
    /**
     * The user who last updated the deployment.
     */
    updatedBy: string;
    /**
     * The date when the deployment was last updated.
     */
    updatedDate: string;
    /**
     * Indicates whether to use the default catalog for the deployment.
     */
    useDefaultCatalog: boolean;
    /**
     * Specifies whether the deployment involves Virtual Desktop Infrastructure (VDI) configuration.
     */
    vds: boolean;
    /**
     * List of virtual machines associated with the deployment.
     */
    vms: outputs.GetResourceGroupResourceGroupDetailFirmwareRepositoryDeploymentVm[];
}

export interface GetResourceGroupResourceGroupDetailFirmwareRepositoryDeploymentAssignedUser {
    /**
     * The user who created the assigned user.
     */
    createdBy: string;
    /**
     * The date when the assigned user was created.
     */
    createdDate: string;
    /**
     * The domain name of the assigned user.
     */
    domainName: string;
    /**
     * The email address of the assigned user.
     */
    email: string;
    /**
     * Indicates whether the assigned user is enabled.
     */
    enabled: boolean;
    /**
     * The first name of the assigned user.
     */
    firstName: string;
    /**
     * The distinguished name (DN) of the group associated with the assigned user.
     */
    groupDn: string;
    /**
     * The name of the group associated with the assigned user.
     */
    groupName: string;
    /**
     * The unique identifier of the assigned user.
     */
    id: string;
    /**
     * The last name of the assigned user.
     */
    lastName: string;
    /**
     * The password associated with the assigned user.
     */
    password: string;
    /**
     * The phone number of the assigned user.
     */
    phoneNumber: string;
    /**
     * The role associated with the assigned user.
     */
    role: string;
    /**
     * The roles associated with the assigned user.
     */
    roles: string[];
    /**
     * Indicates whether the assigned user is a system user.
     */
    systemUser: boolean;
    /**
     * Indicates whether the user password needs to be updated.
     */
    updatePassword: boolean;
    /**
     * The user who last updated the assigned user.
     */
    updatedBy: string;
    /**
     * The date when the assigned user was last updated.
     */
    updatedDate: string;
    /**
     * The username of the assigned user.
     */
    userName: string;
    /**
     * The preferences of the assigned user.
     */
    userPreference: string;
    /**
     * The sequential ID of the assigned user.
     */
    userSeqId: number;
}

export interface GetResourceGroupResourceGroupDetailFirmwareRepositoryDeploymentDeploymentDevice {
    /**
     * Indicates whether the deployment device is associated with a brownfield deployment.
     */
    brownfield: boolean;
    /**
     * The brownfield status of the deployment device.
     */
    brownfieldStatus: string;
    /**
     * Indicates whether the deployment device has a cloud link.
     */
    cloudLink: boolean;
    /**
     * The compliant state of the deployment device.
     */
    compliantState: string;
    /**
     * The component ID associated with the deployment device.
     */
    componentId: string;
    /**
     * The current IP address of the deployment device.
     */
    currentIpAddress: string;
    /**
     * Indicates whether the deployment device has Direct-Attached Storage (DAS) cache.
     */
    dasCache: boolean;
    /**
     * The name of the device group associated with the deployment device.
     */
    deviceGroupName: string;
    /**
     * The health status of the deployment device.
     */
    deviceHealth: string;
    /**
     * The state of the deployment device.
     */
    deviceState: string;
    /**
     * The type of device associated with the deployment device.
     */
    deviceType: string;
    /**
     * The health message associated with the deployment device.
     */
    healthMessage: string;
    /**
     * The IP address of the deployment device.
     */
    ipAddress: string;
    /**
     * The log dump information associated with the deployment device.
     */
    logDump: string;
    /**
     * The model of the deployment device.
     */
    model: string;
    /**
     * The Puppet certificate name associated with the deployment device.
     */
    puppetCertName: string;
    /**
     * The reference ID associated with the deployment device.
     */
    refId: string;
    /**
     * The reference type associated with the deployment device.
     */
    refType: string;
    /**
     * The service tag associated with the deployment device.
     */
    serviceTag: string;
    /**
     * The status of the deployment device.
     */
    status: string;
    /**
     * The end time of the status for the deployment device.
     */
    statusEndTime: string;
    /**
     * The status message associated with the deployment device.
     */
    statusMessage: string;
    /**
     * The start time of the status for the deployment device.
     */
    statusStartTime: string;
}

export interface GetResourceGroupResourceGroupDetailFirmwareRepositoryDeploymentDeploymentValid {
    /**
     * List of messages related to the deployment.
     */
    messages: outputs.GetResourceGroupResourceGroupDetailFirmwareRepositoryDeploymentDeploymentValidMessage[];
    /**
     * Indicates whether the deployment is valid.
     */
    valid: boolean;
}

export interface GetResourceGroupResourceGroupDetailFirmwareRepositoryDeploymentDeploymentValidMessage {
    /**
     * The identifier of the agent associated with the message.
     */
    agentId: string;
    /**
     * The category or type of the message.
     */
    category: string;
    /**
     * The identifier used to correlate related messages.
     */
    correlationId: string;
    /**
     * A detailed version or description of the message.
     */
    detailedMessage: string;
    /**
     * The message to be displayed or shown.
     */
    displayMessage: string;
    /**
     * The unique identifier for the message.
     */
    id: string;
    /**
     * The bundle or group to which the message belongs.
     */
    messageBundle: string;
    /**
     * The code associated with the message.
     */
    messageCode: string;
    /**
     * The action to be taken in response to the message.
     */
    responseAction: string;
    /**
     * The sequence number of the message in a series.
     */
    sequenceNumber: number;
    /**
     * The severity level of the message (e.g., INFO, WARNING, ERROR).
     */
    severity: string;
    /**
     * The timestamp indicating when the message was generated.
     */
    timeStamp: string;
}

export interface GetResourceGroupResourceGroupDetailFirmwareRepositoryDeploymentDeploymentValidationResponse {
    /**
     * Indicates whether the deployment can be executed.
     */
    canDeploy: boolean;
    /**
     * Indicates whether there is a disk type mismatch in the deployment.
     */
    diskTypeMismatch: boolean;
    /**
     * The number of drives per storage pool in the deployment.
     */
    drivesPerStoragePool: number;
    /**
     * A list of hostnames associated with the deployment.
     */
    hostnames: string[];
    /**
     * The maximum scalability of the deployment.
     */
    maxScalability: number;
    /**
     * The disk types associated with new nodes in the deployment.
     */
    newNodeDiskTypes: string[];
    /**
     * The number of fault sets in the deployment.
     */
    noOfFaultSets: number;
    /**
     * The number of nodes in the deployment.
     */
    nodes: number;
    /**
     * The number of nodes per fault set in the deployment.
     */
    nodesPerFaultSet: number;
    /**
     * The number of service volumes in the deployment.
     */
    numberOfServiceVolumes: number;
    /**
     * The protection domain associated with the deployment.
     */
    protectionDomain: string;
    /**
     * The disk types associated with each storage pool in the deployment.
     */
    storagePoolDiskTypes: string[];
    /**
     * The number of storage pools in the deployment.
     */
    storagePools: number;
    /**
     * The number of virtual machines in the deployment.
     */
    virtualMachines: number;
    /**
     * A list of warning messages associated with the deployment validation.
     */
    warningMessages: string[];
}

export interface GetResourceGroupResourceGroupDetailFirmwareRepositoryDeploymentJobDetail {
    /**
     * The unique identifier of the component associated with the job.
     */
    componentId: string;
    /**
     * The unique identifier of the job execution.
     */
    executionId: string;
    /**
     * The log level of the job.
     */
    level: string;
    /**
     * The log message of the job.
     */
    message: string;
    /**
     * The timestamp of the job execution.
     */
    timestamp: string;
}

export interface GetResourceGroupResourceGroupDetailFirmwareRepositoryDeploymentLicenseRepository {
    /**
     * The user who created the license repository.
     */
    createdBy: string;
    /**
     * The date when the license repository was created.
     */
    createdDate: string;
    /**
     * The disk location of the license repository.
     */
    diskLocation: string;
    /**
     * The filename associated with the license repository.
     */
    filename: string;
    /**
     * The unique identifier of the license repository.
     */
    id: string;
    /**
     * The license data associated with the license repository.
     */
    licenseData: string;
    /**
     * The name of the license repository.
     */
    name: string;
    /**
     * The state of the license repository.
     */
    state: string;
    /**
     * The type of the license repository.
     */
    type: string;
    /**
     * The user who last updated the license repository.
     */
    updatedBy: string;
    /**
     * The date when the license repository was last updated.
     */
    updatedDate: string;
}

export interface GetResourceGroupResourceGroupDetailFirmwareRepositoryDeploymentVm {
    /**
     * The certificate name associated with the virtual machine (VM).
     */
    certificateName: string;
    /**
     * The IP address of the virtual machine (VM).
     */
    vmIpaddress: string;
    /**
     * The manufacturer of the virtual machine (VM).
     */
    vmManufacturer: string;
    /**
     * The model of the virtual machine (VM).
     */
    vmModel: string;
    /**
     * The service tag associated with the virtual machine (VM).
     */
    vmServiceTag: string;
}

export interface GetResourceGroupResourceGroupDetailFirmwareRepositorySoftwareBundle {
    /**
     * The date when the software bundle was created.
     */
    bundleDate: string;
    /**
     * The type of the software bundle.
     */
    bundleType: string;
    /**
     * The user who initially created the software bundle.
     */
    createdBy: string;
    /**
     * The date when the software bundle was initially created.
     */
    createdDate: string;
    /**
     * The criticality level of the software bundle.
     */
    criticality: string;
    /**
     * Indicates whether the software bundle is custom.
     */
    custom: boolean;
    /**
     * A brief description of the software bundle.
     */
    description: string;
    /**
     * The model of the device associated with the software bundle.
     */
    deviceModel: string;
    /**
     * The type of device associated with the software bundle.
     */
    deviceType: string;
    /**
     * The identifier of the firmware repository associated with the software bundle.
     */
    fwRepositoryId: string;
    /**
     * The unique identifier for the software bundle.
     */
    id: string;
    /**
     * The name of the software bundle.
     */
    name: string;
    /**
     * Indicates whether the software bundle needs attention.
     */
    needsAttention: boolean;
    /**
     * List of software components associated with the software bundle.
     */
    softwareComponents: outputs.GetResourceGroupResourceGroupDetailFirmwareRepositorySoftwareBundleSoftwareComponent[];
    /**
     * The user who last updated the software bundle.
     */
    updatedBy: string;
    /**
     * The date when the software bundle was last updated.
     */
    updatedDate: string;
    /**
     * Indicates whether the software bundle is a user-specific bundle.
     */
    userBundle: boolean;
    /**
     * The MD5 hash value of the user-specific software bundle.
     */
    userBundleHashMd5: string;
    /**
     * The path associated with the user-specific software bundle.
     */
    userBundlePath: string;
    /**
     * The version of the software bundle.
     */
    version: string;
}

export interface GetResourceGroupResourceGroupDetailFirmwareRepositorySoftwareBundleSoftwareComponent {
    /**
     * The category to which the component belongs.
     */
    category: string;
    /**
     * The identifier of the component.
     */
    componentId: string;
    /**
     * The type of the component.
     */
    componentType: string;
    /**
     * The user who created the component.
     */
    createdBy: string;
    /**
     * The date when the component was created.
     */
    createdDate: string;
    /**
     * Indicates whether the component is custom or not.
     */
    custom: boolean;
    /**
     * The version of the component according to Dell standards.
     */
    dellVersion: string;
    /**
     * The identifier of the device associated with the component.
     */
    deviceId: string;
    /**
     * The name of the firmware repository associated with the component.
     */
    firmwareRepoName: string;
    /**
     * The MD5 hash value of the component.
     */
    hashMd5: string;
    /**
     * The unique identifier for the software component.
     */
    id: string;
    /**
     * Indicates whether the component should be ignored.
     */
    ignore: boolean;
    /**
     * The name of the software component.
     */
    name: string;
    /**
     * Indicates whether the component needs attention.
     */
    needsAttention: boolean;
    /**
     * The operating system associated with the component.
     */
    operatingSystem: string;
    /**
     * The identifier of the original component.
     */
    originalComponentId: string;
    /**
     * The original version of the component.
     */
    originalVersion: string;
    /**
     * The identifier of the package to which the component belongs.
     */
    packageId: string;
    /**
     * The path where the component is stored.
     */
    path: string;
    /**
     * The sub-identifier of the device associated with the component.
     */
    subDeviceId: string;
    /**
     * The sub-identifier of the vendor associated with the component.
     */
    subVendorId: string;
    /**
     * List of system IDs associated with the component.
     */
    systemIds: string[];
    /**
     * The user who last updated the component.
     */
    updatedBy: string;
    /**
     * The date when the component was last updated.
     */
    updatedDate: string;
    /**
     * The identifier of the vendor associated with the component.
     */
    vendorId: string;
    /**
     * The version of the component according to the vendor's standards.
     */
    vendorVersion: string;
}

export interface GetResourceGroupResourceGroupDetailFirmwareRepositorySoftwareComponent {
    /**
     * The category to which the component belongs.
     */
    category: string;
    /**
     * The identifier of the component.
     */
    componentId: string;
    /**
     * The type of the component.
     */
    componentType: string;
    /**
     * The user who created the component.
     */
    createdBy: string;
    /**
     * The date when the component was created.
     */
    createdDate: string;
    /**
     * Indicates whether the component is custom or not.
     */
    custom: boolean;
    /**
     * The version of the component according to Dell standards.
     */
    dellVersion: string;
    /**
     * The identifier of the device associated with the component.
     */
    deviceId: string;
    /**
     * The name of the firmware repository associated with the component.
     */
    firmwareRepoName: string;
    /**
     * The MD5 hash value of the component.
     */
    hashMd5: string;
    /**
     * The unique identifier for the software component.
     */
    id: string;
    /**
     * Indicates whether the component should be ignored.
     */
    ignore: boolean;
    /**
     * The name of the software component.
     */
    name: string;
    /**
     * Indicates whether the component needs attention.
     */
    needsAttention: boolean;
    /**
     * The operating system associated with the component.
     */
    operatingSystem: string;
    /**
     * The identifier of the original component.
     */
    originalComponentId: string;
    /**
     * The original version of the component.
     */
    originalVersion: string;
    /**
     * The identifier of the package to which the component belongs.
     */
    packageId: string;
    /**
     * The path where the component is stored.
     */
    path: string;
    /**
     * The sub-identifier of the device associated with the component.
     */
    subDeviceId: string;
    /**
     * The sub-identifier of the vendor associated with the component.
     */
    subVendorId: string;
    /**
     * List of system IDs associated with the component.
     */
    systemIds: string[];
    /**
     * The user who last updated the component.
     */
    updatedBy: string;
    /**
     * The date when the component was last updated.
     */
    updatedDate: string;
    /**
     * The identifier of the vendor associated with the component.
     */
    vendorId: string;
    /**
     * The version of the component according to the vendor's standards.
     */
    vendorVersion: string;
}

export interface GetResourceGroupResourceGroupDetailJobDetail {
    /**
     * The unique identifier of the component associated with the job.
     */
    componentId: string;
    /**
     * The unique identifier of the job execution.
     */
    executionId: string;
    /**
     * The log level of the job.
     */
    level: string;
    /**
     * The log message of the job.
     */
    message: string;
    /**
     * The timestamp of the job execution.
     */
    timestamp: string;
}

export interface GetResourceGroupResourceGroupDetailLicenseRepository {
    /**
     * The user who created the license repository.
     */
    createdBy: string;
    /**
     * The date when the license repository was created.
     */
    createdDate: string;
    /**
     * The disk location of the license repository.
     */
    diskLocation: string;
    /**
     * The filename associated with the license repository.
     */
    filename: string;
    /**
     * The unique identifier of the license repository.
     */
    id: string;
    /**
     * The license data associated with the license repository.
     */
    licenseData: string;
    /**
     * The name of the license repository.
     */
    name: string;
    /**
     * The state of the license repository.
     */
    state: string;
    /**
     * The type of the license repository.
     */
    type: string;
    /**
     * The user who last updated the license repository.
     */
    updatedBy: string;
    /**
     * The date when the license repository was last updated.
     */
    updatedDate: string;
}

export interface GetResourceGroupResourceGroupDetailMessage {
    /**
     * The identifier of the agent associated with the message.
     */
    agentId: string;
    /**
     * The category or type of the message.
     */
    category: string;
    /**
     * The identifier used to correlate related messages.
     */
    correlationId: string;
    /**
     * A detailed version or description of the message.
     */
    detailedMessage: string;
    /**
     * The message to be displayed or shown.
     */
    displayMessage: string;
    /**
     * The unique identifier for the message.
     */
    id: string;
    /**
     * The bundle or group to which the message belongs.
     */
    messageBundle: string;
    /**
     * The code associated with the message.
     */
    messageCode: string;
    /**
     * The action to be taken in response to the message.
     */
    responseAction: string;
    /**
     * The sequence number of the message in a series.
     */
    sequenceNumber: number;
    /**
     * The severity level of the message (e.g., INFO, WARNING, ERROR).
     */
    severity: string;
    /**
     * The timestamp indicating when the message was generated.
     */
    timeStamp: string;
}

export interface GetResourceGroupResourceGroupDetailServiceTemplate {
    /**
     * Indicates whether all users are allowed for the template.
     */
    allUsersAllowed: boolean;
    /**
     * List of users assigned to the template.
     */
    assignedUsers: outputs.GetResourceGroupResourceGroupDetailServiceTemplateAssignedUser[];
    /**
     * The type of template for brownfield deployments.
     */
    brownfieldTemplateType: string;
    /**
     * The category to which the template belongs.
     */
    category: string;
    /**
     * The count of clusters associated with the template.
     */
    clusterCount: number;
    /**
     * List of components included in the template.
     */
    components: outputs.GetResourceGroupResourceGroupDetailServiceTemplateComponent[];
    /**
     * Details about the configuration settings of the template.
     */
    configuration: outputs.GetResourceGroupResourceGroupDetailServiceTemplateConfiguration;
    /**
     * The user who created the template.
     */
    createdBy: string;
    /**
     * The date when the template was created.
     */
    createdDate: string;
    /**
     * Indicates whether the template is in draft mode.
     */
    draft: boolean;
    /**
     * Details about the firmware repository used by the template.
     */
    firmwareRepository: outputs.GetResourceGroupResourceGroupDetailServiceTemplateFirmwareRepository;
    /**
     * The unique identifier for the template.
     */
    id: string;
    /**
     * Indicates whether the template is part of the current configuration.
     */
    inConfiguration: boolean;
    /**
     * The date when the template was last deployed.
     */
    lastDeployedDate: string;
    /**
     * Details about the license repository used by the template.
     */
    licenseRepository: outputs.GetResourceGroupResourceGroupDetailServiceTemplateLicenseRepository;
    /**
     * Indicates whether firmware is managed by the template.
     */
    manageFirmware: boolean;
    /**
     * List of networks associated with the template.
     */
    networks: outputs.GetResourceGroupResourceGroupDetailServiceTemplateNetwork[];
    /**
     * The ID of the original template if this is a derived template.
     */
    originalTemplateId: string;
    /**
     * The count of software-defined network appliances associated with the template.
     */
    sdnasCount: number;
    /**
     * The count of servers associated with the template.
     */
    serverCount: number;
    /**
     * The count of services associated with the template.
     */
    serviceCount: number;
    /**
     * The count of storage devices associated with the template.
     */
    storageCount: number;
    /**
     * The count of switches associated with the template.
     */
    switchCount: number;
    /**
     * The description of the template.
     */
    templateDescription: string;
    /**
     * Indicates whether the template is locked or not.
     */
    templateLocked: boolean;
    /**
     * The name of the template.
     */
    templateName: string;
    /**
     * The type/category of the template.
     */
    templateType: string;
    /**
     * Details about the validity of the template.
     */
    templateValid: outputs.GetResourceGroupResourceGroupDetailServiceTemplateTemplateValid;
    /**
     * The version of the template.
     */
    templateVersion: string;
    /**
     * The user who last updated the template.
     */
    updatedBy: string;
    /**
     * The date when the template was last updated.
     */
    updatedDate: string;
    /**
     * Indicates whether the default catalog is used for the template.
     */
    useDefaultCatalog: boolean;
    /**
     * The count of virtual machines associated with the template.
     */
    vmCount: number;
}

export interface GetResourceGroupResourceGroupDetailServiceTemplateAssignedUser {
    /**
     * The user who created the assigned user.
     */
    createdBy: string;
    /**
     * The date when the assigned user was created.
     */
    createdDate: string;
    /**
     * The domain name of the assigned user.
     */
    domainName: string;
    /**
     * The email address of the assigned user.
     */
    email: string;
    /**
     * Indicates whether the assigned user is enabled.
     */
    enabled: boolean;
    /**
     * The first name of the assigned user.
     */
    firstName: string;
    /**
     * The distinguished name (DN) of the group associated with the assigned user.
     */
    groupDn: string;
    /**
     * The name of the group associated with the assigned user.
     */
    groupName: string;
    /**
     * The unique identifier of the assigned user.
     */
    id: string;
    /**
     * The last name of the assigned user.
     */
    lastName: string;
    /**
     * The password associated with the assigned user.
     */
    password: string;
    /**
     * The phone number of the assigned user.
     */
    phoneNumber: string;
    /**
     * The role associated with the assigned user.
     */
    role: string;
    /**
     * The roles associated with the assigned user.
     */
    roles: string[];
    /**
     * Indicates whether the assigned user is a system user.
     */
    systemUser: boolean;
    /**
     * Indicates whether the user password needs to be updated.
     */
    updatePassword: boolean;
    /**
     * The user who last updated the assigned user.
     */
    updatedBy: string;
    /**
     * The date when the assigned user was last updated.
     */
    updatedDate: string;
    /**
     * The username of the assigned user.
     */
    userName: string;
    /**
     * The preferences of the assigned user.
     */
    userPreference: string;
    /**
     * The sequential ID of the assigned user.
     */
    userSeqId: number;
}

export interface GetResourceGroupResourceGroupDetailServiceTemplateComponent {
    /**
     * The ASM GUID (Global Unique Identifier) associated with the component.
     */
    asmGuid: string;
    /**
     * Indicates whether the component is brownfield.
     */
    brownfield: boolean;
    /**
     * Indicates whether the component has changed.
     */
    changed: boolean;
    /**
     * Indicates whether the component is cloned.
     */
    cloned: boolean;
    /**
     * The ASM GUID from which the component is cloned.
     */
    clonedFromAsmGuid: string;
    /**
     * The identifier of the component from which this component is cloned.
     */
    clonedFromId: string;
    /**
     * The identifier for the component.
     */
    componentId: string;
    /**
     * Information about the validity of the component.
     */
    componentValid: outputs.GetResourceGroupResourceGroupDetailServiceTemplateComponentComponentValid;
    /**
     * The configuration file associated with the component.
     */
    configFile: string;
    /**
     * Help text associated with the component.
     */
    helpText: string;
    /**
     * The unique identifier for the component.
     */
    id: string;
    /**
     * The identifier for the component.
     */
    identifier: string;
    /**
     * The number of instances of the component.
     */
    instances: number;
    /**
     * The IP address associated with the component.
     */
    ip: string;
    /**
     * Indicates whether firmware is managed for the component.
     */
    manageFirmware: boolean;
    /**
     * The management IP address of the component.
     */
    managementIpAddress: string;
    /**
     * The name of the component.
     */
    name: string;
    /**
     * The OS Puppet certificate name associated with the component.
     */
    osPuppetCertName: string;
    /**
     * The Puppet certificate name associated with the component.
     */
    puppetCertName: string;
    /**
     * The reference identifier associated with the component.
     */
    refId: string;
    /**
     * Related components associated with this component.
     */
    relatedComponents: {[key: string]: string};
    /**
     * List of resources associated with the component.
     */
    resources: outputs.GetResourceGroupResourceGroupDetailServiceTemplateComponentResource[];
    /**
     * The serial number of the component.
     */
    serialNumber: string;
    /**
     * The sub-type of the component.
     */
    subType: string;
    /**
     * Indicates whether the component should be torn down.
     */
    teardown: boolean;
    /**
     * The type of the component.
     */
    type: string;
}

export interface GetResourceGroupResourceGroupDetailServiceTemplateComponentComponentValid {
    /**
     * List of messages associated with the component validity.
     */
    messages: outputs.GetResourceGroupResourceGroupDetailServiceTemplateComponentComponentValidMessage[];
    /**
     * Indicates whether the component is valid.
     */
    valid: boolean;
}

export interface GetResourceGroupResourceGroupDetailServiceTemplateComponentComponentValidMessage {
    /**
     * The identifier of the agent associated with the message.
     */
    agentId: string;
    /**
     * The category or type of the message.
     */
    category: string;
    /**
     * The identifier used to correlate related messages.
     */
    correlationId: string;
    /**
     * A detailed version or description of the message.
     */
    detailedMessage: string;
    /**
     * The message to be displayed or shown.
     */
    displayMessage: string;
    /**
     * The unique identifier for the message.
     */
    id: string;
    /**
     * The bundle or group to which the message belongs.
     */
    messageBundle: string;
    /**
     * The code associated with the message.
     */
    messageCode: string;
    /**
     * The action to be taken in response to the message.
     */
    responseAction: string;
    /**
     * The sequence number of the message in a series.
     */
    sequenceNumber: number;
    /**
     * The severity level of the message (e.g., INFO, WARNING, ERROR).
     */
    severity: string;
    /**
     * The timestamp indicating when the message was generated.
     */
    timeStamp: string;
}

export interface GetResourceGroupResourceGroupDetailServiceTemplateComponentResource {
    /**
     * The display name for the resources.
     */
    displayName: string;
    /**
     * The globally unique identifier (GUID) for the resources.
     */
    guid: string;
    /**
     * The identifier for the resources.
     */
    id: string;
}

export interface GetResourceGroupResourceGroupDetailServiceTemplateConfiguration {
    /**
     * List of categories associated with the configuration.
     */
    categories: outputs.GetResourceGroupResourceGroupDetailServiceTemplateConfigurationCategory[];
    /**
     * Comparator used in the configuration.
     */
    comparator: string;
    /**
     * Fully Qualified Device Descriptor (FQDD) of the controller in the configuration.
     */
    controllerFqdd: string;
    /**
     * Type of disk in the configuration.
     */
    disktype: string;
    /**
     * Unique identifier for the configuration.
     */
    id: string;
    /**
     * Number of disks in the configuration.
     */
    numberofdisks: number;
    /**
     * RAID level of the configuration.
     */
    raidlevel: string;
    /**
     * Fully Qualified Device Descriptor (FQDD) of the virtual disk in the configuration.
     */
    virtualDiskFqdd: string;
}

export interface GetResourceGroupResourceGroupDetailServiceTemplateConfigurationCategory {
    /**
     * The type of device associated with the category.
     */
    deviceType: string;
    /**
     * The display name of the category.
     */
    displayName: string;
    /**
     * The unique identifier for the category.
     */
    id: string;
}

export interface GetResourceGroupResourceGroupDetailServiceTemplateFirmwareRepository {
    /**
     * The count of software bundles in the firmware repository.
     */
    bundleCount: number;
    /**
     * The count of software components in the firmware repository.
     */
    componentCount: number;
    /**
     * The user who created the firmware repository.
     */
    createdBy: string;
    /**
     * The date when the firmware repository was created.
     */
    createdDate: string;
    /**
     * Indicates whether the firmware repository is custom.
     */
    custom: boolean;
    /**
     * Indicates whether the firmware repository is the default catalog.
     */
    defaultCatalog: boolean;
    /**
     * List of deployments associated with the firmware repository.
     */
    deployments: outputs.GetResourceGroupResourceGroupDetailServiceTemplateFirmwareRepositoryDeployment[];
    /**
     * The location on disk where the firmware repository is stored.
     */
    diskLocation: string;
    /**
     * The progress of the download for the firmware repository.
     */
    downloadProgress: number;
    /**
     * The download status of the firmware repository.
     */
    downloadStatus: string;
    /**
     * Indicates whether the firmware repository is embedded.
     */
    embedded: boolean;
    /**
     * The progress of the extraction for the firmware repository.
     */
    extractProgress: number;
    /**
     * The size of the firmware repository file in gigabytes.
     */
    fileSizeInGigabytes: number;
    /**
     * The filename of the firmware repository.
     */
    filename: string;
    /**
     * The unique identifier of the firmware repository.
     */
    id: string;
    /**
     * The unique identifier of the job associated with the firmware repository.
     */
    jobId: string;
    /**
     * The MD5 hash of the firmware repository.
     */
    md5Hash: string;
    /**
     * Indicates whether the firmware repository is minimal.
     */
    minimal: boolean;
    /**
     * The name of the firmware repository.
     */
    name: string;
    /**
     * Indicates whether the firmware repository needs attention.
     */
    needsAttention: boolean;
    /**
     * The password associated with the firmware repository.
     */
    password: string;
    /**
     * Indicates whether the firmware repository is RCM approved.
     */
    rcmapproved: boolean;
    /**
     * The signature of the firmware repository.
     */
    signature: string;
    /**
     * The source location of the signed key associated with the firmware repository.
     */
    signedKeySourceLocation: string;
    /**
     * List of software bundles associated with the firmware repository.
     */
    softwareBundles: outputs.GetResourceGroupResourceGroupDetailServiceTemplateFirmwareRepositorySoftwareBundle[];
    /**
     * List of software components associated with the firmware repository.
     */
    softwareComponents: outputs.GetResourceGroupResourceGroupDetailServiceTemplateFirmwareRepositorySoftwareComponent[];
    /**
     * The location of the source for the firmware repository.
     */
    sourceLocation: string;
    /**
     * The type of the source for the firmware repository.
     */
    sourceType: string;
    /**
     * The state of the firmware repository.
     */
    state: string;
    /**
     * The user who last updated the firmware repository.
     */
    updatedBy: string;
    /**
     * The date when the firmware repository was last updated.
     */
    updatedDate: string;
    /**
     * The count of user-specific software bundles in the firmware repository.
     */
    userBundleCount: number;
    /**
     * The username associated with the firmware repository.
     */
    username: string;
}

export interface GetResourceGroupResourceGroupDetailServiceTemplateFirmwareRepositoryDeployment {
    /**
     * Indicates whether all users are allowed for the deployment.
     */
    allUsersAllowed: boolean;
    /**
     * List of users assigned to the deployment.
     */
    assignedUsers: outputs.GetResourceGroupResourceGroupDetailServiceTemplateFirmwareRepositoryDeploymentAssignedUser[];
    /**
     * Indicates whether the deployment involves brownfield operations.
     */
    brownfield: boolean;
    /**
     * Indicates whether migration of cluster virtual machines is allowed.
     */
    canMigratevClsvMs: boolean;
    /**
     * Indicates whether the deployment is compliant.
     */
    compliant: boolean;
    /**
     * Specifies whether there has been a change in the deployment configuration.
     */
    configurationChange: boolean;
    /**
     * The user who created the deployment.
     */
    createdBy: string;
    /**
     * The date when the deployment was created.
     */
    createdDate: string;
    /**
     * The current batch count during deployment.
     */
    currentBatchCount: string;
    /**
     * The current step count during deployment.
     */
    currentStepCount: string;
    /**
     * The message associated with the current step during deployment.
     */
    currentStepMessage: string;
    /**
     * The custom image used for deployment.
     */
    customImage: string;
    /**
     * The description of the deployment.
     */
    deploymentDescription: string;
    /**
     * List of devices associated with the deployment.
     */
    deploymentDevices: outputs.GetResourceGroupResourceGroupDetailServiceTemplateFirmwareRepositoryDeploymentDeploymentDevice[];
    /**
     * The date when the deployment finished.
     */
    deploymentFinishedDate: string;
    /**
     * The type of health status associated with the deployment.
     */
    deploymentHealthStatusType: string;
    /**
     * The name of the deployment.
     */
    deploymentName: string;
    /**
     * The scheduled date for the deployment.
     */
    deploymentScheduledDate: string;
    /**
     * The date when the deployment started.
     */
    deploymentStartedDate: string;
    /**
     * Details about the validity of the deployment.
     */
    deploymentValid: outputs.GetResourceGroupResourceGroupDetailServiceTemplateFirmwareRepositoryDeploymentDeploymentValid;
    /**
     * Details about the validation response for the deployment.
     */
    deploymentValidationResponse: outputs.GetResourceGroupResourceGroupDetailServiceTemplateFirmwareRepositoryDeploymentDeploymentValidationResponse;
    /**
     * Indicates whether disruptive firmware actions are allowed.
     */
    disruptiveFirmware: boolean;
    /**
     * Indicates whether firmware initialization is performed during deployment.
     */
    firmwareInit: boolean;
    /**
     * The ID of the firmware repository associated with the deployment.
     */
    firmwareRepositoryId: string;
    /**
     * The unique identifier of the deployment.
     */
    id: string;
    /**
     * Indicates whether to perform individual teardown for the deployment.
     */
    individualTeardown: boolean;
    /**
     * List of job details associated with the deployment.
     */
    jobDetails: outputs.GetResourceGroupResourceGroupDetailServiceTemplateFirmwareRepositoryDeploymentJobDetail[];
    /**
     * Details about the license repository associated with the deployment.
     */
    licenseRepository: outputs.GetResourceGroupResourceGroupDetailServiceTemplateFirmwareRepositoryDeploymentLicenseRepository;
    /**
     * The ID of the license repository associated with the deployment.
     */
    licenseRepositoryId: string;
    /**
     * Indicates whether the deployment is in lifecycle mode.
     */
    lifecycleMode: boolean;
    /**
     * List of reasons for the lifecycle mode of the deployment.
     */
    lifecycleModeReasons: string[];
    /**
     * Indicates whether the deployment is a no-op (no operation).
     */
    noOp: boolean;
    /**
     * The total number of deployments.
     */
    numberOfDeployments: number;
    /**
     * Additional data associated with the operation.
     */
    operationData: string;
    /**
     * The status of the operation associated with the deployment.
     */
    operationStatus: string;
    /**
     * The type of operation associated with the deployment.
     */
    operationType: string;
    /**
     * The ID of the original deployment.
     */
    originalDeploymentId: string;
    /**
     * The overall health status of the device in the deployment.
     */
    overallDeviceHealth: string;
    /**
     * The owner of the deployment.
     */
    owner: string;
    /**
     * The precalculated health of devices associated with the deployment.
     */
    precalculatedDeviceHealth: string;
    /**
     * Indicates whether to preconfigure SVM (Storage Virtual Machine).
     */
    preconfigureSvm: boolean;
    /**
     * Indicates whether to preconfigure SVM and perform an update.
     */
    preconfigureSvmAndUpdate: boolean;
    /**
     * Indicates whether the associated service should be removed.
     */
    removeService: boolean;
    /**
     * Indicates whether the deployment should be retried.
     */
    retry: boolean;
    /**
     * Indicates whether the deployment involves scaling up.
     */
    scaleUp: boolean;
    /**
     * The date when the deployment is scheduled.
     */
    scheduleDate: string;
    /**
     * Details about the services deployed during the deployment.
     */
    servicesDeployed: string;
    /**
     * The status of the deployment.
     */
    status: string;
    /**
     * Indicates whether the deployment should be torn down.
     */
    teardown: boolean;
    /**
     * Indicates whether teardown should occur after canceling the deployment.
     */
    teardownAfterCancel: boolean;
    /**
     * Indicates if the deployment template is valid.
     */
    templateValid: boolean;
    /**
     * The total number of batches involved in the deployment.
     */
    totalBatchCount: string;
    /**
     * The total number of steps involved in the deployment.
     */
    totalNumOfSteps: string;
    /**
     * Indicates whether to update server firmware during the deployment.
     */
    updateServerFirmware: boolean;
    /**
     * The user who last updated the deployment.
     */
    updatedBy: string;
    /**
     * The date when the deployment was last updated.
     */
    updatedDate: string;
    /**
     * Indicates whether to use the default catalog for the deployment.
     */
    useDefaultCatalog: boolean;
    /**
     * Specifies whether the deployment involves Virtual Desktop Infrastructure (VDI) configuration.
     */
    vds: boolean;
    /**
     * List of virtual machines associated with the deployment.
     */
    vms: outputs.GetResourceGroupResourceGroupDetailServiceTemplateFirmwareRepositoryDeploymentVm[];
}

export interface GetResourceGroupResourceGroupDetailServiceTemplateFirmwareRepositoryDeploymentAssignedUser {
    /**
     * The user who created the assigned user.
     */
    createdBy: string;
    /**
     * The date when the assigned user was created.
     */
    createdDate: string;
    /**
     * The domain name of the assigned user.
     */
    domainName: string;
    /**
     * The email address of the assigned user.
     */
    email: string;
    /**
     * Indicates whether the assigned user is enabled.
     */
    enabled: boolean;
    /**
     * The first name of the assigned user.
     */
    firstName: string;
    /**
     * The distinguished name (DN) of the group associated with the assigned user.
     */
    groupDn: string;
    /**
     * The name of the group associated with the assigned user.
     */
    groupName: string;
    /**
     * The unique identifier of the assigned user.
     */
    id: string;
    /**
     * The last name of the assigned user.
     */
    lastName: string;
    /**
     * The password associated with the assigned user.
     */
    password: string;
    /**
     * The phone number of the assigned user.
     */
    phoneNumber: string;
    /**
     * The role associated with the assigned user.
     */
    role: string;
    /**
     * The roles associated with the assigned user.
     */
    roles: string[];
    /**
     * Indicates whether the assigned user is a system user.
     */
    systemUser: boolean;
    /**
     * Indicates whether the user password needs to be updated.
     */
    updatePassword: boolean;
    /**
     * The user who last updated the assigned user.
     */
    updatedBy: string;
    /**
     * The date when the assigned user was last updated.
     */
    updatedDate: string;
    /**
     * The username of the assigned user.
     */
    userName: string;
    /**
     * The preferences of the assigned user.
     */
    userPreference: string;
    /**
     * The sequential ID of the assigned user.
     */
    userSeqId: number;
}

export interface GetResourceGroupResourceGroupDetailServiceTemplateFirmwareRepositoryDeploymentDeploymentDevice {
    /**
     * Indicates whether the deployment device is associated with a brownfield deployment.
     */
    brownfield: boolean;
    /**
     * The brownfield status of the deployment device.
     */
    brownfieldStatus: string;
    /**
     * Indicates whether the deployment device has a cloud link.
     */
    cloudLink: boolean;
    /**
     * The compliant state of the deployment device.
     */
    compliantState: string;
    /**
     * The component ID associated with the deployment device.
     */
    componentId: string;
    /**
     * The current IP address of the deployment device.
     */
    currentIpAddress: string;
    /**
     * Indicates whether the deployment device has Direct-Attached Storage (DAS) cache.
     */
    dasCache: boolean;
    /**
     * The name of the device group associated with the deployment device.
     */
    deviceGroupName: string;
    /**
     * The health status of the deployment device.
     */
    deviceHealth: string;
    /**
     * The state of the deployment device.
     */
    deviceState: string;
    /**
     * The type of device associated with the deployment device.
     */
    deviceType: string;
    /**
     * The health message associated with the deployment device.
     */
    healthMessage: string;
    /**
     * The IP address of the deployment device.
     */
    ipAddress: string;
    /**
     * The log dump information associated with the deployment device.
     */
    logDump: string;
    /**
     * The model of the deployment device.
     */
    model: string;
    /**
     * The Puppet certificate name associated with the deployment device.
     */
    puppetCertName: string;
    /**
     * The reference ID associated with the deployment device.
     */
    refId: string;
    /**
     * The reference type associated with the deployment device.
     */
    refType: string;
    /**
     * The service tag associated with the deployment device.
     */
    serviceTag: string;
    /**
     * The status of the deployment device.
     */
    status: string;
    /**
     * The end time of the status for the deployment device.
     */
    statusEndTime: string;
    /**
     * The status message associated with the deployment device.
     */
    statusMessage: string;
    /**
     * The start time of the status for the deployment device.
     */
    statusStartTime: string;
}

export interface GetResourceGroupResourceGroupDetailServiceTemplateFirmwareRepositoryDeploymentDeploymentValid {
    /**
     * List of messages related to the deployment.
     */
    messages: outputs.GetResourceGroupResourceGroupDetailServiceTemplateFirmwareRepositoryDeploymentDeploymentValidMessage[];
    /**
     * Indicates whether the deployment is valid.
     */
    valid: boolean;
}

export interface GetResourceGroupResourceGroupDetailServiceTemplateFirmwareRepositoryDeploymentDeploymentValidMessage {
    /**
     * The identifier of the agent associated with the message.
     */
    agentId: string;
    /**
     * The category or type of the message.
     */
    category: string;
    /**
     * The identifier used to correlate related messages.
     */
    correlationId: string;
    /**
     * A detailed version or description of the message.
     */
    detailedMessage: string;
    /**
     * The message to be displayed or shown.
     */
    displayMessage: string;
    /**
     * The unique identifier for the message.
     */
    id: string;
    /**
     * The bundle or group to which the message belongs.
     */
    messageBundle: string;
    /**
     * The code associated with the message.
     */
    messageCode: string;
    /**
     * The action to be taken in response to the message.
     */
    responseAction: string;
    /**
     * The sequence number of the message in a series.
     */
    sequenceNumber: number;
    /**
     * The severity level of the message (e.g., INFO, WARNING, ERROR).
     */
    severity: string;
    /**
     * The timestamp indicating when the message was generated.
     */
    timeStamp: string;
}

export interface GetResourceGroupResourceGroupDetailServiceTemplateFirmwareRepositoryDeploymentDeploymentValidationResponse {
    /**
     * Indicates whether the deployment can be executed.
     */
    canDeploy: boolean;
    /**
     * Indicates whether there is a disk type mismatch in the deployment.
     */
    diskTypeMismatch: boolean;
    /**
     * The number of drives per storage pool in the deployment.
     */
    drivesPerStoragePool: number;
    /**
     * A list of hostnames associated with the deployment.
     */
    hostnames: string[];
    /**
     * The maximum scalability of the deployment.
     */
    maxScalability: number;
    /**
     * The disk types associated with new nodes in the deployment.
     */
    newNodeDiskTypes: string[];
    /**
     * The number of fault sets in the deployment.
     */
    noOfFaultSets: number;
    /**
     * The number of nodes in the deployment.
     */
    nodes: number;
    /**
     * The number of nodes per fault set in the deployment.
     */
    nodesPerFaultSet: number;
    /**
     * The number of service volumes in the deployment.
     */
    numberOfServiceVolumes: number;
    /**
     * The protection domain associated with the deployment.
     */
    protectionDomain: string;
    /**
     * The disk types associated with each storage pool in the deployment.
     */
    storagePoolDiskTypes: string[];
    /**
     * The number of storage pools in the deployment.
     */
    storagePools: number;
    /**
     * The number of virtual machines in the deployment.
     */
    virtualMachines: number;
    /**
     * A list of warning messages associated with the deployment validation.
     */
    warningMessages: string[];
}

export interface GetResourceGroupResourceGroupDetailServiceTemplateFirmwareRepositoryDeploymentJobDetail {
    /**
     * The unique identifier of the component associated with the job.
     */
    componentId: string;
    /**
     * The unique identifier of the job execution.
     */
    executionId: string;
    /**
     * The log level of the job.
     */
    level: string;
    /**
     * The log message of the job.
     */
    message: string;
    /**
     * The timestamp of the job execution.
     */
    timestamp: string;
}

export interface GetResourceGroupResourceGroupDetailServiceTemplateFirmwareRepositoryDeploymentLicenseRepository {
    /**
     * The user who created the license repository.
     */
    createdBy: string;
    /**
     * The date when the license repository was created.
     */
    createdDate: string;
    /**
     * The disk location of the license repository.
     */
    diskLocation: string;
    /**
     * The filename associated with the license repository.
     */
    filename: string;
    /**
     * The unique identifier of the license repository.
     */
    id: string;
    /**
     * The license data associated with the license repository.
     */
    licenseData: string;
    /**
     * The name of the license repository.
     */
    name: string;
    /**
     * The state of the license repository.
     */
    state: string;
    /**
     * The type of the license repository.
     */
    type: string;
    /**
     * The user who last updated the license repository.
     */
    updatedBy: string;
    /**
     * The date when the license repository was last updated.
     */
    updatedDate: string;
}

export interface GetResourceGroupResourceGroupDetailServiceTemplateFirmwareRepositoryDeploymentVm {
    /**
     * The certificate name associated with the virtual machine (VM).
     */
    certificateName: string;
    /**
     * The IP address of the virtual machine (VM).
     */
    vmIpaddress: string;
    /**
     * The manufacturer of the virtual machine (VM).
     */
    vmManufacturer: string;
    /**
     * The model of the virtual machine (VM).
     */
    vmModel: string;
    /**
     * The service tag associated with the virtual machine (VM).
     */
    vmServiceTag: string;
}

export interface GetResourceGroupResourceGroupDetailServiceTemplateFirmwareRepositorySoftwareBundle {
    /**
     * The date when the software bundle was created.
     */
    bundleDate: string;
    /**
     * The type of the software bundle.
     */
    bundleType: string;
    /**
     * The user who initially created the software bundle.
     */
    createdBy: string;
    /**
     * The date when the software bundle was initially created.
     */
    createdDate: string;
    /**
     * The criticality level of the software bundle.
     */
    criticality: string;
    /**
     * Indicates whether the software bundle is custom.
     */
    custom: boolean;
    /**
     * A brief description of the software bundle.
     */
    description: string;
    /**
     * The model of the device associated with the software bundle.
     */
    deviceModel: string;
    /**
     * The type of device associated with the software bundle.
     */
    deviceType: string;
    /**
     * The identifier of the firmware repository associated with the software bundle.
     */
    fwRepositoryId: string;
    /**
     * The unique identifier for the software bundle.
     */
    id: string;
    /**
     * The name of the software bundle.
     */
    name: string;
    /**
     * Indicates whether the software bundle needs attention.
     */
    needsAttention: boolean;
    /**
     * List of software components associated with the software bundle.
     */
    softwareComponents: outputs.GetResourceGroupResourceGroupDetailServiceTemplateFirmwareRepositorySoftwareBundleSoftwareComponent[];
    /**
     * The user who last updated the software bundle.
     */
    updatedBy: string;
    /**
     * The date when the software bundle was last updated.
     */
    updatedDate: string;
    /**
     * Indicates whether the software bundle is a user-specific bundle.
     */
    userBundle: boolean;
    /**
     * The MD5 hash value of the user-specific software bundle.
     */
    userBundleHashMd5: string;
    /**
     * The path associated with the user-specific software bundle.
     */
    userBundlePath: string;
    /**
     * The version of the software bundle.
     */
    version: string;
}

export interface GetResourceGroupResourceGroupDetailServiceTemplateFirmwareRepositorySoftwareBundleSoftwareComponent {
    /**
     * The category to which the component belongs.
     */
    category: string;
    /**
     * The identifier of the component.
     */
    componentId: string;
    /**
     * The type of the component.
     */
    componentType: string;
    /**
     * The user who created the component.
     */
    createdBy: string;
    /**
     * The date when the component was created.
     */
    createdDate: string;
    /**
     * Indicates whether the component is custom or not.
     */
    custom: boolean;
    /**
     * The version of the component according to Dell standards.
     */
    dellVersion: string;
    /**
     * The identifier of the device associated with the component.
     */
    deviceId: string;
    /**
     * The name of the firmware repository associated with the component.
     */
    firmwareRepoName: string;
    /**
     * The MD5 hash value of the component.
     */
    hashMd5: string;
    /**
     * The unique identifier for the software component.
     */
    id: string;
    /**
     * Indicates whether the component should be ignored.
     */
    ignore: boolean;
    /**
     * The name of the software component.
     */
    name: string;
    /**
     * Indicates whether the component needs attention.
     */
    needsAttention: boolean;
    /**
     * The operating system associated with the component.
     */
    operatingSystem: string;
    /**
     * The identifier of the original component.
     */
    originalComponentId: string;
    /**
     * The original version of the component.
     */
    originalVersion: string;
    /**
     * The identifier of the package to which the component belongs.
     */
    packageId: string;
    /**
     * The path where the component is stored.
     */
    path: string;
    /**
     * The sub-identifier of the device associated with the component.
     */
    subDeviceId: string;
    /**
     * The sub-identifier of the vendor associated with the component.
     */
    subVendorId: string;
    /**
     * List of system IDs associated with the component.
     */
    systemIds: string[];
    /**
     * The user who last updated the component.
     */
    updatedBy: string;
    /**
     * The date when the component was last updated.
     */
    updatedDate: string;
    /**
     * The identifier of the vendor associated with the component.
     */
    vendorId: string;
    /**
     * The version of the component according to the vendor's standards.
     */
    vendorVersion: string;
}

export interface GetResourceGroupResourceGroupDetailServiceTemplateFirmwareRepositorySoftwareComponent {
    /**
     * The category to which the component belongs.
     */
    category: string;
    /**
     * The identifier of the component.
     */
    componentId: string;
    /**
     * The type of the component.
     */
    componentType: string;
    /**
     * The user who created the component.
     */
    createdBy: string;
    /**
     * The date when the component was created.
     */
    createdDate: string;
    /**
     * Indicates whether the component is custom or not.
     */
    custom: boolean;
    /**
     * The version of the component according to Dell standards.
     */
    dellVersion: string;
    /**
     * The identifier of the device associated with the component.
     */
    deviceId: string;
    /**
     * The name of the firmware repository associated with the component.
     */
    firmwareRepoName: string;
    /**
     * The MD5 hash value of the component.
     */
    hashMd5: string;
    /**
     * The unique identifier for the software component.
     */
    id: string;
    /**
     * Indicates whether the component should be ignored.
     */
    ignore: boolean;
    /**
     * The name of the software component.
     */
    name: string;
    /**
     * Indicates whether the component needs attention.
     */
    needsAttention: boolean;
    /**
     * The operating system associated with the component.
     */
    operatingSystem: string;
    /**
     * The identifier of the original component.
     */
    originalComponentId: string;
    /**
     * The original version of the component.
     */
    originalVersion: string;
    /**
     * The identifier of the package to which the component belongs.
     */
    packageId: string;
    /**
     * The path where the component is stored.
     */
    path: string;
    /**
     * The sub-identifier of the device associated with the component.
     */
    subDeviceId: string;
    /**
     * The sub-identifier of the vendor associated with the component.
     */
    subVendorId: string;
    /**
     * List of system IDs associated with the component.
     */
    systemIds: string[];
    /**
     * The user who last updated the component.
     */
    updatedBy: string;
    /**
     * The date when the component was last updated.
     */
    updatedDate: string;
    /**
     * The identifier of the vendor associated with the component.
     */
    vendorId: string;
    /**
     * The version of the component according to the vendor's standards.
     */
    vendorVersion: string;
}

export interface GetResourceGroupResourceGroupDetailServiceTemplateLicenseRepository {
    /**
     * The user who created the license repository.
     */
    createdBy: string;
    /**
     * The date when the license repository was created.
     */
    createdDate: string;
    /**
     * The disk location of the license repository.
     */
    diskLocation: string;
    /**
     * The filename associated with the license repository.
     */
    filename: string;
    /**
     * The unique identifier of the license repository.
     */
    id: string;
    /**
     * The license data associated with the license repository.
     */
    licenseData: string;
    /**
     * The name of the license repository.
     */
    name: string;
    /**
     * The state of the license repository.
     */
    state: string;
    /**
     * The type of the license repository.
     */
    type: string;
    /**
     * The user who last updated the license repository.
     */
    updatedBy: string;
    /**
     * The date when the license repository was last updated.
     */
    updatedDate: string;
}

export interface GetResourceGroupResourceGroupDetailServiceTemplateNetwork {
    /**
     * The description of the network.
     */
    description: string;
    /**
     * The destination IP address for the network.
     */
    destinationIpAddress: string;
    /**
     * The unique identifier for the network.
     */
    id: string;
    /**
     * The name of the network.
     */
    name: string;
    /**
     * Boolean indicating if the network is static.
     */
    static: boolean;
    /**
     * The static network configuration settings.
     */
    staticNetworkConfiguration: outputs.GetResourceGroupResourceGroupDetailServiceTemplateNetworkStaticNetworkConfiguration;
    /**
     * The type of the network.
     */
    type: string;
    /**
     * The VLAN ID associated with the network.
     */
    vlanId: number;
}

export interface GetResourceGroupResourceGroupDetailServiceTemplateNetworkStaticNetworkConfiguration {
    /**
     * The DNS suffix for the static network configuration.
     */
    dnsSuffix: string;
    /**
     * The gateway for the static network configuration.
     */
    gateway: string;
    /**
     * The IP address associated with the static network configuration.
     */
    ipAddress: string;
    /**
     * List of IP ranges associated with the static network configuration.
     */
    ipRanges: outputs.GetResourceGroupResourceGroupDetailServiceTemplateNetworkStaticNetworkConfigurationIpRange[];
    /**
     * The primary DNS server for the static network configuration.
     */
    primaryDns: string;
    /**
     * The secondary DNS server for the static network configuration.
     */
    secondaryDns: string;
    /**
     * List of static routes associated with the static network configuration.
     */
    staticRoutes: outputs.GetResourceGroupResourceGroupDetailServiceTemplateNetworkStaticNetworkConfigurationStaticRoute[];
    /**
     * The subnet for the static network configuration.
     */
    subnet: string;
}

export interface GetResourceGroupResourceGroupDetailServiceTemplateNetworkStaticNetworkConfigurationIpRange {
    /**
     * The ending IP address of the range.
     */
    endingIp: string;
    /**
     * The unique identifier for the IP range.
     */
    id: string;
    /**
     * The role associated with the IP range.
     */
    role: string;
    /**
     * The starting IP address of the range.
     */
    startingIp: string;
}

export interface GetResourceGroupResourceGroupDetailServiceTemplateNetworkStaticNetworkConfigurationStaticRoute {
    /**
     * The IP address of the destination for the static route.
     */
    destinationIpAddress: string;
    /**
     * The ID of the destination network for the static route.
     */
    staticRouteDestinationNetworkId: string;
    /**
     * The gateway for the static route.
     */
    staticRouteGateway: string;
    /**
     * The ID of the source network for the static route.
     */
    staticRouteSourceNetworkId: string;
    /**
     * The subnet mask for the static route.
     */
    subnetMask: string;
}

export interface GetResourceGroupResourceGroupDetailServiceTemplateTemplateValid {
    /**
     * List of messages associated with the template validity.
     */
    messages: outputs.GetResourceGroupResourceGroupDetailServiceTemplateTemplateValidMessage[];
    /**
     * Indicates whether the template is valid.
     */
    valid: boolean;
}

export interface GetResourceGroupResourceGroupDetailServiceTemplateTemplateValidMessage {
    /**
     * The identifier of the agent associated with the message.
     */
    agentId: string;
    /**
     * The category or type of the message.
     */
    category: string;
    /**
     * The identifier used to correlate related messages.
     */
    correlationId: string;
    /**
     * A detailed version or description of the message.
     */
    detailedMessage: string;
    /**
     * The message to be displayed or shown.
     */
    displayMessage: string;
    /**
     * The unique identifier for the message.
     */
    id: string;
    /**
     * The bundle or group to which the message belongs.
     */
    messageBundle: string;
    /**
     * The code associated with the message.
     */
    messageCode: string;
    /**
     * The action to be taken in response to the message.
     */
    responseAction: string;
    /**
     * The sequence number of the message in a series.
     */
    sequenceNumber: number;
    /**
     * The severity level of the message (e.g., INFO, WARNING, ERROR).
     */
    severity: string;
    /**
     * The timestamp indicating when the message was generated.
     */
    timeStamp: string;
}

export interface GetResourceGroupResourceGroupDetailVm {
    /**
     * The certificate name associated with the virtual machine (VM).
     */
    certificateName: string;
    /**
     * The IP address of the virtual machine (VM).
     */
    vmIpaddress: string;
    /**
     * The manufacturer of the virtual machine (VM).
     */
    vmManufacturer: string;
    /**
     * The model of the virtual machine (VM).
     */
    vmModel: string;
    /**
     * The service tag associated with the virtual machine (VM).
     */
    vmServiceTag: string;
}

export interface GetSdcSdc {
    /**
     * The ID of the fetched SDC.
     */
    id: string;
    /**
     * The Links of the fetched SDC.
     */
    links: outputs.GetSdcSdcLink[];
    /**
     * The MDM connection status of the fetched SDC.
     */
    mdmConnectionState: string;
    /**
     * The name of the fetched SDC.
     */
    name: string;
    /**
     * If the fetched SDC is on vmware.
     */
    onVmware: boolean;
    /**
     * If the fetched SDC is approved.
     */
    sdcApproved: boolean;
    /**
     * The GUID of the fetched SDC.
     */
    sdcGuid: string;
    /**
     * The IP of the fetched SDC.
     */
    sdcIp: string;
    /**
     * The System ID of the fetched SDC.
     */
    systemId: string;
}

export interface GetSdcSdcLink {
    /**
     * The Links-HREF of the fetched SDC.
     */
    href: string;
    /**
     * The Links-Rel of the fetched SDC.
     */
    rel: string;
}

export interface GetSdsSdsDetail {
    /**
     * Authentication error.
     */
    authenticationError: string;
    /**
     * Certificate Information.
     */
    certificateInfo: outputs.GetSdsSdsDetailCertificateInfo;
    /**
     * Configured DRL mode.
     */
    configuredDrlMode: string;
    /**
     * DRL mode.
     */
    drlMode: string;
    /**
     * Fault set ID.
     */
    faultSetId: string;
    /**
     * FGL metadata cache size.
     */
    fglMetadataCacheSize: number;
    /**
     * FGL metadata cache state.
     */
    fglMetadataCacheState: string;
    /**
     * FGL concurrent writes.
     */
    fglNumConcurrentWrites: number;
    /**
     * SDS ID.
     */
    id: string;
    /**
     * List of IPs associated with SDS.
     */
    ipLists: outputs.GetSdsSdsDetailIpList[];
    /**
     * Last time SDS was upgraded.
     */
    lastUpgradeTime: number;
    /**
     * Specifies the links asscociated with SDS.
     */
    links: outputs.GetSdsSdsDetailLink[];
    /**
     * Maintenance state.
     */
    maintenanceState: string;
    /**
     * Maintenance type.
     */
    maintenanceType: string;
    /**
     * MDM connection state.
     */
    mdmConnectionState: string;
    /**
     * Membership state.
     */
    membershipState: string;
    /**
     * SDS name.
     */
    name: string;
    /**
     * Number of IO buffers.
     */
    numIoBuffers: number;
    /**
     * Number of restarts.
     */
    numRestarts: number;
    /**
     * Presence on VMware.
     */
    onVmware: boolean;
    /**
     * Performance profile.
     */
    performanceProfile: string;
    /**
     * SDS port.
     */
    port: number;
    /**
     * RAID controllers information.
     */
    raidControllers: outputs.GetSdsSdsDetailRaidController[];
    /**
     * Whether RF cache is enabled or not.
     */
    rfcacheEnabled: boolean;
    /**
     * RF cache error for API version mismatch.
     */
    rfcacheErrorApiVersionMismatch: boolean;
    /**
     * RF cache error for device does not exist.
     */
    rfcacheErrorDeviceDoesNotExist: boolean;
    /**
     * RF cache error for inconsistent cache configuration.
     */
    rfcacheErrorInconsistentCacheConfiguration: boolean;
    /**
     * RF cache error for inconsistent source configuration.
     */
    rfcacheErrorInconsistentSourceConfiguration: boolean;
    /**
     * RF cache error for invalid driver path.
     */
    rfcacheErrorInvalidDriverPath: boolean;
    /**
     * RF cache error for low resources.
     */
    rfcacheErrorLowResources: boolean;
    /**
     * Whether RM cache is enabled or not.
     */
    rmcacheEnabled: boolean;
    /**
     * Indicates whether the Read RAM Cache is currently temporarily not in use.
     */
    rmcacheFrozen: boolean;
    /**
     * Indicates the state of the memory allocation process. Can be one of `in progress` and `done`.
     */
    rmcacheMemoryAllocationState: string;
    /**
     * Indicates the size of Read RAM Cache on the specified SDS in KB.
     */
    rmcacheSize: number;
    /**
     * SDS configuration failure windows.
     */
    sdsConfigurationFailure: outputs.GetSdsSdsDetailSdsConfigurationFailure;
    /**
     * SDS decoupled windows.
     */
    sdsDecoupled: outputs.GetSdsSdsDetailSdsDecoupled;
    /**
     * SDS receive buffer allocation failure windows.
     */
    sdsReceiveBufferAllocationFailures: outputs.GetSdsSdsDetailSdsReceiveBufferAllocationFailures;
    /**
     * SDS state.
     */
    sdsState: string;
    /**
     * Software version information.
     */
    softwareVersionInfo: string;
}

export interface GetSdsSdsDetailCertificateInfo {
    /**
     * Certificate issuer.
     */
    issuer: string;
    /**
     * Certificate subject.
     */
    subject: string;
    /**
     * Certificate thumbprint.
     */
    thumbprint: string;
    /**
     * The start date of the certificate validity.
     */
    validFrom: string;
    /**
     * The start date of the Asn1 format.
     */
    validFromAsn1Format: string;
    /**
     * The end date of the certificate validity.
     */
    validTo: string;
    /**
     * The end date of the Asn1 format.
     */
    validToAsn1Format: string;
}

export interface GetSdsSdsDetailIpList {
    /**
     * SDS IP.
     */
    ip: string;
    /**
     * SDS IP role.
     */
    role: string;
}

export interface GetSdsSdsDetailLink {
    /**
     * Specifies the exact path to fetch the details.
     */
    href: string;
    /**
     * Specifies the relationship with the SDS.
     */
    rel: string;
}

export interface GetSdsSdsDetailRaidController {
    /**
     * Battery status
     */
    batteryStatus: string;
    /**
     * Driver name.
     */
    driverName: string;
    /**
     * Driver version.
     */
    driverVersion: string;
    /**
     * Firmware version.
     */
    firmwareVersion: string;
    /**
     * Model name.
     */
    modelName: string;
    /**
     * PCI address.
     */
    pciAddress: string;
    /**
     * Serial number.
     */
    serialNumber: string;
    /**
     * RAID status.
     */
    status: string;
    /**
     * Vendor name.
     */
    vendorName: string;
}

export interface GetSdsSdsDetailSdsConfigurationFailure {
    /**
     * Long Window Parameters.
     */
    longWindow: outputs.GetSdsSdsDetailSdsConfigurationFailureLongWindow;
    /**
     * Medium Window Parameters.
     */
    mediumWindow: outputs.GetSdsSdsDetailSdsConfigurationFailureMediumWindow;
    /**
     * Short Window Parameters.
     */
    shortWindow: outputs.GetSdsSdsDetailSdsConfigurationFailureShortWindow;
}

export interface GetSdsSdsDetailSdsConfigurationFailureLongWindow {
    /**
     * Last oscillation count.
     */
    lastOscillationCount: number;
    /**
     * Last oscillation time.
     */
    lastOscillationTime: number;
    /**
     * Maximum failures count.
     */
    maxFailuresCount: number;
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetSdsSdsDetailSdsConfigurationFailureMediumWindow {
    /**
     * Last oscillation count.
     */
    lastOscillationCount: number;
    /**
     * Last oscillation time.
     */
    lastOscillationTime: number;
    /**
     * Maximum failures count.
     */
    maxFailuresCount: number;
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetSdsSdsDetailSdsConfigurationFailureShortWindow {
    /**
     * Last oscillation count.
     */
    lastOscillationCount: number;
    /**
     * Last oscillation time.
     */
    lastOscillationTime: number;
    /**
     * Maximum failures count.
     */
    maxFailuresCount: number;
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetSdsSdsDetailSdsDecoupled {
    /**
     * Long Window Parameters.
     */
    longWindow: outputs.GetSdsSdsDetailSdsDecoupledLongWindow;
    /**
     * Medium Window Parameters.
     */
    mediumWindow: outputs.GetSdsSdsDetailSdsDecoupledMediumWindow;
    /**
     * Short Window Parameters.
     */
    shortWindow: outputs.GetSdsSdsDetailSdsDecoupledShortWindow;
}

export interface GetSdsSdsDetailSdsDecoupledLongWindow {
    /**
     * Last oscillation count.
     */
    lastOscillationCount: number;
    /**
     * Last oscillation time.
     */
    lastOscillationTime: number;
    /**
     * Maximum failures count.
     */
    maxFailuresCount: number;
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetSdsSdsDetailSdsDecoupledMediumWindow {
    /**
     * Last oscillation count.
     */
    lastOscillationCount: number;
    /**
     * Last oscillation time.
     */
    lastOscillationTime: number;
    /**
     * Maximum failures count.
     */
    maxFailuresCount: number;
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetSdsSdsDetailSdsDecoupledShortWindow {
    /**
     * Last oscillation count.
     */
    lastOscillationCount: number;
    /**
     * Last oscillation time.
     */
    lastOscillationTime: number;
    /**
     * Maximum failures count.
     */
    maxFailuresCount: number;
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetSdsSdsDetailSdsReceiveBufferAllocationFailures {
    /**
     * Long Window Parameters.
     */
    longWindow: outputs.GetSdsSdsDetailSdsReceiveBufferAllocationFailuresLongWindow;
    /**
     * Medium Window Parameters.
     */
    mediumWindow: outputs.GetSdsSdsDetailSdsReceiveBufferAllocationFailuresMediumWindow;
    /**
     * Short Window Parameters.
     */
    shortWindow: outputs.GetSdsSdsDetailSdsReceiveBufferAllocationFailuresShortWindow;
}

export interface GetSdsSdsDetailSdsReceiveBufferAllocationFailuresLongWindow {
    /**
     * Last oscillation count.
     */
    lastOscillationCount: number;
    /**
     * Last oscillation time.
     */
    lastOscillationTime: number;
    /**
     * Maximum failures count.
     */
    maxFailuresCount: number;
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetSdsSdsDetailSdsReceiveBufferAllocationFailuresMediumWindow {
    /**
     * Last oscillation count.
     */
    lastOscillationCount: number;
    /**
     * Last oscillation time.
     */
    lastOscillationTime: number;
    /**
     * Maximum failures count.
     */
    maxFailuresCount: number;
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetSdsSdsDetailSdsReceiveBufferAllocationFailuresShortWindow {
    /**
     * Last oscillation count.
     */
    lastOscillationCount: number;
    /**
     * Last oscillation time.
     */
    lastOscillationTime: number;
    /**
     * Maximum failures count.
     */
    maxFailuresCount: number;
    /**
     * Threshold.
     */
    threshold: number;
    /**
     * Window Size in seconds.
     */
    windowSizeInSec: number;
}

export interface GetSnapshotPolicySnapshotpolicy {
    /**
     * Auto snapshot creation cadence in min.
     */
    autoSnapshotCreationCadenceInMin: number;
    /**
     * Unique identifier of the snapshot policy instance.
     */
    id: string;
    /**
     * Last auto snapshot creation failure reason.
     */
    lastAutoSnapshotCreationFailureReason: string;
    /**
     * Last auto snapshot failure in first level.
     */
    lastAutoSnapshotFailureInFirstLevel: boolean;
    /**
     * Specifies the links asscociated for a snapshot policy.
     */
    links: outputs.GetSnapshotPolicySnapshotpolicyLink[];
    /**
     * Max vtree auto snapshots.
     */
    maxVtreeAutoSnapshots: number;
    /**
     * Name of the snapshot policy.
     */
    name: string;
    /**
     * Next auto snapshot creation time.
     */
    nextAutoSnapshotCreationTime: number;
    /**
     * Number of auto snapshots.
     */
    numOfAutoSnapshots: number;
    /**
     * Number of creation failures.
     */
    numOfCreationFailures: number;
    /**
     * Number of expired but locked snapshots.
     */
    numOfExpiredButLockedSnapshots: number;
    /**
     * Number of locked snapshots.
     */
    numOfLockedSnapshots: number;
    /**
     * Number of retained snapshots per level.
     */
    numOfRetainedSnapshotsPerLevels: number[];
    /**
     * Number of source Volumes.
     */
    numOfSourceVolumes: number;
    /**
     * Secure snapshots.
     */
    secureSnapshots: boolean;
    /**
     * Snapshot Access Mode.
     */
    snapshotAccessMode: string;
    /**
     * Specifies the current state of the snapshot policy.
     */
    snapshotPolicyState: string;
    /**
     * System Identifier.
     */
    systemId: string;
    /**
     * Time of last auto snapshot.
     */
    timeOfLastAutoSnapshot: number;
    /**
     * Time of last auto snapshot creation failure.
     */
    timeOfLastAutoSnapshotCreationFailure: number;
}

export interface GetSnapshotPolicySnapshotpolicyLink {
    /**
     * Specifies the exact path to fetch the details.
     */
    href: string;
    /**
     * Specifies the relationship with the snapshot policy.
     */
    rel: string;
}

export interface GetStoragePoolStoragePool {
    /**
     * Address space usage.
     */
    addressSpaceUsage: string;
    /**
     * Address space usage reason.
     */
    addressSpaceUsageType: string;
    /**
     * Background Scanner Bandwidth Limit.
     */
    backgroundScannerBwLimitKbps: number;
    /**
     * Scanner mode.
     */
    backgroundScannerMode: string;
    /**
     * Scanner compare-error action.
     */
    bgScannerCompareErrorAction: string;
    /**
     * Scanner read-error action.
     */
    bgScannerReadErrorAction: string;
    /**
     * Capacity alert critical threshold.
     */
    capacityAlertCriticalThreshold: number;
    /**
     * Capacity alert high threshold.
     */
    capacityAlertHighThreshold: number;
    /**
     * Capacity usage state (normal/high/critical/full).
     */
    capacityUsageState: string;
    /**
     * Usage state reason.
     */
    capacityUsageType: string;
    /**
     * Checksum Enabled.
     */
    checksumEnabled: boolean;
    /**
     * Compression method.
     */
    compressionMethod: string;
    /**
     * Data Layout.
     */
    dataLayout: string;
    /**
     * External acceleration type.
     */
    externalAccelerationType: string;
    /**
     * FGL ID.
     */
    fglAccpId: string;
    /**
     * FGL extra capacity.
     */
    fglExtraCapacity: number;
    /**
     * FGL NVDIMM metadata amortization.
     */
    fglNvdimmMetadataAmotizationX100: number;
    /**
     * FGL NVDIMM write cache size in Mb.
     */
    fglNvdimmWriteCacheSizeMb: number;
    /**
     * FGL overprovisioning factor.
     */
    fglOverprovisioningFactor: number;
    /**
     * FGL performance profile.
     */
    fglPerfProfile: string;
    /**
     * FGL write atomicity size.
     */
    fglWriteAtomicitySize: number;
    /**
     * Fragmentation Enabled.
     */
    fragmentationEnabled: boolean;
    /**
     * Storage pool ID.
     */
    id: string;
    /**
     * Specifies the links asscociated with storage pool.
     */
    links: outputs.GetStoragePoolStoragePoolLink[];
    /**
     * Media type.
     */
    mediaType: string;
    /**
     * Storage pool name.
     */
    name: string;
    /**
     * Number of Parallel Rebuild/Rebalance Jobs per Device.
     */
    numOfParallelRebuildRebalanceJobsPerDevice: number;
    /**
     * Persistent checksum builder limit.
     */
    persistentChecksumBuilderLimitKb: number;
    /**
     * Persistent checksum enabled.
     */
    persistentChecksumEnabled: boolean;
    /**
     * Persistent Checksum State.
     */
    persistentChecksumState: string;
    /**
     * Persistent checksum validation on read.
     */
    persistentChecksumValidateOnRead: boolean;
    /**
     * Protected maintenance mode IO priority app bandwidth per device threshold in Kbps.
     */
    protectedMaintenanceModeIoPriorityAppBwPerDeviceThresholdKbps: number;
    /**
     * Protected maintenance mode IO priority app IOPS per device threshold.
     */
    protectedMaintenanceModeIoPriorityAppIopsPerDeviceThreshold: number;
    /**
     * Protected maintenance mode IO priority bandwidth limit per device in Kbps.
     */
    protectedMaintenanceModeIoPriorityBwLimitPerDeviceKbps: number;
    /**
     * Number of Concurrent Protected Maintenance Mode IOPS per Device.
     */
    protectedMaintenanceModeIoPriorityNumOfConcurrentIosPerDevice: number;
    /**
     * Protected maintenance mode IO priority policy.
     */
    protectedMaintenanceModeIoPriorityPolicy: string;
    /**
     * Protected maintenance mode IO priority quiet period in Msec.
     */
    protectedMaintenanceModeIoPriorityQuietPeriodMsec: number;
    /**
     * Rebalance Enabled.
     */
    rebalanceEnabled: boolean;
    /**
     * Rebalance Application Bandwidth per Device Threshold.
     */
    rebalanceIoPriorityAppBwPerDeviceThresholdKbps: number;
    /**
     * Rebalance Application IOPS per Device Threshold.
     */
    rebalanceIoPriorityAppIopsPerDeviceThreshold: number;
    /**
     * Rebalance Bandwidth Limit per Device.
     */
    rebalanceIoPriorityBwLimitPerDeviceKbps: number;
    /**
     * Number of Concurrent Rebalance IOPS per Device.
     */
    rebalanceIoPriorityNumOfConcurrentIosPerDevice: number;
    /**
     * Rebalance IO Priority Policy.
     */
    rebalanceIoPriorityPolicy: string;
    /**
     * Rebalance Quiet Period.
     */
    rebalanceIoPriorityQuietPeriodMsec: number;
    /**
     * Rebuild Enabled.
     */
    rebuildEnabled: boolean;
    /**
     * Rebuild Application Bandwidth per Device Threshold.
     */
    rebuildIoPriorityAppBwPerDeviceThresholdKbps: number;
    /**
     * Rebuild Application IOPS per Device Threshold.
     */
    rebuildIoPriorityAppIopsPerDeviceThreshold: number;
    /**
     * Rebuild Bandwidth Limit per Device.
     */
    rebuildIoPriorityBwLimitPerDeviceInKbps: number;
    /**
     * Number of Concurrent Rebuild IOPS per Device.
     */
    rebuildIoPriorityNumOfConcurrentIosPerDevice: number;
    /**
     * Rebuild IO Priority Policy.
     */
    rebuildIoPriorityPolicy: string;
    /**
     * Rebuild Quiet Period.
     */
    rebuildIoPriorityQuietPeriodMsec: number;
    /**
     * Replication allowed capacity.
     */
    replicationCapacityMaxRatio: number;
    /**
     * RAM Read Cache Write Handling Mode.
     */
    rmCacheWriteHandlingMode: string;
    /**
     * List of SDS associated with storage pool.
     */
    sds: outputs.GetStoragePoolStoragePoolSd[];
    /**
     * Spare Percentage.
     */
    sparePercentage: number;
    /**
     * Use Read Flash Cache.
     */
    useRfCache: boolean;
    /**
     * Use RAM Read Cache.
     */
    useRmCache: boolean;
    /**
     * List of volumes associated with storage pool.
     */
    volumes: outputs.GetStoragePoolStoragePoolVolume[];
    /**
     * VTree migration IO priority App bandwidth per device threshold in Kbps.
     */
    vtreeMigrationIoPriorityAppBwPerDeviceThresholdKbps: number;
    /**
     * VTree migration IO priority App IOPS per device threshold.
     */
    vtreeMigrationIoPriorityAppIopsPerDeviceThreshold: number;
    /**
     * VTree Migration Bandwidth Limit per Device.
     */
    vtreeMigrationIoPriorityBwLimitPerDeviceKbps: number;
    /**
     * Number of concurrent VTree migration IOPS per device.
     */
    vtreeMigrationIoPriorityNumOfConcurrentIosPerDevice: number;
    /**
     * VTree Migration IO Priority Policy.
     */
    vtreeMigrationIoPriorityPolicy: string;
    /**
     * VTree migration IO priority quiet period in Msec.
     */
    vtreeMigrationIoPriorityQuietPeriodMsec: number;
    /**
     * Zero Padding Enabled.
     */
    zeroPaddingEnabled: boolean;
}

export interface GetStoragePoolStoragePoolLink {
    /**
     * Specifies the exact path to fetch the details.
     */
    href: string;
    /**
     * Specifies the relationship with the storage pool.
     */
    rel: string;
}

export interface GetStoragePoolStoragePoolSd {
    /**
     * SDS ID.
     */
    id: string;
    /**
     * SDS name.
     */
    name: string;
}

export interface GetStoragePoolStoragePoolVolume {
    /**
     * Volume ID.
     */
    id: string;
    /**
     * Volume name.
     */
    name: string;
}

export interface GetTemplateTemplateDetail {
    /**
     * Indicates whether all users are allowed for the template.
     */
    allUsersAllowed: boolean;
    /**
     * List of users assigned to the template.
     */
    assignedUsers: outputs.GetTemplateTemplateDetailAssignedUser[];
    /**
     * The type of template for brownfield deployments.
     */
    brownfieldTemplateType: string;
    /**
     * The category to which the template belongs.
     */
    category: string;
    /**
     * The count of clusters associated with the template.
     */
    clusterCount: number;
    /**
     * List of components included in the template.
     */
    components: outputs.GetTemplateTemplateDetailComponent[];
    /**
     * Details about the configuration settings of the template.
     */
    configuration: outputs.GetTemplateTemplateDetailConfiguration;
    /**
     * The user who created the template.
     */
    createdBy: string;
    /**
     * The date when the template was created.
     */
    createdDate: string;
    /**
     * Indicates whether the template is in draft mode.
     */
    draft: boolean;
    /**
     * Details about the firmware repository used by the template.
     */
    firmwareRepository: outputs.GetTemplateTemplateDetailFirmwareRepository;
    /**
     * The unique identifier for the template.
     */
    id: string;
    /**
     * Indicates whether the template is part of the current configuration.
     */
    inConfiguration: boolean;
    /**
     * The date when the template was last deployed.
     */
    lastDeployedDate: string;
    /**
     * Details about the license repository used by the template.
     */
    licenseRepository: outputs.GetTemplateTemplateDetailLicenseRepository;
    /**
     * Indicates whether firmware is managed by the template.
     */
    manageFirmware: boolean;
    /**
     * List of networks associated with the template.
     */
    networks: outputs.GetTemplateTemplateDetailNetwork[];
    /**
     * The ID of the original template if this is a derived template.
     */
    originalTemplateId: string;
    /**
     * The count of software-defined network appliances associated with the template.
     */
    sdnasCount: number;
    /**
     * The count of servers associated with the template.
     */
    serverCount: number;
    /**
     * The count of services associated with the template.
     */
    serviceCount: number;
    /**
     * The count of storage devices associated with the template.
     */
    storageCount: number;
    /**
     * The count of switches associated with the template.
     */
    switchCount: number;
    /**
     * The description of the template.
     */
    templateDescription: string;
    /**
     * Indicates whether the template is locked or not.
     */
    templateLocked: boolean;
    /**
     * The name of the template.
     */
    templateName: string;
    /**
     * The type/category of the template.
     */
    templateType: string;
    /**
     * Details about the validity of the template.
     */
    templateValid: outputs.GetTemplateTemplateDetailTemplateValid;
    /**
     * The version of the template.
     */
    templateVersion: string;
    /**
     * The user who last updated the template.
     */
    updatedBy: string;
    /**
     * The date when the template was last updated.
     */
    updatedDate: string;
    /**
     * Indicates whether the default catalog is used for the template.
     */
    useDefaultCatalog: boolean;
    /**
     * The count of virtual machines associated with the template.
     */
    vmCount: number;
}

export interface GetTemplateTemplateDetailAssignedUser {
    /**
     * The user who created the assigned user.
     */
    createdBy: string;
    /**
     * The date when the assigned user was created.
     */
    createdDate: string;
    /**
     * The domain name of the assigned user.
     */
    domainName: string;
    /**
     * The email address of the assigned user.
     */
    email: string;
    /**
     * Indicates whether the assigned user is enabled.
     */
    enabled: boolean;
    /**
     * The first name of the assigned user.
     */
    firstName: string;
    /**
     * The distinguished name (DN) of the group associated with the assigned user.
     */
    groupDn: string;
    /**
     * The name of the group associated with the assigned user.
     */
    groupName: string;
    /**
     * The unique identifier of the assigned user.
     */
    id: string;
    /**
     * The last name of the assigned user.
     */
    lastName: string;
    /**
     * The password associated with the assigned user.
     */
    password: string;
    /**
     * The phone number of the assigned user.
     */
    phoneNumber: string;
    /**
     * The role associated with the assigned user.
     */
    role: string;
    /**
     * The roles associated with the assigned user.
     */
    roles: string[];
    /**
     * Indicates whether the assigned user is a system user.
     */
    systemUser: boolean;
    /**
     * Indicates whether the user password needs to be updated.
     */
    updatePassword: boolean;
    /**
     * The user who last updated the assigned user.
     */
    updatedBy: string;
    /**
     * The date when the assigned user was last updated.
     */
    updatedDate: string;
    /**
     * The username of the assigned user.
     */
    userName: string;
    /**
     * The preferences of the assigned user.
     */
    userPreference: string;
    /**
     * The sequential ID of the assigned user.
     */
    userSeqId: number;
}

export interface GetTemplateTemplateDetailComponent {
    /**
     * The ASM GUID (Global Unique Identifier) associated with the component.
     */
    asmGuid: string;
    /**
     * Indicates whether the component is brownfield.
     */
    brownfield: boolean;
    /**
     * Indicates whether the component has changed.
     */
    changed: boolean;
    /**
     * Indicates whether the component is cloned.
     */
    cloned: boolean;
    /**
     * The ASM GUID from which the component is cloned.
     */
    clonedFromAsmGuid: string;
    /**
     * The identifier of the component from which this component is cloned.
     */
    clonedFromId: string;
    /**
     * The identifier for the component.
     */
    componentId: string;
    /**
     * Information about the validity of the component.
     */
    componentValid: outputs.GetTemplateTemplateDetailComponentComponentValid;
    /**
     * The configuration file associated with the component.
     */
    configFile: string;
    /**
     * Help text associated with the component.
     */
    helpText: string;
    /**
     * The unique identifier for the component.
     */
    id: string;
    /**
     * The identifier for the component.
     */
    identifier: string;
    /**
     * The number of instances of the component.
     */
    instances: number;
    /**
     * The IP address associated with the component.
     */
    ip: string;
    /**
     * Indicates whether firmware is managed for the component.
     */
    manageFirmware: boolean;
    /**
     * The management IP address of the component.
     */
    managementIpAddress: string;
    /**
     * The name of the component.
     */
    name: string;
    /**
     * The OS Puppet certificate name associated with the component.
     */
    osPuppetCertName: string;
    /**
     * The Puppet certificate name associated with the component.
     */
    puppetCertName: string;
    /**
     * The reference identifier associated with the component.
     */
    refId: string;
    /**
     * Related components associated with this component.
     */
    relatedComponents: {[key: string]: string};
    /**
     * List of resources associated with the component.
     */
    resources: outputs.GetTemplateTemplateDetailComponentResource[];
    /**
     * The serial number of the component.
     */
    serialNumber: string;
    /**
     * The sub-type of the component.
     */
    subType: string;
    /**
     * Indicates whether the component should be torn down.
     */
    teardown: boolean;
    /**
     * The type of the component.
     */
    type: string;
}

export interface GetTemplateTemplateDetailComponentComponentValid {
    /**
     * List of messages associated with the component validity.
     */
    messages: outputs.GetTemplateTemplateDetailComponentComponentValidMessage[];
    /**
     * Indicates whether the component is valid.
     */
    valid: boolean;
}

export interface GetTemplateTemplateDetailComponentComponentValidMessage {
    /**
     * The identifier of the agent associated with the message.
     */
    agentId: string;
    /**
     * The category or type of the message.
     */
    category: string;
    /**
     * The identifier used to correlate related messages.
     */
    correlationId: string;
    /**
     * A detailed version or description of the message.
     */
    detailedMessage: string;
    /**
     * The message to be displayed or shown.
     */
    displayMessage: string;
    /**
     * The unique identifier for the message.
     */
    id: string;
    /**
     * The bundle or group to which the message belongs.
     */
    messageBundle: string;
    /**
     * The code associated with the message.
     */
    messageCode: string;
    /**
     * The action to be taken in response to the message.
     */
    responseAction: string;
    /**
     * The sequence number of the message in a series.
     */
    sequenceNumber: number;
    /**
     * The severity level of the message (e.g., INFO, WARNING, ERROR).
     */
    severity: string;
    /**
     * The timestamp indicating when the message was generated.
     */
    timeStamp: string;
}

export interface GetTemplateTemplateDetailComponentResource {
    /**
     * The display name for the resources.
     */
    displayName: string;
    /**
     * The globally unique identifier (GUID) for the resources.
     */
    guid: string;
    /**
     * The identifier for the resources.
     */
    id: string;
}

export interface GetTemplateTemplateDetailConfiguration {
    /**
     * List of categories associated with the configuration.
     */
    categories: outputs.GetTemplateTemplateDetailConfigurationCategory[];
    /**
     * Comparator used in the configuration.
     */
    comparator: string;
    /**
     * Fully Qualified Device Descriptor (FQDD) of the controller in the configuration.
     */
    controllerFqdd: string;
    /**
     * Type of disk in the configuration.
     */
    disktype: string;
    /**
     * Unique identifier for the configuration.
     */
    id: string;
    /**
     * Number of disks in the configuration.
     */
    numberofdisks: number;
    /**
     * RAID level of the configuration.
     */
    raidlevel: string;
    /**
     * Fully Qualified Device Descriptor (FQDD) of the virtual disk in the configuration.
     */
    virtualDiskFqdd: string;
}

export interface GetTemplateTemplateDetailConfigurationCategory {
    /**
     * The type of device associated with the category.
     */
    deviceType: string;
    /**
     * The display name of the category.
     */
    displayName: string;
    /**
     * The unique identifier for the category.
     */
    id: string;
}

export interface GetTemplateTemplateDetailFirmwareRepository {
    /**
     * The count of software bundles in the firmware repository.
     */
    bundleCount: number;
    /**
     * The count of software components in the firmware repository.
     */
    componentCount: number;
    /**
     * The user who created the firmware repository.
     */
    createdBy: string;
    /**
     * The date when the firmware repository was created.
     */
    createdDate: string;
    /**
     * Indicates whether the firmware repository is custom.
     */
    custom: boolean;
    /**
     * Indicates whether the firmware repository is the default catalog.
     */
    defaultCatalog: boolean;
    /**
     * List of deployments associated with the firmware repository.
     */
    deployments: outputs.GetTemplateTemplateDetailFirmwareRepositoryDeployment[];
    /**
     * The location on disk where the firmware repository is stored.
     */
    diskLocation: string;
    /**
     * The progress of the download for the firmware repository.
     */
    downloadProgress: number;
    /**
     * The download status of the firmware repository.
     */
    downloadStatus: string;
    /**
     * Indicates whether the firmware repository is embedded.
     */
    embedded: boolean;
    /**
     * The progress of the extraction for the firmware repository.
     */
    extractProgress: number;
    /**
     * The size of the firmware repository file in gigabytes.
     */
    fileSizeInGigabytes: number;
    /**
     * The filename of the firmware repository.
     */
    filename: string;
    /**
     * The unique identifier of the firmware repository.
     */
    id: string;
    /**
     * The unique identifier of the job associated with the firmware repository.
     */
    jobId: string;
    /**
     * The MD5 hash of the firmware repository.
     */
    md5Hash: string;
    /**
     * Indicates whether the firmware repository is minimal.
     */
    minimal: boolean;
    /**
     * The name of the firmware repository.
     */
    name: string;
    /**
     * Indicates whether the firmware repository needs attention.
     */
    needsAttention: boolean;
    /**
     * The password associated with the firmware repository.
     */
    password: string;
    /**
     * Indicates whether the firmware repository is RCM approved.
     */
    rcmapproved: boolean;
    /**
     * The signature of the firmware repository.
     */
    signature: string;
    /**
     * The source location of the signed key associated with the firmware repository.
     */
    signedKeySourceLocation: string;
    /**
     * List of software bundles associated with the firmware repository.
     */
    softwareBundles: outputs.GetTemplateTemplateDetailFirmwareRepositorySoftwareBundle[];
    /**
     * List of software components associated with the firmware repository.
     */
    softwareComponents: outputs.GetTemplateTemplateDetailFirmwareRepositorySoftwareComponent[];
    /**
     * The location of the source for the firmware repository.
     */
    sourceLocation: string;
    /**
     * The type of the source for the firmware repository.
     */
    sourceType: string;
    /**
     * The state of the firmware repository.
     */
    state: string;
    /**
     * The user who last updated the firmware repository.
     */
    updatedBy: string;
    /**
     * The date when the firmware repository was last updated.
     */
    updatedDate: string;
    /**
     * The count of user-specific software bundles in the firmware repository.
     */
    userBundleCount: number;
    /**
     * The username associated with the firmware repository.
     */
    username: string;
}

export interface GetTemplateTemplateDetailFirmwareRepositoryDeployment {
    /**
     * Indicates whether all users are allowed for the deployment.
     */
    allUsersAllowed: boolean;
    /**
     * List of users assigned to the deployment.
     */
    assignedUsers: outputs.GetTemplateTemplateDetailFirmwareRepositoryDeploymentAssignedUser[];
    /**
     * Indicates whether the deployment involves brownfield operations.
     */
    brownfield: boolean;
    /**
     * Indicates whether migration of cluster virtual machines is allowed.
     */
    canMigratevClsvMs: boolean;
    /**
     * Indicates whether the deployment is compliant.
     */
    compliant: boolean;
    /**
     * Specifies whether there has been a change in the deployment configuration.
     */
    configurationChange: boolean;
    /**
     * The user who created the deployment.
     */
    createdBy: string;
    /**
     * The date when the deployment was created.
     */
    createdDate: string;
    /**
     * The current batch count during deployment.
     */
    currentBatchCount: string;
    /**
     * The current step count during deployment.
     */
    currentStepCount: string;
    /**
     * The message associated with the current step during deployment.
     */
    currentStepMessage: string;
    /**
     * The custom image used for deployment.
     */
    customImage: string;
    /**
     * The description of the deployment.
     */
    deploymentDescription: string;
    /**
     * List of devices associated with the deployment.
     */
    deploymentDevices: outputs.GetTemplateTemplateDetailFirmwareRepositoryDeploymentDeploymentDevice[];
    /**
     * The date when the deployment finished.
     */
    deploymentFinishedDate: string;
    /**
     * The type of health status associated with the deployment.
     */
    deploymentHealthStatusType: string;
    /**
     * The name of the deployment.
     */
    deploymentName: string;
    /**
     * The scheduled date for the deployment.
     */
    deploymentScheduledDate: string;
    /**
     * The date when the deployment started.
     */
    deploymentStartedDate: string;
    /**
     * Details about the validity of the deployment.
     */
    deploymentValid: outputs.GetTemplateTemplateDetailFirmwareRepositoryDeploymentDeploymentValid;
    /**
     * Details about the validation response for the deployment.
     */
    deploymentValidationResponse: outputs.GetTemplateTemplateDetailFirmwareRepositoryDeploymentDeploymentValidationResponse;
    /**
     * Indicates whether disruptive firmware actions are allowed.
     */
    disruptiveFirmware: boolean;
    /**
     * Indicates whether firmware initialization is performed during deployment.
     */
    firmwareInit: boolean;
    /**
     * The ID of the firmware repository associated with the deployment.
     */
    firmwareRepositoryId: string;
    /**
     * The unique identifier of the deployment.
     */
    id: string;
    /**
     * Indicates whether to perform individual teardown for the deployment.
     */
    individualTeardown: boolean;
    /**
     * List of job details associated with the deployment.
     */
    jobDetails: outputs.GetTemplateTemplateDetailFirmwareRepositoryDeploymentJobDetail[];
    /**
     * Details about the license repository associated with the deployment.
     */
    licenseRepository: outputs.GetTemplateTemplateDetailFirmwareRepositoryDeploymentLicenseRepository;
    /**
     * The ID of the license repository associated with the deployment.
     */
    licenseRepositoryId: string;
    /**
     * Indicates whether the deployment is in lifecycle mode.
     */
    lifecycleMode: boolean;
    /**
     * List of reasons for the lifecycle mode of the deployment.
     */
    lifecycleModeReasons: string[];
    /**
     * Indicates whether the deployment is a no-op (no operation).
     */
    noOp: boolean;
    /**
     * The total number of deployments.
     */
    numberOfDeployments: number;
    /**
     * Additional data associated with the operation.
     */
    operationData: string;
    /**
     * The status of the operation associated with the deployment.
     */
    operationStatus: string;
    /**
     * The type of operation associated with the deployment.
     */
    operationType: string;
    /**
     * The ID of the original deployment.
     */
    originalDeploymentId: string;
    /**
     * The overall health status of the device in the deployment.
     */
    overallDeviceHealth: string;
    /**
     * The owner of the deployment.
     */
    owner: string;
    /**
     * The precalculated health of devices associated with the deployment.
     */
    precalculatedDeviceHealth: string;
    /**
     * Indicates whether to preconfigure SVM (Storage Virtual Machine).
     */
    preconfigureSvm: boolean;
    /**
     * Indicates whether to preconfigure SVM and perform an update.
     */
    preconfigureSvmAndUpdate: boolean;
    /**
     * Indicates whether the associated service should be removed.
     */
    removeService: boolean;
    /**
     * Indicates whether the deployment should be retried.
     */
    retry: boolean;
    /**
     * Indicates whether the deployment involves scaling up.
     */
    scaleUp: boolean;
    /**
     * The date when the deployment is scheduled.
     */
    scheduleDate: string;
    /**
     * Details about the services deployed during the deployment.
     */
    servicesDeployed: string;
    /**
     * The status of the deployment.
     */
    status: string;
    /**
     * Indicates whether the deployment should be torn down.
     */
    teardown: boolean;
    /**
     * Indicates whether teardown should occur after canceling the deployment.
     */
    teardownAfterCancel: boolean;
    /**
     * Indicates if the deployment template is valid.
     */
    templateValid: boolean;
    /**
     * The total number of batches involved in the deployment.
     */
    totalBatchCount: string;
    /**
     * The total number of steps involved in the deployment.
     */
    totalNumOfSteps: string;
    /**
     * Indicates whether to update server firmware during the deployment.
     */
    updateServerFirmware: boolean;
    /**
     * The user who last updated the deployment.
     */
    updatedBy: string;
    /**
     * The date when the deployment was last updated.
     */
    updatedDate: string;
    /**
     * Indicates whether to use the default catalog for the deployment.
     */
    useDefaultCatalog: boolean;
    /**
     * Specifies whether the deployment involves Virtual Desktop Infrastructure (VDI) configuration.
     */
    vds: boolean;
    /**
     * List of virtual machines associated with the deployment.
     */
    vms: outputs.GetTemplateTemplateDetailFirmwareRepositoryDeploymentVm[];
}

export interface GetTemplateTemplateDetailFirmwareRepositoryDeploymentAssignedUser {
    /**
     * The user who created the assigned user.
     */
    createdBy: string;
    /**
     * The date when the assigned user was created.
     */
    createdDate: string;
    /**
     * The domain name of the assigned user.
     */
    domainName: string;
    /**
     * The email address of the assigned user.
     */
    email: string;
    /**
     * Indicates whether the assigned user is enabled.
     */
    enabled: boolean;
    /**
     * The first name of the assigned user.
     */
    firstName: string;
    /**
     * The distinguished name (DN) of the group associated with the assigned user.
     */
    groupDn: string;
    /**
     * The name of the group associated with the assigned user.
     */
    groupName: string;
    /**
     * The unique identifier of the assigned user.
     */
    id: string;
    /**
     * The last name of the assigned user.
     */
    lastName: string;
    /**
     * The password associated with the assigned user.
     */
    password: string;
    /**
     * The phone number of the assigned user.
     */
    phoneNumber: string;
    /**
     * The role associated with the assigned user.
     */
    role: string;
    /**
     * The roles associated with the assigned user.
     */
    roles: string[];
    /**
     * Indicates whether the assigned user is a system user.
     */
    systemUser: boolean;
    /**
     * Indicates whether the user password needs to be updated.
     */
    updatePassword: boolean;
    /**
     * The user who last updated the assigned user.
     */
    updatedBy: string;
    /**
     * The date when the assigned user was last updated.
     */
    updatedDate: string;
    /**
     * The username of the assigned user.
     */
    userName: string;
    /**
     * The preferences of the assigned user.
     */
    userPreference: string;
    /**
     * The sequential ID of the assigned user.
     */
    userSeqId: number;
}

export interface GetTemplateTemplateDetailFirmwareRepositoryDeploymentDeploymentDevice {
    /**
     * Indicates whether the deployment device is associated with a brownfield deployment.
     */
    brownfield: boolean;
    /**
     * The brownfield status of the deployment device.
     */
    brownfieldStatus: string;
    /**
     * Indicates whether the deployment device has a cloud link.
     */
    cloudLink: boolean;
    /**
     * The compliant state of the deployment device.
     */
    compliantState: string;
    /**
     * The component ID associated with the deployment device.
     */
    componentId: string;
    /**
     * The current IP address of the deployment device.
     */
    currentIpAddress: string;
    /**
     * Indicates whether the deployment device has Direct-Attached Storage (DAS) cache.
     */
    dasCache: boolean;
    /**
     * The name of the device group associated with the deployment device.
     */
    deviceGroupName: string;
    /**
     * The health status of the deployment device.
     */
    deviceHealth: string;
    /**
     * The state of the deployment device.
     */
    deviceState: string;
    /**
     * The type of device associated with the deployment device.
     */
    deviceType: string;
    /**
     * The health message associated with the deployment device.
     */
    healthMessage: string;
    /**
     * The IP address of the deployment device.
     */
    ipAddress: string;
    /**
     * The log dump information associated with the deployment device.
     */
    logDump: string;
    /**
     * The model of the deployment device.
     */
    model: string;
    /**
     * The Puppet certificate name associated with the deployment device.
     */
    puppetCertName: string;
    /**
     * The reference ID associated with the deployment device.
     */
    refId: string;
    /**
     * The reference type associated with the deployment device.
     */
    refType: string;
    /**
     * The service tag associated with the deployment device.
     */
    serviceTag: string;
    /**
     * The status of the deployment device.
     */
    status: string;
    /**
     * The end time of the status for the deployment device.
     */
    statusEndTime: string;
    /**
     * The status message associated with the deployment device.
     */
    statusMessage: string;
    /**
     * The start time of the status for the deployment device.
     */
    statusStartTime: string;
}

export interface GetTemplateTemplateDetailFirmwareRepositoryDeploymentDeploymentValid {
    /**
     * List of messages related to the deployment.
     */
    messages: outputs.GetTemplateTemplateDetailFirmwareRepositoryDeploymentDeploymentValidMessage[];
    /**
     * Indicates whether the deployment is valid.
     */
    valid: boolean;
}

export interface GetTemplateTemplateDetailFirmwareRepositoryDeploymentDeploymentValidMessage {
    /**
     * The identifier of the agent associated with the message.
     */
    agentId: string;
    /**
     * The category or type of the message.
     */
    category: string;
    /**
     * The identifier used to correlate related messages.
     */
    correlationId: string;
    /**
     * A detailed version or description of the message.
     */
    detailedMessage: string;
    /**
     * The message to be displayed or shown.
     */
    displayMessage: string;
    /**
     * The unique identifier for the message.
     */
    id: string;
    /**
     * The bundle or group to which the message belongs.
     */
    messageBundle: string;
    /**
     * The code associated with the message.
     */
    messageCode: string;
    /**
     * The action to be taken in response to the message.
     */
    responseAction: string;
    /**
     * The sequence number of the message in a series.
     */
    sequenceNumber: number;
    /**
     * The severity level of the message (e.g., INFO, WARNING, ERROR).
     */
    severity: string;
    /**
     * The timestamp indicating when the message was generated.
     */
    timeStamp: string;
}

export interface GetTemplateTemplateDetailFirmwareRepositoryDeploymentDeploymentValidationResponse {
    /**
     * Indicates whether the deployment can be executed.
     */
    canDeploy: boolean;
    /**
     * Indicates whether there is a disk type mismatch in the deployment.
     */
    diskTypeMismatch: boolean;
    /**
     * The number of drives per storage pool in the deployment.
     */
    drivesPerStoragePool: number;
    /**
     * A list of hostnames associated with the deployment.
     */
    hostnames: string[];
    /**
     * The maximum scalability of the deployment.
     */
    maxScalability: number;
    /**
     * The disk types associated with new nodes in the deployment.
     */
    newNodeDiskTypes: string[];
    /**
     * The number of fault sets in the deployment.
     */
    noOfFaultSets: number;
    /**
     * The number of nodes in the deployment.
     */
    nodes: number;
    /**
     * The number of nodes per fault set in the deployment.
     */
    nodesPerFaultSet: number;
    /**
     * The number of service volumes in the deployment.
     */
    numberOfServiceVolumes: number;
    /**
     * The protection domain associated with the deployment.
     */
    protectionDomain: string;
    /**
     * The disk types associated with each storage pool in the deployment.
     */
    storagePoolDiskTypes: string[];
    /**
     * The number of storage pools in the deployment.
     */
    storagePools: number;
    /**
     * The number of virtual machines in the deployment.
     */
    virtualMachines: number;
    /**
     * A list of warning messages associated with the deployment validation.
     */
    warningMessages: string[];
}

export interface GetTemplateTemplateDetailFirmwareRepositoryDeploymentJobDetail {
    /**
     * The unique identifier of the component associated with the job.
     */
    componentId: string;
    /**
     * The unique identifier of the job execution.
     */
    executionId: string;
    /**
     * The log level of the job.
     */
    level: string;
    /**
     * The log message of the job.
     */
    message: string;
    /**
     * The timestamp of the job execution.
     */
    timestamp: string;
}

export interface GetTemplateTemplateDetailFirmwareRepositoryDeploymentLicenseRepository {
    /**
     * The user who created the license repository.
     */
    createdBy: string;
    /**
     * The date when the license repository was created.
     */
    createdDate: string;
    /**
     * The disk location of the license repository.
     */
    diskLocation: string;
    /**
     * The filename associated with the license repository.
     */
    filename: string;
    /**
     * The unique identifier of the license repository.
     */
    id: string;
    /**
     * The license data associated with the license repository.
     */
    licenseData: string;
    /**
     * The name of the license repository.
     */
    name: string;
    /**
     * The state of the license repository.
     */
    state: string;
    /**
     * The type of the license repository.
     */
    type: string;
    /**
     * The user who last updated the license repository.
     */
    updatedBy: string;
    /**
     * The date when the license repository was last updated.
     */
    updatedDate: string;
}

export interface GetTemplateTemplateDetailFirmwareRepositoryDeploymentVm {
    /**
     * The certificate name associated with the virtual machine (VM).
     */
    certificateName: string;
    /**
     * The IP address of the virtual machine (VM).
     */
    vmIpaddress: string;
    /**
     * The manufacturer of the virtual machine (VM).
     */
    vmManufacturer: string;
    /**
     * The model of the virtual machine (VM).
     */
    vmModel: string;
    /**
     * The service tag associated with the virtual machine (VM).
     */
    vmServiceTag: string;
}

export interface GetTemplateTemplateDetailFirmwareRepositorySoftwareBundle {
    /**
     * The date when the software bundle was created.
     */
    bundleDate: string;
    /**
     * The type of the software bundle.
     */
    bundleType: string;
    /**
     * The user who initially created the software bundle.
     */
    createdBy: string;
    /**
     * The date when the software bundle was initially created.
     */
    createdDate: string;
    /**
     * The criticality level of the software bundle.
     */
    criticality: string;
    /**
     * Indicates whether the software bundle is custom.
     */
    custom: boolean;
    /**
     * A brief description of the software bundle.
     */
    description: string;
    /**
     * The model of the device associated with the software bundle.
     */
    deviceModel: string;
    /**
     * The type of device associated with the software bundle.
     */
    deviceType: string;
    /**
     * The identifier of the firmware repository associated with the software bundle.
     */
    fwRepositoryId: string;
    /**
     * The unique identifier for the software bundle.
     */
    id: string;
    /**
     * The name of the software bundle.
     */
    name: string;
    /**
     * Indicates whether the software bundle needs attention.
     */
    needsAttention: boolean;
    /**
     * List of software components associated with the software bundle.
     */
    softwareComponents: outputs.GetTemplateTemplateDetailFirmwareRepositorySoftwareBundleSoftwareComponent[];
    /**
     * The user who last updated the software bundle.
     */
    updatedBy: string;
    /**
     * The date when the software bundle was last updated.
     */
    updatedDate: string;
    /**
     * Indicates whether the software bundle is a user-specific bundle.
     */
    userBundle: boolean;
    /**
     * The MD5 hash value of the user-specific software bundle.
     */
    userBundleHashMd5: string;
    /**
     * The path associated with the user-specific software bundle.
     */
    userBundlePath: string;
    /**
     * The version of the software bundle.
     */
    version: string;
}

export interface GetTemplateTemplateDetailFirmwareRepositorySoftwareBundleSoftwareComponent {
    /**
     * The category to which the component belongs.
     */
    category: string;
    /**
     * The identifier of the component.
     */
    componentId: string;
    /**
     * The type of the component.
     */
    componentType: string;
    /**
     * The user who created the component.
     */
    createdBy: string;
    /**
     * The date when the component was created.
     */
    createdDate: string;
    /**
     * Indicates whether the component is custom or not.
     */
    custom: boolean;
    /**
     * The version of the component according to Dell standards.
     */
    dellVersion: string;
    /**
     * The identifier of the device associated with the component.
     */
    deviceId: string;
    /**
     * The name of the firmware repository associated with the component.
     */
    firmwareRepoName: string;
    /**
     * The MD5 hash value of the component.
     */
    hashMd5: string;
    /**
     * The unique identifier for the software component.
     */
    id: string;
    /**
     * Indicates whether the component should be ignored.
     */
    ignore: boolean;
    /**
     * The name of the software component.
     */
    name: string;
    /**
     * Indicates whether the component needs attention.
     */
    needsAttention: boolean;
    /**
     * The operating system associated with the component.
     */
    operatingSystem: string;
    /**
     * The identifier of the original component.
     */
    originalComponentId: string;
    /**
     * The original version of the component.
     */
    originalVersion: string;
    /**
     * The identifier of the package to which the component belongs.
     */
    packageId: string;
    /**
     * The path where the component is stored.
     */
    path: string;
    /**
     * The sub-identifier of the device associated with the component.
     */
    subDeviceId: string;
    /**
     * The sub-identifier of the vendor associated with the component.
     */
    subVendorId: string;
    /**
     * List of system IDs associated with the component.
     */
    systemIds: string[];
    /**
     * The user who last updated the component.
     */
    updatedBy: string;
    /**
     * The date when the component was last updated.
     */
    updatedDate: string;
    /**
     * The identifier of the vendor associated with the component.
     */
    vendorId: string;
    /**
     * The version of the component according to the vendor's standards.
     */
    vendorVersion: string;
}

export interface GetTemplateTemplateDetailFirmwareRepositorySoftwareComponent {
    /**
     * The category to which the component belongs.
     */
    category: string;
    /**
     * The identifier of the component.
     */
    componentId: string;
    /**
     * The type of the component.
     */
    componentType: string;
    /**
     * The user who created the component.
     */
    createdBy: string;
    /**
     * The date when the component was created.
     */
    createdDate: string;
    /**
     * Indicates whether the component is custom or not.
     */
    custom: boolean;
    /**
     * The version of the component according to Dell standards.
     */
    dellVersion: string;
    /**
     * The identifier of the device associated with the component.
     */
    deviceId: string;
    /**
     * The name of the firmware repository associated with the component.
     */
    firmwareRepoName: string;
    /**
     * The MD5 hash value of the component.
     */
    hashMd5: string;
    /**
     * The unique identifier for the software component.
     */
    id: string;
    /**
     * Indicates whether the component should be ignored.
     */
    ignore: boolean;
    /**
     * The name of the software component.
     */
    name: string;
    /**
     * Indicates whether the component needs attention.
     */
    needsAttention: boolean;
    /**
     * The operating system associated with the component.
     */
    operatingSystem: string;
    /**
     * The identifier of the original component.
     */
    originalComponentId: string;
    /**
     * The original version of the component.
     */
    originalVersion: string;
    /**
     * The identifier of the package to which the component belongs.
     */
    packageId: string;
    /**
     * The path where the component is stored.
     */
    path: string;
    /**
     * The sub-identifier of the device associated with the component.
     */
    subDeviceId: string;
    /**
     * The sub-identifier of the vendor associated with the component.
     */
    subVendorId: string;
    /**
     * List of system IDs associated with the component.
     */
    systemIds: string[];
    /**
     * The user who last updated the component.
     */
    updatedBy: string;
    /**
     * The date when the component was last updated.
     */
    updatedDate: string;
    /**
     * The identifier of the vendor associated with the component.
     */
    vendorId: string;
    /**
     * The version of the component according to the vendor's standards.
     */
    vendorVersion: string;
}

export interface GetTemplateTemplateDetailLicenseRepository {
    /**
     * The user who created the license repository.
     */
    createdBy: string;
    /**
     * The date when the license repository was created.
     */
    createdDate: string;
    /**
     * The disk location of the license repository.
     */
    diskLocation: string;
    /**
     * The filename associated with the license repository.
     */
    filename: string;
    /**
     * The unique identifier of the license repository.
     */
    id: string;
    /**
     * The license data associated with the license repository.
     */
    licenseData: string;
    /**
     * The name of the license repository.
     */
    name: string;
    /**
     * The state of the license repository.
     */
    state: string;
    /**
     * The type of the license repository.
     */
    type: string;
    /**
     * The user who last updated the license repository.
     */
    updatedBy: string;
    /**
     * The date when the license repository was last updated.
     */
    updatedDate: string;
}

export interface GetTemplateTemplateDetailNetwork {
    /**
     * The description of the network.
     */
    description: string;
    /**
     * The destination IP address for the network.
     */
    destinationIpAddress: string;
    /**
     * The unique identifier for the network.
     */
    id: string;
    /**
     * The name of the network.
     */
    name: string;
    /**
     * Boolean indicating if the network is static.
     */
    static: boolean;
    /**
     * The static network configuration settings.
     */
    staticNetworkConfiguration: outputs.GetTemplateTemplateDetailNetworkStaticNetworkConfiguration;
    /**
     * The type of the network.
     */
    type: string;
    /**
     * The VLAN ID associated with the network.
     */
    vlanId: number;
}

export interface GetTemplateTemplateDetailNetworkStaticNetworkConfiguration {
    /**
     * The DNS suffix for the static network configuration.
     */
    dnsSuffix: string;
    /**
     * The gateway for the static network configuration.
     */
    gateway: string;
    /**
     * The IP address associated with the static network configuration.
     */
    ipAddress: string;
    /**
     * List of IP ranges associated with the static network configuration.
     */
    ipRanges: outputs.GetTemplateTemplateDetailNetworkStaticNetworkConfigurationIpRange[];
    /**
     * The primary DNS server for the static network configuration.
     */
    primaryDns: string;
    /**
     * The secondary DNS server for the static network configuration.
     */
    secondaryDns: string;
    /**
     * List of static routes associated with the static network configuration.
     */
    staticRoutes: outputs.GetTemplateTemplateDetailNetworkStaticNetworkConfigurationStaticRoute[];
    /**
     * The subnet for the static network configuration.
     */
    subnet: string;
}

export interface GetTemplateTemplateDetailNetworkStaticNetworkConfigurationIpRange {
    /**
     * The ending IP address of the range.
     */
    endingIp: string;
    /**
     * The unique identifier for the IP range.
     */
    id: string;
    /**
     * The role associated with the IP range.
     */
    role: string;
    /**
     * The starting IP address of the range.
     */
    startingIp: string;
}

export interface GetTemplateTemplateDetailNetworkStaticNetworkConfigurationStaticRoute {
    /**
     * The IP address of the destination for the static route.
     */
    destinationIpAddress: string;
    /**
     * The ID of the destination network for the static route.
     */
    staticRouteDestinationNetworkId: string;
    /**
     * The gateway for the static route.
     */
    staticRouteGateway: string;
    /**
     * The ID of the source network for the static route.
     */
    staticRouteSourceNetworkId: string;
    /**
     * The subnet mask for the static route.
     */
    subnetMask: string;
}

export interface GetTemplateTemplateDetailTemplateValid {
    /**
     * List of messages associated with the template validity.
     */
    messages: outputs.GetTemplateTemplateDetailTemplateValidMessage[];
    /**
     * Indicates whether the template is valid.
     */
    valid: boolean;
}

export interface GetTemplateTemplateDetailTemplateValidMessage {
    /**
     * The identifier of the agent associated with the message.
     */
    agentId: string;
    /**
     * The category or type of the message.
     */
    category: string;
    /**
     * The identifier used to correlate related messages.
     */
    correlationId: string;
    /**
     * A detailed version or description of the message.
     */
    detailedMessage: string;
    /**
     * The message to be displayed or shown.
     */
    displayMessage: string;
    /**
     * The unique identifier for the message.
     */
    id: string;
    /**
     * The bundle or group to which the message belongs.
     */
    messageBundle: string;
    /**
     * The code associated with the message.
     */
    messageCode: string;
    /**
     * The action to be taken in response to the message.
     */
    responseAction: string;
    /**
     * The sequence number of the message in a series.
     */
    sequenceNumber: number;
    /**
     * The severity level of the message (e.g., INFO, WARNING, ERROR).
     */
    severity: string;
    /**
     * The timestamp indicating when the message was generated.
     */
    timeStamp: string;
}

export interface GetVolumeVolume {
    /**
     * Specifies the access mode limit.
     */
    accessModeLimit: string;
    /**
     * The volume id to which the snapshot is linked to.
     */
    ancestorVolumeId: string;
    /**
     * Specifies the compression method.
     */
    compressionMethod: string;
    /**
     * The unique id for the consistency group.
     */
    consistencyGroupId: string;
    /**
     * Specifies the time of creation.
     */
    creationTime: number;
    /**
     * Specifies the layout for the data.
     */
    dataLayout: string;
    /**
     * Unique identifier of the volume instance.
     */
    id: string;
    /**
     * Specifies the links asscociated for a volume.
     */
    links: outputs.GetVolumeVolumeLink[];
    /**
     * Specifies if it's a locked auto snapshot.
     */
    lockedAutoSnapshot: boolean;
    /**
     * Specifies if it's a locked auto snapshot marked for removal.
     */
    lockedAutoSnapshotMarkedForRemoval: boolean;
    /**
     * Specifies by whom it's managed by.
     */
    managedBy: string;
    /**
     * Specifies the list of sdc's mapped to a volume.
     */
    mappedSdcInfos: outputs.GetVolumeVolumeMappedSdcInfo[];
    /**
     * Name of the volume.
     */
    name: string;
    /**
     * Specifies if not genuine snapshot.
     */
    notGenuineSnapshot: boolean;
    /**
     * Specifies the original expiry time.
     */
    originalExpiryTime: number;
    /**
     * Specifies the replication journal volume.
     */
    replicationJournalVolume: boolean;
    /**
     * Specifies the replication time stamp.
     */
    replicationTimeStamp: number;
    /**
     * Specifies the secure snapshot expiry time.
     */
    secureSnapshotExpTime: number;
    /**
     * Size of the volume in KB
     */
    sizeInKb: number;
    /**
     * Specifies the unique identifier of the storage pool.
     */
    storagePoolId: string;
    /**
     * Specifies if the time stamp is accurate.
     */
    timeStampIsAccurate: boolean;
    /**
     * Enable rm cache.
     */
    useRmCache: boolean;
    /**
     * Specifies the volume replication state.
     */
    volumeReplicationState: string;
    /**
     * Specifies the type of that volume.
     */
    volumeType: string;
    /**
     * Unique identifier of the VTree
     */
    vtreeId: string;
}

export interface GetVolumeVolumeLink {
    /**
     * Specifies the exact path to fetch the details.
     */
    href: string;
    /**
     * Specifies the relationship with the volume.
     */
    rel: string;
}

export interface GetVolumeVolumeMappedSdcInfo {
    /**
     * Specifies the access mode.
     */
    accessMode: string;
    /**
     * Specifies if it is direct buffer mapping.
     */
    isDirectBufferMapping: boolean;
    /**
     * Specifies the bandwidth limits in Mbps.
     */
    limitBwInMbps: number;
    /**
     * Specifies the IOPS limits.
     */
    limitIops: number;
    /**
     * Unique identifier for sdc.
     */
    sdcId: string;
    /**
     * Ip of the sdc.
     */
    sdcIp: string;
    /**
     * Specifies the name of the sdc.
     */
    sdcName: string;
}

export interface GetVtreeVtreeDetail {
    /**
     * Compression method
     */
    compressionMethod: string;
    /**
     * Data layout
     */
    dataLayout: string;
    /**
     * VTree ID
     */
    id: string;
    /**
     * In deletion
     */
    inDeletion: boolean;
    /**
     * Specifies the links asscociated with VTree
     */
    links: outputs.GetVtreeVtreeDetailLink[];
    /**
     * VTree name
     */
    name: string;
    /**
     * Root volumes
     */
    rootVolumes: string[];
    /**
     * Storage pool ID
     */
    storagePoolId: string;
    /**
     * Vtree migration information
     */
    vtreeMigrationInfo: outputs.GetVtreeVtreeDetailVtreeMigrationInfo;
}

export interface GetVtreeVtreeDetailLink {
    /**
     * Specifies the exact path to fetch the details
     */
    href: string;
    /**
     * Specifies the relationship with the VTree
     */
    rel: string;
}

export interface GetVtreeVtreeDetailVtreeMigrationInfo {
    /**
     * Destination storage pool ID
     */
    destinationStoragePoolId: string;
    /**
     * Migration pause reason
     */
    migrationPauseReason: string;
    /**
     * Migration queue position
     */
    migrationQueuePosition: number;
    /**
     * Migration status
     */
    migrationStatus: string;
    /**
     * Source storage pool ID
     */
    sourceStoragePoolId: string;
    /**
     * Thickness conversion type
     */
    thicknessConversionType: string;
}

export interface MdmClusterPrimaryMdm {
    /**
     * ID of the primary MDM.
     */
    id: string;
    /**
     * The Ips of the primary MDM.
     */
    ips: string[];
    /**
     * The management ips of the primary MDM.
     */
    managementIps: string[];
    /**
     * Name of the the primary MDM.
     */
    name: string;
    /**
     * Port of the primary MDM.
     */
    port: number;
}

export interface MdmClusterSecondaryMdm {
    /**
     * ID of the secondary MDM.
     */
    id: string;
    /**
     * The Ips of the secondary MDM.
     */
    ips: string[];
    /**
     * The management ips of the secondary MDM.
     */
    managementIps: string[];
    /**
     * Name of the the secondary MDM.
     */
    name: string;
    /**
     * Port of the secondary MDM.
     */
    port: number;
}

export interface MdmClusterStandbyMdm {
    /**
     * Allow the added MDM to have a different number of IPs from the primary MDM. Cannot be updated.
     */
    allowAsymmetricIps: boolean;
    /**
     * ID of the standby MDM.
     */
    id: string;
    /**
     * The Ips of the standby MDM. Cannot be updated.
     */
    ips: string[];
    /**
     * The management ips of the standby MDM. Cannot be updated.
     */
    managementIps: string[];
    /**
     * Name of the the standby MDM.
     */
    name: string;
    /**
     * Port of the standby MDM. Cannot be updated.
     */
    port: number;
    /**
     * Role of the standby mdm. Accepted values are `Manager` and `TieBreaker`. Cannot be updated.
     */
    role: string;
}

export interface MdmClusterTiebreakerMdm {
    /**
     * ID of the tiebreaker MDM.
     */
    id: string;
    /**
     * The Ips of the tiebreaker MDM.
     */
    ips: string[];
    /**
     * The management ips of the tiebreaker MDM.
     */
    managementIps: string[];
    /**
     * Name of the the tiebreaker MDM.
     */
    name: string;
    /**
     * Port of the tiebreaker MDM.
     */
    port: number;
}

export interface PackagePackageDetail {
    /**
     * The Name of package.
     */
    fileName: string;
    /**
     * Uploaded Package Minor Version with OS Combination.
     */
    label: string;
    /**
     * Package Version is latest or not
     */
    latest: boolean;
    /**
     * Type of Linux OS
     */
    linuxFlavour: string;
    /**
     * Supported OS.
     */
    operatingSystem: string;
    /**
     * Package Patch Number.
     */
    sioPatchNumber: number;
    /**
     * Size of Package.
     */
    size: number;
    /**
     * Type of Package. Like. MDM, LIA, SDS, SDC, etc.
     */
    type: string;
    /**
     * Uploaded Package Version.
     */
    version: string;
}

export interface ProtectionDomainLink {
    /**
     * Specifies the exact path to fetch the details.
     */
    href: string;
    /**
     * Specifies the relationship with the Protection Domain.
     */
    rel: string;
}

export interface SdcHostEsxi {
    /**
     * GUID of the SDC.
     */
    guid: string;
    /**
     * Whether to verify the VIB signature or not. Defaults to `true`.
     */
    verifyVibSignature: boolean;
}

export interface SdcHostRemote {
    /**
     * Remote Login certificate issued by a CA to the remote login user. Must be used with `private_key` and the private key must match the certificate.
     */
    certificate?: string;
    /**
     * Directory on the SDC server to upload packages to for Unix. Defaults to `/tmp` on Unix.
     */
    dir?: string;
    /**
     * Remote Login host key of the SDC server. Corresponds to the UserKnownHostsFile field of OpenSSH.
     */
    hostKey?: string;
    /**
     * Remote Login password of the SDC server.
     */
    password?: string;
    /**
     * Remote Login port of the SDC server. Defaults to `22`.
     */
    port: string;
    /**
     * Remote Login private key of the SDC server. Corresponds to the IdentityFile field of OpenSSH.
     */
    privateKey?: string;
    /**
     * Remote Login username of the SDC server.
     */
    user: string;
}

export interface SdcVolumesMappingVolumeList {
    /**
     * The Access Mode of the SDC. Valid values are `ReadOnly`, `ReadWrite` and `NoAccess`. Default value is `ReadOnly`.
     */
    accessMode: string;
    /**
     * Bandwidth limit in MBPS. `0` represents unlimited bandwith. Default value is `0`.
     */
    limitBwInMbps: number;
    /**
     * IOPS limit. Valid values are 0 or integers greater than 10. `0` represents unlimited IOPS. Default value is `0`.
     */
    limitIops: number;
    /**
     * The ID of the volume.
     */
    volumeId: string;
    /**
     * The name of the volume.
     */
    volumeName: string;
}

export interface SdsIpList {
    /**
     * IP address to be assigned to the SDS.
     */
    ip: string;
    /**
     * Role to be assigned to the IP address. Valid values are `all`, `sdcOnly` and `sdsOnly`.
     */
    role: string;
}

export interface SystemSdcApprovedIp {
    /**
     * SDC ID.
     */
    id: string;
    /**
     * SDC IPs.
     */
    ips: string[];
}

