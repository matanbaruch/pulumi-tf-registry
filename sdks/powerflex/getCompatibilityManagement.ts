// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getCompatibilityManagement(args?: GetCompatibilityManagementArgs, opts?: pulumi.InvokeOptions): Promise<GetCompatibilityManagementResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("powerflex:index/getCompatibilityManagement:getCompatibilityManagement", {
        "repositoryPath": args.repositoryPath,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCompatibilityManagement.
 */
export interface GetCompatibilityManagementArgs {
    repositoryPath?: string;
}

/**
 * A collection of values returned by getCompatibilityManagement.
 */
export interface GetCompatibilityManagementResult {
    readonly availableVersion: string;
    readonly compatibilityData: string;
    readonly compatibilityDataBytes: string;
    readonly currentVersion: string;
    readonly id: string;
    readonly repositoryPath?: string;
    readonly source: string;
}
export function getCompatibilityManagementOutput(args?: GetCompatibilityManagementOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCompatibilityManagementResult> {
    return pulumi.output(args).apply((a: any) => getCompatibilityManagement(a, opts))
}

/**
 * A collection of arguments for invoking getCompatibilityManagement.
 */
export interface GetCompatibilityManagementOutputArgs {
    repositoryPath?: pulumi.Input<string>;
}
