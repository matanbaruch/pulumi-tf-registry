// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Snapshot extends pulumi.CustomResource {
    /**
     * Get an existing Snapshot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnapshotState, opts?: pulumi.CustomResourceOptions): Snapshot {
        return new Snapshot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerflex:index/snapshot:Snapshot';

    /**
     * Returns true if the given object is an instance of Snapshot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Snapshot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Snapshot.__pulumiType;
    }

    /**
     * The Access mode of snapshot. Valid values are `ReadOnly` and `ReadWrite`. Default value is `ReadOnly`.
     */
    public readonly accessMode!: pulumi.Output<string>;
    /**
     * Unit of capacity of the volume. Must be one of `GB` and `TB`. Default value is `GB`.
     */
    public readonly capacityUnit!: pulumi.Output<string>;
    /**
     * The minimum amount of time that the snapshot should be retained on the array starting at the time of apply. The unit is
     * defined by `retention_unit`. Cannot be decreased.
     */
    public readonly desiredRetention!: pulumi.Output<number | undefined>;
    /**
     * lock auto snapshot
     */
    public readonly lockAutoSnapshot!: pulumi.Output<boolean>;
    /**
     * The name of the snapshot.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Remove mode of the snapshot. Valid values are `ONLY_ME` and `INCLUDING_DESCENDANTS`. Default value is `ONLY_ME`.
     */
    public readonly removeMode!: pulumi.Output<string>;
    /**
     * retention of snapshot in min
     */
    public /*out*/ readonly retentionInMin!: pulumi.Output<string>;
    /**
     * Retention unit of the snapshot. Valid values are `hours` and `days`. Default value is `hours`.
     */
    public readonly retentionUnit!: pulumi.Output<string>;
    /**
     * Size of the snapshot. The unit of size is defined by `capacity_unit`. The storage capacity of a snapshot must be a
     * multiple of 8GB and cannot be decreased.
     */
    public readonly size!: pulumi.Output<number>;
    /**
     * Size in KB
     */
    public /*out*/ readonly sizeInKb!: pulumi.Output<number>;
    /**
     * The ID of the volume from which snapshot is to be created. Conflicts with `volume_name`. Cannot be updated.
     */
    public readonly volumeId!: pulumi.Output<string>;
    /**
     * The volume name for which snapshot is created. Conflicts with `volume_id`. Cannot be updated.
     */
    public readonly volumeName!: pulumi.Output<string | undefined>;

    /**
     * Create a Snapshot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SnapshotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnapshotArgs | SnapshotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnapshotState | undefined;
            resourceInputs["accessMode"] = state ? state.accessMode : undefined;
            resourceInputs["capacityUnit"] = state ? state.capacityUnit : undefined;
            resourceInputs["desiredRetention"] = state ? state.desiredRetention : undefined;
            resourceInputs["lockAutoSnapshot"] = state ? state.lockAutoSnapshot : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["removeMode"] = state ? state.removeMode : undefined;
            resourceInputs["retentionInMin"] = state ? state.retentionInMin : undefined;
            resourceInputs["retentionUnit"] = state ? state.retentionUnit : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["sizeInKb"] = state ? state.sizeInKb : undefined;
            resourceInputs["volumeId"] = state ? state.volumeId : undefined;
            resourceInputs["volumeName"] = state ? state.volumeName : undefined;
        } else {
            const args = argsOrState as SnapshotArgs | undefined;
            resourceInputs["accessMode"] = args ? args.accessMode : undefined;
            resourceInputs["capacityUnit"] = args ? args.capacityUnit : undefined;
            resourceInputs["desiredRetention"] = args ? args.desiredRetention : undefined;
            resourceInputs["lockAutoSnapshot"] = args ? args.lockAutoSnapshot : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["removeMode"] = args ? args.removeMode : undefined;
            resourceInputs["retentionUnit"] = args ? args.retentionUnit : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["volumeId"] = args ? args.volumeId : undefined;
            resourceInputs["volumeName"] = args ? args.volumeName : undefined;
            resourceInputs["retentionInMin"] = undefined /*out*/;
            resourceInputs["sizeInKb"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Snapshot.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Snapshot resources.
 */
export interface SnapshotState {
    /**
     * The Access mode of snapshot. Valid values are `ReadOnly` and `ReadWrite`. Default value is `ReadOnly`.
     */
    accessMode?: pulumi.Input<string>;
    /**
     * Unit of capacity of the volume. Must be one of `GB` and `TB`. Default value is `GB`.
     */
    capacityUnit?: pulumi.Input<string>;
    /**
     * The minimum amount of time that the snapshot should be retained on the array starting at the time of apply. The unit is
     * defined by `retention_unit`. Cannot be decreased.
     */
    desiredRetention?: pulumi.Input<number>;
    /**
     * lock auto snapshot
     */
    lockAutoSnapshot?: pulumi.Input<boolean>;
    /**
     * The name of the snapshot.
     */
    name?: pulumi.Input<string>;
    /**
     * Remove mode of the snapshot. Valid values are `ONLY_ME` and `INCLUDING_DESCENDANTS`. Default value is `ONLY_ME`.
     */
    removeMode?: pulumi.Input<string>;
    /**
     * retention of snapshot in min
     */
    retentionInMin?: pulumi.Input<string>;
    /**
     * Retention unit of the snapshot. Valid values are `hours` and `days`. Default value is `hours`.
     */
    retentionUnit?: pulumi.Input<string>;
    /**
     * Size of the snapshot. The unit of size is defined by `capacity_unit`. The storage capacity of a snapshot must be a
     * multiple of 8GB and cannot be decreased.
     */
    size?: pulumi.Input<number>;
    /**
     * Size in KB
     */
    sizeInKb?: pulumi.Input<number>;
    /**
     * The ID of the volume from which snapshot is to be created. Conflicts with `volume_name`. Cannot be updated.
     */
    volumeId?: pulumi.Input<string>;
    /**
     * The volume name for which snapshot is created. Conflicts with `volume_id`. Cannot be updated.
     */
    volumeName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Snapshot resource.
 */
export interface SnapshotArgs {
    /**
     * The Access mode of snapshot. Valid values are `ReadOnly` and `ReadWrite`. Default value is `ReadOnly`.
     */
    accessMode?: pulumi.Input<string>;
    /**
     * Unit of capacity of the volume. Must be one of `GB` and `TB`. Default value is `GB`.
     */
    capacityUnit?: pulumi.Input<string>;
    /**
     * The minimum amount of time that the snapshot should be retained on the array starting at the time of apply. The unit is
     * defined by `retention_unit`. Cannot be decreased.
     */
    desiredRetention?: pulumi.Input<number>;
    /**
     * lock auto snapshot
     */
    lockAutoSnapshot?: pulumi.Input<boolean>;
    /**
     * The name of the snapshot.
     */
    name?: pulumi.Input<string>;
    /**
     * Remove mode of the snapshot. Valid values are `ONLY_ME` and `INCLUDING_DESCENDANTS`. Default value is `ONLY_ME`.
     */
    removeMode?: pulumi.Input<string>;
    /**
     * Retention unit of the snapshot. Valid values are `hours` and `days`. Default value is `hours`.
     */
    retentionUnit?: pulumi.Input<string>;
    /**
     * Size of the snapshot. The unit of size is defined by `capacity_unit`. The storage capacity of a snapshot must be a
     * multiple of 8GB and cannot be decreased.
     */
    size?: pulumi.Input<number>;
    /**
     * The ID of the volume from which snapshot is to be created. Conflicts with `volume_name`. Cannot be updated.
     */
    volumeId?: pulumi.Input<string>;
    /**
     * The volume name for which snapshot is created. Conflicts with `volume_id`. Cannot be updated.
     */
    volumeName?: pulumi.Input<string>;
}
