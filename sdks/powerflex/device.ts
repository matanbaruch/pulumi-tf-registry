// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Device extends pulumi.CustomResource {
    /**
     * Get an existing Device resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeviceState, opts?: pulumi.CustomResourceOptions): Device {
        return new Device(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerflex:index/device:Device';

    /**
     * Returns true if the given object is an instance of Device.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Device {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Device.__pulumiType;
    }

    /**
     * Capacity of the device in GB.
     */
    public readonly deviceCapacity!: pulumi.Output<number | undefined>;
    /**
     * Capacity of the device in KB.
     */
    public /*out*/ readonly deviceCapacityInKb!: pulumi.Output<number>;
    /**
     * Original path of the device.
     */
    public /*out*/ readonly deviceOriginalPath!: pulumi.Output<string>;
    /**
     * The current path of the device. Cannot be updated.
     */
    public readonly devicePath!: pulumi.Output<string>;
    /**
     * State of the device.
     */
    public /*out*/ readonly deviceState!: pulumi.Output<string>;
    /**
     * External acceleration type of the device. Valid values are `None`, `Read`, `Write`, `ReadAndWrite`.
     */
    public readonly externalAccelerationType!: pulumi.Output<string>;
    /**
     * Media type of the device. Valid values are `HDD`, `SSD`.
     */
    public readonly mediaType!: pulumi.Output<string>;
    /**
     * The name of the device.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of the protection domain. Conflicts with `protection_domain_name`. Cannot be updated.
     */
    public readonly protectionDomainId!: pulumi.Output<string | undefined>;
    /**
     * Name of the protection domain. Conflicts with `protection_domain_id`. Cannot be updated.
     */
    public readonly protectionDomainName!: pulumi.Output<string | undefined>;
    /**
     * ID of the SDS. Conflicts with `sds_name`. Cannot be updated.
     */
    public readonly sdsId!: pulumi.Output<string>;
    /**
     * Name of the SDS. Conflicts with `sds_id`. Cannot be updated.
     */
    public readonly sdsName!: pulumi.Output<string | undefined>;
    /**
     * ID of the storage pool. Conflicts with `storage_pool_name`. Cannot be updated.
     */
    public readonly storagePoolId!: pulumi.Output<string>;
    /**
     * Name of the storage pool. Conflicts with `storage_pool_id`. Cannot be updated.
     */
    public readonly storagePoolName!: pulumi.Output<string | undefined>;

    /**
     * Create a Device resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeviceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeviceArgs | DeviceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeviceState | undefined;
            resourceInputs["deviceCapacity"] = state ? state.deviceCapacity : undefined;
            resourceInputs["deviceCapacityInKb"] = state ? state.deviceCapacityInKb : undefined;
            resourceInputs["deviceOriginalPath"] = state ? state.deviceOriginalPath : undefined;
            resourceInputs["devicePath"] = state ? state.devicePath : undefined;
            resourceInputs["deviceState"] = state ? state.deviceState : undefined;
            resourceInputs["externalAccelerationType"] = state ? state.externalAccelerationType : undefined;
            resourceInputs["mediaType"] = state ? state.mediaType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["protectionDomainId"] = state ? state.protectionDomainId : undefined;
            resourceInputs["protectionDomainName"] = state ? state.protectionDomainName : undefined;
            resourceInputs["sdsId"] = state ? state.sdsId : undefined;
            resourceInputs["sdsName"] = state ? state.sdsName : undefined;
            resourceInputs["storagePoolId"] = state ? state.storagePoolId : undefined;
            resourceInputs["storagePoolName"] = state ? state.storagePoolName : undefined;
        } else {
            const args = argsOrState as DeviceArgs | undefined;
            if ((!args || args.devicePath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'devicePath'");
            }
            resourceInputs["deviceCapacity"] = args ? args.deviceCapacity : undefined;
            resourceInputs["devicePath"] = args ? args.devicePath : undefined;
            resourceInputs["externalAccelerationType"] = args ? args.externalAccelerationType : undefined;
            resourceInputs["mediaType"] = args ? args.mediaType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["protectionDomainId"] = args ? args.protectionDomainId : undefined;
            resourceInputs["protectionDomainName"] = args ? args.protectionDomainName : undefined;
            resourceInputs["sdsId"] = args ? args.sdsId : undefined;
            resourceInputs["sdsName"] = args ? args.sdsName : undefined;
            resourceInputs["storagePoolId"] = args ? args.storagePoolId : undefined;
            resourceInputs["storagePoolName"] = args ? args.storagePoolName : undefined;
            resourceInputs["deviceCapacityInKb"] = undefined /*out*/;
            resourceInputs["deviceOriginalPath"] = undefined /*out*/;
            resourceInputs["deviceState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Device.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Device resources.
 */
export interface DeviceState {
    /**
     * Capacity of the device in GB.
     */
    deviceCapacity?: pulumi.Input<number>;
    /**
     * Capacity of the device in KB.
     */
    deviceCapacityInKb?: pulumi.Input<number>;
    /**
     * Original path of the device.
     */
    deviceOriginalPath?: pulumi.Input<string>;
    /**
     * The current path of the device. Cannot be updated.
     */
    devicePath?: pulumi.Input<string>;
    /**
     * State of the device.
     */
    deviceState?: pulumi.Input<string>;
    /**
     * External acceleration type of the device. Valid values are `None`, `Read`, `Write`, `ReadAndWrite`.
     */
    externalAccelerationType?: pulumi.Input<string>;
    /**
     * Media type of the device. Valid values are `HDD`, `SSD`.
     */
    mediaType?: pulumi.Input<string>;
    /**
     * The name of the device.
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the protection domain. Conflicts with `protection_domain_name`. Cannot be updated.
     */
    protectionDomainId?: pulumi.Input<string>;
    /**
     * Name of the protection domain. Conflicts with `protection_domain_id`. Cannot be updated.
     */
    protectionDomainName?: pulumi.Input<string>;
    /**
     * ID of the SDS. Conflicts with `sds_name`. Cannot be updated.
     */
    sdsId?: pulumi.Input<string>;
    /**
     * Name of the SDS. Conflicts with `sds_id`. Cannot be updated.
     */
    sdsName?: pulumi.Input<string>;
    /**
     * ID of the storage pool. Conflicts with `storage_pool_name`. Cannot be updated.
     */
    storagePoolId?: pulumi.Input<string>;
    /**
     * Name of the storage pool. Conflicts with `storage_pool_id`. Cannot be updated.
     */
    storagePoolName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Device resource.
 */
export interface DeviceArgs {
    /**
     * Capacity of the device in GB.
     */
    deviceCapacity?: pulumi.Input<number>;
    /**
     * The current path of the device. Cannot be updated.
     */
    devicePath: pulumi.Input<string>;
    /**
     * External acceleration type of the device. Valid values are `None`, `Read`, `Write`, `ReadAndWrite`.
     */
    externalAccelerationType?: pulumi.Input<string>;
    /**
     * Media type of the device. Valid values are `HDD`, `SSD`.
     */
    mediaType?: pulumi.Input<string>;
    /**
     * The name of the device.
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the protection domain. Conflicts with `protection_domain_name`. Cannot be updated.
     */
    protectionDomainId?: pulumi.Input<string>;
    /**
     * Name of the protection domain. Conflicts with `protection_domain_id`. Cannot be updated.
     */
    protectionDomainName?: pulumi.Input<string>;
    /**
     * ID of the SDS. Conflicts with `sds_name`. Cannot be updated.
     */
    sdsId?: pulumi.Input<string>;
    /**
     * Name of the SDS. Conflicts with `sds_id`. Cannot be updated.
     */
    sdsName?: pulumi.Input<string>;
    /**
     * ID of the storage pool. Conflicts with `storage_pool_name`. Cannot be updated.
     */
    storagePoolId?: pulumi.Input<string>;
    /**
     * Name of the storage pool. Conflicts with `storage_pool_id`. Cannot be updated.
     */
    storagePoolName?: pulumi.Input<string>;
}
