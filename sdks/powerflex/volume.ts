// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeState, opts?: pulumi.CustomResourceOptions): Volume {
        return new Volume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerflex:index/volume:Volume';

    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Volume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }

    /**
     * The Access mode of the volume. Valid values are `ReadOnly` and `ReadWrite`. Default value is `ReadOnly`.
     */
    public readonly accessMode!: pulumi.Output<string>;
    /**
     * Unit of capacity of the volume. Must be one of `GB` and `TB`. Default value is `GB`.
     */
    public readonly capacityUnit!: pulumi.Output<string>;
    /**
     * Compression Method of the volume. Valid values are `None` and `Normal`.
     */
    public readonly compressionMethod!: pulumi.Output<string>;
    /**
     * The name of the volume.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of the Protection Domain under which the volume will be created. Conflicts with `protection_domain_name`. Cannot be
     * updated.
     */
    public readonly protectionDomainId!: pulumi.Output<string>;
    /**
     * Name of the Protection Domain under which the volume will be created. Conflicts with `protection_domain_id`. Cannot be
     * updated.
     */
    public readonly protectionDomainName!: pulumi.Output<string | undefined>;
    /**
     * Remove mode of the volume. Valid values are `ONLY_ME` and `INCLUDING_DESCENDANTS`. Default value is `ONLY_ME`.
     */
    public readonly removeMode!: pulumi.Output<string>;
    /**
     * Size of the volume. The unit of size is defined by `capacity_unit`. The storage capacity of a volume must be a multiple
     * of 8GB and cannot be decreased.
     */
    public readonly size!: pulumi.Output<number>;
    /**
     * Size in KB
     */
    public /*out*/ readonly sizeInKb!: pulumi.Output<number>;
    /**
     * ID of the Storage Pool under which the volume will be created. Conflicts with `storage_pool_name`. Cannot be updated.
     */
    public readonly storagePoolId!: pulumi.Output<string>;
    /**
     * Name of the Storage Pool under which the volume will be created. Conflicts with `storage_pool_id`. Cannot be updated.
     */
    public readonly storagePoolName!: pulumi.Output<string | undefined>;
    /**
     * use rm cache
     */
    public readonly useRmCache!: pulumi.Output<boolean>;
    /**
     * Volume type. Valid values are `ThickProvisioned` and `ThinProvisioned`. Default value is `ThinProvisioned`.
     */
    public readonly volumeType!: pulumi.Output<string>;

    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeArgs | VolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeState | undefined;
            resourceInputs["accessMode"] = state ? state.accessMode : undefined;
            resourceInputs["capacityUnit"] = state ? state.capacityUnit : undefined;
            resourceInputs["compressionMethod"] = state ? state.compressionMethod : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["protectionDomainId"] = state ? state.protectionDomainId : undefined;
            resourceInputs["protectionDomainName"] = state ? state.protectionDomainName : undefined;
            resourceInputs["removeMode"] = state ? state.removeMode : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["sizeInKb"] = state ? state.sizeInKb : undefined;
            resourceInputs["storagePoolId"] = state ? state.storagePoolId : undefined;
            resourceInputs["storagePoolName"] = state ? state.storagePoolName : undefined;
            resourceInputs["useRmCache"] = state ? state.useRmCache : undefined;
            resourceInputs["volumeType"] = state ? state.volumeType : undefined;
        } else {
            const args = argsOrState as VolumeArgs | undefined;
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["accessMode"] = args ? args.accessMode : undefined;
            resourceInputs["capacityUnit"] = args ? args.capacityUnit : undefined;
            resourceInputs["compressionMethod"] = args ? args.compressionMethod : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["protectionDomainId"] = args ? args.protectionDomainId : undefined;
            resourceInputs["protectionDomainName"] = args ? args.protectionDomainName : undefined;
            resourceInputs["removeMode"] = args ? args.removeMode : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["storagePoolId"] = args ? args.storagePoolId : undefined;
            resourceInputs["storagePoolName"] = args ? args.storagePoolName : undefined;
            resourceInputs["useRmCache"] = args ? args.useRmCache : undefined;
            resourceInputs["volumeType"] = args ? args.volumeType : undefined;
            resourceInputs["sizeInKb"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Volume.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Volume resources.
 */
export interface VolumeState {
    /**
     * The Access mode of the volume. Valid values are `ReadOnly` and `ReadWrite`. Default value is `ReadOnly`.
     */
    accessMode?: pulumi.Input<string>;
    /**
     * Unit of capacity of the volume. Must be one of `GB` and `TB`. Default value is `GB`.
     */
    capacityUnit?: pulumi.Input<string>;
    /**
     * Compression Method of the volume. Valid values are `None` and `Normal`.
     */
    compressionMethod?: pulumi.Input<string>;
    /**
     * The name of the volume.
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the Protection Domain under which the volume will be created. Conflicts with `protection_domain_name`. Cannot be
     * updated.
     */
    protectionDomainId?: pulumi.Input<string>;
    /**
     * Name of the Protection Domain under which the volume will be created. Conflicts with `protection_domain_id`. Cannot be
     * updated.
     */
    protectionDomainName?: pulumi.Input<string>;
    /**
     * Remove mode of the volume. Valid values are `ONLY_ME` and `INCLUDING_DESCENDANTS`. Default value is `ONLY_ME`.
     */
    removeMode?: pulumi.Input<string>;
    /**
     * Size of the volume. The unit of size is defined by `capacity_unit`. The storage capacity of a volume must be a multiple
     * of 8GB and cannot be decreased.
     */
    size?: pulumi.Input<number>;
    /**
     * Size in KB
     */
    sizeInKb?: pulumi.Input<number>;
    /**
     * ID of the Storage Pool under which the volume will be created. Conflicts with `storage_pool_name`. Cannot be updated.
     */
    storagePoolId?: pulumi.Input<string>;
    /**
     * Name of the Storage Pool under which the volume will be created. Conflicts with `storage_pool_id`. Cannot be updated.
     */
    storagePoolName?: pulumi.Input<string>;
    /**
     * use rm cache
     */
    useRmCache?: pulumi.Input<boolean>;
    /**
     * Volume type. Valid values are `ThickProvisioned` and `ThinProvisioned`. Default value is `ThinProvisioned`.
     */
    volumeType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    /**
     * The Access mode of the volume. Valid values are `ReadOnly` and `ReadWrite`. Default value is `ReadOnly`.
     */
    accessMode?: pulumi.Input<string>;
    /**
     * Unit of capacity of the volume. Must be one of `GB` and `TB`. Default value is `GB`.
     */
    capacityUnit?: pulumi.Input<string>;
    /**
     * Compression Method of the volume. Valid values are `None` and `Normal`.
     */
    compressionMethod?: pulumi.Input<string>;
    /**
     * The name of the volume.
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the Protection Domain under which the volume will be created. Conflicts with `protection_domain_name`. Cannot be
     * updated.
     */
    protectionDomainId?: pulumi.Input<string>;
    /**
     * Name of the Protection Domain under which the volume will be created. Conflicts with `protection_domain_id`. Cannot be
     * updated.
     */
    protectionDomainName?: pulumi.Input<string>;
    /**
     * Remove mode of the volume. Valid values are `ONLY_ME` and `INCLUDING_DESCENDANTS`. Default value is `ONLY_ME`.
     */
    removeMode?: pulumi.Input<string>;
    /**
     * Size of the volume. The unit of size is defined by `capacity_unit`. The storage capacity of a volume must be a multiple
     * of 8GB and cannot be decreased.
     */
    size: pulumi.Input<number>;
    /**
     * ID of the Storage Pool under which the volume will be created. Conflicts with `storage_pool_name`. Cannot be updated.
     */
    storagePoolId?: pulumi.Input<string>;
    /**
     * Name of the Storage Pool under which the volume will be created. Conflicts with `storage_pool_id`. Cannot be updated.
     */
    storagePoolName?: pulumi.Input<string>;
    /**
     * use rm cache
     */
    useRmCache?: pulumi.Input<boolean>;
    /**
     * Volume type. Valid values are `ThickProvisioned` and `ThinProvisioned`. Default value is `ThinProvisioned`.
     */
    volumeType?: pulumi.Input<string>;
}
