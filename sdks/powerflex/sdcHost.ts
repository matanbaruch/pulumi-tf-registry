// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SdcHost extends pulumi.CustomResource {
    /**
     * Get an existing SdcHost resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SdcHostState, opts?: pulumi.CustomResourceOptions): SdcHost {
        return new SdcHost(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerflex:index/sdcHost:SdcHost';

    /**
     * Returns true if the given object is an instance of SdcHost.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SdcHost {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SdcHost.__pulumiType;
    }

    /**
     * List of MDM IPs (primary,secondary or list of virtual IPs) seperated by cluster, to be assigned to the SDC.Each string
     * in the list is a set of Mdm Ips related to a specific cluster. These Ips should be seperated by comma I.E.
     * ['x.x.x.x,y.y.y.y', 'z.z.z.z,a.a.a.a'].
     */
    public readonly clustersMdmIps!: pulumi.Output<string[]>;
    /**
     * Details of the SDC host if the `os_family` is `esxi`.
     */
    public readonly esxi!: pulumi.Output<outputs.SdcHostEsxi | undefined>;
    /**
     * GUID of the HOST
     */
    public /*out*/ readonly guid!: pulumi.Output<string>;
    /**
     * IP address of the server to be configured as SDC.
     */
    public readonly ip!: pulumi.Output<string>;
    /**
     * Is Host Approved
     */
    public /*out*/ readonly isApproved!: pulumi.Output<boolean>;
    /**
     * Path to the drv_cfg for linux, defaults to /opt/emc/scaleio/sdc/bin/
     */
    public readonly linuxDrvCfg!: pulumi.Output<string>;
    /**
     * MDM Connection State
     */
    public /*out*/ readonly mdmConnectionState!: pulumi.Output<string>;
    /**
     * Name of SDC.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Is Host on VMware
     */
    public /*out*/ readonly onVmware!: pulumi.Output<boolean>;
    /**
     * Operating System family of the SDC. Accepted values are 'linux', 'windows' and 'esxi'. Cannot be changed once set.
     */
    public readonly osFamily!: pulumi.Output<string>;
    /**
     * Full path (on local machine) of the package to be installed on the SDC.
     */
    public readonly packagePath!: pulumi.Output<string>;
    /**
     * Performance profile of the SDC. Accepted values are 'HighPerformance' and 'Compact'.
     */
    public readonly performanceProfile!: pulumi.Output<string>;
    /**
     * Remote login details of the SDC.
     */
    public readonly remote!: pulumi.Output<outputs.SdcHostRemote>;
    /**
     * System ID of the Host
     */
    public /*out*/ readonly systemId!: pulumi.Output<string>;
    /**
     * Use path on remote server where SDC is installed. Defaults to `false`.
     */
    public readonly useRemotePath!: pulumi.Output<boolean>;
    /**
     * Path to the drv_cfg.exe config for windows, defaults to C:\Program Files\EMC\scaleio\sdc\bin\
     */
    public readonly windowsDrvCfg!: pulumi.Output<string>;

    /**
     * Create a SdcHost resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SdcHostArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SdcHostArgs | SdcHostState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SdcHostState | undefined;
            resourceInputs["clustersMdmIps"] = state ? state.clustersMdmIps : undefined;
            resourceInputs["esxi"] = state ? state.esxi : undefined;
            resourceInputs["guid"] = state ? state.guid : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["isApproved"] = state ? state.isApproved : undefined;
            resourceInputs["linuxDrvCfg"] = state ? state.linuxDrvCfg : undefined;
            resourceInputs["mdmConnectionState"] = state ? state.mdmConnectionState : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["onVmware"] = state ? state.onVmware : undefined;
            resourceInputs["osFamily"] = state ? state.osFamily : undefined;
            resourceInputs["packagePath"] = state ? state.packagePath : undefined;
            resourceInputs["performanceProfile"] = state ? state.performanceProfile : undefined;
            resourceInputs["remote"] = state ? state.remote : undefined;
            resourceInputs["systemId"] = state ? state.systemId : undefined;
            resourceInputs["useRemotePath"] = state ? state.useRemotePath : undefined;
            resourceInputs["windowsDrvCfg"] = state ? state.windowsDrvCfg : undefined;
        } else {
            const args = argsOrState as SdcHostArgs | undefined;
            if ((!args || args.ip === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ip'");
            }
            if ((!args || args.osFamily === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osFamily'");
            }
            if ((!args || args.packagePath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'packagePath'");
            }
            if ((!args || args.remote === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remote'");
            }
            resourceInputs["clustersMdmIps"] = args ? args.clustersMdmIps : undefined;
            resourceInputs["esxi"] = args ? args.esxi : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["linuxDrvCfg"] = args ? args.linuxDrvCfg : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["osFamily"] = args ? args.osFamily : undefined;
            resourceInputs["packagePath"] = args ? args.packagePath : undefined;
            resourceInputs["performanceProfile"] = args ? args.performanceProfile : undefined;
            resourceInputs["remote"] = args ? args.remote : undefined;
            resourceInputs["useRemotePath"] = args ? args.useRemotePath : undefined;
            resourceInputs["windowsDrvCfg"] = args ? args.windowsDrvCfg : undefined;
            resourceInputs["guid"] = undefined /*out*/;
            resourceInputs["isApproved"] = undefined /*out*/;
            resourceInputs["mdmConnectionState"] = undefined /*out*/;
            resourceInputs["onVmware"] = undefined /*out*/;
            resourceInputs["systemId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SdcHost.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SdcHost resources.
 */
export interface SdcHostState {
    /**
     * List of MDM IPs (primary,secondary or list of virtual IPs) seperated by cluster, to be assigned to the SDC.Each string
     * in the list is a set of Mdm Ips related to a specific cluster. These Ips should be seperated by comma I.E.
     * ['x.x.x.x,y.y.y.y', 'z.z.z.z,a.a.a.a'].
     */
    clustersMdmIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Details of the SDC host if the `os_family` is `esxi`.
     */
    esxi?: pulumi.Input<inputs.SdcHostEsxi>;
    /**
     * GUID of the HOST
     */
    guid?: pulumi.Input<string>;
    /**
     * IP address of the server to be configured as SDC.
     */
    ip?: pulumi.Input<string>;
    /**
     * Is Host Approved
     */
    isApproved?: pulumi.Input<boolean>;
    /**
     * Path to the drv_cfg for linux, defaults to /opt/emc/scaleio/sdc/bin/
     */
    linuxDrvCfg?: pulumi.Input<string>;
    /**
     * MDM Connection State
     */
    mdmConnectionState?: pulumi.Input<string>;
    /**
     * Name of SDC.
     */
    name?: pulumi.Input<string>;
    /**
     * Is Host on VMware
     */
    onVmware?: pulumi.Input<boolean>;
    /**
     * Operating System family of the SDC. Accepted values are 'linux', 'windows' and 'esxi'. Cannot be changed once set.
     */
    osFamily?: pulumi.Input<string>;
    /**
     * Full path (on local machine) of the package to be installed on the SDC.
     */
    packagePath?: pulumi.Input<string>;
    /**
     * Performance profile of the SDC. Accepted values are 'HighPerformance' and 'Compact'.
     */
    performanceProfile?: pulumi.Input<string>;
    /**
     * Remote login details of the SDC.
     */
    remote?: pulumi.Input<inputs.SdcHostRemote>;
    /**
     * System ID of the Host
     */
    systemId?: pulumi.Input<string>;
    /**
     * Use path on remote server where SDC is installed. Defaults to `false`.
     */
    useRemotePath?: pulumi.Input<boolean>;
    /**
     * Path to the drv_cfg.exe config for windows, defaults to C:\Program Files\EMC\scaleio\sdc\bin\
     */
    windowsDrvCfg?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SdcHost resource.
 */
export interface SdcHostArgs {
    /**
     * List of MDM IPs (primary,secondary or list of virtual IPs) seperated by cluster, to be assigned to the SDC.Each string
     * in the list is a set of Mdm Ips related to a specific cluster. These Ips should be seperated by comma I.E.
     * ['x.x.x.x,y.y.y.y', 'z.z.z.z,a.a.a.a'].
     */
    clustersMdmIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Details of the SDC host if the `os_family` is `esxi`.
     */
    esxi?: pulumi.Input<inputs.SdcHostEsxi>;
    /**
     * IP address of the server to be configured as SDC.
     */
    ip: pulumi.Input<string>;
    /**
     * Path to the drv_cfg for linux, defaults to /opt/emc/scaleio/sdc/bin/
     */
    linuxDrvCfg?: pulumi.Input<string>;
    /**
     * Name of SDC.
     */
    name?: pulumi.Input<string>;
    /**
     * Operating System family of the SDC. Accepted values are 'linux', 'windows' and 'esxi'. Cannot be changed once set.
     */
    osFamily: pulumi.Input<string>;
    /**
     * Full path (on local machine) of the package to be installed on the SDC.
     */
    packagePath: pulumi.Input<string>;
    /**
     * Performance profile of the SDC. Accepted values are 'HighPerformance' and 'Compact'.
     */
    performanceProfile?: pulumi.Input<string>;
    /**
     * Remote login details of the SDC.
     */
    remote: pulumi.Input<inputs.SdcHostRemote>;
    /**
     * Use path on remote server where SDC is installed. Defaults to `false`.
     */
    useRemotePath?: pulumi.Input<boolean>;
    /**
     * Path to the drv_cfg.exe config for windows, defaults to C:\Program Files\EMC\scaleio\sdc\bin\
     */
    windowsDrvCfg?: pulumi.Input<string>;
}
