// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Sds extends pulumi.CustomResource {
    /**
     * Get an existing Sds resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SdsState, opts?: pulumi.CustomResourceOptions): Sds {
        return new Sds(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerflex:index/sds:Sds';

    /**
     * Returns true if the given object is an instance of Sds.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Sds {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Sds.__pulumiType;
    }

    /**
     * DRL mode of SDS
     */
    public readonly drlMode!: pulumi.Output<string>;
    /**
     * Fault set id of SDS
     */
    public readonly faultSetId!: pulumi.Output<string>;
    /**
     * List of IPs to be assigned to the SDS. There must be at least one IP with `all` role or at least two IPs, one with role
     * `sdcOnly` and the other with role `sdsOnly`.
     */
    public readonly ipLists!: pulumi.Output<outputs.SdsIpList[]>;
    /**
     * Is on vmware state of SDS
     */
    public /*out*/ readonly isOnVmware!: pulumi.Output<boolean>;
    /**
     * Mdm connection state of SDS
     */
    public /*out*/ readonly mdmConnectionState!: pulumi.Output<string>;
    /**
     * Membership state of SDS
     */
    public /*out*/ readonly membershipState!: pulumi.Output<string>;
    /**
     * Name of SDS.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Number of io buffers of SDS
     */
    public /*out*/ readonly numOfIoBuffers!: pulumi.Output<number>;
    /**
     * Performance Profile of SDS. Valid values are `Compact` and `HighPerformance`. Default value is determined by array
     * settings.
     */
    public readonly performanceProfile!: pulumi.Output<string>;
    /**
     * Port of SDS
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * ID of the Protection Domain under which the SDS will be created. Conflicts with `protection_domain_name`. Cannot be
     * updated.
     */
    public readonly protectionDomainId!: pulumi.Output<string>;
    /**
     * Name of the Protection Domain under which the SDS will be created. Conflicts with `protection_domain_id`. Cannot be
     * updated.
     */
    public readonly protectionDomainName!: pulumi.Output<string | undefined>;
    /**
     * Rfcache enabled state of SDS
     */
    public readonly rfcacheEnabled!: pulumi.Output<boolean>;
    /**
     * Rmcache enabled state of SDS
     */
    public readonly rmcacheEnabled!: pulumi.Output<boolean>;
    /**
     * RMcache frozen state of SDS
     */
    public /*out*/ readonly rmcacheFrozen!: pulumi.Output<boolean>;
    /**
     * Rmcache memory allocation state of SDS.
     */
    public /*out*/ readonly rmcacheMemoryAllocationState!: pulumi.Output<string>;
    /**
     * Read RAM cache size in MB of SDS. Can be set only when `rmcache_enabled` is true.
     */
    public readonly rmcacheSizeInMb!: pulumi.Output<number>;
    /**
     * State of SDS
     */
    public /*out*/ readonly sdsState!: pulumi.Output<string>;

    /**
     * Create a Sds resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SdsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SdsArgs | SdsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SdsState | undefined;
            resourceInputs["drlMode"] = state ? state.drlMode : undefined;
            resourceInputs["faultSetId"] = state ? state.faultSetId : undefined;
            resourceInputs["ipLists"] = state ? state.ipLists : undefined;
            resourceInputs["isOnVmware"] = state ? state.isOnVmware : undefined;
            resourceInputs["mdmConnectionState"] = state ? state.mdmConnectionState : undefined;
            resourceInputs["membershipState"] = state ? state.membershipState : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numOfIoBuffers"] = state ? state.numOfIoBuffers : undefined;
            resourceInputs["performanceProfile"] = state ? state.performanceProfile : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protectionDomainId"] = state ? state.protectionDomainId : undefined;
            resourceInputs["protectionDomainName"] = state ? state.protectionDomainName : undefined;
            resourceInputs["rfcacheEnabled"] = state ? state.rfcacheEnabled : undefined;
            resourceInputs["rmcacheEnabled"] = state ? state.rmcacheEnabled : undefined;
            resourceInputs["rmcacheFrozen"] = state ? state.rmcacheFrozen : undefined;
            resourceInputs["rmcacheMemoryAllocationState"] = state ? state.rmcacheMemoryAllocationState : undefined;
            resourceInputs["rmcacheSizeInMb"] = state ? state.rmcacheSizeInMb : undefined;
            resourceInputs["sdsState"] = state ? state.sdsState : undefined;
        } else {
            const args = argsOrState as SdsArgs | undefined;
            if ((!args || args.ipLists === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipLists'");
            }
            resourceInputs["drlMode"] = args ? args.drlMode : undefined;
            resourceInputs["faultSetId"] = args ? args.faultSetId : undefined;
            resourceInputs["ipLists"] = args ? args.ipLists : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["performanceProfile"] = args ? args.performanceProfile : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protectionDomainId"] = args ? args.protectionDomainId : undefined;
            resourceInputs["protectionDomainName"] = args ? args.protectionDomainName : undefined;
            resourceInputs["rfcacheEnabled"] = args ? args.rfcacheEnabled : undefined;
            resourceInputs["rmcacheEnabled"] = args ? args.rmcacheEnabled : undefined;
            resourceInputs["rmcacheSizeInMb"] = args ? args.rmcacheSizeInMb : undefined;
            resourceInputs["isOnVmware"] = undefined /*out*/;
            resourceInputs["mdmConnectionState"] = undefined /*out*/;
            resourceInputs["membershipState"] = undefined /*out*/;
            resourceInputs["numOfIoBuffers"] = undefined /*out*/;
            resourceInputs["rmcacheFrozen"] = undefined /*out*/;
            resourceInputs["rmcacheMemoryAllocationState"] = undefined /*out*/;
            resourceInputs["sdsState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Sds.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Sds resources.
 */
export interface SdsState {
    /**
     * DRL mode of SDS
     */
    drlMode?: pulumi.Input<string>;
    /**
     * Fault set id of SDS
     */
    faultSetId?: pulumi.Input<string>;
    /**
     * List of IPs to be assigned to the SDS. There must be at least one IP with `all` role or at least two IPs, one with role
     * `sdcOnly` and the other with role `sdsOnly`.
     */
    ipLists?: pulumi.Input<pulumi.Input<inputs.SdsIpList>[]>;
    /**
     * Is on vmware state of SDS
     */
    isOnVmware?: pulumi.Input<boolean>;
    /**
     * Mdm connection state of SDS
     */
    mdmConnectionState?: pulumi.Input<string>;
    /**
     * Membership state of SDS
     */
    membershipState?: pulumi.Input<string>;
    /**
     * Name of SDS.
     */
    name?: pulumi.Input<string>;
    /**
     * Number of io buffers of SDS
     */
    numOfIoBuffers?: pulumi.Input<number>;
    /**
     * Performance Profile of SDS. Valid values are `Compact` and `HighPerformance`. Default value is determined by array
     * settings.
     */
    performanceProfile?: pulumi.Input<string>;
    /**
     * Port of SDS
     */
    port?: pulumi.Input<number>;
    /**
     * ID of the Protection Domain under which the SDS will be created. Conflicts with `protection_domain_name`. Cannot be
     * updated.
     */
    protectionDomainId?: pulumi.Input<string>;
    /**
     * Name of the Protection Domain under which the SDS will be created. Conflicts with `protection_domain_id`. Cannot be
     * updated.
     */
    protectionDomainName?: pulumi.Input<string>;
    /**
     * Rfcache enabled state of SDS
     */
    rfcacheEnabled?: pulumi.Input<boolean>;
    /**
     * Rmcache enabled state of SDS
     */
    rmcacheEnabled?: pulumi.Input<boolean>;
    /**
     * RMcache frozen state of SDS
     */
    rmcacheFrozen?: pulumi.Input<boolean>;
    /**
     * Rmcache memory allocation state of SDS.
     */
    rmcacheMemoryAllocationState?: pulumi.Input<string>;
    /**
     * Read RAM cache size in MB of SDS. Can be set only when `rmcache_enabled` is true.
     */
    rmcacheSizeInMb?: pulumi.Input<number>;
    /**
     * State of SDS
     */
    sdsState?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Sds resource.
 */
export interface SdsArgs {
    /**
     * DRL mode of SDS
     */
    drlMode?: pulumi.Input<string>;
    /**
     * Fault set id of SDS
     */
    faultSetId?: pulumi.Input<string>;
    /**
     * List of IPs to be assigned to the SDS. There must be at least one IP with `all` role or at least two IPs, one with role
     * `sdcOnly` and the other with role `sdsOnly`.
     */
    ipLists: pulumi.Input<pulumi.Input<inputs.SdsIpList>[]>;
    /**
     * Name of SDS.
     */
    name?: pulumi.Input<string>;
    /**
     * Performance Profile of SDS. Valid values are `Compact` and `HighPerformance`. Default value is determined by array
     * settings.
     */
    performanceProfile?: pulumi.Input<string>;
    /**
     * Port of SDS
     */
    port?: pulumi.Input<number>;
    /**
     * ID of the Protection Domain under which the SDS will be created. Conflicts with `protection_domain_name`. Cannot be
     * updated.
     */
    protectionDomainId?: pulumi.Input<string>;
    /**
     * Name of the Protection Domain under which the SDS will be created. Conflicts with `protection_domain_id`. Cannot be
     * updated.
     */
    protectionDomainName?: pulumi.Input<string>;
    /**
     * Rfcache enabled state of SDS
     */
    rfcacheEnabled?: pulumi.Input<boolean>;
    /**
     * Rmcache enabled state of SDS
     */
    rmcacheEnabled?: pulumi.Input<boolean>;
    /**
     * Read RAM cache size in MB of SDS. Can be set only when `rmcache_enabled` is true.
     */
    rmcacheSizeInMb?: pulumi.Input<number>;
}
