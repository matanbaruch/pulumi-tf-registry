// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AaaaRecordSetArgs, AaaaRecordSetState } from "./aaaaRecordSet";
export type AaaaRecordSet = import("./aaaaRecordSet").AaaaRecordSet;
export const AaaaRecordSet: typeof import("./aaaaRecordSet").AaaaRecordSet = null as any;
utilities.lazyLoad(exports, ["AaaaRecordSet"], () => require("./aaaaRecordSet"));

export { ARecordSetArgs, ARecordSetState } from "./arecordSet";
export type ARecordSet = import("./arecordSet").ARecordSet;
export const ARecordSet: typeof import("./arecordSet").ARecordSet = null as any;
utilities.lazyLoad(exports, ["ARecordSet"], () => require("./arecordSet"));

export { CnameRecordArgs, CnameRecordState } from "./cnameRecord";
export type CnameRecord = import("./cnameRecord").CnameRecord;
export const CnameRecord: typeof import("./cnameRecord").CnameRecord = null as any;
utilities.lazyLoad(exports, ["CnameRecord"], () => require("./cnameRecord"));

export { GetARecordSetArgs, GetARecordSetResult, GetARecordSetOutputArgs } from "./getARecordSet";
export const getARecordSet: typeof import("./getARecordSet").getARecordSet = null as any;
export const getARecordSetOutput: typeof import("./getARecordSet").getARecordSetOutput = null as any;
utilities.lazyLoad(exports, ["getARecordSet","getARecordSetOutput"], () => require("./getARecordSet"));

export { GetAaaaRecordSetArgs, GetAaaaRecordSetResult, GetAaaaRecordSetOutputArgs } from "./getAaaaRecordSet";
export const getAaaaRecordSet: typeof import("./getAaaaRecordSet").getAaaaRecordSet = null as any;
export const getAaaaRecordSetOutput: typeof import("./getAaaaRecordSet").getAaaaRecordSetOutput = null as any;
utilities.lazyLoad(exports, ["getAaaaRecordSet","getAaaaRecordSetOutput"], () => require("./getAaaaRecordSet"));

export { GetCnameRecordSetArgs, GetCnameRecordSetResult, GetCnameRecordSetOutputArgs } from "./getCnameRecordSet";
export const getCnameRecordSet: typeof import("./getCnameRecordSet").getCnameRecordSet = null as any;
export const getCnameRecordSetOutput: typeof import("./getCnameRecordSet").getCnameRecordSetOutput = null as any;
utilities.lazyLoad(exports, ["getCnameRecordSet","getCnameRecordSetOutput"], () => require("./getCnameRecordSet"));

export { GetMxRecordSetArgs, GetMxRecordSetResult, GetMxRecordSetOutputArgs } from "./getMxRecordSet";
export const getMxRecordSet: typeof import("./getMxRecordSet").getMxRecordSet = null as any;
export const getMxRecordSetOutput: typeof import("./getMxRecordSet").getMxRecordSetOutput = null as any;
utilities.lazyLoad(exports, ["getMxRecordSet","getMxRecordSetOutput"], () => require("./getMxRecordSet"));

export { GetNsRecordSetArgs, GetNsRecordSetResult, GetNsRecordSetOutputArgs } from "./getNsRecordSet";
export const getNsRecordSet: typeof import("./getNsRecordSet").getNsRecordSet = null as any;
export const getNsRecordSetOutput: typeof import("./getNsRecordSet").getNsRecordSetOutput = null as any;
utilities.lazyLoad(exports, ["getNsRecordSet","getNsRecordSetOutput"], () => require("./getNsRecordSet"));

export { GetPtrRecordSetArgs, GetPtrRecordSetResult, GetPtrRecordSetOutputArgs } from "./getPtrRecordSet";
export const getPtrRecordSet: typeof import("./getPtrRecordSet").getPtrRecordSet = null as any;
export const getPtrRecordSetOutput: typeof import("./getPtrRecordSet").getPtrRecordSetOutput = null as any;
utilities.lazyLoad(exports, ["getPtrRecordSet","getPtrRecordSetOutput"], () => require("./getPtrRecordSet"));

export { GetSrvRecordSetArgs, GetSrvRecordSetResult, GetSrvRecordSetOutputArgs } from "./getSrvRecordSet";
export const getSrvRecordSet: typeof import("./getSrvRecordSet").getSrvRecordSet = null as any;
export const getSrvRecordSetOutput: typeof import("./getSrvRecordSet").getSrvRecordSetOutput = null as any;
utilities.lazyLoad(exports, ["getSrvRecordSet","getSrvRecordSetOutput"], () => require("./getSrvRecordSet"));

export { GetTxtRecordSetArgs, GetTxtRecordSetResult, GetTxtRecordSetOutputArgs } from "./getTxtRecordSet";
export const getTxtRecordSet: typeof import("./getTxtRecordSet").getTxtRecordSet = null as any;
export const getTxtRecordSetOutput: typeof import("./getTxtRecordSet").getTxtRecordSetOutput = null as any;
utilities.lazyLoad(exports, ["getTxtRecordSet","getTxtRecordSetOutput"], () => require("./getTxtRecordSet"));

export { MxRecordSetArgs, MxRecordSetState } from "./mxRecordSet";
export type MxRecordSet = import("./mxRecordSet").MxRecordSet;
export const MxRecordSet: typeof import("./mxRecordSet").MxRecordSet = null as any;
utilities.lazyLoad(exports, ["MxRecordSet"], () => require("./mxRecordSet"));

export { NsRecordSetArgs, NsRecordSetState } from "./nsRecordSet";
export type NsRecordSet = import("./nsRecordSet").NsRecordSet;
export const NsRecordSet: typeof import("./nsRecordSet").NsRecordSet = null as any;
utilities.lazyLoad(exports, ["NsRecordSet"], () => require("./nsRecordSet"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { PtrRecordArgs, PtrRecordState } from "./ptrRecord";
export type PtrRecord = import("./ptrRecord").PtrRecord;
export const PtrRecord: typeof import("./ptrRecord").PtrRecord = null as any;
utilities.lazyLoad(exports, ["PtrRecord"], () => require("./ptrRecord"));

export { SrvRecordSetArgs, SrvRecordSetState } from "./srvRecordSet";
export type SrvRecordSet = import("./srvRecordSet").SrvRecordSet;
export const SrvRecordSet: typeof import("./srvRecordSet").SrvRecordSet = null as any;
utilities.lazyLoad(exports, ["SrvRecordSet"], () => require("./srvRecordSet"));

export { TxtRecordSetArgs, TxtRecordSetState } from "./txtRecordSet";
export type TxtRecordSet = import("./txtRecordSet").TxtRecordSet;
export const TxtRecordSet: typeof import("./txtRecordSet").TxtRecordSet = null as any;
utilities.lazyLoad(exports, ["TxtRecordSet"], () => require("./txtRecordSet"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "dns:index/aRecordSet:ARecordSet":
                return new ARecordSet(name, <any>undefined, { urn })
            case "dns:index/aaaaRecordSet:AaaaRecordSet":
                return new AaaaRecordSet(name, <any>undefined, { urn })
            case "dns:index/cnameRecord:CnameRecord":
                return new CnameRecord(name, <any>undefined, { urn })
            case "dns:index/mxRecordSet:MxRecordSet":
                return new MxRecordSet(name, <any>undefined, { urn })
            case "dns:index/nsRecordSet:NsRecordSet":
                return new NsRecordSet(name, <any>undefined, { urn })
            case "dns:index/ptrRecord:PtrRecord":
                return new PtrRecord(name, <any>undefined, { urn })
            case "dns:index/srvRecordSet:SrvRecordSet":
                return new SrvRecordSet(name, <any>undefined, { urn })
            case "dns:index/txtRecordSet:TxtRecordSet":
                return new TxtRecordSet(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("dns", "index/aRecordSet", _module)
pulumi.runtime.registerResourceModule("dns", "index/aaaaRecordSet", _module)
pulumi.runtime.registerResourceModule("dns", "index/cnameRecord", _module)
pulumi.runtime.registerResourceModule("dns", "index/mxRecordSet", _module)
pulumi.runtime.registerResourceModule("dns", "index/nsRecordSet", _module)
pulumi.runtime.registerResourceModule("dns", "index/ptrRecord", _module)
pulumi.runtime.registerResourceModule("dns", "index/srvRecordSet", _module)
pulumi.runtime.registerResourceModule("dns", "index/txtRecordSet", _module)
pulumi.runtime.registerResourcePackage("dns", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:dns") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
