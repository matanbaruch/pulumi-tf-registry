// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DatahubAwsClusterArgs, DatahubAwsClusterState } from "./datahubAwsCluster";
export type DatahubAwsCluster = import("./datahubAwsCluster").DatahubAwsCluster;
export const DatahubAwsCluster: typeof import("./datahubAwsCluster").DatahubAwsCluster = null as any;
utilities.lazyLoad(exports, ["DatahubAwsCluster"], () => require("./datahubAwsCluster"));

export { DatahubAzureClusterArgs, DatahubAzureClusterState } from "./datahubAzureCluster";
export type DatahubAzureCluster = import("./datahubAzureCluster").DatahubAzureCluster;
export const DatahubAzureCluster: typeof import("./datahubAzureCluster").DatahubAzureCluster = null as any;
utilities.lazyLoad(exports, ["DatahubAzureCluster"], () => require("./datahubAzureCluster"));

export { DatahubGcpClusterArgs, DatahubGcpClusterState } from "./datahubGcpCluster";
export type DatahubGcpCluster = import("./datahubGcpCluster").DatahubGcpCluster;
export const DatahubGcpCluster: typeof import("./datahubGcpCluster").DatahubGcpCluster = null as any;
utilities.lazyLoad(exports, ["DatahubGcpCluster"], () => require("./datahubGcpCluster"));

export { DatalakeAwsDatalakeArgs, DatalakeAwsDatalakeState } from "./datalakeAwsDatalake";
export type DatalakeAwsDatalake = import("./datalakeAwsDatalake").DatalakeAwsDatalake;
export const DatalakeAwsDatalake: typeof import("./datalakeAwsDatalake").DatalakeAwsDatalake = null as any;
utilities.lazyLoad(exports, ["DatalakeAwsDatalake"], () => require("./datalakeAwsDatalake"));

export { DatalakeAzureDatalakeArgs, DatalakeAzureDatalakeState } from "./datalakeAzureDatalake";
export type DatalakeAzureDatalake = import("./datalakeAzureDatalake").DatalakeAzureDatalake;
export const DatalakeAzureDatalake: typeof import("./datalakeAzureDatalake").DatalakeAzureDatalake = null as any;
utilities.lazyLoad(exports, ["DatalakeAzureDatalake"], () => require("./datalakeAzureDatalake"));

export { DatalakeGcpDatalakeArgs, DatalakeGcpDatalakeState } from "./datalakeGcpDatalake";
export type DatalakeGcpDatalake = import("./datalakeGcpDatalake").DatalakeGcpDatalake;
export const DatalakeGcpDatalake: typeof import("./datalakeGcpDatalake").DatalakeGcpDatalake = null as any;
utilities.lazyLoad(exports, ["DatalakeGcpDatalake"], () => require("./datalakeGcpDatalake"));

export { DeServiceArgs, DeServiceState } from "./deService";
export type DeService = import("./deService").DeService;
export const DeService: typeof import("./deService").DeService = null as any;
utilities.lazyLoad(exports, ["DeService"], () => require("./deService"));

export { DwAwsClusterArgs, DwAwsClusterState } from "./dwAwsCluster";
export type DwAwsCluster = import("./dwAwsCluster").DwAwsCluster;
export const DwAwsCluster: typeof import("./dwAwsCluster").DwAwsCluster = null as any;
utilities.lazyLoad(exports, ["DwAwsCluster"], () => require("./dwAwsCluster"));

export { EnvironmentsAwsCredentialArgs, EnvironmentsAwsCredentialState } from "./environmentsAwsCredential";
export type EnvironmentsAwsCredential = import("./environmentsAwsCredential").EnvironmentsAwsCredential;
export const EnvironmentsAwsCredential: typeof import("./environmentsAwsCredential").EnvironmentsAwsCredential = null as any;
utilities.lazyLoad(exports, ["EnvironmentsAwsCredential"], () => require("./environmentsAwsCredential"));

export { EnvironmentsAwsEnvironmentArgs, EnvironmentsAwsEnvironmentState } from "./environmentsAwsEnvironment";
export type EnvironmentsAwsEnvironment = import("./environmentsAwsEnvironment").EnvironmentsAwsEnvironment;
export const EnvironmentsAwsEnvironment: typeof import("./environmentsAwsEnvironment").EnvironmentsAwsEnvironment = null as any;
utilities.lazyLoad(exports, ["EnvironmentsAwsEnvironment"], () => require("./environmentsAwsEnvironment"));

export { EnvironmentsAzureCredentialArgs, EnvironmentsAzureCredentialState } from "./environmentsAzureCredential";
export type EnvironmentsAzureCredential = import("./environmentsAzureCredential").EnvironmentsAzureCredential;
export const EnvironmentsAzureCredential: typeof import("./environmentsAzureCredential").EnvironmentsAzureCredential = null as any;
utilities.lazyLoad(exports, ["EnvironmentsAzureCredential"], () => require("./environmentsAzureCredential"));

export { EnvironmentsAzureEnvironmentArgs, EnvironmentsAzureEnvironmentState } from "./environmentsAzureEnvironment";
export type EnvironmentsAzureEnvironment = import("./environmentsAzureEnvironment").EnvironmentsAzureEnvironment;
export const EnvironmentsAzureEnvironment: typeof import("./environmentsAzureEnvironment").EnvironmentsAzureEnvironment = null as any;
utilities.lazyLoad(exports, ["EnvironmentsAzureEnvironment"], () => require("./environmentsAzureEnvironment"));

export { EnvironmentsAzureImageTermsArgs, EnvironmentsAzureImageTermsState } from "./environmentsAzureImageTerms";
export type EnvironmentsAzureImageTerms = import("./environmentsAzureImageTerms").EnvironmentsAzureImageTerms;
export const EnvironmentsAzureImageTerms: typeof import("./environmentsAzureImageTerms").EnvironmentsAzureImageTerms = null as any;
utilities.lazyLoad(exports, ["EnvironmentsAzureImageTerms"], () => require("./environmentsAzureImageTerms"));

export { EnvironmentsGcpCredentialArgs, EnvironmentsGcpCredentialState } from "./environmentsGcpCredential";
export type EnvironmentsGcpCredential = import("./environmentsGcpCredential").EnvironmentsGcpCredential;
export const EnvironmentsGcpCredential: typeof import("./environmentsGcpCredential").EnvironmentsGcpCredential = null as any;
utilities.lazyLoad(exports, ["EnvironmentsGcpCredential"], () => require("./environmentsGcpCredential"));

export { EnvironmentsGcpEnvironmentArgs, EnvironmentsGcpEnvironmentState } from "./environmentsGcpEnvironment";
export type EnvironmentsGcpEnvironment = import("./environmentsGcpEnvironment").EnvironmentsGcpEnvironment;
export const EnvironmentsGcpEnvironment: typeof import("./environmentsGcpEnvironment").EnvironmentsGcpEnvironment = null as any;
utilities.lazyLoad(exports, ["EnvironmentsGcpEnvironment"], () => require("./environmentsGcpEnvironment"));

export { EnvironmentsIdBrokerMappingsArgs, EnvironmentsIdBrokerMappingsState } from "./environmentsIdBrokerMappings";
export type EnvironmentsIdBrokerMappings = import("./environmentsIdBrokerMappings").EnvironmentsIdBrokerMappings;
export const EnvironmentsIdBrokerMappings: typeof import("./environmentsIdBrokerMappings").EnvironmentsIdBrokerMappings = null as any;
utilities.lazyLoad(exports, ["EnvironmentsIdBrokerMappings"], () => require("./environmentsIdBrokerMappings"));

export { EnvironmentsProxyConfigurationArgs, EnvironmentsProxyConfigurationState } from "./environmentsProxyConfiguration";
export type EnvironmentsProxyConfiguration = import("./environmentsProxyConfiguration").EnvironmentsProxyConfiguration;
export const EnvironmentsProxyConfiguration: typeof import("./environmentsProxyConfiguration").EnvironmentsProxyConfiguration = null as any;
utilities.lazyLoad(exports, ["EnvironmentsProxyConfiguration"], () => require("./environmentsProxyConfiguration"));

export { EnvironmentsUserSyncArgs, EnvironmentsUserSyncState } from "./environmentsUserSync";
export type EnvironmentsUserSync = import("./environmentsUserSync").EnvironmentsUserSync;
export const EnvironmentsUserSync: typeof import("./environmentsUserSync").EnvironmentsUserSync = null as any;
utilities.lazyLoad(exports, ["EnvironmentsUserSync"], () => require("./environmentsUserSync"));

export { GetEnvironmentsAwsCredentialPrerequisitesResult } from "./getEnvironmentsAwsCredentialPrerequisites";
export const getEnvironmentsAwsCredentialPrerequisites: typeof import("./getEnvironmentsAwsCredentialPrerequisites").getEnvironmentsAwsCredentialPrerequisites = null as any;
export const getEnvironmentsAwsCredentialPrerequisitesOutput: typeof import("./getEnvironmentsAwsCredentialPrerequisites").getEnvironmentsAwsCredentialPrerequisitesOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironmentsAwsCredentialPrerequisites","getEnvironmentsAwsCredentialPrerequisitesOutput"], () => require("./getEnvironmentsAwsCredentialPrerequisites"));

export { GetEnvironmentsKeytabArgs, GetEnvironmentsKeytabResult, GetEnvironmentsKeytabOutputArgs } from "./getEnvironmentsKeytab";
export const getEnvironmentsKeytab: typeof import("./getEnvironmentsKeytab").getEnvironmentsKeytab = null as any;
export const getEnvironmentsKeytabOutput: typeof import("./getEnvironmentsKeytab").getEnvironmentsKeytabOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironmentsKeytab","getEnvironmentsKeytabOutput"], () => require("./getEnvironmentsKeytab"));

export { GetIamGroupArgs, GetIamGroupResult, GetIamGroupOutputArgs } from "./getIamGroup";
export const getIamGroup: typeof import("./getIamGroup").getIamGroup = null as any;
export const getIamGroupOutput: typeof import("./getIamGroup").getIamGroupOutput = null as any;
utilities.lazyLoad(exports, ["getIamGroup","getIamGroupOutput"], () => require("./getIamGroup"));

export { IamGroupArgs, IamGroupState } from "./iamGroup";
export type IamGroup = import("./iamGroup").IamGroup;
export const IamGroup: typeof import("./iamGroup").IamGroup = null as any;
utilities.lazyLoad(exports, ["IamGroup"], () => require("./iamGroup"));

export { IamMachineUserArgs, IamMachineUserState } from "./iamMachineUser";
export type IamMachineUser = import("./iamMachineUser").IamMachineUser;
export const IamMachineUser: typeof import("./iamMachineUser").IamMachineUser = null as any;
utilities.lazyLoad(exports, ["IamMachineUser"], () => require("./iamMachineUser"));

export { IamMachineUserGroupAssignmentArgs, IamMachineUserGroupAssignmentState } from "./iamMachineUserGroupAssignment";
export type IamMachineUserGroupAssignment = import("./iamMachineUserGroupAssignment").IamMachineUserGroupAssignment;
export const IamMachineUserGroupAssignment: typeof import("./iamMachineUserGroupAssignment").IamMachineUserGroupAssignment = null as any;
utilities.lazyLoad(exports, ["IamMachineUserGroupAssignment"], () => require("./iamMachineUserGroupAssignment"));

export { IamMachineUserResourceRoleAssignmentArgs, IamMachineUserResourceRoleAssignmentState } from "./iamMachineUserResourceRoleAssignment";
export type IamMachineUserResourceRoleAssignment = import("./iamMachineUserResourceRoleAssignment").IamMachineUserResourceRoleAssignment;
export const IamMachineUserResourceRoleAssignment: typeof import("./iamMachineUserResourceRoleAssignment").IamMachineUserResourceRoleAssignment = null as any;
utilities.lazyLoad(exports, ["IamMachineUserResourceRoleAssignment"], () => require("./iamMachineUserResourceRoleAssignment"));

export { IamMachineUserRoleAssignmentArgs, IamMachineUserRoleAssignmentState } from "./iamMachineUserRoleAssignment";
export type IamMachineUserRoleAssignment = import("./iamMachineUserRoleAssignment").IamMachineUserRoleAssignment;
export const IamMachineUserRoleAssignment: typeof import("./iamMachineUserRoleAssignment").IamMachineUserRoleAssignment = null as any;
utilities.lazyLoad(exports, ["IamMachineUserRoleAssignment"], () => require("./iamMachineUserRoleAssignment"));

export { MlWorkspaceArgs, MlWorkspaceState } from "./mlWorkspace";
export type MlWorkspace = import("./mlWorkspace").MlWorkspace;
export const MlWorkspace: typeof import("./mlWorkspace").MlWorkspace = null as any;
utilities.lazyLoad(exports, ["MlWorkspace"], () => require("./mlWorkspace"));

export { OpdbOperationalDatabaseArgs, OpdbOperationalDatabaseState } from "./opdbOperationalDatabase";
export type OpdbOperationalDatabase = import("./opdbOperationalDatabase").OpdbOperationalDatabase;
export const OpdbOperationalDatabase: typeof import("./opdbOperationalDatabase").OpdbOperationalDatabase = null as any;
utilities.lazyLoad(exports, ["OpdbOperationalDatabase"], () => require("./opdbOperationalDatabase"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { VwHiveArgs, VwHiveState } from "./vwHive";
export type VwHive = import("./vwHive").VwHive;
export const VwHive: typeof import("./vwHive").VwHive = null as any;
utilities.lazyLoad(exports, ["VwHive"], () => require("./vwHive"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cdp:index/datahubAwsCluster:DatahubAwsCluster":
                return new DatahubAwsCluster(name, <any>undefined, { urn })
            case "cdp:index/datahubAzureCluster:DatahubAzureCluster":
                return new DatahubAzureCluster(name, <any>undefined, { urn })
            case "cdp:index/datahubGcpCluster:DatahubGcpCluster":
                return new DatahubGcpCluster(name, <any>undefined, { urn })
            case "cdp:index/datalakeAwsDatalake:DatalakeAwsDatalake":
                return new DatalakeAwsDatalake(name, <any>undefined, { urn })
            case "cdp:index/datalakeAzureDatalake:DatalakeAzureDatalake":
                return new DatalakeAzureDatalake(name, <any>undefined, { urn })
            case "cdp:index/datalakeGcpDatalake:DatalakeGcpDatalake":
                return new DatalakeGcpDatalake(name, <any>undefined, { urn })
            case "cdp:index/deService:DeService":
                return new DeService(name, <any>undefined, { urn })
            case "cdp:index/dwAwsCluster:DwAwsCluster":
                return new DwAwsCluster(name, <any>undefined, { urn })
            case "cdp:index/environmentsAwsCredential:EnvironmentsAwsCredential":
                return new EnvironmentsAwsCredential(name, <any>undefined, { urn })
            case "cdp:index/environmentsAwsEnvironment:EnvironmentsAwsEnvironment":
                return new EnvironmentsAwsEnvironment(name, <any>undefined, { urn })
            case "cdp:index/environmentsAzureCredential:EnvironmentsAzureCredential":
                return new EnvironmentsAzureCredential(name, <any>undefined, { urn })
            case "cdp:index/environmentsAzureEnvironment:EnvironmentsAzureEnvironment":
                return new EnvironmentsAzureEnvironment(name, <any>undefined, { urn })
            case "cdp:index/environmentsAzureImageTerms:EnvironmentsAzureImageTerms":
                return new EnvironmentsAzureImageTerms(name, <any>undefined, { urn })
            case "cdp:index/environmentsGcpCredential:EnvironmentsGcpCredential":
                return new EnvironmentsGcpCredential(name, <any>undefined, { urn })
            case "cdp:index/environmentsGcpEnvironment:EnvironmentsGcpEnvironment":
                return new EnvironmentsGcpEnvironment(name, <any>undefined, { urn })
            case "cdp:index/environmentsIdBrokerMappings:EnvironmentsIdBrokerMappings":
                return new EnvironmentsIdBrokerMappings(name, <any>undefined, { urn })
            case "cdp:index/environmentsProxyConfiguration:EnvironmentsProxyConfiguration":
                return new EnvironmentsProxyConfiguration(name, <any>undefined, { urn })
            case "cdp:index/environmentsUserSync:EnvironmentsUserSync":
                return new EnvironmentsUserSync(name, <any>undefined, { urn })
            case "cdp:index/iamGroup:IamGroup":
                return new IamGroup(name, <any>undefined, { urn })
            case "cdp:index/iamMachineUser:IamMachineUser":
                return new IamMachineUser(name, <any>undefined, { urn })
            case "cdp:index/iamMachineUserGroupAssignment:IamMachineUserGroupAssignment":
                return new IamMachineUserGroupAssignment(name, <any>undefined, { urn })
            case "cdp:index/iamMachineUserResourceRoleAssignment:IamMachineUserResourceRoleAssignment":
                return new IamMachineUserResourceRoleAssignment(name, <any>undefined, { urn })
            case "cdp:index/iamMachineUserRoleAssignment:IamMachineUserRoleAssignment":
                return new IamMachineUserRoleAssignment(name, <any>undefined, { urn })
            case "cdp:index/mlWorkspace:MlWorkspace":
                return new MlWorkspace(name, <any>undefined, { urn })
            case "cdp:index/opdbOperationalDatabase:OpdbOperationalDatabase":
                return new OpdbOperationalDatabase(name, <any>undefined, { urn })
            case "cdp:index/vwHive:VwHive":
                return new VwHive(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cdp", "index/datahubAwsCluster", _module)
pulumi.runtime.registerResourceModule("cdp", "index/datahubAzureCluster", _module)
pulumi.runtime.registerResourceModule("cdp", "index/datahubGcpCluster", _module)
pulumi.runtime.registerResourceModule("cdp", "index/datalakeAwsDatalake", _module)
pulumi.runtime.registerResourceModule("cdp", "index/datalakeAzureDatalake", _module)
pulumi.runtime.registerResourceModule("cdp", "index/datalakeGcpDatalake", _module)
pulumi.runtime.registerResourceModule("cdp", "index/deService", _module)
pulumi.runtime.registerResourceModule("cdp", "index/dwAwsCluster", _module)
pulumi.runtime.registerResourceModule("cdp", "index/environmentsAwsCredential", _module)
pulumi.runtime.registerResourceModule("cdp", "index/environmentsAwsEnvironment", _module)
pulumi.runtime.registerResourceModule("cdp", "index/environmentsAzureCredential", _module)
pulumi.runtime.registerResourceModule("cdp", "index/environmentsAzureEnvironment", _module)
pulumi.runtime.registerResourceModule("cdp", "index/environmentsAzureImageTerms", _module)
pulumi.runtime.registerResourceModule("cdp", "index/environmentsGcpCredential", _module)
pulumi.runtime.registerResourceModule("cdp", "index/environmentsGcpEnvironment", _module)
pulumi.runtime.registerResourceModule("cdp", "index/environmentsIdBrokerMappings", _module)
pulumi.runtime.registerResourceModule("cdp", "index/environmentsProxyConfiguration", _module)
pulumi.runtime.registerResourceModule("cdp", "index/environmentsUserSync", _module)
pulumi.runtime.registerResourceModule("cdp", "index/iamGroup", _module)
pulumi.runtime.registerResourceModule("cdp", "index/iamMachineUser", _module)
pulumi.runtime.registerResourceModule("cdp", "index/iamMachineUserGroupAssignment", _module)
pulumi.runtime.registerResourceModule("cdp", "index/iamMachineUserResourceRoleAssignment", _module)
pulumi.runtime.registerResourceModule("cdp", "index/iamMachineUserRoleAssignment", _module)
pulumi.runtime.registerResourceModule("cdp", "index/mlWorkspace", _module)
pulumi.runtime.registerResourceModule("cdp", "index/opdbOperationalDatabase", _module)
pulumi.runtime.registerResourceModule("cdp", "index/vwHive", _module)
pulumi.runtime.registerResourcePackage("cdp", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:cdp") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
