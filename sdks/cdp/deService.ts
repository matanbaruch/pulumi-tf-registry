// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DeService extends pulumi.CustomResource {
    /**
     * Get an existing DeService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeServiceState, opts?: pulumi.CustomResourceOptions): DeService {
        return new DeService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cdp:index/deService:DeService';

    /**
     * Returns true if the given object is an instance of DeService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeService.__pulumiType;
    }

    /**
     * Chart overrides for enabling a service.
     */
    public readonly chartValueOverrides!: pulumi.Output<outputs.DeServiceChartValueOverride[] | undefined>;
    /**
     * CPU Requests for the entire CDE service quota.
     */
    public readonly cpuRequests!: pulumi.Output<string | undefined>;
    /**
     * CDE uses a default public File Shares storage provisioned by AKS. Enable this option to use your own public/private File
     * Shares.
     */
    public readonly customAzureFilesConfigs!: pulumi.Output<outputs.DeServiceCustomAzureFilesConfigs | undefined>;
    /**
     * If set to "true", the previous version of the CDE service will be deployed.
     */
    public readonly deployPreviousVersion!: pulumi.Output<boolean | undefined>;
    /**
     * Create a fully private CDE instance on either Amazon or Azure. This includes services such as Kubernetes, MySQL, etc.
     * For Azure, this will also enable virtual network (VNet) access via private endpoints and private link.
     */
    public readonly enablePrivateNetwork!: pulumi.Output<boolean | undefined>;
    /**
     * Creates a CDE endpoint (Load Balancer) in a publicly accessible subnet. If set false, the endpoint will be created in a
     * private subnet and you will need to setup access to the endpoint manually in your cloud account.
     */
    public readonly enablePublicEndpoint!: pulumi.Output<boolean | undefined>;
    /**
     * If set false, diagnostic information about job and query execution is sent to Cloudera Workload Manager. Anonymization
     * can be configured under Environments / Shared Resources / Telemetry. Refer documentation for more info at
     * https://docs.cloudera.com/workload-manager/cloud/index.html.
     */
    public readonly enableWorkloadAnalytics!: pulumi.Output<boolean | undefined>;
    /**
     * CDP environment where cde service should be enabled.
     */
    public readonly env!: pulumi.Output<string>;
    /**
     * GPU requests for the entire CDE service quota.
     */
    public readonly gpuRequests!: pulumi.Output<string | undefined>;
    /**
     * Initial Instances when the service is enabled.
     */
    public readonly initialInstances!: pulumi.Output<number | undefined>;
    /**
     * Initial spot Instances when the service is enabled.
     */
    public readonly initialSpotInstances!: pulumi.Output<number | undefined>;
    /**
     * Instance type of the cluster for CDE Service.
     */
    public readonly instanceType!: pulumi.Output<string>;
    /**
     * List of CIDRs that would be allowed to access the load balancer.
     */
    public readonly loadbalancerAllowlists!: pulumi.Output<string[] | undefined>;
    /**
     * Maximum Instances for the CDE Service.
     */
    public readonly maximumInstances!: pulumi.Output<number>;
    /**
     * Maximum Spot Instances for the CDE Service.
     */
    public readonly maximumSpotInstances!: pulumi.Output<number | undefined>;
    /**
     * Memory requests for the entire CDE service quota, eg. 100Gi.
     */
    public readonly memoryRequests!: pulumi.Output<string | undefined>;
    /**
     * Minimum Instances for the CDE Service.
     */
    public readonly minimumInstances!: pulumi.Output<number>;
    /**
     * Minimum Spot instances for the CDE Service.
     */
    public readonly minimumSpotInstances!: pulumi.Output<number | undefined>;
    /**
     * Name of the CDE Service.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Network outbound type. Currently 'udr' is the only supported. Enum: ["UDR"]
     */
    public readonly networkOutboundType!: pulumi.Output<string | undefined>;
    /**
     * NFS Storage class to override the default storage class in private cloud.
     */
    public readonly nfsStorageClass!: pulumi.Output<string | undefined>;
    /**
     * Resource Pool for the CDE service.
     */
    public readonly resourcePool!: pulumi.Output<string | undefined>;
    /**
     * EBS volume size in GB.
     */
    public readonly rootVolumeSize!: pulumi.Output<number | undefined>;
    /**
     * Skip Validation check.
     */
    public readonly skipValidation!: pulumi.Output<boolean | undefined>;
    /**
     * List of Subnet IDs of CDP subnets to use for the kubernetes worker node.
     */
    public readonly subnets!: pulumi.Output<string[] | undefined>;
    /**
     * User defined labels that tag all provisioned cloud resources.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Instance local storage (SSD) would be used for the workload filesystem (Example - spark local directory). In case the
     * workload requires more space than what's available in the instance storage, please use an instance type with sufficient
     * instance local storage or choose an instance type without SSD and configure the EBS volume size. Currently supported
     * only for aws services.
     */
    public readonly useSsd!: pulumi.Output<boolean | undefined>;
    /**
     * List of CIDRs that would be allowed to access kubernetes master API server.
     */
    public readonly whitelistIps!: pulumi.Output<string[] | undefined>;

    /**
     * Create a DeService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeServiceArgs | DeServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeServiceState | undefined;
            resourceInputs["chartValueOverrides"] = state ? state.chartValueOverrides : undefined;
            resourceInputs["cpuRequests"] = state ? state.cpuRequests : undefined;
            resourceInputs["customAzureFilesConfigs"] = state ? state.customAzureFilesConfigs : undefined;
            resourceInputs["deployPreviousVersion"] = state ? state.deployPreviousVersion : undefined;
            resourceInputs["enablePrivateNetwork"] = state ? state.enablePrivateNetwork : undefined;
            resourceInputs["enablePublicEndpoint"] = state ? state.enablePublicEndpoint : undefined;
            resourceInputs["enableWorkloadAnalytics"] = state ? state.enableWorkloadAnalytics : undefined;
            resourceInputs["env"] = state ? state.env : undefined;
            resourceInputs["gpuRequests"] = state ? state.gpuRequests : undefined;
            resourceInputs["initialInstances"] = state ? state.initialInstances : undefined;
            resourceInputs["initialSpotInstances"] = state ? state.initialSpotInstances : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["loadbalancerAllowlists"] = state ? state.loadbalancerAllowlists : undefined;
            resourceInputs["maximumInstances"] = state ? state.maximumInstances : undefined;
            resourceInputs["maximumSpotInstances"] = state ? state.maximumSpotInstances : undefined;
            resourceInputs["memoryRequests"] = state ? state.memoryRequests : undefined;
            resourceInputs["minimumInstances"] = state ? state.minimumInstances : undefined;
            resourceInputs["minimumSpotInstances"] = state ? state.minimumSpotInstances : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkOutboundType"] = state ? state.networkOutboundType : undefined;
            resourceInputs["nfsStorageClass"] = state ? state.nfsStorageClass : undefined;
            resourceInputs["resourcePool"] = state ? state.resourcePool : undefined;
            resourceInputs["rootVolumeSize"] = state ? state.rootVolumeSize : undefined;
            resourceInputs["skipValidation"] = state ? state.skipValidation : undefined;
            resourceInputs["subnets"] = state ? state.subnets : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["useSsd"] = state ? state.useSsd : undefined;
            resourceInputs["whitelistIps"] = state ? state.whitelistIps : undefined;
        } else {
            const args = argsOrState as DeServiceArgs | undefined;
            if ((!args || args.env === undefined) && !opts.urn) {
                throw new Error("Missing required property 'env'");
            }
            if ((!args || args.instanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceType'");
            }
            if ((!args || args.maximumInstances === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maximumInstances'");
            }
            if ((!args || args.minimumInstances === undefined) && !opts.urn) {
                throw new Error("Missing required property 'minimumInstances'");
            }
            resourceInputs["chartValueOverrides"] = args ? args.chartValueOverrides : undefined;
            resourceInputs["cpuRequests"] = args ? args.cpuRequests : undefined;
            resourceInputs["customAzureFilesConfigs"] = args ? args.customAzureFilesConfigs : undefined;
            resourceInputs["deployPreviousVersion"] = args ? args.deployPreviousVersion : undefined;
            resourceInputs["enablePrivateNetwork"] = args ? args.enablePrivateNetwork : undefined;
            resourceInputs["enablePublicEndpoint"] = args ? args.enablePublicEndpoint : undefined;
            resourceInputs["enableWorkloadAnalytics"] = args ? args.enableWorkloadAnalytics : undefined;
            resourceInputs["env"] = args ? args.env : undefined;
            resourceInputs["gpuRequests"] = args ? args.gpuRequests : undefined;
            resourceInputs["initialInstances"] = args ? args.initialInstances : undefined;
            resourceInputs["initialSpotInstances"] = args ? args.initialSpotInstances : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["loadbalancerAllowlists"] = args ? args.loadbalancerAllowlists : undefined;
            resourceInputs["maximumInstances"] = args ? args.maximumInstances : undefined;
            resourceInputs["maximumSpotInstances"] = args ? args.maximumSpotInstances : undefined;
            resourceInputs["memoryRequests"] = args ? args.memoryRequests : undefined;
            resourceInputs["minimumInstances"] = args ? args.minimumInstances : undefined;
            resourceInputs["minimumSpotInstances"] = args ? args.minimumSpotInstances : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkOutboundType"] = args ? args.networkOutboundType : undefined;
            resourceInputs["nfsStorageClass"] = args ? args.nfsStorageClass : undefined;
            resourceInputs["resourcePool"] = args ? args.resourcePool : undefined;
            resourceInputs["rootVolumeSize"] = args ? args.rootVolumeSize : undefined;
            resourceInputs["skipValidation"] = args ? args.skipValidation : undefined;
            resourceInputs["subnets"] = args ? args.subnets : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["useSsd"] = args ? args.useSsd : undefined;
            resourceInputs["whitelistIps"] = args ? args.whitelistIps : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeService.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DeService resources.
 */
export interface DeServiceState {
    /**
     * Chart overrides for enabling a service.
     */
    chartValueOverrides?: pulumi.Input<pulumi.Input<inputs.DeServiceChartValueOverride>[]>;
    /**
     * CPU Requests for the entire CDE service quota.
     */
    cpuRequests?: pulumi.Input<string>;
    /**
     * CDE uses a default public File Shares storage provisioned by AKS. Enable this option to use your own public/private File
     * Shares.
     */
    customAzureFilesConfigs?: pulumi.Input<inputs.DeServiceCustomAzureFilesConfigs>;
    /**
     * If set to "true", the previous version of the CDE service will be deployed.
     */
    deployPreviousVersion?: pulumi.Input<boolean>;
    /**
     * Create a fully private CDE instance on either Amazon or Azure. This includes services such as Kubernetes, MySQL, etc.
     * For Azure, this will also enable virtual network (VNet) access via private endpoints and private link.
     */
    enablePrivateNetwork?: pulumi.Input<boolean>;
    /**
     * Creates a CDE endpoint (Load Balancer) in a publicly accessible subnet. If set false, the endpoint will be created in a
     * private subnet and you will need to setup access to the endpoint manually in your cloud account.
     */
    enablePublicEndpoint?: pulumi.Input<boolean>;
    /**
     * If set false, diagnostic information about job and query execution is sent to Cloudera Workload Manager. Anonymization
     * can be configured under Environments / Shared Resources / Telemetry. Refer documentation for more info at
     * https://docs.cloudera.com/workload-manager/cloud/index.html.
     */
    enableWorkloadAnalytics?: pulumi.Input<boolean>;
    /**
     * CDP environment where cde service should be enabled.
     */
    env?: pulumi.Input<string>;
    /**
     * GPU requests for the entire CDE service quota.
     */
    gpuRequests?: pulumi.Input<string>;
    /**
     * Initial Instances when the service is enabled.
     */
    initialInstances?: pulumi.Input<number>;
    /**
     * Initial spot Instances when the service is enabled.
     */
    initialSpotInstances?: pulumi.Input<number>;
    /**
     * Instance type of the cluster for CDE Service.
     */
    instanceType?: pulumi.Input<string>;
    /**
     * List of CIDRs that would be allowed to access the load balancer.
     */
    loadbalancerAllowlists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Maximum Instances for the CDE Service.
     */
    maximumInstances?: pulumi.Input<number>;
    /**
     * Maximum Spot Instances for the CDE Service.
     */
    maximumSpotInstances?: pulumi.Input<number>;
    /**
     * Memory requests for the entire CDE service quota, eg. 100Gi.
     */
    memoryRequests?: pulumi.Input<string>;
    /**
     * Minimum Instances for the CDE Service.
     */
    minimumInstances?: pulumi.Input<number>;
    /**
     * Minimum Spot instances for the CDE Service.
     */
    minimumSpotInstances?: pulumi.Input<number>;
    /**
     * Name of the CDE Service.
     */
    name?: pulumi.Input<string>;
    /**
     * Network outbound type. Currently 'udr' is the only supported. Enum: ["UDR"]
     */
    networkOutboundType?: pulumi.Input<string>;
    /**
     * NFS Storage class to override the default storage class in private cloud.
     */
    nfsStorageClass?: pulumi.Input<string>;
    /**
     * Resource Pool for the CDE service.
     */
    resourcePool?: pulumi.Input<string>;
    /**
     * EBS volume size in GB.
     */
    rootVolumeSize?: pulumi.Input<number>;
    /**
     * Skip Validation check.
     */
    skipValidation?: pulumi.Input<boolean>;
    /**
     * List of Subnet IDs of CDP subnets to use for the kubernetes worker node.
     */
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User defined labels that tag all provisioned cloud resources.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Instance local storage (SSD) would be used for the workload filesystem (Example - spark local directory). In case the
     * workload requires more space than what's available in the instance storage, please use an instance type with sufficient
     * instance local storage or choose an instance type without SSD and configure the EBS volume size. Currently supported
     * only for aws services.
     */
    useSsd?: pulumi.Input<boolean>;
    /**
     * List of CIDRs that would be allowed to access kubernetes master API server.
     */
    whitelistIps?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a DeService resource.
 */
export interface DeServiceArgs {
    /**
     * Chart overrides for enabling a service.
     */
    chartValueOverrides?: pulumi.Input<pulumi.Input<inputs.DeServiceChartValueOverride>[]>;
    /**
     * CPU Requests for the entire CDE service quota.
     */
    cpuRequests?: pulumi.Input<string>;
    /**
     * CDE uses a default public File Shares storage provisioned by AKS. Enable this option to use your own public/private File
     * Shares.
     */
    customAzureFilesConfigs?: pulumi.Input<inputs.DeServiceCustomAzureFilesConfigs>;
    /**
     * If set to "true", the previous version of the CDE service will be deployed.
     */
    deployPreviousVersion?: pulumi.Input<boolean>;
    /**
     * Create a fully private CDE instance on either Amazon or Azure. This includes services such as Kubernetes, MySQL, etc.
     * For Azure, this will also enable virtual network (VNet) access via private endpoints and private link.
     */
    enablePrivateNetwork?: pulumi.Input<boolean>;
    /**
     * Creates a CDE endpoint (Load Balancer) in a publicly accessible subnet. If set false, the endpoint will be created in a
     * private subnet and you will need to setup access to the endpoint manually in your cloud account.
     */
    enablePublicEndpoint?: pulumi.Input<boolean>;
    /**
     * If set false, diagnostic information about job and query execution is sent to Cloudera Workload Manager. Anonymization
     * can be configured under Environments / Shared Resources / Telemetry. Refer documentation for more info at
     * https://docs.cloudera.com/workload-manager/cloud/index.html.
     */
    enableWorkloadAnalytics?: pulumi.Input<boolean>;
    /**
     * CDP environment where cde service should be enabled.
     */
    env: pulumi.Input<string>;
    /**
     * GPU requests for the entire CDE service quota.
     */
    gpuRequests?: pulumi.Input<string>;
    /**
     * Initial Instances when the service is enabled.
     */
    initialInstances?: pulumi.Input<number>;
    /**
     * Initial spot Instances when the service is enabled.
     */
    initialSpotInstances?: pulumi.Input<number>;
    /**
     * Instance type of the cluster for CDE Service.
     */
    instanceType: pulumi.Input<string>;
    /**
     * List of CIDRs that would be allowed to access the load balancer.
     */
    loadbalancerAllowlists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Maximum Instances for the CDE Service.
     */
    maximumInstances: pulumi.Input<number>;
    /**
     * Maximum Spot Instances for the CDE Service.
     */
    maximumSpotInstances?: pulumi.Input<number>;
    /**
     * Memory requests for the entire CDE service quota, eg. 100Gi.
     */
    memoryRequests?: pulumi.Input<string>;
    /**
     * Minimum Instances for the CDE Service.
     */
    minimumInstances: pulumi.Input<number>;
    /**
     * Minimum Spot instances for the CDE Service.
     */
    minimumSpotInstances?: pulumi.Input<number>;
    /**
     * Name of the CDE Service.
     */
    name?: pulumi.Input<string>;
    /**
     * Network outbound type. Currently 'udr' is the only supported. Enum: ["UDR"]
     */
    networkOutboundType?: pulumi.Input<string>;
    /**
     * NFS Storage class to override the default storage class in private cloud.
     */
    nfsStorageClass?: pulumi.Input<string>;
    /**
     * Resource Pool for the CDE service.
     */
    resourcePool?: pulumi.Input<string>;
    /**
     * EBS volume size in GB.
     */
    rootVolumeSize?: pulumi.Input<number>;
    /**
     * Skip Validation check.
     */
    skipValidation?: pulumi.Input<boolean>;
    /**
     * List of Subnet IDs of CDP subnets to use for the kubernetes worker node.
     */
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User defined labels that tag all provisioned cloud resources.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Instance local storage (SSD) would be used for the workload filesystem (Example - spark local directory). In case the
     * workload requires more space than what's available in the instance storage, please use an instance type with sufficient
     * instance local storage or choose an instance type without SSD and configure the EBS volume size. Currently supported
     * only for aws services.
     */
    useSsd?: pulumi.Input<boolean>;
    /**
     * List of CIDRs that would be allowed to access kubernetes master API server.
     */
    whitelistIps?: pulumi.Input<pulumi.Input<string>[]>;
}
