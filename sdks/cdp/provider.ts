// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the cdp package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'cdp';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * CDP access key id to authenticate the requests. It can be provided in the provider config (not recommended!), or it can
     * be sourced from the `CDP_ACCESS_KEY_ID` environment variable, or via a shared credentials file. If `cdp_profile` is
     * specified credentials for the specific profile will be used.
     */
    public readonly cdpAccessKeyId!: pulumi.Output<string | undefined>;
    /**
     * CDP configuration file. Defaults to `~/.cdp/config`.
     */
    public readonly cdpConfigFile!: pulumi.Output<string | undefined>;
    /**
     * CDP Endpoint URL to use. Customize the endpoint URL format for connecting to alternate endpoints for CDP services. See
     * the Custom Service Endpoints Guide for more information about connecting to alternate CDP endpoints.
     */
    public readonly cdpEndpointUrl!: pulumi.Output<string | undefined>;
    /**
     * CDP private key associated with the given access key. It can be provided in the provider config(not recommended!), or it
     * can also be sourced from the `CDP_PRIVATE_KEY` environment variable, or via a shared credentials file. If `cdp_profile`
     * is specified credentials for the specific profile will be used.
     */
    public readonly cdpPrivateKey!: pulumi.Output<string | undefined>;
    /**
     * CDP Profile to use for the configuration in shared credentials file (`~/.cdp/credentials`). It can also be sourced from
     * the `CDP_PROFILE` environment variable.
     */
    public readonly cdpProfile!: pulumi.Output<string | undefined>;
    /**
     * CDP Control Plane Region to send the API requests to, not to be confused by the cloud workload region (AWS, Azure or
     * GCP). Defaults to `us-west-1` and can also be sourced from `CDP_REGION` environment variable. More details can be found
     * [here](https://docs.cloudera.com/cdp-public-cloud/cloud/cp-regions/topics/cdp-control-plane-regions.html).
     */
    public readonly cdpRegion!: pulumi.Output<string | undefined>;
    /**
     * CDP shared credentials file. Defaults to `~/.cdp/credentials`.
     */
    public readonly cdpSharedCredentialsFile!: pulumi.Output<string | undefined>;
    /**
     * Endpoint URL to use. Customize the endpoint URL format for connecting to alternate endpoints for IAM and Workload
     * Management services. See the Custom Service Endpoints Guide for more information about connecting to alternate CDP
     * endpoints.
     */
    public readonly endpointUrl!: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            resourceInputs["cdpAccessKeyId"] = args ? args.cdpAccessKeyId : undefined;
            resourceInputs["cdpConfigFile"] = args ? args.cdpConfigFile : undefined;
            resourceInputs["cdpEndpointUrl"] = args ? args.cdpEndpointUrl : undefined;
            resourceInputs["cdpPrivateKey"] = args?.cdpPrivateKey ? pulumi.secret(args.cdpPrivateKey) : undefined;
            resourceInputs["cdpProfile"] = args ? args.cdpProfile : undefined;
            resourceInputs["cdpRegion"] = args ? args.cdpRegion : undefined;
            resourceInputs["cdpSharedCredentialsFile"] = args ? args.cdpSharedCredentialsFile : undefined;
            resourceInputs["endpointUrl"] = args ? args.endpointUrl : undefined;
            resourceInputs["localEnvironment"] = pulumi.output(args ? args.localEnvironment : undefined).apply(JSON.stringify);
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["cdpPrivateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Provider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * CDP access key id to authenticate the requests. It can be provided in the provider config (not recommended!), or it can
     * be sourced from the `CDP_ACCESS_KEY_ID` environment variable, or via a shared credentials file. If `cdp_profile` is
     * specified credentials for the specific profile will be used.
     */
    cdpAccessKeyId?: pulumi.Input<string>;
    /**
     * CDP configuration file. Defaults to `~/.cdp/config`.
     */
    cdpConfigFile?: pulumi.Input<string>;
    /**
     * CDP Endpoint URL to use. Customize the endpoint URL format for connecting to alternate endpoints for CDP services. See
     * the Custom Service Endpoints Guide for more information about connecting to alternate CDP endpoints.
     */
    cdpEndpointUrl?: pulumi.Input<string>;
    /**
     * CDP private key associated with the given access key. It can be provided in the provider config(not recommended!), or it
     * can also be sourced from the `CDP_PRIVATE_KEY` environment variable, or via a shared credentials file. If `cdp_profile`
     * is specified credentials for the specific profile will be used.
     */
    cdpPrivateKey?: pulumi.Input<string>;
    /**
     * CDP Profile to use for the configuration in shared credentials file (`~/.cdp/credentials`). It can also be sourced from
     * the `CDP_PROFILE` environment variable.
     */
    cdpProfile?: pulumi.Input<string>;
    /**
     * CDP Control Plane Region to send the API requests to, not to be confused by the cloud workload region (AWS, Azure or
     * GCP). Defaults to `us-west-1` and can also be sourced from `CDP_REGION` environment variable. More details can be found
     * [here](https://docs.cloudera.com/cdp-public-cloud/cloud/cp-regions/topics/cdp-control-plane-regions.html).
     */
    cdpRegion?: pulumi.Input<string>;
    /**
     * CDP shared credentials file. Defaults to `~/.cdp/credentials`.
     */
    cdpSharedCredentialsFile?: pulumi.Input<string>;
    /**
     * Endpoint URL to use. Customize the endpoint URL format for connecting to alternate endpoints for IAM and Workload
     * Management services. See the Custom Service Endpoints Guide for more information about connecting to alternate CDP
     * endpoints.
     */
    endpointUrl?: pulumi.Input<string>;
    /**
     * Defines whether CDP Control Plane runs locally. Defaults to `false`. This is an advanced configuration, not intended to
     * be used by end users.
     */
    localEnvironment?: pulumi.Input<boolean>;
}
