// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatalakeGcpDatalake extends pulumi.CustomResource {
    /**
     * Get an existing DatalakeGcpDatalake resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatalakeGcpDatalakeState, opts?: pulumi.CustomResourceOptions): DatalakeGcpDatalake {
        return new DatalakeGcpDatalake(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cdp:index/datalakeGcpDatalake:DatalakeGcpDatalake';

    /**
     * Returns true if the given object is an instance of DatalakeGcpDatalake.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatalakeGcpDatalake {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatalakeGcpDatalake.__pulumiType;
    }

    public readonly cloudProviderConfiguration!: pulumi.Output<outputs.DatalakeGcpDatalakeCloudProviderConfiguration>;
    public /*out*/ readonly creationDate!: pulumi.Output<string>;
    public /*out*/ readonly crn!: pulumi.Output<string>;
    public readonly datalakeName!: pulumi.Output<string>;
    public readonly enableRangerRaz!: pulumi.Output<boolean>;
    public /*out*/ readonly environmentCrn!: pulumi.Output<string>;
    public readonly environmentName!: pulumi.Output<string>;
    public readonly image!: pulumi.Output<outputs.DatalakeGcpDatalakeImage | undefined>;
    public readonly javaVersion!: pulumi.Output<number | undefined>;
    public readonly multiAz!: pulumi.Output<boolean>;
    /**
     * Polling related configuration options that could specify various values that will be used during CDP resource creation.
     */
    public readonly pollingOptions!: pulumi.Output<outputs.DatalakeGcpDatalakePollingOptions | undefined>;
    public readonly recipes!: pulumi.Output<outputs.DatalakeGcpDatalakeRecipe[] | undefined>;
    public readonly runtime!: pulumi.Output<string | undefined>;
    public readonly scale!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly statusReason!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a DatalakeGcpDatalake resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatalakeGcpDatalakeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatalakeGcpDatalakeArgs | DatalakeGcpDatalakeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatalakeGcpDatalakeState | undefined;
            resourceInputs["cloudProviderConfiguration"] = state ? state.cloudProviderConfiguration : undefined;
            resourceInputs["creationDate"] = state ? state.creationDate : undefined;
            resourceInputs["crn"] = state ? state.crn : undefined;
            resourceInputs["datalakeName"] = state ? state.datalakeName : undefined;
            resourceInputs["enableRangerRaz"] = state ? state.enableRangerRaz : undefined;
            resourceInputs["environmentCrn"] = state ? state.environmentCrn : undefined;
            resourceInputs["environmentName"] = state ? state.environmentName : undefined;
            resourceInputs["image"] = state ? state.image : undefined;
            resourceInputs["javaVersion"] = state ? state.javaVersion : undefined;
            resourceInputs["multiAz"] = state ? state.multiAz : undefined;
            resourceInputs["pollingOptions"] = state ? state.pollingOptions : undefined;
            resourceInputs["recipes"] = state ? state.recipes : undefined;
            resourceInputs["runtime"] = state ? state.runtime : undefined;
            resourceInputs["scale"] = state ? state.scale : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["statusReason"] = state ? state.statusReason : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as DatalakeGcpDatalakeArgs | undefined;
            if ((!args || args.cloudProviderConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudProviderConfiguration'");
            }
            if ((!args || args.datalakeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datalakeName'");
            }
            if ((!args || args.environmentName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentName'");
            }
            resourceInputs["cloudProviderConfiguration"] = args ? args.cloudProviderConfiguration : undefined;
            resourceInputs["datalakeName"] = args ? args.datalakeName : undefined;
            resourceInputs["enableRangerRaz"] = args ? args.enableRangerRaz : undefined;
            resourceInputs["environmentName"] = args ? args.environmentName : undefined;
            resourceInputs["image"] = args ? args.image : undefined;
            resourceInputs["javaVersion"] = args ? args.javaVersion : undefined;
            resourceInputs["multiAz"] = args ? args.multiAz : undefined;
            resourceInputs["pollingOptions"] = args ? args.pollingOptions : undefined;
            resourceInputs["recipes"] = args ? args.recipes : undefined;
            resourceInputs["runtime"] = args ? args.runtime : undefined;
            resourceInputs["scale"] = args ? args.scale : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["crn"] = undefined /*out*/;
            resourceInputs["environmentCrn"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["statusReason"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatalakeGcpDatalake.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatalakeGcpDatalake resources.
 */
export interface DatalakeGcpDatalakeState {
    cloudProviderConfiguration?: pulumi.Input<inputs.DatalakeGcpDatalakeCloudProviderConfiguration>;
    creationDate?: pulumi.Input<string>;
    crn?: pulumi.Input<string>;
    datalakeName?: pulumi.Input<string>;
    enableRangerRaz?: pulumi.Input<boolean>;
    environmentCrn?: pulumi.Input<string>;
    environmentName?: pulumi.Input<string>;
    image?: pulumi.Input<inputs.DatalakeGcpDatalakeImage>;
    javaVersion?: pulumi.Input<number>;
    multiAz?: pulumi.Input<boolean>;
    /**
     * Polling related configuration options that could specify various values that will be used during CDP resource creation.
     */
    pollingOptions?: pulumi.Input<inputs.DatalakeGcpDatalakePollingOptions>;
    recipes?: pulumi.Input<pulumi.Input<inputs.DatalakeGcpDatalakeRecipe>[]>;
    runtime?: pulumi.Input<string>;
    scale?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    statusReason?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a DatalakeGcpDatalake resource.
 */
export interface DatalakeGcpDatalakeArgs {
    cloudProviderConfiguration: pulumi.Input<inputs.DatalakeGcpDatalakeCloudProviderConfiguration>;
    datalakeName: pulumi.Input<string>;
    enableRangerRaz?: pulumi.Input<boolean>;
    environmentName: pulumi.Input<string>;
    image?: pulumi.Input<inputs.DatalakeGcpDatalakeImage>;
    javaVersion?: pulumi.Input<number>;
    multiAz?: pulumi.Input<boolean>;
    /**
     * Polling related configuration options that could specify various values that will be used during CDP resource creation.
     */
    pollingOptions?: pulumi.Input<inputs.DatalakeGcpDatalakePollingOptions>;
    recipes?: pulumi.Input<pulumi.Input<inputs.DatalakeGcpDatalakeRecipe>[]>;
    runtime?: pulumi.Input<string>;
    scale?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
