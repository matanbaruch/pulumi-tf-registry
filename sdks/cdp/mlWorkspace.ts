// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MlWorkspace extends pulumi.CustomResource {
    /**
     * Get an existing MlWorkspace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MlWorkspaceState, opts?: pulumi.CustomResourceOptions): MlWorkspace {
        return new MlWorkspace(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cdp:index/mlWorkspace:MlWorkspace';

    /**
     * Returns true if the given object is an instance of MlWorkspace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MlWorkspace {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MlWorkspace.__pulumiType;
    }

    /**
     * The whitelist of CIDR blocks which can access the API server.
     */
    public readonly authorizedIpRanges!: pulumi.Output<string[] | undefined>;
    /**
     * Toggle for cdsw migration preflight validation
     */
    public readonly cdswMigrationMode!: pulumi.Output<string | undefined>;
    /**
     * The boolean flag to disable TLS setup for workspace. By default, the TLS is enabled.
     */
    public readonly disableTls!: pulumi.Output<boolean | undefined>;
    /**
     * Enables Cloudera Machine Learning governance by integrating with Cloudera Atlas. By default, this flag is disabled.
     */
    public readonly enableGovernance!: pulumi.Output<boolean | undefined>;
    /**
     * Enables the model metrics service for exporting metrics for models to a metrics store.
     */
    public readonly enableModelMetrics!: pulumi.Output<boolean | undefined>;
    /**
     * The boolean flag is used to enable monitoring. By default, monitoring is disabled.
     */
    public readonly enableMonitoring!: pulumi.Output<boolean | undefined>;
    /**
     * The environment for the workspace to create.
     */
    public readonly environmentName!: pulumi.Output<string>;
    /**
     * Optional configurations for an existing Postgres to export model metrics to.
     */
    public readonly existingDatabaseConfig!: pulumi.Output<outputs.MlWorkspaceExistingDatabaseConfig | undefined>;
    /**
     * Optionally use an existing NFS by providing the hostname and desired path (Azure and Private Cloud only).
     */
    public readonly existingNfs!: pulumi.Output<string | undefined>;
    /**
     * The whitelist of IPs for load balancer.
     */
    public readonly loadBalancerIpWhitelists!: pulumi.Output<string[] | undefined>;
    /**
     * The version of ML workload app to install.
     */
    public readonly mlVersion!: pulumi.Output<string | undefined>;
    /**
     * The NFS Protocol version of the NFS server we are using for Azure and Private Cloud.
     */
    public readonly nfsVersion!: pulumi.Output<string | undefined>;
    /**
     * Outbound Types provided for the workspace.
     */
    public readonly outboundTypes!: pulumi.Output<string[] | undefined>;
    /**
     * Whether to create a private cluster.
     */
    public readonly privateCluster!: pulumi.Output<boolean | undefined>;
    /**
     * The request for Kubernetes workspace provision. Required in public cloud.
     */
    public readonly provisionK8sRequest!: pulumi.Output<outputs.MlWorkspaceProvisionK8sRequest>;
    /**
     * Skip pre-flight validations if requested.
     */
    public readonly skipValidation!: pulumi.Output<boolean | undefined>;
    /**
     * The static subdomain to be used for the workspace.
     */
    public readonly staticSubdomain!: pulumi.Output<string | undefined>;
    /**
     * The list of subnets used for the load balancer that CML creates.
     */
    public readonly subnetsForLoadBalancers!: pulumi.Output<string[] | undefined>;
    /**
     * The boolean flag to request public load balancer. By default, private load balancer is used.
     */
    public readonly usePublicLoadBalancer!: pulumi.Output<boolean | undefined>;
    /**
     * Whether to whitelist only 'authorizedIPRanges' given or all public IPs.
     */
    public readonly whitelistAuthorizedIpRanges!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the workspace to create.
     */
    public readonly workspaceName!: pulumi.Output<string>;

    /**
     * Create a MlWorkspace resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MlWorkspaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MlWorkspaceArgs | MlWorkspaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MlWorkspaceState | undefined;
            resourceInputs["authorizedIpRanges"] = state ? state.authorizedIpRanges : undefined;
            resourceInputs["cdswMigrationMode"] = state ? state.cdswMigrationMode : undefined;
            resourceInputs["disableTls"] = state ? state.disableTls : undefined;
            resourceInputs["enableGovernance"] = state ? state.enableGovernance : undefined;
            resourceInputs["enableModelMetrics"] = state ? state.enableModelMetrics : undefined;
            resourceInputs["enableMonitoring"] = state ? state.enableMonitoring : undefined;
            resourceInputs["environmentName"] = state ? state.environmentName : undefined;
            resourceInputs["existingDatabaseConfig"] = state ? state.existingDatabaseConfig : undefined;
            resourceInputs["existingNfs"] = state ? state.existingNfs : undefined;
            resourceInputs["loadBalancerIpWhitelists"] = state ? state.loadBalancerIpWhitelists : undefined;
            resourceInputs["mlVersion"] = state ? state.mlVersion : undefined;
            resourceInputs["nfsVersion"] = state ? state.nfsVersion : undefined;
            resourceInputs["outboundTypes"] = state ? state.outboundTypes : undefined;
            resourceInputs["privateCluster"] = state ? state.privateCluster : undefined;
            resourceInputs["provisionK8sRequest"] = state ? state.provisionK8sRequest : undefined;
            resourceInputs["skipValidation"] = state ? state.skipValidation : undefined;
            resourceInputs["staticSubdomain"] = state ? state.staticSubdomain : undefined;
            resourceInputs["subnetsForLoadBalancers"] = state ? state.subnetsForLoadBalancers : undefined;
            resourceInputs["usePublicLoadBalancer"] = state ? state.usePublicLoadBalancer : undefined;
            resourceInputs["whitelistAuthorizedIpRanges"] = state ? state.whitelistAuthorizedIpRanges : undefined;
            resourceInputs["workspaceName"] = state ? state.workspaceName : undefined;
        } else {
            const args = argsOrState as MlWorkspaceArgs | undefined;
            if ((!args || args.environmentName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentName'");
            }
            if ((!args || args.provisionK8sRequest === undefined) && !opts.urn) {
                throw new Error("Missing required property 'provisionK8sRequest'");
            }
            if ((!args || args.workspaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceName'");
            }
            resourceInputs["authorizedIpRanges"] = args ? args.authorizedIpRanges : undefined;
            resourceInputs["cdswMigrationMode"] = args ? args.cdswMigrationMode : undefined;
            resourceInputs["disableTls"] = args ? args.disableTls : undefined;
            resourceInputs["enableGovernance"] = args ? args.enableGovernance : undefined;
            resourceInputs["enableModelMetrics"] = args ? args.enableModelMetrics : undefined;
            resourceInputs["enableMonitoring"] = args ? args.enableMonitoring : undefined;
            resourceInputs["environmentName"] = args ? args.environmentName : undefined;
            resourceInputs["existingDatabaseConfig"] = args ? args.existingDatabaseConfig : undefined;
            resourceInputs["existingNfs"] = args ? args.existingNfs : undefined;
            resourceInputs["loadBalancerIpWhitelists"] = args ? args.loadBalancerIpWhitelists : undefined;
            resourceInputs["mlVersion"] = args ? args.mlVersion : undefined;
            resourceInputs["nfsVersion"] = args ? args.nfsVersion : undefined;
            resourceInputs["outboundTypes"] = args ? args.outboundTypes : undefined;
            resourceInputs["privateCluster"] = args ? args.privateCluster : undefined;
            resourceInputs["provisionK8sRequest"] = args ? args.provisionK8sRequest : undefined;
            resourceInputs["skipValidation"] = args ? args.skipValidation : undefined;
            resourceInputs["staticSubdomain"] = args ? args.staticSubdomain : undefined;
            resourceInputs["subnetsForLoadBalancers"] = args ? args.subnetsForLoadBalancers : undefined;
            resourceInputs["usePublicLoadBalancer"] = args ? args.usePublicLoadBalancer : undefined;
            resourceInputs["whitelistAuthorizedIpRanges"] = args ? args.whitelistAuthorizedIpRanges : undefined;
            resourceInputs["workspaceName"] = args ? args.workspaceName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MlWorkspace.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MlWorkspace resources.
 */
export interface MlWorkspaceState {
    /**
     * The whitelist of CIDR blocks which can access the API server.
     */
    authorizedIpRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Toggle for cdsw migration preflight validation
     */
    cdswMigrationMode?: pulumi.Input<string>;
    /**
     * The boolean flag to disable TLS setup for workspace. By default, the TLS is enabled.
     */
    disableTls?: pulumi.Input<boolean>;
    /**
     * Enables Cloudera Machine Learning governance by integrating with Cloudera Atlas. By default, this flag is disabled.
     */
    enableGovernance?: pulumi.Input<boolean>;
    /**
     * Enables the model metrics service for exporting metrics for models to a metrics store.
     */
    enableModelMetrics?: pulumi.Input<boolean>;
    /**
     * The boolean flag is used to enable monitoring. By default, monitoring is disabled.
     */
    enableMonitoring?: pulumi.Input<boolean>;
    /**
     * The environment for the workspace to create.
     */
    environmentName?: pulumi.Input<string>;
    /**
     * Optional configurations for an existing Postgres to export model metrics to.
     */
    existingDatabaseConfig?: pulumi.Input<inputs.MlWorkspaceExistingDatabaseConfig>;
    /**
     * Optionally use an existing NFS by providing the hostname and desired path (Azure and Private Cloud only).
     */
    existingNfs?: pulumi.Input<string>;
    /**
     * The whitelist of IPs for load balancer.
     */
    loadBalancerIpWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The version of ML workload app to install.
     */
    mlVersion?: pulumi.Input<string>;
    /**
     * The NFS Protocol version of the NFS server we are using for Azure and Private Cloud.
     */
    nfsVersion?: pulumi.Input<string>;
    /**
     * Outbound Types provided for the workspace.
     */
    outboundTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to create a private cluster.
     */
    privateCluster?: pulumi.Input<boolean>;
    /**
     * The request for Kubernetes workspace provision. Required in public cloud.
     */
    provisionK8sRequest?: pulumi.Input<inputs.MlWorkspaceProvisionK8sRequest>;
    /**
     * Skip pre-flight validations if requested.
     */
    skipValidation?: pulumi.Input<boolean>;
    /**
     * The static subdomain to be used for the workspace.
     */
    staticSubdomain?: pulumi.Input<string>;
    /**
     * The list of subnets used for the load balancer that CML creates.
     */
    subnetsForLoadBalancers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The boolean flag to request public load balancer. By default, private load balancer is used.
     */
    usePublicLoadBalancer?: pulumi.Input<boolean>;
    /**
     * Whether to whitelist only 'authorizedIPRanges' given or all public IPs.
     */
    whitelistAuthorizedIpRanges?: pulumi.Input<boolean>;
    /**
     * The name of the workspace to create.
     */
    workspaceName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MlWorkspace resource.
 */
export interface MlWorkspaceArgs {
    /**
     * The whitelist of CIDR blocks which can access the API server.
     */
    authorizedIpRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Toggle for cdsw migration preflight validation
     */
    cdswMigrationMode?: pulumi.Input<string>;
    /**
     * The boolean flag to disable TLS setup for workspace. By default, the TLS is enabled.
     */
    disableTls?: pulumi.Input<boolean>;
    /**
     * Enables Cloudera Machine Learning governance by integrating with Cloudera Atlas. By default, this flag is disabled.
     */
    enableGovernance?: pulumi.Input<boolean>;
    /**
     * Enables the model metrics service for exporting metrics for models to a metrics store.
     */
    enableModelMetrics?: pulumi.Input<boolean>;
    /**
     * The boolean flag is used to enable monitoring. By default, monitoring is disabled.
     */
    enableMonitoring?: pulumi.Input<boolean>;
    /**
     * The environment for the workspace to create.
     */
    environmentName: pulumi.Input<string>;
    /**
     * Optional configurations for an existing Postgres to export model metrics to.
     */
    existingDatabaseConfig?: pulumi.Input<inputs.MlWorkspaceExistingDatabaseConfig>;
    /**
     * Optionally use an existing NFS by providing the hostname and desired path (Azure and Private Cloud only).
     */
    existingNfs?: pulumi.Input<string>;
    /**
     * The whitelist of IPs for load balancer.
     */
    loadBalancerIpWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The version of ML workload app to install.
     */
    mlVersion?: pulumi.Input<string>;
    /**
     * The NFS Protocol version of the NFS server we are using for Azure and Private Cloud.
     */
    nfsVersion?: pulumi.Input<string>;
    /**
     * Outbound Types provided for the workspace.
     */
    outboundTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to create a private cluster.
     */
    privateCluster?: pulumi.Input<boolean>;
    /**
     * The request for Kubernetes workspace provision. Required in public cloud.
     */
    provisionK8sRequest: pulumi.Input<inputs.MlWorkspaceProvisionK8sRequest>;
    /**
     * Skip pre-flight validations if requested.
     */
    skipValidation?: pulumi.Input<boolean>;
    /**
     * The static subdomain to be used for the workspace.
     */
    staticSubdomain?: pulumi.Input<string>;
    /**
     * The list of subnets used for the load balancer that CML creates.
     */
    subnetsForLoadBalancers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The boolean flag to request public load balancer. By default, private load balancer is used.
     */
    usePublicLoadBalancer?: pulumi.Input<boolean>;
    /**
     * Whether to whitelist only 'authorizedIPRanges' given or all public IPs.
     */
    whitelistAuthorizedIpRanges?: pulumi.Input<boolean>;
    /**
     * The name of the workspace to create.
     */
    workspaceName: pulumi.Input<string>;
}
