// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("cdp");

/**
 * CDP access key id to authenticate the requests. It can be provided in the provider config (not recommended!), or it can
 * be sourced from the `CDP_ACCESS_KEY_ID` environment variable, or via a shared credentials file. If `cdp_profile` is
 * specified credentials for the specific profile will be used.
 */
export declare const cdpAccessKeyId: string | undefined;
Object.defineProperty(exports, "cdpAccessKeyId", {
    get() {
        return __config.get("cdpAccessKeyId");
    },
    enumerable: true,
});

/**
 * CDP configuration file. Defaults to `~/.cdp/config`.
 */
export declare const cdpConfigFile: string | undefined;
Object.defineProperty(exports, "cdpConfigFile", {
    get() {
        return __config.get("cdpConfigFile");
    },
    enumerable: true,
});

/**
 * CDP Endpoint URL to use. Customize the endpoint URL format for connecting to alternate endpoints for CDP services. See
 * the Custom Service Endpoints Guide for more information about connecting to alternate CDP endpoints.
 */
export declare const cdpEndpointUrl: string | undefined;
Object.defineProperty(exports, "cdpEndpointUrl", {
    get() {
        return __config.get("cdpEndpointUrl");
    },
    enumerable: true,
});

/**
 * CDP private key associated with the given access key. It can be provided in the provider config(not recommended!), or it
 * can also be sourced from the `CDP_PRIVATE_KEY` environment variable, or via a shared credentials file. If `cdp_profile`
 * is specified credentials for the specific profile will be used.
 */
export declare const cdpPrivateKey: string | undefined;
Object.defineProperty(exports, "cdpPrivateKey", {
    get() {
        return __config.get("cdpPrivateKey");
    },
    enumerable: true,
});

/**
 * CDP Profile to use for the configuration in shared credentials file (`~/.cdp/credentials`). It can also be sourced from
 * the `CDP_PROFILE` environment variable.
 */
export declare const cdpProfile: string | undefined;
Object.defineProperty(exports, "cdpProfile", {
    get() {
        return __config.get("cdpProfile");
    },
    enumerable: true,
});

/**
 * CDP Control Plane Region to send the API requests to, not to be confused by the cloud workload region (AWS, Azure or
 * GCP). Defaults to `us-west-1` and can also be sourced from `CDP_REGION` environment variable. More details can be found
 * [here](https://docs.cloudera.com/cdp-public-cloud/cloud/cp-regions/topics/cdp-control-plane-regions.html).
 */
export declare const cdpRegion: string | undefined;
Object.defineProperty(exports, "cdpRegion", {
    get() {
        return __config.get("cdpRegion");
    },
    enumerable: true,
});

/**
 * CDP shared credentials file. Defaults to `~/.cdp/credentials`.
 */
export declare const cdpSharedCredentialsFile: string | undefined;
Object.defineProperty(exports, "cdpSharedCredentialsFile", {
    get() {
        return __config.get("cdpSharedCredentialsFile");
    },
    enumerable: true,
});

/**
 * Endpoint URL to use. Customize the endpoint URL format for connecting to alternate endpoints for IAM and Workload
 * Management services. See the Custom Service Endpoints Guide for more information about connecting to alternate CDP
 * endpoints.
 */
export declare const endpointUrl: string | undefined;
Object.defineProperty(exports, "endpointUrl", {
    get() {
        return __config.get("endpointUrl");
    },
    enumerable: true,
});

/**
 * Defines whether CDP Control Plane runs locally. Defaults to `false`. This is an advanced configuration, not intended to
 * be used by end users.
 */
export declare const localEnvironment: boolean | undefined;
Object.defineProperty(exports, "localEnvironment", {
    get() {
        return __config.getObject<boolean>("localEnvironment");
    },
    enumerable: true,
});

