// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DwAwsCluster extends pulumi.CustomResource {
    /**
     * Get an existing DwAwsCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DwAwsClusterState, opts?: pulumi.CustomResourceOptions): DwAwsCluster {
        return new DwAwsCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cdp:index/dwAwsCluster:DwAwsCluster';

    /**
     * Returns true if the given object is an instance of DwAwsCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DwAwsCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DwAwsCluster.__pulumiType;
    }

    /**
     * The id of the cluster.
     */
    public /*out*/ readonly clusterId!: pulumi.Output<string>;
    /**
     * The cloudera resource name of the environment that the cluster will read from.
     */
    public readonly crn!: pulumi.Output<string>;
    public readonly customRegistryOptions!: pulumi.Output<outputs.DwAwsClusterCustomRegistryOptions | undefined>;
    /**
     * The custom subdomain to keep compatibility with old URL format.
     */
    public readonly customSubdomain!: pulumi.Output<string | undefined>;
    /**
     * The number of days to retain database backups.
     */
    public readonly databaseBackupRetentionDays!: pulumi.Output<number | undefined>;
    public readonly instanceSettings!: pulumi.Output<outputs.DwAwsClusterInstanceSettings | undefined>;
    public /*out*/ readonly lastUpdated!: pulumi.Output<string>;
    /**
     * The name of the cluster matches the environment name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly networkSettings!: pulumi.Output<outputs.DwAwsClusterNetworkSettings>;
    /**
     * The managed policy ARN to be attached to the created node instance role.
     */
    public readonly nodeRoleCdwManagedPolicyArn!: pulumi.Output<string | undefined>;

    /**
     * Create a DwAwsCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DwAwsClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DwAwsClusterArgs | DwAwsClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DwAwsClusterState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["crn"] = state ? state.crn : undefined;
            resourceInputs["customRegistryOptions"] = state ? state.customRegistryOptions : undefined;
            resourceInputs["customSubdomain"] = state ? state.customSubdomain : undefined;
            resourceInputs["databaseBackupRetentionDays"] = state ? state.databaseBackupRetentionDays : undefined;
            resourceInputs["instanceSettings"] = state ? state.instanceSettings : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkSettings"] = state ? state.networkSettings : undefined;
            resourceInputs["nodeRoleCdwManagedPolicyArn"] = state ? state.nodeRoleCdwManagedPolicyArn : undefined;
        } else {
            const args = argsOrState as DwAwsClusterArgs | undefined;
            if ((!args || args.crn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'crn'");
            }
            if ((!args || args.networkSettings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkSettings'");
            }
            resourceInputs["crn"] = args ? args.crn : undefined;
            resourceInputs["customRegistryOptions"] = args ? args.customRegistryOptions : undefined;
            resourceInputs["customSubdomain"] = args ? args.customSubdomain : undefined;
            resourceInputs["databaseBackupRetentionDays"] = args ? args.databaseBackupRetentionDays : undefined;
            resourceInputs["instanceSettings"] = args ? args.instanceSettings : undefined;
            resourceInputs["networkSettings"] = args ? args.networkSettings : undefined;
            resourceInputs["nodeRoleCdwManagedPolicyArn"] = args ? args.nodeRoleCdwManagedPolicyArn : undefined;
            resourceInputs["clusterId"] = undefined /*out*/;
            resourceInputs["lastUpdated"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DwAwsCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DwAwsCluster resources.
 */
export interface DwAwsClusterState {
    /**
     * The id of the cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The cloudera resource name of the environment that the cluster will read from.
     */
    crn?: pulumi.Input<string>;
    customRegistryOptions?: pulumi.Input<inputs.DwAwsClusterCustomRegistryOptions>;
    /**
     * The custom subdomain to keep compatibility with old URL format.
     */
    customSubdomain?: pulumi.Input<string>;
    /**
     * The number of days to retain database backups.
     */
    databaseBackupRetentionDays?: pulumi.Input<number>;
    instanceSettings?: pulumi.Input<inputs.DwAwsClusterInstanceSettings>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * The name of the cluster matches the environment name.
     */
    name?: pulumi.Input<string>;
    networkSettings?: pulumi.Input<inputs.DwAwsClusterNetworkSettings>;
    /**
     * The managed policy ARN to be attached to the created node instance role.
     */
    nodeRoleCdwManagedPolicyArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DwAwsCluster resource.
 */
export interface DwAwsClusterArgs {
    /**
     * The cloudera resource name of the environment that the cluster will read from.
     */
    crn: pulumi.Input<string>;
    customRegistryOptions?: pulumi.Input<inputs.DwAwsClusterCustomRegistryOptions>;
    /**
     * The custom subdomain to keep compatibility with old URL format.
     */
    customSubdomain?: pulumi.Input<string>;
    /**
     * The number of days to retain database backups.
     */
    databaseBackupRetentionDays?: pulumi.Input<number>;
    instanceSettings?: pulumi.Input<inputs.DwAwsClusterInstanceSettings>;
    networkSettings: pulumi.Input<inputs.DwAwsClusterNetworkSettings>;
    /**
     * The managed policy ARN to be attached to the created node instance role.
     */
    nodeRoleCdwManagedPolicyArn?: pulumi.Input<string>;
}
