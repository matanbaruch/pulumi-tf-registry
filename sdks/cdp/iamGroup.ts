// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IamGroup extends pulumi.CustomResource {
    /**
     * Get an existing IamGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IamGroupState, opts?: pulumi.CustomResourceOptions): IamGroup {
        return new IamGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cdp:index/iamGroup:IamGroup';

    /**
     * Returns true if the given object is an instance of IamGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IamGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IamGroup.__pulumiType;
    }

    /**
     * The CRN of the resource.
     */
    public /*out*/ readonly crn!: pulumi.Output<string>;
    /**
     * The name of the group. This name must be unique. There are certain restrictions on the group name. Refer to the How To >
     * User Management section in the Management Console documentation for the details.
     */
    public readonly groupName!: pulumi.Output<string>;
    /**
     * Whether group membership is synced when a user logs in. The default is to sync group membership.
     */
    public readonly syncMembershipOnUserLogin!: pulumi.Output<boolean>;

    /**
     * Create a IamGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IamGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IamGroupArgs | IamGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IamGroupState | undefined;
            resourceInputs["crn"] = state ? state.crn : undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["syncMembershipOnUserLogin"] = state ? state.syncMembershipOnUserLogin : undefined;
        } else {
            const args = argsOrState as IamGroupArgs | undefined;
            if ((!args || args.groupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupName'");
            }
            resourceInputs["groupName"] = args ? args.groupName : undefined;
            resourceInputs["syncMembershipOnUserLogin"] = args ? args.syncMembershipOnUserLogin : undefined;
            resourceInputs["crn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IamGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IamGroup resources.
 */
export interface IamGroupState {
    /**
     * The CRN of the resource.
     */
    crn?: pulumi.Input<string>;
    /**
     * The name of the group. This name must be unique. There are certain restrictions on the group name. Refer to the How To >
     * User Management section in the Management Console documentation for the details.
     */
    groupName?: pulumi.Input<string>;
    /**
     * Whether group membership is synced when a user logs in. The default is to sync group membership.
     */
    syncMembershipOnUserLogin?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a IamGroup resource.
 */
export interface IamGroupArgs {
    /**
     * The name of the group. This name must be unique. There are certain restrictions on the group name. Refer to the How To >
     * User Management section in the Management Console documentation for the details.
     */
    groupName: pulumi.Input<string>;
    /**
     * Whether group membership is synced when a user logs in. The default is to sync group membership.
     */
    syncMembershipOnUserLogin?: pulumi.Input<boolean>;
}
