// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EnvironmentsIdBrokerMappings extends pulumi.CustomResource {
    /**
     * Get an existing EnvironmentsIdBrokerMappings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EnvironmentsIdBrokerMappingsState, opts?: pulumi.CustomResourceOptions): EnvironmentsIdBrokerMappings {
        return new EnvironmentsIdBrokerMappings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cdp:index/environmentsIdBrokerMappings:EnvironmentsIdBrokerMappings';

    /**
     * Returns true if the given object is an instance of EnvironmentsIdBrokerMappings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EnvironmentsIdBrokerMappings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EnvironmentsIdBrokerMappings.__pulumiType;
    }

    public readonly dataAccessRole!: pulumi.Output<string>;
    public readonly environmentCrn!: pulumi.Output<string>;
    public readonly environmentName!: pulumi.Output<string>;
    public readonly mappings!: pulumi.Output<outputs.EnvironmentsIdBrokerMappingsMapping[] | undefined>;
    public /*out*/ readonly mappingsVersion!: pulumi.Output<number>;
    public readonly rangerAuditRole!: pulumi.Output<string>;
    public readonly rangerCloudAccessAuthorizerRole!: pulumi.Output<string>;
    public readonly setEmptyMappings!: pulumi.Output<boolean | undefined>;

    /**
     * Create a EnvironmentsIdBrokerMappings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnvironmentsIdBrokerMappingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EnvironmentsIdBrokerMappingsArgs | EnvironmentsIdBrokerMappingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EnvironmentsIdBrokerMappingsState | undefined;
            resourceInputs["dataAccessRole"] = state ? state.dataAccessRole : undefined;
            resourceInputs["environmentCrn"] = state ? state.environmentCrn : undefined;
            resourceInputs["environmentName"] = state ? state.environmentName : undefined;
            resourceInputs["mappings"] = state ? state.mappings : undefined;
            resourceInputs["mappingsVersion"] = state ? state.mappingsVersion : undefined;
            resourceInputs["rangerAuditRole"] = state ? state.rangerAuditRole : undefined;
            resourceInputs["rangerCloudAccessAuthorizerRole"] = state ? state.rangerCloudAccessAuthorizerRole : undefined;
            resourceInputs["setEmptyMappings"] = state ? state.setEmptyMappings : undefined;
        } else {
            const args = argsOrState as EnvironmentsIdBrokerMappingsArgs | undefined;
            if ((!args || args.environmentCrn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentCrn'");
            }
            if ((!args || args.environmentName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentName'");
            }
            if ((!args || args.rangerAuditRole === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rangerAuditRole'");
            }
            resourceInputs["dataAccessRole"] = args ? args.dataAccessRole : undefined;
            resourceInputs["environmentCrn"] = args ? args.environmentCrn : undefined;
            resourceInputs["environmentName"] = args ? args.environmentName : undefined;
            resourceInputs["mappings"] = args ? args.mappings : undefined;
            resourceInputs["rangerAuditRole"] = args ? args.rangerAuditRole : undefined;
            resourceInputs["rangerCloudAccessAuthorizerRole"] = args ? args.rangerCloudAccessAuthorizerRole : undefined;
            resourceInputs["setEmptyMappings"] = args ? args.setEmptyMappings : undefined;
            resourceInputs["mappingsVersion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EnvironmentsIdBrokerMappings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EnvironmentsIdBrokerMappings resources.
 */
export interface EnvironmentsIdBrokerMappingsState {
    dataAccessRole?: pulumi.Input<string>;
    environmentCrn?: pulumi.Input<string>;
    environmentName?: pulumi.Input<string>;
    mappings?: pulumi.Input<pulumi.Input<inputs.EnvironmentsIdBrokerMappingsMapping>[]>;
    mappingsVersion?: pulumi.Input<number>;
    rangerAuditRole?: pulumi.Input<string>;
    rangerCloudAccessAuthorizerRole?: pulumi.Input<string>;
    setEmptyMappings?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a EnvironmentsIdBrokerMappings resource.
 */
export interface EnvironmentsIdBrokerMappingsArgs {
    dataAccessRole?: pulumi.Input<string>;
    environmentCrn: pulumi.Input<string>;
    environmentName: pulumi.Input<string>;
    mappings?: pulumi.Input<pulumi.Input<inputs.EnvironmentsIdBrokerMappingsMapping>[]>;
    rangerAuditRole: pulumi.Input<string>;
    rangerCloudAccessAuthorizerRole?: pulumi.Input<string>;
    setEmptyMappings?: pulumi.Input<boolean>;
}
