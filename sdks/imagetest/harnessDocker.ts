// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HarnessDocker extends pulumi.CustomResource {
    /**
     * Get an existing HarnessDocker resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HarnessDockerState, opts?: pulumi.CustomResourceOptions): HarnessDocker {
        return new HarnessDocker(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'imagetest:index/harnessDocker:HarnessDocker';

    /**
     * Returns true if the given object is an instance of HarnessDocker.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HarnessDocker {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HarnessDocker.__pulumiType;
    }

    /**
     * Environment variables to set on the container.
     */
    public readonly envs!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The full image reference to use for the container.
     */
    public readonly image!: pulumi.Output<string>;
    /**
     * The inventory this harness belongs to. This is received as a direct input from a data.imagetest_inventory data source.
     */
    public readonly inventory!: pulumi.Output<outputs.HarnessDockerInventory>;
    /**
     * The list of mounts to create on the container.
     */
    public readonly mounts!: pulumi.Output<outputs.HarnessDockerMount[] | undefined>;
    /**
     * The name of the harness. This must be unique within the scope of the provided inventory.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A map of existing networks to attach the container to.
     */
    public readonly networks!: pulumi.Output<{[key: string]: outputs.HarnessDockerNetworks} | undefined>;
    public readonly privileged!: pulumi.Output<boolean>;
    /**
     * A map of registries containing configuration for optional auth, tls, and mirror configuration.
     */
    public readonly registries!: pulumi.Output<{[key: string]: outputs.HarnessDockerRegistries} | undefined>;
    public readonly resources!: pulumi.Output<outputs.HarnessDockerResources | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.HarnessDockerTimeouts | undefined>;
    /**
     * The volumes this harness should mount. This is received as a mapping from imagetest.ContainerVolume resources to
     * destination folders.
     */
    public readonly volumes!: pulumi.Output<outputs.HarnessDockerVolume[] | undefined>;

    /**
     * Create a HarnessDocker resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HarnessDockerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HarnessDockerArgs | HarnessDockerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HarnessDockerState | undefined;
            resourceInputs["envs"] = state ? state.envs : undefined;
            resourceInputs["image"] = state ? state.image : undefined;
            resourceInputs["inventory"] = state ? state.inventory : undefined;
            resourceInputs["mounts"] = state ? state.mounts : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["privileged"] = state ? state.privileged : undefined;
            resourceInputs["registries"] = state ? state.registries : undefined;
            resourceInputs["resources"] = state ? state.resources : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["volumes"] = state ? state.volumes : undefined;
        } else {
            const args = argsOrState as HarnessDockerArgs | undefined;
            if ((!args || args.inventory === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inventory'");
            }
            resourceInputs["envs"] = args ? args.envs : undefined;
            resourceInputs["image"] = args ? args.image : undefined;
            resourceInputs["inventory"] = args ? args.inventory : undefined;
            resourceInputs["mounts"] = args ? args.mounts : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["privileged"] = args ? args.privileged : undefined;
            resourceInputs["registries"] = args ? args.registries : undefined;
            resourceInputs["resources"] = args ? args.resources : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["volumes"] = args ? args.volumes : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HarnessDocker.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HarnessDocker resources.
 */
export interface HarnessDockerState {
    /**
     * Environment variables to set on the container.
     */
    envs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The full image reference to use for the container.
     */
    image?: pulumi.Input<string>;
    /**
     * The inventory this harness belongs to. This is received as a direct input from a data.imagetest_inventory data source.
     */
    inventory?: pulumi.Input<inputs.HarnessDockerInventory>;
    /**
     * The list of mounts to create on the container.
     */
    mounts?: pulumi.Input<pulumi.Input<inputs.HarnessDockerMount>[]>;
    /**
     * The name of the harness. This must be unique within the scope of the provided inventory.
     */
    name?: pulumi.Input<string>;
    /**
     * A map of existing networks to attach the container to.
     */
    networks?: pulumi.Input<{[key: string]: pulumi.Input<inputs.HarnessDockerNetworks>}>;
    privileged?: pulumi.Input<boolean>;
    /**
     * A map of registries containing configuration for optional auth, tls, and mirror configuration.
     */
    registries?: pulumi.Input<{[key: string]: pulumi.Input<inputs.HarnessDockerRegistries>}>;
    resources?: pulumi.Input<inputs.HarnessDockerResources>;
    timeouts?: pulumi.Input<inputs.HarnessDockerTimeouts>;
    /**
     * The volumes this harness should mount. This is received as a mapping from imagetest.ContainerVolume resources to
     * destination folders.
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.HarnessDockerVolume>[]>;
}

/**
 * The set of arguments for constructing a HarnessDocker resource.
 */
export interface HarnessDockerArgs {
    /**
     * Environment variables to set on the container.
     */
    envs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The full image reference to use for the container.
     */
    image?: pulumi.Input<string>;
    /**
     * The inventory this harness belongs to. This is received as a direct input from a data.imagetest_inventory data source.
     */
    inventory: pulumi.Input<inputs.HarnessDockerInventory>;
    /**
     * The list of mounts to create on the container.
     */
    mounts?: pulumi.Input<pulumi.Input<inputs.HarnessDockerMount>[]>;
    /**
     * The name of the harness. This must be unique within the scope of the provided inventory.
     */
    name?: pulumi.Input<string>;
    /**
     * A map of existing networks to attach the container to.
     */
    networks?: pulumi.Input<{[key: string]: pulumi.Input<inputs.HarnessDockerNetworks>}>;
    privileged?: pulumi.Input<boolean>;
    /**
     * A map of registries containing configuration for optional auth, tls, and mirror configuration.
     */
    registries?: pulumi.Input<{[key: string]: pulumi.Input<inputs.HarnessDockerRegistries>}>;
    resources?: pulumi.Input<inputs.HarnessDockerResources>;
    timeouts?: pulumi.Input<inputs.HarnessDockerTimeouts>;
    /**
     * The volumes this harness should mount. This is received as a mapping from imagetest.ContainerVolume resources to
     * destination folders.
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.HarnessDockerVolume>[]>;
}
