// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ContainerVolumeArgs, ContainerVolumeState } from "./containerVolume";
export type ContainerVolume = import("./containerVolume").ContainerVolume;
export const ContainerVolume: typeof import("./containerVolume").ContainerVolume = null as any;
utilities.lazyLoad(exports, ["ContainerVolume"], () => require("./containerVolume"));

export { FeatureArgs, FeatureState } from "./feature";
export type Feature = import("./feature").Feature;
export const Feature: typeof import("./feature").Feature = null as any;
utilities.lazyLoad(exports, ["Feature"], () => require("./feature"));

export { GetInventoryResult } from "./getInventory";
export const getInventory: typeof import("./getInventory").getInventory = null as any;
export const getInventoryOutput: typeof import("./getInventory").getInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getInventory","getInventoryOutput"], () => require("./getInventory"));

export { HarnessDockerArgs, HarnessDockerState } from "./harnessDocker";
export type HarnessDocker = import("./harnessDocker").HarnessDocker;
export const HarnessDocker: typeof import("./harnessDocker").HarnessDocker = null as any;
utilities.lazyLoad(exports, ["HarnessDocker"], () => require("./harnessDocker"));

export { HarnessK3sArgs, HarnessK3sState } from "./harnessK3s";
export type HarnessK3s = import("./harnessK3s").HarnessK3s;
export const HarnessK3s: typeof import("./harnessK3s").HarnessK3s = null as any;
utilities.lazyLoad(exports, ["HarnessK3s"], () => require("./harnessK3s"));

export { HarnessPterraformArgs, HarnessPterraformState } from "./harnessPterraform";
export type HarnessPterraform = import("./harnessPterraform").HarnessPterraform;
export const HarnessPterraform: typeof import("./harnessPterraform").HarnessPterraform = null as any;
utilities.lazyLoad(exports, ["HarnessPterraform"], () => require("./harnessPterraform"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "imagetest:index/containerVolume:ContainerVolume":
                return new ContainerVolume(name, <any>undefined, { urn })
            case "imagetest:index/feature:Feature":
                return new Feature(name, <any>undefined, { urn })
            case "imagetest:index/harnessDocker:HarnessDocker":
                return new HarnessDocker(name, <any>undefined, { urn })
            case "imagetest:index/harnessK3s:HarnessK3s":
                return new HarnessK3s(name, <any>undefined, { urn })
            case "imagetest:index/harnessPterraform:HarnessPterraform":
                return new HarnessPterraform(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("imagetest", "index/containerVolume", _module)
pulumi.runtime.registerResourceModule("imagetest", "index/feature", _module)
pulumi.runtime.registerResourceModule("imagetest", "index/harnessDocker", _module)
pulumi.runtime.registerResourceModule("imagetest", "index/harnessK3s", _module)
pulumi.runtime.registerResourceModule("imagetest", "index/harnessPterraform", _module)
pulumi.runtime.registerResourcePackage("imagetest", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:imagetest") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
