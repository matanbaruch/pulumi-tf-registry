// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Feature extends pulumi.CustomResource {
    /**
     * Get an existing Feature resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FeatureState, opts?: pulumi.CustomResourceOptions): Feature {
        return new Feature(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'imagetest:index/feature:Feature';

    /**
     * Returns true if the given object is an instance of Feature.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Feature {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Feature.__pulumiType;
    }

    /**
     * Actions to run againast the harness after the core steps have run OR after a step has failed.
     */
    public readonly afters!: pulumi.Output<outputs.FeatureAfter[] | undefined>;
    /**
     * Actions to run against the harness before the core feature steps.
     */
    public readonly befores!: pulumi.Output<outputs.FeatureBefore[] | undefined>;
    /**
     * A descriptor of the feature
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly harness!: pulumi.Output<outputs.FeatureHarness>;
    /**
     * A set of labels used to optionally filter execution of the feature
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The name of the feature
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Actions to run against the harness.
     */
    public readonly steps!: pulumi.Output<outputs.FeatureStep[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.FeatureTimeouts | undefined>;

    /**
     * Create a Feature resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FeatureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FeatureArgs | FeatureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FeatureState | undefined;
            resourceInputs["afters"] = state ? state.afters : undefined;
            resourceInputs["befores"] = state ? state.befores : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["harness"] = state ? state.harness : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["steps"] = state ? state.steps : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as FeatureArgs | undefined;
            if ((!args || args.harness === undefined) && !opts.urn) {
                throw new Error("Missing required property 'harness'");
            }
            resourceInputs["afters"] = args ? args.afters : undefined;
            resourceInputs["befores"] = args ? args.befores : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["harness"] = args ? args.harness : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["steps"] = args ? args.steps : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Feature.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Feature resources.
 */
export interface FeatureState {
    /**
     * Actions to run againast the harness after the core steps have run OR after a step has failed.
     */
    afters?: pulumi.Input<pulumi.Input<inputs.FeatureAfter>[]>;
    /**
     * Actions to run against the harness before the core feature steps.
     */
    befores?: pulumi.Input<pulumi.Input<inputs.FeatureBefore>[]>;
    /**
     * A descriptor of the feature
     */
    description?: pulumi.Input<string>;
    harness?: pulumi.Input<inputs.FeatureHarness>;
    /**
     * A set of labels used to optionally filter execution of the feature
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the feature
     */
    name?: pulumi.Input<string>;
    /**
     * Actions to run against the harness.
     */
    steps?: pulumi.Input<pulumi.Input<inputs.FeatureStep>[]>;
    timeouts?: pulumi.Input<inputs.FeatureTimeouts>;
}

/**
 * The set of arguments for constructing a Feature resource.
 */
export interface FeatureArgs {
    /**
     * Actions to run againast the harness after the core steps have run OR after a step has failed.
     */
    afters?: pulumi.Input<pulumi.Input<inputs.FeatureAfter>[]>;
    /**
     * Actions to run against the harness before the core feature steps.
     */
    befores?: pulumi.Input<pulumi.Input<inputs.FeatureBefore>[]>;
    /**
     * A descriptor of the feature
     */
    description?: pulumi.Input<string>;
    harness: pulumi.Input<inputs.FeatureHarness>;
    /**
     * A set of labels used to optionally filter execution of the feature
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the feature
     */
    name?: pulumi.Input<string>;
    /**
     * Actions to run against the harness.
     */
    steps?: pulumi.Input<pulumi.Input<inputs.FeatureStep>[]>;
    timeouts?: pulumi.Input<inputs.FeatureTimeouts>;
}
