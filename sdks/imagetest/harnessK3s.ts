// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HarnessK3s extends pulumi.CustomResource {
    /**
     * Get an existing HarnessK3s resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HarnessK3sState, opts?: pulumi.CustomResourceOptions): HarnessK3s {
        return new HarnessK3s(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'imagetest:index/harnessK3s:HarnessK3s';

    /**
     * Returns true if the given object is an instance of HarnessK3s.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HarnessK3s {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HarnessK3s.__pulumiType;
    }

    /**
     * When true, the builtin (flannel) CNI will be disabled.
     */
    public readonly disableCni!: pulumi.Output<boolean>;
    /**
     * When true, the builtin metrics server will be disabled.
     */
    public readonly disableMetricsServer!: pulumi.Output<boolean>;
    /**
     * When true, the builtin network policy controller will be disabled.
     */
    public readonly disableNetworkPolicy!: pulumi.Output<boolean>;
    /**
     * When true, the builtin traefik ingress controller will be disabled.
     */
    public readonly disableTraefik!: pulumi.Output<boolean>;
    public readonly hooks!: pulumi.Output<outputs.HarnessK3sHooks | undefined>;
    /**
     * The full image reference to use for the k3s container.
     */
    public readonly image!: pulumi.Output<string | undefined>;
    /**
     * The inventory this harness belongs to. This is received as a direct input from a data.imagetest_inventory data source.
     */
    public readonly inventory!: pulumi.Output<outputs.HarnessK3sInventory>;
    /**
     * The KubeletConfiguration to be applied to the underlying k3s cluster in YAML format.
     */
    public readonly kubeletConfig!: pulumi.Output<string | undefined>;
    /**
     * The name of the harness. This must be unique within the scope of the provided inventory.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A map of existing networks to attach the harness containers to.
     */
    public readonly networks!: pulumi.Output<{[key: string]: outputs.HarnessK3sNetworks} | undefined>;
    /**
     * A map of registries containing configuration for optional auth, tls, and mirror configuration.
     */
    public readonly registries!: pulumi.Output<{[key: string]: outputs.HarnessK3sRegistries} | undefined>;
    public readonly resources!: pulumi.Output<outputs.HarnessK3sResources | undefined>;
    /**
     * A map of configuration for the sandbox container.
     */
    public readonly sandbox!: pulumi.Output<outputs.HarnessK3sSandbox | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.HarnessK3sTimeouts | undefined>;

    /**
     * Create a HarnessK3s resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HarnessK3sArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HarnessK3sArgs | HarnessK3sState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HarnessK3sState | undefined;
            resourceInputs["disableCni"] = state ? state.disableCni : undefined;
            resourceInputs["disableMetricsServer"] = state ? state.disableMetricsServer : undefined;
            resourceInputs["disableNetworkPolicy"] = state ? state.disableNetworkPolicy : undefined;
            resourceInputs["disableTraefik"] = state ? state.disableTraefik : undefined;
            resourceInputs["hooks"] = state ? state.hooks : undefined;
            resourceInputs["image"] = state ? state.image : undefined;
            resourceInputs["inventory"] = state ? state.inventory : undefined;
            resourceInputs["kubeletConfig"] = state ? state.kubeletConfig : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["registries"] = state ? state.registries : undefined;
            resourceInputs["resources"] = state ? state.resources : undefined;
            resourceInputs["sandbox"] = state ? state.sandbox : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as HarnessK3sArgs | undefined;
            if ((!args || args.inventory === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inventory'");
            }
            resourceInputs["disableCni"] = args ? args.disableCni : undefined;
            resourceInputs["disableMetricsServer"] = args ? args.disableMetricsServer : undefined;
            resourceInputs["disableNetworkPolicy"] = args ? args.disableNetworkPolicy : undefined;
            resourceInputs["disableTraefik"] = args ? args.disableTraefik : undefined;
            resourceInputs["hooks"] = args ? args.hooks : undefined;
            resourceInputs["image"] = args ? args.image : undefined;
            resourceInputs["inventory"] = args ? args.inventory : undefined;
            resourceInputs["kubeletConfig"] = args ? args.kubeletConfig : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["registries"] = args ? args.registries : undefined;
            resourceInputs["resources"] = args ? args.resources : undefined;
            resourceInputs["sandbox"] = args ? args.sandbox : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HarnessK3s.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HarnessK3s resources.
 */
export interface HarnessK3sState {
    /**
     * When true, the builtin (flannel) CNI will be disabled.
     */
    disableCni?: pulumi.Input<boolean>;
    /**
     * When true, the builtin metrics server will be disabled.
     */
    disableMetricsServer?: pulumi.Input<boolean>;
    /**
     * When true, the builtin network policy controller will be disabled.
     */
    disableNetworkPolicy?: pulumi.Input<boolean>;
    /**
     * When true, the builtin traefik ingress controller will be disabled.
     */
    disableTraefik?: pulumi.Input<boolean>;
    hooks?: pulumi.Input<inputs.HarnessK3sHooks>;
    /**
     * The full image reference to use for the k3s container.
     */
    image?: pulumi.Input<string>;
    /**
     * The inventory this harness belongs to. This is received as a direct input from a data.imagetest_inventory data source.
     */
    inventory?: pulumi.Input<inputs.HarnessK3sInventory>;
    /**
     * The KubeletConfiguration to be applied to the underlying k3s cluster in YAML format.
     */
    kubeletConfig?: pulumi.Input<string>;
    /**
     * The name of the harness. This must be unique within the scope of the provided inventory.
     */
    name?: pulumi.Input<string>;
    /**
     * A map of existing networks to attach the harness containers to.
     */
    networks?: pulumi.Input<{[key: string]: pulumi.Input<inputs.HarnessK3sNetworks>}>;
    /**
     * A map of registries containing configuration for optional auth, tls, and mirror configuration.
     */
    registries?: pulumi.Input<{[key: string]: pulumi.Input<inputs.HarnessK3sRegistries>}>;
    resources?: pulumi.Input<inputs.HarnessK3sResources>;
    /**
     * A map of configuration for the sandbox container.
     */
    sandbox?: pulumi.Input<inputs.HarnessK3sSandbox>;
    timeouts?: pulumi.Input<inputs.HarnessK3sTimeouts>;
}

/**
 * The set of arguments for constructing a HarnessK3s resource.
 */
export interface HarnessK3sArgs {
    /**
     * When true, the builtin (flannel) CNI will be disabled.
     */
    disableCni?: pulumi.Input<boolean>;
    /**
     * When true, the builtin metrics server will be disabled.
     */
    disableMetricsServer?: pulumi.Input<boolean>;
    /**
     * When true, the builtin network policy controller will be disabled.
     */
    disableNetworkPolicy?: pulumi.Input<boolean>;
    /**
     * When true, the builtin traefik ingress controller will be disabled.
     */
    disableTraefik?: pulumi.Input<boolean>;
    hooks?: pulumi.Input<inputs.HarnessK3sHooks>;
    /**
     * The full image reference to use for the k3s container.
     */
    image?: pulumi.Input<string>;
    /**
     * The inventory this harness belongs to. This is received as a direct input from a data.imagetest_inventory data source.
     */
    inventory: pulumi.Input<inputs.HarnessK3sInventory>;
    /**
     * The KubeletConfiguration to be applied to the underlying k3s cluster in YAML format.
     */
    kubeletConfig?: pulumi.Input<string>;
    /**
     * The name of the harness. This must be unique within the scope of the provided inventory.
     */
    name?: pulumi.Input<string>;
    /**
     * A map of existing networks to attach the harness containers to.
     */
    networks?: pulumi.Input<{[key: string]: pulumi.Input<inputs.HarnessK3sNetworks>}>;
    /**
     * A map of registries containing configuration for optional auth, tls, and mirror configuration.
     */
    registries?: pulumi.Input<{[key: string]: pulumi.Input<inputs.HarnessK3sRegistries>}>;
    resources?: pulumi.Input<inputs.HarnessK3sResources>;
    /**
     * A map of configuration for the sandbox container.
     */
    sandbox?: pulumi.Input<inputs.HarnessK3sSandbox>;
    timeouts?: pulumi.Input<inputs.HarnessK3sTimeouts>;
}
