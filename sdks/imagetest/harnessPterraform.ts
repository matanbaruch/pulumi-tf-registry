// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HarnessPterraform extends pulumi.CustomResource {
    /**
     * Get an existing HarnessPterraform resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HarnessPterraformState, opts?: pulumi.CustomResourceOptions): HarnessPterraform {
        return new HarnessPterraform(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'imagetest:index/harnessPterraform:HarnessPterraform';

    /**
     * Returns true if the given object is an instance of HarnessPterraform.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HarnessPterraform {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HarnessPterraform.__pulumiType;
    }

    /**
     * The inventory this harness belongs to. This is received as a direct input from a data.imagetest_inventory data source.
     */
    public readonly inventory!: pulumi.Output<outputs.HarnessPterraformInventory>;
    /**
     * The name of the harness. This must be unique within the scope of the provided inventory.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly path!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.HarnessPterraformTimeouts | undefined>;
    public readonly vars!: pulumi.Output<string | undefined>;

    /**
     * Create a HarnessPterraform resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HarnessPterraformArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HarnessPterraformArgs | HarnessPterraformState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HarnessPterraformState | undefined;
            resourceInputs["inventory"] = state ? state.inventory : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vars"] = state ? state.vars : undefined;
        } else {
            const args = argsOrState as HarnessPterraformArgs | undefined;
            if ((!args || args.inventory === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inventory'");
            }
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            resourceInputs["inventory"] = args ? args.inventory : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vars"] = args ? args.vars : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HarnessPterraform.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HarnessPterraform resources.
 */
export interface HarnessPterraformState {
    /**
     * The inventory this harness belongs to. This is received as a direct input from a data.imagetest_inventory data source.
     */
    inventory?: pulumi.Input<inputs.HarnessPterraformInventory>;
    /**
     * The name of the harness. This must be unique within the scope of the provided inventory.
     */
    name?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.HarnessPterraformTimeouts>;
    vars?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HarnessPterraform resource.
 */
export interface HarnessPterraformArgs {
    /**
     * The inventory this harness belongs to. This is received as a direct input from a data.imagetest_inventory data source.
     */
    inventory: pulumi.Input<inputs.HarnessPterraformInventory>;
    /**
     * The name of the harness. This must be unique within the scope of the provided inventory.
     */
    name?: pulumi.Input<string>;
    path: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.HarnessPterraformTimeouts>;
    vars?: pulumi.Input<string>;
}
