// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVirtualizationVmwareDatastoreCluster(args?: GetVirtualizationVmwareDatastoreClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualizationVmwareDatastoreClusterResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getVirtualizationVmwareDatastoreCluster:getVirtualizationVmwareDatastoreCluster", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "automationLevel": args.automationLevel,
        "capacity": args.capacity,
        "classId": args.classId,
        "createTime": args.createTime,
        "datacenter": args.datacenter,
        "datastoreCount": args.datastoreCount,
        "domainGroupMoid": args.domainGroupMoid,
        "freeSpaceThreshold": args.freeSpaceThreshold,
        "hostCount": args.hostCount,
        "id": args.id,
        "identity": args.identity,
        "inventoryPath": args.inventoryPath,
        "ioLatencyThreshold": args.ioLatencyThreshold,
        "ioLoadBalanceAutomationMode": args.ioLoadBalanceAutomationMode,
        "ioLoadImbalanceThreshold": args.ioLoadImbalanceThreshold,
        "ioMetricsEnabled": args.ioMetricsEnabled,
        "minSpaceUtilizationDifference": args.minSpaceUtilizationDifference,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "policyEnforcementAutomationMode": args.policyEnforcementAutomationMode,
        "registeredDevice": args.registeredDevice,
        "reservablePercentThreshold": args.reservablePercentThreshold,
        "ruleEnforcementAutomationMode": args.ruleEnforcementAutomationMode,
        "sharedScope": args.sharedScope,
        "spaceLoadBalanceAutomationMode": args.spaceLoadBalanceAutomationMode,
        "spaceThresholdMode": args.spaceThresholdMode,
        "status": args.status,
        "storageDrsEnabled": args.storageDrsEnabled,
        "tags": args.tags,
        "type": args.type,
        "utilizedSpaceThreshold": args.utilizedSpaceThreshold,
        "versionContext": args.versionContext,
        "vmCount": args.vmCount,
        "vmEvacuationAutomationMode": args.vmEvacuationAutomationMode,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareDatastoreCluster.
 */
export interface GetVirtualizationVmwareDatastoreClusterArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetVirtualizationVmwareDatastoreClusterAncestor[];
    automationLevel?: string;
    capacity?: inputs.GetVirtualizationVmwareDatastoreClusterCapacity;
    classId?: string;
    createTime?: string;
    datacenter?: inputs.GetVirtualizationVmwareDatastoreClusterDatacenter;
    datastoreCount?: number;
    domainGroupMoid?: string;
    freeSpaceThreshold?: number;
    hostCount?: number;
    id?: string;
    identity?: string;
    inventoryPath?: string;
    ioLatencyThreshold?: number;
    ioLoadBalanceAutomationMode?: string;
    ioLoadImbalanceThreshold?: number;
    ioMetricsEnabled?: boolean;
    minSpaceUtilizationDifference?: number;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetVirtualizationVmwareDatastoreClusterParent;
    permissionResources?: inputs.GetVirtualizationVmwareDatastoreClusterPermissionResource[];
    policyEnforcementAutomationMode?: string;
    registeredDevice?: inputs.GetVirtualizationVmwareDatastoreClusterRegisteredDevice;
    reservablePercentThreshold?: number;
    ruleEnforcementAutomationMode?: string;
    sharedScope?: string;
    spaceLoadBalanceAutomationMode?: string;
    spaceThresholdMode?: string;
    status?: string;
    storageDrsEnabled?: boolean;
    tags?: inputs.GetVirtualizationVmwareDatastoreClusterTag[];
    type?: string;
    utilizedSpaceThreshold?: number;
    versionContext?: inputs.GetVirtualizationVmwareDatastoreClusterVersionContext;
    vmCount?: number;
    vmEvacuationAutomationMode?: string;
}

/**
 * A collection of values returned by getVirtualizationVmwareDatastoreCluster.
 */
export interface GetVirtualizationVmwareDatastoreClusterResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetVirtualizationVmwareDatastoreClusterAncestor[];
    readonly automationLevel?: string;
    readonly capacity?: outputs.GetVirtualizationVmwareDatastoreClusterCapacity;
    readonly classId?: string;
    readonly createTime?: string;
    readonly datacenter?: outputs.GetVirtualizationVmwareDatastoreClusterDatacenter;
    readonly datastoreCount?: number;
    readonly domainGroupMoid?: string;
    readonly freeSpaceThreshold?: number;
    readonly hostCount?: number;
    readonly id: string;
    readonly identity?: string;
    readonly inventoryPath?: string;
    readonly ioLatencyThreshold?: number;
    readonly ioLoadBalanceAutomationMode?: string;
    readonly ioLoadImbalanceThreshold?: number;
    readonly ioMetricsEnabled?: boolean;
    readonly minSpaceUtilizationDifference?: number;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetVirtualizationVmwareDatastoreClusterParent;
    readonly permissionResources?: outputs.GetVirtualizationVmwareDatastoreClusterPermissionResource[];
    readonly policyEnforcementAutomationMode?: string;
    readonly registeredDevice?: outputs.GetVirtualizationVmwareDatastoreClusterRegisteredDevice;
    readonly reservablePercentThreshold?: number;
    readonly results: outputs.GetVirtualizationVmwareDatastoreClusterResult[];
    readonly ruleEnforcementAutomationMode?: string;
    readonly sharedScope?: string;
    readonly spaceLoadBalanceAutomationMode?: string;
    readonly spaceThresholdMode?: string;
    readonly status?: string;
    readonly storageDrsEnabled?: boolean;
    readonly tags?: outputs.GetVirtualizationVmwareDatastoreClusterTag[];
    readonly type?: string;
    readonly utilizedSpaceThreshold?: number;
    readonly versionContext?: outputs.GetVirtualizationVmwareDatastoreClusterVersionContext;
    readonly vmCount?: number;
    readonly vmEvacuationAutomationMode?: string;
}
export function getVirtualizationVmwareDatastoreClusterOutput(args?: GetVirtualizationVmwareDatastoreClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualizationVmwareDatastoreClusterResult> {
    return pulumi.output(args).apply((a: any) => getVirtualizationVmwareDatastoreCluster(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareDatastoreCluster.
 */
export interface GetVirtualizationVmwareDatastoreClusterOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareDatastoreClusterAncestorArgs>[]>;
    automationLevel?: pulumi.Input<string>;
    capacity?: pulumi.Input<inputs.GetVirtualizationVmwareDatastoreClusterCapacityArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    datacenter?: pulumi.Input<inputs.GetVirtualizationVmwareDatastoreClusterDatacenterArgs>;
    datastoreCount?: pulumi.Input<number>;
    domainGroupMoid?: pulumi.Input<string>;
    freeSpaceThreshold?: pulumi.Input<number>;
    hostCount?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    identity?: pulumi.Input<string>;
    inventoryPath?: pulumi.Input<string>;
    ioLatencyThreshold?: pulumi.Input<number>;
    ioLoadBalanceAutomationMode?: pulumi.Input<string>;
    ioLoadImbalanceThreshold?: pulumi.Input<number>;
    ioMetricsEnabled?: pulumi.Input<boolean>;
    minSpaceUtilizationDifference?: pulumi.Input<number>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetVirtualizationVmwareDatastoreClusterParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareDatastoreClusterPermissionResourceArgs>[]>;
    policyEnforcementAutomationMode?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetVirtualizationVmwareDatastoreClusterRegisteredDeviceArgs>;
    reservablePercentThreshold?: pulumi.Input<number>;
    ruleEnforcementAutomationMode?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    spaceLoadBalanceAutomationMode?: pulumi.Input<string>;
    spaceThresholdMode?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    storageDrsEnabled?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareDatastoreClusterTagArgs>[]>;
    type?: pulumi.Input<string>;
    utilizedSpaceThreshold?: pulumi.Input<number>;
    versionContext?: pulumi.Input<inputs.GetVirtualizationVmwareDatastoreClusterVersionContextArgs>;
    vmCount?: pulumi.Input<number>;
    vmEvacuationAutomationMode?: pulumi.Input<string>;
}
