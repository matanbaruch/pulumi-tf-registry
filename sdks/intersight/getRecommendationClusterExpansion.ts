// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRecommendationClusterExpansion(args?: GetRecommendationClusterExpansionArgs, opts?: pulumi.InvokeOptions): Promise<GetRecommendationClusterExpansionResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getRecommendationClusterExpansion:getRecommendationClusterExpansion", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "clusterName": args.clusterName,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "hardwareExpansionRequest": args.hardwareExpansionRequest,
        "id": args.id,
        "lastUpdatedTime": args.lastUpdatedTime,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "physicalItems": args.physicalItems,
        "registeredDevice": args.registeredDevice,
        "requirementMet": args.requirementMet,
        "sharedScope": args.sharedScope,
        "softwareItems": args.softwareItems,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRecommendationClusterExpansion.
 */
export interface GetRecommendationClusterExpansionArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetRecommendationClusterExpansionAncestor[];
    classId?: string;
    clusterName?: string;
    createTime?: string;
    domainGroupMoid?: string;
    hardwareExpansionRequest?: inputs.GetRecommendationClusterExpansionHardwareExpansionRequest;
    id?: string;
    lastUpdatedTime?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetRecommendationClusterExpansionParent;
    permissionResources?: inputs.GetRecommendationClusterExpansionPermissionResource[];
    physicalItems?: inputs.GetRecommendationClusterExpansionPhysicalItem[];
    registeredDevice?: inputs.GetRecommendationClusterExpansionRegisteredDevice;
    requirementMet?: boolean;
    sharedScope?: string;
    softwareItems?: inputs.GetRecommendationClusterExpansionSoftwareItem[];
    tags?: inputs.GetRecommendationClusterExpansionTag[];
    versionContext?: inputs.GetRecommendationClusterExpansionVersionContext;
}

/**
 * A collection of values returned by getRecommendationClusterExpansion.
 */
export interface GetRecommendationClusterExpansionResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetRecommendationClusterExpansionAncestor[];
    readonly classId?: string;
    readonly clusterName?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly hardwareExpansionRequest?: outputs.GetRecommendationClusterExpansionHardwareExpansionRequest;
    readonly id: string;
    readonly lastUpdatedTime?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetRecommendationClusterExpansionParent;
    readonly permissionResources?: outputs.GetRecommendationClusterExpansionPermissionResource[];
    readonly physicalItems?: outputs.GetRecommendationClusterExpansionPhysicalItem[];
    readonly registeredDevice?: outputs.GetRecommendationClusterExpansionRegisteredDevice;
    readonly requirementMet?: boolean;
    readonly results: outputs.GetRecommendationClusterExpansionResult[];
    readonly sharedScope?: string;
    readonly softwareItems?: outputs.GetRecommendationClusterExpansionSoftwareItem[];
    readonly tags?: outputs.GetRecommendationClusterExpansionTag[];
    readonly versionContext?: outputs.GetRecommendationClusterExpansionVersionContext;
}
export function getRecommendationClusterExpansionOutput(args?: GetRecommendationClusterExpansionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRecommendationClusterExpansionResult> {
    return pulumi.output(args).apply((a: any) => getRecommendationClusterExpansion(a, opts))
}

/**
 * A collection of arguments for invoking getRecommendationClusterExpansion.
 */
export interface GetRecommendationClusterExpansionOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetRecommendationClusterExpansionAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    hardwareExpansionRequest?: pulumi.Input<inputs.GetRecommendationClusterExpansionHardwareExpansionRequestArgs>;
    id?: pulumi.Input<string>;
    lastUpdatedTime?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetRecommendationClusterExpansionParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetRecommendationClusterExpansionPermissionResourceArgs>[]>;
    physicalItems?: pulumi.Input<pulumi.Input<inputs.GetRecommendationClusterExpansionPhysicalItemArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetRecommendationClusterExpansionRegisteredDeviceArgs>;
    requirementMet?: pulumi.Input<boolean>;
    sharedScope?: pulumi.Input<string>;
    softwareItems?: pulumi.Input<pulumi.Input<inputs.GetRecommendationClusterExpansionSoftwareItemArgs>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetRecommendationClusterExpansionTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetRecommendationClusterExpansionVersionContextArgs>;
}
