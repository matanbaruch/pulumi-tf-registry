// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCapabilitySwitchCapability(args?: GetCapabilitySwitchCapabilityArgs, opts?: pulumi.InvokeOptions): Promise<GetCapabilitySwitchCapabilityResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getCapabilitySwitchCapability:getCapabilitySwitchCapability", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "defaultFcoeVlan": args.defaultFcoeVlan,
        "domainGroupMoid": args.domainGroupMoid,
        "dynamicVifsSupported": args.dynamicVifsSupported,
        "fanModulesSupported": args.fanModulesSupported,
        "fcEndHostModeReservedVsans": args.fcEndHostModeReservedVsans,
        "fcUplinkPortsAutoNegotiationSupported": args.fcUplinkPortsAutoNegotiationSupported,
        "id": args.id,
        "immControlsVpcompression": args.immControlsVpcompression,
        "locatorBeaconSupported": args.locatorBeaconSupported,
        "maxPorts": args.maxPorts,
        "maxSlots": args.maxSlots,
        "minVersionMapWithBreakoutSupport": args.minVersionMapWithBreakoutSupport,
        "minVersionMapWithLocatorLedSupport": args.minVersionMapWithLocatorLedSupport,
        "minVersionMapWithNegAuto25gSupport": args.minVersionMapWithNegAuto25gSupport,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "networkLimits": args.networkLimits,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "pid": args.pid,
        "portsSupporting100gSpeeds": args.portsSupporting100gSpeeds,
        "portsSupporting10gSpeeds": args.portsSupporting10gSpeeds,
        "portsSupporting1gSpeeds": args.portsSupporting1gSpeeds,
        "portsSupporting25gSpeeds": args.portsSupporting25gSpeeds,
        "portsSupporting40gSpeeds": args.portsSupporting40gSpeeds,
        "portsSupportingBreakouts": args.portsSupportingBreakouts,
        "portsSupportingFcoes": args.portsSupportingFcoes,
        "portsSupportingServerRoles": args.portsSupportingServerRoles,
        "reservedVsans": args.reservedVsans,
        "serenoNetflowSupported": args.serenoNetflowSupported,
        "serverRoleSupportedOnBreakouts": args.serverRoleSupportedOnBreakouts,
        "sharedScope": args.sharedScope,
        "sku": args.sku,
        "storageLimits": args.storageLimits,
        "switchingModeCapabilities": args.switchingModeCapabilities,
        "systemLimits": args.systemLimits,
        "tags": args.tags,
        "unifiedPorts": args.unifiedPorts,
        "unifiedRule": args.unifiedRule,
        "uplinkAdminPortSpeedNegAuto25GbpsSupported": args.uplinkAdminPortSpeedNegAuto25GbpsSupported,
        "versionContext": args.versionContext,
        "vid": args.vid,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCapabilitySwitchCapability.
 */
export interface GetCapabilitySwitchCapabilityArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetCapabilitySwitchCapabilityAncestor[];
    classId?: string;
    createTime?: string;
    defaultFcoeVlan?: number;
    domainGroupMoid?: string;
    dynamicVifsSupported?: boolean;
    fanModulesSupported?: boolean;
    fcEndHostModeReservedVsans?: inputs.GetCapabilitySwitchCapabilityFcEndHostModeReservedVsan[];
    fcUplinkPortsAutoNegotiationSupported?: boolean;
    id?: string;
    immControlsVpcompression?: boolean;
    locatorBeaconSupported?: boolean;
    maxPorts?: number;
    maxSlots?: number;
    minVersionMapWithBreakoutSupport?: inputs.GetCapabilitySwitchCapabilityMinVersionMapWithBreakoutSupport;
    minVersionMapWithLocatorLedSupport?: inputs.GetCapabilitySwitchCapabilityMinVersionMapWithLocatorLedSupport;
    minVersionMapWithNegAuto25gSupport?: inputs.GetCapabilitySwitchCapabilityMinVersionMapWithNegAuto25gSupport;
    modTime?: string;
    moid?: string;
    name?: string;
    networkLimits?: inputs.GetCapabilitySwitchCapabilityNetworkLimits;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetCapabilitySwitchCapabilityParent;
    permissionResources?: inputs.GetCapabilitySwitchCapabilityPermissionResource[];
    pid?: string;
    portsSupporting100gSpeeds?: inputs.GetCapabilitySwitchCapabilityPortsSupporting100gSpeed[];
    portsSupporting10gSpeeds?: inputs.GetCapabilitySwitchCapabilityPortsSupporting10gSpeed[];
    portsSupporting1gSpeeds?: inputs.GetCapabilitySwitchCapabilityPortsSupporting1gSpeed[];
    portsSupporting25gSpeeds?: inputs.GetCapabilitySwitchCapabilityPortsSupporting25gSpeed[];
    portsSupporting40gSpeeds?: inputs.GetCapabilitySwitchCapabilityPortsSupporting40gSpeed[];
    portsSupportingBreakouts?: inputs.GetCapabilitySwitchCapabilityPortsSupportingBreakout[];
    portsSupportingFcoes?: inputs.GetCapabilitySwitchCapabilityPortsSupportingFco[];
    portsSupportingServerRoles?: inputs.GetCapabilitySwitchCapabilityPortsSupportingServerRole[];
    reservedVsans?: inputs.GetCapabilitySwitchCapabilityReservedVsan[];
    serenoNetflowSupported?: boolean;
    serverRoleSupportedOnBreakouts?: string[];
    sharedScope?: string;
    sku?: string;
    storageLimits?: inputs.GetCapabilitySwitchCapabilityStorageLimits;
    switchingModeCapabilities?: inputs.GetCapabilitySwitchCapabilitySwitchingModeCapability[];
    systemLimits?: inputs.GetCapabilitySwitchCapabilitySystemLimits;
    tags?: inputs.GetCapabilitySwitchCapabilityTag[];
    unifiedPorts?: inputs.GetCapabilitySwitchCapabilityUnifiedPort[];
    unifiedRule?: string;
    uplinkAdminPortSpeedNegAuto25GbpsSupported?: boolean;
    versionContext?: inputs.GetCapabilitySwitchCapabilityVersionContext;
    vid?: string;
}

/**
 * A collection of values returned by getCapabilitySwitchCapability.
 */
export interface GetCapabilitySwitchCapabilityResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetCapabilitySwitchCapabilityAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly defaultFcoeVlan?: number;
    readonly domainGroupMoid?: string;
    readonly dynamicVifsSupported?: boolean;
    readonly fanModulesSupported?: boolean;
    readonly fcEndHostModeReservedVsans?: outputs.GetCapabilitySwitchCapabilityFcEndHostModeReservedVsan[];
    readonly fcUplinkPortsAutoNegotiationSupported?: boolean;
    readonly id: string;
    readonly immControlsVpcompression?: boolean;
    readonly locatorBeaconSupported?: boolean;
    readonly maxPorts?: number;
    readonly maxSlots?: number;
    readonly minVersionMapWithBreakoutSupport?: outputs.GetCapabilitySwitchCapabilityMinVersionMapWithBreakoutSupport;
    readonly minVersionMapWithLocatorLedSupport?: outputs.GetCapabilitySwitchCapabilityMinVersionMapWithLocatorLedSupport;
    readonly minVersionMapWithNegAuto25gSupport?: outputs.GetCapabilitySwitchCapabilityMinVersionMapWithNegAuto25gSupport;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly networkLimits?: outputs.GetCapabilitySwitchCapabilityNetworkLimits;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetCapabilitySwitchCapabilityParent;
    readonly permissionResources?: outputs.GetCapabilitySwitchCapabilityPermissionResource[];
    readonly pid?: string;
    readonly portsSupporting100gSpeeds?: outputs.GetCapabilitySwitchCapabilityPortsSupporting100gSpeed[];
    readonly portsSupporting10gSpeeds?: outputs.GetCapabilitySwitchCapabilityPortsSupporting10gSpeed[];
    readonly portsSupporting1gSpeeds?: outputs.GetCapabilitySwitchCapabilityPortsSupporting1gSpeed[];
    readonly portsSupporting25gSpeeds?: outputs.GetCapabilitySwitchCapabilityPortsSupporting25gSpeed[];
    readonly portsSupporting40gSpeeds?: outputs.GetCapabilitySwitchCapabilityPortsSupporting40gSpeed[];
    readonly portsSupportingBreakouts?: outputs.GetCapabilitySwitchCapabilityPortsSupportingBreakout[];
    readonly portsSupportingFcoes?: outputs.GetCapabilitySwitchCapabilityPortsSupportingFco[];
    readonly portsSupportingServerRoles?: outputs.GetCapabilitySwitchCapabilityPortsSupportingServerRole[];
    readonly reservedVsans?: outputs.GetCapabilitySwitchCapabilityReservedVsan[];
    readonly results: outputs.GetCapabilitySwitchCapabilityResult[];
    readonly serenoNetflowSupported?: boolean;
    readonly serverRoleSupportedOnBreakouts?: string[];
    readonly sharedScope?: string;
    readonly sku?: string;
    readonly storageLimits?: outputs.GetCapabilitySwitchCapabilityStorageLimits;
    readonly switchingModeCapabilities?: outputs.GetCapabilitySwitchCapabilitySwitchingModeCapability[];
    readonly systemLimits?: outputs.GetCapabilitySwitchCapabilitySystemLimits;
    readonly tags?: outputs.GetCapabilitySwitchCapabilityTag[];
    readonly unifiedPorts?: outputs.GetCapabilitySwitchCapabilityUnifiedPort[];
    readonly unifiedRule?: string;
    readonly uplinkAdminPortSpeedNegAuto25GbpsSupported?: boolean;
    readonly versionContext?: outputs.GetCapabilitySwitchCapabilityVersionContext;
    readonly vid?: string;
}
export function getCapabilitySwitchCapabilityOutput(args?: GetCapabilitySwitchCapabilityOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCapabilitySwitchCapabilityResult> {
    return pulumi.output(args).apply((a: any) => getCapabilitySwitchCapability(a, opts))
}

/**
 * A collection of arguments for invoking getCapabilitySwitchCapability.
 */
export interface GetCapabilitySwitchCapabilityOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetCapabilitySwitchCapabilityAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    defaultFcoeVlan?: pulumi.Input<number>;
    domainGroupMoid?: pulumi.Input<string>;
    dynamicVifsSupported?: pulumi.Input<boolean>;
    fanModulesSupported?: pulumi.Input<boolean>;
    fcEndHostModeReservedVsans?: pulumi.Input<pulumi.Input<inputs.GetCapabilitySwitchCapabilityFcEndHostModeReservedVsanArgs>[]>;
    fcUplinkPortsAutoNegotiationSupported?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    immControlsVpcompression?: pulumi.Input<boolean>;
    locatorBeaconSupported?: pulumi.Input<boolean>;
    maxPorts?: pulumi.Input<number>;
    maxSlots?: pulumi.Input<number>;
    minVersionMapWithBreakoutSupport?: pulumi.Input<inputs.GetCapabilitySwitchCapabilityMinVersionMapWithBreakoutSupportArgs>;
    minVersionMapWithLocatorLedSupport?: pulumi.Input<inputs.GetCapabilitySwitchCapabilityMinVersionMapWithLocatorLedSupportArgs>;
    minVersionMapWithNegAuto25gSupport?: pulumi.Input<inputs.GetCapabilitySwitchCapabilityMinVersionMapWithNegAuto25gSupportArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkLimits?: pulumi.Input<inputs.GetCapabilitySwitchCapabilityNetworkLimitsArgs>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetCapabilitySwitchCapabilityParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetCapabilitySwitchCapabilityPermissionResourceArgs>[]>;
    pid?: pulumi.Input<string>;
    portsSupporting100gSpeeds?: pulumi.Input<pulumi.Input<inputs.GetCapabilitySwitchCapabilityPortsSupporting100gSpeedArgs>[]>;
    portsSupporting10gSpeeds?: pulumi.Input<pulumi.Input<inputs.GetCapabilitySwitchCapabilityPortsSupporting10gSpeedArgs>[]>;
    portsSupporting1gSpeeds?: pulumi.Input<pulumi.Input<inputs.GetCapabilitySwitchCapabilityPortsSupporting1gSpeedArgs>[]>;
    portsSupporting25gSpeeds?: pulumi.Input<pulumi.Input<inputs.GetCapabilitySwitchCapabilityPortsSupporting25gSpeedArgs>[]>;
    portsSupporting40gSpeeds?: pulumi.Input<pulumi.Input<inputs.GetCapabilitySwitchCapabilityPortsSupporting40gSpeedArgs>[]>;
    portsSupportingBreakouts?: pulumi.Input<pulumi.Input<inputs.GetCapabilitySwitchCapabilityPortsSupportingBreakoutArgs>[]>;
    portsSupportingFcoes?: pulumi.Input<pulumi.Input<inputs.GetCapabilitySwitchCapabilityPortsSupportingFcoArgs>[]>;
    portsSupportingServerRoles?: pulumi.Input<pulumi.Input<inputs.GetCapabilitySwitchCapabilityPortsSupportingServerRoleArgs>[]>;
    reservedVsans?: pulumi.Input<pulumi.Input<inputs.GetCapabilitySwitchCapabilityReservedVsanArgs>[]>;
    serenoNetflowSupported?: pulumi.Input<boolean>;
    serverRoleSupportedOnBreakouts?: pulumi.Input<pulumi.Input<string>[]>;
    sharedScope?: pulumi.Input<string>;
    sku?: pulumi.Input<string>;
    storageLimits?: pulumi.Input<inputs.GetCapabilitySwitchCapabilityStorageLimitsArgs>;
    switchingModeCapabilities?: pulumi.Input<pulumi.Input<inputs.GetCapabilitySwitchCapabilitySwitchingModeCapabilityArgs>[]>;
    systemLimits?: pulumi.Input<inputs.GetCapabilitySwitchCapabilitySystemLimitsArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetCapabilitySwitchCapabilityTagArgs>[]>;
    unifiedPorts?: pulumi.Input<pulumi.Input<inputs.GetCapabilitySwitchCapabilityUnifiedPortArgs>[]>;
    unifiedRule?: pulumi.Input<string>;
    uplinkAdminPortSpeedNegAuto25GbpsSupported?: pulumi.Input<boolean>;
    versionContext?: pulumi.Input<inputs.GetCapabilitySwitchCapabilityVersionContextArgs>;
    vid?: pulumi.Input<string>;
}
