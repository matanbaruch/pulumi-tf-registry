// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageEnclosure(args?: GetStorageEnclosureArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageEnclosureResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageEnclosure:getStorageEnclosure", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "chassisId": args.chassisId,
        "classId": args.classId,
        "computeBlade": args.computeBlade,
        "computeRackUnit": args.computeRackUnit,
        "createTime": args.createTime,
        "description": args.description,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "enclosureDiskSlots": args.enclosureDiskSlots,
        "enclosureDisks": args.enclosureDisks,
        "enclosureId": args.enclosureId,
        "equipmentChassis": args.equipmentChassis,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "isUpgraded": args.isUpgraded,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "numSlots": args.numSlots,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "physicalDisks": args.physicalDisks,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "registeredDevice": args.registeredDevice,
        "revision": args.revision,
        "rn": args.rn,
        "serial": args.serial,
        "serverId": args.serverId,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "type": args.type,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageEnclosure.
 */
export interface GetStorageEnclosureArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageEnclosureAncestor[];
    chassisId?: number;
    classId?: string;
    computeBlade?: inputs.GetStorageEnclosureComputeBlade;
    computeRackUnit?: inputs.GetStorageEnclosureComputeRackUnit;
    createTime?: string;
    description?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    enclosureDiskSlots?: inputs.GetStorageEnclosureEnclosureDiskSlot[];
    enclosureDisks?: inputs.GetStorageEnclosureEnclosureDisk[];
    enclosureId?: number;
    equipmentChassis?: inputs.GetStorageEnclosureEquipmentChassis;
    id?: string;
    inventoryDeviceInfo?: inputs.GetStorageEnclosureInventoryDeviceInfo;
    isUpgraded?: boolean;
    modTime?: string;
    model?: string;
    moid?: string;
    numSlots?: number;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageEnclosureParent;
    permissionResources?: inputs.GetStorageEnclosurePermissionResource[];
    physicalDisks?: inputs.GetStorageEnclosurePhysicalDisk[];
    presence?: string;
    previousFru?: inputs.GetStorageEnclosurePreviousFru;
    registeredDevice?: inputs.GetStorageEnclosureRegisteredDevice;
    revision?: string;
    rn?: string;
    serial?: string;
    serverId?: number;
    sharedScope?: string;
    tags?: inputs.GetStorageEnclosureTag[];
    type?: string;
    vendor?: string;
    versionContext?: inputs.GetStorageEnclosureVersionContext;
}

/**
 * A collection of values returned by getStorageEnclosure.
 */
export interface GetStorageEnclosureResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageEnclosureAncestor[];
    readonly chassisId?: number;
    readonly classId?: string;
    readonly computeBlade?: outputs.GetStorageEnclosureComputeBlade;
    readonly computeRackUnit?: outputs.GetStorageEnclosureComputeRackUnit;
    readonly createTime?: string;
    readonly description?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly enclosureDiskSlots?: outputs.GetStorageEnclosureEnclosureDiskSlot[];
    readonly enclosureDisks?: outputs.GetStorageEnclosureEnclosureDisk[];
    readonly enclosureId?: number;
    readonly equipmentChassis?: outputs.GetStorageEnclosureEquipmentChassis;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetStorageEnclosureInventoryDeviceInfo;
    readonly isUpgraded?: boolean;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly numSlots?: number;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageEnclosureParent;
    readonly permissionResources?: outputs.GetStorageEnclosurePermissionResource[];
    readonly physicalDisks?: outputs.GetStorageEnclosurePhysicalDisk[];
    readonly presence?: string;
    readonly previousFru?: outputs.GetStorageEnclosurePreviousFru;
    readonly registeredDevice?: outputs.GetStorageEnclosureRegisteredDevice;
    readonly results: outputs.GetStorageEnclosureResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly serial?: string;
    readonly serverId?: number;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetStorageEnclosureTag[];
    readonly type?: string;
    readonly vendor?: string;
    readonly versionContext?: outputs.GetStorageEnclosureVersionContext;
}
export function getStorageEnclosureOutput(args?: GetStorageEnclosureOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageEnclosureResult> {
    return pulumi.output(args).apply((a: any) => getStorageEnclosure(a, opts))
}

/**
 * A collection of arguments for invoking getStorageEnclosure.
 */
export interface GetStorageEnclosureOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageEnclosureAncestorArgs>[]>;
    chassisId?: pulumi.Input<number>;
    classId?: pulumi.Input<string>;
    computeBlade?: pulumi.Input<inputs.GetStorageEnclosureComputeBladeArgs>;
    computeRackUnit?: pulumi.Input<inputs.GetStorageEnclosureComputeRackUnitArgs>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    enclosureDiskSlots?: pulumi.Input<pulumi.Input<inputs.GetStorageEnclosureEnclosureDiskSlotArgs>[]>;
    enclosureDisks?: pulumi.Input<pulumi.Input<inputs.GetStorageEnclosureEnclosureDiskArgs>[]>;
    enclosureId?: pulumi.Input<number>;
    equipmentChassis?: pulumi.Input<inputs.GetStorageEnclosureEquipmentChassisArgs>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetStorageEnclosureInventoryDeviceInfoArgs>;
    isUpgraded?: pulumi.Input<boolean>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    numSlots?: pulumi.Input<number>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageEnclosureParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageEnclosurePermissionResourceArgs>[]>;
    physicalDisks?: pulumi.Input<pulumi.Input<inputs.GetStorageEnclosurePhysicalDiskArgs>[]>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetStorageEnclosurePreviousFruArgs>;
    registeredDevice?: pulumi.Input<inputs.GetStorageEnclosureRegisteredDeviceArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    serverId?: pulumi.Input<number>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageEnclosureTagArgs>[]>;
    type?: pulumi.Input<string>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetStorageEnclosureVersionContextArgs>;
}
