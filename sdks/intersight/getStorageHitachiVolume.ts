// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageHitachiVolume(args?: GetStorageHitachiVolumeArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageHitachiVolumeResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageHitachiVolume:getStorageHitachiVolume", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "array": args.array,
        "attributes": args.attributes,
        "classId": args.classId,
        "clprId": args.clprId,
        "createTime": args.createTime,
        "dataReductionMode": args.dataReductionMode,
        "dataReductionStatus": args.dataReductionStatus,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "driveType": args.driveType,
        "emulationType": args.emulationType,
        "id": args.id,
        "isFullAllocationEnabled": args.isFullAllocationEnabled,
        "label": args.label,
        "modTime": args.modTime,
        "moid": args.moid,
        "naaId": args.naaId,
        "name": args.name,
        "namespaceId": args.namespaceId,
        "numOfPaths": args.numOfPaths,
        "nvmSubsystemId": args.nvmSubsystemId,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "parityGroupIds": args.parityGroupIds,
        "parityGroups": args.parityGroups,
        "permissionResources": args.permissionResources,
        "pool": args.pool,
        "poolId": args.poolId,
        "raidLevel": args.raidLevel,
        "raidType": args.raidType,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "size": args.size,
        "status": args.status,
        "storageUtilization": args.storageUtilization,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageHitachiVolume.
 */
export interface GetStorageHitachiVolumeArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageHitachiVolumeAncestor[];
    array?: inputs.GetStorageHitachiVolumeArray;
    attributes?: string[];
    classId?: string;
    clprId?: number;
    createTime?: string;
    dataReductionMode?: string;
    dataReductionStatus?: string;
    description?: string;
    domainGroupMoid?: string;
    driveType?: string;
    emulationType?: string;
    id?: string;
    isFullAllocationEnabled?: boolean;
    label?: string;
    modTime?: string;
    moid?: string;
    naaId?: string;
    name?: string;
    namespaceId?: string;
    numOfPaths?: number;
    nvmSubsystemId?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageHitachiVolumeParent;
    parityGroupIds?: string[];
    parityGroups?: inputs.GetStorageHitachiVolumeParityGroup[];
    permissionResources?: inputs.GetStorageHitachiVolumePermissionResource[];
    pool?: inputs.GetStorageHitachiVolumePool;
    poolId?: string;
    raidLevel?: string;
    raidType?: string;
    registeredDevice?: inputs.GetStorageHitachiVolumeRegisteredDevice;
    sharedScope?: string;
    size?: number;
    status?: string;
    storageUtilization?: inputs.GetStorageHitachiVolumeStorageUtilization;
    tags?: inputs.GetStorageHitachiVolumeTag[];
    versionContext?: inputs.GetStorageHitachiVolumeVersionContext;
}

/**
 * A collection of values returned by getStorageHitachiVolume.
 */
export interface GetStorageHitachiVolumeResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageHitachiVolumeAncestor[];
    readonly array?: outputs.GetStorageHitachiVolumeArray;
    readonly attributes?: string[];
    readonly classId?: string;
    readonly clprId?: number;
    readonly createTime?: string;
    readonly dataReductionMode?: string;
    readonly dataReductionStatus?: string;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly driveType?: string;
    readonly emulationType?: string;
    readonly id: string;
    readonly isFullAllocationEnabled?: boolean;
    readonly label?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly naaId?: string;
    readonly name?: string;
    readonly namespaceId?: string;
    readonly numOfPaths?: number;
    readonly nvmSubsystemId?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageHitachiVolumeParent;
    readonly parityGroupIds?: string[];
    readonly parityGroups?: outputs.GetStorageHitachiVolumeParityGroup[];
    readonly permissionResources?: outputs.GetStorageHitachiVolumePermissionResource[];
    readonly pool?: outputs.GetStorageHitachiVolumePool;
    readonly poolId?: string;
    readonly raidLevel?: string;
    readonly raidType?: string;
    readonly registeredDevice?: outputs.GetStorageHitachiVolumeRegisteredDevice;
    readonly results: outputs.GetStorageHitachiVolumeResult[];
    readonly sharedScope?: string;
    readonly size?: number;
    readonly status?: string;
    readonly storageUtilization?: outputs.GetStorageHitachiVolumeStorageUtilization;
    readonly tags?: outputs.GetStorageHitachiVolumeTag[];
    readonly versionContext?: outputs.GetStorageHitachiVolumeVersionContext;
}
export function getStorageHitachiVolumeOutput(args?: GetStorageHitachiVolumeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageHitachiVolumeResult> {
    return pulumi.output(args).apply((a: any) => getStorageHitachiVolume(a, opts))
}

/**
 * A collection of arguments for invoking getStorageHitachiVolume.
 */
export interface GetStorageHitachiVolumeOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiVolumeAncestorArgs>[]>;
    array?: pulumi.Input<inputs.GetStorageHitachiVolumeArrayArgs>;
    attributes?: pulumi.Input<pulumi.Input<string>[]>;
    classId?: pulumi.Input<string>;
    clprId?: pulumi.Input<number>;
    createTime?: pulumi.Input<string>;
    dataReductionMode?: pulumi.Input<string>;
    dataReductionStatus?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    driveType?: pulumi.Input<string>;
    emulationType?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    isFullAllocationEnabled?: pulumi.Input<boolean>;
    label?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    naaId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namespaceId?: pulumi.Input<string>;
    numOfPaths?: pulumi.Input<number>;
    nvmSubsystemId?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageHitachiVolumeParentArgs>;
    parityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    parityGroups?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiVolumeParityGroupArgs>[]>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiVolumePermissionResourceArgs>[]>;
    pool?: pulumi.Input<inputs.GetStorageHitachiVolumePoolArgs>;
    poolId?: pulumi.Input<string>;
    raidLevel?: pulumi.Input<string>;
    raidType?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetStorageHitachiVolumeRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    storageUtilization?: pulumi.Input<inputs.GetStorageHitachiVolumeStorageUtilizationArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiVolumeTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetStorageHitachiVolumeVersionContextArgs>;
}
