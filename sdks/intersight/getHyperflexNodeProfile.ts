// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getHyperflexNodeProfile(args?: GetHyperflexNodeProfileArgs, opts?: pulumi.InvokeOptions): Promise<GetHyperflexNodeProfileResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getHyperflexNodeProfile:getHyperflexNodeProfile", {
        "accountMoid": args.accountMoid,
        "action": args.action,
        "actionParams": args.actionParams,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "assignedServer": args.assignedServer,
        "classId": args.classId,
        "clusterProfile": args.clusterProfile,
        "configContext": args.configContext,
        "createTime": args.createTime,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "hxdpDataIp": args.hxdpDataIp,
        "hxdpMgmtIp": args.hxdpMgmtIp,
        "hxdpStorageClientIp": args.hxdpStorageClientIp,
        "hypervisorControlIp": args.hypervisorControlIp,
        "hypervisorDataIp": args.hypervisorDataIp,
        "hypervisorMgmtIp": args.hypervisorMgmtIp,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "node": args.node,
        "nodeRole": args.nodeRole,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "policyBuckets": args.policyBuckets,
        "scheduledActions": args.scheduledActions,
        "sharedScope": args.sharedScope,
        "srcTemplate": args.srcTemplate,
        "tags": args.tags,
        "type": args.type,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getHyperflexNodeProfile.
 */
export interface GetHyperflexNodeProfileArgs {
    accountMoid?: string;
    action?: string;
    actionParams?: inputs.GetHyperflexNodeProfileActionParam[];
    additionalProperties?: string;
    ancestors?: inputs.GetHyperflexNodeProfileAncestor[];
    assignedServer?: inputs.GetHyperflexNodeProfileAssignedServer;
    classId?: string;
    clusterProfile?: inputs.GetHyperflexNodeProfileClusterProfile;
    configContext?: inputs.GetHyperflexNodeProfileConfigContext;
    createTime?: string;
    description?: string;
    domainGroupMoid?: string;
    hxdpDataIp?: string;
    hxdpMgmtIp?: string;
    hxdpStorageClientIp?: string;
    hypervisorControlIp?: string;
    hypervisorDataIp?: string;
    hypervisorMgmtIp?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    node?: inputs.GetHyperflexNodeProfileNode;
    nodeRole?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetHyperflexNodeProfileParent;
    permissionResources?: inputs.GetHyperflexNodeProfilePermissionResource[];
    policyBuckets?: inputs.GetHyperflexNodeProfilePolicyBucket[];
    scheduledActions?: inputs.GetHyperflexNodeProfileScheduledAction[];
    sharedScope?: string;
    srcTemplate?: inputs.GetHyperflexNodeProfileSrcTemplate;
    tags?: inputs.GetHyperflexNodeProfileTag[];
    type?: string;
    versionContext?: inputs.GetHyperflexNodeProfileVersionContext;
}

/**
 * A collection of values returned by getHyperflexNodeProfile.
 */
export interface GetHyperflexNodeProfileResult {
    readonly accountMoid?: string;
    readonly action?: string;
    readonly actionParams?: outputs.GetHyperflexNodeProfileActionParam[];
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetHyperflexNodeProfileAncestor[];
    readonly assignedServer?: outputs.GetHyperflexNodeProfileAssignedServer;
    readonly classId?: string;
    readonly clusterProfile?: outputs.GetHyperflexNodeProfileClusterProfile;
    readonly configContext?: outputs.GetHyperflexNodeProfileConfigContext;
    readonly createTime?: string;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly hxdpDataIp?: string;
    readonly hxdpMgmtIp?: string;
    readonly hxdpStorageClientIp?: string;
    readonly hypervisorControlIp?: string;
    readonly hypervisorDataIp?: string;
    readonly hypervisorMgmtIp?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly node?: outputs.GetHyperflexNodeProfileNode;
    readonly nodeRole?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetHyperflexNodeProfileParent;
    readonly permissionResources?: outputs.GetHyperflexNodeProfilePermissionResource[];
    readonly policyBuckets?: outputs.GetHyperflexNodeProfilePolicyBucket[];
    readonly results: outputs.GetHyperflexNodeProfileResult[];
    readonly scheduledActions?: outputs.GetHyperflexNodeProfileScheduledAction[];
    readonly sharedScope?: string;
    readonly srcTemplate?: outputs.GetHyperflexNodeProfileSrcTemplate;
    readonly tags?: outputs.GetHyperflexNodeProfileTag[];
    readonly type?: string;
    readonly versionContext?: outputs.GetHyperflexNodeProfileVersionContext;
}
export function getHyperflexNodeProfileOutput(args?: GetHyperflexNodeProfileOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetHyperflexNodeProfileResult> {
    return pulumi.output(args).apply((a: any) => getHyperflexNodeProfile(a, opts))
}

/**
 * A collection of arguments for invoking getHyperflexNodeProfile.
 */
export interface GetHyperflexNodeProfileOutputArgs {
    accountMoid?: pulumi.Input<string>;
    action?: pulumi.Input<string>;
    actionParams?: pulumi.Input<pulumi.Input<inputs.GetHyperflexNodeProfileActionParamArgs>[]>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetHyperflexNodeProfileAncestorArgs>[]>;
    assignedServer?: pulumi.Input<inputs.GetHyperflexNodeProfileAssignedServerArgs>;
    classId?: pulumi.Input<string>;
    clusterProfile?: pulumi.Input<inputs.GetHyperflexNodeProfileClusterProfileArgs>;
    configContext?: pulumi.Input<inputs.GetHyperflexNodeProfileConfigContextArgs>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    hxdpDataIp?: pulumi.Input<string>;
    hxdpMgmtIp?: pulumi.Input<string>;
    hxdpStorageClientIp?: pulumi.Input<string>;
    hypervisorControlIp?: pulumi.Input<string>;
    hypervisorDataIp?: pulumi.Input<string>;
    hypervisorMgmtIp?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    node?: pulumi.Input<inputs.GetHyperflexNodeProfileNodeArgs>;
    nodeRole?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetHyperflexNodeProfileParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetHyperflexNodeProfilePermissionResourceArgs>[]>;
    policyBuckets?: pulumi.Input<pulumi.Input<inputs.GetHyperflexNodeProfilePolicyBucketArgs>[]>;
    scheduledActions?: pulumi.Input<pulumi.Input<inputs.GetHyperflexNodeProfileScheduledActionArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    srcTemplate?: pulumi.Input<inputs.GetHyperflexNodeProfileSrcTemplateArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetHyperflexNodeProfileTagArgs>[]>;
    type?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetHyperflexNodeProfileVersionContextArgs>;
}
