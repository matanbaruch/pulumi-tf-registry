// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getFcpoolPool(args?: GetFcpoolPoolArgs, opts?: pulumi.InvokeOptions): Promise<GetFcpoolPoolResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getFcpoolPool:getFcpoolPool", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "assigned": args.assigned,
        "assignmentOrder": args.assignmentOrder,
        "blockHeads": args.blockHeads,
        "classId": args.classId,
        "createTime": args.createTime,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "idBlocks": args.idBlocks,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "organization": args.organization,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "poolPurpose": args.poolPurpose,
        "reservations": args.reservations,
        "reserved": args.reserved,
        "sharedScope": args.sharedScope,
        "size": args.size,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFcpoolPool.
 */
export interface GetFcpoolPoolArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetFcpoolPoolAncestor[];
    assigned?: number;
    assignmentOrder?: string;
    blockHeads?: inputs.GetFcpoolPoolBlockHead[];
    classId?: string;
    createTime?: string;
    description?: string;
    domainGroupMoid?: string;
    id?: string;
    idBlocks?: inputs.GetFcpoolPoolIdBlock[];
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    organization?: inputs.GetFcpoolPoolOrganization;
    owners?: string[];
    parent?: inputs.GetFcpoolPoolParent;
    permissionResources?: inputs.GetFcpoolPoolPermissionResource[];
    poolPurpose?: string;
    reservations?: inputs.GetFcpoolPoolReservation[];
    reserved?: number;
    sharedScope?: string;
    size?: number;
    tags?: inputs.GetFcpoolPoolTag[];
    versionContext?: inputs.GetFcpoolPoolVersionContext;
}

/**
 * A collection of values returned by getFcpoolPool.
 */
export interface GetFcpoolPoolResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetFcpoolPoolAncestor[];
    readonly assigned?: number;
    readonly assignmentOrder?: string;
    readonly blockHeads?: outputs.GetFcpoolPoolBlockHead[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly idBlocks?: outputs.GetFcpoolPoolIdBlock[];
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly organization?: outputs.GetFcpoolPoolOrganization;
    readonly owners?: string[];
    readonly parent?: outputs.GetFcpoolPoolParent;
    readonly permissionResources?: outputs.GetFcpoolPoolPermissionResource[];
    readonly poolPurpose?: string;
    readonly reservations?: outputs.GetFcpoolPoolReservation[];
    readonly reserved?: number;
    readonly results: outputs.GetFcpoolPoolResult[];
    readonly sharedScope?: string;
    readonly size?: number;
    readonly tags?: outputs.GetFcpoolPoolTag[];
    readonly versionContext?: outputs.GetFcpoolPoolVersionContext;
}
export function getFcpoolPoolOutput(args?: GetFcpoolPoolOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFcpoolPoolResult> {
    return pulumi.output(args).apply((a: any) => getFcpoolPool(a, opts))
}

/**
 * A collection of arguments for invoking getFcpoolPool.
 */
export interface GetFcpoolPoolOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetFcpoolPoolAncestorArgs>[]>;
    assigned?: pulumi.Input<number>;
    assignmentOrder?: pulumi.Input<string>;
    blockHeads?: pulumi.Input<pulumi.Input<inputs.GetFcpoolPoolBlockHeadArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    idBlocks?: pulumi.Input<pulumi.Input<inputs.GetFcpoolPoolIdBlockArgs>[]>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.GetFcpoolPoolOrganizationArgs>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetFcpoolPoolParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetFcpoolPoolPermissionResourceArgs>[]>;
    poolPurpose?: pulumi.Input<string>;
    reservations?: pulumi.Input<pulumi.Input<inputs.GetFcpoolPoolReservationArgs>[]>;
    reserved?: pulumi.Input<number>;
    sharedScope?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetFcpoolPoolTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetFcpoolPoolVersionContextArgs>;
}
