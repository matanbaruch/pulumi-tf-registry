// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageHitachiVolumeMigrationPair(args?: GetStorageHitachiVolumeMigrationPairArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageHitachiVolumeMigrationPairResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageHitachiVolumeMigrationPair:getStorageHitachiVolumeMigrationPair", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "array": args.array,
        "classId": args.classId,
        "copyMode": args.copyMode,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "localCloneCopypairId": args.localCloneCopypairId,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "pvolLdevId": args.pvolLdevId,
        "pvolStatus": args.pvolStatus,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "svolLdevId": args.svolLdevId,
        "svolStatus": args.svolStatus,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageHitachiVolumeMigrationPair.
 */
export interface GetStorageHitachiVolumeMigrationPairArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageHitachiVolumeMigrationPairAncestor[];
    array?: inputs.GetStorageHitachiVolumeMigrationPairArray;
    classId?: string;
    copyMode?: string;
    createTime?: string;
    domainGroupMoid?: string;
    id?: string;
    localCloneCopypairId?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageHitachiVolumeMigrationPairParent;
    permissionResources?: inputs.GetStorageHitachiVolumeMigrationPairPermissionResource[];
    pvolLdevId?: number;
    pvolStatus?: string;
    registeredDevice?: inputs.GetStorageHitachiVolumeMigrationPairRegisteredDevice;
    sharedScope?: string;
    svolLdevId?: number;
    svolStatus?: string;
    tags?: inputs.GetStorageHitachiVolumeMigrationPairTag[];
    versionContext?: inputs.GetStorageHitachiVolumeMigrationPairVersionContext;
}

/**
 * A collection of values returned by getStorageHitachiVolumeMigrationPair.
 */
export interface GetStorageHitachiVolumeMigrationPairResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageHitachiVolumeMigrationPairAncestor[];
    readonly array?: outputs.GetStorageHitachiVolumeMigrationPairArray;
    readonly classId?: string;
    readonly copyMode?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly localCloneCopypairId?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageHitachiVolumeMigrationPairParent;
    readonly permissionResources?: outputs.GetStorageHitachiVolumeMigrationPairPermissionResource[];
    readonly pvolLdevId?: number;
    readonly pvolStatus?: string;
    readonly registeredDevice?: outputs.GetStorageHitachiVolumeMigrationPairRegisteredDevice;
    readonly results: outputs.GetStorageHitachiVolumeMigrationPairResult[];
    readonly sharedScope?: string;
    readonly svolLdevId?: number;
    readonly svolStatus?: string;
    readonly tags?: outputs.GetStorageHitachiVolumeMigrationPairTag[];
    readonly versionContext?: outputs.GetStorageHitachiVolumeMigrationPairVersionContext;
}
export function getStorageHitachiVolumeMigrationPairOutput(args?: GetStorageHitachiVolumeMigrationPairOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageHitachiVolumeMigrationPairResult> {
    return pulumi.output(args).apply((a: any) => getStorageHitachiVolumeMigrationPair(a, opts))
}

/**
 * A collection of arguments for invoking getStorageHitachiVolumeMigrationPair.
 */
export interface GetStorageHitachiVolumeMigrationPairOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiVolumeMigrationPairAncestorArgs>[]>;
    array?: pulumi.Input<inputs.GetStorageHitachiVolumeMigrationPairArrayArgs>;
    classId?: pulumi.Input<string>;
    copyMode?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    localCloneCopypairId?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageHitachiVolumeMigrationPairParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiVolumeMigrationPairPermissionResourceArgs>[]>;
    pvolLdevId?: pulumi.Input<number>;
    pvolStatus?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetStorageHitachiVolumeMigrationPairRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    svolLdevId?: pulumi.Input<number>;
    svolStatus?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiVolumeMigrationPairTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetStorageHitachiVolumeMigrationPairVersionContextArgs>;
}
