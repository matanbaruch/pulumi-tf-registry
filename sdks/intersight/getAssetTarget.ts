// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAssetTarget(args?: GetAssetTargetArgs, opts?: pulumi.InvokeOptions): Promise<GetAssetTargetResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getAssetTarget:getAssetTarget", {
        "account": args.account,
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "alarmSummary": args.alarmSummary,
        "ancestors": args.ancestors,
        "assist": args.assist,
        "claimedByUserName": args.claimedByUserName,
        "classId": args.classId,
        "connections": args.connections,
        "connectorVersion": args.connectorVersion,
        "createTime": args.createTime,
        "customPermissionResources": args.customPermissionResources,
        "domainGroupMoid": args.domainGroupMoid,
        "externalIpAddress": args.externalIpAddress,
        "id": args.id,
        "ipAddresses": args.ipAddresses,
        "managementLocation": args.managementLocation,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "productIds": args.productIds,
        "readOnly": args.readOnly,
        "registeredDevice": args.registeredDevice,
        "services": args.services,
        "sharedScope": args.sharedScope,
        "status": args.status,
        "statusErrorReason": args.statusErrorReason,
        "tags": args.tags,
        "targetIds": args.targetIds,
        "targetType": args.targetType,
        "trustPoint": args.trustPoint,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
        "workflowInfo": args.workflowInfo,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAssetTarget.
 */
export interface GetAssetTargetArgs {
    account?: inputs.GetAssetTargetAccount;
    accountMoid?: string;
    additionalProperties?: string;
    alarmSummary?: inputs.GetAssetTargetAlarmSummary;
    ancestors?: inputs.GetAssetTargetAncestor[];
    assist?: inputs.GetAssetTargetAssist;
    claimedByUserName?: string;
    classId?: string;
    connections?: inputs.GetAssetTargetConnection[];
    connectorVersion?: string;
    createTime?: string;
    customPermissionResources?: inputs.GetAssetTargetCustomPermissionResource[];
    domainGroupMoid?: string;
    externalIpAddress?: string;
    id?: string;
    ipAddresses?: string[];
    managementLocation?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetAssetTargetParent;
    permissionResources?: inputs.GetAssetTargetPermissionResource[];
    productIds?: string[];
    readOnly?: boolean;
    registeredDevice?: inputs.GetAssetTargetRegisteredDevice;
    services?: inputs.GetAssetTargetService[];
    sharedScope?: string;
    status?: string;
    statusErrorReason?: string;
    tags?: inputs.GetAssetTargetTag[];
    targetIds?: string[];
    targetType?: string;
    trustPoint?: inputs.GetAssetTargetTrustPoint;
    vendor?: string;
    versionContext?: inputs.GetAssetTargetVersionContext;
    workflowInfo?: inputs.GetAssetTargetWorkflowInfo;
}

/**
 * A collection of values returned by getAssetTarget.
 */
export interface GetAssetTargetResult {
    readonly account?: outputs.GetAssetTargetAccount;
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly alarmSummary?: outputs.GetAssetTargetAlarmSummary;
    readonly ancestors?: outputs.GetAssetTargetAncestor[];
    readonly assist?: outputs.GetAssetTargetAssist;
    readonly claimedByUserName?: string;
    readonly classId?: string;
    readonly connections?: outputs.GetAssetTargetConnection[];
    readonly connectorVersion?: string;
    readonly createTime?: string;
    readonly customPermissionResources?: outputs.GetAssetTargetCustomPermissionResource[];
    readonly domainGroupMoid?: string;
    readonly externalIpAddress?: string;
    readonly id: string;
    readonly ipAddresses?: string[];
    readonly managementLocation?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetAssetTargetParent;
    readonly permissionResources?: outputs.GetAssetTargetPermissionResource[];
    readonly productIds?: string[];
    readonly readOnly?: boolean;
    readonly registeredDevice?: outputs.GetAssetTargetRegisteredDevice;
    readonly results: outputs.GetAssetTargetResult[];
    readonly services?: outputs.GetAssetTargetService[];
    readonly sharedScope?: string;
    readonly status?: string;
    readonly statusErrorReason?: string;
    readonly tags?: outputs.GetAssetTargetTag[];
    readonly targetIds?: string[];
    readonly targetType?: string;
    readonly trustPoint?: outputs.GetAssetTargetTrustPoint;
    readonly vendor?: string;
    readonly versionContext?: outputs.GetAssetTargetVersionContext;
    readonly workflowInfo?: outputs.GetAssetTargetWorkflowInfo;
}
export function getAssetTargetOutput(args?: GetAssetTargetOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAssetTargetResult> {
    return pulumi.output(args).apply((a: any) => getAssetTarget(a, opts))
}

/**
 * A collection of arguments for invoking getAssetTarget.
 */
export interface GetAssetTargetOutputArgs {
    account?: pulumi.Input<inputs.GetAssetTargetAccountArgs>;
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    alarmSummary?: pulumi.Input<inputs.GetAssetTargetAlarmSummaryArgs>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetAssetTargetAncestorArgs>[]>;
    assist?: pulumi.Input<inputs.GetAssetTargetAssistArgs>;
    claimedByUserName?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    connections?: pulumi.Input<pulumi.Input<inputs.GetAssetTargetConnectionArgs>[]>;
    connectorVersion?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    customPermissionResources?: pulumi.Input<pulumi.Input<inputs.GetAssetTargetCustomPermissionResourceArgs>[]>;
    domainGroupMoid?: pulumi.Input<string>;
    externalIpAddress?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    managementLocation?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetAssetTargetParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetAssetTargetPermissionResourceArgs>[]>;
    productIds?: pulumi.Input<pulumi.Input<string>[]>;
    readOnly?: pulumi.Input<boolean>;
    registeredDevice?: pulumi.Input<inputs.GetAssetTargetRegisteredDeviceArgs>;
    services?: pulumi.Input<pulumi.Input<inputs.GetAssetTargetServiceArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    statusErrorReason?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetAssetTargetTagArgs>[]>;
    targetIds?: pulumi.Input<pulumi.Input<string>[]>;
    targetType?: pulumi.Input<string>;
    trustPoint?: pulumi.Input<inputs.GetAssetTargetTrustPointArgs>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetAssetTargetVersionContextArgs>;
    workflowInfo?: pulumi.Input<inputs.GetAssetTargetWorkflowInfoArgs>;
}
