// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIaasUcsdInfo(args?: GetIaasUcsdInfoArgs, opts?: pulumi.InvokeOptions): Promise<GetIaasUcsdInfoResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getIaasUcsdInfo:getIaasUcsdInfo", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "connectorPacks": args.connectorPacks,
        "createTime": args.createTime,
        "customTaskInfos": args.customTaskInfos,
        "deviceId": args.deviceId,
        "deviceStatuses": args.deviceStatuses,
        "domainGroupMoid": args.domainGroupMoid,
        "guid": args.guid,
        "hostName": args.hostName,
        "id": args.id,
        "ip": args.ip,
        "lastBackup": args.lastBackup,
        "licenseInfo": args.licenseInfo,
        "modTime": args.modTime,
        "moid": args.moid,
        "mostRunTasks": args.mostRunTasks,
        "nodeType": args.nodeType,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "productName": args.productName,
        "productVendor": args.productVendor,
        "productVersion": args.productVersion,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "status": args.status,
        "systemTaskInfos": args.systemTaskInfos,
        "tags": args.tags,
        "ucsdManagedInfra": args.ucsdManagedInfra,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIaasUcsdInfo.
 */
export interface GetIaasUcsdInfoArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetIaasUcsdInfoAncestor[];
    classId?: string;
    connectorPacks?: inputs.GetIaasUcsdInfoConnectorPack[];
    createTime?: string;
    customTaskInfos?: inputs.GetIaasUcsdInfoCustomTaskInfo[];
    deviceId?: string;
    deviceStatuses?: inputs.GetIaasUcsdInfoDeviceStatus[];
    domainGroupMoid?: string;
    guid?: string;
    hostName?: string;
    id?: string;
    ip?: string;
    lastBackup?: string;
    licenseInfo?: inputs.GetIaasUcsdInfoLicenseInfo;
    modTime?: string;
    moid?: string;
    mostRunTasks?: inputs.GetIaasUcsdInfoMostRunTask[];
    nodeType?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetIaasUcsdInfoParent;
    permissionResources?: inputs.GetIaasUcsdInfoPermissionResource[];
    productName?: string;
    productVendor?: string;
    productVersion?: string;
    registeredDevice?: inputs.GetIaasUcsdInfoRegisteredDevice;
    sharedScope?: string;
    status?: string;
    systemTaskInfos?: inputs.GetIaasUcsdInfoSystemTaskInfo[];
    tags?: inputs.GetIaasUcsdInfoTag[];
    ucsdManagedInfra?: inputs.GetIaasUcsdInfoUcsdManagedInfra;
    versionContext?: inputs.GetIaasUcsdInfoVersionContext;
}

/**
 * A collection of values returned by getIaasUcsdInfo.
 */
export interface GetIaasUcsdInfoResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetIaasUcsdInfoAncestor[];
    readonly classId?: string;
    readonly connectorPacks?: outputs.GetIaasUcsdInfoConnectorPack[];
    readonly createTime?: string;
    readonly customTaskInfos?: outputs.GetIaasUcsdInfoCustomTaskInfo[];
    readonly deviceId?: string;
    readonly deviceStatuses?: outputs.GetIaasUcsdInfoDeviceStatus[];
    readonly domainGroupMoid?: string;
    readonly guid?: string;
    readonly hostName?: string;
    readonly id: string;
    readonly ip?: string;
    readonly lastBackup?: string;
    readonly licenseInfo?: outputs.GetIaasUcsdInfoLicenseInfo;
    readonly modTime?: string;
    readonly moid?: string;
    readonly mostRunTasks?: outputs.GetIaasUcsdInfoMostRunTask[];
    readonly nodeType?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetIaasUcsdInfoParent;
    readonly permissionResources?: outputs.GetIaasUcsdInfoPermissionResource[];
    readonly productName?: string;
    readonly productVendor?: string;
    readonly productVersion?: string;
    readonly registeredDevice?: outputs.GetIaasUcsdInfoRegisteredDevice;
    readonly results: outputs.GetIaasUcsdInfoResult[];
    readonly sharedScope?: string;
    readonly status?: string;
    readonly systemTaskInfos?: outputs.GetIaasUcsdInfoSystemTaskInfo[];
    readonly tags?: outputs.GetIaasUcsdInfoTag[];
    readonly ucsdManagedInfra?: outputs.GetIaasUcsdInfoUcsdManagedInfra;
    readonly versionContext?: outputs.GetIaasUcsdInfoVersionContext;
}
export function getIaasUcsdInfoOutput(args?: GetIaasUcsdInfoOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIaasUcsdInfoResult> {
    return pulumi.output(args).apply((a: any) => getIaasUcsdInfo(a, opts))
}

/**
 * A collection of arguments for invoking getIaasUcsdInfo.
 */
export interface GetIaasUcsdInfoOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetIaasUcsdInfoAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    connectorPacks?: pulumi.Input<pulumi.Input<inputs.GetIaasUcsdInfoConnectorPackArgs>[]>;
    createTime?: pulumi.Input<string>;
    customTaskInfos?: pulumi.Input<pulumi.Input<inputs.GetIaasUcsdInfoCustomTaskInfoArgs>[]>;
    deviceId?: pulumi.Input<string>;
    deviceStatuses?: pulumi.Input<pulumi.Input<inputs.GetIaasUcsdInfoDeviceStatusArgs>[]>;
    domainGroupMoid?: pulumi.Input<string>;
    guid?: pulumi.Input<string>;
    hostName?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    lastBackup?: pulumi.Input<string>;
    licenseInfo?: pulumi.Input<inputs.GetIaasUcsdInfoLicenseInfoArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    mostRunTasks?: pulumi.Input<pulumi.Input<inputs.GetIaasUcsdInfoMostRunTaskArgs>[]>;
    nodeType?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetIaasUcsdInfoParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetIaasUcsdInfoPermissionResourceArgs>[]>;
    productName?: pulumi.Input<string>;
    productVendor?: pulumi.Input<string>;
    productVersion?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetIaasUcsdInfoRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    systemTaskInfos?: pulumi.Input<pulumi.Input<inputs.GetIaasUcsdInfoSystemTaskInfoArgs>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetIaasUcsdInfoTagArgs>[]>;
    ucsdManagedInfra?: pulumi.Input<inputs.GetIaasUcsdInfoUcsdManagedInfraArgs>;
    versionContext?: pulumi.Input<inputs.GetIaasUcsdInfoVersionContextArgs>;
}
