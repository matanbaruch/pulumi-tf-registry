// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getHyperflexNode(args?: GetHyperflexNodeArgs, opts?: pulumi.InvokeOptions): Promise<GetHyperflexNodeResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getHyperflexNode:getHyperflexNode", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "buildNumber": args.buildNumber,
        "classId": args.classId,
        "cluster": args.cluster,
        "clusterMember": args.clusterMember,
        "createTime": args.createTime,
        "displayVersion": args.displayVersion,
        "domainGroupMoid": args.domainGroupMoid,
        "drives": args.drives,
        "emptySlotsLists": args.emptySlotsLists,
        "hostName": args.hostName,
        "hxdpDataIp": args.hxdpDataIp,
        "hxdpMmgtIp": args.hxdpMmgtIp,
        "hypervisor": args.hypervisor,
        "hypervisorDataIp": args.hypervisorDataIp,
        "id": args.id,
        "identity": args.identity,
        "ip": args.ip,
        "lockdown": args.lockdown,
        "modTime": args.modTime,
        "modelNumber": args.modelNumber,
        "moid": args.moid,
        "nodeMaintenanceMode": args.nodeMaintenanceMode,
        "nodeStatus": args.nodeStatus,
        "nodeUuid": args.nodeUuid,
        "nrVersion": args.nrVersion,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "physicalServer": args.physicalServer,
        "role": args.role,
        "serialNumber": args.serialNumber,
        "sharedScope": args.sharedScope,
        "siteInfo": args.siteInfo,
        "status": args.status,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getHyperflexNode.
 */
export interface GetHyperflexNodeArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetHyperflexNodeAncestor[];
    buildNumber?: string;
    classId?: string;
    cluster?: inputs.GetHyperflexNodeCluster;
    clusterMember?: inputs.GetHyperflexNodeClusterMember;
    createTime?: string;
    displayVersion?: string;
    domainGroupMoid?: string;
    drives?: inputs.GetHyperflexNodeDrife[];
    emptySlotsLists?: string[];
    hostName?: string;
    hxdpDataIp?: inputs.GetHyperflexNodeHxdpDataIp;
    hxdpMmgtIp?: inputs.GetHyperflexNodeHxdpMmgtIp;
    hypervisor?: string;
    hypervisorDataIp?: inputs.GetHyperflexNodeHypervisorDataIp;
    id?: string;
    identity?: inputs.GetHyperflexNodeIdentity;
    ip?: inputs.GetHyperflexNodeIp;
    lockdown?: boolean;
    modTime?: string;
    modelNumber?: string;
    moid?: string;
    nodeMaintenanceMode?: string;
    nodeStatus?: string;
    nodeUuid?: string;
    nrVersion?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetHyperflexNodeParent;
    permissionResources?: inputs.GetHyperflexNodePermissionResource[];
    physicalServer?: inputs.GetHyperflexNodePhysicalServer;
    role?: string;
    serialNumber?: string;
    sharedScope?: string;
    siteInfo?: inputs.GetHyperflexNodeSiteInfo;
    status?: string;
    tags?: inputs.GetHyperflexNodeTag[];
    versionContext?: inputs.GetHyperflexNodeVersionContext;
}

/**
 * A collection of values returned by getHyperflexNode.
 */
export interface GetHyperflexNodeResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetHyperflexNodeAncestor[];
    readonly buildNumber?: string;
    readonly classId?: string;
    readonly cluster?: outputs.GetHyperflexNodeCluster;
    readonly clusterMember?: outputs.GetHyperflexNodeClusterMember;
    readonly createTime?: string;
    readonly displayVersion?: string;
    readonly domainGroupMoid?: string;
    readonly drives?: outputs.GetHyperflexNodeDrife[];
    readonly emptySlotsLists?: string[];
    readonly hostName?: string;
    readonly hxdpDataIp?: outputs.GetHyperflexNodeHxdpDataIp;
    readonly hxdpMmgtIp?: outputs.GetHyperflexNodeHxdpMmgtIp;
    readonly hypervisor?: string;
    readonly hypervisorDataIp?: outputs.GetHyperflexNodeHypervisorDataIp;
    readonly id: string;
    readonly identity?: outputs.GetHyperflexNodeIdentity;
    readonly ip?: outputs.GetHyperflexNodeIp;
    readonly lockdown?: boolean;
    readonly modTime?: string;
    readonly modelNumber?: string;
    readonly moid?: string;
    readonly nodeMaintenanceMode?: string;
    readonly nodeStatus?: string;
    readonly nodeUuid?: string;
    readonly nrVersion?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetHyperflexNodeParent;
    readonly permissionResources?: outputs.GetHyperflexNodePermissionResource[];
    readonly physicalServer?: outputs.GetHyperflexNodePhysicalServer;
    readonly results: outputs.GetHyperflexNodeResult[];
    readonly role?: string;
    readonly serialNumber?: string;
    readonly sharedScope?: string;
    readonly siteInfo?: outputs.GetHyperflexNodeSiteInfo;
    readonly status?: string;
    readonly tags?: outputs.GetHyperflexNodeTag[];
    readonly versionContext?: outputs.GetHyperflexNodeVersionContext;
}
export function getHyperflexNodeOutput(args?: GetHyperflexNodeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetHyperflexNodeResult> {
    return pulumi.output(args).apply((a: any) => getHyperflexNode(a, opts))
}

/**
 * A collection of arguments for invoking getHyperflexNode.
 */
export interface GetHyperflexNodeOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetHyperflexNodeAncestorArgs>[]>;
    buildNumber?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    cluster?: pulumi.Input<inputs.GetHyperflexNodeClusterArgs>;
    clusterMember?: pulumi.Input<inputs.GetHyperflexNodeClusterMemberArgs>;
    createTime?: pulumi.Input<string>;
    displayVersion?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    drives?: pulumi.Input<pulumi.Input<inputs.GetHyperflexNodeDrifeArgs>[]>;
    emptySlotsLists?: pulumi.Input<pulumi.Input<string>[]>;
    hostName?: pulumi.Input<string>;
    hxdpDataIp?: pulumi.Input<inputs.GetHyperflexNodeHxdpDataIpArgs>;
    hxdpMmgtIp?: pulumi.Input<inputs.GetHyperflexNodeHxdpMmgtIpArgs>;
    hypervisor?: pulumi.Input<string>;
    hypervisorDataIp?: pulumi.Input<inputs.GetHyperflexNodeHypervisorDataIpArgs>;
    id?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.GetHyperflexNodeIdentityArgs>;
    ip?: pulumi.Input<inputs.GetHyperflexNodeIpArgs>;
    lockdown?: pulumi.Input<boolean>;
    modTime?: pulumi.Input<string>;
    modelNumber?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    nodeMaintenanceMode?: pulumi.Input<string>;
    nodeStatus?: pulumi.Input<string>;
    nodeUuid?: pulumi.Input<string>;
    nrVersion?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetHyperflexNodeParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetHyperflexNodePermissionResourceArgs>[]>;
    physicalServer?: pulumi.Input<inputs.GetHyperflexNodePhysicalServerArgs>;
    role?: pulumi.Input<string>;
    serialNumber?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    siteInfo?: pulumi.Input<inputs.GetHyperflexNodeSiteInfoArgs>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetHyperflexNodeTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetHyperflexNodeVersionContextArgs>;
}
