// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getApplianceSystemInfo(args?: GetApplianceSystemInfoArgs, opts?: pulumi.InvokeOptions): Promise<GetApplianceSystemInfoResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getApplianceSystemInfo:getApplianceSystemInfo", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "cloudConnStatus": args.cloudConnStatus,
        "clusterStatus": args.clusterStatus,
        "createTime": args.createTime,
        "deploymentSize": args.deploymentSize,
        "domainGroupMoid": args.domainGroupMoid,
        "hostname": args.hostname,
        "id": args.id,
        "initDone": args.initDone,
        "ipAddress": args.ipAddress,
        "isVirtualIp": args.isVirtualIp,
        "modTime": args.modTime,
        "moid": args.moid,
        "nrVersion": args.nrVersion,
        "objectType": args.objectType,
        "operationalStatus": args.operationalStatus,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "serialId": args.serialId,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "timeZone": args.timeZone,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getApplianceSystemInfo.
 */
export interface GetApplianceSystemInfoArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetApplianceSystemInfoAncestor[];
    classId?: string;
    cloudConnStatus?: string;
    clusterStatus?: string;
    createTime?: string;
    deploymentSize?: string;
    domainGroupMoid?: string;
    hostname?: string;
    id?: string;
    initDone?: boolean;
    ipAddress?: string;
    isVirtualIp?: boolean;
    modTime?: string;
    moid?: string;
    nrVersion?: string;
    objectType?: string;
    operationalStatus?: string;
    owners?: string[];
    parent?: inputs.GetApplianceSystemInfoParent;
    permissionResources?: inputs.GetApplianceSystemInfoPermissionResource[];
    serialId?: string;
    sharedScope?: string;
    tags?: inputs.GetApplianceSystemInfoTag[];
    timeZone?: string;
    versionContext?: inputs.GetApplianceSystemInfoVersionContext;
}

/**
 * A collection of values returned by getApplianceSystemInfo.
 */
export interface GetApplianceSystemInfoResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetApplianceSystemInfoAncestor[];
    readonly classId?: string;
    readonly cloudConnStatus?: string;
    readonly clusterStatus?: string;
    readonly createTime?: string;
    readonly deploymentSize?: string;
    readonly domainGroupMoid?: string;
    readonly hostname?: string;
    readonly id: string;
    readonly initDone?: boolean;
    readonly ipAddress?: string;
    readonly isVirtualIp?: boolean;
    readonly modTime?: string;
    readonly moid?: string;
    readonly nrVersion?: string;
    readonly objectType?: string;
    readonly operationalStatus?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetApplianceSystemInfoParent;
    readonly permissionResources?: outputs.GetApplianceSystemInfoPermissionResource[];
    readonly results: outputs.GetApplianceSystemInfoResult[];
    readonly serialId?: string;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetApplianceSystemInfoTag[];
    readonly timeZone?: string;
    readonly versionContext?: outputs.GetApplianceSystemInfoVersionContext;
}
export function getApplianceSystemInfoOutput(args?: GetApplianceSystemInfoOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetApplianceSystemInfoResult> {
    return pulumi.output(args).apply((a: any) => getApplianceSystemInfo(a, opts))
}

/**
 * A collection of arguments for invoking getApplianceSystemInfo.
 */
export interface GetApplianceSystemInfoOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetApplianceSystemInfoAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    cloudConnStatus?: pulumi.Input<string>;
    clusterStatus?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deploymentSize?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    initDone?: pulumi.Input<boolean>;
    ipAddress?: pulumi.Input<string>;
    isVirtualIp?: pulumi.Input<boolean>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    nrVersion?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operationalStatus?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetApplianceSystemInfoParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetApplianceSystemInfoPermissionResourceArgs>[]>;
    serialId?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetApplianceSystemInfoTagArgs>[]>;
    timeZone?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetApplianceSystemInfoVersionContextArgs>;
}
