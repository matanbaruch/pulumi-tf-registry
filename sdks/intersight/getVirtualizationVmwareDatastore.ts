// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVirtualizationVmwareDatastore(args?: GetVirtualizationVmwareDatastoreArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualizationVmwareDatastoreResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getVirtualizationVmwareDatastore:getVirtualizationVmwareDatastore", {
        "accessible": args.accessible,
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "capacity": args.capacity,
        "classId": args.classId,
        "cluster": args.cluster,
        "clusters": args.clusters,
        "createTime": args.createTime,
        "datacenter": args.datacenter,
        "datastoreCluster": args.datastoreCluster,
        "domainGroupMoid": args.domainGroupMoid,
        "hostCount": args.hostCount,
        "hosts": args.hosts,
        "id": args.id,
        "identity": args.identity,
        "inventoryPath": args.inventoryPath,
        "maintenanceMode": args.maintenanceMode,
        "modTime": args.modTime,
        "moid": args.moid,
        "multipleHostAccess": args.multipleHostAccess,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "status": args.status,
        "tags": args.tags,
        "thinProvisioningSupported": args.thinProvisioningSupported,
        "type": args.type,
        "unCommitted": args.unCommitted,
        "url": args.url,
        "versionContext": args.versionContext,
        "vmCount": args.vmCount,
        "vmTemplateCount": args.vmTemplateCount,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareDatastore.
 */
export interface GetVirtualizationVmwareDatastoreArgs {
    accessible?: boolean;
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetVirtualizationVmwareDatastoreAncestor[];
    capacity?: inputs.GetVirtualizationVmwareDatastoreCapacity;
    classId?: string;
    cluster?: inputs.GetVirtualizationVmwareDatastoreCluster;
    clusters?: inputs.GetVirtualizationVmwareDatastoreCluster[];
    createTime?: string;
    datacenter?: inputs.GetVirtualizationVmwareDatastoreDatacenter;
    datastoreCluster?: inputs.GetVirtualizationVmwareDatastoreDatastoreCluster;
    domainGroupMoid?: string;
    hostCount?: number;
    hosts?: inputs.GetVirtualizationVmwareDatastoreHost[];
    id?: string;
    identity?: string;
    inventoryPath?: string;
    maintenanceMode?: boolean;
    modTime?: string;
    moid?: string;
    multipleHostAccess?: boolean;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetVirtualizationVmwareDatastoreParent;
    permissionResources?: inputs.GetVirtualizationVmwareDatastorePermissionResource[];
    registeredDevice?: inputs.GetVirtualizationVmwareDatastoreRegisteredDevice;
    sharedScope?: string;
    status?: string;
    tags?: inputs.GetVirtualizationVmwareDatastoreTag[];
    thinProvisioningSupported?: boolean;
    type?: string;
    unCommitted?: number;
    url?: string;
    versionContext?: inputs.GetVirtualizationVmwareDatastoreVersionContext;
    vmCount?: number;
    vmTemplateCount?: number;
}

/**
 * A collection of values returned by getVirtualizationVmwareDatastore.
 */
export interface GetVirtualizationVmwareDatastoreResult {
    readonly accessible?: boolean;
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetVirtualizationVmwareDatastoreAncestor[];
    readonly capacity?: outputs.GetVirtualizationVmwareDatastoreCapacity;
    readonly classId?: string;
    readonly cluster?: outputs.GetVirtualizationVmwareDatastoreCluster;
    readonly clusters?: outputs.GetVirtualizationVmwareDatastoreCluster[];
    readonly createTime?: string;
    readonly datacenter?: outputs.GetVirtualizationVmwareDatastoreDatacenter;
    readonly datastoreCluster?: outputs.GetVirtualizationVmwareDatastoreDatastoreCluster;
    readonly domainGroupMoid?: string;
    readonly hostCount?: number;
    readonly hosts?: outputs.GetVirtualizationVmwareDatastoreHost[];
    readonly id: string;
    readonly identity?: string;
    readonly inventoryPath?: string;
    readonly maintenanceMode?: boolean;
    readonly modTime?: string;
    readonly moid?: string;
    readonly multipleHostAccess?: boolean;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetVirtualizationVmwareDatastoreParent;
    readonly permissionResources?: outputs.GetVirtualizationVmwareDatastorePermissionResource[];
    readonly registeredDevice?: outputs.GetVirtualizationVmwareDatastoreRegisteredDevice;
    readonly results: outputs.GetVirtualizationVmwareDatastoreResult[];
    readonly sharedScope?: string;
    readonly status?: string;
    readonly tags?: outputs.GetVirtualizationVmwareDatastoreTag[];
    readonly thinProvisioningSupported?: boolean;
    readonly type?: string;
    readonly unCommitted?: number;
    readonly url?: string;
    readonly versionContext?: outputs.GetVirtualizationVmwareDatastoreVersionContext;
    readonly vmCount?: number;
    readonly vmTemplateCount?: number;
}
export function getVirtualizationVmwareDatastoreOutput(args?: GetVirtualizationVmwareDatastoreOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualizationVmwareDatastoreResult> {
    return pulumi.output(args).apply((a: any) => getVirtualizationVmwareDatastore(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareDatastore.
 */
export interface GetVirtualizationVmwareDatastoreOutputArgs {
    accessible?: pulumi.Input<boolean>;
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareDatastoreAncestorArgs>[]>;
    capacity?: pulumi.Input<inputs.GetVirtualizationVmwareDatastoreCapacityArgs>;
    classId?: pulumi.Input<string>;
    cluster?: pulumi.Input<inputs.GetVirtualizationVmwareDatastoreClusterArgs>;
    clusters?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareDatastoreClusterArgs>[]>;
    createTime?: pulumi.Input<string>;
    datacenter?: pulumi.Input<inputs.GetVirtualizationVmwareDatastoreDatacenterArgs>;
    datastoreCluster?: pulumi.Input<inputs.GetVirtualizationVmwareDatastoreDatastoreClusterArgs>;
    domainGroupMoid?: pulumi.Input<string>;
    hostCount?: pulumi.Input<number>;
    hosts?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareDatastoreHostArgs>[]>;
    id?: pulumi.Input<string>;
    identity?: pulumi.Input<string>;
    inventoryPath?: pulumi.Input<string>;
    maintenanceMode?: pulumi.Input<boolean>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    multipleHostAccess?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetVirtualizationVmwareDatastoreParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareDatastorePermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetVirtualizationVmwareDatastoreRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareDatastoreTagArgs>[]>;
    thinProvisioningSupported?: pulumi.Input<boolean>;
    type?: pulumi.Input<string>;
    unCommitted?: pulumi.Input<number>;
    url?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetVirtualizationVmwareDatastoreVersionContextArgs>;
    vmCount?: pulumi.Input<number>;
    vmTemplateCount?: pulumi.Input<number>;
}
