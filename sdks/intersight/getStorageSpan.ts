// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageSpan(args?: GetStorageSpanArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageSpanResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageSpan:getStorageSpan", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "diskGroup": args.diskGroup,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "physicalDisks": args.physicalDisks,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "sharedScope": args.sharedScope,
        "slots": args.slots,
        "spanId": args.spanId,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageSpan.
 */
export interface GetStorageSpanArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageSpanAncestor[];
    classId?: string;
    createTime?: string;
    deviceMoId?: string;
    diskGroup?: inputs.GetStorageSpanDiskGroup;
    dn?: string;
    domainGroupMoid?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageSpanParent;
    permissionResources?: inputs.GetStorageSpanPermissionResource[];
    physicalDisks?: inputs.GetStorageSpanPhysicalDisk[];
    registeredDevice?: inputs.GetStorageSpanRegisteredDevice;
    rn?: string;
    sharedScope?: string;
    slots?: number[];
    spanId?: number;
    tags?: inputs.GetStorageSpanTag[];
    versionContext?: inputs.GetStorageSpanVersionContext;
}

/**
 * A collection of values returned by getStorageSpan.
 */
export interface GetStorageSpanResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageSpanAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly diskGroup?: outputs.GetStorageSpanDiskGroup;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageSpanParent;
    readonly permissionResources?: outputs.GetStorageSpanPermissionResource[];
    readonly physicalDisks?: outputs.GetStorageSpanPhysicalDisk[];
    readonly registeredDevice?: outputs.GetStorageSpanRegisteredDevice;
    readonly results: outputs.GetStorageSpanResult[];
    readonly rn?: string;
    readonly sharedScope?: string;
    readonly slots?: number[];
    readonly spanId?: number;
    readonly tags?: outputs.GetStorageSpanTag[];
    readonly versionContext?: outputs.GetStorageSpanVersionContext;
}
export function getStorageSpanOutput(args?: GetStorageSpanOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageSpanResult> {
    return pulumi.output(args).apply((a: any) => getStorageSpan(a, opts))
}

/**
 * A collection of arguments for invoking getStorageSpan.
 */
export interface GetStorageSpanOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageSpanAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    diskGroup?: pulumi.Input<inputs.GetStorageSpanDiskGroupArgs>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageSpanParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageSpanPermissionResourceArgs>[]>;
    physicalDisks?: pulumi.Input<pulumi.Input<inputs.GetStorageSpanPhysicalDiskArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetStorageSpanRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    slots?: pulumi.Input<pulumi.Input<number>[]>;
    spanId?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageSpanTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetStorageSpanVersionContextArgs>;
}
