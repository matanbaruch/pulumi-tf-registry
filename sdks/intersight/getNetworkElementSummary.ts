// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNetworkElementSummary(args?: GetNetworkElementSummaryArgs, opts?: pulumi.InvokeOptions): Promise<GetNetworkElementSummaryResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getNetworkElementSummary:getNetworkElementSummary", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "adminEvacState": args.adminEvacState,
        "adminInbandInterfaceState": args.adminInbandInterfaceState,
        "alarmSummary": args.alarmSummary,
        "ancestors": args.ancestors,
        "availableMemory": args.availableMemory,
        "bundleVersion": args.bundleVersion,
        "chassis": args.chassis,
        "classId": args.classId,
        "confModTs": args.confModTs,
        "confModTsBackup": args.confModTsBackup,
        "connectionStatus": args.connectionStatus,
        "createTime": args.createTime,
        "defaultDomain": args.defaultDomain,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "ethernetMode": args.ethernetMode,
        "ethernetSwitchingMode": args.ethernetSwitchingMode,
        "faultSummary": args.faultSummary,
        "fcMode": args.fcMode,
        "fcSwitchingMode": args.fcSwitchingMode,
        "firmware": args.firmware,
        "firmwareVersion": args.firmwareVersion,
        "fpgaUpgradeNeeded": args.fpgaUpgradeNeeded,
        "id": args.id,
        "inbandIpAddress": args.inbandIpAddress,
        "inbandIpGateway": args.inbandIpGateway,
        "inbandIpMask": args.inbandIpMask,
        "inbandVlan": args.inbandVlan,
        "interClusterLinkState": args.interClusterLinkState,
        "inventoryParent": args.inventoryParent,
        "ipv4Address": args.ipv4Address,
        "isUpgraded": args.isUpgraded,
        "managementMode": args.managementMode,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "name": args.name,
        "nrVersion": args.nrVersion,
        "numEtherPorts": args.numEtherPorts,
        "numEtherPortsConfigured": args.numEtherPortsConfigured,
        "numEtherPortsLinkUp": args.numEtherPortsLinkUp,
        "numExpansionModules": args.numExpansionModules,
        "numFcPorts": args.numFcPorts,
        "numFcPortsConfigured": args.numFcPortsConfigured,
        "numFcPortsLinkUp": args.numFcPortsLinkUp,
        "objectType": args.objectType,
        "operEvacState": args.operEvacState,
        "operability": args.operability,
        "outOfBandIpAddress": args.outOfBandIpAddress,
        "outOfBandIpGateway": args.outOfBandIpGateway,
        "outOfBandIpMask": args.outOfBandIpMask,
        "outOfBandIpv4Address": args.outOfBandIpv4Address,
        "outOfBandIpv4Gateway": args.outOfBandIpv4Gateway,
        "outOfBandIpv4Mask": args.outOfBandIpv4Mask,
        "outOfBandIpv6Address": args.outOfBandIpv6Address,
        "outOfBandIpv6Gateway": args.outOfBandIpv6Gateway,
        "outOfBandIpv6Prefix": args.outOfBandIpv6Prefix,
        "outOfBandMac": args.outOfBandMac,
        "owners": args.owners,
        "parent": args.parent,
        "partNumber": args.partNumber,
        "permissionResources": args.permissionResources,
        "presence": args.presence,
        "registeredDevice": args.registeredDevice,
        "reservedVlanStartId": args.reservedVlanStartId,
        "revision": args.revision,
        "rn": args.rn,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "sourceObjectType": args.sourceObjectType,
        "status": args.status,
        "switchId": args.switchId,
        "switchProfileName": args.switchProfileName,
        "switchType": args.switchType,
        "systemUpTime": args.systemUpTime,
        "tags": args.tags,
        "thermal": args.thermal,
        "totalMemory": args.totalMemory,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNetworkElementSummary.
 */
export interface GetNetworkElementSummaryArgs {
    accountMoid?: string;
    additionalProperties?: string;
    adminEvacState?: string;
    adminInbandInterfaceState?: string;
    alarmSummary?: inputs.GetNetworkElementSummaryAlarmSummary;
    ancestors?: inputs.GetNetworkElementSummaryAncestor[];
    availableMemory?: string;
    bundleVersion?: string;
    chassis?: string;
    classId?: string;
    confModTs?: string;
    confModTsBackup?: string;
    connectionStatus?: string;
    createTime?: string;
    defaultDomain?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    ethernetMode?: string;
    ethernetSwitchingMode?: string;
    faultSummary?: number;
    fcMode?: string;
    fcSwitchingMode?: string;
    firmware?: string;
    firmwareVersion?: string;
    fpgaUpgradeNeeded?: boolean;
    id?: string;
    inbandIpAddress?: string;
    inbandIpGateway?: string;
    inbandIpMask?: string;
    inbandVlan?: number;
    interClusterLinkState?: string;
    inventoryParent?: inputs.GetNetworkElementSummaryInventoryParent;
    ipv4Address?: string;
    isUpgraded?: boolean;
    managementMode?: string;
    modTime?: string;
    model?: string;
    moid?: string;
    name?: string;
    nrVersion?: string;
    numEtherPorts?: number;
    numEtherPortsConfigured?: number;
    numEtherPortsLinkUp?: number;
    numExpansionModules?: number;
    numFcPorts?: number;
    numFcPortsConfigured?: number;
    numFcPortsLinkUp?: number;
    objectType?: string;
    operEvacState?: string;
    operability?: string;
    outOfBandIpAddress?: string;
    outOfBandIpGateway?: string;
    outOfBandIpMask?: string;
    outOfBandIpv4Address?: string;
    outOfBandIpv4Gateway?: string;
    outOfBandIpv4Mask?: string;
    outOfBandIpv6Address?: string;
    outOfBandIpv6Gateway?: string;
    outOfBandIpv6Prefix?: string;
    outOfBandMac?: string;
    owners?: string[];
    parent?: inputs.GetNetworkElementSummaryParent;
    partNumber?: string;
    permissionResources?: inputs.GetNetworkElementSummaryPermissionResource[];
    presence?: string;
    registeredDevice?: inputs.GetNetworkElementSummaryRegisteredDevice;
    reservedVlanStartId?: number;
    revision?: string;
    rn?: string;
    serial?: string;
    sharedScope?: string;
    sourceObjectType?: string;
    status?: string;
    switchId?: string;
    switchProfileName?: string;
    switchType?: string;
    systemUpTime?: string;
    tags?: inputs.GetNetworkElementSummaryTag[];
    thermal?: string;
    totalMemory?: number;
    vendor?: string;
    versionContext?: inputs.GetNetworkElementSummaryVersionContext;
}

/**
 * A collection of values returned by getNetworkElementSummary.
 */
export interface GetNetworkElementSummaryResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly adminEvacState?: string;
    readonly adminInbandInterfaceState?: string;
    readonly alarmSummary?: outputs.GetNetworkElementSummaryAlarmSummary;
    readonly ancestors?: outputs.GetNetworkElementSummaryAncestor[];
    readonly availableMemory?: string;
    readonly bundleVersion?: string;
    readonly chassis?: string;
    readonly classId?: string;
    readonly confModTs?: string;
    readonly confModTsBackup?: string;
    readonly connectionStatus?: string;
    readonly createTime?: string;
    readonly defaultDomain?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly ethernetMode?: string;
    readonly ethernetSwitchingMode?: string;
    readonly faultSummary?: number;
    readonly fcMode?: string;
    readonly fcSwitchingMode?: string;
    readonly firmware?: string;
    readonly firmwareVersion?: string;
    readonly fpgaUpgradeNeeded?: boolean;
    readonly id: string;
    readonly inbandIpAddress?: string;
    readonly inbandIpGateway?: string;
    readonly inbandIpMask?: string;
    readonly inbandVlan?: number;
    readonly interClusterLinkState?: string;
    readonly inventoryParent?: outputs.GetNetworkElementSummaryInventoryParent;
    readonly ipv4Address?: string;
    readonly isUpgraded?: boolean;
    readonly managementMode?: string;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nrVersion?: string;
    readonly numEtherPorts?: number;
    readonly numEtherPortsConfigured?: number;
    readonly numEtherPortsLinkUp?: number;
    readonly numExpansionModules?: number;
    readonly numFcPorts?: number;
    readonly numFcPortsConfigured?: number;
    readonly numFcPortsLinkUp?: number;
    readonly objectType?: string;
    readonly operEvacState?: string;
    readonly operability?: string;
    readonly outOfBandIpAddress?: string;
    readonly outOfBandIpGateway?: string;
    readonly outOfBandIpMask?: string;
    readonly outOfBandIpv4Address?: string;
    readonly outOfBandIpv4Gateway?: string;
    readonly outOfBandIpv4Mask?: string;
    readonly outOfBandIpv6Address?: string;
    readonly outOfBandIpv6Gateway?: string;
    readonly outOfBandIpv6Prefix?: string;
    readonly outOfBandMac?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetNetworkElementSummaryParent;
    readonly partNumber?: string;
    readonly permissionResources?: outputs.GetNetworkElementSummaryPermissionResource[];
    readonly presence?: string;
    readonly registeredDevice?: outputs.GetNetworkElementSummaryRegisteredDevice;
    readonly reservedVlanStartId?: number;
    readonly results: outputs.GetNetworkElementSummaryResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly sourceObjectType?: string;
    readonly status?: string;
    readonly switchId?: string;
    readonly switchProfileName?: string;
    readonly switchType?: string;
    readonly systemUpTime?: string;
    readonly tags?: outputs.GetNetworkElementSummaryTag[];
    readonly thermal?: string;
    readonly totalMemory?: number;
    readonly vendor?: string;
    readonly versionContext?: outputs.GetNetworkElementSummaryVersionContext;
}
export function getNetworkElementSummaryOutput(args?: GetNetworkElementSummaryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkElementSummaryResult> {
    return pulumi.output(args).apply((a: any) => getNetworkElementSummary(a, opts))
}

/**
 * A collection of arguments for invoking getNetworkElementSummary.
 */
export interface GetNetworkElementSummaryOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    adminEvacState?: pulumi.Input<string>;
    adminInbandInterfaceState?: pulumi.Input<string>;
    alarmSummary?: pulumi.Input<inputs.GetNetworkElementSummaryAlarmSummaryArgs>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementSummaryAncestorArgs>[]>;
    availableMemory?: pulumi.Input<string>;
    bundleVersion?: pulumi.Input<string>;
    chassis?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    confModTs?: pulumi.Input<string>;
    confModTsBackup?: pulumi.Input<string>;
    connectionStatus?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    defaultDomain?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    ethernetMode?: pulumi.Input<string>;
    ethernetSwitchingMode?: pulumi.Input<string>;
    faultSummary?: pulumi.Input<number>;
    fcMode?: pulumi.Input<string>;
    fcSwitchingMode?: pulumi.Input<string>;
    firmware?: pulumi.Input<string>;
    firmwareVersion?: pulumi.Input<string>;
    fpgaUpgradeNeeded?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    inbandIpAddress?: pulumi.Input<string>;
    inbandIpGateway?: pulumi.Input<string>;
    inbandIpMask?: pulumi.Input<string>;
    inbandVlan?: pulumi.Input<number>;
    interClusterLinkState?: pulumi.Input<string>;
    inventoryParent?: pulumi.Input<inputs.GetNetworkElementSummaryInventoryParentArgs>;
    ipv4Address?: pulumi.Input<string>;
    isUpgraded?: pulumi.Input<boolean>;
    managementMode?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nrVersion?: pulumi.Input<string>;
    numEtherPorts?: pulumi.Input<number>;
    numEtherPortsConfigured?: pulumi.Input<number>;
    numEtherPortsLinkUp?: pulumi.Input<number>;
    numExpansionModules?: pulumi.Input<number>;
    numFcPorts?: pulumi.Input<number>;
    numFcPortsConfigured?: pulumi.Input<number>;
    numFcPortsLinkUp?: pulumi.Input<number>;
    objectType?: pulumi.Input<string>;
    operEvacState?: pulumi.Input<string>;
    operability?: pulumi.Input<string>;
    outOfBandIpAddress?: pulumi.Input<string>;
    outOfBandIpGateway?: pulumi.Input<string>;
    outOfBandIpMask?: pulumi.Input<string>;
    outOfBandIpv4Address?: pulumi.Input<string>;
    outOfBandIpv4Gateway?: pulumi.Input<string>;
    outOfBandIpv4Mask?: pulumi.Input<string>;
    outOfBandIpv6Address?: pulumi.Input<string>;
    outOfBandIpv6Gateway?: pulumi.Input<string>;
    outOfBandIpv6Prefix?: pulumi.Input<string>;
    outOfBandMac?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetNetworkElementSummaryParentArgs>;
    partNumber?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementSummaryPermissionResourceArgs>[]>;
    presence?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetNetworkElementSummaryRegisteredDeviceArgs>;
    reservedVlanStartId?: pulumi.Input<number>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    sourceObjectType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    switchId?: pulumi.Input<string>;
    switchProfileName?: pulumi.Input<string>;
    switchType?: pulumi.Input<string>;
    systemUpTime?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementSummaryTagArgs>[]>;
    thermal?: pulumi.Input<string>;
    totalMemory?: pulumi.Input<number>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetNetworkElementSummaryVersionContextArgs>;
}
