// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WorkflowWorkflowDefinition extends pulumi.CustomResource {
    /**
     * Get an existing WorkflowWorkflowDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkflowWorkflowDefinitionState, opts?: pulumi.CustomResourceOptions): WorkflowWorkflowDefinition {
        return new WorkflowWorkflowDefinition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'intersight:index/workflowWorkflowDefinition:WorkflowWorkflowDefinition';

    /**
     * Returns true if the given object is an instance of WorkflowWorkflowDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkflowWorkflowDefinition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkflowWorkflowDefinition.__pulumiType;
    }

    /**
     * The Account ID for this managed object.
     */
    public readonly accountMoid!: pulumi.Output<string>;
    public readonly additionalProperties!: pulumi.Output<string | undefined>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly ancestors!: pulumi.Output<outputs.WorkflowWorkflowDefinitionAncestor[]>;
    /**
     * A reference to a workflowCatalog resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    public readonly catalogs!: pulumi.Output<outputs.WorkflowWorkflowDefinitionCatalog[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    public readonly classId!: pulumi.Output<string | undefined>;
    /**
     * A reference to a workflowWorkflowDefinition resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    public readonly clonedFroms!: pulumi.Output<outputs.WorkflowWorkflowDefinitionClonedFrom[]>;
    /**
     * The time when this managed object was created.
     */
    public readonly createTime!: pulumi.Output<string>;
    /**
     * The user identifier who created or cloned the workflow definition.
     */
    public readonly createUser!: pulumi.Output<string>;
    /**
     * When true this will be the workflow version that is used when a specific workflow definition version is not specified.
     * The default version is used when user executes a workflow without specifying a version or when workflow is included in
     * another workflow without a specific version. The very first workflow definition created with a name will be set as the
     * default version, after that user can explicitly set any version of the workflow definition as the default version.
     */
    public readonly defaultVersion!: pulumi.Output<boolean | undefined>;
    /**
     * The description for this workflow.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The DomainGroup ID for this managed object.
     */
    public readonly domainGroupMoid!: pulumi.Output<string>;
    public readonly inputDefinitions!: pulumi.Output<outputs.WorkflowWorkflowDefinitionInputDefinition[]>;
    public readonly inputParameterSets!: pulumi.Output<outputs.WorkflowWorkflowDefinitionInputParameterSet[]>;
    /**
     * A user friendly short name to identify the workflow. Label can only contain letters (a-z, A-Z), numbers (0-9), hyphen
     * (-), period (.), colon (:), space ( ), forward slash (/), or an underscore (_).
     */
    public readonly label!: pulumi.Output<string | undefined>;
    /**
     * License entitlement required to run this workflow. It is calculated based on the highest license requirement of all its
     * tasks. * `Base` - Base as a License type. It is default license type. * `Essential` - Essential as a License type. *
     * `Standard` - Standard as a License type. * `Advantage` - Advantage as a License type. * `Premier` - Premier as a License
     * type. * `IWO-Essential` - IWO-Essential as a License type. * `IWO-Advantage` - IWO-Advantage as a License type. *
     * `IWO-Premier` - IWO-Premier as a License type. * `IKS-Advantage` - IKS-Advantage as a License type. *
     * `INC-Premier-1GFixed` - Premier 1G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-10GFixed` - Premier 10G
     * Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-100GFixed` - Premier 100G Fixed license tier for
     * Intersight Nexus Cloud. * `INC-Premier-Mod4Slot` - Premier Modular 4 slot license tier for Intersight Nexus Cloud. *
     * `INC-Premier-Mod8Slot` - Premier Modular 8 slot license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsFixed` -
     * Premier D2Ops fixed license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsMod` - Premier D2Ops modular license
     * tier for Intersight Nexus Cloud. * `INC-Premier-CentralizedMod8Slot` - Premier modular license tier of switch type
     * CentralizedMod8Slot for Intersight Nexus Cloud. * `INC-Premier-DistributedMod8Slot` - Premier modular license tier of
     * switch type DistributedMod8Slot for Intersight Nexus Cloud. * `IntersightTrial` - Virtual dummy license type to indicate
     * trial. Used for UI display of trial mode Intersight tiers. * `IWOTrial` - Virtual dummy license type to indicate trial.
     * Used for UI display of trial mode IKS tiers. * `IKSTrial` - Virtual dummy license type to indicate trial. Used for UI
     * display of trial mode IWO tiers. * `INCTrial` - Virtual dummy license type to indicate trial. Used for UI display of
     * trial mode Nexus tiers.
     */
    public readonly licenseEntitlement!: pulumi.Output<string>;
    /**
     * The maximum number of tasks that can be executed on this workflow.
     */
    public readonly maxTaskCount!: pulumi.Output<number>;
    /**
     * The maximum number of external (worker) tasks that can be executed on this workflow.
     */
    public readonly maxWorkerTaskCount!: pulumi.Output<number>;
    /**
     * The time when this managed object was last modified.
     */
    public readonly modTime!: pulumi.Output<string>;
    /**
     * The user identifier who last updated the workflow definition.
     */
    public readonly modUser!: pulumi.Output<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    public readonly moid!: pulumi.Output<string>;
    /**
     * The name for this workflow. You can have multiple versions of the workflow with the same name. Name can only contain
     * letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.) or an underscore (_).
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The version of the workflow to support multiple versions.
     */
    public readonly nrVersion!: pulumi.Output<number | undefined>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    public readonly objectType!: pulumi.Output<string | undefined>;
    public readonly outputDefinitions!: pulumi.Output<outputs.WorkflowWorkflowDefinitionOutputDefinition[]>;
    /**
     * The output mappings for the workflow. The schema for outputs of a workflow is defined using OutputDefinition. The
     * outputs for workflows that we want to export out at the end of the workflow can be mapped from task outputs, workflow
     * inputs, or workflow variables. Any task output, workflow input, or workflow variable can be mapped to a workflow output
     * as long as the types are compatible. The format to specify the mapping is '${ 'workflow | <taskName>'. 'output |input |
     * variable'.<name>[.<JsonPath>]}'. First, either the keyword 'workflow' or the name of the task in the workflow must be
     * given. If a task name is used, then it must be followed by the keyword 'output', if the keyword workflow was used, then
     * it must be followed by the keyword 'input' or 'variable'. Following this '<name>' must be the name of either input,
     * output, or variable that must be mapped as workflow output. The last part of the mapping can be an optional <JsonPath>
     * to extract specific fields on the data.
     */
    public readonly outputParameters!: pulumi.Output<string | undefined>;
    public readonly owners!: pulumi.Output<string[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    public readonly parents!: pulumi.Output<outputs.WorkflowWorkflowDefinitionParent[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly permissionResources!: pulumi.Output<outputs.WorkflowWorkflowDefinitionPermissionResource[]>;
    /**
     * Type to capture the properties of a workflow definition. Some of these properties are passed to workflow execution
     * instance.
     */
    public readonly properties!: pulumi.Output<outputs.WorkflowWorkflowDefinitionProperty[]>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    public readonly sharedScope!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.WorkflowWorkflowDefinitionTag[]>;
    public readonly tasks!: pulumi.Output<outputs.WorkflowWorkflowDefinitionTask[]>;
    public readonly uiInputFilters!: pulumi.Output<outputs.WorkflowWorkflowDefinitionUiInputFilter[]>;
    /**
     * This will hold the data needed for workflow to be rendered in the user interface.
     */
    public readonly uiRenderingData!: pulumi.Output<string | undefined>;
    /**
     * The current validation state and associated information for this workflow.
     */
    public readonly validationInformations!: pulumi.Output<outputs.WorkflowWorkflowDefinitionValidationInformation[]>;
    public readonly variableDefinitions!: pulumi.Output<outputs.WorkflowWorkflowDefinitionVariableDefinition[]>;
    /**
     * The versioning info for this managed object.
     */
    public readonly versionContexts!: pulumi.Output<outputs.WorkflowWorkflowDefinitionVersionContext[]>;
    /**
     * A reference to a workflowWorkflowMetadata resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    public readonly workflowMetadatas!: pulumi.Output<outputs.WorkflowWorkflowDefinitionWorkflowMetadata[]>;

    /**
     * Create a WorkflowWorkflowDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WorkflowWorkflowDefinitionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkflowWorkflowDefinitionArgs | WorkflowWorkflowDefinitionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkflowWorkflowDefinitionState | undefined;
            resourceInputs["accountMoid"] = state ? state.accountMoid : undefined;
            resourceInputs["additionalProperties"] = state ? state.additionalProperties : undefined;
            resourceInputs["ancestors"] = state ? state.ancestors : undefined;
            resourceInputs["catalogs"] = state ? state.catalogs : undefined;
            resourceInputs["classId"] = state ? state.classId : undefined;
            resourceInputs["clonedFroms"] = state ? state.clonedFroms : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["createUser"] = state ? state.createUser : undefined;
            resourceInputs["defaultVersion"] = state ? state.defaultVersion : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domainGroupMoid"] = state ? state.domainGroupMoid : undefined;
            resourceInputs["inputDefinitions"] = state ? state.inputDefinitions : undefined;
            resourceInputs["inputParameterSets"] = state ? state.inputParameterSets : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["licenseEntitlement"] = state ? state.licenseEntitlement : undefined;
            resourceInputs["maxTaskCount"] = state ? state.maxTaskCount : undefined;
            resourceInputs["maxWorkerTaskCount"] = state ? state.maxWorkerTaskCount : undefined;
            resourceInputs["modTime"] = state ? state.modTime : undefined;
            resourceInputs["modUser"] = state ? state.modUser : undefined;
            resourceInputs["moid"] = state ? state.moid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nrVersion"] = state ? state.nrVersion : undefined;
            resourceInputs["objectType"] = state ? state.objectType : undefined;
            resourceInputs["outputDefinitions"] = state ? state.outputDefinitions : undefined;
            resourceInputs["outputParameters"] = state ? state.outputParameters : undefined;
            resourceInputs["owners"] = state ? state.owners : undefined;
            resourceInputs["parents"] = state ? state.parents : undefined;
            resourceInputs["permissionResources"] = state ? state.permissionResources : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["sharedScope"] = state ? state.sharedScope : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tasks"] = state ? state.tasks : undefined;
            resourceInputs["uiInputFilters"] = state ? state.uiInputFilters : undefined;
            resourceInputs["uiRenderingData"] = state ? state.uiRenderingData : undefined;
            resourceInputs["validationInformations"] = state ? state.validationInformations : undefined;
            resourceInputs["variableDefinitions"] = state ? state.variableDefinitions : undefined;
            resourceInputs["versionContexts"] = state ? state.versionContexts : undefined;
            resourceInputs["workflowMetadatas"] = state ? state.workflowMetadatas : undefined;
        } else {
            const args = argsOrState as WorkflowWorkflowDefinitionArgs | undefined;
            resourceInputs["accountMoid"] = args ? args.accountMoid : undefined;
            resourceInputs["additionalProperties"] = args ? args.additionalProperties : undefined;
            resourceInputs["ancestors"] = args ? args.ancestors : undefined;
            resourceInputs["catalogs"] = args ? args.catalogs : undefined;
            resourceInputs["classId"] = args ? args.classId : undefined;
            resourceInputs["clonedFroms"] = args ? args.clonedFroms : undefined;
            resourceInputs["createTime"] = args ? args.createTime : undefined;
            resourceInputs["createUser"] = args ? args.createUser : undefined;
            resourceInputs["defaultVersion"] = args ? args.defaultVersion : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domainGroupMoid"] = args ? args.domainGroupMoid : undefined;
            resourceInputs["inputDefinitions"] = args ? args.inputDefinitions : undefined;
            resourceInputs["inputParameterSets"] = args ? args.inputParameterSets : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["licenseEntitlement"] = args ? args.licenseEntitlement : undefined;
            resourceInputs["maxTaskCount"] = args ? args.maxTaskCount : undefined;
            resourceInputs["maxWorkerTaskCount"] = args ? args.maxWorkerTaskCount : undefined;
            resourceInputs["modTime"] = args ? args.modTime : undefined;
            resourceInputs["modUser"] = args ? args.modUser : undefined;
            resourceInputs["moid"] = args ? args.moid : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nrVersion"] = args ? args.nrVersion : undefined;
            resourceInputs["objectType"] = args ? args.objectType : undefined;
            resourceInputs["outputDefinitions"] = args ? args.outputDefinitions : undefined;
            resourceInputs["outputParameters"] = args ? args.outputParameters : undefined;
            resourceInputs["owners"] = args ? args.owners : undefined;
            resourceInputs["parents"] = args ? args.parents : undefined;
            resourceInputs["permissionResources"] = args ? args.permissionResources : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
            resourceInputs["sharedScope"] = args ? args.sharedScope : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tasks"] = args ? args.tasks : undefined;
            resourceInputs["uiInputFilters"] = args ? args.uiInputFilters : undefined;
            resourceInputs["uiRenderingData"] = args ? args.uiRenderingData : undefined;
            resourceInputs["validationInformations"] = args ? args.validationInformations : undefined;
            resourceInputs["variableDefinitions"] = args ? args.variableDefinitions : undefined;
            resourceInputs["versionContexts"] = args ? args.versionContexts : undefined;
            resourceInputs["workflowMetadatas"] = args ? args.workflowMetadatas : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WorkflowWorkflowDefinition.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WorkflowWorkflowDefinition resources.
 */
export interface WorkflowWorkflowDefinitionState {
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionAncestor>[]>;
    /**
     * A reference to a workflowCatalog resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    catalogs?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionCatalog>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    /**
     * A reference to a workflowWorkflowDefinition resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    clonedFroms?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionClonedFrom>[]>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The user identifier who created or cloned the workflow definition.
     */
    createUser?: pulumi.Input<string>;
    /**
     * When true this will be the workflow version that is used when a specific workflow definition version is not specified.
     * The default version is used when user executes a workflow without specifying a version or when workflow is included in
     * another workflow without a specific version. The very first workflow definition created with a name will be set as the
     * default version, after that user can explicitly set any version of the workflow definition as the default version.
     */
    defaultVersion?: pulumi.Input<boolean>;
    /**
     * The description for this workflow.
     */
    description?: pulumi.Input<string>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    inputDefinitions?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionInputDefinition>[]>;
    inputParameterSets?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionInputParameterSet>[]>;
    /**
     * A user friendly short name to identify the workflow. Label can only contain letters (a-z, A-Z), numbers (0-9), hyphen
     * (-), period (.), colon (:), space ( ), forward slash (/), or an underscore (_).
     */
    label?: pulumi.Input<string>;
    /**
     * License entitlement required to run this workflow. It is calculated based on the highest license requirement of all its
     * tasks. * `Base` - Base as a License type. It is default license type. * `Essential` - Essential as a License type. *
     * `Standard` - Standard as a License type. * `Advantage` - Advantage as a License type. * `Premier` - Premier as a License
     * type. * `IWO-Essential` - IWO-Essential as a License type. * `IWO-Advantage` - IWO-Advantage as a License type. *
     * `IWO-Premier` - IWO-Premier as a License type. * `IKS-Advantage` - IKS-Advantage as a License type. *
     * `INC-Premier-1GFixed` - Premier 1G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-10GFixed` - Premier 10G
     * Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-100GFixed` - Premier 100G Fixed license tier for
     * Intersight Nexus Cloud. * `INC-Premier-Mod4Slot` - Premier Modular 4 slot license tier for Intersight Nexus Cloud. *
     * `INC-Premier-Mod8Slot` - Premier Modular 8 slot license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsFixed` -
     * Premier D2Ops fixed license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsMod` - Premier D2Ops modular license
     * tier for Intersight Nexus Cloud. * `INC-Premier-CentralizedMod8Slot` - Premier modular license tier of switch type
     * CentralizedMod8Slot for Intersight Nexus Cloud. * `INC-Premier-DistributedMod8Slot` - Premier modular license tier of
     * switch type DistributedMod8Slot for Intersight Nexus Cloud. * `IntersightTrial` - Virtual dummy license type to indicate
     * trial. Used for UI display of trial mode Intersight tiers. * `IWOTrial` - Virtual dummy license type to indicate trial.
     * Used for UI display of trial mode IKS tiers. * `IKSTrial` - Virtual dummy license type to indicate trial. Used for UI
     * display of trial mode IWO tiers. * `INCTrial` - Virtual dummy license type to indicate trial. Used for UI display of
     * trial mode Nexus tiers.
     */
    licenseEntitlement?: pulumi.Input<string>;
    /**
     * The maximum number of tasks that can be executed on this workflow.
     */
    maxTaskCount?: pulumi.Input<number>;
    /**
     * The maximum number of external (worker) tasks that can be executed on this workflow.
     */
    maxWorkerTaskCount?: pulumi.Input<number>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * The user identifier who last updated the workflow definition.
     */
    modUser?: pulumi.Input<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * The name for this workflow. You can have multiple versions of the workflow with the same name. Name can only contain
     * letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.) or an underscore (_).
     */
    name?: pulumi.Input<string>;
    /**
     * The version of the workflow to support multiple versions.
     */
    nrVersion?: pulumi.Input<number>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    outputDefinitions?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionOutputDefinition>[]>;
    /**
     * The output mappings for the workflow. The schema for outputs of a workflow is defined using OutputDefinition. The
     * outputs for workflows that we want to export out at the end of the workflow can be mapped from task outputs, workflow
     * inputs, or workflow variables. Any task output, workflow input, or workflow variable can be mapped to a workflow output
     * as long as the types are compatible. The format to specify the mapping is '${ 'workflow | <taskName>'. 'output |input |
     * variable'.<name>[.<JsonPath>]}'. First, either the keyword 'workflow' or the name of the task in the workflow must be
     * given. If a task name is used, then it must be followed by the keyword 'output', if the keyword workflow was used, then
     * it must be followed by the keyword 'input' or 'variable'. Following this '<name>' must be the name of either input,
     * output, or variable that must be mapped as workflow output. The last part of the mapping can be an optional <JsonPath>
     * to extract specific fields on the data.
     */
    outputParameters?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionParent>[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionPermissionResource>[]>;
    /**
     * Type to capture the properties of a workflow definition. Some of these properties are passed to workflow execution
     * instance.
     */
    properties?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionProperty>[]>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionTag>[]>;
    tasks?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionTask>[]>;
    uiInputFilters?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionUiInputFilter>[]>;
    /**
     * This will hold the data needed for workflow to be rendered in the user interface.
     */
    uiRenderingData?: pulumi.Input<string>;
    /**
     * The current validation state and associated information for this workflow.
     */
    validationInformations?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionValidationInformation>[]>;
    variableDefinitions?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionVariableDefinition>[]>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionVersionContext>[]>;
    /**
     * A reference to a workflowWorkflowMetadata resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    workflowMetadatas?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionWorkflowMetadata>[]>;
}

/**
 * The set of arguments for constructing a WorkflowWorkflowDefinition resource.
 */
export interface WorkflowWorkflowDefinitionArgs {
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionAncestor>[]>;
    /**
     * A reference to a workflowCatalog resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    catalogs?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionCatalog>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    /**
     * A reference to a workflowWorkflowDefinition resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    clonedFroms?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionClonedFrom>[]>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The user identifier who created or cloned the workflow definition.
     */
    createUser?: pulumi.Input<string>;
    /**
     * When true this will be the workflow version that is used when a specific workflow definition version is not specified.
     * The default version is used when user executes a workflow without specifying a version or when workflow is included in
     * another workflow without a specific version. The very first workflow definition created with a name will be set as the
     * default version, after that user can explicitly set any version of the workflow definition as the default version.
     */
    defaultVersion?: pulumi.Input<boolean>;
    /**
     * The description for this workflow.
     */
    description?: pulumi.Input<string>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    inputDefinitions?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionInputDefinition>[]>;
    inputParameterSets?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionInputParameterSet>[]>;
    /**
     * A user friendly short name to identify the workflow. Label can only contain letters (a-z, A-Z), numbers (0-9), hyphen
     * (-), period (.), colon (:), space ( ), forward slash (/), or an underscore (_).
     */
    label?: pulumi.Input<string>;
    /**
     * License entitlement required to run this workflow. It is calculated based on the highest license requirement of all its
     * tasks. * `Base` - Base as a License type. It is default license type. * `Essential` - Essential as a License type. *
     * `Standard` - Standard as a License type. * `Advantage` - Advantage as a License type. * `Premier` - Premier as a License
     * type. * `IWO-Essential` - IWO-Essential as a License type. * `IWO-Advantage` - IWO-Advantage as a License type. *
     * `IWO-Premier` - IWO-Premier as a License type. * `IKS-Advantage` - IKS-Advantage as a License type. *
     * `INC-Premier-1GFixed` - Premier 1G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-10GFixed` - Premier 10G
     * Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-100GFixed` - Premier 100G Fixed license tier for
     * Intersight Nexus Cloud. * `INC-Premier-Mod4Slot` - Premier Modular 4 slot license tier for Intersight Nexus Cloud. *
     * `INC-Premier-Mod8Slot` - Premier Modular 8 slot license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsFixed` -
     * Premier D2Ops fixed license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsMod` - Premier D2Ops modular license
     * tier for Intersight Nexus Cloud. * `INC-Premier-CentralizedMod8Slot` - Premier modular license tier of switch type
     * CentralizedMod8Slot for Intersight Nexus Cloud. * `INC-Premier-DistributedMod8Slot` - Premier modular license tier of
     * switch type DistributedMod8Slot for Intersight Nexus Cloud. * `IntersightTrial` - Virtual dummy license type to indicate
     * trial. Used for UI display of trial mode Intersight tiers. * `IWOTrial` - Virtual dummy license type to indicate trial.
     * Used for UI display of trial mode IKS tiers. * `IKSTrial` - Virtual dummy license type to indicate trial. Used for UI
     * display of trial mode IWO tiers. * `INCTrial` - Virtual dummy license type to indicate trial. Used for UI display of
     * trial mode Nexus tiers.
     */
    licenseEntitlement?: pulumi.Input<string>;
    /**
     * The maximum number of tasks that can be executed on this workflow.
     */
    maxTaskCount?: pulumi.Input<number>;
    /**
     * The maximum number of external (worker) tasks that can be executed on this workflow.
     */
    maxWorkerTaskCount?: pulumi.Input<number>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * The user identifier who last updated the workflow definition.
     */
    modUser?: pulumi.Input<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * The name for this workflow. You can have multiple versions of the workflow with the same name. Name can only contain
     * letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.) or an underscore (_).
     */
    name?: pulumi.Input<string>;
    /**
     * The version of the workflow to support multiple versions.
     */
    nrVersion?: pulumi.Input<number>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    outputDefinitions?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionOutputDefinition>[]>;
    /**
     * The output mappings for the workflow. The schema for outputs of a workflow is defined using OutputDefinition. The
     * outputs for workflows that we want to export out at the end of the workflow can be mapped from task outputs, workflow
     * inputs, or workflow variables. Any task output, workflow input, or workflow variable can be mapped to a workflow output
     * as long as the types are compatible. The format to specify the mapping is '${ 'workflow | <taskName>'. 'output |input |
     * variable'.<name>[.<JsonPath>]}'. First, either the keyword 'workflow' or the name of the task in the workflow must be
     * given. If a task name is used, then it must be followed by the keyword 'output', if the keyword workflow was used, then
     * it must be followed by the keyword 'input' or 'variable'. Following this '<name>' must be the name of either input,
     * output, or variable that must be mapped as workflow output. The last part of the mapping can be an optional <JsonPath>
     * to extract specific fields on the data.
     */
    outputParameters?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionParent>[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionPermissionResource>[]>;
    /**
     * Type to capture the properties of a workflow definition. Some of these properties are passed to workflow execution
     * instance.
     */
    properties?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionProperty>[]>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionTag>[]>;
    tasks?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionTask>[]>;
    uiInputFilters?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionUiInputFilter>[]>;
    /**
     * This will hold the data needed for workflow to be rendered in the user interface.
     */
    uiRenderingData?: pulumi.Input<string>;
    /**
     * The current validation state and associated information for this workflow.
     */
    validationInformations?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionValidationInformation>[]>;
    variableDefinitions?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionVariableDefinition>[]>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionVersionContext>[]>;
    /**
     * A reference to a workflowWorkflowMetadata resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    workflowMetadatas?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowDefinitionWorkflowMetadata>[]>;
}
