// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageFlexUtilVirtualDrive(args?: GetStorageFlexUtilVirtualDriveArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageFlexUtilVirtualDriveResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageFlexUtilVirtualDrive:getStorageFlexUtilVirtualDrive", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "driveStatus": args.driveStatus,
        "driveType": args.driveType,
        "hostAccessible": args.hostAccessible,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "partitionId": args.partitionId,
        "partitionName": args.partitionName,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "residentImage": args.residentImage,
        "rn": args.rn,
        "sharedScope": args.sharedScope,
        "size": args.size,
        "storageFlexUtilController": args.storageFlexUtilController,
        "tags": args.tags,
        "versionContext": args.versionContext,
        "virtualDrive": args.virtualDrive,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageFlexUtilVirtualDrive.
 */
export interface GetStorageFlexUtilVirtualDriveArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageFlexUtilVirtualDriveAncestor[];
    classId?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    driveStatus?: string;
    driveType?: string;
    hostAccessible?: string;
    id?: string;
    inventoryDeviceInfo?: inputs.GetStorageFlexUtilVirtualDriveInventoryDeviceInfo;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageFlexUtilVirtualDriveParent;
    partitionId?: string;
    partitionName?: string;
    permissionResources?: inputs.GetStorageFlexUtilVirtualDrivePermissionResource[];
    registeredDevice?: inputs.GetStorageFlexUtilVirtualDriveRegisteredDevice;
    residentImage?: string;
    rn?: string;
    sharedScope?: string;
    size?: string;
    storageFlexUtilController?: inputs.GetStorageFlexUtilVirtualDriveStorageFlexUtilController;
    tags?: inputs.GetStorageFlexUtilVirtualDriveTag[];
    versionContext?: inputs.GetStorageFlexUtilVirtualDriveVersionContext;
    virtualDrive?: string;
}

/**
 * A collection of values returned by getStorageFlexUtilVirtualDrive.
 */
export interface GetStorageFlexUtilVirtualDriveResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageFlexUtilVirtualDriveAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly driveStatus?: string;
    readonly driveType?: string;
    readonly hostAccessible?: string;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetStorageFlexUtilVirtualDriveInventoryDeviceInfo;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageFlexUtilVirtualDriveParent;
    readonly partitionId?: string;
    readonly partitionName?: string;
    readonly permissionResources?: outputs.GetStorageFlexUtilVirtualDrivePermissionResource[];
    readonly registeredDevice?: outputs.GetStorageFlexUtilVirtualDriveRegisteredDevice;
    readonly residentImage?: string;
    readonly results: outputs.GetStorageFlexUtilVirtualDriveResult[];
    readonly rn?: string;
    readonly sharedScope?: string;
    readonly size?: string;
    readonly storageFlexUtilController?: outputs.GetStorageFlexUtilVirtualDriveStorageFlexUtilController;
    readonly tags?: outputs.GetStorageFlexUtilVirtualDriveTag[];
    readonly versionContext?: outputs.GetStorageFlexUtilVirtualDriveVersionContext;
    readonly virtualDrive?: string;
}
export function getStorageFlexUtilVirtualDriveOutput(args?: GetStorageFlexUtilVirtualDriveOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageFlexUtilVirtualDriveResult> {
    return pulumi.output(args).apply((a: any) => getStorageFlexUtilVirtualDrive(a, opts))
}

/**
 * A collection of arguments for invoking getStorageFlexUtilVirtualDrive.
 */
export interface GetStorageFlexUtilVirtualDriveOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageFlexUtilVirtualDriveAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    driveStatus?: pulumi.Input<string>;
    driveType?: pulumi.Input<string>;
    hostAccessible?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetStorageFlexUtilVirtualDriveInventoryDeviceInfoArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageFlexUtilVirtualDriveParentArgs>;
    partitionId?: pulumi.Input<string>;
    partitionName?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageFlexUtilVirtualDrivePermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetStorageFlexUtilVirtualDriveRegisteredDeviceArgs>;
    residentImage?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    size?: pulumi.Input<string>;
    storageFlexUtilController?: pulumi.Input<inputs.GetStorageFlexUtilVirtualDriveStorageFlexUtilControllerArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageFlexUtilVirtualDriveTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetStorageFlexUtilVirtualDriveVersionContextArgs>;
    virtualDrive?: pulumi.Input<string>;
}
