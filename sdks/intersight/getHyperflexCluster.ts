// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getHyperflexCluster(args?: GetHyperflexClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetHyperflexClusterResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getHyperflexCluster:getHyperflexCluster", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "alarmSummary": args.alarmSummary,
        "alarms": args.alarms,
        "ancestors": args.ancestors,
        "associatedProfile": args.associatedProfile,
        "capability": args.capability,
        "capacityRunway": args.capacityRunway,
        "childClusters": args.childClusters,
        "classId": args.classId,
        "clusterName": args.clusterName,
        "clusterPurpose": args.clusterPurpose,
        "clusterType": args.clusterType,
        "clusterUuid": args.clusterUuid,
        "computeNodeCount": args.computeNodeCount,
        "convergedNodeCount": args.convergedNodeCount,
        "createTime": args.createTime,
        "deploymentType": args.deploymentType,
        "deviceId": args.deviceId,
        "dnsServers": args.dnsServers,
        "domainGroupMoid": args.domainGroupMoid,
        "driveType": args.driveType,
        "encryption": args.encryption,
        "encryptionStatus": args.encryptionStatus,
        "fltAggr": args.fltAggr,
        "health": args.health,
        "hxVersion": args.hxVersion,
        "hxdpBuildVersion": args.hxdpBuildVersion,
        "hypervisorType": args.hypervisorType,
        "hypervisorVersion": args.hypervisorVersion,
        "id": args.id,
        "identity": args.identity,
        "license": args.license,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "networkConfiguration": args.networkConfiguration,
        "nodes": args.nodes,
        "ntpServers": args.ntpServers,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "parentCluster": args.parentCluster,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "status": args.status,
        "storageCapacity": args.storageCapacity,
        "storageClientIpPools": args.storageClientIpPools,
        "storageClientVrf": args.storageClientVrf,
        "storageContainers": args.storageContainers,
        "storageNodeCount": args.storageNodeCount,
        "storageUtilization": args.storageUtilization,
        "summary": args.summary,
        "tags": args.tags,
        "upgradeStatus": args.upgradeStatus,
        "uplinkSpeed": args.uplinkSpeed,
        "utilizationPercentage": args.utilizationPercentage,
        "utilizationTrendPercentage": args.utilizationTrendPercentage,
        "vcenterConfiguration": args.vcenterConfiguration,
        "versionContext": args.versionContext,
        "vmCount": args.vmCount,
        "volumes": args.volumes,
        "zoneType": args.zoneType,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getHyperflexCluster.
 */
export interface GetHyperflexClusterArgs {
    accountMoid?: string;
    additionalProperties?: string;
    alarmSummary?: inputs.GetHyperflexClusterAlarmSummary;
    alarms?: inputs.GetHyperflexClusterAlarm[];
    ancestors?: inputs.GetHyperflexClusterAncestor[];
    associatedProfile?: inputs.GetHyperflexClusterAssociatedProfile;
    capability?: inputs.GetHyperflexClusterCapability;
    capacityRunway?: number;
    childClusters?: inputs.GetHyperflexClusterChildCluster[];
    classId?: string;
    clusterName?: string;
    clusterPurpose?: string;
    clusterType?: number;
    clusterUuid?: string;
    computeNodeCount?: number;
    convergedNodeCount?: number;
    createTime?: string;
    deploymentType?: string;
    deviceId?: string;
    dnsServers?: string[];
    domainGroupMoid?: string;
    driveType?: string;
    encryption?: inputs.GetHyperflexClusterEncryption;
    encryptionStatus?: string;
    fltAggr?: number;
    health?: inputs.GetHyperflexClusterHealth;
    hxVersion?: string;
    hxdpBuildVersion?: string;
    hypervisorType?: string;
    hypervisorVersion?: string;
    id?: string;
    identity?: string;
    license?: inputs.GetHyperflexClusterLicense;
    modTime?: string;
    moid?: string;
    name?: string;
    networkConfiguration?: inputs.GetHyperflexClusterNetworkConfiguration;
    nodes?: inputs.GetHyperflexClusterNode[];
    ntpServers?: string[];
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetHyperflexClusterParent;
    parentCluster?: inputs.GetHyperflexClusterParentCluster;
    permissionResources?: inputs.GetHyperflexClusterPermissionResource[];
    registeredDevice?: inputs.GetHyperflexClusterRegisteredDevice;
    sharedScope?: string;
    status?: string;
    storageCapacity?: number;
    storageClientIpPools?: inputs.GetHyperflexClusterStorageClientIpPool[];
    storageClientVrf?: inputs.GetHyperflexClusterStorageClientVrf;
    storageContainers?: inputs.GetHyperflexClusterStorageContainer[];
    storageNodeCount?: number;
    storageUtilization?: number;
    summary?: inputs.GetHyperflexClusterSummary;
    tags?: inputs.GetHyperflexClusterTag[];
    upgradeStatus?: string;
    uplinkSpeed?: string;
    utilizationPercentage?: number;
    utilizationTrendPercentage?: number;
    vcenterConfiguration?: inputs.GetHyperflexClusterVcenterConfiguration;
    versionContext?: inputs.GetHyperflexClusterVersionContext;
    vmCount?: number;
    volumes?: inputs.GetHyperflexClusterVolume[];
    zoneType?: string;
}

/**
 * A collection of values returned by getHyperflexCluster.
 */
export interface GetHyperflexClusterResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly alarmSummary?: outputs.GetHyperflexClusterAlarmSummary;
    readonly alarms?: outputs.GetHyperflexClusterAlarm[];
    readonly ancestors?: outputs.GetHyperflexClusterAncestor[];
    readonly associatedProfile?: outputs.GetHyperflexClusterAssociatedProfile;
    readonly capability?: outputs.GetHyperflexClusterCapability;
    readonly capacityRunway?: number;
    readonly childClusters?: outputs.GetHyperflexClusterChildCluster[];
    readonly classId?: string;
    readonly clusterName?: string;
    readonly clusterPurpose?: string;
    readonly clusterType?: number;
    readonly clusterUuid?: string;
    readonly computeNodeCount?: number;
    readonly convergedNodeCount?: number;
    readonly createTime?: string;
    readonly deploymentType?: string;
    readonly deviceId?: string;
    readonly dnsServers?: string[];
    readonly domainGroupMoid?: string;
    readonly driveType?: string;
    readonly encryption?: outputs.GetHyperflexClusterEncryption;
    readonly encryptionStatus?: string;
    readonly fltAggr?: number;
    readonly health?: outputs.GetHyperflexClusterHealth;
    readonly hxVersion?: string;
    readonly hxdpBuildVersion?: string;
    readonly hypervisorType?: string;
    readonly hypervisorVersion?: string;
    readonly id: string;
    readonly identity?: string;
    readonly license?: outputs.GetHyperflexClusterLicense;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly networkConfiguration?: outputs.GetHyperflexClusterNetworkConfiguration;
    readonly nodes?: outputs.GetHyperflexClusterNode[];
    readonly ntpServers?: string[];
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetHyperflexClusterParent;
    readonly parentCluster?: outputs.GetHyperflexClusterParentCluster;
    readonly permissionResources?: outputs.GetHyperflexClusterPermissionResource[];
    readonly registeredDevice?: outputs.GetHyperflexClusterRegisteredDevice;
    readonly results: outputs.GetHyperflexClusterResult[];
    readonly sharedScope?: string;
    readonly status?: string;
    readonly storageCapacity?: number;
    readonly storageClientIpPools?: outputs.GetHyperflexClusterStorageClientIpPool[];
    readonly storageClientVrf?: outputs.GetHyperflexClusterStorageClientVrf;
    readonly storageContainers?: outputs.GetHyperflexClusterStorageContainer[];
    readonly storageNodeCount?: number;
    readonly storageUtilization?: number;
    readonly summary?: outputs.GetHyperflexClusterSummary;
    readonly tags?: outputs.GetHyperflexClusterTag[];
    readonly upgradeStatus?: string;
    readonly uplinkSpeed?: string;
    readonly utilizationPercentage?: number;
    readonly utilizationTrendPercentage?: number;
    readonly vcenterConfiguration?: outputs.GetHyperflexClusterVcenterConfiguration;
    readonly versionContext?: outputs.GetHyperflexClusterVersionContext;
    readonly vmCount?: number;
    readonly volumes?: outputs.GetHyperflexClusterVolume[];
    readonly zoneType?: string;
}
export function getHyperflexClusterOutput(args?: GetHyperflexClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetHyperflexClusterResult> {
    return pulumi.output(args).apply((a: any) => getHyperflexCluster(a, opts))
}

/**
 * A collection of arguments for invoking getHyperflexCluster.
 */
export interface GetHyperflexClusterOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    alarmSummary?: pulumi.Input<inputs.GetHyperflexClusterAlarmSummaryArgs>;
    alarms?: pulumi.Input<pulumi.Input<inputs.GetHyperflexClusterAlarmArgs>[]>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetHyperflexClusterAncestorArgs>[]>;
    associatedProfile?: pulumi.Input<inputs.GetHyperflexClusterAssociatedProfileArgs>;
    capability?: pulumi.Input<inputs.GetHyperflexClusterCapabilityArgs>;
    capacityRunway?: pulumi.Input<number>;
    childClusters?: pulumi.Input<pulumi.Input<inputs.GetHyperflexClusterChildClusterArgs>[]>;
    classId?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterPurpose?: pulumi.Input<string>;
    clusterType?: pulumi.Input<number>;
    clusterUuid?: pulumi.Input<string>;
    computeNodeCount?: pulumi.Input<number>;
    convergedNodeCount?: pulumi.Input<number>;
    createTime?: pulumi.Input<string>;
    deploymentType?: pulumi.Input<string>;
    deviceId?: pulumi.Input<string>;
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    domainGroupMoid?: pulumi.Input<string>;
    driveType?: pulumi.Input<string>;
    encryption?: pulumi.Input<inputs.GetHyperflexClusterEncryptionArgs>;
    encryptionStatus?: pulumi.Input<string>;
    fltAggr?: pulumi.Input<number>;
    health?: pulumi.Input<inputs.GetHyperflexClusterHealthArgs>;
    hxVersion?: pulumi.Input<string>;
    hxdpBuildVersion?: pulumi.Input<string>;
    hypervisorType?: pulumi.Input<string>;
    hypervisorVersion?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    identity?: pulumi.Input<string>;
    license?: pulumi.Input<inputs.GetHyperflexClusterLicenseArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkConfiguration?: pulumi.Input<inputs.GetHyperflexClusterNetworkConfigurationArgs>;
    nodes?: pulumi.Input<pulumi.Input<inputs.GetHyperflexClusterNodeArgs>[]>;
    ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetHyperflexClusterParentArgs>;
    parentCluster?: pulumi.Input<inputs.GetHyperflexClusterParentClusterArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetHyperflexClusterPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetHyperflexClusterRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    storageCapacity?: pulumi.Input<number>;
    storageClientIpPools?: pulumi.Input<pulumi.Input<inputs.GetHyperflexClusterStorageClientIpPoolArgs>[]>;
    storageClientVrf?: pulumi.Input<inputs.GetHyperflexClusterStorageClientVrfArgs>;
    storageContainers?: pulumi.Input<pulumi.Input<inputs.GetHyperflexClusterStorageContainerArgs>[]>;
    storageNodeCount?: pulumi.Input<number>;
    storageUtilization?: pulumi.Input<number>;
    summary?: pulumi.Input<inputs.GetHyperflexClusterSummaryArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetHyperflexClusterTagArgs>[]>;
    upgradeStatus?: pulumi.Input<string>;
    uplinkSpeed?: pulumi.Input<string>;
    utilizationPercentage?: pulumi.Input<number>;
    utilizationTrendPercentage?: pulumi.Input<number>;
    vcenterConfiguration?: pulumi.Input<inputs.GetHyperflexClusterVcenterConfigurationArgs>;
    versionContext?: pulumi.Input<inputs.GetHyperflexClusterVersionContextArgs>;
    vmCount?: pulumi.Input<number>;
    volumes?: pulumi.Input<pulumi.Input<inputs.GetHyperflexClusterVolumeArgs>[]>;
    zoneType?: pulumi.Input<string>;
}
