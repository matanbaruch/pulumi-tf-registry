// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNetworkVlanPortInfo(args?: GetNetworkVlanPortInfoArgs, opts?: pulumi.InvokeOptions): Promise<GetNetworkVlanPortInfoResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getNetworkVlanPortInfo:getNetworkVlanPortInfo", {
        "accessVlanPortCount": args.accessVlanPortCount,
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "borderVlanPortCount": args.borderVlanPortCount,
        "classId": args.classId,
        "compressedOptimizationSetsValue": args.compressedOptimizationSetsValue,
        "compressedVlanPortCount": args.compressedVlanPortCount,
        "compressedVlanPortCountValue": args.compressedVlanPortCountValue,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "modTime": args.modTime,
        "moid": args.moid,
        "networkElement": args.networkElement,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "totalVlanPortCount": args.totalVlanPortCount,
        "uncompressedVlanPortCount": args.uncompressedVlanPortCount,
        "uncompressedVlanPortCountValue": args.uncompressedVlanPortCountValue,
        "versionContext": args.versionContext,
        "vlanPortLimit": args.vlanPortLimit,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNetworkVlanPortInfo.
 */
export interface GetNetworkVlanPortInfoArgs {
    accessVlanPortCount?: number;
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetNetworkVlanPortInfoAncestor[];
    borderVlanPortCount?: number;
    classId?: string;
    compressedOptimizationSetsValue?: number;
    compressedVlanPortCount?: string;
    compressedVlanPortCountValue?: number;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    id?: string;
    inventoryDeviceInfo?: inputs.GetNetworkVlanPortInfoInventoryDeviceInfo;
    modTime?: string;
    moid?: string;
    networkElement?: inputs.GetNetworkVlanPortInfoNetworkElement;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetNetworkVlanPortInfoParent;
    permissionResources?: inputs.GetNetworkVlanPortInfoPermissionResource[];
    registeredDevice?: inputs.GetNetworkVlanPortInfoRegisteredDevice;
    rn?: string;
    sharedScope?: string;
    tags?: inputs.GetNetworkVlanPortInfoTag[];
    totalVlanPortCount?: number;
    uncompressedVlanPortCount?: string;
    uncompressedVlanPortCountValue?: number;
    versionContext?: inputs.GetNetworkVlanPortInfoVersionContext;
    vlanPortLimit?: number;
}

/**
 * A collection of values returned by getNetworkVlanPortInfo.
 */
export interface GetNetworkVlanPortInfoResult {
    readonly accessVlanPortCount?: number;
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetNetworkVlanPortInfoAncestor[];
    readonly borderVlanPortCount?: number;
    readonly classId?: string;
    readonly compressedOptimizationSetsValue?: number;
    readonly compressedVlanPortCount?: string;
    readonly compressedVlanPortCountValue?: number;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetNetworkVlanPortInfoInventoryDeviceInfo;
    readonly modTime?: string;
    readonly moid?: string;
    readonly networkElement?: outputs.GetNetworkVlanPortInfoNetworkElement;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetNetworkVlanPortInfoParent;
    readonly permissionResources?: outputs.GetNetworkVlanPortInfoPermissionResource[];
    readonly registeredDevice?: outputs.GetNetworkVlanPortInfoRegisteredDevice;
    readonly results: outputs.GetNetworkVlanPortInfoResult[];
    readonly rn?: string;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetNetworkVlanPortInfoTag[];
    readonly totalVlanPortCount?: number;
    readonly uncompressedVlanPortCount?: string;
    readonly uncompressedVlanPortCountValue?: number;
    readonly versionContext?: outputs.GetNetworkVlanPortInfoVersionContext;
    readonly vlanPortLimit?: number;
}
export function getNetworkVlanPortInfoOutput(args?: GetNetworkVlanPortInfoOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkVlanPortInfoResult> {
    return pulumi.output(args).apply((a: any) => getNetworkVlanPortInfo(a, opts))
}

/**
 * A collection of arguments for invoking getNetworkVlanPortInfo.
 */
export interface GetNetworkVlanPortInfoOutputArgs {
    accessVlanPortCount?: pulumi.Input<number>;
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetNetworkVlanPortInfoAncestorArgs>[]>;
    borderVlanPortCount?: pulumi.Input<number>;
    classId?: pulumi.Input<string>;
    compressedOptimizationSetsValue?: pulumi.Input<number>;
    compressedVlanPortCount?: pulumi.Input<string>;
    compressedVlanPortCountValue?: pulumi.Input<number>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetNetworkVlanPortInfoInventoryDeviceInfoArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    networkElement?: pulumi.Input<inputs.GetNetworkVlanPortInfoNetworkElementArgs>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetNetworkVlanPortInfoParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetNetworkVlanPortInfoPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetNetworkVlanPortInfoRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetNetworkVlanPortInfoTagArgs>[]>;
    totalVlanPortCount?: pulumi.Input<number>;
    uncompressedVlanPortCount?: pulumi.Input<string>;
    uncompressedVlanPortCountValue?: pulumi.Input<number>;
    versionContext?: pulumi.Input<inputs.GetNetworkVlanPortInfoVersionContextArgs>;
    vlanPortLimit?: pulumi.Input<number>;
}
