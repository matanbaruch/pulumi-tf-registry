// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageHitachiHostLun(args?: GetStorageHitachiHostLunArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageHitachiHostLunResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageHitachiHostLun:getStorageHitachiHostLun", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "array": args.array,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "hlu": args.hlu,
        "host": args.host,
        "hostName": args.hostName,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "portId": args.portId,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
        "volume": args.volume,
        "volumeName": args.volumeName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageHitachiHostLun.
 */
export interface GetStorageHitachiHostLunArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageHitachiHostLunAncestor[];
    array?: inputs.GetStorageHitachiHostLunArray;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    hlu?: number;
    host?: inputs.GetStorageHitachiHostLunHost;
    hostName?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageHitachiHostLunParent;
    permissionResources?: inputs.GetStorageHitachiHostLunPermissionResource[];
    portId?: string;
    registeredDevice?: inputs.GetStorageHitachiHostLunRegisteredDevice;
    sharedScope?: string;
    tags?: inputs.GetStorageHitachiHostLunTag[];
    versionContext?: inputs.GetStorageHitachiHostLunVersionContext;
    volume?: inputs.GetStorageHitachiHostLunVolume;
    volumeName?: string;
}

/**
 * A collection of values returned by getStorageHitachiHostLun.
 */
export interface GetStorageHitachiHostLunResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageHitachiHostLunAncestor[];
    readonly array?: outputs.GetStorageHitachiHostLunArray;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly hlu?: number;
    readonly host?: outputs.GetStorageHitachiHostLunHost;
    readonly hostName?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageHitachiHostLunParent;
    readonly permissionResources?: outputs.GetStorageHitachiHostLunPermissionResource[];
    readonly portId?: string;
    readonly registeredDevice?: outputs.GetStorageHitachiHostLunRegisteredDevice;
    readonly results: outputs.GetStorageHitachiHostLunResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetStorageHitachiHostLunTag[];
    readonly versionContext?: outputs.GetStorageHitachiHostLunVersionContext;
    readonly volume?: outputs.GetStorageHitachiHostLunVolume;
    readonly volumeName?: string;
}
export function getStorageHitachiHostLunOutput(args?: GetStorageHitachiHostLunOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageHitachiHostLunResult> {
    return pulumi.output(args).apply((a: any) => getStorageHitachiHostLun(a, opts))
}

/**
 * A collection of arguments for invoking getStorageHitachiHostLun.
 */
export interface GetStorageHitachiHostLunOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiHostLunAncestorArgs>[]>;
    array?: pulumi.Input<inputs.GetStorageHitachiHostLunArrayArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    hlu?: pulumi.Input<number>;
    host?: pulumi.Input<inputs.GetStorageHitachiHostLunHostArgs>;
    hostName?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageHitachiHostLunParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiHostLunPermissionResourceArgs>[]>;
    portId?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetStorageHitachiHostLunRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiHostLunTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetStorageHitachiHostLunVersionContextArgs>;
    volume?: pulumi.Input<inputs.GetStorageHitachiHostLunVolumeArgs>;
    volumeName?: pulumi.Input<string>;
}
