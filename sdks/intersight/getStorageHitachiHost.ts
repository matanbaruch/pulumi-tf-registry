// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageHitachiHost(args?: GetStorageHitachiHostArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageHitachiHostResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageHitachiHost:getStorageHitachiHost", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "array": args.array,
        "authenticationMode": args.authenticationMode,
        "classId": args.classId,
        "createTime": args.createTime,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "hostGroupId": args.hostGroupId,
        "hostGroupNumber": args.hostGroupNumber,
        "hostModeOptions": args.hostModeOptions,
        "id": args.id,
        "initiators": args.initiators,
        "isChapMutual": args.isChapMutual,
        "iscsiName": args.iscsiName,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "osType": args.osType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "portId": args.portId,
        "portLunSecurity": args.portLunSecurity,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "storageUtilization": args.storageUtilization,
        "tags": args.tags,
        "type": args.type,
        "versionContext": args.versionContext,
        "wwn": args.wwn,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageHitachiHost.
 */
export interface GetStorageHitachiHostArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageHitachiHostAncestor[];
    array?: inputs.GetStorageHitachiHostArray;
    authenticationMode?: string;
    classId?: string;
    createTime?: string;
    description?: string;
    domainGroupMoid?: string;
    hostGroupId?: string;
    hostGroupNumber?: number;
    hostModeOptions?: number[];
    id?: string;
    initiators?: inputs.GetStorageHitachiHostInitiator[];
    isChapMutual?: boolean;
    iscsiName?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    osType?: string;
    owners?: string[];
    parent?: inputs.GetStorageHitachiHostParent;
    permissionResources?: inputs.GetStorageHitachiHostPermissionResource[];
    portId?: string;
    portLunSecurity?: boolean;
    registeredDevice?: inputs.GetStorageHitachiHostRegisteredDevice;
    sharedScope?: string;
    storageUtilization?: inputs.GetStorageHitachiHostStorageUtilization;
    tags?: inputs.GetStorageHitachiHostTag[];
    type?: string;
    versionContext?: inputs.GetStorageHitachiHostVersionContext;
    wwn?: string;
}

/**
 * A collection of values returned by getStorageHitachiHost.
 */
export interface GetStorageHitachiHostResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageHitachiHostAncestor[];
    readonly array?: outputs.GetStorageHitachiHostArray;
    readonly authenticationMode?: string;
    readonly classId?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly hostGroupId?: string;
    readonly hostGroupNumber?: number;
    readonly hostModeOptions?: number[];
    readonly id: string;
    readonly initiators?: outputs.GetStorageHitachiHostInitiator[];
    readonly isChapMutual?: boolean;
    readonly iscsiName?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly osType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageHitachiHostParent;
    readonly permissionResources?: outputs.GetStorageHitachiHostPermissionResource[];
    readonly portId?: string;
    readonly portLunSecurity?: boolean;
    readonly registeredDevice?: outputs.GetStorageHitachiHostRegisteredDevice;
    readonly results: outputs.GetStorageHitachiHostResult[];
    readonly sharedScope?: string;
    readonly storageUtilization?: outputs.GetStorageHitachiHostStorageUtilization;
    readonly tags?: outputs.GetStorageHitachiHostTag[];
    readonly type?: string;
    readonly versionContext?: outputs.GetStorageHitachiHostVersionContext;
    readonly wwn?: string;
}
export function getStorageHitachiHostOutput(args?: GetStorageHitachiHostOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageHitachiHostResult> {
    return pulumi.output(args).apply((a: any) => getStorageHitachiHost(a, opts))
}

/**
 * A collection of arguments for invoking getStorageHitachiHost.
 */
export interface GetStorageHitachiHostOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiHostAncestorArgs>[]>;
    array?: pulumi.Input<inputs.GetStorageHitachiHostArrayArgs>;
    authenticationMode?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    hostGroupId?: pulumi.Input<string>;
    hostGroupNumber?: pulumi.Input<number>;
    hostModeOptions?: pulumi.Input<pulumi.Input<number>[]>;
    id?: pulumi.Input<string>;
    initiators?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiHostInitiatorArgs>[]>;
    isChapMutual?: pulumi.Input<boolean>;
    iscsiName?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    osType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageHitachiHostParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiHostPermissionResourceArgs>[]>;
    portId?: pulumi.Input<string>;
    portLunSecurity?: pulumi.Input<boolean>;
    registeredDevice?: pulumi.Input<inputs.GetStorageHitachiHostRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    storageUtilization?: pulumi.Input<inputs.GetStorageHitachiHostStorageUtilizationArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiHostTagArgs>[]>;
    type?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetStorageHitachiHostVersionContextArgs>;
    wwn?: pulumi.Input<string>;
}
