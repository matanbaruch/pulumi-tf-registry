// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEquipmentSystemIoController(args?: GetEquipmentSystemIoControllerArgs, opts?: pulumi.InvokeOptions): Promise<GetEquipmentSystemIoControllerResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getEquipmentSystemIoController:getEquipmentSystemIoController", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "chassisId": args.chassisId,
        "classId": args.classId,
        "cmc": args.cmc,
        "connectionPath": args.connectionPath,
        "connectionStatus": args.connectionStatus,
        "createTime": args.createTime,
        "description": args.description,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "equipmentChassis": args.equipmentChassis,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "isUpgraded": args.isUpgraded,
        "managingInstance": args.managingInstance,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "objectType": args.objectType,
        "operState": args.operState,
        "owners": args.owners,
        "parent": args.parent,
        "partNumber": args.partNumber,
        "permissionResources": args.permissionResources,
        "pid": args.pid,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "registeredDevice": args.registeredDevice,
        "revision": args.revision,
        "rn": args.rn,
        "serial": args.serial,
        "sharedIoModule": args.sharedIoModule,
        "sharedScope": args.sharedScope,
        "systemIoControllerId": args.systemIoControllerId,
        "tags": args.tags,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEquipmentSystemIoController.
 */
export interface GetEquipmentSystemIoControllerArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetEquipmentSystemIoControllerAncestor[];
    chassisId?: string;
    classId?: string;
    cmc?: inputs.GetEquipmentSystemIoControllerCmc;
    connectionPath?: string;
    connectionStatus?: string;
    createTime?: string;
    description?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    equipmentChassis?: inputs.GetEquipmentSystemIoControllerEquipmentChassis;
    id?: string;
    inventoryDeviceInfo?: inputs.GetEquipmentSystemIoControllerInventoryDeviceInfo;
    isUpgraded?: boolean;
    managingInstance?: string;
    modTime?: string;
    model?: string;
    moid?: string;
    objectType?: string;
    operState?: string;
    owners?: string[];
    parent?: inputs.GetEquipmentSystemIoControllerParent;
    partNumber?: string;
    permissionResources?: inputs.GetEquipmentSystemIoControllerPermissionResource[];
    pid?: string;
    presence?: string;
    previousFru?: inputs.GetEquipmentSystemIoControllerPreviousFru;
    registeredDevice?: inputs.GetEquipmentSystemIoControllerRegisteredDevice;
    revision?: string;
    rn?: string;
    serial?: string;
    sharedIoModule?: inputs.GetEquipmentSystemIoControllerSharedIoModule;
    sharedScope?: string;
    systemIoControllerId?: number;
    tags?: inputs.GetEquipmentSystemIoControllerTag[];
    vendor?: string;
    versionContext?: inputs.GetEquipmentSystemIoControllerVersionContext;
}

/**
 * A collection of values returned by getEquipmentSystemIoController.
 */
export interface GetEquipmentSystemIoControllerResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetEquipmentSystemIoControllerAncestor[];
    readonly chassisId?: string;
    readonly classId?: string;
    readonly cmc?: outputs.GetEquipmentSystemIoControllerCmc;
    readonly connectionPath?: string;
    readonly connectionStatus?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly equipmentChassis?: outputs.GetEquipmentSystemIoControllerEquipmentChassis;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetEquipmentSystemIoControllerInventoryDeviceInfo;
    readonly isUpgraded?: boolean;
    readonly managingInstance?: string;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly operState?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetEquipmentSystemIoControllerParent;
    readonly partNumber?: string;
    readonly permissionResources?: outputs.GetEquipmentSystemIoControllerPermissionResource[];
    readonly pid?: string;
    readonly presence?: string;
    readonly previousFru?: outputs.GetEquipmentSystemIoControllerPreviousFru;
    readonly registeredDevice?: outputs.GetEquipmentSystemIoControllerRegisteredDevice;
    readonly results: outputs.GetEquipmentSystemIoControllerResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly serial?: string;
    readonly sharedIoModule?: outputs.GetEquipmentSystemIoControllerSharedIoModule;
    readonly sharedScope?: string;
    readonly systemIoControllerId?: number;
    readonly tags?: outputs.GetEquipmentSystemIoControllerTag[];
    readonly vendor?: string;
    readonly versionContext?: outputs.GetEquipmentSystemIoControllerVersionContext;
}
export function getEquipmentSystemIoControllerOutput(args?: GetEquipmentSystemIoControllerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEquipmentSystemIoControllerResult> {
    return pulumi.output(args).apply((a: any) => getEquipmentSystemIoController(a, opts))
}

/**
 * A collection of arguments for invoking getEquipmentSystemIoController.
 */
export interface GetEquipmentSystemIoControllerOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetEquipmentSystemIoControllerAncestorArgs>[]>;
    chassisId?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    cmc?: pulumi.Input<inputs.GetEquipmentSystemIoControllerCmcArgs>;
    connectionPath?: pulumi.Input<string>;
    connectionStatus?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    equipmentChassis?: pulumi.Input<inputs.GetEquipmentSystemIoControllerEquipmentChassisArgs>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetEquipmentSystemIoControllerInventoryDeviceInfoArgs>;
    isUpgraded?: pulumi.Input<boolean>;
    managingInstance?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operState?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetEquipmentSystemIoControllerParentArgs>;
    partNumber?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetEquipmentSystemIoControllerPermissionResourceArgs>[]>;
    pid?: pulumi.Input<string>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetEquipmentSystemIoControllerPreviousFruArgs>;
    registeredDevice?: pulumi.Input<inputs.GetEquipmentSystemIoControllerRegisteredDeviceArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    sharedIoModule?: pulumi.Input<inputs.GetEquipmentSystemIoControllerSharedIoModuleArgs>;
    sharedScope?: pulumi.Input<string>;
    systemIoControllerId?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetEquipmentSystemIoControllerTagArgs>[]>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetEquipmentSystemIoControllerVersionContextArgs>;
}
