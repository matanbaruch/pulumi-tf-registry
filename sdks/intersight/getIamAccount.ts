// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIamAccount(args?: GetIamAccountArgs, opts?: pulumi.InvokeOptions): Promise<GetIamAccountResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getIamAccount:getIamAccount", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "appRegistrations": args.appRegistrations,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "domainGroups": args.domainGroups,
        "endPointRoles": args.endPointRoles,
        "id": args.id,
        "idpreferences": args.idpreferences,
        "idps": args.idps,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "permissions": args.permissions,
        "privilegeSets": args.privilegeSets,
        "privileges": args.privileges,
        "regions": args.regions,
        "resourceLimits": args.resourceLimits,
        "roles": args.roles,
        "securityHolder": args.securityHolder,
        "sessionLimits": args.sessionLimits,
        "sharedScope": args.sharedScope,
        "singleAdminLockout": args.singleAdminLockout,
        "status": args.status,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIamAccount.
 */
export interface GetIamAccountArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetIamAccountAncestor[];
    appRegistrations?: inputs.GetIamAccountAppRegistration[];
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    domainGroups?: inputs.GetIamAccountDomainGroup[];
    endPointRoles?: inputs.GetIamAccountEndPointRole[];
    id?: string;
    idpreferences?: inputs.GetIamAccountIdpreference[];
    idps?: inputs.GetIamAccountIdp[];
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetIamAccountParent;
    permissionResources?: inputs.GetIamAccountPermissionResource[];
    permissions?: inputs.GetIamAccountPermission[];
    privilegeSets?: inputs.GetIamAccountPrivilegeSet[];
    privileges?: inputs.GetIamAccountPrivilege[];
    regions?: string[];
    resourceLimits?: inputs.GetIamAccountResourceLimits;
    roles?: inputs.GetIamAccountRole[];
    securityHolder?: inputs.GetIamAccountSecurityHolder;
    sessionLimits?: inputs.GetIamAccountSessionLimits;
    sharedScope?: string;
    singleAdminLockout?: boolean;
    status?: string;
    tags?: inputs.GetIamAccountTag[];
    versionContext?: inputs.GetIamAccountVersionContext;
}

/**
 * A collection of values returned by getIamAccount.
 */
export interface GetIamAccountResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetIamAccountAncestor[];
    readonly appRegistrations?: outputs.GetIamAccountAppRegistration[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly domainGroups?: outputs.GetIamAccountDomainGroup[];
    readonly endPointRoles?: outputs.GetIamAccountEndPointRole[];
    readonly id: string;
    readonly idpreferences?: outputs.GetIamAccountIdpreference[];
    readonly idps?: outputs.GetIamAccountIdp[];
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetIamAccountParent;
    readonly permissionResources?: outputs.GetIamAccountPermissionResource[];
    readonly permissions?: outputs.GetIamAccountPermission[];
    readonly privilegeSets?: outputs.GetIamAccountPrivilegeSet[];
    readonly privileges?: outputs.GetIamAccountPrivilege[];
    readonly regions?: string[];
    readonly resourceLimits?: outputs.GetIamAccountResourceLimits;
    readonly results: outputs.GetIamAccountResult[];
    readonly roles?: outputs.GetIamAccountRole[];
    readonly securityHolder?: outputs.GetIamAccountSecurityHolder;
    readonly sessionLimits?: outputs.GetIamAccountSessionLimits;
    readonly sharedScope?: string;
    readonly singleAdminLockout?: boolean;
    readonly status?: string;
    readonly tags?: outputs.GetIamAccountTag[];
    readonly versionContext?: outputs.GetIamAccountVersionContext;
}
export function getIamAccountOutput(args?: GetIamAccountOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIamAccountResult> {
    return pulumi.output(args).apply((a: any) => getIamAccount(a, opts))
}

/**
 * A collection of arguments for invoking getIamAccount.
 */
export interface GetIamAccountOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetIamAccountAncestorArgs>[]>;
    appRegistrations?: pulumi.Input<pulumi.Input<inputs.GetIamAccountAppRegistrationArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    domainGroups?: pulumi.Input<pulumi.Input<inputs.GetIamAccountDomainGroupArgs>[]>;
    endPointRoles?: pulumi.Input<pulumi.Input<inputs.GetIamAccountEndPointRoleArgs>[]>;
    id?: pulumi.Input<string>;
    idpreferences?: pulumi.Input<pulumi.Input<inputs.GetIamAccountIdpreferenceArgs>[]>;
    idps?: pulumi.Input<pulumi.Input<inputs.GetIamAccountIdpArgs>[]>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetIamAccountParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetIamAccountPermissionResourceArgs>[]>;
    permissions?: pulumi.Input<pulumi.Input<inputs.GetIamAccountPermissionArgs>[]>;
    privilegeSets?: pulumi.Input<pulumi.Input<inputs.GetIamAccountPrivilegeSetArgs>[]>;
    privileges?: pulumi.Input<pulumi.Input<inputs.GetIamAccountPrivilegeArgs>[]>;
    regions?: pulumi.Input<pulumi.Input<string>[]>;
    resourceLimits?: pulumi.Input<inputs.GetIamAccountResourceLimitsArgs>;
    roles?: pulumi.Input<pulumi.Input<inputs.GetIamAccountRoleArgs>[]>;
    securityHolder?: pulumi.Input<inputs.GetIamAccountSecurityHolderArgs>;
    sessionLimits?: pulumi.Input<inputs.GetIamAccountSessionLimitsArgs>;
    sharedScope?: pulumi.Input<string>;
    singleAdminLockout?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetIamAccountTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetIamAccountVersionContextArgs>;
}
