// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVirtualizationVmwareHostGpu(args?: GetVirtualizationVmwareHostGpuArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualizationVmwareHostGpuResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getVirtualizationVmwareHostGpu:getVirtualizationVmwareHostGpu", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "bus": args.bus,
        "classId": args.classId,
        "cluster": args.cluster,
        "createTime": args.createTime,
        "deviceId": args.deviceId,
        "deviceName": args.deviceName,
        "domainGroupMoid": args.domainGroupMoid,
        "function": args.function,
        "host": args.host,
        "id": args.id,
        "identity": args.identity,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "passthroughActive": args.passthroughActive,
        "passthroughEnabled": args.passthroughEnabled,
        "pciClassId": args.pciClassId,
        "pciId": args.pciId,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "slot": args.slot,
        "subDeviceId": args.subDeviceId,
        "subVendorId": args.subVendorId,
        "tags": args.tags,
        "vendorId": args.vendorId,
        "vendorName": args.vendorName,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareHostGpu.
 */
export interface GetVirtualizationVmwareHostGpuArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetVirtualizationVmwareHostGpuAncestor[];
    bus?: number;
    classId?: string;
    cluster?: inputs.GetVirtualizationVmwareHostGpuCluster;
    createTime?: string;
    deviceId?: number;
    deviceName?: string;
    domainGroupMoid?: string;
    function?: number;
    host?: inputs.GetVirtualizationVmwareHostGpuHost;
    id?: string;
    identity?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetVirtualizationVmwareHostGpuParent;
    passthroughActive?: boolean;
    passthroughEnabled?: boolean;
    pciClassId?: number;
    pciId?: string;
    permissionResources?: inputs.GetVirtualizationVmwareHostGpuPermissionResource[];
    registeredDevice?: inputs.GetVirtualizationVmwareHostGpuRegisteredDevice;
    sharedScope?: string;
    slot?: number;
    subDeviceId?: number;
    subVendorId?: number;
    tags?: inputs.GetVirtualizationVmwareHostGpuTag[];
    vendorId?: number;
    vendorName?: string;
    versionContext?: inputs.GetVirtualizationVmwareHostGpuVersionContext;
}

/**
 * A collection of values returned by getVirtualizationVmwareHostGpu.
 */
export interface GetVirtualizationVmwareHostGpuResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetVirtualizationVmwareHostGpuAncestor[];
    readonly bus?: number;
    readonly classId?: string;
    readonly cluster?: outputs.GetVirtualizationVmwareHostGpuCluster;
    readonly createTime?: string;
    readonly deviceId?: number;
    readonly deviceName?: string;
    readonly domainGroupMoid?: string;
    readonly function?: number;
    readonly host?: outputs.GetVirtualizationVmwareHostGpuHost;
    readonly id: string;
    readonly identity?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetVirtualizationVmwareHostGpuParent;
    readonly passthroughActive?: boolean;
    readonly passthroughEnabled?: boolean;
    readonly pciClassId?: number;
    readonly pciId?: string;
    readonly permissionResources?: outputs.GetVirtualizationVmwareHostGpuPermissionResource[];
    readonly registeredDevice?: outputs.GetVirtualizationVmwareHostGpuRegisteredDevice;
    readonly results: outputs.GetVirtualizationVmwareHostGpuResult[];
    readonly sharedScope?: string;
    readonly slot?: number;
    readonly subDeviceId?: number;
    readonly subVendorId?: number;
    readonly tags?: outputs.GetVirtualizationVmwareHostGpuTag[];
    readonly vendorId?: number;
    readonly vendorName?: string;
    readonly versionContext?: outputs.GetVirtualizationVmwareHostGpuVersionContext;
}
export function getVirtualizationVmwareHostGpuOutput(args?: GetVirtualizationVmwareHostGpuOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualizationVmwareHostGpuResult> {
    return pulumi.output(args).apply((a: any) => getVirtualizationVmwareHostGpu(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareHostGpu.
 */
export interface GetVirtualizationVmwareHostGpuOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareHostGpuAncestorArgs>[]>;
    bus?: pulumi.Input<number>;
    classId?: pulumi.Input<string>;
    cluster?: pulumi.Input<inputs.GetVirtualizationVmwareHostGpuClusterArgs>;
    createTime?: pulumi.Input<string>;
    deviceId?: pulumi.Input<number>;
    deviceName?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    function?: pulumi.Input<number>;
    host?: pulumi.Input<inputs.GetVirtualizationVmwareHostGpuHostArgs>;
    id?: pulumi.Input<string>;
    identity?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetVirtualizationVmwareHostGpuParentArgs>;
    passthroughActive?: pulumi.Input<boolean>;
    passthroughEnabled?: pulumi.Input<boolean>;
    pciClassId?: pulumi.Input<number>;
    pciId?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareHostGpuPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetVirtualizationVmwareHostGpuRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    slot?: pulumi.Input<number>;
    subDeviceId?: pulumi.Input<number>;
    subVendorId?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareHostGpuTagArgs>[]>;
    vendorId?: pulumi.Input<number>;
    vendorName?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetVirtualizationVmwareHostGpuVersionContextArgs>;
}
