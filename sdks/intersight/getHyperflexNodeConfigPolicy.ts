// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getHyperflexNodeConfigPolicy(args?: GetHyperflexNodeConfigPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetHyperflexNodeConfigPolicyResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getHyperflexNodeConfigPolicy:getHyperflexNodeConfigPolicy", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "clusterProfiles": args.clusterProfiles,
        "createTime": args.createTime,
        "dataIpRange": args.dataIpRange,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "hxdpIpRange": args.hxdpIpRange,
        "hypervisorControlIpRange": args.hypervisorControlIpRange,
        "id": args.id,
        "mgmtIpRange": args.mgmtIpRange,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "nodeNamePrefix": args.nodeNamePrefix,
        "objectType": args.objectType,
        "organization": args.organization,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getHyperflexNodeConfigPolicy.
 */
export interface GetHyperflexNodeConfigPolicyArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetHyperflexNodeConfigPolicyAncestor[];
    classId?: string;
    clusterProfiles?: inputs.GetHyperflexNodeConfigPolicyClusterProfile[];
    createTime?: string;
    dataIpRange?: inputs.GetHyperflexNodeConfigPolicyDataIpRange;
    description?: string;
    domainGroupMoid?: string;
    hxdpIpRange?: inputs.GetHyperflexNodeConfigPolicyHxdpIpRange;
    hypervisorControlIpRange?: inputs.GetHyperflexNodeConfigPolicyHypervisorControlIpRange;
    id?: string;
    mgmtIpRange?: inputs.GetHyperflexNodeConfigPolicyMgmtIpRange;
    modTime?: string;
    moid?: string;
    name?: string;
    nodeNamePrefix?: string;
    objectType?: string;
    organization?: inputs.GetHyperflexNodeConfigPolicyOrganization;
    owners?: string[];
    parent?: inputs.GetHyperflexNodeConfigPolicyParent;
    permissionResources?: inputs.GetHyperflexNodeConfigPolicyPermissionResource[];
    sharedScope?: string;
    tags?: inputs.GetHyperflexNodeConfigPolicyTag[];
    versionContext?: inputs.GetHyperflexNodeConfigPolicyVersionContext;
}

/**
 * A collection of values returned by getHyperflexNodeConfigPolicy.
 */
export interface GetHyperflexNodeConfigPolicyResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetHyperflexNodeConfigPolicyAncestor[];
    readonly classId?: string;
    readonly clusterProfiles?: outputs.GetHyperflexNodeConfigPolicyClusterProfile[];
    readonly createTime?: string;
    readonly dataIpRange?: outputs.GetHyperflexNodeConfigPolicyDataIpRange;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly hxdpIpRange?: outputs.GetHyperflexNodeConfigPolicyHxdpIpRange;
    readonly hypervisorControlIpRange?: outputs.GetHyperflexNodeConfigPolicyHypervisorControlIpRange;
    readonly id: string;
    readonly mgmtIpRange?: outputs.GetHyperflexNodeConfigPolicyMgmtIpRange;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nodeNamePrefix?: string;
    readonly objectType?: string;
    readonly organization?: outputs.GetHyperflexNodeConfigPolicyOrganization;
    readonly owners?: string[];
    readonly parent?: outputs.GetHyperflexNodeConfigPolicyParent;
    readonly permissionResources?: outputs.GetHyperflexNodeConfigPolicyPermissionResource[];
    readonly results: outputs.GetHyperflexNodeConfigPolicyResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetHyperflexNodeConfigPolicyTag[];
    readonly versionContext?: outputs.GetHyperflexNodeConfigPolicyVersionContext;
}
export function getHyperflexNodeConfigPolicyOutput(args?: GetHyperflexNodeConfigPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetHyperflexNodeConfigPolicyResult> {
    return pulumi.output(args).apply((a: any) => getHyperflexNodeConfigPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getHyperflexNodeConfigPolicy.
 */
export interface GetHyperflexNodeConfigPolicyOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetHyperflexNodeConfigPolicyAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    clusterProfiles?: pulumi.Input<pulumi.Input<inputs.GetHyperflexNodeConfigPolicyClusterProfileArgs>[]>;
    createTime?: pulumi.Input<string>;
    dataIpRange?: pulumi.Input<inputs.GetHyperflexNodeConfigPolicyDataIpRangeArgs>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    hxdpIpRange?: pulumi.Input<inputs.GetHyperflexNodeConfigPolicyHxdpIpRangeArgs>;
    hypervisorControlIpRange?: pulumi.Input<inputs.GetHyperflexNodeConfigPolicyHypervisorControlIpRangeArgs>;
    id?: pulumi.Input<string>;
    mgmtIpRange?: pulumi.Input<inputs.GetHyperflexNodeConfigPolicyMgmtIpRangeArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nodeNamePrefix?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.GetHyperflexNodeConfigPolicyOrganizationArgs>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetHyperflexNodeConfigPolicyParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetHyperflexNodeConfigPolicyPermissionResourceArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetHyperflexNodeConfigPolicyTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetHyperflexNodeConfigPolicyVersionContextArgs>;
}
