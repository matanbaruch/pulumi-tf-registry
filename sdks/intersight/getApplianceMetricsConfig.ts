// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getApplianceMetricsConfig(args?: GetApplianceMetricsConfigArgs, opts?: pulumi.InvokeOptions): Promise<GetApplianceMetricsConfigResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getApplianceMetricsConfig:getApplianceMetricsConfig", {
        "account": args.account,
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "currentEndpointCount": args.currentEndpointCount,
        "domainGroupMoid": args.domainGroupMoid,
        "endpointUsagePercent": args.endpointUsagePercent,
        "id": args.id,
        "lastDisabledDate": args.lastDisabledDate,
        "lastEnabledDate": args.lastEnabledDate,
        "maxEndpointCount": args.maxEndpointCount,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "sharedScope": args.sharedScope,
        "statusMessage": args.statusMessage,
        "systemEnabled": args.systemEnabled,
        "tags": args.tags,
        "userEnabled": args.userEnabled,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getApplianceMetricsConfig.
 */
export interface GetApplianceMetricsConfigArgs {
    account?: inputs.GetApplianceMetricsConfigAccount;
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetApplianceMetricsConfigAncestor[];
    classId?: string;
    createTime?: string;
    currentEndpointCount?: number;
    domainGroupMoid?: string;
    endpointUsagePercent?: number;
    id?: string;
    lastDisabledDate?: string;
    lastEnabledDate?: string;
    maxEndpointCount?: number;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetApplianceMetricsConfigParent;
    permissionResources?: inputs.GetApplianceMetricsConfigPermissionResource[];
    sharedScope?: string;
    statusMessage?: string;
    systemEnabled?: boolean;
    tags?: inputs.GetApplianceMetricsConfigTag[];
    userEnabled?: boolean;
    versionContext?: inputs.GetApplianceMetricsConfigVersionContext;
}

/**
 * A collection of values returned by getApplianceMetricsConfig.
 */
export interface GetApplianceMetricsConfigResult {
    readonly account?: outputs.GetApplianceMetricsConfigAccount;
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetApplianceMetricsConfigAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly currentEndpointCount?: number;
    readonly domainGroupMoid?: string;
    readonly endpointUsagePercent?: number;
    readonly id: string;
    readonly lastDisabledDate?: string;
    readonly lastEnabledDate?: string;
    readonly maxEndpointCount?: number;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetApplianceMetricsConfigParent;
    readonly permissionResources?: outputs.GetApplianceMetricsConfigPermissionResource[];
    readonly results: outputs.GetApplianceMetricsConfigResult[];
    readonly sharedScope?: string;
    readonly statusMessage?: string;
    readonly systemEnabled?: boolean;
    readonly tags?: outputs.GetApplianceMetricsConfigTag[];
    readonly userEnabled?: boolean;
    readonly versionContext?: outputs.GetApplianceMetricsConfigVersionContext;
}
export function getApplianceMetricsConfigOutput(args?: GetApplianceMetricsConfigOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetApplianceMetricsConfigResult> {
    return pulumi.output(args).apply((a: any) => getApplianceMetricsConfig(a, opts))
}

/**
 * A collection of arguments for invoking getApplianceMetricsConfig.
 */
export interface GetApplianceMetricsConfigOutputArgs {
    account?: pulumi.Input<inputs.GetApplianceMetricsConfigAccountArgs>;
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetApplianceMetricsConfigAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    currentEndpointCount?: pulumi.Input<number>;
    domainGroupMoid?: pulumi.Input<string>;
    endpointUsagePercent?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    lastDisabledDate?: pulumi.Input<string>;
    lastEnabledDate?: pulumi.Input<string>;
    maxEndpointCount?: pulumi.Input<number>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetApplianceMetricsConfigParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetApplianceMetricsConfigPermissionResourceArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    statusMessage?: pulumi.Input<string>;
    systemEnabled?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetApplianceMetricsConfigTagArgs>[]>;
    userEnabled?: pulumi.Input<boolean>;
    versionContext?: pulumi.Input<inputs.GetApplianceMetricsConfigVersionContextArgs>;
}
