// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageNetAppSnapMirrorRelationship(args?: GetStorageNetAppSnapMirrorRelationshipArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageNetAppSnapMirrorRelationshipResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageNetAppSnapMirrorRelationship:getStorageNetAppSnapMirrorRelationship", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "array": args.array,
        "classId": args.classId,
        "createTime": args.createTime,
        "destinationPath": args.destinationPath,
        "destinationTenant": args.destinationTenant,
        "domainGroupMoid": args.domainGroupMoid,
        "healthy": args.healthy,
        "id": args.id,
        "lagTime": args.lagTime,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "policy": args.policy,
        "policyName": args.policyName,
        "policyType": args.policyType,
        "policyUuid": args.policyUuid,
        "sharedScope": args.sharedScope,
        "sourcePath": args.sourcePath,
        "state": args.state,
        "tags": args.tags,
        "uuid": args.uuid,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageNetAppSnapMirrorRelationship.
 */
export interface GetStorageNetAppSnapMirrorRelationshipArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageNetAppSnapMirrorRelationshipAncestor[];
    array?: inputs.GetStorageNetAppSnapMirrorRelationshipArray;
    classId?: string;
    createTime?: string;
    destinationPath?: string;
    destinationTenant?: inputs.GetStorageNetAppSnapMirrorRelationshipDestinationTenant;
    domainGroupMoid?: string;
    healthy?: string;
    id?: string;
    lagTime?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageNetAppSnapMirrorRelationshipParent;
    permissionResources?: inputs.GetStorageNetAppSnapMirrorRelationshipPermissionResource[];
    policy?: inputs.GetStorageNetAppSnapMirrorRelationshipPolicy;
    policyName?: string;
    policyType?: string;
    policyUuid?: string;
    sharedScope?: string;
    sourcePath?: string;
    state?: string;
    tags?: inputs.GetStorageNetAppSnapMirrorRelationshipTag[];
    uuid?: string;
    versionContext?: inputs.GetStorageNetAppSnapMirrorRelationshipVersionContext;
}

/**
 * A collection of values returned by getStorageNetAppSnapMirrorRelationship.
 */
export interface GetStorageNetAppSnapMirrorRelationshipResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageNetAppSnapMirrorRelationshipAncestor[];
    readonly array?: outputs.GetStorageNetAppSnapMirrorRelationshipArray;
    readonly classId?: string;
    readonly createTime?: string;
    readonly destinationPath?: string;
    readonly destinationTenant?: outputs.GetStorageNetAppSnapMirrorRelationshipDestinationTenant;
    readonly domainGroupMoid?: string;
    readonly healthy?: string;
    readonly id: string;
    readonly lagTime?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageNetAppSnapMirrorRelationshipParent;
    readonly permissionResources?: outputs.GetStorageNetAppSnapMirrorRelationshipPermissionResource[];
    readonly policy?: outputs.GetStorageNetAppSnapMirrorRelationshipPolicy;
    readonly policyName?: string;
    readonly policyType?: string;
    readonly policyUuid?: string;
    readonly results: outputs.GetStorageNetAppSnapMirrorRelationshipResult[];
    readonly sharedScope?: string;
    readonly sourcePath?: string;
    readonly state?: string;
    readonly tags?: outputs.GetStorageNetAppSnapMirrorRelationshipTag[];
    readonly uuid?: string;
    readonly versionContext?: outputs.GetStorageNetAppSnapMirrorRelationshipVersionContext;
}
export function getStorageNetAppSnapMirrorRelationshipOutput(args?: GetStorageNetAppSnapMirrorRelationshipOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageNetAppSnapMirrorRelationshipResult> {
    return pulumi.output(args).apply((a: any) => getStorageNetAppSnapMirrorRelationship(a, opts))
}

/**
 * A collection of arguments for invoking getStorageNetAppSnapMirrorRelationship.
 */
export interface GetStorageNetAppSnapMirrorRelationshipOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppSnapMirrorRelationshipAncestorArgs>[]>;
    array?: pulumi.Input<inputs.GetStorageNetAppSnapMirrorRelationshipArrayArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    destinationPath?: pulumi.Input<string>;
    destinationTenant?: pulumi.Input<inputs.GetStorageNetAppSnapMirrorRelationshipDestinationTenantArgs>;
    domainGroupMoid?: pulumi.Input<string>;
    healthy?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    lagTime?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageNetAppSnapMirrorRelationshipParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppSnapMirrorRelationshipPermissionResourceArgs>[]>;
    policy?: pulumi.Input<inputs.GetStorageNetAppSnapMirrorRelationshipPolicyArgs>;
    policyName?: pulumi.Input<string>;
    policyType?: pulumi.Input<string>;
    policyUuid?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    sourcePath?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppSnapMirrorRelationshipTagArgs>[]>;
    uuid?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetStorageNetAppSnapMirrorRelationshipVersionContextArgs>;
}
