// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getKubernetesNetworkPolicy(args?: GetKubernetesNetworkPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetKubernetesNetworkPolicyResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getKubernetesNetworkPolicy:getKubernetesNetworkPolicy", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "clusterProfiles": args.clusterProfiles,
        "cniConfig": args.cniConfig,
        "cniType": args.cniType,
        "createTime": args.createTime,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "organization": args.organization,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "podNetworkCidr": args.podNetworkCidr,
        "serviceCidr": args.serviceCidr,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getKubernetesNetworkPolicy.
 */
export interface GetKubernetesNetworkPolicyArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetKubernetesNetworkPolicyAncestor[];
    classId?: string;
    clusterProfiles?: inputs.GetKubernetesNetworkPolicyClusterProfile[];
    cniConfig?: inputs.GetKubernetesNetworkPolicyCniConfig;
    cniType?: string;
    createTime?: string;
    description?: string;
    domainGroupMoid?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    organization?: inputs.GetKubernetesNetworkPolicyOrganization;
    owners?: string[];
    parent?: inputs.GetKubernetesNetworkPolicyParent;
    permissionResources?: inputs.GetKubernetesNetworkPolicyPermissionResource[];
    podNetworkCidr?: string;
    serviceCidr?: string;
    sharedScope?: string;
    tags?: inputs.GetKubernetesNetworkPolicyTag[];
    versionContext?: inputs.GetKubernetesNetworkPolicyVersionContext;
}

/**
 * A collection of values returned by getKubernetesNetworkPolicy.
 */
export interface GetKubernetesNetworkPolicyResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetKubernetesNetworkPolicyAncestor[];
    readonly classId?: string;
    readonly clusterProfiles?: outputs.GetKubernetesNetworkPolicyClusterProfile[];
    readonly cniConfig?: outputs.GetKubernetesNetworkPolicyCniConfig;
    readonly cniType?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly organization?: outputs.GetKubernetesNetworkPolicyOrganization;
    readonly owners?: string[];
    readonly parent?: outputs.GetKubernetesNetworkPolicyParent;
    readonly permissionResources?: outputs.GetKubernetesNetworkPolicyPermissionResource[];
    readonly podNetworkCidr?: string;
    readonly results: outputs.GetKubernetesNetworkPolicyResult[];
    readonly serviceCidr?: string;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetKubernetesNetworkPolicyTag[];
    readonly versionContext?: outputs.GetKubernetesNetworkPolicyVersionContext;
}
export function getKubernetesNetworkPolicyOutput(args?: GetKubernetesNetworkPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKubernetesNetworkPolicyResult> {
    return pulumi.output(args).apply((a: any) => getKubernetesNetworkPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getKubernetesNetworkPolicy.
 */
export interface GetKubernetesNetworkPolicyOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetKubernetesNetworkPolicyAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    clusterProfiles?: pulumi.Input<pulumi.Input<inputs.GetKubernetesNetworkPolicyClusterProfileArgs>[]>;
    cniConfig?: pulumi.Input<inputs.GetKubernetesNetworkPolicyCniConfigArgs>;
    cniType?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.GetKubernetesNetworkPolicyOrganizationArgs>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetKubernetesNetworkPolicyParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetKubernetesNetworkPolicyPermissionResourceArgs>[]>;
    podNetworkCidr?: pulumi.Input<string>;
    serviceCidr?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetKubernetesNetworkPolicyTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetKubernetesNetworkPolicyVersionContextArgs>;
}
