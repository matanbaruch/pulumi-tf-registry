// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVirtualizationVmwarePhysicalNetworkInterface(args?: GetVirtualizationVmwarePhysicalNetworkInterfaceArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualizationVmwarePhysicalNetworkInterfaceResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getVirtualizationVmwarePhysicalNetworkInterface:getVirtualizationVmwarePhysicalNetworkInterface", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "driver": args.driver,
        "host": args.host,
        "id": args.id,
        "identity": args.identity,
        "linkSpeed": args.linkSpeed,
        "macAddress": args.macAddress,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "pci": args.pci,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "switchName": args.switchName,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVirtualizationVmwarePhysicalNetworkInterface.
 */
export interface GetVirtualizationVmwarePhysicalNetworkInterfaceArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetVirtualizationVmwarePhysicalNetworkInterfaceAncestor[];
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    driver?: string;
    host?: inputs.GetVirtualizationVmwarePhysicalNetworkInterfaceHost;
    id?: string;
    identity?: string;
    linkSpeed?: number;
    macAddress?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetVirtualizationVmwarePhysicalNetworkInterfaceParent;
    pci?: string;
    permissionResources?: inputs.GetVirtualizationVmwarePhysicalNetworkInterfacePermissionResource[];
    registeredDevice?: inputs.GetVirtualizationVmwarePhysicalNetworkInterfaceRegisteredDevice;
    sharedScope?: string;
    switchName?: string;
    tags?: inputs.GetVirtualizationVmwarePhysicalNetworkInterfaceTag[];
    versionContext?: inputs.GetVirtualizationVmwarePhysicalNetworkInterfaceVersionContext;
}

/**
 * A collection of values returned by getVirtualizationVmwarePhysicalNetworkInterface.
 */
export interface GetVirtualizationVmwarePhysicalNetworkInterfaceResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetVirtualizationVmwarePhysicalNetworkInterfaceAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly driver?: string;
    readonly host?: outputs.GetVirtualizationVmwarePhysicalNetworkInterfaceHost;
    readonly id: string;
    readonly identity?: string;
    readonly linkSpeed?: number;
    readonly macAddress?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetVirtualizationVmwarePhysicalNetworkInterfaceParent;
    readonly pci?: string;
    readonly permissionResources?: outputs.GetVirtualizationVmwarePhysicalNetworkInterfacePermissionResource[];
    readonly registeredDevice?: outputs.GetVirtualizationVmwarePhysicalNetworkInterfaceRegisteredDevice;
    readonly results: outputs.GetVirtualizationVmwarePhysicalNetworkInterfaceResult[];
    readonly sharedScope?: string;
    readonly switchName?: string;
    readonly tags?: outputs.GetVirtualizationVmwarePhysicalNetworkInterfaceTag[];
    readonly versionContext?: outputs.GetVirtualizationVmwarePhysicalNetworkInterfaceVersionContext;
}
export function getVirtualizationVmwarePhysicalNetworkInterfaceOutput(args?: GetVirtualizationVmwarePhysicalNetworkInterfaceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualizationVmwarePhysicalNetworkInterfaceResult> {
    return pulumi.output(args).apply((a: any) => getVirtualizationVmwarePhysicalNetworkInterface(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualizationVmwarePhysicalNetworkInterface.
 */
export interface GetVirtualizationVmwarePhysicalNetworkInterfaceOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwarePhysicalNetworkInterfaceAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    driver?: pulumi.Input<string>;
    host?: pulumi.Input<inputs.GetVirtualizationVmwarePhysicalNetworkInterfaceHostArgs>;
    id?: pulumi.Input<string>;
    identity?: pulumi.Input<string>;
    linkSpeed?: pulumi.Input<number>;
    macAddress?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetVirtualizationVmwarePhysicalNetworkInterfaceParentArgs>;
    pci?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwarePhysicalNetworkInterfacePermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetVirtualizationVmwarePhysicalNetworkInterfaceRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    switchName?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwarePhysicalNetworkInterfaceTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetVirtualizationVmwarePhysicalNetworkInterfaceVersionContextArgs>;
}
