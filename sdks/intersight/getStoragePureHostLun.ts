// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStoragePureHostLun(args?: GetStoragePureHostLunArgs, opts?: pulumi.InvokeOptions): Promise<GetStoragePureHostLunResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStoragePureHostLun:getStoragePureHostLun", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "array": args.array,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "hlu": args.hlu,
        "host": args.host,
        "hostGroup": args.hostGroup,
        "hostGroupName": args.hostGroupName,
        "hostName": args.hostName,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "shared": args.shared,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
        "volume": args.volume,
        "volumeName": args.volumeName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStoragePureHostLun.
 */
export interface GetStoragePureHostLunArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStoragePureHostLunAncestor[];
    array?: inputs.GetStoragePureHostLunArray;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    hlu?: number;
    host?: inputs.GetStoragePureHostLunHost;
    hostGroup?: inputs.GetStoragePureHostLunHostGroup;
    hostGroupName?: string;
    hostName?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStoragePureHostLunParent;
    permissionResources?: inputs.GetStoragePureHostLunPermissionResource[];
    registeredDevice?: inputs.GetStoragePureHostLunRegisteredDevice;
    shared?: boolean;
    sharedScope?: string;
    tags?: inputs.GetStoragePureHostLunTag[];
    versionContext?: inputs.GetStoragePureHostLunVersionContext;
    volume?: inputs.GetStoragePureHostLunVolume;
    volumeName?: string;
}

/**
 * A collection of values returned by getStoragePureHostLun.
 */
export interface GetStoragePureHostLunResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStoragePureHostLunAncestor[];
    readonly array?: outputs.GetStoragePureHostLunArray;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly hlu?: number;
    readonly host?: outputs.GetStoragePureHostLunHost;
    readonly hostGroup?: outputs.GetStoragePureHostLunHostGroup;
    readonly hostGroupName?: string;
    readonly hostName?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStoragePureHostLunParent;
    readonly permissionResources?: outputs.GetStoragePureHostLunPermissionResource[];
    readonly registeredDevice?: outputs.GetStoragePureHostLunRegisteredDevice;
    readonly results: outputs.GetStoragePureHostLunResult[];
    readonly shared?: boolean;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetStoragePureHostLunTag[];
    readonly versionContext?: outputs.GetStoragePureHostLunVersionContext;
    readonly volume?: outputs.GetStoragePureHostLunVolume;
    readonly volumeName?: string;
}
export function getStoragePureHostLunOutput(args?: GetStoragePureHostLunOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStoragePureHostLunResult> {
    return pulumi.output(args).apply((a: any) => getStoragePureHostLun(a, opts))
}

/**
 * A collection of arguments for invoking getStoragePureHostLun.
 */
export interface GetStoragePureHostLunOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStoragePureHostLunAncestorArgs>[]>;
    array?: pulumi.Input<inputs.GetStoragePureHostLunArrayArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    hlu?: pulumi.Input<number>;
    host?: pulumi.Input<inputs.GetStoragePureHostLunHostArgs>;
    hostGroup?: pulumi.Input<inputs.GetStoragePureHostLunHostGroupArgs>;
    hostGroupName?: pulumi.Input<string>;
    hostName?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStoragePureHostLunParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStoragePureHostLunPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetStoragePureHostLunRegisteredDeviceArgs>;
    shared?: pulumi.Input<boolean>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStoragePureHostLunTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetStoragePureHostLunVersionContextArgs>;
    volume?: pulumi.Input<inputs.GetStoragePureHostLunVolumeArgs>;
    volumeName?: pulumi.Input<string>;
}
