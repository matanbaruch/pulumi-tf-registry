// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getExternalsiteAuthorization(args?: GetExternalsiteAuthorizationArgs, opts?: pulumi.InvokeOptions): Promise<GetExternalsiteAuthorizationResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getExternalsiteAuthorization:getExternalsiteAuthorization", {
        "account": args.account,
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "isPasswordSet": args.isPasswordSet,
        "isUserIdSet": args.isUserIdSet,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "password": args.password,
        "permissionResources": args.permissionResources,
        "repositoryType": args.repositoryType,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "userId": args.userId,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getExternalsiteAuthorization.
 */
export interface GetExternalsiteAuthorizationArgs {
    account?: inputs.GetExternalsiteAuthorizationAccount;
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetExternalsiteAuthorizationAncestor[];
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    id?: string;
    isPasswordSet?: boolean;
    isUserIdSet?: boolean;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetExternalsiteAuthorizationParent;
    password?: string;
    permissionResources?: inputs.GetExternalsiteAuthorizationPermissionResource[];
    repositoryType?: string;
    sharedScope?: string;
    tags?: inputs.GetExternalsiteAuthorizationTag[];
    userId?: string;
    versionContext?: inputs.GetExternalsiteAuthorizationVersionContext;
}

/**
 * A collection of values returned by getExternalsiteAuthorization.
 */
export interface GetExternalsiteAuthorizationResult {
    readonly account?: outputs.GetExternalsiteAuthorizationAccount;
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetExternalsiteAuthorizationAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly isPasswordSet?: boolean;
    readonly isUserIdSet?: boolean;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetExternalsiteAuthorizationParent;
    readonly password?: string;
    readonly permissionResources?: outputs.GetExternalsiteAuthorizationPermissionResource[];
    readonly repositoryType?: string;
    readonly results: outputs.GetExternalsiteAuthorizationResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetExternalsiteAuthorizationTag[];
    readonly userId?: string;
    readonly versionContext?: outputs.GetExternalsiteAuthorizationVersionContext;
}
export function getExternalsiteAuthorizationOutput(args?: GetExternalsiteAuthorizationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetExternalsiteAuthorizationResult> {
    return pulumi.output(args).apply((a: any) => getExternalsiteAuthorization(a, opts))
}

/**
 * A collection of arguments for invoking getExternalsiteAuthorization.
 */
export interface GetExternalsiteAuthorizationOutputArgs {
    account?: pulumi.Input<inputs.GetExternalsiteAuthorizationAccountArgs>;
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetExternalsiteAuthorizationAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    isPasswordSet?: pulumi.Input<boolean>;
    isUserIdSet?: pulumi.Input<boolean>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetExternalsiteAuthorizationParentArgs>;
    password?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetExternalsiteAuthorizationPermissionResourceArgs>[]>;
    repositoryType?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetExternalsiteAuthorizationTagArgs>[]>;
    userId?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetExternalsiteAuthorizationVersionContextArgs>;
}
