// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getFirmwareSwitchUpgrade(args?: GetFirmwareSwitchUpgradeArgs, opts?: pulumi.InvokeOptions): Promise<GetFirmwareSwitchUpgradeResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getFirmwareSwitchUpgrade:getFirmwareSwitchUpgrade", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "device": args.device,
        "directDownload": args.directDownload,
        "distributable": args.distributable,
        "domainGroupMoid": args.domainGroupMoid,
        "enableFabricEvacuation": args.enableFabricEvacuation,
        "fileServer": args.fileServer,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "networkElements": args.networkElements,
        "networkShare": args.networkShare,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "release": args.release,
        "sharedScope": args.sharedScope,
        "skipEstimateImpact": args.skipEstimateImpact,
        "skipWaitForIoPathConnectivity": args.skipWaitForIoPathConnectivity,
        "status": args.status,
        "tags": args.tags,
        "upgradeImpact": args.upgradeImpact,
        "upgradeStatus": args.upgradeStatus,
        "upgradeType": args.upgradeType,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFirmwareSwitchUpgrade.
 */
export interface GetFirmwareSwitchUpgradeArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetFirmwareSwitchUpgradeAncestor[];
    classId?: string;
    createTime?: string;
    device?: inputs.GetFirmwareSwitchUpgradeDevice;
    directDownload?: inputs.GetFirmwareSwitchUpgradeDirectDownload;
    distributable?: inputs.GetFirmwareSwitchUpgradeDistributable;
    domainGroupMoid?: string;
    enableFabricEvacuation?: boolean;
    fileServer?: inputs.GetFirmwareSwitchUpgradeFileServer;
    id?: string;
    modTime?: string;
    moid?: string;
    networkElements?: inputs.GetFirmwareSwitchUpgradeNetworkElement[];
    networkShare?: inputs.GetFirmwareSwitchUpgradeNetworkShare;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetFirmwareSwitchUpgradeParent;
    permissionResources?: inputs.GetFirmwareSwitchUpgradePermissionResource[];
    release?: inputs.GetFirmwareSwitchUpgradeRelease;
    sharedScope?: string;
    skipEstimateImpact?: boolean;
    skipWaitForIoPathConnectivity?: boolean;
    status?: string;
    tags?: inputs.GetFirmwareSwitchUpgradeTag[];
    upgradeImpact?: inputs.GetFirmwareSwitchUpgradeUpgradeImpact;
    upgradeStatus?: inputs.GetFirmwareSwitchUpgradeUpgradeStatus;
    upgradeType?: string;
    versionContext?: inputs.GetFirmwareSwitchUpgradeVersionContext;
}

/**
 * A collection of values returned by getFirmwareSwitchUpgrade.
 */
export interface GetFirmwareSwitchUpgradeResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetFirmwareSwitchUpgradeAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly device?: outputs.GetFirmwareSwitchUpgradeDevice;
    readonly directDownload?: outputs.GetFirmwareSwitchUpgradeDirectDownload;
    readonly distributable?: outputs.GetFirmwareSwitchUpgradeDistributable;
    readonly domainGroupMoid?: string;
    readonly enableFabricEvacuation?: boolean;
    readonly fileServer?: outputs.GetFirmwareSwitchUpgradeFileServer;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly networkElements?: outputs.GetFirmwareSwitchUpgradeNetworkElement[];
    readonly networkShare?: outputs.GetFirmwareSwitchUpgradeNetworkShare;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetFirmwareSwitchUpgradeParent;
    readonly permissionResources?: outputs.GetFirmwareSwitchUpgradePermissionResource[];
    readonly release?: outputs.GetFirmwareSwitchUpgradeRelease;
    readonly results: outputs.GetFirmwareSwitchUpgradeResult[];
    readonly sharedScope?: string;
    readonly skipEstimateImpact?: boolean;
    readonly skipWaitForIoPathConnectivity?: boolean;
    readonly status?: string;
    readonly tags?: outputs.GetFirmwareSwitchUpgradeTag[];
    readonly upgradeImpact?: outputs.GetFirmwareSwitchUpgradeUpgradeImpact;
    readonly upgradeStatus?: outputs.GetFirmwareSwitchUpgradeUpgradeStatus;
    readonly upgradeType?: string;
    readonly versionContext?: outputs.GetFirmwareSwitchUpgradeVersionContext;
}
export function getFirmwareSwitchUpgradeOutput(args?: GetFirmwareSwitchUpgradeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFirmwareSwitchUpgradeResult> {
    return pulumi.output(args).apply((a: any) => getFirmwareSwitchUpgrade(a, opts))
}

/**
 * A collection of arguments for invoking getFirmwareSwitchUpgrade.
 */
export interface GetFirmwareSwitchUpgradeOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetFirmwareSwitchUpgradeAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    device?: pulumi.Input<inputs.GetFirmwareSwitchUpgradeDeviceArgs>;
    directDownload?: pulumi.Input<inputs.GetFirmwareSwitchUpgradeDirectDownloadArgs>;
    distributable?: pulumi.Input<inputs.GetFirmwareSwitchUpgradeDistributableArgs>;
    domainGroupMoid?: pulumi.Input<string>;
    enableFabricEvacuation?: pulumi.Input<boolean>;
    fileServer?: pulumi.Input<inputs.GetFirmwareSwitchUpgradeFileServerArgs>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    networkElements?: pulumi.Input<pulumi.Input<inputs.GetFirmwareSwitchUpgradeNetworkElementArgs>[]>;
    networkShare?: pulumi.Input<inputs.GetFirmwareSwitchUpgradeNetworkShareArgs>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetFirmwareSwitchUpgradeParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetFirmwareSwitchUpgradePermissionResourceArgs>[]>;
    release?: pulumi.Input<inputs.GetFirmwareSwitchUpgradeReleaseArgs>;
    sharedScope?: pulumi.Input<string>;
    skipEstimateImpact?: pulumi.Input<boolean>;
    skipWaitForIoPathConnectivity?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetFirmwareSwitchUpgradeTagArgs>[]>;
    upgradeImpact?: pulumi.Input<inputs.GetFirmwareSwitchUpgradeUpgradeImpactArgs>;
    upgradeStatus?: pulumi.Input<inputs.GetFirmwareSwitchUpgradeUpgradeStatusArgs>;
    upgradeType?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetFirmwareSwitchUpgradeVersionContextArgs>;
}
