// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getWorkflowServiceItemActionInstance(args?: GetWorkflowServiceItemActionInstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetWorkflowServiceItemActionInstanceResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getWorkflowServiceItemActionInstance:getWorkflowServiceItemActionInstance", {
        "accountMoid": args.accountMoid,
        "action": args.action,
        "actionWorkflowInfo": args.actionWorkflowInfo,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "catalogServiceRequests": args.catalogServiceRequests,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "endTime": args.endTime,
        "id": args.id,
        "idp": args.idp,
        "idpReference": args.idpReference,
        "input": args.input,
        "lastAction": args.lastAction,
        "messages": args.messages,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "resourcelifecycleStatus": args.resourcelifecycleStatus,
        "selectionCriteriaInputs": args.selectionCriteriaInputs,
        "serviceItemActionDefinition": args.serviceItemActionDefinition,
        "serviceItemDefinition": args.serviceItemDefinition,
        "serviceItemInstance": args.serviceItemInstance,
        "serviceRequestInput": args.serviceRequestInput,
        "sharedScope": args.sharedScope,
        "startTime": args.startTime,
        "status": args.status,
        "stopWorkflowInfo": args.stopWorkflowInfo,
        "tags": args.tags,
        "user": args.user,
        "userIdOrEmail": args.userIdOrEmail,
        "validationWorkflowInfo": args.validationWorkflowInfo,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getWorkflowServiceItemActionInstance.
 */
export interface GetWorkflowServiceItemActionInstanceArgs {
    accountMoid?: string;
    action?: string;
    actionWorkflowInfo?: inputs.GetWorkflowServiceItemActionInstanceActionWorkflowInfo;
    additionalProperties?: string;
    ancestors?: inputs.GetWorkflowServiceItemActionInstanceAncestor[];
    catalogServiceRequests?: inputs.GetWorkflowServiceItemActionInstanceCatalogServiceRequest[];
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    endTime?: string;
    id?: string;
    idp?: inputs.GetWorkflowServiceItemActionInstanceIdp;
    idpReference?: inputs.GetWorkflowServiceItemActionInstanceIdpReference;
    input?: string;
    lastAction?: string;
    messages?: inputs.GetWorkflowServiceItemActionInstanceMessage[];
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetWorkflowServiceItemActionInstanceParent;
    permissionResources?: inputs.GetWorkflowServiceItemActionInstancePermissionResource[];
    resourcelifecycleStatus?: string;
    selectionCriteriaInputs?: inputs.GetWorkflowServiceItemActionInstanceSelectionCriteriaInput[];
    serviceItemActionDefinition?: inputs.GetWorkflowServiceItemActionInstanceServiceItemActionDefinition;
    serviceItemDefinition?: inputs.GetWorkflowServiceItemActionInstanceServiceItemDefinition;
    serviceItemInstance?: inputs.GetWorkflowServiceItemActionInstanceServiceItemInstance;
    serviceRequestInput?: string;
    sharedScope?: string;
    startTime?: string;
    status?: string;
    stopWorkflowInfo?: inputs.GetWorkflowServiceItemActionInstanceStopWorkflowInfo;
    tags?: inputs.GetWorkflowServiceItemActionInstanceTag[];
    user?: inputs.GetWorkflowServiceItemActionInstanceUser;
    userIdOrEmail?: string;
    validationWorkflowInfo?: inputs.GetWorkflowServiceItemActionInstanceValidationWorkflowInfo;
    versionContext?: inputs.GetWorkflowServiceItemActionInstanceVersionContext;
}

/**
 * A collection of values returned by getWorkflowServiceItemActionInstance.
 */
export interface GetWorkflowServiceItemActionInstanceResult {
    readonly accountMoid?: string;
    readonly action?: string;
    readonly actionWorkflowInfo?: outputs.GetWorkflowServiceItemActionInstanceActionWorkflowInfo;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetWorkflowServiceItemActionInstanceAncestor[];
    readonly catalogServiceRequests?: outputs.GetWorkflowServiceItemActionInstanceCatalogServiceRequest[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly endTime?: string;
    readonly id: string;
    readonly idp?: outputs.GetWorkflowServiceItemActionInstanceIdp;
    readonly idpReference?: outputs.GetWorkflowServiceItemActionInstanceIdpReference;
    readonly input?: string;
    readonly lastAction?: string;
    readonly messages?: outputs.GetWorkflowServiceItemActionInstanceMessage[];
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetWorkflowServiceItemActionInstanceParent;
    readonly permissionResources?: outputs.GetWorkflowServiceItemActionInstancePermissionResource[];
    readonly resourcelifecycleStatus?: string;
    readonly results: outputs.GetWorkflowServiceItemActionInstanceResult[];
    readonly selectionCriteriaInputs?: outputs.GetWorkflowServiceItemActionInstanceSelectionCriteriaInput[];
    readonly serviceItemActionDefinition?: outputs.GetWorkflowServiceItemActionInstanceServiceItemActionDefinition;
    readonly serviceItemDefinition?: outputs.GetWorkflowServiceItemActionInstanceServiceItemDefinition;
    readonly serviceItemInstance?: outputs.GetWorkflowServiceItemActionInstanceServiceItemInstance;
    readonly serviceRequestInput?: string;
    readonly sharedScope?: string;
    readonly startTime?: string;
    readonly status?: string;
    readonly stopWorkflowInfo?: outputs.GetWorkflowServiceItemActionInstanceStopWorkflowInfo;
    readonly tags?: outputs.GetWorkflowServiceItemActionInstanceTag[];
    readonly user?: outputs.GetWorkflowServiceItemActionInstanceUser;
    readonly userIdOrEmail?: string;
    readonly validationWorkflowInfo?: outputs.GetWorkflowServiceItemActionInstanceValidationWorkflowInfo;
    readonly versionContext?: outputs.GetWorkflowServiceItemActionInstanceVersionContext;
}
export function getWorkflowServiceItemActionInstanceOutput(args?: GetWorkflowServiceItemActionInstanceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWorkflowServiceItemActionInstanceResult> {
    return pulumi.output(args).apply((a: any) => getWorkflowServiceItemActionInstance(a, opts))
}

/**
 * A collection of arguments for invoking getWorkflowServiceItemActionInstance.
 */
export interface GetWorkflowServiceItemActionInstanceOutputArgs {
    accountMoid?: pulumi.Input<string>;
    action?: pulumi.Input<string>;
    actionWorkflowInfo?: pulumi.Input<inputs.GetWorkflowServiceItemActionInstanceActionWorkflowInfoArgs>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetWorkflowServiceItemActionInstanceAncestorArgs>[]>;
    catalogServiceRequests?: pulumi.Input<pulumi.Input<inputs.GetWorkflowServiceItemActionInstanceCatalogServiceRequestArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    idp?: pulumi.Input<inputs.GetWorkflowServiceItemActionInstanceIdpArgs>;
    idpReference?: pulumi.Input<inputs.GetWorkflowServiceItemActionInstanceIdpReferenceArgs>;
    input?: pulumi.Input<string>;
    lastAction?: pulumi.Input<string>;
    messages?: pulumi.Input<pulumi.Input<inputs.GetWorkflowServiceItemActionInstanceMessageArgs>[]>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetWorkflowServiceItemActionInstanceParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetWorkflowServiceItemActionInstancePermissionResourceArgs>[]>;
    resourcelifecycleStatus?: pulumi.Input<string>;
    selectionCriteriaInputs?: pulumi.Input<pulumi.Input<inputs.GetWorkflowServiceItemActionInstanceSelectionCriteriaInputArgs>[]>;
    serviceItemActionDefinition?: pulumi.Input<inputs.GetWorkflowServiceItemActionInstanceServiceItemActionDefinitionArgs>;
    serviceItemDefinition?: pulumi.Input<inputs.GetWorkflowServiceItemActionInstanceServiceItemDefinitionArgs>;
    serviceItemInstance?: pulumi.Input<inputs.GetWorkflowServiceItemActionInstanceServiceItemInstanceArgs>;
    serviceRequestInput?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    stopWorkflowInfo?: pulumi.Input<inputs.GetWorkflowServiceItemActionInstanceStopWorkflowInfoArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetWorkflowServiceItemActionInstanceTagArgs>[]>;
    user?: pulumi.Input<inputs.GetWorkflowServiceItemActionInstanceUserArgs>;
    userIdOrEmail?: pulumi.Input<string>;
    validationWorkflowInfo?: pulumi.Input<inputs.GetWorkflowServiceItemActionInstanceValidationWorkflowInfoArgs>;
    versionContext?: pulumi.Input<inputs.GetWorkflowServiceItemActionInstanceVersionContextArgs>;
}
