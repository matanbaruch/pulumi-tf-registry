// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVnicEthAdapterPolicy(args?: GetVnicEthAdapterPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetVnicEthAdapterPolicyResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getVnicEthAdapterPolicy:getVnicEthAdapterPolicy", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "advancedFilter": args.advancedFilter,
        "ancestors": args.ancestors,
        "arfsSettings": args.arfsSettings,
        "classId": args.classId,
        "completionQueueSettings": args.completionQueueSettings,
        "createTime": args.createTime,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "geneveEnabled": args.geneveEnabled,
        "id": args.id,
        "interruptScaling": args.interruptScaling,
        "interruptSettings": args.interruptSettings,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "nvgreSettings": args.nvgreSettings,
        "objectType": args.objectType,
        "organization": args.organization,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "ptpSettings": args.ptpSettings,
        "roceSettings": args.roceSettings,
        "rssHashSettings": args.rssHashSettings,
        "rssSettings": args.rssSettings,
        "rxQueueSettings": args.rxQueueSettings,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "tcpOffloadSettings": args.tcpOffloadSettings,
        "txQueueSettings": args.txQueueSettings,
        "uplinkFailbackTimeout": args.uplinkFailbackTimeout,
        "versionContext": args.versionContext,
        "vxlanSettings": args.vxlanSettings,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVnicEthAdapterPolicy.
 */
export interface GetVnicEthAdapterPolicyArgs {
    accountMoid?: string;
    additionalProperties?: string;
    advancedFilter?: boolean;
    ancestors?: inputs.GetVnicEthAdapterPolicyAncestor[];
    arfsSettings?: inputs.GetVnicEthAdapterPolicyArfsSettings;
    classId?: string;
    completionQueueSettings?: inputs.GetVnicEthAdapterPolicyCompletionQueueSettings;
    createTime?: string;
    description?: string;
    domainGroupMoid?: string;
    geneveEnabled?: boolean;
    id?: string;
    interruptScaling?: boolean;
    interruptSettings?: inputs.GetVnicEthAdapterPolicyInterruptSettings;
    modTime?: string;
    moid?: string;
    name?: string;
    nvgreSettings?: inputs.GetVnicEthAdapterPolicyNvgreSettings;
    objectType?: string;
    organization?: inputs.GetVnicEthAdapterPolicyOrganization;
    owners?: string[];
    parent?: inputs.GetVnicEthAdapterPolicyParent;
    permissionResources?: inputs.GetVnicEthAdapterPolicyPermissionResource[];
    ptpSettings?: inputs.GetVnicEthAdapterPolicyPtpSettings;
    roceSettings?: inputs.GetVnicEthAdapterPolicyRoceSettings;
    rssHashSettings?: inputs.GetVnicEthAdapterPolicyRssHashSettings;
    rssSettings?: boolean;
    rxQueueSettings?: inputs.GetVnicEthAdapterPolicyRxQueueSettings;
    sharedScope?: string;
    tags?: inputs.GetVnicEthAdapterPolicyTag[];
    tcpOffloadSettings?: inputs.GetVnicEthAdapterPolicyTcpOffloadSettings;
    txQueueSettings?: inputs.GetVnicEthAdapterPolicyTxQueueSettings;
    uplinkFailbackTimeout?: number;
    versionContext?: inputs.GetVnicEthAdapterPolicyVersionContext;
    vxlanSettings?: inputs.GetVnicEthAdapterPolicyVxlanSettings;
}

/**
 * A collection of values returned by getVnicEthAdapterPolicy.
 */
export interface GetVnicEthAdapterPolicyResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly advancedFilter?: boolean;
    readonly ancestors?: outputs.GetVnicEthAdapterPolicyAncestor[];
    readonly arfsSettings?: outputs.GetVnicEthAdapterPolicyArfsSettings;
    readonly classId?: string;
    readonly completionQueueSettings?: outputs.GetVnicEthAdapterPolicyCompletionQueueSettings;
    readonly createTime?: string;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly geneveEnabled?: boolean;
    readonly id: string;
    readonly interruptScaling?: boolean;
    readonly interruptSettings?: outputs.GetVnicEthAdapterPolicyInterruptSettings;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nvgreSettings?: outputs.GetVnicEthAdapterPolicyNvgreSettings;
    readonly objectType?: string;
    readonly organization?: outputs.GetVnicEthAdapterPolicyOrganization;
    readonly owners?: string[];
    readonly parent?: outputs.GetVnicEthAdapterPolicyParent;
    readonly permissionResources?: outputs.GetVnicEthAdapterPolicyPermissionResource[];
    readonly ptpSettings?: outputs.GetVnicEthAdapterPolicyPtpSettings;
    readonly results: outputs.GetVnicEthAdapterPolicyResult[];
    readonly roceSettings?: outputs.GetVnicEthAdapterPolicyRoceSettings;
    readonly rssHashSettings?: outputs.GetVnicEthAdapterPolicyRssHashSettings;
    readonly rssSettings?: boolean;
    readonly rxQueueSettings?: outputs.GetVnicEthAdapterPolicyRxQueueSettings;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetVnicEthAdapterPolicyTag[];
    readonly tcpOffloadSettings?: outputs.GetVnicEthAdapterPolicyTcpOffloadSettings;
    readonly txQueueSettings?: outputs.GetVnicEthAdapterPolicyTxQueueSettings;
    readonly uplinkFailbackTimeout?: number;
    readonly versionContext?: outputs.GetVnicEthAdapterPolicyVersionContext;
    readonly vxlanSettings?: outputs.GetVnicEthAdapterPolicyVxlanSettings;
}
export function getVnicEthAdapterPolicyOutput(args?: GetVnicEthAdapterPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVnicEthAdapterPolicyResult> {
    return pulumi.output(args).apply((a: any) => getVnicEthAdapterPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getVnicEthAdapterPolicy.
 */
export interface GetVnicEthAdapterPolicyOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    advancedFilter?: pulumi.Input<boolean>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetVnicEthAdapterPolicyAncestorArgs>[]>;
    arfsSettings?: pulumi.Input<inputs.GetVnicEthAdapterPolicyArfsSettingsArgs>;
    classId?: pulumi.Input<string>;
    completionQueueSettings?: pulumi.Input<inputs.GetVnicEthAdapterPolicyCompletionQueueSettingsArgs>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    geneveEnabled?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    interruptScaling?: pulumi.Input<boolean>;
    interruptSettings?: pulumi.Input<inputs.GetVnicEthAdapterPolicyInterruptSettingsArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nvgreSettings?: pulumi.Input<inputs.GetVnicEthAdapterPolicyNvgreSettingsArgs>;
    objectType?: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.GetVnicEthAdapterPolicyOrganizationArgs>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetVnicEthAdapterPolicyParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetVnicEthAdapterPolicyPermissionResourceArgs>[]>;
    ptpSettings?: pulumi.Input<inputs.GetVnicEthAdapterPolicyPtpSettingsArgs>;
    roceSettings?: pulumi.Input<inputs.GetVnicEthAdapterPolicyRoceSettingsArgs>;
    rssHashSettings?: pulumi.Input<inputs.GetVnicEthAdapterPolicyRssHashSettingsArgs>;
    rssSettings?: pulumi.Input<boolean>;
    rxQueueSettings?: pulumi.Input<inputs.GetVnicEthAdapterPolicyRxQueueSettingsArgs>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetVnicEthAdapterPolicyTagArgs>[]>;
    tcpOffloadSettings?: pulumi.Input<inputs.GetVnicEthAdapterPolicyTcpOffloadSettingsArgs>;
    txQueueSettings?: pulumi.Input<inputs.GetVnicEthAdapterPolicyTxQueueSettingsArgs>;
    uplinkFailbackTimeout?: pulumi.Input<number>;
    versionContext?: pulumi.Input<inputs.GetVnicEthAdapterPolicyVersionContextArgs>;
    vxlanSettings?: pulumi.Input<inputs.GetVnicEthAdapterPolicyVxlanSettingsArgs>;
}
