// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEquipmentSwitchCard(args?: GetEquipmentSwitchCardArgs, opts?: pulumi.InvokeOptions): Promise<GetEquipmentSwitchCardResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getEquipmentSwitchCard:getEquipmentSwitchCard", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "baseMac": args.baseMac,
        "classId": args.classId,
        "createTime": args.createTime,
        "description": args.description,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "endMac": args.endMac,
        "ethernetSwitchingMode": args.ethernetSwitchingMode,
        "fcPortChannels": args.fcPortChannels,
        "fcPorts": args.fcPorts,
        "fcSwitchingMode": args.fcSwitchingMode,
        "hwVersion": args.hwVersion,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "isUpgraded": args.isUpgraded,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "name": args.name,
        "networkElement": args.networkElement,
        "numPorts": args.numPorts,
        "objectType": args.objectType,
        "outOfBandIpAddress": args.outOfBandIpAddress,
        "outOfBandIpGateway": args.outOfBandIpGateway,
        "outOfBandIpMask": args.outOfBandIpMask,
        "outOfBandMac": args.outOfBandMac,
        "owners": args.owners,
        "parent": args.parent,
        "partNumber": args.partNumber,
        "permissionResources": args.permissionResources,
        "portChannels": args.portChannels,
        "portGroups": args.portGroups,
        "powerState": args.powerState,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "registeredDevice": args.registeredDevice,
        "revision": args.revision,
        "rn": args.rn,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "slotId": args.slotId,
        "state": args.state,
        "status": args.status,
        "switchId": args.switchId,
        "tags": args.tags,
        "thermal": args.thermal,
        "type": args.type,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEquipmentSwitchCard.
 */
export interface GetEquipmentSwitchCardArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetEquipmentSwitchCardAncestor[];
    baseMac?: string;
    classId?: string;
    createTime?: string;
    description?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    endMac?: string;
    ethernetSwitchingMode?: string;
    fcPortChannels?: inputs.GetEquipmentSwitchCardFcPortChannel[];
    fcPorts?: inputs.GetEquipmentSwitchCardFcPort[];
    fcSwitchingMode?: string;
    hwVersion?: string;
    id?: string;
    inventoryDeviceInfo?: inputs.GetEquipmentSwitchCardInventoryDeviceInfo;
    isUpgraded?: boolean;
    modTime?: string;
    model?: string;
    moid?: string;
    name?: string;
    networkElement?: inputs.GetEquipmentSwitchCardNetworkElement;
    numPorts?: number;
    objectType?: string;
    outOfBandIpAddress?: string;
    outOfBandIpGateway?: string;
    outOfBandIpMask?: string;
    outOfBandMac?: string;
    owners?: string[];
    parent?: inputs.GetEquipmentSwitchCardParent;
    partNumber?: string;
    permissionResources?: inputs.GetEquipmentSwitchCardPermissionResource[];
    portChannels?: inputs.GetEquipmentSwitchCardPortChannel[];
    portGroups?: inputs.GetEquipmentSwitchCardPortGroup[];
    powerState?: string;
    presence?: string;
    previousFru?: inputs.GetEquipmentSwitchCardPreviousFru;
    registeredDevice?: inputs.GetEquipmentSwitchCardRegisteredDevice;
    revision?: string;
    rn?: string;
    serial?: string;
    sharedScope?: string;
    slotId?: number;
    state?: string;
    status?: string;
    switchId?: string;
    tags?: inputs.GetEquipmentSwitchCardTag[];
    thermal?: string;
    type?: string;
    vendor?: string;
    versionContext?: inputs.GetEquipmentSwitchCardVersionContext;
}

/**
 * A collection of values returned by getEquipmentSwitchCard.
 */
export interface GetEquipmentSwitchCardResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetEquipmentSwitchCardAncestor[];
    readonly baseMac?: string;
    readonly classId?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly endMac?: string;
    readonly ethernetSwitchingMode?: string;
    readonly fcPortChannels?: outputs.GetEquipmentSwitchCardFcPortChannel[];
    readonly fcPorts?: outputs.GetEquipmentSwitchCardFcPort[];
    readonly fcSwitchingMode?: string;
    readonly hwVersion?: string;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetEquipmentSwitchCardInventoryDeviceInfo;
    readonly isUpgraded?: boolean;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly networkElement?: outputs.GetEquipmentSwitchCardNetworkElement;
    readonly numPorts?: number;
    readonly objectType?: string;
    readonly outOfBandIpAddress?: string;
    readonly outOfBandIpGateway?: string;
    readonly outOfBandIpMask?: string;
    readonly outOfBandMac?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetEquipmentSwitchCardParent;
    readonly partNumber?: string;
    readonly permissionResources?: outputs.GetEquipmentSwitchCardPermissionResource[];
    readonly portChannels?: outputs.GetEquipmentSwitchCardPortChannel[];
    readonly portGroups?: outputs.GetEquipmentSwitchCardPortGroup[];
    readonly powerState?: string;
    readonly presence?: string;
    readonly previousFru?: outputs.GetEquipmentSwitchCardPreviousFru;
    readonly registeredDevice?: outputs.GetEquipmentSwitchCardRegisteredDevice;
    readonly results: outputs.GetEquipmentSwitchCardResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly slotId?: number;
    readonly state?: string;
    readonly status?: string;
    readonly switchId?: string;
    readonly tags?: outputs.GetEquipmentSwitchCardTag[];
    readonly thermal?: string;
    readonly type?: string;
    readonly vendor?: string;
    readonly versionContext?: outputs.GetEquipmentSwitchCardVersionContext;
}
export function getEquipmentSwitchCardOutput(args?: GetEquipmentSwitchCardOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEquipmentSwitchCardResult> {
    return pulumi.output(args).apply((a: any) => getEquipmentSwitchCard(a, opts))
}

/**
 * A collection of arguments for invoking getEquipmentSwitchCard.
 */
export interface GetEquipmentSwitchCardOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetEquipmentSwitchCardAncestorArgs>[]>;
    baseMac?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    endMac?: pulumi.Input<string>;
    ethernetSwitchingMode?: pulumi.Input<string>;
    fcPortChannels?: pulumi.Input<pulumi.Input<inputs.GetEquipmentSwitchCardFcPortChannelArgs>[]>;
    fcPorts?: pulumi.Input<pulumi.Input<inputs.GetEquipmentSwitchCardFcPortArgs>[]>;
    fcSwitchingMode?: pulumi.Input<string>;
    hwVersion?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetEquipmentSwitchCardInventoryDeviceInfoArgs>;
    isUpgraded?: pulumi.Input<boolean>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkElement?: pulumi.Input<inputs.GetEquipmentSwitchCardNetworkElementArgs>;
    numPorts?: pulumi.Input<number>;
    objectType?: pulumi.Input<string>;
    outOfBandIpAddress?: pulumi.Input<string>;
    outOfBandIpGateway?: pulumi.Input<string>;
    outOfBandIpMask?: pulumi.Input<string>;
    outOfBandMac?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetEquipmentSwitchCardParentArgs>;
    partNumber?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetEquipmentSwitchCardPermissionResourceArgs>[]>;
    portChannels?: pulumi.Input<pulumi.Input<inputs.GetEquipmentSwitchCardPortChannelArgs>[]>;
    portGroups?: pulumi.Input<pulumi.Input<inputs.GetEquipmentSwitchCardPortGroupArgs>[]>;
    powerState?: pulumi.Input<string>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetEquipmentSwitchCardPreviousFruArgs>;
    registeredDevice?: pulumi.Input<inputs.GetEquipmentSwitchCardRegisteredDeviceArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    slotId?: pulumi.Input<number>;
    state?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    switchId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetEquipmentSwitchCardTagArgs>[]>;
    thermal?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetEquipmentSwitchCardVersionContextArgs>;
}
