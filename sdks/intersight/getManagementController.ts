// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getManagementController(args?: GetManagementControllerArgs, opts?: pulumi.InvokeOptions): Promise<GetManagementControllerResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getManagementController:getManagementController", {
        "accountMoid": args.accountMoid,
        "adapterUnit": args.adapterUnit,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "certificate": args.certificate,
        "classId": args.classId,
        "computeBlade": args.computeBlade,
        "computeRackUnit": args.computeRackUnit,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "equipmentIoCardBase": args.equipmentIoCardBase,
        "equipmentSharedIoModule": args.equipmentSharedIoModule,
        "equipmentSystemIoController": args.equipmentSystemIoController,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "kmipClientCertificate": args.kmipClientCertificate,
        "managementInterfaces": args.managementInterfaces,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "networkElement": args.networkElement,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "rootCaCertificates": args.rootCaCertificates,
        "runningFirmwares": args.runningFirmwares,
        "sharedScope": args.sharedScope,
        "storageSasExpander": args.storageSasExpander,
        "tags": args.tags,
        "topSystem": args.topSystem,
        "uemStreamAdminState": args.uemStreamAdminState,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getManagementController.
 */
export interface GetManagementControllerArgs {
    accountMoid?: string;
    adapterUnit?: inputs.GetManagementControllerAdapterUnit;
    additionalProperties?: string;
    ancestors?: inputs.GetManagementControllerAncestor[];
    certificate?: inputs.GetManagementControllerCertificate;
    classId?: string;
    computeBlade?: inputs.GetManagementControllerComputeBlade;
    computeRackUnit?: inputs.GetManagementControllerComputeRackUnit;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    equipmentIoCardBase?: inputs.GetManagementControllerEquipmentIoCardBase;
    equipmentSharedIoModule?: inputs.GetManagementControllerEquipmentSharedIoModule;
    equipmentSystemIoController?: inputs.GetManagementControllerEquipmentSystemIoController;
    id?: string;
    inventoryDeviceInfo?: inputs.GetManagementControllerInventoryDeviceInfo;
    kmipClientCertificate?: inputs.GetManagementControllerKmipClientCertificate;
    managementInterfaces?: inputs.GetManagementControllerManagementInterface[];
    modTime?: string;
    model?: string;
    moid?: string;
    networkElement?: inputs.GetManagementControllerNetworkElement;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetManagementControllerParent;
    permissionResources?: inputs.GetManagementControllerPermissionResource[];
    registeredDevice?: inputs.GetManagementControllerRegisteredDevice;
    rn?: string;
    rootCaCertificates?: inputs.GetManagementControllerRootCaCertificate[];
    runningFirmwares?: inputs.GetManagementControllerRunningFirmware[];
    sharedScope?: string;
    storageSasExpander?: inputs.GetManagementControllerStorageSasExpander;
    tags?: inputs.GetManagementControllerTag[];
    topSystem?: inputs.GetManagementControllerTopSystem;
    uemStreamAdminState?: string;
    versionContext?: inputs.GetManagementControllerVersionContext;
}

/**
 * A collection of values returned by getManagementController.
 */
export interface GetManagementControllerResult {
    readonly accountMoid?: string;
    readonly adapterUnit?: outputs.GetManagementControllerAdapterUnit;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetManagementControllerAncestor[];
    readonly certificate?: outputs.GetManagementControllerCertificate;
    readonly classId?: string;
    readonly computeBlade?: outputs.GetManagementControllerComputeBlade;
    readonly computeRackUnit?: outputs.GetManagementControllerComputeRackUnit;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly equipmentIoCardBase?: outputs.GetManagementControllerEquipmentIoCardBase;
    readonly equipmentSharedIoModule?: outputs.GetManagementControllerEquipmentSharedIoModule;
    readonly equipmentSystemIoController?: outputs.GetManagementControllerEquipmentSystemIoController;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetManagementControllerInventoryDeviceInfo;
    readonly kmipClientCertificate?: outputs.GetManagementControllerKmipClientCertificate;
    readonly managementInterfaces?: outputs.GetManagementControllerManagementInterface[];
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly networkElement?: outputs.GetManagementControllerNetworkElement;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetManagementControllerParent;
    readonly permissionResources?: outputs.GetManagementControllerPermissionResource[];
    readonly registeredDevice?: outputs.GetManagementControllerRegisteredDevice;
    readonly results: outputs.GetManagementControllerResult[];
    readonly rn?: string;
    readonly rootCaCertificates?: outputs.GetManagementControllerRootCaCertificate[];
    readonly runningFirmwares?: outputs.GetManagementControllerRunningFirmware[];
    readonly sharedScope?: string;
    readonly storageSasExpander?: outputs.GetManagementControllerStorageSasExpander;
    readonly tags?: outputs.GetManagementControllerTag[];
    readonly topSystem?: outputs.GetManagementControllerTopSystem;
    readonly uemStreamAdminState?: string;
    readonly versionContext?: outputs.GetManagementControllerVersionContext;
}
export function getManagementControllerOutput(args?: GetManagementControllerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetManagementControllerResult> {
    return pulumi.output(args).apply((a: any) => getManagementController(a, opts))
}

/**
 * A collection of arguments for invoking getManagementController.
 */
export interface GetManagementControllerOutputArgs {
    accountMoid?: pulumi.Input<string>;
    adapterUnit?: pulumi.Input<inputs.GetManagementControllerAdapterUnitArgs>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetManagementControllerAncestorArgs>[]>;
    certificate?: pulumi.Input<inputs.GetManagementControllerCertificateArgs>;
    classId?: pulumi.Input<string>;
    computeBlade?: pulumi.Input<inputs.GetManagementControllerComputeBladeArgs>;
    computeRackUnit?: pulumi.Input<inputs.GetManagementControllerComputeRackUnitArgs>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    equipmentIoCardBase?: pulumi.Input<inputs.GetManagementControllerEquipmentIoCardBaseArgs>;
    equipmentSharedIoModule?: pulumi.Input<inputs.GetManagementControllerEquipmentSharedIoModuleArgs>;
    equipmentSystemIoController?: pulumi.Input<inputs.GetManagementControllerEquipmentSystemIoControllerArgs>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetManagementControllerInventoryDeviceInfoArgs>;
    kmipClientCertificate?: pulumi.Input<inputs.GetManagementControllerKmipClientCertificateArgs>;
    managementInterfaces?: pulumi.Input<pulumi.Input<inputs.GetManagementControllerManagementInterfaceArgs>[]>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    networkElement?: pulumi.Input<inputs.GetManagementControllerNetworkElementArgs>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetManagementControllerParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetManagementControllerPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetManagementControllerRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    rootCaCertificates?: pulumi.Input<pulumi.Input<inputs.GetManagementControllerRootCaCertificateArgs>[]>;
    runningFirmwares?: pulumi.Input<pulumi.Input<inputs.GetManagementControllerRunningFirmwareArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    storageSasExpander?: pulumi.Input<inputs.GetManagementControllerStorageSasExpanderArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetManagementControllerTagArgs>[]>;
    topSystem?: pulumi.Input<inputs.GetManagementControllerTopSystemArgs>;
    uemStreamAdminState?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetManagementControllerVersionContextArgs>;
}
