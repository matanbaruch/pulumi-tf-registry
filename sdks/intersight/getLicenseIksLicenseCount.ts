// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLicenseIksLicenseCount(args?: GetLicenseIksLicenseCountArgs, opts?: pulumi.InvokeOptions): Promise<GetLicenseIksLicenseCountResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getLicenseIksLicenseCount:getLicenseIksLicenseCount", {
        "accountLicenseData": args.accountLicenseData,
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "advantageCount": args.advantageCount,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLicenseIksLicenseCount.
 */
export interface GetLicenseIksLicenseCountArgs {
    accountLicenseData?: inputs.GetLicenseIksLicenseCountAccountLicenseData;
    accountMoid?: string;
    additionalProperties?: string;
    advantageCount?: number;
    ancestors?: inputs.GetLicenseIksLicenseCountAncestor[];
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetLicenseIksLicenseCountParent;
    permissionResources?: inputs.GetLicenseIksLicenseCountPermissionResource[];
    sharedScope?: string;
    tags?: inputs.GetLicenseIksLicenseCountTag[];
    versionContext?: inputs.GetLicenseIksLicenseCountVersionContext;
}

/**
 * A collection of values returned by getLicenseIksLicenseCount.
 */
export interface GetLicenseIksLicenseCountResult {
    readonly accountLicenseData?: outputs.GetLicenseIksLicenseCountAccountLicenseData;
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly advantageCount?: number;
    readonly ancestors?: outputs.GetLicenseIksLicenseCountAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetLicenseIksLicenseCountParent;
    readonly permissionResources?: outputs.GetLicenseIksLicenseCountPermissionResource[];
    readonly results: outputs.GetLicenseIksLicenseCountResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetLicenseIksLicenseCountTag[];
    readonly versionContext?: outputs.GetLicenseIksLicenseCountVersionContext;
}
export function getLicenseIksLicenseCountOutput(args?: GetLicenseIksLicenseCountOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLicenseIksLicenseCountResult> {
    return pulumi.output(args).apply((a: any) => getLicenseIksLicenseCount(a, opts))
}

/**
 * A collection of arguments for invoking getLicenseIksLicenseCount.
 */
export interface GetLicenseIksLicenseCountOutputArgs {
    accountLicenseData?: pulumi.Input<inputs.GetLicenseIksLicenseCountAccountLicenseDataArgs>;
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    advantageCount?: pulumi.Input<number>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetLicenseIksLicenseCountAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetLicenseIksLicenseCountParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetLicenseIksLicenseCountPermissionResourceArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetLicenseIksLicenseCountTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetLicenseIksLicenseCountVersionContextArgs>;
}
