// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageHitachiExternalStoragePort(args?: GetStorageHitachiExternalStoragePortArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageHitachiExternalStoragePortResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageHitachiExternalStoragePort:getStorageHitachiExternalStoragePort", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "array": args.array,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "externalIsUsed": args.externalIsUsed,
        "externalPathMode": args.externalPathMode,
        "externalPortId": args.externalPortId,
        "externalSerialNumber": args.externalSerialNumber,
        "externalStorageInfo": args.externalStorageInfo,
        "externalWwn": args.externalWwn,
        "id": args.id,
        "iscsiIpAddress": args.iscsiIpAddress,
        "iscsiName": args.iscsiName,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "portId": args.portId,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
        "virtualPortId": args.virtualPortId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageHitachiExternalStoragePort.
 */
export interface GetStorageHitachiExternalStoragePortArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageHitachiExternalStoragePortAncestor[];
    array?: inputs.GetStorageHitachiExternalStoragePortArray;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    externalIsUsed?: boolean;
    externalPathMode?: string;
    externalPortId?: string;
    externalSerialNumber?: string;
    externalStorageInfo?: string;
    externalWwn?: string;
    id?: string;
    iscsiIpAddress?: string;
    iscsiName?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageHitachiExternalStoragePortParent;
    permissionResources?: inputs.GetStorageHitachiExternalStoragePortPermissionResource[];
    portId?: string;
    registeredDevice?: inputs.GetStorageHitachiExternalStoragePortRegisteredDevice;
    sharedScope?: string;
    tags?: inputs.GetStorageHitachiExternalStoragePortTag[];
    versionContext?: inputs.GetStorageHitachiExternalStoragePortVersionContext;
    virtualPortId?: number;
}

/**
 * A collection of values returned by getStorageHitachiExternalStoragePort.
 */
export interface GetStorageHitachiExternalStoragePortResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageHitachiExternalStoragePortAncestor[];
    readonly array?: outputs.GetStorageHitachiExternalStoragePortArray;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly externalIsUsed?: boolean;
    readonly externalPathMode?: string;
    readonly externalPortId?: string;
    readonly externalSerialNumber?: string;
    readonly externalStorageInfo?: string;
    readonly externalWwn?: string;
    readonly id: string;
    readonly iscsiIpAddress?: string;
    readonly iscsiName?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageHitachiExternalStoragePortParent;
    readonly permissionResources?: outputs.GetStorageHitachiExternalStoragePortPermissionResource[];
    readonly portId?: string;
    readonly registeredDevice?: outputs.GetStorageHitachiExternalStoragePortRegisteredDevice;
    readonly results: outputs.GetStorageHitachiExternalStoragePortResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetStorageHitachiExternalStoragePortTag[];
    readonly versionContext?: outputs.GetStorageHitachiExternalStoragePortVersionContext;
    readonly virtualPortId?: number;
}
export function getStorageHitachiExternalStoragePortOutput(args?: GetStorageHitachiExternalStoragePortOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageHitachiExternalStoragePortResult> {
    return pulumi.output(args).apply((a: any) => getStorageHitachiExternalStoragePort(a, opts))
}

/**
 * A collection of arguments for invoking getStorageHitachiExternalStoragePort.
 */
export interface GetStorageHitachiExternalStoragePortOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiExternalStoragePortAncestorArgs>[]>;
    array?: pulumi.Input<inputs.GetStorageHitachiExternalStoragePortArrayArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    externalIsUsed?: pulumi.Input<boolean>;
    externalPathMode?: pulumi.Input<string>;
    externalPortId?: pulumi.Input<string>;
    externalSerialNumber?: pulumi.Input<string>;
    externalStorageInfo?: pulumi.Input<string>;
    externalWwn?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    iscsiIpAddress?: pulumi.Input<string>;
    iscsiName?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageHitachiExternalStoragePortParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiExternalStoragePortPermissionResourceArgs>[]>;
    portId?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetStorageHitachiExternalStoragePortRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiExternalStoragePortTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetStorageHitachiExternalStoragePortVersionContextArgs>;
    virtualPortId?: pulumi.Input<number>;
}
