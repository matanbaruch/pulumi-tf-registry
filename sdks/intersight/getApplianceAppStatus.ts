// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getApplianceAppStatus(args?: GetApplianceAppStatusArgs, opts?: pulumi.InvokeOptions): Promise<GetApplianceAppStatusResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getApplianceAppStatus:getApplianceAppStatus", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "apiStatuses": args.apiStatuses,
        "appLabel": args.appLabel,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "groupStatus": args.groupStatus,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "operationalStatus": args.operationalStatus,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "readyCount": args.readyCount,
        "replicaCount": args.replicaCount,
        "restartCount1Hour": args.restartCount1Hour,
        "restartCount24Hours": args.restartCount24Hours,
        "restartCount5Mins": args.restartCount5Mins,
        "restartCountTotal": args.restartCountTotal,
        "runningCount": args.runningCount,
        "sharedScope": args.sharedScope,
        "statusChecks": args.statusChecks,
        "systemStatus": args.systemStatus,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getApplianceAppStatus.
 */
export interface GetApplianceAppStatusArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetApplianceAppStatusAncestor[];
    apiStatuses?: inputs.GetApplianceAppStatusApiStatus[];
    appLabel?: string;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    groupStatus?: inputs.GetApplianceAppStatusGroupStatus;
    id?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    operationalStatus?: string;
    owners?: string[];
    parent?: inputs.GetApplianceAppStatusParent;
    permissionResources?: inputs.GetApplianceAppStatusPermissionResource[];
    readyCount?: number;
    replicaCount?: number;
    restartCount1Hour?: number;
    restartCount24Hours?: number;
    restartCount5Mins?: number;
    restartCountTotal?: number;
    runningCount?: number;
    sharedScope?: string;
    statusChecks?: inputs.GetApplianceAppStatusStatusCheck[];
    systemStatus?: inputs.GetApplianceAppStatusSystemStatus;
    tags?: inputs.GetApplianceAppStatusTag[];
    versionContext?: inputs.GetApplianceAppStatusVersionContext;
}

/**
 * A collection of values returned by getApplianceAppStatus.
 */
export interface GetApplianceAppStatusResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetApplianceAppStatusAncestor[];
    readonly apiStatuses?: outputs.GetApplianceAppStatusApiStatus[];
    readonly appLabel?: string;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly groupStatus?: outputs.GetApplianceAppStatusGroupStatus;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly operationalStatus?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetApplianceAppStatusParent;
    readonly permissionResources?: outputs.GetApplianceAppStatusPermissionResource[];
    readonly readyCount?: number;
    readonly replicaCount?: number;
    readonly restartCount1Hour?: number;
    readonly restartCount24Hours?: number;
    readonly restartCount5Mins?: number;
    readonly restartCountTotal?: number;
    readonly results: outputs.GetApplianceAppStatusResult[];
    readonly runningCount?: number;
    readonly sharedScope?: string;
    readonly statusChecks?: outputs.GetApplianceAppStatusStatusCheck[];
    readonly systemStatus?: outputs.GetApplianceAppStatusSystemStatus;
    readonly tags?: outputs.GetApplianceAppStatusTag[];
    readonly versionContext?: outputs.GetApplianceAppStatusVersionContext;
}
export function getApplianceAppStatusOutput(args?: GetApplianceAppStatusOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetApplianceAppStatusResult> {
    return pulumi.output(args).apply((a: any) => getApplianceAppStatus(a, opts))
}

/**
 * A collection of arguments for invoking getApplianceAppStatus.
 */
export interface GetApplianceAppStatusOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetApplianceAppStatusAncestorArgs>[]>;
    apiStatuses?: pulumi.Input<pulumi.Input<inputs.GetApplianceAppStatusApiStatusArgs>[]>;
    appLabel?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    groupStatus?: pulumi.Input<inputs.GetApplianceAppStatusGroupStatusArgs>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operationalStatus?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetApplianceAppStatusParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetApplianceAppStatusPermissionResourceArgs>[]>;
    readyCount?: pulumi.Input<number>;
    replicaCount?: pulumi.Input<number>;
    restartCount1Hour?: pulumi.Input<number>;
    restartCount24Hours?: pulumi.Input<number>;
    restartCount5Mins?: pulumi.Input<number>;
    restartCountTotal?: pulumi.Input<number>;
    runningCount?: pulumi.Input<number>;
    sharedScope?: pulumi.Input<string>;
    statusChecks?: pulumi.Input<pulumi.Input<inputs.GetApplianceAppStatusStatusCheckArgs>[]>;
    systemStatus?: pulumi.Input<inputs.GetApplianceAppStatusSystemStatusArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetApplianceAppStatusTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetApplianceAppStatusVersionContextArgs>;
}
