// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAdapterHostFcInterface(args?: GetAdapterHostFcInterfaceArgs, opts?: pulumi.InvokeOptions): Promise<GetAdapterHostFcInterfaceResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getAdapterHostFcInterface:getAdapterHostFcInterface", {
        "accountMoid": args.accountMoid,
        "adapterUnit": args.adapterUnit,
        "additionalProperties": args.additionalProperties,
        "adminState": args.adminState,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "epDn": args.epDn,
        "hostFcInterfaceId": args.hostFcInterfaceId,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "isUpgraded": args.isUpgraded,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "operReasons": args.operReasons,
        "operState": args.operState,
        "operability": args.operability,
        "originalWwnn": args.originalWwnn,
        "originalWwpn": args.originalWwpn,
        "owners": args.owners,
        "parent": args.parent,
        "peerDn": args.peerDn,
        "permissionResources": args.permissionResources,
        "pinGroupName": args.pinGroupName,
        "pinnedInterface": args.pinnedInterface,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "registeredDevice": args.registeredDevice,
        "revision": args.revision,
        "rn": args.rn,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
        "vfc": args.vfc,
        "vfcAction": args.vfcAction,
        "vifId": args.vifId,
        "wwnn": args.wwnn,
        "wwpn": args.wwpn,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAdapterHostFcInterface.
 */
export interface GetAdapterHostFcInterfaceArgs {
    accountMoid?: string;
    adapterUnit?: inputs.GetAdapterHostFcInterfaceAdapterUnit;
    additionalProperties?: string;
    adminState?: string;
    ancestors?: inputs.GetAdapterHostFcInterfaceAncestor[];
    classId?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    epDn?: string;
    hostFcInterfaceId?: number;
    id?: string;
    inventoryDeviceInfo?: inputs.GetAdapterHostFcInterfaceInventoryDeviceInfo;
    isUpgraded?: boolean;
    modTime?: string;
    model?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    operReasons?: string[];
    operState?: string;
    operability?: string;
    originalWwnn?: string;
    originalWwpn?: string;
    owners?: string[];
    parent?: inputs.GetAdapterHostFcInterfaceParent;
    peerDn?: string;
    permissionResources?: inputs.GetAdapterHostFcInterfacePermissionResource[];
    pinGroupName?: string;
    pinnedInterface?: inputs.GetAdapterHostFcInterfacePinnedInterface;
    presence?: string;
    previousFru?: inputs.GetAdapterHostFcInterfacePreviousFru;
    registeredDevice?: inputs.GetAdapterHostFcInterfaceRegisteredDevice;
    revision?: string;
    rn?: string;
    serial?: string;
    sharedScope?: string;
    tags?: inputs.GetAdapterHostFcInterfaceTag[];
    vendor?: string;
    versionContext?: inputs.GetAdapterHostFcInterfaceVersionContext;
    vfc?: inputs.GetAdapterHostFcInterfaceVfc;
    vfcAction?: string;
    vifId?: number;
    wwnn?: string;
    wwpn?: string;
}

/**
 * A collection of values returned by getAdapterHostFcInterface.
 */
export interface GetAdapterHostFcInterfaceResult {
    readonly accountMoid?: string;
    readonly adapterUnit?: outputs.GetAdapterHostFcInterfaceAdapterUnit;
    readonly additionalProperties?: string;
    readonly adminState?: string;
    readonly ancestors?: outputs.GetAdapterHostFcInterfaceAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly epDn?: string;
    readonly hostFcInterfaceId?: number;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetAdapterHostFcInterfaceInventoryDeviceInfo;
    readonly isUpgraded?: boolean;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly operReasons?: string[];
    readonly operState?: string;
    readonly operability?: string;
    readonly originalWwnn?: string;
    readonly originalWwpn?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetAdapterHostFcInterfaceParent;
    readonly peerDn?: string;
    readonly permissionResources?: outputs.GetAdapterHostFcInterfacePermissionResource[];
    readonly pinGroupName?: string;
    readonly pinnedInterface?: outputs.GetAdapterHostFcInterfacePinnedInterface;
    readonly presence?: string;
    readonly previousFru?: outputs.GetAdapterHostFcInterfacePreviousFru;
    readonly registeredDevice?: outputs.GetAdapterHostFcInterfaceRegisteredDevice;
    readonly results: outputs.GetAdapterHostFcInterfaceResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetAdapterHostFcInterfaceTag[];
    readonly vendor?: string;
    readonly versionContext?: outputs.GetAdapterHostFcInterfaceVersionContext;
    readonly vfc?: outputs.GetAdapterHostFcInterfaceVfc;
    readonly vfcAction?: string;
    readonly vifId?: number;
    readonly wwnn?: string;
    readonly wwpn?: string;
}
export function getAdapterHostFcInterfaceOutput(args?: GetAdapterHostFcInterfaceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAdapterHostFcInterfaceResult> {
    return pulumi.output(args).apply((a: any) => getAdapterHostFcInterface(a, opts))
}

/**
 * A collection of arguments for invoking getAdapterHostFcInterface.
 */
export interface GetAdapterHostFcInterfaceOutputArgs {
    accountMoid?: pulumi.Input<string>;
    adapterUnit?: pulumi.Input<inputs.GetAdapterHostFcInterfaceAdapterUnitArgs>;
    additionalProperties?: pulumi.Input<string>;
    adminState?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetAdapterHostFcInterfaceAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    epDn?: pulumi.Input<string>;
    hostFcInterfaceId?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetAdapterHostFcInterfaceInventoryDeviceInfoArgs>;
    isUpgraded?: pulumi.Input<boolean>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operReasons?: pulumi.Input<pulumi.Input<string>[]>;
    operState?: pulumi.Input<string>;
    operability?: pulumi.Input<string>;
    originalWwnn?: pulumi.Input<string>;
    originalWwpn?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetAdapterHostFcInterfaceParentArgs>;
    peerDn?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetAdapterHostFcInterfacePermissionResourceArgs>[]>;
    pinGroupName?: pulumi.Input<string>;
    pinnedInterface?: pulumi.Input<inputs.GetAdapterHostFcInterfacePinnedInterfaceArgs>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetAdapterHostFcInterfacePreviousFruArgs>;
    registeredDevice?: pulumi.Input<inputs.GetAdapterHostFcInterfaceRegisteredDeviceArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetAdapterHostFcInterfaceTagArgs>[]>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetAdapterHostFcInterfaceVersionContextArgs>;
    vfc?: pulumi.Input<inputs.GetAdapterHostFcInterfaceVfcArgs>;
    vfcAction?: pulumi.Input<string>;
    vifId?: pulumi.Input<number>;
    wwnn?: pulumi.Input<string>;
    wwpn?: pulumi.Input<string>;
}
