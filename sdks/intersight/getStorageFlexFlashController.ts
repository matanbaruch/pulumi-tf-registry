// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageFlexFlashController(args?: GetStorageFlexFlashControllerArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageFlexFlashControllerResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageFlexFlashController:getStorageFlexFlashController", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "computeBoard": args.computeBoard,
        "controllerState": args.controllerState,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "ffControllerId": args.ffControllerId,
        "flexFlashControllerProps": args.flexFlashControllerProps,
        "flexFlashPhysicalDrives": args.flexFlashPhysicalDrives,
        "flexFlashVirtualDrives": args.flexFlashVirtualDrives,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "isUpgraded": args.isUpgraded,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "registeredDevice": args.registeredDevice,
        "revision": args.revision,
        "rn": args.rn,
        "runningFirmwares": args.runningFirmwares,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageFlexFlashController.
 */
export interface GetStorageFlexFlashControllerArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageFlexFlashControllerAncestor[];
    classId?: string;
    computeBoard?: inputs.GetStorageFlexFlashControllerComputeBoard;
    controllerState?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    ffControllerId?: string;
    flexFlashControllerProps?: inputs.GetStorageFlexFlashControllerFlexFlashControllerProp[];
    flexFlashPhysicalDrives?: inputs.GetStorageFlexFlashControllerFlexFlashPhysicalDrife[];
    flexFlashVirtualDrives?: inputs.GetStorageFlexFlashControllerFlexFlashVirtualDrife[];
    id?: string;
    inventoryDeviceInfo?: inputs.GetStorageFlexFlashControllerInventoryDeviceInfo;
    isUpgraded?: boolean;
    modTime?: string;
    model?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageFlexFlashControllerParent;
    permissionResources?: inputs.GetStorageFlexFlashControllerPermissionResource[];
    presence?: string;
    previousFru?: inputs.GetStorageFlexFlashControllerPreviousFru;
    registeredDevice?: inputs.GetStorageFlexFlashControllerRegisteredDevice;
    revision?: string;
    rn?: string;
    runningFirmwares?: inputs.GetStorageFlexFlashControllerRunningFirmware[];
    serial?: string;
    sharedScope?: string;
    tags?: inputs.GetStorageFlexFlashControllerTag[];
    vendor?: string;
    versionContext?: inputs.GetStorageFlexFlashControllerVersionContext;
}

/**
 * A collection of values returned by getStorageFlexFlashController.
 */
export interface GetStorageFlexFlashControllerResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageFlexFlashControllerAncestor[];
    readonly classId?: string;
    readonly computeBoard?: outputs.GetStorageFlexFlashControllerComputeBoard;
    readonly controllerState?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly ffControllerId?: string;
    readonly flexFlashControllerProps?: outputs.GetStorageFlexFlashControllerFlexFlashControllerProp[];
    readonly flexFlashPhysicalDrives?: outputs.GetStorageFlexFlashControllerFlexFlashPhysicalDrife[];
    readonly flexFlashVirtualDrives?: outputs.GetStorageFlexFlashControllerFlexFlashVirtualDrife[];
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetStorageFlexFlashControllerInventoryDeviceInfo;
    readonly isUpgraded?: boolean;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageFlexFlashControllerParent;
    readonly permissionResources?: outputs.GetStorageFlexFlashControllerPermissionResource[];
    readonly presence?: string;
    readonly previousFru?: outputs.GetStorageFlexFlashControllerPreviousFru;
    readonly registeredDevice?: outputs.GetStorageFlexFlashControllerRegisteredDevice;
    readonly results: outputs.GetStorageFlexFlashControllerResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly runningFirmwares?: outputs.GetStorageFlexFlashControllerRunningFirmware[];
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetStorageFlexFlashControllerTag[];
    readonly vendor?: string;
    readonly versionContext?: outputs.GetStorageFlexFlashControllerVersionContext;
}
export function getStorageFlexFlashControllerOutput(args?: GetStorageFlexFlashControllerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageFlexFlashControllerResult> {
    return pulumi.output(args).apply((a: any) => getStorageFlexFlashController(a, opts))
}

/**
 * A collection of arguments for invoking getStorageFlexFlashController.
 */
export interface GetStorageFlexFlashControllerOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageFlexFlashControllerAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    computeBoard?: pulumi.Input<inputs.GetStorageFlexFlashControllerComputeBoardArgs>;
    controllerState?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    ffControllerId?: pulumi.Input<string>;
    flexFlashControllerProps?: pulumi.Input<pulumi.Input<inputs.GetStorageFlexFlashControllerFlexFlashControllerPropArgs>[]>;
    flexFlashPhysicalDrives?: pulumi.Input<pulumi.Input<inputs.GetStorageFlexFlashControllerFlexFlashPhysicalDrifeArgs>[]>;
    flexFlashVirtualDrives?: pulumi.Input<pulumi.Input<inputs.GetStorageFlexFlashControllerFlexFlashVirtualDrifeArgs>[]>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetStorageFlexFlashControllerInventoryDeviceInfoArgs>;
    isUpgraded?: pulumi.Input<boolean>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageFlexFlashControllerParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageFlexFlashControllerPermissionResourceArgs>[]>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetStorageFlexFlashControllerPreviousFruArgs>;
    registeredDevice?: pulumi.Input<inputs.GetStorageFlexFlashControllerRegisteredDeviceArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    runningFirmwares?: pulumi.Input<pulumi.Input<inputs.GetStorageFlexFlashControllerRunningFirmwareArgs>[]>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageFlexFlashControllerTagArgs>[]>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetStorageFlexFlashControllerVersionContextArgs>;
}
