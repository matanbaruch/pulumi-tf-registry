// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSoftwarerepositoryCategoryMapper(args?: GetSoftwarerepositoryCategoryMapperArgs, opts?: pulumi.InvokeOptions): Promise<GetSoftwarerepositoryCategoryMapperResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getSoftwarerepositoryCategoryMapper:getSoftwarerepositoryCategoryMapper", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "category": args.category,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "fileType": args.fileType,
        "id": args.id,
        "imageType": args.imageType,
        "isNfsUpgradeSupported": args.isNfsUpgradeSupported,
        "mdfId": args.mdfId,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "nrSource": args.nrSource,
        "nrVersion": args.nrVersion,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "regexPattern": args.regexPattern,
        "sharedScope": args.sharedScope,
        "supportedModels": args.supportedModels,
        "swId": args.swId,
        "tagTypes": args.tagTypes,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSoftwarerepositoryCategoryMapper.
 */
export interface GetSoftwarerepositoryCategoryMapperArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetSoftwarerepositoryCategoryMapperAncestor[];
    category?: string;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    fileType?: string;
    id?: string;
    imageType?: string;
    isNfsUpgradeSupported?: boolean;
    mdfId?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    nrSource?: string;
    nrVersion?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetSoftwarerepositoryCategoryMapperParent;
    permissionResources?: inputs.GetSoftwarerepositoryCategoryMapperPermissionResource[];
    regexPattern?: string;
    sharedScope?: string;
    supportedModels?: string[];
    swId?: string;
    tagTypes?: string[];
    tags?: inputs.GetSoftwarerepositoryCategoryMapperTag[];
    versionContext?: inputs.GetSoftwarerepositoryCategoryMapperVersionContext;
}

/**
 * A collection of values returned by getSoftwarerepositoryCategoryMapper.
 */
export interface GetSoftwarerepositoryCategoryMapperResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetSoftwarerepositoryCategoryMapperAncestor[];
    readonly category?: string;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly fileType?: string;
    readonly id: string;
    readonly imageType?: string;
    readonly isNfsUpgradeSupported?: boolean;
    readonly mdfId?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nrSource?: string;
    readonly nrVersion?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetSoftwarerepositoryCategoryMapperParent;
    readonly permissionResources?: outputs.GetSoftwarerepositoryCategoryMapperPermissionResource[];
    readonly regexPattern?: string;
    readonly results: outputs.GetSoftwarerepositoryCategoryMapperResult[];
    readonly sharedScope?: string;
    readonly supportedModels?: string[];
    readonly swId?: string;
    readonly tagTypes?: string[];
    readonly tags?: outputs.GetSoftwarerepositoryCategoryMapperTag[];
    readonly versionContext?: outputs.GetSoftwarerepositoryCategoryMapperVersionContext;
}
export function getSoftwarerepositoryCategoryMapperOutput(args?: GetSoftwarerepositoryCategoryMapperOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSoftwarerepositoryCategoryMapperResult> {
    return pulumi.output(args).apply((a: any) => getSoftwarerepositoryCategoryMapper(a, opts))
}

/**
 * A collection of arguments for invoking getSoftwarerepositoryCategoryMapper.
 */
export interface GetSoftwarerepositoryCategoryMapperOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetSoftwarerepositoryCategoryMapperAncestorArgs>[]>;
    category?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    fileType?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    imageType?: pulumi.Input<string>;
    isNfsUpgradeSupported?: pulumi.Input<boolean>;
    mdfId?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nrSource?: pulumi.Input<string>;
    nrVersion?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetSoftwarerepositoryCategoryMapperParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetSoftwarerepositoryCategoryMapperPermissionResourceArgs>[]>;
    regexPattern?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    supportedModels?: pulumi.Input<pulumi.Input<string>[]>;
    swId?: pulumi.Input<string>;
    tagTypes?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetSoftwarerepositoryCategoryMapperTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetSoftwarerepositoryCategoryMapperVersionContextArgs>;
}
