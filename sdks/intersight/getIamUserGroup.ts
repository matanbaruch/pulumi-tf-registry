// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIamUserGroup(args?: GetIamUserGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetIamUserGroupResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getIamUserGroup:getIamUserGroup", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "idp": args.idp,
        "idpreference": args.idpreference,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "permissions": args.permissions,
        "qualifier": args.qualifier,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "users": args.users,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIamUserGroup.
 */
export interface GetIamUserGroupArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetIamUserGroupAncestor[];
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    id?: string;
    idp?: inputs.GetIamUserGroupIdp;
    idpreference?: inputs.GetIamUserGroupIdpreference;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetIamUserGroupParent;
    permissionResources?: inputs.GetIamUserGroupPermissionResource[];
    permissions?: inputs.GetIamUserGroupPermission[];
    qualifier?: inputs.GetIamUserGroupQualifier;
    sharedScope?: string;
    tags?: inputs.GetIamUserGroupTag[];
    users?: inputs.GetIamUserGroupUser[];
    versionContext?: inputs.GetIamUserGroupVersionContext;
}

/**
 * A collection of values returned by getIamUserGroup.
 */
export interface GetIamUserGroupResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetIamUserGroupAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly idp?: outputs.GetIamUserGroupIdp;
    readonly idpreference?: outputs.GetIamUserGroupIdpreference;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetIamUserGroupParent;
    readonly permissionResources?: outputs.GetIamUserGroupPermissionResource[];
    readonly permissions?: outputs.GetIamUserGroupPermission[];
    readonly qualifier?: outputs.GetIamUserGroupQualifier;
    readonly results: outputs.GetIamUserGroupResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetIamUserGroupTag[];
    readonly users?: outputs.GetIamUserGroupUser[];
    readonly versionContext?: outputs.GetIamUserGroupVersionContext;
}
export function getIamUserGroupOutput(args?: GetIamUserGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIamUserGroupResult> {
    return pulumi.output(args).apply((a: any) => getIamUserGroup(a, opts))
}

/**
 * A collection of arguments for invoking getIamUserGroup.
 */
export interface GetIamUserGroupOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetIamUserGroupAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    idp?: pulumi.Input<inputs.GetIamUserGroupIdpArgs>;
    idpreference?: pulumi.Input<inputs.GetIamUserGroupIdpreferenceArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetIamUserGroupParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetIamUserGroupPermissionResourceArgs>[]>;
    permissions?: pulumi.Input<pulumi.Input<inputs.GetIamUserGroupPermissionArgs>[]>;
    qualifier?: pulumi.Input<inputs.GetIamUserGroupQualifierArgs>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetIamUserGroupTagArgs>[]>;
    users?: pulumi.Input<pulumi.Input<inputs.GetIamUserGroupUserArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetIamUserGroupVersionContextArgs>;
}
