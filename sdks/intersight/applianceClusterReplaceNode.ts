// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApplianceClusterReplaceNode extends pulumi.CustomResource {
    /**
     * Get an existing ApplianceClusterReplaceNode resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplianceClusterReplaceNodeState, opts?: pulumi.CustomResourceOptions): ApplianceClusterReplaceNode {
        return new ApplianceClusterReplaceNode(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'intersight:index/applianceClusterReplaceNode:ApplianceClusterReplaceNode';

    /**
     * Returns true if the given object is an instance of ApplianceClusterReplaceNode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplianceClusterReplaceNode {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplianceClusterReplaceNode.__pulumiType;
    }

    /**
     * The Account ID for this managed object.
     */
    public readonly accountMoid!: pulumi.Output<string>;
    /**
     * A reference to a iamAccount resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    public readonly accounts!: pulumi.Output<outputs.ApplianceClusterReplaceNodeAccount[]>;
    public readonly additionalProperties!: pulumi.Output<string | undefined>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly ancestors!: pulumi.Output<outputs.ApplianceClusterReplaceNodeAncestor[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    public readonly classId!: pulumi.Output<string | undefined>;
    public readonly completedPhases!: pulumi.Output<outputs.ApplianceClusterReplaceNodeCompletedPhase[]>;
    /**
     * The time when this managed object was created.
     */
    public readonly createTime!: pulumi.Output<string>;
    /**
     * Current phase of the Intersight Appliance's software install.
     */
    public readonly currentPhases!: pulumi.Output<outputs.ApplianceClusterReplaceNodeCurrentPhase[]>;
    /**
     * The DomainGroup ID for this managed object.
     */
    public readonly domainGroupMoid!: pulumi.Output<string>;
    /**
     * Elapsed time in seconds during the software install.
     */
    public readonly elapsedTime!: pulumi.Output<number>;
    /**
     * End date of the software install.
     */
    public readonly endTime!: pulumi.Output<string>;
    /**
     * Error code for Intersight Appliance's software install. In case of failure - this code will help decide if software
     * install can be retried.
     */
    public readonly errorCode!: pulumi.Output<number>;
    /**
     * Hostname of the node being replaced.
     */
    public readonly hostname!: pulumi.Output<string | undefined>;
    public readonly messages!: pulumi.Output<string[]>;
    /**
     * The time when this managed object was last modified.
     */
    public readonly modTime!: pulumi.Output<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    public readonly moid!: pulumi.Output<string>;
    /**
     * Node id of the node being replaced.
     */
    public readonly nodeId!: pulumi.Output<number | undefined>;
    public readonly nodeInfos!: pulumi.Output<outputs.ApplianceClusterReplaceNodeNodeInfo[]>;
    /**
     * If the node being replaced has a different IP.
     */
    public readonly nodeIpChanged!: pulumi.Output<boolean>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    public readonly objectType!: pulumi.Output<string | undefined>;
    public readonly owners!: pulumi.Output<string[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    public readonly parents!: pulumi.Output<outputs.ApplianceClusterReplaceNodeParent[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly permissionResources!: pulumi.Output<outputs.ApplianceClusterReplaceNodePermissionResource[]>;
    /**
     * Round robin DNS address, which should be able to resolve the hostnames of all the nodes in the cluster.
     */
    public readonly remoteDns!: pulumi.Output<string | undefined>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    public readonly sharedScope!: pulumi.Output<string>;
    /**
     * Start date of the software install. UI can modify startTime to re-schedule an install.
     */
    public readonly startTime!: pulumi.Output<string | undefined>;
    /**
     * Status of the Intersight Appliance's software install. * `NotReady` - Cluster is not ready. Install cannot be triggered.
     * * `Ready` - Cluster is ready. Install can be triggered. * `InProgress` - Install is currently in progress. * `Success` -
     * Install was run and succeeded. * `Fail` - Install was run and failed.
     */
    public readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.ApplianceClusterReplaceNodeTag[]>;
    /**
     * Total number of nodes in the system.
     */
    public readonly totalNodes!: pulumi.Output<number>;
    /**
     * TotalPhase represents the total number of the install phases for one install.
     */
    public readonly totalPhases!: pulumi.Output<number>;
    /**
     * The versioning info for this managed object.
     */
    public readonly versionContexts!: pulumi.Output<outputs.ApplianceClusterReplaceNodeVersionContext[]>;
    /**
     * VIP hostname and ip address of the onprem cluster.
     */
    public readonly vips!: pulumi.Output<outputs.ApplianceClusterReplaceNodeVip[]>;

    /**
     * Create a ApplianceClusterReplaceNode resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ApplianceClusterReplaceNodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplianceClusterReplaceNodeArgs | ApplianceClusterReplaceNodeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplianceClusterReplaceNodeState | undefined;
            resourceInputs["accountMoid"] = state ? state.accountMoid : undefined;
            resourceInputs["accounts"] = state ? state.accounts : undefined;
            resourceInputs["additionalProperties"] = state ? state.additionalProperties : undefined;
            resourceInputs["ancestors"] = state ? state.ancestors : undefined;
            resourceInputs["classId"] = state ? state.classId : undefined;
            resourceInputs["completedPhases"] = state ? state.completedPhases : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["currentPhases"] = state ? state.currentPhases : undefined;
            resourceInputs["domainGroupMoid"] = state ? state.domainGroupMoid : undefined;
            resourceInputs["elapsedTime"] = state ? state.elapsedTime : undefined;
            resourceInputs["endTime"] = state ? state.endTime : undefined;
            resourceInputs["errorCode"] = state ? state.errorCode : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["messages"] = state ? state.messages : undefined;
            resourceInputs["modTime"] = state ? state.modTime : undefined;
            resourceInputs["moid"] = state ? state.moid : undefined;
            resourceInputs["nodeId"] = state ? state.nodeId : undefined;
            resourceInputs["nodeInfos"] = state ? state.nodeInfos : undefined;
            resourceInputs["nodeIpChanged"] = state ? state.nodeIpChanged : undefined;
            resourceInputs["objectType"] = state ? state.objectType : undefined;
            resourceInputs["owners"] = state ? state.owners : undefined;
            resourceInputs["parents"] = state ? state.parents : undefined;
            resourceInputs["permissionResources"] = state ? state.permissionResources : undefined;
            resourceInputs["remoteDns"] = state ? state.remoteDns : undefined;
            resourceInputs["sharedScope"] = state ? state.sharedScope : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["totalNodes"] = state ? state.totalNodes : undefined;
            resourceInputs["totalPhases"] = state ? state.totalPhases : undefined;
            resourceInputs["versionContexts"] = state ? state.versionContexts : undefined;
            resourceInputs["vips"] = state ? state.vips : undefined;
        } else {
            const args = argsOrState as ApplianceClusterReplaceNodeArgs | undefined;
            resourceInputs["accountMoid"] = args ? args.accountMoid : undefined;
            resourceInputs["accounts"] = args ? args.accounts : undefined;
            resourceInputs["additionalProperties"] = args ? args.additionalProperties : undefined;
            resourceInputs["ancestors"] = args ? args.ancestors : undefined;
            resourceInputs["classId"] = args ? args.classId : undefined;
            resourceInputs["completedPhases"] = args ? args.completedPhases : undefined;
            resourceInputs["createTime"] = args ? args.createTime : undefined;
            resourceInputs["currentPhases"] = args ? args.currentPhases : undefined;
            resourceInputs["domainGroupMoid"] = args ? args.domainGroupMoid : undefined;
            resourceInputs["elapsedTime"] = args ? args.elapsedTime : undefined;
            resourceInputs["endTime"] = args ? args.endTime : undefined;
            resourceInputs["errorCode"] = args ? args.errorCode : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["messages"] = args ? args.messages : undefined;
            resourceInputs["modTime"] = args ? args.modTime : undefined;
            resourceInputs["moid"] = args ? args.moid : undefined;
            resourceInputs["nodeId"] = args ? args.nodeId : undefined;
            resourceInputs["nodeInfos"] = args ? args.nodeInfos : undefined;
            resourceInputs["nodeIpChanged"] = args ? args.nodeIpChanged : undefined;
            resourceInputs["objectType"] = args ? args.objectType : undefined;
            resourceInputs["owners"] = args ? args.owners : undefined;
            resourceInputs["parents"] = args ? args.parents : undefined;
            resourceInputs["permissionResources"] = args ? args.permissionResources : undefined;
            resourceInputs["remoteDns"] = args ? args.remoteDns : undefined;
            resourceInputs["sharedScope"] = args ? args.sharedScope : undefined;
            resourceInputs["startTime"] = args ? args.startTime : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["totalNodes"] = args ? args.totalNodes : undefined;
            resourceInputs["totalPhases"] = args ? args.totalPhases : undefined;
            resourceInputs["versionContexts"] = args ? args.versionContexts : undefined;
            resourceInputs["vips"] = args ? args.vips : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplianceClusterReplaceNode.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApplianceClusterReplaceNode resources.
 */
export interface ApplianceClusterReplaceNodeState {
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    /**
     * A reference to a iamAccount resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    accounts?: pulumi.Input<pulumi.Input<inputs.ApplianceClusterReplaceNodeAccount>[]>;
    additionalProperties?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.ApplianceClusterReplaceNodeAncestor>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    completedPhases?: pulumi.Input<pulumi.Input<inputs.ApplianceClusterReplaceNodeCompletedPhase>[]>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Current phase of the Intersight Appliance's software install.
     */
    currentPhases?: pulumi.Input<pulumi.Input<inputs.ApplianceClusterReplaceNodeCurrentPhase>[]>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    /**
     * Elapsed time in seconds during the software install.
     */
    elapsedTime?: pulumi.Input<number>;
    /**
     * End date of the software install.
     */
    endTime?: pulumi.Input<string>;
    /**
     * Error code for Intersight Appliance's software install. In case of failure - this code will help decide if software
     * install can be retried.
     */
    errorCode?: pulumi.Input<number>;
    /**
     * Hostname of the node being replaced.
     */
    hostname?: pulumi.Input<string>;
    messages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * Node id of the node being replaced.
     */
    nodeId?: pulumi.Input<number>;
    nodeInfos?: pulumi.Input<pulumi.Input<inputs.ApplianceClusterReplaceNodeNodeInfo>[]>;
    /**
     * If the node being replaced has a different IP.
     */
    nodeIpChanged?: pulumi.Input<boolean>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.ApplianceClusterReplaceNodeParent>[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.ApplianceClusterReplaceNodePermissionResource>[]>;
    /**
     * Round robin DNS address, which should be able to resolve the hostnames of all the nodes in the cluster.
     */
    remoteDns?: pulumi.Input<string>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    /**
     * Start date of the software install. UI can modify startTime to re-schedule an install.
     */
    startTime?: pulumi.Input<string>;
    /**
     * Status of the Intersight Appliance's software install. * `NotReady` - Cluster is not ready. Install cannot be triggered.
     * * `Ready` - Cluster is ready. Install can be triggered. * `InProgress` - Install is currently in progress. * `Success` -
     * Install was run and succeeded. * `Fail` - Install was run and failed.
     */
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.ApplianceClusterReplaceNodeTag>[]>;
    /**
     * Total number of nodes in the system.
     */
    totalNodes?: pulumi.Input<number>;
    /**
     * TotalPhase represents the total number of the install phases for one install.
     */
    totalPhases?: pulumi.Input<number>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.ApplianceClusterReplaceNodeVersionContext>[]>;
    /**
     * VIP hostname and ip address of the onprem cluster.
     */
    vips?: pulumi.Input<pulumi.Input<inputs.ApplianceClusterReplaceNodeVip>[]>;
}

/**
 * The set of arguments for constructing a ApplianceClusterReplaceNode resource.
 */
export interface ApplianceClusterReplaceNodeArgs {
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    /**
     * A reference to a iamAccount resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    accounts?: pulumi.Input<pulumi.Input<inputs.ApplianceClusterReplaceNodeAccount>[]>;
    additionalProperties?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.ApplianceClusterReplaceNodeAncestor>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    completedPhases?: pulumi.Input<pulumi.Input<inputs.ApplianceClusterReplaceNodeCompletedPhase>[]>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Current phase of the Intersight Appliance's software install.
     */
    currentPhases?: pulumi.Input<pulumi.Input<inputs.ApplianceClusterReplaceNodeCurrentPhase>[]>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    /**
     * Elapsed time in seconds during the software install.
     */
    elapsedTime?: pulumi.Input<number>;
    /**
     * End date of the software install.
     */
    endTime?: pulumi.Input<string>;
    /**
     * Error code for Intersight Appliance's software install. In case of failure - this code will help decide if software
     * install can be retried.
     */
    errorCode?: pulumi.Input<number>;
    /**
     * Hostname of the node being replaced.
     */
    hostname?: pulumi.Input<string>;
    messages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * Node id of the node being replaced.
     */
    nodeId?: pulumi.Input<number>;
    nodeInfos?: pulumi.Input<pulumi.Input<inputs.ApplianceClusterReplaceNodeNodeInfo>[]>;
    /**
     * If the node being replaced has a different IP.
     */
    nodeIpChanged?: pulumi.Input<boolean>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.ApplianceClusterReplaceNodeParent>[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.ApplianceClusterReplaceNodePermissionResource>[]>;
    /**
     * Round robin DNS address, which should be able to resolve the hostnames of all the nodes in the cluster.
     */
    remoteDns?: pulumi.Input<string>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    /**
     * Start date of the software install. UI can modify startTime to re-schedule an install.
     */
    startTime?: pulumi.Input<string>;
    /**
     * Status of the Intersight Appliance's software install. * `NotReady` - Cluster is not ready. Install cannot be triggered.
     * * `Ready` - Cluster is ready. Install can be triggered. * `InProgress` - Install is currently in progress. * `Success` -
     * Install was run and succeeded. * `Fail` - Install was run and failed.
     */
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.ApplianceClusterReplaceNodeTag>[]>;
    /**
     * Total number of nodes in the system.
     */
    totalNodes?: pulumi.Input<number>;
    /**
     * TotalPhase represents the total number of the install phases for one install.
     */
    totalPhases?: pulumi.Input<number>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.ApplianceClusterReplaceNodeVersionContext>[]>;
    /**
     * VIP hostname and ip address of the onprem cluster.
     */
    vips?: pulumi.Input<pulumi.Input<inputs.ApplianceClusterReplaceNodeVip>[]>;
}
