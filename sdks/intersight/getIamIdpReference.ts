// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIamIdpReference(args?: GetIamIdpReferenceArgs, opts?: pulumi.InvokeOptions): Promise<GetIamIdpReferenceResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getIamIdpReference:getIamIdpReference", {
        "account": args.account,
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "domainName": args.domainName,
        "id": args.id,
        "idp": args.idp,
        "idpEntityId": args.idpEntityId,
        "modTime": args.modTime,
        "moid": args.moid,
        "multiFactorAuthentication": args.multiFactorAuthentication,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "userPreferences": args.userPreferences,
        "userSettings": args.userSettings,
        "usergroups": args.usergroups,
        "users": args.users,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIamIdpReference.
 */
export interface GetIamIdpReferenceArgs {
    account?: inputs.GetIamIdpReferenceAccount;
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetIamIdpReferenceAncestor[];
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    domainName?: string;
    id?: string;
    idp?: inputs.GetIamIdpReferenceIdp;
    idpEntityId?: string;
    modTime?: string;
    moid?: string;
    multiFactorAuthentication?: boolean;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetIamIdpReferenceParent;
    permissionResources?: inputs.GetIamIdpReferencePermissionResource[];
    sharedScope?: string;
    tags?: inputs.GetIamIdpReferenceTag[];
    userPreferences?: inputs.GetIamIdpReferenceUserPreference[];
    userSettings?: inputs.GetIamIdpReferenceUserSetting[];
    usergroups?: inputs.GetIamIdpReferenceUsergroup[];
    users?: inputs.GetIamIdpReferenceUser[];
    versionContext?: inputs.GetIamIdpReferenceVersionContext;
}

/**
 * A collection of values returned by getIamIdpReference.
 */
export interface GetIamIdpReferenceResult {
    readonly account?: outputs.GetIamIdpReferenceAccount;
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetIamIdpReferenceAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly domainName?: string;
    readonly id: string;
    readonly idp?: outputs.GetIamIdpReferenceIdp;
    readonly idpEntityId?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly multiFactorAuthentication?: boolean;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetIamIdpReferenceParent;
    readonly permissionResources?: outputs.GetIamIdpReferencePermissionResource[];
    readonly results: outputs.GetIamIdpReferenceResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetIamIdpReferenceTag[];
    readonly userPreferences?: outputs.GetIamIdpReferenceUserPreference[];
    readonly userSettings?: outputs.GetIamIdpReferenceUserSetting[];
    readonly usergroups?: outputs.GetIamIdpReferenceUsergroup[];
    readonly users?: outputs.GetIamIdpReferenceUser[];
    readonly versionContext?: outputs.GetIamIdpReferenceVersionContext;
}
export function getIamIdpReferenceOutput(args?: GetIamIdpReferenceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIamIdpReferenceResult> {
    return pulumi.output(args).apply((a: any) => getIamIdpReference(a, opts))
}

/**
 * A collection of arguments for invoking getIamIdpReference.
 */
export interface GetIamIdpReferenceOutputArgs {
    account?: pulumi.Input<inputs.GetIamIdpReferenceAccountArgs>;
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetIamIdpReferenceAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    idp?: pulumi.Input<inputs.GetIamIdpReferenceIdpArgs>;
    idpEntityId?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    multiFactorAuthentication?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetIamIdpReferenceParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetIamIdpReferencePermissionResourceArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetIamIdpReferenceTagArgs>[]>;
    userPreferences?: pulumi.Input<pulumi.Input<inputs.GetIamIdpReferenceUserPreferenceArgs>[]>;
    userSettings?: pulumi.Input<pulumi.Input<inputs.GetIamIdpReferenceUserSettingArgs>[]>;
    usergroups?: pulumi.Input<pulumi.Input<inputs.GetIamIdpReferenceUsergroupArgs>[]>;
    users?: pulumi.Input<pulumi.Input<inputs.GetIamIdpReferenceUserArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetIamIdpReferenceVersionContextArgs>;
}
