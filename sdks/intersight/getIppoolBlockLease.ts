// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIppoolBlockLease(args?: GetIppoolBlockLeaseArgs, opts?: pulumi.InvokeOptions): Promise<GetIppoolBlockLeaseResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getIppoolBlockLease:getIppoolBlockLease", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "assignedToEntity": args.assignedToEntity,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "ipLeases": args.ipLeases,
        "ipType": args.ipType,
        "modTime": args.modTime,
        "moid": args.moid,
        "nrCount": args.nrCount,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "pool": args.pool,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "universe": args.universe,
        "versionContext": args.versionContext,
        "vrf": args.vrf,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIppoolBlockLease.
 */
export interface GetIppoolBlockLeaseArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetIppoolBlockLeaseAncestor[];
    assignedToEntity?: inputs.GetIppoolBlockLeaseAssignedToEntity;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    id?: string;
    ipLeases?: inputs.GetIppoolBlockLeaseIpLease[];
    ipType?: string;
    modTime?: string;
    moid?: string;
    nrCount?: number;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetIppoolBlockLeaseParent;
    permissionResources?: inputs.GetIppoolBlockLeasePermissionResource[];
    pool?: inputs.GetIppoolBlockLeasePool;
    sharedScope?: string;
    tags?: inputs.GetIppoolBlockLeaseTag[];
    universe?: inputs.GetIppoolBlockLeaseUniverse;
    versionContext?: inputs.GetIppoolBlockLeaseVersionContext;
    vrf?: inputs.GetIppoolBlockLeaseVrf;
}

/**
 * A collection of values returned by getIppoolBlockLease.
 */
export interface GetIppoolBlockLeaseResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetIppoolBlockLeaseAncestor[];
    readonly assignedToEntity?: outputs.GetIppoolBlockLeaseAssignedToEntity;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly ipLeases?: outputs.GetIppoolBlockLeaseIpLease[];
    readonly ipType?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly nrCount?: number;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetIppoolBlockLeaseParent;
    readonly permissionResources?: outputs.GetIppoolBlockLeasePermissionResource[];
    readonly pool?: outputs.GetIppoolBlockLeasePool;
    readonly results: outputs.GetIppoolBlockLeaseResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetIppoolBlockLeaseTag[];
    readonly universe?: outputs.GetIppoolBlockLeaseUniverse;
    readonly versionContext?: outputs.GetIppoolBlockLeaseVersionContext;
    readonly vrf?: outputs.GetIppoolBlockLeaseVrf;
}
export function getIppoolBlockLeaseOutput(args?: GetIppoolBlockLeaseOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIppoolBlockLeaseResult> {
    return pulumi.output(args).apply((a: any) => getIppoolBlockLease(a, opts))
}

/**
 * A collection of arguments for invoking getIppoolBlockLease.
 */
export interface GetIppoolBlockLeaseOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetIppoolBlockLeaseAncestorArgs>[]>;
    assignedToEntity?: pulumi.Input<inputs.GetIppoolBlockLeaseAssignedToEntityArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ipLeases?: pulumi.Input<pulumi.Input<inputs.GetIppoolBlockLeaseIpLeaseArgs>[]>;
    ipType?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    nrCount?: pulumi.Input<number>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetIppoolBlockLeaseParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetIppoolBlockLeasePermissionResourceArgs>[]>;
    pool?: pulumi.Input<inputs.GetIppoolBlockLeasePoolArgs>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetIppoolBlockLeaseTagArgs>[]>;
    universe?: pulumi.Input<inputs.GetIppoolBlockLeaseUniverseArgs>;
    versionContext?: pulumi.Input<inputs.GetIppoolBlockLeaseVersionContextArgs>;
    vrf?: pulumi.Input<inputs.GetIppoolBlockLeaseVrfArgs>;
}
