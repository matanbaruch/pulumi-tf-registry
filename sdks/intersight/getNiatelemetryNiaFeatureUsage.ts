// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNiatelemetryNiaFeatureUsage(args?: GetNiatelemetryNiaFeatureUsageArgs, opts?: pulumi.InvokeOptions): Promise<GetNiatelemetryNiaFeatureUsageResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getNiatelemetryNiaFeatureUsage:getNiatelemetryNiaFeatureUsage", {
        "aaaLdapProviderCount": args.aaaLdapProviderCount,
        "aaaRadiusProviderCount": args.aaaRadiusProviderCount,
        "aaaTacacsProviderCount": args.aaaTacacsProviderCount,
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "apicClusterHealth": args.apicClusterHealth,
        "apicCount": args.apicCount,
        "apicIsTelnetEnabled": args.apicIsTelnetEnabled,
        "apicNtpCount": args.apicNtpCount,
        "apicSnmpCommunityCount": args.apicSnmpCommunityCount,
        "apicSysLogGrpCount": args.apicSysLogGrpCount,
        "apicSysLogSrcCount": args.apicSysLogSrcCount,
        "appCenterCount": args.appCenterCount,
        "ave": args.ave,
        "bdCount": args.bdCount,
        "callhomeSmartGroupCount": args.callhomeSmartGroupCount,
        "classId": args.classId,
        "cloudSecPeerCount": args.cloudSecPeerCount,
        "cloudTenantCount": args.cloudTenantCount,
        "compHvCount": args.compHvCount,
        "configExportpCount": args.configExportpCount,
        "configJobCount": args.configJobCount,
        "consistencyCheckerApp": args.consistencyCheckerApp,
        "contractCount": args.contractCount,
        "createTime": args.createTime,
        "dnsCount": args.dnsCount,
        "domainGroupMoid": args.domainGroupMoid,
        "eigrpCount": args.eigrpCount,
        "epgCount": args.epgCount,
        "fabricModuleCount": args.fabricModuleCount,
        "fabricSetuppCount": args.fabricSetuppCount,
        "fcoeNportCount": args.fcoeNportCount,
        "fcoeNportDomCount": args.fcoeNportDomCount,
        "fcoeNportVlanCount": args.fcoeNportVlanCount,
        "fcoeNportVsanCount": args.fcoeNportVsanCount,
        "fvSlaDefCount": args.fvSlaDefCount,
        "hsrpCount": args.hsrpCount,
        "ibgpCount": args.ibgpCount,
        "id": args.id,
        "igmpAccessListCount": args.igmpAccessListCount,
        "igmpSnoop": args.igmpSnoop,
        "ipEpgCount": args.ipEpgCount,
        "isBgpRouteReflectorsFeatureUsed": args.isBgpRouteReflectorsFeatureUsed,
        "isBridgeDomainsFeatureUsed": args.isBridgeDomainsFeatureUsed,
        "isCommonLocalUserName": args.isCommonLocalUserName,
        "isContractsFeatureUsed": args.isContractsFeatureUsed,
        "isEpgFeatureUsed": args.isEpgFeatureUsed,
        "isFiltersFeatureUsed": args.isFiltersFeatureUsed,
        "isHttpConfigured": args.isHttpConfigured,
        "isHttpsConfigured": args.isHttpsConfigured,
        "isNtpFeatureUsed": args.isNtpFeatureUsed,
        "isPtpFeatureUsed": args.isPtpFeatureUsed,
        "isSynceFeatureUsed": args.isSynceFeatureUsed,
        "isTechSupportCollected": args.isTechSupportCollected,
        "isTenantsFeatureUsed": args.isTenantsFeatureUsed,
        "isVrfsFeatureUsed": args.isVrfsFeatureUsed,
        "isisCount": args.isisCount,
        "l2Multicast": args.l2Multicast,
        "latencyPtpMode": args.latencyPtpMode,
        "leafCount": args.leafCount,
        "localUsernameCount": args.localUsernameCount,
        "loginBlockDuration": args.loginBlockDuration,
        "loginMaxFailedAttempts": args.loginMaxFailedAttempts,
        "loginMaxFailedAttemptsWindow": args.loginMaxFailedAttemptsWindow,
        "maintenanceModeCount": args.maintenanceModeCount,
        "managementOverV6Count": args.managementOverV6Count,
        "microsoftUsegVmmEpPdCount": args.microsoftUsegVmmEpPdCount,
        "modTime": args.modTime,
        "moid": args.moid,
        "netFlowCount": args.netFlowCount,
        "nir": args.nir,
        "objectType": args.objectType,
        "openStack": args.openStack,
        "opflexKubernetesCount": args.opflexKubernetesCount,
        "ospfCount": args.ospfCount,
        "owners": args.owners,
        "parent": args.parent,
        "passwordHistoryCount": args.passwordHistoryCount,
        "passwordStrengthCheck": args.passwordStrengthCheck,
        "passwordStrengthProfileCount": args.passwordStrengthProfileCount,
        "permissionResources": args.permissionResources,
        "poeCount": args.poeCount,
        "portSecurityCount": args.portSecurityCount,
        "qinVniTunnelCount": args.qinVniTunnelCount,
        "qosCongCount": args.qosCongCount,
        "qosPfcPolCount": args.qosPfcPolCount,
        "realmCount": args.realmCount,
        "recordType": args.recordType,
        "recordVersion": args.recordVersion,
        "registeredDevice": args.registeredDevice,
        "remoteLeafCount": args.remoteLeafCount,
        "scvmmCount": args.scvmmCount,
        "sharedL3OutCount": args.sharedL3OutCount,
        "sharedScope": args.sharedScope,
        "siteName": args.siteName,
        "smartCallHome": args.smartCallHome,
        "smartLicense": args.smartLicense,
        "snapshotCount": args.snapshotCount,
        "snmp": args.snmp,
        "snmpCommunityAccessCount": args.snmpCommunityAccessCount,
        "snmpGroupCount": args.snmpGroupCount,
        "snmpTrapCount": args.snmpTrapCount,
        "snmpV3Count": args.snmpV3Count,
        "spanCount": args.spanCount,
        "spanDstCount": args.spanDstCount,
        "spanSrcCount": args.spanSrcCount,
        "spineCount": args.spineCount,
        "sshOverV6Count": args.sshOverV6Count,
        "sshV2Count": args.sshV2Count,
        "supervisorModuleCount": args.supervisorModuleCount,
        "syslogGroupCount": args.syslogGroupCount,
        "syslogOverV6Count": args.syslogOverV6Count,
        "systemControllerCount": args.systemControllerCount,
        "tacacsGroupCount": args.tacacsGroupCount,
        "tags": args.tags,
        "tenantCount": args.tenantCount,
        "tierTwoLeafCount": args.tierTwoLeafCount,
        "totalCriticalFaults": args.totalCriticalFaults,
        "twamp": args.twamp,
        "useg": args.useg,
        "versionContext": args.versionContext,
        "vmWareVdsCount": args.vmWareVdsCount,
        "vmmCtrlrpCount": args.vmmCtrlrpCount,
        "vmmDompCount": args.vmmDompCount,
        "vmmEpPdCount": args.vmmEpPdCount,
        "vnsmDevCount": args.vnsmDevCount,
        "vpodCount": args.vpodCount,
        "webtokenTimeoutSeconds": args.webtokenTimeoutSeconds,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNiatelemetryNiaFeatureUsage.
 */
export interface GetNiatelemetryNiaFeatureUsageArgs {
    aaaLdapProviderCount?: number;
    aaaRadiusProviderCount?: number;
    aaaTacacsProviderCount?: number;
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetNiatelemetryNiaFeatureUsageAncestor[];
    apicClusterHealth?: string;
    apicCount?: number;
    apicIsTelnetEnabled?: boolean;
    apicNtpCount?: number;
    apicSnmpCommunityCount?: number;
    apicSysLogGrpCount?: number;
    apicSysLogSrcCount?: number;
    appCenterCount?: number;
    ave?: string;
    bdCount?: number;
    callhomeSmartGroupCount?: number;
    classId?: string;
    cloudSecPeerCount?: number;
    cloudTenantCount?: number;
    compHvCount?: number;
    configExportpCount?: number;
    configJobCount?: number;
    consistencyCheckerApp?: string;
    contractCount?: number;
    createTime?: string;
    dnsCount?: number;
    domainGroupMoid?: string;
    eigrpCount?: number;
    epgCount?: number;
    fabricModuleCount?: number;
    fabricSetuppCount?: number;
    fcoeNportCount?: number;
    fcoeNportDomCount?: number;
    fcoeNportVlanCount?: number;
    fcoeNportVsanCount?: number;
    fvSlaDefCount?: number;
    hsrpCount?: number;
    ibgpCount?: number;
    id?: string;
    igmpAccessListCount?: number;
    igmpSnoop?: string;
    ipEpgCount?: number;
    isBgpRouteReflectorsFeatureUsed?: boolean;
    isBridgeDomainsFeatureUsed?: boolean;
    isCommonLocalUserName?: boolean;
    isContractsFeatureUsed?: boolean;
    isEpgFeatureUsed?: boolean;
    isFiltersFeatureUsed?: boolean;
    isHttpConfigured?: boolean;
    isHttpsConfigured?: boolean;
    isNtpFeatureUsed?: boolean;
    isPtpFeatureUsed?: boolean;
    isSynceFeatureUsed?: boolean;
    isTechSupportCollected?: string;
    isTenantsFeatureUsed?: boolean;
    isVrfsFeatureUsed?: boolean;
    isisCount?: number;
    l2Multicast?: string;
    latencyPtpMode?: string;
    leafCount?: number;
    localUsernameCount?: number;
    loginBlockDuration?: number;
    loginMaxFailedAttempts?: number;
    loginMaxFailedAttemptsWindow?: number;
    maintenanceModeCount?: number;
    managementOverV6Count?: number;
    microsoftUsegVmmEpPdCount?: number;
    modTime?: string;
    moid?: string;
    netFlowCount?: number;
    nir?: string;
    objectType?: string;
    openStack?: string;
    opflexKubernetesCount?: number;
    ospfCount?: number;
    owners?: string[];
    parent?: inputs.GetNiatelemetryNiaFeatureUsageParent;
    passwordHistoryCount?: number;
    passwordStrengthCheck?: string;
    passwordStrengthProfileCount?: number;
    permissionResources?: inputs.GetNiatelemetryNiaFeatureUsagePermissionResource[];
    poeCount?: number;
    portSecurityCount?: number;
    qinVniTunnelCount?: number;
    qosCongCount?: number;
    qosPfcPolCount?: number;
    realmCount?: number;
    recordType?: string;
    recordVersion?: string;
    registeredDevice?: inputs.GetNiatelemetryNiaFeatureUsageRegisteredDevice;
    remoteLeafCount?: number;
    scvmmCount?: number;
    sharedL3OutCount?: number;
    sharedScope?: string;
    siteName?: string;
    smartCallHome?: string;
    smartLicense?: inputs.GetNiatelemetryNiaFeatureUsageSmartLicense;
    snapshotCount?: number;
    snmp?: string;
    snmpCommunityAccessCount?: number;
    snmpGroupCount?: number;
    snmpTrapCount?: number;
    snmpV3Count?: number;
    spanCount?: number;
    spanDstCount?: number;
    spanSrcCount?: number;
    spineCount?: number;
    sshOverV6Count?: number;
    sshV2Count?: number;
    supervisorModuleCount?: number;
    syslogGroupCount?: number;
    syslogOverV6Count?: number;
    systemControllerCount?: number;
    tacacsGroupCount?: number;
    tags?: inputs.GetNiatelemetryNiaFeatureUsageTag[];
    tenantCount?: number;
    tierTwoLeafCount?: number;
    totalCriticalFaults?: number;
    twamp?: string;
    useg?: string;
    versionContext?: inputs.GetNiatelemetryNiaFeatureUsageVersionContext;
    vmWareVdsCount?: number;
    vmmCtrlrpCount?: number;
    vmmDompCount?: number;
    vmmEpPdCount?: number;
    vnsmDevCount?: number;
    vpodCount?: number;
    webtokenTimeoutSeconds?: number;
}

/**
 * A collection of values returned by getNiatelemetryNiaFeatureUsage.
 */
export interface GetNiatelemetryNiaFeatureUsageResult {
    readonly aaaLdapProviderCount?: number;
    readonly aaaRadiusProviderCount?: number;
    readonly aaaTacacsProviderCount?: number;
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetNiatelemetryNiaFeatureUsageAncestor[];
    readonly apicClusterHealth?: string;
    readonly apicCount?: number;
    readonly apicIsTelnetEnabled?: boolean;
    readonly apicNtpCount?: number;
    readonly apicSnmpCommunityCount?: number;
    readonly apicSysLogGrpCount?: number;
    readonly apicSysLogSrcCount?: number;
    readonly appCenterCount?: number;
    readonly ave?: string;
    readonly bdCount?: number;
    readonly callhomeSmartGroupCount?: number;
    readonly classId?: string;
    readonly cloudSecPeerCount?: number;
    readonly cloudTenantCount?: number;
    readonly compHvCount?: number;
    readonly configExportpCount?: number;
    readonly configJobCount?: number;
    readonly consistencyCheckerApp?: string;
    readonly contractCount?: number;
    readonly createTime?: string;
    readonly dnsCount?: number;
    readonly domainGroupMoid?: string;
    readonly eigrpCount?: number;
    readonly epgCount?: number;
    readonly fabricModuleCount?: number;
    readonly fabricSetuppCount?: number;
    readonly fcoeNportCount?: number;
    readonly fcoeNportDomCount?: number;
    readonly fcoeNportVlanCount?: number;
    readonly fcoeNportVsanCount?: number;
    readonly fvSlaDefCount?: number;
    readonly hsrpCount?: number;
    readonly ibgpCount?: number;
    readonly id: string;
    readonly igmpAccessListCount?: number;
    readonly igmpSnoop?: string;
    readonly ipEpgCount?: number;
    readonly isBgpRouteReflectorsFeatureUsed?: boolean;
    readonly isBridgeDomainsFeatureUsed?: boolean;
    readonly isCommonLocalUserName?: boolean;
    readonly isContractsFeatureUsed?: boolean;
    readonly isEpgFeatureUsed?: boolean;
    readonly isFiltersFeatureUsed?: boolean;
    readonly isHttpConfigured?: boolean;
    readonly isHttpsConfigured?: boolean;
    readonly isNtpFeatureUsed?: boolean;
    readonly isPtpFeatureUsed?: boolean;
    readonly isSynceFeatureUsed?: boolean;
    readonly isTechSupportCollected?: string;
    readonly isTenantsFeatureUsed?: boolean;
    readonly isVrfsFeatureUsed?: boolean;
    readonly isisCount?: number;
    readonly l2Multicast?: string;
    readonly latencyPtpMode?: string;
    readonly leafCount?: number;
    readonly localUsernameCount?: number;
    readonly loginBlockDuration?: number;
    readonly loginMaxFailedAttempts?: number;
    readonly loginMaxFailedAttemptsWindow?: number;
    readonly maintenanceModeCount?: number;
    readonly managementOverV6Count?: number;
    readonly microsoftUsegVmmEpPdCount?: number;
    readonly modTime?: string;
    readonly moid?: string;
    readonly netFlowCount?: number;
    readonly nir?: string;
    readonly objectType?: string;
    readonly openStack?: string;
    readonly opflexKubernetesCount?: number;
    readonly ospfCount?: number;
    readonly owners?: string[];
    readonly parent?: outputs.GetNiatelemetryNiaFeatureUsageParent;
    readonly passwordHistoryCount?: number;
    readonly passwordStrengthCheck?: string;
    readonly passwordStrengthProfileCount?: number;
    readonly permissionResources?: outputs.GetNiatelemetryNiaFeatureUsagePermissionResource[];
    readonly poeCount?: number;
    readonly portSecurityCount?: number;
    readonly qinVniTunnelCount?: number;
    readonly qosCongCount?: number;
    readonly qosPfcPolCount?: number;
    readonly realmCount?: number;
    readonly recordType?: string;
    readonly recordVersion?: string;
    readonly registeredDevice?: outputs.GetNiatelemetryNiaFeatureUsageRegisteredDevice;
    readonly remoteLeafCount?: number;
    readonly results: outputs.GetNiatelemetryNiaFeatureUsageResult[];
    readonly scvmmCount?: number;
    readonly sharedL3OutCount?: number;
    readonly sharedScope?: string;
    readonly siteName?: string;
    readonly smartCallHome?: string;
    readonly smartLicense?: outputs.GetNiatelemetryNiaFeatureUsageSmartLicense;
    readonly snapshotCount?: number;
    readonly snmp?: string;
    readonly snmpCommunityAccessCount?: number;
    readonly snmpGroupCount?: number;
    readonly snmpTrapCount?: number;
    readonly snmpV3Count?: number;
    readonly spanCount?: number;
    readonly spanDstCount?: number;
    readonly spanSrcCount?: number;
    readonly spineCount?: number;
    readonly sshOverV6Count?: number;
    readonly sshV2Count?: number;
    readonly supervisorModuleCount?: number;
    readonly syslogGroupCount?: number;
    readonly syslogOverV6Count?: number;
    readonly systemControllerCount?: number;
    readonly tacacsGroupCount?: number;
    readonly tags?: outputs.GetNiatelemetryNiaFeatureUsageTag[];
    readonly tenantCount?: number;
    readonly tierTwoLeafCount?: number;
    readonly totalCriticalFaults?: number;
    readonly twamp?: string;
    readonly useg?: string;
    readonly versionContext?: outputs.GetNiatelemetryNiaFeatureUsageVersionContext;
    readonly vmWareVdsCount?: number;
    readonly vmmCtrlrpCount?: number;
    readonly vmmDompCount?: number;
    readonly vmmEpPdCount?: number;
    readonly vnsmDevCount?: number;
    readonly vpodCount?: number;
    readonly webtokenTimeoutSeconds?: number;
}
export function getNiatelemetryNiaFeatureUsageOutput(args?: GetNiatelemetryNiaFeatureUsageOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNiatelemetryNiaFeatureUsageResult> {
    return pulumi.output(args).apply((a: any) => getNiatelemetryNiaFeatureUsage(a, opts))
}

/**
 * A collection of arguments for invoking getNiatelemetryNiaFeatureUsage.
 */
export interface GetNiatelemetryNiaFeatureUsageOutputArgs {
    aaaLdapProviderCount?: pulumi.Input<number>;
    aaaRadiusProviderCount?: pulumi.Input<number>;
    aaaTacacsProviderCount?: pulumi.Input<number>;
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryNiaFeatureUsageAncestorArgs>[]>;
    apicClusterHealth?: pulumi.Input<string>;
    apicCount?: pulumi.Input<number>;
    apicIsTelnetEnabled?: pulumi.Input<boolean>;
    apicNtpCount?: pulumi.Input<number>;
    apicSnmpCommunityCount?: pulumi.Input<number>;
    apicSysLogGrpCount?: pulumi.Input<number>;
    apicSysLogSrcCount?: pulumi.Input<number>;
    appCenterCount?: pulumi.Input<number>;
    ave?: pulumi.Input<string>;
    bdCount?: pulumi.Input<number>;
    callhomeSmartGroupCount?: pulumi.Input<number>;
    classId?: pulumi.Input<string>;
    cloudSecPeerCount?: pulumi.Input<number>;
    cloudTenantCount?: pulumi.Input<number>;
    compHvCount?: pulumi.Input<number>;
    configExportpCount?: pulumi.Input<number>;
    configJobCount?: pulumi.Input<number>;
    consistencyCheckerApp?: pulumi.Input<string>;
    contractCount?: pulumi.Input<number>;
    createTime?: pulumi.Input<string>;
    dnsCount?: pulumi.Input<number>;
    domainGroupMoid?: pulumi.Input<string>;
    eigrpCount?: pulumi.Input<number>;
    epgCount?: pulumi.Input<number>;
    fabricModuleCount?: pulumi.Input<number>;
    fabricSetuppCount?: pulumi.Input<number>;
    fcoeNportCount?: pulumi.Input<number>;
    fcoeNportDomCount?: pulumi.Input<number>;
    fcoeNportVlanCount?: pulumi.Input<number>;
    fcoeNportVsanCount?: pulumi.Input<number>;
    fvSlaDefCount?: pulumi.Input<number>;
    hsrpCount?: pulumi.Input<number>;
    ibgpCount?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    igmpAccessListCount?: pulumi.Input<number>;
    igmpSnoop?: pulumi.Input<string>;
    ipEpgCount?: pulumi.Input<number>;
    isBgpRouteReflectorsFeatureUsed?: pulumi.Input<boolean>;
    isBridgeDomainsFeatureUsed?: pulumi.Input<boolean>;
    isCommonLocalUserName?: pulumi.Input<boolean>;
    isContractsFeatureUsed?: pulumi.Input<boolean>;
    isEpgFeatureUsed?: pulumi.Input<boolean>;
    isFiltersFeatureUsed?: pulumi.Input<boolean>;
    isHttpConfigured?: pulumi.Input<boolean>;
    isHttpsConfigured?: pulumi.Input<boolean>;
    isNtpFeatureUsed?: pulumi.Input<boolean>;
    isPtpFeatureUsed?: pulumi.Input<boolean>;
    isSynceFeatureUsed?: pulumi.Input<boolean>;
    isTechSupportCollected?: pulumi.Input<string>;
    isTenantsFeatureUsed?: pulumi.Input<boolean>;
    isVrfsFeatureUsed?: pulumi.Input<boolean>;
    isisCount?: pulumi.Input<number>;
    l2Multicast?: pulumi.Input<string>;
    latencyPtpMode?: pulumi.Input<string>;
    leafCount?: pulumi.Input<number>;
    localUsernameCount?: pulumi.Input<number>;
    loginBlockDuration?: pulumi.Input<number>;
    loginMaxFailedAttempts?: pulumi.Input<number>;
    loginMaxFailedAttemptsWindow?: pulumi.Input<number>;
    maintenanceModeCount?: pulumi.Input<number>;
    managementOverV6Count?: pulumi.Input<number>;
    microsoftUsegVmmEpPdCount?: pulumi.Input<number>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    netFlowCount?: pulumi.Input<number>;
    nir?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    openStack?: pulumi.Input<string>;
    opflexKubernetesCount?: pulumi.Input<number>;
    ospfCount?: pulumi.Input<number>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetNiatelemetryNiaFeatureUsageParentArgs>;
    passwordHistoryCount?: pulumi.Input<number>;
    passwordStrengthCheck?: pulumi.Input<string>;
    passwordStrengthProfileCount?: pulumi.Input<number>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryNiaFeatureUsagePermissionResourceArgs>[]>;
    poeCount?: pulumi.Input<number>;
    portSecurityCount?: pulumi.Input<number>;
    qinVniTunnelCount?: pulumi.Input<number>;
    qosCongCount?: pulumi.Input<number>;
    qosPfcPolCount?: pulumi.Input<number>;
    realmCount?: pulumi.Input<number>;
    recordType?: pulumi.Input<string>;
    recordVersion?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetNiatelemetryNiaFeatureUsageRegisteredDeviceArgs>;
    remoteLeafCount?: pulumi.Input<number>;
    scvmmCount?: pulumi.Input<number>;
    sharedL3OutCount?: pulumi.Input<number>;
    sharedScope?: pulumi.Input<string>;
    siteName?: pulumi.Input<string>;
    smartCallHome?: pulumi.Input<string>;
    smartLicense?: pulumi.Input<inputs.GetNiatelemetryNiaFeatureUsageSmartLicenseArgs>;
    snapshotCount?: pulumi.Input<number>;
    snmp?: pulumi.Input<string>;
    snmpCommunityAccessCount?: pulumi.Input<number>;
    snmpGroupCount?: pulumi.Input<number>;
    snmpTrapCount?: pulumi.Input<number>;
    snmpV3Count?: pulumi.Input<number>;
    spanCount?: pulumi.Input<number>;
    spanDstCount?: pulumi.Input<number>;
    spanSrcCount?: pulumi.Input<number>;
    spineCount?: pulumi.Input<number>;
    sshOverV6Count?: pulumi.Input<number>;
    sshV2Count?: pulumi.Input<number>;
    supervisorModuleCount?: pulumi.Input<number>;
    syslogGroupCount?: pulumi.Input<number>;
    syslogOverV6Count?: pulumi.Input<number>;
    systemControllerCount?: pulumi.Input<number>;
    tacacsGroupCount?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryNiaFeatureUsageTagArgs>[]>;
    tenantCount?: pulumi.Input<number>;
    tierTwoLeafCount?: pulumi.Input<number>;
    totalCriticalFaults?: pulumi.Input<number>;
    twamp?: pulumi.Input<string>;
    useg?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetNiatelemetryNiaFeatureUsageVersionContextArgs>;
    vmWareVdsCount?: pulumi.Input<number>;
    vmmCtrlrpCount?: pulumi.Input<number>;
    vmmDompCount?: pulumi.Input<number>;
    vmmEpPdCount?: pulumi.Input<number>;
    vnsmDevCount?: pulumi.Input<number>;
    vpodCount?: pulumi.Input<number>;
    webtokenTimeoutSeconds?: pulumi.Input<number>;
}
