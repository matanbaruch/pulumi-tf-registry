// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getFabricSpanSession(args?: GetFabricSpanSessionArgs, opts?: pulumi.InvokeOptions): Promise<GetFabricSpanSessionResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getFabricSpanSession:getFabricSpanSession", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "adminState": args.adminState,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "configState": args.configState,
        "createTime": args.createTime,
        "destPorts": args.destPorts,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "networkElement": args.networkElement,
        "objectType": args.objectType,
        "operState": args.operState,
        "operStateReason": args.operStateReason,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "sessionId": args.sessionId,
        "sharedScope": args.sharedScope,
        "sourceCount": args.sourceCount,
        "sourcePortChannels": args.sourcePortChannels,
        "sourcePorts": args.sourcePorts,
        "sourceVirtualIfs": args.sourceVirtualIfs,
        "sourceVlans": args.sourceVlans,
        "spanControlPackets": args.spanControlPackets,
        "switchId": args.switchId,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFabricSpanSession.
 */
export interface GetFabricSpanSessionArgs {
    accountMoid?: string;
    additionalProperties?: string;
    adminState?: string;
    ancestors?: inputs.GetFabricSpanSessionAncestor[];
    classId?: string;
    configState?: string;
    createTime?: string;
    destPorts?: inputs.GetFabricSpanSessionDestPort[];
    domainGroupMoid?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    networkElement?: inputs.GetFabricSpanSessionNetworkElement;
    objectType?: string;
    operState?: string;
    operStateReason?: string;
    owners?: string[];
    parent?: inputs.GetFabricSpanSessionParent;
    permissionResources?: inputs.GetFabricSpanSessionPermissionResource[];
    sessionId?: number;
    sharedScope?: string;
    sourceCount?: number;
    sourcePortChannels?: inputs.GetFabricSpanSessionSourcePortChannel[];
    sourcePorts?: inputs.GetFabricSpanSessionSourcePort[];
    sourceVirtualIfs?: inputs.GetFabricSpanSessionSourceVirtualIf[];
    sourceVlans?: inputs.GetFabricSpanSessionSourceVlan[];
    spanControlPackets?: string;
    switchId?: string;
    tags?: inputs.GetFabricSpanSessionTag[];
    versionContext?: inputs.GetFabricSpanSessionVersionContext;
}

/**
 * A collection of values returned by getFabricSpanSession.
 */
export interface GetFabricSpanSessionResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly adminState?: string;
    readonly ancestors?: outputs.GetFabricSpanSessionAncestor[];
    readonly classId?: string;
    readonly configState?: string;
    readonly createTime?: string;
    readonly destPorts?: outputs.GetFabricSpanSessionDestPort[];
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly networkElement?: outputs.GetFabricSpanSessionNetworkElement;
    readonly objectType?: string;
    readonly operState?: string;
    readonly operStateReason?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetFabricSpanSessionParent;
    readonly permissionResources?: outputs.GetFabricSpanSessionPermissionResource[];
    readonly results: outputs.GetFabricSpanSessionResult[];
    readonly sessionId?: number;
    readonly sharedScope?: string;
    readonly sourceCount?: number;
    readonly sourcePortChannels?: outputs.GetFabricSpanSessionSourcePortChannel[];
    readonly sourcePorts?: outputs.GetFabricSpanSessionSourcePort[];
    readonly sourceVirtualIfs?: outputs.GetFabricSpanSessionSourceVirtualIf[];
    readonly sourceVlans?: outputs.GetFabricSpanSessionSourceVlan[];
    readonly spanControlPackets?: string;
    readonly switchId?: string;
    readonly tags?: outputs.GetFabricSpanSessionTag[];
    readonly versionContext?: outputs.GetFabricSpanSessionVersionContext;
}
export function getFabricSpanSessionOutput(args?: GetFabricSpanSessionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFabricSpanSessionResult> {
    return pulumi.output(args).apply((a: any) => getFabricSpanSession(a, opts))
}

/**
 * A collection of arguments for invoking getFabricSpanSession.
 */
export interface GetFabricSpanSessionOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    adminState?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetFabricSpanSessionAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    configState?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    destPorts?: pulumi.Input<pulumi.Input<inputs.GetFabricSpanSessionDestPortArgs>[]>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkElement?: pulumi.Input<inputs.GetFabricSpanSessionNetworkElementArgs>;
    objectType?: pulumi.Input<string>;
    operState?: pulumi.Input<string>;
    operStateReason?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetFabricSpanSessionParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetFabricSpanSessionPermissionResourceArgs>[]>;
    sessionId?: pulumi.Input<number>;
    sharedScope?: pulumi.Input<string>;
    sourceCount?: pulumi.Input<number>;
    sourcePortChannels?: pulumi.Input<pulumi.Input<inputs.GetFabricSpanSessionSourcePortChannelArgs>[]>;
    sourcePorts?: pulumi.Input<pulumi.Input<inputs.GetFabricSpanSessionSourcePortArgs>[]>;
    sourceVirtualIfs?: pulumi.Input<pulumi.Input<inputs.GetFabricSpanSessionSourceVirtualIfArgs>[]>;
    sourceVlans?: pulumi.Input<pulumi.Input<inputs.GetFabricSpanSessionSourceVlanArgs>[]>;
    spanControlPackets?: pulumi.Input<string>;
    switchId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetFabricSpanSessionTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetFabricSpanSessionVersionContextArgs>;
}
