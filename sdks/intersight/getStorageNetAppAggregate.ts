// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageNetAppAggregate(args?: GetStorageNetAppAggregateArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageNetAppAggregateResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageNetAppAggregate:getStorageNetAppAggregate", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "aggregateType": args.aggregateType,
        "ancestors": args.ancestors,
        "arrayController": args.arrayController,
        "avgPerformanceMetrics": args.avgPerformanceMetrics,
        "classId": args.classId,
        "cloudStorages": args.cloudStorages,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "efficiencyRatio": args.efficiencyRatio,
        "events": args.events,
        "id": args.id,
        "key": args.key,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "nodeName": args.nodeName,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "poolId": args.poolId,
        "raidSize": args.raidSize,
        "raidType": args.raidType,
        "sharedScope": args.sharedScope,
        "state": args.state,
        "status": args.status,
        "storageUtilization": args.storageUtilization,
        "tags": args.tags,
        "type": args.type,
        "uuid": args.uuid,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageNetAppAggregate.
 */
export interface GetStorageNetAppAggregateArgs {
    accountMoid?: string;
    additionalProperties?: string;
    aggregateType?: string;
    ancestors?: inputs.GetStorageNetAppAggregateAncestor[];
    arrayController?: inputs.GetStorageNetAppAggregateArrayController;
    avgPerformanceMetrics?: inputs.GetStorageNetAppAggregateAvgPerformanceMetrics;
    classId?: string;
    cloudStorages?: string[];
    createTime?: string;
    domainGroupMoid?: string;
    efficiencyRatio?: number;
    events?: inputs.GetStorageNetAppAggregateEvent[];
    id?: string;
    key?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    nodeName?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageNetAppAggregateParent;
    permissionResources?: inputs.GetStorageNetAppAggregatePermissionResource[];
    poolId?: string;
    raidSize?: number;
    raidType?: string;
    sharedScope?: string;
    state?: string;
    status?: string;
    storageUtilization?: inputs.GetStorageNetAppAggregateStorageUtilization;
    tags?: inputs.GetStorageNetAppAggregateTag[];
    type?: string;
    uuid?: string;
    versionContext?: inputs.GetStorageNetAppAggregateVersionContext;
}

/**
 * A collection of values returned by getStorageNetAppAggregate.
 */
export interface GetStorageNetAppAggregateResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly aggregateType?: string;
    readonly ancestors?: outputs.GetStorageNetAppAggregateAncestor[];
    readonly arrayController?: outputs.GetStorageNetAppAggregateArrayController;
    readonly avgPerformanceMetrics?: outputs.GetStorageNetAppAggregateAvgPerformanceMetrics;
    readonly classId?: string;
    readonly cloudStorages?: string[];
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly efficiencyRatio?: number;
    readonly events?: outputs.GetStorageNetAppAggregateEvent[];
    readonly id: string;
    readonly key?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nodeName?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageNetAppAggregateParent;
    readonly permissionResources?: outputs.GetStorageNetAppAggregatePermissionResource[];
    readonly poolId?: string;
    readonly raidSize?: number;
    readonly raidType?: string;
    readonly results: outputs.GetStorageNetAppAggregateResult[];
    readonly sharedScope?: string;
    readonly state?: string;
    readonly status?: string;
    readonly storageUtilization?: outputs.GetStorageNetAppAggregateStorageUtilization;
    readonly tags?: outputs.GetStorageNetAppAggregateTag[];
    readonly type?: string;
    readonly uuid?: string;
    readonly versionContext?: outputs.GetStorageNetAppAggregateVersionContext;
}
export function getStorageNetAppAggregateOutput(args?: GetStorageNetAppAggregateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageNetAppAggregateResult> {
    return pulumi.output(args).apply((a: any) => getStorageNetAppAggregate(a, opts))
}

/**
 * A collection of arguments for invoking getStorageNetAppAggregate.
 */
export interface GetStorageNetAppAggregateOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    aggregateType?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppAggregateAncestorArgs>[]>;
    arrayController?: pulumi.Input<inputs.GetStorageNetAppAggregateArrayControllerArgs>;
    avgPerformanceMetrics?: pulumi.Input<inputs.GetStorageNetAppAggregateAvgPerformanceMetricsArgs>;
    classId?: pulumi.Input<string>;
    cloudStorages?: pulumi.Input<pulumi.Input<string>[]>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    efficiencyRatio?: pulumi.Input<number>;
    events?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppAggregateEventArgs>[]>;
    id?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nodeName?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageNetAppAggregateParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppAggregatePermissionResourceArgs>[]>;
    poolId?: pulumi.Input<string>;
    raidSize?: pulumi.Input<number>;
    raidType?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    storageUtilization?: pulumi.Input<inputs.GetStorageNetAppAggregateStorageUtilizationArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppAggregateTagArgs>[]>;
    type?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetStorageNetAppAggregateVersionContextArgs>;
}
