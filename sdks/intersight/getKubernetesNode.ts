// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getKubernetesNode(args?: GetKubernetesNodeArgs, opts?: pulumi.InvokeOptions): Promise<GetKubernetesNodeResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getKubernetesNode:getKubernetesNode", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "annotations": args.annotations,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "labels": args.labels,
        "metadata": args.metadata,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "nodeAddresses": args.nodeAddresses,
        "nodeInfo": args.nodeInfo,
        "nodeSpec": args.nodeSpec,
        "nodeStatuses": args.nodeStatuses,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "taints": args.taints,
        "uuid": args.uuid,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getKubernetesNode.
 */
export interface GetKubernetesNodeArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetKubernetesNodeAncestor[];
    annotations?: string;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    id?: string;
    labels?: string;
    metadata?: inputs.GetKubernetesNodeMetadata;
    modTime?: string;
    moid?: string;
    name?: string;
    nodeAddresses?: inputs.GetKubernetesNodeNodeAddress[];
    nodeInfo?: inputs.GetKubernetesNodeNodeInfo;
    nodeSpec?: inputs.GetKubernetesNodeNodeSpec;
    nodeStatuses?: inputs.GetKubernetesNodeNodeStatus[];
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetKubernetesNodeParent;
    permissionResources?: inputs.GetKubernetesNodePermissionResource[];
    registeredDevice?: inputs.GetKubernetesNodeRegisteredDevice;
    sharedScope?: string;
    tags?: inputs.GetKubernetesNodeTag[];
    taints?: inputs.GetKubernetesNodeTaint[];
    uuid?: string;
    versionContext?: inputs.GetKubernetesNodeVersionContext;
}

/**
 * A collection of values returned by getKubernetesNode.
 */
export interface GetKubernetesNodeResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetKubernetesNodeAncestor[];
    readonly annotations?: string;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly labels?: string;
    readonly metadata?: outputs.GetKubernetesNodeMetadata;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nodeAddresses?: outputs.GetKubernetesNodeNodeAddress[];
    readonly nodeInfo?: outputs.GetKubernetesNodeNodeInfo;
    readonly nodeSpec?: outputs.GetKubernetesNodeNodeSpec;
    readonly nodeStatuses?: outputs.GetKubernetesNodeNodeStatus[];
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetKubernetesNodeParent;
    readonly permissionResources?: outputs.GetKubernetesNodePermissionResource[];
    readonly registeredDevice?: outputs.GetKubernetesNodeRegisteredDevice;
    readonly results: outputs.GetKubernetesNodeResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetKubernetesNodeTag[];
    readonly taints?: outputs.GetKubernetesNodeTaint[];
    readonly uuid?: string;
    readonly versionContext?: outputs.GetKubernetesNodeVersionContext;
}
export function getKubernetesNodeOutput(args?: GetKubernetesNodeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKubernetesNodeResult> {
    return pulumi.output(args).apply((a: any) => getKubernetesNode(a, opts))
}

/**
 * A collection of arguments for invoking getKubernetesNode.
 */
export interface GetKubernetesNodeOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetKubernetesNodeAncestorArgs>[]>;
    annotations?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    labels?: pulumi.Input<string>;
    metadata?: pulumi.Input<inputs.GetKubernetesNodeMetadataArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nodeAddresses?: pulumi.Input<pulumi.Input<inputs.GetKubernetesNodeNodeAddressArgs>[]>;
    nodeInfo?: pulumi.Input<inputs.GetKubernetesNodeNodeInfoArgs>;
    nodeSpec?: pulumi.Input<inputs.GetKubernetesNodeNodeSpecArgs>;
    nodeStatuses?: pulumi.Input<pulumi.Input<inputs.GetKubernetesNodeNodeStatusArgs>[]>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetKubernetesNodeParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetKubernetesNodePermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetKubernetesNodeRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetKubernetesNodeTagArgs>[]>;
    taints?: pulumi.Input<pulumi.Input<inputs.GetKubernetesNodeTaintArgs>[]>;
    uuid?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetKubernetesNodeVersionContextArgs>;
}
