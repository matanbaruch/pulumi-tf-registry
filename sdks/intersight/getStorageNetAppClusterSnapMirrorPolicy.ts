// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageNetAppClusterSnapMirrorPolicy(args?: GetStorageNetAppClusterSnapMirrorPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageNetAppClusterSnapMirrorPolicyResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageNetAppClusterSnapMirrorPolicy:getStorageNetAppClusterSnapMirrorPolicy", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "array": args.array,
        "classId": args.classId,
        "comment": args.comment,
        "copyAllSourceSnapshots": args.copyAllSourceSnapshots,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "scope": args.scope,
        "sharedScope": args.sharedScope,
        "syncType": args.syncType,
        "tags": args.tags,
        "transferScheduleName": args.transferScheduleName,
        "transferScheduleUuid": args.transferScheduleUuid,
        "type": args.type,
        "uuid": args.uuid,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageNetAppClusterSnapMirrorPolicy.
 */
export interface GetStorageNetAppClusterSnapMirrorPolicyArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageNetAppClusterSnapMirrorPolicyAncestor[];
    array?: inputs.GetStorageNetAppClusterSnapMirrorPolicyArray;
    classId?: string;
    comment?: string;
    copyAllSourceSnapshots?: boolean;
    createTime?: string;
    domainGroupMoid?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageNetAppClusterSnapMirrorPolicyParent;
    permissionResources?: inputs.GetStorageNetAppClusterSnapMirrorPolicyPermissionResource[];
    scope?: string;
    sharedScope?: string;
    syncType?: string;
    tags?: inputs.GetStorageNetAppClusterSnapMirrorPolicyTag[];
    transferScheduleName?: string;
    transferScheduleUuid?: string;
    type?: string;
    uuid?: string;
    versionContext?: inputs.GetStorageNetAppClusterSnapMirrorPolicyVersionContext;
}

/**
 * A collection of values returned by getStorageNetAppClusterSnapMirrorPolicy.
 */
export interface GetStorageNetAppClusterSnapMirrorPolicyResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageNetAppClusterSnapMirrorPolicyAncestor[];
    readonly array?: outputs.GetStorageNetAppClusterSnapMirrorPolicyArray;
    readonly classId?: string;
    readonly comment?: string;
    readonly copyAllSourceSnapshots?: boolean;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageNetAppClusterSnapMirrorPolicyParent;
    readonly permissionResources?: outputs.GetStorageNetAppClusterSnapMirrorPolicyPermissionResource[];
    readonly results: outputs.GetStorageNetAppClusterSnapMirrorPolicyResult[];
    readonly scope?: string;
    readonly sharedScope?: string;
    readonly syncType?: string;
    readonly tags?: outputs.GetStorageNetAppClusterSnapMirrorPolicyTag[];
    readonly transferScheduleName?: string;
    readonly transferScheduleUuid?: string;
    readonly type?: string;
    readonly uuid?: string;
    readonly versionContext?: outputs.GetStorageNetAppClusterSnapMirrorPolicyVersionContext;
}
export function getStorageNetAppClusterSnapMirrorPolicyOutput(args?: GetStorageNetAppClusterSnapMirrorPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageNetAppClusterSnapMirrorPolicyResult> {
    return pulumi.output(args).apply((a: any) => getStorageNetAppClusterSnapMirrorPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getStorageNetAppClusterSnapMirrorPolicy.
 */
export interface GetStorageNetAppClusterSnapMirrorPolicyOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppClusterSnapMirrorPolicyAncestorArgs>[]>;
    array?: pulumi.Input<inputs.GetStorageNetAppClusterSnapMirrorPolicyArrayArgs>;
    classId?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    copyAllSourceSnapshots?: pulumi.Input<boolean>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageNetAppClusterSnapMirrorPolicyParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppClusterSnapMirrorPolicyPermissionResourceArgs>[]>;
    scope?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    syncType?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppClusterSnapMirrorPolicyTagArgs>[]>;
    transferScheduleName?: pulumi.Input<string>;
    transferScheduleUuid?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetStorageNetAppClusterSnapMirrorPolicyVersionContextArgs>;
}
