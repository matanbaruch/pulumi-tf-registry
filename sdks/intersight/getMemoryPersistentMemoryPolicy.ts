// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMemoryPersistentMemoryPolicy(args?: GetMemoryPersistentMemoryPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetMemoryPersistentMemoryPolicyResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getMemoryPersistentMemoryPolicy:getMemoryPersistentMemoryPolicy", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "goals": args.goals,
        "id": args.id,
        "localSecurity": args.localSecurity,
        "logicalNamespaces": args.logicalNamespaces,
        "managementMode": args.managementMode,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "organization": args.organization,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "profiles": args.profiles,
        "retainNamespaces": args.retainNamespaces,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMemoryPersistentMemoryPolicy.
 */
export interface GetMemoryPersistentMemoryPolicyArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetMemoryPersistentMemoryPolicyAncestor[];
    classId?: string;
    createTime?: string;
    description?: string;
    domainGroupMoid?: string;
    goals?: inputs.GetMemoryPersistentMemoryPolicyGoal[];
    id?: string;
    localSecurity?: inputs.GetMemoryPersistentMemoryPolicyLocalSecurity;
    logicalNamespaces?: inputs.GetMemoryPersistentMemoryPolicyLogicalNamespace[];
    managementMode?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    organization?: inputs.GetMemoryPersistentMemoryPolicyOrganization;
    owners?: string[];
    parent?: inputs.GetMemoryPersistentMemoryPolicyParent;
    permissionResources?: inputs.GetMemoryPersistentMemoryPolicyPermissionResource[];
    profiles?: inputs.GetMemoryPersistentMemoryPolicyProfile[];
    retainNamespaces?: boolean;
    sharedScope?: string;
    tags?: inputs.GetMemoryPersistentMemoryPolicyTag[];
    versionContext?: inputs.GetMemoryPersistentMemoryPolicyVersionContext;
}

/**
 * A collection of values returned by getMemoryPersistentMemoryPolicy.
 */
export interface GetMemoryPersistentMemoryPolicyResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetMemoryPersistentMemoryPolicyAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly goals?: outputs.GetMemoryPersistentMemoryPolicyGoal[];
    readonly id: string;
    readonly localSecurity?: outputs.GetMemoryPersistentMemoryPolicyLocalSecurity;
    readonly logicalNamespaces?: outputs.GetMemoryPersistentMemoryPolicyLogicalNamespace[];
    readonly managementMode?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly organization?: outputs.GetMemoryPersistentMemoryPolicyOrganization;
    readonly owners?: string[];
    readonly parent?: outputs.GetMemoryPersistentMemoryPolicyParent;
    readonly permissionResources?: outputs.GetMemoryPersistentMemoryPolicyPermissionResource[];
    readonly profiles?: outputs.GetMemoryPersistentMemoryPolicyProfile[];
    readonly results: outputs.GetMemoryPersistentMemoryPolicyResult[];
    readonly retainNamespaces?: boolean;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetMemoryPersistentMemoryPolicyTag[];
    readonly versionContext?: outputs.GetMemoryPersistentMemoryPolicyVersionContext;
}
export function getMemoryPersistentMemoryPolicyOutput(args?: GetMemoryPersistentMemoryPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMemoryPersistentMemoryPolicyResult> {
    return pulumi.output(args).apply((a: any) => getMemoryPersistentMemoryPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getMemoryPersistentMemoryPolicy.
 */
export interface GetMemoryPersistentMemoryPolicyOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetMemoryPersistentMemoryPolicyAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    goals?: pulumi.Input<pulumi.Input<inputs.GetMemoryPersistentMemoryPolicyGoalArgs>[]>;
    id?: pulumi.Input<string>;
    localSecurity?: pulumi.Input<inputs.GetMemoryPersistentMemoryPolicyLocalSecurityArgs>;
    logicalNamespaces?: pulumi.Input<pulumi.Input<inputs.GetMemoryPersistentMemoryPolicyLogicalNamespaceArgs>[]>;
    managementMode?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.GetMemoryPersistentMemoryPolicyOrganizationArgs>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetMemoryPersistentMemoryPolicyParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetMemoryPersistentMemoryPolicyPermissionResourceArgs>[]>;
    profiles?: pulumi.Input<pulumi.Input<inputs.GetMemoryPersistentMemoryPolicyProfileArgs>[]>;
    retainNamespaces?: pulumi.Input<boolean>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetMemoryPersistentMemoryPolicyTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetMemoryPersistentMemoryPolicyVersionContextArgs>;
}
