// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMemoryUnit(args?: GetMemoryUnitArgs, opts?: pulumi.InvokeOptions): Promise<GetMemoryUnitResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getMemoryUnit:getMemoryUnit", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "adminState": args.adminState,
        "ancestors": args.ancestors,
        "arrayId": args.arrayId,
        "bank": args.bank,
        "capacity": args.capacity,
        "classId": args.classId,
        "clock": args.clock,
        "createTime": args.createTime,
        "description": args.description,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "formFactor": args.formFactor,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "isPlatformSupported": args.isPlatformSupported,
        "isUpgraded": args.isUpgraded,
        "latency": args.latency,
        "location": args.location,
        "memoryArray": args.memoryArray,
        "memoryId": args.memoryId,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "objectType": args.objectType,
        "operPowerState": args.operPowerState,
        "operReasons": args.operReasons,
        "operState": args.operState,
        "operability": args.operability,
        "owners": args.owners,
        "parent": args.parent,
        "partNumber": args.partNumber,
        "permissionResources": args.permissionResources,
        "pid": args.pid,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "registeredDevice": args.registeredDevice,
        "revision": args.revision,
        "rn": args.rn,
        "serial": args.serial,
        "set": args.set,
        "sharedScope": args.sharedScope,
        "speed": args.speed,
        "tags": args.tags,
        "thermal": args.thermal,
        "type": args.type,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
        "visibility": args.visibility,
        "width": args.width,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMemoryUnit.
 */
export interface GetMemoryUnitArgs {
    accountMoid?: string;
    additionalProperties?: string;
    adminState?: string;
    ancestors?: inputs.GetMemoryUnitAncestor[];
    arrayId?: number;
    bank?: number;
    capacity?: string;
    classId?: string;
    clock?: string;
    createTime?: string;
    description?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    formFactor?: string;
    id?: string;
    inventoryDeviceInfo?: inputs.GetMemoryUnitInventoryDeviceInfo;
    isPlatformSupported?: boolean;
    isUpgraded?: boolean;
    latency?: string;
    location?: string;
    memoryArray?: inputs.GetMemoryUnitMemoryArray;
    memoryId?: number;
    modTime?: string;
    model?: string;
    moid?: string;
    objectType?: string;
    operPowerState?: string;
    operReasons?: string[];
    operState?: string;
    operability?: string;
    owners?: string[];
    parent?: inputs.GetMemoryUnitParent;
    partNumber?: string;
    permissionResources?: inputs.GetMemoryUnitPermissionResource[];
    pid?: string;
    presence?: string;
    previousFru?: inputs.GetMemoryUnitPreviousFru;
    registeredDevice?: inputs.GetMemoryUnitRegisteredDevice;
    revision?: string;
    rn?: string;
    serial?: string;
    set?: number;
    sharedScope?: string;
    speed?: string;
    tags?: inputs.GetMemoryUnitTag[];
    thermal?: string;
    type?: string;
    vendor?: string;
    versionContext?: inputs.GetMemoryUnitVersionContext;
    visibility?: string;
    width?: string;
}

/**
 * A collection of values returned by getMemoryUnit.
 */
export interface GetMemoryUnitResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly adminState?: string;
    readonly ancestors?: outputs.GetMemoryUnitAncestor[];
    readonly arrayId?: number;
    readonly bank?: number;
    readonly capacity?: string;
    readonly classId?: string;
    readonly clock?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly formFactor?: string;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetMemoryUnitInventoryDeviceInfo;
    readonly isPlatformSupported?: boolean;
    readonly isUpgraded?: boolean;
    readonly latency?: string;
    readonly location?: string;
    readonly memoryArray?: outputs.GetMemoryUnitMemoryArray;
    readonly memoryId?: number;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly operPowerState?: string;
    readonly operReasons?: string[];
    readonly operState?: string;
    readonly operability?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetMemoryUnitParent;
    readonly partNumber?: string;
    readonly permissionResources?: outputs.GetMemoryUnitPermissionResource[];
    readonly pid?: string;
    readonly presence?: string;
    readonly previousFru?: outputs.GetMemoryUnitPreviousFru;
    readonly registeredDevice?: outputs.GetMemoryUnitRegisteredDevice;
    readonly results: outputs.GetMemoryUnitResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly serial?: string;
    readonly set?: number;
    readonly sharedScope?: string;
    readonly speed?: string;
    readonly tags?: outputs.GetMemoryUnitTag[];
    readonly thermal?: string;
    readonly type?: string;
    readonly vendor?: string;
    readonly versionContext?: outputs.GetMemoryUnitVersionContext;
    readonly visibility?: string;
    readonly width?: string;
}
export function getMemoryUnitOutput(args?: GetMemoryUnitOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMemoryUnitResult> {
    return pulumi.output(args).apply((a: any) => getMemoryUnit(a, opts))
}

/**
 * A collection of arguments for invoking getMemoryUnit.
 */
export interface GetMemoryUnitOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    adminState?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetMemoryUnitAncestorArgs>[]>;
    arrayId?: pulumi.Input<number>;
    bank?: pulumi.Input<number>;
    capacity?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    clock?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    formFactor?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetMemoryUnitInventoryDeviceInfoArgs>;
    isPlatformSupported?: pulumi.Input<boolean>;
    isUpgraded?: pulumi.Input<boolean>;
    latency?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    memoryArray?: pulumi.Input<inputs.GetMemoryUnitMemoryArrayArgs>;
    memoryId?: pulumi.Input<number>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operPowerState?: pulumi.Input<string>;
    operReasons?: pulumi.Input<pulumi.Input<string>[]>;
    operState?: pulumi.Input<string>;
    operability?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetMemoryUnitParentArgs>;
    partNumber?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetMemoryUnitPermissionResourceArgs>[]>;
    pid?: pulumi.Input<string>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetMemoryUnitPreviousFruArgs>;
    registeredDevice?: pulumi.Input<inputs.GetMemoryUnitRegisteredDeviceArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    set?: pulumi.Input<number>;
    sharedScope?: pulumi.Input<string>;
    speed?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetMemoryUnitTagArgs>[]>;
    thermal?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetMemoryUnitVersionContextArgs>;
    visibility?: pulumi.Input<string>;
    width?: pulumi.Input<string>;
}
