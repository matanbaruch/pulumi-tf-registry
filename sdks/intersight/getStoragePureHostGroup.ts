// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStoragePureHostGroup(args?: GetStoragePureHostGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetStoragePureHostGroupResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStoragePureHostGroup:getStoragePureHostGroup", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "array": args.array,
        "classId": args.classId,
        "createTime": args.createTime,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "hostNames": args.hostNames,
        "hosts": args.hosts,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "protectionGroup": args.protectionGroup,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "storageUtilization": args.storageUtilization,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStoragePureHostGroup.
 */
export interface GetStoragePureHostGroupArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStoragePureHostGroupAncestor[];
    array?: inputs.GetStoragePureHostGroupArray;
    classId?: string;
    createTime?: string;
    description?: string;
    domainGroupMoid?: string;
    hostNames?: string[];
    hosts?: inputs.GetStoragePureHostGroupHost[];
    id?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStoragePureHostGroupParent;
    permissionResources?: inputs.GetStoragePureHostGroupPermissionResource[];
    protectionGroup?: inputs.GetStoragePureHostGroupProtectionGroup;
    registeredDevice?: inputs.GetStoragePureHostGroupRegisteredDevice;
    sharedScope?: string;
    storageUtilization?: inputs.GetStoragePureHostGroupStorageUtilization;
    tags?: inputs.GetStoragePureHostGroupTag[];
    versionContext?: inputs.GetStoragePureHostGroupVersionContext;
}

/**
 * A collection of values returned by getStoragePureHostGroup.
 */
export interface GetStoragePureHostGroupResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStoragePureHostGroupAncestor[];
    readonly array?: outputs.GetStoragePureHostGroupArray;
    readonly classId?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly hostNames?: string[];
    readonly hosts?: outputs.GetStoragePureHostGroupHost[];
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStoragePureHostGroupParent;
    readonly permissionResources?: outputs.GetStoragePureHostGroupPermissionResource[];
    readonly protectionGroup?: outputs.GetStoragePureHostGroupProtectionGroup;
    readonly registeredDevice?: outputs.GetStoragePureHostGroupRegisteredDevice;
    readonly results: outputs.GetStoragePureHostGroupResult[];
    readonly sharedScope?: string;
    readonly storageUtilization?: outputs.GetStoragePureHostGroupStorageUtilization;
    readonly tags?: outputs.GetStoragePureHostGroupTag[];
    readonly versionContext?: outputs.GetStoragePureHostGroupVersionContext;
}
export function getStoragePureHostGroupOutput(args?: GetStoragePureHostGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStoragePureHostGroupResult> {
    return pulumi.output(args).apply((a: any) => getStoragePureHostGroup(a, opts))
}

/**
 * A collection of arguments for invoking getStoragePureHostGroup.
 */
export interface GetStoragePureHostGroupOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStoragePureHostGroupAncestorArgs>[]>;
    array?: pulumi.Input<inputs.GetStoragePureHostGroupArrayArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    hostNames?: pulumi.Input<pulumi.Input<string>[]>;
    hosts?: pulumi.Input<pulumi.Input<inputs.GetStoragePureHostGroupHostArgs>[]>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStoragePureHostGroupParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStoragePureHostGroupPermissionResourceArgs>[]>;
    protectionGroup?: pulumi.Input<inputs.GetStoragePureHostGroupProtectionGroupArgs>;
    registeredDevice?: pulumi.Input<inputs.GetStoragePureHostGroupRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    storageUtilization?: pulumi.Input<inputs.GetStoragePureHostGroupStorageUtilizationArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStoragePureHostGroupTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetStoragePureHostGroupVersionContextArgs>;
}
