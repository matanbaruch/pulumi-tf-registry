// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMemoryPersistentMemoryUnit(args?: GetMemoryPersistentMemoryUnitArgs, opts?: pulumi.InvokeOptions): Promise<GetMemoryPersistentMemoryUnitResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getMemoryPersistentMemoryUnit:getMemoryPersistentMemoryUnit", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "adminState": args.adminState,
        "ancestors": args.ancestors,
        "appDirectCapacity": args.appDirectCapacity,
        "arrayId": args.arrayId,
        "bank": args.bank,
        "capacity": args.capacity,
        "classId": args.classId,
        "clock": args.clock,
        "countStatus": args.countStatus,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "firmwareVersion": args.firmwareVersion,
        "formFactor": args.formFactor,
        "frozenStatus": args.frozenStatus,
        "healthState": args.healthState,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "isUpgraded": args.isUpgraded,
        "latency": args.latency,
        "location": args.location,
        "lockStatus": args.lockStatus,
        "memoryArray": args.memoryArray,
        "memoryCapacity": args.memoryCapacity,
        "memoryId": args.memoryId,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "objectType": args.objectType,
        "operPowerState": args.operPowerState,
        "operReasons": args.operReasons,
        "operState": args.operState,
        "operability": args.operability,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "persistentMemoryCapacity": args.persistentMemoryCapacity,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "registeredDevice": args.registeredDevice,
        "reservedCapacity": args.reservedCapacity,
        "revision": args.revision,
        "rn": args.rn,
        "securityStatus": args.securityStatus,
        "serial": args.serial,
        "set": args.set,
        "sharedScope": args.sharedScope,
        "socketId": args.socketId,
        "socketMemoryId": args.socketMemoryId,
        "speed": args.speed,
        "tags": args.tags,
        "thermal": args.thermal,
        "totalCapacity": args.totalCapacity,
        "type": args.type,
        "uid": args.uid,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
        "visibility": args.visibility,
        "width": args.width,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMemoryPersistentMemoryUnit.
 */
export interface GetMemoryPersistentMemoryUnitArgs {
    accountMoid?: string;
    additionalProperties?: string;
    adminState?: string;
    ancestors?: inputs.GetMemoryPersistentMemoryUnitAncestor[];
    appDirectCapacity?: string;
    arrayId?: number;
    bank?: number;
    capacity?: string;
    classId?: string;
    clock?: string;
    countStatus?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    firmwareVersion?: string;
    formFactor?: string;
    frozenStatus?: string;
    healthState?: string;
    id?: string;
    inventoryDeviceInfo?: inputs.GetMemoryPersistentMemoryUnitInventoryDeviceInfo;
    isUpgraded?: boolean;
    latency?: string;
    location?: string;
    lockStatus?: string;
    memoryArray?: inputs.GetMemoryPersistentMemoryUnitMemoryArray;
    memoryCapacity?: string;
    memoryId?: number;
    modTime?: string;
    model?: string;
    moid?: string;
    objectType?: string;
    operPowerState?: string;
    operReasons?: string[];
    operState?: string;
    operability?: string;
    owners?: string[];
    parent?: inputs.GetMemoryPersistentMemoryUnitParent;
    permissionResources?: inputs.GetMemoryPersistentMemoryUnitPermissionResource[];
    persistentMemoryCapacity?: string;
    presence?: string;
    previousFru?: inputs.GetMemoryPersistentMemoryUnitPreviousFru;
    registeredDevice?: inputs.GetMemoryPersistentMemoryUnitRegisteredDevice;
    reservedCapacity?: string;
    revision?: string;
    rn?: string;
    securityStatus?: string;
    serial?: string;
    set?: number;
    sharedScope?: string;
    socketId?: string;
    socketMemoryId?: string;
    speed?: string;
    tags?: inputs.GetMemoryPersistentMemoryUnitTag[];
    thermal?: string;
    totalCapacity?: string;
    type?: string;
    uid?: string;
    vendor?: string;
    versionContext?: inputs.GetMemoryPersistentMemoryUnitVersionContext;
    visibility?: string;
    width?: string;
}

/**
 * A collection of values returned by getMemoryPersistentMemoryUnit.
 */
export interface GetMemoryPersistentMemoryUnitResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly adminState?: string;
    readonly ancestors?: outputs.GetMemoryPersistentMemoryUnitAncestor[];
    readonly appDirectCapacity?: string;
    readonly arrayId?: number;
    readonly bank?: number;
    readonly capacity?: string;
    readonly classId?: string;
    readonly clock?: string;
    readonly countStatus?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly firmwareVersion?: string;
    readonly formFactor?: string;
    readonly frozenStatus?: string;
    readonly healthState?: string;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetMemoryPersistentMemoryUnitInventoryDeviceInfo;
    readonly isUpgraded?: boolean;
    readonly latency?: string;
    readonly location?: string;
    readonly lockStatus?: string;
    readonly memoryArray?: outputs.GetMemoryPersistentMemoryUnitMemoryArray;
    readonly memoryCapacity?: string;
    readonly memoryId?: number;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly operPowerState?: string;
    readonly operReasons?: string[];
    readonly operState?: string;
    readonly operability?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetMemoryPersistentMemoryUnitParent;
    readonly permissionResources?: outputs.GetMemoryPersistentMemoryUnitPermissionResource[];
    readonly persistentMemoryCapacity?: string;
    readonly presence?: string;
    readonly previousFru?: outputs.GetMemoryPersistentMemoryUnitPreviousFru;
    readonly registeredDevice?: outputs.GetMemoryPersistentMemoryUnitRegisteredDevice;
    readonly reservedCapacity?: string;
    readonly results: outputs.GetMemoryPersistentMemoryUnitResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly securityStatus?: string;
    readonly serial?: string;
    readonly set?: number;
    readonly sharedScope?: string;
    readonly socketId?: string;
    readonly socketMemoryId?: string;
    readonly speed?: string;
    readonly tags?: outputs.GetMemoryPersistentMemoryUnitTag[];
    readonly thermal?: string;
    readonly totalCapacity?: string;
    readonly type?: string;
    readonly uid?: string;
    readonly vendor?: string;
    readonly versionContext?: outputs.GetMemoryPersistentMemoryUnitVersionContext;
    readonly visibility?: string;
    readonly width?: string;
}
export function getMemoryPersistentMemoryUnitOutput(args?: GetMemoryPersistentMemoryUnitOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMemoryPersistentMemoryUnitResult> {
    return pulumi.output(args).apply((a: any) => getMemoryPersistentMemoryUnit(a, opts))
}

/**
 * A collection of arguments for invoking getMemoryPersistentMemoryUnit.
 */
export interface GetMemoryPersistentMemoryUnitOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    adminState?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetMemoryPersistentMemoryUnitAncestorArgs>[]>;
    appDirectCapacity?: pulumi.Input<string>;
    arrayId?: pulumi.Input<number>;
    bank?: pulumi.Input<number>;
    capacity?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    clock?: pulumi.Input<string>;
    countStatus?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    firmwareVersion?: pulumi.Input<string>;
    formFactor?: pulumi.Input<string>;
    frozenStatus?: pulumi.Input<string>;
    healthState?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetMemoryPersistentMemoryUnitInventoryDeviceInfoArgs>;
    isUpgraded?: pulumi.Input<boolean>;
    latency?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    lockStatus?: pulumi.Input<string>;
    memoryArray?: pulumi.Input<inputs.GetMemoryPersistentMemoryUnitMemoryArrayArgs>;
    memoryCapacity?: pulumi.Input<string>;
    memoryId?: pulumi.Input<number>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operPowerState?: pulumi.Input<string>;
    operReasons?: pulumi.Input<pulumi.Input<string>[]>;
    operState?: pulumi.Input<string>;
    operability?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetMemoryPersistentMemoryUnitParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetMemoryPersistentMemoryUnitPermissionResourceArgs>[]>;
    persistentMemoryCapacity?: pulumi.Input<string>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetMemoryPersistentMemoryUnitPreviousFruArgs>;
    registeredDevice?: pulumi.Input<inputs.GetMemoryPersistentMemoryUnitRegisteredDeviceArgs>;
    reservedCapacity?: pulumi.Input<string>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    securityStatus?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    set?: pulumi.Input<number>;
    sharedScope?: pulumi.Input<string>;
    socketId?: pulumi.Input<string>;
    socketMemoryId?: pulumi.Input<string>;
    speed?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetMemoryPersistentMemoryUnitTagArgs>[]>;
    thermal?: pulumi.Input<string>;
    totalCapacity?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    uid?: pulumi.Input<string>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetMemoryPersistentMemoryUnitVersionContextArgs>;
    visibility?: pulumi.Input<string>;
    width?: pulumi.Input<string>;
}
