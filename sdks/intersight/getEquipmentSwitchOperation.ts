// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEquipmentSwitchOperation(args?: GetEquipmentSwitchOperationArgs, opts?: pulumi.InvokeOptions): Promise<GetEquipmentSwitchOperationResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getEquipmentSwitchOperation:getEquipmentSwitchOperation", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "adminEvacState": args.adminEvacState,
        "adminLocatorLedAction": args.adminLocatorLedAction,
        "adminLocatorLedActionState": args.adminLocatorLedActionState,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "configEvacState": args.configEvacState,
        "createTime": args.createTime,
        "deviceRegistration": args.deviceRegistration,
        "domainGroupMoid": args.domainGroupMoid,
        "forceEvac": args.forceEvac,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "networkElement": args.networkElement,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "resetAction": args.resetAction,
        "resetActionState": args.resetActionState,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEquipmentSwitchOperation.
 */
export interface GetEquipmentSwitchOperationArgs {
    accountMoid?: string;
    additionalProperties?: string;
    adminEvacState?: string;
    adminLocatorLedAction?: string;
    adminLocatorLedActionState?: string;
    ancestors?: inputs.GetEquipmentSwitchOperationAncestor[];
    classId?: string;
    configEvacState?: string;
    createTime?: string;
    deviceRegistration?: inputs.GetEquipmentSwitchOperationDeviceRegistration;
    domainGroupMoid?: string;
    forceEvac?: boolean;
    id?: string;
    modTime?: string;
    moid?: string;
    networkElement?: inputs.GetEquipmentSwitchOperationNetworkElement;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetEquipmentSwitchOperationParent;
    permissionResources?: inputs.GetEquipmentSwitchOperationPermissionResource[];
    resetAction?: inputs.GetEquipmentSwitchOperationResetAction;
    resetActionState?: string;
    sharedScope?: string;
    tags?: inputs.GetEquipmentSwitchOperationTag[];
    versionContext?: inputs.GetEquipmentSwitchOperationVersionContext;
}

/**
 * A collection of values returned by getEquipmentSwitchOperation.
 */
export interface GetEquipmentSwitchOperationResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly adminEvacState?: string;
    readonly adminLocatorLedAction?: string;
    readonly adminLocatorLedActionState?: string;
    readonly ancestors?: outputs.GetEquipmentSwitchOperationAncestor[];
    readonly classId?: string;
    readonly configEvacState?: string;
    readonly createTime?: string;
    readonly deviceRegistration?: outputs.GetEquipmentSwitchOperationDeviceRegistration;
    readonly domainGroupMoid?: string;
    readonly forceEvac?: boolean;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly networkElement?: outputs.GetEquipmentSwitchOperationNetworkElement;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetEquipmentSwitchOperationParent;
    readonly permissionResources?: outputs.GetEquipmentSwitchOperationPermissionResource[];
    readonly resetAction?: outputs.GetEquipmentSwitchOperationResetAction;
    readonly resetActionState?: string;
    readonly results: outputs.GetEquipmentSwitchOperationResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetEquipmentSwitchOperationTag[];
    readonly versionContext?: outputs.GetEquipmentSwitchOperationVersionContext;
}
export function getEquipmentSwitchOperationOutput(args?: GetEquipmentSwitchOperationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEquipmentSwitchOperationResult> {
    return pulumi.output(args).apply((a: any) => getEquipmentSwitchOperation(a, opts))
}

/**
 * A collection of arguments for invoking getEquipmentSwitchOperation.
 */
export interface GetEquipmentSwitchOperationOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    adminEvacState?: pulumi.Input<string>;
    adminLocatorLedAction?: pulumi.Input<string>;
    adminLocatorLedActionState?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetEquipmentSwitchOperationAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    configEvacState?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceRegistration?: pulumi.Input<inputs.GetEquipmentSwitchOperationDeviceRegistrationArgs>;
    domainGroupMoid?: pulumi.Input<string>;
    forceEvac?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    networkElement?: pulumi.Input<inputs.GetEquipmentSwitchOperationNetworkElementArgs>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetEquipmentSwitchOperationParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetEquipmentSwitchOperationPermissionResourceArgs>[]>;
    resetAction?: pulumi.Input<inputs.GetEquipmentSwitchOperationResetActionArgs>;
    resetActionState?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetEquipmentSwitchOperationTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetEquipmentSwitchOperationVersionContextArgs>;
}
