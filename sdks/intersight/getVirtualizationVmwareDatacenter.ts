// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVirtualizationVmwareDatacenter(args?: GetVirtualizationVmwareDatacenterArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualizationVmwareDatacenterResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getVirtualizationVmwareDatacenter:getVirtualizationVmwareDatacenter", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "clusterCount": args.clusterCount,
        "createTime": args.createTime,
        "datastoreCount": args.datastoreCount,
        "distributedNetworkCount": args.distributedNetworkCount,
        "distributedVirtualSwitchCount": args.distributedVirtualSwitchCount,
        "domainGroupMoid": args.domainGroupMoid,
        "hostCount": args.hostCount,
        "hypervisorManager": args.hypervisorManager,
        "id": args.id,
        "identity": args.identity,
        "inventoryPath": args.inventoryPath,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "networkCount": args.networkCount,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "parentFolder": args.parentFolder,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "standardNetworkCount": args.standardNetworkCount,
        "tags": args.tags,
        "uuid": args.uuid,
        "versionContext": args.versionContext,
        "vmCount": args.vmCount,
        "vmTemplateCount": args.vmTemplateCount,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareDatacenter.
 */
export interface GetVirtualizationVmwareDatacenterArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetVirtualizationVmwareDatacenterAncestor[];
    classId?: string;
    clusterCount?: number;
    createTime?: string;
    datastoreCount?: number;
    distributedNetworkCount?: number;
    distributedVirtualSwitchCount?: number;
    domainGroupMoid?: string;
    hostCount?: number;
    hypervisorManager?: inputs.GetVirtualizationVmwareDatacenterHypervisorManager;
    id?: string;
    identity?: string;
    inventoryPath?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    networkCount?: number;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetVirtualizationVmwareDatacenterParent;
    parentFolder?: inputs.GetVirtualizationVmwareDatacenterParentFolder;
    permissionResources?: inputs.GetVirtualizationVmwareDatacenterPermissionResource[];
    registeredDevice?: inputs.GetVirtualizationVmwareDatacenterRegisteredDevice;
    sharedScope?: string;
    standardNetworkCount?: number;
    tags?: inputs.GetVirtualizationVmwareDatacenterTag[];
    uuid?: string;
    versionContext?: inputs.GetVirtualizationVmwareDatacenterVersionContext;
    vmCount?: number;
    vmTemplateCount?: number;
}

/**
 * A collection of values returned by getVirtualizationVmwareDatacenter.
 */
export interface GetVirtualizationVmwareDatacenterResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetVirtualizationVmwareDatacenterAncestor[];
    readonly classId?: string;
    readonly clusterCount?: number;
    readonly createTime?: string;
    readonly datastoreCount?: number;
    readonly distributedNetworkCount?: number;
    readonly distributedVirtualSwitchCount?: number;
    readonly domainGroupMoid?: string;
    readonly hostCount?: number;
    readonly hypervisorManager?: outputs.GetVirtualizationVmwareDatacenterHypervisorManager;
    readonly id: string;
    readonly identity?: string;
    readonly inventoryPath?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly networkCount?: number;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetVirtualizationVmwareDatacenterParent;
    readonly parentFolder?: outputs.GetVirtualizationVmwareDatacenterParentFolder;
    readonly permissionResources?: outputs.GetVirtualizationVmwareDatacenterPermissionResource[];
    readonly registeredDevice?: outputs.GetVirtualizationVmwareDatacenterRegisteredDevice;
    readonly results: outputs.GetVirtualizationVmwareDatacenterResult[];
    readonly sharedScope?: string;
    readonly standardNetworkCount?: number;
    readonly tags?: outputs.GetVirtualizationVmwareDatacenterTag[];
    readonly uuid?: string;
    readonly versionContext?: outputs.GetVirtualizationVmwareDatacenterVersionContext;
    readonly vmCount?: number;
    readonly vmTemplateCount?: number;
}
export function getVirtualizationVmwareDatacenterOutput(args?: GetVirtualizationVmwareDatacenterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualizationVmwareDatacenterResult> {
    return pulumi.output(args).apply((a: any) => getVirtualizationVmwareDatacenter(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareDatacenter.
 */
export interface GetVirtualizationVmwareDatacenterOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareDatacenterAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    clusterCount?: pulumi.Input<number>;
    createTime?: pulumi.Input<string>;
    datastoreCount?: pulumi.Input<number>;
    distributedNetworkCount?: pulumi.Input<number>;
    distributedVirtualSwitchCount?: pulumi.Input<number>;
    domainGroupMoid?: pulumi.Input<string>;
    hostCount?: pulumi.Input<number>;
    hypervisorManager?: pulumi.Input<inputs.GetVirtualizationVmwareDatacenterHypervisorManagerArgs>;
    id?: pulumi.Input<string>;
    identity?: pulumi.Input<string>;
    inventoryPath?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkCount?: pulumi.Input<number>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetVirtualizationVmwareDatacenterParentArgs>;
    parentFolder?: pulumi.Input<inputs.GetVirtualizationVmwareDatacenterParentFolderArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareDatacenterPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetVirtualizationVmwareDatacenterRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    standardNetworkCount?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareDatacenterTagArgs>[]>;
    uuid?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetVirtualizationVmwareDatacenterVersionContextArgs>;
    vmCount?: pulumi.Input<number>;
    vmTemplateCount?: pulumi.Input<number>;
}
