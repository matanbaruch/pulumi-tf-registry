// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStoragePureHost(args?: GetStoragePureHostArgs, opts?: pulumi.InvokeOptions): Promise<GetStoragePureHostResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStoragePureHost:getStoragePureHost", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "array": args.array,
        "classId": args.classId,
        "createTime": args.createTime,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "hostGroup": args.hostGroup,
        "hostGroupName": args.hostGroupName,
        "id": args.id,
        "initiators": args.initiators,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "osType": args.osType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "protectionGroup": args.protectionGroup,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "storageUtilization": args.storageUtilization,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStoragePureHost.
 */
export interface GetStoragePureHostArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStoragePureHostAncestor[];
    array?: inputs.GetStoragePureHostArray;
    classId?: string;
    createTime?: string;
    description?: string;
    domainGroupMoid?: string;
    hostGroup?: inputs.GetStoragePureHostHostGroup;
    hostGroupName?: string;
    id?: string;
    initiators?: inputs.GetStoragePureHostInitiator[];
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    osType?: string;
    owners?: string[];
    parent?: inputs.GetStoragePureHostParent;
    permissionResources?: inputs.GetStoragePureHostPermissionResource[];
    protectionGroup?: inputs.GetStoragePureHostProtectionGroup;
    registeredDevice?: inputs.GetStoragePureHostRegisteredDevice;
    sharedScope?: string;
    storageUtilization?: inputs.GetStoragePureHostStorageUtilization;
    tags?: inputs.GetStoragePureHostTag[];
    versionContext?: inputs.GetStoragePureHostVersionContext;
}

/**
 * A collection of values returned by getStoragePureHost.
 */
export interface GetStoragePureHostResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStoragePureHostAncestor[];
    readonly array?: outputs.GetStoragePureHostArray;
    readonly classId?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly hostGroup?: outputs.GetStoragePureHostHostGroup;
    readonly hostGroupName?: string;
    readonly id: string;
    readonly initiators?: outputs.GetStoragePureHostInitiator[];
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly osType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStoragePureHostParent;
    readonly permissionResources?: outputs.GetStoragePureHostPermissionResource[];
    readonly protectionGroup?: outputs.GetStoragePureHostProtectionGroup;
    readonly registeredDevice?: outputs.GetStoragePureHostRegisteredDevice;
    readonly results: outputs.GetStoragePureHostResult[];
    readonly sharedScope?: string;
    readonly storageUtilization?: outputs.GetStoragePureHostStorageUtilization;
    readonly tags?: outputs.GetStoragePureHostTag[];
    readonly versionContext?: outputs.GetStoragePureHostVersionContext;
}
export function getStoragePureHostOutput(args?: GetStoragePureHostOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStoragePureHostResult> {
    return pulumi.output(args).apply((a: any) => getStoragePureHost(a, opts))
}

/**
 * A collection of arguments for invoking getStoragePureHost.
 */
export interface GetStoragePureHostOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStoragePureHostAncestorArgs>[]>;
    array?: pulumi.Input<inputs.GetStoragePureHostArrayArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    hostGroup?: pulumi.Input<inputs.GetStoragePureHostHostGroupArgs>;
    hostGroupName?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    initiators?: pulumi.Input<pulumi.Input<inputs.GetStoragePureHostInitiatorArgs>[]>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    osType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStoragePureHostParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStoragePureHostPermissionResourceArgs>[]>;
    protectionGroup?: pulumi.Input<inputs.GetStoragePureHostProtectionGroupArgs>;
    registeredDevice?: pulumi.Input<inputs.GetStoragePureHostRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    storageUtilization?: pulumi.Input<inputs.GetStoragePureHostStorageUtilizationArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStoragePureHostTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetStoragePureHostVersionContextArgs>;
}
