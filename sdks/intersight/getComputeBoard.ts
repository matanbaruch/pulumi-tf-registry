// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getComputeBoard(args?: GetComputeBoardArgs, opts?: pulumi.InvokeOptions): Promise<GetComputeBoardResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getComputeBoard:getComputeBoard", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "boardId": args.boardId,
        "classId": args.classId,
        "computeBlade": args.computeBlade,
        "computeRackUnit": args.computeRackUnit,
        "cpuTypeController": args.cpuTypeController,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "equipmentTpms": args.equipmentTpms,
        "graphicsCards": args.graphicsCards,
        "hybridDriveSlots": args.hybridDriveSlots,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "isUpgraded": args.isUpgraded,
        "memoryArrays": args.memoryArrays,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "objectType": args.objectType,
        "operPowerState": args.operPowerState,
        "operReasons": args.operReasons,
        "owners": args.owners,
        "parent": args.parent,
        "pciCoprocessorCards": args.pciCoprocessorCards,
        "pciSwitches": args.pciSwitches,
        "permissionResources": args.permissionResources,
        "persistentMemoryConfiguration": args.persistentMemoryConfiguration,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "processors": args.processors,
        "registeredDevice": args.registeredDevice,
        "revision": args.revision,
        "rn": args.rn,
        "securityUnits": args.securityUnits,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "storageControllerDrives": args.storageControllerDrives,
        "storageControllers": args.storageControllers,
        "storageFlexFlashControllers": args.storageFlexFlashControllers,
        "storageFlexUtilControllers": args.storageFlexUtilControllers,
        "tags": args.tags,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getComputeBoard.
 */
export interface GetComputeBoardArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetComputeBoardAncestor[];
    boardId?: number;
    classId?: string;
    computeBlade?: inputs.GetComputeBoardComputeBlade;
    computeRackUnit?: inputs.GetComputeBoardComputeRackUnit;
    cpuTypeController?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    equipmentTpms?: inputs.GetComputeBoardEquipmentTpm[];
    graphicsCards?: inputs.GetComputeBoardGraphicsCard[];
    hybridDriveSlots?: inputs.GetComputeBoardHybridDriveSlot[];
    id?: string;
    inventoryDeviceInfo?: inputs.GetComputeBoardInventoryDeviceInfo;
    isUpgraded?: boolean;
    memoryArrays?: inputs.GetComputeBoardMemoryArray[];
    modTime?: string;
    model?: string;
    moid?: string;
    objectType?: string;
    operPowerState?: string;
    operReasons?: string[];
    owners?: string[];
    parent?: inputs.GetComputeBoardParent;
    pciCoprocessorCards?: inputs.GetComputeBoardPciCoprocessorCard[];
    pciSwitches?: inputs.GetComputeBoardPciSwitch[];
    permissionResources?: inputs.GetComputeBoardPermissionResource[];
    persistentMemoryConfiguration?: inputs.GetComputeBoardPersistentMemoryConfiguration;
    presence?: string;
    previousFru?: inputs.GetComputeBoardPreviousFru;
    processors?: inputs.GetComputeBoardProcessor[];
    registeredDevice?: inputs.GetComputeBoardRegisteredDevice;
    revision?: string;
    rn?: string;
    securityUnits?: inputs.GetComputeBoardSecurityUnit[];
    serial?: string;
    sharedScope?: string;
    storageControllerDrives?: inputs.GetComputeBoardStorageControllerDrife[];
    storageControllers?: inputs.GetComputeBoardStorageController[];
    storageFlexFlashControllers?: inputs.GetComputeBoardStorageFlexFlashController[];
    storageFlexUtilControllers?: inputs.GetComputeBoardStorageFlexUtilController[];
    tags?: inputs.GetComputeBoardTag[];
    vendor?: string;
    versionContext?: inputs.GetComputeBoardVersionContext;
}

/**
 * A collection of values returned by getComputeBoard.
 */
export interface GetComputeBoardResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetComputeBoardAncestor[];
    readonly boardId?: number;
    readonly classId?: string;
    readonly computeBlade?: outputs.GetComputeBoardComputeBlade;
    readonly computeRackUnit?: outputs.GetComputeBoardComputeRackUnit;
    readonly cpuTypeController?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly equipmentTpms?: outputs.GetComputeBoardEquipmentTpm[];
    readonly graphicsCards?: outputs.GetComputeBoardGraphicsCard[];
    readonly hybridDriveSlots?: outputs.GetComputeBoardHybridDriveSlot[];
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetComputeBoardInventoryDeviceInfo;
    readonly isUpgraded?: boolean;
    readonly memoryArrays?: outputs.GetComputeBoardMemoryArray[];
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly operPowerState?: string;
    readonly operReasons?: string[];
    readonly owners?: string[];
    readonly parent?: outputs.GetComputeBoardParent;
    readonly pciCoprocessorCards?: outputs.GetComputeBoardPciCoprocessorCard[];
    readonly pciSwitches?: outputs.GetComputeBoardPciSwitch[];
    readonly permissionResources?: outputs.GetComputeBoardPermissionResource[];
    readonly persistentMemoryConfiguration?: outputs.GetComputeBoardPersistentMemoryConfiguration;
    readonly presence?: string;
    readonly previousFru?: outputs.GetComputeBoardPreviousFru;
    readonly processors?: outputs.GetComputeBoardProcessor[];
    readonly registeredDevice?: outputs.GetComputeBoardRegisteredDevice;
    readonly results: outputs.GetComputeBoardResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly securityUnits?: outputs.GetComputeBoardSecurityUnit[];
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly storageControllerDrives?: outputs.GetComputeBoardStorageControllerDrife[];
    readonly storageControllers?: outputs.GetComputeBoardStorageController[];
    readonly storageFlexFlashControllers?: outputs.GetComputeBoardStorageFlexFlashController[];
    readonly storageFlexUtilControllers?: outputs.GetComputeBoardStorageFlexUtilController[];
    readonly tags?: outputs.GetComputeBoardTag[];
    readonly vendor?: string;
    readonly versionContext?: outputs.GetComputeBoardVersionContext;
}
export function getComputeBoardOutput(args?: GetComputeBoardOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetComputeBoardResult> {
    return pulumi.output(args).apply((a: any) => getComputeBoard(a, opts))
}

/**
 * A collection of arguments for invoking getComputeBoard.
 */
export interface GetComputeBoardOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetComputeBoardAncestorArgs>[]>;
    boardId?: pulumi.Input<number>;
    classId?: pulumi.Input<string>;
    computeBlade?: pulumi.Input<inputs.GetComputeBoardComputeBladeArgs>;
    computeRackUnit?: pulumi.Input<inputs.GetComputeBoardComputeRackUnitArgs>;
    cpuTypeController?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    equipmentTpms?: pulumi.Input<pulumi.Input<inputs.GetComputeBoardEquipmentTpmArgs>[]>;
    graphicsCards?: pulumi.Input<pulumi.Input<inputs.GetComputeBoardGraphicsCardArgs>[]>;
    hybridDriveSlots?: pulumi.Input<pulumi.Input<inputs.GetComputeBoardHybridDriveSlotArgs>[]>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetComputeBoardInventoryDeviceInfoArgs>;
    isUpgraded?: pulumi.Input<boolean>;
    memoryArrays?: pulumi.Input<pulumi.Input<inputs.GetComputeBoardMemoryArrayArgs>[]>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operPowerState?: pulumi.Input<string>;
    operReasons?: pulumi.Input<pulumi.Input<string>[]>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetComputeBoardParentArgs>;
    pciCoprocessorCards?: pulumi.Input<pulumi.Input<inputs.GetComputeBoardPciCoprocessorCardArgs>[]>;
    pciSwitches?: pulumi.Input<pulumi.Input<inputs.GetComputeBoardPciSwitchArgs>[]>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetComputeBoardPermissionResourceArgs>[]>;
    persistentMemoryConfiguration?: pulumi.Input<inputs.GetComputeBoardPersistentMemoryConfigurationArgs>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetComputeBoardPreviousFruArgs>;
    processors?: pulumi.Input<pulumi.Input<inputs.GetComputeBoardProcessorArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetComputeBoardRegisteredDeviceArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    securityUnits?: pulumi.Input<pulumi.Input<inputs.GetComputeBoardSecurityUnitArgs>[]>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    storageControllerDrives?: pulumi.Input<pulumi.Input<inputs.GetComputeBoardStorageControllerDrifeArgs>[]>;
    storageControllers?: pulumi.Input<pulumi.Input<inputs.GetComputeBoardStorageControllerArgs>[]>;
    storageFlexFlashControllers?: pulumi.Input<pulumi.Input<inputs.GetComputeBoardStorageFlexFlashControllerArgs>[]>;
    storageFlexUtilControllers?: pulumi.Input<pulumi.Input<inputs.GetComputeBoardStorageFlexUtilControllerArgs>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetComputeBoardTagArgs>[]>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetComputeBoardVersionContextArgs>;
}
