// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIamDomainGroup(args?: GetIamDomainGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetIamDomainGroupResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getIamDomainGroup:getIamDomainGroup", {
        "account": args.account,
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "partition1": args.partition1,
        "partition2": args.partition2,
        "partition3": args.partition3,
        "partitionKey": args.partitionKey,
        "permissionResources": args.permissionResources,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "usage": args.usage,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIamDomainGroup.
 */
export interface GetIamDomainGroupArgs {
    account?: inputs.GetIamDomainGroupAccount;
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetIamDomainGroupAncestor[];
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetIamDomainGroupParent;
    partition1?: number;
    partition2?: number;
    partition3?: number;
    partitionKey?: string;
    permissionResources?: inputs.GetIamDomainGroupPermissionResource[];
    sharedScope?: string;
    tags?: inputs.GetIamDomainGroupTag[];
    usage?: number;
    versionContext?: inputs.GetIamDomainGroupVersionContext;
}

/**
 * A collection of values returned by getIamDomainGroup.
 */
export interface GetIamDomainGroupResult {
    readonly account?: outputs.GetIamDomainGroupAccount;
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetIamDomainGroupAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetIamDomainGroupParent;
    readonly partition1?: number;
    readonly partition2?: number;
    readonly partition3?: number;
    readonly partitionKey?: string;
    readonly permissionResources?: outputs.GetIamDomainGroupPermissionResource[];
    readonly results: outputs.GetIamDomainGroupResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetIamDomainGroupTag[];
    readonly usage?: number;
    readonly versionContext?: outputs.GetIamDomainGroupVersionContext;
}
export function getIamDomainGroupOutput(args?: GetIamDomainGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIamDomainGroupResult> {
    return pulumi.output(args).apply((a: any) => getIamDomainGroup(a, opts))
}

/**
 * A collection of arguments for invoking getIamDomainGroup.
 */
export interface GetIamDomainGroupOutputArgs {
    account?: pulumi.Input<inputs.GetIamDomainGroupAccountArgs>;
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetIamDomainGroupAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetIamDomainGroupParentArgs>;
    partition1?: pulumi.Input<number>;
    partition2?: pulumi.Input<number>;
    partition3?: pulumi.Input<number>;
    partitionKey?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetIamDomainGroupPermissionResourceArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetIamDomainGroupTagArgs>[]>;
    usage?: pulumi.Input<number>;
    versionContext?: pulumi.Input<inputs.GetIamDomainGroupVersionContextArgs>;
}
