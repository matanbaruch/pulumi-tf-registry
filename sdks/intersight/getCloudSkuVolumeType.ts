// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCloudSkuVolumeType(args?: GetCloudSkuVolumeTypeArgs, opts?: pulumi.InvokeOptions): Promise<GetCloudSkuVolumeTypeResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getCloudSkuVolumeType:getCloudSkuVolumeType", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "basePrice": args.basePrice,
        "classId": args.classId,
        "createTime": args.createTime,
        "currency": args.currency,
        "customAttributes": args.customAttributes,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "iopsUnit": args.iopsUnit,
        "isActive": args.isActive,
        "isAutoDiscovered": args.isAutoDiscovered,
        "isBootable": args.isBootable,
        "isDefault": args.isDefault,
        "isProvisionedIops": args.isProvisionedIops,
        "maxIops": args.maxIops,
        "maxReadIops": args.maxReadIops,
        "maxReadThroughput": args.maxReadThroughput,
        "maxThroughput": args.maxThroughput,
        "maxVolumeSize": args.maxVolumeSize,
        "maxWriteIops": args.maxWriteIops,
        "maxWriteThroughput": args.maxWriteThroughput,
        "minVolumeSize": args.minVolumeSize,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "platformType": args.platformType,
        "region": args.region,
        "regionId": args.regionId,
        "serviceCategory": args.serviceCategory,
        "serviceFamily": args.serviceFamily,
        "serviceName": args.serviceName,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "target": args.target,
        "throughputUnit": args.throughputUnit,
        "type": args.type,
        "unit": args.unit,
        "versionContext": args.versionContext,
        "volumeSizeUnit": args.volumeSizeUnit,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCloudSkuVolumeType.
 */
export interface GetCloudSkuVolumeTypeArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetCloudSkuVolumeTypeAncestor[];
    basePrice?: number;
    classId?: string;
    createTime?: string;
    currency?: string;
    customAttributes?: inputs.GetCloudSkuVolumeTypeCustomAttribute[];
    description?: string;
    domainGroupMoid?: string;
    id?: string;
    iopsUnit?: string;
    isActive?: boolean;
    isAutoDiscovered?: boolean;
    isBootable?: boolean;
    isDefault?: boolean;
    isProvisionedIops?: boolean;
    maxIops?: number;
    maxReadIops?: number;
    maxReadThroughput?: number;
    maxThroughput?: number;
    maxVolumeSize?: number;
    maxWriteIops?: number;
    maxWriteThroughput?: number;
    minVolumeSize?: number;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetCloudSkuVolumeTypeParent;
    permissionResources?: inputs.GetCloudSkuVolumeTypePermissionResource[];
    platformType?: string;
    region?: inputs.GetCloudSkuVolumeTypeRegion;
    regionId?: string;
    serviceCategory?: string;
    serviceFamily?: string;
    serviceName?: string;
    sharedScope?: string;
    tags?: inputs.GetCloudSkuVolumeTypeTag[];
    target?: inputs.GetCloudSkuVolumeTypeTarget;
    throughputUnit?: string;
    type?: string;
    unit?: string;
    versionContext?: inputs.GetCloudSkuVolumeTypeVersionContext;
    volumeSizeUnit?: string;
}

/**
 * A collection of values returned by getCloudSkuVolumeType.
 */
export interface GetCloudSkuVolumeTypeResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetCloudSkuVolumeTypeAncestor[];
    readonly basePrice?: number;
    readonly classId?: string;
    readonly createTime?: string;
    readonly currency?: string;
    readonly customAttributes?: outputs.GetCloudSkuVolumeTypeCustomAttribute[];
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly iopsUnit?: string;
    readonly isActive?: boolean;
    readonly isAutoDiscovered?: boolean;
    readonly isBootable?: boolean;
    readonly isDefault?: boolean;
    readonly isProvisionedIops?: boolean;
    readonly maxIops?: number;
    readonly maxReadIops?: number;
    readonly maxReadThroughput?: number;
    readonly maxThroughput?: number;
    readonly maxVolumeSize?: number;
    readonly maxWriteIops?: number;
    readonly maxWriteThroughput?: number;
    readonly minVolumeSize?: number;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetCloudSkuVolumeTypeParent;
    readonly permissionResources?: outputs.GetCloudSkuVolumeTypePermissionResource[];
    readonly platformType?: string;
    readonly region?: outputs.GetCloudSkuVolumeTypeRegion;
    readonly regionId?: string;
    readonly results: outputs.GetCloudSkuVolumeTypeResult[];
    readonly serviceCategory?: string;
    readonly serviceFamily?: string;
    readonly serviceName?: string;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetCloudSkuVolumeTypeTag[];
    readonly target?: outputs.GetCloudSkuVolumeTypeTarget;
    readonly throughputUnit?: string;
    readonly type?: string;
    readonly unit?: string;
    readonly versionContext?: outputs.GetCloudSkuVolumeTypeVersionContext;
    readonly volumeSizeUnit?: string;
}
export function getCloudSkuVolumeTypeOutput(args?: GetCloudSkuVolumeTypeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCloudSkuVolumeTypeResult> {
    return pulumi.output(args).apply((a: any) => getCloudSkuVolumeType(a, opts))
}

/**
 * A collection of arguments for invoking getCloudSkuVolumeType.
 */
export interface GetCloudSkuVolumeTypeOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetCloudSkuVolumeTypeAncestorArgs>[]>;
    basePrice?: pulumi.Input<number>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    currency?: pulumi.Input<string>;
    customAttributes?: pulumi.Input<pulumi.Input<inputs.GetCloudSkuVolumeTypeCustomAttributeArgs>[]>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    iopsUnit?: pulumi.Input<string>;
    isActive?: pulumi.Input<boolean>;
    isAutoDiscovered?: pulumi.Input<boolean>;
    isBootable?: pulumi.Input<boolean>;
    isDefault?: pulumi.Input<boolean>;
    isProvisionedIops?: pulumi.Input<boolean>;
    maxIops?: pulumi.Input<number>;
    maxReadIops?: pulumi.Input<number>;
    maxReadThroughput?: pulumi.Input<number>;
    maxThroughput?: pulumi.Input<number>;
    maxVolumeSize?: pulumi.Input<number>;
    maxWriteIops?: pulumi.Input<number>;
    maxWriteThroughput?: pulumi.Input<number>;
    minVolumeSize?: pulumi.Input<number>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetCloudSkuVolumeTypeParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetCloudSkuVolumeTypePermissionResourceArgs>[]>;
    platformType?: pulumi.Input<string>;
    region?: pulumi.Input<inputs.GetCloudSkuVolumeTypeRegionArgs>;
    regionId?: pulumi.Input<string>;
    serviceCategory?: pulumi.Input<string>;
    serviceFamily?: pulumi.Input<string>;
    serviceName?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetCloudSkuVolumeTypeTagArgs>[]>;
    target?: pulumi.Input<inputs.GetCloudSkuVolumeTypeTargetArgs>;
    throughputUnit?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unit?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetCloudSkuVolumeTypeVersionContextArgs>;
    volumeSizeUnit?: pulumi.Input<string>;
}
