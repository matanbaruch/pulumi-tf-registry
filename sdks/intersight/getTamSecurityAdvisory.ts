// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getTamSecurityAdvisory(args?: GetTamSecurityAdvisoryArgs, opts?: pulumi.InvokeOptions): Promise<GetTamSecurityAdvisoryResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getTamSecurityAdvisory:getTamSecurityAdvisory", {
        "accountMoid": args.accountMoid,
        "actions": args.actions,
        "additionalProperties": args.additionalProperties,
        "advisoryId": args.advisoryId,
        "ancestors": args.ancestors,
        "apiDataSources": args.apiDataSources,
        "baseScore": args.baseScore,
        "classId": args.classId,
        "createTime": args.createTime,
        "cveIds": args.cveIds,
        "datePublished": args.datePublished,
        "dateUpdated": args.dateUpdated,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "environmentalScore": args.environmentalScore,
        "executeOnPod": args.executeOnPod,
        "externalUrl": args.externalUrl,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "nrVersion": args.nrVersion,
        "objectType": args.objectType,
        "organization": args.organization,
        "otherRefUrls": args.otherRefUrls,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "recommendation": args.recommendation,
        "severity": args.severity,
        "sharedScope": args.sharedScope,
        "state": args.state,
        "status": args.status,
        "tags": args.tags,
        "temporalScore": args.temporalScore,
        "versionContext": args.versionContext,
        "workaround": args.workaround,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getTamSecurityAdvisory.
 */
export interface GetTamSecurityAdvisoryArgs {
    accountMoid?: string;
    actions?: inputs.GetTamSecurityAdvisoryAction[];
    additionalProperties?: string;
    advisoryId?: string;
    ancestors?: inputs.GetTamSecurityAdvisoryAncestor[];
    apiDataSources?: inputs.GetTamSecurityAdvisoryApiDataSource[];
    baseScore?: number;
    classId?: string;
    createTime?: string;
    cveIds?: string[];
    datePublished?: string;
    dateUpdated?: string;
    description?: string;
    domainGroupMoid?: string;
    environmentalScore?: number;
    executeOnPod?: string;
    externalUrl?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    nrVersion?: string;
    objectType?: string;
    organization?: inputs.GetTamSecurityAdvisoryOrganization;
    otherRefUrls?: string[];
    owners?: string[];
    parent?: inputs.GetTamSecurityAdvisoryParent;
    permissionResources?: inputs.GetTamSecurityAdvisoryPermissionResource[];
    recommendation?: string;
    severity?: inputs.GetTamSecurityAdvisorySeverity;
    sharedScope?: string;
    state?: string;
    status?: string;
    tags?: inputs.GetTamSecurityAdvisoryTag[];
    temporalScore?: number;
    versionContext?: inputs.GetTamSecurityAdvisoryVersionContext;
    workaround?: string;
}

/**
 * A collection of values returned by getTamSecurityAdvisory.
 */
export interface GetTamSecurityAdvisoryResult {
    readonly accountMoid?: string;
    readonly actions?: outputs.GetTamSecurityAdvisoryAction[];
    readonly additionalProperties?: string;
    readonly advisoryId?: string;
    readonly ancestors?: outputs.GetTamSecurityAdvisoryAncestor[];
    readonly apiDataSources?: outputs.GetTamSecurityAdvisoryApiDataSource[];
    readonly baseScore?: number;
    readonly classId?: string;
    readonly createTime?: string;
    readonly cveIds?: string[];
    readonly datePublished?: string;
    readonly dateUpdated?: string;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly environmentalScore?: number;
    readonly executeOnPod?: string;
    readonly externalUrl?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nrVersion?: string;
    readonly objectType?: string;
    readonly organization?: outputs.GetTamSecurityAdvisoryOrganization;
    readonly otherRefUrls?: string[];
    readonly owners?: string[];
    readonly parent?: outputs.GetTamSecurityAdvisoryParent;
    readonly permissionResources?: outputs.GetTamSecurityAdvisoryPermissionResource[];
    readonly recommendation?: string;
    readonly results: outputs.GetTamSecurityAdvisoryResult[];
    readonly severity?: outputs.GetTamSecurityAdvisorySeverity;
    readonly sharedScope?: string;
    readonly state?: string;
    readonly status?: string;
    readonly tags?: outputs.GetTamSecurityAdvisoryTag[];
    readonly temporalScore?: number;
    readonly versionContext?: outputs.GetTamSecurityAdvisoryVersionContext;
    readonly workaround?: string;
}
export function getTamSecurityAdvisoryOutput(args?: GetTamSecurityAdvisoryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTamSecurityAdvisoryResult> {
    return pulumi.output(args).apply((a: any) => getTamSecurityAdvisory(a, opts))
}

/**
 * A collection of arguments for invoking getTamSecurityAdvisory.
 */
export interface GetTamSecurityAdvisoryOutputArgs {
    accountMoid?: pulumi.Input<string>;
    actions?: pulumi.Input<pulumi.Input<inputs.GetTamSecurityAdvisoryActionArgs>[]>;
    additionalProperties?: pulumi.Input<string>;
    advisoryId?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetTamSecurityAdvisoryAncestorArgs>[]>;
    apiDataSources?: pulumi.Input<pulumi.Input<inputs.GetTamSecurityAdvisoryApiDataSourceArgs>[]>;
    baseScore?: pulumi.Input<number>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    cveIds?: pulumi.Input<pulumi.Input<string>[]>;
    datePublished?: pulumi.Input<string>;
    dateUpdated?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    environmentalScore?: pulumi.Input<number>;
    executeOnPod?: pulumi.Input<string>;
    externalUrl?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nrVersion?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.GetTamSecurityAdvisoryOrganizationArgs>;
    otherRefUrls?: pulumi.Input<pulumi.Input<string>[]>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetTamSecurityAdvisoryParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetTamSecurityAdvisoryPermissionResourceArgs>[]>;
    recommendation?: pulumi.Input<string>;
    severity?: pulumi.Input<inputs.GetTamSecurityAdvisorySeverityArgs>;
    sharedScope?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetTamSecurityAdvisoryTagArgs>[]>;
    temporalScore?: pulumi.Input<number>;
    versionContext?: pulumi.Input<inputs.GetTamSecurityAdvisoryVersionContextArgs>;
    workaround?: pulumi.Input<string>;
}
