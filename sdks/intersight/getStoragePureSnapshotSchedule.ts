// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStoragePureSnapshotSchedule(args?: GetStoragePureSnapshotScheduleArgs, opts?: pulumi.InvokeOptions): Promise<GetStoragePureSnapshotScheduleResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStoragePureSnapshotSchedule:getStoragePureSnapshotSchedule", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "array": args.array,
        "classId": args.classId,
        "createTime": args.createTime,
        "dailyLimit": args.dailyLimit,
        "domainGroupMoid": args.domainGroupMoid,
        "frequency": args.frequency,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "protectionGroup": args.protectionGroup,
        "registeredDevice": args.registeredDevice,
        "retentionTime": args.retentionTime,
        "sharedScope": args.sharedScope,
        "snapshotExpiryTime": args.snapshotExpiryTime,
        "snapshotTime": args.snapshotTime,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStoragePureSnapshotSchedule.
 */
export interface GetStoragePureSnapshotScheduleArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStoragePureSnapshotScheduleAncestor[];
    array?: inputs.GetStoragePureSnapshotScheduleArray;
    classId?: string;
    createTime?: string;
    dailyLimit?: number;
    domainGroupMoid?: string;
    frequency?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStoragePureSnapshotScheduleParent;
    permissionResources?: inputs.GetStoragePureSnapshotSchedulePermissionResource[];
    protectionGroup?: inputs.GetStoragePureSnapshotScheduleProtectionGroup;
    registeredDevice?: inputs.GetStoragePureSnapshotScheduleRegisteredDevice;
    retentionTime?: string;
    sharedScope?: string;
    snapshotExpiryTime?: string;
    snapshotTime?: string;
    tags?: inputs.GetStoragePureSnapshotScheduleTag[];
    versionContext?: inputs.GetStoragePureSnapshotScheduleVersionContext;
}

/**
 * A collection of values returned by getStoragePureSnapshotSchedule.
 */
export interface GetStoragePureSnapshotScheduleResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStoragePureSnapshotScheduleAncestor[];
    readonly array?: outputs.GetStoragePureSnapshotScheduleArray;
    readonly classId?: string;
    readonly createTime?: string;
    readonly dailyLimit?: number;
    readonly domainGroupMoid?: string;
    readonly frequency?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStoragePureSnapshotScheduleParent;
    readonly permissionResources?: outputs.GetStoragePureSnapshotSchedulePermissionResource[];
    readonly protectionGroup?: outputs.GetStoragePureSnapshotScheduleProtectionGroup;
    readonly registeredDevice?: outputs.GetStoragePureSnapshotScheduleRegisteredDevice;
    readonly results: outputs.GetStoragePureSnapshotScheduleResult[];
    readonly retentionTime?: string;
    readonly sharedScope?: string;
    readonly snapshotExpiryTime?: string;
    readonly snapshotTime?: string;
    readonly tags?: outputs.GetStoragePureSnapshotScheduleTag[];
    readonly versionContext?: outputs.GetStoragePureSnapshotScheduleVersionContext;
}
export function getStoragePureSnapshotScheduleOutput(args?: GetStoragePureSnapshotScheduleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStoragePureSnapshotScheduleResult> {
    return pulumi.output(args).apply((a: any) => getStoragePureSnapshotSchedule(a, opts))
}

/**
 * A collection of arguments for invoking getStoragePureSnapshotSchedule.
 */
export interface GetStoragePureSnapshotScheduleOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStoragePureSnapshotScheduleAncestorArgs>[]>;
    array?: pulumi.Input<inputs.GetStoragePureSnapshotScheduleArrayArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    dailyLimit?: pulumi.Input<number>;
    domainGroupMoid?: pulumi.Input<string>;
    frequency?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStoragePureSnapshotScheduleParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStoragePureSnapshotSchedulePermissionResourceArgs>[]>;
    protectionGroup?: pulumi.Input<inputs.GetStoragePureSnapshotScheduleProtectionGroupArgs>;
    registeredDevice?: pulumi.Input<inputs.GetStoragePureSnapshotScheduleRegisteredDeviceArgs>;
    retentionTime?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    snapshotExpiryTime?: pulumi.Input<string>;
    snapshotTime?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStoragePureSnapshotScheduleTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetStoragePureSnapshotScheduleVersionContextArgs>;
}
