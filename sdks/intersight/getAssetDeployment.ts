// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAssetDeployment(args?: GetAssetDeploymentArgs, opts?: pulumi.InvokeOptions): Promise<GetAssetDeploymentResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getAssetDeployment:getAssetDeployment", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "alarmInfo": args.alarmInfo,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "deploymentRefId": args.deploymentRefId,
        "devices": args.devices,
        "domainGroupMoid": args.domainGroupMoid,
        "endCustomer": args.endCustomer,
        "endDate": args.endDate,
        "id": args.id,
        "licenseType": args.licenseType,
        "mlbOfferType": args.mlbOfferType,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "sharedScope": args.sharedScope,
        "startDate": args.startDate,
        "subscription": args.subscription,
        "subscriptionRefId": args.subscriptionRefId,
        "tags": args.tags,
        "unitOfMeasures": args.unitOfMeasures,
        "versionContext": args.versionContext,
        "workloads": args.workloads,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAssetDeployment.
 */
export interface GetAssetDeploymentArgs {
    accountMoid?: string;
    additionalProperties?: string;
    alarmInfo?: inputs.GetAssetDeploymentAlarmInfo;
    ancestors?: inputs.GetAssetDeploymentAncestor[];
    classId?: string;
    createTime?: string;
    deploymentRefId?: string;
    devices?: inputs.GetAssetDeploymentDevice[];
    domainGroupMoid?: string;
    endCustomer?: inputs.GetAssetDeploymentEndCustomer;
    endDate?: string;
    id?: string;
    licenseType?: string;
    mlbOfferType?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetAssetDeploymentParent;
    permissionResources?: inputs.GetAssetDeploymentPermissionResource[];
    sharedScope?: string;
    startDate?: string;
    subscription?: inputs.GetAssetDeploymentSubscription;
    subscriptionRefId?: string;
    tags?: inputs.GetAssetDeploymentTag[];
    unitOfMeasures?: inputs.GetAssetDeploymentUnitOfMeasure[];
    versionContext?: inputs.GetAssetDeploymentVersionContext;
    workloads?: string[];
}

/**
 * A collection of values returned by getAssetDeployment.
 */
export interface GetAssetDeploymentResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly alarmInfo?: outputs.GetAssetDeploymentAlarmInfo;
    readonly ancestors?: outputs.GetAssetDeploymentAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly deploymentRefId?: string;
    readonly devices?: outputs.GetAssetDeploymentDevice[];
    readonly domainGroupMoid?: string;
    readonly endCustomer?: outputs.GetAssetDeploymentEndCustomer;
    readonly endDate?: string;
    readonly id: string;
    readonly licenseType?: string;
    readonly mlbOfferType?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetAssetDeploymentParent;
    readonly permissionResources?: outputs.GetAssetDeploymentPermissionResource[];
    readonly results: outputs.GetAssetDeploymentResult[];
    readonly sharedScope?: string;
    readonly startDate?: string;
    readonly subscription?: outputs.GetAssetDeploymentSubscription;
    readonly subscriptionRefId?: string;
    readonly tags?: outputs.GetAssetDeploymentTag[];
    readonly unitOfMeasures?: outputs.GetAssetDeploymentUnitOfMeasure[];
    readonly versionContext?: outputs.GetAssetDeploymentVersionContext;
    readonly workloads?: string[];
}
export function getAssetDeploymentOutput(args?: GetAssetDeploymentOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAssetDeploymentResult> {
    return pulumi.output(args).apply((a: any) => getAssetDeployment(a, opts))
}

/**
 * A collection of arguments for invoking getAssetDeployment.
 */
export interface GetAssetDeploymentOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    alarmInfo?: pulumi.Input<inputs.GetAssetDeploymentAlarmInfoArgs>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetAssetDeploymentAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deploymentRefId?: pulumi.Input<string>;
    devices?: pulumi.Input<pulumi.Input<inputs.GetAssetDeploymentDeviceArgs>[]>;
    domainGroupMoid?: pulumi.Input<string>;
    endCustomer?: pulumi.Input<inputs.GetAssetDeploymentEndCustomerArgs>;
    endDate?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    licenseType?: pulumi.Input<string>;
    mlbOfferType?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetAssetDeploymentParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetAssetDeploymentPermissionResourceArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    startDate?: pulumi.Input<string>;
    subscription?: pulumi.Input<inputs.GetAssetDeploymentSubscriptionArgs>;
    subscriptionRefId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetAssetDeploymentTagArgs>[]>;
    unitOfMeasures?: pulumi.Input<pulumi.Input<inputs.GetAssetDeploymentUnitOfMeasureArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetAssetDeploymentVersionContextArgs>;
    workloads?: pulumi.Input<pulumi.Input<string>[]>;
}
