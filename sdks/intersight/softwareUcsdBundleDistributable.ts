// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SoftwareUcsdBundleDistributable extends pulumi.CustomResource {
    /**
     * Get an existing SoftwareUcsdBundleDistributable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SoftwareUcsdBundleDistributableState, opts?: pulumi.CustomResourceOptions): SoftwareUcsdBundleDistributable {
        return new SoftwareUcsdBundleDistributable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'intersight:index/softwareUcsdBundleDistributable:SoftwareUcsdBundleDistributable';

    /**
     * Returns true if the given object is an instance of SoftwareUcsdBundleDistributable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SoftwareUcsdBundleDistributable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SoftwareUcsdBundleDistributable.__pulumiType;
    }

    /**
     * The Account ID for this managed object.
     */
    public readonly accountMoid!: pulumi.Output<string>;
    public readonly additionalProperties!: pulumi.Output<string | undefined>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly ancestors!: pulumi.Output<outputs.SoftwareUcsdBundleDistributableAncestor[]>;
    /**
     * The bundle type of the image, as published on cisco.com.
     */
    public readonly bundleType!: pulumi.Output<string>;
    /**
     * A reference to a softwarerepositoryCatalog resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    public readonly catalogs!: pulumi.Output<outputs.SoftwareUcsdBundleDistributableCatalog[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    public readonly classId!: pulumi.Output<string | undefined>;
    public readonly componentMetas!: pulumi.Output<outputs.SoftwareUcsdBundleDistributableComponentMeta[]>;
    /**
     * The time when this managed object was created.
     */
    public readonly createTime!: pulumi.Output<string>;
    /**
     * User provided description about the file. Cisco provided description for image inventoried from a Cisco repository.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * An array of relationships to firmwareDistributableMeta resources.
     */
    public readonly distributableMetas!: pulumi.Output<outputs.SoftwareUcsdBundleDistributableDistributableMeta[]>;
    /**
     * The DomainGroup ID for this managed object.
     */
    public readonly domainGroupMoid!: pulumi.Output<string>;
    /**
     * The number of times this file has been downloaded from the local repository. It is used by the repository monitoring
     * process to determine the files that are to be evicted from the cache.
     */
    public readonly downloadCount!: pulumi.Output<number>;
    /**
     * The name of the feature to which the uploaded file belongs. * `System` - This indicates system initiated file uploads. *
     * `OpenAPIImport` - This indicates an OpenAPI file upload. * `PartnerIntegrationImport` - This indicates a
     * Partner-Integration Appliance user file uploads.
     */
    public readonly featureSource!: pulumi.Output<string>;
    /**
     * The unique identifier for an image in a Cisco repository.
     */
    public readonly guid!: pulumi.Output<string>;
    /**
     * The type of image which the distributable falls into according to the component it can upgrade. For e.g.; Standalone
     * server, Intersight managed server, UCS Managed Fabric Interconnect. The field is used in private appliance mode, where
     * image does not have description populated from CCO.
     */
    public readonly imageType!: pulumi.Output<string | undefined>;
    /**
     * An array of relationships to softwareUcsdDistributable resources.
     */
    public readonly images!: pulumi.Output<outputs.SoftwareUcsdBundleDistributableImage[]>;
    /**
     * The action to be performed on the imported file. If 'PreCache' is set, the image will be cached in Appliance. Applicable
     * in Intersight appliance deployment. If 'Evict' is set, the cached file will be removed. Applicable in Intersight
     * appliance deployment. If 'GeneratePreSignedUploadUrl' is set, generates pre signed URL (s) for the file to be imported
     * into the repository. Applicable for local machine source. The URL (s) will be populated under LocalMachine file server.
     * If 'CompleteImportProcess' is set, the ImportState is marked as 'Imported'. Applicable for local machine source. If
     * 'Cancel' is set, the ImportState is marked as 'Failed'. Applicable for local machine source. * `None` - No action should
     * be taken on the imported file. * `GeneratePreSignedUploadUrl` - Generate pre signed URL of file for importing into the
     * repository. * `GeneratePreSignedDownloadUrl` - Generate pre signed URL of file in the repository to download. *
     * `CompleteImportProcess` - Mark that the import process of the file into the repository is complete. * `MarkImportFailed`
     * - Mark to indicate that the import process of the file into the repository failed. * `PreCache` - Cache the file into
     * the Intersight Appliance. * `Cancel` - The cancel import process for the file into the repository. * `Extract` - The
     * action to extract the file in the external repository. * `Evict` - Evict the cached file from the Intersight Appliance.
     */
    public readonly importAction!: pulumi.Output<string | undefined>;
    /**
     * The state of this file in the repository or Appliance. The importState is updated during the import operation and as
     * part of the repository monitoring process. * `ReadyForImport` - The image is ready to be imported into the repository. *
     * `Importing` - The image is being imported into the repository. * `Imported` - The image has been extracted and imported
     * into the repository. * `PendingExtraction` - Indicates that the image has been imported but not extracted in the
     * repository. * `Extracting` - Indicates that the image is being extracted into the repository. * `Extracted` - Indicates
     * that the image has been extracted into the repository. * `Failed` - The image import from an external source to the
     * repository has failed. * `MetaOnly` - The image is present in an external repository. * `ReadyForCache` - The image is
     * ready to be cached into the Intersight Appliance. * `Caching` - Indicates that the image is being cached into the
     * Intersight Appliance or endpoint cache. * `Cached` - Indicates that the image has been cached into the Intersight
     * Appliance or endpoint cache. * `CachingFailed` - Indicates that the image caching into the Intersight Appliance failed
     * or endpoint cache. * `Corrupted` - Indicates that the image in the local repository (or endpoint cache) has been
     * corrupted after it was cached. * `Evicted` - Indicates that the image has been evicted from the Intersight Appliance (or
     * endpoint cache) to reclaim storage space. * `Invalid` - Indicates that the corresponding distributable MO has been
     * removed from the backend. This can be due to unpublishing of an image.
     */
    public readonly importState!: pulumi.Output<string>;
    /**
     * The time at which this image or file was imported/cached into the repositry. if the 'ImportState' is 'Imported', the
     * time at which this image or file was imported. if the 'ImportState' is 'Cached', the time at which this image or file
     * was cached.
     */
    public readonly importedTime!: pulumi.Output<string>;
    /**
     * The time at which this file was last downloaded from the local repository. It is used by the repository monitoring
     * process to determine the files that are to be evicted from the cache.
     */
    public readonly lastAccessTime!: pulumi.Output<string>;
    /**
     * The MD5 ETag for a file that is stored in Intersight repository or in the appliance cache. Warning - MD5 is currently
     * broken and this will be migrated to SHA shortly.
     */
    public readonly md5eTag!: pulumi.Output<string | undefined>;
    /**
     * The md5sum checksum of the file. This information is available for all Cisco distributed images and files imported to
     * the local repository.
     */
    public readonly md5sum!: pulumi.Output<string | undefined>;
    /**
     * The mdfid of the image provided by cisco.com.
     */
    public readonly mdfid!: pulumi.Output<string | undefined>;
    /**
     * The time when this managed object was last modified.
     */
    public readonly modTime!: pulumi.Output<string>;
    /**
     * The endpoint model for which this firmware image is applicable.
     */
    public readonly model!: pulumi.Output<string | undefined>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    public readonly moid!: pulumi.Output<string>;
    /**
     * The name of the file. It is populated as part of the image import operation.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Location of the file in an external repository.
     */
    public readonly nrSources!: pulumi.Output<outputs.SoftwareUcsdBundleDistributableNrSource[]>;
    /**
     * Vendor provided version for the file.
     */
    public readonly nrVersion!: pulumi.Output<string | undefined>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    public readonly objectType!: pulumi.Output<string | undefined>;
    public readonly owners!: pulumi.Output<string[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    public readonly parents!: pulumi.Output<outputs.SoftwareUcsdBundleDistributableParent[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly permissionResources!: pulumi.Output<outputs.SoftwareUcsdBundleDistributablePermissionResource[]>;
    /**
     * The platform type of the image.
     */
    public readonly platformType!: pulumi.Output<string>;
    /**
     * The build which is recommended by Cisco.
     */
    public readonly recommendedBuild!: pulumi.Output<string | undefined>;
    /**
     * The date on which the file was released or distributed by its vendor.
     */
    public readonly releaseDate!: pulumi.Output<string>;
    /**
     * The url for the release notes of this image.
     */
    public readonly releaseNotesUrl!: pulumi.Output<string | undefined>;
    /**
     * A reference to a softwarerepositoryRelease resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    public readonly releases!: pulumi.Output<outputs.SoftwareUcsdBundleDistributableRelease[]>;
    /**
     * The sha512sum of the file. This information is available for all Cisco distributed images and files imported to the
     * local repository.
     */
    public readonly sha512sum!: pulumi.Output<string | undefined>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    public readonly sharedScope!: pulumi.Output<string>;
    /**
     * The size (in bytes) of the file. This information is available for all Cisco distributed images and files imported to
     * the local repository.
     */
    public readonly size!: pulumi.Output<number | undefined>;
    /**
     * The software advisory, if any, provided by the vendor for this file.
     */
    public readonly softwareAdvisoryUrl!: pulumi.Output<string | undefined>;
    /**
     * The software type id provided by cisco.com.
     */
    public readonly softwareTypeId!: pulumi.Output<string>;
    public readonly supportedModels!: pulumi.Output<string[]>;
    public readonly tags!: pulumi.Output<outputs.SoftwareUcsdBundleDistributableTag[]>;
    /**
     * The vendor or publisher of this file.
     */
    public readonly vendor!: pulumi.Output<string | undefined>;
    /**
     * The versioning info for this managed object.
     */
    public readonly versionContexts!: pulumi.Output<outputs.SoftwareUcsdBundleDistributableVersionContext[]>;

    /**
     * Create a SoftwareUcsdBundleDistributable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SoftwareUcsdBundleDistributableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SoftwareUcsdBundleDistributableArgs | SoftwareUcsdBundleDistributableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SoftwareUcsdBundleDistributableState | undefined;
            resourceInputs["accountMoid"] = state ? state.accountMoid : undefined;
            resourceInputs["additionalProperties"] = state ? state.additionalProperties : undefined;
            resourceInputs["ancestors"] = state ? state.ancestors : undefined;
            resourceInputs["bundleType"] = state ? state.bundleType : undefined;
            resourceInputs["catalogs"] = state ? state.catalogs : undefined;
            resourceInputs["classId"] = state ? state.classId : undefined;
            resourceInputs["componentMetas"] = state ? state.componentMetas : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["distributableMetas"] = state ? state.distributableMetas : undefined;
            resourceInputs["domainGroupMoid"] = state ? state.domainGroupMoid : undefined;
            resourceInputs["downloadCount"] = state ? state.downloadCount : undefined;
            resourceInputs["featureSource"] = state ? state.featureSource : undefined;
            resourceInputs["guid"] = state ? state.guid : undefined;
            resourceInputs["imageType"] = state ? state.imageType : undefined;
            resourceInputs["images"] = state ? state.images : undefined;
            resourceInputs["importAction"] = state ? state.importAction : undefined;
            resourceInputs["importState"] = state ? state.importState : undefined;
            resourceInputs["importedTime"] = state ? state.importedTime : undefined;
            resourceInputs["lastAccessTime"] = state ? state.lastAccessTime : undefined;
            resourceInputs["md5eTag"] = state ? state.md5eTag : undefined;
            resourceInputs["md5sum"] = state ? state.md5sum : undefined;
            resourceInputs["mdfid"] = state ? state.mdfid : undefined;
            resourceInputs["modTime"] = state ? state.modTime : undefined;
            resourceInputs["model"] = state ? state.model : undefined;
            resourceInputs["moid"] = state ? state.moid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nrSources"] = state ? state.nrSources : undefined;
            resourceInputs["nrVersion"] = state ? state.nrVersion : undefined;
            resourceInputs["objectType"] = state ? state.objectType : undefined;
            resourceInputs["owners"] = state ? state.owners : undefined;
            resourceInputs["parents"] = state ? state.parents : undefined;
            resourceInputs["permissionResources"] = state ? state.permissionResources : undefined;
            resourceInputs["platformType"] = state ? state.platformType : undefined;
            resourceInputs["recommendedBuild"] = state ? state.recommendedBuild : undefined;
            resourceInputs["releaseDate"] = state ? state.releaseDate : undefined;
            resourceInputs["releaseNotesUrl"] = state ? state.releaseNotesUrl : undefined;
            resourceInputs["releases"] = state ? state.releases : undefined;
            resourceInputs["sha512sum"] = state ? state.sha512sum : undefined;
            resourceInputs["sharedScope"] = state ? state.sharedScope : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["softwareAdvisoryUrl"] = state ? state.softwareAdvisoryUrl : undefined;
            resourceInputs["softwareTypeId"] = state ? state.softwareTypeId : undefined;
            resourceInputs["supportedModels"] = state ? state.supportedModels : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vendor"] = state ? state.vendor : undefined;
            resourceInputs["versionContexts"] = state ? state.versionContexts : undefined;
        } else {
            const args = argsOrState as SoftwareUcsdBundleDistributableArgs | undefined;
            resourceInputs["accountMoid"] = args ? args.accountMoid : undefined;
            resourceInputs["additionalProperties"] = args ? args.additionalProperties : undefined;
            resourceInputs["ancestors"] = args ? args.ancestors : undefined;
            resourceInputs["bundleType"] = args ? args.bundleType : undefined;
            resourceInputs["catalogs"] = args ? args.catalogs : undefined;
            resourceInputs["classId"] = args ? args.classId : undefined;
            resourceInputs["componentMetas"] = args ? args.componentMetas : undefined;
            resourceInputs["createTime"] = args ? args.createTime : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["distributableMetas"] = args ? args.distributableMetas : undefined;
            resourceInputs["domainGroupMoid"] = args ? args.domainGroupMoid : undefined;
            resourceInputs["downloadCount"] = args ? args.downloadCount : undefined;
            resourceInputs["featureSource"] = args ? args.featureSource : undefined;
            resourceInputs["guid"] = args ? args.guid : undefined;
            resourceInputs["imageType"] = args ? args.imageType : undefined;
            resourceInputs["images"] = args ? args.images : undefined;
            resourceInputs["importAction"] = args ? args.importAction : undefined;
            resourceInputs["importState"] = args ? args.importState : undefined;
            resourceInputs["importedTime"] = args ? args.importedTime : undefined;
            resourceInputs["lastAccessTime"] = args ? args.lastAccessTime : undefined;
            resourceInputs["md5eTag"] = args ? args.md5eTag : undefined;
            resourceInputs["md5sum"] = args ? args.md5sum : undefined;
            resourceInputs["mdfid"] = args ? args.mdfid : undefined;
            resourceInputs["modTime"] = args ? args.modTime : undefined;
            resourceInputs["model"] = args ? args.model : undefined;
            resourceInputs["moid"] = args ? args.moid : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nrSources"] = args ? args.nrSources : undefined;
            resourceInputs["nrVersion"] = args ? args.nrVersion : undefined;
            resourceInputs["objectType"] = args ? args.objectType : undefined;
            resourceInputs["owners"] = args ? args.owners : undefined;
            resourceInputs["parents"] = args ? args.parents : undefined;
            resourceInputs["permissionResources"] = args ? args.permissionResources : undefined;
            resourceInputs["platformType"] = args ? args.platformType : undefined;
            resourceInputs["recommendedBuild"] = args ? args.recommendedBuild : undefined;
            resourceInputs["releaseDate"] = args ? args.releaseDate : undefined;
            resourceInputs["releaseNotesUrl"] = args ? args.releaseNotesUrl : undefined;
            resourceInputs["releases"] = args ? args.releases : undefined;
            resourceInputs["sha512sum"] = args ? args.sha512sum : undefined;
            resourceInputs["sharedScope"] = args ? args.sharedScope : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["softwareAdvisoryUrl"] = args ? args.softwareAdvisoryUrl : undefined;
            resourceInputs["softwareTypeId"] = args ? args.softwareTypeId : undefined;
            resourceInputs["supportedModels"] = args ? args.supportedModels : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vendor"] = args ? args.vendor : undefined;
            resourceInputs["versionContexts"] = args ? args.versionContexts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SoftwareUcsdBundleDistributable.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SoftwareUcsdBundleDistributable resources.
 */
export interface SoftwareUcsdBundleDistributableState {
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.SoftwareUcsdBundleDistributableAncestor>[]>;
    /**
     * The bundle type of the image, as published on cisco.com.
     */
    bundleType?: pulumi.Input<string>;
    /**
     * A reference to a softwarerepositoryCatalog resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    catalogs?: pulumi.Input<pulumi.Input<inputs.SoftwareUcsdBundleDistributableCatalog>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    componentMetas?: pulumi.Input<pulumi.Input<inputs.SoftwareUcsdBundleDistributableComponentMeta>[]>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * User provided description about the file. Cisco provided description for image inventoried from a Cisco repository.
     */
    description?: pulumi.Input<string>;
    /**
     * An array of relationships to firmwareDistributableMeta resources.
     */
    distributableMetas?: pulumi.Input<pulumi.Input<inputs.SoftwareUcsdBundleDistributableDistributableMeta>[]>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    /**
     * The number of times this file has been downloaded from the local repository. It is used by the repository monitoring
     * process to determine the files that are to be evicted from the cache.
     */
    downloadCount?: pulumi.Input<number>;
    /**
     * The name of the feature to which the uploaded file belongs. * `System` - This indicates system initiated file uploads. *
     * `OpenAPIImport` - This indicates an OpenAPI file upload. * `PartnerIntegrationImport` - This indicates a
     * Partner-Integration Appliance user file uploads.
     */
    featureSource?: pulumi.Input<string>;
    /**
     * The unique identifier for an image in a Cisco repository.
     */
    guid?: pulumi.Input<string>;
    /**
     * The type of image which the distributable falls into according to the component it can upgrade. For e.g.; Standalone
     * server, Intersight managed server, UCS Managed Fabric Interconnect. The field is used in private appliance mode, where
     * image does not have description populated from CCO.
     */
    imageType?: pulumi.Input<string>;
    /**
     * An array of relationships to softwareUcsdDistributable resources.
     */
    images?: pulumi.Input<pulumi.Input<inputs.SoftwareUcsdBundleDistributableImage>[]>;
    /**
     * The action to be performed on the imported file. If 'PreCache' is set, the image will be cached in Appliance. Applicable
     * in Intersight appliance deployment. If 'Evict' is set, the cached file will be removed. Applicable in Intersight
     * appliance deployment. If 'GeneratePreSignedUploadUrl' is set, generates pre signed URL (s) for the file to be imported
     * into the repository. Applicable for local machine source. The URL (s) will be populated under LocalMachine file server.
     * If 'CompleteImportProcess' is set, the ImportState is marked as 'Imported'. Applicable for local machine source. If
     * 'Cancel' is set, the ImportState is marked as 'Failed'. Applicable for local machine source. * `None` - No action should
     * be taken on the imported file. * `GeneratePreSignedUploadUrl` - Generate pre signed URL of file for importing into the
     * repository. * `GeneratePreSignedDownloadUrl` - Generate pre signed URL of file in the repository to download. *
     * `CompleteImportProcess` - Mark that the import process of the file into the repository is complete. * `MarkImportFailed`
     * - Mark to indicate that the import process of the file into the repository failed. * `PreCache` - Cache the file into
     * the Intersight Appliance. * `Cancel` - The cancel import process for the file into the repository. * `Extract` - The
     * action to extract the file in the external repository. * `Evict` - Evict the cached file from the Intersight Appliance.
     */
    importAction?: pulumi.Input<string>;
    /**
     * The state of this file in the repository or Appliance. The importState is updated during the import operation and as
     * part of the repository monitoring process. * `ReadyForImport` - The image is ready to be imported into the repository. *
     * `Importing` - The image is being imported into the repository. * `Imported` - The image has been extracted and imported
     * into the repository. * `PendingExtraction` - Indicates that the image has been imported but not extracted in the
     * repository. * `Extracting` - Indicates that the image is being extracted into the repository. * `Extracted` - Indicates
     * that the image has been extracted into the repository. * `Failed` - The image import from an external source to the
     * repository has failed. * `MetaOnly` - The image is present in an external repository. * `ReadyForCache` - The image is
     * ready to be cached into the Intersight Appliance. * `Caching` - Indicates that the image is being cached into the
     * Intersight Appliance or endpoint cache. * `Cached` - Indicates that the image has been cached into the Intersight
     * Appliance or endpoint cache. * `CachingFailed` - Indicates that the image caching into the Intersight Appliance failed
     * or endpoint cache. * `Corrupted` - Indicates that the image in the local repository (or endpoint cache) has been
     * corrupted after it was cached. * `Evicted` - Indicates that the image has been evicted from the Intersight Appliance (or
     * endpoint cache) to reclaim storage space. * `Invalid` - Indicates that the corresponding distributable MO has been
     * removed from the backend. This can be due to unpublishing of an image.
     */
    importState?: pulumi.Input<string>;
    /**
     * The time at which this image or file was imported/cached into the repositry. if the 'ImportState' is 'Imported', the
     * time at which this image or file was imported. if the 'ImportState' is 'Cached', the time at which this image or file
     * was cached.
     */
    importedTime?: pulumi.Input<string>;
    /**
     * The time at which this file was last downloaded from the local repository. It is used by the repository monitoring
     * process to determine the files that are to be evicted from the cache.
     */
    lastAccessTime?: pulumi.Input<string>;
    /**
     * The MD5 ETag for a file that is stored in Intersight repository or in the appliance cache. Warning - MD5 is currently
     * broken and this will be migrated to SHA shortly.
     */
    md5eTag?: pulumi.Input<string>;
    /**
     * The md5sum checksum of the file. This information is available for all Cisco distributed images and files imported to
     * the local repository.
     */
    md5sum?: pulumi.Input<string>;
    /**
     * The mdfid of the image provided by cisco.com.
     */
    mdfid?: pulumi.Input<string>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * The endpoint model for which this firmware image is applicable.
     */
    model?: pulumi.Input<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * The name of the file. It is populated as part of the image import operation.
     */
    name?: pulumi.Input<string>;
    /**
     * Location of the file in an external repository.
     */
    nrSources?: pulumi.Input<pulumi.Input<inputs.SoftwareUcsdBundleDistributableNrSource>[]>;
    /**
     * Vendor provided version for the file.
     */
    nrVersion?: pulumi.Input<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.SoftwareUcsdBundleDistributableParent>[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.SoftwareUcsdBundleDistributablePermissionResource>[]>;
    /**
     * The platform type of the image.
     */
    platformType?: pulumi.Input<string>;
    /**
     * The build which is recommended by Cisco.
     */
    recommendedBuild?: pulumi.Input<string>;
    /**
     * The date on which the file was released or distributed by its vendor.
     */
    releaseDate?: pulumi.Input<string>;
    /**
     * The url for the release notes of this image.
     */
    releaseNotesUrl?: pulumi.Input<string>;
    /**
     * A reference to a softwarerepositoryRelease resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    releases?: pulumi.Input<pulumi.Input<inputs.SoftwareUcsdBundleDistributableRelease>[]>;
    /**
     * The sha512sum of the file. This information is available for all Cisco distributed images and files imported to the
     * local repository.
     */
    sha512sum?: pulumi.Input<string>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    /**
     * The size (in bytes) of the file. This information is available for all Cisco distributed images and files imported to
     * the local repository.
     */
    size?: pulumi.Input<number>;
    /**
     * The software advisory, if any, provided by the vendor for this file.
     */
    softwareAdvisoryUrl?: pulumi.Input<string>;
    /**
     * The software type id provided by cisco.com.
     */
    softwareTypeId?: pulumi.Input<string>;
    supportedModels?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.SoftwareUcsdBundleDistributableTag>[]>;
    /**
     * The vendor or publisher of this file.
     */
    vendor?: pulumi.Input<string>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.SoftwareUcsdBundleDistributableVersionContext>[]>;
}

/**
 * The set of arguments for constructing a SoftwareUcsdBundleDistributable resource.
 */
export interface SoftwareUcsdBundleDistributableArgs {
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.SoftwareUcsdBundleDistributableAncestor>[]>;
    /**
     * The bundle type of the image, as published on cisco.com.
     */
    bundleType?: pulumi.Input<string>;
    /**
     * A reference to a softwarerepositoryCatalog resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    catalogs?: pulumi.Input<pulumi.Input<inputs.SoftwareUcsdBundleDistributableCatalog>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    componentMetas?: pulumi.Input<pulumi.Input<inputs.SoftwareUcsdBundleDistributableComponentMeta>[]>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * User provided description about the file. Cisco provided description for image inventoried from a Cisco repository.
     */
    description?: pulumi.Input<string>;
    /**
     * An array of relationships to firmwareDistributableMeta resources.
     */
    distributableMetas?: pulumi.Input<pulumi.Input<inputs.SoftwareUcsdBundleDistributableDistributableMeta>[]>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    /**
     * The number of times this file has been downloaded from the local repository. It is used by the repository monitoring
     * process to determine the files that are to be evicted from the cache.
     */
    downloadCount?: pulumi.Input<number>;
    /**
     * The name of the feature to which the uploaded file belongs. * `System` - This indicates system initiated file uploads. *
     * `OpenAPIImport` - This indicates an OpenAPI file upload. * `PartnerIntegrationImport` - This indicates a
     * Partner-Integration Appliance user file uploads.
     */
    featureSource?: pulumi.Input<string>;
    /**
     * The unique identifier for an image in a Cisco repository.
     */
    guid?: pulumi.Input<string>;
    /**
     * The type of image which the distributable falls into according to the component it can upgrade. For e.g.; Standalone
     * server, Intersight managed server, UCS Managed Fabric Interconnect. The field is used in private appliance mode, where
     * image does not have description populated from CCO.
     */
    imageType?: pulumi.Input<string>;
    /**
     * An array of relationships to softwareUcsdDistributable resources.
     */
    images?: pulumi.Input<pulumi.Input<inputs.SoftwareUcsdBundleDistributableImage>[]>;
    /**
     * The action to be performed on the imported file. If 'PreCache' is set, the image will be cached in Appliance. Applicable
     * in Intersight appliance deployment. If 'Evict' is set, the cached file will be removed. Applicable in Intersight
     * appliance deployment. If 'GeneratePreSignedUploadUrl' is set, generates pre signed URL (s) for the file to be imported
     * into the repository. Applicable for local machine source. The URL (s) will be populated under LocalMachine file server.
     * If 'CompleteImportProcess' is set, the ImportState is marked as 'Imported'. Applicable for local machine source. If
     * 'Cancel' is set, the ImportState is marked as 'Failed'. Applicable for local machine source. * `None` - No action should
     * be taken on the imported file. * `GeneratePreSignedUploadUrl` - Generate pre signed URL of file for importing into the
     * repository. * `GeneratePreSignedDownloadUrl` - Generate pre signed URL of file in the repository to download. *
     * `CompleteImportProcess` - Mark that the import process of the file into the repository is complete. * `MarkImportFailed`
     * - Mark to indicate that the import process of the file into the repository failed. * `PreCache` - Cache the file into
     * the Intersight Appliance. * `Cancel` - The cancel import process for the file into the repository. * `Extract` - The
     * action to extract the file in the external repository. * `Evict` - Evict the cached file from the Intersight Appliance.
     */
    importAction?: pulumi.Input<string>;
    /**
     * The state of this file in the repository or Appliance. The importState is updated during the import operation and as
     * part of the repository monitoring process. * `ReadyForImport` - The image is ready to be imported into the repository. *
     * `Importing` - The image is being imported into the repository. * `Imported` - The image has been extracted and imported
     * into the repository. * `PendingExtraction` - Indicates that the image has been imported but not extracted in the
     * repository. * `Extracting` - Indicates that the image is being extracted into the repository. * `Extracted` - Indicates
     * that the image has been extracted into the repository. * `Failed` - The image import from an external source to the
     * repository has failed. * `MetaOnly` - The image is present in an external repository. * `ReadyForCache` - The image is
     * ready to be cached into the Intersight Appliance. * `Caching` - Indicates that the image is being cached into the
     * Intersight Appliance or endpoint cache. * `Cached` - Indicates that the image has been cached into the Intersight
     * Appliance or endpoint cache. * `CachingFailed` - Indicates that the image caching into the Intersight Appliance failed
     * or endpoint cache. * `Corrupted` - Indicates that the image in the local repository (or endpoint cache) has been
     * corrupted after it was cached. * `Evicted` - Indicates that the image has been evicted from the Intersight Appliance (or
     * endpoint cache) to reclaim storage space. * `Invalid` - Indicates that the corresponding distributable MO has been
     * removed from the backend. This can be due to unpublishing of an image.
     */
    importState?: pulumi.Input<string>;
    /**
     * The time at which this image or file was imported/cached into the repositry. if the 'ImportState' is 'Imported', the
     * time at which this image or file was imported. if the 'ImportState' is 'Cached', the time at which this image or file
     * was cached.
     */
    importedTime?: pulumi.Input<string>;
    /**
     * The time at which this file was last downloaded from the local repository. It is used by the repository monitoring
     * process to determine the files that are to be evicted from the cache.
     */
    lastAccessTime?: pulumi.Input<string>;
    /**
     * The MD5 ETag for a file that is stored in Intersight repository or in the appliance cache. Warning - MD5 is currently
     * broken and this will be migrated to SHA shortly.
     */
    md5eTag?: pulumi.Input<string>;
    /**
     * The md5sum checksum of the file. This information is available for all Cisco distributed images and files imported to
     * the local repository.
     */
    md5sum?: pulumi.Input<string>;
    /**
     * The mdfid of the image provided by cisco.com.
     */
    mdfid?: pulumi.Input<string>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * The endpoint model for which this firmware image is applicable.
     */
    model?: pulumi.Input<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * The name of the file. It is populated as part of the image import operation.
     */
    name?: pulumi.Input<string>;
    /**
     * Location of the file in an external repository.
     */
    nrSources?: pulumi.Input<pulumi.Input<inputs.SoftwareUcsdBundleDistributableNrSource>[]>;
    /**
     * Vendor provided version for the file.
     */
    nrVersion?: pulumi.Input<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.SoftwareUcsdBundleDistributableParent>[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.SoftwareUcsdBundleDistributablePermissionResource>[]>;
    /**
     * The platform type of the image.
     */
    platformType?: pulumi.Input<string>;
    /**
     * The build which is recommended by Cisco.
     */
    recommendedBuild?: pulumi.Input<string>;
    /**
     * The date on which the file was released or distributed by its vendor.
     */
    releaseDate?: pulumi.Input<string>;
    /**
     * The url for the release notes of this image.
     */
    releaseNotesUrl?: pulumi.Input<string>;
    /**
     * A reference to a softwarerepositoryRelease resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    releases?: pulumi.Input<pulumi.Input<inputs.SoftwareUcsdBundleDistributableRelease>[]>;
    /**
     * The sha512sum of the file. This information is available for all Cisco distributed images and files imported to the
     * local repository.
     */
    sha512sum?: pulumi.Input<string>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    /**
     * The size (in bytes) of the file. This information is available for all Cisco distributed images and files imported to
     * the local repository.
     */
    size?: pulumi.Input<number>;
    /**
     * The software advisory, if any, provided by the vendor for this file.
     */
    softwareAdvisoryUrl?: pulumi.Input<string>;
    /**
     * The software type id provided by cisco.com.
     */
    softwareTypeId?: pulumi.Input<string>;
    supportedModels?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.SoftwareUcsdBundleDistributableTag>[]>;
    /**
     * The vendor or publisher of this file.
     */
    vendor?: pulumi.Input<string>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.SoftwareUcsdBundleDistributableVersionContext>[]>;
}
