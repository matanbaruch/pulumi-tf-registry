// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getPortSubGroup(args?: GetPortSubGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetPortSubGroupResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getPortSubGroup:getPortSubGroup", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "aggregatePortId": args.aggregatePortId,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "equipmentIoCardBase": args.equipmentIoCardBase,
        "etherHostPorts": args.etherHostPorts,
        "ethernetPorts": args.ethernetPorts,
        "fcPorts": args.fcPorts,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "portGroup": args.portGroup,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "sharedScope": args.sharedScope,
        "slotId": args.slotId,
        "tags": args.tags,
        "transport": args.transport,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPortSubGroup.
 */
export interface GetPortSubGroupArgs {
    accountMoid?: string;
    additionalProperties?: string;
    aggregatePortId?: number;
    ancestors?: inputs.GetPortSubGroupAncestor[];
    classId?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    equipmentIoCardBase?: inputs.GetPortSubGroupEquipmentIoCardBase;
    etherHostPorts?: inputs.GetPortSubGroupEtherHostPort[];
    ethernetPorts?: inputs.GetPortSubGroupEthernetPort[];
    fcPorts?: inputs.GetPortSubGroupFcPort[];
    id?: string;
    inventoryDeviceInfo?: inputs.GetPortSubGroupInventoryDeviceInfo;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetPortSubGroupParent;
    permissionResources?: inputs.GetPortSubGroupPermissionResource[];
    portGroup?: inputs.GetPortSubGroupPortGroup;
    registeredDevice?: inputs.GetPortSubGroupRegisteredDevice;
    rn?: string;
    sharedScope?: string;
    slotId?: number;
    tags?: inputs.GetPortSubGroupTag[];
    transport?: string;
    versionContext?: inputs.GetPortSubGroupVersionContext;
}

/**
 * A collection of values returned by getPortSubGroup.
 */
export interface GetPortSubGroupResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly aggregatePortId?: number;
    readonly ancestors?: outputs.GetPortSubGroupAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly equipmentIoCardBase?: outputs.GetPortSubGroupEquipmentIoCardBase;
    readonly etherHostPorts?: outputs.GetPortSubGroupEtherHostPort[];
    readonly ethernetPorts?: outputs.GetPortSubGroupEthernetPort[];
    readonly fcPorts?: outputs.GetPortSubGroupFcPort[];
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetPortSubGroupInventoryDeviceInfo;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetPortSubGroupParent;
    readonly permissionResources?: outputs.GetPortSubGroupPermissionResource[];
    readonly portGroup?: outputs.GetPortSubGroupPortGroup;
    readonly registeredDevice?: outputs.GetPortSubGroupRegisteredDevice;
    readonly results: outputs.GetPortSubGroupResult[];
    readonly rn?: string;
    readonly sharedScope?: string;
    readonly slotId?: number;
    readonly tags?: outputs.GetPortSubGroupTag[];
    readonly transport?: string;
    readonly versionContext?: outputs.GetPortSubGroupVersionContext;
}
export function getPortSubGroupOutput(args?: GetPortSubGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPortSubGroupResult> {
    return pulumi.output(args).apply((a: any) => getPortSubGroup(a, opts))
}

/**
 * A collection of arguments for invoking getPortSubGroup.
 */
export interface GetPortSubGroupOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    aggregatePortId?: pulumi.Input<number>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetPortSubGroupAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    equipmentIoCardBase?: pulumi.Input<inputs.GetPortSubGroupEquipmentIoCardBaseArgs>;
    etherHostPorts?: pulumi.Input<pulumi.Input<inputs.GetPortSubGroupEtherHostPortArgs>[]>;
    ethernetPorts?: pulumi.Input<pulumi.Input<inputs.GetPortSubGroupEthernetPortArgs>[]>;
    fcPorts?: pulumi.Input<pulumi.Input<inputs.GetPortSubGroupFcPortArgs>[]>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetPortSubGroupInventoryDeviceInfoArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetPortSubGroupParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetPortSubGroupPermissionResourceArgs>[]>;
    portGroup?: pulumi.Input<inputs.GetPortSubGroupPortGroupArgs>;
    registeredDevice?: pulumi.Input<inputs.GetPortSubGroupRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    slotId?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetPortSubGroupTagArgs>[]>;
    transport?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetPortSubGroupVersionContextArgs>;
}
