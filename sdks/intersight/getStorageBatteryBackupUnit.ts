// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageBatteryBackupUnit(args?: GetStorageBatteryBackupUnitArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageBatteryBackupUnitResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageBatteryBackupUnit:getStorageBatteryBackupUnit", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "capacitanceInPercent": args.capacitanceInPercent,
        "chargingState": args.chargingState,
        "classId": args.classId,
        "createTime": args.createTime,
        "currentInAmps": args.currentInAmps,
        "designCapacityInJoules": args.designCapacityInJoules,
        "designVoltageInVolts": args.designVoltageInVolts,
        "deviceMoId": args.deviceMoId,
        "deviceName": args.deviceName,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "isBatteryPresent": args.isBatteryPresent,
        "isCapacitor": args.isCapacitor,
        "isLearnCycleRequested": args.isLearnCycleRequested,
        "isLearnCycleTransparent": args.isLearnCycleTransparent,
        "isTemperatureHigh": args.isTemperatureHigh,
        "isUpgraded": args.isUpgraded,
        "isVoltageLow": args.isVoltageLow,
        "learnCycleProgressEndTimeStamp": args.learnCycleProgressEndTimeStamp,
        "learnCycleProgressStartTimeStamp": args.learnCycleProgressStartTimeStamp,
        "learnCycleProgressStatus": args.learnCycleProgressStatus,
        "learnMode": args.learnMode,
        "manufacturingDate": args.manufacturingDate,
        "modTime": args.modTime,
        "model": args.model,
        "moduleVersion": args.moduleVersion,
        "moid": args.moid,
        "nextLearnCycleTimeStamp": args.nextLearnCycleTimeStamp,
        "objectType": args.objectType,
        "owners": args.owners,
        "packEnergyInJoules": args.packEnergyInJoules,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "registeredDevice": args.registeredDevice,
        "remainingPoolSpaceInPercent": args.remainingPoolSpaceInPercent,
        "revision": args.revision,
        "rn": args.rn,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "status": args.status,
        "storageController": args.storageController,
        "tags": args.tags,
        "temperatureInCel": args.temperatureInCel,
        "type": args.type,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
        "voltageInVolts": args.voltageInVolts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageBatteryBackupUnit.
 */
export interface GetStorageBatteryBackupUnitArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageBatteryBackupUnitAncestor[];
    capacitanceInPercent?: number;
    chargingState?: string;
    classId?: string;
    createTime?: string;
    currentInAmps?: number;
    designCapacityInJoules?: string;
    designVoltageInVolts?: number;
    deviceMoId?: string;
    deviceName?: string;
    dn?: string;
    domainGroupMoid?: string;
    id?: string;
    inventoryDeviceInfo?: inputs.GetStorageBatteryBackupUnitInventoryDeviceInfo;
    isBatteryPresent?: boolean;
    isCapacitor?: boolean;
    isLearnCycleRequested?: boolean;
    isLearnCycleTransparent?: boolean;
    isTemperatureHigh?: boolean;
    isUpgraded?: boolean;
    isVoltageLow?: boolean;
    learnCycleProgressEndTimeStamp?: string;
    learnCycleProgressStartTimeStamp?: string;
    learnCycleProgressStatus?: string;
    learnMode?: string;
    manufacturingDate?: string;
    modTime?: string;
    model?: string;
    moduleVersion?: string;
    moid?: string;
    nextLearnCycleTimeStamp?: string;
    objectType?: string;
    owners?: string[];
    packEnergyInJoules?: string;
    parent?: inputs.GetStorageBatteryBackupUnitParent;
    permissionResources?: inputs.GetStorageBatteryBackupUnitPermissionResource[];
    presence?: string;
    previousFru?: inputs.GetStorageBatteryBackupUnitPreviousFru;
    registeredDevice?: inputs.GetStorageBatteryBackupUnitRegisteredDevice;
    remainingPoolSpaceInPercent?: number;
    revision?: string;
    rn?: string;
    serial?: string;
    sharedScope?: string;
    status?: string;
    storageController?: inputs.GetStorageBatteryBackupUnitStorageController;
    tags?: inputs.GetStorageBatteryBackupUnitTag[];
    temperatureInCel?: number;
    type?: string;
    vendor?: string;
    versionContext?: inputs.GetStorageBatteryBackupUnitVersionContext;
    voltageInVolts?: string;
}

/**
 * A collection of values returned by getStorageBatteryBackupUnit.
 */
export interface GetStorageBatteryBackupUnitResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageBatteryBackupUnitAncestor[];
    readonly capacitanceInPercent?: number;
    readonly chargingState?: string;
    readonly classId?: string;
    readonly createTime?: string;
    readonly currentInAmps?: number;
    readonly designCapacityInJoules?: string;
    readonly designVoltageInVolts?: number;
    readonly deviceMoId?: string;
    readonly deviceName?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetStorageBatteryBackupUnitInventoryDeviceInfo;
    readonly isBatteryPresent?: boolean;
    readonly isCapacitor?: boolean;
    readonly isLearnCycleRequested?: boolean;
    readonly isLearnCycleTransparent?: boolean;
    readonly isTemperatureHigh?: boolean;
    readonly isUpgraded?: boolean;
    readonly isVoltageLow?: boolean;
    readonly learnCycleProgressEndTimeStamp?: string;
    readonly learnCycleProgressStartTimeStamp?: string;
    readonly learnCycleProgressStatus?: string;
    readonly learnMode?: string;
    readonly manufacturingDate?: string;
    readonly modTime?: string;
    readonly model?: string;
    readonly moduleVersion?: string;
    readonly moid?: string;
    readonly nextLearnCycleTimeStamp?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly packEnergyInJoules?: string;
    readonly parent?: outputs.GetStorageBatteryBackupUnitParent;
    readonly permissionResources?: outputs.GetStorageBatteryBackupUnitPermissionResource[];
    readonly presence?: string;
    readonly previousFru?: outputs.GetStorageBatteryBackupUnitPreviousFru;
    readonly registeredDevice?: outputs.GetStorageBatteryBackupUnitRegisteredDevice;
    readonly remainingPoolSpaceInPercent?: number;
    readonly results: outputs.GetStorageBatteryBackupUnitResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly status?: string;
    readonly storageController?: outputs.GetStorageBatteryBackupUnitStorageController;
    readonly tags?: outputs.GetStorageBatteryBackupUnitTag[];
    readonly temperatureInCel?: number;
    readonly type?: string;
    readonly vendor?: string;
    readonly versionContext?: outputs.GetStorageBatteryBackupUnitVersionContext;
    readonly voltageInVolts?: string;
}
export function getStorageBatteryBackupUnitOutput(args?: GetStorageBatteryBackupUnitOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageBatteryBackupUnitResult> {
    return pulumi.output(args).apply((a: any) => getStorageBatteryBackupUnit(a, opts))
}

/**
 * A collection of arguments for invoking getStorageBatteryBackupUnit.
 */
export interface GetStorageBatteryBackupUnitOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageBatteryBackupUnitAncestorArgs>[]>;
    capacitanceInPercent?: pulumi.Input<number>;
    chargingState?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    currentInAmps?: pulumi.Input<number>;
    designCapacityInJoules?: pulumi.Input<string>;
    designVoltageInVolts?: pulumi.Input<number>;
    deviceMoId?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetStorageBatteryBackupUnitInventoryDeviceInfoArgs>;
    isBatteryPresent?: pulumi.Input<boolean>;
    isCapacitor?: pulumi.Input<boolean>;
    isLearnCycleRequested?: pulumi.Input<boolean>;
    isLearnCycleTransparent?: pulumi.Input<boolean>;
    isTemperatureHigh?: pulumi.Input<boolean>;
    isUpgraded?: pulumi.Input<boolean>;
    isVoltageLow?: pulumi.Input<boolean>;
    learnCycleProgressEndTimeStamp?: pulumi.Input<string>;
    learnCycleProgressStartTimeStamp?: pulumi.Input<string>;
    learnCycleProgressStatus?: pulumi.Input<string>;
    learnMode?: pulumi.Input<string>;
    manufacturingDate?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moduleVersion?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    nextLearnCycleTimeStamp?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    packEnergyInJoules?: pulumi.Input<string>;
    parent?: pulumi.Input<inputs.GetStorageBatteryBackupUnitParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageBatteryBackupUnitPermissionResourceArgs>[]>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetStorageBatteryBackupUnitPreviousFruArgs>;
    registeredDevice?: pulumi.Input<inputs.GetStorageBatteryBackupUnitRegisteredDeviceArgs>;
    remainingPoolSpaceInPercent?: pulumi.Input<number>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    storageController?: pulumi.Input<inputs.GetStorageBatteryBackupUnitStorageControllerArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageBatteryBackupUnitTagArgs>[]>;
    temperatureInCel?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetStorageBatteryBackupUnitVersionContextArgs>;
    voltageInVolts?: pulumi.Input<string>;
}
