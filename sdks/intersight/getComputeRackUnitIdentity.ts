// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getComputeRackUnitIdentity(args?: GetComputeRackUnitIdentityArgs, opts?: pulumi.InvokeOptions): Promise<GetComputeRackUnitIdentityResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getComputeRackUnitIdentity:getComputeRackUnitIdentity", {
        "accountMoid": args.accountMoid,
        "adapterSerial": args.adapterSerial,
        "additionalProperties": args.additionalProperties,
        "adminAction": args.adminAction,
        "adminActionState": args.adminActionState,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "customPermissionResources": args.customPermissionResources,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "identifier": args.identifier,
        "lastDiscoveryTriggered": args.lastDiscoveryTriggered,
        "lifecycleModTime": args.lifecycleModTime,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "name": args.name,
        "nrLifecycle": args.nrLifecycle,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "physicalDeviceRegistration": args.physicalDeviceRegistration,
        "registeredDevice": args.registeredDevice,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getComputeRackUnitIdentity.
 */
export interface GetComputeRackUnitIdentityArgs {
    accountMoid?: string;
    adapterSerial?: string;
    additionalProperties?: string;
    adminAction?: string;
    adminActionState?: string;
    ancestors?: inputs.GetComputeRackUnitIdentityAncestor[];
    classId?: string;
    createTime?: string;
    customPermissionResources?: inputs.GetComputeRackUnitIdentityCustomPermissionResource[];
    domainGroupMoid?: string;
    id?: string;
    identifier?: number;
    lastDiscoveryTriggered?: string;
    lifecycleModTime?: string;
    modTime?: string;
    model?: string;
    moid?: string;
    name?: string;
    nrLifecycle?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetComputeRackUnitIdentityParent;
    permissionResources?: inputs.GetComputeRackUnitIdentityPermissionResource[];
    physicalDeviceRegistration?: inputs.GetComputeRackUnitIdentityPhysicalDeviceRegistration;
    registeredDevice?: inputs.GetComputeRackUnitIdentityRegisteredDevice;
    serial?: string;
    sharedScope?: string;
    tags?: inputs.GetComputeRackUnitIdentityTag[];
    vendor?: string;
    versionContext?: inputs.GetComputeRackUnitIdentityVersionContext;
}

/**
 * A collection of values returned by getComputeRackUnitIdentity.
 */
export interface GetComputeRackUnitIdentityResult {
    readonly accountMoid?: string;
    readonly adapterSerial?: string;
    readonly additionalProperties?: string;
    readonly adminAction?: string;
    readonly adminActionState?: string;
    readonly ancestors?: outputs.GetComputeRackUnitIdentityAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly customPermissionResources?: outputs.GetComputeRackUnitIdentityCustomPermissionResource[];
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly identifier?: number;
    readonly lastDiscoveryTriggered?: string;
    readonly lifecycleModTime?: string;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nrLifecycle?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetComputeRackUnitIdentityParent;
    readonly permissionResources?: outputs.GetComputeRackUnitIdentityPermissionResource[];
    readonly physicalDeviceRegistration?: outputs.GetComputeRackUnitIdentityPhysicalDeviceRegistration;
    readonly registeredDevice?: outputs.GetComputeRackUnitIdentityRegisteredDevice;
    readonly results: outputs.GetComputeRackUnitIdentityResult[];
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetComputeRackUnitIdentityTag[];
    readonly vendor?: string;
    readonly versionContext?: outputs.GetComputeRackUnitIdentityVersionContext;
}
export function getComputeRackUnitIdentityOutput(args?: GetComputeRackUnitIdentityOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetComputeRackUnitIdentityResult> {
    return pulumi.output(args).apply((a: any) => getComputeRackUnitIdentity(a, opts))
}

/**
 * A collection of arguments for invoking getComputeRackUnitIdentity.
 */
export interface GetComputeRackUnitIdentityOutputArgs {
    accountMoid?: pulumi.Input<string>;
    adapterSerial?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    adminAction?: pulumi.Input<string>;
    adminActionState?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitIdentityAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    customPermissionResources?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitIdentityCustomPermissionResourceArgs>[]>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    identifier?: pulumi.Input<number>;
    lastDiscoveryTriggered?: pulumi.Input<string>;
    lifecycleModTime?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nrLifecycle?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetComputeRackUnitIdentityParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitIdentityPermissionResourceArgs>[]>;
    physicalDeviceRegistration?: pulumi.Input<inputs.GetComputeRackUnitIdentityPhysicalDeviceRegistrationArgs>;
    registeredDevice?: pulumi.Input<inputs.GetComputeRackUnitIdentityRegisteredDeviceArgs>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitIdentityTagArgs>[]>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetComputeRackUnitIdentityVersionContextArgs>;
}
