// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAaaAuditRecord(args?: GetAaaAuditRecordArgs, opts?: pulumi.InvokeOptions): Promise<GetAaaAuditRecordResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getAaaAuditRecord:getAaaAuditRecord", {
        "account": args.account,
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "affectedObjectTypeLabel": args.affectedObjectTypeLabel,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "email": args.email,
        "event": args.event,
        "id": args.id,
        "instId": args.instId,
        "moDisplayNames": args.moDisplayNames,
        "moType": args.moType,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectMoid": args.objectMoid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "request": args.request,
        "sessionId": args.sessionId,
        "sessions": args.sessions,
        "sharedScope": args.sharedScope,
        "sourceIp": args.sourceIp,
        "tags": args.tags,
        "timestamp": args.timestamp,
        "traceId": args.traceId,
        "user": args.user,
        "userAgent": args.userAgent,
        "userAgentString": args.userAgentString,
        "userIdOrEmail": args.userIdOrEmail,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAaaAuditRecord.
 */
export interface GetAaaAuditRecordArgs {
    account?: inputs.GetAaaAuditRecordAccount;
    accountMoid?: string;
    additionalProperties?: string;
    affectedObjectTypeLabel?: string;
    ancestors?: inputs.GetAaaAuditRecordAncestor[];
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    email?: string;
    event?: string;
    id?: string;
    instId?: string;
    moDisplayNames?: string;
    moType?: string;
    modTime?: string;
    moid?: string;
    objectMoid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetAaaAuditRecordParent;
    permissionResources?: inputs.GetAaaAuditRecordPermissionResource[];
    request?: string;
    sessionId?: string;
    sessions?: inputs.GetAaaAuditRecordSessions;
    sharedScope?: string;
    sourceIp?: string;
    tags?: inputs.GetAaaAuditRecordTag[];
    timestamp?: string;
    traceId?: string;
    user?: inputs.GetAaaAuditRecordUser;
    userAgent?: inputs.GetAaaAuditRecordUserAgent;
    userAgentString?: string;
    userIdOrEmail?: string;
    versionContext?: inputs.GetAaaAuditRecordVersionContext;
}

/**
 * A collection of values returned by getAaaAuditRecord.
 */
export interface GetAaaAuditRecordResult {
    readonly account?: outputs.GetAaaAuditRecordAccount;
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly affectedObjectTypeLabel?: string;
    readonly ancestors?: outputs.GetAaaAuditRecordAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly email?: string;
    readonly event?: string;
    readonly id: string;
    readonly instId?: string;
    readonly moDisplayNames?: string;
    readonly moType?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectMoid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetAaaAuditRecordParent;
    readonly permissionResources?: outputs.GetAaaAuditRecordPermissionResource[];
    readonly request?: string;
    readonly results: outputs.GetAaaAuditRecordResult[];
    readonly sessionId?: string;
    readonly sessions?: outputs.GetAaaAuditRecordSessions;
    readonly sharedScope?: string;
    readonly sourceIp?: string;
    readonly tags?: outputs.GetAaaAuditRecordTag[];
    readonly timestamp?: string;
    readonly traceId?: string;
    readonly user?: outputs.GetAaaAuditRecordUser;
    readonly userAgent?: outputs.GetAaaAuditRecordUserAgent;
    readonly userAgentString?: string;
    readonly userIdOrEmail?: string;
    readonly versionContext?: outputs.GetAaaAuditRecordVersionContext;
}
export function getAaaAuditRecordOutput(args?: GetAaaAuditRecordOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAaaAuditRecordResult> {
    return pulumi.output(args).apply((a: any) => getAaaAuditRecord(a, opts))
}

/**
 * A collection of arguments for invoking getAaaAuditRecord.
 */
export interface GetAaaAuditRecordOutputArgs {
    account?: pulumi.Input<inputs.GetAaaAuditRecordAccountArgs>;
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    affectedObjectTypeLabel?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetAaaAuditRecordAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    event?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    instId?: pulumi.Input<string>;
    moDisplayNames?: pulumi.Input<string>;
    moType?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectMoid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetAaaAuditRecordParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetAaaAuditRecordPermissionResourceArgs>[]>;
    request?: pulumi.Input<string>;
    sessionId?: pulumi.Input<string>;
    sessions?: pulumi.Input<inputs.GetAaaAuditRecordSessionsArgs>;
    sharedScope?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetAaaAuditRecordTagArgs>[]>;
    timestamp?: pulumi.Input<string>;
    traceId?: pulumi.Input<string>;
    user?: pulumi.Input<inputs.GetAaaAuditRecordUserArgs>;
    userAgent?: pulumi.Input<inputs.GetAaaAuditRecordUserAgentArgs>;
    userAgentString?: pulumi.Input<string>;
    userIdOrEmail?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetAaaAuditRecordVersionContextArgs>;
}
