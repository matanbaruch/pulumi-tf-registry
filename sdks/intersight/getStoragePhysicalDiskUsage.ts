// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStoragePhysicalDiskUsage(args?: GetStoragePhysicalDiskUsageArgs, opts?: pulumi.InvokeOptions): Promise<GetStoragePhysicalDiskUsageResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStoragePhysicalDiskUsage:getStoragePhysicalDiskUsage", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "modTime": args.modTime,
        "moid": args.moid,
        "numberOfBlocks": args.numberOfBlocks,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "physicalDrive": args.physicalDrive,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "sharedScope": args.sharedScope,
        "span": args.span,
        "startingBlock": args.startingBlock,
        "state": args.state,
        "storageVirtualDrive": args.storageVirtualDrive,
        "tags": args.tags,
        "versionContext": args.versionContext,
        "virtualDrive": args.virtualDrive,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStoragePhysicalDiskUsage.
 */
export interface GetStoragePhysicalDiskUsageArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStoragePhysicalDiskUsageAncestor[];
    classId?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    id?: string;
    inventoryDeviceInfo?: inputs.GetStoragePhysicalDiskUsageInventoryDeviceInfo;
    modTime?: string;
    moid?: string;
    numberOfBlocks?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStoragePhysicalDiskUsageParent;
    permissionResources?: inputs.GetStoragePhysicalDiskUsagePermissionResource[];
    physicalDrive?: string;
    registeredDevice?: inputs.GetStoragePhysicalDiskUsageRegisteredDevice;
    rn?: string;
    sharedScope?: string;
    span?: string;
    startingBlock?: string;
    state?: string;
    storageVirtualDrive?: inputs.GetStoragePhysicalDiskUsageStorageVirtualDrive;
    tags?: inputs.GetStoragePhysicalDiskUsageTag[];
    versionContext?: inputs.GetStoragePhysicalDiskUsageVersionContext;
    virtualDrive?: string;
}

/**
 * A collection of values returned by getStoragePhysicalDiskUsage.
 */
export interface GetStoragePhysicalDiskUsageResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStoragePhysicalDiskUsageAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetStoragePhysicalDiskUsageInventoryDeviceInfo;
    readonly modTime?: string;
    readonly moid?: string;
    readonly numberOfBlocks?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStoragePhysicalDiskUsageParent;
    readonly permissionResources?: outputs.GetStoragePhysicalDiskUsagePermissionResource[];
    readonly physicalDrive?: string;
    readonly registeredDevice?: outputs.GetStoragePhysicalDiskUsageRegisteredDevice;
    readonly results: outputs.GetStoragePhysicalDiskUsageResult[];
    readonly rn?: string;
    readonly sharedScope?: string;
    readonly span?: string;
    readonly startingBlock?: string;
    readonly state?: string;
    readonly storageVirtualDrive?: outputs.GetStoragePhysicalDiskUsageStorageVirtualDrive;
    readonly tags?: outputs.GetStoragePhysicalDiskUsageTag[];
    readonly versionContext?: outputs.GetStoragePhysicalDiskUsageVersionContext;
    readonly virtualDrive?: string;
}
export function getStoragePhysicalDiskUsageOutput(args?: GetStoragePhysicalDiskUsageOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStoragePhysicalDiskUsageResult> {
    return pulumi.output(args).apply((a: any) => getStoragePhysicalDiskUsage(a, opts))
}

/**
 * A collection of arguments for invoking getStoragePhysicalDiskUsage.
 */
export interface GetStoragePhysicalDiskUsageOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStoragePhysicalDiskUsageAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetStoragePhysicalDiskUsageInventoryDeviceInfoArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    numberOfBlocks?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStoragePhysicalDiskUsageParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStoragePhysicalDiskUsagePermissionResourceArgs>[]>;
    physicalDrive?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetStoragePhysicalDiskUsageRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    span?: pulumi.Input<string>;
    startingBlock?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    storageVirtualDrive?: pulumi.Input<inputs.GetStoragePhysicalDiskUsageStorageVirtualDriveArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStoragePhysicalDiskUsageTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetStoragePhysicalDiskUsageVersionContextArgs>;
    virtualDrive?: pulumi.Input<string>;
}
