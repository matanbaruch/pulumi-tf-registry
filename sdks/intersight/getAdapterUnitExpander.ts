// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAdapterUnitExpander(args?: GetAdapterUnitExpanderArgs, opts?: pulumi.InvokeOptions): Promise<GetAdapterUnitExpanderResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getAdapterUnitExpander:getAdapterUnitExpander", {
        "accountMoid": args.accountMoid,
        "adapterUnit": args.adapterUnit,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "isUpgraded": args.isUpgraded,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "partNumber": args.partNumber,
        "permissionResources": args.permissionResources,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "registeredDevice": args.registeredDevice,
        "revision": args.revision,
        "rn": args.rn,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
        "vid": args.vid,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAdapterUnitExpander.
 */
export interface GetAdapterUnitExpanderArgs {
    accountMoid?: string;
    adapterUnit?: inputs.GetAdapterUnitExpanderAdapterUnit;
    additionalProperties?: string;
    ancestors?: inputs.GetAdapterUnitExpanderAncestor[];
    classId?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    id?: string;
    isUpgraded?: boolean;
    modTime?: string;
    model?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetAdapterUnitExpanderParent;
    partNumber?: string;
    permissionResources?: inputs.GetAdapterUnitExpanderPermissionResource[];
    presence?: string;
    previousFru?: inputs.GetAdapterUnitExpanderPreviousFru;
    registeredDevice?: inputs.GetAdapterUnitExpanderRegisteredDevice;
    revision?: string;
    rn?: string;
    serial?: string;
    sharedScope?: string;
    tags?: inputs.GetAdapterUnitExpanderTag[];
    vendor?: string;
    versionContext?: inputs.GetAdapterUnitExpanderVersionContext;
    vid?: string;
}

/**
 * A collection of values returned by getAdapterUnitExpander.
 */
export interface GetAdapterUnitExpanderResult {
    readonly accountMoid?: string;
    readonly adapterUnit?: outputs.GetAdapterUnitExpanderAdapterUnit;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetAdapterUnitExpanderAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly isUpgraded?: boolean;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetAdapterUnitExpanderParent;
    readonly partNumber?: string;
    readonly permissionResources?: outputs.GetAdapterUnitExpanderPermissionResource[];
    readonly presence?: string;
    readonly previousFru?: outputs.GetAdapterUnitExpanderPreviousFru;
    readonly registeredDevice?: outputs.GetAdapterUnitExpanderRegisteredDevice;
    readonly results: outputs.GetAdapterUnitExpanderResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetAdapterUnitExpanderTag[];
    readonly vendor?: string;
    readonly versionContext?: outputs.GetAdapterUnitExpanderVersionContext;
    readonly vid?: string;
}
export function getAdapterUnitExpanderOutput(args?: GetAdapterUnitExpanderOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAdapterUnitExpanderResult> {
    return pulumi.output(args).apply((a: any) => getAdapterUnitExpander(a, opts))
}

/**
 * A collection of arguments for invoking getAdapterUnitExpander.
 */
export interface GetAdapterUnitExpanderOutputArgs {
    accountMoid?: pulumi.Input<string>;
    adapterUnit?: pulumi.Input<inputs.GetAdapterUnitExpanderAdapterUnitArgs>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetAdapterUnitExpanderAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    isUpgraded?: pulumi.Input<boolean>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetAdapterUnitExpanderParentArgs>;
    partNumber?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetAdapterUnitExpanderPermissionResourceArgs>[]>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetAdapterUnitExpanderPreviousFruArgs>;
    registeredDevice?: pulumi.Input<inputs.GetAdapterUnitExpanderRegisteredDeviceArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetAdapterUnitExpanderTagArgs>[]>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetAdapterUnitExpanderVersionContextArgs>;
    vid?: pulumi.Input<string>;
}
