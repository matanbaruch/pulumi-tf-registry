// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StorageStoragePolicy extends pulumi.CustomResource {
    /**
     * Get an existing StorageStoragePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageStoragePolicyState, opts?: pulumi.CustomResourceOptions): StorageStoragePolicy {
        return new StorageStoragePolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'intersight:index/storageStoragePolicy:StorageStoragePolicy';

    /**
     * Returns true if the given object is an instance of StorageStoragePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageStoragePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageStoragePolicy.__pulumiType;
    }

    /**
     * The Account ID for this managed object.
     */
    public readonly accountMoid!: pulumi.Output<string>;
    public readonly additionalProperties!: pulumi.Output<string | undefined>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly ancestors!: pulumi.Output<outputs.StorageStoragePolicyAncestor[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    public readonly classId!: pulumi.Output<string | undefined>;
    /**
     * The time when this managed object was created.
     */
    public readonly createTime!: pulumi.Output<string>;
    /**
     * All unconfigured drives will move to the selected state on deployment. Newly inserted drives will move to the selected
     * state. Select Unconfigured Good option to retain the existing configuration. Select JBOD to move the unconfigured drives
     * to JBOD state. Select RAID0 to create a RAID0 virtual drive on each of the unconfigured drives. If JBOD is selected,
     * unconfigured drives will move to JBOD state on host reboot. This setting is applicable only to selected set of
     * controllers on FI attached servers. * `UnconfiguredGood` - Newly inserted drives or on reboot, drives will remain the
     * same state. * `Jbod` - Newly inserted drives or on reboot, drives will automatically move to JBOD state if drive state
     * was UnconfiguredGood. * `RAID0` - Newly inserted drives or on reboot, virtual drives will be created, respective drives
     * will move to Online state.
     */
    public readonly defaultDriveMode!: pulumi.Output<string | undefined>;
    /**
     * Description of the policy.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Only U.3 NVMe drives has to be specified, entered slots will be moved to Direct attached mode. Allowed slots are 1-4,
     * 101-104. Allowed value is a comma or hyphen separated number range.
     */
    public readonly directAttachedNvmeSlots!: pulumi.Output<string | undefined>;
    /**
     * The DomainGroup ID for this managed object.
     */
    public readonly domainGroupMoid!: pulumi.Output<string>;
    /**
     * An array of relationships to storageDriveGroup resources.
     */
    public readonly driveGroups!: pulumi.Output<outputs.StorageStoragePolicyDriveGroup[]>;
    /**
     * A collection of disks that is to be used as hot spares, globally, for all the RAID groups. Allowed value is a number
     * range separated by a comma or a hyphen.
     */
    public readonly globalHotSpares!: pulumi.Output<string | undefined>;
    /**
     * Virtual Drive configuration for M.2 RAID controller.
     */
    public readonly m2VirtualDrives!: pulumi.Output<outputs.StorageStoragePolicyM2VirtualDrife[]>;
    /**
     * The time when this managed object was last modified.
     */
    public readonly modTime!: pulumi.Output<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    public readonly moid!: pulumi.Output<string>;
    /**
     * Name of the concrete policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    public readonly objectType!: pulumi.Output<string | undefined>;
    /**
     * A reference to a organizationOrganization resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    public readonly organizations!: pulumi.Output<outputs.StorageStoragePolicyOrganization[]>;
    public readonly owners!: pulumi.Output<string[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    public readonly parents!: pulumi.Output<outputs.StorageStoragePolicyParent[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly permissionResources!: pulumi.Output<outputs.StorageStoragePolicyPermissionResource[]>;
    /**
     * An array of relationships to policyAbstractConfigProfile resources.
     */
    public readonly profiles!: pulumi.Output<outputs.StorageStoragePolicyProfile[]>;
    /**
     * The list of disks where RAID0 virtual drives must be created on each individual drive.
     */
    public readonly raid0Drives!: pulumi.Output<outputs.StorageStoragePolicyRaid0Drife[]>;
    /**
     * Only U.3 NVMe drives has to be specified, entered slots will be moved to RAID attached mode. Allowed slots are 1-4,
     * 101-104. Allowed value is a comma or hyphen separated number range.
     */
    public readonly raidAttachedNvmeSlots!: pulumi.Output<string | undefined>;
    /**
     * JBOD drives specified in this slot range will be encrypted. Allowed values are 'ALL', or a comma or hyphen separated
     * number range. Sample format is ALL or 1, 3 or 4-6, 8. Setting the value to 'ALL' will encrypt all the unused
     * UnconfigureGood/JBOD disks.
     */
    public readonly secureJbods!: pulumi.Output<string | undefined>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    public readonly sharedScope!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.StorageStoragePolicyTag[]>;
    /**
     * State to which drives, not used in this policy, are to be moved. NoChange will not change the drive state. No Change
     * must be selected if Default Drive State is set to JBOD or RAID0. * `NoChange` - Drive state will not be modified by
     * Storage Policy. * `UnconfiguredGood` - Unconfigured good state -ready to be added in a RAID group. * `Jbod` - JBOD state
     * where the disks start showing up to Host OS.
     */
    public readonly unusedDisksState!: pulumi.Output<string | undefined>;
    /**
     * Disks in JBOD State are used to create virtual drives. This setting must be disabled if Default Drive State is set to
     * JBOD.
     */
    public readonly useJbodForVdCreation!: pulumi.Output<boolean | undefined>;
    /**
     * The versioning info for this managed object.
     */
    public readonly versionContexts!: pulumi.Output<outputs.StorageStoragePolicyVersionContext[]>;

    /**
     * Create a StorageStoragePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: StorageStoragePolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageStoragePolicyArgs | StorageStoragePolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageStoragePolicyState | undefined;
            resourceInputs["accountMoid"] = state ? state.accountMoid : undefined;
            resourceInputs["additionalProperties"] = state ? state.additionalProperties : undefined;
            resourceInputs["ancestors"] = state ? state.ancestors : undefined;
            resourceInputs["classId"] = state ? state.classId : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["defaultDriveMode"] = state ? state.defaultDriveMode : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["directAttachedNvmeSlots"] = state ? state.directAttachedNvmeSlots : undefined;
            resourceInputs["domainGroupMoid"] = state ? state.domainGroupMoid : undefined;
            resourceInputs["driveGroups"] = state ? state.driveGroups : undefined;
            resourceInputs["globalHotSpares"] = state ? state.globalHotSpares : undefined;
            resourceInputs["m2VirtualDrives"] = state ? state.m2VirtualDrives : undefined;
            resourceInputs["modTime"] = state ? state.modTime : undefined;
            resourceInputs["moid"] = state ? state.moid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objectType"] = state ? state.objectType : undefined;
            resourceInputs["organizations"] = state ? state.organizations : undefined;
            resourceInputs["owners"] = state ? state.owners : undefined;
            resourceInputs["parents"] = state ? state.parents : undefined;
            resourceInputs["permissionResources"] = state ? state.permissionResources : undefined;
            resourceInputs["profiles"] = state ? state.profiles : undefined;
            resourceInputs["raid0Drives"] = state ? state.raid0Drives : undefined;
            resourceInputs["raidAttachedNvmeSlots"] = state ? state.raidAttachedNvmeSlots : undefined;
            resourceInputs["secureJbods"] = state ? state.secureJbods : undefined;
            resourceInputs["sharedScope"] = state ? state.sharedScope : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["unusedDisksState"] = state ? state.unusedDisksState : undefined;
            resourceInputs["useJbodForVdCreation"] = state ? state.useJbodForVdCreation : undefined;
            resourceInputs["versionContexts"] = state ? state.versionContexts : undefined;
        } else {
            const args = argsOrState as StorageStoragePolicyArgs | undefined;
            resourceInputs["accountMoid"] = args ? args.accountMoid : undefined;
            resourceInputs["additionalProperties"] = args ? args.additionalProperties : undefined;
            resourceInputs["ancestors"] = args ? args.ancestors : undefined;
            resourceInputs["classId"] = args ? args.classId : undefined;
            resourceInputs["createTime"] = args ? args.createTime : undefined;
            resourceInputs["defaultDriveMode"] = args ? args.defaultDriveMode : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["directAttachedNvmeSlots"] = args ? args.directAttachedNvmeSlots : undefined;
            resourceInputs["domainGroupMoid"] = args ? args.domainGroupMoid : undefined;
            resourceInputs["driveGroups"] = args ? args.driveGroups : undefined;
            resourceInputs["globalHotSpares"] = args ? args.globalHotSpares : undefined;
            resourceInputs["m2VirtualDrives"] = args ? args.m2VirtualDrives : undefined;
            resourceInputs["modTime"] = args ? args.modTime : undefined;
            resourceInputs["moid"] = args ? args.moid : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["objectType"] = args ? args.objectType : undefined;
            resourceInputs["organizations"] = args ? args.organizations : undefined;
            resourceInputs["owners"] = args ? args.owners : undefined;
            resourceInputs["parents"] = args ? args.parents : undefined;
            resourceInputs["permissionResources"] = args ? args.permissionResources : undefined;
            resourceInputs["profiles"] = args ? args.profiles : undefined;
            resourceInputs["raid0Drives"] = args ? args.raid0Drives : undefined;
            resourceInputs["raidAttachedNvmeSlots"] = args ? args.raidAttachedNvmeSlots : undefined;
            resourceInputs["secureJbods"] = args ? args.secureJbods : undefined;
            resourceInputs["sharedScope"] = args ? args.sharedScope : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["unusedDisksState"] = args ? args.unusedDisksState : undefined;
            resourceInputs["useJbodForVdCreation"] = args ? args.useJbodForVdCreation : undefined;
            resourceInputs["versionContexts"] = args ? args.versionContexts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageStoragePolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageStoragePolicy resources.
 */
export interface StorageStoragePolicyState {
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.StorageStoragePolicyAncestor>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * All unconfigured drives will move to the selected state on deployment. Newly inserted drives will move to the selected
     * state. Select Unconfigured Good option to retain the existing configuration. Select JBOD to move the unconfigured drives
     * to JBOD state. Select RAID0 to create a RAID0 virtual drive on each of the unconfigured drives. If JBOD is selected,
     * unconfigured drives will move to JBOD state on host reboot. This setting is applicable only to selected set of
     * controllers on FI attached servers. * `UnconfiguredGood` - Newly inserted drives or on reboot, drives will remain the
     * same state. * `Jbod` - Newly inserted drives or on reboot, drives will automatically move to JBOD state if drive state
     * was UnconfiguredGood. * `RAID0` - Newly inserted drives or on reboot, virtual drives will be created, respective drives
     * will move to Online state.
     */
    defaultDriveMode?: pulumi.Input<string>;
    /**
     * Description of the policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Only U.3 NVMe drives has to be specified, entered slots will be moved to Direct attached mode. Allowed slots are 1-4,
     * 101-104. Allowed value is a comma or hyphen separated number range.
     */
    directAttachedNvmeSlots?: pulumi.Input<string>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    /**
     * An array of relationships to storageDriveGroup resources.
     */
    driveGroups?: pulumi.Input<pulumi.Input<inputs.StorageStoragePolicyDriveGroup>[]>;
    /**
     * A collection of disks that is to be used as hot spares, globally, for all the RAID groups. Allowed value is a number
     * range separated by a comma or a hyphen.
     */
    globalHotSpares?: pulumi.Input<string>;
    /**
     * Virtual Drive configuration for M.2 RAID controller.
     */
    m2VirtualDrives?: pulumi.Input<pulumi.Input<inputs.StorageStoragePolicyM2VirtualDrife>[]>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * Name of the concrete policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    /**
     * A reference to a organizationOrganization resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    organizations?: pulumi.Input<pulumi.Input<inputs.StorageStoragePolicyOrganization>[]>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.StorageStoragePolicyParent>[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.StorageStoragePolicyPermissionResource>[]>;
    /**
     * An array of relationships to policyAbstractConfigProfile resources.
     */
    profiles?: pulumi.Input<pulumi.Input<inputs.StorageStoragePolicyProfile>[]>;
    /**
     * The list of disks where RAID0 virtual drives must be created on each individual drive.
     */
    raid0Drives?: pulumi.Input<pulumi.Input<inputs.StorageStoragePolicyRaid0Drife>[]>;
    /**
     * Only U.3 NVMe drives has to be specified, entered slots will be moved to RAID attached mode. Allowed slots are 1-4,
     * 101-104. Allowed value is a comma or hyphen separated number range.
     */
    raidAttachedNvmeSlots?: pulumi.Input<string>;
    /**
     * JBOD drives specified in this slot range will be encrypted. Allowed values are 'ALL', or a comma or hyphen separated
     * number range. Sample format is ALL or 1, 3 or 4-6, 8. Setting the value to 'ALL' will encrypt all the unused
     * UnconfigureGood/JBOD disks.
     */
    secureJbods?: pulumi.Input<string>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.StorageStoragePolicyTag>[]>;
    /**
     * State to which drives, not used in this policy, are to be moved. NoChange will not change the drive state. No Change
     * must be selected if Default Drive State is set to JBOD or RAID0. * `NoChange` - Drive state will not be modified by
     * Storage Policy. * `UnconfiguredGood` - Unconfigured good state -ready to be added in a RAID group. * `Jbod` - JBOD state
     * where the disks start showing up to Host OS.
     */
    unusedDisksState?: pulumi.Input<string>;
    /**
     * Disks in JBOD State are used to create virtual drives. This setting must be disabled if Default Drive State is set to
     * JBOD.
     */
    useJbodForVdCreation?: pulumi.Input<boolean>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.StorageStoragePolicyVersionContext>[]>;
}

/**
 * The set of arguments for constructing a StorageStoragePolicy resource.
 */
export interface StorageStoragePolicyArgs {
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.StorageStoragePolicyAncestor>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * All unconfigured drives will move to the selected state on deployment. Newly inserted drives will move to the selected
     * state. Select Unconfigured Good option to retain the existing configuration. Select JBOD to move the unconfigured drives
     * to JBOD state. Select RAID0 to create a RAID0 virtual drive on each of the unconfigured drives. If JBOD is selected,
     * unconfigured drives will move to JBOD state on host reboot. This setting is applicable only to selected set of
     * controllers on FI attached servers. * `UnconfiguredGood` - Newly inserted drives or on reboot, drives will remain the
     * same state. * `Jbod` - Newly inserted drives or on reboot, drives will automatically move to JBOD state if drive state
     * was UnconfiguredGood. * `RAID0` - Newly inserted drives or on reboot, virtual drives will be created, respective drives
     * will move to Online state.
     */
    defaultDriveMode?: pulumi.Input<string>;
    /**
     * Description of the policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Only U.3 NVMe drives has to be specified, entered slots will be moved to Direct attached mode. Allowed slots are 1-4,
     * 101-104. Allowed value is a comma or hyphen separated number range.
     */
    directAttachedNvmeSlots?: pulumi.Input<string>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    /**
     * An array of relationships to storageDriveGroup resources.
     */
    driveGroups?: pulumi.Input<pulumi.Input<inputs.StorageStoragePolicyDriveGroup>[]>;
    /**
     * A collection of disks that is to be used as hot spares, globally, for all the RAID groups. Allowed value is a number
     * range separated by a comma or a hyphen.
     */
    globalHotSpares?: pulumi.Input<string>;
    /**
     * Virtual Drive configuration for M.2 RAID controller.
     */
    m2VirtualDrives?: pulumi.Input<pulumi.Input<inputs.StorageStoragePolicyM2VirtualDrife>[]>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * Name of the concrete policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    /**
     * A reference to a organizationOrganization resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    organizations?: pulumi.Input<pulumi.Input<inputs.StorageStoragePolicyOrganization>[]>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.StorageStoragePolicyParent>[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.StorageStoragePolicyPermissionResource>[]>;
    /**
     * An array of relationships to policyAbstractConfigProfile resources.
     */
    profiles?: pulumi.Input<pulumi.Input<inputs.StorageStoragePolicyProfile>[]>;
    /**
     * The list of disks where RAID0 virtual drives must be created on each individual drive.
     */
    raid0Drives?: pulumi.Input<pulumi.Input<inputs.StorageStoragePolicyRaid0Drife>[]>;
    /**
     * Only U.3 NVMe drives has to be specified, entered slots will be moved to RAID attached mode. Allowed slots are 1-4,
     * 101-104. Allowed value is a comma or hyphen separated number range.
     */
    raidAttachedNvmeSlots?: pulumi.Input<string>;
    /**
     * JBOD drives specified in this slot range will be encrypted. Allowed values are 'ALL', or a comma or hyphen separated
     * number range. Sample format is ALL or 1, 3 or 4-6, 8. Setting the value to 'ALL' will encrypt all the unused
     * UnconfigureGood/JBOD disks.
     */
    secureJbods?: pulumi.Input<string>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.StorageStoragePolicyTag>[]>;
    /**
     * State to which drives, not used in this policy, are to be moved. NoChange will not change the drive state. No Change
     * must be selected if Default Drive State is set to JBOD or RAID0. * `NoChange` - Drive state will not be modified by
     * Storage Policy. * `UnconfiguredGood` - Unconfigured good state -ready to be added in a RAID group. * `Jbod` - JBOD state
     * where the disks start showing up to Host OS.
     */
    unusedDisksState?: pulumi.Input<string>;
    /**
     * Disks in JBOD State are used to create virtual drives. This setting must be disabled if Default Drive State is set to
     * JBOD.
     */
    useJbodForVdCreation?: pulumi.Input<boolean>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.StorageStoragePolicyVersionContext>[]>;
}
