// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageVirtualDriveExtension(args?: GetStorageVirtualDriveExtensionArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageVirtualDriveExtensionResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageVirtualDriveExtension:getStorageVirtualDriveExtension", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "bootable": args.bootable,
        "classId": args.classId,
        "containerId": args.containerId,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "driveState": args.driveState,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "operDeviceId": args.operDeviceId,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "sharedScope": args.sharedScope,
        "storageController": args.storageController,
        "tags": args.tags,
        "uuid": args.uuid,
        "vendorUuid": args.vendorUuid,
        "versionContext": args.versionContext,
        "virtualDrive": args.virtualDrive,
        "virtualDriveDn": args.virtualDriveDn,
        "virtualDriveId": args.virtualDriveId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageVirtualDriveExtension.
 */
export interface GetStorageVirtualDriveExtensionArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageVirtualDriveExtensionAncestor[];
    bootable?: string;
    classId?: string;
    containerId?: number;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    driveState?: string;
    id?: string;
    inventoryDeviceInfo?: inputs.GetStorageVirtualDriveExtensionInventoryDeviceInfo;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    operDeviceId?: string;
    owners?: string[];
    parent?: inputs.GetStorageVirtualDriveExtensionParent;
    permissionResources?: inputs.GetStorageVirtualDriveExtensionPermissionResource[];
    registeredDevice?: inputs.GetStorageVirtualDriveExtensionRegisteredDevice;
    rn?: string;
    sharedScope?: string;
    storageController?: inputs.GetStorageVirtualDriveExtensionStorageController;
    tags?: inputs.GetStorageVirtualDriveExtensionTag[];
    uuid?: string;
    vendorUuid?: string;
    versionContext?: inputs.GetStorageVirtualDriveExtensionVersionContext;
    virtualDrive?: inputs.GetStorageVirtualDriveExtensionVirtualDrive;
    virtualDriveDn?: string;
    virtualDriveId?: string;
}

/**
 * A collection of values returned by getStorageVirtualDriveExtension.
 */
export interface GetStorageVirtualDriveExtensionResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageVirtualDriveExtensionAncestor[];
    readonly bootable?: string;
    readonly classId?: string;
    readonly containerId?: number;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly driveState?: string;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetStorageVirtualDriveExtensionInventoryDeviceInfo;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly operDeviceId?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageVirtualDriveExtensionParent;
    readonly permissionResources?: outputs.GetStorageVirtualDriveExtensionPermissionResource[];
    readonly registeredDevice?: outputs.GetStorageVirtualDriveExtensionRegisteredDevice;
    readonly results: outputs.GetStorageVirtualDriveExtensionResult[];
    readonly rn?: string;
    readonly sharedScope?: string;
    readonly storageController?: outputs.GetStorageVirtualDriveExtensionStorageController;
    readonly tags?: outputs.GetStorageVirtualDriveExtensionTag[];
    readonly uuid?: string;
    readonly vendorUuid?: string;
    readonly versionContext?: outputs.GetStorageVirtualDriveExtensionVersionContext;
    readonly virtualDrive?: outputs.GetStorageVirtualDriveExtensionVirtualDrive;
    readonly virtualDriveDn?: string;
    readonly virtualDriveId?: string;
}
export function getStorageVirtualDriveExtensionOutput(args?: GetStorageVirtualDriveExtensionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageVirtualDriveExtensionResult> {
    return pulumi.output(args).apply((a: any) => getStorageVirtualDriveExtension(a, opts))
}

/**
 * A collection of arguments for invoking getStorageVirtualDriveExtension.
 */
export interface GetStorageVirtualDriveExtensionOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageVirtualDriveExtensionAncestorArgs>[]>;
    bootable?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    containerId?: pulumi.Input<number>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    driveState?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetStorageVirtualDriveExtensionInventoryDeviceInfoArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operDeviceId?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageVirtualDriveExtensionParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageVirtualDriveExtensionPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetStorageVirtualDriveExtensionRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    storageController?: pulumi.Input<inputs.GetStorageVirtualDriveExtensionStorageControllerArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageVirtualDriveExtensionTagArgs>[]>;
    uuid?: pulumi.Input<string>;
    vendorUuid?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetStorageVirtualDriveExtensionVersionContextArgs>;
    virtualDrive?: pulumi.Input<inputs.GetStorageVirtualDriveExtensionVirtualDriveArgs>;
    virtualDriveDn?: pulumi.Input<string>;
    virtualDriveId?: pulumi.Input<string>;
}
