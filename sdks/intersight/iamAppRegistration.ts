// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IamAppRegistration extends pulumi.CustomResource {
    /**
     * Get an existing IamAppRegistration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IamAppRegistrationState, opts?: pulumi.CustomResourceOptions): IamAppRegistration {
        return new IamAppRegistration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'intersight:index/iamAppRegistration:IamAppRegistration';

    /**
     * Returns true if the given object is an instance of IamAppRegistration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IamAppRegistration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IamAppRegistration.__pulumiType;
    }

    /**
     * The Account ID for this managed object.
     */
    public readonly accountMoid!: pulumi.Output<string>;
    /**
     * A reference to a iamAccount resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    public readonly accounts!: pulumi.Output<outputs.IamAppRegistrationAccount[]>;
    public readonly additionalProperties!: pulumi.Output<string | undefined>;
    /**
     * Used to trigger the enable or disable action on the App Registration. These actions change the status of an App
     * Registration. * `enable` - Used to enable a disabled API key/App Registration. If the API key/App Registration is
     * already expired, this action has no effect. * `disable` - Used to disable an active API key/App Registration. If the API
     * key/App Registration is already expired, this action has no effect.
     */
    public readonly adminStatus!: pulumi.Output<string | undefined>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly ancestors!: pulumi.Output<outputs.IamAppRegistrationAncestor[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    public readonly classId!: pulumi.Output<string | undefined>;
    /**
     * A unique identifier for the OAuth2 client application. The client ID is auto-generated when the AppRegistration object
     * is created.
     */
    public readonly clientId!: pulumi.Output<string>;
    /**
     * App Registration name specified by user.
     */
    public readonly clientName!: pulumi.Output<string | undefined>;
    /**
     * The OAuth2 client secret. The value of this property is generated when grantType includes 'client-credentials'.
     * Otherwise, no client-secret is generated.
     */
    public readonly clientSecret!: pulumi.Output<string | undefined>;
    /**
     * The type of the OAuth2 client (public or confidential), as specified in https://tools.ietf.org/html/rfc6749#section-2.1.
     * * `public` - Clients incapable of maintaining the confidentiality of their credentials.This includes clients executing
     * on the device used by the resource owner,such as mobile applications, installed native application or a webbrowser-based
     * application. * `confidential` - Clients capable of maintaining the confidentiality of their credentials.For example,
     * this could be a client implemented on a secure server withrestricted access to the client credentials.To maintain the
     * confidentiality of the OAuth2 credentials, two use cases areconsidered.1) The application is running as a service within
     * Intersight. The application automatically obtains the OAuth2 credentials when the application starts and the credentials
     * are not exposed to the end-user. Because end-users (even account administrators) do not have access the OAuth2
     * credentials, they cannot take the credentials with them when they leave their organization.2) The application is under
     * the control of a "trusted" end-user. For example, the end-user may create a native application running outside
     * Intersight. The application uses OAuth2 credentials to interact with the Intersight API. In that case, the Intersight
     * account administrator may generate OAuth2 credentials with a registered application using "client_credentials" grant
     * type. In that case, the end-user is responsible for maintaining the confidentiality of the OAuth2 credentials. If the
     * end-user leaves the organization, you should revoke the credentials and issue new Oauth2 credentials.Here is a possible
     * workflow for handling OAuth2 tokens.1) User Alice (Intersight Account Administrator) logins to Intersight and deploys an
     * Intersight application that requires an OAuth2 token.2) Intersight automatically deploys the application. The
     * application is assigned a OAuth2 token, possibly linked to Alice. The application must NOT expose the OAuth2 secret to
     * Alice, otherwise Alice would be able to use the token after she leaves the company.3) The application can make API calls
     * to Intersight using its assigned OAuth2 token. For example, the application could make weekly scheduled API calls to
     * Intersight.4) Separately, Alice may also get OAuth2 tokens that she can use to make API calls from the Intersight SDK
     * through the northbound API. In that case, Alice will get the associated OAuth2 secrets, but not the one assigned in step
     * #2.5) Alice leaves the organization. The OAuth2 tokens assigned in step #2 must retain their validity even after Alice
     * has left the organization. Because the OAuth2 secrets were never shared with Alice, there is no risk Alice can reuse the
     * OAuth2 secrets. On the other hand, the OAuth2 tokens assigned in step #4 must be invalidated because Alice had the
     * OAuth2 tokens in her possession.
     */
    public readonly clientType!: pulumi.Output<string | undefined>;
    /**
     * The time when this managed object was created.
     */
    public readonly createTime!: pulumi.Output<string>;
    /**
     * Description of the application.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The DomainGroup ID for this managed object.
     */
    public readonly domainGroupMoid!: pulumi.Output<string>;
    /**
     * The expiration date of the App Registration which is set at the time of its creation. Its value can only be assigned a
     * date that falls within the range determined by the maximum expiration time configured at the account level. The expiry
     * date can be edited to be earlier or later, provided it stays within the designated expiry period. This period is
     * determined by adding the 'startTime' property of the App Registration to the maximum expiry time configured at the
     * account level.
     */
    public readonly expiryDateTime!: pulumi.Output<string | undefined>;
    public readonly grantTypes!: pulumi.Output<string[]>;
    /**
     * Used to mark the App Registration as a never-expiring App Registration.
     */
    public readonly isNeverExpiring!: pulumi.Output<boolean | undefined>;
    /**
     * The ip address from which the App Registration was last used.
     */
    public readonly lastUsedIp!: pulumi.Output<string>;
    /**
     * The time at which the App Registration was last used. It is updated every 24 hours.
     */
    public readonly lastUsedTime!: pulumi.Output<string>;
    /**
     * The time when this managed object was last modified.
     */
    public readonly modTime!: pulumi.Output<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    public readonly moid!: pulumi.Output<string>;
    /**
     * An array of relationships to iamOAuthToken resources.
     */
    public readonly oauthTokens!: pulumi.Output<outputs.IamAppRegistrationOauthToken[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    public readonly objectType!: pulumi.Output<string | undefined>;
    /**
     * The current status of the App Registration that dictates the validity of the app. * `enabled` - An API key/App
     * Registration having enabled status can be used for API invocation. * `disabled` - An API key/App Registration having
     * disabled status cannot be used for API invocation. * `expired` - An API key/App Registration having expired status
     * cannot be used for API invocation as the expiration date has passed.
     */
    public readonly operStatus!: pulumi.Output<string>;
    public readonly owners!: pulumi.Output<string[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    public readonly parents!: pulumi.Output<outputs.IamAppRegistrationParent[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly permissionResources!: pulumi.Output<outputs.IamAppRegistrationPermissionResource[]>;
    /**
     * A reference to a iamPermission resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    public readonly permissions!: pulumi.Output<outputs.IamAppRegistrationPermission[]>;
    public readonly redirectUris!: pulumi.Output<string[]>;
    /**
     * Set value to true to renew the client-secret. Applicable to client_credentials grant type.
     */
    public readonly renewClientSecret!: pulumi.Output<boolean | undefined>;
    public readonly responseTypes!: pulumi.Output<string[]>;
    /**
     * Used to perform revocation for tokens of AppRegistration. Updated only internally is case Revoke property come from UI
     * with value true. On each request with OAuth2 access token the CreationTime of the OAuth2 token will be compared to
     * RevokationTimestamp of the corresponding App Registration.
     */
    public readonly revocationTimestamp!: pulumi.Output<string>;
    /**
     * Used to trigger update the revocationTimestamp value. If UI sent updating request with the Revoke value is true, then
     * update RevocationTimestamp.
     */
    public readonly revoke!: pulumi.Output<boolean | undefined>;
    /**
     * An array of relationships to iamRole resources.
     */
    public readonly roles!: pulumi.Output<outputs.IamAppRegistrationRole[]>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    public readonly sharedScope!: pulumi.Output<string>;
    /**
     * Set to true if consent screen needs to be shown during the OAuth login process. Applicable only for public
     * AppRegistrations, means only 'authorization_code' grantType. Note that consent screen will be shown on each login.
     */
    public readonly showConsentScreen!: pulumi.Output<boolean | undefined>;
    /**
     * The timestamp at which an expiry date was first set on this app registration. For expiring App Registrations, this field
     * is same as the create time of the App Registration. For never-expiring App Registrations, this field is set initially to
     * zero time value. If a never-expiry App Registration is later changed to have an expiration, the timestamp marking the
     * start of this transition is recorded in this field.
     */
    public readonly startTime!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.IamAppRegistrationTag[]>;
    /**
     * A reference to a iamUser resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    public readonly users!: pulumi.Output<outputs.IamAppRegistrationUser[]>;
    /**
     * The versioning info for this managed object.
     */
    public readonly versionContexts!: pulumi.Output<outputs.IamAppRegistrationVersionContext[]>;

    /**
     * Create a IamAppRegistration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IamAppRegistrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IamAppRegistrationArgs | IamAppRegistrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IamAppRegistrationState | undefined;
            resourceInputs["accountMoid"] = state ? state.accountMoid : undefined;
            resourceInputs["accounts"] = state ? state.accounts : undefined;
            resourceInputs["additionalProperties"] = state ? state.additionalProperties : undefined;
            resourceInputs["adminStatus"] = state ? state.adminStatus : undefined;
            resourceInputs["ancestors"] = state ? state.ancestors : undefined;
            resourceInputs["classId"] = state ? state.classId : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["clientName"] = state ? state.clientName : undefined;
            resourceInputs["clientSecret"] = state ? state.clientSecret : undefined;
            resourceInputs["clientType"] = state ? state.clientType : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domainGroupMoid"] = state ? state.domainGroupMoid : undefined;
            resourceInputs["expiryDateTime"] = state ? state.expiryDateTime : undefined;
            resourceInputs["grantTypes"] = state ? state.grantTypes : undefined;
            resourceInputs["isNeverExpiring"] = state ? state.isNeverExpiring : undefined;
            resourceInputs["lastUsedIp"] = state ? state.lastUsedIp : undefined;
            resourceInputs["lastUsedTime"] = state ? state.lastUsedTime : undefined;
            resourceInputs["modTime"] = state ? state.modTime : undefined;
            resourceInputs["moid"] = state ? state.moid : undefined;
            resourceInputs["oauthTokens"] = state ? state.oauthTokens : undefined;
            resourceInputs["objectType"] = state ? state.objectType : undefined;
            resourceInputs["operStatus"] = state ? state.operStatus : undefined;
            resourceInputs["owners"] = state ? state.owners : undefined;
            resourceInputs["parents"] = state ? state.parents : undefined;
            resourceInputs["permissionResources"] = state ? state.permissionResources : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["redirectUris"] = state ? state.redirectUris : undefined;
            resourceInputs["renewClientSecret"] = state ? state.renewClientSecret : undefined;
            resourceInputs["responseTypes"] = state ? state.responseTypes : undefined;
            resourceInputs["revocationTimestamp"] = state ? state.revocationTimestamp : undefined;
            resourceInputs["revoke"] = state ? state.revoke : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["sharedScope"] = state ? state.sharedScope : undefined;
            resourceInputs["showConsentScreen"] = state ? state.showConsentScreen : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
            resourceInputs["versionContexts"] = state ? state.versionContexts : undefined;
        } else {
            const args = argsOrState as IamAppRegistrationArgs | undefined;
            resourceInputs["accountMoid"] = args ? args.accountMoid : undefined;
            resourceInputs["accounts"] = args ? args.accounts : undefined;
            resourceInputs["additionalProperties"] = args ? args.additionalProperties : undefined;
            resourceInputs["adminStatus"] = args ? args.adminStatus : undefined;
            resourceInputs["ancestors"] = args ? args.ancestors : undefined;
            resourceInputs["classId"] = args ? args.classId : undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["clientName"] = args ? args.clientName : undefined;
            resourceInputs["clientSecret"] = args ? args.clientSecret : undefined;
            resourceInputs["clientType"] = args ? args.clientType : undefined;
            resourceInputs["createTime"] = args ? args.createTime : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domainGroupMoid"] = args ? args.domainGroupMoid : undefined;
            resourceInputs["expiryDateTime"] = args ? args.expiryDateTime : undefined;
            resourceInputs["grantTypes"] = args ? args.grantTypes : undefined;
            resourceInputs["isNeverExpiring"] = args ? args.isNeverExpiring : undefined;
            resourceInputs["lastUsedIp"] = args ? args.lastUsedIp : undefined;
            resourceInputs["lastUsedTime"] = args ? args.lastUsedTime : undefined;
            resourceInputs["modTime"] = args ? args.modTime : undefined;
            resourceInputs["moid"] = args ? args.moid : undefined;
            resourceInputs["oauthTokens"] = args ? args.oauthTokens : undefined;
            resourceInputs["objectType"] = args ? args.objectType : undefined;
            resourceInputs["operStatus"] = args ? args.operStatus : undefined;
            resourceInputs["owners"] = args ? args.owners : undefined;
            resourceInputs["parents"] = args ? args.parents : undefined;
            resourceInputs["permissionResources"] = args ? args.permissionResources : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["redirectUris"] = args ? args.redirectUris : undefined;
            resourceInputs["renewClientSecret"] = args ? args.renewClientSecret : undefined;
            resourceInputs["responseTypes"] = args ? args.responseTypes : undefined;
            resourceInputs["revocationTimestamp"] = args ? args.revocationTimestamp : undefined;
            resourceInputs["revoke"] = args ? args.revoke : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["sharedScope"] = args ? args.sharedScope : undefined;
            resourceInputs["showConsentScreen"] = args ? args.showConsentScreen : undefined;
            resourceInputs["startTime"] = args ? args.startTime : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["versionContexts"] = args ? args.versionContexts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IamAppRegistration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IamAppRegistration resources.
 */
export interface IamAppRegistrationState {
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    /**
     * A reference to a iamAccount resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    accounts?: pulumi.Input<pulumi.Input<inputs.IamAppRegistrationAccount>[]>;
    additionalProperties?: pulumi.Input<string>;
    /**
     * Used to trigger the enable or disable action on the App Registration. These actions change the status of an App
     * Registration. * `enable` - Used to enable a disabled API key/App Registration. If the API key/App Registration is
     * already expired, this action has no effect. * `disable` - Used to disable an active API key/App Registration. If the API
     * key/App Registration is already expired, this action has no effect.
     */
    adminStatus?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.IamAppRegistrationAncestor>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    /**
     * A unique identifier for the OAuth2 client application. The client ID is auto-generated when the AppRegistration object
     * is created.
     */
    clientId?: pulumi.Input<string>;
    /**
     * App Registration name specified by user.
     */
    clientName?: pulumi.Input<string>;
    /**
     * The OAuth2 client secret. The value of this property is generated when grantType includes 'client-credentials'.
     * Otherwise, no client-secret is generated.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * The type of the OAuth2 client (public or confidential), as specified in https://tools.ietf.org/html/rfc6749#section-2.1.
     * * `public` - Clients incapable of maintaining the confidentiality of their credentials.This includes clients executing
     * on the device used by the resource owner,such as mobile applications, installed native application or a webbrowser-based
     * application. * `confidential` - Clients capable of maintaining the confidentiality of their credentials.For example,
     * this could be a client implemented on a secure server withrestricted access to the client credentials.To maintain the
     * confidentiality of the OAuth2 credentials, two use cases areconsidered.1) The application is running as a service within
     * Intersight. The application automatically obtains the OAuth2 credentials when the application starts and the credentials
     * are not exposed to the end-user. Because end-users (even account administrators) do not have access the OAuth2
     * credentials, they cannot take the credentials with them when they leave their organization.2) The application is under
     * the control of a "trusted" end-user. For example, the end-user may create a native application running outside
     * Intersight. The application uses OAuth2 credentials to interact with the Intersight API. In that case, the Intersight
     * account administrator may generate OAuth2 credentials with a registered application using "client_credentials" grant
     * type. In that case, the end-user is responsible for maintaining the confidentiality of the OAuth2 credentials. If the
     * end-user leaves the organization, you should revoke the credentials and issue new Oauth2 credentials.Here is a possible
     * workflow for handling OAuth2 tokens.1) User Alice (Intersight Account Administrator) logins to Intersight and deploys an
     * Intersight application that requires an OAuth2 token.2) Intersight automatically deploys the application. The
     * application is assigned a OAuth2 token, possibly linked to Alice. The application must NOT expose the OAuth2 secret to
     * Alice, otherwise Alice would be able to use the token after she leaves the company.3) The application can make API calls
     * to Intersight using its assigned OAuth2 token. For example, the application could make weekly scheduled API calls to
     * Intersight.4) Separately, Alice may also get OAuth2 tokens that she can use to make API calls from the Intersight SDK
     * through the northbound API. In that case, Alice will get the associated OAuth2 secrets, but not the one assigned in step
     * #2.5) Alice leaves the organization. The OAuth2 tokens assigned in step #2 must retain their validity even after Alice
     * has left the organization. Because the OAuth2 secrets were never shared with Alice, there is no risk Alice can reuse the
     * OAuth2 secrets. On the other hand, the OAuth2 tokens assigned in step #4 must be invalidated because Alice had the
     * OAuth2 tokens in her possession.
     */
    clientType?: pulumi.Input<string>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Description of the application.
     */
    description?: pulumi.Input<string>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    /**
     * The expiration date of the App Registration which is set at the time of its creation. Its value can only be assigned a
     * date that falls within the range determined by the maximum expiration time configured at the account level. The expiry
     * date can be edited to be earlier or later, provided it stays within the designated expiry period. This period is
     * determined by adding the 'startTime' property of the App Registration to the maximum expiry time configured at the
     * account level.
     */
    expiryDateTime?: pulumi.Input<string>;
    grantTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Used to mark the App Registration as a never-expiring App Registration.
     */
    isNeverExpiring?: pulumi.Input<boolean>;
    /**
     * The ip address from which the App Registration was last used.
     */
    lastUsedIp?: pulumi.Input<string>;
    /**
     * The time at which the App Registration was last used. It is updated every 24 hours.
     */
    lastUsedTime?: pulumi.Input<string>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * An array of relationships to iamOAuthToken resources.
     */
    oauthTokens?: pulumi.Input<pulumi.Input<inputs.IamAppRegistrationOauthToken>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    /**
     * The current status of the App Registration that dictates the validity of the app. * `enabled` - An API key/App
     * Registration having enabled status can be used for API invocation. * `disabled` - An API key/App Registration having
     * disabled status cannot be used for API invocation. * `expired` - An API key/App Registration having expired status
     * cannot be used for API invocation as the expiration date has passed.
     */
    operStatus?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.IamAppRegistrationParent>[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.IamAppRegistrationPermissionResource>[]>;
    /**
     * A reference to a iamPermission resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.IamAppRegistrationPermission>[]>;
    redirectUris?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set value to true to renew the client-secret. Applicable to client_credentials grant type.
     */
    renewClientSecret?: pulumi.Input<boolean>;
    responseTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Used to perform revocation for tokens of AppRegistration. Updated only internally is case Revoke property come from UI
     * with value true. On each request with OAuth2 access token the CreationTime of the OAuth2 token will be compared to
     * RevokationTimestamp of the corresponding App Registration.
     */
    revocationTimestamp?: pulumi.Input<string>;
    /**
     * Used to trigger update the revocationTimestamp value. If UI sent updating request with the Revoke value is true, then
     * update RevocationTimestamp.
     */
    revoke?: pulumi.Input<boolean>;
    /**
     * An array of relationships to iamRole resources.
     */
    roles?: pulumi.Input<pulumi.Input<inputs.IamAppRegistrationRole>[]>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    /**
     * Set to true if consent screen needs to be shown during the OAuth login process. Applicable only for public
     * AppRegistrations, means only 'authorization_code' grantType. Note that consent screen will be shown on each login.
     */
    showConsentScreen?: pulumi.Input<boolean>;
    /**
     * The timestamp at which an expiry date was first set on this app registration. For expiring App Registrations, this field
     * is same as the create time of the App Registration. For never-expiring App Registrations, this field is set initially to
     * zero time value. If a never-expiry App Registration is later changed to have an expiration, the timestamp marking the
     * start of this transition is recorded in this field.
     */
    startTime?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.IamAppRegistrationTag>[]>;
    /**
     * A reference to a iamUser resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    users?: pulumi.Input<pulumi.Input<inputs.IamAppRegistrationUser>[]>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.IamAppRegistrationVersionContext>[]>;
}

/**
 * The set of arguments for constructing a IamAppRegistration resource.
 */
export interface IamAppRegistrationArgs {
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    /**
     * A reference to a iamAccount resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    accounts?: pulumi.Input<pulumi.Input<inputs.IamAppRegistrationAccount>[]>;
    additionalProperties?: pulumi.Input<string>;
    /**
     * Used to trigger the enable or disable action on the App Registration. These actions change the status of an App
     * Registration. * `enable` - Used to enable a disabled API key/App Registration. If the API key/App Registration is
     * already expired, this action has no effect. * `disable` - Used to disable an active API key/App Registration. If the API
     * key/App Registration is already expired, this action has no effect.
     */
    adminStatus?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.IamAppRegistrationAncestor>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    /**
     * A unique identifier for the OAuth2 client application. The client ID is auto-generated when the AppRegistration object
     * is created.
     */
    clientId?: pulumi.Input<string>;
    /**
     * App Registration name specified by user.
     */
    clientName?: pulumi.Input<string>;
    /**
     * The OAuth2 client secret. The value of this property is generated when grantType includes 'client-credentials'.
     * Otherwise, no client-secret is generated.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * The type of the OAuth2 client (public or confidential), as specified in https://tools.ietf.org/html/rfc6749#section-2.1.
     * * `public` - Clients incapable of maintaining the confidentiality of their credentials.This includes clients executing
     * on the device used by the resource owner,such as mobile applications, installed native application or a webbrowser-based
     * application. * `confidential` - Clients capable of maintaining the confidentiality of their credentials.For example,
     * this could be a client implemented on a secure server withrestricted access to the client credentials.To maintain the
     * confidentiality of the OAuth2 credentials, two use cases areconsidered.1) The application is running as a service within
     * Intersight. The application automatically obtains the OAuth2 credentials when the application starts and the credentials
     * are not exposed to the end-user. Because end-users (even account administrators) do not have access the OAuth2
     * credentials, they cannot take the credentials with them when they leave their organization.2) The application is under
     * the control of a "trusted" end-user. For example, the end-user may create a native application running outside
     * Intersight. The application uses OAuth2 credentials to interact with the Intersight API. In that case, the Intersight
     * account administrator may generate OAuth2 credentials with a registered application using "client_credentials" grant
     * type. In that case, the end-user is responsible for maintaining the confidentiality of the OAuth2 credentials. If the
     * end-user leaves the organization, you should revoke the credentials and issue new Oauth2 credentials.Here is a possible
     * workflow for handling OAuth2 tokens.1) User Alice (Intersight Account Administrator) logins to Intersight and deploys an
     * Intersight application that requires an OAuth2 token.2) Intersight automatically deploys the application. The
     * application is assigned a OAuth2 token, possibly linked to Alice. The application must NOT expose the OAuth2 secret to
     * Alice, otherwise Alice would be able to use the token after she leaves the company.3) The application can make API calls
     * to Intersight using its assigned OAuth2 token. For example, the application could make weekly scheduled API calls to
     * Intersight.4) Separately, Alice may also get OAuth2 tokens that she can use to make API calls from the Intersight SDK
     * through the northbound API. In that case, Alice will get the associated OAuth2 secrets, but not the one assigned in step
     * #2.5) Alice leaves the organization. The OAuth2 tokens assigned in step #2 must retain their validity even after Alice
     * has left the organization. Because the OAuth2 secrets were never shared with Alice, there is no risk Alice can reuse the
     * OAuth2 secrets. On the other hand, the OAuth2 tokens assigned in step #4 must be invalidated because Alice had the
     * OAuth2 tokens in her possession.
     */
    clientType?: pulumi.Input<string>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Description of the application.
     */
    description?: pulumi.Input<string>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    /**
     * The expiration date of the App Registration which is set at the time of its creation. Its value can only be assigned a
     * date that falls within the range determined by the maximum expiration time configured at the account level. The expiry
     * date can be edited to be earlier or later, provided it stays within the designated expiry period. This period is
     * determined by adding the 'startTime' property of the App Registration to the maximum expiry time configured at the
     * account level.
     */
    expiryDateTime?: pulumi.Input<string>;
    grantTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Used to mark the App Registration as a never-expiring App Registration.
     */
    isNeverExpiring?: pulumi.Input<boolean>;
    /**
     * The ip address from which the App Registration was last used.
     */
    lastUsedIp?: pulumi.Input<string>;
    /**
     * The time at which the App Registration was last used. It is updated every 24 hours.
     */
    lastUsedTime?: pulumi.Input<string>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * An array of relationships to iamOAuthToken resources.
     */
    oauthTokens?: pulumi.Input<pulumi.Input<inputs.IamAppRegistrationOauthToken>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    /**
     * The current status of the App Registration that dictates the validity of the app. * `enabled` - An API key/App
     * Registration having enabled status can be used for API invocation. * `disabled` - An API key/App Registration having
     * disabled status cannot be used for API invocation. * `expired` - An API key/App Registration having expired status
     * cannot be used for API invocation as the expiration date has passed.
     */
    operStatus?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.IamAppRegistrationParent>[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.IamAppRegistrationPermissionResource>[]>;
    /**
     * A reference to a iamPermission resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.IamAppRegistrationPermission>[]>;
    redirectUris?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set value to true to renew the client-secret. Applicable to client_credentials grant type.
     */
    renewClientSecret?: pulumi.Input<boolean>;
    responseTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Used to perform revocation for tokens of AppRegistration. Updated only internally is case Revoke property come from UI
     * with value true. On each request with OAuth2 access token the CreationTime of the OAuth2 token will be compared to
     * RevokationTimestamp of the corresponding App Registration.
     */
    revocationTimestamp?: pulumi.Input<string>;
    /**
     * Used to trigger update the revocationTimestamp value. If UI sent updating request with the Revoke value is true, then
     * update RevocationTimestamp.
     */
    revoke?: pulumi.Input<boolean>;
    /**
     * An array of relationships to iamRole resources.
     */
    roles?: pulumi.Input<pulumi.Input<inputs.IamAppRegistrationRole>[]>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    /**
     * Set to true if consent screen needs to be shown during the OAuth login process. Applicable only for public
     * AppRegistrations, means only 'authorization_code' grantType. Note that consent screen will be shown on each login.
     */
    showConsentScreen?: pulumi.Input<boolean>;
    /**
     * The timestamp at which an expiry date was first set on this app registration. For expiring App Registrations, this field
     * is same as the create time of the App Registration. For never-expiring App Registrations, this field is set initially to
     * zero time value. If a never-expiry App Registration is later changed to have an expiration, the timestamp marking the
     * start of this transition is recorded in this field.
     */
    startTime?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.IamAppRegistrationTag>[]>;
    /**
     * A reference to a iamUser resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    users?: pulumi.Input<pulumi.Input<inputs.IamAppRegistrationUser>[]>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.IamAppRegistrationVersionContext>[]>;
}
