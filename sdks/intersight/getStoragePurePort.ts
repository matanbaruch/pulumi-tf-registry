// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStoragePurePort(args?: GetStoragePurePortArgs, opts?: pulumi.InvokeOptions): Promise<GetStoragePurePortResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStoragePurePort:getStoragePurePort", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "array": args.array,
        "classId": args.classId,
        "controller": args.controller,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "failover": args.failover,
        "id": args.id,
        "iqn": args.iqn,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "nqn": args.nqn,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "portal": args.portal,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "speed": args.speed,
        "status": args.status,
        "tags": args.tags,
        "type": args.type,
        "versionContext": args.versionContext,
        "wwn": args.wwn,
        "wwnn": args.wwnn,
        "wwpn": args.wwpn,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStoragePurePort.
 */
export interface GetStoragePurePortArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStoragePurePortAncestor[];
    array?: inputs.GetStoragePurePortArray;
    classId?: string;
    controller?: inputs.GetStoragePurePortController;
    createTime?: string;
    domainGroupMoid?: string;
    failover?: string;
    id?: string;
    iqn?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    nqn?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStoragePurePortParent;
    permissionResources?: inputs.GetStoragePurePortPermissionResource[];
    portal?: string;
    registeredDevice?: inputs.GetStoragePurePortRegisteredDevice;
    sharedScope?: string;
    speed?: number;
    status?: string;
    tags?: inputs.GetStoragePurePortTag[];
    type?: string;
    versionContext?: inputs.GetStoragePurePortVersionContext;
    wwn?: string;
    wwnn?: string;
    wwpn?: string;
}

/**
 * A collection of values returned by getStoragePurePort.
 */
export interface GetStoragePurePortResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStoragePurePortAncestor[];
    readonly array?: outputs.GetStoragePurePortArray;
    readonly classId?: string;
    readonly controller?: outputs.GetStoragePurePortController;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly failover?: string;
    readonly id: string;
    readonly iqn?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nqn?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStoragePurePortParent;
    readonly permissionResources?: outputs.GetStoragePurePortPermissionResource[];
    readonly portal?: string;
    readonly registeredDevice?: outputs.GetStoragePurePortRegisteredDevice;
    readonly results: outputs.GetStoragePurePortResult[];
    readonly sharedScope?: string;
    readonly speed?: number;
    readonly status?: string;
    readonly tags?: outputs.GetStoragePurePortTag[];
    readonly type?: string;
    readonly versionContext?: outputs.GetStoragePurePortVersionContext;
    readonly wwn?: string;
    readonly wwnn?: string;
    readonly wwpn?: string;
}
export function getStoragePurePortOutput(args?: GetStoragePurePortOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStoragePurePortResult> {
    return pulumi.output(args).apply((a: any) => getStoragePurePort(a, opts))
}

/**
 * A collection of arguments for invoking getStoragePurePort.
 */
export interface GetStoragePurePortOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStoragePurePortAncestorArgs>[]>;
    array?: pulumi.Input<inputs.GetStoragePurePortArrayArgs>;
    classId?: pulumi.Input<string>;
    controller?: pulumi.Input<inputs.GetStoragePurePortControllerArgs>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    failover?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    iqn?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nqn?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStoragePurePortParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStoragePurePortPermissionResourceArgs>[]>;
    portal?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetStoragePurePortRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    speed?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStoragePurePortTagArgs>[]>;
    type?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetStoragePurePortVersionContextArgs>;
    wwn?: pulumi.Input<string>;
    wwnn?: pulumi.Input<string>;
    wwpn?: pulumi.Input<string>;
}
