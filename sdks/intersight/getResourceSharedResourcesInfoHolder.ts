// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getResourceSharedResourcesInfoHolder(args?: GetResourceSharedResourcesInfoHolderArgs, opts?: pulumi.InvokeOptions): Promise<GetResourceSharedResourcesInfoHolderResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getResourceSharedResourcesInfoHolder:getResourceSharedResourcesInfoHolder", {
        "account": args.account,
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "peerObjects": args.peerObjects,
        "permissionResources": args.permissionResources,
        "sharedResource": args.sharedResource,
        "sharedScope": args.sharedScope,
        "sharedWithResource": args.sharedWithResource,
        "sharingRule": args.sharingRule,
        "sourceObject": args.sourceObject,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getResourceSharedResourcesInfoHolder.
 */
export interface GetResourceSharedResourcesInfoHolderArgs {
    account?: inputs.GetResourceSharedResourcesInfoHolderAccount;
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetResourceSharedResourcesInfoHolderAncestor[];
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetResourceSharedResourcesInfoHolderParent;
    peerObjects?: inputs.GetResourceSharedResourcesInfoHolderPeerObject[];
    permissionResources?: inputs.GetResourceSharedResourcesInfoHolderPermissionResource[];
    sharedResource?: inputs.GetResourceSharedResourcesInfoHolderSharedResource;
    sharedScope?: string;
    sharedWithResource?: inputs.GetResourceSharedResourcesInfoHolderSharedWithResource;
    sharingRule?: inputs.GetResourceSharedResourcesInfoHolderSharingRule;
    sourceObject?: inputs.GetResourceSharedResourcesInfoHolderSourceObject;
    tags?: inputs.GetResourceSharedResourcesInfoHolderTag[];
    versionContext?: inputs.GetResourceSharedResourcesInfoHolderVersionContext;
}

/**
 * A collection of values returned by getResourceSharedResourcesInfoHolder.
 */
export interface GetResourceSharedResourcesInfoHolderResult {
    readonly account?: outputs.GetResourceSharedResourcesInfoHolderAccount;
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetResourceSharedResourcesInfoHolderAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetResourceSharedResourcesInfoHolderParent;
    readonly peerObjects?: outputs.GetResourceSharedResourcesInfoHolderPeerObject[];
    readonly permissionResources?: outputs.GetResourceSharedResourcesInfoHolderPermissionResource[];
    readonly results: outputs.GetResourceSharedResourcesInfoHolderResult[];
    readonly sharedResource?: outputs.GetResourceSharedResourcesInfoHolderSharedResource;
    readonly sharedScope?: string;
    readonly sharedWithResource?: outputs.GetResourceSharedResourcesInfoHolderSharedWithResource;
    readonly sharingRule?: outputs.GetResourceSharedResourcesInfoHolderSharingRule;
    readonly sourceObject?: outputs.GetResourceSharedResourcesInfoHolderSourceObject;
    readonly tags?: outputs.GetResourceSharedResourcesInfoHolderTag[];
    readonly versionContext?: outputs.GetResourceSharedResourcesInfoHolderVersionContext;
}
export function getResourceSharedResourcesInfoHolderOutput(args?: GetResourceSharedResourcesInfoHolderOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetResourceSharedResourcesInfoHolderResult> {
    return pulumi.output(args).apply((a: any) => getResourceSharedResourcesInfoHolder(a, opts))
}

/**
 * A collection of arguments for invoking getResourceSharedResourcesInfoHolder.
 */
export interface GetResourceSharedResourcesInfoHolderOutputArgs {
    account?: pulumi.Input<inputs.GetResourceSharedResourcesInfoHolderAccountArgs>;
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetResourceSharedResourcesInfoHolderAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetResourceSharedResourcesInfoHolderParentArgs>;
    peerObjects?: pulumi.Input<pulumi.Input<inputs.GetResourceSharedResourcesInfoHolderPeerObjectArgs>[]>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetResourceSharedResourcesInfoHolderPermissionResourceArgs>[]>;
    sharedResource?: pulumi.Input<inputs.GetResourceSharedResourcesInfoHolderSharedResourceArgs>;
    sharedScope?: pulumi.Input<string>;
    sharedWithResource?: pulumi.Input<inputs.GetResourceSharedResourcesInfoHolderSharedWithResourceArgs>;
    sharingRule?: pulumi.Input<inputs.GetResourceSharedResourcesInfoHolderSharingRuleArgs>;
    sourceObject?: pulumi.Input<inputs.GetResourceSharedResourcesInfoHolderSourceObjectArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetResourceSharedResourcesInfoHolderTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetResourceSharedResourcesInfoHolderVersionContextArgs>;
}
