// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSnmpPolicy(args?: GetSnmpPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetSnmpPolicyResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getSnmpPolicy:getSnmpPolicy", {
        "accessCommunityString": args.accessCommunityString,
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "communityAccess": args.communityAccess,
        "createTime": args.createTime,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "enabled": args.enabled,
        "engineId": args.engineId,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "organization": args.organization,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "profiles": args.profiles,
        "sharedScope": args.sharedScope,
        "snmpPort": args.snmpPort,
        "snmpTraps": args.snmpTraps,
        "snmpUsers": args.snmpUsers,
        "sysContact": args.sysContact,
        "sysLocation": args.sysLocation,
        "tags": args.tags,
        "trapCommunity": args.trapCommunity,
        "v2Enabled": args.v2Enabled,
        "v3Enabled": args.v3Enabled,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSnmpPolicy.
 */
export interface GetSnmpPolicyArgs {
    accessCommunityString?: string;
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetSnmpPolicyAncestor[];
    classId?: string;
    communityAccess?: string;
    createTime?: string;
    description?: string;
    domainGroupMoid?: string;
    enabled?: boolean;
    engineId?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    organization?: inputs.GetSnmpPolicyOrganization;
    owners?: string[];
    parent?: inputs.GetSnmpPolicyParent;
    permissionResources?: inputs.GetSnmpPolicyPermissionResource[];
    profiles?: inputs.GetSnmpPolicyProfile[];
    sharedScope?: string;
    snmpPort?: number;
    snmpTraps?: inputs.GetSnmpPolicySnmpTrap[];
    snmpUsers?: inputs.GetSnmpPolicySnmpUser[];
    sysContact?: string;
    sysLocation?: string;
    tags?: inputs.GetSnmpPolicyTag[];
    trapCommunity?: string;
    v2Enabled?: boolean;
    v3Enabled?: boolean;
    versionContext?: inputs.GetSnmpPolicyVersionContext;
}

/**
 * A collection of values returned by getSnmpPolicy.
 */
export interface GetSnmpPolicyResult {
    readonly accessCommunityString?: string;
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetSnmpPolicyAncestor[];
    readonly classId?: string;
    readonly communityAccess?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly enabled?: boolean;
    readonly engineId?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly organization?: outputs.GetSnmpPolicyOrganization;
    readonly owners?: string[];
    readonly parent?: outputs.GetSnmpPolicyParent;
    readonly permissionResources?: outputs.GetSnmpPolicyPermissionResource[];
    readonly profiles?: outputs.GetSnmpPolicyProfile[];
    readonly results: outputs.GetSnmpPolicyResult[];
    readonly sharedScope?: string;
    readonly snmpPort?: number;
    readonly snmpTraps?: outputs.GetSnmpPolicySnmpTrap[];
    readonly snmpUsers?: outputs.GetSnmpPolicySnmpUser[];
    readonly sysContact?: string;
    readonly sysLocation?: string;
    readonly tags?: outputs.GetSnmpPolicyTag[];
    readonly trapCommunity?: string;
    readonly v2Enabled?: boolean;
    readonly v3Enabled?: boolean;
    readonly versionContext?: outputs.GetSnmpPolicyVersionContext;
}
export function getSnmpPolicyOutput(args?: GetSnmpPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSnmpPolicyResult> {
    return pulumi.output(args).apply((a: any) => getSnmpPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getSnmpPolicy.
 */
export interface GetSnmpPolicyOutputArgs {
    accessCommunityString?: pulumi.Input<string>;
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetSnmpPolicyAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    communityAccess?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    engineId?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.GetSnmpPolicyOrganizationArgs>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetSnmpPolicyParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetSnmpPolicyPermissionResourceArgs>[]>;
    profiles?: pulumi.Input<pulumi.Input<inputs.GetSnmpPolicyProfileArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    snmpPort?: pulumi.Input<number>;
    snmpTraps?: pulumi.Input<pulumi.Input<inputs.GetSnmpPolicySnmpTrapArgs>[]>;
    snmpUsers?: pulumi.Input<pulumi.Input<inputs.GetSnmpPolicySnmpUserArgs>[]>;
    sysContact?: pulumi.Input<string>;
    sysLocation?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetSnmpPolicyTagArgs>[]>;
    trapCommunity?: pulumi.Input<string>;
    v2Enabled?: pulumi.Input<boolean>;
    v3Enabled?: pulumi.Input<boolean>;
    versionContext?: pulumi.Input<inputs.GetSnmpPolicyVersionContextArgs>;
}
