// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVirtualizationVmwareNetwork(args?: GetVirtualizationVmwareNetworkArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualizationVmwareNetworkResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getVirtualizationVmwareNetwork:getVirtualizationVmwareNetwork", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "forgedTransmits": args.forgedTransmits,
        "host": args.host,
        "id": args.id,
        "identity": args.identity,
        "macAddressChanges": args.macAddressChanges,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "nicTeamingAndFailover": args.nicTeamingAndFailover,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "promiscuousMode": args.promiscuousMode,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
        "virtualSwitch": args.virtualSwitch,
        "vlanId": args.vlanId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareNetwork.
 */
export interface GetVirtualizationVmwareNetworkArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetVirtualizationVmwareNetworkAncestor[];
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    forgedTransmits?: string;
    host?: inputs.GetVirtualizationVmwareNetworkHost;
    id?: string;
    identity?: string;
    macAddressChanges?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    nicTeamingAndFailover?: inputs.GetVirtualizationVmwareNetworkNicTeamingAndFailover;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetVirtualizationVmwareNetworkParent;
    permissionResources?: inputs.GetVirtualizationVmwareNetworkPermissionResource[];
    promiscuousMode?: string;
    registeredDevice?: inputs.GetVirtualizationVmwareNetworkRegisteredDevice;
    sharedScope?: string;
    tags?: inputs.GetVirtualizationVmwareNetworkTag[];
    versionContext?: inputs.GetVirtualizationVmwareNetworkVersionContext;
    virtualSwitch?: inputs.GetVirtualizationVmwareNetworkVirtualSwitch;
    vlanId?: number;
}

/**
 * A collection of values returned by getVirtualizationVmwareNetwork.
 */
export interface GetVirtualizationVmwareNetworkResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetVirtualizationVmwareNetworkAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly forgedTransmits?: string;
    readonly host?: outputs.GetVirtualizationVmwareNetworkHost;
    readonly id: string;
    readonly identity?: string;
    readonly macAddressChanges?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nicTeamingAndFailover?: outputs.GetVirtualizationVmwareNetworkNicTeamingAndFailover;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetVirtualizationVmwareNetworkParent;
    readonly permissionResources?: outputs.GetVirtualizationVmwareNetworkPermissionResource[];
    readonly promiscuousMode?: string;
    readonly registeredDevice?: outputs.GetVirtualizationVmwareNetworkRegisteredDevice;
    readonly results: outputs.GetVirtualizationVmwareNetworkResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetVirtualizationVmwareNetworkTag[];
    readonly versionContext?: outputs.GetVirtualizationVmwareNetworkVersionContext;
    readonly virtualSwitch?: outputs.GetVirtualizationVmwareNetworkVirtualSwitch;
    readonly vlanId?: number;
}
export function getVirtualizationVmwareNetworkOutput(args?: GetVirtualizationVmwareNetworkOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualizationVmwareNetworkResult> {
    return pulumi.output(args).apply((a: any) => getVirtualizationVmwareNetwork(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareNetwork.
 */
export interface GetVirtualizationVmwareNetworkOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareNetworkAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    forgedTransmits?: pulumi.Input<string>;
    host?: pulumi.Input<inputs.GetVirtualizationVmwareNetworkHostArgs>;
    id?: pulumi.Input<string>;
    identity?: pulumi.Input<string>;
    macAddressChanges?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nicTeamingAndFailover?: pulumi.Input<inputs.GetVirtualizationVmwareNetworkNicTeamingAndFailoverArgs>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetVirtualizationVmwareNetworkParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareNetworkPermissionResourceArgs>[]>;
    promiscuousMode?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetVirtualizationVmwareNetworkRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareNetworkTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetVirtualizationVmwareNetworkVersionContextArgs>;
    virtualSwitch?: pulumi.Input<inputs.GetVirtualizationVmwareNetworkVirtualSwitchArgs>;
    vlanId?: pulumi.Input<number>;
}
