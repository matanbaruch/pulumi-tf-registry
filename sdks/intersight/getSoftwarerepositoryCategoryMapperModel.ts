// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSoftwarerepositoryCategoryMapperModel(args?: GetSoftwarerepositoryCategoryMapperModelArgs, opts?: pulumi.InvokeOptions): Promise<GetSoftwarerepositoryCategoryMapperModelResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getSoftwarerepositoryCategoryMapperModel:getSoftwarerepositoryCategoryMapperModel", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "category": args.category,
        "classId": args.classId,
        "createTime": args.createTime,
        "distTag": args.distTag,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "imageType": args.imageType,
        "isNfsUpgradeSupported": args.isNfsUpgradeSupported,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "regexPattern": args.regexPattern,
        "seriesId": args.seriesId,
        "sharedScope": args.sharedScope,
        "supportedModels": args.supportedModels,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSoftwarerepositoryCategoryMapperModel.
 */
export interface GetSoftwarerepositoryCategoryMapperModelArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetSoftwarerepositoryCategoryMapperModelAncestor[];
    category?: string;
    classId?: string;
    createTime?: string;
    distTag?: string;
    domainGroupMoid?: string;
    id?: string;
    imageType?: string;
    isNfsUpgradeSupported?: boolean;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetSoftwarerepositoryCategoryMapperModelParent;
    permissionResources?: inputs.GetSoftwarerepositoryCategoryMapperModelPermissionResource[];
    regexPattern?: string;
    seriesId?: string;
    sharedScope?: string;
    supportedModels?: string[];
    tags?: inputs.GetSoftwarerepositoryCategoryMapperModelTag[];
    versionContext?: inputs.GetSoftwarerepositoryCategoryMapperModelVersionContext;
}

/**
 * A collection of values returned by getSoftwarerepositoryCategoryMapperModel.
 */
export interface GetSoftwarerepositoryCategoryMapperModelResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetSoftwarerepositoryCategoryMapperModelAncestor[];
    readonly category?: string;
    readonly classId?: string;
    readonly createTime?: string;
    readonly distTag?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly imageType?: string;
    readonly isNfsUpgradeSupported?: boolean;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetSoftwarerepositoryCategoryMapperModelParent;
    readonly permissionResources?: outputs.GetSoftwarerepositoryCategoryMapperModelPermissionResource[];
    readonly regexPattern?: string;
    readonly results: outputs.GetSoftwarerepositoryCategoryMapperModelResult[];
    readonly seriesId?: string;
    readonly sharedScope?: string;
    readonly supportedModels?: string[];
    readonly tags?: outputs.GetSoftwarerepositoryCategoryMapperModelTag[];
    readonly versionContext?: outputs.GetSoftwarerepositoryCategoryMapperModelVersionContext;
}
export function getSoftwarerepositoryCategoryMapperModelOutput(args?: GetSoftwarerepositoryCategoryMapperModelOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSoftwarerepositoryCategoryMapperModelResult> {
    return pulumi.output(args).apply((a: any) => getSoftwarerepositoryCategoryMapperModel(a, opts))
}

/**
 * A collection of arguments for invoking getSoftwarerepositoryCategoryMapperModel.
 */
export interface GetSoftwarerepositoryCategoryMapperModelOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetSoftwarerepositoryCategoryMapperModelAncestorArgs>[]>;
    category?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    distTag?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    imageType?: pulumi.Input<string>;
    isNfsUpgradeSupported?: pulumi.Input<boolean>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetSoftwarerepositoryCategoryMapperModelParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetSoftwarerepositoryCategoryMapperModelPermissionResourceArgs>[]>;
    regexPattern?: pulumi.Input<string>;
    seriesId?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    supportedModels?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetSoftwarerepositoryCategoryMapperModelTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetSoftwarerepositoryCategoryMapperModelVersionContextArgs>;
}
