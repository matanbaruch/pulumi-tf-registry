// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLicenseCustomerOp(args?: GetLicenseCustomerOpArgs, opts?: pulumi.InvokeOptions): Promise<GetLicenseCustomerOpResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getLicenseCustomerOp:getLicenseCustomerOp", {
        "accountLicenseData": args.accountLicenseData,
        "accountMoid": args.accountMoid,
        "activeAdmin": args.activeAdmin,
        "additionalProperties": args.additionalProperties,
        "allDevicesToDefaultTier": args.allDevicesToDefaultTier,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "clearApiSyncStatus": args.clearApiSyncStatus,
        "createTime": args.createTime,
        "deregisterDevice": args.deregisterDevice,
        "domainGroupMoid": args.domainGroupMoid,
        "enableTrial": args.enableTrial,
        "evaluationPeriod": args.evaluationPeriod,
        "extraEvaluation": args.extraEvaluation,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "renewAuthorization": args.renewAuthorization,
        "renewIdCertificate": args.renewIdCertificate,
        "sharedScope": args.sharedScope,
        "showAgentTechSupport": args.showAgentTechSupport,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLicenseCustomerOp.
 */
export interface GetLicenseCustomerOpArgs {
    accountLicenseData?: inputs.GetLicenseCustomerOpAccountLicenseData;
    accountMoid?: string;
    activeAdmin?: boolean;
    additionalProperties?: string;
    allDevicesToDefaultTier?: boolean;
    ancestors?: inputs.GetLicenseCustomerOpAncestor[];
    classId?: string;
    clearApiSyncStatus?: boolean;
    createTime?: string;
    deregisterDevice?: boolean;
    domainGroupMoid?: string;
    enableTrial?: boolean;
    evaluationPeriod?: number;
    extraEvaluation?: number;
    id?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetLicenseCustomerOpParent;
    permissionResources?: inputs.GetLicenseCustomerOpPermissionResource[];
    renewAuthorization?: boolean;
    renewIdCertificate?: boolean;
    sharedScope?: string;
    showAgentTechSupport?: boolean;
    tags?: inputs.GetLicenseCustomerOpTag[];
    versionContext?: inputs.GetLicenseCustomerOpVersionContext;
}

/**
 * A collection of values returned by getLicenseCustomerOp.
 */
export interface GetLicenseCustomerOpResult {
    readonly accountLicenseData?: outputs.GetLicenseCustomerOpAccountLicenseData;
    readonly accountMoid?: string;
    readonly activeAdmin?: boolean;
    readonly additionalProperties?: string;
    readonly allDevicesToDefaultTier?: boolean;
    readonly ancestors?: outputs.GetLicenseCustomerOpAncestor[];
    readonly classId?: string;
    readonly clearApiSyncStatus?: boolean;
    readonly createTime?: string;
    readonly deregisterDevice?: boolean;
    readonly domainGroupMoid?: string;
    readonly enableTrial?: boolean;
    readonly evaluationPeriod?: number;
    readonly extraEvaluation?: number;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetLicenseCustomerOpParent;
    readonly permissionResources?: outputs.GetLicenseCustomerOpPermissionResource[];
    readonly renewAuthorization?: boolean;
    readonly renewIdCertificate?: boolean;
    readonly results: outputs.GetLicenseCustomerOpResult[];
    readonly sharedScope?: string;
    readonly showAgentTechSupport?: boolean;
    readonly tags?: outputs.GetLicenseCustomerOpTag[];
    readonly versionContext?: outputs.GetLicenseCustomerOpVersionContext;
}
export function getLicenseCustomerOpOutput(args?: GetLicenseCustomerOpOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLicenseCustomerOpResult> {
    return pulumi.output(args).apply((a: any) => getLicenseCustomerOp(a, opts))
}

/**
 * A collection of arguments for invoking getLicenseCustomerOp.
 */
export interface GetLicenseCustomerOpOutputArgs {
    accountLicenseData?: pulumi.Input<inputs.GetLicenseCustomerOpAccountLicenseDataArgs>;
    accountMoid?: pulumi.Input<string>;
    activeAdmin?: pulumi.Input<boolean>;
    additionalProperties?: pulumi.Input<string>;
    allDevicesToDefaultTier?: pulumi.Input<boolean>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetLicenseCustomerOpAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    clearApiSyncStatus?: pulumi.Input<boolean>;
    createTime?: pulumi.Input<string>;
    deregisterDevice?: pulumi.Input<boolean>;
    domainGroupMoid?: pulumi.Input<string>;
    enableTrial?: pulumi.Input<boolean>;
    evaluationPeriod?: pulumi.Input<number>;
    extraEvaluation?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetLicenseCustomerOpParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetLicenseCustomerOpPermissionResourceArgs>[]>;
    renewAuthorization?: pulumi.Input<boolean>;
    renewIdCertificate?: pulumi.Input<boolean>;
    sharedScope?: pulumi.Input<string>;
    showAgentTechSupport?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetLicenseCustomerOpTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetLicenseCustomerOpVersionContextArgs>;
}
