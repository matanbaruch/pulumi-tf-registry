// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCapabilityEquipmentSlotArray(args?: GetCapabilityEquipmentSlotArrayArgs, opts?: pulumi.InvokeOptions): Promise<GetCapabilityEquipmentSlotArrayResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getCapabilityEquipmentSlotArray:getCapabilityEquipmentSlotArray", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "firstIndex": args.firstIndex,
        "height": args.height,
        "horizontalStartOffset": args.horizontalStartOffset,
        "id": args.id,
        "inlineGroupSeparation": args.inlineGroupSeparation,
        "inlineGroupSize": args.inlineGroupSize,
        "inlineOffset": args.inlineOffset,
        "location": args.location,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "numberOfSlots": args.numberOfSlots,
        "objectType": args.objectType,
        "orientation": args.orientation,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "pid": args.pid,
        "selector": args.selector,
        "sharedScope": args.sharedScope,
        "sku": args.sku,
        "slotsPerLine": args.slotsPerLine,
        "tags": args.tags,
        "transverseGroupSeparation": args.transverseGroupSeparation,
        "transverseGroupSize": args.transverseGroupSize,
        "transverseOffset": args.transverseOffset,
        "versionContext": args.versionContext,
        "verticalStartOffset": args.verticalStartOffset,
        "vid": args.vid,
        "width": args.width,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCapabilityEquipmentSlotArray.
 */
export interface GetCapabilityEquipmentSlotArrayArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetCapabilityEquipmentSlotArrayAncestor[];
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    firstIndex?: number;
    height?: number;
    horizontalStartOffset?: number;
    id?: string;
    inlineGroupSeparation?: number;
    inlineGroupSize?: number;
    inlineOffset?: number;
    location?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    numberOfSlots?: number;
    objectType?: string;
    orientation?: string;
    owners?: string[];
    parent?: inputs.GetCapabilityEquipmentSlotArrayParent;
    permissionResources?: inputs.GetCapabilityEquipmentSlotArrayPermissionResource[];
    pid?: string;
    selector?: string;
    sharedScope?: string;
    sku?: string;
    slotsPerLine?: number;
    tags?: inputs.GetCapabilityEquipmentSlotArrayTag[];
    transverseGroupSeparation?: number;
    transverseGroupSize?: number;
    transverseOffset?: number;
    versionContext?: inputs.GetCapabilityEquipmentSlotArrayVersionContext;
    verticalStartOffset?: number;
    vid?: string;
    width?: number;
}

/**
 * A collection of values returned by getCapabilityEquipmentSlotArray.
 */
export interface GetCapabilityEquipmentSlotArrayResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetCapabilityEquipmentSlotArrayAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly firstIndex?: number;
    readonly height?: number;
    readonly horizontalStartOffset?: number;
    readonly id: string;
    readonly inlineGroupSeparation?: number;
    readonly inlineGroupSize?: number;
    readonly inlineOffset?: number;
    readonly location?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly numberOfSlots?: number;
    readonly objectType?: string;
    readonly orientation?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetCapabilityEquipmentSlotArrayParent;
    readonly permissionResources?: outputs.GetCapabilityEquipmentSlotArrayPermissionResource[];
    readonly pid?: string;
    readonly results: outputs.GetCapabilityEquipmentSlotArrayResult[];
    readonly selector?: string;
    readonly sharedScope?: string;
    readonly sku?: string;
    readonly slotsPerLine?: number;
    readonly tags?: outputs.GetCapabilityEquipmentSlotArrayTag[];
    readonly transverseGroupSeparation?: number;
    readonly transverseGroupSize?: number;
    readonly transverseOffset?: number;
    readonly versionContext?: outputs.GetCapabilityEquipmentSlotArrayVersionContext;
    readonly verticalStartOffset?: number;
    readonly vid?: string;
    readonly width?: number;
}
export function getCapabilityEquipmentSlotArrayOutput(args?: GetCapabilityEquipmentSlotArrayOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCapabilityEquipmentSlotArrayResult> {
    return pulumi.output(args).apply((a: any) => getCapabilityEquipmentSlotArray(a, opts))
}

/**
 * A collection of arguments for invoking getCapabilityEquipmentSlotArray.
 */
export interface GetCapabilityEquipmentSlotArrayOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetCapabilityEquipmentSlotArrayAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    firstIndex?: pulumi.Input<number>;
    height?: pulumi.Input<number>;
    horizontalStartOffset?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    inlineGroupSeparation?: pulumi.Input<number>;
    inlineGroupSize?: pulumi.Input<number>;
    inlineOffset?: pulumi.Input<number>;
    location?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    numberOfSlots?: pulumi.Input<number>;
    objectType?: pulumi.Input<string>;
    orientation?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetCapabilityEquipmentSlotArrayParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetCapabilityEquipmentSlotArrayPermissionResourceArgs>[]>;
    pid?: pulumi.Input<string>;
    selector?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    sku?: pulumi.Input<string>;
    slotsPerLine?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetCapabilityEquipmentSlotArrayTagArgs>[]>;
    transverseGroupSeparation?: pulumi.Input<number>;
    transverseGroupSize?: pulumi.Input<number>;
    transverseOffset?: pulumi.Input<number>;
    versionContext?: pulumi.Input<inputs.GetCapabilityEquipmentSlotArrayVersionContextArgs>;
    verticalStartOffset?: pulumi.Input<number>;
    vid?: pulumi.Input<string>;
    width?: pulumi.Input<number>;
}
