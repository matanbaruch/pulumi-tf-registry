// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAdapterHostEthInterface(args?: GetAdapterHostEthInterfaceArgs, opts?: pulumi.InvokeOptions): Promise<GetAdapterHostEthInterfaceResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getAdapterHostEthInterface:getAdapterHostEthInterface", {
        "accountMoid": args.accountMoid,
        "acknowledgedPeerInterface": args.acknowledgedPeerInterface,
        "activeOperState": args.activeOperState,
        "activeVethOperState": args.activeVethOperState,
        "adapterUnit": args.adapterUnit,
        "additionalProperties": args.additionalProperties,
        "adminState": args.adminState,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "epDn": args.epDn,
        "hostEthInterfaceId": args.hostEthInterfaceId,
        "id": args.id,
        "interfaceType": args.interfaceType,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "macAddress": args.macAddress,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "operReasons": args.operReasons,
        "operState": args.operState,
        "operability": args.operability,
        "originalMacAddress": args.originalMacAddress,
        "owners": args.owners,
        "parent": args.parent,
        "pciAddr": args.pciAddr,
        "peerDn": args.peerDn,
        "peerInterface": args.peerInterface,
        "permissionResources": args.permissionResources,
        "pinGroupName": args.pinGroupName,
        "pinnedInterface": args.pinnedInterface,
        "qinqEnabled": args.qinqEnabled,
        "qinqVlan": args.qinqVlan,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "sharedScope": args.sharedScope,
        "standbyOperState": args.standbyOperState,
        "standbyVethOperState": args.standbyVethOperState,
        "standbyVethernet": args.standbyVethernet,
        "standbyVifId": args.standbyVifId,
        "tags": args.tags,
        "versionContext": args.versionContext,
        "vethAction": args.vethAction,
        "vethernet": args.vethernet,
        "vifId": args.vifId,
        "virtualizationPreference": args.virtualizationPreference,
        "vnicDn": args.vnicDn,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAdapterHostEthInterface.
 */
export interface GetAdapterHostEthInterfaceArgs {
    accountMoid?: string;
    acknowledgedPeerInterface?: inputs.GetAdapterHostEthInterfaceAcknowledgedPeerInterface;
    activeOperState?: string;
    activeVethOperState?: string;
    adapterUnit?: inputs.GetAdapterHostEthInterfaceAdapterUnit;
    additionalProperties?: string;
    adminState?: string;
    ancestors?: inputs.GetAdapterHostEthInterfaceAncestor[];
    classId?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    epDn?: string;
    hostEthInterfaceId?: number;
    id?: string;
    interfaceType?: string;
    inventoryDeviceInfo?: inputs.GetAdapterHostEthInterfaceInventoryDeviceInfo;
    macAddress?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    operReasons?: string[];
    operState?: string;
    operability?: string;
    originalMacAddress?: string;
    owners?: string[];
    parent?: inputs.GetAdapterHostEthInterfaceParent;
    pciAddr?: string;
    peerDn?: string;
    peerInterface?: inputs.GetAdapterHostEthInterfacePeerInterface;
    permissionResources?: inputs.GetAdapterHostEthInterfacePermissionResource[];
    pinGroupName?: string;
    pinnedInterface?: inputs.GetAdapterHostEthInterfacePinnedInterface;
    qinqEnabled?: boolean;
    qinqVlan?: number;
    registeredDevice?: inputs.GetAdapterHostEthInterfaceRegisteredDevice;
    rn?: string;
    sharedScope?: string;
    standbyOperState?: string;
    standbyVethOperState?: string;
    standbyVethernet?: inputs.GetAdapterHostEthInterfaceStandbyVethernet;
    standbyVifId?: number;
    tags?: inputs.GetAdapterHostEthInterfaceTag[];
    versionContext?: inputs.GetAdapterHostEthInterfaceVersionContext;
    vethAction?: string;
    vethernet?: inputs.GetAdapterHostEthInterfaceVethernet;
    vifId?: number;
    virtualizationPreference?: string;
    vnicDn?: string;
}

/**
 * A collection of values returned by getAdapterHostEthInterface.
 */
export interface GetAdapterHostEthInterfaceResult {
    readonly accountMoid?: string;
    readonly acknowledgedPeerInterface?: outputs.GetAdapterHostEthInterfaceAcknowledgedPeerInterface;
    readonly activeOperState?: string;
    readonly activeVethOperState?: string;
    readonly adapterUnit?: outputs.GetAdapterHostEthInterfaceAdapterUnit;
    readonly additionalProperties?: string;
    readonly adminState?: string;
    readonly ancestors?: outputs.GetAdapterHostEthInterfaceAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly epDn?: string;
    readonly hostEthInterfaceId?: number;
    readonly id: string;
    readonly interfaceType?: string;
    readonly inventoryDeviceInfo?: outputs.GetAdapterHostEthInterfaceInventoryDeviceInfo;
    readonly macAddress?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly operReasons?: string[];
    readonly operState?: string;
    readonly operability?: string;
    readonly originalMacAddress?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetAdapterHostEthInterfaceParent;
    readonly pciAddr?: string;
    readonly peerDn?: string;
    readonly peerInterface?: outputs.GetAdapterHostEthInterfacePeerInterface;
    readonly permissionResources?: outputs.GetAdapterHostEthInterfacePermissionResource[];
    readonly pinGroupName?: string;
    readonly pinnedInterface?: outputs.GetAdapterHostEthInterfacePinnedInterface;
    readonly qinqEnabled?: boolean;
    readonly qinqVlan?: number;
    readonly registeredDevice?: outputs.GetAdapterHostEthInterfaceRegisteredDevice;
    readonly results: outputs.GetAdapterHostEthInterfaceResult[];
    readonly rn?: string;
    readonly sharedScope?: string;
    readonly standbyOperState?: string;
    readonly standbyVethOperState?: string;
    readonly standbyVethernet?: outputs.GetAdapterHostEthInterfaceStandbyVethernet;
    readonly standbyVifId?: number;
    readonly tags?: outputs.GetAdapterHostEthInterfaceTag[];
    readonly versionContext?: outputs.GetAdapterHostEthInterfaceVersionContext;
    readonly vethAction?: string;
    readonly vethernet?: outputs.GetAdapterHostEthInterfaceVethernet;
    readonly vifId?: number;
    readonly virtualizationPreference?: string;
    readonly vnicDn?: string;
}
export function getAdapterHostEthInterfaceOutput(args?: GetAdapterHostEthInterfaceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAdapterHostEthInterfaceResult> {
    return pulumi.output(args).apply((a: any) => getAdapterHostEthInterface(a, opts))
}

/**
 * A collection of arguments for invoking getAdapterHostEthInterface.
 */
export interface GetAdapterHostEthInterfaceOutputArgs {
    accountMoid?: pulumi.Input<string>;
    acknowledgedPeerInterface?: pulumi.Input<inputs.GetAdapterHostEthInterfaceAcknowledgedPeerInterfaceArgs>;
    activeOperState?: pulumi.Input<string>;
    activeVethOperState?: pulumi.Input<string>;
    adapterUnit?: pulumi.Input<inputs.GetAdapterHostEthInterfaceAdapterUnitArgs>;
    additionalProperties?: pulumi.Input<string>;
    adminState?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetAdapterHostEthInterfaceAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    epDn?: pulumi.Input<string>;
    hostEthInterfaceId?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    interfaceType?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetAdapterHostEthInterfaceInventoryDeviceInfoArgs>;
    macAddress?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operReasons?: pulumi.Input<pulumi.Input<string>[]>;
    operState?: pulumi.Input<string>;
    operability?: pulumi.Input<string>;
    originalMacAddress?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetAdapterHostEthInterfaceParentArgs>;
    pciAddr?: pulumi.Input<string>;
    peerDn?: pulumi.Input<string>;
    peerInterface?: pulumi.Input<inputs.GetAdapterHostEthInterfacePeerInterfaceArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetAdapterHostEthInterfacePermissionResourceArgs>[]>;
    pinGroupName?: pulumi.Input<string>;
    pinnedInterface?: pulumi.Input<inputs.GetAdapterHostEthInterfacePinnedInterfaceArgs>;
    qinqEnabled?: pulumi.Input<boolean>;
    qinqVlan?: pulumi.Input<number>;
    registeredDevice?: pulumi.Input<inputs.GetAdapterHostEthInterfaceRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    standbyOperState?: pulumi.Input<string>;
    standbyVethOperState?: pulumi.Input<string>;
    standbyVethernet?: pulumi.Input<inputs.GetAdapterHostEthInterfaceStandbyVethernetArgs>;
    standbyVifId?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetAdapterHostEthInterfaceTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetAdapterHostEthInterfaceVersionContextArgs>;
    vethAction?: pulumi.Input<string>;
    vethernet?: pulumi.Input<inputs.GetAdapterHostEthInterfaceVethernetArgs>;
    vifId?: pulumi.Input<number>;
    virtualizationPreference?: pulumi.Input<string>;
    vnicDn?: pulumi.Input<string>;
}
