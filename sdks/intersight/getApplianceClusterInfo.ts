// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getApplianceClusterInfo(args?: GetApplianceClusterInfoArgs, opts?: pulumi.InvokeOptions): Promise<GetApplianceClusterInfoResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getApplianceClusterInfo:getApplianceClusterInfo", {
        "account": args.account,
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "deploymentSize": args.deploymentSize,
        "domainGroupMoid": args.domainGroupMoid,
        "gateway": args.gateway,
        "hostip": args.hostip,
        "hostname": args.hostname,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "peerkey": args.peerkey,
        "permissionResources": args.permissionResources,
        "responsekey": args.responsekey,
        "sharedScope": args.sharedScope,
        "status": args.status,
        "subnetmask": args.subnetmask,
        "tags": args.tags,
        "uuid": args.uuid,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getApplianceClusterInfo.
 */
export interface GetApplianceClusterInfoArgs {
    account?: inputs.GetApplianceClusterInfoAccount;
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetApplianceClusterInfoAncestor[];
    classId?: string;
    createTime?: string;
    deploymentSize?: string;
    domainGroupMoid?: string;
    gateway?: string;
    hostip?: string;
    hostname?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetApplianceClusterInfoParent;
    peerkey?: string;
    permissionResources?: inputs.GetApplianceClusterInfoPermissionResource[];
    responsekey?: string;
    sharedScope?: string;
    status?: string;
    subnetmask?: string;
    tags?: inputs.GetApplianceClusterInfoTag[];
    uuid?: string;
    versionContext?: inputs.GetApplianceClusterInfoVersionContext;
}

/**
 * A collection of values returned by getApplianceClusterInfo.
 */
export interface GetApplianceClusterInfoResult {
    readonly account?: outputs.GetApplianceClusterInfoAccount;
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetApplianceClusterInfoAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly deploymentSize?: string;
    readonly domainGroupMoid?: string;
    readonly gateway?: string;
    readonly hostip?: string;
    readonly hostname?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetApplianceClusterInfoParent;
    readonly peerkey?: string;
    readonly permissionResources?: outputs.GetApplianceClusterInfoPermissionResource[];
    readonly responsekey?: string;
    readonly results: outputs.GetApplianceClusterInfoResult[];
    readonly sharedScope?: string;
    readonly status?: string;
    readonly subnetmask?: string;
    readonly tags?: outputs.GetApplianceClusterInfoTag[];
    readonly uuid?: string;
    readonly versionContext?: outputs.GetApplianceClusterInfoVersionContext;
}
export function getApplianceClusterInfoOutput(args?: GetApplianceClusterInfoOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetApplianceClusterInfoResult> {
    return pulumi.output(args).apply((a: any) => getApplianceClusterInfo(a, opts))
}

/**
 * A collection of arguments for invoking getApplianceClusterInfo.
 */
export interface GetApplianceClusterInfoOutputArgs {
    account?: pulumi.Input<inputs.GetApplianceClusterInfoAccountArgs>;
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetApplianceClusterInfoAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deploymentSize?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    gateway?: pulumi.Input<string>;
    hostip?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetApplianceClusterInfoParentArgs>;
    peerkey?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetApplianceClusterInfoPermissionResourceArgs>[]>;
    responsekey?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    subnetmask?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetApplianceClusterInfoTagArgs>[]>;
    uuid?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetApplianceClusterInfoVersionContextArgs>;
}
