// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCondAlarm(args?: GetCondAlarmArgs, opts?: pulumi.InvokeOptions): Promise<GetCondAlarmResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getCondAlarm:getCondAlarm", {
        "accountMoid": args.accountMoid,
        "acknowledge": args.acknowledge,
        "acknowledgeBy": args.acknowledgeBy,
        "acknowledgeTime": args.acknowledgeTime,
        "additionalProperties": args.additionalProperties,
        "affectedMo": args.affectedMo,
        "affectedMoDisplayName": args.affectedMoDisplayName,
        "affectedMoId": args.affectedMoId,
        "affectedMoType": args.affectedMoType,
        "affectedObject": args.affectedObject,
        "ancestorMoId": args.ancestorMoId,
        "ancestorMoType": args.ancestorMoType,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "code": args.code,
        "createTime": args.createTime,
        "creationTime": args.creationTime,
        "definition": args.definition,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "lastTransitionTime": args.lastTransitionTime,
        "modTime": args.modTime,
        "moid": args.moid,
        "msAffectedObject": args.msAffectedObject,
        "name": args.name,
        "objectType": args.objectType,
        "origSeverity": args.origSeverity,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "severity": args.severity,
        "sharedScope": args.sharedScope,
        "suppressed": args.suppressed,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCondAlarm.
 */
export interface GetCondAlarmArgs {
    accountMoid?: string;
    acknowledge?: string;
    acknowledgeBy?: string;
    acknowledgeTime?: string;
    additionalProperties?: string;
    affectedMo?: inputs.GetCondAlarmAffectedMo;
    affectedMoDisplayName?: string;
    affectedMoId?: string;
    affectedMoType?: string;
    affectedObject?: string;
    ancestorMoId?: string;
    ancestorMoType?: string;
    ancestors?: inputs.GetCondAlarmAncestor[];
    classId?: string;
    code?: string;
    createTime?: string;
    creationTime?: string;
    definition?: inputs.GetCondAlarmDefinition;
    description?: string;
    domainGroupMoid?: string;
    id?: string;
    lastTransitionTime?: string;
    modTime?: string;
    moid?: string;
    msAffectedObject?: string;
    name?: string;
    objectType?: string;
    origSeverity?: string;
    owners?: string[];
    parent?: inputs.GetCondAlarmParent;
    permissionResources?: inputs.GetCondAlarmPermissionResource[];
    registeredDevice?: inputs.GetCondAlarmRegisteredDevice;
    severity?: string;
    sharedScope?: string;
    suppressed?: boolean;
    tags?: inputs.GetCondAlarmTag[];
    versionContext?: inputs.GetCondAlarmVersionContext;
}

/**
 * A collection of values returned by getCondAlarm.
 */
export interface GetCondAlarmResult {
    readonly accountMoid?: string;
    readonly acknowledge?: string;
    readonly acknowledgeBy?: string;
    readonly acknowledgeTime?: string;
    readonly additionalProperties?: string;
    readonly affectedMo?: outputs.GetCondAlarmAffectedMo;
    readonly affectedMoDisplayName?: string;
    readonly affectedMoId?: string;
    readonly affectedMoType?: string;
    readonly affectedObject?: string;
    readonly ancestorMoId?: string;
    readonly ancestorMoType?: string;
    readonly ancestors?: outputs.GetCondAlarmAncestor[];
    readonly classId?: string;
    readonly code?: string;
    readonly createTime?: string;
    readonly creationTime?: string;
    readonly definition?: outputs.GetCondAlarmDefinition;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly lastTransitionTime?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly msAffectedObject?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly origSeverity?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetCondAlarmParent;
    readonly permissionResources?: outputs.GetCondAlarmPermissionResource[];
    readonly registeredDevice?: outputs.GetCondAlarmRegisteredDevice;
    readonly results: outputs.GetCondAlarmResult[];
    readonly severity?: string;
    readonly sharedScope?: string;
    readonly suppressed?: boolean;
    readonly tags?: outputs.GetCondAlarmTag[];
    readonly versionContext?: outputs.GetCondAlarmVersionContext;
}
export function getCondAlarmOutput(args?: GetCondAlarmOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCondAlarmResult> {
    return pulumi.output(args).apply((a: any) => getCondAlarm(a, opts))
}

/**
 * A collection of arguments for invoking getCondAlarm.
 */
export interface GetCondAlarmOutputArgs {
    accountMoid?: pulumi.Input<string>;
    acknowledge?: pulumi.Input<string>;
    acknowledgeBy?: pulumi.Input<string>;
    acknowledgeTime?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    affectedMo?: pulumi.Input<inputs.GetCondAlarmAffectedMoArgs>;
    affectedMoDisplayName?: pulumi.Input<string>;
    affectedMoId?: pulumi.Input<string>;
    affectedMoType?: pulumi.Input<string>;
    affectedObject?: pulumi.Input<string>;
    ancestorMoId?: pulumi.Input<string>;
    ancestorMoType?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetCondAlarmAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    code?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    creationTime?: pulumi.Input<string>;
    definition?: pulumi.Input<inputs.GetCondAlarmDefinitionArgs>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    lastTransitionTime?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    msAffectedObject?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    origSeverity?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetCondAlarmParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetCondAlarmPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetCondAlarmRegisteredDeviceArgs>;
    severity?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    suppressed?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetCondAlarmTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetCondAlarmVersionContextArgs>;
}
