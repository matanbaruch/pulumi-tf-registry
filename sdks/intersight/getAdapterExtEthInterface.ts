// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAdapterExtEthInterface(args?: GetAdapterExtEthInterfaceArgs, opts?: pulumi.InvokeOptions): Promise<GetAdapterExtEthInterfaceResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getAdapterExtEthInterface:getAdapterExtEthInterface", {
        "accountMoid": args.accountMoid,
        "acknowledgedPeerInterface": args.acknowledgedPeerInterface,
        "adapterUnit": args.adapterUnit,
        "additionalProperties": args.additionalProperties,
        "adminState": args.adminState,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "epDn": args.epDn,
        "extEthInterfaceId": args.extEthInterfaceId,
        "id": args.id,
        "interfaceType": args.interfaceType,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "macAddress": args.macAddress,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "operReasons": args.operReasons,
        "operState": args.operState,
        "owners": args.owners,
        "parent": args.parent,
        "peerAggrPortId": args.peerAggrPortId,
        "peerDn": args.peerDn,
        "peerInterface": args.peerInterface,
        "peerPortId": args.peerPortId,
        "peerSlotId": args.peerSlotId,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "sharedScope": args.sharedScope,
        "switchId": args.switchId,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAdapterExtEthInterface.
 */
export interface GetAdapterExtEthInterfaceArgs {
    accountMoid?: string;
    acknowledgedPeerInterface?: inputs.GetAdapterExtEthInterfaceAcknowledgedPeerInterface;
    adapterUnit?: inputs.GetAdapterExtEthInterfaceAdapterUnit;
    additionalProperties?: string;
    adminState?: string;
    ancestors?: inputs.GetAdapterExtEthInterfaceAncestor[];
    classId?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    epDn?: string;
    extEthInterfaceId?: string;
    id?: string;
    interfaceType?: string;
    inventoryDeviceInfo?: inputs.GetAdapterExtEthInterfaceInventoryDeviceInfo;
    macAddress?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    operReasons?: string[];
    operState?: string;
    owners?: string[];
    parent?: inputs.GetAdapterExtEthInterfaceParent;
    peerAggrPortId?: number;
    peerDn?: string;
    peerInterface?: inputs.GetAdapterExtEthInterfacePeerInterface;
    peerPortId?: number;
    peerSlotId?: number;
    permissionResources?: inputs.GetAdapterExtEthInterfacePermissionResource[];
    registeredDevice?: inputs.GetAdapterExtEthInterfaceRegisteredDevice;
    rn?: string;
    sharedScope?: string;
    switchId?: string;
    tags?: inputs.GetAdapterExtEthInterfaceTag[];
    versionContext?: inputs.GetAdapterExtEthInterfaceVersionContext;
}

/**
 * A collection of values returned by getAdapterExtEthInterface.
 */
export interface GetAdapterExtEthInterfaceResult {
    readonly accountMoid?: string;
    readonly acknowledgedPeerInterface?: outputs.GetAdapterExtEthInterfaceAcknowledgedPeerInterface;
    readonly adapterUnit?: outputs.GetAdapterExtEthInterfaceAdapterUnit;
    readonly additionalProperties?: string;
    readonly adminState?: string;
    readonly ancestors?: outputs.GetAdapterExtEthInterfaceAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly epDn?: string;
    readonly extEthInterfaceId?: string;
    readonly id: string;
    readonly interfaceType?: string;
    readonly inventoryDeviceInfo?: outputs.GetAdapterExtEthInterfaceInventoryDeviceInfo;
    readonly macAddress?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly operReasons?: string[];
    readonly operState?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetAdapterExtEthInterfaceParent;
    readonly peerAggrPortId?: number;
    readonly peerDn?: string;
    readonly peerInterface?: outputs.GetAdapterExtEthInterfacePeerInterface;
    readonly peerPortId?: number;
    readonly peerSlotId?: number;
    readonly permissionResources?: outputs.GetAdapterExtEthInterfacePermissionResource[];
    readonly registeredDevice?: outputs.GetAdapterExtEthInterfaceRegisteredDevice;
    readonly results: outputs.GetAdapterExtEthInterfaceResult[];
    readonly rn?: string;
    readonly sharedScope?: string;
    readonly switchId?: string;
    readonly tags?: outputs.GetAdapterExtEthInterfaceTag[];
    readonly versionContext?: outputs.GetAdapterExtEthInterfaceVersionContext;
}
export function getAdapterExtEthInterfaceOutput(args?: GetAdapterExtEthInterfaceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAdapterExtEthInterfaceResult> {
    return pulumi.output(args).apply((a: any) => getAdapterExtEthInterface(a, opts))
}

/**
 * A collection of arguments for invoking getAdapterExtEthInterface.
 */
export interface GetAdapterExtEthInterfaceOutputArgs {
    accountMoid?: pulumi.Input<string>;
    acknowledgedPeerInterface?: pulumi.Input<inputs.GetAdapterExtEthInterfaceAcknowledgedPeerInterfaceArgs>;
    adapterUnit?: pulumi.Input<inputs.GetAdapterExtEthInterfaceAdapterUnitArgs>;
    additionalProperties?: pulumi.Input<string>;
    adminState?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetAdapterExtEthInterfaceAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    epDn?: pulumi.Input<string>;
    extEthInterfaceId?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    interfaceType?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetAdapterExtEthInterfaceInventoryDeviceInfoArgs>;
    macAddress?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operReasons?: pulumi.Input<pulumi.Input<string>[]>;
    operState?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetAdapterExtEthInterfaceParentArgs>;
    peerAggrPortId?: pulumi.Input<number>;
    peerDn?: pulumi.Input<string>;
    peerInterface?: pulumi.Input<inputs.GetAdapterExtEthInterfacePeerInterfaceArgs>;
    peerPortId?: pulumi.Input<number>;
    peerSlotId?: pulumi.Input<number>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetAdapterExtEthInterfacePermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetAdapterExtEthInterfaceRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    switchId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetAdapterExtEthInterfaceTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetAdapterExtEthInterfaceVersionContextArgs>;
}
