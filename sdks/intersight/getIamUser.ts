// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIamUser(args?: GetIamUserArgs, opts?: pulumi.InvokeOptions): Promise<GetIamUserResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getIamUser:getIamUser", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "apiKeys": args.apiKeys,
        "appRegistrations": args.appRegistrations,
        "classId": args.classId,
        "clientIpAddress": args.clientIpAddress,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "email": args.email,
        "firstName": args.firstName,
        "id": args.id,
        "idp": args.idp,
        "idpreference": args.idpreference,
        "lastLoginTime": args.lastLoginTime,
        "lastName": args.lastName,
        "lastRoleModifiedTime": args.lastRoleModifiedTime,
        "localUserPassword": args.localUserPassword,
        "lockedUntil": args.lockedUntil,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "oauthTokens": args.oauthTokens,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "permissions": args.permissions,
        "sessions": args.sessions,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "userIdOrEmail": args.userIdOrEmail,
        "userType": args.userType,
        "userUniqueIdentifier": args.userUniqueIdentifier,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIamUser.
 */
export interface GetIamUserArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetIamUserAncestor[];
    apiKeys?: inputs.GetIamUserApiKey[];
    appRegistrations?: inputs.GetIamUserAppRegistration[];
    classId?: string;
    clientIpAddress?: string;
    createTime?: string;
    domainGroupMoid?: string;
    email?: string;
    firstName?: string;
    id?: string;
    idp?: inputs.GetIamUserIdp;
    idpreference?: inputs.GetIamUserIdpreference;
    lastLoginTime?: string;
    lastName?: string;
    lastRoleModifiedTime?: string;
    localUserPassword?: inputs.GetIamUserLocalUserPassword;
    lockedUntil?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    oauthTokens?: inputs.GetIamUserOauthToken[];
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetIamUserParent;
    permissionResources?: inputs.GetIamUserPermissionResource[];
    permissions?: inputs.GetIamUserPermission[];
    sessions?: inputs.GetIamUserSession[];
    sharedScope?: string;
    tags?: inputs.GetIamUserTag[];
    userIdOrEmail?: string;
    userType?: string;
    userUniqueIdentifier?: string;
    versionContext?: inputs.GetIamUserVersionContext;
}

/**
 * A collection of values returned by getIamUser.
 */
export interface GetIamUserResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetIamUserAncestor[];
    readonly apiKeys?: outputs.GetIamUserApiKey[];
    readonly appRegistrations?: outputs.GetIamUserAppRegistration[];
    readonly classId?: string;
    readonly clientIpAddress?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly email?: string;
    readonly firstName?: string;
    readonly id: string;
    readonly idp?: outputs.GetIamUserIdp;
    readonly idpreference?: outputs.GetIamUserIdpreference;
    readonly lastLoginTime?: string;
    readonly lastName?: string;
    readonly lastRoleModifiedTime?: string;
    readonly localUserPassword?: outputs.GetIamUserLocalUserPassword;
    readonly lockedUntil?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly oauthTokens?: outputs.GetIamUserOauthToken[];
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetIamUserParent;
    readonly permissionResources?: outputs.GetIamUserPermissionResource[];
    readonly permissions?: outputs.GetIamUserPermission[];
    readonly results: outputs.GetIamUserResult[];
    readonly sessions?: outputs.GetIamUserSession[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetIamUserTag[];
    readonly userIdOrEmail?: string;
    readonly userType?: string;
    readonly userUniqueIdentifier?: string;
    readonly versionContext?: outputs.GetIamUserVersionContext;
}
export function getIamUserOutput(args?: GetIamUserOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIamUserResult> {
    return pulumi.output(args).apply((a: any) => getIamUser(a, opts))
}

/**
 * A collection of arguments for invoking getIamUser.
 */
export interface GetIamUserOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetIamUserAncestorArgs>[]>;
    apiKeys?: pulumi.Input<pulumi.Input<inputs.GetIamUserApiKeyArgs>[]>;
    appRegistrations?: pulumi.Input<pulumi.Input<inputs.GetIamUserAppRegistrationArgs>[]>;
    classId?: pulumi.Input<string>;
    clientIpAddress?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    firstName?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    idp?: pulumi.Input<inputs.GetIamUserIdpArgs>;
    idpreference?: pulumi.Input<inputs.GetIamUserIdpreferenceArgs>;
    lastLoginTime?: pulumi.Input<string>;
    lastName?: pulumi.Input<string>;
    lastRoleModifiedTime?: pulumi.Input<string>;
    localUserPassword?: pulumi.Input<inputs.GetIamUserLocalUserPasswordArgs>;
    lockedUntil?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    oauthTokens?: pulumi.Input<pulumi.Input<inputs.GetIamUserOauthTokenArgs>[]>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetIamUserParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetIamUserPermissionResourceArgs>[]>;
    permissions?: pulumi.Input<pulumi.Input<inputs.GetIamUserPermissionArgs>[]>;
    sessions?: pulumi.Input<pulumi.Input<inputs.GetIamUserSessionArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetIamUserTagArgs>[]>;
    userIdOrEmail?: pulumi.Input<string>;
    userType?: pulumi.Input<string>;
    userUniqueIdentifier?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetIamUserVersionContextArgs>;
}
