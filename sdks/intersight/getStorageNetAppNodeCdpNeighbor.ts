// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageNetAppNodeCdpNeighbor(args?: GetStorageNetAppNodeCdpNeighborArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageNetAppNodeCdpNeighborResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageNetAppNodeCdpNeighbor:getStorageNetAppNodeCdpNeighbor", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "arrayController": args.arrayController,
        "capabilities": args.capabilities,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceIp": args.deviceIp,
        "discoveredDevice": args.discoveredDevice,
        "domainGroupMoid": args.domainGroupMoid,
        "holdTimeRemaining": args.holdTimeRemaining,
        "id": args.id,
        "interface": args.interface,
        "modTime": args.modTime,
        "moid": args.moid,
        "nodeName": args.nodeName,
        "nrVersion": args.nrVersion,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "platform": args.platform,
        "port": args.port,
        "protocol": args.protocol,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageNetAppNodeCdpNeighbor.
 */
export interface GetStorageNetAppNodeCdpNeighborArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageNetAppNodeCdpNeighborAncestor[];
    arrayController?: inputs.GetStorageNetAppNodeCdpNeighborArrayController;
    capabilities?: string[];
    classId?: string;
    createTime?: string;
    deviceIp?: string;
    discoveredDevice?: string;
    domainGroupMoid?: string;
    holdTimeRemaining?: number;
    id?: string;
    interface?: string;
    modTime?: string;
    moid?: string;
    nodeName?: string;
    nrVersion?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageNetAppNodeCdpNeighborParent;
    permissionResources?: inputs.GetStorageNetAppNodeCdpNeighborPermissionResource[];
    platform?: string;
    port?: string;
    protocol?: string;
    sharedScope?: string;
    tags?: inputs.GetStorageNetAppNodeCdpNeighborTag[];
    versionContext?: inputs.GetStorageNetAppNodeCdpNeighborVersionContext;
}

/**
 * A collection of values returned by getStorageNetAppNodeCdpNeighbor.
 */
export interface GetStorageNetAppNodeCdpNeighborResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageNetAppNodeCdpNeighborAncestor[];
    readonly arrayController?: outputs.GetStorageNetAppNodeCdpNeighborArrayController;
    readonly capabilities?: string[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceIp?: string;
    readonly discoveredDevice?: string;
    readonly domainGroupMoid?: string;
    readonly holdTimeRemaining?: number;
    readonly id: string;
    readonly interface?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly nodeName?: string;
    readonly nrVersion?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageNetAppNodeCdpNeighborParent;
    readonly permissionResources?: outputs.GetStorageNetAppNodeCdpNeighborPermissionResource[];
    readonly platform?: string;
    readonly port?: string;
    readonly protocol?: string;
    readonly results: outputs.GetStorageNetAppNodeCdpNeighborResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetStorageNetAppNodeCdpNeighborTag[];
    readonly versionContext?: outputs.GetStorageNetAppNodeCdpNeighborVersionContext;
}
export function getStorageNetAppNodeCdpNeighborOutput(args?: GetStorageNetAppNodeCdpNeighborOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageNetAppNodeCdpNeighborResult> {
    return pulumi.output(args).apply((a: any) => getStorageNetAppNodeCdpNeighbor(a, opts))
}

/**
 * A collection of arguments for invoking getStorageNetAppNodeCdpNeighbor.
 */
export interface GetStorageNetAppNodeCdpNeighborOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppNodeCdpNeighborAncestorArgs>[]>;
    arrayController?: pulumi.Input<inputs.GetStorageNetAppNodeCdpNeighborArrayControllerArgs>;
    capabilities?: pulumi.Input<pulumi.Input<string>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceIp?: pulumi.Input<string>;
    discoveredDevice?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    holdTimeRemaining?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    nodeName?: pulumi.Input<string>;
    nrVersion?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageNetAppNodeCdpNeighborParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppNodeCdpNeighborPermissionResourceArgs>[]>;
    platform?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppNodeCdpNeighborTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetStorageNetAppNodeCdpNeighborVersionContextArgs>;
}
