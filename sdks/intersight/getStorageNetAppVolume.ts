// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageNetAppVolume(args?: GetStorageNetAppVolumeArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageNetAppVolumeResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageNetAppVolume:getStorageNetAppVolume", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "array": args.array,
        "autosizeMode": args.autosizeMode,
        "avgPerformanceMetrics": args.avgPerformanceMetrics,
        "classId": args.classId,
        "createTime": args.createTime,
        "createdTime": args.createdTime,
        "diskPools": args.diskPools,
        "domainGroupMoid": args.domainGroupMoid,
        "events": args.events,
        "exportPolicyName": args.exportPolicyName,
        "flexCacheEndpointType": args.flexCacheEndpointType,
        "id": args.id,
        "isObjectStore": args.isObjectStore,
        "key": args.key,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "sharedScope": args.sharedScope,
        "snapshotAutodeleteEnabled": args.snapshotAutodeleteEnabled,
        "snapshotPolicyName": args.snapshotPolicyName,
        "snapshotPolicyUuid": args.snapshotPolicyUuid,
        "snapshotReservePercent": args.snapshotReservePercent,
        "snapshotUsed": args.snapshotUsed,
        "state": args.state,
        "storageUtilization": args.storageUtilization,
        "style": args.style,
        "svmName": args.svmName,
        "tags": args.tags,
        "tenant": args.tenant,
        "type": args.type,
        "uuid": args.uuid,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageNetAppVolume.
 */
export interface GetStorageNetAppVolumeArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageNetAppVolumeAncestor[];
    array?: inputs.GetStorageNetAppVolumeArray;
    autosizeMode?: string;
    avgPerformanceMetrics?: inputs.GetStorageNetAppVolumeAvgPerformanceMetrics;
    classId?: string;
    createTime?: string;
    createdTime?: string;
    diskPools?: inputs.GetStorageNetAppVolumeDiskPool[];
    domainGroupMoid?: string;
    events?: inputs.GetStorageNetAppVolumeEvent[];
    exportPolicyName?: string;
    flexCacheEndpointType?: string;
    id?: string;
    isObjectStore?: boolean;
    key?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageNetAppVolumeParent;
    permissionResources?: inputs.GetStorageNetAppVolumePermissionResource[];
    sharedScope?: string;
    snapshotAutodeleteEnabled?: boolean;
    snapshotPolicyName?: string;
    snapshotPolicyUuid?: string;
    snapshotReservePercent?: number;
    snapshotUsed?: number;
    state?: string;
    storageUtilization?: inputs.GetStorageNetAppVolumeStorageUtilization;
    style?: string;
    svmName?: string;
    tags?: inputs.GetStorageNetAppVolumeTag[];
    tenant?: inputs.GetStorageNetAppVolumeTenant;
    type?: string;
    uuid?: string;
    versionContext?: inputs.GetStorageNetAppVolumeVersionContext;
}

/**
 * A collection of values returned by getStorageNetAppVolume.
 */
export interface GetStorageNetAppVolumeResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageNetAppVolumeAncestor[];
    readonly array?: outputs.GetStorageNetAppVolumeArray;
    readonly autosizeMode?: string;
    readonly avgPerformanceMetrics?: outputs.GetStorageNetAppVolumeAvgPerformanceMetrics;
    readonly classId?: string;
    readonly createTime?: string;
    readonly createdTime?: string;
    readonly diskPools?: outputs.GetStorageNetAppVolumeDiskPool[];
    readonly domainGroupMoid?: string;
    readonly events?: outputs.GetStorageNetAppVolumeEvent[];
    readonly exportPolicyName?: string;
    readonly flexCacheEndpointType?: string;
    readonly id: string;
    readonly isObjectStore?: boolean;
    readonly key?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageNetAppVolumeParent;
    readonly permissionResources?: outputs.GetStorageNetAppVolumePermissionResource[];
    readonly results: outputs.GetStorageNetAppVolumeResult[];
    readonly sharedScope?: string;
    readonly snapshotAutodeleteEnabled?: boolean;
    readonly snapshotPolicyName?: string;
    readonly snapshotPolicyUuid?: string;
    readonly snapshotReservePercent?: number;
    readonly snapshotUsed?: number;
    readonly state?: string;
    readonly storageUtilization?: outputs.GetStorageNetAppVolumeStorageUtilization;
    readonly style?: string;
    readonly svmName?: string;
    readonly tags?: outputs.GetStorageNetAppVolumeTag[];
    readonly tenant?: outputs.GetStorageNetAppVolumeTenant;
    readonly type?: string;
    readonly uuid?: string;
    readonly versionContext?: outputs.GetStorageNetAppVolumeVersionContext;
}
export function getStorageNetAppVolumeOutput(args?: GetStorageNetAppVolumeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageNetAppVolumeResult> {
    return pulumi.output(args).apply((a: any) => getStorageNetAppVolume(a, opts))
}

/**
 * A collection of arguments for invoking getStorageNetAppVolume.
 */
export interface GetStorageNetAppVolumeOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppVolumeAncestorArgs>[]>;
    array?: pulumi.Input<inputs.GetStorageNetAppVolumeArrayArgs>;
    autosizeMode?: pulumi.Input<string>;
    avgPerformanceMetrics?: pulumi.Input<inputs.GetStorageNetAppVolumeAvgPerformanceMetricsArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    createdTime?: pulumi.Input<string>;
    diskPools?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppVolumeDiskPoolArgs>[]>;
    domainGroupMoid?: pulumi.Input<string>;
    events?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppVolumeEventArgs>[]>;
    exportPolicyName?: pulumi.Input<string>;
    flexCacheEndpointType?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    isObjectStore?: pulumi.Input<boolean>;
    key?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageNetAppVolumeParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppVolumePermissionResourceArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    snapshotAutodeleteEnabled?: pulumi.Input<boolean>;
    snapshotPolicyName?: pulumi.Input<string>;
    snapshotPolicyUuid?: pulumi.Input<string>;
    snapshotReservePercent?: pulumi.Input<number>;
    snapshotUsed?: pulumi.Input<number>;
    state?: pulumi.Input<string>;
    storageUtilization?: pulumi.Input<inputs.GetStorageNetAppVolumeStorageUtilizationArgs>;
    style?: pulumi.Input<string>;
    svmName?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppVolumeTagArgs>[]>;
    tenant?: pulumi.Input<inputs.GetStorageNetAppVolumeTenantArgs>;
    type?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetStorageNetAppVolumeVersionContextArgs>;
}
