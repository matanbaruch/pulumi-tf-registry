// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageNetAppEthernetPort(args?: GetStorageNetAppEthernetPortArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageNetAppEthernetPortResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageNetAppEthernetPort:getStorageNetAppEthernetPort", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "arrayController": args.arrayController,
        "broadcastDomainName": args.broadcastDomainName,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "enabled": args.enabled,
        "events": args.events,
        "id": args.id,
        "macAddress": args.macAddress,
        "modTime": args.modTime,
        "moid": args.moid,
        "mtu": args.mtu,
        "name": args.name,
        "netAppEthernetPortLag": args.netAppEthernetPortLag,
        "netAppEthernetPortVlan": args.netAppEthernetPortVlan,
        "nodeName": args.nodeName,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "portState": args.portState,
        "sharedScope": args.sharedScope,
        "speed": args.speed,
        "state": args.state,
        "tags": args.tags,
        "type": args.type,
        "uuid": args.uuid,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageNetAppEthernetPort.
 */
export interface GetStorageNetAppEthernetPortArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageNetAppEthernetPortAncestor[];
    arrayController?: inputs.GetStorageNetAppEthernetPortArrayController;
    broadcastDomainName?: string;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    enabled?: string;
    events?: inputs.GetStorageNetAppEthernetPortEvent[];
    id?: string;
    macAddress?: string;
    modTime?: string;
    moid?: string;
    mtu?: number;
    name?: string;
    netAppEthernetPortLag?: inputs.GetStorageNetAppEthernetPortNetAppEthernetPortLag;
    netAppEthernetPortVlan?: inputs.GetStorageNetAppEthernetPortNetAppEthernetPortVlan;
    nodeName?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageNetAppEthernetPortParent;
    permissionResources?: inputs.GetStorageNetAppEthernetPortPermissionResource[];
    portState?: string;
    sharedScope?: string;
    speed?: number;
    state?: string;
    tags?: inputs.GetStorageNetAppEthernetPortTag[];
    type?: string;
    uuid?: string;
    versionContext?: inputs.GetStorageNetAppEthernetPortVersionContext;
}

/**
 * A collection of values returned by getStorageNetAppEthernetPort.
 */
export interface GetStorageNetAppEthernetPortResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageNetAppEthernetPortAncestor[];
    readonly arrayController?: outputs.GetStorageNetAppEthernetPortArrayController;
    readonly broadcastDomainName?: string;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly enabled?: string;
    readonly events?: outputs.GetStorageNetAppEthernetPortEvent[];
    readonly id: string;
    readonly macAddress?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly mtu?: number;
    readonly name?: string;
    readonly netAppEthernetPortLag?: outputs.GetStorageNetAppEthernetPortNetAppEthernetPortLag;
    readonly netAppEthernetPortVlan?: outputs.GetStorageNetAppEthernetPortNetAppEthernetPortVlan;
    readonly nodeName?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageNetAppEthernetPortParent;
    readonly permissionResources?: outputs.GetStorageNetAppEthernetPortPermissionResource[];
    readonly portState?: string;
    readonly results: outputs.GetStorageNetAppEthernetPortResult[];
    readonly sharedScope?: string;
    readonly speed?: number;
    readonly state?: string;
    readonly tags?: outputs.GetStorageNetAppEthernetPortTag[];
    readonly type?: string;
    readonly uuid?: string;
    readonly versionContext?: outputs.GetStorageNetAppEthernetPortVersionContext;
}
export function getStorageNetAppEthernetPortOutput(args?: GetStorageNetAppEthernetPortOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageNetAppEthernetPortResult> {
    return pulumi.output(args).apply((a: any) => getStorageNetAppEthernetPort(a, opts))
}

/**
 * A collection of arguments for invoking getStorageNetAppEthernetPort.
 */
export interface GetStorageNetAppEthernetPortOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppEthernetPortAncestorArgs>[]>;
    arrayController?: pulumi.Input<inputs.GetStorageNetAppEthernetPortArrayControllerArgs>;
    broadcastDomainName?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    enabled?: pulumi.Input<string>;
    events?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppEthernetPortEventArgs>[]>;
    id?: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    netAppEthernetPortLag?: pulumi.Input<inputs.GetStorageNetAppEthernetPortNetAppEthernetPortLagArgs>;
    netAppEthernetPortVlan?: pulumi.Input<inputs.GetStorageNetAppEthernetPortNetAppEthernetPortVlanArgs>;
    nodeName?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageNetAppEthernetPortParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppEthernetPortPermissionResourceArgs>[]>;
    portState?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    speed?: pulumi.Input<number>;
    state?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppEthernetPortTagArgs>[]>;
    type?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetStorageNetAppEthernetPortVersionContextArgs>;
}
