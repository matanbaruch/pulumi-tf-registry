// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getApplianceBackup(args?: GetApplianceBackupArgs, opts?: pulumi.InvokeOptions): Promise<GetApplianceBackupResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getApplianceBackup:getApplianceBackup", {
        "account": args.account,
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "elapsedTime": args.elapsedTime,
        "endTime": args.endTime,
        "filename": args.filename,
        "id": args.id,
        "isManual": args.isManual,
        "isPasswordSet": args.isPasswordSet,
        "messages": args.messages,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "password": args.password,
        "permissionResources": args.permissionResources,
        "protocol": args.protocol,
        "remoteHost": args.remoteHost,
        "remotePath": args.remotePath,
        "remotePort": args.remotePort,
        "sharedScope": args.sharedScope,
        "startTime": args.startTime,
        "status": args.status,
        "tags": args.tags,
        "username": args.username,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getApplianceBackup.
 */
export interface GetApplianceBackupArgs {
    account?: inputs.GetApplianceBackupAccount;
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetApplianceBackupAncestor[];
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    elapsedTime?: number;
    endTime?: string;
    filename?: string;
    id?: string;
    isManual?: boolean;
    isPasswordSet?: boolean;
    messages?: string[];
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetApplianceBackupParent;
    password?: string;
    permissionResources?: inputs.GetApplianceBackupPermissionResource[];
    protocol?: string;
    remoteHost?: string;
    remotePath?: string;
    remotePort?: number;
    sharedScope?: string;
    startTime?: string;
    status?: string;
    tags?: inputs.GetApplianceBackupTag[];
    username?: string;
    versionContext?: inputs.GetApplianceBackupVersionContext;
}

/**
 * A collection of values returned by getApplianceBackup.
 */
export interface GetApplianceBackupResult {
    readonly account?: outputs.GetApplianceBackupAccount;
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetApplianceBackupAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly elapsedTime?: number;
    readonly endTime?: string;
    readonly filename?: string;
    readonly id: string;
    readonly isManual?: boolean;
    readonly isPasswordSet?: boolean;
    readonly messages?: string[];
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetApplianceBackupParent;
    readonly password?: string;
    readonly permissionResources?: outputs.GetApplianceBackupPermissionResource[];
    readonly protocol?: string;
    readonly remoteHost?: string;
    readonly remotePath?: string;
    readonly remotePort?: number;
    readonly results: outputs.GetApplianceBackupResult[];
    readonly sharedScope?: string;
    readonly startTime?: string;
    readonly status?: string;
    readonly tags?: outputs.GetApplianceBackupTag[];
    readonly username?: string;
    readonly versionContext?: outputs.GetApplianceBackupVersionContext;
}
export function getApplianceBackupOutput(args?: GetApplianceBackupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetApplianceBackupResult> {
    return pulumi.output(args).apply((a: any) => getApplianceBackup(a, opts))
}

/**
 * A collection of arguments for invoking getApplianceBackup.
 */
export interface GetApplianceBackupOutputArgs {
    account?: pulumi.Input<inputs.GetApplianceBackupAccountArgs>;
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetApplianceBackupAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    elapsedTime?: pulumi.Input<number>;
    endTime?: pulumi.Input<string>;
    filename?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    isManual?: pulumi.Input<boolean>;
    isPasswordSet?: pulumi.Input<boolean>;
    messages?: pulumi.Input<pulumi.Input<string>[]>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetApplianceBackupParentArgs>;
    password?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetApplianceBackupPermissionResourceArgs>[]>;
    protocol?: pulumi.Input<string>;
    remoteHost?: pulumi.Input<string>;
    remotePath?: pulumi.Input<string>;
    remotePort?: pulumi.Input<number>;
    sharedScope?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetApplianceBackupTagArgs>[]>;
    username?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetApplianceBackupVersionContextArgs>;
}
