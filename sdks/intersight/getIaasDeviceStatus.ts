// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIaasDeviceStatus(args?: GetIaasDeviceStatusArgs, opts?: pulumi.InvokeOptions): Promise<GetIaasDeviceStatusResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getIaasDeviceStatus:getIaasDeviceStatus", {
        "accountMoid": args.accountMoid,
        "accountName": args.accountName,
        "accountType": args.accountType,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "category": args.category,
        "claimStatus": args.claimStatus,
        "classId": args.classId,
        "connectionStatus": args.connectionStatus,
        "createTime": args.createTime,
        "deviceModel": args.deviceModel,
        "deviceVendor": args.deviceVendor,
        "deviceVersion": args.deviceVersion,
        "domainGroupMoid": args.domainGroupMoid,
        "guid": args.guid,
        "id": args.id,
        "ipAddress": args.ipAddress,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "pod": args.pod,
        "podType": args.podType,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIaasDeviceStatus.
 */
export interface GetIaasDeviceStatusArgs {
    accountMoid?: string;
    accountName?: string;
    accountType?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetIaasDeviceStatusAncestor[];
    category?: string;
    claimStatus?: string;
    classId?: string;
    connectionStatus?: string;
    createTime?: string;
    deviceModel?: string;
    deviceVendor?: string;
    deviceVersion?: string;
    domainGroupMoid?: string;
    guid?: inputs.GetIaasDeviceStatusGuid;
    id?: string;
    ipAddress?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetIaasDeviceStatusParent;
    permissionResources?: inputs.GetIaasDeviceStatusPermissionResource[];
    pod?: string;
    podType?: string;
    sharedScope?: string;
    tags?: inputs.GetIaasDeviceStatusTag[];
    versionContext?: inputs.GetIaasDeviceStatusVersionContext;
}

/**
 * A collection of values returned by getIaasDeviceStatus.
 */
export interface GetIaasDeviceStatusResult {
    readonly accountMoid?: string;
    readonly accountName?: string;
    readonly accountType?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetIaasDeviceStatusAncestor[];
    readonly category?: string;
    readonly claimStatus?: string;
    readonly classId?: string;
    readonly connectionStatus?: string;
    readonly createTime?: string;
    readonly deviceModel?: string;
    readonly deviceVendor?: string;
    readonly deviceVersion?: string;
    readonly domainGroupMoid?: string;
    readonly guid?: outputs.GetIaasDeviceStatusGuid;
    readonly id: string;
    readonly ipAddress?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetIaasDeviceStatusParent;
    readonly permissionResources?: outputs.GetIaasDeviceStatusPermissionResource[];
    readonly pod?: string;
    readonly podType?: string;
    readonly results: outputs.GetIaasDeviceStatusResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetIaasDeviceStatusTag[];
    readonly versionContext?: outputs.GetIaasDeviceStatusVersionContext;
}
export function getIaasDeviceStatusOutput(args?: GetIaasDeviceStatusOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIaasDeviceStatusResult> {
    return pulumi.output(args).apply((a: any) => getIaasDeviceStatus(a, opts))
}

/**
 * A collection of arguments for invoking getIaasDeviceStatus.
 */
export interface GetIaasDeviceStatusOutputArgs {
    accountMoid?: pulumi.Input<string>;
    accountName?: pulumi.Input<string>;
    accountType?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetIaasDeviceStatusAncestorArgs>[]>;
    category?: pulumi.Input<string>;
    claimStatus?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    connectionStatus?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceModel?: pulumi.Input<string>;
    deviceVendor?: pulumi.Input<string>;
    deviceVersion?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    guid?: pulumi.Input<inputs.GetIaasDeviceStatusGuidArgs>;
    id?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetIaasDeviceStatusParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetIaasDeviceStatusPermissionResourceArgs>[]>;
    pod?: pulumi.Input<string>;
    podType?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetIaasDeviceStatusTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetIaasDeviceStatusVersionContextArgs>;
}
