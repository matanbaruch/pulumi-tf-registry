// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMacpoolPool(args?: GetMacpoolPoolArgs, opts?: pulumi.InvokeOptions): Promise<GetMacpoolPoolResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getMacpoolPool:getMacpoolPool", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "assigned": args.assigned,
        "assignmentOrder": args.assignmentOrder,
        "blockHeads": args.blockHeads,
        "classId": args.classId,
        "createTime": args.createTime,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "macBlocks": args.macBlocks,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "organization": args.organization,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "reservations": args.reservations,
        "reserved": args.reserved,
        "sharedScope": args.sharedScope,
        "size": args.size,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMacpoolPool.
 */
export interface GetMacpoolPoolArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetMacpoolPoolAncestor[];
    assigned?: number;
    assignmentOrder?: string;
    blockHeads?: inputs.GetMacpoolPoolBlockHead[];
    classId?: string;
    createTime?: string;
    description?: string;
    domainGroupMoid?: string;
    id?: string;
    macBlocks?: inputs.GetMacpoolPoolMacBlock[];
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    organization?: inputs.GetMacpoolPoolOrganization;
    owners?: string[];
    parent?: inputs.GetMacpoolPoolParent;
    permissionResources?: inputs.GetMacpoolPoolPermissionResource[];
    reservations?: inputs.GetMacpoolPoolReservation[];
    reserved?: number;
    sharedScope?: string;
    size?: number;
    tags?: inputs.GetMacpoolPoolTag[];
    versionContext?: inputs.GetMacpoolPoolVersionContext;
}

/**
 * A collection of values returned by getMacpoolPool.
 */
export interface GetMacpoolPoolResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetMacpoolPoolAncestor[];
    readonly assigned?: number;
    readonly assignmentOrder?: string;
    readonly blockHeads?: outputs.GetMacpoolPoolBlockHead[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly macBlocks?: outputs.GetMacpoolPoolMacBlock[];
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly organization?: outputs.GetMacpoolPoolOrganization;
    readonly owners?: string[];
    readonly parent?: outputs.GetMacpoolPoolParent;
    readonly permissionResources?: outputs.GetMacpoolPoolPermissionResource[];
    readonly reservations?: outputs.GetMacpoolPoolReservation[];
    readonly reserved?: number;
    readonly results: outputs.GetMacpoolPoolResult[];
    readonly sharedScope?: string;
    readonly size?: number;
    readonly tags?: outputs.GetMacpoolPoolTag[];
    readonly versionContext?: outputs.GetMacpoolPoolVersionContext;
}
export function getMacpoolPoolOutput(args?: GetMacpoolPoolOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMacpoolPoolResult> {
    return pulumi.output(args).apply((a: any) => getMacpoolPool(a, opts))
}

/**
 * A collection of arguments for invoking getMacpoolPool.
 */
export interface GetMacpoolPoolOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetMacpoolPoolAncestorArgs>[]>;
    assigned?: pulumi.Input<number>;
    assignmentOrder?: pulumi.Input<string>;
    blockHeads?: pulumi.Input<pulumi.Input<inputs.GetMacpoolPoolBlockHeadArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    macBlocks?: pulumi.Input<pulumi.Input<inputs.GetMacpoolPoolMacBlockArgs>[]>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.GetMacpoolPoolOrganizationArgs>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetMacpoolPoolParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetMacpoolPoolPermissionResourceArgs>[]>;
    reservations?: pulumi.Input<pulumi.Input<inputs.GetMacpoolPoolReservationArgs>[]>;
    reserved?: pulumi.Input<number>;
    sharedScope?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetMacpoolPoolTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetMacpoolPoolVersionContextArgs>;
}
