// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIppoolIpLease(args?: GetIppoolIpLeaseArgs, opts?: pulumi.InvokeOptions): Promise<GetIppoolIpLeaseResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getIppoolIpLease:getIppoolIpLease", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "allocationType": args.allocationType,
        "ancestors": args.ancestors,
        "assignedToEntity": args.assignedToEntity,
        "blockLease": args.blockLease,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "hasDuplicate": args.hasDuplicate,
        "id": args.id,
        "ipType": args.ipType,
        "ipV4Address": args.ipV4Address,
        "ipV4Config": args.ipV4Config,
        "ipV6Address": args.ipV6Address,
        "ipV6Config": args.ipV6Config,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "pool": args.pool,
        "poolMember": args.poolMember,
        "reservation": args.reservation,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "universe": args.universe,
        "versionContext": args.versionContext,
        "vrf": args.vrf,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIppoolIpLease.
 */
export interface GetIppoolIpLeaseArgs {
    accountMoid?: string;
    additionalProperties?: string;
    allocationType?: string;
    ancestors?: inputs.GetIppoolIpLeaseAncestor[];
    assignedToEntity?: inputs.GetIppoolIpLeaseAssignedToEntity;
    blockLease?: inputs.GetIppoolIpLeaseBlockLease;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    hasDuplicate?: boolean;
    id?: string;
    ipType?: string;
    ipV4Address?: string;
    ipV4Config?: inputs.GetIppoolIpLeaseIpV4Config;
    ipV6Address?: string;
    ipV6Config?: inputs.GetIppoolIpLeaseIpV6Config;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetIppoolIpLeaseParent;
    permissionResources?: inputs.GetIppoolIpLeasePermissionResource[];
    pool?: inputs.GetIppoolIpLeasePool;
    poolMember?: inputs.GetIppoolIpLeasePoolMember;
    reservation?: inputs.GetIppoolIpLeaseReservation;
    sharedScope?: string;
    tags?: inputs.GetIppoolIpLeaseTag[];
    universe?: inputs.GetIppoolIpLeaseUniverse;
    versionContext?: inputs.GetIppoolIpLeaseVersionContext;
    vrf?: inputs.GetIppoolIpLeaseVrf;
}

/**
 * A collection of values returned by getIppoolIpLease.
 */
export interface GetIppoolIpLeaseResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly allocationType?: string;
    readonly ancestors?: outputs.GetIppoolIpLeaseAncestor[];
    readonly assignedToEntity?: outputs.GetIppoolIpLeaseAssignedToEntity;
    readonly blockLease?: outputs.GetIppoolIpLeaseBlockLease;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly hasDuplicate?: boolean;
    readonly id: string;
    readonly ipType?: string;
    readonly ipV4Address?: string;
    readonly ipV4Config?: outputs.GetIppoolIpLeaseIpV4Config;
    readonly ipV6Address?: string;
    readonly ipV6Config?: outputs.GetIppoolIpLeaseIpV6Config;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetIppoolIpLeaseParent;
    readonly permissionResources?: outputs.GetIppoolIpLeasePermissionResource[];
    readonly pool?: outputs.GetIppoolIpLeasePool;
    readonly poolMember?: outputs.GetIppoolIpLeasePoolMember;
    readonly reservation?: outputs.GetIppoolIpLeaseReservation;
    readonly results: outputs.GetIppoolIpLeaseResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetIppoolIpLeaseTag[];
    readonly universe?: outputs.GetIppoolIpLeaseUniverse;
    readonly versionContext?: outputs.GetIppoolIpLeaseVersionContext;
    readonly vrf?: outputs.GetIppoolIpLeaseVrf;
}
export function getIppoolIpLeaseOutput(args?: GetIppoolIpLeaseOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIppoolIpLeaseResult> {
    return pulumi.output(args).apply((a: any) => getIppoolIpLease(a, opts))
}

/**
 * A collection of arguments for invoking getIppoolIpLease.
 */
export interface GetIppoolIpLeaseOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    allocationType?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetIppoolIpLeaseAncestorArgs>[]>;
    assignedToEntity?: pulumi.Input<inputs.GetIppoolIpLeaseAssignedToEntityArgs>;
    blockLease?: pulumi.Input<inputs.GetIppoolIpLeaseBlockLeaseArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    hasDuplicate?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    ipType?: pulumi.Input<string>;
    ipV4Address?: pulumi.Input<string>;
    ipV4Config?: pulumi.Input<inputs.GetIppoolIpLeaseIpV4ConfigArgs>;
    ipV6Address?: pulumi.Input<string>;
    ipV6Config?: pulumi.Input<inputs.GetIppoolIpLeaseIpV6ConfigArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetIppoolIpLeaseParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetIppoolIpLeasePermissionResourceArgs>[]>;
    pool?: pulumi.Input<inputs.GetIppoolIpLeasePoolArgs>;
    poolMember?: pulumi.Input<inputs.GetIppoolIpLeasePoolMemberArgs>;
    reservation?: pulumi.Input<inputs.GetIppoolIpLeaseReservationArgs>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetIppoolIpLeaseTagArgs>[]>;
    universe?: pulumi.Input<inputs.GetIppoolIpLeaseUniverseArgs>;
    versionContext?: pulumi.Input<inputs.GetIppoolIpLeaseVersionContextArgs>;
    vrf?: pulumi.Input<inputs.GetIppoolIpLeaseVrfArgs>;
}
