// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIqnpoolReservation(args?: GetIqnpoolReservationArgs, opts?: pulumi.InvokeOptions): Promise<GetIqnpoolReservationResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getIqnpoolReservation:getIqnpoolReservation", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "allocationType": args.allocationType,
        "ancestors": args.ancestors,
        "block": args.block,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "identity": args.identity,
        "iqnNumber": args.iqnNumber,
        "iqnPrefix": args.iqnPrefix,
        "iqnSuffix": args.iqnSuffix,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "organization": args.organization,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "pool": args.pool,
        "poolMember": args.poolMember,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "universe": args.universe,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIqnpoolReservation.
 */
export interface GetIqnpoolReservationArgs {
    accountMoid?: string;
    additionalProperties?: string;
    allocationType?: string;
    ancestors?: inputs.GetIqnpoolReservationAncestor[];
    block?: inputs.GetIqnpoolReservationBlock;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    id?: string;
    identity?: string;
    iqnNumber?: number;
    iqnPrefix?: string;
    iqnSuffix?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    organization?: inputs.GetIqnpoolReservationOrganization;
    owners?: string[];
    parent?: inputs.GetIqnpoolReservationParent;
    permissionResources?: inputs.GetIqnpoolReservationPermissionResource[];
    pool?: inputs.GetIqnpoolReservationPool;
    poolMember?: inputs.GetIqnpoolReservationPoolMember;
    sharedScope?: string;
    tags?: inputs.GetIqnpoolReservationTag[];
    universe?: inputs.GetIqnpoolReservationUniverse;
    versionContext?: inputs.GetIqnpoolReservationVersionContext;
}

/**
 * A collection of values returned by getIqnpoolReservation.
 */
export interface GetIqnpoolReservationResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly allocationType?: string;
    readonly ancestors?: outputs.GetIqnpoolReservationAncestor[];
    readonly block?: outputs.GetIqnpoolReservationBlock;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly identity?: string;
    readonly iqnNumber?: number;
    readonly iqnPrefix?: string;
    readonly iqnSuffix?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly organization?: outputs.GetIqnpoolReservationOrganization;
    readonly owners?: string[];
    readonly parent?: outputs.GetIqnpoolReservationParent;
    readonly permissionResources?: outputs.GetIqnpoolReservationPermissionResource[];
    readonly pool?: outputs.GetIqnpoolReservationPool;
    readonly poolMember?: outputs.GetIqnpoolReservationPoolMember;
    readonly results: outputs.GetIqnpoolReservationResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetIqnpoolReservationTag[];
    readonly universe?: outputs.GetIqnpoolReservationUniverse;
    readonly versionContext?: outputs.GetIqnpoolReservationVersionContext;
}
export function getIqnpoolReservationOutput(args?: GetIqnpoolReservationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIqnpoolReservationResult> {
    return pulumi.output(args).apply((a: any) => getIqnpoolReservation(a, opts))
}

/**
 * A collection of arguments for invoking getIqnpoolReservation.
 */
export interface GetIqnpoolReservationOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    allocationType?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetIqnpoolReservationAncestorArgs>[]>;
    block?: pulumi.Input<inputs.GetIqnpoolReservationBlockArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    identity?: pulumi.Input<string>;
    iqnNumber?: pulumi.Input<number>;
    iqnPrefix?: pulumi.Input<string>;
    iqnSuffix?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.GetIqnpoolReservationOrganizationArgs>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetIqnpoolReservationParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetIqnpoolReservationPermissionResourceArgs>[]>;
    pool?: pulumi.Input<inputs.GetIqnpoolReservationPoolArgs>;
    poolMember?: pulumi.Input<inputs.GetIqnpoolReservationPoolMemberArgs>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetIqnpoolReservationTagArgs>[]>;
    universe?: pulumi.Input<inputs.GetIqnpoolReservationUniverseArgs>;
    versionContext?: pulumi.Input<inputs.GetIqnpoolReservationVersionContextArgs>;
}
