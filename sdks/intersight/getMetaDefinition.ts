// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMetaDefinition(args?: GetMetaDefinitionArgs, opts?: pulumi.InvokeOptions): Promise<GetMetaDefinitionResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getMetaDefinition:getMetaDefinition", {
        "accessPrivileges": args.accessPrivileges,
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestorClasses": args.ancestorClasses,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "displayNameMetas": args.displayNameMetas,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "identityConstraints": args.identityConstraints,
        "isConcrete": args.isConcrete,
        "metaType": args.metaType,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "namespace": args.namespace,
        "nrVersion": args.nrVersion,
        "objectType": args.objectType,
        "owner": args.owner,
        "owners": args.owners,
        "parent": args.parent,
        "parentClass": args.parentClass,
        "permissionResources": args.permissionResources,
        "permissionSupported": args.permissionSupported,
        "properties": args.properties,
        "rbacResource": args.rbacResource,
        "relationships": args.relationships,
        "resourcePoolTypes": args.resourcePoolTypes,
        "restPath": args.restPath,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMetaDefinition.
 */
export interface GetMetaDefinitionArgs {
    accessPrivileges?: inputs.GetMetaDefinitionAccessPrivilege[];
    accountMoid?: string;
    additionalProperties?: string;
    ancestorClasses?: string[];
    ancestors?: inputs.GetMetaDefinitionAncestor[];
    classId?: string;
    createTime?: string;
    displayNameMetas?: inputs.GetMetaDefinitionDisplayNameMeta[];
    domainGroupMoid?: string;
    id?: string;
    identityConstraints?: inputs.GetMetaDefinitionIdentityConstraint[];
    isConcrete?: boolean;
    metaType?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    namespace?: string;
    nrVersion?: string;
    objectType?: string;
    owner?: string;
    owners?: string[];
    parent?: inputs.GetMetaDefinitionParent;
    parentClass?: string;
    permissionResources?: inputs.GetMetaDefinitionPermissionResource[];
    permissionSupported?: boolean;
    properties?: inputs.GetMetaDefinitionProperty[];
    rbacResource?: boolean;
    relationships?: inputs.GetMetaDefinitionRelationship[];
    resourcePoolTypes?: string[];
    restPath?: string;
    sharedScope?: string;
    tags?: inputs.GetMetaDefinitionTag[];
    versionContext?: inputs.GetMetaDefinitionVersionContext;
}

/**
 * A collection of values returned by getMetaDefinition.
 */
export interface GetMetaDefinitionResult {
    readonly accessPrivileges?: outputs.GetMetaDefinitionAccessPrivilege[];
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestorClasses?: string[];
    readonly ancestors?: outputs.GetMetaDefinitionAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly displayNameMetas?: outputs.GetMetaDefinitionDisplayNameMeta[];
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly identityConstraints?: outputs.GetMetaDefinitionIdentityConstraint[];
    readonly isConcrete?: boolean;
    readonly metaType?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly namespace?: string;
    readonly nrVersion?: string;
    readonly objectType?: string;
    readonly owner?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetMetaDefinitionParent;
    readonly parentClass?: string;
    readonly permissionResources?: outputs.GetMetaDefinitionPermissionResource[];
    readonly permissionSupported?: boolean;
    readonly properties?: outputs.GetMetaDefinitionProperty[];
    readonly rbacResource?: boolean;
    readonly relationships?: outputs.GetMetaDefinitionRelationship[];
    readonly resourcePoolTypes?: string[];
    readonly restPath?: string;
    readonly results: outputs.GetMetaDefinitionResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetMetaDefinitionTag[];
    readonly versionContext?: outputs.GetMetaDefinitionVersionContext;
}
export function getMetaDefinitionOutput(args?: GetMetaDefinitionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMetaDefinitionResult> {
    return pulumi.output(args).apply((a: any) => getMetaDefinition(a, opts))
}

/**
 * A collection of arguments for invoking getMetaDefinition.
 */
export interface GetMetaDefinitionOutputArgs {
    accessPrivileges?: pulumi.Input<pulumi.Input<inputs.GetMetaDefinitionAccessPrivilegeArgs>[]>;
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestorClasses?: pulumi.Input<pulumi.Input<string>[]>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetMetaDefinitionAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    displayNameMetas?: pulumi.Input<pulumi.Input<inputs.GetMetaDefinitionDisplayNameMetaArgs>[]>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    identityConstraints?: pulumi.Input<pulumi.Input<inputs.GetMetaDefinitionIdentityConstraintArgs>[]>;
    isConcrete?: pulumi.Input<boolean>;
    metaType?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    nrVersion?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetMetaDefinitionParentArgs>;
    parentClass?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetMetaDefinitionPermissionResourceArgs>[]>;
    permissionSupported?: pulumi.Input<boolean>;
    properties?: pulumi.Input<pulumi.Input<inputs.GetMetaDefinitionPropertyArgs>[]>;
    rbacResource?: pulumi.Input<boolean>;
    relationships?: pulumi.Input<pulumi.Input<inputs.GetMetaDefinitionRelationshipArgs>[]>;
    resourcePoolTypes?: pulumi.Input<pulumi.Input<string>[]>;
    restPath?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetMetaDefinitionTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetMetaDefinitionVersionContextArgs>;
}
