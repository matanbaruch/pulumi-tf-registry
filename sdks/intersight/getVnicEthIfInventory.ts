// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVnicEthIfInventory(args?: GetVnicEthIfInventoryArgs, opts?: pulumi.InvokeOptions): Promise<GetVnicEthIfInventoryResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getVnicEthIfInventory:getVnicEthIfInventory", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "cdn": args.cdn,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "domainGroupMoid": args.domainGroupMoid,
        "ethAdapterPolicy": args.ethAdapterPolicy,
        "ethNetworkPolicy": args.ethNetworkPolicy,
        "ethQosPolicy": args.ethQosPolicy,
        "fabricEthNetworkControlPolicy": args.fabricEthNetworkControlPolicy,
        "fabricEthNetworkGroupPolicies": args.fabricEthNetworkGroupPolicies,
        "failoverEnabled": args.failoverEnabled,
        "id": args.id,
        "ipLease": args.ipLease,
        "iscsiBootPolicy": args.iscsiBootPolicy,
        "iscsiIpV4AddressAllocationType": args.iscsiIpV4AddressAllocationType,
        "iscsiIpV4Config": args.iscsiIpV4Config,
        "iscsiIpv4Address": args.iscsiIpv4Address,
        "lanConnectivityPolicy": args.lanConnectivityPolicy,
        "lcpVnic": args.lcpVnic,
        "macAddress": args.macAddress,
        "macAddressType": args.macAddressType,
        "macLease": args.macLease,
        "macPool": args.macPool,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "order": args.order,
        "overriddenLists": args.overriddenLists,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "pinGroupName": args.pinGroupName,
        "placement": args.placement,
        "sharedScope": args.sharedScope,
        "spVnics": args.spVnics,
        "srcTemplate": args.srcTemplate,
        "sriovSettings": args.sriovSettings,
        "standbyVifId": args.standbyVifId,
        "staticMacAddress": args.staticMacAddress,
        "tags": args.tags,
        "templateActions": args.templateActions,
        "templateSyncErrors": args.templateSyncErrors,
        "templateSyncStatus": args.templateSyncStatus,
        "usnicSettings": args.usnicSettings,
        "versionContext": args.versionContext,
        "vifId": args.vifId,
        "vmqSettings": args.vmqSettings,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVnicEthIfInventory.
 */
export interface GetVnicEthIfInventoryArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetVnicEthIfInventoryAncestor[];
    cdn?: inputs.GetVnicEthIfInventoryCdn;
    classId?: string;
    createTime?: string;
    deviceMoId?: string;
    domainGroupMoid?: string;
    ethAdapterPolicy?: inputs.GetVnicEthIfInventoryEthAdapterPolicy;
    ethNetworkPolicy?: inputs.GetVnicEthIfInventoryEthNetworkPolicy;
    ethQosPolicy?: inputs.GetVnicEthIfInventoryEthQosPolicy;
    fabricEthNetworkControlPolicy?: inputs.GetVnicEthIfInventoryFabricEthNetworkControlPolicy;
    fabricEthNetworkGroupPolicies?: inputs.GetVnicEthIfInventoryFabricEthNetworkGroupPolicy[];
    failoverEnabled?: boolean;
    id?: string;
    ipLease?: inputs.GetVnicEthIfInventoryIpLease;
    iscsiBootPolicy?: inputs.GetVnicEthIfInventoryIscsiBootPolicy;
    iscsiIpV4AddressAllocationType?: string;
    iscsiIpV4Config?: inputs.GetVnicEthIfInventoryIscsiIpV4Config;
    iscsiIpv4Address?: string;
    lanConnectivityPolicy?: inputs.GetVnicEthIfInventoryLanConnectivityPolicy;
    lcpVnic?: inputs.GetVnicEthIfInventoryLcpVnic;
    macAddress?: string;
    macAddressType?: string;
    macLease?: inputs.GetVnicEthIfInventoryMacLease;
    macPool?: inputs.GetVnicEthIfInventoryMacPool;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    order?: number;
    overriddenLists?: string[];
    owners?: string[];
    parent?: inputs.GetVnicEthIfInventoryParent;
    permissionResources?: inputs.GetVnicEthIfInventoryPermissionResource[];
    pinGroupName?: string;
    placement?: inputs.GetVnicEthIfInventoryPlacement;
    sharedScope?: string;
    spVnics?: inputs.GetVnicEthIfInventorySpVnic[];
    srcTemplate?: inputs.GetVnicEthIfInventorySrcTemplate;
    sriovSettings?: inputs.GetVnicEthIfInventorySriovSettings;
    standbyVifId?: number;
    staticMacAddress?: string;
    tags?: inputs.GetVnicEthIfInventoryTag[];
    templateActions?: inputs.GetVnicEthIfInventoryTemplateAction[];
    templateSyncErrors?: inputs.GetVnicEthIfInventoryTemplateSyncError[];
    templateSyncStatus?: string;
    usnicSettings?: inputs.GetVnicEthIfInventoryUsnicSettings;
    versionContext?: inputs.GetVnicEthIfInventoryVersionContext;
    vifId?: number;
    vmqSettings?: inputs.GetVnicEthIfInventoryVmqSettings;
}

/**
 * A collection of values returned by getVnicEthIfInventory.
 */
export interface GetVnicEthIfInventoryResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetVnicEthIfInventoryAncestor[];
    readonly cdn?: outputs.GetVnicEthIfInventoryCdn;
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly domainGroupMoid?: string;
    readonly ethAdapterPolicy?: outputs.GetVnicEthIfInventoryEthAdapterPolicy;
    readonly ethNetworkPolicy?: outputs.GetVnicEthIfInventoryEthNetworkPolicy;
    readonly ethQosPolicy?: outputs.GetVnicEthIfInventoryEthQosPolicy;
    readonly fabricEthNetworkControlPolicy?: outputs.GetVnicEthIfInventoryFabricEthNetworkControlPolicy;
    readonly fabricEthNetworkGroupPolicies?: outputs.GetVnicEthIfInventoryFabricEthNetworkGroupPolicy[];
    readonly failoverEnabled?: boolean;
    readonly id: string;
    readonly ipLease?: outputs.GetVnicEthIfInventoryIpLease;
    readonly iscsiBootPolicy?: outputs.GetVnicEthIfInventoryIscsiBootPolicy;
    readonly iscsiIpV4AddressAllocationType?: string;
    readonly iscsiIpV4Config?: outputs.GetVnicEthIfInventoryIscsiIpV4Config;
    readonly iscsiIpv4Address?: string;
    readonly lanConnectivityPolicy?: outputs.GetVnicEthIfInventoryLanConnectivityPolicy;
    readonly lcpVnic?: outputs.GetVnicEthIfInventoryLcpVnic;
    readonly macAddress?: string;
    readonly macAddressType?: string;
    readonly macLease?: outputs.GetVnicEthIfInventoryMacLease;
    readonly macPool?: outputs.GetVnicEthIfInventoryMacPool;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly order?: number;
    readonly overriddenLists?: string[];
    readonly owners?: string[];
    readonly parent?: outputs.GetVnicEthIfInventoryParent;
    readonly permissionResources?: outputs.GetVnicEthIfInventoryPermissionResource[];
    readonly pinGroupName?: string;
    readonly placement?: outputs.GetVnicEthIfInventoryPlacement;
    readonly results: outputs.GetVnicEthIfInventoryResult[];
    readonly sharedScope?: string;
    readonly spVnics?: outputs.GetVnicEthIfInventorySpVnic[];
    readonly srcTemplate?: outputs.GetVnicEthIfInventorySrcTemplate;
    readonly sriovSettings?: outputs.GetVnicEthIfInventorySriovSettings;
    readonly standbyVifId?: number;
    readonly staticMacAddress?: string;
    readonly tags?: outputs.GetVnicEthIfInventoryTag[];
    readonly templateActions?: outputs.GetVnicEthIfInventoryTemplateAction[];
    readonly templateSyncErrors?: outputs.GetVnicEthIfInventoryTemplateSyncError[];
    readonly templateSyncStatus?: string;
    readonly usnicSettings?: outputs.GetVnicEthIfInventoryUsnicSettings;
    readonly versionContext?: outputs.GetVnicEthIfInventoryVersionContext;
    readonly vifId?: number;
    readonly vmqSettings?: outputs.GetVnicEthIfInventoryVmqSettings;
}
export function getVnicEthIfInventoryOutput(args?: GetVnicEthIfInventoryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVnicEthIfInventoryResult> {
    return pulumi.output(args).apply((a: any) => getVnicEthIfInventory(a, opts))
}

/**
 * A collection of arguments for invoking getVnicEthIfInventory.
 */
export interface GetVnicEthIfInventoryOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetVnicEthIfInventoryAncestorArgs>[]>;
    cdn?: pulumi.Input<inputs.GetVnicEthIfInventoryCdnArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    ethAdapterPolicy?: pulumi.Input<inputs.GetVnicEthIfInventoryEthAdapterPolicyArgs>;
    ethNetworkPolicy?: pulumi.Input<inputs.GetVnicEthIfInventoryEthNetworkPolicyArgs>;
    ethQosPolicy?: pulumi.Input<inputs.GetVnicEthIfInventoryEthQosPolicyArgs>;
    fabricEthNetworkControlPolicy?: pulumi.Input<inputs.GetVnicEthIfInventoryFabricEthNetworkControlPolicyArgs>;
    fabricEthNetworkGroupPolicies?: pulumi.Input<pulumi.Input<inputs.GetVnicEthIfInventoryFabricEthNetworkGroupPolicyArgs>[]>;
    failoverEnabled?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    ipLease?: pulumi.Input<inputs.GetVnicEthIfInventoryIpLeaseArgs>;
    iscsiBootPolicy?: pulumi.Input<inputs.GetVnicEthIfInventoryIscsiBootPolicyArgs>;
    iscsiIpV4AddressAllocationType?: pulumi.Input<string>;
    iscsiIpV4Config?: pulumi.Input<inputs.GetVnicEthIfInventoryIscsiIpV4ConfigArgs>;
    iscsiIpv4Address?: pulumi.Input<string>;
    lanConnectivityPolicy?: pulumi.Input<inputs.GetVnicEthIfInventoryLanConnectivityPolicyArgs>;
    lcpVnic?: pulumi.Input<inputs.GetVnicEthIfInventoryLcpVnicArgs>;
    macAddress?: pulumi.Input<string>;
    macAddressType?: pulumi.Input<string>;
    macLease?: pulumi.Input<inputs.GetVnicEthIfInventoryMacLeaseArgs>;
    macPool?: pulumi.Input<inputs.GetVnicEthIfInventoryMacPoolArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    order?: pulumi.Input<number>;
    overriddenLists?: pulumi.Input<pulumi.Input<string>[]>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetVnicEthIfInventoryParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetVnicEthIfInventoryPermissionResourceArgs>[]>;
    pinGroupName?: pulumi.Input<string>;
    placement?: pulumi.Input<inputs.GetVnicEthIfInventoryPlacementArgs>;
    sharedScope?: pulumi.Input<string>;
    spVnics?: pulumi.Input<pulumi.Input<inputs.GetVnicEthIfInventorySpVnicArgs>[]>;
    srcTemplate?: pulumi.Input<inputs.GetVnicEthIfInventorySrcTemplateArgs>;
    sriovSettings?: pulumi.Input<inputs.GetVnicEthIfInventorySriovSettingsArgs>;
    standbyVifId?: pulumi.Input<number>;
    staticMacAddress?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetVnicEthIfInventoryTagArgs>[]>;
    templateActions?: pulumi.Input<pulumi.Input<inputs.GetVnicEthIfInventoryTemplateActionArgs>[]>;
    templateSyncErrors?: pulumi.Input<pulumi.Input<inputs.GetVnicEthIfInventoryTemplateSyncErrorArgs>[]>;
    templateSyncStatus?: pulumi.Input<string>;
    usnicSettings?: pulumi.Input<inputs.GetVnicEthIfInventoryUsnicSettingsArgs>;
    versionContext?: pulumi.Input<inputs.GetVnicEthIfInventoryVersionContextArgs>;
    vifId?: pulumi.Input<number>;
    vmqSettings?: pulumi.Input<inputs.GetVnicEthIfInventoryVmqSettingsArgs>;
}
