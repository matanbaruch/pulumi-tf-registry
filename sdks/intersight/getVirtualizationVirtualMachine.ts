// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVirtualizationVirtualMachine(args?: GetVirtualizationVirtualMachineArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualizationVirtualMachineResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getVirtualizationVirtualMachine:getVirtualizationVirtualMachine", {
        "accountMoid": args.accountMoid,
        "action": args.action,
        "actionInfo": args.actionInfo,
        "additionalProperties": args.additionalProperties,
        "affinitySelectors": args.affinitySelectors,
        "ancestors": args.ancestors,
        "antiAffinitySelectors": args.antiAffinitySelectors,
        "classId": args.classId,
        "cloudInitConfig": args.cloudInitConfig,
        "cluster": args.cluster,
        "clusterEsxi": args.clusterEsxi,
        "cpu": args.cpu,
        "createTime": args.createTime,
        "discovered": args.discovered,
        "disks": args.disks,
        "domainGroupMoid": args.domainGroupMoid,
        "forceDelete": args.forceDelete,
        "gpuConfigs": args.gpuConfigs,
        "guestOs": args.guestOs,
        "host": args.host,
        "hostEsxi": args.hostEsxi,
        "hypervisorType": args.hypervisorType,
        "id": args.id,
        "interfaces": args.interfaces,
        "inventory": args.inventory,
        "labels": args.labels,
        "memory": args.memory,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "powerState": args.powerState,
        "provisionType": args.provisionType,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
        "vmConfig": args.vmConfig,
        "workflowInfo": args.workflowInfo,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVirtualizationVirtualMachine.
 */
export interface GetVirtualizationVirtualMachineArgs {
    accountMoid?: string;
    action?: string;
    actionInfo?: inputs.GetVirtualizationVirtualMachineActionInfo;
    additionalProperties?: string;
    affinitySelectors?: inputs.GetVirtualizationVirtualMachineAffinitySelector[];
    ancestors?: inputs.GetVirtualizationVirtualMachineAncestor[];
    antiAffinitySelectors?: inputs.GetVirtualizationVirtualMachineAntiAffinitySelector[];
    classId?: string;
    cloudInitConfig?: inputs.GetVirtualizationVirtualMachineCloudInitConfig;
    cluster?: inputs.GetVirtualizationVirtualMachineCluster;
    clusterEsxi?: string;
    cpu?: number;
    createTime?: string;
    discovered?: boolean;
    disks?: inputs.GetVirtualizationVirtualMachineDisk[];
    domainGroupMoid?: string;
    forceDelete?: boolean;
    gpuConfigs?: inputs.GetVirtualizationVirtualMachineGpuConfig[];
    guestOs?: string;
    host?: inputs.GetVirtualizationVirtualMachineHost;
    hostEsxi?: string;
    hypervisorType?: string;
    id?: string;
    interfaces?: inputs.GetVirtualizationVirtualMachineInterface[];
    inventory?: inputs.GetVirtualizationVirtualMachineInventory;
    labels?: inputs.GetVirtualizationVirtualMachineLabel[];
    memory?: number;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetVirtualizationVirtualMachineParent;
    permissionResources?: inputs.GetVirtualizationVirtualMachinePermissionResource[];
    powerState?: string;
    provisionType?: string;
    registeredDevice?: inputs.GetVirtualizationVirtualMachineRegisteredDevice;
    sharedScope?: string;
    tags?: inputs.GetVirtualizationVirtualMachineTag[];
    versionContext?: inputs.GetVirtualizationVirtualMachineVersionContext;
    vmConfig?: inputs.GetVirtualizationVirtualMachineVmConfig;
    workflowInfo?: inputs.GetVirtualizationVirtualMachineWorkflowInfo;
}

/**
 * A collection of values returned by getVirtualizationVirtualMachine.
 */
export interface GetVirtualizationVirtualMachineResult {
    readonly accountMoid?: string;
    readonly action?: string;
    readonly actionInfo?: outputs.GetVirtualizationVirtualMachineActionInfo;
    readonly additionalProperties?: string;
    readonly affinitySelectors?: outputs.GetVirtualizationVirtualMachineAffinitySelector[];
    readonly ancestors?: outputs.GetVirtualizationVirtualMachineAncestor[];
    readonly antiAffinitySelectors?: outputs.GetVirtualizationVirtualMachineAntiAffinitySelector[];
    readonly classId?: string;
    readonly cloudInitConfig?: outputs.GetVirtualizationVirtualMachineCloudInitConfig;
    readonly cluster?: outputs.GetVirtualizationVirtualMachineCluster;
    readonly clusterEsxi?: string;
    readonly cpu?: number;
    readonly createTime?: string;
    readonly discovered?: boolean;
    readonly disks?: outputs.GetVirtualizationVirtualMachineDisk[];
    readonly domainGroupMoid?: string;
    readonly forceDelete?: boolean;
    readonly gpuConfigs?: outputs.GetVirtualizationVirtualMachineGpuConfig[];
    readonly guestOs?: string;
    readonly host?: outputs.GetVirtualizationVirtualMachineHost;
    readonly hostEsxi?: string;
    readonly hypervisorType?: string;
    readonly id: string;
    readonly interfaces?: outputs.GetVirtualizationVirtualMachineInterface[];
    readonly inventory?: outputs.GetVirtualizationVirtualMachineInventory;
    readonly labels?: outputs.GetVirtualizationVirtualMachineLabel[];
    readonly memory?: number;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetVirtualizationVirtualMachineParent;
    readonly permissionResources?: outputs.GetVirtualizationVirtualMachinePermissionResource[];
    readonly powerState?: string;
    readonly provisionType?: string;
    readonly registeredDevice?: outputs.GetVirtualizationVirtualMachineRegisteredDevice;
    readonly results: outputs.GetVirtualizationVirtualMachineResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetVirtualizationVirtualMachineTag[];
    readonly versionContext?: outputs.GetVirtualizationVirtualMachineVersionContext;
    readonly vmConfig?: outputs.GetVirtualizationVirtualMachineVmConfig;
    readonly workflowInfo?: outputs.GetVirtualizationVirtualMachineWorkflowInfo;
}
export function getVirtualizationVirtualMachineOutput(args?: GetVirtualizationVirtualMachineOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualizationVirtualMachineResult> {
    return pulumi.output(args).apply((a: any) => getVirtualizationVirtualMachine(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualizationVirtualMachine.
 */
export interface GetVirtualizationVirtualMachineOutputArgs {
    accountMoid?: pulumi.Input<string>;
    action?: pulumi.Input<string>;
    actionInfo?: pulumi.Input<inputs.GetVirtualizationVirtualMachineActionInfoArgs>;
    additionalProperties?: pulumi.Input<string>;
    affinitySelectors?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVirtualMachineAffinitySelectorArgs>[]>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVirtualMachineAncestorArgs>[]>;
    antiAffinitySelectors?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVirtualMachineAntiAffinitySelectorArgs>[]>;
    classId?: pulumi.Input<string>;
    cloudInitConfig?: pulumi.Input<inputs.GetVirtualizationVirtualMachineCloudInitConfigArgs>;
    cluster?: pulumi.Input<inputs.GetVirtualizationVirtualMachineClusterArgs>;
    clusterEsxi?: pulumi.Input<string>;
    cpu?: pulumi.Input<number>;
    createTime?: pulumi.Input<string>;
    discovered?: pulumi.Input<boolean>;
    disks?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVirtualMachineDiskArgs>[]>;
    domainGroupMoid?: pulumi.Input<string>;
    forceDelete?: pulumi.Input<boolean>;
    gpuConfigs?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVirtualMachineGpuConfigArgs>[]>;
    guestOs?: pulumi.Input<string>;
    host?: pulumi.Input<inputs.GetVirtualizationVirtualMachineHostArgs>;
    hostEsxi?: pulumi.Input<string>;
    hypervisorType?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVirtualMachineInterfaceArgs>[]>;
    inventory?: pulumi.Input<inputs.GetVirtualizationVirtualMachineInventoryArgs>;
    labels?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVirtualMachineLabelArgs>[]>;
    memory?: pulumi.Input<number>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetVirtualizationVirtualMachineParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVirtualMachinePermissionResourceArgs>[]>;
    powerState?: pulumi.Input<string>;
    provisionType?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetVirtualizationVirtualMachineRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVirtualMachineTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetVirtualizationVirtualMachineVersionContextArgs>;
    vmConfig?: pulumi.Input<inputs.GetVirtualizationVirtualMachineVmConfigArgs>;
    workflowInfo?: pulumi.Input<inputs.GetVirtualizationVirtualMachineWorkflowInfoArgs>;
}
