// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVirtualizationVmwareFolder(args?: GetVirtualizationVmwareFolderArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualizationVmwareFolderResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getVirtualizationVmwareFolder:getVirtualizationVmwareFolder", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "datacenter": args.datacenter,
        "domainGroupMoid": args.domainGroupMoid,
        "hypervisorManager": args.hypervisorManager,
        "id": args.id,
        "identity": args.identity,
        "internal": args.internal,
        "inventoryPath": args.inventoryPath,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "typeofFolder": args.typeofFolder,
        "versionContext": args.versionContext,
        "vmwareFolder": args.vmwareFolder,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareFolder.
 */
export interface GetVirtualizationVmwareFolderArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetVirtualizationVmwareFolderAncestor[];
    classId?: string;
    createTime?: string;
    datacenter?: inputs.GetVirtualizationVmwareFolderDatacenter;
    domainGroupMoid?: string;
    hypervisorManager?: inputs.GetVirtualizationVmwareFolderHypervisorManager;
    id?: string;
    identity?: string;
    internal?: boolean;
    inventoryPath?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetVirtualizationVmwareFolderParent;
    permissionResources?: inputs.GetVirtualizationVmwareFolderPermissionResource[];
    registeredDevice?: inputs.GetVirtualizationVmwareFolderRegisteredDevice;
    sharedScope?: string;
    tags?: inputs.GetVirtualizationVmwareFolderTag[];
    typeofFolder?: string;
    versionContext?: inputs.GetVirtualizationVmwareFolderVersionContext;
    vmwareFolder?: inputs.GetVirtualizationVmwareFolderVmwareFolder;
}

/**
 * A collection of values returned by getVirtualizationVmwareFolder.
 */
export interface GetVirtualizationVmwareFolderResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetVirtualizationVmwareFolderAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly datacenter?: outputs.GetVirtualizationVmwareFolderDatacenter;
    readonly domainGroupMoid?: string;
    readonly hypervisorManager?: outputs.GetVirtualizationVmwareFolderHypervisorManager;
    readonly id: string;
    readonly identity?: string;
    readonly internal?: boolean;
    readonly inventoryPath?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetVirtualizationVmwareFolderParent;
    readonly permissionResources?: outputs.GetVirtualizationVmwareFolderPermissionResource[];
    readonly registeredDevice?: outputs.GetVirtualizationVmwareFolderRegisteredDevice;
    readonly results: outputs.GetVirtualizationVmwareFolderResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetVirtualizationVmwareFolderTag[];
    readonly typeofFolder?: string;
    readonly versionContext?: outputs.GetVirtualizationVmwareFolderVersionContext;
    readonly vmwareFolder?: outputs.GetVirtualizationVmwareFolderVmwareFolder;
}
export function getVirtualizationVmwareFolderOutput(args?: GetVirtualizationVmwareFolderOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualizationVmwareFolderResult> {
    return pulumi.output(args).apply((a: any) => getVirtualizationVmwareFolder(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareFolder.
 */
export interface GetVirtualizationVmwareFolderOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareFolderAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    datacenter?: pulumi.Input<inputs.GetVirtualizationVmwareFolderDatacenterArgs>;
    domainGroupMoid?: pulumi.Input<string>;
    hypervisorManager?: pulumi.Input<inputs.GetVirtualizationVmwareFolderHypervisorManagerArgs>;
    id?: pulumi.Input<string>;
    identity?: pulumi.Input<string>;
    internal?: pulumi.Input<boolean>;
    inventoryPath?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetVirtualizationVmwareFolderParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareFolderPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetVirtualizationVmwareFolderRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareFolderTagArgs>[]>;
    typeofFolder?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetVirtualizationVmwareFolderVersionContextArgs>;
    vmwareFolder?: pulumi.Input<inputs.GetVirtualizationVmwareFolderVmwareFolderArgs>;
}
