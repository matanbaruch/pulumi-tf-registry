// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getBulkRequest(args?: GetBulkRequestArgs, opts?: pulumi.InvokeOptions): Promise<GetBulkRequestResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getBulkRequest:getBulkRequest", {
        "accountMoid": args.accountMoid,
        "actionOnError": args.actionOnError,
        "actions": args.actions,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "asyncResults": args.asyncResults,
        "asyncResultsFaileds": args.asyncResultsFaileds,
        "classId": args.classId,
        "completionTime": args.completionTime,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "headers": args.headers,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "numSubRequests": args.numSubRequests,
        "objectType": args.objectType,
        "orgMoid": args.orgMoid,
        "organization": args.organization,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "requestReceivedTime": args.requestReceivedTime,
        "requests": args.requests,
        "sharedScope": args.sharedScope,
        "skipDuplicates": args.skipDuplicates,
        "status": args.status,
        "statusMessage": args.statusMessage,
        "tags": args.tags,
        "uri": args.uri,
        "verb": args.verb,
        "versionContext": args.versionContext,
        "workflowInfo": args.workflowInfo,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getBulkRequest.
 */
export interface GetBulkRequestArgs {
    accountMoid?: string;
    actionOnError?: string;
    actions?: string[];
    additionalProperties?: string;
    ancestors?: inputs.GetBulkRequestAncestor[];
    asyncResults?: inputs.GetBulkRequestAsyncResult[];
    asyncResultsFaileds?: inputs.GetBulkRequestAsyncResultsFailed[];
    classId?: string;
    completionTime?: string;
    createTime?: string;
    domainGroupMoid?: string;
    headers?: inputs.GetBulkRequestHeader[];
    id?: string;
    modTime?: string;
    moid?: string;
    numSubRequests?: number;
    objectType?: string;
    orgMoid?: string;
    organization?: inputs.GetBulkRequestOrganization;
    owners?: string[];
    parent?: inputs.GetBulkRequestParent;
    permissionResources?: inputs.GetBulkRequestPermissionResource[];
    requestReceivedTime?: string;
    requests?: inputs.GetBulkRequestRequest[];
    sharedScope?: string;
    skipDuplicates?: boolean;
    status?: string;
    statusMessage?: string;
    tags?: inputs.GetBulkRequestTag[];
    uri?: string;
    verb?: string;
    versionContext?: inputs.GetBulkRequestVersionContext;
    workflowInfo?: inputs.GetBulkRequestWorkflowInfo;
}

/**
 * A collection of values returned by getBulkRequest.
 */
export interface GetBulkRequestResult {
    readonly accountMoid?: string;
    readonly actionOnError?: string;
    readonly actions?: string[];
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetBulkRequestAncestor[];
    readonly asyncResults?: outputs.GetBulkRequestAsyncResult[];
    readonly asyncResultsFaileds?: outputs.GetBulkRequestAsyncResultsFailed[];
    readonly classId?: string;
    readonly completionTime?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly headers?: outputs.GetBulkRequestHeader[];
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly numSubRequests?: number;
    readonly objectType?: string;
    readonly orgMoid?: string;
    readonly organization?: outputs.GetBulkRequestOrganization;
    readonly owners?: string[];
    readonly parent?: outputs.GetBulkRequestParent;
    readonly permissionResources?: outputs.GetBulkRequestPermissionResource[];
    readonly requestReceivedTime?: string;
    readonly requests?: outputs.GetBulkRequestRequest[];
    readonly results: outputs.GetBulkRequestResult[];
    readonly sharedScope?: string;
    readonly skipDuplicates?: boolean;
    readonly status?: string;
    readonly statusMessage?: string;
    readonly tags?: outputs.GetBulkRequestTag[];
    readonly uri?: string;
    readonly verb?: string;
    readonly versionContext?: outputs.GetBulkRequestVersionContext;
    readonly workflowInfo?: outputs.GetBulkRequestWorkflowInfo;
}
export function getBulkRequestOutput(args?: GetBulkRequestOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBulkRequestResult> {
    return pulumi.output(args).apply((a: any) => getBulkRequest(a, opts))
}

/**
 * A collection of arguments for invoking getBulkRequest.
 */
export interface GetBulkRequestOutputArgs {
    accountMoid?: pulumi.Input<string>;
    actionOnError?: pulumi.Input<string>;
    actions?: pulumi.Input<pulumi.Input<string>[]>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetBulkRequestAncestorArgs>[]>;
    asyncResults?: pulumi.Input<pulumi.Input<inputs.GetBulkRequestAsyncResultArgs>[]>;
    asyncResultsFaileds?: pulumi.Input<pulumi.Input<inputs.GetBulkRequestAsyncResultsFailedArgs>[]>;
    classId?: pulumi.Input<string>;
    completionTime?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    headers?: pulumi.Input<pulumi.Input<inputs.GetBulkRequestHeaderArgs>[]>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    numSubRequests?: pulumi.Input<number>;
    objectType?: pulumi.Input<string>;
    orgMoid?: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.GetBulkRequestOrganizationArgs>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetBulkRequestParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetBulkRequestPermissionResourceArgs>[]>;
    requestReceivedTime?: pulumi.Input<string>;
    requests?: pulumi.Input<pulumi.Input<inputs.GetBulkRequestRequestArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    skipDuplicates?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    statusMessage?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetBulkRequestTagArgs>[]>;
    uri?: pulumi.Input<string>;
    verb?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetBulkRequestVersionContextArgs>;
    workflowInfo?: pulumi.Input<inputs.GetBulkRequestWorkflowInfoArgs>;
}
