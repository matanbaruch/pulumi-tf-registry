// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVirtualizationVmwareKernelNetwork(args?: GetVirtualizationVmwareKernelNetworkArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualizationVmwareKernelNetworkResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getVirtualizationVmwareKernelNetwork:getVirtualizationVmwareKernelNetwork", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "distributedNetwork": args.distributedNetwork,
        "domainGroupMoid": args.domainGroupMoid,
        "faultToleranceLogging": args.faultToleranceLogging,
        "host": args.host,
        "id": args.id,
        "identity": args.identity,
        "ipAddresses": args.ipAddresses,
        "macAddress": args.macAddress,
        "management": args.management,
        "modTime": args.modTime,
        "moid": args.moid,
        "mtu": args.mtu,
        "name": args.name,
        "network": args.network,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "subnetMask": args.subnetMask,
        "tags": args.tags,
        "tcpIpStack": args.tcpIpStack,
        "versionContext": args.versionContext,
        "vmotion": args.vmotion,
        "vsan": args.vsan,
        "vsphereProvisioning": args.vsphereProvisioning,
        "vsphereReplication": args.vsphereReplication,
        "vsphereReplicationNfc": args.vsphereReplicationNfc,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareKernelNetwork.
 */
export interface GetVirtualizationVmwareKernelNetworkArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetVirtualizationVmwareKernelNetworkAncestor[];
    classId?: string;
    createTime?: string;
    distributedNetwork?: inputs.GetVirtualizationVmwareKernelNetworkDistributedNetwork;
    domainGroupMoid?: string;
    faultToleranceLogging?: boolean;
    host?: inputs.GetVirtualizationVmwareKernelNetworkHost;
    id?: string;
    identity?: string;
    ipAddresses?: string[];
    macAddress?: string;
    management?: boolean;
    modTime?: string;
    moid?: string;
    mtu?: number;
    name?: string;
    network?: inputs.GetVirtualizationVmwareKernelNetworkNetwork;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetVirtualizationVmwareKernelNetworkParent;
    permissionResources?: inputs.GetVirtualizationVmwareKernelNetworkPermissionResource[];
    registeredDevice?: inputs.GetVirtualizationVmwareKernelNetworkRegisteredDevice;
    sharedScope?: string;
    subnetMask?: string;
    tags?: inputs.GetVirtualizationVmwareKernelNetworkTag[];
    tcpIpStack?: string;
    versionContext?: inputs.GetVirtualizationVmwareKernelNetworkVersionContext;
    vmotion?: boolean;
    vsan?: boolean;
    vsphereProvisioning?: boolean;
    vsphereReplication?: boolean;
    vsphereReplicationNfc?: boolean;
}

/**
 * A collection of values returned by getVirtualizationVmwareKernelNetwork.
 */
export interface GetVirtualizationVmwareKernelNetworkResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetVirtualizationVmwareKernelNetworkAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly distributedNetwork?: outputs.GetVirtualizationVmwareKernelNetworkDistributedNetwork;
    readonly domainGroupMoid?: string;
    readonly faultToleranceLogging?: boolean;
    readonly host?: outputs.GetVirtualizationVmwareKernelNetworkHost;
    readonly id: string;
    readonly identity?: string;
    readonly ipAddresses?: string[];
    readonly macAddress?: string;
    readonly management?: boolean;
    readonly modTime?: string;
    readonly moid?: string;
    readonly mtu?: number;
    readonly name?: string;
    readonly network?: outputs.GetVirtualizationVmwareKernelNetworkNetwork;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetVirtualizationVmwareKernelNetworkParent;
    readonly permissionResources?: outputs.GetVirtualizationVmwareKernelNetworkPermissionResource[];
    readonly registeredDevice?: outputs.GetVirtualizationVmwareKernelNetworkRegisteredDevice;
    readonly results: outputs.GetVirtualizationVmwareKernelNetworkResult[];
    readonly sharedScope?: string;
    readonly subnetMask?: string;
    readonly tags?: outputs.GetVirtualizationVmwareKernelNetworkTag[];
    readonly tcpIpStack?: string;
    readonly versionContext?: outputs.GetVirtualizationVmwareKernelNetworkVersionContext;
    readonly vmotion?: boolean;
    readonly vsan?: boolean;
    readonly vsphereProvisioning?: boolean;
    readonly vsphereReplication?: boolean;
    readonly vsphereReplicationNfc?: boolean;
}
export function getVirtualizationVmwareKernelNetworkOutput(args?: GetVirtualizationVmwareKernelNetworkOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualizationVmwareKernelNetworkResult> {
    return pulumi.output(args).apply((a: any) => getVirtualizationVmwareKernelNetwork(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareKernelNetwork.
 */
export interface GetVirtualizationVmwareKernelNetworkOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareKernelNetworkAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    distributedNetwork?: pulumi.Input<inputs.GetVirtualizationVmwareKernelNetworkDistributedNetworkArgs>;
    domainGroupMoid?: pulumi.Input<string>;
    faultToleranceLogging?: pulumi.Input<boolean>;
    host?: pulumi.Input<inputs.GetVirtualizationVmwareKernelNetworkHostArgs>;
    id?: pulumi.Input<string>;
    identity?: pulumi.Input<string>;
    ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    macAddress?: pulumi.Input<string>;
    management?: pulumi.Input<boolean>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    network?: pulumi.Input<inputs.GetVirtualizationVmwareKernelNetworkNetworkArgs>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetVirtualizationVmwareKernelNetworkParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareKernelNetworkPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetVirtualizationVmwareKernelNetworkRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    subnetMask?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareKernelNetworkTagArgs>[]>;
    tcpIpStack?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetVirtualizationVmwareKernelNetworkVersionContextArgs>;
    vmotion?: pulumi.Input<boolean>;
    vsan?: pulumi.Input<boolean>;
    vsphereProvisioning?: pulumi.Input<boolean>;
    vsphereReplication?: pulumi.Input<boolean>;
    vsphereReplicationNfc?: pulumi.Input<boolean>;
}
