// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVirtualizationVmwareDistributedNetwork(args?: GetVirtualizationVmwareDistributedNetworkArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualizationVmwareDistributedNetworkResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getVirtualizationVmwareDistributedNetwork:getVirtualizationVmwareDistributedNetwork", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "distributedSwitch": args.distributedSwitch,
        "domainGroupMoid": args.domainGroupMoid,
        "forgedTransmits": args.forgedTransmits,
        "hosts": args.hosts,
        "id": args.id,
        "identity": args.identity,
        "macAddressChanges": args.macAddressChanges,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "nicTeamingAndFailover": args.nicTeamingAndFailover,
        "numHosts": args.numHosts,
        "numPorts": args.numPorts,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "promiscuousMode": args.promiscuousMode,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "upLink": args.upLink,
        "versionContext": args.versionContext,
        "vlanRanges": args.vlanRanges,
        "vlanType": args.vlanType,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareDistributedNetwork.
 */
export interface GetVirtualizationVmwareDistributedNetworkArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetVirtualizationVmwareDistributedNetworkAncestor[];
    classId?: string;
    createTime?: string;
    distributedSwitch?: inputs.GetVirtualizationVmwareDistributedNetworkDistributedSwitch;
    domainGroupMoid?: string;
    forgedTransmits?: string;
    hosts?: inputs.GetVirtualizationVmwareDistributedNetworkHost[];
    id?: string;
    identity?: string;
    macAddressChanges?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    nicTeamingAndFailover?: inputs.GetVirtualizationVmwareDistributedNetworkNicTeamingAndFailover;
    numHosts?: number;
    numPorts?: number;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetVirtualizationVmwareDistributedNetworkParent;
    permissionResources?: inputs.GetVirtualizationVmwareDistributedNetworkPermissionResource[];
    promiscuousMode?: string;
    registeredDevice?: inputs.GetVirtualizationVmwareDistributedNetworkRegisteredDevice;
    sharedScope?: string;
    tags?: inputs.GetVirtualizationVmwareDistributedNetworkTag[];
    upLink?: boolean;
    versionContext?: inputs.GetVirtualizationVmwareDistributedNetworkVersionContext;
    vlanRanges?: inputs.GetVirtualizationVmwareDistributedNetworkVlanRange[];
    vlanType?: string;
}

/**
 * A collection of values returned by getVirtualizationVmwareDistributedNetwork.
 */
export interface GetVirtualizationVmwareDistributedNetworkResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetVirtualizationVmwareDistributedNetworkAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly distributedSwitch?: outputs.GetVirtualizationVmwareDistributedNetworkDistributedSwitch;
    readonly domainGroupMoid?: string;
    readonly forgedTransmits?: string;
    readonly hosts?: outputs.GetVirtualizationVmwareDistributedNetworkHost[];
    readonly id: string;
    readonly identity?: string;
    readonly macAddressChanges?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nicTeamingAndFailover?: outputs.GetVirtualizationVmwareDistributedNetworkNicTeamingAndFailover;
    readonly numHosts?: number;
    readonly numPorts?: number;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetVirtualizationVmwareDistributedNetworkParent;
    readonly permissionResources?: outputs.GetVirtualizationVmwareDistributedNetworkPermissionResource[];
    readonly promiscuousMode?: string;
    readonly registeredDevice?: outputs.GetVirtualizationVmwareDistributedNetworkRegisteredDevice;
    readonly results: outputs.GetVirtualizationVmwareDistributedNetworkResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetVirtualizationVmwareDistributedNetworkTag[];
    readonly upLink?: boolean;
    readonly versionContext?: outputs.GetVirtualizationVmwareDistributedNetworkVersionContext;
    readonly vlanRanges?: outputs.GetVirtualizationVmwareDistributedNetworkVlanRange[];
    readonly vlanType?: string;
}
export function getVirtualizationVmwareDistributedNetworkOutput(args?: GetVirtualizationVmwareDistributedNetworkOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualizationVmwareDistributedNetworkResult> {
    return pulumi.output(args).apply((a: any) => getVirtualizationVmwareDistributedNetwork(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareDistributedNetwork.
 */
export interface GetVirtualizationVmwareDistributedNetworkOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareDistributedNetworkAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    distributedSwitch?: pulumi.Input<inputs.GetVirtualizationVmwareDistributedNetworkDistributedSwitchArgs>;
    domainGroupMoid?: pulumi.Input<string>;
    forgedTransmits?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareDistributedNetworkHostArgs>[]>;
    id?: pulumi.Input<string>;
    identity?: pulumi.Input<string>;
    macAddressChanges?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nicTeamingAndFailover?: pulumi.Input<inputs.GetVirtualizationVmwareDistributedNetworkNicTeamingAndFailoverArgs>;
    numHosts?: pulumi.Input<number>;
    numPorts?: pulumi.Input<number>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetVirtualizationVmwareDistributedNetworkParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareDistributedNetworkPermissionResourceArgs>[]>;
    promiscuousMode?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetVirtualizationVmwareDistributedNetworkRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareDistributedNetworkTagArgs>[]>;
    upLink?: pulumi.Input<boolean>;
    versionContext?: pulumi.Input<inputs.GetVirtualizationVmwareDistributedNetworkVersionContextArgs>;
    vlanRanges?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareDistributedNetworkVlanRangeArgs>[]>;
    vlanType?: pulumi.Input<string>;
}
