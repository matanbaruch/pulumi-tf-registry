// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEquipmentChassis(args?: GetEquipmentChassisArgs, opts?: pulumi.InvokeOptions): Promise<GetEquipmentChassisResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getEquipmentChassis:getEquipmentChassis", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "alarmSummary": args.alarmSummary,
        "ancestors": args.ancestors,
        "blades": args.blades,
        "chassisId": args.chassisId,
        "classId": args.classId,
        "connectionPath": args.connectionPath,
        "connectionStatus": args.connectionStatus,
        "createTime": args.createTime,
        "description": args.description,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "expanderModules": args.expanderModules,
        "fanControl": args.fanControl,
        "fanmodules": args.fanmodules,
        "faultSummary": args.faultSummary,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "ioms": args.ioms,
        "isUpgraded": args.isUpgraded,
        "locatorLed": args.locatorLed,
        "managementInterface": args.managementInterface,
        "managementMode": args.managementMode,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "operReasons": args.operReasons,
        "operState": args.operState,
        "owners": args.owners,
        "parent": args.parent,
        "partNumber": args.partNumber,
        "permissionResources": args.permissionResources,
        "pid": args.pid,
        "platformType": args.platformType,
        "powerControlState": args.powerControlState,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "productName": args.productName,
        "psuControl": args.psuControl,
        "psuses": args.psuses,
        "registeredDevice": args.registeredDevice,
        "revision": args.revision,
        "rn": args.rn,
        "sasexpanders": args.sasexpanders,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "siocs": args.siocs,
        "sku": args.sku,
        "storageEnclosures": args.storageEnclosures,
        "tags": args.tags,
        "userLabel": args.userLabel,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
        "vid": args.vid,
        "virtualDriveContainers": args.virtualDriveContainers,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEquipmentChassis.
 */
export interface GetEquipmentChassisArgs {
    accountMoid?: string;
    additionalProperties?: string;
    alarmSummary?: inputs.GetEquipmentChassisAlarmSummary;
    ancestors?: inputs.GetEquipmentChassisAncestor[];
    blades?: inputs.GetEquipmentChassisBlade[];
    chassisId?: number;
    classId?: string;
    connectionPath?: string;
    connectionStatus?: string;
    createTime?: string;
    description?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    expanderModules?: inputs.GetEquipmentChassisExpanderModule[];
    fanControl?: inputs.GetEquipmentChassisFanControl;
    fanmodules?: inputs.GetEquipmentChassisFanmodule[];
    faultSummary?: number;
    id?: string;
    inventoryDeviceInfo?: inputs.GetEquipmentChassisInventoryDeviceInfo;
    ioms?: inputs.GetEquipmentChassisIom[];
    isUpgraded?: boolean;
    locatorLed?: inputs.GetEquipmentChassisLocatorLed;
    managementInterface?: inputs.GetEquipmentChassisManagementInterface;
    managementMode?: string;
    modTime?: string;
    model?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    operReasons?: string[];
    operState?: string;
    owners?: string[];
    parent?: inputs.GetEquipmentChassisParent;
    partNumber?: string;
    permissionResources?: inputs.GetEquipmentChassisPermissionResource[];
    pid?: string;
    platformType?: string;
    powerControlState?: inputs.GetEquipmentChassisPowerControlState;
    presence?: string;
    previousFru?: inputs.GetEquipmentChassisPreviousFru;
    productName?: string;
    psuControl?: inputs.GetEquipmentChassisPsuControl;
    psuses?: inputs.GetEquipmentChassisPsus[];
    registeredDevice?: inputs.GetEquipmentChassisRegisteredDevice;
    revision?: string;
    rn?: string;
    sasexpanders?: inputs.GetEquipmentChassisSasexpander[];
    serial?: string;
    sharedScope?: string;
    siocs?: inputs.GetEquipmentChassisSioc[];
    sku?: string;
    storageEnclosures?: inputs.GetEquipmentChassisStorageEnclosure[];
    tags?: inputs.GetEquipmentChassisTag[];
    userLabel?: string;
    vendor?: string;
    versionContext?: inputs.GetEquipmentChassisVersionContext;
    vid?: string;
    virtualDriveContainers?: inputs.GetEquipmentChassisVirtualDriveContainer[];
}

/**
 * A collection of values returned by getEquipmentChassis.
 */
export interface GetEquipmentChassisResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly alarmSummary?: outputs.GetEquipmentChassisAlarmSummary;
    readonly ancestors?: outputs.GetEquipmentChassisAncestor[];
    readonly blades?: outputs.GetEquipmentChassisBlade[];
    readonly chassisId?: number;
    readonly classId?: string;
    readonly connectionPath?: string;
    readonly connectionStatus?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly expanderModules?: outputs.GetEquipmentChassisExpanderModule[];
    readonly fanControl?: outputs.GetEquipmentChassisFanControl;
    readonly fanmodules?: outputs.GetEquipmentChassisFanmodule[];
    readonly faultSummary?: number;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetEquipmentChassisInventoryDeviceInfo;
    readonly ioms?: outputs.GetEquipmentChassisIom[];
    readonly isUpgraded?: boolean;
    readonly locatorLed?: outputs.GetEquipmentChassisLocatorLed;
    readonly managementInterface?: outputs.GetEquipmentChassisManagementInterface;
    readonly managementMode?: string;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly operReasons?: string[];
    readonly operState?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetEquipmentChassisParent;
    readonly partNumber?: string;
    readonly permissionResources?: outputs.GetEquipmentChassisPermissionResource[];
    readonly pid?: string;
    readonly platformType?: string;
    readonly powerControlState?: outputs.GetEquipmentChassisPowerControlState;
    readonly presence?: string;
    readonly previousFru?: outputs.GetEquipmentChassisPreviousFru;
    readonly productName?: string;
    readonly psuControl?: outputs.GetEquipmentChassisPsuControl;
    readonly psuses?: outputs.GetEquipmentChassisPsus[];
    readonly registeredDevice?: outputs.GetEquipmentChassisRegisteredDevice;
    readonly results: outputs.GetEquipmentChassisResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly sasexpanders?: outputs.GetEquipmentChassisSasexpander[];
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly siocs?: outputs.GetEquipmentChassisSioc[];
    readonly sku?: string;
    readonly storageEnclosures?: outputs.GetEquipmentChassisStorageEnclosure[];
    readonly tags?: outputs.GetEquipmentChassisTag[];
    readonly userLabel?: string;
    readonly vendor?: string;
    readonly versionContext?: outputs.GetEquipmentChassisVersionContext;
    readonly vid?: string;
    readonly virtualDriveContainers?: outputs.GetEquipmentChassisVirtualDriveContainer[];
}
export function getEquipmentChassisOutput(args?: GetEquipmentChassisOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEquipmentChassisResult> {
    return pulumi.output(args).apply((a: any) => getEquipmentChassis(a, opts))
}

/**
 * A collection of arguments for invoking getEquipmentChassis.
 */
export interface GetEquipmentChassisOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    alarmSummary?: pulumi.Input<inputs.GetEquipmentChassisAlarmSummaryArgs>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetEquipmentChassisAncestorArgs>[]>;
    blades?: pulumi.Input<pulumi.Input<inputs.GetEquipmentChassisBladeArgs>[]>;
    chassisId?: pulumi.Input<number>;
    classId?: pulumi.Input<string>;
    connectionPath?: pulumi.Input<string>;
    connectionStatus?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    expanderModules?: pulumi.Input<pulumi.Input<inputs.GetEquipmentChassisExpanderModuleArgs>[]>;
    fanControl?: pulumi.Input<inputs.GetEquipmentChassisFanControlArgs>;
    fanmodules?: pulumi.Input<pulumi.Input<inputs.GetEquipmentChassisFanmoduleArgs>[]>;
    faultSummary?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetEquipmentChassisInventoryDeviceInfoArgs>;
    ioms?: pulumi.Input<pulumi.Input<inputs.GetEquipmentChassisIomArgs>[]>;
    isUpgraded?: pulumi.Input<boolean>;
    locatorLed?: pulumi.Input<inputs.GetEquipmentChassisLocatorLedArgs>;
    managementInterface?: pulumi.Input<inputs.GetEquipmentChassisManagementInterfaceArgs>;
    managementMode?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operReasons?: pulumi.Input<pulumi.Input<string>[]>;
    operState?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetEquipmentChassisParentArgs>;
    partNumber?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetEquipmentChassisPermissionResourceArgs>[]>;
    pid?: pulumi.Input<string>;
    platformType?: pulumi.Input<string>;
    powerControlState?: pulumi.Input<inputs.GetEquipmentChassisPowerControlStateArgs>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetEquipmentChassisPreviousFruArgs>;
    productName?: pulumi.Input<string>;
    psuControl?: pulumi.Input<inputs.GetEquipmentChassisPsuControlArgs>;
    psuses?: pulumi.Input<pulumi.Input<inputs.GetEquipmentChassisPsusArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetEquipmentChassisRegisteredDeviceArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    sasexpanders?: pulumi.Input<pulumi.Input<inputs.GetEquipmentChassisSasexpanderArgs>[]>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    siocs?: pulumi.Input<pulumi.Input<inputs.GetEquipmentChassisSiocArgs>[]>;
    sku?: pulumi.Input<string>;
    storageEnclosures?: pulumi.Input<pulumi.Input<inputs.GetEquipmentChassisStorageEnclosureArgs>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetEquipmentChassisTagArgs>[]>;
    userLabel?: pulumi.Input<string>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetEquipmentChassisVersionContextArgs>;
    vid?: pulumi.Input<string>;
    virtualDriveContainers?: pulumi.Input<pulumi.Input<inputs.GetEquipmentChassisVirtualDriveContainerArgs>[]>;
}
