// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEquipmentExpanderModule(args?: GetEquipmentExpanderModuleArgs, opts?: pulumi.InvokeOptions): Promise<GetEquipmentExpanderModuleResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getEquipmentExpanderModule:getEquipmentExpanderModule", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "equipmentChassis": args.equipmentChassis,
        "fanModules": args.fanModules,
        "id": args.id,
        "isUpgraded": args.isUpgraded,
        "modTime": args.modTime,
        "model": args.model,
        "moduleId": args.moduleId,
        "moid": args.moid,
        "objectType": args.objectType,
        "operReasons": args.operReasons,
        "operState": args.operState,
        "owners": args.owners,
        "parent": args.parent,
        "partNumber": args.partNumber,
        "permissionResources": args.permissionResources,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "registeredDevice": args.registeredDevice,
        "revision": args.revision,
        "rn": args.rn,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEquipmentExpanderModule.
 */
export interface GetEquipmentExpanderModuleArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetEquipmentExpanderModuleAncestor[];
    classId?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    equipmentChassis?: inputs.GetEquipmentExpanderModuleEquipmentChassis;
    fanModules?: inputs.GetEquipmentExpanderModuleFanModule[];
    id?: string;
    isUpgraded?: boolean;
    modTime?: string;
    model?: string;
    moduleId?: number;
    moid?: string;
    objectType?: string;
    operReasons?: string[];
    operState?: string;
    owners?: string[];
    parent?: inputs.GetEquipmentExpanderModuleParent;
    partNumber?: string;
    permissionResources?: inputs.GetEquipmentExpanderModulePermissionResource[];
    presence?: string;
    previousFru?: inputs.GetEquipmentExpanderModulePreviousFru;
    registeredDevice?: inputs.GetEquipmentExpanderModuleRegisteredDevice;
    revision?: string;
    rn?: string;
    serial?: string;
    sharedScope?: string;
    tags?: inputs.GetEquipmentExpanderModuleTag[];
    vendor?: string;
    versionContext?: inputs.GetEquipmentExpanderModuleVersionContext;
}

/**
 * A collection of values returned by getEquipmentExpanderModule.
 */
export interface GetEquipmentExpanderModuleResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetEquipmentExpanderModuleAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly equipmentChassis?: outputs.GetEquipmentExpanderModuleEquipmentChassis;
    readonly fanModules?: outputs.GetEquipmentExpanderModuleFanModule[];
    readonly id: string;
    readonly isUpgraded?: boolean;
    readonly modTime?: string;
    readonly model?: string;
    readonly moduleId?: number;
    readonly moid?: string;
    readonly objectType?: string;
    readonly operReasons?: string[];
    readonly operState?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetEquipmentExpanderModuleParent;
    readonly partNumber?: string;
    readonly permissionResources?: outputs.GetEquipmentExpanderModulePermissionResource[];
    readonly presence?: string;
    readonly previousFru?: outputs.GetEquipmentExpanderModulePreviousFru;
    readonly registeredDevice?: outputs.GetEquipmentExpanderModuleRegisteredDevice;
    readonly results: outputs.GetEquipmentExpanderModuleResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetEquipmentExpanderModuleTag[];
    readonly vendor?: string;
    readonly versionContext?: outputs.GetEquipmentExpanderModuleVersionContext;
}
export function getEquipmentExpanderModuleOutput(args?: GetEquipmentExpanderModuleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEquipmentExpanderModuleResult> {
    return pulumi.output(args).apply((a: any) => getEquipmentExpanderModule(a, opts))
}

/**
 * A collection of arguments for invoking getEquipmentExpanderModule.
 */
export interface GetEquipmentExpanderModuleOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetEquipmentExpanderModuleAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    equipmentChassis?: pulumi.Input<inputs.GetEquipmentExpanderModuleEquipmentChassisArgs>;
    fanModules?: pulumi.Input<pulumi.Input<inputs.GetEquipmentExpanderModuleFanModuleArgs>[]>;
    id?: pulumi.Input<string>;
    isUpgraded?: pulumi.Input<boolean>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moduleId?: pulumi.Input<number>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operReasons?: pulumi.Input<pulumi.Input<string>[]>;
    operState?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetEquipmentExpanderModuleParentArgs>;
    partNumber?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetEquipmentExpanderModulePermissionResourceArgs>[]>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetEquipmentExpanderModulePreviousFruArgs>;
    registeredDevice?: pulumi.Input<inputs.GetEquipmentExpanderModuleRegisteredDeviceArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetEquipmentExpanderModuleTagArgs>[]>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetEquipmentExpanderModuleVersionContextArgs>;
}
