// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLicenseAccountLicenseData(args?: GetLicenseAccountLicenseDataArgs, opts?: pulumi.InvokeOptions): Promise<GetLicenseAccountLicenseDataResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getLicenseAccountLicenseData:getLicenseAccountLicenseData", {
        "account": args.account,
        "accountId": args.accountId,
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "agentData": args.agentData,
        "ancestors": args.ancestors,
        "authExpireTime": args.authExpireTime,
        "authInitialTime": args.authInitialTime,
        "authNextTime": args.authNextTime,
        "category": args.category,
        "classId": args.classId,
        "createTime": args.createTime,
        "customerOp": args.customerOp,
        "defaultLicenseType": args.defaultLicenseType,
        "defaultLicenseTypeNewerModels": args.defaultLicenseTypeNewerModels,
        "domainGroupMoid": args.domainGroupMoid,
        "errorDesc": args.errorDesc,
        "group": args.group,
        "highestCompliantLicenseTier": args.highestCompliantLicenseTier,
        "id": args.id,
        "iksCustomerOp": args.iksCustomerOp,
        "iksLicenseCount": args.iksLicenseCount,
        "incCustomerOp": args.incCustomerOp,
        "incLicenseCount": args.incLicenseCount,
        "iwoCustomerOp": args.iwoCustomerOp,
        "iwoLicenseCount": args.iwoLicenseCount,
        "lastCssmSync": args.lastCssmSync,
        "lastRenew": args.lastRenew,
        "lastSync": args.lastSync,
        "lastUpdatedTime": args.lastUpdatedTime,
        "licenseInfoView": args.licenseInfoView,
        "licenseRegistrationStatus": args.licenseRegistrationStatus,
        "licenseState": args.licenseState,
        "licenseTechSupportInfo": args.licenseTechSupportInfo,
        "licenseinfos": args.licenseinfos,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registerExpireTime": args.registerExpireTime,
        "registerInitialTime": args.registerInitialTime,
        "registerNextTime": args.registerNextTime,
        "registrationStatus": args.registrationStatus,
        "renewFailureString": args.renewFailureString,
        "sharedScope": args.sharedScope,
        "smartAccount": args.smartAccount,
        "smartAccountDomain": args.smartAccountDomain,
        "smartApiEnabled": args.smartApiEnabled,
        "smartApiSyncStatus": args.smartApiSyncStatus,
        "smartlicenseToken": args.smartlicenseToken,
        "syncStatus": args.syncStatus,
        "tags": args.tags,
        "versionContext": args.versionContext,
        "virtualAccount": args.virtualAccount,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLicenseAccountLicenseData.
 */
export interface GetLicenseAccountLicenseDataArgs {
    account?: inputs.GetLicenseAccountLicenseDataAccount;
    accountId?: string;
    accountMoid?: string;
    additionalProperties?: string;
    agentData?: string;
    ancestors?: inputs.GetLicenseAccountLicenseDataAncestor[];
    authExpireTime?: string;
    authInitialTime?: string;
    authNextTime?: string;
    category?: string;
    classId?: string;
    createTime?: string;
    customerOp?: inputs.GetLicenseAccountLicenseDataCustomerOp;
    defaultLicenseType?: string;
    defaultLicenseTypeNewerModels?: string;
    domainGroupMoid?: string;
    errorDesc?: string;
    group?: string;
    highestCompliantLicenseTier?: string;
    id?: string;
    iksCustomerOp?: inputs.GetLicenseAccountLicenseDataIksCustomerOp;
    iksLicenseCount?: inputs.GetLicenseAccountLicenseDataIksLicenseCount;
    incCustomerOp?: inputs.GetLicenseAccountLicenseDataIncCustomerOp;
    incLicenseCount?: inputs.GetLicenseAccountLicenseDataIncLicenseCount;
    iwoCustomerOp?: inputs.GetLicenseAccountLicenseDataIwoCustomerOp;
    iwoLicenseCount?: inputs.GetLicenseAccountLicenseDataIwoLicenseCount;
    lastCssmSync?: string;
    lastRenew?: string;
    lastSync?: string;
    lastUpdatedTime?: string;
    licenseInfoView?: inputs.GetLicenseAccountLicenseDataLicenseInfoView;
    licenseRegistrationStatus?: inputs.GetLicenseAccountLicenseDataLicenseRegistrationStatus;
    licenseState?: string;
    licenseTechSupportInfo?: string;
    licenseinfos?: inputs.GetLicenseAccountLicenseDataLicenseinfo[];
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetLicenseAccountLicenseDataParent;
    permissionResources?: inputs.GetLicenseAccountLicenseDataPermissionResource[];
    registerExpireTime?: string;
    registerInitialTime?: string;
    registerNextTime?: string;
    registrationStatus?: string;
    renewFailureString?: string;
    sharedScope?: string;
    smartAccount?: string;
    smartAccountDomain?: string;
    smartApiEnabled?: boolean;
    smartApiSyncStatus?: string;
    smartlicenseToken?: inputs.GetLicenseAccountLicenseDataSmartlicenseToken;
    syncStatus?: string;
    tags?: inputs.GetLicenseAccountLicenseDataTag[];
    versionContext?: inputs.GetLicenseAccountLicenseDataVersionContext;
    virtualAccount?: string;
}

/**
 * A collection of values returned by getLicenseAccountLicenseData.
 */
export interface GetLicenseAccountLicenseDataResult {
    readonly account?: outputs.GetLicenseAccountLicenseDataAccount;
    readonly accountId?: string;
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly agentData?: string;
    readonly ancestors?: outputs.GetLicenseAccountLicenseDataAncestor[];
    readonly authExpireTime?: string;
    readonly authInitialTime?: string;
    readonly authNextTime?: string;
    readonly category?: string;
    readonly classId?: string;
    readonly createTime?: string;
    readonly customerOp?: outputs.GetLicenseAccountLicenseDataCustomerOp;
    readonly defaultLicenseType?: string;
    readonly defaultLicenseTypeNewerModels?: string;
    readonly domainGroupMoid?: string;
    readonly errorDesc?: string;
    readonly group?: string;
    readonly highestCompliantLicenseTier?: string;
    readonly id: string;
    readonly iksCustomerOp?: outputs.GetLicenseAccountLicenseDataIksCustomerOp;
    readonly iksLicenseCount?: outputs.GetLicenseAccountLicenseDataIksLicenseCount;
    readonly incCustomerOp?: outputs.GetLicenseAccountLicenseDataIncCustomerOp;
    readonly incLicenseCount?: outputs.GetLicenseAccountLicenseDataIncLicenseCount;
    readonly iwoCustomerOp?: outputs.GetLicenseAccountLicenseDataIwoCustomerOp;
    readonly iwoLicenseCount?: outputs.GetLicenseAccountLicenseDataIwoLicenseCount;
    readonly lastCssmSync?: string;
    readonly lastRenew?: string;
    readonly lastSync?: string;
    readonly lastUpdatedTime?: string;
    readonly licenseInfoView?: outputs.GetLicenseAccountLicenseDataLicenseInfoView;
    readonly licenseRegistrationStatus?: outputs.GetLicenseAccountLicenseDataLicenseRegistrationStatus;
    readonly licenseState?: string;
    readonly licenseTechSupportInfo?: string;
    readonly licenseinfos?: outputs.GetLicenseAccountLicenseDataLicenseinfo[];
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetLicenseAccountLicenseDataParent;
    readonly permissionResources?: outputs.GetLicenseAccountLicenseDataPermissionResource[];
    readonly registerExpireTime?: string;
    readonly registerInitialTime?: string;
    readonly registerNextTime?: string;
    readonly registrationStatus?: string;
    readonly renewFailureString?: string;
    readonly results: outputs.GetLicenseAccountLicenseDataResult[];
    readonly sharedScope?: string;
    readonly smartAccount?: string;
    readonly smartAccountDomain?: string;
    readonly smartApiEnabled?: boolean;
    readonly smartApiSyncStatus?: string;
    readonly smartlicenseToken?: outputs.GetLicenseAccountLicenseDataSmartlicenseToken;
    readonly syncStatus?: string;
    readonly tags?: outputs.GetLicenseAccountLicenseDataTag[];
    readonly versionContext?: outputs.GetLicenseAccountLicenseDataVersionContext;
    readonly virtualAccount?: string;
}
export function getLicenseAccountLicenseDataOutput(args?: GetLicenseAccountLicenseDataOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLicenseAccountLicenseDataResult> {
    return pulumi.output(args).apply((a: any) => getLicenseAccountLicenseData(a, opts))
}

/**
 * A collection of arguments for invoking getLicenseAccountLicenseData.
 */
export interface GetLicenseAccountLicenseDataOutputArgs {
    account?: pulumi.Input<inputs.GetLicenseAccountLicenseDataAccountArgs>;
    accountId?: pulumi.Input<string>;
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    agentData?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetLicenseAccountLicenseDataAncestorArgs>[]>;
    authExpireTime?: pulumi.Input<string>;
    authInitialTime?: pulumi.Input<string>;
    authNextTime?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    customerOp?: pulumi.Input<inputs.GetLicenseAccountLicenseDataCustomerOpArgs>;
    defaultLicenseType?: pulumi.Input<string>;
    defaultLicenseTypeNewerModels?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    errorDesc?: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    highestCompliantLicenseTier?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    iksCustomerOp?: pulumi.Input<inputs.GetLicenseAccountLicenseDataIksCustomerOpArgs>;
    iksLicenseCount?: pulumi.Input<inputs.GetLicenseAccountLicenseDataIksLicenseCountArgs>;
    incCustomerOp?: pulumi.Input<inputs.GetLicenseAccountLicenseDataIncCustomerOpArgs>;
    incLicenseCount?: pulumi.Input<inputs.GetLicenseAccountLicenseDataIncLicenseCountArgs>;
    iwoCustomerOp?: pulumi.Input<inputs.GetLicenseAccountLicenseDataIwoCustomerOpArgs>;
    iwoLicenseCount?: pulumi.Input<inputs.GetLicenseAccountLicenseDataIwoLicenseCountArgs>;
    lastCssmSync?: pulumi.Input<string>;
    lastRenew?: pulumi.Input<string>;
    lastSync?: pulumi.Input<string>;
    lastUpdatedTime?: pulumi.Input<string>;
    licenseInfoView?: pulumi.Input<inputs.GetLicenseAccountLicenseDataLicenseInfoViewArgs>;
    licenseRegistrationStatus?: pulumi.Input<inputs.GetLicenseAccountLicenseDataLicenseRegistrationStatusArgs>;
    licenseState?: pulumi.Input<string>;
    licenseTechSupportInfo?: pulumi.Input<string>;
    licenseinfos?: pulumi.Input<pulumi.Input<inputs.GetLicenseAccountLicenseDataLicenseinfoArgs>[]>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetLicenseAccountLicenseDataParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetLicenseAccountLicenseDataPermissionResourceArgs>[]>;
    registerExpireTime?: pulumi.Input<string>;
    registerInitialTime?: pulumi.Input<string>;
    registerNextTime?: pulumi.Input<string>;
    registrationStatus?: pulumi.Input<string>;
    renewFailureString?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    smartAccount?: pulumi.Input<string>;
    smartAccountDomain?: pulumi.Input<string>;
    smartApiEnabled?: pulumi.Input<boolean>;
    smartApiSyncStatus?: pulumi.Input<string>;
    smartlicenseToken?: pulumi.Input<inputs.GetLicenseAccountLicenseDataSmartlicenseTokenArgs>;
    syncStatus?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetLicenseAccountLicenseDataTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetLicenseAccountLicenseDataVersionContextArgs>;
    virtualAccount?: pulumi.Input<string>;
}
