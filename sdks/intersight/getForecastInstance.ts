// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getForecastInstance(args?: GetForecastInstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetForecastInstanceResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getForecastInstance:getForecastInstance", {
        "accountMoid": args.accountMoid,
        "action": args.action,
        "additionalProperties": args.additionalProperties,
        "altModels": args.altModels,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "dataInterval": args.dataInterval,
        "dataStartDate": args.dataStartDate,
        "deviceId": args.deviceId,
        "domainGroupMoid": args.domainGroupMoid,
        "forecastDef": args.forecastDef,
        "fullCapDays": args.fullCapDays,
        "id": args.id,
        "lastModelUpdateTime": args.lastModelUpdateTime,
        "metricName": args.metricName,
        "minDaysForForecast": args.minDaysForForecast,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "thresholdDays": args.thresholdDays,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getForecastInstance.
 */
export interface GetForecastInstanceArgs {
    accountMoid?: string;
    action?: string;
    additionalProperties?: string;
    altModels?: number[];
    ancestors?: inputs.GetForecastInstanceAncestor[];
    classId?: string;
    createTime?: string;
    dataInterval?: number;
    dataStartDate?: string;
    deviceId?: string;
    domainGroupMoid?: string;
    forecastDef?: inputs.GetForecastInstanceForecastDef;
    fullCapDays?: number;
    id?: string;
    lastModelUpdateTime?: string;
    metricName?: string;
    minDaysForForecast?: number;
    modTime?: string;
    model?: inputs.GetForecastInstanceModel;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetForecastInstanceParent;
    permissionResources?: inputs.GetForecastInstancePermissionResource[];
    registeredDevice?: inputs.GetForecastInstanceRegisteredDevice;
    sharedScope?: string;
    tags?: inputs.GetForecastInstanceTag[];
    thresholdDays?: number;
    versionContext?: inputs.GetForecastInstanceVersionContext;
}

/**
 * A collection of values returned by getForecastInstance.
 */
export interface GetForecastInstanceResult {
    readonly accountMoid?: string;
    readonly action?: string;
    readonly additionalProperties?: string;
    readonly altModels?: number[];
    readonly ancestors?: outputs.GetForecastInstanceAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly dataInterval?: number;
    readonly dataStartDate?: string;
    readonly deviceId?: string;
    readonly domainGroupMoid?: string;
    readonly forecastDef?: outputs.GetForecastInstanceForecastDef;
    readonly fullCapDays?: number;
    readonly id: string;
    readonly lastModelUpdateTime?: string;
    readonly metricName?: string;
    readonly minDaysForForecast?: number;
    readonly modTime?: string;
    readonly model?: outputs.GetForecastInstanceModel;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetForecastInstanceParent;
    readonly permissionResources?: outputs.GetForecastInstancePermissionResource[];
    readonly registeredDevice?: outputs.GetForecastInstanceRegisteredDevice;
    readonly results: outputs.GetForecastInstanceResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetForecastInstanceTag[];
    readonly thresholdDays?: number;
    readonly versionContext?: outputs.GetForecastInstanceVersionContext;
}
export function getForecastInstanceOutput(args?: GetForecastInstanceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetForecastInstanceResult> {
    return pulumi.output(args).apply((a: any) => getForecastInstance(a, opts))
}

/**
 * A collection of arguments for invoking getForecastInstance.
 */
export interface GetForecastInstanceOutputArgs {
    accountMoid?: pulumi.Input<string>;
    action?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    altModels?: pulumi.Input<pulumi.Input<number>[]>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetForecastInstanceAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    dataInterval?: pulumi.Input<number>;
    dataStartDate?: pulumi.Input<string>;
    deviceId?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    forecastDef?: pulumi.Input<inputs.GetForecastInstanceForecastDefArgs>;
    fullCapDays?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    lastModelUpdateTime?: pulumi.Input<string>;
    metricName?: pulumi.Input<string>;
    minDaysForForecast?: pulumi.Input<number>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<inputs.GetForecastInstanceModelArgs>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetForecastInstanceParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetForecastInstancePermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetForecastInstanceRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetForecastInstanceTagArgs>[]>;
    thresholdDays?: pulumi.Input<number>;
    versionContext?: pulumi.Input<inputs.GetForecastInstanceVersionContextArgs>;
}
