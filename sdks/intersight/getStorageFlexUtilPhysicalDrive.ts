// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageFlexUtilPhysicalDrive(args?: GetStorageFlexUtilPhysicalDriveArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageFlexUtilPhysicalDriveResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageFlexUtilPhysicalDrive:getStorageFlexUtilPhysicalDrive", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "blockSize": args.blockSize,
        "capacity": args.capacity,
        "classId": args.classId,
        "controller": args.controller,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "drivesEnabled": args.drivesEnabled,
        "health": args.health,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "isUpgraded": args.isUpgraded,
        "manufacturerDate": args.manufacturerDate,
        "manufacturerId": args.manufacturerId,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "objectType": args.objectType,
        "oemId": args.oemId,
        "owners": args.owners,
        "parent": args.parent,
        "partitionCount": args.partitionCount,
        "pdStatus": args.pdStatus,
        "permissionResources": args.permissionResources,
        "physicalDrive": args.physicalDrive,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "productName": args.productName,
        "productRevision": args.productRevision,
        "readErrorCount": args.readErrorCount,
        "readErrorThreshold": args.readErrorThreshold,
        "registeredDevice": args.registeredDevice,
        "revision": args.revision,
        "rn": args.rn,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "storageFlexUtilController": args.storageFlexUtilController,
        "tags": args.tags,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
        "writeEnabled": args.writeEnabled,
        "writeErrorCount": args.writeErrorCount,
        "writeErrorThreshold": args.writeErrorThreshold,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageFlexUtilPhysicalDrive.
 */
export interface GetStorageFlexUtilPhysicalDriveArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageFlexUtilPhysicalDriveAncestor[];
    blockSize?: string;
    capacity?: string;
    classId?: string;
    controller?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    drivesEnabled?: string;
    health?: string;
    id?: string;
    inventoryDeviceInfo?: inputs.GetStorageFlexUtilPhysicalDriveInventoryDeviceInfo;
    isUpgraded?: boolean;
    manufacturerDate?: string;
    manufacturerId?: string;
    modTime?: string;
    model?: string;
    moid?: string;
    objectType?: string;
    oemId?: string;
    owners?: string[];
    parent?: inputs.GetStorageFlexUtilPhysicalDriveParent;
    partitionCount?: string;
    pdStatus?: string;
    permissionResources?: inputs.GetStorageFlexUtilPhysicalDrivePermissionResource[];
    physicalDrive?: string;
    presence?: string;
    previousFru?: inputs.GetStorageFlexUtilPhysicalDrivePreviousFru;
    productName?: string;
    productRevision?: string;
    readErrorCount?: string;
    readErrorThreshold?: string;
    registeredDevice?: inputs.GetStorageFlexUtilPhysicalDriveRegisteredDevice;
    revision?: string;
    rn?: string;
    serial?: string;
    sharedScope?: string;
    storageFlexUtilController?: inputs.GetStorageFlexUtilPhysicalDriveStorageFlexUtilController;
    tags?: inputs.GetStorageFlexUtilPhysicalDriveTag[];
    vendor?: string;
    versionContext?: inputs.GetStorageFlexUtilPhysicalDriveVersionContext;
    writeEnabled?: string;
    writeErrorCount?: string;
    writeErrorThreshold?: string;
}

/**
 * A collection of values returned by getStorageFlexUtilPhysicalDrive.
 */
export interface GetStorageFlexUtilPhysicalDriveResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageFlexUtilPhysicalDriveAncestor[];
    readonly blockSize?: string;
    readonly capacity?: string;
    readonly classId?: string;
    readonly controller?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly drivesEnabled?: string;
    readonly health?: string;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetStorageFlexUtilPhysicalDriveInventoryDeviceInfo;
    readonly isUpgraded?: boolean;
    readonly manufacturerDate?: string;
    readonly manufacturerId?: string;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly oemId?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageFlexUtilPhysicalDriveParent;
    readonly partitionCount?: string;
    readonly pdStatus?: string;
    readonly permissionResources?: outputs.GetStorageFlexUtilPhysicalDrivePermissionResource[];
    readonly physicalDrive?: string;
    readonly presence?: string;
    readonly previousFru?: outputs.GetStorageFlexUtilPhysicalDrivePreviousFru;
    readonly productName?: string;
    readonly productRevision?: string;
    readonly readErrorCount?: string;
    readonly readErrorThreshold?: string;
    readonly registeredDevice?: outputs.GetStorageFlexUtilPhysicalDriveRegisteredDevice;
    readonly results: outputs.GetStorageFlexUtilPhysicalDriveResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly storageFlexUtilController?: outputs.GetStorageFlexUtilPhysicalDriveStorageFlexUtilController;
    readonly tags?: outputs.GetStorageFlexUtilPhysicalDriveTag[];
    readonly vendor?: string;
    readonly versionContext?: outputs.GetStorageFlexUtilPhysicalDriveVersionContext;
    readonly writeEnabled?: string;
    readonly writeErrorCount?: string;
    readonly writeErrorThreshold?: string;
}
export function getStorageFlexUtilPhysicalDriveOutput(args?: GetStorageFlexUtilPhysicalDriveOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageFlexUtilPhysicalDriveResult> {
    return pulumi.output(args).apply((a: any) => getStorageFlexUtilPhysicalDrive(a, opts))
}

/**
 * A collection of arguments for invoking getStorageFlexUtilPhysicalDrive.
 */
export interface GetStorageFlexUtilPhysicalDriveOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageFlexUtilPhysicalDriveAncestorArgs>[]>;
    blockSize?: pulumi.Input<string>;
    capacity?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    controller?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    drivesEnabled?: pulumi.Input<string>;
    health?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetStorageFlexUtilPhysicalDriveInventoryDeviceInfoArgs>;
    isUpgraded?: pulumi.Input<boolean>;
    manufacturerDate?: pulumi.Input<string>;
    manufacturerId?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    oemId?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageFlexUtilPhysicalDriveParentArgs>;
    partitionCount?: pulumi.Input<string>;
    pdStatus?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageFlexUtilPhysicalDrivePermissionResourceArgs>[]>;
    physicalDrive?: pulumi.Input<string>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetStorageFlexUtilPhysicalDrivePreviousFruArgs>;
    productName?: pulumi.Input<string>;
    productRevision?: pulumi.Input<string>;
    readErrorCount?: pulumi.Input<string>;
    readErrorThreshold?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetStorageFlexUtilPhysicalDriveRegisteredDeviceArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    storageFlexUtilController?: pulumi.Input<inputs.GetStorageFlexUtilPhysicalDriveStorageFlexUtilControllerArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageFlexUtilPhysicalDriveTagArgs>[]>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetStorageFlexUtilPhysicalDriveVersionContextArgs>;
    writeEnabled?: pulumi.Input<string>;
    writeErrorCount?: pulumi.Input<string>;
    writeErrorThreshold?: pulumi.Input<string>;
}
