// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVirtualizationHost(args?: GetVirtualizationHostArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualizationHostResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getVirtualizationHost:getVirtualizationHost", {
        "accountMoid": args.accountMoid,
        "action": args.action,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "discovered": args.discovered,
        "domainGroupMoid": args.domainGroupMoid,
        "evacuate": args.evacuate,
        "hostConfig": args.hostConfig,
        "hypervisorType": args.hypervisorType,
        "id": args.id,
        "identity": args.identity,
        "inventory": args.inventory,
        "maintenanceState": args.maintenanceState,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
        "workflowInfo": args.workflowInfo,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVirtualizationHost.
 */
export interface GetVirtualizationHostArgs {
    accountMoid?: string;
    action?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetVirtualizationHostAncestor[];
    classId?: string;
    createTime?: string;
    discovered?: boolean;
    domainGroupMoid?: string;
    evacuate?: boolean;
    hostConfig?: inputs.GetVirtualizationHostHostConfig;
    hypervisorType?: string;
    id?: string;
    identity?: string;
    inventory?: inputs.GetVirtualizationHostInventory;
    maintenanceState?: string;
    modTime?: string;
    model?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetVirtualizationHostParent;
    permissionResources?: inputs.GetVirtualizationHostPermissionResource[];
    registeredDevice?: inputs.GetVirtualizationHostRegisteredDevice;
    serial?: string;
    sharedScope?: string;
    tags?: inputs.GetVirtualizationHostTag[];
    vendor?: string;
    versionContext?: inputs.GetVirtualizationHostVersionContext;
    workflowInfo?: inputs.GetVirtualizationHostWorkflowInfo;
}

/**
 * A collection of values returned by getVirtualizationHost.
 */
export interface GetVirtualizationHostResult {
    readonly accountMoid?: string;
    readonly action?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetVirtualizationHostAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly discovered?: boolean;
    readonly domainGroupMoid?: string;
    readonly evacuate?: boolean;
    readonly hostConfig?: outputs.GetVirtualizationHostHostConfig;
    readonly hypervisorType?: string;
    readonly id: string;
    readonly identity?: string;
    readonly inventory?: outputs.GetVirtualizationHostInventory;
    readonly maintenanceState?: string;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetVirtualizationHostParent;
    readonly permissionResources?: outputs.GetVirtualizationHostPermissionResource[];
    readonly registeredDevice?: outputs.GetVirtualizationHostRegisteredDevice;
    readonly results: outputs.GetVirtualizationHostResult[];
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetVirtualizationHostTag[];
    readonly vendor?: string;
    readonly versionContext?: outputs.GetVirtualizationHostVersionContext;
    readonly workflowInfo?: outputs.GetVirtualizationHostWorkflowInfo;
}
export function getVirtualizationHostOutput(args?: GetVirtualizationHostOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualizationHostResult> {
    return pulumi.output(args).apply((a: any) => getVirtualizationHost(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualizationHost.
 */
export interface GetVirtualizationHostOutputArgs {
    accountMoid?: pulumi.Input<string>;
    action?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationHostAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    discovered?: pulumi.Input<boolean>;
    domainGroupMoid?: pulumi.Input<string>;
    evacuate?: pulumi.Input<boolean>;
    hostConfig?: pulumi.Input<inputs.GetVirtualizationHostHostConfigArgs>;
    hypervisorType?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    identity?: pulumi.Input<string>;
    inventory?: pulumi.Input<inputs.GetVirtualizationHostInventoryArgs>;
    maintenanceState?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetVirtualizationHostParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationHostPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetVirtualizationHostRegisteredDeviceArgs>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationHostTagArgs>[]>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetVirtualizationHostVersionContextArgs>;
    workflowInfo?: pulumi.Input<inputs.GetVirtualizationHostWorkflowInfoArgs>;
}
