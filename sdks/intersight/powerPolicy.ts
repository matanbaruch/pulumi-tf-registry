// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PowerPolicy extends pulumi.CustomResource {
    /**
     * Get an existing PowerPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PowerPolicyState, opts?: pulumi.CustomResourceOptions): PowerPolicy {
        return new PowerPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'intersight:index/powerPolicy:PowerPolicy';

    /**
     * Returns true if the given object is an instance of PowerPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PowerPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PowerPolicy.__pulumiType;
    }

    /**
     * The Account ID for this managed object.
     */
    public readonly accountMoid!: pulumi.Output<string>;
    public readonly additionalProperties!: pulumi.Output<string | undefined>;
    /**
     * Sets the allocated power budget of the chassis (in Watts).
     */
    public readonly allocatedBudget!: pulumi.Output<number | undefined>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly ancestors!: pulumi.Output<outputs.PowerPolicyAncestor[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    public readonly classId!: pulumi.Output<string | undefined>;
    /**
     * The time when this managed object was created.
     */
    public readonly createTime!: pulumi.Output<string>;
    /**
     * Description of the policy.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The DomainGroup ID for this managed object.
     */
    public readonly domainGroupMoid!: pulumi.Output<string>;
    /**
     * Sets the dynamic power rebalancing mode of the chassis. If enabled, this mode allows the chassis to dynamically
     * reallocate the power between servers depending on their power usage. * `Enabled` - Set the value to Enabled. *
     * `Disabled` - Set the value to Disabled.
     */
    public readonly dynamicRebalancing!: pulumi.Output<string | undefined>;
    /**
     * Sets the Extended Power Capacity of the Chassis. If Enabled, this mode allows chassis available power to be increased by
     * borrowing power from redundant power supplies. This option is only supported for Cisco UCS X series Chassis. * `Enabled`
     * - Set the value to Enabled. * `Disabled` - Set the value to Disabled.
     */
    public readonly extendedPowerCapacity!: pulumi.Output<string | undefined>;
    /**
     * The time when this managed object was last modified.
     */
    public readonly modTime!: pulumi.Output<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    public readonly moid!: pulumi.Output<string>;
    /**
     * Name of the concrete policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    public readonly objectType!: pulumi.Output<string | undefined>;
    /**
     * A reference to a organizationOrganization resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    public readonly organizations!: pulumi.Output<outputs.PowerPolicyOrganization[]>;
    public readonly owners!: pulumi.Output<string[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    public readonly parents!: pulumi.Output<outputs.PowerPolicyParent[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly permissionResources!: pulumi.Output<outputs.PowerPolicyPermissionResource[]>;
    /**
     * Sets the Power Priority of the Server. This priority is used to determine the initial power allocation for servers. This
     * field is only supported for Cisco UCS B series and X series servers. * `Low` - Set the Power Priority to Low. * `Medium`
     * - Set the Power Priority to Medium. * `High` - Set the Power Priority to High.
     */
    public readonly powerPriority!: pulumi.Output<string | undefined>;
    /**
     * Sets the Power Profiling of the Server. If Enabled, this field allows the power manager to run power profiling utility
     * to determine the power needs of the server. This field is only supported for Cisco UCS X series servers. * `Enabled` -
     * Set the value to Enabled. * `Disabled` - Set the value to Disabled.
     */
    public readonly powerProfiling!: pulumi.Output<string | undefined>;
    /**
     * Sets the Power Restore State of the Server. In the absence of Intersight connectivity, the chassis will use this policy
     * to recover the host power after a power loss event. This field is only supported for Cisco UCS B series and X series
     * servers. * `AlwaysOff` - Set the Power Restore Mode to Off. * `AlwaysOn` - Set the Power Restore Mode to On. *
     * `LastState` - Set the Power Restore Mode to LastState.
     */
    public readonly powerRestoreState!: pulumi.Output<string | undefined>;
    /**
     * Sets the power save mode of the chassis. If the requested power budget is less than available power capacity, the
     * additional PSUs not required to comply with redundancy policy are placed in power save mode. * `Enabled` - Set the value
     * to Enabled. * `Disabled` - Set the value to Disabled.
     */
    public readonly powerSaveMode!: pulumi.Output<string | undefined>;
    /**
     * An array of relationships to policyAbstractConfigProfile resources.
     */
    public readonly profiles!: pulumi.Output<outputs.PowerPolicyProfile[]>;
    /**
     * Sets the Power Redundancy Mode of the Chassis. Redundancy Mode determines the number of PSUs the chassis keeps as
     * redundant. N+2 mode is only supported for Cisco UCS X series Chassis. * `Grid` - Grid Mode requires two power sources.
     * If one source fails, the surviving PSUs connected to the other source provides power to the chassis. * `NotRedundant` -
     * Power Manager turns on the minimum number of PSUs required to support chassis power requirements. No Redundant PSUs are
     * maintained. * `N+1` - Power Manager turns on the minimum number of PSUs required to support chassis power requirements
     * plus one additional PSU for redundancy. * `N+2` - Power Manager turns on the minimum number of PSUs required to support
     * chassis power requirements plus two additional PSU for redundancy. This Mode is only supported for UCS X series Chassis.
     */
    public readonly redundancyMode!: pulumi.Output<string | undefined>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    public readonly sharedScope!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.PowerPolicyTag[]>;
    /**
     * The versioning info for this managed object.
     */
    public readonly versionContexts!: pulumi.Output<outputs.PowerPolicyVersionContext[]>;

    /**
     * Create a PowerPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PowerPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PowerPolicyArgs | PowerPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PowerPolicyState | undefined;
            resourceInputs["accountMoid"] = state ? state.accountMoid : undefined;
            resourceInputs["additionalProperties"] = state ? state.additionalProperties : undefined;
            resourceInputs["allocatedBudget"] = state ? state.allocatedBudget : undefined;
            resourceInputs["ancestors"] = state ? state.ancestors : undefined;
            resourceInputs["classId"] = state ? state.classId : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domainGroupMoid"] = state ? state.domainGroupMoid : undefined;
            resourceInputs["dynamicRebalancing"] = state ? state.dynamicRebalancing : undefined;
            resourceInputs["extendedPowerCapacity"] = state ? state.extendedPowerCapacity : undefined;
            resourceInputs["modTime"] = state ? state.modTime : undefined;
            resourceInputs["moid"] = state ? state.moid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objectType"] = state ? state.objectType : undefined;
            resourceInputs["organizations"] = state ? state.organizations : undefined;
            resourceInputs["owners"] = state ? state.owners : undefined;
            resourceInputs["parents"] = state ? state.parents : undefined;
            resourceInputs["permissionResources"] = state ? state.permissionResources : undefined;
            resourceInputs["powerPriority"] = state ? state.powerPriority : undefined;
            resourceInputs["powerProfiling"] = state ? state.powerProfiling : undefined;
            resourceInputs["powerRestoreState"] = state ? state.powerRestoreState : undefined;
            resourceInputs["powerSaveMode"] = state ? state.powerSaveMode : undefined;
            resourceInputs["profiles"] = state ? state.profiles : undefined;
            resourceInputs["redundancyMode"] = state ? state.redundancyMode : undefined;
            resourceInputs["sharedScope"] = state ? state.sharedScope : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["versionContexts"] = state ? state.versionContexts : undefined;
        } else {
            const args = argsOrState as PowerPolicyArgs | undefined;
            resourceInputs["accountMoid"] = args ? args.accountMoid : undefined;
            resourceInputs["additionalProperties"] = args ? args.additionalProperties : undefined;
            resourceInputs["allocatedBudget"] = args ? args.allocatedBudget : undefined;
            resourceInputs["ancestors"] = args ? args.ancestors : undefined;
            resourceInputs["classId"] = args ? args.classId : undefined;
            resourceInputs["createTime"] = args ? args.createTime : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domainGroupMoid"] = args ? args.domainGroupMoid : undefined;
            resourceInputs["dynamicRebalancing"] = args ? args.dynamicRebalancing : undefined;
            resourceInputs["extendedPowerCapacity"] = args ? args.extendedPowerCapacity : undefined;
            resourceInputs["modTime"] = args ? args.modTime : undefined;
            resourceInputs["moid"] = args ? args.moid : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["objectType"] = args ? args.objectType : undefined;
            resourceInputs["organizations"] = args ? args.organizations : undefined;
            resourceInputs["owners"] = args ? args.owners : undefined;
            resourceInputs["parents"] = args ? args.parents : undefined;
            resourceInputs["permissionResources"] = args ? args.permissionResources : undefined;
            resourceInputs["powerPriority"] = args ? args.powerPriority : undefined;
            resourceInputs["powerProfiling"] = args ? args.powerProfiling : undefined;
            resourceInputs["powerRestoreState"] = args ? args.powerRestoreState : undefined;
            resourceInputs["powerSaveMode"] = args ? args.powerSaveMode : undefined;
            resourceInputs["profiles"] = args ? args.profiles : undefined;
            resourceInputs["redundancyMode"] = args ? args.redundancyMode : undefined;
            resourceInputs["sharedScope"] = args ? args.sharedScope : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["versionContexts"] = args ? args.versionContexts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PowerPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PowerPolicy resources.
 */
export interface PowerPolicyState {
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    /**
     * Sets the allocated power budget of the chassis (in Watts).
     */
    allocatedBudget?: pulumi.Input<number>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.PowerPolicyAncestor>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Description of the policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    /**
     * Sets the dynamic power rebalancing mode of the chassis. If enabled, this mode allows the chassis to dynamically
     * reallocate the power between servers depending on their power usage. * `Enabled` - Set the value to Enabled. *
     * `Disabled` - Set the value to Disabled.
     */
    dynamicRebalancing?: pulumi.Input<string>;
    /**
     * Sets the Extended Power Capacity of the Chassis. If Enabled, this mode allows chassis available power to be increased by
     * borrowing power from redundant power supplies. This option is only supported for Cisco UCS X series Chassis. * `Enabled`
     * - Set the value to Enabled. * `Disabled` - Set the value to Disabled.
     */
    extendedPowerCapacity?: pulumi.Input<string>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * Name of the concrete policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    /**
     * A reference to a organizationOrganization resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    organizations?: pulumi.Input<pulumi.Input<inputs.PowerPolicyOrganization>[]>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.PowerPolicyParent>[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.PowerPolicyPermissionResource>[]>;
    /**
     * Sets the Power Priority of the Server. This priority is used to determine the initial power allocation for servers. This
     * field is only supported for Cisco UCS B series and X series servers. * `Low` - Set the Power Priority to Low. * `Medium`
     * - Set the Power Priority to Medium. * `High` - Set the Power Priority to High.
     */
    powerPriority?: pulumi.Input<string>;
    /**
     * Sets the Power Profiling of the Server. If Enabled, this field allows the power manager to run power profiling utility
     * to determine the power needs of the server. This field is only supported for Cisco UCS X series servers. * `Enabled` -
     * Set the value to Enabled. * `Disabled` - Set the value to Disabled.
     */
    powerProfiling?: pulumi.Input<string>;
    /**
     * Sets the Power Restore State of the Server. In the absence of Intersight connectivity, the chassis will use this policy
     * to recover the host power after a power loss event. This field is only supported for Cisco UCS B series and X series
     * servers. * `AlwaysOff` - Set the Power Restore Mode to Off. * `AlwaysOn` - Set the Power Restore Mode to On. *
     * `LastState` - Set the Power Restore Mode to LastState.
     */
    powerRestoreState?: pulumi.Input<string>;
    /**
     * Sets the power save mode of the chassis. If the requested power budget is less than available power capacity, the
     * additional PSUs not required to comply with redundancy policy are placed in power save mode. * `Enabled` - Set the value
     * to Enabled. * `Disabled` - Set the value to Disabled.
     */
    powerSaveMode?: pulumi.Input<string>;
    /**
     * An array of relationships to policyAbstractConfigProfile resources.
     */
    profiles?: pulumi.Input<pulumi.Input<inputs.PowerPolicyProfile>[]>;
    /**
     * Sets the Power Redundancy Mode of the Chassis. Redundancy Mode determines the number of PSUs the chassis keeps as
     * redundant. N+2 mode is only supported for Cisco UCS X series Chassis. * `Grid` - Grid Mode requires two power sources.
     * If one source fails, the surviving PSUs connected to the other source provides power to the chassis. * `NotRedundant` -
     * Power Manager turns on the minimum number of PSUs required to support chassis power requirements. No Redundant PSUs are
     * maintained. * `N+1` - Power Manager turns on the minimum number of PSUs required to support chassis power requirements
     * plus one additional PSU for redundancy. * `N+2` - Power Manager turns on the minimum number of PSUs required to support
     * chassis power requirements plus two additional PSU for redundancy. This Mode is only supported for UCS X series Chassis.
     */
    redundancyMode?: pulumi.Input<string>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.PowerPolicyTag>[]>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.PowerPolicyVersionContext>[]>;
}

/**
 * The set of arguments for constructing a PowerPolicy resource.
 */
export interface PowerPolicyArgs {
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    /**
     * Sets the allocated power budget of the chassis (in Watts).
     */
    allocatedBudget?: pulumi.Input<number>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.PowerPolicyAncestor>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Description of the policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    /**
     * Sets the dynamic power rebalancing mode of the chassis. If enabled, this mode allows the chassis to dynamically
     * reallocate the power between servers depending on their power usage. * `Enabled` - Set the value to Enabled. *
     * `Disabled` - Set the value to Disabled.
     */
    dynamicRebalancing?: pulumi.Input<string>;
    /**
     * Sets the Extended Power Capacity of the Chassis. If Enabled, this mode allows chassis available power to be increased by
     * borrowing power from redundant power supplies. This option is only supported for Cisco UCS X series Chassis. * `Enabled`
     * - Set the value to Enabled. * `Disabled` - Set the value to Disabled.
     */
    extendedPowerCapacity?: pulumi.Input<string>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * Name of the concrete policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    /**
     * A reference to a organizationOrganization resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    organizations?: pulumi.Input<pulumi.Input<inputs.PowerPolicyOrganization>[]>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.PowerPolicyParent>[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.PowerPolicyPermissionResource>[]>;
    /**
     * Sets the Power Priority of the Server. This priority is used to determine the initial power allocation for servers. This
     * field is only supported for Cisco UCS B series and X series servers. * `Low` - Set the Power Priority to Low. * `Medium`
     * - Set the Power Priority to Medium. * `High` - Set the Power Priority to High.
     */
    powerPriority?: pulumi.Input<string>;
    /**
     * Sets the Power Profiling of the Server. If Enabled, this field allows the power manager to run power profiling utility
     * to determine the power needs of the server. This field is only supported for Cisco UCS X series servers. * `Enabled` -
     * Set the value to Enabled. * `Disabled` - Set the value to Disabled.
     */
    powerProfiling?: pulumi.Input<string>;
    /**
     * Sets the Power Restore State of the Server. In the absence of Intersight connectivity, the chassis will use this policy
     * to recover the host power after a power loss event. This field is only supported for Cisco UCS B series and X series
     * servers. * `AlwaysOff` - Set the Power Restore Mode to Off. * `AlwaysOn` - Set the Power Restore Mode to On. *
     * `LastState` - Set the Power Restore Mode to LastState.
     */
    powerRestoreState?: pulumi.Input<string>;
    /**
     * Sets the power save mode of the chassis. If the requested power budget is less than available power capacity, the
     * additional PSUs not required to comply with redundancy policy are placed in power save mode. * `Enabled` - Set the value
     * to Enabled. * `Disabled` - Set the value to Disabled.
     */
    powerSaveMode?: pulumi.Input<string>;
    /**
     * An array of relationships to policyAbstractConfigProfile resources.
     */
    profiles?: pulumi.Input<pulumi.Input<inputs.PowerPolicyProfile>[]>;
    /**
     * Sets the Power Redundancy Mode of the Chassis. Redundancy Mode determines the number of PSUs the chassis keeps as
     * redundant. N+2 mode is only supported for Cisco UCS X series Chassis. * `Grid` - Grid Mode requires two power sources.
     * If one source fails, the surviving PSUs connected to the other source provides power to the chassis. * `NotRedundant` -
     * Power Manager turns on the minimum number of PSUs required to support chassis power requirements. No Redundant PSUs are
     * maintained. * `N+1` - Power Manager turns on the minimum number of PSUs required to support chassis power requirements
     * plus one additional PSU for redundancy. * `N+2` - Power Manager turns on the minimum number of PSUs required to support
     * chassis power requirements plus two additional PSU for redundancy. This Mode is only supported for UCS X series Chassis.
     */
    redundancyMode?: pulumi.Input<string>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.PowerPolicyTag>[]>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.PowerPolicyVersionContext>[]>;
}
