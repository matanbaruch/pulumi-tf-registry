// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageDiskGroup(args?: GetStorageDiskGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageDiskGroupResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageDiskGroup:getStorageDiskGroup", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "dedicatedHotSpares": args.dedicatedHotSpares,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "raidType": args.raidType,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "sharedScope": args.sharedScope,
        "spans": args.spans,
        "storageController": args.storageController,
        "tags": args.tags,
        "versionContext": args.versionContext,
        "virtualDrives": args.virtualDrives,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageDiskGroup.
 */
export interface GetStorageDiskGroupArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageDiskGroupAncestor[];
    classId?: string;
    createTime?: string;
    dedicatedHotSpares?: inputs.GetStorageDiskGroupDedicatedHotSpare[];
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageDiskGroupParent;
    permissionResources?: inputs.GetStorageDiskGroupPermissionResource[];
    raidType?: string;
    registeredDevice?: inputs.GetStorageDiskGroupRegisteredDevice;
    rn?: string;
    sharedScope?: string;
    spans?: inputs.GetStorageDiskGroupSpan[];
    storageController?: inputs.GetStorageDiskGroupStorageController;
    tags?: inputs.GetStorageDiskGroupTag[];
    versionContext?: inputs.GetStorageDiskGroupVersionContext;
    virtualDrives?: inputs.GetStorageDiskGroupVirtualDrife[];
}

/**
 * A collection of values returned by getStorageDiskGroup.
 */
export interface GetStorageDiskGroupResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageDiskGroupAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly dedicatedHotSpares?: outputs.GetStorageDiskGroupDedicatedHotSpare[];
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageDiskGroupParent;
    readonly permissionResources?: outputs.GetStorageDiskGroupPermissionResource[];
    readonly raidType?: string;
    readonly registeredDevice?: outputs.GetStorageDiskGroupRegisteredDevice;
    readonly results: outputs.GetStorageDiskGroupResult[];
    readonly rn?: string;
    readonly sharedScope?: string;
    readonly spans?: outputs.GetStorageDiskGroupSpan[];
    readonly storageController?: outputs.GetStorageDiskGroupStorageController;
    readonly tags?: outputs.GetStorageDiskGroupTag[];
    readonly versionContext?: outputs.GetStorageDiskGroupVersionContext;
    readonly virtualDrives?: outputs.GetStorageDiskGroupVirtualDrife[];
}
export function getStorageDiskGroupOutput(args?: GetStorageDiskGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageDiskGroupResult> {
    return pulumi.output(args).apply((a: any) => getStorageDiskGroup(a, opts))
}

/**
 * A collection of arguments for invoking getStorageDiskGroup.
 */
export interface GetStorageDiskGroupOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageDiskGroupAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    dedicatedHotSpares?: pulumi.Input<pulumi.Input<inputs.GetStorageDiskGroupDedicatedHotSpareArgs>[]>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageDiskGroupParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageDiskGroupPermissionResourceArgs>[]>;
    raidType?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetStorageDiskGroupRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    spans?: pulumi.Input<pulumi.Input<inputs.GetStorageDiskGroupSpanArgs>[]>;
    storageController?: pulumi.Input<inputs.GetStorageDiskGroupStorageControllerArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageDiskGroupTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetStorageDiskGroupVersionContextArgs>;
    virtualDrives?: pulumi.Input<pulumi.Input<inputs.GetStorageDiskGroupVirtualDrifeArgs>[]>;
}
