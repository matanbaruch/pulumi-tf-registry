// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageDriveGroup(args?: GetStorageDriveGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageDriveGroupResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageDriveGroup:getStorageDriveGroup", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "automaticDriveGroup": args.automaticDriveGroup,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "manualDriveGroup": args.manualDriveGroup,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "raidLevel": args.raidLevel,
        "secureDriveGroup": args.secureDriveGroup,
        "sharedScope": args.sharedScope,
        "storagePolicy": args.storagePolicy,
        "tags": args.tags,
        "type": args.type,
        "versionContext": args.versionContext,
        "virtualDrives": args.virtualDrives,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageDriveGroup.
 */
export interface GetStorageDriveGroupArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageDriveGroupAncestor[];
    automaticDriveGroup?: inputs.GetStorageDriveGroupAutomaticDriveGroup;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    id?: string;
    manualDriveGroup?: inputs.GetStorageDriveGroupManualDriveGroup;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageDriveGroupParent;
    permissionResources?: inputs.GetStorageDriveGroupPermissionResource[];
    raidLevel?: string;
    secureDriveGroup?: boolean;
    sharedScope?: string;
    storagePolicy?: inputs.GetStorageDriveGroupStoragePolicy;
    tags?: inputs.GetStorageDriveGroupTag[];
    type?: number;
    versionContext?: inputs.GetStorageDriveGroupVersionContext;
    virtualDrives?: inputs.GetStorageDriveGroupVirtualDrife[];
}

/**
 * A collection of values returned by getStorageDriveGroup.
 */
export interface GetStorageDriveGroupResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageDriveGroupAncestor[];
    readonly automaticDriveGroup?: outputs.GetStorageDriveGroupAutomaticDriveGroup;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly manualDriveGroup?: outputs.GetStorageDriveGroupManualDriveGroup;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageDriveGroupParent;
    readonly permissionResources?: outputs.GetStorageDriveGroupPermissionResource[];
    readonly raidLevel?: string;
    readonly results: outputs.GetStorageDriveGroupResult[];
    readonly secureDriveGroup?: boolean;
    readonly sharedScope?: string;
    readonly storagePolicy?: outputs.GetStorageDriveGroupStoragePolicy;
    readonly tags?: outputs.GetStorageDriveGroupTag[];
    readonly type?: number;
    readonly versionContext?: outputs.GetStorageDriveGroupVersionContext;
    readonly virtualDrives?: outputs.GetStorageDriveGroupVirtualDrife[];
}
export function getStorageDriveGroupOutput(args?: GetStorageDriveGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageDriveGroupResult> {
    return pulumi.output(args).apply((a: any) => getStorageDriveGroup(a, opts))
}

/**
 * A collection of arguments for invoking getStorageDriveGroup.
 */
export interface GetStorageDriveGroupOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageDriveGroupAncestorArgs>[]>;
    automaticDriveGroup?: pulumi.Input<inputs.GetStorageDriveGroupAutomaticDriveGroupArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    manualDriveGroup?: pulumi.Input<inputs.GetStorageDriveGroupManualDriveGroupArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageDriveGroupParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageDriveGroupPermissionResourceArgs>[]>;
    raidLevel?: pulumi.Input<string>;
    secureDriveGroup?: pulumi.Input<boolean>;
    sharedScope?: pulumi.Input<string>;
    storagePolicy?: pulumi.Input<inputs.GetStorageDriveGroupStoragePolicyArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageDriveGroupTagArgs>[]>;
    type?: pulumi.Input<number>;
    versionContext?: pulumi.Input<inputs.GetStorageDriveGroupVersionContextArgs>;
    virtualDrives?: pulumi.Input<pulumi.Input<inputs.GetStorageDriveGroupVirtualDrifeArgs>[]>;
}
