// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getKubernetesNodeGroupProfile(args?: GetKubernetesNodeGroupProfileArgs, opts?: pulumi.InvokeOptions): Promise<GetKubernetesNodeGroupProfileResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getKubernetesNodeGroupProfile:getKubernetesNodeGroupProfile", {
        "accountMoid": args.accountMoid,
        "action": args.action,
        "actionParams": args.actionParams,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "clusterProfile": args.clusterProfile,
        "configContext": args.configContext,
        "createTime": args.createTime,
        "currentsize": args.currentsize,
        "description": args.description,
        "desiredsize": args.desiredsize,
        "domainGroupMoid": args.domainGroupMoid,
        "gpuConfigs": args.gpuConfigs,
        "id": args.id,
        "infraProvider": args.infraProvider,
        "ipPools": args.ipPools,
        "kubernetesVersion": args.kubernetesVersion,
        "labels": args.labels,
        "maxsize": args.maxsize,
        "minsize": args.minsize,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "nodeType": args.nodeType,
        "nodes": args.nodes,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "policyBuckets": args.policyBuckets,
        "scheduledActions": args.scheduledActions,
        "sharedScope": args.sharedScope,
        "srcTemplate": args.srcTemplate,
        "tags": args.tags,
        "taints": args.taints,
        "type": args.type,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getKubernetesNodeGroupProfile.
 */
export interface GetKubernetesNodeGroupProfileArgs {
    accountMoid?: string;
    action?: string;
    actionParams?: inputs.GetKubernetesNodeGroupProfileActionParam[];
    additionalProperties?: string;
    ancestors?: inputs.GetKubernetesNodeGroupProfileAncestor[];
    classId?: string;
    clusterProfile?: inputs.GetKubernetesNodeGroupProfileClusterProfile;
    configContext?: inputs.GetKubernetesNodeGroupProfileConfigContext;
    createTime?: string;
    currentsize?: number;
    description?: string;
    desiredsize?: number;
    domainGroupMoid?: string;
    gpuConfigs?: inputs.GetKubernetesNodeGroupProfileGpuConfig[];
    id?: string;
    infraProvider?: inputs.GetKubernetesNodeGroupProfileInfraProvider;
    ipPools?: inputs.GetKubernetesNodeGroupProfileIpPool[];
    kubernetesVersion?: inputs.GetKubernetesNodeGroupProfileKubernetesVersion;
    labels?: inputs.GetKubernetesNodeGroupProfileLabel[];
    maxsize?: number;
    minsize?: number;
    modTime?: string;
    moid?: string;
    name?: string;
    nodeType?: string;
    nodes?: inputs.GetKubernetesNodeGroupProfileNode[];
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetKubernetesNodeGroupProfileParent;
    permissionResources?: inputs.GetKubernetesNodeGroupProfilePermissionResource[];
    policyBuckets?: inputs.GetKubernetesNodeGroupProfilePolicyBucket[];
    scheduledActions?: inputs.GetKubernetesNodeGroupProfileScheduledAction[];
    sharedScope?: string;
    srcTemplate?: inputs.GetKubernetesNodeGroupProfileSrcTemplate;
    tags?: inputs.GetKubernetesNodeGroupProfileTag[];
    taints?: inputs.GetKubernetesNodeGroupProfileTaint[];
    type?: string;
    versionContext?: inputs.GetKubernetesNodeGroupProfileVersionContext;
}

/**
 * A collection of values returned by getKubernetesNodeGroupProfile.
 */
export interface GetKubernetesNodeGroupProfileResult {
    readonly accountMoid?: string;
    readonly action?: string;
    readonly actionParams?: outputs.GetKubernetesNodeGroupProfileActionParam[];
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetKubernetesNodeGroupProfileAncestor[];
    readonly classId?: string;
    readonly clusterProfile?: outputs.GetKubernetesNodeGroupProfileClusterProfile;
    readonly configContext?: outputs.GetKubernetesNodeGroupProfileConfigContext;
    readonly createTime?: string;
    readonly currentsize?: number;
    readonly description?: string;
    readonly desiredsize?: number;
    readonly domainGroupMoid?: string;
    readonly gpuConfigs?: outputs.GetKubernetesNodeGroupProfileGpuConfig[];
    readonly id: string;
    readonly infraProvider?: outputs.GetKubernetesNodeGroupProfileInfraProvider;
    readonly ipPools?: outputs.GetKubernetesNodeGroupProfileIpPool[];
    readonly kubernetesVersion?: outputs.GetKubernetesNodeGroupProfileKubernetesVersion;
    readonly labels?: outputs.GetKubernetesNodeGroupProfileLabel[];
    readonly maxsize?: number;
    readonly minsize?: number;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nodeType?: string;
    readonly nodes?: outputs.GetKubernetesNodeGroupProfileNode[];
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetKubernetesNodeGroupProfileParent;
    readonly permissionResources?: outputs.GetKubernetesNodeGroupProfilePermissionResource[];
    readonly policyBuckets?: outputs.GetKubernetesNodeGroupProfilePolicyBucket[];
    readonly results: outputs.GetKubernetesNodeGroupProfileResult[];
    readonly scheduledActions?: outputs.GetKubernetesNodeGroupProfileScheduledAction[];
    readonly sharedScope?: string;
    readonly srcTemplate?: outputs.GetKubernetesNodeGroupProfileSrcTemplate;
    readonly tags?: outputs.GetKubernetesNodeGroupProfileTag[];
    readonly taints?: outputs.GetKubernetesNodeGroupProfileTaint[];
    readonly type?: string;
    readonly versionContext?: outputs.GetKubernetesNodeGroupProfileVersionContext;
}
export function getKubernetesNodeGroupProfileOutput(args?: GetKubernetesNodeGroupProfileOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKubernetesNodeGroupProfileResult> {
    return pulumi.output(args).apply((a: any) => getKubernetesNodeGroupProfile(a, opts))
}

/**
 * A collection of arguments for invoking getKubernetesNodeGroupProfile.
 */
export interface GetKubernetesNodeGroupProfileOutputArgs {
    accountMoid?: pulumi.Input<string>;
    action?: pulumi.Input<string>;
    actionParams?: pulumi.Input<pulumi.Input<inputs.GetKubernetesNodeGroupProfileActionParamArgs>[]>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetKubernetesNodeGroupProfileAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    clusterProfile?: pulumi.Input<inputs.GetKubernetesNodeGroupProfileClusterProfileArgs>;
    configContext?: pulumi.Input<inputs.GetKubernetesNodeGroupProfileConfigContextArgs>;
    createTime?: pulumi.Input<string>;
    currentsize?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    desiredsize?: pulumi.Input<number>;
    domainGroupMoid?: pulumi.Input<string>;
    gpuConfigs?: pulumi.Input<pulumi.Input<inputs.GetKubernetesNodeGroupProfileGpuConfigArgs>[]>;
    id?: pulumi.Input<string>;
    infraProvider?: pulumi.Input<inputs.GetKubernetesNodeGroupProfileInfraProviderArgs>;
    ipPools?: pulumi.Input<pulumi.Input<inputs.GetKubernetesNodeGroupProfileIpPoolArgs>[]>;
    kubernetesVersion?: pulumi.Input<inputs.GetKubernetesNodeGroupProfileKubernetesVersionArgs>;
    labels?: pulumi.Input<pulumi.Input<inputs.GetKubernetesNodeGroupProfileLabelArgs>[]>;
    maxsize?: pulumi.Input<number>;
    minsize?: pulumi.Input<number>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nodeType?: pulumi.Input<string>;
    nodes?: pulumi.Input<pulumi.Input<inputs.GetKubernetesNodeGroupProfileNodeArgs>[]>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetKubernetesNodeGroupProfileParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetKubernetesNodeGroupProfilePermissionResourceArgs>[]>;
    policyBuckets?: pulumi.Input<pulumi.Input<inputs.GetKubernetesNodeGroupProfilePolicyBucketArgs>[]>;
    scheduledActions?: pulumi.Input<pulumi.Input<inputs.GetKubernetesNodeGroupProfileScheduledActionArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    srcTemplate?: pulumi.Input<inputs.GetKubernetesNodeGroupProfileSrcTemplateArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetKubernetesNodeGroupProfileTagArgs>[]>;
    taints?: pulumi.Input<pulumi.Input<inputs.GetKubernetesNodeGroupProfileTaintArgs>[]>;
    type?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetKubernetesNodeGroupProfileVersionContextArgs>;
}
