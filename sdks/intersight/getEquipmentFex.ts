// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEquipmentFex(args?: GetEquipmentFexArgs, opts?: pulumi.InvokeOptions): Promise<GetEquipmentFexResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getEquipmentFex:getEquipmentFex", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "connectionPath": args.connectionPath,
        "connectionStatus": args.connectionStatus,
        "createTime": args.createTime,
        "description": args.description,
        "deviceMoId": args.deviceMoId,
        "discoveryState": args.discoveryState,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "fans": args.fans,
        "hostPorts": args.hostPorts,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "ioms": args.ioms,
        "isUpgraded": args.isUpgraded,
        "locatorLed": args.locatorLed,
        "mgmtController": args.mgmtController,
        "modTime": args.modTime,
        "model": args.model,
        "moduleId": args.moduleId,
        "moid": args.moid,
        "networkElement": args.networkElement,
        "networkPorts": args.networkPorts,
        "nrVersion": args.nrVersion,
        "objectType": args.objectType,
        "operReasons": args.operReasons,
        "operState": args.operState,
        "owners": args.owners,
        "parent": args.parent,
        "partNumber": args.partNumber,
        "permissionResources": args.permissionResources,
        "pid": args.pid,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "productName": args.productName,
        "psuses": args.psuses,
        "registeredDevice": args.registeredDevice,
        "revision": args.revision,
        "rn": args.rn,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "sku": args.sku,
        "subGroups": args.subGroups,
        "tags": args.tags,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
        "vid": args.vid,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEquipmentFex.
 */
export interface GetEquipmentFexArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetEquipmentFexAncestor[];
    classId?: string;
    connectionPath?: string;
    connectionStatus?: string;
    createTime?: string;
    description?: string;
    deviceMoId?: string;
    discoveryState?: string;
    dn?: string;
    domainGroupMoid?: string;
    fans?: inputs.GetEquipmentFexFan[];
    hostPorts?: inputs.GetEquipmentFexHostPort[];
    id?: string;
    inventoryDeviceInfo?: inputs.GetEquipmentFexInventoryDeviceInfo;
    ioms?: inputs.GetEquipmentFexIom[];
    isUpgraded?: boolean;
    locatorLed?: inputs.GetEquipmentFexLocatorLed;
    mgmtController?: inputs.GetEquipmentFexMgmtController;
    modTime?: string;
    model?: string;
    moduleId?: number;
    moid?: string;
    networkElement?: inputs.GetEquipmentFexNetworkElement;
    networkPorts?: inputs.GetEquipmentFexNetworkPort[];
    nrVersion?: string;
    objectType?: string;
    operReasons?: string[];
    operState?: string;
    owners?: string[];
    parent?: inputs.GetEquipmentFexParent;
    partNumber?: string;
    permissionResources?: inputs.GetEquipmentFexPermissionResource[];
    pid?: string;
    presence?: string;
    previousFru?: inputs.GetEquipmentFexPreviousFru;
    productName?: string;
    psuses?: inputs.GetEquipmentFexPsus[];
    registeredDevice?: inputs.GetEquipmentFexRegisteredDevice;
    revision?: string;
    rn?: string;
    serial?: string;
    sharedScope?: string;
    sku?: string;
    subGroups?: inputs.GetEquipmentFexSubGroup[];
    tags?: inputs.GetEquipmentFexTag[];
    vendor?: string;
    versionContext?: inputs.GetEquipmentFexVersionContext;
    vid?: string;
}

/**
 * A collection of values returned by getEquipmentFex.
 */
export interface GetEquipmentFexResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetEquipmentFexAncestor[];
    readonly classId?: string;
    readonly connectionPath?: string;
    readonly connectionStatus?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly deviceMoId?: string;
    readonly discoveryState?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly fans?: outputs.GetEquipmentFexFan[];
    readonly hostPorts?: outputs.GetEquipmentFexHostPort[];
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetEquipmentFexInventoryDeviceInfo;
    readonly ioms?: outputs.GetEquipmentFexIom[];
    readonly isUpgraded?: boolean;
    readonly locatorLed?: outputs.GetEquipmentFexLocatorLed;
    readonly mgmtController?: outputs.GetEquipmentFexMgmtController;
    readonly modTime?: string;
    readonly model?: string;
    readonly moduleId?: number;
    readonly moid?: string;
    readonly networkElement?: outputs.GetEquipmentFexNetworkElement;
    readonly networkPorts?: outputs.GetEquipmentFexNetworkPort[];
    readonly nrVersion?: string;
    readonly objectType?: string;
    readonly operReasons?: string[];
    readonly operState?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetEquipmentFexParent;
    readonly partNumber?: string;
    readonly permissionResources?: outputs.GetEquipmentFexPermissionResource[];
    readonly pid?: string;
    readonly presence?: string;
    readonly previousFru?: outputs.GetEquipmentFexPreviousFru;
    readonly productName?: string;
    readonly psuses?: outputs.GetEquipmentFexPsus[];
    readonly registeredDevice?: outputs.GetEquipmentFexRegisteredDevice;
    readonly results: outputs.GetEquipmentFexResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly sku?: string;
    readonly subGroups?: outputs.GetEquipmentFexSubGroup[];
    readonly tags?: outputs.GetEquipmentFexTag[];
    readonly vendor?: string;
    readonly versionContext?: outputs.GetEquipmentFexVersionContext;
    readonly vid?: string;
}
export function getEquipmentFexOutput(args?: GetEquipmentFexOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEquipmentFexResult> {
    return pulumi.output(args).apply((a: any) => getEquipmentFex(a, opts))
}

/**
 * A collection of arguments for invoking getEquipmentFex.
 */
export interface GetEquipmentFexOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetEquipmentFexAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    connectionPath?: pulumi.Input<string>;
    connectionStatus?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    discoveryState?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    fans?: pulumi.Input<pulumi.Input<inputs.GetEquipmentFexFanArgs>[]>;
    hostPorts?: pulumi.Input<pulumi.Input<inputs.GetEquipmentFexHostPortArgs>[]>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetEquipmentFexInventoryDeviceInfoArgs>;
    ioms?: pulumi.Input<pulumi.Input<inputs.GetEquipmentFexIomArgs>[]>;
    isUpgraded?: pulumi.Input<boolean>;
    locatorLed?: pulumi.Input<inputs.GetEquipmentFexLocatorLedArgs>;
    mgmtController?: pulumi.Input<inputs.GetEquipmentFexMgmtControllerArgs>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moduleId?: pulumi.Input<number>;
    moid?: pulumi.Input<string>;
    networkElement?: pulumi.Input<inputs.GetEquipmentFexNetworkElementArgs>;
    networkPorts?: pulumi.Input<pulumi.Input<inputs.GetEquipmentFexNetworkPortArgs>[]>;
    nrVersion?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operReasons?: pulumi.Input<pulumi.Input<string>[]>;
    operState?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetEquipmentFexParentArgs>;
    partNumber?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetEquipmentFexPermissionResourceArgs>[]>;
    pid?: pulumi.Input<string>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetEquipmentFexPreviousFruArgs>;
    productName?: pulumi.Input<string>;
    psuses?: pulumi.Input<pulumi.Input<inputs.GetEquipmentFexPsusArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetEquipmentFexRegisteredDeviceArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    sku?: pulumi.Input<string>;
    subGroups?: pulumi.Input<pulumi.Input<inputs.GetEquipmentFexSubGroupArgs>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetEquipmentFexTagArgs>[]>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetEquipmentFexVersionContextArgs>;
    vid?: pulumi.Input<string>;
}
