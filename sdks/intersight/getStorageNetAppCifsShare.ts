// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageNetAppCifsShare(args?: GetStorageNetAppCifsShareArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageNetAppCifsShareResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageNetAppCifsShare:getStorageNetAppCifsShare", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "comment": args.comment,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "encryption": args.encryption,
        "homeDirectory": args.homeDirectory,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "netAppCifsAcls": args.netAppCifsAcls,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "path": args.path,
        "permissionResources": args.permissionResources,
        "sharedScope": args.sharedScope,
        "storageContainer": args.storageContainer,
        "svmName": args.svmName,
        "svmUuid": args.svmUuid,
        "tags": args.tags,
        "tenant": args.tenant,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageNetAppCifsShare.
 */
export interface GetStorageNetAppCifsShareArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageNetAppCifsShareAncestor[];
    classId?: string;
    comment?: string;
    createTime?: string;
    domainGroupMoid?: string;
    encryption?: string;
    homeDirectory?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    netAppCifsAcls?: inputs.GetStorageNetAppCifsShareNetAppCifsAcl[];
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageNetAppCifsShareParent;
    path?: string;
    permissionResources?: inputs.GetStorageNetAppCifsSharePermissionResource[];
    sharedScope?: string;
    storageContainer?: inputs.GetStorageNetAppCifsShareStorageContainer;
    svmName?: string;
    svmUuid?: string;
    tags?: inputs.GetStorageNetAppCifsShareTag[];
    tenant?: inputs.GetStorageNetAppCifsShareTenant;
    versionContext?: inputs.GetStorageNetAppCifsShareVersionContext;
}

/**
 * A collection of values returned by getStorageNetAppCifsShare.
 */
export interface GetStorageNetAppCifsShareResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageNetAppCifsShareAncestor[];
    readonly classId?: string;
    readonly comment?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly encryption?: string;
    readonly homeDirectory?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly netAppCifsAcls?: outputs.GetStorageNetAppCifsShareNetAppCifsAcl[];
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageNetAppCifsShareParent;
    readonly path?: string;
    readonly permissionResources?: outputs.GetStorageNetAppCifsSharePermissionResource[];
    readonly results: outputs.GetStorageNetAppCifsShareResult[];
    readonly sharedScope?: string;
    readonly storageContainer?: outputs.GetStorageNetAppCifsShareStorageContainer;
    readonly svmName?: string;
    readonly svmUuid?: string;
    readonly tags?: outputs.GetStorageNetAppCifsShareTag[];
    readonly tenant?: outputs.GetStorageNetAppCifsShareTenant;
    readonly versionContext?: outputs.GetStorageNetAppCifsShareVersionContext;
}
export function getStorageNetAppCifsShareOutput(args?: GetStorageNetAppCifsShareOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageNetAppCifsShareResult> {
    return pulumi.output(args).apply((a: any) => getStorageNetAppCifsShare(a, opts))
}

/**
 * A collection of arguments for invoking getStorageNetAppCifsShare.
 */
export interface GetStorageNetAppCifsShareOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppCifsShareAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    encryption?: pulumi.Input<string>;
    homeDirectory?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    netAppCifsAcls?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppCifsShareNetAppCifsAclArgs>[]>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageNetAppCifsShareParentArgs>;
    path?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppCifsSharePermissionResourceArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    storageContainer?: pulumi.Input<inputs.GetStorageNetAppCifsShareStorageContainerArgs>;
    svmName?: pulumi.Input<string>;
    svmUuid?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppCifsShareTagArgs>[]>;
    tenant?: pulumi.Input<inputs.GetStorageNetAppCifsShareTenantArgs>;
    versionContext?: pulumi.Input<inputs.GetStorageNetAppCifsShareVersionContextArgs>;
}
