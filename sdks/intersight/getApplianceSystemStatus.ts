// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getApplianceSystemStatus(args?: GetApplianceSystemStatusArgs, opts?: pulumi.InvokeOptions): Promise<GetApplianceSystemStatusResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getApplianceSystemStatus:getApplianceSystemStatus", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "appStatuses": args.appStatuses,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "groupStatuses": args.groupStatuses,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "operationalStatus": args.operationalStatus,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "statusChecks": args.statusChecks,
        "systemInfo": args.systemInfo,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getApplianceSystemStatus.
 */
export interface GetApplianceSystemStatusArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetApplianceSystemStatusAncestor[];
    appStatuses?: inputs.GetApplianceSystemStatusAppStatus[];
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    groupStatuses?: inputs.GetApplianceSystemStatusGroupStatus[];
    id?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    operationalStatus?: string;
    owners?: string[];
    parent?: inputs.GetApplianceSystemStatusParent;
    permissionResources?: inputs.GetApplianceSystemStatusPermissionResource[];
    registeredDevice?: inputs.GetApplianceSystemStatusRegisteredDevice;
    sharedScope?: string;
    statusChecks?: inputs.GetApplianceSystemStatusStatusCheck[];
    systemInfo?: inputs.GetApplianceSystemStatusSystemInfo;
    tags?: inputs.GetApplianceSystemStatusTag[];
    versionContext?: inputs.GetApplianceSystemStatusVersionContext;
}

/**
 * A collection of values returned by getApplianceSystemStatus.
 */
export interface GetApplianceSystemStatusResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetApplianceSystemStatusAncestor[];
    readonly appStatuses?: outputs.GetApplianceSystemStatusAppStatus[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly groupStatuses?: outputs.GetApplianceSystemStatusGroupStatus[];
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly operationalStatus?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetApplianceSystemStatusParent;
    readonly permissionResources?: outputs.GetApplianceSystemStatusPermissionResource[];
    readonly registeredDevice?: outputs.GetApplianceSystemStatusRegisteredDevice;
    readonly results: outputs.GetApplianceSystemStatusResult[];
    readonly sharedScope?: string;
    readonly statusChecks?: outputs.GetApplianceSystemStatusStatusCheck[];
    readonly systemInfo?: outputs.GetApplianceSystemStatusSystemInfo;
    readonly tags?: outputs.GetApplianceSystemStatusTag[];
    readonly versionContext?: outputs.GetApplianceSystemStatusVersionContext;
}
export function getApplianceSystemStatusOutput(args?: GetApplianceSystemStatusOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetApplianceSystemStatusResult> {
    return pulumi.output(args).apply((a: any) => getApplianceSystemStatus(a, opts))
}

/**
 * A collection of arguments for invoking getApplianceSystemStatus.
 */
export interface GetApplianceSystemStatusOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetApplianceSystemStatusAncestorArgs>[]>;
    appStatuses?: pulumi.Input<pulumi.Input<inputs.GetApplianceSystemStatusAppStatusArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    groupStatuses?: pulumi.Input<pulumi.Input<inputs.GetApplianceSystemStatusGroupStatusArgs>[]>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operationalStatus?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetApplianceSystemStatusParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetApplianceSystemStatusPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetApplianceSystemStatusRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    statusChecks?: pulumi.Input<pulumi.Input<inputs.GetApplianceSystemStatusStatusCheckArgs>[]>;
    systemInfo?: pulumi.Input<inputs.GetApplianceSystemStatusSystemInfoArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetApplianceSystemStatusTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetApplianceSystemStatusVersionContextArgs>;
}
