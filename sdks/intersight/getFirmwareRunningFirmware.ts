// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getFirmwareRunningFirmware(args?: GetFirmwareRunningFirmwareArgs, opts?: pulumi.InvokeOptions): Promise<GetFirmwareRunningFirmwareResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getFirmwareRunningFirmware:getFirmwareRunningFirmware", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "biosUnit": args.biosUnit,
        "classId": args.classId,
        "component": args.component,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "graphicsCard": args.graphicsCard,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "managementController": args.managementController,
        "modTime": args.modTime,
        "moid": args.moid,
        "networkElements": args.networkElements,
        "nrVersion": args.nrVersion,
        "objectType": args.objectType,
        "owners": args.owners,
        "packageVersion": args.packageVersion,
        "parent": args.parent,
        "pciSwitch": args.pciSwitch,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "sharedScope": args.sharedScope,
        "storageController": args.storageController,
        "storageFlexFlashController": args.storageFlexFlashController,
        "storagePhysicalDisk": args.storagePhysicalDisk,
        "tags": args.tags,
        "type": args.type,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFirmwareRunningFirmware.
 */
export interface GetFirmwareRunningFirmwareArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetFirmwareRunningFirmwareAncestor[];
    biosUnit?: inputs.GetFirmwareRunningFirmwareBiosUnit;
    classId?: string;
    component?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    graphicsCard?: inputs.GetFirmwareRunningFirmwareGraphicsCard;
    id?: string;
    inventoryDeviceInfo?: inputs.GetFirmwareRunningFirmwareInventoryDeviceInfo;
    managementController?: inputs.GetFirmwareRunningFirmwareManagementController;
    modTime?: string;
    moid?: string;
    networkElements?: inputs.GetFirmwareRunningFirmwareNetworkElement[];
    nrVersion?: string;
    objectType?: string;
    owners?: string[];
    packageVersion?: string;
    parent?: inputs.GetFirmwareRunningFirmwareParent;
    pciSwitch?: inputs.GetFirmwareRunningFirmwarePciSwitch;
    permissionResources?: inputs.GetFirmwareRunningFirmwarePermissionResource[];
    registeredDevice?: inputs.GetFirmwareRunningFirmwareRegisteredDevice;
    rn?: string;
    sharedScope?: string;
    storageController?: inputs.GetFirmwareRunningFirmwareStorageController;
    storageFlexFlashController?: inputs.GetFirmwareRunningFirmwareStorageFlexFlashController;
    storagePhysicalDisk?: inputs.GetFirmwareRunningFirmwareStoragePhysicalDisk;
    tags?: inputs.GetFirmwareRunningFirmwareTag[];
    type?: string;
    versionContext?: inputs.GetFirmwareRunningFirmwareVersionContext;
}

/**
 * A collection of values returned by getFirmwareRunningFirmware.
 */
export interface GetFirmwareRunningFirmwareResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetFirmwareRunningFirmwareAncestor[];
    readonly biosUnit?: outputs.GetFirmwareRunningFirmwareBiosUnit;
    readonly classId?: string;
    readonly component?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly graphicsCard?: outputs.GetFirmwareRunningFirmwareGraphicsCard;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetFirmwareRunningFirmwareInventoryDeviceInfo;
    readonly managementController?: outputs.GetFirmwareRunningFirmwareManagementController;
    readonly modTime?: string;
    readonly moid?: string;
    readonly networkElements?: outputs.GetFirmwareRunningFirmwareNetworkElement[];
    readonly nrVersion?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly packageVersion?: string;
    readonly parent?: outputs.GetFirmwareRunningFirmwareParent;
    readonly pciSwitch?: outputs.GetFirmwareRunningFirmwarePciSwitch;
    readonly permissionResources?: outputs.GetFirmwareRunningFirmwarePermissionResource[];
    readonly registeredDevice?: outputs.GetFirmwareRunningFirmwareRegisteredDevice;
    readonly results: outputs.GetFirmwareRunningFirmwareResult[];
    readonly rn?: string;
    readonly sharedScope?: string;
    readonly storageController?: outputs.GetFirmwareRunningFirmwareStorageController;
    readonly storageFlexFlashController?: outputs.GetFirmwareRunningFirmwareStorageFlexFlashController;
    readonly storagePhysicalDisk?: outputs.GetFirmwareRunningFirmwareStoragePhysicalDisk;
    readonly tags?: outputs.GetFirmwareRunningFirmwareTag[];
    readonly type?: string;
    readonly versionContext?: outputs.GetFirmwareRunningFirmwareVersionContext;
}
export function getFirmwareRunningFirmwareOutput(args?: GetFirmwareRunningFirmwareOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFirmwareRunningFirmwareResult> {
    return pulumi.output(args).apply((a: any) => getFirmwareRunningFirmware(a, opts))
}

/**
 * A collection of arguments for invoking getFirmwareRunningFirmware.
 */
export interface GetFirmwareRunningFirmwareOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetFirmwareRunningFirmwareAncestorArgs>[]>;
    biosUnit?: pulumi.Input<inputs.GetFirmwareRunningFirmwareBiosUnitArgs>;
    classId?: pulumi.Input<string>;
    component?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    graphicsCard?: pulumi.Input<inputs.GetFirmwareRunningFirmwareGraphicsCardArgs>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetFirmwareRunningFirmwareInventoryDeviceInfoArgs>;
    managementController?: pulumi.Input<inputs.GetFirmwareRunningFirmwareManagementControllerArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    networkElements?: pulumi.Input<pulumi.Input<inputs.GetFirmwareRunningFirmwareNetworkElementArgs>[]>;
    nrVersion?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    packageVersion?: pulumi.Input<string>;
    parent?: pulumi.Input<inputs.GetFirmwareRunningFirmwareParentArgs>;
    pciSwitch?: pulumi.Input<inputs.GetFirmwareRunningFirmwarePciSwitchArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetFirmwareRunningFirmwarePermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetFirmwareRunningFirmwareRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    storageController?: pulumi.Input<inputs.GetFirmwareRunningFirmwareStorageControllerArgs>;
    storageFlexFlashController?: pulumi.Input<inputs.GetFirmwareRunningFirmwareStorageFlexFlashControllerArgs>;
    storagePhysicalDisk?: pulumi.Input<inputs.GetFirmwareRunningFirmwareStoragePhysicalDiskArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetFirmwareRunningFirmwareTagArgs>[]>;
    type?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetFirmwareRunningFirmwareVersionContextArgs>;
}
