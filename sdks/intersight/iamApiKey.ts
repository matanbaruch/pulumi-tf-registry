// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IamApiKey extends pulumi.CustomResource {
    /**
     * Get an existing IamApiKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IamApiKeyState, opts?: pulumi.CustomResourceOptions): IamApiKey {
        return new IamApiKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'intersight:index/iamApiKey:IamApiKey';

    /**
     * Returns true if the given object is an instance of IamApiKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IamApiKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IamApiKey.__pulumiType;
    }

    /**
     * The Account ID for this managed object.
     */
    public readonly accountMoid!: pulumi.Output<string>;
    public readonly additionalProperties!: pulumi.Output<string | undefined>;
    /**
     * Used to trigger the enable or disable action on the API key. These actions change the status of an API key. * `enable` -
     * Used to enable a disabled API key/App Registration. If the API key/App Registration is already expired, this action has
     * no effect. * `disable` - Used to disable an active API key/App Registration. If the API key/App Registration is already
     * expired, this action has no effect.
     */
    public readonly adminStatus!: pulumi.Output<string | undefined>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly ancestors!: pulumi.Output<outputs.IamApiKeyAncestor[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    public readonly classId!: pulumi.Output<string | undefined>;
    /**
     * The time when this managed object was created.
     */
    public readonly createTime!: pulumi.Output<string>;
    /**
     * The DomainGroup ID for this managed object.
     */
    public readonly domainGroupMoid!: pulumi.Output<string>;
    /**
     * The expiration date of the API key which is set at the time of creation of the key. Its value can only be assigned a
     * date that falls within the range determined by the maximum expiration time configured at the account level. The expiry
     * date can be edited to be earlier or later, provided it stays within the designated expiry period. This period is
     * determined by adding the 'startTime' property of the API key to the maximum expiry time configured at the account level.
     */
    public readonly expiryDateTime!: pulumi.Output<string | undefined>;
    /**
     * The cryptographic hash algorithm to calculate the message digest. * `SHA256` - The SHA-256 cryptographic hash, as
     * defined by NIST in FIPS 180-4. * `SHA384` - The SHA-384 cryptographic hash, as defined by NIST in FIPS 180-4. * `SHA512`
     * - The SHA-512 cryptographic hash, as defined by NIST in FIPS 180-4. * `SHA512_224` - The SHA-512/224 cryptographic hash,
     * as defined by NIST in FIPS 180-4. * `SHA512_256` - The SHA-512/256 cryptographic hash, as defined by NIST in FIPS 180-4.
     */
    public readonly hashAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * Used to mark the API key as a never-expiring API key.
     */
    public readonly isNeverExpiring!: pulumi.Output<boolean | undefined>;
    /**
     * The key generation specification provides the algorithm and the parameters required for this algorithm to generate a
     * private key, public key pair. Supported key generation schemes include RSA, ECDSA and Edwards-Curve Digital Signature
     * Algorithm (EdDSA).
     */
    public readonly keySpecs!: pulumi.Output<outputs.IamApiKeyKeySpec[]>;
    /**
     * The IP address from which the API key was last used.
     */
    public readonly lastUsedIp!: pulumi.Output<string>;
    /**
     * The time at which the API key was last used. It is updated every 24 hours.
     */
    public readonly lastUsedTime!: pulumi.Output<string>;
    /**
     * The time when this managed object was last modified.
     */
    public readonly modTime!: pulumi.Output<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    public readonly moid!: pulumi.Output<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    public readonly objectType!: pulumi.Output<string | undefined>;
    /**
     * The current status of the API key that dictates the validity of the key. * `enabled` - An API key/App Registration
     * having enabled status can be used for API invocation. * `disabled` - An API key/App Registration having disabled status
     * cannot be used for API invocation. * `expired` - An API key/App Registration having expired status cannot be used for
     * API invocation as the expiration date has passed.
     */
    public readonly operStatus!: pulumi.Output<string>;
    public readonly owners!: pulumi.Output<string[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    public readonly parents!: pulumi.Output<outputs.IamApiKeyParent[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly permissionResources!: pulumi.Output<outputs.IamApiKeyPermissionResource[]>;
    /**
     * A reference to a iamPermission resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    public readonly permissions!: pulumi.Output<outputs.IamApiKeyPermission[]>;
    /**
     * Holds the private key for the API key.
     */
    public readonly privateKey!: pulumi.Output<string | undefined>;
    /**
     * The purpose of the API Key.
     */
    public readonly purpose!: pulumi.Output<string | undefined>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    public readonly sharedScope!: pulumi.Output<string>;
    /**
     * The signing algorithm used by the client to authenticate API requests to Intersight. The signing algorithm must be
     * compatible with the key generation specification. * `RSASSA-PKCS1-v1_5` - RSASSA-PKCS1-v1_5 is a RSA signature scheme
     * specified in [RFC 8017](https://tools.ietf.org/html/rfc8017).RSASSA-PKCS1-v1_5 is included only for compatibility with
     * existing applications. * `RSASSA-PSS` - RSASSA-PSS is a RSA signature scheme specified in [RFC
     * 8017](https://tools.ietf.org/html/rfc8017).It combines the RSASP1 and RSAVP1 primitives with the EMSA-PSS encoding
     * method.In the interest of increased robustness, RSASSA-PSS is required in new applications. * `Ed25519` - The Ed25519
     * signature algorithm, as specified in [RFC 8032](https://tools.ietf.org/html/rfc8032).Ed25519 is a public-key signature
     * system with several attractive features, includingfast single-signature verification, very fast signing, fast key
     * generation and high security level. * `Ecdsa` - The Elliptic Curve Digital Signature Standard (ECDSA), as defined by
     * NIST in FIPS 186-4 and ANSI X9.62.The signature is encoded as a ASN.1 DER SEQUENCE with two INTEGERs (r and s), as
     * defined in RFC3279.When using ECDSA signatures, configure the client to use the same signature encoding as specified on
     * the server side. * `EcdsaP1363Format` - The Elliptic Curve Digital Signature Standard (ECDSA), as defined by NIST in
     * FIPS 186-4 and ANSI X9.62.The signature is the raw concatenation of r and s, as defined in the ISO/IEC 7816-8 IEEE
     * P.1363 standard.In that format, r and s are represented as unsigned, big endian numbers.Extra padding bytes (of value
     * 0x00) is applied so that both r and s encodings have the same size.When using ECDSA signatures, configure the client to
     * use the same signature encoding as specified on the server side.
     */
    public readonly signingAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * The timestamp at which an expiry date was first set on this API key. For expiring API keys, this field is same as the
     * create time of the API key. For never-expiring API keys, this field is set initially to zero time value. If a
     * never-expiry API key is later changed to have an expiration, the timestamp marking the start of this transition is
     * recorded in this field.
     */
    public readonly startTime!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.IamApiKeyTag[]>;
    /**
     * A reference to a iamUser resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    public readonly users!: pulumi.Output<outputs.IamApiKeyUser[]>;
    /**
     * The versioning info for this managed object.
     */
    public readonly versionContexts!: pulumi.Output<outputs.IamApiKeyVersionContext[]>;

    /**
     * Create a IamApiKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IamApiKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IamApiKeyArgs | IamApiKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IamApiKeyState | undefined;
            resourceInputs["accountMoid"] = state ? state.accountMoid : undefined;
            resourceInputs["additionalProperties"] = state ? state.additionalProperties : undefined;
            resourceInputs["adminStatus"] = state ? state.adminStatus : undefined;
            resourceInputs["ancestors"] = state ? state.ancestors : undefined;
            resourceInputs["classId"] = state ? state.classId : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["domainGroupMoid"] = state ? state.domainGroupMoid : undefined;
            resourceInputs["expiryDateTime"] = state ? state.expiryDateTime : undefined;
            resourceInputs["hashAlgorithm"] = state ? state.hashAlgorithm : undefined;
            resourceInputs["isNeverExpiring"] = state ? state.isNeverExpiring : undefined;
            resourceInputs["keySpecs"] = state ? state.keySpecs : undefined;
            resourceInputs["lastUsedIp"] = state ? state.lastUsedIp : undefined;
            resourceInputs["lastUsedTime"] = state ? state.lastUsedTime : undefined;
            resourceInputs["modTime"] = state ? state.modTime : undefined;
            resourceInputs["moid"] = state ? state.moid : undefined;
            resourceInputs["objectType"] = state ? state.objectType : undefined;
            resourceInputs["operStatus"] = state ? state.operStatus : undefined;
            resourceInputs["owners"] = state ? state.owners : undefined;
            resourceInputs["parents"] = state ? state.parents : undefined;
            resourceInputs["permissionResources"] = state ? state.permissionResources : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["purpose"] = state ? state.purpose : undefined;
            resourceInputs["sharedScope"] = state ? state.sharedScope : undefined;
            resourceInputs["signingAlgorithm"] = state ? state.signingAlgorithm : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
            resourceInputs["versionContexts"] = state ? state.versionContexts : undefined;
        } else {
            const args = argsOrState as IamApiKeyArgs | undefined;
            resourceInputs["accountMoid"] = args ? args.accountMoid : undefined;
            resourceInputs["additionalProperties"] = args ? args.additionalProperties : undefined;
            resourceInputs["adminStatus"] = args ? args.adminStatus : undefined;
            resourceInputs["ancestors"] = args ? args.ancestors : undefined;
            resourceInputs["classId"] = args ? args.classId : undefined;
            resourceInputs["createTime"] = args ? args.createTime : undefined;
            resourceInputs["domainGroupMoid"] = args ? args.domainGroupMoid : undefined;
            resourceInputs["expiryDateTime"] = args ? args.expiryDateTime : undefined;
            resourceInputs["hashAlgorithm"] = args ? args.hashAlgorithm : undefined;
            resourceInputs["isNeverExpiring"] = args ? args.isNeverExpiring : undefined;
            resourceInputs["keySpecs"] = args ? args.keySpecs : undefined;
            resourceInputs["lastUsedIp"] = args ? args.lastUsedIp : undefined;
            resourceInputs["lastUsedTime"] = args ? args.lastUsedTime : undefined;
            resourceInputs["modTime"] = args ? args.modTime : undefined;
            resourceInputs["moid"] = args ? args.moid : undefined;
            resourceInputs["objectType"] = args ? args.objectType : undefined;
            resourceInputs["operStatus"] = args ? args.operStatus : undefined;
            resourceInputs["owners"] = args ? args.owners : undefined;
            resourceInputs["parents"] = args ? args.parents : undefined;
            resourceInputs["permissionResources"] = args ? args.permissionResources : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["privateKey"] = args ? args.privateKey : undefined;
            resourceInputs["purpose"] = args ? args.purpose : undefined;
            resourceInputs["sharedScope"] = args ? args.sharedScope : undefined;
            resourceInputs["signingAlgorithm"] = args ? args.signingAlgorithm : undefined;
            resourceInputs["startTime"] = args ? args.startTime : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["versionContexts"] = args ? args.versionContexts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IamApiKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IamApiKey resources.
 */
export interface IamApiKeyState {
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    /**
     * Used to trigger the enable or disable action on the API key. These actions change the status of an API key. * `enable` -
     * Used to enable a disabled API key/App Registration. If the API key/App Registration is already expired, this action has
     * no effect. * `disable` - Used to disable an active API key/App Registration. If the API key/App Registration is already
     * expired, this action has no effect.
     */
    adminStatus?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.IamApiKeyAncestor>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    /**
     * The expiration date of the API key which is set at the time of creation of the key. Its value can only be assigned a
     * date that falls within the range determined by the maximum expiration time configured at the account level. The expiry
     * date can be edited to be earlier or later, provided it stays within the designated expiry period. This period is
     * determined by adding the 'startTime' property of the API key to the maximum expiry time configured at the account level.
     */
    expiryDateTime?: pulumi.Input<string>;
    /**
     * The cryptographic hash algorithm to calculate the message digest. * `SHA256` - The SHA-256 cryptographic hash, as
     * defined by NIST in FIPS 180-4. * `SHA384` - The SHA-384 cryptographic hash, as defined by NIST in FIPS 180-4. * `SHA512`
     * - The SHA-512 cryptographic hash, as defined by NIST in FIPS 180-4. * `SHA512_224` - The SHA-512/224 cryptographic hash,
     * as defined by NIST in FIPS 180-4. * `SHA512_256` - The SHA-512/256 cryptographic hash, as defined by NIST in FIPS 180-4.
     */
    hashAlgorithm?: pulumi.Input<string>;
    /**
     * Used to mark the API key as a never-expiring API key.
     */
    isNeverExpiring?: pulumi.Input<boolean>;
    /**
     * The key generation specification provides the algorithm and the parameters required for this algorithm to generate a
     * private key, public key pair. Supported key generation schemes include RSA, ECDSA and Edwards-Curve Digital Signature
     * Algorithm (EdDSA).
     */
    keySpecs?: pulumi.Input<pulumi.Input<inputs.IamApiKeyKeySpec>[]>;
    /**
     * The IP address from which the API key was last used.
     */
    lastUsedIp?: pulumi.Input<string>;
    /**
     * The time at which the API key was last used. It is updated every 24 hours.
     */
    lastUsedTime?: pulumi.Input<string>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    /**
     * The current status of the API key that dictates the validity of the key. * `enabled` - An API key/App Registration
     * having enabled status can be used for API invocation. * `disabled` - An API key/App Registration having disabled status
     * cannot be used for API invocation. * `expired` - An API key/App Registration having expired status cannot be used for
     * API invocation as the expiration date has passed.
     */
    operStatus?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.IamApiKeyParent>[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.IamApiKeyPermissionResource>[]>;
    /**
     * A reference to a iamPermission resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.IamApiKeyPermission>[]>;
    /**
     * Holds the private key for the API key.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * The purpose of the API Key.
     */
    purpose?: pulumi.Input<string>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    /**
     * The signing algorithm used by the client to authenticate API requests to Intersight. The signing algorithm must be
     * compatible with the key generation specification. * `RSASSA-PKCS1-v1_5` - RSASSA-PKCS1-v1_5 is a RSA signature scheme
     * specified in [RFC 8017](https://tools.ietf.org/html/rfc8017).RSASSA-PKCS1-v1_5 is included only for compatibility with
     * existing applications. * `RSASSA-PSS` - RSASSA-PSS is a RSA signature scheme specified in [RFC
     * 8017](https://tools.ietf.org/html/rfc8017).It combines the RSASP1 and RSAVP1 primitives with the EMSA-PSS encoding
     * method.In the interest of increased robustness, RSASSA-PSS is required in new applications. * `Ed25519` - The Ed25519
     * signature algorithm, as specified in [RFC 8032](https://tools.ietf.org/html/rfc8032).Ed25519 is a public-key signature
     * system with several attractive features, includingfast single-signature verification, very fast signing, fast key
     * generation and high security level. * `Ecdsa` - The Elliptic Curve Digital Signature Standard (ECDSA), as defined by
     * NIST in FIPS 186-4 and ANSI X9.62.The signature is encoded as a ASN.1 DER SEQUENCE with two INTEGERs (r and s), as
     * defined in RFC3279.When using ECDSA signatures, configure the client to use the same signature encoding as specified on
     * the server side. * `EcdsaP1363Format` - The Elliptic Curve Digital Signature Standard (ECDSA), as defined by NIST in
     * FIPS 186-4 and ANSI X9.62.The signature is the raw concatenation of r and s, as defined in the ISO/IEC 7816-8 IEEE
     * P.1363 standard.In that format, r and s are represented as unsigned, big endian numbers.Extra padding bytes (of value
     * 0x00) is applied so that both r and s encodings have the same size.When using ECDSA signatures, configure the client to
     * use the same signature encoding as specified on the server side.
     */
    signingAlgorithm?: pulumi.Input<string>;
    /**
     * The timestamp at which an expiry date was first set on this API key. For expiring API keys, this field is same as the
     * create time of the API key. For never-expiring API keys, this field is set initially to zero time value. If a
     * never-expiry API key is later changed to have an expiration, the timestamp marking the start of this transition is
     * recorded in this field.
     */
    startTime?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.IamApiKeyTag>[]>;
    /**
     * A reference to a iamUser resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    users?: pulumi.Input<pulumi.Input<inputs.IamApiKeyUser>[]>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.IamApiKeyVersionContext>[]>;
}

/**
 * The set of arguments for constructing a IamApiKey resource.
 */
export interface IamApiKeyArgs {
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    /**
     * Used to trigger the enable or disable action on the API key. These actions change the status of an API key. * `enable` -
     * Used to enable a disabled API key/App Registration. If the API key/App Registration is already expired, this action has
     * no effect. * `disable` - Used to disable an active API key/App Registration. If the API key/App Registration is already
     * expired, this action has no effect.
     */
    adminStatus?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.IamApiKeyAncestor>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    /**
     * The expiration date of the API key which is set at the time of creation of the key. Its value can only be assigned a
     * date that falls within the range determined by the maximum expiration time configured at the account level. The expiry
     * date can be edited to be earlier or later, provided it stays within the designated expiry period. This period is
     * determined by adding the 'startTime' property of the API key to the maximum expiry time configured at the account level.
     */
    expiryDateTime?: pulumi.Input<string>;
    /**
     * The cryptographic hash algorithm to calculate the message digest. * `SHA256` - The SHA-256 cryptographic hash, as
     * defined by NIST in FIPS 180-4. * `SHA384` - The SHA-384 cryptographic hash, as defined by NIST in FIPS 180-4. * `SHA512`
     * - The SHA-512 cryptographic hash, as defined by NIST in FIPS 180-4. * `SHA512_224` - The SHA-512/224 cryptographic hash,
     * as defined by NIST in FIPS 180-4. * `SHA512_256` - The SHA-512/256 cryptographic hash, as defined by NIST in FIPS 180-4.
     */
    hashAlgorithm?: pulumi.Input<string>;
    /**
     * Used to mark the API key as a never-expiring API key.
     */
    isNeverExpiring?: pulumi.Input<boolean>;
    /**
     * The key generation specification provides the algorithm and the parameters required for this algorithm to generate a
     * private key, public key pair. Supported key generation schemes include RSA, ECDSA and Edwards-Curve Digital Signature
     * Algorithm (EdDSA).
     */
    keySpecs?: pulumi.Input<pulumi.Input<inputs.IamApiKeyKeySpec>[]>;
    /**
     * The IP address from which the API key was last used.
     */
    lastUsedIp?: pulumi.Input<string>;
    /**
     * The time at which the API key was last used. It is updated every 24 hours.
     */
    lastUsedTime?: pulumi.Input<string>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    /**
     * The current status of the API key that dictates the validity of the key. * `enabled` - An API key/App Registration
     * having enabled status can be used for API invocation. * `disabled` - An API key/App Registration having disabled status
     * cannot be used for API invocation. * `expired` - An API key/App Registration having expired status cannot be used for
     * API invocation as the expiration date has passed.
     */
    operStatus?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.IamApiKeyParent>[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.IamApiKeyPermissionResource>[]>;
    /**
     * A reference to a iamPermission resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.IamApiKeyPermission>[]>;
    /**
     * Holds the private key for the API key.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * The purpose of the API Key.
     */
    purpose?: pulumi.Input<string>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    /**
     * The signing algorithm used by the client to authenticate API requests to Intersight. The signing algorithm must be
     * compatible with the key generation specification. * `RSASSA-PKCS1-v1_5` - RSASSA-PKCS1-v1_5 is a RSA signature scheme
     * specified in [RFC 8017](https://tools.ietf.org/html/rfc8017).RSASSA-PKCS1-v1_5 is included only for compatibility with
     * existing applications. * `RSASSA-PSS` - RSASSA-PSS is a RSA signature scheme specified in [RFC
     * 8017](https://tools.ietf.org/html/rfc8017).It combines the RSASP1 and RSAVP1 primitives with the EMSA-PSS encoding
     * method.In the interest of increased robustness, RSASSA-PSS is required in new applications. * `Ed25519` - The Ed25519
     * signature algorithm, as specified in [RFC 8032](https://tools.ietf.org/html/rfc8032).Ed25519 is a public-key signature
     * system with several attractive features, includingfast single-signature verification, very fast signing, fast key
     * generation and high security level. * `Ecdsa` - The Elliptic Curve Digital Signature Standard (ECDSA), as defined by
     * NIST in FIPS 186-4 and ANSI X9.62.The signature is encoded as a ASN.1 DER SEQUENCE with two INTEGERs (r and s), as
     * defined in RFC3279.When using ECDSA signatures, configure the client to use the same signature encoding as specified on
     * the server side. * `EcdsaP1363Format` - The Elliptic Curve Digital Signature Standard (ECDSA), as defined by NIST in
     * FIPS 186-4 and ANSI X9.62.The signature is the raw concatenation of r and s, as defined in the ISO/IEC 7816-8 IEEE
     * P.1363 standard.In that format, r and s are represented as unsigned, big endian numbers.Extra padding bytes (of value
     * 0x00) is applied so that both r and s encodings have the same size.When using ECDSA signatures, configure the client to
     * use the same signature encoding as specified on the server side.
     */
    signingAlgorithm?: pulumi.Input<string>;
    /**
     * The timestamp at which an expiry date was first set on this API key. For expiring API keys, this field is same as the
     * create time of the API key. For never-expiring API keys, this field is set initially to zero time value. If a
     * never-expiry API key is later changed to have an expiration, the timestamp marking the start of this transition is
     * recorded in this field.
     */
    startTime?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.IamApiKeyTag>[]>;
    /**
     * A reference to a iamUser resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    users?: pulumi.Input<pulumi.Input<inputs.IamApiKeyUser>[]>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.IamApiKeyVersionContext>[]>;
}
