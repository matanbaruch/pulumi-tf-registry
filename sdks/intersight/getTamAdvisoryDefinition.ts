// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getTamAdvisoryDefinition(args?: GetTamAdvisoryDefinitionArgs, opts?: pulumi.InvokeOptions): Promise<GetTamAdvisoryDefinitionResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getTamAdvisoryDefinition:getTamAdvisoryDefinition", {
        "accountMoid": args.accountMoid,
        "actions": args.actions,
        "additionalProperties": args.additionalProperties,
        "advisoryDetails": args.advisoryDetails,
        "advisoryId": args.advisoryId,
        "ancestors": args.ancestors,
        "apiDataSources": args.apiDataSources,
        "classId": args.classId,
        "createTime": args.createTime,
        "datePublished": args.datePublished,
        "dateUpdated": args.dateUpdated,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "executeOnPod": args.executeOnPod,
        "externalUrl": args.externalUrl,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "nrVersion": args.nrVersion,
        "objectType": args.objectType,
        "organization": args.organization,
        "otherRefUrls": args.otherRefUrls,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "recommendation": args.recommendation,
        "s3DataSources": args.s3DataSources,
        "severity": args.severity,
        "sharedScope": args.sharedScope,
        "state": args.state,
        "tags": args.tags,
        "type": args.type,
        "versionContext": args.versionContext,
        "workaround": args.workaround,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getTamAdvisoryDefinition.
 */
export interface GetTamAdvisoryDefinitionArgs {
    accountMoid?: string;
    actions?: inputs.GetTamAdvisoryDefinitionAction[];
    additionalProperties?: string;
    advisoryDetails?: inputs.GetTamAdvisoryDefinitionAdvisoryDetails;
    advisoryId?: string;
    ancestors?: inputs.GetTamAdvisoryDefinitionAncestor[];
    apiDataSources?: inputs.GetTamAdvisoryDefinitionApiDataSource[];
    classId?: string;
    createTime?: string;
    datePublished?: string;
    dateUpdated?: string;
    description?: string;
    domainGroupMoid?: string;
    executeOnPod?: string;
    externalUrl?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    nrVersion?: string;
    objectType?: string;
    organization?: inputs.GetTamAdvisoryDefinitionOrganization;
    otherRefUrls?: string[];
    owners?: string[];
    parent?: inputs.GetTamAdvisoryDefinitionParent;
    permissionResources?: inputs.GetTamAdvisoryDefinitionPermissionResource[];
    recommendation?: string;
    s3DataSources?: inputs.GetTamAdvisoryDefinitionS3DataSource[];
    severity?: inputs.GetTamAdvisoryDefinitionSeverity;
    sharedScope?: string;
    state?: string;
    tags?: inputs.GetTamAdvisoryDefinitionTag[];
    type?: string;
    versionContext?: inputs.GetTamAdvisoryDefinitionVersionContext;
    workaround?: string;
}

/**
 * A collection of values returned by getTamAdvisoryDefinition.
 */
export interface GetTamAdvisoryDefinitionResult {
    readonly accountMoid?: string;
    readonly actions?: outputs.GetTamAdvisoryDefinitionAction[];
    readonly additionalProperties?: string;
    readonly advisoryDetails?: outputs.GetTamAdvisoryDefinitionAdvisoryDetails;
    readonly advisoryId?: string;
    readonly ancestors?: outputs.GetTamAdvisoryDefinitionAncestor[];
    readonly apiDataSources?: outputs.GetTamAdvisoryDefinitionApiDataSource[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly datePublished?: string;
    readonly dateUpdated?: string;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly executeOnPod?: string;
    readonly externalUrl?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nrVersion?: string;
    readonly objectType?: string;
    readonly organization?: outputs.GetTamAdvisoryDefinitionOrganization;
    readonly otherRefUrls?: string[];
    readonly owners?: string[];
    readonly parent?: outputs.GetTamAdvisoryDefinitionParent;
    readonly permissionResources?: outputs.GetTamAdvisoryDefinitionPermissionResource[];
    readonly recommendation?: string;
    readonly results: outputs.GetTamAdvisoryDefinitionResult[];
    readonly s3DataSources?: outputs.GetTamAdvisoryDefinitionS3DataSource[];
    readonly severity?: outputs.GetTamAdvisoryDefinitionSeverity;
    readonly sharedScope?: string;
    readonly state?: string;
    readonly tags?: outputs.GetTamAdvisoryDefinitionTag[];
    readonly type?: string;
    readonly versionContext?: outputs.GetTamAdvisoryDefinitionVersionContext;
    readonly workaround?: string;
}
export function getTamAdvisoryDefinitionOutput(args?: GetTamAdvisoryDefinitionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTamAdvisoryDefinitionResult> {
    return pulumi.output(args).apply((a: any) => getTamAdvisoryDefinition(a, opts))
}

/**
 * A collection of arguments for invoking getTamAdvisoryDefinition.
 */
export interface GetTamAdvisoryDefinitionOutputArgs {
    accountMoid?: pulumi.Input<string>;
    actions?: pulumi.Input<pulumi.Input<inputs.GetTamAdvisoryDefinitionActionArgs>[]>;
    additionalProperties?: pulumi.Input<string>;
    advisoryDetails?: pulumi.Input<inputs.GetTamAdvisoryDefinitionAdvisoryDetailsArgs>;
    advisoryId?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetTamAdvisoryDefinitionAncestorArgs>[]>;
    apiDataSources?: pulumi.Input<pulumi.Input<inputs.GetTamAdvisoryDefinitionApiDataSourceArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    datePublished?: pulumi.Input<string>;
    dateUpdated?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    executeOnPod?: pulumi.Input<string>;
    externalUrl?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nrVersion?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.GetTamAdvisoryDefinitionOrganizationArgs>;
    otherRefUrls?: pulumi.Input<pulumi.Input<string>[]>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetTamAdvisoryDefinitionParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetTamAdvisoryDefinitionPermissionResourceArgs>[]>;
    recommendation?: pulumi.Input<string>;
    s3DataSources?: pulumi.Input<pulumi.Input<inputs.GetTamAdvisoryDefinitionS3DataSourceArgs>[]>;
    severity?: pulumi.Input<inputs.GetTamAdvisoryDefinitionSeverityArgs>;
    sharedScope?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetTamAdvisoryDefinitionTagArgs>[]>;
    type?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetTamAdvisoryDefinitionVersionContextArgs>;
    workaround?: pulumi.Input<string>;
}
