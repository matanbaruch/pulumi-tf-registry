// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAssetDeviceRegistration(args?: GetAssetDeviceRegistrationArgs, opts?: pulumi.InvokeOptions): Promise<GetAssetDeviceRegistrationResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getAssetDeviceRegistration:getAssetDeviceRegistration", {
        "accessKeyId": args.accessKeyId,
        "account": args.account,
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "apiVersion": args.apiVersion,
        "appPartitionNumber": args.appPartitionNumber,
        "claimedByUser": args.claimedByUser,
        "claimedByUserName": args.claimedByUserName,
        "claimedTime": args.claimedTime,
        "classId": args.classId,
        "clusterMembers": args.clusterMembers,
        "connectionId": args.connectionId,
        "connectionReason": args.connectionReason,
        "connectionStatus": args.connectionStatus,
        "connectionStatusLastChangeTime": args.connectionStatusLastChangeTime,
        "connectorVersion": args.connectorVersion,
        "createTime": args.createTime,
        "customPermissionResources": args.customPermissionResources,
        "deviceClaim": args.deviceClaim,
        "deviceConfiguration": args.deviceConfiguration,
        "deviceExternalIpAddress": args.deviceExternalIpAddress,
        "deviceHostnames": args.deviceHostnames,
        "deviceIpAddresses": args.deviceIpAddresses,
        "domainGroup": args.domainGroup,
        "domainGroupMoid": args.domainGroupMoid,
        "executionMode": args.executionMode,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "parentConnection": args.parentConnection,
        "parentSignature": args.parentSignature,
        "permissionResources": args.permissionResources,
        "pids": args.pids,
        "platformType": args.platformType,
        "proxyApp": args.proxyApp,
        "publicAccessKey": args.publicAccessKey,
        "publicEncryptionKey": args.publicEncryptionKey,
        "readOnly": args.readOnly,
        "serials": args.serials,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "target": args.target,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAssetDeviceRegistration.
 */
export interface GetAssetDeviceRegistrationArgs {
    accessKeyId?: string;
    account?: inputs.GetAssetDeviceRegistrationAccount;
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetAssetDeviceRegistrationAncestor[];
    apiVersion?: number;
    appPartitionNumber?: number;
    claimedByUser?: inputs.GetAssetDeviceRegistrationClaimedByUser;
    claimedByUserName?: string;
    claimedTime?: string;
    classId?: string;
    clusterMembers?: inputs.GetAssetDeviceRegistrationClusterMember[];
    connectionId?: string;
    connectionReason?: string;
    connectionStatus?: string;
    connectionStatusLastChangeTime?: string;
    connectorVersion?: string;
    createTime?: string;
    customPermissionResources?: inputs.GetAssetDeviceRegistrationCustomPermissionResource[];
    deviceClaim?: inputs.GetAssetDeviceRegistrationDeviceClaim;
    deviceConfiguration?: inputs.GetAssetDeviceRegistrationDeviceConfiguration;
    deviceExternalIpAddress?: string;
    deviceHostnames?: string[];
    deviceIpAddresses?: string[];
    domainGroup?: inputs.GetAssetDeviceRegistrationDomainGroup;
    domainGroupMoid?: string;
    executionMode?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetAssetDeviceRegistrationParent;
    parentConnection?: inputs.GetAssetDeviceRegistrationParentConnection;
    parentSignature?: inputs.GetAssetDeviceRegistrationParentSignature;
    permissionResources?: inputs.GetAssetDeviceRegistrationPermissionResource[];
    pids?: string[];
    platformType?: string;
    proxyApp?: string;
    publicAccessKey?: string;
    publicEncryptionKey?: string;
    readOnly?: boolean;
    serials?: string[];
    sharedScope?: string;
    tags?: inputs.GetAssetDeviceRegistrationTag[];
    target?: inputs.GetAssetDeviceRegistrationTarget;
    vendor?: string;
    versionContext?: inputs.GetAssetDeviceRegistrationVersionContext;
}

/**
 * A collection of values returned by getAssetDeviceRegistration.
 */
export interface GetAssetDeviceRegistrationResult {
    readonly accessKeyId?: string;
    readonly account?: outputs.GetAssetDeviceRegistrationAccount;
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetAssetDeviceRegistrationAncestor[];
    readonly apiVersion?: number;
    readonly appPartitionNumber?: number;
    readonly claimedByUser?: outputs.GetAssetDeviceRegistrationClaimedByUser;
    readonly claimedByUserName?: string;
    readonly claimedTime?: string;
    readonly classId?: string;
    readonly clusterMembers?: outputs.GetAssetDeviceRegistrationClusterMember[];
    readonly connectionId?: string;
    readonly connectionReason?: string;
    readonly connectionStatus?: string;
    readonly connectionStatusLastChangeTime?: string;
    readonly connectorVersion?: string;
    readonly createTime?: string;
    readonly customPermissionResources?: outputs.GetAssetDeviceRegistrationCustomPermissionResource[];
    readonly deviceClaim?: outputs.GetAssetDeviceRegistrationDeviceClaim;
    readonly deviceConfiguration?: outputs.GetAssetDeviceRegistrationDeviceConfiguration;
    readonly deviceExternalIpAddress?: string;
    readonly deviceHostnames?: string[];
    readonly deviceIpAddresses?: string[];
    readonly domainGroup?: outputs.GetAssetDeviceRegistrationDomainGroup;
    readonly domainGroupMoid?: string;
    readonly executionMode?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetAssetDeviceRegistrationParent;
    readonly parentConnection?: outputs.GetAssetDeviceRegistrationParentConnection;
    readonly parentSignature?: outputs.GetAssetDeviceRegistrationParentSignature;
    readonly permissionResources?: outputs.GetAssetDeviceRegistrationPermissionResource[];
    readonly pids?: string[];
    readonly platformType?: string;
    readonly proxyApp?: string;
    readonly publicAccessKey?: string;
    readonly publicEncryptionKey?: string;
    readonly readOnly?: boolean;
    readonly results: outputs.GetAssetDeviceRegistrationResult[];
    readonly serials?: string[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetAssetDeviceRegistrationTag[];
    readonly target?: outputs.GetAssetDeviceRegistrationTarget;
    readonly vendor?: string;
    readonly versionContext?: outputs.GetAssetDeviceRegistrationVersionContext;
}
export function getAssetDeviceRegistrationOutput(args?: GetAssetDeviceRegistrationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAssetDeviceRegistrationResult> {
    return pulumi.output(args).apply((a: any) => getAssetDeviceRegistration(a, opts))
}

/**
 * A collection of arguments for invoking getAssetDeviceRegistration.
 */
export interface GetAssetDeviceRegistrationOutputArgs {
    accessKeyId?: pulumi.Input<string>;
    account?: pulumi.Input<inputs.GetAssetDeviceRegistrationAccountArgs>;
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetAssetDeviceRegistrationAncestorArgs>[]>;
    apiVersion?: pulumi.Input<number>;
    appPartitionNumber?: pulumi.Input<number>;
    claimedByUser?: pulumi.Input<inputs.GetAssetDeviceRegistrationClaimedByUserArgs>;
    claimedByUserName?: pulumi.Input<string>;
    claimedTime?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    clusterMembers?: pulumi.Input<pulumi.Input<inputs.GetAssetDeviceRegistrationClusterMemberArgs>[]>;
    connectionId?: pulumi.Input<string>;
    connectionReason?: pulumi.Input<string>;
    connectionStatus?: pulumi.Input<string>;
    connectionStatusLastChangeTime?: pulumi.Input<string>;
    connectorVersion?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    customPermissionResources?: pulumi.Input<pulumi.Input<inputs.GetAssetDeviceRegistrationCustomPermissionResourceArgs>[]>;
    deviceClaim?: pulumi.Input<inputs.GetAssetDeviceRegistrationDeviceClaimArgs>;
    deviceConfiguration?: pulumi.Input<inputs.GetAssetDeviceRegistrationDeviceConfigurationArgs>;
    deviceExternalIpAddress?: pulumi.Input<string>;
    deviceHostnames?: pulumi.Input<pulumi.Input<string>[]>;
    deviceIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    domainGroup?: pulumi.Input<inputs.GetAssetDeviceRegistrationDomainGroupArgs>;
    domainGroupMoid?: pulumi.Input<string>;
    executionMode?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetAssetDeviceRegistrationParentArgs>;
    parentConnection?: pulumi.Input<inputs.GetAssetDeviceRegistrationParentConnectionArgs>;
    parentSignature?: pulumi.Input<inputs.GetAssetDeviceRegistrationParentSignatureArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetAssetDeviceRegistrationPermissionResourceArgs>[]>;
    pids?: pulumi.Input<pulumi.Input<string>[]>;
    platformType?: pulumi.Input<string>;
    proxyApp?: pulumi.Input<string>;
    publicAccessKey?: pulumi.Input<string>;
    publicEncryptionKey?: pulumi.Input<string>;
    readOnly?: pulumi.Input<boolean>;
    serials?: pulumi.Input<pulumi.Input<string>[]>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetAssetDeviceRegistrationTagArgs>[]>;
    target?: pulumi.Input<inputs.GetAssetDeviceRegistrationTargetArgs>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetAssetDeviceRegistrationVersionContextArgs>;
}
