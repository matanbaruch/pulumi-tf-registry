// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getResourcepoolMembershipReservation(args?: GetResourcepoolMembershipReservationArgs, opts?: pulumi.InvokeOptions): Promise<GetResourcepoolMembershipReservationResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getResourcepoolMembershipReservation:getResourcepoolMembershipReservation", {
        "account": args.account,
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "expiration": args.expiration,
        "id": args.id,
        "identity": args.identity,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "pools": args.pools,
        "reservationSelector": args.reservationSelector,
        "resourceType": args.resourceType,
        "sharedScope": args.sharedScope,
        "status": args.status,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getResourcepoolMembershipReservation.
 */
export interface GetResourcepoolMembershipReservationArgs {
    account?: inputs.GetResourcepoolMembershipReservationAccount;
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetResourcepoolMembershipReservationAncestor[];
    classId?: string;
    createTime?: string;
    description?: string;
    domainGroupMoid?: string;
    expiration?: string;
    id?: string;
    identity?: inputs.GetResourcepoolMembershipReservationIdentity;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetResourcepoolMembershipReservationParent;
    permissionResources?: inputs.GetResourcepoolMembershipReservationPermissionResource[];
    pools?: inputs.GetResourcepoolMembershipReservationPool[];
    reservationSelector?: string;
    resourceType?: string;
    sharedScope?: string;
    status?: string;
    tags?: inputs.GetResourcepoolMembershipReservationTag[];
    versionContext?: inputs.GetResourcepoolMembershipReservationVersionContext;
}

/**
 * A collection of values returned by getResourcepoolMembershipReservation.
 */
export interface GetResourcepoolMembershipReservationResult {
    readonly account?: outputs.GetResourcepoolMembershipReservationAccount;
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetResourcepoolMembershipReservationAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly expiration?: string;
    readonly id: string;
    readonly identity?: outputs.GetResourcepoolMembershipReservationIdentity;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetResourcepoolMembershipReservationParent;
    readonly permissionResources?: outputs.GetResourcepoolMembershipReservationPermissionResource[];
    readonly pools?: outputs.GetResourcepoolMembershipReservationPool[];
    readonly reservationSelector?: string;
    readonly resourceType?: string;
    readonly results: outputs.GetResourcepoolMembershipReservationResult[];
    readonly sharedScope?: string;
    readonly status?: string;
    readonly tags?: outputs.GetResourcepoolMembershipReservationTag[];
    readonly versionContext?: outputs.GetResourcepoolMembershipReservationVersionContext;
}
export function getResourcepoolMembershipReservationOutput(args?: GetResourcepoolMembershipReservationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetResourcepoolMembershipReservationResult> {
    return pulumi.output(args).apply((a: any) => getResourcepoolMembershipReservation(a, opts))
}

/**
 * A collection of arguments for invoking getResourcepoolMembershipReservation.
 */
export interface GetResourcepoolMembershipReservationOutputArgs {
    account?: pulumi.Input<inputs.GetResourcepoolMembershipReservationAccountArgs>;
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetResourcepoolMembershipReservationAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    expiration?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.GetResourcepoolMembershipReservationIdentityArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetResourcepoolMembershipReservationParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetResourcepoolMembershipReservationPermissionResourceArgs>[]>;
    pools?: pulumi.Input<pulumi.Input<inputs.GetResourcepoolMembershipReservationPoolArgs>[]>;
    reservationSelector?: pulumi.Input<string>;
    resourceType?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetResourcepoolMembershipReservationTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetResourcepoolMembershipReservationVersionContextArgs>;
}
