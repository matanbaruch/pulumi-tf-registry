// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIppoolPoolMember(args?: GetIppoolPoolMemberArgs, opts?: pulumi.InvokeOptions): Promise<GetIppoolPoolMemberResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getIppoolPoolMember:getIppoolPoolMember", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "assigned": args.assigned,
        "assignedByAnother": args.assignedByAnother,
        "assignedToEntity": args.assignedToEntity,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "ipBlock": args.ipBlock,
        "ipType": args.ipType,
        "ipV4Address": args.ipV4Address,
        "ipV6Address": args.ipV6Address,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "peer": args.peer,
        "permissionResources": args.permissionResources,
        "pool": args.pool,
        "reservation": args.reservation,
        "reserved": args.reserved,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIppoolPoolMember.
 */
export interface GetIppoolPoolMemberArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetIppoolPoolMemberAncestor[];
    assigned?: boolean;
    assignedByAnother?: boolean;
    assignedToEntity?: inputs.GetIppoolPoolMemberAssignedToEntity;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    id?: string;
    ipBlock?: inputs.GetIppoolPoolMemberIpBlock;
    ipType?: string;
    ipV4Address?: string;
    ipV6Address?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetIppoolPoolMemberParent;
    peer?: inputs.GetIppoolPoolMemberPeer;
    permissionResources?: inputs.GetIppoolPoolMemberPermissionResource[];
    pool?: inputs.GetIppoolPoolMemberPool;
    reservation?: inputs.GetIppoolPoolMemberReservation;
    reserved?: boolean;
    sharedScope?: string;
    tags?: inputs.GetIppoolPoolMemberTag[];
    versionContext?: inputs.GetIppoolPoolMemberVersionContext;
}

/**
 * A collection of values returned by getIppoolPoolMember.
 */
export interface GetIppoolPoolMemberResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetIppoolPoolMemberAncestor[];
    readonly assigned?: boolean;
    readonly assignedByAnother?: boolean;
    readonly assignedToEntity?: outputs.GetIppoolPoolMemberAssignedToEntity;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly ipBlock?: outputs.GetIppoolPoolMemberIpBlock;
    readonly ipType?: string;
    readonly ipV4Address?: string;
    readonly ipV6Address?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetIppoolPoolMemberParent;
    readonly peer?: outputs.GetIppoolPoolMemberPeer;
    readonly permissionResources?: outputs.GetIppoolPoolMemberPermissionResource[];
    readonly pool?: outputs.GetIppoolPoolMemberPool;
    readonly reservation?: outputs.GetIppoolPoolMemberReservation;
    readonly reserved?: boolean;
    readonly results: outputs.GetIppoolPoolMemberResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetIppoolPoolMemberTag[];
    readonly versionContext?: outputs.GetIppoolPoolMemberVersionContext;
}
export function getIppoolPoolMemberOutput(args?: GetIppoolPoolMemberOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIppoolPoolMemberResult> {
    return pulumi.output(args).apply((a: any) => getIppoolPoolMember(a, opts))
}

/**
 * A collection of arguments for invoking getIppoolPoolMember.
 */
export interface GetIppoolPoolMemberOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetIppoolPoolMemberAncestorArgs>[]>;
    assigned?: pulumi.Input<boolean>;
    assignedByAnother?: pulumi.Input<boolean>;
    assignedToEntity?: pulumi.Input<inputs.GetIppoolPoolMemberAssignedToEntityArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ipBlock?: pulumi.Input<inputs.GetIppoolPoolMemberIpBlockArgs>;
    ipType?: pulumi.Input<string>;
    ipV4Address?: pulumi.Input<string>;
    ipV6Address?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetIppoolPoolMemberParentArgs>;
    peer?: pulumi.Input<inputs.GetIppoolPoolMemberPeerArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetIppoolPoolMemberPermissionResourceArgs>[]>;
    pool?: pulumi.Input<inputs.GetIppoolPoolMemberPoolArgs>;
    reservation?: pulumi.Input<inputs.GetIppoolPoolMemberReservationArgs>;
    reserved?: pulumi.Input<boolean>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetIppoolPoolMemberTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetIppoolPoolMemberVersionContextArgs>;
}
