// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVirtualizationVmwareHost(args?: GetVirtualizationVmwareHostArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualizationVmwareHostResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getVirtualizationVmwareHost:getVirtualizationVmwareHost", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "bootTime": args.bootTime,
        "classId": args.classId,
        "cluster": args.cluster,
        "connectionState": args.connectionState,
        "cpuInfo": args.cpuInfo,
        "createTime": args.createTime,
        "datacenter": args.datacenter,
        "datastores": args.datastores,
        "dcInvPath": args.dcInvPath,
        "distributedNetworks": args.distributedNetworks,
        "distributedSwitches": args.distributedSwitches,
        "dnsServers": args.dnsServers,
        "domainGroupMoid": args.domainGroupMoid,
        "hardwareInfo": args.hardwareInfo,
        "hwPowerState": args.hwPowerState,
        "hyperFlexNode": args.hyperFlexNode,
        "hypervisorType": args.hypervisorType,
        "id": args.id,
        "identity": args.identity,
        "isSshEnabled": args.isSshEnabled,
        "maintenanceMode": args.maintenanceMode,
        "memoryCapacity": args.memoryCapacity,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "name": args.name,
        "networkAdapterCount": args.networkAdapterCount,
        "ntpServers": args.ntpServers,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "processorCapacity": args.processorCapacity,
        "productInfo": args.productInfo,
        "quarantineMode": args.quarantineMode,
        "registeredDevice": args.registeredDevice,
        "resourceConsumed": args.resourceConsumed,
        "serial": args.serial,
        "server": args.server,
        "sharedScope": args.sharedScope,
        "status": args.status,
        "storageAdapterCount": args.storageAdapterCount,
        "tags": args.tags,
        "timeZone": args.timeZone,
        "upTime": args.upTime,
        "uuid": args.uuid,
        "vcenterHostId": args.vcenterHostId,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareHost.
 */
export interface GetVirtualizationVmwareHostArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetVirtualizationVmwareHostAncestor[];
    bootTime?: string;
    classId?: string;
    cluster?: inputs.GetVirtualizationVmwareHostCluster;
    connectionState?: string;
    cpuInfo?: inputs.GetVirtualizationVmwareHostCpuInfo;
    createTime?: string;
    datacenter?: inputs.GetVirtualizationVmwareHostDatacenter;
    datastores?: inputs.GetVirtualizationVmwareHostDatastore[];
    dcInvPath?: string;
    distributedNetworks?: inputs.GetVirtualizationVmwareHostDistributedNetwork[];
    distributedSwitches?: inputs.GetVirtualizationVmwareHostDistributedSwitch[];
    dnsServers?: string[];
    domainGroupMoid?: string;
    hardwareInfo?: inputs.GetVirtualizationVmwareHostHardwareInfo;
    hwPowerState?: string;
    hyperFlexNode?: inputs.GetVirtualizationVmwareHostHyperFlexNode;
    hypervisorType?: string;
    id?: string;
    identity?: string;
    isSshEnabled?: boolean;
    maintenanceMode?: boolean;
    memoryCapacity?: inputs.GetVirtualizationVmwareHostMemoryCapacity;
    modTime?: string;
    model?: string;
    moid?: string;
    name?: string;
    networkAdapterCount?: number;
    ntpServers?: string[];
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetVirtualizationVmwareHostParent;
    permissionResources?: inputs.GetVirtualizationVmwareHostPermissionResource[];
    processorCapacity?: inputs.GetVirtualizationVmwareHostProcessorCapacity;
    productInfo?: inputs.GetVirtualizationVmwareHostProductInfo;
    quarantineMode?: boolean;
    registeredDevice?: inputs.GetVirtualizationVmwareHostRegisteredDevice;
    resourceConsumed?: inputs.GetVirtualizationVmwareHostResourceConsumed;
    serial?: string;
    server?: inputs.GetVirtualizationVmwareHostServer;
    sharedScope?: string;
    status?: string;
    storageAdapterCount?: number;
    tags?: inputs.GetVirtualizationVmwareHostTag[];
    timeZone?: string;
    upTime?: string;
    uuid?: string;
    vcenterHostId?: string;
    vendor?: string;
    versionContext?: inputs.GetVirtualizationVmwareHostVersionContext;
}

/**
 * A collection of values returned by getVirtualizationVmwareHost.
 */
export interface GetVirtualizationVmwareHostResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetVirtualizationVmwareHostAncestor[];
    readonly bootTime?: string;
    readonly classId?: string;
    readonly cluster?: outputs.GetVirtualizationVmwareHostCluster;
    readonly connectionState?: string;
    readonly cpuInfo?: outputs.GetVirtualizationVmwareHostCpuInfo;
    readonly createTime?: string;
    readonly datacenter?: outputs.GetVirtualizationVmwareHostDatacenter;
    readonly datastores?: outputs.GetVirtualizationVmwareHostDatastore[];
    readonly dcInvPath?: string;
    readonly distributedNetworks?: outputs.GetVirtualizationVmwareHostDistributedNetwork[];
    readonly distributedSwitches?: outputs.GetVirtualizationVmwareHostDistributedSwitch[];
    readonly dnsServers?: string[];
    readonly domainGroupMoid?: string;
    readonly hardwareInfo?: outputs.GetVirtualizationVmwareHostHardwareInfo;
    readonly hwPowerState?: string;
    readonly hyperFlexNode?: outputs.GetVirtualizationVmwareHostHyperFlexNode;
    readonly hypervisorType?: string;
    readonly id: string;
    readonly identity?: string;
    readonly isSshEnabled?: boolean;
    readonly maintenanceMode?: boolean;
    readonly memoryCapacity?: outputs.GetVirtualizationVmwareHostMemoryCapacity;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly networkAdapterCount?: number;
    readonly ntpServers?: string[];
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetVirtualizationVmwareHostParent;
    readonly permissionResources?: outputs.GetVirtualizationVmwareHostPermissionResource[];
    readonly processorCapacity?: outputs.GetVirtualizationVmwareHostProcessorCapacity;
    readonly productInfo?: outputs.GetVirtualizationVmwareHostProductInfo;
    readonly quarantineMode?: boolean;
    readonly registeredDevice?: outputs.GetVirtualizationVmwareHostRegisteredDevice;
    readonly resourceConsumed?: outputs.GetVirtualizationVmwareHostResourceConsumed;
    readonly results: outputs.GetVirtualizationVmwareHostResult[];
    readonly serial?: string;
    readonly server?: outputs.GetVirtualizationVmwareHostServer;
    readonly sharedScope?: string;
    readonly status?: string;
    readonly storageAdapterCount?: number;
    readonly tags?: outputs.GetVirtualizationVmwareHostTag[];
    readonly timeZone?: string;
    readonly upTime?: string;
    readonly uuid?: string;
    readonly vcenterHostId?: string;
    readonly vendor?: string;
    readonly versionContext?: outputs.GetVirtualizationVmwareHostVersionContext;
}
export function getVirtualizationVmwareHostOutput(args?: GetVirtualizationVmwareHostOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualizationVmwareHostResult> {
    return pulumi.output(args).apply((a: any) => getVirtualizationVmwareHost(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareHost.
 */
export interface GetVirtualizationVmwareHostOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareHostAncestorArgs>[]>;
    bootTime?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    cluster?: pulumi.Input<inputs.GetVirtualizationVmwareHostClusterArgs>;
    connectionState?: pulumi.Input<string>;
    cpuInfo?: pulumi.Input<inputs.GetVirtualizationVmwareHostCpuInfoArgs>;
    createTime?: pulumi.Input<string>;
    datacenter?: pulumi.Input<inputs.GetVirtualizationVmwareHostDatacenterArgs>;
    datastores?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareHostDatastoreArgs>[]>;
    dcInvPath?: pulumi.Input<string>;
    distributedNetworks?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareHostDistributedNetworkArgs>[]>;
    distributedSwitches?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareHostDistributedSwitchArgs>[]>;
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    domainGroupMoid?: pulumi.Input<string>;
    hardwareInfo?: pulumi.Input<inputs.GetVirtualizationVmwareHostHardwareInfoArgs>;
    hwPowerState?: pulumi.Input<string>;
    hyperFlexNode?: pulumi.Input<inputs.GetVirtualizationVmwareHostHyperFlexNodeArgs>;
    hypervisorType?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    identity?: pulumi.Input<string>;
    isSshEnabled?: pulumi.Input<boolean>;
    maintenanceMode?: pulumi.Input<boolean>;
    memoryCapacity?: pulumi.Input<inputs.GetVirtualizationVmwareHostMemoryCapacityArgs>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkAdapterCount?: pulumi.Input<number>;
    ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetVirtualizationVmwareHostParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareHostPermissionResourceArgs>[]>;
    processorCapacity?: pulumi.Input<inputs.GetVirtualizationVmwareHostProcessorCapacityArgs>;
    productInfo?: pulumi.Input<inputs.GetVirtualizationVmwareHostProductInfoArgs>;
    quarantineMode?: pulumi.Input<boolean>;
    registeredDevice?: pulumi.Input<inputs.GetVirtualizationVmwareHostRegisteredDeviceArgs>;
    resourceConsumed?: pulumi.Input<inputs.GetVirtualizationVmwareHostResourceConsumedArgs>;
    serial?: pulumi.Input<string>;
    server?: pulumi.Input<inputs.GetVirtualizationVmwareHostServerArgs>;
    sharedScope?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    storageAdapterCount?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareHostTagArgs>[]>;
    timeZone?: pulumi.Input<string>;
    upTime?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    vcenterHostId?: pulumi.Input<string>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetVirtualizationVmwareHostVersionContextArgs>;
}
