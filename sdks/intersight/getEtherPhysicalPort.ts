// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEtherPhysicalPort(args?: GetEtherPhysicalPortArgs, opts?: pulumi.InvokeOptions): Promise<GetEtherPhysicalPortResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getEtherPhysicalPort:getEtherPhysicalPort", {
        "accountMoid": args.accountMoid,
        "acknowledgedPeerInterface": args.acknowledgedPeerInterface,
        "additionalProperties": args.additionalProperties,
        "adminSpeed": args.adminSpeed,
        "adminState": args.adminState,
        "aggregatePortId": args.aggregatePortId,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "licenseGrace": args.licenseGrace,
        "licenseState": args.licenseState,
        "macAddress": args.macAddress,
        "modTime": args.modTime,
        "mode": args.mode,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "operSpeed": args.operSpeed,
        "operState": args.operState,
        "operStateQual": args.operStateQual,
        "owners": args.owners,
        "parent": args.parent,
        "peerDn": args.peerDn,
        "peerInterface": args.peerInterface,
        "permissionResources": args.permissionResources,
        "portChannelId": args.portChannelId,
        "portGroup": args.portGroup,
        "portId": args.portId,
        "portSubGroup": args.portSubGroup,
        "portType": args.portType,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "role": args.role,
        "sharedScope": args.sharedScope,
        "slotId": args.slotId,
        "switchId": args.switchId,
        "tags": args.tags,
        "transceiverType": args.transceiverType,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEtherPhysicalPort.
 */
export interface GetEtherPhysicalPortArgs {
    accountMoid?: string;
    acknowledgedPeerInterface?: inputs.GetEtherPhysicalPortAcknowledgedPeerInterface;
    additionalProperties?: string;
    adminSpeed?: string;
    adminState?: string;
    aggregatePortId?: number;
    ancestors?: inputs.GetEtherPhysicalPortAncestor[];
    classId?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    id?: string;
    inventoryDeviceInfo?: inputs.GetEtherPhysicalPortInventoryDeviceInfo;
    licenseGrace?: string;
    licenseState?: string;
    macAddress?: string;
    modTime?: string;
    mode?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    operSpeed?: string;
    operState?: string;
    operStateQual?: string;
    owners?: string[];
    parent?: inputs.GetEtherPhysicalPortParent;
    peerDn?: string;
    peerInterface?: inputs.GetEtherPhysicalPortPeerInterface;
    permissionResources?: inputs.GetEtherPhysicalPortPermissionResource[];
    portChannelId?: number;
    portGroup?: inputs.GetEtherPhysicalPortPortGroup;
    portId?: number;
    portSubGroup?: inputs.GetEtherPhysicalPortPortSubGroup;
    portType?: string;
    registeredDevice?: inputs.GetEtherPhysicalPortRegisteredDevice;
    rn?: string;
    role?: string;
    sharedScope?: string;
    slotId?: number;
    switchId?: string;
    tags?: inputs.GetEtherPhysicalPortTag[];
    transceiverType?: string;
    versionContext?: inputs.GetEtherPhysicalPortVersionContext;
}

/**
 * A collection of values returned by getEtherPhysicalPort.
 */
export interface GetEtherPhysicalPortResult {
    readonly accountMoid?: string;
    readonly acknowledgedPeerInterface?: outputs.GetEtherPhysicalPortAcknowledgedPeerInterface;
    readonly additionalProperties?: string;
    readonly adminSpeed?: string;
    readonly adminState?: string;
    readonly aggregatePortId?: number;
    readonly ancestors?: outputs.GetEtherPhysicalPortAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetEtherPhysicalPortInventoryDeviceInfo;
    readonly licenseGrace?: string;
    readonly licenseState?: string;
    readonly macAddress?: string;
    readonly modTime?: string;
    readonly mode?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly operSpeed?: string;
    readonly operState?: string;
    readonly operStateQual?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetEtherPhysicalPortParent;
    readonly peerDn?: string;
    readonly peerInterface?: outputs.GetEtherPhysicalPortPeerInterface;
    readonly permissionResources?: outputs.GetEtherPhysicalPortPermissionResource[];
    readonly portChannelId?: number;
    readonly portGroup?: outputs.GetEtherPhysicalPortPortGroup;
    readonly portId?: number;
    readonly portSubGroup?: outputs.GetEtherPhysicalPortPortSubGroup;
    readonly portType?: string;
    readonly registeredDevice?: outputs.GetEtherPhysicalPortRegisteredDevice;
    readonly results: outputs.GetEtherPhysicalPortResult[];
    readonly rn?: string;
    readonly role?: string;
    readonly sharedScope?: string;
    readonly slotId?: number;
    readonly switchId?: string;
    readonly tags?: outputs.GetEtherPhysicalPortTag[];
    readonly transceiverType?: string;
    readonly versionContext?: outputs.GetEtherPhysicalPortVersionContext;
}
export function getEtherPhysicalPortOutput(args?: GetEtherPhysicalPortOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEtherPhysicalPortResult> {
    return pulumi.output(args).apply((a: any) => getEtherPhysicalPort(a, opts))
}

/**
 * A collection of arguments for invoking getEtherPhysicalPort.
 */
export interface GetEtherPhysicalPortOutputArgs {
    accountMoid?: pulumi.Input<string>;
    acknowledgedPeerInterface?: pulumi.Input<inputs.GetEtherPhysicalPortAcknowledgedPeerInterfaceArgs>;
    additionalProperties?: pulumi.Input<string>;
    adminSpeed?: pulumi.Input<string>;
    adminState?: pulumi.Input<string>;
    aggregatePortId?: pulumi.Input<number>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetEtherPhysicalPortAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetEtherPhysicalPortInventoryDeviceInfoArgs>;
    licenseGrace?: pulumi.Input<string>;
    licenseState?: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operSpeed?: pulumi.Input<string>;
    operState?: pulumi.Input<string>;
    operStateQual?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetEtherPhysicalPortParentArgs>;
    peerDn?: pulumi.Input<string>;
    peerInterface?: pulumi.Input<inputs.GetEtherPhysicalPortPeerInterfaceArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetEtherPhysicalPortPermissionResourceArgs>[]>;
    portChannelId?: pulumi.Input<number>;
    portGroup?: pulumi.Input<inputs.GetEtherPhysicalPortPortGroupArgs>;
    portId?: pulumi.Input<number>;
    portSubGroup?: pulumi.Input<inputs.GetEtherPhysicalPortPortSubGroupArgs>;
    portType?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetEtherPhysicalPortRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    slotId?: pulumi.Input<number>;
    switchId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetEtherPhysicalPortTagArgs>[]>;
    transceiverType?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetEtherPhysicalPortVersionContextArgs>;
}
