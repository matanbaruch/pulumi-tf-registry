// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VirtualizationVirtualMachine extends pulumi.CustomResource {
    /**
     * Get an existing VirtualizationVirtualMachine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualizationVirtualMachineState, opts?: pulumi.CustomResourceOptions): VirtualizationVirtualMachine {
        return new VirtualizationVirtualMachine(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'intersight:index/virtualizationVirtualMachine:VirtualizationVirtualMachine';

    /**
     * Returns true if the given object is an instance of VirtualizationVirtualMachine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualizationVirtualMachine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualizationVirtualMachine.__pulumiType;
    }

    /**
     * The Account ID for this managed object.
     */
    public readonly accountMoid!: pulumi.Output<string>;
    /**
     * Action to be performed on a virtual machine (Create, PowerState, Migrate, Clone etc). * `None` - A place holder for the
     * default value. * `PowerState` - Power action is performed on the virtual machine. * `Migrate` - The virtual machine will
     * be migrated from existing node to a different node in cluster. The behavior depends on the underlying hypervisor. *
     * `Create` - The virtual machine will be created on the specified hypervisor. This action is also useful if the virtual
     * machine creation failed during first POST operation on VirtualMachine managed object. User can set this action to retry
     * the virtual machine creation. * `Delete` - The virtual machine will be deleted from the specified hypervisor. User can
     * either set this action or can do a DELETE operation on the VirtualMachine managed object. * `Resize` - The virtual
     * machine will be resized to the specified instance type.
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * Details of an action performed on the virtual machine. Contains name of the action performed, status, failure reason
     * message etc.
     */
    public readonly actionInfos!: pulumi.Output<outputs.VirtualizationVirtualMachineActionInfo[]>;
    public readonly additionalProperties!: pulumi.Output<string | undefined>;
    public readonly affinitySelectors!: pulumi.Output<outputs.VirtualizationVirtualMachineAffinitySelector[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly ancestors!: pulumi.Output<outputs.VirtualizationVirtualMachineAncestor[]>;
    public readonly antiAffinitySelectors!: pulumi.Output<outputs.VirtualizationVirtualMachineAntiAffinitySelector[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    public readonly classId!: pulumi.Output<string | undefined>;
    /**
     * Cloud init configuration data for virtual machine.
     */
    public readonly cloudInitConfigs!: pulumi.Output<outputs.VirtualizationVirtualMachineCloudInitConfig[]>;
    /**
     * Cluster where virtual machine is deployed.
     */
    public readonly clusterEsxi!: pulumi.Output<string | undefined>;
    /**
     * A reference to a virtualizationBaseCluster resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    public readonly clusters!: pulumi.Output<outputs.VirtualizationVirtualMachineCluster[]>;
    /**
     * Number of vCPUs to be allocated to virtual machine. The upper limit depends on the hypervisor.
     */
    public readonly cpu!: pulumi.Output<number | undefined>;
    /**
     * The time when this managed object was created.
     */
    public readonly createTime!: pulumi.Output<string>;
    /**
     * Flag to indicate whether the configuration is created from inventory object.
     */
    public readonly discovered!: pulumi.Output<boolean>;
    public readonly disks!: pulumi.Output<outputs.VirtualizationVirtualMachineDisk[]>;
    /**
     * The DomainGroup ID for this managed object.
     */
    public readonly domainGroupMoid!: pulumi.Output<string>;
    /**
     * Normally any virtual machine that is still powered on cannot be deleted. The expected sequence from a user is to first
     * power off the virtual machine and then invoke the delete operation. However, in special circumstances, the owner of the
     * virtual machine may know very well that the virtual machine is no longer needed and just wants to dispose it off. In
     * such situations a delete operation of a virtual machine object is accepted only when this forceDelete attribute is set
     * to true. Under normal circumstances (forceDelete is false), delete operation first confirms that the virtual machine is
     * powered off and then proceeds to delete the virtual machine.
     */
    public readonly forceDelete!: pulumi.Output<boolean | undefined>;
    public readonly gpuConfigs!: pulumi.Output<outputs.VirtualizationVirtualMachineGpuConfig[]>;
    /**
     * Guest operating system running on virtual machine. * `linux` - A Linux operating system. * `windows` - A Windows
     * operating system.
     */
    public readonly guestOs!: pulumi.Output<string | undefined>;
    /**
     * Host where virtual machine is deployed.
     */
    public readonly hostEsxi!: pulumi.Output<string | undefined>;
    /**
     * A reference to a virtualizationBaseHost resource. When the $expand query parameter is specified, the referenced resource
     * is returned inline.
     */
    public readonly hosts!: pulumi.Output<outputs.VirtualizationVirtualMachineHost[]>;
    /**
     * Identifies the broad product type of the hypervisor but without any version information. It is here to easily identify
     * the type of the virtual machine. There are other entities (Host, Cluster, etc.) that can be indirectly used to determine
     * the hypervisor but a direct attribute makes it easier to work with. * `ESXi` - The hypervisor running on the HyperFlex
     * cluster is a Vmware ESXi hypervisor of any version. * `Hyper-V` - The hypervisor running on the HyperFlex cluster is
     * Microsoft Hyper-V. * `Unknown` - The hypervisor running on the HyperFlex cluster is not known.
     */
    public readonly hypervisorType!: pulumi.Output<string>;
    public readonly interfaces!: pulumi.Output<outputs.VirtualizationVirtualMachineInterface[]>;
    /**
     * A reference to a virtualizationBaseVirtualMachine resource. When the $expand query parameter is specified, the
     * referenced resource is returned inline.
     */
    public readonly inventories!: pulumi.Output<outputs.VirtualizationVirtualMachineInventory[]>;
    public readonly labels!: pulumi.Output<outputs.VirtualizationVirtualMachineLabel[]>;
    /**
     * Virtual machine memory in mebi bytes (one mebibyte, 1MiB, is 1048576 bytes, and 1KiB is 1024 bytes). Input must be a
     * whole number and scientific notation is not acceptable. For example, enter 1730 and not 1.73e03. No upper limit is
     * enforced because hypervisors increase the limit in every release.
     */
    public readonly memory!: pulumi.Output<number | undefined>;
    /**
     * The time when this managed object was last modified.
     */
    public readonly modTime!: pulumi.Output<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    public readonly moid!: pulumi.Output<string>;
    /**
     * Virtual machine name that is unique. Hypervisors enforce platform specific limits and character sets. The name length
     * limit, both min and max, vary among hypervisors. Therefore, the basic limits are set here and proper enforcement is done
     * elsewhere.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    public readonly objectType!: pulumi.Output<string | undefined>;
    public readonly owners!: pulumi.Output<string[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    public readonly parents!: pulumi.Output<outputs.VirtualizationVirtualMachineParent[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly permissionResources!: pulumi.Output<outputs.VirtualizationVirtualMachinePermissionResource[]>;
    /**
     * Expected power state of virtual machine (PowerOn, PowerOff, Restart). * `PowerOff` - The virtual machine will be powered
     * off if it is already not in powered off state. If it is already powered off, no side-effects are expected. * `PowerOn` -
     * The virtual machine will be powered on if it is already not in powered on state. If it is already powered on, no
     * side-effects are expected. * `Suspend` - The virtual machine will be put into a suspended state. * `ShutDownGuestOS` -
     * The guest operating system is shut down gracefully. * `RestartGuestOS` - It can either act as a reset switch and
     * abruptly reset the guest operating system, or it can send a restart signal to the guest operating system so that it
     * shuts down gracefully and restarts. * `Reset` - Resets the virtual machine abruptly, with no consideration for work in
     * progress. * `Restart` - The virtual machine will be restarted only if it is in powered on state. If it is powered off,
     * it will not be started up. * `Unknown` - Power state of the entity is unknown.
     */
    public readonly powerState!: pulumi.Output<string | undefined>;
    /**
     * Identifies the provision type to create a new virtual machine. * `OVA` - Deploy virtual machine using OVA/F file. *
     * `Template` - Provision virtual machine using a template file. * `Discovered` - A virtual machine was 'discovered' and
     * not created from Intersight. No provisioning information is available.
     */
    public readonly provisionType!: pulumi.Output<string | undefined>;
    /**
     * A reference to a assetDeviceRegistration resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    public readonly registeredDevices!: pulumi.Output<outputs.VirtualizationVirtualMachineRegisteredDevice[]>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    public readonly sharedScope!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.VirtualizationVirtualMachineTag[]>;
    /**
     * The versioning info for this managed object.
     */
    public readonly versionContexts!: pulumi.Output<outputs.VirtualizationVirtualMachineVersionContext[]>;
    /**
     * Virtual machine configuration to provision.
     */
    public readonly vmConfigs!: pulumi.Output<outputs.VirtualizationVirtualMachineVmConfig[]>;
    /**
     * This model object can trigger workflows. Use this option to wait for all running workflows to reach a complete state.
     */
    public readonly waitForCompletion!: pulumi.Output<boolean | undefined>;
    /**
     * A reference to a workflowWorkflowInfo resource. When the $expand query parameter is specified, the referenced resource
     * is returned inline.
     */
    public readonly workflowInfos!: pulumi.Output<outputs.VirtualizationVirtualMachineWorkflowInfo[]>;

    /**
     * Create a VirtualizationVirtualMachine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VirtualizationVirtualMachineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualizationVirtualMachineArgs | VirtualizationVirtualMachineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualizationVirtualMachineState | undefined;
            resourceInputs["accountMoid"] = state ? state.accountMoid : undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["actionInfos"] = state ? state.actionInfos : undefined;
            resourceInputs["additionalProperties"] = state ? state.additionalProperties : undefined;
            resourceInputs["affinitySelectors"] = state ? state.affinitySelectors : undefined;
            resourceInputs["ancestors"] = state ? state.ancestors : undefined;
            resourceInputs["antiAffinitySelectors"] = state ? state.antiAffinitySelectors : undefined;
            resourceInputs["classId"] = state ? state.classId : undefined;
            resourceInputs["cloudInitConfigs"] = state ? state.cloudInitConfigs : undefined;
            resourceInputs["clusterEsxi"] = state ? state.clusterEsxi : undefined;
            resourceInputs["clusters"] = state ? state.clusters : undefined;
            resourceInputs["cpu"] = state ? state.cpu : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["discovered"] = state ? state.discovered : undefined;
            resourceInputs["disks"] = state ? state.disks : undefined;
            resourceInputs["domainGroupMoid"] = state ? state.domainGroupMoid : undefined;
            resourceInputs["forceDelete"] = state ? state.forceDelete : undefined;
            resourceInputs["gpuConfigs"] = state ? state.gpuConfigs : undefined;
            resourceInputs["guestOs"] = state ? state.guestOs : undefined;
            resourceInputs["hostEsxi"] = state ? state.hostEsxi : undefined;
            resourceInputs["hosts"] = state ? state.hosts : undefined;
            resourceInputs["hypervisorType"] = state ? state.hypervisorType : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["inventories"] = state ? state.inventories : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["modTime"] = state ? state.modTime : undefined;
            resourceInputs["moid"] = state ? state.moid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objectType"] = state ? state.objectType : undefined;
            resourceInputs["owners"] = state ? state.owners : undefined;
            resourceInputs["parents"] = state ? state.parents : undefined;
            resourceInputs["permissionResources"] = state ? state.permissionResources : undefined;
            resourceInputs["powerState"] = state ? state.powerState : undefined;
            resourceInputs["provisionType"] = state ? state.provisionType : undefined;
            resourceInputs["registeredDevices"] = state ? state.registeredDevices : undefined;
            resourceInputs["sharedScope"] = state ? state.sharedScope : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["versionContexts"] = state ? state.versionContexts : undefined;
            resourceInputs["vmConfigs"] = state ? state.vmConfigs : undefined;
            resourceInputs["waitForCompletion"] = state ? state.waitForCompletion : undefined;
            resourceInputs["workflowInfos"] = state ? state.workflowInfos : undefined;
        } else {
            const args = argsOrState as VirtualizationVirtualMachineArgs | undefined;
            resourceInputs["accountMoid"] = args ? args.accountMoid : undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["actionInfos"] = args ? args.actionInfos : undefined;
            resourceInputs["additionalProperties"] = args ? args.additionalProperties : undefined;
            resourceInputs["affinitySelectors"] = args ? args.affinitySelectors : undefined;
            resourceInputs["ancestors"] = args ? args.ancestors : undefined;
            resourceInputs["antiAffinitySelectors"] = args ? args.antiAffinitySelectors : undefined;
            resourceInputs["classId"] = args ? args.classId : undefined;
            resourceInputs["cloudInitConfigs"] = args ? args.cloudInitConfigs : undefined;
            resourceInputs["clusterEsxi"] = args ? args.clusterEsxi : undefined;
            resourceInputs["clusters"] = args ? args.clusters : undefined;
            resourceInputs["cpu"] = args ? args.cpu : undefined;
            resourceInputs["createTime"] = args ? args.createTime : undefined;
            resourceInputs["discovered"] = args ? args.discovered : undefined;
            resourceInputs["disks"] = args ? args.disks : undefined;
            resourceInputs["domainGroupMoid"] = args ? args.domainGroupMoid : undefined;
            resourceInputs["forceDelete"] = args ? args.forceDelete : undefined;
            resourceInputs["gpuConfigs"] = args ? args.gpuConfigs : undefined;
            resourceInputs["guestOs"] = args ? args.guestOs : undefined;
            resourceInputs["hostEsxi"] = args ? args.hostEsxi : undefined;
            resourceInputs["hosts"] = args ? args.hosts : undefined;
            resourceInputs["hypervisorType"] = args ? args.hypervisorType : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["inventories"] = args ? args.inventories : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["modTime"] = args ? args.modTime : undefined;
            resourceInputs["moid"] = args ? args.moid : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["objectType"] = args ? args.objectType : undefined;
            resourceInputs["owners"] = args ? args.owners : undefined;
            resourceInputs["parents"] = args ? args.parents : undefined;
            resourceInputs["permissionResources"] = args ? args.permissionResources : undefined;
            resourceInputs["powerState"] = args ? args.powerState : undefined;
            resourceInputs["provisionType"] = args ? args.provisionType : undefined;
            resourceInputs["registeredDevices"] = args ? args.registeredDevices : undefined;
            resourceInputs["sharedScope"] = args ? args.sharedScope : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["versionContexts"] = args ? args.versionContexts : undefined;
            resourceInputs["vmConfigs"] = args ? args.vmConfigs : undefined;
            resourceInputs["waitForCompletion"] = args ? args.waitForCompletion : undefined;
            resourceInputs["workflowInfos"] = args ? args.workflowInfos : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualizationVirtualMachine.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VirtualizationVirtualMachine resources.
 */
export interface VirtualizationVirtualMachineState {
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    /**
     * Action to be performed on a virtual machine (Create, PowerState, Migrate, Clone etc). * `None` - A place holder for the
     * default value. * `PowerState` - Power action is performed on the virtual machine. * `Migrate` - The virtual machine will
     * be migrated from existing node to a different node in cluster. The behavior depends on the underlying hypervisor. *
     * `Create` - The virtual machine will be created on the specified hypervisor. This action is also useful if the virtual
     * machine creation failed during first POST operation on VirtualMachine managed object. User can set this action to retry
     * the virtual machine creation. * `Delete` - The virtual machine will be deleted from the specified hypervisor. User can
     * either set this action or can do a DELETE operation on the VirtualMachine managed object. * `Resize` - The virtual
     * machine will be resized to the specified instance type.
     */
    action?: pulumi.Input<string>;
    /**
     * Details of an action performed on the virtual machine. Contains name of the action performed, status, failure reason
     * message etc.
     */
    actionInfos?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineActionInfo>[]>;
    additionalProperties?: pulumi.Input<string>;
    affinitySelectors?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineAffinitySelector>[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineAncestor>[]>;
    antiAffinitySelectors?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineAntiAffinitySelector>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    /**
     * Cloud init configuration data for virtual machine.
     */
    cloudInitConfigs?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineCloudInitConfig>[]>;
    /**
     * Cluster where virtual machine is deployed.
     */
    clusterEsxi?: pulumi.Input<string>;
    /**
     * A reference to a virtualizationBaseCluster resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    clusters?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineCluster>[]>;
    /**
     * Number of vCPUs to be allocated to virtual machine. The upper limit depends on the hypervisor.
     */
    cpu?: pulumi.Input<number>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Flag to indicate whether the configuration is created from inventory object.
     */
    discovered?: pulumi.Input<boolean>;
    disks?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineDisk>[]>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    /**
     * Normally any virtual machine that is still powered on cannot be deleted. The expected sequence from a user is to first
     * power off the virtual machine and then invoke the delete operation. However, in special circumstances, the owner of the
     * virtual machine may know very well that the virtual machine is no longer needed and just wants to dispose it off. In
     * such situations a delete operation of a virtual machine object is accepted only when this forceDelete attribute is set
     * to true. Under normal circumstances (forceDelete is false), delete operation first confirms that the virtual machine is
     * powered off and then proceeds to delete the virtual machine.
     */
    forceDelete?: pulumi.Input<boolean>;
    gpuConfigs?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineGpuConfig>[]>;
    /**
     * Guest operating system running on virtual machine. * `linux` - A Linux operating system. * `windows` - A Windows
     * operating system.
     */
    guestOs?: pulumi.Input<string>;
    /**
     * Host where virtual machine is deployed.
     */
    hostEsxi?: pulumi.Input<string>;
    /**
     * A reference to a virtualizationBaseHost resource. When the $expand query parameter is specified, the referenced resource
     * is returned inline.
     */
    hosts?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineHost>[]>;
    /**
     * Identifies the broad product type of the hypervisor but without any version information. It is here to easily identify
     * the type of the virtual machine. There are other entities (Host, Cluster, etc.) that can be indirectly used to determine
     * the hypervisor but a direct attribute makes it easier to work with. * `ESXi` - The hypervisor running on the HyperFlex
     * cluster is a Vmware ESXi hypervisor of any version. * `Hyper-V` - The hypervisor running on the HyperFlex cluster is
     * Microsoft Hyper-V. * `Unknown` - The hypervisor running on the HyperFlex cluster is not known.
     */
    hypervisorType?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineInterface>[]>;
    /**
     * A reference to a virtualizationBaseVirtualMachine resource. When the $expand query parameter is specified, the
     * referenced resource is returned inline.
     */
    inventories?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineInventory>[]>;
    labels?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineLabel>[]>;
    /**
     * Virtual machine memory in mebi bytes (one mebibyte, 1MiB, is 1048576 bytes, and 1KiB is 1024 bytes). Input must be a
     * whole number and scientific notation is not acceptable. For example, enter 1730 and not 1.73e03. No upper limit is
     * enforced because hypervisors increase the limit in every release.
     */
    memory?: pulumi.Input<number>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * Virtual machine name that is unique. Hypervisors enforce platform specific limits and character sets. The name length
     * limit, both min and max, vary among hypervisors. Therefore, the basic limits are set here and proper enforcement is done
     * elsewhere.
     */
    name?: pulumi.Input<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineParent>[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachinePermissionResource>[]>;
    /**
     * Expected power state of virtual machine (PowerOn, PowerOff, Restart). * `PowerOff` - The virtual machine will be powered
     * off if it is already not in powered off state. If it is already powered off, no side-effects are expected. * `PowerOn` -
     * The virtual machine will be powered on if it is already not in powered on state. If it is already powered on, no
     * side-effects are expected. * `Suspend` - The virtual machine will be put into a suspended state. * `ShutDownGuestOS` -
     * The guest operating system is shut down gracefully. * `RestartGuestOS` - It can either act as a reset switch and
     * abruptly reset the guest operating system, or it can send a restart signal to the guest operating system so that it
     * shuts down gracefully and restarts. * `Reset` - Resets the virtual machine abruptly, with no consideration for work in
     * progress. * `Restart` - The virtual machine will be restarted only if it is in powered on state. If it is powered off,
     * it will not be started up. * `Unknown` - Power state of the entity is unknown.
     */
    powerState?: pulumi.Input<string>;
    /**
     * Identifies the provision type to create a new virtual machine. * `OVA` - Deploy virtual machine using OVA/F file. *
     * `Template` - Provision virtual machine using a template file. * `Discovered` - A virtual machine was 'discovered' and
     * not created from Intersight. No provisioning information is available.
     */
    provisionType?: pulumi.Input<string>;
    /**
     * A reference to a assetDeviceRegistration resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    registeredDevices?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineRegisteredDevice>[]>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineTag>[]>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineVersionContext>[]>;
    /**
     * Virtual machine configuration to provision.
     */
    vmConfigs?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineVmConfig>[]>;
    /**
     * This model object can trigger workflows. Use this option to wait for all running workflows to reach a complete state.
     */
    waitForCompletion?: pulumi.Input<boolean>;
    /**
     * A reference to a workflowWorkflowInfo resource. When the $expand query parameter is specified, the referenced resource
     * is returned inline.
     */
    workflowInfos?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineWorkflowInfo>[]>;
}

/**
 * The set of arguments for constructing a VirtualizationVirtualMachine resource.
 */
export interface VirtualizationVirtualMachineArgs {
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    /**
     * Action to be performed on a virtual machine (Create, PowerState, Migrate, Clone etc). * `None` - A place holder for the
     * default value. * `PowerState` - Power action is performed on the virtual machine. * `Migrate` - The virtual machine will
     * be migrated from existing node to a different node in cluster. The behavior depends on the underlying hypervisor. *
     * `Create` - The virtual machine will be created on the specified hypervisor. This action is also useful if the virtual
     * machine creation failed during first POST operation on VirtualMachine managed object. User can set this action to retry
     * the virtual machine creation. * `Delete` - The virtual machine will be deleted from the specified hypervisor. User can
     * either set this action or can do a DELETE operation on the VirtualMachine managed object. * `Resize` - The virtual
     * machine will be resized to the specified instance type.
     */
    action?: pulumi.Input<string>;
    /**
     * Details of an action performed on the virtual machine. Contains name of the action performed, status, failure reason
     * message etc.
     */
    actionInfos?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineActionInfo>[]>;
    additionalProperties?: pulumi.Input<string>;
    affinitySelectors?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineAffinitySelector>[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineAncestor>[]>;
    antiAffinitySelectors?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineAntiAffinitySelector>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    /**
     * Cloud init configuration data for virtual machine.
     */
    cloudInitConfigs?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineCloudInitConfig>[]>;
    /**
     * Cluster where virtual machine is deployed.
     */
    clusterEsxi?: pulumi.Input<string>;
    /**
     * A reference to a virtualizationBaseCluster resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    clusters?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineCluster>[]>;
    /**
     * Number of vCPUs to be allocated to virtual machine. The upper limit depends on the hypervisor.
     */
    cpu?: pulumi.Input<number>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Flag to indicate whether the configuration is created from inventory object.
     */
    discovered?: pulumi.Input<boolean>;
    disks?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineDisk>[]>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    /**
     * Normally any virtual machine that is still powered on cannot be deleted. The expected sequence from a user is to first
     * power off the virtual machine and then invoke the delete operation. However, in special circumstances, the owner of the
     * virtual machine may know very well that the virtual machine is no longer needed and just wants to dispose it off. In
     * such situations a delete operation of a virtual machine object is accepted only when this forceDelete attribute is set
     * to true. Under normal circumstances (forceDelete is false), delete operation first confirms that the virtual machine is
     * powered off and then proceeds to delete the virtual machine.
     */
    forceDelete?: pulumi.Input<boolean>;
    gpuConfigs?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineGpuConfig>[]>;
    /**
     * Guest operating system running on virtual machine. * `linux` - A Linux operating system. * `windows` - A Windows
     * operating system.
     */
    guestOs?: pulumi.Input<string>;
    /**
     * Host where virtual machine is deployed.
     */
    hostEsxi?: pulumi.Input<string>;
    /**
     * A reference to a virtualizationBaseHost resource. When the $expand query parameter is specified, the referenced resource
     * is returned inline.
     */
    hosts?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineHost>[]>;
    /**
     * Identifies the broad product type of the hypervisor but without any version information. It is here to easily identify
     * the type of the virtual machine. There are other entities (Host, Cluster, etc.) that can be indirectly used to determine
     * the hypervisor but a direct attribute makes it easier to work with. * `ESXi` - The hypervisor running on the HyperFlex
     * cluster is a Vmware ESXi hypervisor of any version. * `Hyper-V` - The hypervisor running on the HyperFlex cluster is
     * Microsoft Hyper-V. * `Unknown` - The hypervisor running on the HyperFlex cluster is not known.
     */
    hypervisorType?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineInterface>[]>;
    /**
     * A reference to a virtualizationBaseVirtualMachine resource. When the $expand query parameter is specified, the
     * referenced resource is returned inline.
     */
    inventories?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineInventory>[]>;
    labels?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineLabel>[]>;
    /**
     * Virtual machine memory in mebi bytes (one mebibyte, 1MiB, is 1048576 bytes, and 1KiB is 1024 bytes). Input must be a
     * whole number and scientific notation is not acceptable. For example, enter 1730 and not 1.73e03. No upper limit is
     * enforced because hypervisors increase the limit in every release.
     */
    memory?: pulumi.Input<number>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * Virtual machine name that is unique. Hypervisors enforce platform specific limits and character sets. The name length
     * limit, both min and max, vary among hypervisors. Therefore, the basic limits are set here and proper enforcement is done
     * elsewhere.
     */
    name?: pulumi.Input<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineParent>[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachinePermissionResource>[]>;
    /**
     * Expected power state of virtual machine (PowerOn, PowerOff, Restart). * `PowerOff` - The virtual machine will be powered
     * off if it is already not in powered off state. If it is already powered off, no side-effects are expected. * `PowerOn` -
     * The virtual machine will be powered on if it is already not in powered on state. If it is already powered on, no
     * side-effects are expected. * `Suspend` - The virtual machine will be put into a suspended state. * `ShutDownGuestOS` -
     * The guest operating system is shut down gracefully. * `RestartGuestOS` - It can either act as a reset switch and
     * abruptly reset the guest operating system, or it can send a restart signal to the guest operating system so that it
     * shuts down gracefully and restarts. * `Reset` - Resets the virtual machine abruptly, with no consideration for work in
     * progress. * `Restart` - The virtual machine will be restarted only if it is in powered on state. If it is powered off,
     * it will not be started up. * `Unknown` - Power state of the entity is unknown.
     */
    powerState?: pulumi.Input<string>;
    /**
     * Identifies the provision type to create a new virtual machine. * `OVA` - Deploy virtual machine using OVA/F file. *
     * `Template` - Provision virtual machine using a template file. * `Discovered` - A virtual machine was 'discovered' and
     * not created from Intersight. No provisioning information is available.
     */
    provisionType?: pulumi.Input<string>;
    /**
     * A reference to a assetDeviceRegistration resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    registeredDevices?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineRegisteredDevice>[]>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineTag>[]>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineVersionContext>[]>;
    /**
     * Virtual machine configuration to provision.
     */
    vmConfigs?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineVmConfig>[]>;
    /**
     * This model object can trigger workflows. Use this option to wait for all running workflows to reach a complete state.
     */
    waitForCompletion?: pulumi.Input<boolean>;
    /**
     * A reference to a workflowWorkflowInfo resource. When the $expand query parameter is specified, the referenced resource
     * is returned inline.
     */
    workflowInfos?: pulumi.Input<pulumi.Input<inputs.VirtualizationVirtualMachineWorkflowInfo>[]>;
}
