// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageVirtualDriveIdentity(args?: GetStorageVirtualDriveIdentityArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageVirtualDriveIdentityResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageVirtualDriveIdentity:getStorageVirtualDriveIdentity", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "serverProfile": args.serverProfile,
        "sharedScope": args.sharedScope,
        "storagePolicy": args.storagePolicy,
        "tags": args.tags,
        "versionContext": args.versionContext,
        "virtualDrive": args.virtualDrive,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageVirtualDriveIdentity.
 */
export interface GetStorageVirtualDriveIdentityArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageVirtualDriveIdentityAncestor[];
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageVirtualDriveIdentityParent;
    permissionResources?: inputs.GetStorageVirtualDriveIdentityPermissionResource[];
    serverProfile?: inputs.GetStorageVirtualDriveIdentityServerProfile;
    sharedScope?: string;
    storagePolicy?: inputs.GetStorageVirtualDriveIdentityStoragePolicy;
    tags?: inputs.GetStorageVirtualDriveIdentityTag[];
    versionContext?: inputs.GetStorageVirtualDriveIdentityVersionContext;
    virtualDrive?: inputs.GetStorageVirtualDriveIdentityVirtualDrive;
}

/**
 * A collection of values returned by getStorageVirtualDriveIdentity.
 */
export interface GetStorageVirtualDriveIdentityResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageVirtualDriveIdentityAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageVirtualDriveIdentityParent;
    readonly permissionResources?: outputs.GetStorageVirtualDriveIdentityPermissionResource[];
    readonly results: outputs.GetStorageVirtualDriveIdentityResult[];
    readonly serverProfile?: outputs.GetStorageVirtualDriveIdentityServerProfile;
    readonly sharedScope?: string;
    readonly storagePolicy?: outputs.GetStorageVirtualDriveIdentityStoragePolicy;
    readonly tags?: outputs.GetStorageVirtualDriveIdentityTag[];
    readonly versionContext?: outputs.GetStorageVirtualDriveIdentityVersionContext;
    readonly virtualDrive?: outputs.GetStorageVirtualDriveIdentityVirtualDrive;
}
export function getStorageVirtualDriveIdentityOutput(args?: GetStorageVirtualDriveIdentityOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageVirtualDriveIdentityResult> {
    return pulumi.output(args).apply((a: any) => getStorageVirtualDriveIdentity(a, opts))
}

/**
 * A collection of arguments for invoking getStorageVirtualDriveIdentity.
 */
export interface GetStorageVirtualDriveIdentityOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageVirtualDriveIdentityAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageVirtualDriveIdentityParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageVirtualDriveIdentityPermissionResourceArgs>[]>;
    serverProfile?: pulumi.Input<inputs.GetStorageVirtualDriveIdentityServerProfileArgs>;
    sharedScope?: pulumi.Input<string>;
    storagePolicy?: pulumi.Input<inputs.GetStorageVirtualDriveIdentityStoragePolicyArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageVirtualDriveIdentityTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetStorageVirtualDriveIdentityVersionContextArgs>;
    virtualDrive?: pulumi.Input<inputs.GetStorageVirtualDriveIdentityVirtualDriveArgs>;
}
