// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getFabricApplianceRole(args?: GetFabricApplianceRoleArgs, opts?: pulumi.InvokeOptions): Promise<GetFabricApplianceRoleResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getFabricApplianceRole:getFabricApplianceRole", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "adminSpeed": args.adminSpeed,
        "aggregatePortId": args.aggregatePortId,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "ethNetworkControlPolicy": args.ethNetworkControlPolicy,
        "ethNetworkGroupPolicy": args.ethNetworkGroupPolicy,
        "fec": args.fec,
        "flowControlPolicy": args.flowControlPolicy,
        "id": args.id,
        "linkControlPolicy": args.linkControlPolicy,
        "modTime": args.modTime,
        "mode": args.mode,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "portId": args.portId,
        "portPolicy": args.portPolicy,
        "priority": args.priority,
        "sharedScope": args.sharedScope,
        "slotId": args.slotId,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFabricApplianceRole.
 */
export interface GetFabricApplianceRoleArgs {
    accountMoid?: string;
    additionalProperties?: string;
    adminSpeed?: string;
    aggregatePortId?: number;
    ancestors?: inputs.GetFabricApplianceRoleAncestor[];
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    ethNetworkControlPolicy?: inputs.GetFabricApplianceRoleEthNetworkControlPolicy;
    ethNetworkGroupPolicy?: inputs.GetFabricApplianceRoleEthNetworkGroupPolicy;
    fec?: string;
    flowControlPolicy?: inputs.GetFabricApplianceRoleFlowControlPolicy;
    id?: string;
    linkControlPolicy?: inputs.GetFabricApplianceRoleLinkControlPolicy;
    modTime?: string;
    mode?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetFabricApplianceRoleParent;
    permissionResources?: inputs.GetFabricApplianceRolePermissionResource[];
    portId?: number;
    portPolicy?: inputs.GetFabricApplianceRolePortPolicy;
    priority?: string;
    sharedScope?: string;
    slotId?: number;
    tags?: inputs.GetFabricApplianceRoleTag[];
    versionContext?: inputs.GetFabricApplianceRoleVersionContext;
}

/**
 * A collection of values returned by getFabricApplianceRole.
 */
export interface GetFabricApplianceRoleResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly adminSpeed?: string;
    readonly aggregatePortId?: number;
    readonly ancestors?: outputs.GetFabricApplianceRoleAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly ethNetworkControlPolicy?: outputs.GetFabricApplianceRoleEthNetworkControlPolicy;
    readonly ethNetworkGroupPolicy?: outputs.GetFabricApplianceRoleEthNetworkGroupPolicy;
    readonly fec?: string;
    readonly flowControlPolicy?: outputs.GetFabricApplianceRoleFlowControlPolicy;
    readonly id: string;
    readonly linkControlPolicy?: outputs.GetFabricApplianceRoleLinkControlPolicy;
    readonly modTime?: string;
    readonly mode?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetFabricApplianceRoleParent;
    readonly permissionResources?: outputs.GetFabricApplianceRolePermissionResource[];
    readonly portId?: number;
    readonly portPolicy?: outputs.GetFabricApplianceRolePortPolicy;
    readonly priority?: string;
    readonly results: outputs.GetFabricApplianceRoleResult[];
    readonly sharedScope?: string;
    readonly slotId?: number;
    readonly tags?: outputs.GetFabricApplianceRoleTag[];
    readonly versionContext?: outputs.GetFabricApplianceRoleVersionContext;
}
export function getFabricApplianceRoleOutput(args?: GetFabricApplianceRoleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFabricApplianceRoleResult> {
    return pulumi.output(args).apply((a: any) => getFabricApplianceRole(a, opts))
}

/**
 * A collection of arguments for invoking getFabricApplianceRole.
 */
export interface GetFabricApplianceRoleOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    adminSpeed?: pulumi.Input<string>;
    aggregatePortId?: pulumi.Input<number>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetFabricApplianceRoleAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    ethNetworkControlPolicy?: pulumi.Input<inputs.GetFabricApplianceRoleEthNetworkControlPolicyArgs>;
    ethNetworkGroupPolicy?: pulumi.Input<inputs.GetFabricApplianceRoleEthNetworkGroupPolicyArgs>;
    fec?: pulumi.Input<string>;
    flowControlPolicy?: pulumi.Input<inputs.GetFabricApplianceRoleFlowControlPolicyArgs>;
    id?: pulumi.Input<string>;
    linkControlPolicy?: pulumi.Input<inputs.GetFabricApplianceRoleLinkControlPolicyArgs>;
    modTime?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetFabricApplianceRoleParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetFabricApplianceRolePermissionResourceArgs>[]>;
    portId?: pulumi.Input<number>;
    portPolicy?: pulumi.Input<inputs.GetFabricApplianceRolePortPolicyArgs>;
    priority?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    slotId?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetFabricApplianceRoleTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetFabricApplianceRoleVersionContextArgs>;
}
