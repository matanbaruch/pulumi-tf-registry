// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNiatelemetryNiaInventoryFabric(args?: GetNiatelemetryNiaInventoryFabricArgs, opts?: pulumi.InvokeOptions): Promise<GetNiatelemetryNiaInventoryFabricResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getNiatelemetryNiaInventoryFabric:getNiatelemetryNiaInventoryFabric", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "anycastGwMac": args.anycastGwMac,
        "bgpEstablishedInterfaceCount": args.bgpEstablishedInterfaceCount,
        "bgwCount": args.bgwCount,
        "bgwInterfaceUpCount": args.bgwInterfaceUpCount,
        "borderGatewaySpineCount": args.borderGatewaySpineCount,
        "borderLeafCount": args.borderLeafCount,
        "classId": args.classId,
        "cloudsecAutoconfig": args.cloudsecAutoconfig,
        "createTime": args.createTime,
        "dciSubnetRange": args.dciSubnetRange,
        "dciSubnetTargetMask": args.dciSubnetTargetMask,
        "dcnmtrackerEnabled": args.dcnmtrackerEnabled,
        "domainGroupMoid": args.domainGroupMoid,
        "ebgpEvpnLinkUpCount": args.ebgpEvpnLinkUpCount,
        "fabricId": args.fabricId,
        "fabricName": args.fabricName,
        "fabricParent": args.fabricParent,
        "fabricTechnology": args.fabricTechnology,
        "fabricType": args.fabricType,
        "featurePtp": args.featurePtp,
        "id": args.id,
        "isBgwPresent": args.isBgwPresent,
        "isEnableNxapiHttp": args.isEnableNxapiHttp,
        "isEnableRealTimeBackup": args.isEnableRealTimeBackup,
        "isNgoamEnabled": args.isNgoamEnabled,
        "isScheduledBackUpEnabled": args.isScheduledBackUpEnabled,
        "isTrmEnabled": args.isTrmEnabled,
        "leafCount": args.leafCount,
        "linkStateRouting": args.linkStateRouting,
        "linkType": args.linkType,
        "logicalLinks": args.logicalLinks,
        "modTime": args.modTime,
        "moid": args.moid,
        "networkDeploymentCount": args.networkDeploymentCount,
        "networkDeploymentStatuses": args.networkDeploymentStatuses,
        "ntpServerIpList": args.ntpServerIpList,
        "nxosVniBwSitesCount": args.nxosVniBwSitesCount,
        "nxosVrfBwSitesCount": args.nxosVrfBwSitesCount,
        "nxosVrfCount": args.nxosVrfCount,
        "objectType": args.objectType,
        "operStatus": args.operStatus,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "recordType": args.recordType,
        "recordVersion": args.recordVersion,
        "registeredDevice": args.registeredDevice,
        "replicationMode": args.replicationMode,
        "rpMode": args.rpMode,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "siteName": args.siteName,
        "softwareImage": args.softwareImage,
        "spineCount": args.spineCount,
        "syslogServerIpList": args.syslogServerIpList,
        "syslogSev": args.syslogSev,
        "tags": args.tags,
        "templateName": args.templateName,
        "versionContext": args.versionContext,
        "vlanVniMappings": args.vlanVniMappings,
        "vniIpCount": args.vniIpCount,
        "vpcDetails": args.vpcDetails,
        "vrfDeploymentCount": args.vrfDeploymentCount,
        "vrfDeploymentStatuses": args.vrfDeploymentStatuses,
        "xsiteNetworkCount": args.xsiteNetworkCount,
        "xsiteVrfCount": args.xsiteVrfCount,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNiatelemetryNiaInventoryFabric.
 */
export interface GetNiatelemetryNiaInventoryFabricArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetNiatelemetryNiaInventoryFabricAncestor[];
    anycastGwMac?: string;
    bgpEstablishedInterfaceCount?: number;
    bgwCount?: number;
    bgwInterfaceUpCount?: number;
    borderGatewaySpineCount?: number;
    borderLeafCount?: number;
    classId?: string;
    cloudsecAutoconfig?: boolean;
    createTime?: string;
    dciSubnetRange?: string;
    dciSubnetTargetMask?: string;
    dcnmtrackerEnabled?: boolean;
    domainGroupMoid?: string;
    ebgpEvpnLinkUpCount?: number;
    fabricId?: string;
    fabricName?: string;
    fabricParent?: string;
    fabricTechnology?: string;
    fabricType?: string;
    featurePtp?: string;
    id?: string;
    isBgwPresent?: boolean;
    isEnableNxapiHttp?: boolean;
    isEnableRealTimeBackup?: boolean;
    isNgoamEnabled?: boolean;
    isScheduledBackUpEnabled?: boolean;
    isTrmEnabled?: boolean;
    leafCount?: number;
    linkStateRouting?: string;
    linkType?: string;
    logicalLinks?: inputs.GetNiatelemetryNiaInventoryFabricLogicalLink[];
    modTime?: string;
    moid?: string;
    networkDeploymentCount?: number;
    networkDeploymentStatuses?: inputs.GetNiatelemetryNiaInventoryFabricNetworkDeploymentStatus[];
    ntpServerIpList?: string;
    nxosVniBwSitesCount?: number;
    nxosVrfBwSitesCount?: number;
    nxosVrfCount?: number;
    objectType?: string;
    operStatus?: string;
    owners?: string[];
    parent?: inputs.GetNiatelemetryNiaInventoryFabricParent;
    permissionResources?: inputs.GetNiatelemetryNiaInventoryFabricPermissionResource[];
    recordType?: string;
    recordVersion?: string;
    registeredDevice?: inputs.GetNiatelemetryNiaInventoryFabricRegisteredDevice;
    replicationMode?: string;
    rpMode?: string;
    serial?: string;
    sharedScope?: string;
    siteName?: string;
    softwareImage?: string;
    spineCount?: number;
    syslogServerIpList?: string;
    syslogSev?: string;
    tags?: inputs.GetNiatelemetryNiaInventoryFabricTag[];
    templateName?: string;
    versionContext?: inputs.GetNiatelemetryNiaInventoryFabricVersionContext;
    vlanVniMappings?: string;
    vniIpCount?: number;
    vpcDetails?: inputs.GetNiatelemetryNiaInventoryFabricVpcDetail[];
    vrfDeploymentCount?: number;
    vrfDeploymentStatuses?: inputs.GetNiatelemetryNiaInventoryFabricVrfDeploymentStatus[];
    xsiteNetworkCount?: number;
    xsiteVrfCount?: number;
}

/**
 * A collection of values returned by getNiatelemetryNiaInventoryFabric.
 */
export interface GetNiatelemetryNiaInventoryFabricResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetNiatelemetryNiaInventoryFabricAncestor[];
    readonly anycastGwMac?: string;
    readonly bgpEstablishedInterfaceCount?: number;
    readonly bgwCount?: number;
    readonly bgwInterfaceUpCount?: number;
    readonly borderGatewaySpineCount?: number;
    readonly borderLeafCount?: number;
    readonly classId?: string;
    readonly cloudsecAutoconfig?: boolean;
    readonly createTime?: string;
    readonly dciSubnetRange?: string;
    readonly dciSubnetTargetMask?: string;
    readonly dcnmtrackerEnabled?: boolean;
    readonly domainGroupMoid?: string;
    readonly ebgpEvpnLinkUpCount?: number;
    readonly fabricId?: string;
    readonly fabricName?: string;
    readonly fabricParent?: string;
    readonly fabricTechnology?: string;
    readonly fabricType?: string;
    readonly featurePtp?: string;
    readonly id: string;
    readonly isBgwPresent?: boolean;
    readonly isEnableNxapiHttp?: boolean;
    readonly isEnableRealTimeBackup?: boolean;
    readonly isNgoamEnabled?: boolean;
    readonly isScheduledBackUpEnabled?: boolean;
    readonly isTrmEnabled?: boolean;
    readonly leafCount?: number;
    readonly linkStateRouting?: string;
    readonly linkType?: string;
    readonly logicalLinks?: outputs.GetNiatelemetryNiaInventoryFabricLogicalLink[];
    readonly modTime?: string;
    readonly moid?: string;
    readonly networkDeploymentCount?: number;
    readonly networkDeploymentStatuses?: outputs.GetNiatelemetryNiaInventoryFabricNetworkDeploymentStatus[];
    readonly ntpServerIpList?: string;
    readonly nxosVniBwSitesCount?: number;
    readonly nxosVrfBwSitesCount?: number;
    readonly nxosVrfCount?: number;
    readonly objectType?: string;
    readonly operStatus?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetNiatelemetryNiaInventoryFabricParent;
    readonly permissionResources?: outputs.GetNiatelemetryNiaInventoryFabricPermissionResource[];
    readonly recordType?: string;
    readonly recordVersion?: string;
    readonly registeredDevice?: outputs.GetNiatelemetryNiaInventoryFabricRegisteredDevice;
    readonly replicationMode?: string;
    readonly results: outputs.GetNiatelemetryNiaInventoryFabricResult[];
    readonly rpMode?: string;
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly siteName?: string;
    readonly softwareImage?: string;
    readonly spineCount?: number;
    readonly syslogServerIpList?: string;
    readonly syslogSev?: string;
    readonly tags?: outputs.GetNiatelemetryNiaInventoryFabricTag[];
    readonly templateName?: string;
    readonly versionContext?: outputs.GetNiatelemetryNiaInventoryFabricVersionContext;
    readonly vlanVniMappings?: string;
    readonly vniIpCount?: number;
    readonly vpcDetails?: outputs.GetNiatelemetryNiaInventoryFabricVpcDetail[];
    readonly vrfDeploymentCount?: number;
    readonly vrfDeploymentStatuses?: outputs.GetNiatelemetryNiaInventoryFabricVrfDeploymentStatus[];
    readonly xsiteNetworkCount?: number;
    readonly xsiteVrfCount?: number;
}
export function getNiatelemetryNiaInventoryFabricOutput(args?: GetNiatelemetryNiaInventoryFabricOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNiatelemetryNiaInventoryFabricResult> {
    return pulumi.output(args).apply((a: any) => getNiatelemetryNiaInventoryFabric(a, opts))
}

/**
 * A collection of arguments for invoking getNiatelemetryNiaInventoryFabric.
 */
export interface GetNiatelemetryNiaInventoryFabricOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryNiaInventoryFabricAncestorArgs>[]>;
    anycastGwMac?: pulumi.Input<string>;
    bgpEstablishedInterfaceCount?: pulumi.Input<number>;
    bgwCount?: pulumi.Input<number>;
    bgwInterfaceUpCount?: pulumi.Input<number>;
    borderGatewaySpineCount?: pulumi.Input<number>;
    borderLeafCount?: pulumi.Input<number>;
    classId?: pulumi.Input<string>;
    cloudsecAutoconfig?: pulumi.Input<boolean>;
    createTime?: pulumi.Input<string>;
    dciSubnetRange?: pulumi.Input<string>;
    dciSubnetTargetMask?: pulumi.Input<string>;
    dcnmtrackerEnabled?: pulumi.Input<boolean>;
    domainGroupMoid?: pulumi.Input<string>;
    ebgpEvpnLinkUpCount?: pulumi.Input<number>;
    fabricId?: pulumi.Input<string>;
    fabricName?: pulumi.Input<string>;
    fabricParent?: pulumi.Input<string>;
    fabricTechnology?: pulumi.Input<string>;
    fabricType?: pulumi.Input<string>;
    featurePtp?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    isBgwPresent?: pulumi.Input<boolean>;
    isEnableNxapiHttp?: pulumi.Input<boolean>;
    isEnableRealTimeBackup?: pulumi.Input<boolean>;
    isNgoamEnabled?: pulumi.Input<boolean>;
    isScheduledBackUpEnabled?: pulumi.Input<boolean>;
    isTrmEnabled?: pulumi.Input<boolean>;
    leafCount?: pulumi.Input<number>;
    linkStateRouting?: pulumi.Input<string>;
    linkType?: pulumi.Input<string>;
    logicalLinks?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryNiaInventoryFabricLogicalLinkArgs>[]>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    networkDeploymentCount?: pulumi.Input<number>;
    networkDeploymentStatuses?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryNiaInventoryFabricNetworkDeploymentStatusArgs>[]>;
    ntpServerIpList?: pulumi.Input<string>;
    nxosVniBwSitesCount?: pulumi.Input<number>;
    nxosVrfBwSitesCount?: pulumi.Input<number>;
    nxosVrfCount?: pulumi.Input<number>;
    objectType?: pulumi.Input<string>;
    operStatus?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetNiatelemetryNiaInventoryFabricParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryNiaInventoryFabricPermissionResourceArgs>[]>;
    recordType?: pulumi.Input<string>;
    recordVersion?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetNiatelemetryNiaInventoryFabricRegisteredDeviceArgs>;
    replicationMode?: pulumi.Input<string>;
    rpMode?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    siteName?: pulumi.Input<string>;
    softwareImage?: pulumi.Input<string>;
    spineCount?: pulumi.Input<number>;
    syslogServerIpList?: pulumi.Input<string>;
    syslogSev?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryNiaInventoryFabricTagArgs>[]>;
    templateName?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetNiatelemetryNiaInventoryFabricVersionContextArgs>;
    vlanVniMappings?: pulumi.Input<string>;
    vniIpCount?: pulumi.Input<number>;
    vpcDetails?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryNiaInventoryFabricVpcDetailArgs>[]>;
    vrfDeploymentCount?: pulumi.Input<number>;
    vrfDeploymentStatuses?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryNiaInventoryFabricVrfDeploymentStatusArgs>[]>;
    xsiteNetworkCount?: pulumi.Input<number>;
    xsiteVrfCount?: pulumi.Input<number>;
}
