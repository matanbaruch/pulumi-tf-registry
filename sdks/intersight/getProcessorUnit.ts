// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getProcessorUnit(args?: GetProcessorUnitArgs, opts?: pulumi.InvokeOptions): Promise<GetProcessorUnitResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getProcessorUnit:getProcessorUnit", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "architecture": args.architecture,
        "classId": args.classId,
        "computeBlade": args.computeBlade,
        "computeBoard": args.computeBoard,
        "computeRackUnit": args.computeRackUnit,
        "createTime": args.createTime,
        "description": args.description,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "isPlatformSupported": args.isPlatformSupported,
        "isUpgraded": args.isUpgraded,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "networkElement": args.networkElement,
        "numCores": args.numCores,
        "numCoresEnabled": args.numCoresEnabled,
        "numThreads": args.numThreads,
        "objectType": args.objectType,
        "operPowerState": args.operPowerState,
        "operReasons": args.operReasons,
        "operState": args.operState,
        "operability": args.operability,
        "owners": args.owners,
        "parent": args.parent,
        "partNumber": args.partNumber,
        "permissionResources": args.permissionResources,
        "pid": args.pid,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "processorId": args.processorId,
        "registeredDevice": args.registeredDevice,
        "revision": args.revision,
        "rn": args.rn,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "socketDesignation": args.socketDesignation,
        "speed": args.speed,
        "stepping": args.stepping,
        "tags": args.tags,
        "thermal": args.thermal,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getProcessorUnit.
 */
export interface GetProcessorUnitArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetProcessorUnitAncestor[];
    architecture?: string;
    classId?: string;
    computeBlade?: inputs.GetProcessorUnitComputeBlade;
    computeBoard?: inputs.GetProcessorUnitComputeBoard;
    computeRackUnit?: inputs.GetProcessorUnitComputeRackUnit;
    createTime?: string;
    description?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    id?: string;
    inventoryDeviceInfo?: inputs.GetProcessorUnitInventoryDeviceInfo;
    isPlatformSupported?: boolean;
    isUpgraded?: boolean;
    modTime?: string;
    model?: string;
    moid?: string;
    networkElement?: inputs.GetProcessorUnitNetworkElement;
    numCores?: number;
    numCoresEnabled?: string;
    numThreads?: string;
    objectType?: string;
    operPowerState?: string;
    operReasons?: string[];
    operState?: string;
    operability?: string;
    owners?: string[];
    parent?: inputs.GetProcessorUnitParent;
    partNumber?: string;
    permissionResources?: inputs.GetProcessorUnitPermissionResource[];
    pid?: string;
    presence?: string;
    previousFru?: inputs.GetProcessorUnitPreviousFru;
    processorId?: number;
    registeredDevice?: inputs.GetProcessorUnitRegisteredDevice;
    revision?: string;
    rn?: string;
    serial?: string;
    sharedScope?: string;
    socketDesignation?: string;
    speed?: number;
    stepping?: string;
    tags?: inputs.GetProcessorUnitTag[];
    thermal?: string;
    vendor?: string;
    versionContext?: inputs.GetProcessorUnitVersionContext;
}

/**
 * A collection of values returned by getProcessorUnit.
 */
export interface GetProcessorUnitResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetProcessorUnitAncestor[];
    readonly architecture?: string;
    readonly classId?: string;
    readonly computeBlade?: outputs.GetProcessorUnitComputeBlade;
    readonly computeBoard?: outputs.GetProcessorUnitComputeBoard;
    readonly computeRackUnit?: outputs.GetProcessorUnitComputeRackUnit;
    readonly createTime?: string;
    readonly description?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetProcessorUnitInventoryDeviceInfo;
    readonly isPlatformSupported?: boolean;
    readonly isUpgraded?: boolean;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly networkElement?: outputs.GetProcessorUnitNetworkElement;
    readonly numCores?: number;
    readonly numCoresEnabled?: string;
    readonly numThreads?: string;
    readonly objectType?: string;
    readonly operPowerState?: string;
    readonly operReasons?: string[];
    readonly operState?: string;
    readonly operability?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetProcessorUnitParent;
    readonly partNumber?: string;
    readonly permissionResources?: outputs.GetProcessorUnitPermissionResource[];
    readonly pid?: string;
    readonly presence?: string;
    readonly previousFru?: outputs.GetProcessorUnitPreviousFru;
    readonly processorId?: number;
    readonly registeredDevice?: outputs.GetProcessorUnitRegisteredDevice;
    readonly results: outputs.GetProcessorUnitResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly socketDesignation?: string;
    readonly speed?: number;
    readonly stepping?: string;
    readonly tags?: outputs.GetProcessorUnitTag[];
    readonly thermal?: string;
    readonly vendor?: string;
    readonly versionContext?: outputs.GetProcessorUnitVersionContext;
}
export function getProcessorUnitOutput(args?: GetProcessorUnitOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetProcessorUnitResult> {
    return pulumi.output(args).apply((a: any) => getProcessorUnit(a, opts))
}

/**
 * A collection of arguments for invoking getProcessorUnit.
 */
export interface GetProcessorUnitOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetProcessorUnitAncestorArgs>[]>;
    architecture?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    computeBlade?: pulumi.Input<inputs.GetProcessorUnitComputeBladeArgs>;
    computeBoard?: pulumi.Input<inputs.GetProcessorUnitComputeBoardArgs>;
    computeRackUnit?: pulumi.Input<inputs.GetProcessorUnitComputeRackUnitArgs>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetProcessorUnitInventoryDeviceInfoArgs>;
    isPlatformSupported?: pulumi.Input<boolean>;
    isUpgraded?: pulumi.Input<boolean>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    networkElement?: pulumi.Input<inputs.GetProcessorUnitNetworkElementArgs>;
    numCores?: pulumi.Input<number>;
    numCoresEnabled?: pulumi.Input<string>;
    numThreads?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operPowerState?: pulumi.Input<string>;
    operReasons?: pulumi.Input<pulumi.Input<string>[]>;
    operState?: pulumi.Input<string>;
    operability?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetProcessorUnitParentArgs>;
    partNumber?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetProcessorUnitPermissionResourceArgs>[]>;
    pid?: pulumi.Input<string>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetProcessorUnitPreviousFruArgs>;
    processorId?: pulumi.Input<number>;
    registeredDevice?: pulumi.Input<inputs.GetProcessorUnitRegisteredDeviceArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    socketDesignation?: pulumi.Input<string>;
    speed?: pulumi.Input<number>;
    stepping?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetProcessorUnitTagArgs>[]>;
    thermal?: pulumi.Input<string>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetProcessorUnitVersionContextArgs>;
}
