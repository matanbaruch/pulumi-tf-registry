// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageVdMemberEp(args?: GetStorageVdMemberEpArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageVdMemberEpResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageVdMemberEp:getStorageVdMemberEp", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "operQualifierReason": args.operQualifierReason,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "presence": args.presence,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "role": args.role,
        "sharedScope": args.sharedScope,
        "spanId": args.spanId,
        "storageVirtualDrive": args.storageVirtualDrive,
        "tags": args.tags,
        "vdMemberEpId": args.vdMemberEpId,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageVdMemberEp.
 */
export interface GetStorageVdMemberEpArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageVdMemberEpAncestor[];
    classId?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    id?: string;
    inventoryDeviceInfo?: inputs.GetStorageVdMemberEpInventoryDeviceInfo;
    modTime?: string;
    moid?: string;
    objectType?: string;
    operQualifierReason?: string;
    owners?: string[];
    parent?: inputs.GetStorageVdMemberEpParent;
    permissionResources?: inputs.GetStorageVdMemberEpPermissionResource[];
    presence?: string;
    registeredDevice?: inputs.GetStorageVdMemberEpRegisteredDevice;
    rn?: string;
    role?: string;
    sharedScope?: string;
    spanId?: string;
    storageVirtualDrive?: inputs.GetStorageVdMemberEpStorageVirtualDrive;
    tags?: inputs.GetStorageVdMemberEpTag[];
    vdMemberEpId?: number;
    versionContext?: inputs.GetStorageVdMemberEpVersionContext;
}

/**
 * A collection of values returned by getStorageVdMemberEp.
 */
export interface GetStorageVdMemberEpResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageVdMemberEpAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetStorageVdMemberEpInventoryDeviceInfo;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly operQualifierReason?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageVdMemberEpParent;
    readonly permissionResources?: outputs.GetStorageVdMemberEpPermissionResource[];
    readonly presence?: string;
    readonly registeredDevice?: outputs.GetStorageVdMemberEpRegisteredDevice;
    readonly results: outputs.GetStorageVdMemberEpResult[];
    readonly rn?: string;
    readonly role?: string;
    readonly sharedScope?: string;
    readonly spanId?: string;
    readonly storageVirtualDrive?: outputs.GetStorageVdMemberEpStorageVirtualDrive;
    readonly tags?: outputs.GetStorageVdMemberEpTag[];
    readonly vdMemberEpId?: number;
    readonly versionContext?: outputs.GetStorageVdMemberEpVersionContext;
}
export function getStorageVdMemberEpOutput(args?: GetStorageVdMemberEpOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageVdMemberEpResult> {
    return pulumi.output(args).apply((a: any) => getStorageVdMemberEp(a, opts))
}

/**
 * A collection of arguments for invoking getStorageVdMemberEp.
 */
export interface GetStorageVdMemberEpOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageVdMemberEpAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetStorageVdMemberEpInventoryDeviceInfoArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operQualifierReason?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageVdMemberEpParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageVdMemberEpPermissionResourceArgs>[]>;
    presence?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetStorageVdMemberEpRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    spanId?: pulumi.Input<string>;
    storageVirtualDrive?: pulumi.Input<inputs.GetStorageVdMemberEpStorageVirtualDriveArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageVdMemberEpTagArgs>[]>;
    vdMemberEpId?: pulumi.Input<number>;
    versionContext?: pulumi.Input<inputs.GetStorageVdMemberEpVersionContextArgs>;
}
