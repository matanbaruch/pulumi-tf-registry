// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCapabilityAdapterFirmwareRequirement(args?: GetCapabilityAdapterFirmwareRequirementArgs, opts?: pulumi.InvokeOptions): Promise<GetCapabilityAdapterFirmwareRequirementResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getCapabilityAdapterFirmwareRequirement:getCapabilityAdapterFirmwareRequirement", {
        "accountMoid": args.accountMoid,
        "adapterSeries": args.adapterSeries,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "ignoreEmptyCurrentVersion": args.ignoreEmptyCurrentVersion,
        "minimumAdapterVersion": args.minimumAdapterVersion,
        "minimumBmcVersion": args.minimumBmcVersion,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "recommendedBmcVersion": args.recommendedBmcVersion,
        "sharedScope": args.sharedScope,
        "supportedModels": args.supportedModels,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCapabilityAdapterFirmwareRequirement.
 */
export interface GetCapabilityAdapterFirmwareRequirementArgs {
    accountMoid?: string;
    adapterSeries?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetCapabilityAdapterFirmwareRequirementAncestor[];
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    id?: string;
    ignoreEmptyCurrentVersion?: boolean;
    minimumAdapterVersion?: string;
    minimumBmcVersion?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetCapabilityAdapterFirmwareRequirementParent;
    permissionResources?: inputs.GetCapabilityAdapterFirmwareRequirementPermissionResource[];
    recommendedBmcVersion?: string;
    sharedScope?: string;
    supportedModels?: string[];
    tags?: inputs.GetCapabilityAdapterFirmwareRequirementTag[];
    versionContext?: inputs.GetCapabilityAdapterFirmwareRequirementVersionContext;
}

/**
 * A collection of values returned by getCapabilityAdapterFirmwareRequirement.
 */
export interface GetCapabilityAdapterFirmwareRequirementResult {
    readonly accountMoid?: string;
    readonly adapterSeries?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetCapabilityAdapterFirmwareRequirementAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly ignoreEmptyCurrentVersion?: boolean;
    readonly minimumAdapterVersion?: string;
    readonly minimumBmcVersion?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetCapabilityAdapterFirmwareRequirementParent;
    readonly permissionResources?: outputs.GetCapabilityAdapterFirmwareRequirementPermissionResource[];
    readonly recommendedBmcVersion?: string;
    readonly results: outputs.GetCapabilityAdapterFirmwareRequirementResult[];
    readonly sharedScope?: string;
    readonly supportedModels?: string[];
    readonly tags?: outputs.GetCapabilityAdapterFirmwareRequirementTag[];
    readonly versionContext?: outputs.GetCapabilityAdapterFirmwareRequirementVersionContext;
}
export function getCapabilityAdapterFirmwareRequirementOutput(args?: GetCapabilityAdapterFirmwareRequirementOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCapabilityAdapterFirmwareRequirementResult> {
    return pulumi.output(args).apply((a: any) => getCapabilityAdapterFirmwareRequirement(a, opts))
}

/**
 * A collection of arguments for invoking getCapabilityAdapterFirmwareRequirement.
 */
export interface GetCapabilityAdapterFirmwareRequirementOutputArgs {
    accountMoid?: pulumi.Input<string>;
    adapterSeries?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetCapabilityAdapterFirmwareRequirementAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ignoreEmptyCurrentVersion?: pulumi.Input<boolean>;
    minimumAdapterVersion?: pulumi.Input<string>;
    minimumBmcVersion?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetCapabilityAdapterFirmwareRequirementParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetCapabilityAdapterFirmwareRequirementPermissionResourceArgs>[]>;
    recommendedBmcVersion?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    supportedModels?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetCapabilityAdapterFirmwareRequirementTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetCapabilityAdapterFirmwareRequirementVersionContextArgs>;
}
