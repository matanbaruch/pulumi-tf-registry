// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLicenseLicenseInfo(args?: GetLicenseLicenseInfoArgs, opts?: pulumi.InvokeOptions): Promise<GetLicenseLicenseInfoResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getLicenseLicenseInfo:getLicenseLicenseInfo", {
        "accountLicenseData": args.accountLicenseData,
        "accountMoid": args.accountMoid,
        "activeAdmin": args.activeAdmin,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "balance": args.balance,
        "classId": args.classId,
        "createTime": args.createTime,
        "daysLeft": args.daysLeft,
        "domainGroupMoid": args.domainGroupMoid,
        "endTime": args.endTime,
        "enforceMode": args.enforceMode,
        "errorDesc": args.errorDesc,
        "evaluationPeriod": args.evaluationPeriod,
        "expireTime": args.expireTime,
        "extraEvaluation": args.extraEvaluation,
        "id": args.id,
        "licenseCount": args.licenseCount,
        "licenseCountPurchased": args.licenseCountPurchased,
        "licenseState": args.licenseState,
        "licenseType": args.licenseType,
        "modTime": args.modTime,
        "moid": args.moid,
        "netSubstitution": args.netSubstitution,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "sharedScope": args.sharedScope,
        "startTime": args.startTime,
        "subscriptionId": args.subscriptionId,
        "substitutedLicenses": args.substitutedLicenses,
        "tags": args.tags,
        "trialAdmin": args.trialAdmin,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLicenseLicenseInfo.
 */
export interface GetLicenseLicenseInfoArgs {
    accountLicenseData?: inputs.GetLicenseLicenseInfoAccountLicenseData;
    accountMoid?: string;
    activeAdmin?: boolean;
    additionalProperties?: string;
    ancestors?: inputs.GetLicenseLicenseInfoAncestor[];
    balance?: number;
    classId?: string;
    createTime?: string;
    daysLeft?: number;
    domainGroupMoid?: string;
    endTime?: string;
    enforceMode?: string;
    errorDesc?: string;
    evaluationPeriod?: number;
    expireTime?: string;
    extraEvaluation?: number;
    id?: string;
    licenseCount?: number;
    licenseCountPurchased?: number;
    licenseState?: string;
    licenseType?: string;
    modTime?: string;
    moid?: string;
    netSubstitution?: number;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetLicenseLicenseInfoParent;
    permissionResources?: inputs.GetLicenseLicenseInfoPermissionResource[];
    sharedScope?: string;
    startTime?: string;
    subscriptionId?: string;
    substitutedLicenses?: inputs.GetLicenseLicenseInfoSubstitutedLicense[];
    tags?: inputs.GetLicenseLicenseInfoTag[];
    trialAdmin?: boolean;
    versionContext?: inputs.GetLicenseLicenseInfoVersionContext;
}

/**
 * A collection of values returned by getLicenseLicenseInfo.
 */
export interface GetLicenseLicenseInfoResult {
    readonly accountLicenseData?: outputs.GetLicenseLicenseInfoAccountLicenseData;
    readonly accountMoid?: string;
    readonly activeAdmin?: boolean;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetLicenseLicenseInfoAncestor[];
    readonly balance?: number;
    readonly classId?: string;
    readonly createTime?: string;
    readonly daysLeft?: number;
    readonly domainGroupMoid?: string;
    readonly endTime?: string;
    readonly enforceMode?: string;
    readonly errorDesc?: string;
    readonly evaluationPeriod?: number;
    readonly expireTime?: string;
    readonly extraEvaluation?: number;
    readonly id: string;
    readonly licenseCount?: number;
    readonly licenseCountPurchased?: number;
    readonly licenseState?: string;
    readonly licenseType?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly netSubstitution?: number;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetLicenseLicenseInfoParent;
    readonly permissionResources?: outputs.GetLicenseLicenseInfoPermissionResource[];
    readonly results: outputs.GetLicenseLicenseInfoResult[];
    readonly sharedScope?: string;
    readonly startTime?: string;
    readonly subscriptionId?: string;
    readonly substitutedLicenses?: outputs.GetLicenseLicenseInfoSubstitutedLicense[];
    readonly tags?: outputs.GetLicenseLicenseInfoTag[];
    readonly trialAdmin?: boolean;
    readonly versionContext?: outputs.GetLicenseLicenseInfoVersionContext;
}
export function getLicenseLicenseInfoOutput(args?: GetLicenseLicenseInfoOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLicenseLicenseInfoResult> {
    return pulumi.output(args).apply((a: any) => getLicenseLicenseInfo(a, opts))
}

/**
 * A collection of arguments for invoking getLicenseLicenseInfo.
 */
export interface GetLicenseLicenseInfoOutputArgs {
    accountLicenseData?: pulumi.Input<inputs.GetLicenseLicenseInfoAccountLicenseDataArgs>;
    accountMoid?: pulumi.Input<string>;
    activeAdmin?: pulumi.Input<boolean>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetLicenseLicenseInfoAncestorArgs>[]>;
    balance?: pulumi.Input<number>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    daysLeft?: pulumi.Input<number>;
    domainGroupMoid?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    enforceMode?: pulumi.Input<string>;
    errorDesc?: pulumi.Input<string>;
    evaluationPeriod?: pulumi.Input<number>;
    expireTime?: pulumi.Input<string>;
    extraEvaluation?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    licenseCount?: pulumi.Input<number>;
    licenseCountPurchased?: pulumi.Input<number>;
    licenseState?: pulumi.Input<string>;
    licenseType?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    netSubstitution?: pulumi.Input<number>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetLicenseLicenseInfoParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetLicenseLicenseInfoPermissionResourceArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    subscriptionId?: pulumi.Input<string>;
    substitutedLicenses?: pulumi.Input<pulumi.Input<inputs.GetLicenseLicenseInfoSubstitutedLicenseArgs>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetLicenseLicenseInfoTagArgs>[]>;
    trialAdmin?: pulumi.Input<boolean>;
    versionContext?: pulumi.Input<inputs.GetLicenseLicenseInfoVersionContextArgs>;
}
