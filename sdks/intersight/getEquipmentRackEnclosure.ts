// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEquipmentRackEnclosure(args?: GetEquipmentRackEnclosureArgs, opts?: pulumi.InvokeOptions): Promise<GetEquipmentRackEnclosureResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getEquipmentRackEnclosure:getEquipmentRackEnclosure", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "enclosureId": args.enclosureId,
        "fanmodules": args.fanmodules,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "isUpgraded": args.isUpgraded,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "psuses": args.psuses,
        "registeredDevice": args.registeredDevice,
        "revision": args.revision,
        "rn": args.rn,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "slots": args.slots,
        "tags": args.tags,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEquipmentRackEnclosure.
 */
export interface GetEquipmentRackEnclosureArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetEquipmentRackEnclosureAncestor[];
    classId?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    enclosureId?: number;
    fanmodules?: inputs.GetEquipmentRackEnclosureFanmodule[];
    id?: string;
    inventoryDeviceInfo?: inputs.GetEquipmentRackEnclosureInventoryDeviceInfo;
    isUpgraded?: boolean;
    modTime?: string;
    model?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetEquipmentRackEnclosureParent;
    permissionResources?: inputs.GetEquipmentRackEnclosurePermissionResource[];
    presence?: string;
    previousFru?: inputs.GetEquipmentRackEnclosurePreviousFru;
    psuses?: inputs.GetEquipmentRackEnclosurePsus[];
    registeredDevice?: inputs.GetEquipmentRackEnclosureRegisteredDevice;
    revision?: string;
    rn?: string;
    serial?: string;
    sharedScope?: string;
    slots?: inputs.GetEquipmentRackEnclosureSlot[];
    tags?: inputs.GetEquipmentRackEnclosureTag[];
    vendor?: string;
    versionContext?: inputs.GetEquipmentRackEnclosureVersionContext;
}

/**
 * A collection of values returned by getEquipmentRackEnclosure.
 */
export interface GetEquipmentRackEnclosureResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetEquipmentRackEnclosureAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly enclosureId?: number;
    readonly fanmodules?: outputs.GetEquipmentRackEnclosureFanmodule[];
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetEquipmentRackEnclosureInventoryDeviceInfo;
    readonly isUpgraded?: boolean;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetEquipmentRackEnclosureParent;
    readonly permissionResources?: outputs.GetEquipmentRackEnclosurePermissionResource[];
    readonly presence?: string;
    readonly previousFru?: outputs.GetEquipmentRackEnclosurePreviousFru;
    readonly psuses?: outputs.GetEquipmentRackEnclosurePsus[];
    readonly registeredDevice?: outputs.GetEquipmentRackEnclosureRegisteredDevice;
    readonly results: outputs.GetEquipmentRackEnclosureResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly slots?: outputs.GetEquipmentRackEnclosureSlot[];
    readonly tags?: outputs.GetEquipmentRackEnclosureTag[];
    readonly vendor?: string;
    readonly versionContext?: outputs.GetEquipmentRackEnclosureVersionContext;
}
export function getEquipmentRackEnclosureOutput(args?: GetEquipmentRackEnclosureOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEquipmentRackEnclosureResult> {
    return pulumi.output(args).apply((a: any) => getEquipmentRackEnclosure(a, opts))
}

/**
 * A collection of arguments for invoking getEquipmentRackEnclosure.
 */
export interface GetEquipmentRackEnclosureOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetEquipmentRackEnclosureAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    enclosureId?: pulumi.Input<number>;
    fanmodules?: pulumi.Input<pulumi.Input<inputs.GetEquipmentRackEnclosureFanmoduleArgs>[]>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetEquipmentRackEnclosureInventoryDeviceInfoArgs>;
    isUpgraded?: pulumi.Input<boolean>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetEquipmentRackEnclosureParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetEquipmentRackEnclosurePermissionResourceArgs>[]>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetEquipmentRackEnclosurePreviousFruArgs>;
    psuses?: pulumi.Input<pulumi.Input<inputs.GetEquipmentRackEnclosurePsusArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetEquipmentRackEnclosureRegisteredDeviceArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    slots?: pulumi.Input<pulumi.Input<inputs.GetEquipmentRackEnclosureSlotArgs>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetEquipmentRackEnclosureTagArgs>[]>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetEquipmentRackEnclosureVersionContextArgs>;
}
