// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRecommendationCapacityRunway(args?: GetRecommendationCapacityRunwayArgs, opts?: pulumi.InvokeOptions): Promise<GetRecommendationCapacityRunwayResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getRecommendationCapacityRunway:getRecommendationCapacityRunway", {
        "accountMoid": args.accountMoid,
        "additionalCapacity": args.additionalCapacity,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "forecastInstance": args.forecastInstance,
        "id": args.id,
        "lastUpdatedTime": args.lastUpdatedTime,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "period": args.period,
        "permissionResources": args.permissionResources,
        "physicalItems": args.physicalItems,
        "registeredDevice": args.registeredDevice,
        "requirementMet": args.requirementMet,
        "runway": args.runway,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "totalCapacity": args.totalCapacity,
        "unit": args.unit,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRecommendationCapacityRunway.
 */
export interface GetRecommendationCapacityRunwayArgs {
    accountMoid?: string;
    additionalCapacity?: number;
    additionalProperties?: string;
    ancestors?: inputs.GetRecommendationCapacityRunwayAncestor[];
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    forecastInstance?: inputs.GetRecommendationCapacityRunwayForecastInstance;
    id?: string;
    lastUpdatedTime?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetRecommendationCapacityRunwayParent;
    period?: number;
    permissionResources?: inputs.GetRecommendationCapacityRunwayPermissionResource[];
    physicalItems?: inputs.GetRecommendationCapacityRunwayPhysicalItem[];
    registeredDevice?: inputs.GetRecommendationCapacityRunwayRegisteredDevice;
    requirementMet?: boolean;
    runway?: number;
    sharedScope?: string;
    tags?: inputs.GetRecommendationCapacityRunwayTag[];
    totalCapacity?: number;
    unit?: string;
    versionContext?: inputs.GetRecommendationCapacityRunwayVersionContext;
}

/**
 * A collection of values returned by getRecommendationCapacityRunway.
 */
export interface GetRecommendationCapacityRunwayResult {
    readonly accountMoid?: string;
    readonly additionalCapacity?: number;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetRecommendationCapacityRunwayAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly forecastInstance?: outputs.GetRecommendationCapacityRunwayForecastInstance;
    readonly id: string;
    readonly lastUpdatedTime?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetRecommendationCapacityRunwayParent;
    readonly period?: number;
    readonly permissionResources?: outputs.GetRecommendationCapacityRunwayPermissionResource[];
    readonly physicalItems?: outputs.GetRecommendationCapacityRunwayPhysicalItem[];
    readonly registeredDevice?: outputs.GetRecommendationCapacityRunwayRegisteredDevice;
    readonly requirementMet?: boolean;
    readonly results: outputs.GetRecommendationCapacityRunwayResult[];
    readonly runway?: number;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetRecommendationCapacityRunwayTag[];
    readonly totalCapacity?: number;
    readonly unit?: string;
    readonly versionContext?: outputs.GetRecommendationCapacityRunwayVersionContext;
}
export function getRecommendationCapacityRunwayOutput(args?: GetRecommendationCapacityRunwayOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRecommendationCapacityRunwayResult> {
    return pulumi.output(args).apply((a: any) => getRecommendationCapacityRunway(a, opts))
}

/**
 * A collection of arguments for invoking getRecommendationCapacityRunway.
 */
export interface GetRecommendationCapacityRunwayOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalCapacity?: pulumi.Input<number>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetRecommendationCapacityRunwayAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    forecastInstance?: pulumi.Input<inputs.GetRecommendationCapacityRunwayForecastInstanceArgs>;
    id?: pulumi.Input<string>;
    lastUpdatedTime?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetRecommendationCapacityRunwayParentArgs>;
    period?: pulumi.Input<number>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetRecommendationCapacityRunwayPermissionResourceArgs>[]>;
    physicalItems?: pulumi.Input<pulumi.Input<inputs.GetRecommendationCapacityRunwayPhysicalItemArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetRecommendationCapacityRunwayRegisteredDeviceArgs>;
    requirementMet?: pulumi.Input<boolean>;
    runway?: pulumi.Input<number>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetRecommendationCapacityRunwayTagArgs>[]>;
    totalCapacity?: pulumi.Input<number>;
    unit?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetRecommendationCapacityRunwayVersionContextArgs>;
}
