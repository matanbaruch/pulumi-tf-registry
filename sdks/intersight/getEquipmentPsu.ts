// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEquipmentPsu(args?: GetEquipmentPsuArgs, opts?: pulumi.InvokeOptions): Promise<GetEquipmentPsuResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getEquipmentPsu:getEquipmentPsu", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "computeRackUnit": args.computeRackUnit,
        "createTime": args.createTime,
        "description": args.description,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "equipmentChassis": args.equipmentChassis,
        "equipmentFex": args.equipmentFex,
        "equipmentRackEnclosure": args.equipmentRackEnclosure,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "isUpgraded": args.isUpgraded,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "name": args.name,
        "networkElement": args.networkElement,
        "objectType": args.objectType,
        "operReasons": args.operReasons,
        "operState": args.operState,
        "owners": args.owners,
        "parent": args.parent,
        "partNumber": args.partNumber,
        "permissionResources": args.permissionResources,
        "pid": args.pid,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "psuFwVersion": args.psuFwVersion,
        "psuId": args.psuId,
        "psuInputSrc": args.psuInputSrc,
        "psuType": args.psuType,
        "psuWattage": args.psuWattage,
        "registeredDevice": args.registeredDevice,
        "revision": args.revision,
        "rn": args.rn,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "sku": args.sku,
        "tags": args.tags,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
        "vid": args.vid,
        "voltage": args.voltage,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEquipmentPsu.
 */
export interface GetEquipmentPsuArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetEquipmentPsuAncestor[];
    classId?: string;
    computeRackUnit?: inputs.GetEquipmentPsuComputeRackUnit;
    createTime?: string;
    description?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    equipmentChassis?: inputs.GetEquipmentPsuEquipmentChassis;
    equipmentFex?: inputs.GetEquipmentPsuEquipmentFex;
    equipmentRackEnclosure?: inputs.GetEquipmentPsuEquipmentRackEnclosure;
    id?: string;
    inventoryDeviceInfo?: inputs.GetEquipmentPsuInventoryDeviceInfo;
    isUpgraded?: boolean;
    modTime?: string;
    model?: string;
    moid?: string;
    name?: string;
    networkElement?: inputs.GetEquipmentPsuNetworkElement;
    objectType?: string;
    operReasons?: string[];
    operState?: string;
    owners?: string[];
    parent?: inputs.GetEquipmentPsuParent;
    partNumber?: string;
    permissionResources?: inputs.GetEquipmentPsuPermissionResource[];
    pid?: string;
    presence?: string;
    previousFru?: inputs.GetEquipmentPsuPreviousFru;
    psuFwVersion?: string;
    psuId?: number;
    psuInputSrc?: string;
    psuType?: string;
    psuWattage?: string;
    registeredDevice?: inputs.GetEquipmentPsuRegisteredDevice;
    revision?: string;
    rn?: string;
    serial?: string;
    sharedScope?: string;
    sku?: string;
    tags?: inputs.GetEquipmentPsuTag[];
    vendor?: string;
    versionContext?: inputs.GetEquipmentPsuVersionContext;
    vid?: string;
    voltage?: string;
}

/**
 * A collection of values returned by getEquipmentPsu.
 */
export interface GetEquipmentPsuResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetEquipmentPsuAncestor[];
    readonly classId?: string;
    readonly computeRackUnit?: outputs.GetEquipmentPsuComputeRackUnit;
    readonly createTime?: string;
    readonly description?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly equipmentChassis?: outputs.GetEquipmentPsuEquipmentChassis;
    readonly equipmentFex?: outputs.GetEquipmentPsuEquipmentFex;
    readonly equipmentRackEnclosure?: outputs.GetEquipmentPsuEquipmentRackEnclosure;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetEquipmentPsuInventoryDeviceInfo;
    readonly isUpgraded?: boolean;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly networkElement?: outputs.GetEquipmentPsuNetworkElement;
    readonly objectType?: string;
    readonly operReasons?: string[];
    readonly operState?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetEquipmentPsuParent;
    readonly partNumber?: string;
    readonly permissionResources?: outputs.GetEquipmentPsuPermissionResource[];
    readonly pid?: string;
    readonly presence?: string;
    readonly previousFru?: outputs.GetEquipmentPsuPreviousFru;
    readonly psuFwVersion?: string;
    readonly psuId?: number;
    readonly psuInputSrc?: string;
    readonly psuType?: string;
    readonly psuWattage?: string;
    readonly registeredDevice?: outputs.GetEquipmentPsuRegisteredDevice;
    readonly results: outputs.GetEquipmentPsuResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly sku?: string;
    readonly tags?: outputs.GetEquipmentPsuTag[];
    readonly vendor?: string;
    readonly versionContext?: outputs.GetEquipmentPsuVersionContext;
    readonly vid?: string;
    readonly voltage?: string;
}
export function getEquipmentPsuOutput(args?: GetEquipmentPsuOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEquipmentPsuResult> {
    return pulumi.output(args).apply((a: any) => getEquipmentPsu(a, opts))
}

/**
 * A collection of arguments for invoking getEquipmentPsu.
 */
export interface GetEquipmentPsuOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetEquipmentPsuAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    computeRackUnit?: pulumi.Input<inputs.GetEquipmentPsuComputeRackUnitArgs>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    equipmentChassis?: pulumi.Input<inputs.GetEquipmentPsuEquipmentChassisArgs>;
    equipmentFex?: pulumi.Input<inputs.GetEquipmentPsuEquipmentFexArgs>;
    equipmentRackEnclosure?: pulumi.Input<inputs.GetEquipmentPsuEquipmentRackEnclosureArgs>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetEquipmentPsuInventoryDeviceInfoArgs>;
    isUpgraded?: pulumi.Input<boolean>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkElement?: pulumi.Input<inputs.GetEquipmentPsuNetworkElementArgs>;
    objectType?: pulumi.Input<string>;
    operReasons?: pulumi.Input<pulumi.Input<string>[]>;
    operState?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetEquipmentPsuParentArgs>;
    partNumber?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetEquipmentPsuPermissionResourceArgs>[]>;
    pid?: pulumi.Input<string>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetEquipmentPsuPreviousFruArgs>;
    psuFwVersion?: pulumi.Input<string>;
    psuId?: pulumi.Input<number>;
    psuInputSrc?: pulumi.Input<string>;
    psuType?: pulumi.Input<string>;
    psuWattage?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetEquipmentPsuRegisteredDeviceArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    sku?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetEquipmentPsuTagArgs>[]>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetEquipmentPsuVersionContextArgs>;
    vid?: pulumi.Input<string>;
    voltage?: pulumi.Input<string>;
}
