// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getTerraformExecutor(args?: GetTerraformExecutorArgs, opts?: pulumi.InvokeOptions): Promise<GetTerraformExecutorResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getTerraformExecutor:getTerraformExecutor", {
        "account": args.account,
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "cloudResources": args.cloudResources,
        "command": args.command,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "operation": args.operation,
        "output": args.output,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "platformType": args.platformType,
        "registeredDevice": args.registeredDevice,
        "runStates": args.runStates,
        "sharedScope": args.sharedScope,
        "sourceFolderName": args.sourceFolderName,
        "sourceFolderPath": args.sourceFolderPath,
        "sourceLocation": args.sourceLocation,
        "status": args.status,
        "stderr": args.stderr,
        "stdout": args.stdout,
        "tags": args.tags,
        "taskId": args.taskId,
        "variables": args.variables,
        "versionContext": args.versionContext,
        "workflowInfo": args.workflowInfo,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getTerraformExecutor.
 */
export interface GetTerraformExecutorArgs {
    account?: inputs.GetTerraformExecutorAccount;
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetTerraformExecutorAncestor[];
    classId?: string;
    cloudResources?: inputs.GetTerraformExecutorCloudResource[];
    command?: string;
    createTime?: string;
    domainGroupMoid?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    operation?: string;
    output?: string;
    owners?: string[];
    parent?: inputs.GetTerraformExecutorParent;
    permissionResources?: inputs.GetTerraformExecutorPermissionResource[];
    platformType?: string;
    registeredDevice?: inputs.GetTerraformExecutorRegisteredDevice;
    runStates?: inputs.GetTerraformExecutorRunState[];
    sharedScope?: string;
    sourceFolderName?: string;
    sourceFolderPath?: string;
    sourceLocation?: string;
    status?: string;
    stderr?: string;
    stdout?: string;
    tags?: inputs.GetTerraformExecutorTag[];
    taskId?: string;
    variables?: string;
    versionContext?: inputs.GetTerraformExecutorVersionContext;
    workflowInfo?: inputs.GetTerraformExecutorWorkflowInfo;
}

/**
 * A collection of values returned by getTerraformExecutor.
 */
export interface GetTerraformExecutorResult {
    readonly account?: outputs.GetTerraformExecutorAccount;
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetTerraformExecutorAncestor[];
    readonly classId?: string;
    readonly cloudResources?: outputs.GetTerraformExecutorCloudResource[];
    readonly command?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly operation?: string;
    readonly output?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetTerraformExecutorParent;
    readonly permissionResources?: outputs.GetTerraformExecutorPermissionResource[];
    readonly platformType?: string;
    readonly registeredDevice?: outputs.GetTerraformExecutorRegisteredDevice;
    readonly results: outputs.GetTerraformExecutorResult[];
    readonly runStates?: outputs.GetTerraformExecutorRunState[];
    readonly sharedScope?: string;
    readonly sourceFolderName?: string;
    readonly sourceFolderPath?: string;
    readonly sourceLocation?: string;
    readonly status?: string;
    readonly stderr?: string;
    readonly stdout?: string;
    readonly tags?: outputs.GetTerraformExecutorTag[];
    readonly taskId?: string;
    readonly variables?: string;
    readonly versionContext?: outputs.GetTerraformExecutorVersionContext;
    readonly workflowInfo?: outputs.GetTerraformExecutorWorkflowInfo;
}
export function getTerraformExecutorOutput(args?: GetTerraformExecutorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTerraformExecutorResult> {
    return pulumi.output(args).apply((a: any) => getTerraformExecutor(a, opts))
}

/**
 * A collection of arguments for invoking getTerraformExecutor.
 */
export interface GetTerraformExecutorOutputArgs {
    account?: pulumi.Input<inputs.GetTerraformExecutorAccountArgs>;
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetTerraformExecutorAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    cloudResources?: pulumi.Input<pulumi.Input<inputs.GetTerraformExecutorCloudResourceArgs>[]>;
    command?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operation?: pulumi.Input<string>;
    output?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetTerraformExecutorParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetTerraformExecutorPermissionResourceArgs>[]>;
    platformType?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetTerraformExecutorRegisteredDeviceArgs>;
    runStates?: pulumi.Input<pulumi.Input<inputs.GetTerraformExecutorRunStateArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    sourceFolderName?: pulumi.Input<string>;
    sourceFolderPath?: pulumi.Input<string>;
    sourceLocation?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    stderr?: pulumi.Input<string>;
    stdout?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetTerraformExecutorTagArgs>[]>;
    taskId?: pulumi.Input<string>;
    variables?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetTerraformExecutorVersionContextArgs>;
    workflowInfo?: pulumi.Input<inputs.GetTerraformExecutorWorkflowInfoArgs>;
}
