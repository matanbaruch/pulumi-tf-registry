// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getGraphicsCard(args?: GetGraphicsCardArgs, opts?: pulumi.InvokeOptions): Promise<GetGraphicsCardResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getGraphicsCard:getGraphicsCard", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "cardId": args.cardId,
        "classId": args.classId,
        "computeBlade": args.computeBlade,
        "computeBoard": args.computeBoard,
        "computeRackUnit": args.computeRackUnit,
        "createTime": args.createTime,
        "description": args.description,
        "deviceId": args.deviceId,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "expanderSlot": args.expanderSlot,
        "firmwareVersion": args.firmwareVersion,
        "gpuId": args.gpuId,
        "graphicsControllers": args.graphicsControllers,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "isPlatformSupported": args.isPlatformSupported,
        "isUpgraded": args.isUpgraded,
        "modTime": args.modTime,
        "mode": args.mode,
        "model": args.model,
        "moid": args.moid,
        "numGpus": args.numGpus,
        "objectType": args.objectType,
        "operReasons": args.operReasons,
        "operState": args.operState,
        "owners": args.owners,
        "parent": args.parent,
        "partNumber": args.partNumber,
        "pciAddress": args.pciAddress,
        "pciAddressList": args.pciAddressList,
        "pciDevice": args.pciDevice,
        "pciNode": args.pciNode,
        "pciSlot": args.pciSlot,
        "permissionResources": args.permissionResources,
        "pid": args.pid,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "registeredDevice": args.registeredDevice,
        "revision": args.revision,
        "rn": args.rn,
        "runningFirmwares": args.runningFirmwares,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "subDeviceId": args.subDeviceId,
        "subVendorId": args.subVendorId,
        "tags": args.tags,
        "vendor": args.vendor,
        "vendorId": args.vendorId,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getGraphicsCard.
 */
export interface GetGraphicsCardArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetGraphicsCardAncestor[];
    cardId?: number;
    classId?: string;
    computeBlade?: inputs.GetGraphicsCardComputeBlade;
    computeBoard?: inputs.GetGraphicsCardComputeBoard;
    computeRackUnit?: inputs.GetGraphicsCardComputeRackUnit;
    createTime?: string;
    description?: string;
    deviceId?: number;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    expanderSlot?: string;
    firmwareVersion?: string;
    gpuId?: string;
    graphicsControllers?: inputs.GetGraphicsCardGraphicsController[];
    id?: string;
    inventoryDeviceInfo?: inputs.GetGraphicsCardInventoryDeviceInfo;
    isPlatformSupported?: boolean;
    isUpgraded?: boolean;
    modTime?: string;
    mode?: string;
    model?: string;
    moid?: string;
    numGpus?: string;
    objectType?: string;
    operReasons?: string[];
    operState?: string;
    owners?: string[];
    parent?: inputs.GetGraphicsCardParent;
    partNumber?: string;
    pciAddress?: string;
    pciAddressList?: string;
    pciDevice?: inputs.GetGraphicsCardPciDevice;
    pciNode?: inputs.GetGraphicsCardPciNode;
    pciSlot?: string;
    permissionResources?: inputs.GetGraphicsCardPermissionResource[];
    pid?: string;
    presence?: string;
    previousFru?: inputs.GetGraphicsCardPreviousFru;
    registeredDevice?: inputs.GetGraphicsCardRegisteredDevice;
    revision?: string;
    rn?: string;
    runningFirmwares?: inputs.GetGraphicsCardRunningFirmware[];
    serial?: string;
    sharedScope?: string;
    subDeviceId?: number;
    subVendorId?: number;
    tags?: inputs.GetGraphicsCardTag[];
    vendor?: string;
    vendorId?: number;
    versionContext?: inputs.GetGraphicsCardVersionContext;
}

/**
 * A collection of values returned by getGraphicsCard.
 */
export interface GetGraphicsCardResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetGraphicsCardAncestor[];
    readonly cardId?: number;
    readonly classId?: string;
    readonly computeBlade?: outputs.GetGraphicsCardComputeBlade;
    readonly computeBoard?: outputs.GetGraphicsCardComputeBoard;
    readonly computeRackUnit?: outputs.GetGraphicsCardComputeRackUnit;
    readonly createTime?: string;
    readonly description?: string;
    readonly deviceId?: number;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly expanderSlot?: string;
    readonly firmwareVersion?: string;
    readonly gpuId?: string;
    readonly graphicsControllers?: outputs.GetGraphicsCardGraphicsController[];
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetGraphicsCardInventoryDeviceInfo;
    readonly isPlatformSupported?: boolean;
    readonly isUpgraded?: boolean;
    readonly modTime?: string;
    readonly mode?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly numGpus?: string;
    readonly objectType?: string;
    readonly operReasons?: string[];
    readonly operState?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetGraphicsCardParent;
    readonly partNumber?: string;
    readonly pciAddress?: string;
    readonly pciAddressList?: string;
    readonly pciDevice?: outputs.GetGraphicsCardPciDevice;
    readonly pciNode?: outputs.GetGraphicsCardPciNode;
    readonly pciSlot?: string;
    readonly permissionResources?: outputs.GetGraphicsCardPermissionResource[];
    readonly pid?: string;
    readonly presence?: string;
    readonly previousFru?: outputs.GetGraphicsCardPreviousFru;
    readonly registeredDevice?: outputs.GetGraphicsCardRegisteredDevice;
    readonly results: outputs.GetGraphicsCardResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly runningFirmwares?: outputs.GetGraphicsCardRunningFirmware[];
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly subDeviceId?: number;
    readonly subVendorId?: number;
    readonly tags?: outputs.GetGraphicsCardTag[];
    readonly vendor?: string;
    readonly vendorId?: number;
    readonly versionContext?: outputs.GetGraphicsCardVersionContext;
}
export function getGraphicsCardOutput(args?: GetGraphicsCardOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGraphicsCardResult> {
    return pulumi.output(args).apply((a: any) => getGraphicsCard(a, opts))
}

/**
 * A collection of arguments for invoking getGraphicsCard.
 */
export interface GetGraphicsCardOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetGraphicsCardAncestorArgs>[]>;
    cardId?: pulumi.Input<number>;
    classId?: pulumi.Input<string>;
    computeBlade?: pulumi.Input<inputs.GetGraphicsCardComputeBladeArgs>;
    computeBoard?: pulumi.Input<inputs.GetGraphicsCardComputeBoardArgs>;
    computeRackUnit?: pulumi.Input<inputs.GetGraphicsCardComputeRackUnitArgs>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceId?: pulumi.Input<number>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    expanderSlot?: pulumi.Input<string>;
    firmwareVersion?: pulumi.Input<string>;
    gpuId?: pulumi.Input<string>;
    graphicsControllers?: pulumi.Input<pulumi.Input<inputs.GetGraphicsCardGraphicsControllerArgs>[]>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetGraphicsCardInventoryDeviceInfoArgs>;
    isPlatformSupported?: pulumi.Input<boolean>;
    isUpgraded?: pulumi.Input<boolean>;
    modTime?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    numGpus?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operReasons?: pulumi.Input<pulumi.Input<string>[]>;
    operState?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetGraphicsCardParentArgs>;
    partNumber?: pulumi.Input<string>;
    pciAddress?: pulumi.Input<string>;
    pciAddressList?: pulumi.Input<string>;
    pciDevice?: pulumi.Input<inputs.GetGraphicsCardPciDeviceArgs>;
    pciNode?: pulumi.Input<inputs.GetGraphicsCardPciNodeArgs>;
    pciSlot?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetGraphicsCardPermissionResourceArgs>[]>;
    pid?: pulumi.Input<string>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetGraphicsCardPreviousFruArgs>;
    registeredDevice?: pulumi.Input<inputs.GetGraphicsCardRegisteredDeviceArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    runningFirmwares?: pulumi.Input<pulumi.Input<inputs.GetGraphicsCardRunningFirmwareArgs>[]>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    subDeviceId?: pulumi.Input<number>;
    subVendorId?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetGraphicsCardTagArgs>[]>;
    vendor?: pulumi.Input<string>;
    vendorId?: pulumi.Input<number>;
    versionContext?: pulumi.Input<inputs.GetGraphicsCardVersionContextArgs>;
}
