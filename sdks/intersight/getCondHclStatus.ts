// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCondHclStatus(args?: GetCondHclStatusArgs, opts?: pulumi.InvokeOptions): Promise<GetCondHclStatusResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getCondHclStatus:getCondHclStatus", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "componentStatus": args.componentStatus,
        "createTime": args.createTime,
        "details": args.details,
        "domainGroupMoid": args.domainGroupMoid,
        "hardwareStatus": args.hardwareStatus,
        "hclFirmwareVersion": args.hclFirmwareVersion,
        "hclModel": args.hclModel,
        "hclOsVendor": args.hclOsVendor,
        "hclOsVersion": args.hclOsVersion,
        "hclProcessor": args.hclProcessor,
        "hclValidationTime": args.hclValidationTime,
        "id": args.id,
        "invFirmwareVersion": args.invFirmwareVersion,
        "invModel": args.invModel,
        "invOsVendor": args.invOsVendor,
        "invOsVersion": args.invOsVersion,
        "invProcessor": args.invProcessor,
        "managedObject": args.managedObject,
        "managementMode": args.managementMode,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "reason": args.reason,
        "registeredDevice": args.registeredDevice,
        "serverReason": args.serverReason,
        "sharedScope": args.sharedScope,
        "softwareStatus": args.softwareStatus,
        "status": args.status,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCondHclStatus.
 */
export interface GetCondHclStatusArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetCondHclStatusAncestor[];
    classId?: string;
    componentStatus?: string;
    createTime?: string;
    details?: inputs.GetCondHclStatusDetail[];
    domainGroupMoid?: string;
    hardwareStatus?: string;
    hclFirmwareVersion?: string;
    hclModel?: string;
    hclOsVendor?: string;
    hclOsVersion?: string;
    hclProcessor?: string;
    hclValidationTime?: string;
    id?: string;
    invFirmwareVersion?: string;
    invModel?: string;
    invOsVendor?: string;
    invOsVersion?: string;
    invProcessor?: string;
    managedObject?: inputs.GetCondHclStatusManagedObject;
    managementMode?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetCondHclStatusParent;
    permissionResources?: inputs.GetCondHclStatusPermissionResource[];
    reason?: string;
    registeredDevice?: inputs.GetCondHclStatusRegisteredDevice;
    serverReason?: string;
    sharedScope?: string;
    softwareStatus?: string;
    status?: string;
    tags?: inputs.GetCondHclStatusTag[];
    versionContext?: inputs.GetCondHclStatusVersionContext;
}

/**
 * A collection of values returned by getCondHclStatus.
 */
export interface GetCondHclStatusResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetCondHclStatusAncestor[];
    readonly classId?: string;
    readonly componentStatus?: string;
    readonly createTime?: string;
    readonly details?: outputs.GetCondHclStatusDetail[];
    readonly domainGroupMoid?: string;
    readonly hardwareStatus?: string;
    readonly hclFirmwareVersion?: string;
    readonly hclModel?: string;
    readonly hclOsVendor?: string;
    readonly hclOsVersion?: string;
    readonly hclProcessor?: string;
    readonly hclValidationTime?: string;
    readonly id: string;
    readonly invFirmwareVersion?: string;
    readonly invModel?: string;
    readonly invOsVendor?: string;
    readonly invOsVersion?: string;
    readonly invProcessor?: string;
    readonly managedObject?: outputs.GetCondHclStatusManagedObject;
    readonly managementMode?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetCondHclStatusParent;
    readonly permissionResources?: outputs.GetCondHclStatusPermissionResource[];
    readonly reason?: string;
    readonly registeredDevice?: outputs.GetCondHclStatusRegisteredDevice;
    readonly results: outputs.GetCondHclStatusResult[];
    readonly serverReason?: string;
    readonly sharedScope?: string;
    readonly softwareStatus?: string;
    readonly status?: string;
    readonly tags?: outputs.GetCondHclStatusTag[];
    readonly versionContext?: outputs.GetCondHclStatusVersionContext;
}
export function getCondHclStatusOutput(args?: GetCondHclStatusOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCondHclStatusResult> {
    return pulumi.output(args).apply((a: any) => getCondHclStatus(a, opts))
}

/**
 * A collection of arguments for invoking getCondHclStatus.
 */
export interface GetCondHclStatusOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetCondHclStatusAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    componentStatus?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    details?: pulumi.Input<pulumi.Input<inputs.GetCondHclStatusDetailArgs>[]>;
    domainGroupMoid?: pulumi.Input<string>;
    hardwareStatus?: pulumi.Input<string>;
    hclFirmwareVersion?: pulumi.Input<string>;
    hclModel?: pulumi.Input<string>;
    hclOsVendor?: pulumi.Input<string>;
    hclOsVersion?: pulumi.Input<string>;
    hclProcessor?: pulumi.Input<string>;
    hclValidationTime?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    invFirmwareVersion?: pulumi.Input<string>;
    invModel?: pulumi.Input<string>;
    invOsVendor?: pulumi.Input<string>;
    invOsVersion?: pulumi.Input<string>;
    invProcessor?: pulumi.Input<string>;
    managedObject?: pulumi.Input<inputs.GetCondHclStatusManagedObjectArgs>;
    managementMode?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetCondHclStatusParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetCondHclStatusPermissionResourceArgs>[]>;
    reason?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetCondHclStatusRegisteredDeviceArgs>;
    serverReason?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    softwareStatus?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetCondHclStatusTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetCondHclStatusVersionContextArgs>;
}
