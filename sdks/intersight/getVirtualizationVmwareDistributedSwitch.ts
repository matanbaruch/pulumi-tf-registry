// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVirtualizationVmwareDistributedSwitch(args?: GetVirtualizationVmwareDistributedSwitchArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualizationVmwareDistributedSwitchResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getVirtualizationVmwareDistributedSwitch:getVirtualizationVmwareDistributedSwitch", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "datacenter": args.datacenter,
        "description": args.description,
        "discoveryProtocol": args.discoveryProtocol,
        "domainGroupMoid": args.domainGroupMoid,
        "hosts": args.hosts,
        "id": args.id,
        "identity": args.identity,
        "maxPort": args.maxPort,
        "modTime": args.modTime,
        "moid": args.moid,
        "mtu": args.mtu,
        "name": args.name,
        "networkIoControl": args.networkIoControl,
        "nicTeamingAndFailover": args.nicTeamingAndFailover,
        "nrVersion": args.nrVersion,
        "numHosts": args.numHosts,
        "numNetworks": args.numNetworks,
        "numStandAlonePorts": args.numStandAlonePorts,
        "numUplinks": args.numUplinks,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "resourceAllocationSystemTraffics": args.resourceAllocationSystemTraffics,
        "sharedScope": args.sharedScope,
        "switchCapacity": args.switchCapacity,
        "tags": args.tags,
        "uuid": args.uuid,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareDistributedSwitch.
 */
export interface GetVirtualizationVmwareDistributedSwitchArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetVirtualizationVmwareDistributedSwitchAncestor[];
    classId?: string;
    createTime?: string;
    datacenter?: inputs.GetVirtualizationVmwareDistributedSwitchDatacenter;
    description?: string;
    discoveryProtocol?: inputs.GetVirtualizationVmwareDistributedSwitchDiscoveryProtocol;
    domainGroupMoid?: string;
    hosts?: inputs.GetVirtualizationVmwareDistributedSwitchHost[];
    id?: string;
    identity?: string;
    maxPort?: number;
    modTime?: string;
    moid?: string;
    mtu?: number;
    name?: string;
    networkIoControl?: boolean;
    nicTeamingAndFailover?: inputs.GetVirtualizationVmwareDistributedSwitchNicTeamingAndFailover;
    nrVersion?: string;
    numHosts?: number;
    numNetworks?: number;
    numStandAlonePorts?: number;
    numUplinks?: number;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetVirtualizationVmwareDistributedSwitchParent;
    permissionResources?: inputs.GetVirtualizationVmwareDistributedSwitchPermissionResource[];
    registeredDevice?: inputs.GetVirtualizationVmwareDistributedSwitchRegisteredDevice;
    resourceAllocationSystemTraffics?: inputs.GetVirtualizationVmwareDistributedSwitchResourceAllocationSystemTraffic[];
    sharedScope?: string;
    switchCapacity?: inputs.GetVirtualizationVmwareDistributedSwitchSwitchCapacity;
    tags?: inputs.GetVirtualizationVmwareDistributedSwitchTag[];
    uuid?: string;
    versionContext?: inputs.GetVirtualizationVmwareDistributedSwitchVersionContext;
}

/**
 * A collection of values returned by getVirtualizationVmwareDistributedSwitch.
 */
export interface GetVirtualizationVmwareDistributedSwitchResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetVirtualizationVmwareDistributedSwitchAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly datacenter?: outputs.GetVirtualizationVmwareDistributedSwitchDatacenter;
    readonly description?: string;
    readonly discoveryProtocol?: outputs.GetVirtualizationVmwareDistributedSwitchDiscoveryProtocol;
    readonly domainGroupMoid?: string;
    readonly hosts?: outputs.GetVirtualizationVmwareDistributedSwitchHost[];
    readonly id: string;
    readonly identity?: string;
    readonly maxPort?: number;
    readonly modTime?: string;
    readonly moid?: string;
    readonly mtu?: number;
    readonly name?: string;
    readonly networkIoControl?: boolean;
    readonly nicTeamingAndFailover?: outputs.GetVirtualizationVmwareDistributedSwitchNicTeamingAndFailover;
    readonly nrVersion?: string;
    readonly numHosts?: number;
    readonly numNetworks?: number;
    readonly numStandAlonePorts?: number;
    readonly numUplinks?: number;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetVirtualizationVmwareDistributedSwitchParent;
    readonly permissionResources?: outputs.GetVirtualizationVmwareDistributedSwitchPermissionResource[];
    readonly registeredDevice?: outputs.GetVirtualizationVmwareDistributedSwitchRegisteredDevice;
    readonly resourceAllocationSystemTraffics?: outputs.GetVirtualizationVmwareDistributedSwitchResourceAllocationSystemTraffic[];
    readonly results: outputs.GetVirtualizationVmwareDistributedSwitchResult[];
    readonly sharedScope?: string;
    readonly switchCapacity?: outputs.GetVirtualizationVmwareDistributedSwitchSwitchCapacity;
    readonly tags?: outputs.GetVirtualizationVmwareDistributedSwitchTag[];
    readonly uuid?: string;
    readonly versionContext?: outputs.GetVirtualizationVmwareDistributedSwitchVersionContext;
}
export function getVirtualizationVmwareDistributedSwitchOutput(args?: GetVirtualizationVmwareDistributedSwitchOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualizationVmwareDistributedSwitchResult> {
    return pulumi.output(args).apply((a: any) => getVirtualizationVmwareDistributedSwitch(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareDistributedSwitch.
 */
export interface GetVirtualizationVmwareDistributedSwitchOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareDistributedSwitchAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    datacenter?: pulumi.Input<inputs.GetVirtualizationVmwareDistributedSwitchDatacenterArgs>;
    description?: pulumi.Input<string>;
    discoveryProtocol?: pulumi.Input<inputs.GetVirtualizationVmwareDistributedSwitchDiscoveryProtocolArgs>;
    domainGroupMoid?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareDistributedSwitchHostArgs>[]>;
    id?: pulumi.Input<string>;
    identity?: pulumi.Input<string>;
    maxPort?: pulumi.Input<number>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    networkIoControl?: pulumi.Input<boolean>;
    nicTeamingAndFailover?: pulumi.Input<inputs.GetVirtualizationVmwareDistributedSwitchNicTeamingAndFailoverArgs>;
    nrVersion?: pulumi.Input<string>;
    numHosts?: pulumi.Input<number>;
    numNetworks?: pulumi.Input<number>;
    numStandAlonePorts?: pulumi.Input<number>;
    numUplinks?: pulumi.Input<number>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetVirtualizationVmwareDistributedSwitchParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareDistributedSwitchPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetVirtualizationVmwareDistributedSwitchRegisteredDeviceArgs>;
    resourceAllocationSystemTraffics?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareDistributedSwitchResourceAllocationSystemTrafficArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    switchCapacity?: pulumi.Input<inputs.GetVirtualizationVmwareDistributedSwitchSwitchCapacityArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareDistributedSwitchTagArgs>[]>;
    uuid?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetVirtualizationVmwareDistributedSwitchVersionContextArgs>;
}
