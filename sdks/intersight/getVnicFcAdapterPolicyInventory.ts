// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVnicFcAdapterPolicyInventory(args?: GetVnicFcAdapterPolicyInventoryArgs, opts?: pulumi.InvokeOptions): Promise<GetVnicFcAdapterPolicyInventoryResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getVnicFcAdapterPolicyInventory:getVnicFcAdapterPolicyInventory", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "description": args.description,
        "deviceMoId": args.deviceMoId,
        "domainGroupMoid": args.domainGroupMoid,
        "errorDetectionTimeout": args.errorDetectionTimeout,
        "errorRecoverySettings": args.errorRecoverySettings,
        "flogiSettings": args.flogiSettings,
        "id": args.id,
        "interruptSettings": args.interruptSettings,
        "ioThrottleCount": args.ioThrottleCount,
        "lunCount": args.lunCount,
        "lunQueueDepth": args.lunQueueDepth,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "plogiSettings": args.plogiSettings,
        "resourceAllocationTimeout": args.resourceAllocationTimeout,
        "rxQueueSettings": args.rxQueueSettings,
        "scsiQueueSettings": args.scsiQueueSettings,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "targetMo": args.targetMo,
        "txQueueSettings": args.txQueueSettings,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVnicFcAdapterPolicyInventory.
 */
export interface GetVnicFcAdapterPolicyInventoryArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetVnicFcAdapterPolicyInventoryAncestor[];
    classId?: string;
    createTime?: string;
    description?: string;
    deviceMoId?: string;
    domainGroupMoid?: string;
    errorDetectionTimeout?: number;
    errorRecoverySettings?: inputs.GetVnicFcAdapterPolicyInventoryErrorRecoverySettings;
    flogiSettings?: inputs.GetVnicFcAdapterPolicyInventoryFlogiSettings;
    id?: string;
    interruptSettings?: inputs.GetVnicFcAdapterPolicyInventoryInterruptSettings;
    ioThrottleCount?: number;
    lunCount?: number;
    lunQueueDepth?: number;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetVnicFcAdapterPolicyInventoryParent;
    permissionResources?: inputs.GetVnicFcAdapterPolicyInventoryPermissionResource[];
    plogiSettings?: inputs.GetVnicFcAdapterPolicyInventoryPlogiSettings;
    resourceAllocationTimeout?: number;
    rxQueueSettings?: inputs.GetVnicFcAdapterPolicyInventoryRxQueueSettings;
    scsiQueueSettings?: inputs.GetVnicFcAdapterPolicyInventoryScsiQueueSettings;
    sharedScope?: string;
    tags?: inputs.GetVnicFcAdapterPolicyInventoryTag[];
    targetMo?: inputs.GetVnicFcAdapterPolicyInventoryTargetMo;
    txQueueSettings?: inputs.GetVnicFcAdapterPolicyInventoryTxQueueSettings;
    versionContext?: inputs.GetVnicFcAdapterPolicyInventoryVersionContext;
}

/**
 * A collection of values returned by getVnicFcAdapterPolicyInventory.
 */
export interface GetVnicFcAdapterPolicyInventoryResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetVnicFcAdapterPolicyInventoryAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly deviceMoId?: string;
    readonly domainGroupMoid?: string;
    readonly errorDetectionTimeout?: number;
    readonly errorRecoverySettings?: outputs.GetVnicFcAdapterPolicyInventoryErrorRecoverySettings;
    readonly flogiSettings?: outputs.GetVnicFcAdapterPolicyInventoryFlogiSettings;
    readonly id: string;
    readonly interruptSettings?: outputs.GetVnicFcAdapterPolicyInventoryInterruptSettings;
    readonly ioThrottleCount?: number;
    readonly lunCount?: number;
    readonly lunQueueDepth?: number;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetVnicFcAdapterPolicyInventoryParent;
    readonly permissionResources?: outputs.GetVnicFcAdapterPolicyInventoryPermissionResource[];
    readonly plogiSettings?: outputs.GetVnicFcAdapterPolicyInventoryPlogiSettings;
    readonly resourceAllocationTimeout?: number;
    readonly results: outputs.GetVnicFcAdapterPolicyInventoryResult[];
    readonly rxQueueSettings?: outputs.GetVnicFcAdapterPolicyInventoryRxQueueSettings;
    readonly scsiQueueSettings?: outputs.GetVnicFcAdapterPolicyInventoryScsiQueueSettings;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetVnicFcAdapterPolicyInventoryTag[];
    readonly targetMo?: outputs.GetVnicFcAdapterPolicyInventoryTargetMo;
    readonly txQueueSettings?: outputs.GetVnicFcAdapterPolicyInventoryTxQueueSettings;
    readonly versionContext?: outputs.GetVnicFcAdapterPolicyInventoryVersionContext;
}
export function getVnicFcAdapterPolicyInventoryOutput(args?: GetVnicFcAdapterPolicyInventoryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVnicFcAdapterPolicyInventoryResult> {
    return pulumi.output(args).apply((a: any) => getVnicFcAdapterPolicyInventory(a, opts))
}

/**
 * A collection of arguments for invoking getVnicFcAdapterPolicyInventory.
 */
export interface GetVnicFcAdapterPolicyInventoryOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetVnicFcAdapterPolicyInventoryAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    errorDetectionTimeout?: pulumi.Input<number>;
    errorRecoverySettings?: pulumi.Input<inputs.GetVnicFcAdapterPolicyInventoryErrorRecoverySettingsArgs>;
    flogiSettings?: pulumi.Input<inputs.GetVnicFcAdapterPolicyInventoryFlogiSettingsArgs>;
    id?: pulumi.Input<string>;
    interruptSettings?: pulumi.Input<inputs.GetVnicFcAdapterPolicyInventoryInterruptSettingsArgs>;
    ioThrottleCount?: pulumi.Input<number>;
    lunCount?: pulumi.Input<number>;
    lunQueueDepth?: pulumi.Input<number>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetVnicFcAdapterPolicyInventoryParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetVnicFcAdapterPolicyInventoryPermissionResourceArgs>[]>;
    plogiSettings?: pulumi.Input<inputs.GetVnicFcAdapterPolicyInventoryPlogiSettingsArgs>;
    resourceAllocationTimeout?: pulumi.Input<number>;
    rxQueueSettings?: pulumi.Input<inputs.GetVnicFcAdapterPolicyInventoryRxQueueSettingsArgs>;
    scsiQueueSettings?: pulumi.Input<inputs.GetVnicFcAdapterPolicyInventoryScsiQueueSettingsArgs>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetVnicFcAdapterPolicyInventoryTagArgs>[]>;
    targetMo?: pulumi.Input<inputs.GetVnicFcAdapterPolicyInventoryTargetMoArgs>;
    txQueueSettings?: pulumi.Input<inputs.GetVnicFcAdapterPolicyInventoryTxQueueSettingsArgs>;
    versionContext?: pulumi.Input<inputs.GetVnicFcAdapterPolicyInventoryVersionContextArgs>;
}
