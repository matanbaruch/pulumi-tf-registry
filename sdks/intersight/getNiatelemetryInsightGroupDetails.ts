// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNiatelemetryInsightGroupDetails(args?: GetNiatelemetryInsightGroupDetailsArgs, opts?: pulumi.InvokeOptions): Promise<GetNiatelemetryInsightGroupDetailsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getNiatelemetryInsightGroupDetails:getNiatelemetryInsightGroupDetails", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "alertRulesCount": args.alertRulesCount,
        "analysisSettingsStatus": args.analysisSettingsStatus,
        "ancestors": args.ancestors,
        "bugScanSettingsStatus": args.bugScanSettingsStatus,
        "classId": args.classId,
        "createTime": args.createTime,
        "deltaAnalysisJobCount": args.deltaAnalysisJobCount,
        "domainGroupMoid": args.domainGroupMoid,
        "emailSettingsCount": args.emailSettingsCount,
        "flowSettingsCount": args.flowSettingsCount,
        "flowSettingsStatus": args.flowSettingsStatus,
        "groupName": args.groupName,
        "id": args.id,
        "insightSites": args.insightSites,
        "kafkaSettingsCount": args.kafkaSettingsCount,
        "microBurstSettingsStatus": args.microBurstSettingsStatus,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "prechangeAnalysisCount": args.prechangeAnalysisCount,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "tacCollectionConfigCount": args.tacCollectionConfigCount,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNiatelemetryInsightGroupDetails.
 */
export interface GetNiatelemetryInsightGroupDetailsArgs {
    accountMoid?: string;
    additionalProperties?: string;
    alertRulesCount?: number;
    analysisSettingsStatus?: string;
    ancestors?: inputs.GetNiatelemetryInsightGroupDetailsAncestor[];
    bugScanSettingsStatus?: string;
    classId?: string;
    createTime?: string;
    deltaAnalysisJobCount?: number;
    domainGroupMoid?: string;
    emailSettingsCount?: number;
    flowSettingsCount?: number;
    flowSettingsStatus?: string;
    groupName?: string;
    id?: string;
    insightSites?: inputs.GetNiatelemetryInsightGroupDetailsInsightSite[];
    kafkaSettingsCount?: number;
    microBurstSettingsStatus?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetNiatelemetryInsightGroupDetailsParent;
    permissionResources?: inputs.GetNiatelemetryInsightGroupDetailsPermissionResource[];
    prechangeAnalysisCount?: number;
    registeredDevice?: inputs.GetNiatelemetryInsightGroupDetailsRegisteredDevice;
    sharedScope?: string;
    tacCollectionConfigCount?: number;
    tags?: inputs.GetNiatelemetryInsightGroupDetailsTag[];
    versionContext?: inputs.GetNiatelemetryInsightGroupDetailsVersionContext;
}

/**
 * A collection of values returned by getNiatelemetryInsightGroupDetails.
 */
export interface GetNiatelemetryInsightGroupDetailsResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly alertRulesCount?: number;
    readonly analysisSettingsStatus?: string;
    readonly ancestors?: outputs.GetNiatelemetryInsightGroupDetailsAncestor[];
    readonly bugScanSettingsStatus?: string;
    readonly classId?: string;
    readonly createTime?: string;
    readonly deltaAnalysisJobCount?: number;
    readonly domainGroupMoid?: string;
    readonly emailSettingsCount?: number;
    readonly flowSettingsCount?: number;
    readonly flowSettingsStatus?: string;
    readonly groupName?: string;
    readonly id: string;
    readonly insightSites?: outputs.GetNiatelemetryInsightGroupDetailsInsightSite[];
    readonly kafkaSettingsCount?: number;
    readonly microBurstSettingsStatus?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetNiatelemetryInsightGroupDetailsParent;
    readonly permissionResources?: outputs.GetNiatelemetryInsightGroupDetailsPermissionResource[];
    readonly prechangeAnalysisCount?: number;
    readonly registeredDevice?: outputs.GetNiatelemetryInsightGroupDetailsRegisteredDevice;
    readonly results: outputs.GetNiatelemetryInsightGroupDetailsResult[];
    readonly sharedScope?: string;
    readonly tacCollectionConfigCount?: number;
    readonly tags?: outputs.GetNiatelemetryInsightGroupDetailsTag[];
    readonly versionContext?: outputs.GetNiatelemetryInsightGroupDetailsVersionContext;
}
export function getNiatelemetryInsightGroupDetailsOutput(args?: GetNiatelemetryInsightGroupDetailsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNiatelemetryInsightGroupDetailsResult> {
    return pulumi.output(args).apply((a: any) => getNiatelemetryInsightGroupDetails(a, opts))
}

/**
 * A collection of arguments for invoking getNiatelemetryInsightGroupDetails.
 */
export interface GetNiatelemetryInsightGroupDetailsOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    alertRulesCount?: pulumi.Input<number>;
    analysisSettingsStatus?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryInsightGroupDetailsAncestorArgs>[]>;
    bugScanSettingsStatus?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deltaAnalysisJobCount?: pulumi.Input<number>;
    domainGroupMoid?: pulumi.Input<string>;
    emailSettingsCount?: pulumi.Input<number>;
    flowSettingsCount?: pulumi.Input<number>;
    flowSettingsStatus?: pulumi.Input<string>;
    groupName?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    insightSites?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryInsightGroupDetailsInsightSiteArgs>[]>;
    kafkaSettingsCount?: pulumi.Input<number>;
    microBurstSettingsStatus?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetNiatelemetryInsightGroupDetailsParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryInsightGroupDetailsPermissionResourceArgs>[]>;
    prechangeAnalysisCount?: pulumi.Input<number>;
    registeredDevice?: pulumi.Input<inputs.GetNiatelemetryInsightGroupDetailsRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    tacCollectionConfigCount?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryInsightGroupDetailsTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetNiatelemetryInsightGroupDetailsVersionContextArgs>;
}
