// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCapabilityAdapterUnitDescriptor(args?: GetCapabilityAdapterUnitDescriptorArgs, opts?: pulumi.InvokeOptions): Promise<GetCapabilityAdapterUnitDescriptorResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getCapabilityAdapterUnitDescriptor:getCapabilityAdapterUnitDescriptor", {
        "accountMoid": args.accountMoid,
        "adapterGeneration": args.adapterGeneration,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "capabilities": args.capabilities,
        "classId": args.classId,
        "connectivityOrder": args.connectivityOrder,
        "createTime": args.createTime,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "ethernetPortSpeed": args.ethernetPortSpeed,
        "features": args.features,
        "fibreChannelPortSpeed": args.fibreChannelPortSpeed,
        "fibreChannelScsiIoqLimit": args.fibreChannelScsiIoqLimit,
        "id": args.id,
        "isAzureQosSupported": args.isAzureQosSupported,
        "isGeneveSupported": args.isGeneveSupported,
        "isSecureBootSupported": args.isSecureBootSupported,
        "maxEthRxRingSize": args.maxEthRxRingSize,
        "maxEthTxRingSize": args.maxEthTxRingSize,
        "maxRocev2Interfaces": args.maxRocev2Interfaces,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "nrVersion": args.nrVersion,
        "numDcePorts": args.numDcePorts,
        "numberOfPciLinks": args.numberOfPciLinks,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "pciLink": args.pciLink,
        "permissionResources": args.permissionResources,
        "promCardType": args.promCardType,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
        "vicId": args.vicId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCapabilityAdapterUnitDescriptor.
 */
export interface GetCapabilityAdapterUnitDescriptorArgs {
    accountMoid?: string;
    adapterGeneration?: number;
    additionalProperties?: string;
    ancestors?: inputs.GetCapabilityAdapterUnitDescriptorAncestor[];
    capabilities?: inputs.GetCapabilityAdapterUnitDescriptorCapability[];
    classId?: string;
    connectivityOrder?: string;
    createTime?: string;
    description?: string;
    domainGroupMoid?: string;
    ethernetPortSpeed?: number;
    features?: inputs.GetCapabilityAdapterUnitDescriptorFeature[];
    fibreChannelPortSpeed?: number;
    fibreChannelScsiIoqLimit?: number;
    id?: string;
    isAzureQosSupported?: boolean;
    isGeneveSupported?: boolean;
    isSecureBootSupported?: boolean;
    maxEthRxRingSize?: number;
    maxEthTxRingSize?: number;
    maxRocev2Interfaces?: number;
    modTime?: string;
    model?: string;
    moid?: string;
    nrVersion?: string;
    numDcePorts?: number;
    numberOfPciLinks?: number;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetCapabilityAdapterUnitDescriptorParent;
    pciLink?: number;
    permissionResources?: inputs.GetCapabilityAdapterUnitDescriptorPermissionResource[];
    promCardType?: string;
    sharedScope?: string;
    tags?: inputs.GetCapabilityAdapterUnitDescriptorTag[];
    vendor?: string;
    versionContext?: inputs.GetCapabilityAdapterUnitDescriptorVersionContext;
    vicId?: string;
}

/**
 * A collection of values returned by getCapabilityAdapterUnitDescriptor.
 */
export interface GetCapabilityAdapterUnitDescriptorResult {
    readonly accountMoid?: string;
    readonly adapterGeneration?: number;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetCapabilityAdapterUnitDescriptorAncestor[];
    readonly capabilities?: outputs.GetCapabilityAdapterUnitDescriptorCapability[];
    readonly classId?: string;
    readonly connectivityOrder?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly ethernetPortSpeed?: number;
    readonly features?: outputs.GetCapabilityAdapterUnitDescriptorFeature[];
    readonly fibreChannelPortSpeed?: number;
    readonly fibreChannelScsiIoqLimit?: number;
    readonly id: string;
    readonly isAzureQosSupported?: boolean;
    readonly isGeneveSupported?: boolean;
    readonly isSecureBootSupported?: boolean;
    readonly maxEthRxRingSize?: number;
    readonly maxEthTxRingSize?: number;
    readonly maxRocev2Interfaces?: number;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly nrVersion?: string;
    readonly numDcePorts?: number;
    readonly numberOfPciLinks?: number;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetCapabilityAdapterUnitDescriptorParent;
    readonly pciLink?: number;
    readonly permissionResources?: outputs.GetCapabilityAdapterUnitDescriptorPermissionResource[];
    readonly promCardType?: string;
    readonly results: outputs.GetCapabilityAdapterUnitDescriptorResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetCapabilityAdapterUnitDescriptorTag[];
    readonly vendor?: string;
    readonly versionContext?: outputs.GetCapabilityAdapterUnitDescriptorVersionContext;
    readonly vicId?: string;
}
export function getCapabilityAdapterUnitDescriptorOutput(args?: GetCapabilityAdapterUnitDescriptorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCapabilityAdapterUnitDescriptorResult> {
    return pulumi.output(args).apply((a: any) => getCapabilityAdapterUnitDescriptor(a, opts))
}

/**
 * A collection of arguments for invoking getCapabilityAdapterUnitDescriptor.
 */
export interface GetCapabilityAdapterUnitDescriptorOutputArgs {
    accountMoid?: pulumi.Input<string>;
    adapterGeneration?: pulumi.Input<number>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetCapabilityAdapterUnitDescriptorAncestorArgs>[]>;
    capabilities?: pulumi.Input<pulumi.Input<inputs.GetCapabilityAdapterUnitDescriptorCapabilityArgs>[]>;
    classId?: pulumi.Input<string>;
    connectivityOrder?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    ethernetPortSpeed?: pulumi.Input<number>;
    features?: pulumi.Input<pulumi.Input<inputs.GetCapabilityAdapterUnitDescriptorFeatureArgs>[]>;
    fibreChannelPortSpeed?: pulumi.Input<number>;
    fibreChannelScsiIoqLimit?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    isAzureQosSupported?: pulumi.Input<boolean>;
    isGeneveSupported?: pulumi.Input<boolean>;
    isSecureBootSupported?: pulumi.Input<boolean>;
    maxEthRxRingSize?: pulumi.Input<number>;
    maxEthTxRingSize?: pulumi.Input<number>;
    maxRocev2Interfaces?: pulumi.Input<number>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    nrVersion?: pulumi.Input<string>;
    numDcePorts?: pulumi.Input<number>;
    numberOfPciLinks?: pulumi.Input<number>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetCapabilityAdapterUnitDescriptorParentArgs>;
    pciLink?: pulumi.Input<number>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetCapabilityAdapterUnitDescriptorPermissionResourceArgs>[]>;
    promCardType?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetCapabilityAdapterUnitDescriptorTagArgs>[]>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetCapabilityAdapterUnitDescriptorVersionContextArgs>;
    vicId?: pulumi.Input<string>;
}
