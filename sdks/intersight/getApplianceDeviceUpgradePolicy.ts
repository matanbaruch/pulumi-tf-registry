// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getApplianceDeviceUpgradePolicy(args?: GetApplianceDeviceUpgradePolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetApplianceDeviceUpgradePolicyResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getApplianceDeviceUpgradePolicy:getApplianceDeviceUpgradePolicy", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "autoUpgrade": args.autoUpgrade,
        "blackoutDatesEnabled": args.blackoutDatesEnabled,
        "blackoutEndDate": args.blackoutEndDate,
        "blackoutStartDate": args.blackoutStartDate,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "enableMetaDataSync": args.enableMetaDataSync,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "schedule": args.schedule,
        "serialId": args.serialId,
        "sharedScope": args.sharedScope,
        "softwareDownloadType": args.softwareDownloadType,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getApplianceDeviceUpgradePolicy.
 */
export interface GetApplianceDeviceUpgradePolicyArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetApplianceDeviceUpgradePolicyAncestor[];
    autoUpgrade?: boolean;
    blackoutDatesEnabled?: boolean;
    blackoutEndDate?: string;
    blackoutStartDate?: string;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    enableMetaDataSync?: boolean;
    id?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetApplianceDeviceUpgradePolicyParent;
    permissionResources?: inputs.GetApplianceDeviceUpgradePolicyPermissionResource[];
    registeredDevice?: inputs.GetApplianceDeviceUpgradePolicyRegisteredDevice;
    schedule?: inputs.GetApplianceDeviceUpgradePolicySchedule;
    serialId?: string;
    sharedScope?: string;
    softwareDownloadType?: string;
    tags?: inputs.GetApplianceDeviceUpgradePolicyTag[];
    versionContext?: inputs.GetApplianceDeviceUpgradePolicyVersionContext;
}

/**
 * A collection of values returned by getApplianceDeviceUpgradePolicy.
 */
export interface GetApplianceDeviceUpgradePolicyResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetApplianceDeviceUpgradePolicyAncestor[];
    readonly autoUpgrade?: boolean;
    readonly blackoutDatesEnabled?: boolean;
    readonly blackoutEndDate?: string;
    readonly blackoutStartDate?: string;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly enableMetaDataSync?: boolean;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetApplianceDeviceUpgradePolicyParent;
    readonly permissionResources?: outputs.GetApplianceDeviceUpgradePolicyPermissionResource[];
    readonly registeredDevice?: outputs.GetApplianceDeviceUpgradePolicyRegisteredDevice;
    readonly results: outputs.GetApplianceDeviceUpgradePolicyResult[];
    readonly schedule?: outputs.GetApplianceDeviceUpgradePolicySchedule;
    readonly serialId?: string;
    readonly sharedScope?: string;
    readonly softwareDownloadType?: string;
    readonly tags?: outputs.GetApplianceDeviceUpgradePolicyTag[];
    readonly versionContext?: outputs.GetApplianceDeviceUpgradePolicyVersionContext;
}
export function getApplianceDeviceUpgradePolicyOutput(args?: GetApplianceDeviceUpgradePolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetApplianceDeviceUpgradePolicyResult> {
    return pulumi.output(args).apply((a: any) => getApplianceDeviceUpgradePolicy(a, opts))
}

/**
 * A collection of arguments for invoking getApplianceDeviceUpgradePolicy.
 */
export interface GetApplianceDeviceUpgradePolicyOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetApplianceDeviceUpgradePolicyAncestorArgs>[]>;
    autoUpgrade?: pulumi.Input<boolean>;
    blackoutDatesEnabled?: pulumi.Input<boolean>;
    blackoutEndDate?: pulumi.Input<string>;
    blackoutStartDate?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    enableMetaDataSync?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetApplianceDeviceUpgradePolicyParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetApplianceDeviceUpgradePolicyPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetApplianceDeviceUpgradePolicyRegisteredDeviceArgs>;
    schedule?: pulumi.Input<inputs.GetApplianceDeviceUpgradePolicyScheduleArgs>;
    serialId?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    softwareDownloadType?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetApplianceDeviceUpgradePolicyTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetApplianceDeviceUpgradePolicyVersionContextArgs>;
}
