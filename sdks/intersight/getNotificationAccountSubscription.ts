// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNotificationAccountSubscription(args?: GetNotificationAccountSubscriptionArgs, opts?: pulumi.InvokeOptions): Promise<GetNotificationAccountSubscriptionResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getNotificationAccountSubscription:getNotificationAccountSubscription", {
        "account": args.account,
        "accountMoid": args.accountMoid,
        "actions": args.actions,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "conditions": args.conditions,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "enabled": args.enabled,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "type": args.type,
        "verify": args.verify,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNotificationAccountSubscription.
 */
export interface GetNotificationAccountSubscriptionArgs {
    account?: inputs.GetNotificationAccountSubscriptionAccount;
    accountMoid?: string;
    actions?: inputs.GetNotificationAccountSubscriptionAction[];
    additionalProperties?: string;
    ancestors?: inputs.GetNotificationAccountSubscriptionAncestor[];
    classId?: string;
    conditions?: inputs.GetNotificationAccountSubscriptionCondition[];
    createTime?: string;
    domainGroupMoid?: string;
    enabled?: boolean;
    id?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetNotificationAccountSubscriptionParent;
    permissionResources?: inputs.GetNotificationAccountSubscriptionPermissionResource[];
    sharedScope?: string;
    tags?: inputs.GetNotificationAccountSubscriptionTag[];
    type?: string;
    verify?: string;
    versionContext?: inputs.GetNotificationAccountSubscriptionVersionContext;
}

/**
 * A collection of values returned by getNotificationAccountSubscription.
 */
export interface GetNotificationAccountSubscriptionResult {
    readonly account?: outputs.GetNotificationAccountSubscriptionAccount;
    readonly accountMoid?: string;
    readonly actions?: outputs.GetNotificationAccountSubscriptionAction[];
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetNotificationAccountSubscriptionAncestor[];
    readonly classId?: string;
    readonly conditions?: outputs.GetNotificationAccountSubscriptionCondition[];
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly enabled?: boolean;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetNotificationAccountSubscriptionParent;
    readonly permissionResources?: outputs.GetNotificationAccountSubscriptionPermissionResource[];
    readonly results: outputs.GetNotificationAccountSubscriptionResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetNotificationAccountSubscriptionTag[];
    readonly type?: string;
    readonly verify?: string;
    readonly versionContext?: outputs.GetNotificationAccountSubscriptionVersionContext;
}
export function getNotificationAccountSubscriptionOutput(args?: GetNotificationAccountSubscriptionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNotificationAccountSubscriptionResult> {
    return pulumi.output(args).apply((a: any) => getNotificationAccountSubscription(a, opts))
}

/**
 * A collection of arguments for invoking getNotificationAccountSubscription.
 */
export interface GetNotificationAccountSubscriptionOutputArgs {
    account?: pulumi.Input<inputs.GetNotificationAccountSubscriptionAccountArgs>;
    accountMoid?: pulumi.Input<string>;
    actions?: pulumi.Input<pulumi.Input<inputs.GetNotificationAccountSubscriptionActionArgs>[]>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetNotificationAccountSubscriptionAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    conditions?: pulumi.Input<pulumi.Input<inputs.GetNotificationAccountSubscriptionConditionArgs>[]>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetNotificationAccountSubscriptionParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetNotificationAccountSubscriptionPermissionResourceArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetNotificationAccountSubscriptionTagArgs>[]>;
    type?: pulumi.Input<string>;
    verify?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetNotificationAccountSubscriptionVersionContextArgs>;
}
