// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getComputeRackUnit(args?: GetComputeRackUnitArgs, opts?: pulumi.InvokeOptions): Promise<GetComputeRackUnitResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getComputeRackUnit:getComputeRackUnit", {
        "accountMoid": args.accountMoid,
        "adapters": args.adapters,
        "additionalProperties": args.additionalProperties,
        "adminPowerState": args.adminPowerState,
        "alarmSummary": args.alarmSummary,
        "ancestors": args.ancestors,
        "assetTag": args.assetTag,
        "availableMemory": args.availableMemory,
        "biosBootmode": args.biosBootmode,
        "biosPostComplete": args.biosPostComplete,
        "biosTokenSettings": args.biosTokenSettings,
        "biosVfSelectMemoryRasConfiguration": args.biosVfSelectMemoryRasConfiguration,
        "biosunits": args.biosunits,
        "bmc": args.bmc,
        "board": args.board,
        "bootCddDevices": args.bootCddDevices,
        "bootDeviceBootSecurity": args.bootDeviceBootSecurity,
        "bootDeviceBootmode": args.bootDeviceBootmode,
        "bootHddDevices": args.bootHddDevices,
        "bootIscsiDevices": args.bootIscsiDevices,
        "bootNvmeDevices": args.bootNvmeDevices,
        "bootPchStorageDevices": args.bootPchStorageDevices,
        "bootPxeDevices": args.bootPxeDevices,
        "bootSanDevices": args.bootSanDevices,
        "bootSdDevices": args.bootSdDevices,
        "bootUefiShellDevices": args.bootUefiShellDevices,
        "bootUsbDevices": args.bootUsbDevices,
        "bootVmediaDevices": args.bootVmediaDevices,
        "classId": args.classId,
        "computePersonalities": args.computePersonalities,
        "connectionStatus": args.connectionStatus,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "fanmodules": args.fanmodules,
        "faultSummary": args.faultSummary,
        "frontPanelLockState": args.frontPanelLockState,
        "genericInventoryHolders": args.genericInventoryHolders,
        "graphicsCards": args.graphicsCards,
        "hardwareUuid": args.hardwareUuid,
        "hybridDriveSlots": args.hybridDriveSlots,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "isUpgraded": args.isUpgraded,
        "kvmIpAddresses": args.kvmIpAddresses,
        "kvmServerStateEnabled": args.kvmServerStateEnabled,
        "kvmVendor": args.kvmVendor,
        "locatorLed": args.locatorLed,
        "managementMode": args.managementMode,
        "memoryArrays": args.memoryArrays,
        "memorySpeed": args.memorySpeed,
        "mgmtIdentity": args.mgmtIdentity,
        "mgmtIpAddress": args.mgmtIpAddress,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "name": args.name,
        "nrLifecycle": args.nrLifecycle,
        "numAdaptors": args.numAdaptors,
        "numCpuCores": args.numCpuCores,
        "numCpuCoresEnabled": args.numCpuCoresEnabled,
        "numCpus": args.numCpus,
        "numEthHostInterfaces": args.numEthHostInterfaces,
        "numFcHostInterfaces": args.numFcHostInterfaces,
        "numThreads": args.numThreads,
        "objectType": args.objectType,
        "operPowerState": args.operPowerState,
        "operReasons": args.operReasons,
        "operState": args.operState,
        "operability": args.operability,
        "owners": args.owners,
        "parent": args.parent,
        "pciDevices": args.pciDevices,
        "permissionResources": args.permissionResources,
        "platformType": args.platformType,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "processors": args.processors,
        "psuses": args.psuses,
        "rackEnclosureSlot": args.rackEnclosureSlot,
        "registeredDevice": args.registeredDevice,
        "revision": args.revision,
        "rn": args.rn,
        "sasExpanders": args.sasExpanders,
        "serial": args.serial,
        "serverId": args.serverId,
        "serviceProfile": args.serviceProfile,
        "sharedScope": args.sharedScope,
        "storageControllers": args.storageControllers,
        "storageEnclosures": args.storageEnclosures,
        "tags": args.tags,
        "topSystem": args.topSystem,
        "topologyScanStatus": args.topologyScanStatus,
        "totalMemory": args.totalMemory,
        "tunneledKvm": args.tunneledKvm,
        "unitPersonalities": args.unitPersonalities,
        "userLabel": args.userLabel,
        "uuid": args.uuid,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
        "vmedia": args.vmedia,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getComputeRackUnit.
 */
export interface GetComputeRackUnitArgs {
    accountMoid?: string;
    adapters?: inputs.GetComputeRackUnitAdapter[];
    additionalProperties?: string;
    adminPowerState?: string;
    alarmSummary?: inputs.GetComputeRackUnitAlarmSummary;
    ancestors?: inputs.GetComputeRackUnitAncestor[];
    assetTag?: string;
    availableMemory?: number;
    biosBootmode?: inputs.GetComputeRackUnitBiosBootmode;
    biosPostComplete?: boolean;
    biosTokenSettings?: inputs.GetComputeRackUnitBiosTokenSettings;
    biosVfSelectMemoryRasConfiguration?: inputs.GetComputeRackUnitBiosVfSelectMemoryRasConfiguration;
    biosunits?: inputs.GetComputeRackUnitBiosunit[];
    bmc?: inputs.GetComputeRackUnitBmc;
    board?: inputs.GetComputeRackUnitBoard;
    bootCddDevices?: inputs.GetComputeRackUnitBootCddDevice[];
    bootDeviceBootSecurity?: inputs.GetComputeRackUnitBootDeviceBootSecurity;
    bootDeviceBootmode?: inputs.GetComputeRackUnitBootDeviceBootmode;
    bootHddDevices?: inputs.GetComputeRackUnitBootHddDevice[];
    bootIscsiDevices?: inputs.GetComputeRackUnitBootIscsiDevice[];
    bootNvmeDevices?: inputs.GetComputeRackUnitBootNvmeDevice[];
    bootPchStorageDevices?: inputs.GetComputeRackUnitBootPchStorageDevice[];
    bootPxeDevices?: inputs.GetComputeRackUnitBootPxeDevice[];
    bootSanDevices?: inputs.GetComputeRackUnitBootSanDevice[];
    bootSdDevices?: inputs.GetComputeRackUnitBootSdDevice[];
    bootUefiShellDevices?: inputs.GetComputeRackUnitBootUefiShellDevice[];
    bootUsbDevices?: inputs.GetComputeRackUnitBootUsbDevice[];
    bootVmediaDevices?: inputs.GetComputeRackUnitBootVmediaDevice[];
    classId?: string;
    computePersonalities?: inputs.GetComputeRackUnitComputePersonality[];
    connectionStatus?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    fanmodules?: inputs.GetComputeRackUnitFanmodule[];
    faultSummary?: number;
    frontPanelLockState?: string;
    genericInventoryHolders?: inputs.GetComputeRackUnitGenericInventoryHolder[];
    graphicsCards?: inputs.GetComputeRackUnitGraphicsCard[];
    hardwareUuid?: string;
    hybridDriveSlots?: inputs.GetComputeRackUnitHybridDriveSlot[];
    id?: string;
    inventoryDeviceInfo?: inputs.GetComputeRackUnitInventoryDeviceInfo;
    isUpgraded?: boolean;
    kvmIpAddresses?: inputs.GetComputeRackUnitKvmIpAddress[];
    kvmServerStateEnabled?: boolean;
    kvmVendor?: string;
    locatorLed?: inputs.GetComputeRackUnitLocatorLed;
    managementMode?: string;
    memoryArrays?: inputs.GetComputeRackUnitMemoryArray[];
    memorySpeed?: string;
    mgmtIdentity?: inputs.GetComputeRackUnitMgmtIdentity;
    mgmtIpAddress?: string;
    modTime?: string;
    model?: string;
    moid?: string;
    name?: string;
    nrLifecycle?: string;
    numAdaptors?: number;
    numCpuCores?: number;
    numCpuCoresEnabled?: number;
    numCpus?: number;
    numEthHostInterfaces?: number;
    numFcHostInterfaces?: number;
    numThreads?: number;
    objectType?: string;
    operPowerState?: string;
    operReasons?: string[];
    operState?: string;
    operability?: string;
    owners?: string[];
    parent?: inputs.GetComputeRackUnitParent;
    pciDevices?: inputs.GetComputeRackUnitPciDevice[];
    permissionResources?: inputs.GetComputeRackUnitPermissionResource[];
    platformType?: string;
    presence?: string;
    previousFru?: inputs.GetComputeRackUnitPreviousFru;
    processors?: inputs.GetComputeRackUnitProcessor[];
    psuses?: inputs.GetComputeRackUnitPsus[];
    rackEnclosureSlot?: inputs.GetComputeRackUnitRackEnclosureSlot;
    registeredDevice?: inputs.GetComputeRackUnitRegisteredDevice;
    revision?: string;
    rn?: string;
    sasExpanders?: inputs.GetComputeRackUnitSasExpander[];
    serial?: string;
    serverId?: number;
    serviceProfile?: string;
    sharedScope?: string;
    storageControllers?: inputs.GetComputeRackUnitStorageController[];
    storageEnclosures?: inputs.GetComputeRackUnitStorageEnclosure[];
    tags?: inputs.GetComputeRackUnitTag[];
    topSystem?: inputs.GetComputeRackUnitTopSystem;
    topologyScanStatus?: string;
    totalMemory?: number;
    tunneledKvm?: boolean;
    unitPersonalities?: inputs.GetComputeRackUnitUnitPersonality[];
    userLabel?: string;
    uuid?: string;
    vendor?: string;
    versionContext?: inputs.GetComputeRackUnitVersionContext;
    vmedia?: inputs.GetComputeRackUnitVmedia;
}

/**
 * A collection of values returned by getComputeRackUnit.
 */
export interface GetComputeRackUnitResult {
    readonly accountMoid?: string;
    readonly adapters?: outputs.GetComputeRackUnitAdapter[];
    readonly additionalProperties?: string;
    readonly adminPowerState?: string;
    readonly alarmSummary?: outputs.GetComputeRackUnitAlarmSummary;
    readonly ancestors?: outputs.GetComputeRackUnitAncestor[];
    readonly assetTag?: string;
    readonly availableMemory?: number;
    readonly biosBootmode?: outputs.GetComputeRackUnitBiosBootmode;
    readonly biosPostComplete?: boolean;
    readonly biosTokenSettings?: outputs.GetComputeRackUnitBiosTokenSettings;
    readonly biosVfSelectMemoryRasConfiguration?: outputs.GetComputeRackUnitBiosVfSelectMemoryRasConfiguration;
    readonly biosunits?: outputs.GetComputeRackUnitBiosunit[];
    readonly bmc?: outputs.GetComputeRackUnitBmc;
    readonly board?: outputs.GetComputeRackUnitBoard;
    readonly bootCddDevices?: outputs.GetComputeRackUnitBootCddDevice[];
    readonly bootDeviceBootSecurity?: outputs.GetComputeRackUnitBootDeviceBootSecurity;
    readonly bootDeviceBootmode?: outputs.GetComputeRackUnitBootDeviceBootmode;
    readonly bootHddDevices?: outputs.GetComputeRackUnitBootHddDevice[];
    readonly bootIscsiDevices?: outputs.GetComputeRackUnitBootIscsiDevice[];
    readonly bootNvmeDevices?: outputs.GetComputeRackUnitBootNvmeDevice[];
    readonly bootPchStorageDevices?: outputs.GetComputeRackUnitBootPchStorageDevice[];
    readonly bootPxeDevices?: outputs.GetComputeRackUnitBootPxeDevice[];
    readonly bootSanDevices?: outputs.GetComputeRackUnitBootSanDevice[];
    readonly bootSdDevices?: outputs.GetComputeRackUnitBootSdDevice[];
    readonly bootUefiShellDevices?: outputs.GetComputeRackUnitBootUefiShellDevice[];
    readonly bootUsbDevices?: outputs.GetComputeRackUnitBootUsbDevice[];
    readonly bootVmediaDevices?: outputs.GetComputeRackUnitBootVmediaDevice[];
    readonly classId?: string;
    readonly computePersonalities?: outputs.GetComputeRackUnitComputePersonality[];
    readonly connectionStatus?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly fanmodules?: outputs.GetComputeRackUnitFanmodule[];
    readonly faultSummary?: number;
    readonly frontPanelLockState?: string;
    readonly genericInventoryHolders?: outputs.GetComputeRackUnitGenericInventoryHolder[];
    readonly graphicsCards?: outputs.GetComputeRackUnitGraphicsCard[];
    readonly hardwareUuid?: string;
    readonly hybridDriveSlots?: outputs.GetComputeRackUnitHybridDriveSlot[];
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetComputeRackUnitInventoryDeviceInfo;
    readonly isUpgraded?: boolean;
    readonly kvmIpAddresses?: outputs.GetComputeRackUnitKvmIpAddress[];
    readonly kvmServerStateEnabled?: boolean;
    readonly kvmVendor?: string;
    readonly locatorLed?: outputs.GetComputeRackUnitLocatorLed;
    readonly managementMode?: string;
    readonly memoryArrays?: outputs.GetComputeRackUnitMemoryArray[];
    readonly memorySpeed?: string;
    readonly mgmtIdentity?: outputs.GetComputeRackUnitMgmtIdentity;
    readonly mgmtIpAddress?: string;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nrLifecycle?: string;
    readonly numAdaptors?: number;
    readonly numCpuCores?: number;
    readonly numCpuCoresEnabled?: number;
    readonly numCpus?: number;
    readonly numEthHostInterfaces?: number;
    readonly numFcHostInterfaces?: number;
    readonly numThreads?: number;
    readonly objectType?: string;
    readonly operPowerState?: string;
    readonly operReasons?: string[];
    readonly operState?: string;
    readonly operability?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetComputeRackUnitParent;
    readonly pciDevices?: outputs.GetComputeRackUnitPciDevice[];
    readonly permissionResources?: outputs.GetComputeRackUnitPermissionResource[];
    readonly platformType?: string;
    readonly presence?: string;
    readonly previousFru?: outputs.GetComputeRackUnitPreviousFru;
    readonly processors?: outputs.GetComputeRackUnitProcessor[];
    readonly psuses?: outputs.GetComputeRackUnitPsus[];
    readonly rackEnclosureSlot?: outputs.GetComputeRackUnitRackEnclosureSlot;
    readonly registeredDevice?: outputs.GetComputeRackUnitRegisteredDevice;
    readonly results: outputs.GetComputeRackUnitResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly sasExpanders?: outputs.GetComputeRackUnitSasExpander[];
    readonly serial?: string;
    readonly serverId?: number;
    readonly serviceProfile?: string;
    readonly sharedScope?: string;
    readonly storageControllers?: outputs.GetComputeRackUnitStorageController[];
    readonly storageEnclosures?: outputs.GetComputeRackUnitStorageEnclosure[];
    readonly tags?: outputs.GetComputeRackUnitTag[];
    readonly topSystem?: outputs.GetComputeRackUnitTopSystem;
    readonly topologyScanStatus?: string;
    readonly totalMemory?: number;
    readonly tunneledKvm?: boolean;
    readonly unitPersonalities?: outputs.GetComputeRackUnitUnitPersonality[];
    readonly userLabel?: string;
    readonly uuid?: string;
    readonly vendor?: string;
    readonly versionContext?: outputs.GetComputeRackUnitVersionContext;
    readonly vmedia?: outputs.GetComputeRackUnitVmedia;
}
export function getComputeRackUnitOutput(args?: GetComputeRackUnitOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetComputeRackUnitResult> {
    return pulumi.output(args).apply((a: any) => getComputeRackUnit(a, opts))
}

/**
 * A collection of arguments for invoking getComputeRackUnit.
 */
export interface GetComputeRackUnitOutputArgs {
    accountMoid?: pulumi.Input<string>;
    adapters?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitAdapterArgs>[]>;
    additionalProperties?: pulumi.Input<string>;
    adminPowerState?: pulumi.Input<string>;
    alarmSummary?: pulumi.Input<inputs.GetComputeRackUnitAlarmSummaryArgs>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitAncestorArgs>[]>;
    assetTag?: pulumi.Input<string>;
    availableMemory?: pulumi.Input<number>;
    biosBootmode?: pulumi.Input<inputs.GetComputeRackUnitBiosBootmodeArgs>;
    biosPostComplete?: pulumi.Input<boolean>;
    biosTokenSettings?: pulumi.Input<inputs.GetComputeRackUnitBiosTokenSettingsArgs>;
    biosVfSelectMemoryRasConfiguration?: pulumi.Input<inputs.GetComputeRackUnitBiosVfSelectMemoryRasConfigurationArgs>;
    biosunits?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitBiosunitArgs>[]>;
    bmc?: pulumi.Input<inputs.GetComputeRackUnitBmcArgs>;
    board?: pulumi.Input<inputs.GetComputeRackUnitBoardArgs>;
    bootCddDevices?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitBootCddDeviceArgs>[]>;
    bootDeviceBootSecurity?: pulumi.Input<inputs.GetComputeRackUnitBootDeviceBootSecurityArgs>;
    bootDeviceBootmode?: pulumi.Input<inputs.GetComputeRackUnitBootDeviceBootmodeArgs>;
    bootHddDevices?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitBootHddDeviceArgs>[]>;
    bootIscsiDevices?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitBootIscsiDeviceArgs>[]>;
    bootNvmeDevices?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitBootNvmeDeviceArgs>[]>;
    bootPchStorageDevices?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitBootPchStorageDeviceArgs>[]>;
    bootPxeDevices?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitBootPxeDeviceArgs>[]>;
    bootSanDevices?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitBootSanDeviceArgs>[]>;
    bootSdDevices?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitBootSdDeviceArgs>[]>;
    bootUefiShellDevices?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitBootUefiShellDeviceArgs>[]>;
    bootUsbDevices?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitBootUsbDeviceArgs>[]>;
    bootVmediaDevices?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitBootVmediaDeviceArgs>[]>;
    classId?: pulumi.Input<string>;
    computePersonalities?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitComputePersonalityArgs>[]>;
    connectionStatus?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    fanmodules?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitFanmoduleArgs>[]>;
    faultSummary?: pulumi.Input<number>;
    frontPanelLockState?: pulumi.Input<string>;
    genericInventoryHolders?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitGenericInventoryHolderArgs>[]>;
    graphicsCards?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitGraphicsCardArgs>[]>;
    hardwareUuid?: pulumi.Input<string>;
    hybridDriveSlots?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitHybridDriveSlotArgs>[]>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetComputeRackUnitInventoryDeviceInfoArgs>;
    isUpgraded?: pulumi.Input<boolean>;
    kvmIpAddresses?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitKvmIpAddressArgs>[]>;
    kvmServerStateEnabled?: pulumi.Input<boolean>;
    kvmVendor?: pulumi.Input<string>;
    locatorLed?: pulumi.Input<inputs.GetComputeRackUnitLocatorLedArgs>;
    managementMode?: pulumi.Input<string>;
    memoryArrays?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitMemoryArrayArgs>[]>;
    memorySpeed?: pulumi.Input<string>;
    mgmtIdentity?: pulumi.Input<inputs.GetComputeRackUnitMgmtIdentityArgs>;
    mgmtIpAddress?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nrLifecycle?: pulumi.Input<string>;
    numAdaptors?: pulumi.Input<number>;
    numCpuCores?: pulumi.Input<number>;
    numCpuCoresEnabled?: pulumi.Input<number>;
    numCpus?: pulumi.Input<number>;
    numEthHostInterfaces?: pulumi.Input<number>;
    numFcHostInterfaces?: pulumi.Input<number>;
    numThreads?: pulumi.Input<number>;
    objectType?: pulumi.Input<string>;
    operPowerState?: pulumi.Input<string>;
    operReasons?: pulumi.Input<pulumi.Input<string>[]>;
    operState?: pulumi.Input<string>;
    operability?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetComputeRackUnitParentArgs>;
    pciDevices?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitPciDeviceArgs>[]>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitPermissionResourceArgs>[]>;
    platformType?: pulumi.Input<string>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetComputeRackUnitPreviousFruArgs>;
    processors?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitProcessorArgs>[]>;
    psuses?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitPsusArgs>[]>;
    rackEnclosureSlot?: pulumi.Input<inputs.GetComputeRackUnitRackEnclosureSlotArgs>;
    registeredDevice?: pulumi.Input<inputs.GetComputeRackUnitRegisteredDeviceArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    sasExpanders?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitSasExpanderArgs>[]>;
    serial?: pulumi.Input<string>;
    serverId?: pulumi.Input<number>;
    serviceProfile?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    storageControllers?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitStorageControllerArgs>[]>;
    storageEnclosures?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitStorageEnclosureArgs>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitTagArgs>[]>;
    topSystem?: pulumi.Input<inputs.GetComputeRackUnitTopSystemArgs>;
    topologyScanStatus?: pulumi.Input<string>;
    totalMemory?: pulumi.Input<number>;
    tunneledKvm?: pulumi.Input<boolean>;
    unitPersonalities?: pulumi.Input<pulumi.Input<inputs.GetComputeRackUnitUnitPersonalityArgs>[]>;
    userLabel?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetComputeRackUnitVersionContextArgs>;
    vmedia?: pulumi.Input<inputs.GetComputeRackUnitVmediaArgs>;
}
