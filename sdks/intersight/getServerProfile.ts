// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getServerProfile(args?: GetServerProfileArgs, opts?: pulumi.InvokeOptions): Promise<GetServerProfileResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getServerProfile:getServerProfile", {
        "accountMoid": args.accountMoid,
        "action": args.action,
        "actionParams": args.actionParams,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "assignedServer": args.assignedServer,
        "associatedServer": args.associatedServer,
        "associatedServerPool": args.associatedServerPool,
        "classId": args.classId,
        "configChangeContext": args.configChangeContext,
        "configChangeDetails": args.configChangeDetails,
        "configChanges": args.configChanges,
        "configContext": args.configContext,
        "configResult": args.configResult,
        "createTime": args.createTime,
        "deployStatus": args.deployStatus,
        "deployedSwitches": args.deployedSwitches,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "internalReservationReferences": args.internalReservationReferences,
        "isPmcDeployedSecurePassphraseSet": args.isPmcDeployedSecurePassphraseSet,
        "leasedServer": args.leasedServer,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "organization": args.organization,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "pmcDeployedSecurePassphrase": args.pmcDeployedSecurePassphrase,
        "policyBuckets": args.policyBuckets,
        "reservationReferences": args.reservationReferences,
        "resourceLease": args.resourceLease,
        "runningWorkflows": args.runningWorkflows,
        "scheduledActions": args.scheduledActions,
        "serverAssignmentMode": args.serverAssignmentMode,
        "serverPool": args.serverPool,
        "serverPreAssignBySerial": args.serverPreAssignBySerial,
        "serverPreAssignBySlot": args.serverPreAssignBySlot,
        "sharedScope": args.sharedScope,
        "srcTemplate": args.srcTemplate,
        "staticUuidAddress": args.staticUuidAddress,
        "tags": args.tags,
        "targetPlatform": args.targetPlatform,
        "type": args.type,
        "userLabel": args.userLabel,
        "uuid": args.uuid,
        "uuidAddressType": args.uuidAddressType,
        "uuidLease": args.uuidLease,
        "uuidPool": args.uuidPool,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getServerProfile.
 */
export interface GetServerProfileArgs {
    accountMoid?: string;
    action?: string;
    actionParams?: inputs.GetServerProfileActionParam[];
    additionalProperties?: string;
    ancestors?: inputs.GetServerProfileAncestor[];
    assignedServer?: inputs.GetServerProfileAssignedServer;
    associatedServer?: inputs.GetServerProfileAssociatedServer;
    associatedServerPool?: inputs.GetServerProfileAssociatedServerPool;
    classId?: string;
    configChangeContext?: inputs.GetServerProfileConfigChangeContext;
    configChangeDetails?: inputs.GetServerProfileConfigChangeDetail[];
    configChanges?: inputs.GetServerProfileConfigChanges;
    configContext?: inputs.GetServerProfileConfigContext;
    configResult?: inputs.GetServerProfileConfigResult;
    createTime?: string;
    deployStatus?: string;
    deployedSwitches?: string;
    description?: string;
    domainGroupMoid?: string;
    id?: string;
    internalReservationReferences?: inputs.GetServerProfileInternalReservationReference[];
    isPmcDeployedSecurePassphraseSet?: boolean;
    leasedServer?: inputs.GetServerProfileLeasedServer;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    organization?: inputs.GetServerProfileOrganization;
    owners?: string[];
    parent?: inputs.GetServerProfileParent;
    permissionResources?: inputs.GetServerProfilePermissionResource[];
    pmcDeployedSecurePassphrase?: string;
    policyBuckets?: inputs.GetServerProfilePolicyBucket[];
    reservationReferences?: inputs.GetServerProfileReservationReference[];
    resourceLease?: inputs.GetServerProfileResourceLease;
    runningWorkflows?: inputs.GetServerProfileRunningWorkflow[];
    scheduledActions?: inputs.GetServerProfileScheduledAction[];
    serverAssignmentMode?: string;
    serverPool?: inputs.GetServerProfileServerPool;
    serverPreAssignBySerial?: string;
    serverPreAssignBySlot?: inputs.GetServerProfileServerPreAssignBySlot;
    sharedScope?: string;
    srcTemplate?: inputs.GetServerProfileSrcTemplate;
    staticUuidAddress?: string;
    tags?: inputs.GetServerProfileTag[];
    targetPlatform?: string;
    type?: string;
    userLabel?: string;
    uuid?: string;
    uuidAddressType?: string;
    uuidLease?: inputs.GetServerProfileUuidLease;
    uuidPool?: inputs.GetServerProfileUuidPool;
    versionContext?: inputs.GetServerProfileVersionContext;
}

/**
 * A collection of values returned by getServerProfile.
 */
export interface GetServerProfileResult {
    readonly accountMoid?: string;
    readonly action?: string;
    readonly actionParams?: outputs.GetServerProfileActionParam[];
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetServerProfileAncestor[];
    readonly assignedServer?: outputs.GetServerProfileAssignedServer;
    readonly associatedServer?: outputs.GetServerProfileAssociatedServer;
    readonly associatedServerPool?: outputs.GetServerProfileAssociatedServerPool;
    readonly classId?: string;
    readonly configChangeContext?: outputs.GetServerProfileConfigChangeContext;
    readonly configChangeDetails?: outputs.GetServerProfileConfigChangeDetail[];
    readonly configChanges?: outputs.GetServerProfileConfigChanges;
    readonly configContext?: outputs.GetServerProfileConfigContext;
    readonly configResult?: outputs.GetServerProfileConfigResult;
    readonly createTime?: string;
    readonly deployStatus?: string;
    readonly deployedSwitches?: string;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly internalReservationReferences?: outputs.GetServerProfileInternalReservationReference[];
    readonly isPmcDeployedSecurePassphraseSet?: boolean;
    readonly leasedServer?: outputs.GetServerProfileLeasedServer;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly organization?: outputs.GetServerProfileOrganization;
    readonly owners?: string[];
    readonly parent?: outputs.GetServerProfileParent;
    readonly permissionResources?: outputs.GetServerProfilePermissionResource[];
    readonly pmcDeployedSecurePassphrase?: string;
    readonly policyBuckets?: outputs.GetServerProfilePolicyBucket[];
    readonly reservationReferences?: outputs.GetServerProfileReservationReference[];
    readonly resourceLease?: outputs.GetServerProfileResourceLease;
    readonly results: outputs.GetServerProfileResult[];
    readonly runningWorkflows?: outputs.GetServerProfileRunningWorkflow[];
    readonly scheduledActions?: outputs.GetServerProfileScheduledAction[];
    readonly serverAssignmentMode?: string;
    readonly serverPool?: outputs.GetServerProfileServerPool;
    readonly serverPreAssignBySerial?: string;
    readonly serverPreAssignBySlot?: outputs.GetServerProfileServerPreAssignBySlot;
    readonly sharedScope?: string;
    readonly srcTemplate?: outputs.GetServerProfileSrcTemplate;
    readonly staticUuidAddress?: string;
    readonly tags?: outputs.GetServerProfileTag[];
    readonly targetPlatform?: string;
    readonly type?: string;
    readonly userLabel?: string;
    readonly uuid?: string;
    readonly uuidAddressType?: string;
    readonly uuidLease?: outputs.GetServerProfileUuidLease;
    readonly uuidPool?: outputs.GetServerProfileUuidPool;
    readonly versionContext?: outputs.GetServerProfileVersionContext;
}
export function getServerProfileOutput(args?: GetServerProfileOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServerProfileResult> {
    return pulumi.output(args).apply((a: any) => getServerProfile(a, opts))
}

/**
 * A collection of arguments for invoking getServerProfile.
 */
export interface GetServerProfileOutputArgs {
    accountMoid?: pulumi.Input<string>;
    action?: pulumi.Input<string>;
    actionParams?: pulumi.Input<pulumi.Input<inputs.GetServerProfileActionParamArgs>[]>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetServerProfileAncestorArgs>[]>;
    assignedServer?: pulumi.Input<inputs.GetServerProfileAssignedServerArgs>;
    associatedServer?: pulumi.Input<inputs.GetServerProfileAssociatedServerArgs>;
    associatedServerPool?: pulumi.Input<inputs.GetServerProfileAssociatedServerPoolArgs>;
    classId?: pulumi.Input<string>;
    configChangeContext?: pulumi.Input<inputs.GetServerProfileConfigChangeContextArgs>;
    configChangeDetails?: pulumi.Input<pulumi.Input<inputs.GetServerProfileConfigChangeDetailArgs>[]>;
    configChanges?: pulumi.Input<inputs.GetServerProfileConfigChangesArgs>;
    configContext?: pulumi.Input<inputs.GetServerProfileConfigContextArgs>;
    configResult?: pulumi.Input<inputs.GetServerProfileConfigResultArgs>;
    createTime?: pulumi.Input<string>;
    deployStatus?: pulumi.Input<string>;
    deployedSwitches?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    internalReservationReferences?: pulumi.Input<pulumi.Input<inputs.GetServerProfileInternalReservationReferenceArgs>[]>;
    isPmcDeployedSecurePassphraseSet?: pulumi.Input<boolean>;
    leasedServer?: pulumi.Input<inputs.GetServerProfileLeasedServerArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.GetServerProfileOrganizationArgs>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetServerProfileParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetServerProfilePermissionResourceArgs>[]>;
    pmcDeployedSecurePassphrase?: pulumi.Input<string>;
    policyBuckets?: pulumi.Input<pulumi.Input<inputs.GetServerProfilePolicyBucketArgs>[]>;
    reservationReferences?: pulumi.Input<pulumi.Input<inputs.GetServerProfileReservationReferenceArgs>[]>;
    resourceLease?: pulumi.Input<inputs.GetServerProfileResourceLeaseArgs>;
    runningWorkflows?: pulumi.Input<pulumi.Input<inputs.GetServerProfileRunningWorkflowArgs>[]>;
    scheduledActions?: pulumi.Input<pulumi.Input<inputs.GetServerProfileScheduledActionArgs>[]>;
    serverAssignmentMode?: pulumi.Input<string>;
    serverPool?: pulumi.Input<inputs.GetServerProfileServerPoolArgs>;
    serverPreAssignBySerial?: pulumi.Input<string>;
    serverPreAssignBySlot?: pulumi.Input<inputs.GetServerProfileServerPreAssignBySlotArgs>;
    sharedScope?: pulumi.Input<string>;
    srcTemplate?: pulumi.Input<inputs.GetServerProfileSrcTemplateArgs>;
    staticUuidAddress?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetServerProfileTagArgs>[]>;
    targetPlatform?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    userLabel?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    uuidAddressType?: pulumi.Input<string>;
    uuidLease?: pulumi.Input<inputs.GetServerProfileUuidLeaseArgs>;
    uuidPool?: pulumi.Input<inputs.GetServerProfileUuidPoolArgs>;
    versionContext?: pulumi.Input<inputs.GetServerProfileVersionContextArgs>;
}
