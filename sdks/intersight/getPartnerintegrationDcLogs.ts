// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getPartnerintegrationDcLogs(args?: GetPartnerintegrationDcLogsArgs, opts?: pulumi.InvokeOptions): Promise<GetPartnerintegrationDcLogsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getPartnerintegrationDcLogs:getPartnerintegrationDcLogs", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceConnector": args.deviceConnector,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "sharedScope": args.sharedScope,
        "stage": args.stage,
        "stderrs": args.stderrs,
        "stdouts": args.stdouts,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPartnerintegrationDcLogs.
 */
export interface GetPartnerintegrationDcLogsArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetPartnerintegrationDcLogsAncestor[];
    classId?: string;
    createTime?: string;
    deviceConnector?: inputs.GetPartnerintegrationDcLogsDeviceConnector;
    domainGroupMoid?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetPartnerintegrationDcLogsParent;
    permissionResources?: inputs.GetPartnerintegrationDcLogsPermissionResource[];
    sharedScope?: string;
    stage?: string;
    stderrs?: string[];
    stdouts?: string[];
    tags?: inputs.GetPartnerintegrationDcLogsTag[];
    versionContext?: inputs.GetPartnerintegrationDcLogsVersionContext;
}

/**
 * A collection of values returned by getPartnerintegrationDcLogs.
 */
export interface GetPartnerintegrationDcLogsResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetPartnerintegrationDcLogsAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceConnector?: outputs.GetPartnerintegrationDcLogsDeviceConnector;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetPartnerintegrationDcLogsParent;
    readonly permissionResources?: outputs.GetPartnerintegrationDcLogsPermissionResource[];
    readonly results: outputs.GetPartnerintegrationDcLogsResult[];
    readonly sharedScope?: string;
    readonly stage?: string;
    readonly stderrs?: string[];
    readonly stdouts?: string[];
    readonly tags?: outputs.GetPartnerintegrationDcLogsTag[];
    readonly versionContext?: outputs.GetPartnerintegrationDcLogsVersionContext;
}
export function getPartnerintegrationDcLogsOutput(args?: GetPartnerintegrationDcLogsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPartnerintegrationDcLogsResult> {
    return pulumi.output(args).apply((a: any) => getPartnerintegrationDcLogs(a, opts))
}

/**
 * A collection of arguments for invoking getPartnerintegrationDcLogs.
 */
export interface GetPartnerintegrationDcLogsOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetPartnerintegrationDcLogsAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceConnector?: pulumi.Input<inputs.GetPartnerintegrationDcLogsDeviceConnectorArgs>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetPartnerintegrationDcLogsParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetPartnerintegrationDcLogsPermissionResourceArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    stage?: pulumi.Input<string>;
    stderrs?: pulumi.Input<pulumi.Input<string>[]>;
    stdouts?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetPartnerintegrationDcLogsTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetPartnerintegrationDcLogsVersionContextArgs>;
}
