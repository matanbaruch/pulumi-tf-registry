// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageFlexFlashControllerProps(args?: GetStorageFlexFlashControllerPropsArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageFlexFlashControllerPropsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageFlexFlashControllerProps:getStorageFlexFlashControllerProps", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "cardsManageable": args.cardsManageable,
        "classId": args.classId,
        "configuredMode": args.configuredMode,
        "controllerName": args.controllerName,
        "controllerStatus": args.controllerStatus,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "fwVersion": args.fwVersion,
        "id": args.id,
        "internalState": args.internalState,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "isUpgraded": args.isUpgraded,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "objectType": args.objectType,
        "operatingMode": args.operatingMode,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "physicalDriveCount": args.physicalDriveCount,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "productName": args.productName,
        "registeredDevice": args.registeredDevice,
        "revision": args.revision,
        "rn": args.rn,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "startupFwVersion": args.startupFwVersion,
        "storageFlexFlashController": args.storageFlexFlashController,
        "tags": args.tags,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
        "virtualDriveCount": args.virtualDriveCount,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageFlexFlashControllerProps.
 */
export interface GetStorageFlexFlashControllerPropsArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageFlexFlashControllerPropsAncestor[];
    cardsManageable?: string;
    classId?: string;
    configuredMode?: string;
    controllerName?: string;
    controllerStatus?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    fwVersion?: string;
    id?: string;
    internalState?: string;
    inventoryDeviceInfo?: inputs.GetStorageFlexFlashControllerPropsInventoryDeviceInfo;
    isUpgraded?: boolean;
    modTime?: string;
    model?: string;
    moid?: string;
    objectType?: string;
    operatingMode?: string;
    owners?: string[];
    parent?: inputs.GetStorageFlexFlashControllerPropsParent;
    permissionResources?: inputs.GetStorageFlexFlashControllerPropsPermissionResource[];
    physicalDriveCount?: string;
    presence?: string;
    previousFru?: inputs.GetStorageFlexFlashControllerPropsPreviousFru;
    productName?: string;
    registeredDevice?: inputs.GetStorageFlexFlashControllerPropsRegisteredDevice;
    revision?: string;
    rn?: string;
    serial?: string;
    sharedScope?: string;
    startupFwVersion?: string;
    storageFlexFlashController?: inputs.GetStorageFlexFlashControllerPropsStorageFlexFlashController;
    tags?: inputs.GetStorageFlexFlashControllerPropsTag[];
    vendor?: string;
    versionContext?: inputs.GetStorageFlexFlashControllerPropsVersionContext;
    virtualDriveCount?: string;
}

/**
 * A collection of values returned by getStorageFlexFlashControllerProps.
 */
export interface GetStorageFlexFlashControllerPropsResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageFlexFlashControllerPropsAncestor[];
    readonly cardsManageable?: string;
    readonly classId?: string;
    readonly configuredMode?: string;
    readonly controllerName?: string;
    readonly controllerStatus?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly fwVersion?: string;
    readonly id: string;
    readonly internalState?: string;
    readonly inventoryDeviceInfo?: outputs.GetStorageFlexFlashControllerPropsInventoryDeviceInfo;
    readonly isUpgraded?: boolean;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly operatingMode?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageFlexFlashControllerPropsParent;
    readonly permissionResources?: outputs.GetStorageFlexFlashControllerPropsPermissionResource[];
    readonly physicalDriveCount?: string;
    readonly presence?: string;
    readonly previousFru?: outputs.GetStorageFlexFlashControllerPropsPreviousFru;
    readonly productName?: string;
    readonly registeredDevice?: outputs.GetStorageFlexFlashControllerPropsRegisteredDevice;
    readonly results: outputs.GetStorageFlexFlashControllerPropsResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly startupFwVersion?: string;
    readonly storageFlexFlashController?: outputs.GetStorageFlexFlashControllerPropsStorageFlexFlashController;
    readonly tags?: outputs.GetStorageFlexFlashControllerPropsTag[];
    readonly vendor?: string;
    readonly versionContext?: outputs.GetStorageFlexFlashControllerPropsVersionContext;
    readonly virtualDriveCount?: string;
}
export function getStorageFlexFlashControllerPropsOutput(args?: GetStorageFlexFlashControllerPropsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageFlexFlashControllerPropsResult> {
    return pulumi.output(args).apply((a: any) => getStorageFlexFlashControllerProps(a, opts))
}

/**
 * A collection of arguments for invoking getStorageFlexFlashControllerProps.
 */
export interface GetStorageFlexFlashControllerPropsOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageFlexFlashControllerPropsAncestorArgs>[]>;
    cardsManageable?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    configuredMode?: pulumi.Input<string>;
    controllerName?: pulumi.Input<string>;
    controllerStatus?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    fwVersion?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    internalState?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetStorageFlexFlashControllerPropsInventoryDeviceInfoArgs>;
    isUpgraded?: pulumi.Input<boolean>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operatingMode?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageFlexFlashControllerPropsParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageFlexFlashControllerPropsPermissionResourceArgs>[]>;
    physicalDriveCount?: pulumi.Input<string>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetStorageFlexFlashControllerPropsPreviousFruArgs>;
    productName?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetStorageFlexFlashControllerPropsRegisteredDeviceArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    startupFwVersion?: pulumi.Input<string>;
    storageFlexFlashController?: pulumi.Input<inputs.GetStorageFlexFlashControllerPropsStorageFlexFlashControllerArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageFlexFlashControllerPropsTagArgs>[]>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetStorageFlexFlashControllerPropsVersionContextArgs>;
    virtualDriveCount?: pulumi.Input<string>;
}
