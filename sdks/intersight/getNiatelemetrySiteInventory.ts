// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNiatelemetrySiteInventory(args?: GetNiatelemetrySiteInventoryArgs, opts?: pulumi.InvokeOptions): Promise<GetNiatelemetrySiteInventoryResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getNiatelemetrySiteInventory:getNiatelemetrySiteInventory", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "apps": args.apps,
        "classId": args.classId,
        "connectivityAnalysisCount": args.connectivityAnalysisCount,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "firmwareVersion": args.firmwareVersion,
        "id": args.id,
        "installType": args.installType,
        "ipAddresses": args.ipAddresses,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "nexusDashboard": args.nexusDashboard,
        "nodes": args.nodes,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "recordType": args.recordType,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "type": args.type,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNiatelemetrySiteInventory.
 */
export interface GetNiatelemetrySiteInventoryArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetNiatelemetrySiteInventoryAncestor[];
    apps?: string[];
    classId?: string;
    connectivityAnalysisCount?: number;
    createTime?: string;
    domainGroupMoid?: string;
    firmwareVersion?: string;
    id?: string;
    installType?: string;
    ipAddresses?: string[];
    modTime?: string;
    moid?: string;
    name?: string;
    nexusDashboard?: string;
    nodes?: number;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetNiatelemetrySiteInventoryParent;
    permissionResources?: inputs.GetNiatelemetrySiteInventoryPermissionResource[];
    recordType?: string;
    registeredDevice?: inputs.GetNiatelemetrySiteInventoryRegisteredDevice;
    sharedScope?: string;
    tags?: inputs.GetNiatelemetrySiteInventoryTag[];
    type?: string;
    versionContext?: inputs.GetNiatelemetrySiteInventoryVersionContext;
}

/**
 * A collection of values returned by getNiatelemetrySiteInventory.
 */
export interface GetNiatelemetrySiteInventoryResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetNiatelemetrySiteInventoryAncestor[];
    readonly apps?: string[];
    readonly classId?: string;
    readonly connectivityAnalysisCount?: number;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly firmwareVersion?: string;
    readonly id: string;
    readonly installType?: string;
    readonly ipAddresses?: string[];
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nexusDashboard?: string;
    readonly nodes?: number;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetNiatelemetrySiteInventoryParent;
    readonly permissionResources?: outputs.GetNiatelemetrySiteInventoryPermissionResource[];
    readonly recordType?: string;
    readonly registeredDevice?: outputs.GetNiatelemetrySiteInventoryRegisteredDevice;
    readonly results: outputs.GetNiatelemetrySiteInventoryResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetNiatelemetrySiteInventoryTag[];
    readonly type?: string;
    readonly versionContext?: outputs.GetNiatelemetrySiteInventoryVersionContext;
}
export function getNiatelemetrySiteInventoryOutput(args?: GetNiatelemetrySiteInventoryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNiatelemetrySiteInventoryResult> {
    return pulumi.output(args).apply((a: any) => getNiatelemetrySiteInventory(a, opts))
}

/**
 * A collection of arguments for invoking getNiatelemetrySiteInventory.
 */
export interface GetNiatelemetrySiteInventoryOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetrySiteInventoryAncestorArgs>[]>;
    apps?: pulumi.Input<pulumi.Input<string>[]>;
    classId?: pulumi.Input<string>;
    connectivityAnalysisCount?: pulumi.Input<number>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    firmwareVersion?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    installType?: pulumi.Input<string>;
    ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nexusDashboard?: pulumi.Input<string>;
    nodes?: pulumi.Input<number>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetNiatelemetrySiteInventoryParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetrySiteInventoryPermissionResourceArgs>[]>;
    recordType?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetNiatelemetrySiteInventoryRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetrySiteInventoryTagArgs>[]>;
    type?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetNiatelemetrySiteInventoryVersionContextArgs>;
}
