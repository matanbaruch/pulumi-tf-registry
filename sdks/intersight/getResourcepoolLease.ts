// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getResourcepoolLease(args?: GetResourcepoolLeaseArgs, opts?: pulumi.InvokeOptions): Promise<GetResourcepoolLeaseResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getResourcepoolLease:getResourcepoolLease", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "allocationType": args.allocationType,
        "ancestors": args.ancestors,
        "assignedToEntity": args.assignedToEntity,
        "classId": args.classId,
        "conditions": args.conditions,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "feature": args.feature,
        "hasDuplicate": args.hasDuplicate,
        "id": args.id,
        "isExclusiveAtAssignedEntity": args.isExclusiveAtAssignedEntity,
        "leaseParameters": args.leaseParameters,
        "leasedResource": args.leasedResource,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "pool": args.pool,
        "poolMember": args.poolMember,
        "resource": args.resource,
        "resourceType": args.resourceType,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "universe": args.universe,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getResourcepoolLease.
 */
export interface GetResourcepoolLeaseArgs {
    accountMoid?: string;
    additionalProperties?: string;
    allocationType?: string;
    ancestors?: inputs.GetResourcepoolLeaseAncestor[];
    assignedToEntity?: inputs.GetResourcepoolLeaseAssignedToEntity;
    classId?: string;
    conditions?: inputs.GetResourcepoolLeaseCondition[];
    createTime?: string;
    domainGroupMoid?: string;
    feature?: string;
    hasDuplicate?: boolean;
    id?: string;
    isExclusiveAtAssignedEntity?: boolean;
    leaseParameters?: inputs.GetResourcepoolLeaseLeaseParameters;
    leasedResource?: inputs.GetResourcepoolLeaseLeasedResource;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetResourcepoolLeaseParent;
    permissionResources?: inputs.GetResourcepoolLeasePermissionResource[];
    pool?: inputs.GetResourcepoolLeasePool;
    poolMember?: inputs.GetResourcepoolLeasePoolMember;
    resource?: inputs.GetResourcepoolLeaseResource;
    resourceType?: string;
    sharedScope?: string;
    tags?: inputs.GetResourcepoolLeaseTag[];
    universe?: inputs.GetResourcepoolLeaseUniverse;
    versionContext?: inputs.GetResourcepoolLeaseVersionContext;
}

/**
 * A collection of values returned by getResourcepoolLease.
 */
export interface GetResourcepoolLeaseResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly allocationType?: string;
    readonly ancestors?: outputs.GetResourcepoolLeaseAncestor[];
    readonly assignedToEntity?: outputs.GetResourcepoolLeaseAssignedToEntity;
    readonly classId?: string;
    readonly conditions?: outputs.GetResourcepoolLeaseCondition[];
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly feature?: string;
    readonly hasDuplicate?: boolean;
    readonly id: string;
    readonly isExclusiveAtAssignedEntity?: boolean;
    readonly leaseParameters?: outputs.GetResourcepoolLeaseLeaseParameters;
    readonly leasedResource?: outputs.GetResourcepoolLeaseLeasedResource;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetResourcepoolLeaseParent;
    readonly permissionResources?: outputs.GetResourcepoolLeasePermissionResource[];
    readonly pool?: outputs.GetResourcepoolLeasePool;
    readonly poolMember?: outputs.GetResourcepoolLeasePoolMember;
    readonly resource?: outputs.GetResourcepoolLeaseResource;
    readonly resourceType?: string;
    readonly results: outputs.GetResourcepoolLeaseResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetResourcepoolLeaseTag[];
    readonly universe?: outputs.GetResourcepoolLeaseUniverse;
    readonly versionContext?: outputs.GetResourcepoolLeaseVersionContext;
}
export function getResourcepoolLeaseOutput(args?: GetResourcepoolLeaseOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetResourcepoolLeaseResult> {
    return pulumi.output(args).apply((a: any) => getResourcepoolLease(a, opts))
}

/**
 * A collection of arguments for invoking getResourcepoolLease.
 */
export interface GetResourcepoolLeaseOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    allocationType?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetResourcepoolLeaseAncestorArgs>[]>;
    assignedToEntity?: pulumi.Input<inputs.GetResourcepoolLeaseAssignedToEntityArgs>;
    classId?: pulumi.Input<string>;
    conditions?: pulumi.Input<pulumi.Input<inputs.GetResourcepoolLeaseConditionArgs>[]>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    feature?: pulumi.Input<string>;
    hasDuplicate?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    isExclusiveAtAssignedEntity?: pulumi.Input<boolean>;
    leaseParameters?: pulumi.Input<inputs.GetResourcepoolLeaseLeaseParametersArgs>;
    leasedResource?: pulumi.Input<inputs.GetResourcepoolLeaseLeasedResourceArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetResourcepoolLeaseParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetResourcepoolLeasePermissionResourceArgs>[]>;
    pool?: pulumi.Input<inputs.GetResourcepoolLeasePoolArgs>;
    poolMember?: pulumi.Input<inputs.GetResourcepoolLeasePoolMemberArgs>;
    resource?: pulumi.Input<inputs.GetResourcepoolLeaseResourceArgs>;
    resourceType?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetResourcepoolLeaseTagArgs>[]>;
    universe?: pulumi.Input<inputs.GetResourcepoolLeaseUniverseArgs>;
    versionContext?: pulumi.Input<inputs.GetResourcepoolLeaseVersionContextArgs>;
}
