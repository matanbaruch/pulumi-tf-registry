// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getFabricVsanInventory(args?: GetFabricVsanInventoryArgs, opts?: pulumi.InvokeOptions): Promise<GetFabricVsanInventoryResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getFabricVsanInventory:getFabricVsanInventory", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "adminState": args.adminState,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "interopMode": args.interopMode,
        "loadBalancing": args.loadBalancing,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "networkElement": args.networkElement,
        "objectType": args.objectType,
        "operState": args.operState,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "smartZoning": args.smartZoning,
        "tags": args.tags,
        "versionContext": args.versionContext,
        "vsanId": args.vsanId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFabricVsanInventory.
 */
export interface GetFabricVsanInventoryArgs {
    accountMoid?: string;
    additionalProperties?: string;
    adminState?: string;
    ancestors?: inputs.GetFabricVsanInventoryAncestor[];
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    id?: string;
    interopMode?: string;
    loadBalancing?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    networkElement?: inputs.GetFabricVsanInventoryNetworkElement;
    objectType?: string;
    operState?: string;
    owners?: string[];
    parent?: inputs.GetFabricVsanInventoryParent;
    permissionResources?: inputs.GetFabricVsanInventoryPermissionResource[];
    registeredDevice?: inputs.GetFabricVsanInventoryRegisteredDevice;
    sharedScope?: string;
    smartZoning?: string;
    tags?: inputs.GetFabricVsanInventoryTag[];
    versionContext?: inputs.GetFabricVsanInventoryVersionContext;
    vsanId?: number;
}

/**
 * A collection of values returned by getFabricVsanInventory.
 */
export interface GetFabricVsanInventoryResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly adminState?: string;
    readonly ancestors?: outputs.GetFabricVsanInventoryAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly interopMode?: string;
    readonly loadBalancing?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly networkElement?: outputs.GetFabricVsanInventoryNetworkElement;
    readonly objectType?: string;
    readonly operState?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetFabricVsanInventoryParent;
    readonly permissionResources?: outputs.GetFabricVsanInventoryPermissionResource[];
    readonly registeredDevice?: outputs.GetFabricVsanInventoryRegisteredDevice;
    readonly results: outputs.GetFabricVsanInventoryResult[];
    readonly sharedScope?: string;
    readonly smartZoning?: string;
    readonly tags?: outputs.GetFabricVsanInventoryTag[];
    readonly versionContext?: outputs.GetFabricVsanInventoryVersionContext;
    readonly vsanId?: number;
}
export function getFabricVsanInventoryOutput(args?: GetFabricVsanInventoryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFabricVsanInventoryResult> {
    return pulumi.output(args).apply((a: any) => getFabricVsanInventory(a, opts))
}

/**
 * A collection of arguments for invoking getFabricVsanInventory.
 */
export interface GetFabricVsanInventoryOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    adminState?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetFabricVsanInventoryAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    interopMode?: pulumi.Input<string>;
    loadBalancing?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkElement?: pulumi.Input<inputs.GetFabricVsanInventoryNetworkElementArgs>;
    objectType?: pulumi.Input<string>;
    operState?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetFabricVsanInventoryParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetFabricVsanInventoryPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetFabricVsanInventoryRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    smartZoning?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetFabricVsanInventoryTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetFabricVsanInventoryVersionContextArgs>;
    vsanId?: pulumi.Input<number>;
}
