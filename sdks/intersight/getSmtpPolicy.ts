// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSmtpPolicy(args?: GetSmtpPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetSmtpPolicyResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getSmtpPolicy:getSmtpPolicy", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "applianceAccount": args.applianceAccount,
        "authPassword": args.authPassword,
        "certificate": args.certificate,
        "classId": args.classId,
        "createTime": args.createTime,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "enableAuth": args.enableAuth,
        "enableTls": args.enableTls,
        "enabled": args.enabled,
        "id": args.id,
        "isAuthPasswordSet": args.isAuthPasswordSet,
        "minSeverity": args.minSeverity,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "organization": args.organization,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "profiles": args.profiles,
        "senderEmail": args.senderEmail,
        "sharedScope": args.sharedScope,
        "smtpPort": args.smtpPort,
        "smtpRecipients": args.smtpRecipients,
        "smtpServer": args.smtpServer,
        "tags": args.tags,
        "userName": args.userName,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSmtpPolicy.
 */
export interface GetSmtpPolicyArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetSmtpPolicyAncestor[];
    applianceAccount?: inputs.GetSmtpPolicyApplianceAccount;
    authPassword?: string;
    certificate?: inputs.GetSmtpPolicyCertificate;
    classId?: string;
    createTime?: string;
    description?: string;
    domainGroupMoid?: string;
    enableAuth?: boolean;
    enableTls?: boolean;
    enabled?: boolean;
    id?: string;
    isAuthPasswordSet?: boolean;
    minSeverity?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    organization?: inputs.GetSmtpPolicyOrganization;
    owners?: string[];
    parent?: inputs.GetSmtpPolicyParent;
    permissionResources?: inputs.GetSmtpPolicyPermissionResource[];
    profiles?: inputs.GetSmtpPolicyProfile[];
    senderEmail?: string;
    sharedScope?: string;
    smtpPort?: number;
    smtpRecipients?: string[];
    smtpServer?: string;
    tags?: inputs.GetSmtpPolicyTag[];
    userName?: string;
    versionContext?: inputs.GetSmtpPolicyVersionContext;
}

/**
 * A collection of values returned by getSmtpPolicy.
 */
export interface GetSmtpPolicyResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetSmtpPolicyAncestor[];
    readonly applianceAccount?: outputs.GetSmtpPolicyApplianceAccount;
    readonly authPassword?: string;
    readonly certificate?: outputs.GetSmtpPolicyCertificate;
    readonly classId?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly enableAuth?: boolean;
    readonly enableTls?: boolean;
    readonly enabled?: boolean;
    readonly id: string;
    readonly isAuthPasswordSet?: boolean;
    readonly minSeverity?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly organization?: outputs.GetSmtpPolicyOrganization;
    readonly owners?: string[];
    readonly parent?: outputs.GetSmtpPolicyParent;
    readonly permissionResources?: outputs.GetSmtpPolicyPermissionResource[];
    readonly profiles?: outputs.GetSmtpPolicyProfile[];
    readonly results: outputs.GetSmtpPolicyResult[];
    readonly senderEmail?: string;
    readonly sharedScope?: string;
    readonly smtpPort?: number;
    readonly smtpRecipients?: string[];
    readonly smtpServer?: string;
    readonly tags?: outputs.GetSmtpPolicyTag[];
    readonly userName?: string;
    readonly versionContext?: outputs.GetSmtpPolicyVersionContext;
}
export function getSmtpPolicyOutput(args?: GetSmtpPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSmtpPolicyResult> {
    return pulumi.output(args).apply((a: any) => getSmtpPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getSmtpPolicy.
 */
export interface GetSmtpPolicyOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetSmtpPolicyAncestorArgs>[]>;
    applianceAccount?: pulumi.Input<inputs.GetSmtpPolicyApplianceAccountArgs>;
    authPassword?: pulumi.Input<string>;
    certificate?: pulumi.Input<inputs.GetSmtpPolicyCertificateArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    enableAuth?: pulumi.Input<boolean>;
    enableTls?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    isAuthPasswordSet?: pulumi.Input<boolean>;
    minSeverity?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.GetSmtpPolicyOrganizationArgs>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetSmtpPolicyParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetSmtpPolicyPermissionResourceArgs>[]>;
    profiles?: pulumi.Input<pulumi.Input<inputs.GetSmtpPolicyProfileArgs>[]>;
    senderEmail?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    smtpPort?: pulumi.Input<number>;
    smtpRecipients?: pulumi.Input<pulumi.Input<string>[]>;
    smtpServer?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetSmtpPolicyTagArgs>[]>;
    userName?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetSmtpPolicyVersionContextArgs>;
}
