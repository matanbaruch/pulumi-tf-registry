// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getManagementInterface(args?: GetManagementInterfaceArgs, opts?: pulumi.InvokeOptions): Promise<GetManagementInterfaceResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getManagementInterface:getManagementInterface", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "equipmentChassis": args.equipmentChassis,
        "gateway": args.gateway,
        "hostName": args.hostName,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "ipAddress": args.ipAddress,
        "ipv4Address": args.ipv4Address,
        "ipv4Gateway": args.ipv4Gateway,
        "ipv4Mask": args.ipv4Mask,
        "ipv6Address": args.ipv6Address,
        "ipv6Gateway": args.ipv6Gateway,
        "ipv6Prefix": args.ipv6Prefix,
        "macAddress": args.macAddress,
        "managementController": args.managementController,
        "mask": args.mask,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "sharedScope": args.sharedScope,
        "switchId": args.switchId,
        "tags": args.tags,
        "uemConnStatus": args.uemConnStatus,
        "versionContext": args.versionContext,
        "virtualHostName": args.virtualHostName,
        "vlanId": args.vlanId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getManagementInterface.
 */
export interface GetManagementInterfaceArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetManagementInterfaceAncestor[];
    classId?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    equipmentChassis?: inputs.GetManagementInterfaceEquipmentChassis;
    gateway?: string;
    hostName?: string;
    id?: string;
    inventoryDeviceInfo?: inputs.GetManagementInterfaceInventoryDeviceInfo;
    ipAddress?: string;
    ipv4Address?: string;
    ipv4Gateway?: string;
    ipv4Mask?: string;
    ipv6Address?: string;
    ipv6Gateway?: string;
    ipv6Prefix?: number;
    macAddress?: string;
    managementController?: inputs.GetManagementInterfaceManagementController;
    mask?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetManagementInterfaceParent;
    permissionResources?: inputs.GetManagementInterfacePermissionResource[];
    registeredDevice?: inputs.GetManagementInterfaceRegisteredDevice;
    rn?: string;
    sharedScope?: string;
    switchId?: string;
    tags?: inputs.GetManagementInterfaceTag[];
    uemConnStatus?: string;
    versionContext?: inputs.GetManagementInterfaceVersionContext;
    virtualHostName?: string;
    vlanId?: number;
}

/**
 * A collection of values returned by getManagementInterface.
 */
export interface GetManagementInterfaceResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetManagementInterfaceAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly equipmentChassis?: outputs.GetManagementInterfaceEquipmentChassis;
    readonly gateway?: string;
    readonly hostName?: string;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetManagementInterfaceInventoryDeviceInfo;
    readonly ipAddress?: string;
    readonly ipv4Address?: string;
    readonly ipv4Gateway?: string;
    readonly ipv4Mask?: string;
    readonly ipv6Address?: string;
    readonly ipv6Gateway?: string;
    readonly ipv6Prefix?: number;
    readonly macAddress?: string;
    readonly managementController?: outputs.GetManagementInterfaceManagementController;
    readonly mask?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetManagementInterfaceParent;
    readonly permissionResources?: outputs.GetManagementInterfacePermissionResource[];
    readonly registeredDevice?: outputs.GetManagementInterfaceRegisteredDevice;
    readonly results: outputs.GetManagementInterfaceResult[];
    readonly rn?: string;
    readonly sharedScope?: string;
    readonly switchId?: string;
    readonly tags?: outputs.GetManagementInterfaceTag[];
    readonly uemConnStatus?: string;
    readonly versionContext?: outputs.GetManagementInterfaceVersionContext;
    readonly virtualHostName?: string;
    readonly vlanId?: number;
}
export function getManagementInterfaceOutput(args?: GetManagementInterfaceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetManagementInterfaceResult> {
    return pulumi.output(args).apply((a: any) => getManagementInterface(a, opts))
}

/**
 * A collection of arguments for invoking getManagementInterface.
 */
export interface GetManagementInterfaceOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetManagementInterfaceAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    equipmentChassis?: pulumi.Input<inputs.GetManagementInterfaceEquipmentChassisArgs>;
    gateway?: pulumi.Input<string>;
    hostName?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetManagementInterfaceInventoryDeviceInfoArgs>;
    ipAddress?: pulumi.Input<string>;
    ipv4Address?: pulumi.Input<string>;
    ipv4Gateway?: pulumi.Input<string>;
    ipv4Mask?: pulumi.Input<string>;
    ipv6Address?: pulumi.Input<string>;
    ipv6Gateway?: pulumi.Input<string>;
    ipv6Prefix?: pulumi.Input<number>;
    macAddress?: pulumi.Input<string>;
    managementController?: pulumi.Input<inputs.GetManagementInterfaceManagementControllerArgs>;
    mask?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetManagementInterfaceParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetManagementInterfacePermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetManagementInterfaceRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    switchId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetManagementInterfaceTagArgs>[]>;
    uemConnStatus?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetManagementInterfaceVersionContextArgs>;
    virtualHostName?: pulumi.Input<string>;
    vlanId?: pulumi.Input<number>;
}
