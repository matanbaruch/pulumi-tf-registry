// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ResourceReservation extends pulumi.CustomResource {
    /**
     * Get an existing ResourceReservation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceReservationState, opts?: pulumi.CustomResourceOptions): ResourceReservation {
        return new ResourceReservation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'intersight:index/resourceReservation:ResourceReservation';

    /**
     * Returns true if the given object is an instance of ResourceReservation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourceReservation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceReservation.__pulumiType;
    }

    /**
     * The Account ID for this managed object.
     */
    public readonly accountMoid!: pulumi.Output<string>;
    /**
     * A reference to a iamAccount resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    public readonly accounts!: pulumi.Output<outputs.ResourceReservationAccount[]>;
    public readonly additionalProperties!: pulumi.Output<string | undefined>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly ancestors!: pulumi.Output<outputs.ResourceReservationAncestor[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    public readonly classId!: pulumi.Output<string | undefined>;
    /**
     * The time when this managed object was created.
     */
    public readonly createTime!: pulumi.Output<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly customPermissionResources!: pulumi.Output<outputs.ResourceReservationCustomPermissionResource[]>;
    /**
     * Details of the use case for which the reservation was created, such as decommissioning.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The DomainGroup ID for this managed object.
     */
    public readonly domainGroupMoid!: pulumi.Output<string>;
    /**
     * The resource reservation includes an expiration date and a timestamp indicating when this management object will be
     * cleared. The expiration date is set during the decommissioning process and is maintained for a period of 3 months.
     */
    public readonly expiration!: pulumi.Output<string | undefined>;
    /**
     * An array of relationships to resourceGroup resources.
     */
    public readonly groups!: pulumi.Output<outputs.ResourceReservationGroup[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    public readonly identities!: pulumi.Output<outputs.ResourceReservationIdentity[]>;
    /**
     * MarkFail is used to set the reservation status to Failed.
     */
    public readonly markFail!: pulumi.Output<boolean | undefined>;
    /**
     * The time when this managed object was last modified.
     */
    public readonly modTime!: pulumi.Output<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    public readonly moid!: pulumi.Output<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    public readonly objectType!: pulumi.Output<string | undefined>;
    public readonly owners!: pulumi.Output<string[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    public readonly parents!: pulumi.Output<outputs.ResourceReservationParent[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly permissionResources!: pulumi.Output<outputs.ResourceReservationPermissionResource[]>;
    /**
     * The unique identification of the resource is based on the resource OData string, which is mentioned as part of the
     * ReservationSelector. For example, 'Serial eq 'EM6259AE6B'.
     */
    public readonly reservationSelector!: pulumi.Output<string | undefined>;
    public readonly resourceMoids!: pulumi.Output<string[]>;
    /**
     * The type of resource that is placed into resource groups or pools. Resource Type can be either 'compute.Blade' or
     * 'compute.RackUnit' for pools.
     */
    public readonly resourceType!: pulumi.Output<string | undefined>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    public readonly sharedScope!: pulumi.Output<string>;
    /**
     * The reservation status can be in the 'Created', 'Processing', 'Failed', or 'Finished' state. * `Created` - By default, a
     * reservation is in Created status. * `Processing` - A reservation is changed to Processing status for appliance mode
     * resource claim requests. * `Failed` - A reservation is changed to Failed status if the validations on resources,
     * resource groups fails. * `Finished` - A reservation is changed to Finished status if the validations on resources,
     * resource groups are successful. The resource moids in reservation will be added to resource groups using OData filters.
     */
    public readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.ResourceReservationTag[]>;
    /**
     * Moid of the user who created the reservation.
     */
    public readonly userMoid!: pulumi.Output<string>;
    /**
     * The versioning info for this managed object.
     */
    public readonly versionContexts!: pulumi.Output<outputs.ResourceReservationVersionContext[]>;

    /**
     * Create a ResourceReservation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ResourceReservationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceReservationArgs | ResourceReservationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceReservationState | undefined;
            resourceInputs["accountMoid"] = state ? state.accountMoid : undefined;
            resourceInputs["accounts"] = state ? state.accounts : undefined;
            resourceInputs["additionalProperties"] = state ? state.additionalProperties : undefined;
            resourceInputs["ancestors"] = state ? state.ancestors : undefined;
            resourceInputs["classId"] = state ? state.classId : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["customPermissionResources"] = state ? state.customPermissionResources : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domainGroupMoid"] = state ? state.domainGroupMoid : undefined;
            resourceInputs["expiration"] = state ? state.expiration : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["identities"] = state ? state.identities : undefined;
            resourceInputs["markFail"] = state ? state.markFail : undefined;
            resourceInputs["modTime"] = state ? state.modTime : undefined;
            resourceInputs["moid"] = state ? state.moid : undefined;
            resourceInputs["objectType"] = state ? state.objectType : undefined;
            resourceInputs["owners"] = state ? state.owners : undefined;
            resourceInputs["parents"] = state ? state.parents : undefined;
            resourceInputs["permissionResources"] = state ? state.permissionResources : undefined;
            resourceInputs["reservationSelector"] = state ? state.reservationSelector : undefined;
            resourceInputs["resourceMoids"] = state ? state.resourceMoids : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["sharedScope"] = state ? state.sharedScope : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["userMoid"] = state ? state.userMoid : undefined;
            resourceInputs["versionContexts"] = state ? state.versionContexts : undefined;
        } else {
            const args = argsOrState as ResourceReservationArgs | undefined;
            resourceInputs["accountMoid"] = args ? args.accountMoid : undefined;
            resourceInputs["accounts"] = args ? args.accounts : undefined;
            resourceInputs["additionalProperties"] = args ? args.additionalProperties : undefined;
            resourceInputs["ancestors"] = args ? args.ancestors : undefined;
            resourceInputs["classId"] = args ? args.classId : undefined;
            resourceInputs["createTime"] = args ? args.createTime : undefined;
            resourceInputs["customPermissionResources"] = args ? args.customPermissionResources : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domainGroupMoid"] = args ? args.domainGroupMoid : undefined;
            resourceInputs["expiration"] = args ? args.expiration : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["identities"] = args ? args.identities : undefined;
            resourceInputs["markFail"] = args ? args.markFail : undefined;
            resourceInputs["modTime"] = args ? args.modTime : undefined;
            resourceInputs["moid"] = args ? args.moid : undefined;
            resourceInputs["objectType"] = args ? args.objectType : undefined;
            resourceInputs["owners"] = args ? args.owners : undefined;
            resourceInputs["parents"] = args ? args.parents : undefined;
            resourceInputs["permissionResources"] = args ? args.permissionResources : undefined;
            resourceInputs["reservationSelector"] = args ? args.reservationSelector : undefined;
            resourceInputs["resourceMoids"] = args ? args.resourceMoids : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["sharedScope"] = args ? args.sharedScope : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userMoid"] = args ? args.userMoid : undefined;
            resourceInputs["versionContexts"] = args ? args.versionContexts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourceReservation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ResourceReservation resources.
 */
export interface ResourceReservationState {
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    /**
     * A reference to a iamAccount resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    accounts?: pulumi.Input<pulumi.Input<inputs.ResourceReservationAccount>[]>;
    additionalProperties?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.ResourceReservationAncestor>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    customPermissionResources?: pulumi.Input<pulumi.Input<inputs.ResourceReservationCustomPermissionResource>[]>;
    /**
     * Details of the use case for which the reservation was created, such as decommissioning.
     */
    description?: pulumi.Input<string>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    /**
     * The resource reservation includes an expiration date and a timestamp indicating when this management object will be
     * cleared. The expiration date is set during the decommissioning process and is maintained for a period of 3 months.
     */
    expiration?: pulumi.Input<string>;
    /**
     * An array of relationships to resourceGroup resources.
     */
    groups?: pulumi.Input<pulumi.Input<inputs.ResourceReservationGroup>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    identities?: pulumi.Input<pulumi.Input<inputs.ResourceReservationIdentity>[]>;
    /**
     * MarkFail is used to set the reservation status to Failed.
     */
    markFail?: pulumi.Input<boolean>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.ResourceReservationParent>[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.ResourceReservationPermissionResource>[]>;
    /**
     * The unique identification of the resource is based on the resource OData string, which is mentioned as part of the
     * ReservationSelector. For example, 'Serial eq 'EM6259AE6B'.
     */
    reservationSelector?: pulumi.Input<string>;
    resourceMoids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of resource that is placed into resource groups or pools. Resource Type can be either 'compute.Blade' or
     * 'compute.RackUnit' for pools.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    /**
     * The reservation status can be in the 'Created', 'Processing', 'Failed', or 'Finished' state. * `Created` - By default, a
     * reservation is in Created status. * `Processing` - A reservation is changed to Processing status for appliance mode
     * resource claim requests. * `Failed` - A reservation is changed to Failed status if the validations on resources,
     * resource groups fails. * `Finished` - A reservation is changed to Finished status if the validations on resources,
     * resource groups are successful. The resource moids in reservation will be added to resource groups using OData filters.
     */
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.ResourceReservationTag>[]>;
    /**
     * Moid of the user who created the reservation.
     */
    userMoid?: pulumi.Input<string>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.ResourceReservationVersionContext>[]>;
}

/**
 * The set of arguments for constructing a ResourceReservation resource.
 */
export interface ResourceReservationArgs {
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    /**
     * A reference to a iamAccount resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    accounts?: pulumi.Input<pulumi.Input<inputs.ResourceReservationAccount>[]>;
    additionalProperties?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.ResourceReservationAncestor>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    customPermissionResources?: pulumi.Input<pulumi.Input<inputs.ResourceReservationCustomPermissionResource>[]>;
    /**
     * Details of the use case for which the reservation was created, such as decommissioning.
     */
    description?: pulumi.Input<string>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    /**
     * The resource reservation includes an expiration date and a timestamp indicating when this management object will be
     * cleared. The expiration date is set during the decommissioning process and is maintained for a period of 3 months.
     */
    expiration?: pulumi.Input<string>;
    /**
     * An array of relationships to resourceGroup resources.
     */
    groups?: pulumi.Input<pulumi.Input<inputs.ResourceReservationGroup>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    identities?: pulumi.Input<pulumi.Input<inputs.ResourceReservationIdentity>[]>;
    /**
     * MarkFail is used to set the reservation status to Failed.
     */
    markFail?: pulumi.Input<boolean>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.ResourceReservationParent>[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.ResourceReservationPermissionResource>[]>;
    /**
     * The unique identification of the resource is based on the resource OData string, which is mentioned as part of the
     * ReservationSelector. For example, 'Serial eq 'EM6259AE6B'.
     */
    reservationSelector?: pulumi.Input<string>;
    resourceMoids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of resource that is placed into resource groups or pools. Resource Type can be either 'compute.Blade' or
     * 'compute.RackUnit' for pools.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    /**
     * The reservation status can be in the 'Created', 'Processing', 'Failed', or 'Finished' state. * `Created` - By default, a
     * reservation is in Created status. * `Processing` - A reservation is changed to Processing status for appliance mode
     * resource claim requests. * `Failed` - A reservation is changed to Failed status if the validations on resources,
     * resource groups fails. * `Finished` - A reservation is changed to Finished status if the validations on resources,
     * resource groups are successful. The resource moids in reservation will be added to resource groups using OData filters.
     */
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.ResourceReservationTag>[]>;
    /**
     * Moid of the user who created the reservation.
     */
    userMoid?: pulumi.Input<string>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.ResourceReservationVersionContext>[]>;
}
