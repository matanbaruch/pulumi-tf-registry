// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getManagementEntity(args?: GetManagementEntityArgs, opts?: pulumi.InvokeOptions): Promise<GetManagementEntityResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getManagementEntity:getManagementEntity", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "clusterLinkState": args.clusterLinkState,
        "clusterReadiness": args.clusterReadiness,
        "clusterState": args.clusterState,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "entityId": args.entityId,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "leadership": args.leadership,
        "modTime": args.modTime,
        "moid": args.moid,
        "networkElement": args.networkElement,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getManagementEntity.
 */
export interface GetManagementEntityArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetManagementEntityAncestor[];
    classId?: string;
    clusterLinkState?: string;
    clusterReadiness?: string;
    clusterState?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    entityId?: string;
    id?: string;
    inventoryDeviceInfo?: inputs.GetManagementEntityInventoryDeviceInfo;
    leadership?: string;
    modTime?: string;
    moid?: string;
    networkElement?: inputs.GetManagementEntityNetworkElement;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetManagementEntityParent;
    permissionResources?: inputs.GetManagementEntityPermissionResource[];
    registeredDevice?: inputs.GetManagementEntityRegisteredDevice;
    rn?: string;
    sharedScope?: string;
    tags?: inputs.GetManagementEntityTag[];
    versionContext?: inputs.GetManagementEntityVersionContext;
}

/**
 * A collection of values returned by getManagementEntity.
 */
export interface GetManagementEntityResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetManagementEntityAncestor[];
    readonly classId?: string;
    readonly clusterLinkState?: string;
    readonly clusterReadiness?: string;
    readonly clusterState?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly entityId?: string;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetManagementEntityInventoryDeviceInfo;
    readonly leadership?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly networkElement?: outputs.GetManagementEntityNetworkElement;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetManagementEntityParent;
    readonly permissionResources?: outputs.GetManagementEntityPermissionResource[];
    readonly registeredDevice?: outputs.GetManagementEntityRegisteredDevice;
    readonly results: outputs.GetManagementEntityResult[];
    readonly rn?: string;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetManagementEntityTag[];
    readonly versionContext?: outputs.GetManagementEntityVersionContext;
}
export function getManagementEntityOutput(args?: GetManagementEntityOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetManagementEntityResult> {
    return pulumi.output(args).apply((a: any) => getManagementEntity(a, opts))
}

/**
 * A collection of arguments for invoking getManagementEntity.
 */
export interface GetManagementEntityOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetManagementEntityAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    clusterLinkState?: pulumi.Input<string>;
    clusterReadiness?: pulumi.Input<string>;
    clusterState?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    entityId?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetManagementEntityInventoryDeviceInfoArgs>;
    leadership?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    networkElement?: pulumi.Input<inputs.GetManagementEntityNetworkElementArgs>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetManagementEntityParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetManagementEntityPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetManagementEntityRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetManagementEntityTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetManagementEntityVersionContextArgs>;
}
