// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNetworkSupervisorCard(args?: GetNetworkSupervisorCardArgs, opts?: pulumi.InvokeOptions): Promise<GetNetworkSupervisorCardResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getNetworkSupervisorCard:getNetworkSupervisorCard", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "description": args.description,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "fcPorts": args.fcPorts,
        "hardwareVersion": args.hardwareVersion,
        "id": args.id,
        "isUpgraded": args.isUpgraded,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "name": args.name,
        "networkElement": args.networkElement,
        "numberOfPorts": args.numberOfPorts,
        "objectType": args.objectType,
        "operReason": args.operReason,
        "operState": args.operState,
        "owners": args.owners,
        "parent": args.parent,
        "partNumber": args.partNumber,
        "permissionResources": args.permissionResources,
        "powerState": args.powerState,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "registeredDevice": args.registeredDevice,
        "revision": args.revision,
        "rn": args.rn,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "status": args.status,
        "supervisorId": args.supervisorId,
        "tags": args.tags,
        "type": args.type,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNetworkSupervisorCard.
 */
export interface GetNetworkSupervisorCardArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetNetworkSupervisorCardAncestor[];
    classId?: string;
    createTime?: string;
    description?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    fcPorts?: inputs.GetNetworkSupervisorCardFcPort[];
    hardwareVersion?: string;
    id?: string;
    isUpgraded?: boolean;
    modTime?: string;
    model?: string;
    moid?: string;
    name?: string;
    networkElement?: inputs.GetNetworkSupervisorCardNetworkElement;
    numberOfPorts?: number;
    objectType?: string;
    operReason?: string;
    operState?: string;
    owners?: string[];
    parent?: inputs.GetNetworkSupervisorCardParent;
    partNumber?: string;
    permissionResources?: inputs.GetNetworkSupervisorCardPermissionResource[];
    powerState?: string;
    presence?: string;
    previousFru?: inputs.GetNetworkSupervisorCardPreviousFru;
    registeredDevice?: inputs.GetNetworkSupervisorCardRegisteredDevice;
    revision?: string;
    rn?: string;
    serial?: string;
    sharedScope?: string;
    status?: string;
    supervisorId?: string;
    tags?: inputs.GetNetworkSupervisorCardTag[];
    type?: string;
    vendor?: string;
    versionContext?: inputs.GetNetworkSupervisorCardVersionContext;
}

/**
 * A collection of values returned by getNetworkSupervisorCard.
 */
export interface GetNetworkSupervisorCardResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetNetworkSupervisorCardAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly fcPorts?: outputs.GetNetworkSupervisorCardFcPort[];
    readonly hardwareVersion?: string;
    readonly id: string;
    readonly isUpgraded?: boolean;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly networkElement?: outputs.GetNetworkSupervisorCardNetworkElement;
    readonly numberOfPorts?: number;
    readonly objectType?: string;
    readonly operReason?: string;
    readonly operState?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetNetworkSupervisorCardParent;
    readonly partNumber?: string;
    readonly permissionResources?: outputs.GetNetworkSupervisorCardPermissionResource[];
    readonly powerState?: string;
    readonly presence?: string;
    readonly previousFru?: outputs.GetNetworkSupervisorCardPreviousFru;
    readonly registeredDevice?: outputs.GetNetworkSupervisorCardRegisteredDevice;
    readonly results: outputs.GetNetworkSupervisorCardResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly status?: string;
    readonly supervisorId?: string;
    readonly tags?: outputs.GetNetworkSupervisorCardTag[];
    readonly type?: string;
    readonly vendor?: string;
    readonly versionContext?: outputs.GetNetworkSupervisorCardVersionContext;
}
export function getNetworkSupervisorCardOutput(args?: GetNetworkSupervisorCardOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkSupervisorCardResult> {
    return pulumi.output(args).apply((a: any) => getNetworkSupervisorCard(a, opts))
}

/**
 * A collection of arguments for invoking getNetworkSupervisorCard.
 */
export interface GetNetworkSupervisorCardOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetNetworkSupervisorCardAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    fcPorts?: pulumi.Input<pulumi.Input<inputs.GetNetworkSupervisorCardFcPortArgs>[]>;
    hardwareVersion?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    isUpgraded?: pulumi.Input<boolean>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkElement?: pulumi.Input<inputs.GetNetworkSupervisorCardNetworkElementArgs>;
    numberOfPorts?: pulumi.Input<number>;
    objectType?: pulumi.Input<string>;
    operReason?: pulumi.Input<string>;
    operState?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetNetworkSupervisorCardParentArgs>;
    partNumber?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetNetworkSupervisorCardPermissionResourceArgs>[]>;
    powerState?: pulumi.Input<string>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetNetworkSupervisorCardPreviousFruArgs>;
    registeredDevice?: pulumi.Input<inputs.GetNetworkSupervisorCardRegisteredDeviceArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    supervisorId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetNetworkSupervisorCardTagArgs>[]>;
    type?: pulumi.Input<string>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetNetworkSupervisorCardVersionContextArgs>;
}
