// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIamApiKey(args?: GetIamApiKeyArgs, opts?: pulumi.InvokeOptions): Promise<GetIamApiKeyResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getIamApiKey:getIamApiKey", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "adminStatus": args.adminStatus,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "expiryDateTime": args.expiryDateTime,
        "hashAlgorithm": args.hashAlgorithm,
        "id": args.id,
        "isNeverExpiring": args.isNeverExpiring,
        "keySpec": args.keySpec,
        "lastUsedIp": args.lastUsedIp,
        "lastUsedTime": args.lastUsedTime,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "operStatus": args.operStatus,
        "owners": args.owners,
        "parent": args.parent,
        "permission": args.permission,
        "permissionResources": args.permissionResources,
        "privateKey": args.privateKey,
        "purpose": args.purpose,
        "sharedScope": args.sharedScope,
        "signingAlgorithm": args.signingAlgorithm,
        "startTime": args.startTime,
        "tags": args.tags,
        "user": args.user,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIamApiKey.
 */
export interface GetIamApiKeyArgs {
    accountMoid?: string;
    additionalProperties?: string;
    adminStatus?: string;
    ancestors?: inputs.GetIamApiKeyAncestor[];
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    expiryDateTime?: string;
    hashAlgorithm?: string;
    id?: string;
    isNeverExpiring?: boolean;
    keySpec?: inputs.GetIamApiKeyKeySpec;
    lastUsedIp?: string;
    lastUsedTime?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    operStatus?: string;
    owners?: string[];
    parent?: inputs.GetIamApiKeyParent;
    permission?: inputs.GetIamApiKeyPermission;
    permissionResources?: inputs.GetIamApiKeyPermissionResource[];
    privateKey?: string;
    purpose?: string;
    sharedScope?: string;
    signingAlgorithm?: string;
    startTime?: string;
    tags?: inputs.GetIamApiKeyTag[];
    user?: inputs.GetIamApiKeyUser;
    versionContext?: inputs.GetIamApiKeyVersionContext;
}

/**
 * A collection of values returned by getIamApiKey.
 */
export interface GetIamApiKeyResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly adminStatus?: string;
    readonly ancestors?: outputs.GetIamApiKeyAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly expiryDateTime?: string;
    readonly hashAlgorithm?: string;
    readonly id: string;
    readonly isNeverExpiring?: boolean;
    readonly keySpec?: outputs.GetIamApiKeyKeySpec;
    readonly lastUsedIp?: string;
    readonly lastUsedTime?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly operStatus?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetIamApiKeyParent;
    readonly permission?: outputs.GetIamApiKeyPermission;
    readonly permissionResources?: outputs.GetIamApiKeyPermissionResource[];
    readonly privateKey?: string;
    readonly purpose?: string;
    readonly results: outputs.GetIamApiKeyResult[];
    readonly sharedScope?: string;
    readonly signingAlgorithm?: string;
    readonly startTime?: string;
    readonly tags?: outputs.GetIamApiKeyTag[];
    readonly user?: outputs.GetIamApiKeyUser;
    readonly versionContext?: outputs.GetIamApiKeyVersionContext;
}
export function getIamApiKeyOutput(args?: GetIamApiKeyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIamApiKeyResult> {
    return pulumi.output(args).apply((a: any) => getIamApiKey(a, opts))
}

/**
 * A collection of arguments for invoking getIamApiKey.
 */
export interface GetIamApiKeyOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    adminStatus?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetIamApiKeyAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    expiryDateTime?: pulumi.Input<string>;
    hashAlgorithm?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    isNeverExpiring?: pulumi.Input<boolean>;
    keySpec?: pulumi.Input<inputs.GetIamApiKeyKeySpecArgs>;
    lastUsedIp?: pulumi.Input<string>;
    lastUsedTime?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operStatus?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetIamApiKeyParentArgs>;
    permission?: pulumi.Input<inputs.GetIamApiKeyPermissionArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetIamApiKeyPermissionResourceArgs>[]>;
    privateKey?: pulumi.Input<string>;
    purpose?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    signingAlgorithm?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetIamApiKeyTagArgs>[]>;
    user?: pulumi.Input<inputs.GetIamApiKeyUserArgs>;
    versionContext?: pulumi.Input<inputs.GetIamApiKeyVersionContextArgs>;
}
