// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getHyperflexKeyEncryptionKey(args?: GetHyperflexKeyEncryptionKeyArgs, opts?: pulumi.InvokeOptions): Promise<GetHyperflexKeyEncryptionKeyResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getHyperflexKeyEncryptionKey:getHyperflexKeyEncryptionKey", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "clusterProfile": args.clusterProfile,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "isAccountRecovery": args.isAccountRecovery,
        "isKekSet": args.isKekSet,
        "isPassphraseSet": args.isPassphraseSet,
        "iteration": args.iteration,
        "kek": args.kek,
        "keyId": args.keyId,
        "keyState": args.keyState,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "passphrase": args.passphrase,
        "permissionResources": args.permissionResources,
        "resourceMo": args.resourceMo,
        "resourceType": args.resourceType,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "transitKek": args.transitKek,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getHyperflexKeyEncryptionKey.
 */
export interface GetHyperflexKeyEncryptionKeyArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetHyperflexKeyEncryptionKeyAncestor[];
    classId?: string;
    clusterProfile?: inputs.GetHyperflexKeyEncryptionKeyClusterProfile;
    createTime?: string;
    domainGroupMoid?: string;
    id?: string;
    isAccountRecovery?: boolean;
    isKekSet?: boolean;
    isPassphraseSet?: boolean;
    iteration?: number;
    kek?: string;
    keyId?: string;
    keyState?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetHyperflexKeyEncryptionKeyParent;
    passphrase?: string;
    permissionResources?: inputs.GetHyperflexKeyEncryptionKeyPermissionResource[];
    resourceMo?: inputs.GetHyperflexKeyEncryptionKeyResourceMo;
    resourceType?: string;
    sharedScope?: string;
    tags?: inputs.GetHyperflexKeyEncryptionKeyTag[];
    transitKek?: string;
    versionContext?: inputs.GetHyperflexKeyEncryptionKeyVersionContext;
}

/**
 * A collection of values returned by getHyperflexKeyEncryptionKey.
 */
export interface GetHyperflexKeyEncryptionKeyResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetHyperflexKeyEncryptionKeyAncestor[];
    readonly classId?: string;
    readonly clusterProfile?: outputs.GetHyperflexKeyEncryptionKeyClusterProfile;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly isAccountRecovery?: boolean;
    readonly isKekSet?: boolean;
    readonly isPassphraseSet?: boolean;
    readonly iteration?: number;
    readonly kek?: string;
    readonly keyId?: string;
    readonly keyState?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetHyperflexKeyEncryptionKeyParent;
    readonly passphrase?: string;
    readonly permissionResources?: outputs.GetHyperflexKeyEncryptionKeyPermissionResource[];
    readonly resourceMo?: outputs.GetHyperflexKeyEncryptionKeyResourceMo;
    readonly resourceType?: string;
    readonly results: outputs.GetHyperflexKeyEncryptionKeyResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetHyperflexKeyEncryptionKeyTag[];
    readonly transitKek?: string;
    readonly versionContext?: outputs.GetHyperflexKeyEncryptionKeyVersionContext;
}
export function getHyperflexKeyEncryptionKeyOutput(args?: GetHyperflexKeyEncryptionKeyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetHyperflexKeyEncryptionKeyResult> {
    return pulumi.output(args).apply((a: any) => getHyperflexKeyEncryptionKey(a, opts))
}

/**
 * A collection of arguments for invoking getHyperflexKeyEncryptionKey.
 */
export interface GetHyperflexKeyEncryptionKeyOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetHyperflexKeyEncryptionKeyAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    clusterProfile?: pulumi.Input<inputs.GetHyperflexKeyEncryptionKeyClusterProfileArgs>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    isAccountRecovery?: pulumi.Input<boolean>;
    isKekSet?: pulumi.Input<boolean>;
    isPassphraseSet?: pulumi.Input<boolean>;
    iteration?: pulumi.Input<number>;
    kek?: pulumi.Input<string>;
    keyId?: pulumi.Input<string>;
    keyState?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetHyperflexKeyEncryptionKeyParentArgs>;
    passphrase?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetHyperflexKeyEncryptionKeyPermissionResourceArgs>[]>;
    resourceMo?: pulumi.Input<inputs.GetHyperflexKeyEncryptionKeyResourceMoArgs>;
    resourceType?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetHyperflexKeyEncryptionKeyTagArgs>[]>;
    transitKek?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetHyperflexKeyEncryptionKeyVersionContextArgs>;
}
