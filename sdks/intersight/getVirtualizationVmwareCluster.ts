// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVirtualizationVmwareCluster(args?: GetVirtualizationVmwareClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualizationVmwareClusterResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getVirtualizationVmwareCluster:getVirtualizationVmwareCluster", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "alarmSummary": args.alarmSummary,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "cpuOverCommitment": args.cpuOverCommitment,
        "createTime": args.createTime,
        "datacenter": args.datacenter,
        "datastoreCount": args.datastoreCount,
        "domainGroupMoid": args.domainGroupMoid,
        "hypervisorType": args.hypervisorType,
        "hypervisorVersion": args.hypervisorVersion,
        "id": args.id,
        "identity": args.identity,
        "inventoryPath": args.inventoryPath,
        "memoryCapacity": args.memoryCapacity,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "proactiveHaEnabled": args.proactiveHaEnabled,
        "processorCapacity": args.processorCapacity,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "status": args.status,
        "storageClusters": args.storageClusters,
        "tags": args.tags,
        "totalCores": args.totalCores,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareCluster.
 */
export interface GetVirtualizationVmwareClusterArgs {
    accountMoid?: string;
    additionalProperties?: string;
    alarmSummary?: inputs.GetVirtualizationVmwareClusterAlarmSummary;
    ancestors?: inputs.GetVirtualizationVmwareClusterAncestor[];
    classId?: string;
    cpuOverCommitment?: number;
    createTime?: string;
    datacenter?: inputs.GetVirtualizationVmwareClusterDatacenter;
    datastoreCount?: number;
    domainGroupMoid?: string;
    hypervisorType?: string;
    hypervisorVersion?: string;
    id?: string;
    identity?: string;
    inventoryPath?: string;
    memoryCapacity?: inputs.GetVirtualizationVmwareClusterMemoryCapacity;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetVirtualizationVmwareClusterParent;
    permissionResources?: inputs.GetVirtualizationVmwareClusterPermissionResource[];
    proactiveHaEnabled?: boolean;
    processorCapacity?: inputs.GetVirtualizationVmwareClusterProcessorCapacity;
    registeredDevice?: inputs.GetVirtualizationVmwareClusterRegisteredDevice;
    sharedScope?: string;
    status?: string;
    storageClusters?: inputs.GetVirtualizationVmwareClusterStorageCluster[];
    tags?: inputs.GetVirtualizationVmwareClusterTag[];
    totalCores?: number;
    versionContext?: inputs.GetVirtualizationVmwareClusterVersionContext;
}

/**
 * A collection of values returned by getVirtualizationVmwareCluster.
 */
export interface GetVirtualizationVmwareClusterResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly alarmSummary?: outputs.GetVirtualizationVmwareClusterAlarmSummary;
    readonly ancestors?: outputs.GetVirtualizationVmwareClusterAncestor[];
    readonly classId?: string;
    readonly cpuOverCommitment?: number;
    readonly createTime?: string;
    readonly datacenter?: outputs.GetVirtualizationVmwareClusterDatacenter;
    readonly datastoreCount?: number;
    readonly domainGroupMoid?: string;
    readonly hypervisorType?: string;
    readonly hypervisorVersion?: string;
    readonly id: string;
    readonly identity?: string;
    readonly inventoryPath?: string;
    readonly memoryCapacity?: outputs.GetVirtualizationVmwareClusterMemoryCapacity;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetVirtualizationVmwareClusterParent;
    readonly permissionResources?: outputs.GetVirtualizationVmwareClusterPermissionResource[];
    readonly proactiveHaEnabled?: boolean;
    readonly processorCapacity?: outputs.GetVirtualizationVmwareClusterProcessorCapacity;
    readonly registeredDevice?: outputs.GetVirtualizationVmwareClusterRegisteredDevice;
    readonly results: outputs.GetVirtualizationVmwareClusterResult[];
    readonly sharedScope?: string;
    readonly status?: string;
    readonly storageClusters?: outputs.GetVirtualizationVmwareClusterStorageCluster[];
    readonly tags?: outputs.GetVirtualizationVmwareClusterTag[];
    readonly totalCores?: number;
    readonly versionContext?: outputs.GetVirtualizationVmwareClusterVersionContext;
}
export function getVirtualizationVmwareClusterOutput(args?: GetVirtualizationVmwareClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualizationVmwareClusterResult> {
    return pulumi.output(args).apply((a: any) => getVirtualizationVmwareCluster(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareCluster.
 */
export interface GetVirtualizationVmwareClusterOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    alarmSummary?: pulumi.Input<inputs.GetVirtualizationVmwareClusterAlarmSummaryArgs>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareClusterAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    cpuOverCommitment?: pulumi.Input<number>;
    createTime?: pulumi.Input<string>;
    datacenter?: pulumi.Input<inputs.GetVirtualizationVmwareClusterDatacenterArgs>;
    datastoreCount?: pulumi.Input<number>;
    domainGroupMoid?: pulumi.Input<string>;
    hypervisorType?: pulumi.Input<string>;
    hypervisorVersion?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    identity?: pulumi.Input<string>;
    inventoryPath?: pulumi.Input<string>;
    memoryCapacity?: pulumi.Input<inputs.GetVirtualizationVmwareClusterMemoryCapacityArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetVirtualizationVmwareClusterParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareClusterPermissionResourceArgs>[]>;
    proactiveHaEnabled?: pulumi.Input<boolean>;
    processorCapacity?: pulumi.Input<inputs.GetVirtualizationVmwareClusterProcessorCapacityArgs>;
    registeredDevice?: pulumi.Input<inputs.GetVirtualizationVmwareClusterRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    storageClusters?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareClusterStorageClusterArgs>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareClusterTagArgs>[]>;
    totalCores?: pulumi.Input<number>;
    versionContext?: pulumi.Input<inputs.GetVirtualizationVmwareClusterVersionContextArgs>;
}
