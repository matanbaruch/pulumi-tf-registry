// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServerProfile extends pulumi.CustomResource {
    /**
     * Get an existing ServerProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerProfileState, opts?: pulumi.CustomResourceOptions): ServerProfile {
        return new ServerProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'intersight:index/serverProfile:ServerProfile';

    /**
     * Returns true if the given object is an instance of ServerProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerProfile.__pulumiType;
    }

    /**
     * The Account ID for this managed object.
     */
    public readonly accountMoid!: pulumi.Output<string>;
    /**
     * User initiated action. Each profile type has its own supported actions. For HyperFlex cluster profile, the supported
     * actions are -- Validate, Deploy, Continue, Retry, Abort, Unassign For server profile, the support actions are -- Deploy,
     * Unassign.
     */
    public readonly action!: pulumi.Output<string | undefined>;
    public readonly actionParams!: pulumi.Output<outputs.ServerProfileActionParam[]>;
    public readonly additionalProperties!: pulumi.Output<string | undefined>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly ancestors!: pulumi.Output<outputs.ServerProfileAncestor[]>;
    /**
     * A reference to a computePhysical resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    public readonly assignedServers!: pulumi.Output<outputs.ServerProfileAssignedServer[]>;
    /**
     * A reference to a resourcepoolPool resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    public readonly associatedServerPools!: pulumi.Output<outputs.ServerProfileAssociatedServerPool[]>;
    /**
     * A reference to a computePhysical resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    public readonly associatedServers!: pulumi.Output<outputs.ServerProfileAssociatedServer[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    public readonly classId!: pulumi.Output<string | undefined>;
    /**
     * The configuration change state and results of the last change operation.
     */
    public readonly configChangeContexts!: pulumi.Output<outputs.ServerProfileConfigChangeContext[]>;
    /**
     * An array of relationships to serverConfigChangeDetail resources.
     */
    public readonly configChangeDetails!: pulumi.Output<outputs.ServerProfileConfigChangeDetail[]>;
    /**
     * Pending configuration changes at the summary level. Detail changes are saved in configChangeDetails as a separate
     * object.
     */
    public readonly configChanges!: pulumi.Output<outputs.ServerProfileConfigChange[]>;
    /**
     * The configuration state and results of the last configuration operation.
     */
    public readonly configContexts!: pulumi.Output<outputs.ServerProfileConfigContext[]>;
    /**
     * A reference to a serverConfigResult resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    public readonly configResults!: pulumi.Output<outputs.ServerProfileConfigResult[]>;
    /**
     * The time when this managed object was created.
     */
    public readonly createTime!: pulumi.Output<string>;
    /**
     * The status of the server profile indicating if deployment has been initiated on both fabric interconnects or not. *
     * `None` - Switch profiles not deployed on either of the switches. * `Complete` - Both switch profiles of the cluster
     * profile are deployed. * `Partial` - Only one of the switch profiles of the cluster profile is deployed.
     */
    public readonly deployStatus!: pulumi.Output<string>;
    /**
     * The property which determines if the deployment should be skipped on any of the Fabric Interconnects. It is set based on
     * the state of a fabric interconnect to Intersight before the deployment of the server proile begins. * `None` - Server
     * profile configuration not deployed on either of the fabric interconnects. * `AB` - Server profile configuration deployed
     * on both fabric interconnects. * `A` - Server profile configuration deployed on fabric interconnect A only. * `B` -
     * Server profile configuration deployed on fabric interconnect B only.
     */
    public readonly deployedSwitches!: pulumi.Output<string>;
    /**
     * Description of the profile.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The DomainGroup ID for this managed object.
     */
    public readonly domainGroupMoid!: pulumi.Output<string>;
    public readonly internalReservationReferences!: pulumi.Output<outputs.ServerProfileInternalReservationReference[]>;
    /**
     * Indicates whether the value of the 'pmcDeployedSecurePassphrase' property has been set.
     */
    public readonly isPmcDeployedSecurePassphraseSet!: pulumi.Output<boolean>;
    /**
     * A reference to a computePhysical resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    public readonly leasedServers!: pulumi.Output<outputs.ServerProfileLeasedServer[]>;
    /**
     * The time when this managed object was last modified.
     */
    public readonly modTime!: pulumi.Output<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    public readonly moid!: pulumi.Output<string>;
    /**
     * Name of the profile instance or profile template.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    public readonly objectType!: pulumi.Output<string | undefined>;
    /**
     * A reference to a organizationOrganization resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    public readonly organizations!: pulumi.Output<outputs.ServerProfileOrganization[]>;
    public readonly owners!: pulumi.Output<string[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    public readonly parents!: pulumi.Output<outputs.ServerProfileParent[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly permissionResources!: pulumi.Output<outputs.ServerProfilePermissionResource[]>;
    /**
     * Secure passphrase that is already deployed on all the Persistent Memory Modules on the server. This deployed passphrase
     * is required during deploy of server profile if secure passphrase is changed or security is disabled in the attached
     * persistent memory policy.
     */
    public readonly pmcDeployedSecurePassphrase!: pulumi.Output<string | undefined>;
    /**
     * An array of relationships to policyAbstractPolicy resources.
     */
    public readonly policyBuckets!: pulumi.Output<outputs.ServerProfilePolicyBucket[]>;
    public readonly reservationReferences!: pulumi.Output<outputs.ServerProfileReservationReference[]>;
    /**
     * A reference to a resourcepoolLease resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    public readonly resourceLeases!: pulumi.Output<outputs.ServerProfileResourceLease[]>;
    /**
     * An array of relationships to workflowWorkflowInfo resources.
     */
    public readonly runningWorkflows!: pulumi.Output<outputs.ServerProfileRunningWorkflow[]>;
    public readonly scheduledActions!: pulumi.Output<outputs.ServerProfileScheduledAction[]>;
    /**
     * Source of the server assigned to the Server Profile. Values can be Static, Pool or None. Static is used if a server is
     * attached directly to a Server Profile. Pool is used if a resource pool is attached to a Server Profile. None is used if
     * no server or resource pool is attached to a Server Profile. Slot or Serial pre-assignment is also considered to be None
     * as it is different form of Assign Later. * `None` - No server is assigned to the server profile. * `Static` - Server is
     * directly assigned to server profile using assign server. * `Pool` - Server is assigned from a resource pool.
     */
    public readonly serverAssignmentMode!: pulumi.Output<string | undefined>;
    /**
     * A reference to a resourcepoolPool resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    public readonly serverPools!: pulumi.Output<outputs.ServerProfileServerPool[]>;
    /**
     * Serial number of the server that would be assigned to this pre-assigned Server Profile. It can be any string that
     * adheres to the following constraints: It should start and end with an alphanumeric character. It cannot be more than 20
     * characters.
     */
    public readonly serverPreAssignBySerial!: pulumi.Output<string | undefined>;
    /**
     * Server profile is pre-assigned to a server using slot.
     */
    public readonly serverPreAssignBySlots!: pulumi.Output<outputs.ServerProfileServerPreAssignBySlot[]>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    public readonly sharedScope!: pulumi.Output<string>;
    /**
     * A reference to a policyAbstractProfile resource. When the $expand query parameter is specified, the referenced resource
     * is returned inline.
     */
    public readonly srcTemplates!: pulumi.Output<outputs.ServerProfileSrcTemplate[]>;
    /**
     * The UUID address for the server must include UUID prefix xxxxxxxx-xxxx-xxxx along with the UUID suffix of format
     * xxxx-xxxxxxxxxxxx.
     */
    public readonly staticUuidAddress!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<outputs.ServerProfileTag[]>;
    /**
     * The platform for which the server profile is applicable. It can either be a server that is operating in standalone mode
     * or which is attached to a Fabric Interconnect managed by Intersight. * `Standalone` - Servers which are operating in
     * standalone mode i.e. not connected to a Fabric Interconnected. * `FIAttached` - Servers which are connected to a Fabric
     * Interconnect that is managed by Intersight.
     */
    public readonly targetPlatform!: pulumi.Output<string | undefined>;
    /**
     * Defines the type of the profile. Accepted values are instance or template. * `instance` - The profile defines the
     * configuration for a specific instance of a target.
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * User label assigned to the server profile.
     */
    public readonly userLabel!: pulumi.Output<string | undefined>;
    /**
     * The UUID address that is assigned to the server based on the UUID pool.
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * UUID address allocation type selected to assign an UUID address for the server. * `NONE` - The user did not assign any
     * UUID address. * `STATIC` - The user assigns a static UUID address. * `POOL` - The user selects a pool from which the
     * address will be leased.
     */
    public readonly uuidAddressType!: pulumi.Output<string | undefined>;
    /**
     * A reference to a uuidpoolUuidLease resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    public readonly uuidLeases!: pulumi.Output<outputs.ServerProfileUuidLease[]>;
    /**
     * A reference to a uuidpoolPool resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    public readonly uuidPools!: pulumi.Output<outputs.ServerProfileUuidPool[]>;
    /**
     * The versioning info for this managed object.
     */
    public readonly versionContexts!: pulumi.Output<outputs.ServerProfileVersionContext[]>;
    /**
     * This model object can trigger workflows. Use this option to wait for all running workflows to reach a complete state.
     */
    public readonly waitForCompletion!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ServerProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServerProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerProfileArgs | ServerProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerProfileState | undefined;
            resourceInputs["accountMoid"] = state ? state.accountMoid : undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["actionParams"] = state ? state.actionParams : undefined;
            resourceInputs["additionalProperties"] = state ? state.additionalProperties : undefined;
            resourceInputs["ancestors"] = state ? state.ancestors : undefined;
            resourceInputs["assignedServers"] = state ? state.assignedServers : undefined;
            resourceInputs["associatedServerPools"] = state ? state.associatedServerPools : undefined;
            resourceInputs["associatedServers"] = state ? state.associatedServers : undefined;
            resourceInputs["classId"] = state ? state.classId : undefined;
            resourceInputs["configChangeContexts"] = state ? state.configChangeContexts : undefined;
            resourceInputs["configChangeDetails"] = state ? state.configChangeDetails : undefined;
            resourceInputs["configChanges"] = state ? state.configChanges : undefined;
            resourceInputs["configContexts"] = state ? state.configContexts : undefined;
            resourceInputs["configResults"] = state ? state.configResults : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["deployStatus"] = state ? state.deployStatus : undefined;
            resourceInputs["deployedSwitches"] = state ? state.deployedSwitches : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domainGroupMoid"] = state ? state.domainGroupMoid : undefined;
            resourceInputs["internalReservationReferences"] = state ? state.internalReservationReferences : undefined;
            resourceInputs["isPmcDeployedSecurePassphraseSet"] = state ? state.isPmcDeployedSecurePassphraseSet : undefined;
            resourceInputs["leasedServers"] = state ? state.leasedServers : undefined;
            resourceInputs["modTime"] = state ? state.modTime : undefined;
            resourceInputs["moid"] = state ? state.moid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objectType"] = state ? state.objectType : undefined;
            resourceInputs["organizations"] = state ? state.organizations : undefined;
            resourceInputs["owners"] = state ? state.owners : undefined;
            resourceInputs["parents"] = state ? state.parents : undefined;
            resourceInputs["permissionResources"] = state ? state.permissionResources : undefined;
            resourceInputs["pmcDeployedSecurePassphrase"] = state ? state.pmcDeployedSecurePassphrase : undefined;
            resourceInputs["policyBuckets"] = state ? state.policyBuckets : undefined;
            resourceInputs["reservationReferences"] = state ? state.reservationReferences : undefined;
            resourceInputs["resourceLeases"] = state ? state.resourceLeases : undefined;
            resourceInputs["runningWorkflows"] = state ? state.runningWorkflows : undefined;
            resourceInputs["scheduledActions"] = state ? state.scheduledActions : undefined;
            resourceInputs["serverAssignmentMode"] = state ? state.serverAssignmentMode : undefined;
            resourceInputs["serverPools"] = state ? state.serverPools : undefined;
            resourceInputs["serverPreAssignBySerial"] = state ? state.serverPreAssignBySerial : undefined;
            resourceInputs["serverPreAssignBySlots"] = state ? state.serverPreAssignBySlots : undefined;
            resourceInputs["sharedScope"] = state ? state.sharedScope : undefined;
            resourceInputs["srcTemplates"] = state ? state.srcTemplates : undefined;
            resourceInputs["staticUuidAddress"] = state ? state.staticUuidAddress : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["targetPlatform"] = state ? state.targetPlatform : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["userLabel"] = state ? state.userLabel : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["uuidAddressType"] = state ? state.uuidAddressType : undefined;
            resourceInputs["uuidLeases"] = state ? state.uuidLeases : undefined;
            resourceInputs["uuidPools"] = state ? state.uuidPools : undefined;
            resourceInputs["versionContexts"] = state ? state.versionContexts : undefined;
            resourceInputs["waitForCompletion"] = state ? state.waitForCompletion : undefined;
        } else {
            const args = argsOrState as ServerProfileArgs | undefined;
            resourceInputs["accountMoid"] = args ? args.accountMoid : undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["actionParams"] = args ? args.actionParams : undefined;
            resourceInputs["additionalProperties"] = args ? args.additionalProperties : undefined;
            resourceInputs["ancestors"] = args ? args.ancestors : undefined;
            resourceInputs["assignedServers"] = args ? args.assignedServers : undefined;
            resourceInputs["associatedServerPools"] = args ? args.associatedServerPools : undefined;
            resourceInputs["associatedServers"] = args ? args.associatedServers : undefined;
            resourceInputs["classId"] = args ? args.classId : undefined;
            resourceInputs["configChangeContexts"] = args ? args.configChangeContexts : undefined;
            resourceInputs["configChangeDetails"] = args ? args.configChangeDetails : undefined;
            resourceInputs["configChanges"] = args ? args.configChanges : undefined;
            resourceInputs["configContexts"] = args ? args.configContexts : undefined;
            resourceInputs["configResults"] = args ? args.configResults : undefined;
            resourceInputs["createTime"] = args ? args.createTime : undefined;
            resourceInputs["deployStatus"] = args ? args.deployStatus : undefined;
            resourceInputs["deployedSwitches"] = args ? args.deployedSwitches : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domainGroupMoid"] = args ? args.domainGroupMoid : undefined;
            resourceInputs["internalReservationReferences"] = args ? args.internalReservationReferences : undefined;
            resourceInputs["isPmcDeployedSecurePassphraseSet"] = args ? args.isPmcDeployedSecurePassphraseSet : undefined;
            resourceInputs["leasedServers"] = args ? args.leasedServers : undefined;
            resourceInputs["modTime"] = args ? args.modTime : undefined;
            resourceInputs["moid"] = args ? args.moid : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["objectType"] = args ? args.objectType : undefined;
            resourceInputs["organizations"] = args ? args.organizations : undefined;
            resourceInputs["owners"] = args ? args.owners : undefined;
            resourceInputs["parents"] = args ? args.parents : undefined;
            resourceInputs["permissionResources"] = args ? args.permissionResources : undefined;
            resourceInputs["pmcDeployedSecurePassphrase"] = args ? args.pmcDeployedSecurePassphrase : undefined;
            resourceInputs["policyBuckets"] = args ? args.policyBuckets : undefined;
            resourceInputs["reservationReferences"] = args ? args.reservationReferences : undefined;
            resourceInputs["resourceLeases"] = args ? args.resourceLeases : undefined;
            resourceInputs["runningWorkflows"] = args ? args.runningWorkflows : undefined;
            resourceInputs["scheduledActions"] = args ? args.scheduledActions : undefined;
            resourceInputs["serverAssignmentMode"] = args ? args.serverAssignmentMode : undefined;
            resourceInputs["serverPools"] = args ? args.serverPools : undefined;
            resourceInputs["serverPreAssignBySerial"] = args ? args.serverPreAssignBySerial : undefined;
            resourceInputs["serverPreAssignBySlots"] = args ? args.serverPreAssignBySlots : undefined;
            resourceInputs["sharedScope"] = args ? args.sharedScope : undefined;
            resourceInputs["srcTemplates"] = args ? args.srcTemplates : undefined;
            resourceInputs["staticUuidAddress"] = args ? args.staticUuidAddress : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetPlatform"] = args ? args.targetPlatform : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["userLabel"] = args ? args.userLabel : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["uuidAddressType"] = args ? args.uuidAddressType : undefined;
            resourceInputs["uuidLeases"] = args ? args.uuidLeases : undefined;
            resourceInputs["uuidPools"] = args ? args.uuidPools : undefined;
            resourceInputs["versionContexts"] = args ? args.versionContexts : undefined;
            resourceInputs["waitForCompletion"] = args ? args.waitForCompletion : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServerProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServerProfile resources.
 */
export interface ServerProfileState {
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    /**
     * User initiated action. Each profile type has its own supported actions. For HyperFlex cluster profile, the supported
     * actions are -- Validate, Deploy, Continue, Retry, Abort, Unassign For server profile, the support actions are -- Deploy,
     * Unassign.
     */
    action?: pulumi.Input<string>;
    actionParams?: pulumi.Input<pulumi.Input<inputs.ServerProfileActionParam>[]>;
    additionalProperties?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.ServerProfileAncestor>[]>;
    /**
     * A reference to a computePhysical resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    assignedServers?: pulumi.Input<pulumi.Input<inputs.ServerProfileAssignedServer>[]>;
    /**
     * A reference to a resourcepoolPool resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    associatedServerPools?: pulumi.Input<pulumi.Input<inputs.ServerProfileAssociatedServerPool>[]>;
    /**
     * A reference to a computePhysical resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    associatedServers?: pulumi.Input<pulumi.Input<inputs.ServerProfileAssociatedServer>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    /**
     * The configuration change state and results of the last change operation.
     */
    configChangeContexts?: pulumi.Input<pulumi.Input<inputs.ServerProfileConfigChangeContext>[]>;
    /**
     * An array of relationships to serverConfigChangeDetail resources.
     */
    configChangeDetails?: pulumi.Input<pulumi.Input<inputs.ServerProfileConfigChangeDetail>[]>;
    /**
     * Pending configuration changes at the summary level. Detail changes are saved in configChangeDetails as a separate
     * object.
     */
    configChanges?: pulumi.Input<pulumi.Input<inputs.ServerProfileConfigChange>[]>;
    /**
     * The configuration state and results of the last configuration operation.
     */
    configContexts?: pulumi.Input<pulumi.Input<inputs.ServerProfileConfigContext>[]>;
    /**
     * A reference to a serverConfigResult resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    configResults?: pulumi.Input<pulumi.Input<inputs.ServerProfileConfigResult>[]>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The status of the server profile indicating if deployment has been initiated on both fabric interconnects or not. *
     * `None` - Switch profiles not deployed on either of the switches. * `Complete` - Both switch profiles of the cluster
     * profile are deployed. * `Partial` - Only one of the switch profiles of the cluster profile is deployed.
     */
    deployStatus?: pulumi.Input<string>;
    /**
     * The property which determines if the deployment should be skipped on any of the Fabric Interconnects. It is set based on
     * the state of a fabric interconnect to Intersight before the deployment of the server proile begins. * `None` - Server
     * profile configuration not deployed on either of the fabric interconnects. * `AB` - Server profile configuration deployed
     * on both fabric interconnects. * `A` - Server profile configuration deployed on fabric interconnect A only. * `B` -
     * Server profile configuration deployed on fabric interconnect B only.
     */
    deployedSwitches?: pulumi.Input<string>;
    /**
     * Description of the profile.
     */
    description?: pulumi.Input<string>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    internalReservationReferences?: pulumi.Input<pulumi.Input<inputs.ServerProfileInternalReservationReference>[]>;
    /**
     * Indicates whether the value of the 'pmcDeployedSecurePassphrase' property has been set.
     */
    isPmcDeployedSecurePassphraseSet?: pulumi.Input<boolean>;
    /**
     * A reference to a computePhysical resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    leasedServers?: pulumi.Input<pulumi.Input<inputs.ServerProfileLeasedServer>[]>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * Name of the profile instance or profile template.
     */
    name?: pulumi.Input<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    /**
     * A reference to a organizationOrganization resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    organizations?: pulumi.Input<pulumi.Input<inputs.ServerProfileOrganization>[]>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.ServerProfileParent>[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.ServerProfilePermissionResource>[]>;
    /**
     * Secure passphrase that is already deployed on all the Persistent Memory Modules on the server. This deployed passphrase
     * is required during deploy of server profile if secure passphrase is changed or security is disabled in the attached
     * persistent memory policy.
     */
    pmcDeployedSecurePassphrase?: pulumi.Input<string>;
    /**
     * An array of relationships to policyAbstractPolicy resources.
     */
    policyBuckets?: pulumi.Input<pulumi.Input<inputs.ServerProfilePolicyBucket>[]>;
    reservationReferences?: pulumi.Input<pulumi.Input<inputs.ServerProfileReservationReference>[]>;
    /**
     * A reference to a resourcepoolLease resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    resourceLeases?: pulumi.Input<pulumi.Input<inputs.ServerProfileResourceLease>[]>;
    /**
     * An array of relationships to workflowWorkflowInfo resources.
     */
    runningWorkflows?: pulumi.Input<pulumi.Input<inputs.ServerProfileRunningWorkflow>[]>;
    scheduledActions?: pulumi.Input<pulumi.Input<inputs.ServerProfileScheduledAction>[]>;
    /**
     * Source of the server assigned to the Server Profile. Values can be Static, Pool or None. Static is used if a server is
     * attached directly to a Server Profile. Pool is used if a resource pool is attached to a Server Profile. None is used if
     * no server or resource pool is attached to a Server Profile. Slot or Serial pre-assignment is also considered to be None
     * as it is different form of Assign Later. * `None` - No server is assigned to the server profile. * `Static` - Server is
     * directly assigned to server profile using assign server. * `Pool` - Server is assigned from a resource pool.
     */
    serverAssignmentMode?: pulumi.Input<string>;
    /**
     * A reference to a resourcepoolPool resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    serverPools?: pulumi.Input<pulumi.Input<inputs.ServerProfileServerPool>[]>;
    /**
     * Serial number of the server that would be assigned to this pre-assigned Server Profile. It can be any string that
     * adheres to the following constraints: It should start and end with an alphanumeric character. It cannot be more than 20
     * characters.
     */
    serverPreAssignBySerial?: pulumi.Input<string>;
    /**
     * Server profile is pre-assigned to a server using slot.
     */
    serverPreAssignBySlots?: pulumi.Input<pulumi.Input<inputs.ServerProfileServerPreAssignBySlot>[]>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    /**
     * A reference to a policyAbstractProfile resource. When the $expand query parameter is specified, the referenced resource
     * is returned inline.
     */
    srcTemplates?: pulumi.Input<pulumi.Input<inputs.ServerProfileSrcTemplate>[]>;
    /**
     * The UUID address for the server must include UUID prefix xxxxxxxx-xxxx-xxxx along with the UUID suffix of format
     * xxxx-xxxxxxxxxxxx.
     */
    staticUuidAddress?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.ServerProfileTag>[]>;
    /**
     * The platform for which the server profile is applicable. It can either be a server that is operating in standalone mode
     * or which is attached to a Fabric Interconnect managed by Intersight. * `Standalone` - Servers which are operating in
     * standalone mode i.e. not connected to a Fabric Interconnected. * `FIAttached` - Servers which are connected to a Fabric
     * Interconnect that is managed by Intersight.
     */
    targetPlatform?: pulumi.Input<string>;
    /**
     * Defines the type of the profile. Accepted values are instance or template. * `instance` - The profile defines the
     * configuration for a specific instance of a target.
     */
    type?: pulumi.Input<string>;
    /**
     * User label assigned to the server profile.
     */
    userLabel?: pulumi.Input<string>;
    /**
     * The UUID address that is assigned to the server based on the UUID pool.
     */
    uuid?: pulumi.Input<string>;
    /**
     * UUID address allocation type selected to assign an UUID address for the server. * `NONE` - The user did not assign any
     * UUID address. * `STATIC` - The user assigns a static UUID address. * `POOL` - The user selects a pool from which the
     * address will be leased.
     */
    uuidAddressType?: pulumi.Input<string>;
    /**
     * A reference to a uuidpoolUuidLease resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    uuidLeases?: pulumi.Input<pulumi.Input<inputs.ServerProfileUuidLease>[]>;
    /**
     * A reference to a uuidpoolPool resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    uuidPools?: pulumi.Input<pulumi.Input<inputs.ServerProfileUuidPool>[]>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.ServerProfileVersionContext>[]>;
    /**
     * This model object can trigger workflows. Use this option to wait for all running workflows to reach a complete state.
     */
    waitForCompletion?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ServerProfile resource.
 */
export interface ServerProfileArgs {
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    /**
     * User initiated action. Each profile type has its own supported actions. For HyperFlex cluster profile, the supported
     * actions are -- Validate, Deploy, Continue, Retry, Abort, Unassign For server profile, the support actions are -- Deploy,
     * Unassign.
     */
    action?: pulumi.Input<string>;
    actionParams?: pulumi.Input<pulumi.Input<inputs.ServerProfileActionParam>[]>;
    additionalProperties?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.ServerProfileAncestor>[]>;
    /**
     * A reference to a computePhysical resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    assignedServers?: pulumi.Input<pulumi.Input<inputs.ServerProfileAssignedServer>[]>;
    /**
     * A reference to a resourcepoolPool resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    associatedServerPools?: pulumi.Input<pulumi.Input<inputs.ServerProfileAssociatedServerPool>[]>;
    /**
     * A reference to a computePhysical resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    associatedServers?: pulumi.Input<pulumi.Input<inputs.ServerProfileAssociatedServer>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    /**
     * The configuration change state and results of the last change operation.
     */
    configChangeContexts?: pulumi.Input<pulumi.Input<inputs.ServerProfileConfigChangeContext>[]>;
    /**
     * An array of relationships to serverConfigChangeDetail resources.
     */
    configChangeDetails?: pulumi.Input<pulumi.Input<inputs.ServerProfileConfigChangeDetail>[]>;
    /**
     * Pending configuration changes at the summary level. Detail changes are saved in configChangeDetails as a separate
     * object.
     */
    configChanges?: pulumi.Input<pulumi.Input<inputs.ServerProfileConfigChange>[]>;
    /**
     * The configuration state and results of the last configuration operation.
     */
    configContexts?: pulumi.Input<pulumi.Input<inputs.ServerProfileConfigContext>[]>;
    /**
     * A reference to a serverConfigResult resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    configResults?: pulumi.Input<pulumi.Input<inputs.ServerProfileConfigResult>[]>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The status of the server profile indicating if deployment has been initiated on both fabric interconnects or not. *
     * `None` - Switch profiles not deployed on either of the switches. * `Complete` - Both switch profiles of the cluster
     * profile are deployed. * `Partial` - Only one of the switch profiles of the cluster profile is deployed.
     */
    deployStatus?: pulumi.Input<string>;
    /**
     * The property which determines if the deployment should be skipped on any of the Fabric Interconnects. It is set based on
     * the state of a fabric interconnect to Intersight before the deployment of the server proile begins. * `None` - Server
     * profile configuration not deployed on either of the fabric interconnects. * `AB` - Server profile configuration deployed
     * on both fabric interconnects. * `A` - Server profile configuration deployed on fabric interconnect A only. * `B` -
     * Server profile configuration deployed on fabric interconnect B only.
     */
    deployedSwitches?: pulumi.Input<string>;
    /**
     * Description of the profile.
     */
    description?: pulumi.Input<string>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    internalReservationReferences?: pulumi.Input<pulumi.Input<inputs.ServerProfileInternalReservationReference>[]>;
    /**
     * Indicates whether the value of the 'pmcDeployedSecurePassphrase' property has been set.
     */
    isPmcDeployedSecurePassphraseSet?: pulumi.Input<boolean>;
    /**
     * A reference to a computePhysical resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    leasedServers?: pulumi.Input<pulumi.Input<inputs.ServerProfileLeasedServer>[]>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * Name of the profile instance or profile template.
     */
    name?: pulumi.Input<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    /**
     * A reference to a organizationOrganization resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    organizations?: pulumi.Input<pulumi.Input<inputs.ServerProfileOrganization>[]>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.ServerProfileParent>[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.ServerProfilePermissionResource>[]>;
    /**
     * Secure passphrase that is already deployed on all the Persistent Memory Modules on the server. This deployed passphrase
     * is required during deploy of server profile if secure passphrase is changed or security is disabled in the attached
     * persistent memory policy.
     */
    pmcDeployedSecurePassphrase?: pulumi.Input<string>;
    /**
     * An array of relationships to policyAbstractPolicy resources.
     */
    policyBuckets?: pulumi.Input<pulumi.Input<inputs.ServerProfilePolicyBucket>[]>;
    reservationReferences?: pulumi.Input<pulumi.Input<inputs.ServerProfileReservationReference>[]>;
    /**
     * A reference to a resourcepoolLease resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    resourceLeases?: pulumi.Input<pulumi.Input<inputs.ServerProfileResourceLease>[]>;
    /**
     * An array of relationships to workflowWorkflowInfo resources.
     */
    runningWorkflows?: pulumi.Input<pulumi.Input<inputs.ServerProfileRunningWorkflow>[]>;
    scheduledActions?: pulumi.Input<pulumi.Input<inputs.ServerProfileScheduledAction>[]>;
    /**
     * Source of the server assigned to the Server Profile. Values can be Static, Pool or None. Static is used if a server is
     * attached directly to a Server Profile. Pool is used if a resource pool is attached to a Server Profile. None is used if
     * no server or resource pool is attached to a Server Profile. Slot or Serial pre-assignment is also considered to be None
     * as it is different form of Assign Later. * `None` - No server is assigned to the server profile. * `Static` - Server is
     * directly assigned to server profile using assign server. * `Pool` - Server is assigned from a resource pool.
     */
    serverAssignmentMode?: pulumi.Input<string>;
    /**
     * A reference to a resourcepoolPool resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    serverPools?: pulumi.Input<pulumi.Input<inputs.ServerProfileServerPool>[]>;
    /**
     * Serial number of the server that would be assigned to this pre-assigned Server Profile. It can be any string that
     * adheres to the following constraints: It should start and end with an alphanumeric character. It cannot be more than 20
     * characters.
     */
    serverPreAssignBySerial?: pulumi.Input<string>;
    /**
     * Server profile is pre-assigned to a server using slot.
     */
    serverPreAssignBySlots?: pulumi.Input<pulumi.Input<inputs.ServerProfileServerPreAssignBySlot>[]>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    /**
     * A reference to a policyAbstractProfile resource. When the $expand query parameter is specified, the referenced resource
     * is returned inline.
     */
    srcTemplates?: pulumi.Input<pulumi.Input<inputs.ServerProfileSrcTemplate>[]>;
    /**
     * The UUID address for the server must include UUID prefix xxxxxxxx-xxxx-xxxx along with the UUID suffix of format
     * xxxx-xxxxxxxxxxxx.
     */
    staticUuidAddress?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.ServerProfileTag>[]>;
    /**
     * The platform for which the server profile is applicable. It can either be a server that is operating in standalone mode
     * or which is attached to a Fabric Interconnect managed by Intersight. * `Standalone` - Servers which are operating in
     * standalone mode i.e. not connected to a Fabric Interconnected. * `FIAttached` - Servers which are connected to a Fabric
     * Interconnect that is managed by Intersight.
     */
    targetPlatform?: pulumi.Input<string>;
    /**
     * Defines the type of the profile. Accepted values are instance or template. * `instance` - The profile defines the
     * configuration for a specific instance of a target.
     */
    type?: pulumi.Input<string>;
    /**
     * User label assigned to the server profile.
     */
    userLabel?: pulumi.Input<string>;
    /**
     * The UUID address that is assigned to the server based on the UUID pool.
     */
    uuid?: pulumi.Input<string>;
    /**
     * UUID address allocation type selected to assign an UUID address for the server. * `NONE` - The user did not assign any
     * UUID address. * `STATIC` - The user assigns a static UUID address. * `POOL` - The user selects a pool from which the
     * address will be leased.
     */
    uuidAddressType?: pulumi.Input<string>;
    /**
     * A reference to a uuidpoolUuidLease resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    uuidLeases?: pulumi.Input<pulumi.Input<inputs.ServerProfileUuidLease>[]>;
    /**
     * A reference to a uuidpoolPool resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    uuidPools?: pulumi.Input<pulumi.Input<inputs.ServerProfileUuidPool>[]>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.ServerProfileVersionContext>[]>;
    /**
     * This model object can trigger workflows. Use this option to wait for all running workflows to reach a complete state.
     */
    waitForCompletion?: pulumi.Input<boolean>;
}
