// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getHyperflexDrive(args?: GetHyperflexDriveArgs, opts?: pulumi.InvokeOptions): Promise<GetHyperflexDriveResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getHyperflexDrive:getHyperflexDrive", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "capacity": args.capacity,
        "classId": args.classId,
        "createTime": args.createTime,
        "diskUseState": args.diskUseState,
        "domainGroupMoid": args.domainGroupMoid,
        "hostName": args.hostName,
        "hostUuid": args.hostUuid,
        "id": args.id,
        "locatorLed": args.locatorLed,
        "modTime": args.modTime,
        "modelNumber": args.modelNumber,
        "moid": args.moid,
        "node": args.node,
        "nodeUuid": args.nodeUuid,
        "nrVersion": args.nrVersion,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "path": args.path,
        "permissionResources": args.permissionResources,
        "protocol": args.protocol,
        "serialNumber": args.serialNumber,
        "sharedScope": args.sharedScope,
        "slotNumber": args.slotNumber,
        "status": args.status,
        "tags": args.tags,
        "type": args.type,
        "usage": args.usage,
        "usedCapacity": args.usedCapacity,
        "uuid": args.uuid,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getHyperflexDrive.
 */
export interface GetHyperflexDriveArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetHyperflexDriveAncestor[];
    capacity?: number;
    classId?: string;
    createTime?: string;
    diskUseState?: string;
    domainGroupMoid?: string;
    hostName?: string;
    hostUuid?: string;
    id?: string;
    locatorLed?: inputs.GetHyperflexDriveLocatorLed;
    modTime?: string;
    modelNumber?: string;
    moid?: string;
    node?: inputs.GetHyperflexDriveNode;
    nodeUuid?: string;
    nrVersion?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetHyperflexDriveParent;
    path?: string;
    permissionResources?: inputs.GetHyperflexDrivePermissionResource[];
    protocol?: string;
    serialNumber?: string;
    sharedScope?: string;
    slotNumber?: string;
    status?: string;
    tags?: inputs.GetHyperflexDriveTag[];
    type?: string;
    usage?: string;
    usedCapacity?: number;
    uuid?: string;
    versionContext?: inputs.GetHyperflexDriveVersionContext;
}

/**
 * A collection of values returned by getHyperflexDrive.
 */
export interface GetHyperflexDriveResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetHyperflexDriveAncestor[];
    readonly capacity?: number;
    readonly classId?: string;
    readonly createTime?: string;
    readonly diskUseState?: string;
    readonly domainGroupMoid?: string;
    readonly hostName?: string;
    readonly hostUuid?: string;
    readonly id: string;
    readonly locatorLed?: outputs.GetHyperflexDriveLocatorLed;
    readonly modTime?: string;
    readonly modelNumber?: string;
    readonly moid?: string;
    readonly node?: outputs.GetHyperflexDriveNode;
    readonly nodeUuid?: string;
    readonly nrVersion?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetHyperflexDriveParent;
    readonly path?: string;
    readonly permissionResources?: outputs.GetHyperflexDrivePermissionResource[];
    readonly protocol?: string;
    readonly results: outputs.GetHyperflexDriveResult[];
    readonly serialNumber?: string;
    readonly sharedScope?: string;
    readonly slotNumber?: string;
    readonly status?: string;
    readonly tags?: outputs.GetHyperflexDriveTag[];
    readonly type?: string;
    readonly usage?: string;
    readonly usedCapacity?: number;
    readonly uuid?: string;
    readonly versionContext?: outputs.GetHyperflexDriveVersionContext;
}
export function getHyperflexDriveOutput(args?: GetHyperflexDriveOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetHyperflexDriveResult> {
    return pulumi.output(args).apply((a: any) => getHyperflexDrive(a, opts))
}

/**
 * A collection of arguments for invoking getHyperflexDrive.
 */
export interface GetHyperflexDriveOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetHyperflexDriveAncestorArgs>[]>;
    capacity?: pulumi.Input<number>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    diskUseState?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    hostName?: pulumi.Input<string>;
    hostUuid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    locatorLed?: pulumi.Input<inputs.GetHyperflexDriveLocatorLedArgs>;
    modTime?: pulumi.Input<string>;
    modelNumber?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    node?: pulumi.Input<inputs.GetHyperflexDriveNodeArgs>;
    nodeUuid?: pulumi.Input<string>;
    nrVersion?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetHyperflexDriveParentArgs>;
    path?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetHyperflexDrivePermissionResourceArgs>[]>;
    protocol?: pulumi.Input<string>;
    serialNumber?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    slotNumber?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetHyperflexDriveTagArgs>[]>;
    type?: pulumi.Input<string>;
    usage?: pulumi.Input<string>;
    usedCapacity?: pulumi.Input<number>;
    uuid?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetHyperflexDriveVersionContextArgs>;
}
