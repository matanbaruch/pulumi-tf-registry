// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WorkflowWorkflowInfo extends pulumi.CustomResource {
    /**
     * Get an existing WorkflowWorkflowInfo resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkflowWorkflowInfoState, opts?: pulumi.CustomResourceOptions): WorkflowWorkflowInfo {
        return new WorkflowWorkflowInfo(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'intersight:index/workflowWorkflowInfo:WorkflowWorkflowInfo';

    /**
     * Returns true if the given object is an instance of WorkflowWorkflowInfo.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkflowWorkflowInfo {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkflowWorkflowInfo.__pulumiType;
    }

    /**
     * The Account ID for this managed object.
     */
    public readonly accountMoid!: pulumi.Output<string>;
    /**
     * A reference to a iamAccount resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    public readonly accounts!: pulumi.Output<outputs.WorkflowWorkflowInfoAccount[]>;
    /**
     * The action of the workflow such as start, cancel, retry, pause. * `None` - No action is set, this is the default value
     * for action field. * `Create` - Create a new instance of the workflow but it does not start the execution of the
     * workflow. Use the Start action to start execution of the workflow. * `Start` - Start a new execution of the workflow. *
     * `Pause` - Pause the workflow, this can only be issued on workflows that are in running state. A workflow can be paused
     * for a maximum of 180 days, after 180 days the workflow will be terminated by the system. * `Resume` - Resume the
     * workflow which was previously paused through pause action on the workflow. * `Rerun` - Rerun the workflow that has
     * previously reached a failed state. The workflow is run from the beginning using inputs from previous execution.
     * Completed and currently running workflows cannot be rerun. Workflows do not have to be marked for retry to use this
     * action. * `Retry` - This action has been deprecated. Please use RetryFailed, Rerun or RetryFromTask action. Retry the
     * workflow that has previously reached a final state and has the retryable property set to true. A running or waiting
     * workflow cannot be retried. If the property retryFromTaskName is also passed along with this action, the workflow will
     * be started from that specific task, otherwise the workflow will be restarted from the first task. The task name in
     * retryFromTaskName must be one of the tasks that completed or failed in the previous run. It is not possible to retry a
     * workflow from a task which wasn't run in the previous iteration. * `RetryFailed` - Retry the workflow that has failed. A
     * running or waiting workflow or a workflow that completed successfully cannot be retried. Only the tasks that failed in
     * the previous run will be retried and the rest of workflow will be run. This action does not restart the workflow and
     * also does not support retrying from a specific task. * `RetryFromTask` - Retry the workflow that has previously reached
     * a failed state and has the retryable property set to true. A running or waiting workflow cannot be retried.
     * RetryFromTaskName must be passed along with this action, and the workflow will be started from that specific task. The
     * task name in RetryFromTaskName must be one of the tasks that was executed in the previous attempt. It is not possible to
     * retry a workflow from a task that wasn't run in the previous execution attempt. * `Cancel` - Cancel the workflow that is
     * in running or waiting state.
     */
    public readonly action!: pulumi.Output<string | undefined>;
    public readonly additionalProperties!: pulumi.Output<string | undefined>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly ancestors!: pulumi.Output<outputs.WorkflowWorkflowInfoAncestor[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    public readonly associatedObjects!: pulumi.Output<outputs.WorkflowWorkflowInfoAssociatedObject[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    public readonly classId!: pulumi.Output<string | undefined>;
    /**
     * The time when the workflow info will be removed from the database. When WorkflowInfo is created, cleanup time will be
     * set to 181 days. As the workflow progresses through different states the cleanup time can be updated. A cleanup time of
     * 0 means the workflow is not scheduled for cleanup. An active workflow that continues to schedule & run tasks can run for
     * any amount of time and there is no upper bound for such workflows. Workflows that are not actively running, say in
     * Paused or Waiting states will be removed after 181 days.
     */
    public readonly cleanupTime!: pulumi.Output<string>;
    /**
     * The time when this managed object was created.
     */
    public readonly createTime!: pulumi.Output<string>;
    /**
     * The DomainGroup ID for this managed object.
     */
    public readonly domainGroupMoid!: pulumi.Output<string>;
    /**
     * The email address of the user who started this workflow. In the case of LDAP users, this field can hold either a
     * username or an email.
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * The time when the workflow reached a final state.
     */
    public readonly endTime!: pulumi.Output<string>;
    /**
     * The duration in hours after which the workflow info for failed, terminated or timed out workflow will be removed from
     * database. The minimum is 1 hour, maximum is 365 days and default is 90 days.
     */
    public readonly failedWorkflowCleanupDuration!: pulumi.Output<number | undefined>;
    /**
     * All the given inputs for the workflow. The schema for the inputs is defined in the InputDefinition section of the
     * WorkflowDefinition. The InputDefinition will provide a list of input fields to be accepted, the associated datatype of
     * the inputs and any additional constraints on the inputs. For more information please refer to InputDefinition property
     * in the the the WorkflowDefinition resource. The inputs for a workflow are provided as a collection of key-value pairs,
     * where key is the name of the input and value is any valid JSON data which conforms to the datatype of the input as
     * specified in the InputDefinition. When the input passed into a workflow does not match the datatype or the constraints
     * specified in the workflow definition, it will not be accepted. For example, if the InputDefinition specified that
     * workflow must accept a string name 'key' and the value passed for key must adhere to a regex pattern. If Workflow was
     * started with input where 'key' is not a string matching the regex pattern, an error will be generated and workflow will
     * not start execution. During workflow definition design, the input passed into the workflow will be referred using the
     * format 'workflow.input.<inputName>'. If the input is referred directly in a mapping it will be in the format
     * '${workflow.input.<inputName>}' or inside a template mapping in the format '{{.global.workflow.input.<inputName>}}'.
     */
    public readonly input!: pulumi.Output<string | undefined>;
    /**
     * A workflow instance Id which is the unique identified for the workflow execution.
     */
    public readonly instId!: pulumi.Output<string>;
    /**
     * Denotes that an Intersight service started this workflow as internal and hence will not be shown in Intersight User
     * Interface. Typically these are internal system maintenance workflows which are triggered by Intersight services.
     */
    public readonly internal!: pulumi.Output<boolean>;
    /**
     * The last action that was issued on the workflow is saved in this field. * `None` - No action is set, this is the default
     * value for action field. * `Create` - Create a new instance of the workflow but it does not start the execution of the
     * workflow. Use the Start action to start execution of the workflow. * `Start` - Start a new execution of the workflow. *
     * `Pause` - Pause the workflow, this can only be issued on workflows that are in running state. A workflow can be paused
     * for a maximum of 180 days, after 180 days the workflow will be terminated by the system. * `Resume` - Resume the
     * workflow which was previously paused through pause action on the workflow. * `Rerun` - Rerun the workflow that has
     * previously reached a failed state. The workflow is run from the beginning using inputs from previous execution.
     * Completed and currently running workflows cannot be rerun. Workflows do not have to be marked for retry to use this
     * action. * `Retry` - This action has been deprecated. Please use RetryFailed, Rerun or RetryFromTask action. Retry the
     * workflow that has previously reached a final state and has the retryable property set to true. A running or waiting
     * workflow cannot be retried. If the property retryFromTaskName is also passed along with this action, the workflow will
     * be started from that specific task, otherwise the workflow will be restarted from the first task. The task name in
     * retryFromTaskName must be one of the tasks that completed or failed in the previous run. It is not possible to retry a
     * workflow from a task which wasn't run in the previous iteration. * `RetryFailed` - Retry the workflow that has failed. A
     * running or waiting workflow or a workflow that completed successfully cannot be retried. Only the tasks that failed in
     * the previous run will be retried and the rest of workflow will be run. This action does not restart the workflow and
     * also does not support retrying from a specific task. * `RetryFromTask` - Retry the workflow that has previously reached
     * a failed state and has the retryable property set to true. A running or waiting workflow cannot be retried.
     * RetryFromTaskName must be passed along with this action, and the workflow will be started from that specific task. The
     * task name in RetryFromTaskName must be one of the tasks that was executed in the previous attempt. It is not possible to
     * retry a workflow from a task that wasn't run in the previous execution attempt. * `Cancel` - Cancel the workflow that is
     * in running or waiting state.
     */
    public readonly lastAction!: pulumi.Output<string>;
    public readonly messages!: pulumi.Output<outputs.WorkflowWorkflowInfoMessage[]>;
    /**
     * The time when this managed object was last modified.
     */
    public readonly modTime!: pulumi.Output<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    public readonly moid!: pulumi.Output<string>;
    /**
     * A name of the workflow execution instance.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    public readonly objectType!: pulumi.Output<string | undefined>;
    /**
     * A reference to a organizationOrganization resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    public readonly organizations!: pulumi.Output<outputs.WorkflowWorkflowInfoOrganization[]>;
    /**
     * All the generated outputs for the workflow. The schema for the outputs are defined in the OutputDefinition section of
     * the WorkflowDefinition. The OutputDefinition will provide a list of output fields that could be generated after workflow
     * execution is completed and the associated datatype of the outputs. For more information please refer to OutputDefinition
     * property in WorkflowDefinition resource. The output for the workflow is generated as a collection of key-value pairs,
     * where key is the name of the output and value is any valid JSON data which conforms to the datatype of output as
     * specified in the OutputDefinition. During workflow definition design, if a workflow is included as a sub-workflow inside
     * a parent workflow then the outputs generated by the sub-workflow can be used in the workflow design. For example, if
     * workflow was included into parent workflow as 'SubWorkflowSample1', then that output can be referred as
     * 'SubWorkflowSample1.output.<outputName>'. In the output is referred directly in a mapping it will be in the format
     * '${SubWorkflowSample1.output.<outputName>}' or inside a template mapping will be in the format
     * '{{SubWorkflowSample1.output.<outputName>}}'.
     */
    public readonly output!: pulumi.Output<string>;
    public readonly owners!: pulumi.Output<string[]>;
    /**
     * A reference to a workflowTaskInfo resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    public readonly parentTaskInfos!: pulumi.Output<outputs.WorkflowWorkflowInfoParentTaskInfo[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    public readonly parents!: pulumi.Output<outputs.WorkflowWorkflowInfoParent[]>;
    /**
     * Denotes the reason workflow is in paused status. * `None` - Pause reason is none, which indicates there is no reason for
     * the pause state. * `TaskWithWarning` - Pause reason indicates the workflow is in this state due to a task that has a
     * status as completed with warnings. * `SystemMaintenance` - Pause reason indicates the workflow is in this state based on
     * actions of system admin for maintenance.
     */
    public readonly pauseReason!: pulumi.Output<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly permissionResources!: pulumi.Output<outputs.WorkflowWorkflowInfoPermissionResource[]>;
    /**
     * A reference to a iamPermission resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    public readonly permissions!: pulumi.Output<outputs.WorkflowWorkflowInfoPermission[]>;
    /**
     * This field indicates percentage of workflow task completion based on the total number of tasks in the workflow. The
     * total number of tasks in the workflow is calculated based on the longest path the workflow execution can take. So
     * progress is calculated based on the percentage of tasks that completed out of the total number of tasks that could be
     * executed. Progress is not a representation of the time taken to complete the workflow. A task is considered as completed
     * if the task status is either "NO_OP" or "COMPLETED". If the task status is "SKIP_TO_FAIL", the workflow will be
     * terminated and the progress of the workflow will be set to 100.
     */
    public readonly progress!: pulumi.Output<number>;
    /**
     * Type to capture all the properties for the workflow info passed on from workflow definition.
     */
    public readonly properties!: pulumi.Output<outputs.WorkflowWorkflowInfoProperty[]>;
    /**
     * This field is required when RetryFromTask action is issued for a workflow that is in a 'final' state. The workflow will
     * be retried from the specified task. This field must specify a task name which is the unique name of the task within the
     * workflow. The task name must be one of the tasks that were completed or failed in the previous run. It is not possible
     * to retry a workflow from a task that wasn't run in the previous execution attempt.
     */
    public readonly retryFromTaskName!: pulumi.Output<string | undefined>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    public readonly sharedScope!: pulumi.Output<string>;
    /**
     * The source service that started the workflow execution and hence represents the owning service for this workflow.
     */
    public readonly src!: pulumi.Output<string>;
    /**
     * The time when the workflow was started for execution.
     */
    public readonly startTime!: pulumi.Output<string>;
    /**
     * A status of the workflow (RUNNING, WAITING, COMPLETED, TIME_OUT, FAILED). The "status" field has been deprecated and is
     * now replaced with the "workflowStatus" field.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * The duration in hours after which the workflow info for successful workflow will be removed from database. The minimum
     * is 1 hour, maximum is 365 days and default is 90 days.
     */
    public readonly successWorkflowCleanupDuration!: pulumi.Output<number | undefined>;
    public readonly tags!: pulumi.Output<outputs.WorkflowWorkflowInfoTag[]>;
    /**
     * Used to update a TaskInfo instance in the WorkflowInfo, it is used as a way to update status and provide user inputs for
     * a WaitTask.
     */
    public readonly taskInfoUpdates!: pulumi.Output<outputs.WorkflowWorkflowInfoTaskInfoUpdate[]>;
    /**
     * An array of relationships to workflowTaskInfo resources.
     */
    public readonly taskInfos!: pulumi.Output<outputs.WorkflowWorkflowInfoTaskInfo[]>;
    /**
     * The trace id to keep track of workflow execution.
     */
    public readonly traceId!: pulumi.Output<string>;
    /**
     * A type of the workflow (serverconfig, ansible_monitoring).
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Property will be set when a user action is required on the workflow. This can be because the workflow is waiting for a
     * wait task to be updated, workflow is paused or workflow launched by a configuration object has failed and needs to be
     * retried in order to complete successfully.
     */
    public readonly userActionRequired!: pulumi.Output<boolean>;
    /**
     * The user identifier which indicates the user that started this workflow.
     */
    public readonly userId!: pulumi.Output<string>;
    /**
     * All the generated variables for the workflow. During workflow execution, the variables will be updated as per the
     * variableParameters specified after each task execution.
     */
    public readonly variable!: pulumi.Output<string>;
    /**
     * The versioning info for this managed object.
     */
    public readonly versionContexts!: pulumi.Output<outputs.WorkflowWorkflowInfoVersionContext[]>;
    /**
     * Denotes the reason workflow is in waiting status. * `None` - Wait reason is none, which indicates there is no reason for
     * the waiting state. * `GatherTasks` - Wait reason is gathering tasks, which indicates the workflow is in this state in
     * order to gather tasks. * `Duplicate` - Wait reason is duplicate, which indicates the workflow is a duplicate of current
     * running workflow. * `RateLimit` - Wait reason is rate limit, which indicates the workflow is rate limited by
     * account/instance level throttling threshold. * `WaitTask` - Wait reason when there are one or more wait tasks in the
     * workflow which are yet to receive a task status update. * `PendingRetryFailed` - Wait reason when the workflow is
     * pending a RetryFailed action. * `WaitingToStart` - Workflow is waiting to start on workflow engine.
     */
    public readonly waitReason!: pulumi.Output<string>;
    /**
     * The workflow context which contains initiator and target information.
     */
    public readonly workflowCtxes!: pulumi.Output<outputs.WorkflowWorkflowInfoWorkflowCtx[]>;
    /**
     * A reference to a workflowWorkflowDefinition resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    public readonly workflowDefinitions!: pulumi.Output<outputs.WorkflowWorkflowInfoWorkflowDefinition[]>;
    /**
     * The current state of the workflow execution instance. A draft workflow execution will be in NotStarted state and when
     * "Start" action is issued then the workflow will move into Waiting state until the first task of the workflow is
     * scheduled at which time it will move into InProgress state. When execution reaches a final state it move to either
     * Completed, Failed or Terminated state. For more details look at the description for each state. * `NotStarted` -
     * Initially all the workflow instances are at "NotStarted" state. A workflow can be drafted in this state by issuing
     * Create action. When a workflow is in this state the inputs can be updated until the workflow is started. * `InProgress`
     * - A workflow execution moves into "InProgress" state when the first task of the workflow is scheduled for execution and
     * continues to remain in that state as long as there are tasks executing or yet to be scheduled for execution. * `Waiting`
     * - Workflow can go to waiting state due to execution of wait task present in the workflow or the workflow has not started
     * yet either due to duplicate workflow is running or due to workflow throttling. Once Workflow engine picks up the
     * workflow for execution, it will move to in progress state. * `Completed` - A workflow execution moves into Completed
     * state when the execution path of the workflow has reached the Success node in the workflow design and there are no more
     * tasks to be executed. Completed is the final state for the workflow execution instance and no further actions are
     * allowed on this workflow instance. * `Failed` - A workflow execution moves into a Failed state when the execution path
     * of the workflow has reached the Failed node in the workflow design and there are no more tasks to be scheduled. A Failed
     * node can be reached when the last executed task has failed or timed out and there are no further retries available for
     * the task. Also as per the workflow design, the last executed task did not specify an OnFailure task to be executed and
     * hence by default, the execution will reach the Failed node. Actions like "Rerun", "RetryFailed" and "RetryFromTask" can
     * be issued on failed workflow instances. Please refer to the "Action" description for more details. * `Terminated` - A
     * workflow execution moves to Terminated state when user issues a "Cancel" action or due to internal errors caused during
     * workflow execution. e.g. - Task input transformation has failed. Terminated is a final state of the workflow, no further
     * action are allowed on this workflow instance. * `Canceled` - A workflow execution moves to Canceled state when a user
     * issues a "Cancel" action. Cancel is not a final state, the workflow engine will issue cancel to all the running tasks
     * and then move the workflow to the "Terminated" state. * `Paused` - A workflow execution moves to Paused state when user
     * issues a "Pause" action. When in paused state the current running task will complete its execution but no further tasks
     * will be scheduled until the workflow is resumed. A paused workflow is resumed when the user issues a "Resume" action.
     * Paused workflows can be canceled by user.
     */
    public readonly workflowStatus!: pulumi.Output<string>;

    /**
     * Create a WorkflowWorkflowInfo resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WorkflowWorkflowInfoArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkflowWorkflowInfoArgs | WorkflowWorkflowInfoState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkflowWorkflowInfoState | undefined;
            resourceInputs["accountMoid"] = state ? state.accountMoid : undefined;
            resourceInputs["accounts"] = state ? state.accounts : undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["additionalProperties"] = state ? state.additionalProperties : undefined;
            resourceInputs["ancestors"] = state ? state.ancestors : undefined;
            resourceInputs["associatedObjects"] = state ? state.associatedObjects : undefined;
            resourceInputs["classId"] = state ? state.classId : undefined;
            resourceInputs["cleanupTime"] = state ? state.cleanupTime : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["domainGroupMoid"] = state ? state.domainGroupMoid : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["endTime"] = state ? state.endTime : undefined;
            resourceInputs["failedWorkflowCleanupDuration"] = state ? state.failedWorkflowCleanupDuration : undefined;
            resourceInputs["input"] = state ? state.input : undefined;
            resourceInputs["instId"] = state ? state.instId : undefined;
            resourceInputs["internal"] = state ? state.internal : undefined;
            resourceInputs["lastAction"] = state ? state.lastAction : undefined;
            resourceInputs["messages"] = state ? state.messages : undefined;
            resourceInputs["modTime"] = state ? state.modTime : undefined;
            resourceInputs["moid"] = state ? state.moid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objectType"] = state ? state.objectType : undefined;
            resourceInputs["organizations"] = state ? state.organizations : undefined;
            resourceInputs["output"] = state ? state.output : undefined;
            resourceInputs["owners"] = state ? state.owners : undefined;
            resourceInputs["parentTaskInfos"] = state ? state.parentTaskInfos : undefined;
            resourceInputs["parents"] = state ? state.parents : undefined;
            resourceInputs["pauseReason"] = state ? state.pauseReason : undefined;
            resourceInputs["permissionResources"] = state ? state.permissionResources : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["progress"] = state ? state.progress : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["retryFromTaskName"] = state ? state.retryFromTaskName : undefined;
            resourceInputs["sharedScope"] = state ? state.sharedScope : undefined;
            resourceInputs["src"] = state ? state.src : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["successWorkflowCleanupDuration"] = state ? state.successWorkflowCleanupDuration : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["taskInfoUpdates"] = state ? state.taskInfoUpdates : undefined;
            resourceInputs["taskInfos"] = state ? state.taskInfos : undefined;
            resourceInputs["traceId"] = state ? state.traceId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["userActionRequired"] = state ? state.userActionRequired : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["variable"] = state ? state.variable : undefined;
            resourceInputs["versionContexts"] = state ? state.versionContexts : undefined;
            resourceInputs["waitReason"] = state ? state.waitReason : undefined;
            resourceInputs["workflowCtxes"] = state ? state.workflowCtxes : undefined;
            resourceInputs["workflowDefinitions"] = state ? state.workflowDefinitions : undefined;
            resourceInputs["workflowStatus"] = state ? state.workflowStatus : undefined;
        } else {
            const args = argsOrState as WorkflowWorkflowInfoArgs | undefined;
            resourceInputs["accountMoid"] = args ? args.accountMoid : undefined;
            resourceInputs["accounts"] = args ? args.accounts : undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["additionalProperties"] = args ? args.additionalProperties : undefined;
            resourceInputs["ancestors"] = args ? args.ancestors : undefined;
            resourceInputs["associatedObjects"] = args ? args.associatedObjects : undefined;
            resourceInputs["classId"] = args ? args.classId : undefined;
            resourceInputs["cleanupTime"] = args ? args.cleanupTime : undefined;
            resourceInputs["createTime"] = args ? args.createTime : undefined;
            resourceInputs["domainGroupMoid"] = args ? args.domainGroupMoid : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["endTime"] = args ? args.endTime : undefined;
            resourceInputs["failedWorkflowCleanupDuration"] = args ? args.failedWorkflowCleanupDuration : undefined;
            resourceInputs["input"] = args ? args.input : undefined;
            resourceInputs["instId"] = args ? args.instId : undefined;
            resourceInputs["internal"] = args ? args.internal : undefined;
            resourceInputs["lastAction"] = args ? args.lastAction : undefined;
            resourceInputs["messages"] = args ? args.messages : undefined;
            resourceInputs["modTime"] = args ? args.modTime : undefined;
            resourceInputs["moid"] = args ? args.moid : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["objectType"] = args ? args.objectType : undefined;
            resourceInputs["organizations"] = args ? args.organizations : undefined;
            resourceInputs["output"] = args ? args.output : undefined;
            resourceInputs["owners"] = args ? args.owners : undefined;
            resourceInputs["parentTaskInfos"] = args ? args.parentTaskInfos : undefined;
            resourceInputs["parents"] = args ? args.parents : undefined;
            resourceInputs["pauseReason"] = args ? args.pauseReason : undefined;
            resourceInputs["permissionResources"] = args ? args.permissionResources : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["progress"] = args ? args.progress : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
            resourceInputs["retryFromTaskName"] = args ? args.retryFromTaskName : undefined;
            resourceInputs["sharedScope"] = args ? args.sharedScope : undefined;
            resourceInputs["src"] = args ? args.src : undefined;
            resourceInputs["startTime"] = args ? args.startTime : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["successWorkflowCleanupDuration"] = args ? args.successWorkflowCleanupDuration : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["taskInfoUpdates"] = args ? args.taskInfoUpdates : undefined;
            resourceInputs["taskInfos"] = args ? args.taskInfos : undefined;
            resourceInputs["traceId"] = args ? args.traceId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["userActionRequired"] = args ? args.userActionRequired : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["variable"] = args ? args.variable : undefined;
            resourceInputs["versionContexts"] = args ? args.versionContexts : undefined;
            resourceInputs["waitReason"] = args ? args.waitReason : undefined;
            resourceInputs["workflowCtxes"] = args ? args.workflowCtxes : undefined;
            resourceInputs["workflowDefinitions"] = args ? args.workflowDefinitions : undefined;
            resourceInputs["workflowStatus"] = args ? args.workflowStatus : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WorkflowWorkflowInfo.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WorkflowWorkflowInfo resources.
 */
export interface WorkflowWorkflowInfoState {
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    /**
     * A reference to a iamAccount resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    accounts?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoAccount>[]>;
    /**
     * The action of the workflow such as start, cancel, retry, pause. * `None` - No action is set, this is the default value
     * for action field. * `Create` - Create a new instance of the workflow but it does not start the execution of the
     * workflow. Use the Start action to start execution of the workflow. * `Start` - Start a new execution of the workflow. *
     * `Pause` - Pause the workflow, this can only be issued on workflows that are in running state. A workflow can be paused
     * for a maximum of 180 days, after 180 days the workflow will be terminated by the system. * `Resume` - Resume the
     * workflow which was previously paused through pause action on the workflow. * `Rerun` - Rerun the workflow that has
     * previously reached a failed state. The workflow is run from the beginning using inputs from previous execution.
     * Completed and currently running workflows cannot be rerun. Workflows do not have to be marked for retry to use this
     * action. * `Retry` - This action has been deprecated. Please use RetryFailed, Rerun or RetryFromTask action. Retry the
     * workflow that has previously reached a final state and has the retryable property set to true. A running or waiting
     * workflow cannot be retried. If the property retryFromTaskName is also passed along with this action, the workflow will
     * be started from that specific task, otherwise the workflow will be restarted from the first task. The task name in
     * retryFromTaskName must be one of the tasks that completed or failed in the previous run. It is not possible to retry a
     * workflow from a task which wasn't run in the previous iteration. * `RetryFailed` - Retry the workflow that has failed. A
     * running or waiting workflow or a workflow that completed successfully cannot be retried. Only the tasks that failed in
     * the previous run will be retried and the rest of workflow will be run. This action does not restart the workflow and
     * also does not support retrying from a specific task. * `RetryFromTask` - Retry the workflow that has previously reached
     * a failed state and has the retryable property set to true. A running or waiting workflow cannot be retried.
     * RetryFromTaskName must be passed along with this action, and the workflow will be started from that specific task. The
     * task name in RetryFromTaskName must be one of the tasks that was executed in the previous attempt. It is not possible to
     * retry a workflow from a task that wasn't run in the previous execution attempt. * `Cancel` - Cancel the workflow that is
     * in running or waiting state.
     */
    action?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoAncestor>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    associatedObjects?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoAssociatedObject>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    /**
     * The time when the workflow info will be removed from the database. When WorkflowInfo is created, cleanup time will be
     * set to 181 days. As the workflow progresses through different states the cleanup time can be updated. A cleanup time of
     * 0 means the workflow is not scheduled for cleanup. An active workflow that continues to schedule & run tasks can run for
     * any amount of time and there is no upper bound for such workflows. Workflows that are not actively running, say in
     * Paused or Waiting states will be removed after 181 days.
     */
    cleanupTime?: pulumi.Input<string>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    /**
     * The email address of the user who started this workflow. In the case of LDAP users, this field can hold either a
     * username or an email.
     */
    email?: pulumi.Input<string>;
    /**
     * The time when the workflow reached a final state.
     */
    endTime?: pulumi.Input<string>;
    /**
     * The duration in hours after which the workflow info for failed, terminated or timed out workflow will be removed from
     * database. The minimum is 1 hour, maximum is 365 days and default is 90 days.
     */
    failedWorkflowCleanupDuration?: pulumi.Input<number>;
    /**
     * All the given inputs for the workflow. The schema for the inputs is defined in the InputDefinition section of the
     * WorkflowDefinition. The InputDefinition will provide a list of input fields to be accepted, the associated datatype of
     * the inputs and any additional constraints on the inputs. For more information please refer to InputDefinition property
     * in the the the WorkflowDefinition resource. The inputs for a workflow are provided as a collection of key-value pairs,
     * where key is the name of the input and value is any valid JSON data which conforms to the datatype of the input as
     * specified in the InputDefinition. When the input passed into a workflow does not match the datatype or the constraints
     * specified in the workflow definition, it will not be accepted. For example, if the InputDefinition specified that
     * workflow must accept a string name 'key' and the value passed for key must adhere to a regex pattern. If Workflow was
     * started with input where 'key' is not a string matching the regex pattern, an error will be generated and workflow will
     * not start execution. During workflow definition design, the input passed into the workflow will be referred using the
     * format 'workflow.input.<inputName>'. If the input is referred directly in a mapping it will be in the format
     * '${workflow.input.<inputName>}' or inside a template mapping in the format '{{.global.workflow.input.<inputName>}}'.
     */
    input?: pulumi.Input<string>;
    /**
     * A workflow instance Id which is the unique identified for the workflow execution.
     */
    instId?: pulumi.Input<string>;
    /**
     * Denotes that an Intersight service started this workflow as internal and hence will not be shown in Intersight User
     * Interface. Typically these are internal system maintenance workflows which are triggered by Intersight services.
     */
    internal?: pulumi.Input<boolean>;
    /**
     * The last action that was issued on the workflow is saved in this field. * `None` - No action is set, this is the default
     * value for action field. * `Create` - Create a new instance of the workflow but it does not start the execution of the
     * workflow. Use the Start action to start execution of the workflow. * `Start` - Start a new execution of the workflow. *
     * `Pause` - Pause the workflow, this can only be issued on workflows that are in running state. A workflow can be paused
     * for a maximum of 180 days, after 180 days the workflow will be terminated by the system. * `Resume` - Resume the
     * workflow which was previously paused through pause action on the workflow. * `Rerun` - Rerun the workflow that has
     * previously reached a failed state. The workflow is run from the beginning using inputs from previous execution.
     * Completed and currently running workflows cannot be rerun. Workflows do not have to be marked for retry to use this
     * action. * `Retry` - This action has been deprecated. Please use RetryFailed, Rerun or RetryFromTask action. Retry the
     * workflow that has previously reached a final state and has the retryable property set to true. A running or waiting
     * workflow cannot be retried. If the property retryFromTaskName is also passed along with this action, the workflow will
     * be started from that specific task, otherwise the workflow will be restarted from the first task. The task name in
     * retryFromTaskName must be one of the tasks that completed or failed in the previous run. It is not possible to retry a
     * workflow from a task which wasn't run in the previous iteration. * `RetryFailed` - Retry the workflow that has failed. A
     * running or waiting workflow or a workflow that completed successfully cannot be retried. Only the tasks that failed in
     * the previous run will be retried and the rest of workflow will be run. This action does not restart the workflow and
     * also does not support retrying from a specific task. * `RetryFromTask` - Retry the workflow that has previously reached
     * a failed state and has the retryable property set to true. A running or waiting workflow cannot be retried.
     * RetryFromTaskName must be passed along with this action, and the workflow will be started from that specific task. The
     * task name in RetryFromTaskName must be one of the tasks that was executed in the previous attempt. It is not possible to
     * retry a workflow from a task that wasn't run in the previous execution attempt. * `Cancel` - Cancel the workflow that is
     * in running or waiting state.
     */
    lastAction?: pulumi.Input<string>;
    messages?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoMessage>[]>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * A name of the workflow execution instance.
     */
    name?: pulumi.Input<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    /**
     * A reference to a organizationOrganization resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    organizations?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoOrganization>[]>;
    /**
     * All the generated outputs for the workflow. The schema for the outputs are defined in the OutputDefinition section of
     * the WorkflowDefinition. The OutputDefinition will provide a list of output fields that could be generated after workflow
     * execution is completed and the associated datatype of the outputs. For more information please refer to OutputDefinition
     * property in WorkflowDefinition resource. The output for the workflow is generated as a collection of key-value pairs,
     * where key is the name of the output and value is any valid JSON data which conforms to the datatype of output as
     * specified in the OutputDefinition. During workflow definition design, if a workflow is included as a sub-workflow inside
     * a parent workflow then the outputs generated by the sub-workflow can be used in the workflow design. For example, if
     * workflow was included into parent workflow as 'SubWorkflowSample1', then that output can be referred as
     * 'SubWorkflowSample1.output.<outputName>'. In the output is referred directly in a mapping it will be in the format
     * '${SubWorkflowSample1.output.<outputName>}' or inside a template mapping will be in the format
     * '{{SubWorkflowSample1.output.<outputName>}}'.
     */
    output?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a workflowTaskInfo resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    parentTaskInfos?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoParentTaskInfo>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoParent>[]>;
    /**
     * Denotes the reason workflow is in paused status. * `None` - Pause reason is none, which indicates there is no reason for
     * the pause state. * `TaskWithWarning` - Pause reason indicates the workflow is in this state due to a task that has a
     * status as completed with warnings. * `SystemMaintenance` - Pause reason indicates the workflow is in this state based on
     * actions of system admin for maintenance.
     */
    pauseReason?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoPermissionResource>[]>;
    /**
     * A reference to a iamPermission resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoPermission>[]>;
    /**
     * This field indicates percentage of workflow task completion based on the total number of tasks in the workflow. The
     * total number of tasks in the workflow is calculated based on the longest path the workflow execution can take. So
     * progress is calculated based on the percentage of tasks that completed out of the total number of tasks that could be
     * executed. Progress is not a representation of the time taken to complete the workflow. A task is considered as completed
     * if the task status is either "NO_OP" or "COMPLETED". If the task status is "SKIP_TO_FAIL", the workflow will be
     * terminated and the progress of the workflow will be set to 100.
     */
    progress?: pulumi.Input<number>;
    /**
     * Type to capture all the properties for the workflow info passed on from workflow definition.
     */
    properties?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoProperty>[]>;
    /**
     * This field is required when RetryFromTask action is issued for a workflow that is in a 'final' state. The workflow will
     * be retried from the specified task. This field must specify a task name which is the unique name of the task within the
     * workflow. The task name must be one of the tasks that were completed or failed in the previous run. It is not possible
     * to retry a workflow from a task that wasn't run in the previous execution attempt.
     */
    retryFromTaskName?: pulumi.Input<string>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    /**
     * The source service that started the workflow execution and hence represents the owning service for this workflow.
     */
    src?: pulumi.Input<string>;
    /**
     * The time when the workflow was started for execution.
     */
    startTime?: pulumi.Input<string>;
    /**
     * A status of the workflow (RUNNING, WAITING, COMPLETED, TIME_OUT, FAILED). The "status" field has been deprecated and is
     * now replaced with the "workflowStatus" field.
     */
    status?: pulumi.Input<string>;
    /**
     * The duration in hours after which the workflow info for successful workflow will be removed from database. The minimum
     * is 1 hour, maximum is 365 days and default is 90 days.
     */
    successWorkflowCleanupDuration?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoTag>[]>;
    /**
     * Used to update a TaskInfo instance in the WorkflowInfo, it is used as a way to update status and provide user inputs for
     * a WaitTask.
     */
    taskInfoUpdates?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoTaskInfoUpdate>[]>;
    /**
     * An array of relationships to workflowTaskInfo resources.
     */
    taskInfos?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoTaskInfo>[]>;
    /**
     * The trace id to keep track of workflow execution.
     */
    traceId?: pulumi.Input<string>;
    /**
     * A type of the workflow (serverconfig, ansible_monitoring).
     */
    type?: pulumi.Input<string>;
    /**
     * Property will be set when a user action is required on the workflow. This can be because the workflow is waiting for a
     * wait task to be updated, workflow is paused or workflow launched by a configuration object has failed and needs to be
     * retried in order to complete successfully.
     */
    userActionRequired?: pulumi.Input<boolean>;
    /**
     * The user identifier which indicates the user that started this workflow.
     */
    userId?: pulumi.Input<string>;
    /**
     * All the generated variables for the workflow. During workflow execution, the variables will be updated as per the
     * variableParameters specified after each task execution.
     */
    variable?: pulumi.Input<string>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoVersionContext>[]>;
    /**
     * Denotes the reason workflow is in waiting status. * `None` - Wait reason is none, which indicates there is no reason for
     * the waiting state. * `GatherTasks` - Wait reason is gathering tasks, which indicates the workflow is in this state in
     * order to gather tasks. * `Duplicate` - Wait reason is duplicate, which indicates the workflow is a duplicate of current
     * running workflow. * `RateLimit` - Wait reason is rate limit, which indicates the workflow is rate limited by
     * account/instance level throttling threshold. * `WaitTask` - Wait reason when there are one or more wait tasks in the
     * workflow which are yet to receive a task status update. * `PendingRetryFailed` - Wait reason when the workflow is
     * pending a RetryFailed action. * `WaitingToStart` - Workflow is waiting to start on workflow engine.
     */
    waitReason?: pulumi.Input<string>;
    /**
     * The workflow context which contains initiator and target information.
     */
    workflowCtxes?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoWorkflowCtx>[]>;
    /**
     * A reference to a workflowWorkflowDefinition resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    workflowDefinitions?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoWorkflowDefinition>[]>;
    /**
     * The current state of the workflow execution instance. A draft workflow execution will be in NotStarted state and when
     * "Start" action is issued then the workflow will move into Waiting state until the first task of the workflow is
     * scheduled at which time it will move into InProgress state. When execution reaches a final state it move to either
     * Completed, Failed or Terminated state. For more details look at the description for each state. * `NotStarted` -
     * Initially all the workflow instances are at "NotStarted" state. A workflow can be drafted in this state by issuing
     * Create action. When a workflow is in this state the inputs can be updated until the workflow is started. * `InProgress`
     * - A workflow execution moves into "InProgress" state when the first task of the workflow is scheduled for execution and
     * continues to remain in that state as long as there are tasks executing or yet to be scheduled for execution. * `Waiting`
     * - Workflow can go to waiting state due to execution of wait task present in the workflow or the workflow has not started
     * yet either due to duplicate workflow is running or due to workflow throttling. Once Workflow engine picks up the
     * workflow for execution, it will move to in progress state. * `Completed` - A workflow execution moves into Completed
     * state when the execution path of the workflow has reached the Success node in the workflow design and there are no more
     * tasks to be executed. Completed is the final state for the workflow execution instance and no further actions are
     * allowed on this workflow instance. * `Failed` - A workflow execution moves into a Failed state when the execution path
     * of the workflow has reached the Failed node in the workflow design and there are no more tasks to be scheduled. A Failed
     * node can be reached when the last executed task has failed or timed out and there are no further retries available for
     * the task. Also as per the workflow design, the last executed task did not specify an OnFailure task to be executed and
     * hence by default, the execution will reach the Failed node. Actions like "Rerun", "RetryFailed" and "RetryFromTask" can
     * be issued on failed workflow instances. Please refer to the "Action" description for more details. * `Terminated` - A
     * workflow execution moves to Terminated state when user issues a "Cancel" action or due to internal errors caused during
     * workflow execution. e.g. - Task input transformation has failed. Terminated is a final state of the workflow, no further
     * action are allowed on this workflow instance. * `Canceled` - A workflow execution moves to Canceled state when a user
     * issues a "Cancel" action. Cancel is not a final state, the workflow engine will issue cancel to all the running tasks
     * and then move the workflow to the "Terminated" state. * `Paused` - A workflow execution moves to Paused state when user
     * issues a "Pause" action. When in paused state the current running task will complete its execution but no further tasks
     * will be scheduled until the workflow is resumed. A paused workflow is resumed when the user issues a "Resume" action.
     * Paused workflows can be canceled by user.
     */
    workflowStatus?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WorkflowWorkflowInfo resource.
 */
export interface WorkflowWorkflowInfoArgs {
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    /**
     * A reference to a iamAccount resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    accounts?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoAccount>[]>;
    /**
     * The action of the workflow such as start, cancel, retry, pause. * `None` - No action is set, this is the default value
     * for action field. * `Create` - Create a new instance of the workflow but it does not start the execution of the
     * workflow. Use the Start action to start execution of the workflow. * `Start` - Start a new execution of the workflow. *
     * `Pause` - Pause the workflow, this can only be issued on workflows that are in running state. A workflow can be paused
     * for a maximum of 180 days, after 180 days the workflow will be terminated by the system. * `Resume` - Resume the
     * workflow which was previously paused through pause action on the workflow. * `Rerun` - Rerun the workflow that has
     * previously reached a failed state. The workflow is run from the beginning using inputs from previous execution.
     * Completed and currently running workflows cannot be rerun. Workflows do not have to be marked for retry to use this
     * action. * `Retry` - This action has been deprecated. Please use RetryFailed, Rerun or RetryFromTask action. Retry the
     * workflow that has previously reached a final state and has the retryable property set to true. A running or waiting
     * workflow cannot be retried. If the property retryFromTaskName is also passed along with this action, the workflow will
     * be started from that specific task, otherwise the workflow will be restarted from the first task. The task name in
     * retryFromTaskName must be one of the tasks that completed or failed in the previous run. It is not possible to retry a
     * workflow from a task which wasn't run in the previous iteration. * `RetryFailed` - Retry the workflow that has failed. A
     * running or waiting workflow or a workflow that completed successfully cannot be retried. Only the tasks that failed in
     * the previous run will be retried and the rest of workflow will be run. This action does not restart the workflow and
     * also does not support retrying from a specific task. * `RetryFromTask` - Retry the workflow that has previously reached
     * a failed state and has the retryable property set to true. A running or waiting workflow cannot be retried.
     * RetryFromTaskName must be passed along with this action, and the workflow will be started from that specific task. The
     * task name in RetryFromTaskName must be one of the tasks that was executed in the previous attempt. It is not possible to
     * retry a workflow from a task that wasn't run in the previous execution attempt. * `Cancel` - Cancel the workflow that is
     * in running or waiting state.
     */
    action?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoAncestor>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    associatedObjects?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoAssociatedObject>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    /**
     * The time when the workflow info will be removed from the database. When WorkflowInfo is created, cleanup time will be
     * set to 181 days. As the workflow progresses through different states the cleanup time can be updated. A cleanup time of
     * 0 means the workflow is not scheduled for cleanup. An active workflow that continues to schedule & run tasks can run for
     * any amount of time and there is no upper bound for such workflows. Workflows that are not actively running, say in
     * Paused or Waiting states will be removed after 181 days.
     */
    cleanupTime?: pulumi.Input<string>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    /**
     * The email address of the user who started this workflow. In the case of LDAP users, this field can hold either a
     * username or an email.
     */
    email?: pulumi.Input<string>;
    /**
     * The time when the workflow reached a final state.
     */
    endTime?: pulumi.Input<string>;
    /**
     * The duration in hours after which the workflow info for failed, terminated or timed out workflow will be removed from
     * database. The minimum is 1 hour, maximum is 365 days and default is 90 days.
     */
    failedWorkflowCleanupDuration?: pulumi.Input<number>;
    /**
     * All the given inputs for the workflow. The schema for the inputs is defined in the InputDefinition section of the
     * WorkflowDefinition. The InputDefinition will provide a list of input fields to be accepted, the associated datatype of
     * the inputs and any additional constraints on the inputs. For more information please refer to InputDefinition property
     * in the the the WorkflowDefinition resource. The inputs for a workflow are provided as a collection of key-value pairs,
     * where key is the name of the input and value is any valid JSON data which conforms to the datatype of the input as
     * specified in the InputDefinition. When the input passed into a workflow does not match the datatype or the constraints
     * specified in the workflow definition, it will not be accepted. For example, if the InputDefinition specified that
     * workflow must accept a string name 'key' and the value passed for key must adhere to a regex pattern. If Workflow was
     * started with input where 'key' is not a string matching the regex pattern, an error will be generated and workflow will
     * not start execution. During workflow definition design, the input passed into the workflow will be referred using the
     * format 'workflow.input.<inputName>'. If the input is referred directly in a mapping it will be in the format
     * '${workflow.input.<inputName>}' or inside a template mapping in the format '{{.global.workflow.input.<inputName>}}'.
     */
    input?: pulumi.Input<string>;
    /**
     * A workflow instance Id which is the unique identified for the workflow execution.
     */
    instId?: pulumi.Input<string>;
    /**
     * Denotes that an Intersight service started this workflow as internal and hence will not be shown in Intersight User
     * Interface. Typically these are internal system maintenance workflows which are triggered by Intersight services.
     */
    internal?: pulumi.Input<boolean>;
    /**
     * The last action that was issued on the workflow is saved in this field. * `None` - No action is set, this is the default
     * value for action field. * `Create` - Create a new instance of the workflow but it does not start the execution of the
     * workflow. Use the Start action to start execution of the workflow. * `Start` - Start a new execution of the workflow. *
     * `Pause` - Pause the workflow, this can only be issued on workflows that are in running state. A workflow can be paused
     * for a maximum of 180 days, after 180 days the workflow will be terminated by the system. * `Resume` - Resume the
     * workflow which was previously paused through pause action on the workflow. * `Rerun` - Rerun the workflow that has
     * previously reached a failed state. The workflow is run from the beginning using inputs from previous execution.
     * Completed and currently running workflows cannot be rerun. Workflows do not have to be marked for retry to use this
     * action. * `Retry` - This action has been deprecated. Please use RetryFailed, Rerun or RetryFromTask action. Retry the
     * workflow that has previously reached a final state and has the retryable property set to true. A running or waiting
     * workflow cannot be retried. If the property retryFromTaskName is also passed along with this action, the workflow will
     * be started from that specific task, otherwise the workflow will be restarted from the first task. The task name in
     * retryFromTaskName must be one of the tasks that completed or failed in the previous run. It is not possible to retry a
     * workflow from a task which wasn't run in the previous iteration. * `RetryFailed` - Retry the workflow that has failed. A
     * running or waiting workflow or a workflow that completed successfully cannot be retried. Only the tasks that failed in
     * the previous run will be retried and the rest of workflow will be run. This action does not restart the workflow and
     * also does not support retrying from a specific task. * `RetryFromTask` - Retry the workflow that has previously reached
     * a failed state and has the retryable property set to true. A running or waiting workflow cannot be retried.
     * RetryFromTaskName must be passed along with this action, and the workflow will be started from that specific task. The
     * task name in RetryFromTaskName must be one of the tasks that was executed in the previous attempt. It is not possible to
     * retry a workflow from a task that wasn't run in the previous execution attempt. * `Cancel` - Cancel the workflow that is
     * in running or waiting state.
     */
    lastAction?: pulumi.Input<string>;
    messages?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoMessage>[]>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * A name of the workflow execution instance.
     */
    name?: pulumi.Input<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    /**
     * A reference to a organizationOrganization resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    organizations?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoOrganization>[]>;
    /**
     * All the generated outputs for the workflow. The schema for the outputs are defined in the OutputDefinition section of
     * the WorkflowDefinition. The OutputDefinition will provide a list of output fields that could be generated after workflow
     * execution is completed and the associated datatype of the outputs. For more information please refer to OutputDefinition
     * property in WorkflowDefinition resource. The output for the workflow is generated as a collection of key-value pairs,
     * where key is the name of the output and value is any valid JSON data which conforms to the datatype of output as
     * specified in the OutputDefinition. During workflow definition design, if a workflow is included as a sub-workflow inside
     * a parent workflow then the outputs generated by the sub-workflow can be used in the workflow design. For example, if
     * workflow was included into parent workflow as 'SubWorkflowSample1', then that output can be referred as
     * 'SubWorkflowSample1.output.<outputName>'. In the output is referred directly in a mapping it will be in the format
     * '${SubWorkflowSample1.output.<outputName>}' or inside a template mapping will be in the format
     * '{{SubWorkflowSample1.output.<outputName>}}'.
     */
    output?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a workflowTaskInfo resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    parentTaskInfos?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoParentTaskInfo>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoParent>[]>;
    /**
     * Denotes the reason workflow is in paused status. * `None` - Pause reason is none, which indicates there is no reason for
     * the pause state. * `TaskWithWarning` - Pause reason indicates the workflow is in this state due to a task that has a
     * status as completed with warnings. * `SystemMaintenance` - Pause reason indicates the workflow is in this state based on
     * actions of system admin for maintenance.
     */
    pauseReason?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoPermissionResource>[]>;
    /**
     * A reference to a iamPermission resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoPermission>[]>;
    /**
     * This field indicates percentage of workflow task completion based on the total number of tasks in the workflow. The
     * total number of tasks in the workflow is calculated based on the longest path the workflow execution can take. So
     * progress is calculated based on the percentage of tasks that completed out of the total number of tasks that could be
     * executed. Progress is not a representation of the time taken to complete the workflow. A task is considered as completed
     * if the task status is either "NO_OP" or "COMPLETED". If the task status is "SKIP_TO_FAIL", the workflow will be
     * terminated and the progress of the workflow will be set to 100.
     */
    progress?: pulumi.Input<number>;
    /**
     * Type to capture all the properties for the workflow info passed on from workflow definition.
     */
    properties?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoProperty>[]>;
    /**
     * This field is required when RetryFromTask action is issued for a workflow that is in a 'final' state. The workflow will
     * be retried from the specified task. This field must specify a task name which is the unique name of the task within the
     * workflow. The task name must be one of the tasks that were completed or failed in the previous run. It is not possible
     * to retry a workflow from a task that wasn't run in the previous execution attempt.
     */
    retryFromTaskName?: pulumi.Input<string>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    /**
     * The source service that started the workflow execution and hence represents the owning service for this workflow.
     */
    src?: pulumi.Input<string>;
    /**
     * The time when the workflow was started for execution.
     */
    startTime?: pulumi.Input<string>;
    /**
     * A status of the workflow (RUNNING, WAITING, COMPLETED, TIME_OUT, FAILED). The "status" field has been deprecated and is
     * now replaced with the "workflowStatus" field.
     */
    status?: pulumi.Input<string>;
    /**
     * The duration in hours after which the workflow info for successful workflow will be removed from database. The minimum
     * is 1 hour, maximum is 365 days and default is 90 days.
     */
    successWorkflowCleanupDuration?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoTag>[]>;
    /**
     * Used to update a TaskInfo instance in the WorkflowInfo, it is used as a way to update status and provide user inputs for
     * a WaitTask.
     */
    taskInfoUpdates?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoTaskInfoUpdate>[]>;
    /**
     * An array of relationships to workflowTaskInfo resources.
     */
    taskInfos?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoTaskInfo>[]>;
    /**
     * The trace id to keep track of workflow execution.
     */
    traceId?: pulumi.Input<string>;
    /**
     * A type of the workflow (serverconfig, ansible_monitoring).
     */
    type?: pulumi.Input<string>;
    /**
     * Property will be set when a user action is required on the workflow. This can be because the workflow is waiting for a
     * wait task to be updated, workflow is paused or workflow launched by a configuration object has failed and needs to be
     * retried in order to complete successfully.
     */
    userActionRequired?: pulumi.Input<boolean>;
    /**
     * The user identifier which indicates the user that started this workflow.
     */
    userId?: pulumi.Input<string>;
    /**
     * All the generated variables for the workflow. During workflow execution, the variables will be updated as per the
     * variableParameters specified after each task execution.
     */
    variable?: pulumi.Input<string>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoVersionContext>[]>;
    /**
     * Denotes the reason workflow is in waiting status. * `None` - Wait reason is none, which indicates there is no reason for
     * the waiting state. * `GatherTasks` - Wait reason is gathering tasks, which indicates the workflow is in this state in
     * order to gather tasks. * `Duplicate` - Wait reason is duplicate, which indicates the workflow is a duplicate of current
     * running workflow. * `RateLimit` - Wait reason is rate limit, which indicates the workflow is rate limited by
     * account/instance level throttling threshold. * `WaitTask` - Wait reason when there are one or more wait tasks in the
     * workflow which are yet to receive a task status update. * `PendingRetryFailed` - Wait reason when the workflow is
     * pending a RetryFailed action. * `WaitingToStart` - Workflow is waiting to start on workflow engine.
     */
    waitReason?: pulumi.Input<string>;
    /**
     * The workflow context which contains initiator and target information.
     */
    workflowCtxes?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoWorkflowCtx>[]>;
    /**
     * A reference to a workflowWorkflowDefinition resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    workflowDefinitions?: pulumi.Input<pulumi.Input<inputs.WorkflowWorkflowInfoWorkflowDefinition>[]>;
    /**
     * The current state of the workflow execution instance. A draft workflow execution will be in NotStarted state and when
     * "Start" action is issued then the workflow will move into Waiting state until the first task of the workflow is
     * scheduled at which time it will move into InProgress state. When execution reaches a final state it move to either
     * Completed, Failed or Terminated state. For more details look at the description for each state. * `NotStarted` -
     * Initially all the workflow instances are at "NotStarted" state. A workflow can be drafted in this state by issuing
     * Create action. When a workflow is in this state the inputs can be updated until the workflow is started. * `InProgress`
     * - A workflow execution moves into "InProgress" state when the first task of the workflow is scheduled for execution and
     * continues to remain in that state as long as there are tasks executing or yet to be scheduled for execution. * `Waiting`
     * - Workflow can go to waiting state due to execution of wait task present in the workflow or the workflow has not started
     * yet either due to duplicate workflow is running or due to workflow throttling. Once Workflow engine picks up the
     * workflow for execution, it will move to in progress state. * `Completed` - A workflow execution moves into Completed
     * state when the execution path of the workflow has reached the Success node in the workflow design and there are no more
     * tasks to be executed. Completed is the final state for the workflow execution instance and no further actions are
     * allowed on this workflow instance. * `Failed` - A workflow execution moves into a Failed state when the execution path
     * of the workflow has reached the Failed node in the workflow design and there are no more tasks to be scheduled. A Failed
     * node can be reached when the last executed task has failed or timed out and there are no further retries available for
     * the task. Also as per the workflow design, the last executed task did not specify an OnFailure task to be executed and
     * hence by default, the execution will reach the Failed node. Actions like "Rerun", "RetryFailed" and "RetryFromTask" can
     * be issued on failed workflow instances. Please refer to the "Action" description for more details. * `Terminated` - A
     * workflow execution moves to Terminated state when user issues a "Cancel" action or due to internal errors caused during
     * workflow execution. e.g. - Task input transformation has failed. Terminated is a final state of the workflow, no further
     * action are allowed on this workflow instance. * `Canceled` - A workflow execution moves to Canceled state when a user
     * issues a "Cancel" action. Cancel is not a final state, the workflow engine will issue cancel to all the running tasks
     * and then move the workflow to the "Terminated" state. * `Paused` - A workflow execution moves to Paused state when user
     * issues a "Pause" action. When in paused state the current running task will complete its execution but no further tasks
     * will be scheduled until the workflow is resumed. A paused workflow is resumed when the user issues a "Resume" action.
     * Paused workflows can be canceled by user.
     */
    workflowStatus?: pulumi.Input<string>;
}
