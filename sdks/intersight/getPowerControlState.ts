// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getPowerControlState(args?: GetPowerControlStateArgs, opts?: pulumi.InvokeOptions): Promise<GetPowerControlStateResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getPowerControlState:getPowerControlState", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "allocatedPower": args.allocatedPower,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "equipmentChassis": args.equipmentChassis,
        "extendedPowerCapacity": args.extendedPowerCapacity,
        "gridMaxPower": args.gridMaxPower,
        "id": args.id,
        "maxRequiredPower": args.maxRequiredPower,
        "minRequiredPower": args.minRequiredPower,
        "modTime": args.modTime,
        "moid": args.moid,
        "n1MaxPower": args.n1MaxPower,
        "n2MaxPower": args.n2MaxPower,
        "nonRedundantMaxPower": args.nonRedundantMaxPower,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "powerRebalancing": args.powerRebalancing,
        "powerSaveMode": args.powerSaveMode,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPowerControlState.
 */
export interface GetPowerControlStateArgs {
    accountMoid?: string;
    additionalProperties?: string;
    allocatedPower?: number;
    ancestors?: inputs.GetPowerControlStateAncestor[];
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    equipmentChassis?: inputs.GetPowerControlStateEquipmentChassis;
    extendedPowerCapacity?: string;
    gridMaxPower?: number;
    id?: string;
    maxRequiredPower?: number;
    minRequiredPower?: number;
    modTime?: string;
    moid?: string;
    n1MaxPower?: number;
    n2MaxPower?: number;
    nonRedundantMaxPower?: number;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetPowerControlStateParent;
    permissionResources?: inputs.GetPowerControlStatePermissionResource[];
    powerRebalancing?: string;
    powerSaveMode?: string;
    registeredDevice?: inputs.GetPowerControlStateRegisteredDevice;
    sharedScope?: string;
    tags?: inputs.GetPowerControlStateTag[];
    versionContext?: inputs.GetPowerControlStateVersionContext;
}

/**
 * A collection of values returned by getPowerControlState.
 */
export interface GetPowerControlStateResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly allocatedPower?: number;
    readonly ancestors?: outputs.GetPowerControlStateAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly equipmentChassis?: outputs.GetPowerControlStateEquipmentChassis;
    readonly extendedPowerCapacity?: string;
    readonly gridMaxPower?: number;
    readonly id: string;
    readonly maxRequiredPower?: number;
    readonly minRequiredPower?: number;
    readonly modTime?: string;
    readonly moid?: string;
    readonly n1MaxPower?: number;
    readonly n2MaxPower?: number;
    readonly nonRedundantMaxPower?: number;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetPowerControlStateParent;
    readonly permissionResources?: outputs.GetPowerControlStatePermissionResource[];
    readonly powerRebalancing?: string;
    readonly powerSaveMode?: string;
    readonly registeredDevice?: outputs.GetPowerControlStateRegisteredDevice;
    readonly results: outputs.GetPowerControlStateResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetPowerControlStateTag[];
    readonly versionContext?: outputs.GetPowerControlStateVersionContext;
}
export function getPowerControlStateOutput(args?: GetPowerControlStateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPowerControlStateResult> {
    return pulumi.output(args).apply((a: any) => getPowerControlState(a, opts))
}

/**
 * A collection of arguments for invoking getPowerControlState.
 */
export interface GetPowerControlStateOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    allocatedPower?: pulumi.Input<number>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetPowerControlStateAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    equipmentChassis?: pulumi.Input<inputs.GetPowerControlStateEquipmentChassisArgs>;
    extendedPowerCapacity?: pulumi.Input<string>;
    gridMaxPower?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    maxRequiredPower?: pulumi.Input<number>;
    minRequiredPower?: pulumi.Input<number>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    n1MaxPower?: pulumi.Input<number>;
    n2MaxPower?: pulumi.Input<number>;
    nonRedundantMaxPower?: pulumi.Input<number>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetPowerControlStateParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetPowerControlStatePermissionResourceArgs>[]>;
    powerRebalancing?: pulumi.Input<string>;
    powerSaveMode?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetPowerControlStateRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetPowerControlStateTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetPowerControlStateVersionContextArgs>;
}
