// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getApplianceDeviceState(args?: GetApplianceDeviceStateArgs, opts?: pulumi.InvokeOptions): Promise<GetApplianceDeviceStateResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getApplianceDeviceState:getApplianceDeviceState", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "blockReasons": args.blockReasons,
        "blockedVersion": args.blockedVersion,
        "capabilities": args.capabilities,
        "certificate": args.certificate,
        "certificateNotAfter": args.certificateNotAfter,
        "classId": args.classId,
        "clusterInfo": args.clusterInfo,
        "connectionStatus": args.connectionStatus,
        "createTime": args.createTime,
        "currentFingerprint": args.currentFingerprint,
        "currentVersion": args.currentVersion,
        "dcVersion": args.dcVersion,
        "desiredVersion": args.desiredVersion,
        "domainGroupMoid": args.domainGroupMoid,
        "downloadedFingerprint": args.downloadedFingerprint,
        "downloadedMetadataVersions": args.downloadedMetadataVersions,
        "downloadedVersion": args.downloadedVersion,
        "hostname": args.hostname,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "pendingFingerprint": args.pendingFingerprint,
        "pendingVersion": args.pendingVersion,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "serialId": args.serialId,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "upgradeBlocked": args.upgradeBlocked,
        "upgradePolicy": args.upgradePolicy,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getApplianceDeviceState.
 */
export interface GetApplianceDeviceStateArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetApplianceDeviceStateAncestor[];
    blockReasons?: string[];
    blockedVersion?: string;
    capabilities?: inputs.GetApplianceDeviceStateCapability[];
    certificate?: string;
    certificateNotAfter?: string;
    classId?: string;
    clusterInfo?: inputs.GetApplianceDeviceStateClusterInfo;
    connectionStatus?: string;
    createTime?: string;
    currentFingerprint?: string;
    currentVersion?: string;
    dcVersion?: string;
    desiredVersion?: string;
    domainGroupMoid?: string;
    downloadedFingerprint?: string;
    downloadedMetadataVersions?: inputs.GetApplianceDeviceStateDownloadedMetadataVersion[];
    downloadedVersion?: string;
    hostname?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetApplianceDeviceStateParent;
    pendingFingerprint?: string;
    pendingVersion?: string;
    permissionResources?: inputs.GetApplianceDeviceStatePermissionResource[];
    registeredDevice?: inputs.GetApplianceDeviceStateRegisteredDevice;
    serialId?: string;
    sharedScope?: string;
    tags?: inputs.GetApplianceDeviceStateTag[];
    upgradeBlocked?: boolean;
    upgradePolicy?: inputs.GetApplianceDeviceStateUpgradePolicy;
    versionContext?: inputs.GetApplianceDeviceStateVersionContext;
}

/**
 * A collection of values returned by getApplianceDeviceState.
 */
export interface GetApplianceDeviceStateResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetApplianceDeviceStateAncestor[];
    readonly blockReasons?: string[];
    readonly blockedVersion?: string;
    readonly capabilities?: outputs.GetApplianceDeviceStateCapability[];
    readonly certificate?: string;
    readonly certificateNotAfter?: string;
    readonly classId?: string;
    readonly clusterInfo?: outputs.GetApplianceDeviceStateClusterInfo;
    readonly connectionStatus?: string;
    readonly createTime?: string;
    readonly currentFingerprint?: string;
    readonly currentVersion?: string;
    readonly dcVersion?: string;
    readonly desiredVersion?: string;
    readonly domainGroupMoid?: string;
    readonly downloadedFingerprint?: string;
    readonly downloadedMetadataVersions?: outputs.GetApplianceDeviceStateDownloadedMetadataVersion[];
    readonly downloadedVersion?: string;
    readonly hostname?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetApplianceDeviceStateParent;
    readonly pendingFingerprint?: string;
    readonly pendingVersion?: string;
    readonly permissionResources?: outputs.GetApplianceDeviceStatePermissionResource[];
    readonly registeredDevice?: outputs.GetApplianceDeviceStateRegisteredDevice;
    readonly results: outputs.GetApplianceDeviceStateResult[];
    readonly serialId?: string;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetApplianceDeviceStateTag[];
    readonly upgradeBlocked?: boolean;
    readonly upgradePolicy?: outputs.GetApplianceDeviceStateUpgradePolicy;
    readonly versionContext?: outputs.GetApplianceDeviceStateVersionContext;
}
export function getApplianceDeviceStateOutput(args?: GetApplianceDeviceStateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetApplianceDeviceStateResult> {
    return pulumi.output(args).apply((a: any) => getApplianceDeviceState(a, opts))
}

/**
 * A collection of arguments for invoking getApplianceDeviceState.
 */
export interface GetApplianceDeviceStateOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetApplianceDeviceStateAncestorArgs>[]>;
    blockReasons?: pulumi.Input<pulumi.Input<string>[]>;
    blockedVersion?: pulumi.Input<string>;
    capabilities?: pulumi.Input<pulumi.Input<inputs.GetApplianceDeviceStateCapabilityArgs>[]>;
    certificate?: pulumi.Input<string>;
    certificateNotAfter?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    clusterInfo?: pulumi.Input<inputs.GetApplianceDeviceStateClusterInfoArgs>;
    connectionStatus?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    currentFingerprint?: pulumi.Input<string>;
    currentVersion?: pulumi.Input<string>;
    dcVersion?: pulumi.Input<string>;
    desiredVersion?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    downloadedFingerprint?: pulumi.Input<string>;
    downloadedMetadataVersions?: pulumi.Input<pulumi.Input<inputs.GetApplianceDeviceStateDownloadedMetadataVersionArgs>[]>;
    downloadedVersion?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetApplianceDeviceStateParentArgs>;
    pendingFingerprint?: pulumi.Input<string>;
    pendingVersion?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetApplianceDeviceStatePermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetApplianceDeviceStateRegisteredDeviceArgs>;
    serialId?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetApplianceDeviceStateTagArgs>[]>;
    upgradeBlocked?: pulumi.Input<boolean>;
    upgradePolicy?: pulumi.Input<inputs.GetApplianceDeviceStateUpgradePolicyArgs>;
    versionContext?: pulumi.Input<inputs.GetApplianceDeviceStateVersionContextArgs>;
}
