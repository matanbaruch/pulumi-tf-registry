// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVirtualizationVmwareVirtualMachine(args?: GetVirtualizationVmwareVirtualMachineArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualizationVmwareVirtualMachineResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getVirtualizationVmwareVirtualMachine:getVirtualizationVmwareVirtualMachine", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "annotation": args.annotation,
        "bootTime": args.bootTime,
        "capacity": args.capacity,
        "classId": args.classId,
        "cluster": args.cluster,
        "configName": args.configName,
        "connectionState": args.connectionState,
        "cpuHotAddEnabled": args.cpuHotAddEnabled,
        "cpuShares": args.cpuShares,
        "cpuSocketInfo": args.cpuSocketInfo,
        "cpuUtilization": args.cpuUtilization,
        "createTime": args.createTime,
        "customAttributes": args.customAttributes,
        "datacenter": args.datacenter,
        "datastores": args.datastores,
        "defaultPowerOffType": args.defaultPowerOffType,
        "dhcpEnabled": args.dhcpEnabled,
        "diskCommitInfo": args.diskCommitInfo,
        "dnsServerLists": args.dnsServerLists,
        "dnsSuffixLists": args.dnsSuffixLists,
        "domainGroupMoid": args.domainGroupMoid,
        "extraConfig": args.extraConfig,
        "folder": args.folder,
        "guestInfo": args.guestInfo,
        "guestState": args.guestState,
        "host": args.host,
        "hostCompatibility": args.hostCompatibility,
        "hypervisorType": args.hypervisorType,
        "id": args.id,
        "identity": args.identity,
        "instanceUuid": args.instanceUuid,
        "inventoryPath": args.inventoryPath,
        "ipAddresses": args.ipAddresses,
        "isTemplate": args.isTemplate,
        "macAddresses": args.macAddresses,
        "memShares": args.memShares,
        "memoryCapacity": args.memoryCapacity,
        "memoryHotAddEnabled": args.memoryHotAddEnabled,
        "memoryUtilization": args.memoryUtilization,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "networkCount": args.networkCount,
        "networks": args.networks,
        "nrProvider": args.nrProvider,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "parentFolder": args.parentFolder,
        "passthroughDevices": args.passthroughDevices,
        "permissionResources": args.permissionResources,
        "portGroups": args.portGroups,
        "powerState": args.powerState,
        "processorCapacity": args.processorCapacity,
        "protectedVm": args.protectedVm,
        "registeredDevice": args.registeredDevice,
        "remoteDisplayInfo": args.remoteDisplayInfo,
        "remoteDisplayVncEnabled": args.remoteDisplayVncEnabled,
        "resourcePool": args.resourcePool,
        "resourcePoolOwner": args.resourcePoolOwner,
        "resourcePoolParent": args.resourcePoolParent,
        "sharedScope": args.sharedScope,
        "state": args.state,
        "tags": args.tags,
        "toolRunningStatus": args.toolRunningStatus,
        "toolsVersion": args.toolsVersion,
        "uuid": args.uuid,
        "versionContext": args.versionContext,
        "virtualDisks": args.virtualDisks,
        "virtualNetworkInterfaces": args.virtualNetworkInterfaces,
        "vmCreationTime": args.vmCreationTime,
        "vmDiskCount": args.vmDiskCount,
        "vmOverallStatus": args.vmOverallStatus,
        "vmPath": args.vmPath,
        "vmVersion": args.vmVersion,
        "vmVnicCount": args.vmVnicCount,
        "vnicDeviceConfigId": args.vnicDeviceConfigId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareVirtualMachine.
 */
export interface GetVirtualizationVmwareVirtualMachineArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetVirtualizationVmwareVirtualMachineAncestor[];
    annotation?: string;
    bootTime?: string;
    capacity?: inputs.GetVirtualizationVmwareVirtualMachineCapacity;
    classId?: string;
    cluster?: inputs.GetVirtualizationVmwareVirtualMachineCluster;
    configName?: string;
    connectionState?: string;
    cpuHotAddEnabled?: boolean;
    cpuShares?: inputs.GetVirtualizationVmwareVirtualMachineCpuShares;
    cpuSocketInfo?: inputs.GetVirtualizationVmwareVirtualMachineCpuSocketInfo;
    cpuUtilization?: number;
    createTime?: string;
    customAttributes?: string[];
    datacenter?: inputs.GetVirtualizationVmwareVirtualMachineDatacenter;
    datastores?: inputs.GetVirtualizationVmwareVirtualMachineDatastore[];
    defaultPowerOffType?: string;
    dhcpEnabled?: boolean;
    diskCommitInfo?: inputs.GetVirtualizationVmwareVirtualMachineDiskCommitInfo;
    dnsServerLists?: string[];
    dnsSuffixLists?: string[];
    domainGroupMoid?: string;
    extraConfig?: string;
    folder?: string;
    guestInfo?: inputs.GetVirtualizationVmwareVirtualMachineGuestInfo;
    guestState?: string;
    host?: inputs.GetVirtualizationVmwareVirtualMachineHost;
    hostCompatibility?: string;
    hypervisorType?: string;
    id?: string;
    identity?: string;
    instanceUuid?: string;
    inventoryPath?: string;
    ipAddresses?: string[];
    isTemplate?: boolean;
    macAddresses?: string[];
    memShares?: inputs.GetVirtualizationVmwareVirtualMachineMemShares;
    memoryCapacity?: inputs.GetVirtualizationVmwareVirtualMachineMemoryCapacity;
    memoryHotAddEnabled?: boolean;
    memoryUtilization?: number;
    modTime?: string;
    moid?: string;
    name?: string;
    networkCount?: number;
    networks?: inputs.GetVirtualizationVmwareVirtualMachineNetwork[];
    nrProvider?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetVirtualizationVmwareVirtualMachineParent;
    parentFolder?: inputs.GetVirtualizationVmwareVirtualMachineParentFolder;
    passthroughDevices?: number[];
    permissionResources?: inputs.GetVirtualizationVmwareVirtualMachinePermissionResource[];
    portGroups?: string[];
    powerState?: string;
    processorCapacity?: inputs.GetVirtualizationVmwareVirtualMachineProcessorCapacity;
    protectedVm?: boolean;
    registeredDevice?: inputs.GetVirtualizationVmwareVirtualMachineRegisteredDevice;
    remoteDisplayInfo?: inputs.GetVirtualizationVmwareVirtualMachineRemoteDisplayInfo;
    remoteDisplayVncEnabled?: boolean;
    resourcePool?: string;
    resourcePoolOwner?: string;
    resourcePoolParent?: string;
    sharedScope?: string;
    state?: string;
    tags?: inputs.GetVirtualizationVmwareVirtualMachineTag[];
    toolRunningStatus?: string;
    toolsVersion?: string;
    uuid?: string;
    versionContext?: inputs.GetVirtualizationVmwareVirtualMachineVersionContext;
    virtualDisks?: number[];
    virtualNetworkInterfaces?: number[];
    vmCreationTime?: string;
    vmDiskCount?: number;
    vmOverallStatus?: string;
    vmPath?: string;
    vmVersion?: string;
    vmVnicCount?: number;
    vnicDeviceConfigId?: string;
}

/**
 * A collection of values returned by getVirtualizationVmwareVirtualMachine.
 */
export interface GetVirtualizationVmwareVirtualMachineResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetVirtualizationVmwareVirtualMachineAncestor[];
    readonly annotation?: string;
    readonly bootTime?: string;
    readonly capacity?: outputs.GetVirtualizationVmwareVirtualMachineCapacity;
    readonly classId?: string;
    readonly cluster?: outputs.GetVirtualizationVmwareVirtualMachineCluster;
    readonly configName?: string;
    readonly connectionState?: string;
    readonly cpuHotAddEnabled?: boolean;
    readonly cpuShares?: outputs.GetVirtualizationVmwareVirtualMachineCpuShares;
    readonly cpuSocketInfo?: outputs.GetVirtualizationVmwareVirtualMachineCpuSocketInfo;
    readonly cpuUtilization?: number;
    readonly createTime?: string;
    readonly customAttributes?: string[];
    readonly datacenter?: outputs.GetVirtualizationVmwareVirtualMachineDatacenter;
    readonly datastores?: outputs.GetVirtualizationVmwareVirtualMachineDatastore[];
    readonly defaultPowerOffType?: string;
    readonly dhcpEnabled?: boolean;
    readonly diskCommitInfo?: outputs.GetVirtualizationVmwareVirtualMachineDiskCommitInfo;
    readonly dnsServerLists?: string[];
    readonly dnsSuffixLists?: string[];
    readonly domainGroupMoid?: string;
    readonly extraConfig?: string;
    readonly folder?: string;
    readonly guestInfo?: outputs.GetVirtualizationVmwareVirtualMachineGuestInfo;
    readonly guestState?: string;
    readonly host?: outputs.GetVirtualizationVmwareVirtualMachineHost;
    readonly hostCompatibility?: string;
    readonly hypervisorType?: string;
    readonly id: string;
    readonly identity?: string;
    readonly instanceUuid?: string;
    readonly inventoryPath?: string;
    readonly ipAddresses?: string[];
    readonly isTemplate?: boolean;
    readonly macAddresses?: string[];
    readonly memShares?: outputs.GetVirtualizationVmwareVirtualMachineMemShares;
    readonly memoryCapacity?: outputs.GetVirtualizationVmwareVirtualMachineMemoryCapacity;
    readonly memoryHotAddEnabled?: boolean;
    readonly memoryUtilization?: number;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly networkCount?: number;
    readonly networks?: outputs.GetVirtualizationVmwareVirtualMachineNetwork[];
    readonly nrProvider?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetVirtualizationVmwareVirtualMachineParent;
    readonly parentFolder?: outputs.GetVirtualizationVmwareVirtualMachineParentFolder;
    readonly passthroughDevices?: number[];
    readonly permissionResources?: outputs.GetVirtualizationVmwareVirtualMachinePermissionResource[];
    readonly portGroups?: string[];
    readonly powerState?: string;
    readonly processorCapacity?: outputs.GetVirtualizationVmwareVirtualMachineProcessorCapacity;
    readonly protectedVm?: boolean;
    readonly registeredDevice?: outputs.GetVirtualizationVmwareVirtualMachineRegisteredDevice;
    readonly remoteDisplayInfo?: outputs.GetVirtualizationVmwareVirtualMachineRemoteDisplayInfo;
    readonly remoteDisplayVncEnabled?: boolean;
    readonly resourcePool?: string;
    readonly resourcePoolOwner?: string;
    readonly resourcePoolParent?: string;
    readonly results: outputs.GetVirtualizationVmwareVirtualMachineResult[];
    readonly sharedScope?: string;
    readonly state?: string;
    readonly tags?: outputs.GetVirtualizationVmwareVirtualMachineTag[];
    readonly toolRunningStatus?: string;
    readonly toolsVersion?: string;
    readonly uuid?: string;
    readonly versionContext?: outputs.GetVirtualizationVmwareVirtualMachineVersionContext;
    readonly virtualDisks?: number[];
    readonly virtualNetworkInterfaces?: number[];
    readonly vmCreationTime?: string;
    readonly vmDiskCount?: number;
    readonly vmOverallStatus?: string;
    readonly vmPath?: string;
    readonly vmVersion?: string;
    readonly vmVnicCount?: number;
    readonly vnicDeviceConfigId?: string;
}
export function getVirtualizationVmwareVirtualMachineOutput(args?: GetVirtualizationVmwareVirtualMachineOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualizationVmwareVirtualMachineResult> {
    return pulumi.output(args).apply((a: any) => getVirtualizationVmwareVirtualMachine(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareVirtualMachine.
 */
export interface GetVirtualizationVmwareVirtualMachineOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineAncestorArgs>[]>;
    annotation?: pulumi.Input<string>;
    bootTime?: pulumi.Input<string>;
    capacity?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineCapacityArgs>;
    classId?: pulumi.Input<string>;
    cluster?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineClusterArgs>;
    configName?: pulumi.Input<string>;
    connectionState?: pulumi.Input<string>;
    cpuHotAddEnabled?: pulumi.Input<boolean>;
    cpuShares?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineCpuSharesArgs>;
    cpuSocketInfo?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineCpuSocketInfoArgs>;
    cpuUtilization?: pulumi.Input<number>;
    createTime?: pulumi.Input<string>;
    customAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    datacenter?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineDatacenterArgs>;
    datastores?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineDatastoreArgs>[]>;
    defaultPowerOffType?: pulumi.Input<string>;
    dhcpEnabled?: pulumi.Input<boolean>;
    diskCommitInfo?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineDiskCommitInfoArgs>;
    dnsServerLists?: pulumi.Input<pulumi.Input<string>[]>;
    dnsSuffixLists?: pulumi.Input<pulumi.Input<string>[]>;
    domainGroupMoid?: pulumi.Input<string>;
    extraConfig?: pulumi.Input<string>;
    folder?: pulumi.Input<string>;
    guestInfo?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineGuestInfoArgs>;
    guestState?: pulumi.Input<string>;
    host?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineHostArgs>;
    hostCompatibility?: pulumi.Input<string>;
    hypervisorType?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    identity?: pulumi.Input<string>;
    instanceUuid?: pulumi.Input<string>;
    inventoryPath?: pulumi.Input<string>;
    ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    isTemplate?: pulumi.Input<boolean>;
    macAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    memShares?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineMemSharesArgs>;
    memoryCapacity?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineMemoryCapacityArgs>;
    memoryHotAddEnabled?: pulumi.Input<boolean>;
    memoryUtilization?: pulumi.Input<number>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkCount?: pulumi.Input<number>;
    networks?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineNetworkArgs>[]>;
    nrProvider?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineParentArgs>;
    parentFolder?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineParentFolderArgs>;
    passthroughDevices?: pulumi.Input<pulumi.Input<number>[]>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachinePermissionResourceArgs>[]>;
    portGroups?: pulumi.Input<pulumi.Input<string>[]>;
    powerState?: pulumi.Input<string>;
    processorCapacity?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineProcessorCapacityArgs>;
    protectedVm?: pulumi.Input<boolean>;
    registeredDevice?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineRegisteredDeviceArgs>;
    remoteDisplayInfo?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineRemoteDisplayInfoArgs>;
    remoteDisplayVncEnabled?: pulumi.Input<boolean>;
    resourcePool?: pulumi.Input<string>;
    resourcePoolOwner?: pulumi.Input<string>;
    resourcePoolParent?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineTagArgs>[]>;
    toolRunningStatus?: pulumi.Input<string>;
    toolsVersion?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineVersionContextArgs>;
    virtualDisks?: pulumi.Input<pulumi.Input<number>[]>;
    virtualNetworkInterfaces?: pulumi.Input<pulumi.Input<number>[]>;
    vmCreationTime?: pulumi.Input<string>;
    vmDiskCount?: pulumi.Input<number>;
    vmOverallStatus?: pulumi.Input<string>;
    vmPath?: pulumi.Input<string>;
    vmVersion?: pulumi.Input<string>;
    vmVnicCount?: pulumi.Input<number>;
    vnicDeviceConfigId?: pulumi.Input<string>;
}
