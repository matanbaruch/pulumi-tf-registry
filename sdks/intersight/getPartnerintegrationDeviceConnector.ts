// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getPartnerintegrationDeviceConnector(args?: GetPartnerintegrationDeviceConnectorArgs, opts?: pulumi.InvokeOptions): Promise<GetPartnerintegrationDeviceConnectorResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getPartnerintegrationDeviceConnector:getPartnerintegrationDeviceConnector", {
        "accountMoid": args.accountMoid,
        "action": args.action,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "buildStartTime": args.buildStartTime,
        "buildStatus": args.buildStatus,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "imageName": args.imageName,
        "logs": args.logs,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "organization": args.organization,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "sharedScope": args.sharedScope,
        "srcBucket": args.srcBucket,
        "srcFileName": args.srcFileName,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPartnerintegrationDeviceConnector.
 */
export interface GetPartnerintegrationDeviceConnectorArgs {
    accountMoid?: string;
    action?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetPartnerintegrationDeviceConnectorAncestor[];
    buildStartTime?: string;
    buildStatus?: string;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    id?: string;
    imageName?: string;
    logs?: inputs.GetPartnerintegrationDeviceConnectorLog[];
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    organization?: inputs.GetPartnerintegrationDeviceConnectorOrganization;
    owners?: string[];
    parent?: inputs.GetPartnerintegrationDeviceConnectorParent;
    permissionResources?: inputs.GetPartnerintegrationDeviceConnectorPermissionResource[];
    sharedScope?: string;
    srcBucket?: string;
    srcFileName?: string;
    tags?: inputs.GetPartnerintegrationDeviceConnectorTag[];
    versionContext?: inputs.GetPartnerintegrationDeviceConnectorVersionContext;
}

/**
 * A collection of values returned by getPartnerintegrationDeviceConnector.
 */
export interface GetPartnerintegrationDeviceConnectorResult {
    readonly accountMoid?: string;
    readonly action?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetPartnerintegrationDeviceConnectorAncestor[];
    readonly buildStartTime?: string;
    readonly buildStatus?: string;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly imageName?: string;
    readonly logs?: outputs.GetPartnerintegrationDeviceConnectorLog[];
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly organization?: outputs.GetPartnerintegrationDeviceConnectorOrganization;
    readonly owners?: string[];
    readonly parent?: outputs.GetPartnerintegrationDeviceConnectorParent;
    readonly permissionResources?: outputs.GetPartnerintegrationDeviceConnectorPermissionResource[];
    readonly results: outputs.GetPartnerintegrationDeviceConnectorResult[];
    readonly sharedScope?: string;
    readonly srcBucket?: string;
    readonly srcFileName?: string;
    readonly tags?: outputs.GetPartnerintegrationDeviceConnectorTag[];
    readonly versionContext?: outputs.GetPartnerintegrationDeviceConnectorVersionContext;
}
export function getPartnerintegrationDeviceConnectorOutput(args?: GetPartnerintegrationDeviceConnectorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPartnerintegrationDeviceConnectorResult> {
    return pulumi.output(args).apply((a: any) => getPartnerintegrationDeviceConnector(a, opts))
}

/**
 * A collection of arguments for invoking getPartnerintegrationDeviceConnector.
 */
export interface GetPartnerintegrationDeviceConnectorOutputArgs {
    accountMoid?: pulumi.Input<string>;
    action?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetPartnerintegrationDeviceConnectorAncestorArgs>[]>;
    buildStartTime?: pulumi.Input<string>;
    buildStatus?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    imageName?: pulumi.Input<string>;
    logs?: pulumi.Input<pulumi.Input<inputs.GetPartnerintegrationDeviceConnectorLogArgs>[]>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.GetPartnerintegrationDeviceConnectorOrganizationArgs>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetPartnerintegrationDeviceConnectorParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetPartnerintegrationDeviceConnectorPermissionResourceArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    srcBucket?: pulumi.Input<string>;
    srcFileName?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetPartnerintegrationDeviceConnectorTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetPartnerintegrationDeviceConnectorVersionContextArgs>;
}
