// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageNetAppFcPort(args?: GetStorageNetAppFcPortArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageNetAppFcPortResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageNetAppFcPort:getStorageNetAppFcPort", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "arrayController": args.arrayController,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "events": args.events,
        "id": args.id,
        "iqn": args.iqn,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "nodeName": args.nodeName,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "portStatus": args.portStatus,
        "sharedScope": args.sharedScope,
        "speed": args.speed,
        "speedConfigured": args.speedConfigured,
        "speedMaximum": args.speedMaximum,
        "state": args.state,
        "status": args.status,
        "tags": args.tags,
        "type": args.type,
        "uuid": args.uuid,
        "versionContext": args.versionContext,
        "wwn": args.wwn,
        "wwnn": args.wwnn,
        "wwpn": args.wwpn,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageNetAppFcPort.
 */
export interface GetStorageNetAppFcPortArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageNetAppFcPortAncestor[];
    arrayController?: inputs.GetStorageNetAppFcPortArrayController;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    events?: inputs.GetStorageNetAppFcPortEvent[];
    id?: string;
    iqn?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    nodeName?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageNetAppFcPortParent;
    permissionResources?: inputs.GetStorageNetAppFcPortPermissionResource[];
    portStatus?: string;
    sharedScope?: string;
    speed?: number;
    speedConfigured?: string;
    speedMaximum?: string;
    state?: string;
    status?: string;
    tags?: inputs.GetStorageNetAppFcPortTag[];
    type?: string;
    uuid?: string;
    versionContext?: inputs.GetStorageNetAppFcPortVersionContext;
    wwn?: string;
    wwnn?: string;
    wwpn?: string;
}

/**
 * A collection of values returned by getStorageNetAppFcPort.
 */
export interface GetStorageNetAppFcPortResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageNetAppFcPortAncestor[];
    readonly arrayController?: outputs.GetStorageNetAppFcPortArrayController;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly events?: outputs.GetStorageNetAppFcPortEvent[];
    readonly id: string;
    readonly iqn?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nodeName?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageNetAppFcPortParent;
    readonly permissionResources?: outputs.GetStorageNetAppFcPortPermissionResource[];
    readonly portStatus?: string;
    readonly results: outputs.GetStorageNetAppFcPortResult[];
    readonly sharedScope?: string;
    readonly speed?: number;
    readonly speedConfigured?: string;
    readonly speedMaximum?: string;
    readonly state?: string;
    readonly status?: string;
    readonly tags?: outputs.GetStorageNetAppFcPortTag[];
    readonly type?: string;
    readonly uuid?: string;
    readonly versionContext?: outputs.GetStorageNetAppFcPortVersionContext;
    readonly wwn?: string;
    readonly wwnn?: string;
    readonly wwpn?: string;
}
export function getStorageNetAppFcPortOutput(args?: GetStorageNetAppFcPortOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageNetAppFcPortResult> {
    return pulumi.output(args).apply((a: any) => getStorageNetAppFcPort(a, opts))
}

/**
 * A collection of arguments for invoking getStorageNetAppFcPort.
 */
export interface GetStorageNetAppFcPortOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppFcPortAncestorArgs>[]>;
    arrayController?: pulumi.Input<inputs.GetStorageNetAppFcPortArrayControllerArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    events?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppFcPortEventArgs>[]>;
    id?: pulumi.Input<string>;
    iqn?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nodeName?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageNetAppFcPortParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppFcPortPermissionResourceArgs>[]>;
    portStatus?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    speed?: pulumi.Input<number>;
    speedConfigured?: pulumi.Input<string>;
    speedMaximum?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppFcPortTagArgs>[]>;
    type?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetStorageNetAppFcPortVersionContextArgs>;
    wwn?: pulumi.Input<string>;
    wwnn?: pulumi.Input<string>;
    wwpn?: pulumi.Input<string>;
}
