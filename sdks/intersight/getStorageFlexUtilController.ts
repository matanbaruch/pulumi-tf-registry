// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageFlexUtilController(args?: GetStorageFlexUtilControllerArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageFlexUtilControllerResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageFlexUtilController:getStorageFlexUtilController", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "computeBoard": args.computeBoard,
        "controllerName": args.controllerName,
        "controllerStatus": args.controllerStatus,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "ffControllerId": args.ffControllerId,
        "flexUtilPhysicalDrives": args.flexUtilPhysicalDrives,
        "flexUtilVirtualDrives": args.flexUtilVirtualDrives,
        "id": args.id,
        "internalState": args.internalState,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageFlexUtilController.
 */
export interface GetStorageFlexUtilControllerArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageFlexUtilControllerAncestor[];
    classId?: string;
    computeBoard?: inputs.GetStorageFlexUtilControllerComputeBoard;
    controllerName?: string;
    controllerStatus?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    ffControllerId?: string;
    flexUtilPhysicalDrives?: inputs.GetStorageFlexUtilControllerFlexUtilPhysicalDrife[];
    flexUtilVirtualDrives?: inputs.GetStorageFlexUtilControllerFlexUtilVirtualDrife[];
    id?: string;
    internalState?: string;
    inventoryDeviceInfo?: inputs.GetStorageFlexUtilControllerInventoryDeviceInfo;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageFlexUtilControllerParent;
    permissionResources?: inputs.GetStorageFlexUtilControllerPermissionResource[];
    registeredDevice?: inputs.GetStorageFlexUtilControllerRegisteredDevice;
    rn?: string;
    sharedScope?: string;
    tags?: inputs.GetStorageFlexUtilControllerTag[];
    versionContext?: inputs.GetStorageFlexUtilControllerVersionContext;
}

/**
 * A collection of values returned by getStorageFlexUtilController.
 */
export interface GetStorageFlexUtilControllerResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageFlexUtilControllerAncestor[];
    readonly classId?: string;
    readonly computeBoard?: outputs.GetStorageFlexUtilControllerComputeBoard;
    readonly controllerName?: string;
    readonly controllerStatus?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly ffControllerId?: string;
    readonly flexUtilPhysicalDrives?: outputs.GetStorageFlexUtilControllerFlexUtilPhysicalDrife[];
    readonly flexUtilVirtualDrives?: outputs.GetStorageFlexUtilControllerFlexUtilVirtualDrife[];
    readonly id: string;
    readonly internalState?: string;
    readonly inventoryDeviceInfo?: outputs.GetStorageFlexUtilControllerInventoryDeviceInfo;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageFlexUtilControllerParent;
    readonly permissionResources?: outputs.GetStorageFlexUtilControllerPermissionResource[];
    readonly registeredDevice?: outputs.GetStorageFlexUtilControllerRegisteredDevice;
    readonly results: outputs.GetStorageFlexUtilControllerResult[];
    readonly rn?: string;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetStorageFlexUtilControllerTag[];
    readonly versionContext?: outputs.GetStorageFlexUtilControllerVersionContext;
}
export function getStorageFlexUtilControllerOutput(args?: GetStorageFlexUtilControllerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageFlexUtilControllerResult> {
    return pulumi.output(args).apply((a: any) => getStorageFlexUtilController(a, opts))
}

/**
 * A collection of arguments for invoking getStorageFlexUtilController.
 */
export interface GetStorageFlexUtilControllerOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageFlexUtilControllerAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    computeBoard?: pulumi.Input<inputs.GetStorageFlexUtilControllerComputeBoardArgs>;
    controllerName?: pulumi.Input<string>;
    controllerStatus?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    ffControllerId?: pulumi.Input<string>;
    flexUtilPhysicalDrives?: pulumi.Input<pulumi.Input<inputs.GetStorageFlexUtilControllerFlexUtilPhysicalDrifeArgs>[]>;
    flexUtilVirtualDrives?: pulumi.Input<pulumi.Input<inputs.GetStorageFlexUtilControllerFlexUtilVirtualDrifeArgs>[]>;
    id?: pulumi.Input<string>;
    internalState?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetStorageFlexUtilControllerInventoryDeviceInfoArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageFlexUtilControllerParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageFlexUtilControllerPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetStorageFlexUtilControllerRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageFlexUtilControllerTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetStorageFlexUtilControllerVersionContextArgs>;
}
