// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageHitachiRemoteCopyPairUr(args?: GetStorageHitachiRemoteCopyPairUrArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageHitachiRemoteCopyPairUrResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageHitachiRemoteCopyPairUr:getStorageHitachiRemoteCopyPairUr", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "array": args.array,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "muNumber": args.muNumber,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "pvolLdevId": args.pvolLdevId,
        "pvolStorageSerial": args.pvolStorageSerial,
        "registeredDevice": args.registeredDevice,
        "replicationType": args.replicationType,
        "sharedScope": args.sharedScope,
        "status": args.status,
        "svolLdevId": args.svolLdevId,
        "svolStorageSerial": args.svolStorageSerial,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageHitachiRemoteCopyPairUr.
 */
export interface GetStorageHitachiRemoteCopyPairUrArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageHitachiRemoteCopyPairUrAncestor[];
    array?: inputs.GetStorageHitachiRemoteCopyPairUrArray;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    muNumber?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageHitachiRemoteCopyPairUrParent;
    permissionResources?: inputs.GetStorageHitachiRemoteCopyPairUrPermissionResource[];
    pvolLdevId?: number;
    pvolStorageSerial?: string;
    registeredDevice?: inputs.GetStorageHitachiRemoteCopyPairUrRegisteredDevice;
    replicationType?: string;
    sharedScope?: string;
    status?: string;
    svolLdevId?: number;
    svolStorageSerial?: string;
    tags?: inputs.GetStorageHitachiRemoteCopyPairUrTag[];
    versionContext?: inputs.GetStorageHitachiRemoteCopyPairUrVersionContext;
}

/**
 * A collection of values returned by getStorageHitachiRemoteCopyPairUr.
 */
export interface GetStorageHitachiRemoteCopyPairUrResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageHitachiRemoteCopyPairUrAncestor[];
    readonly array?: outputs.GetStorageHitachiRemoteCopyPairUrArray;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly muNumber?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageHitachiRemoteCopyPairUrParent;
    readonly permissionResources?: outputs.GetStorageHitachiRemoteCopyPairUrPermissionResource[];
    readonly pvolLdevId?: number;
    readonly pvolStorageSerial?: string;
    readonly registeredDevice?: outputs.GetStorageHitachiRemoteCopyPairUrRegisteredDevice;
    readonly replicationType?: string;
    readonly results: outputs.GetStorageHitachiRemoteCopyPairUrResult[];
    readonly sharedScope?: string;
    readonly status?: string;
    readonly svolLdevId?: number;
    readonly svolStorageSerial?: string;
    readonly tags?: outputs.GetStorageHitachiRemoteCopyPairUrTag[];
    readonly versionContext?: outputs.GetStorageHitachiRemoteCopyPairUrVersionContext;
}
export function getStorageHitachiRemoteCopyPairUrOutput(args?: GetStorageHitachiRemoteCopyPairUrOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageHitachiRemoteCopyPairUrResult> {
    return pulumi.output(args).apply((a: any) => getStorageHitachiRemoteCopyPairUr(a, opts))
}

/**
 * A collection of arguments for invoking getStorageHitachiRemoteCopyPairUr.
 */
export interface GetStorageHitachiRemoteCopyPairUrOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiRemoteCopyPairUrAncestorArgs>[]>;
    array?: pulumi.Input<inputs.GetStorageHitachiRemoteCopyPairUrArrayArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    muNumber?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageHitachiRemoteCopyPairUrParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiRemoteCopyPairUrPermissionResourceArgs>[]>;
    pvolLdevId?: pulumi.Input<number>;
    pvolStorageSerial?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetStorageHitachiRemoteCopyPairUrRegisteredDeviceArgs>;
    replicationType?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    svolLdevId?: pulumi.Input<number>;
    svolStorageSerial?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiRemoteCopyPairUrTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetStorageHitachiRemoteCopyPairUrVersionContextArgs>;
}
