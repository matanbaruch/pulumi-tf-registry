// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getBootIscsiDevice(args?: GetBootIscsiDeviceArgs, opts?: pulumi.InvokeOptions): Promise<GetBootIscsiDeviceResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getBootIscsiDevice:getBootIscsiDevice", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "computePhysical": args.computePhysical,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "isUpgraded": args.isUpgraded,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "order": args.order,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "registeredDevice": args.registeredDevice,
        "revision": args.revision,
        "rn": args.rn,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "state": args.state,
        "tags": args.tags,
        "type": args.type,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getBootIscsiDevice.
 */
export interface GetBootIscsiDeviceArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetBootIscsiDeviceAncestor[];
    classId?: string;
    computePhysical?: inputs.GetBootIscsiDeviceComputePhysical;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    id?: string;
    inventoryDeviceInfo?: inputs.GetBootIscsiDeviceInventoryDeviceInfo;
    isUpgraded?: boolean;
    modTime?: string;
    model?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    order?: number;
    owners?: string[];
    parent?: inputs.GetBootIscsiDeviceParent;
    permissionResources?: inputs.GetBootIscsiDevicePermissionResource[];
    presence?: string;
    previousFru?: inputs.GetBootIscsiDevicePreviousFru;
    registeredDevice?: inputs.GetBootIscsiDeviceRegisteredDevice;
    revision?: string;
    rn?: string;
    serial?: string;
    sharedScope?: string;
    state?: string;
    tags?: inputs.GetBootIscsiDeviceTag[];
    type?: string;
    vendor?: string;
    versionContext?: inputs.GetBootIscsiDeviceVersionContext;
}

/**
 * A collection of values returned by getBootIscsiDevice.
 */
export interface GetBootIscsiDeviceResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetBootIscsiDeviceAncestor[];
    readonly classId?: string;
    readonly computePhysical?: outputs.GetBootIscsiDeviceComputePhysical;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetBootIscsiDeviceInventoryDeviceInfo;
    readonly isUpgraded?: boolean;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly order?: number;
    readonly owners?: string[];
    readonly parent?: outputs.GetBootIscsiDeviceParent;
    readonly permissionResources?: outputs.GetBootIscsiDevicePermissionResource[];
    readonly presence?: string;
    readonly previousFru?: outputs.GetBootIscsiDevicePreviousFru;
    readonly registeredDevice?: outputs.GetBootIscsiDeviceRegisteredDevice;
    readonly results: outputs.GetBootIscsiDeviceResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly state?: string;
    readonly tags?: outputs.GetBootIscsiDeviceTag[];
    readonly type?: string;
    readonly vendor?: string;
    readonly versionContext?: outputs.GetBootIscsiDeviceVersionContext;
}
export function getBootIscsiDeviceOutput(args?: GetBootIscsiDeviceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBootIscsiDeviceResult> {
    return pulumi.output(args).apply((a: any) => getBootIscsiDevice(a, opts))
}

/**
 * A collection of arguments for invoking getBootIscsiDevice.
 */
export interface GetBootIscsiDeviceOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetBootIscsiDeviceAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    computePhysical?: pulumi.Input<inputs.GetBootIscsiDeviceComputePhysicalArgs>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetBootIscsiDeviceInventoryDeviceInfoArgs>;
    isUpgraded?: pulumi.Input<boolean>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    order?: pulumi.Input<number>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetBootIscsiDeviceParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetBootIscsiDevicePermissionResourceArgs>[]>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetBootIscsiDevicePreviousFruArgs>;
    registeredDevice?: pulumi.Input<inputs.GetBootIscsiDeviceRegisteredDeviceArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetBootIscsiDeviceTagArgs>[]>;
    type?: pulumi.Input<string>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetBootIscsiDeviceVersionContextArgs>;
}
