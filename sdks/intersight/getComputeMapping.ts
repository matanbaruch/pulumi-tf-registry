// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getComputeMapping(args?: GetComputeMappingArgs, opts?: pulumi.InvokeOptions): Promise<GetComputeMappingResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getComputeMapping:getComputeMapping", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "fileLocation": args.fileLocation,
        "id": args.id,
        "identifier": args.identifier,
        "imageName": args.imageName,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "mediaTypes": args.mediaTypes,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
        "vmedia": args.vmedia,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getComputeMapping.
 */
export interface GetComputeMappingArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetComputeMappingAncestor[];
    classId?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    fileLocation?: string;
    id?: string;
    identifier?: string;
    imageName?: string;
    inventoryDeviceInfo?: inputs.GetComputeMappingInventoryDeviceInfo;
    mediaTypes?: string[];
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetComputeMappingParent;
    permissionResources?: inputs.GetComputeMappingPermissionResource[];
    registeredDevice?: inputs.GetComputeMappingRegisteredDevice;
    rn?: string;
    sharedScope?: string;
    tags?: inputs.GetComputeMappingTag[];
    versionContext?: inputs.GetComputeMappingVersionContext;
    vmedia?: inputs.GetComputeMappingVmedia;
}

/**
 * A collection of values returned by getComputeMapping.
 */
export interface GetComputeMappingResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetComputeMappingAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly fileLocation?: string;
    readonly id: string;
    readonly identifier?: string;
    readonly imageName?: string;
    readonly inventoryDeviceInfo?: outputs.GetComputeMappingInventoryDeviceInfo;
    readonly mediaTypes?: string[];
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetComputeMappingParent;
    readonly permissionResources?: outputs.GetComputeMappingPermissionResource[];
    readonly registeredDevice?: outputs.GetComputeMappingRegisteredDevice;
    readonly results: outputs.GetComputeMappingResult[];
    readonly rn?: string;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetComputeMappingTag[];
    readonly versionContext?: outputs.GetComputeMappingVersionContext;
    readonly vmedia?: outputs.GetComputeMappingVmedia;
}
export function getComputeMappingOutput(args?: GetComputeMappingOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetComputeMappingResult> {
    return pulumi.output(args).apply((a: any) => getComputeMapping(a, opts))
}

/**
 * A collection of arguments for invoking getComputeMapping.
 */
export interface GetComputeMappingOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetComputeMappingAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    fileLocation?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    identifier?: pulumi.Input<string>;
    imageName?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetComputeMappingInventoryDeviceInfoArgs>;
    mediaTypes?: pulumi.Input<pulumi.Input<string>[]>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetComputeMappingParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetComputeMappingPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetComputeMappingRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetComputeMappingTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetComputeMappingVersionContextArgs>;
    vmedia?: pulumi.Input<inputs.GetComputeMappingVmediaArgs>;
}
