// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMemoryPersistentMemoryRegion(args?: GetMemoryPersistentMemoryRegionArgs, opts?: pulumi.InvokeOptions): Promise<GetMemoryPersistentMemoryRegionResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getMemoryPersistentMemoryRegion:getMemoryPersistentMemoryRegion", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "freeCapacity": args.freeCapacity,
        "healthState": args.healthState,
        "id": args.id,
        "interleavedSetId": args.interleavedSetId,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "locaterIds": args.locaterIds,
        "memoryPersistentMemoryConfiguration": args.memoryPersistentMemoryConfiguration,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "persistentMemoryNamespaces": args.persistentMemoryNamespaces,
        "persistentMemoryType": args.persistentMemoryType,
        "regionId": args.regionId,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "sharedScope": args.sharedScope,
        "socketId": args.socketId,
        "socketMemoryId": args.socketMemoryId,
        "tags": args.tags,
        "totalCapacity": args.totalCapacity,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMemoryPersistentMemoryRegion.
 */
export interface GetMemoryPersistentMemoryRegionArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetMemoryPersistentMemoryRegionAncestor[];
    classId?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    freeCapacity?: string;
    healthState?: string;
    id?: string;
    interleavedSetId?: string;
    inventoryDeviceInfo?: inputs.GetMemoryPersistentMemoryRegionInventoryDeviceInfo;
    locaterIds?: string;
    memoryPersistentMemoryConfiguration?: inputs.GetMemoryPersistentMemoryRegionMemoryPersistentMemoryConfiguration;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetMemoryPersistentMemoryRegionParent;
    permissionResources?: inputs.GetMemoryPersistentMemoryRegionPermissionResource[];
    persistentMemoryNamespaces?: inputs.GetMemoryPersistentMemoryRegionPersistentMemoryNamespace[];
    persistentMemoryType?: string;
    regionId?: string;
    registeredDevice?: inputs.GetMemoryPersistentMemoryRegionRegisteredDevice;
    rn?: string;
    sharedScope?: string;
    socketId?: string;
    socketMemoryId?: string;
    tags?: inputs.GetMemoryPersistentMemoryRegionTag[];
    totalCapacity?: string;
    versionContext?: inputs.GetMemoryPersistentMemoryRegionVersionContext;
}

/**
 * A collection of values returned by getMemoryPersistentMemoryRegion.
 */
export interface GetMemoryPersistentMemoryRegionResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetMemoryPersistentMemoryRegionAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly freeCapacity?: string;
    readonly healthState?: string;
    readonly id: string;
    readonly interleavedSetId?: string;
    readonly inventoryDeviceInfo?: outputs.GetMemoryPersistentMemoryRegionInventoryDeviceInfo;
    readonly locaterIds?: string;
    readonly memoryPersistentMemoryConfiguration?: outputs.GetMemoryPersistentMemoryRegionMemoryPersistentMemoryConfiguration;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetMemoryPersistentMemoryRegionParent;
    readonly permissionResources?: outputs.GetMemoryPersistentMemoryRegionPermissionResource[];
    readonly persistentMemoryNamespaces?: outputs.GetMemoryPersistentMemoryRegionPersistentMemoryNamespace[];
    readonly persistentMemoryType?: string;
    readonly regionId?: string;
    readonly registeredDevice?: outputs.GetMemoryPersistentMemoryRegionRegisteredDevice;
    readonly results: outputs.GetMemoryPersistentMemoryRegionResult[];
    readonly rn?: string;
    readonly sharedScope?: string;
    readonly socketId?: string;
    readonly socketMemoryId?: string;
    readonly tags?: outputs.GetMemoryPersistentMemoryRegionTag[];
    readonly totalCapacity?: string;
    readonly versionContext?: outputs.GetMemoryPersistentMemoryRegionVersionContext;
}
export function getMemoryPersistentMemoryRegionOutput(args?: GetMemoryPersistentMemoryRegionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMemoryPersistentMemoryRegionResult> {
    return pulumi.output(args).apply((a: any) => getMemoryPersistentMemoryRegion(a, opts))
}

/**
 * A collection of arguments for invoking getMemoryPersistentMemoryRegion.
 */
export interface GetMemoryPersistentMemoryRegionOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetMemoryPersistentMemoryRegionAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    freeCapacity?: pulumi.Input<string>;
    healthState?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    interleavedSetId?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetMemoryPersistentMemoryRegionInventoryDeviceInfoArgs>;
    locaterIds?: pulumi.Input<string>;
    memoryPersistentMemoryConfiguration?: pulumi.Input<inputs.GetMemoryPersistentMemoryRegionMemoryPersistentMemoryConfigurationArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetMemoryPersistentMemoryRegionParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetMemoryPersistentMemoryRegionPermissionResourceArgs>[]>;
    persistentMemoryNamespaces?: pulumi.Input<pulumi.Input<inputs.GetMemoryPersistentMemoryRegionPersistentMemoryNamespaceArgs>[]>;
    persistentMemoryType?: pulumi.Input<string>;
    regionId?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetMemoryPersistentMemoryRegionRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    socketId?: pulumi.Input<string>;
    socketMemoryId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetMemoryPersistentMemoryRegionTagArgs>[]>;
    totalCapacity?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetMemoryPersistentMemoryRegionVersionContextArgs>;
}
