// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getResourceGroup(args?: GetResourceGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetResourceGroupResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getResourceGroup:getResourceGroup", {
        "account": args.account,
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "organizations": args.organizations,
        "owners": args.owners,
        "parent": args.parent,
        "perTypeCombinedSelectors": args.perTypeCombinedSelectors,
        "permissionResources": args.permissionResources,
        "qualifier": args.qualifier,
        "reevaluate": args.reevaluate,
        "selectors": args.selectors,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "type": args.type,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getResourceGroup.
 */
export interface GetResourceGroupArgs {
    account?: inputs.GetResourceGroupAccount;
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetResourceGroupAncestor[];
    classId?: string;
    createTime?: string;
    description?: string;
    domainGroupMoid?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    organizations?: inputs.GetResourceGroupOrganization[];
    owners?: string[];
    parent?: inputs.GetResourceGroupParent;
    perTypeCombinedSelectors?: inputs.GetResourceGroupPerTypeCombinedSelector[];
    permissionResources?: inputs.GetResourceGroupPermissionResource[];
    qualifier?: string;
    reevaluate?: boolean;
    selectors?: inputs.GetResourceGroupSelector[];
    sharedScope?: string;
    tags?: inputs.GetResourceGroupTag[];
    type?: string;
    versionContext?: inputs.GetResourceGroupVersionContext;
}

/**
 * A collection of values returned by getResourceGroup.
 */
export interface GetResourceGroupResult {
    readonly account?: outputs.GetResourceGroupAccount;
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetResourceGroupAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly organizations?: outputs.GetResourceGroupOrganization[];
    readonly owners?: string[];
    readonly parent?: outputs.GetResourceGroupParent;
    readonly perTypeCombinedSelectors?: outputs.GetResourceGroupPerTypeCombinedSelector[];
    readonly permissionResources?: outputs.GetResourceGroupPermissionResource[];
    readonly qualifier?: string;
    readonly reevaluate?: boolean;
    readonly results: outputs.GetResourceGroupResult[];
    readonly selectors?: outputs.GetResourceGroupSelector[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetResourceGroupTag[];
    readonly type?: string;
    readonly versionContext?: outputs.GetResourceGroupVersionContext;
}
export function getResourceGroupOutput(args?: GetResourceGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetResourceGroupResult> {
    return pulumi.output(args).apply((a: any) => getResourceGroup(a, opts))
}

/**
 * A collection of arguments for invoking getResourceGroup.
 */
export interface GetResourceGroupOutputArgs {
    account?: pulumi.Input<inputs.GetResourceGroupAccountArgs>;
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetResourceGroupAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    organizations?: pulumi.Input<pulumi.Input<inputs.GetResourceGroupOrganizationArgs>[]>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetResourceGroupParentArgs>;
    perTypeCombinedSelectors?: pulumi.Input<pulumi.Input<inputs.GetResourceGroupPerTypeCombinedSelectorArgs>[]>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetResourceGroupPermissionResourceArgs>[]>;
    qualifier?: pulumi.Input<string>;
    reevaluate?: pulumi.Input<boolean>;
    selectors?: pulumi.Input<pulumi.Input<inputs.GetResourceGroupSelectorArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetResourceGroupTagArgs>[]>;
    type?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetResourceGroupVersionContextArgs>;
}
