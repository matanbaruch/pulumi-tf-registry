// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEquipmentIoCard(args?: GetEquipmentIoCardArgs, opts?: pulumi.InvokeOptions): Promise<GetEquipmentIoCardResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getEquipmentIoCard:getEquipmentIoCard", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "connectionPath": args.connectionPath,
        "connectionStatus": args.connectionStatus,
        "createTime": args.createTime,
        "dcSupported": args.dcSupported,
        "description": args.description,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "equipmentChassis": args.equipmentChassis,
        "equipmentFex": args.equipmentFex,
        "fanModules": args.fanModules,
        "hostPorts": args.hostPorts,
        "id": args.id,
        "inbandIpAddresses": args.inbandIpAddresses,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "isUpgraded": args.isUpgraded,
        "mgmtController": args.mgmtController,
        "modTime": args.modTime,
        "model": args.model,
        "moduleId": args.moduleId,
        "moid": args.moid,
        "networkPorts": args.networkPorts,
        "nrVersion": args.nrVersion,
        "objectType": args.objectType,
        "operReasons": args.operReasons,
        "operState": args.operState,
        "owners": args.owners,
        "parent": args.parent,
        "partNumber": args.partNumber,
        "permissionResources": args.permissionResources,
        "physicalDeviceRegistration": args.physicalDeviceRegistration,
        "pid": args.pid,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "productName": args.productName,
        "registeredDevice": args.registeredDevice,
        "revision": args.revision,
        "rn": args.rn,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "side": args.side,
        "sku": args.sku,
        "subGroups": args.subGroups,
        "tags": args.tags,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
        "vid": args.vid,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEquipmentIoCard.
 */
export interface GetEquipmentIoCardArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetEquipmentIoCardAncestor[];
    classId?: string;
    connectionPath?: string;
    connectionStatus?: string;
    createTime?: string;
    dcSupported?: boolean;
    description?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    equipmentChassis?: inputs.GetEquipmentIoCardEquipmentChassis;
    equipmentFex?: inputs.GetEquipmentIoCardEquipmentFex;
    fanModules?: inputs.GetEquipmentIoCardFanModule[];
    hostPorts?: inputs.GetEquipmentIoCardHostPort[];
    id?: string;
    inbandIpAddresses?: inputs.GetEquipmentIoCardInbandIpAddress[];
    inventoryDeviceInfo?: inputs.GetEquipmentIoCardInventoryDeviceInfo;
    isUpgraded?: boolean;
    mgmtController?: inputs.GetEquipmentIoCardMgmtController;
    modTime?: string;
    model?: string;
    moduleId?: number;
    moid?: string;
    networkPorts?: inputs.GetEquipmentIoCardNetworkPort[];
    nrVersion?: string;
    objectType?: string;
    operReasons?: string[];
    operState?: string;
    owners?: string[];
    parent?: inputs.GetEquipmentIoCardParent;
    partNumber?: string;
    permissionResources?: inputs.GetEquipmentIoCardPermissionResource[];
    physicalDeviceRegistration?: inputs.GetEquipmentIoCardPhysicalDeviceRegistration;
    pid?: string;
    presence?: string;
    previousFru?: inputs.GetEquipmentIoCardPreviousFru;
    productName?: string;
    registeredDevice?: inputs.GetEquipmentIoCardRegisteredDevice;
    revision?: string;
    rn?: string;
    serial?: string;
    sharedScope?: string;
    side?: string;
    sku?: string;
    subGroups?: inputs.GetEquipmentIoCardSubGroup[];
    tags?: inputs.GetEquipmentIoCardTag[];
    vendor?: string;
    versionContext?: inputs.GetEquipmentIoCardVersionContext;
    vid?: string;
}

/**
 * A collection of values returned by getEquipmentIoCard.
 */
export interface GetEquipmentIoCardResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetEquipmentIoCardAncestor[];
    readonly classId?: string;
    readonly connectionPath?: string;
    readonly connectionStatus?: string;
    readonly createTime?: string;
    readonly dcSupported?: boolean;
    readonly description?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly equipmentChassis?: outputs.GetEquipmentIoCardEquipmentChassis;
    readonly equipmentFex?: outputs.GetEquipmentIoCardEquipmentFex;
    readonly fanModules?: outputs.GetEquipmentIoCardFanModule[];
    readonly hostPorts?: outputs.GetEquipmentIoCardHostPort[];
    readonly id: string;
    readonly inbandIpAddresses?: outputs.GetEquipmentIoCardInbandIpAddress[];
    readonly inventoryDeviceInfo?: outputs.GetEquipmentIoCardInventoryDeviceInfo;
    readonly isUpgraded?: boolean;
    readonly mgmtController?: outputs.GetEquipmentIoCardMgmtController;
    readonly modTime?: string;
    readonly model?: string;
    readonly moduleId?: number;
    readonly moid?: string;
    readonly networkPorts?: outputs.GetEquipmentIoCardNetworkPort[];
    readonly nrVersion?: string;
    readonly objectType?: string;
    readonly operReasons?: string[];
    readonly operState?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetEquipmentIoCardParent;
    readonly partNumber?: string;
    readonly permissionResources?: outputs.GetEquipmentIoCardPermissionResource[];
    readonly physicalDeviceRegistration?: outputs.GetEquipmentIoCardPhysicalDeviceRegistration;
    readonly pid?: string;
    readonly presence?: string;
    readonly previousFru?: outputs.GetEquipmentIoCardPreviousFru;
    readonly productName?: string;
    readonly registeredDevice?: outputs.GetEquipmentIoCardRegisteredDevice;
    readonly results: outputs.GetEquipmentIoCardResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly side?: string;
    readonly sku?: string;
    readonly subGroups?: outputs.GetEquipmentIoCardSubGroup[];
    readonly tags?: outputs.GetEquipmentIoCardTag[];
    readonly vendor?: string;
    readonly versionContext?: outputs.GetEquipmentIoCardVersionContext;
    readonly vid?: string;
}
export function getEquipmentIoCardOutput(args?: GetEquipmentIoCardOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEquipmentIoCardResult> {
    return pulumi.output(args).apply((a: any) => getEquipmentIoCard(a, opts))
}

/**
 * A collection of arguments for invoking getEquipmentIoCard.
 */
export interface GetEquipmentIoCardOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetEquipmentIoCardAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    connectionPath?: pulumi.Input<string>;
    connectionStatus?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    dcSupported?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    equipmentChassis?: pulumi.Input<inputs.GetEquipmentIoCardEquipmentChassisArgs>;
    equipmentFex?: pulumi.Input<inputs.GetEquipmentIoCardEquipmentFexArgs>;
    fanModules?: pulumi.Input<pulumi.Input<inputs.GetEquipmentIoCardFanModuleArgs>[]>;
    hostPorts?: pulumi.Input<pulumi.Input<inputs.GetEquipmentIoCardHostPortArgs>[]>;
    id?: pulumi.Input<string>;
    inbandIpAddresses?: pulumi.Input<pulumi.Input<inputs.GetEquipmentIoCardInbandIpAddressArgs>[]>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetEquipmentIoCardInventoryDeviceInfoArgs>;
    isUpgraded?: pulumi.Input<boolean>;
    mgmtController?: pulumi.Input<inputs.GetEquipmentIoCardMgmtControllerArgs>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moduleId?: pulumi.Input<number>;
    moid?: pulumi.Input<string>;
    networkPorts?: pulumi.Input<pulumi.Input<inputs.GetEquipmentIoCardNetworkPortArgs>[]>;
    nrVersion?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operReasons?: pulumi.Input<pulumi.Input<string>[]>;
    operState?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetEquipmentIoCardParentArgs>;
    partNumber?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetEquipmentIoCardPermissionResourceArgs>[]>;
    physicalDeviceRegistration?: pulumi.Input<inputs.GetEquipmentIoCardPhysicalDeviceRegistrationArgs>;
    pid?: pulumi.Input<string>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetEquipmentIoCardPreviousFruArgs>;
    productName?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetEquipmentIoCardRegisteredDeviceArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    side?: pulumi.Input<string>;
    sku?: pulumi.Input<string>;
    subGroups?: pulumi.Input<pulumi.Input<inputs.GetEquipmentIoCardSubGroupArgs>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetEquipmentIoCardTagArgs>[]>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetEquipmentIoCardVersionContextArgs>;
    vid?: pulumi.Input<string>;
}
