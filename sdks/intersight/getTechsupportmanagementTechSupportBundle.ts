// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getTechsupportmanagementTechSupportBundle(args?: GetTechsupportmanagementTechSupportBundleArgs, opts?: pulumi.InvokeOptions): Promise<GetTechsupportmanagementTechSupportBundleResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getTechsupportmanagementTechSupportBundle:getTechsupportmanagementTechSupportBundle", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceIdentifier": args.deviceIdentifier,
        "deviceRegistration": args.deviceRegistration,
        "deviceType": args.deviceType,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "pid": args.pid,
        "platformParam": args.platformParam,
        "platformType": args.platformType,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "targetResource": args.targetResource,
        "techSupportStatus": args.techSupportStatus,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getTechsupportmanagementTechSupportBundle.
 */
export interface GetTechsupportmanagementTechSupportBundleArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetTechsupportmanagementTechSupportBundleAncestor[];
    classId?: string;
    createTime?: string;
    deviceIdentifier?: string;
    deviceRegistration?: inputs.GetTechsupportmanagementTechSupportBundleDeviceRegistration;
    deviceType?: string;
    domainGroupMoid?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetTechsupportmanagementTechSupportBundleParent;
    permissionResources?: inputs.GetTechsupportmanagementTechSupportBundlePermissionResource[];
    pid?: string;
    platformParam?: inputs.GetTechsupportmanagementTechSupportBundlePlatformParam;
    platformType?: string;
    serial?: string;
    sharedScope?: string;
    tags?: inputs.GetTechsupportmanagementTechSupportBundleTag[];
    targetResource?: inputs.GetTechsupportmanagementTechSupportBundleTargetResource;
    techSupportStatus?: inputs.GetTechsupportmanagementTechSupportBundleTechSupportStatus;
    versionContext?: inputs.GetTechsupportmanagementTechSupportBundleVersionContext;
}

/**
 * A collection of values returned by getTechsupportmanagementTechSupportBundle.
 */
export interface GetTechsupportmanagementTechSupportBundleResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetTechsupportmanagementTechSupportBundleAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceIdentifier?: string;
    readonly deviceRegistration?: outputs.GetTechsupportmanagementTechSupportBundleDeviceRegistration;
    readonly deviceType?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetTechsupportmanagementTechSupportBundleParent;
    readonly permissionResources?: outputs.GetTechsupportmanagementTechSupportBundlePermissionResource[];
    readonly pid?: string;
    readonly platformParam?: outputs.GetTechsupportmanagementTechSupportBundlePlatformParam;
    readonly platformType?: string;
    readonly results: outputs.GetTechsupportmanagementTechSupportBundleResult[];
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetTechsupportmanagementTechSupportBundleTag[];
    readonly targetResource?: outputs.GetTechsupportmanagementTechSupportBundleTargetResource;
    readonly techSupportStatus?: outputs.GetTechsupportmanagementTechSupportBundleTechSupportStatus;
    readonly versionContext?: outputs.GetTechsupportmanagementTechSupportBundleVersionContext;
}
export function getTechsupportmanagementTechSupportBundleOutput(args?: GetTechsupportmanagementTechSupportBundleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTechsupportmanagementTechSupportBundleResult> {
    return pulumi.output(args).apply((a: any) => getTechsupportmanagementTechSupportBundle(a, opts))
}

/**
 * A collection of arguments for invoking getTechsupportmanagementTechSupportBundle.
 */
export interface GetTechsupportmanagementTechSupportBundleOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetTechsupportmanagementTechSupportBundleAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceIdentifier?: pulumi.Input<string>;
    deviceRegistration?: pulumi.Input<inputs.GetTechsupportmanagementTechSupportBundleDeviceRegistrationArgs>;
    deviceType?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetTechsupportmanagementTechSupportBundleParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetTechsupportmanagementTechSupportBundlePermissionResourceArgs>[]>;
    pid?: pulumi.Input<string>;
    platformParam?: pulumi.Input<inputs.GetTechsupportmanagementTechSupportBundlePlatformParamArgs>;
    platformType?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetTechsupportmanagementTechSupportBundleTagArgs>[]>;
    targetResource?: pulumi.Input<inputs.GetTechsupportmanagementTechSupportBundleTargetResourceArgs>;
    techSupportStatus?: pulumi.Input<inputs.GetTechsupportmanagementTechSupportBundleTechSupportStatusArgs>;
    versionContext?: pulumi.Input<inputs.GetTechsupportmanagementTechSupportBundleVersionContextArgs>;
}
