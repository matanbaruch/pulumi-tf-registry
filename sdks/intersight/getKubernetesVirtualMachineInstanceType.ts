// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getKubernetesVirtualMachineInstanceType(args?: GetKubernetesVirtualMachineInstanceTypeArgs, opts?: pulumi.InvokeOptions): Promise<GetKubernetesVirtualMachineInstanceTypeResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getKubernetesVirtualMachineInstanceType:getKubernetesVirtualMachineInstanceType", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "cpu": args.cpu,
        "createTime": args.createTime,
        "description": args.description,
        "diskSize": args.diskSize,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "memory": args.memory,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "organization": args.organization,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "profiles": args.profiles,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getKubernetesVirtualMachineInstanceType.
 */
export interface GetKubernetesVirtualMachineInstanceTypeArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetKubernetesVirtualMachineInstanceTypeAncestor[];
    classId?: string;
    cpu?: number;
    createTime?: string;
    description?: string;
    diskSize?: number;
    domainGroupMoid?: string;
    id?: string;
    memory?: number;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    organization?: inputs.GetKubernetesVirtualMachineInstanceTypeOrganization;
    owners?: string[];
    parent?: inputs.GetKubernetesVirtualMachineInstanceTypeParent;
    permissionResources?: inputs.GetKubernetesVirtualMachineInstanceTypePermissionResource[];
    profiles?: inputs.GetKubernetesVirtualMachineInstanceTypeProfile[];
    sharedScope?: string;
    tags?: inputs.GetKubernetesVirtualMachineInstanceTypeTag[];
    versionContext?: inputs.GetKubernetesVirtualMachineInstanceTypeVersionContext;
}

/**
 * A collection of values returned by getKubernetesVirtualMachineInstanceType.
 */
export interface GetKubernetesVirtualMachineInstanceTypeResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetKubernetesVirtualMachineInstanceTypeAncestor[];
    readonly classId?: string;
    readonly cpu?: number;
    readonly createTime?: string;
    readonly description?: string;
    readonly diskSize?: number;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly memory?: number;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly organization?: outputs.GetKubernetesVirtualMachineInstanceTypeOrganization;
    readonly owners?: string[];
    readonly parent?: outputs.GetKubernetesVirtualMachineInstanceTypeParent;
    readonly permissionResources?: outputs.GetKubernetesVirtualMachineInstanceTypePermissionResource[];
    readonly profiles?: outputs.GetKubernetesVirtualMachineInstanceTypeProfile[];
    readonly results: outputs.GetKubernetesVirtualMachineInstanceTypeResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetKubernetesVirtualMachineInstanceTypeTag[];
    readonly versionContext?: outputs.GetKubernetesVirtualMachineInstanceTypeVersionContext;
}
export function getKubernetesVirtualMachineInstanceTypeOutput(args?: GetKubernetesVirtualMachineInstanceTypeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKubernetesVirtualMachineInstanceTypeResult> {
    return pulumi.output(args).apply((a: any) => getKubernetesVirtualMachineInstanceType(a, opts))
}

/**
 * A collection of arguments for invoking getKubernetesVirtualMachineInstanceType.
 */
export interface GetKubernetesVirtualMachineInstanceTypeOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetKubernetesVirtualMachineInstanceTypeAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    cpu?: pulumi.Input<number>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    diskSize?: pulumi.Input<number>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    memory?: pulumi.Input<number>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.GetKubernetesVirtualMachineInstanceTypeOrganizationArgs>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetKubernetesVirtualMachineInstanceTypeParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetKubernetesVirtualMachineInstanceTypePermissionResourceArgs>[]>;
    profiles?: pulumi.Input<pulumi.Input<inputs.GetKubernetesVirtualMachineInstanceTypeProfileArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetKubernetesVirtualMachineInstanceTypeTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetKubernetesVirtualMachineInstanceTypeVersionContextArgs>;
}
