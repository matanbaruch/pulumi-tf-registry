// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getHyperflexLicense(args?: GetHyperflexLicenseArgs, opts?: pulumi.InvokeOptions): Promise<GetHyperflexLicenseResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getHyperflexLicense:getHyperflexLicense", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "cluster": args.cluster,
        "complianceState": args.complianceState,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "getOutOfComplianceStartAt": args.getOutOfComplianceStartAt,
        "id": args.id,
        "inEvaluation": args.inEvaluation,
        "licenseAuthorization": args.licenseAuthorization,
        "licenseRegistration": args.licenseRegistration,
        "licenseType": args.licenseType,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "plrEnabled": args.plrEnabled,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "smartLicensingEnabled": args.smartLicensingEnabled,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getHyperflexLicense.
 */
export interface GetHyperflexLicenseArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetHyperflexLicenseAncestor[];
    classId?: string;
    cluster?: inputs.GetHyperflexLicenseCluster;
    complianceState?: string;
    createTime?: string;
    domainGroupMoid?: string;
    getOutOfComplianceStartAt?: string;
    id?: string;
    inEvaluation?: boolean;
    licenseAuthorization?: inputs.GetHyperflexLicenseLicenseAuthorization;
    licenseRegistration?: inputs.GetHyperflexLicenseLicenseRegistration;
    licenseType?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetHyperflexLicenseParent;
    permissionResources?: inputs.GetHyperflexLicensePermissionResource[];
    plrEnabled?: boolean;
    registeredDevice?: inputs.GetHyperflexLicenseRegisteredDevice;
    sharedScope?: string;
    smartLicensingEnabled?: boolean;
    tags?: inputs.GetHyperflexLicenseTag[];
    versionContext?: inputs.GetHyperflexLicenseVersionContext;
}

/**
 * A collection of values returned by getHyperflexLicense.
 */
export interface GetHyperflexLicenseResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetHyperflexLicenseAncestor[];
    readonly classId?: string;
    readonly cluster?: outputs.GetHyperflexLicenseCluster;
    readonly complianceState?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly getOutOfComplianceStartAt?: string;
    readonly id: string;
    readonly inEvaluation?: boolean;
    readonly licenseAuthorization?: outputs.GetHyperflexLicenseLicenseAuthorization;
    readonly licenseRegistration?: outputs.GetHyperflexLicenseLicenseRegistration;
    readonly licenseType?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetHyperflexLicenseParent;
    readonly permissionResources?: outputs.GetHyperflexLicensePermissionResource[];
    readonly plrEnabled?: boolean;
    readonly registeredDevice?: outputs.GetHyperflexLicenseRegisteredDevice;
    readonly results: outputs.GetHyperflexLicenseResult[];
    readonly sharedScope?: string;
    readonly smartLicensingEnabled?: boolean;
    readonly tags?: outputs.GetHyperflexLicenseTag[];
    readonly versionContext?: outputs.GetHyperflexLicenseVersionContext;
}
export function getHyperflexLicenseOutput(args?: GetHyperflexLicenseOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetHyperflexLicenseResult> {
    return pulumi.output(args).apply((a: any) => getHyperflexLicense(a, opts))
}

/**
 * A collection of arguments for invoking getHyperflexLicense.
 */
export interface GetHyperflexLicenseOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetHyperflexLicenseAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    cluster?: pulumi.Input<inputs.GetHyperflexLicenseClusterArgs>;
    complianceState?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    getOutOfComplianceStartAt?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    inEvaluation?: pulumi.Input<boolean>;
    licenseAuthorization?: pulumi.Input<inputs.GetHyperflexLicenseLicenseAuthorizationArgs>;
    licenseRegistration?: pulumi.Input<inputs.GetHyperflexLicenseLicenseRegistrationArgs>;
    licenseType?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetHyperflexLicenseParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetHyperflexLicensePermissionResourceArgs>[]>;
    plrEnabled?: pulumi.Input<boolean>;
    registeredDevice?: pulumi.Input<inputs.GetHyperflexLicenseRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    smartLicensingEnabled?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetHyperflexLicenseTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetHyperflexLicenseVersionContextArgs>;
}
