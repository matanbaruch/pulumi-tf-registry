// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMacpoolLease(args?: GetMacpoolLeaseArgs, opts?: pulumi.InvokeOptions): Promise<GetMacpoolLeaseResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getMacpoolLease:getMacpoolLease", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "allocationType": args.allocationType,
        "ancestors": args.ancestors,
        "assignedToEntity": args.assignedToEntity,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "hasDuplicate": args.hasDuplicate,
        "id": args.id,
        "macAddress": args.macAddress,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "pool": args.pool,
        "poolMember": args.poolMember,
        "reservation": args.reservation,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "universe": args.universe,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMacpoolLease.
 */
export interface GetMacpoolLeaseArgs {
    accountMoid?: string;
    additionalProperties?: string;
    allocationType?: string;
    ancestors?: inputs.GetMacpoolLeaseAncestor[];
    assignedToEntity?: inputs.GetMacpoolLeaseAssignedToEntity;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    hasDuplicate?: boolean;
    id?: string;
    macAddress?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetMacpoolLeaseParent;
    permissionResources?: inputs.GetMacpoolLeasePermissionResource[];
    pool?: inputs.GetMacpoolLeasePool;
    poolMember?: inputs.GetMacpoolLeasePoolMember;
    reservation?: inputs.GetMacpoolLeaseReservation;
    sharedScope?: string;
    tags?: inputs.GetMacpoolLeaseTag[];
    universe?: inputs.GetMacpoolLeaseUniverse;
    versionContext?: inputs.GetMacpoolLeaseVersionContext;
}

/**
 * A collection of values returned by getMacpoolLease.
 */
export interface GetMacpoolLeaseResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly allocationType?: string;
    readonly ancestors?: outputs.GetMacpoolLeaseAncestor[];
    readonly assignedToEntity?: outputs.GetMacpoolLeaseAssignedToEntity;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly hasDuplicate?: boolean;
    readonly id: string;
    readonly macAddress?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetMacpoolLeaseParent;
    readonly permissionResources?: outputs.GetMacpoolLeasePermissionResource[];
    readonly pool?: outputs.GetMacpoolLeasePool;
    readonly poolMember?: outputs.GetMacpoolLeasePoolMember;
    readonly reservation?: outputs.GetMacpoolLeaseReservation;
    readonly results: outputs.GetMacpoolLeaseResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetMacpoolLeaseTag[];
    readonly universe?: outputs.GetMacpoolLeaseUniverse;
    readonly versionContext?: outputs.GetMacpoolLeaseVersionContext;
}
export function getMacpoolLeaseOutput(args?: GetMacpoolLeaseOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMacpoolLeaseResult> {
    return pulumi.output(args).apply((a: any) => getMacpoolLease(a, opts))
}

/**
 * A collection of arguments for invoking getMacpoolLease.
 */
export interface GetMacpoolLeaseOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    allocationType?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetMacpoolLeaseAncestorArgs>[]>;
    assignedToEntity?: pulumi.Input<inputs.GetMacpoolLeaseAssignedToEntityArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    hasDuplicate?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetMacpoolLeaseParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetMacpoolLeasePermissionResourceArgs>[]>;
    pool?: pulumi.Input<inputs.GetMacpoolLeasePoolArgs>;
    poolMember?: pulumi.Input<inputs.GetMacpoolLeasePoolMemberArgs>;
    reservation?: pulumi.Input<inputs.GetMacpoolLeaseReservationArgs>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetMacpoolLeaseTagArgs>[]>;
    universe?: pulumi.Input<inputs.GetMacpoolLeaseUniverseArgs>;
    versionContext?: pulumi.Input<inputs.GetMacpoolLeaseVersionContextArgs>;
}
