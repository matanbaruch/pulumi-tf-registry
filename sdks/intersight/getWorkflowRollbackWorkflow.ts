// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getWorkflowRollbackWorkflow(args?: GetWorkflowRollbackWorkflowArgs, opts?: pulumi.InvokeOptions): Promise<GetWorkflowRollbackWorkflowResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getWorkflowRollbackWorkflow:getWorkflowRollbackWorkflow", {
        "accountMoid": args.accountMoid,
        "action": args.action,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "continueOnTaskFailure": args.continueOnTaskFailure,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "primaryWorkflow": args.primaryWorkflow,
        "rollbackTasks": args.rollbackTasks,
        "rollbackWorkflows": args.rollbackWorkflows,
        "selectedTasks": args.selectedTasks,
        "sharedScope": args.sharedScope,
        "status": args.status,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getWorkflowRollbackWorkflow.
 */
export interface GetWorkflowRollbackWorkflowArgs {
    accountMoid?: string;
    action?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetWorkflowRollbackWorkflowAncestor[];
    classId?: string;
    continueOnTaskFailure?: boolean;
    createTime?: string;
    domainGroupMoid?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetWorkflowRollbackWorkflowParent;
    permissionResources?: inputs.GetWorkflowRollbackWorkflowPermissionResource[];
    primaryWorkflow?: inputs.GetWorkflowRollbackWorkflowPrimaryWorkflow;
    rollbackTasks?: inputs.GetWorkflowRollbackWorkflowRollbackTask[];
    rollbackWorkflows?: inputs.GetWorkflowRollbackWorkflowRollbackWorkflow[];
    selectedTasks?: inputs.GetWorkflowRollbackWorkflowSelectedTask[];
    sharedScope?: string;
    status?: string;
    tags?: inputs.GetWorkflowRollbackWorkflowTag[];
    versionContext?: inputs.GetWorkflowRollbackWorkflowVersionContext;
}

/**
 * A collection of values returned by getWorkflowRollbackWorkflow.
 */
export interface GetWorkflowRollbackWorkflowResult {
    readonly accountMoid?: string;
    readonly action?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetWorkflowRollbackWorkflowAncestor[];
    readonly classId?: string;
    readonly continueOnTaskFailure?: boolean;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetWorkflowRollbackWorkflowParent;
    readonly permissionResources?: outputs.GetWorkflowRollbackWorkflowPermissionResource[];
    readonly primaryWorkflow?: outputs.GetWorkflowRollbackWorkflowPrimaryWorkflow;
    readonly results: outputs.GetWorkflowRollbackWorkflowResult[];
    readonly rollbackTasks?: outputs.GetWorkflowRollbackWorkflowRollbackTask[];
    readonly rollbackWorkflows?: outputs.GetWorkflowRollbackWorkflowRollbackWorkflow[];
    readonly selectedTasks?: outputs.GetWorkflowRollbackWorkflowSelectedTask[];
    readonly sharedScope?: string;
    readonly status?: string;
    readonly tags?: outputs.GetWorkflowRollbackWorkflowTag[];
    readonly versionContext?: outputs.GetWorkflowRollbackWorkflowVersionContext;
}
export function getWorkflowRollbackWorkflowOutput(args?: GetWorkflowRollbackWorkflowOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWorkflowRollbackWorkflowResult> {
    return pulumi.output(args).apply((a: any) => getWorkflowRollbackWorkflow(a, opts))
}

/**
 * A collection of arguments for invoking getWorkflowRollbackWorkflow.
 */
export interface GetWorkflowRollbackWorkflowOutputArgs {
    accountMoid?: pulumi.Input<string>;
    action?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetWorkflowRollbackWorkflowAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    continueOnTaskFailure?: pulumi.Input<boolean>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetWorkflowRollbackWorkflowParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetWorkflowRollbackWorkflowPermissionResourceArgs>[]>;
    primaryWorkflow?: pulumi.Input<inputs.GetWorkflowRollbackWorkflowPrimaryWorkflowArgs>;
    rollbackTasks?: pulumi.Input<pulumi.Input<inputs.GetWorkflowRollbackWorkflowRollbackTaskArgs>[]>;
    rollbackWorkflows?: pulumi.Input<pulumi.Input<inputs.GetWorkflowRollbackWorkflowRollbackWorkflowArgs>[]>;
    selectedTasks?: pulumi.Input<pulumi.Input<inputs.GetWorkflowRollbackWorkflowSelectedTaskArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetWorkflowRollbackWorkflowTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetWorkflowRollbackWorkflowVersionContextArgs>;
}
