// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIamSession(args?: GetIamSessionArgs, opts?: pulumi.InvokeOptions): Promise<GetIamSessionResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getIamSession:getIamSession", {
        "accountMoid": args.accountMoid,
        "accountPermissions": args.accountPermissions,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "clientIpAddress": args.clientIpAddress,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "endTime": args.endTime,
        "expiration": args.expiration,
        "failedLogins": args.failedLogins,
        "id": args.id,
        "idleTimeExpiration": args.idleTimeExpiration,
        "lastLoginClient": args.lastLoginClient,
        "lastLoginTime": args.lastLoginTime,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permission": args.permission,
        "permissionResources": args.permissionResources,
        "role": args.role,
        "sessionId": args.sessionId,
        "sharedScope": args.sharedScope,
        "status": args.status,
        "tags": args.tags,
        "user": args.user,
        "userIdOrEmail": args.userIdOrEmail,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIamSession.
 */
export interface GetIamSessionArgs {
    accountMoid?: string;
    accountPermissions?: inputs.GetIamSessionAccountPermission[];
    additionalProperties?: string;
    ancestors?: inputs.GetIamSessionAncestor[];
    classId?: string;
    clientIpAddress?: string;
    createTime?: string;
    domainGroupMoid?: string;
    endTime?: string;
    expiration?: string;
    failedLogins?: number;
    id?: string;
    idleTimeExpiration?: string;
    lastLoginClient?: string;
    lastLoginTime?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetIamSessionParent;
    permission?: inputs.GetIamSessionPermission;
    permissionResources?: inputs.GetIamSessionPermissionResource[];
    role?: string;
    sessionId?: string;
    sharedScope?: string;
    status?: string;
    tags?: inputs.GetIamSessionTag[];
    user?: inputs.GetIamSessionUser;
    userIdOrEmail?: string;
    versionContext?: inputs.GetIamSessionVersionContext;
}

/**
 * A collection of values returned by getIamSession.
 */
export interface GetIamSessionResult {
    readonly accountMoid?: string;
    readonly accountPermissions?: outputs.GetIamSessionAccountPermission[];
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetIamSessionAncestor[];
    readonly classId?: string;
    readonly clientIpAddress?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly endTime?: string;
    readonly expiration?: string;
    readonly failedLogins?: number;
    readonly id: string;
    readonly idleTimeExpiration?: string;
    readonly lastLoginClient?: string;
    readonly lastLoginTime?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetIamSessionParent;
    readonly permission?: outputs.GetIamSessionPermission;
    readonly permissionResources?: outputs.GetIamSessionPermissionResource[];
    readonly results: outputs.GetIamSessionResult[];
    readonly role?: string;
    readonly sessionId?: string;
    readonly sharedScope?: string;
    readonly status?: string;
    readonly tags?: outputs.GetIamSessionTag[];
    readonly user?: outputs.GetIamSessionUser;
    readonly userIdOrEmail?: string;
    readonly versionContext?: outputs.GetIamSessionVersionContext;
}
export function getIamSessionOutput(args?: GetIamSessionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIamSessionResult> {
    return pulumi.output(args).apply((a: any) => getIamSession(a, opts))
}

/**
 * A collection of arguments for invoking getIamSession.
 */
export interface GetIamSessionOutputArgs {
    accountMoid?: pulumi.Input<string>;
    accountPermissions?: pulumi.Input<pulumi.Input<inputs.GetIamSessionAccountPermissionArgs>[]>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetIamSessionAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    clientIpAddress?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    expiration?: pulumi.Input<string>;
    failedLogins?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    idleTimeExpiration?: pulumi.Input<string>;
    lastLoginClient?: pulumi.Input<string>;
    lastLoginTime?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetIamSessionParentArgs>;
    permission?: pulumi.Input<inputs.GetIamSessionPermissionArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetIamSessionPermissionResourceArgs>[]>;
    role?: pulumi.Input<string>;
    sessionId?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetIamSessionTagArgs>[]>;
    user?: pulumi.Input<inputs.GetIamSessionUserArgs>;
    userIdOrEmail?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetIamSessionVersionContextArgs>;
}
