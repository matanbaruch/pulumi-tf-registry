// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AaaRetentionPolicyArgs, AaaRetentionPolicyState } from "./aaaRetentionPolicy";
export type AaaRetentionPolicy = import("./aaaRetentionPolicy").AaaRetentionPolicy;
export const AaaRetentionPolicy: typeof import("./aaaRetentionPolicy").AaaRetentionPolicy = null as any;
utilities.lazyLoad(exports, ["AaaRetentionPolicy"], () => require("./aaaRetentionPolicy"));

export { AccessPolicyArgs, AccessPolicyState } from "./accessPolicy";
export type AccessPolicy = import("./accessPolicy").AccessPolicy;
export const AccessPolicy: typeof import("./accessPolicy").AccessPolicy = null as any;
utilities.lazyLoad(exports, ["AccessPolicy"], () => require("./accessPolicy"));

export { AdapterConfigPolicyArgs, AdapterConfigPolicyState } from "./adapterConfigPolicy";
export type AdapterConfigPolicy = import("./adapterConfigPolicy").AdapterConfigPolicy;
export const AdapterConfigPolicy: typeof import("./adapterConfigPolicy").AdapterConfigPolicy = null as any;
utilities.lazyLoad(exports, ["AdapterConfigPolicy"], () => require("./adapterConfigPolicy"));

export { ApplianceAutoRmaPolicyArgs, ApplianceAutoRmaPolicyState } from "./applianceAutoRmaPolicy";
export type ApplianceAutoRmaPolicy = import("./applianceAutoRmaPolicy").ApplianceAutoRmaPolicy;
export const ApplianceAutoRmaPolicy: typeof import("./applianceAutoRmaPolicy").ApplianceAutoRmaPolicy = null as any;
utilities.lazyLoad(exports, ["ApplianceAutoRmaPolicy"], () => require("./applianceAutoRmaPolicy"));

export { ApplianceBackupArgs, ApplianceBackupState } from "./applianceBackup";
export type ApplianceBackup = import("./applianceBackup").ApplianceBackup;
export const ApplianceBackup: typeof import("./applianceBackup").ApplianceBackup = null as any;
utilities.lazyLoad(exports, ["ApplianceBackup"], () => require("./applianceBackup"));

export { ApplianceBackupPolicyArgs, ApplianceBackupPolicyState } from "./applianceBackupPolicy";
export type ApplianceBackupPolicy = import("./applianceBackupPolicy").ApplianceBackupPolicy;
export const ApplianceBackupPolicy: typeof import("./applianceBackupPolicy").ApplianceBackupPolicy = null as any;
utilities.lazyLoad(exports, ["ApplianceBackupPolicy"], () => require("./applianceBackupPolicy"));

export { ApplianceClusterInfoArgs, ApplianceClusterInfoState } from "./applianceClusterInfo";
export type ApplianceClusterInfo = import("./applianceClusterInfo").ApplianceClusterInfo;
export const ApplianceClusterInfo: typeof import("./applianceClusterInfo").ApplianceClusterInfo = null as any;
utilities.lazyLoad(exports, ["ApplianceClusterInfo"], () => require("./applianceClusterInfo"));

export { ApplianceClusterReplaceNodeArgs, ApplianceClusterReplaceNodeState } from "./applianceClusterReplaceNode";
export type ApplianceClusterReplaceNode = import("./applianceClusterReplaceNode").ApplianceClusterReplaceNode;
export const ApplianceClusterReplaceNode: typeof import("./applianceClusterReplaceNode").ApplianceClusterReplaceNode = null as any;
utilities.lazyLoad(exports, ["ApplianceClusterReplaceNode"], () => require("./applianceClusterReplaceNode"));

export { ApplianceDataExportPolicyArgs, ApplianceDataExportPolicyState } from "./applianceDataExportPolicy";
export type ApplianceDataExportPolicy = import("./applianceDataExportPolicy").ApplianceDataExportPolicy;
export const ApplianceDataExportPolicy: typeof import("./applianceDataExportPolicy").ApplianceDataExportPolicy = null as any;
utilities.lazyLoad(exports, ["ApplianceDataExportPolicy"], () => require("./applianceDataExportPolicy"));

export { ApplianceDeviceClaimArgs, ApplianceDeviceClaimState } from "./applianceDeviceClaim";
export type ApplianceDeviceClaim = import("./applianceDeviceClaim").ApplianceDeviceClaim;
export const ApplianceDeviceClaim: typeof import("./applianceDeviceClaim").ApplianceDeviceClaim = null as any;
utilities.lazyLoad(exports, ["ApplianceDeviceClaim"], () => require("./applianceDeviceClaim"));

export { ApplianceDiagSettingArgs, ApplianceDiagSettingState } from "./applianceDiagSetting";
export type ApplianceDiagSetting = import("./applianceDiagSetting").ApplianceDiagSetting;
export const ApplianceDiagSetting: typeof import("./applianceDiagSetting").ApplianceDiagSetting = null as any;
utilities.lazyLoad(exports, ["ApplianceDiagSetting"], () => require("./applianceDiagSetting"));

export { ApplianceExternalSyslogSettingArgs, ApplianceExternalSyslogSettingState } from "./applianceExternalSyslogSetting";
export type ApplianceExternalSyslogSetting = import("./applianceExternalSyslogSetting").ApplianceExternalSyslogSetting;
export const ApplianceExternalSyslogSetting: typeof import("./applianceExternalSyslogSetting").ApplianceExternalSyslogSetting = null as any;
utilities.lazyLoad(exports, ["ApplianceExternalSyslogSetting"], () => require("./applianceExternalSyslogSetting"));

export { ApplianceRemoteFileImportArgs, ApplianceRemoteFileImportState } from "./applianceRemoteFileImport";
export type ApplianceRemoteFileImport = import("./applianceRemoteFileImport").ApplianceRemoteFileImport;
export const ApplianceRemoteFileImport: typeof import("./applianceRemoteFileImport").ApplianceRemoteFileImport = null as any;
utilities.lazyLoad(exports, ["ApplianceRemoteFileImport"], () => require("./applianceRemoteFileImport"));

export { ApplianceRestoreArgs, ApplianceRestoreState } from "./applianceRestore";
export type ApplianceRestore = import("./applianceRestore").ApplianceRestore;
export const ApplianceRestore: typeof import("./applianceRestore").ApplianceRestore = null as any;
utilities.lazyLoad(exports, ["ApplianceRestore"], () => require("./applianceRestore"));

export { AssetDeviceClaimArgs, AssetDeviceClaimState } from "./assetDeviceClaim";
export type AssetDeviceClaim = import("./assetDeviceClaim").AssetDeviceClaim;
export const AssetDeviceClaim: typeof import("./assetDeviceClaim").AssetDeviceClaim = null as any;
utilities.lazyLoad(exports, ["AssetDeviceClaim"], () => require("./assetDeviceClaim"));

export { AssetDeviceContractNotificationArgs, AssetDeviceContractNotificationState } from "./assetDeviceContractNotification";
export type AssetDeviceContractNotification = import("./assetDeviceContractNotification").AssetDeviceContractNotification;
export const AssetDeviceContractNotification: typeof import("./assetDeviceContractNotification").AssetDeviceContractNotification = null as any;
utilities.lazyLoad(exports, ["AssetDeviceContractNotification"], () => require("./assetDeviceContractNotification"));

export { AssetTargetArgs, AssetTargetState } from "./assetTarget";
export type AssetTarget = import("./assetTarget").AssetTarget;
export const AssetTarget: typeof import("./assetTarget").AssetTarget = null as any;
utilities.lazyLoad(exports, ["AssetTarget"], () => require("./assetTarget"));

export { BiosPolicyArgs, BiosPolicyState } from "./biosPolicy";
export type BiosPolicy = import("./biosPolicy").BiosPolicy;
export const BiosPolicy: typeof import("./biosPolicy").BiosPolicy = null as any;
utilities.lazyLoad(exports, ["BiosPolicy"], () => require("./biosPolicy"));

export { BootPrecisionPolicyArgs, BootPrecisionPolicyState } from "./bootPrecisionPolicy";
export type BootPrecisionPolicy = import("./bootPrecisionPolicy").BootPrecisionPolicy;
export const BootPrecisionPolicy: typeof import("./bootPrecisionPolicy").BootPrecisionPolicy = null as any;
utilities.lazyLoad(exports, ["BootPrecisionPolicy"], () => require("./bootPrecisionPolicy"));

export { BulkExportArgs, BulkExportState } from "./bulkExport";
export type BulkExport = import("./bulkExport").BulkExport;
export const BulkExport: typeof import("./bulkExport").BulkExport = null as any;
utilities.lazyLoad(exports, ["BulkExport"], () => require("./bulkExport"));

export { BulkMoClonerArgs, BulkMoClonerState } from "./bulkMoCloner";
export type BulkMoCloner = import("./bulkMoCloner").BulkMoCloner;
export const BulkMoCloner: typeof import("./bulkMoCloner").BulkMoCloner = null as any;
utilities.lazyLoad(exports, ["BulkMoCloner"], () => require("./bulkMoCloner"));

export { BulkMoDeepClonerArgs, BulkMoDeepClonerState } from "./bulkMoDeepCloner";
export type BulkMoDeepCloner = import("./bulkMoDeepCloner").BulkMoDeepCloner;
export const BulkMoDeepCloner: typeof import("./bulkMoDeepCloner").BulkMoDeepCloner = null as any;
utilities.lazyLoad(exports, ["BulkMoDeepCloner"], () => require("./bulkMoDeepCloner"));

export { BulkMoMergerArgs, BulkMoMergerState } from "./bulkMoMerger";
export type BulkMoMerger = import("./bulkMoMerger").BulkMoMerger;
export const BulkMoMerger: typeof import("./bulkMoMerger").BulkMoMerger = null as any;
utilities.lazyLoad(exports, ["BulkMoMerger"], () => require("./bulkMoMerger"));

export { BulkRequestArgs, BulkRequestState } from "./bulkRequest";
export type BulkRequest = import("./bulkRequest").BulkRequest;
export const BulkRequest: typeof import("./bulkRequest").BulkRequest = null as any;
utilities.lazyLoad(exports, ["BulkRequest"], () => require("./bulkRequest"));

export { CapabilityActionsMetaDataArgs, CapabilityActionsMetaDataState } from "./capabilityActionsMetaData";
export type CapabilityActionsMetaData = import("./capabilityActionsMetaData").CapabilityActionsMetaData;
export const CapabilityActionsMetaData: typeof import("./capabilityActionsMetaData").CapabilityActionsMetaData = null as any;
utilities.lazyLoad(exports, ["CapabilityActionsMetaData"], () => require("./capabilityActionsMetaData"));

export { CapabilityAdapterDeprecatedDefArgs, CapabilityAdapterDeprecatedDefState } from "./capabilityAdapterDeprecatedDef";
export type CapabilityAdapterDeprecatedDef = import("./capabilityAdapterDeprecatedDef").CapabilityAdapterDeprecatedDef;
export const CapabilityAdapterDeprecatedDef: typeof import("./capabilityAdapterDeprecatedDef").CapabilityAdapterDeprecatedDef = null as any;
utilities.lazyLoad(exports, ["CapabilityAdapterDeprecatedDef"], () => require("./capabilityAdapterDeprecatedDef"));

export { CapabilityAdapterUnitDescriptorArgs, CapabilityAdapterUnitDescriptorState } from "./capabilityAdapterUnitDescriptor";
export type CapabilityAdapterUnitDescriptor = import("./capabilityAdapterUnitDescriptor").CapabilityAdapterUnitDescriptor;
export const CapabilityAdapterUnitDescriptor: typeof import("./capabilityAdapterUnitDescriptor").CapabilityAdapterUnitDescriptor = null as any;
utilities.lazyLoad(exports, ["CapabilityAdapterUnitDescriptor"], () => require("./capabilityAdapterUnitDescriptor"));

export { CapabilityChassisDescriptorArgs, CapabilityChassisDescriptorState } from "./capabilityChassisDescriptor";
export type CapabilityChassisDescriptor = import("./capabilityChassisDescriptor").CapabilityChassisDescriptor;
export const CapabilityChassisDescriptor: typeof import("./capabilityChassisDescriptor").CapabilityChassisDescriptor = null as any;
utilities.lazyLoad(exports, ["CapabilityChassisDescriptor"], () => require("./capabilityChassisDescriptor"));

export { CapabilityChassisManufacturingDefArgs, CapabilityChassisManufacturingDefState } from "./capabilityChassisManufacturingDef";
export type CapabilityChassisManufacturingDef = import("./capabilityChassisManufacturingDef").CapabilityChassisManufacturingDef;
export const CapabilityChassisManufacturingDef: typeof import("./capabilityChassisManufacturingDef").CapabilityChassisManufacturingDef = null as any;
utilities.lazyLoad(exports, ["CapabilityChassisManufacturingDef"], () => require("./capabilityChassisManufacturingDef"));

export { CapabilityCimcFirmwareDescriptorArgs, CapabilityCimcFirmwareDescriptorState } from "./capabilityCimcFirmwareDescriptor";
export type CapabilityCimcFirmwareDescriptor = import("./capabilityCimcFirmwareDescriptor").CapabilityCimcFirmwareDescriptor;
export const CapabilityCimcFirmwareDescriptor: typeof import("./capabilityCimcFirmwareDescriptor").CapabilityCimcFirmwareDescriptor = null as any;
utilities.lazyLoad(exports, ["CapabilityCimcFirmwareDescriptor"], () => require("./capabilityCimcFirmwareDescriptor"));

export { CapabilityEquipmentPhysicalDefArgs, CapabilityEquipmentPhysicalDefState } from "./capabilityEquipmentPhysicalDef";
export type CapabilityEquipmentPhysicalDef = import("./capabilityEquipmentPhysicalDef").CapabilityEquipmentPhysicalDef;
export const CapabilityEquipmentPhysicalDef: typeof import("./capabilityEquipmentPhysicalDef").CapabilityEquipmentPhysicalDef = null as any;
utilities.lazyLoad(exports, ["CapabilityEquipmentPhysicalDef"], () => require("./capabilityEquipmentPhysicalDef"));

export { CapabilityEquipmentSlotArrayArgs, CapabilityEquipmentSlotArrayState } from "./capabilityEquipmentSlotArray";
export type CapabilityEquipmentSlotArray = import("./capabilityEquipmentSlotArray").CapabilityEquipmentSlotArray;
export const CapabilityEquipmentSlotArray: typeof import("./capabilityEquipmentSlotArray").CapabilityEquipmentSlotArray = null as any;
utilities.lazyLoad(exports, ["CapabilityEquipmentSlotArray"], () => require("./capabilityEquipmentSlotArray"));

export { CapabilityFanModuleDescriptorArgs, CapabilityFanModuleDescriptorState } from "./capabilityFanModuleDescriptor";
export type CapabilityFanModuleDescriptor = import("./capabilityFanModuleDescriptor").CapabilityFanModuleDescriptor;
export const CapabilityFanModuleDescriptor: typeof import("./capabilityFanModuleDescriptor").CapabilityFanModuleDescriptor = null as any;
utilities.lazyLoad(exports, ["CapabilityFanModuleDescriptor"], () => require("./capabilityFanModuleDescriptor"));

export { CapabilityFanModuleManufacturingDefArgs, CapabilityFanModuleManufacturingDefState } from "./capabilityFanModuleManufacturingDef";
export type CapabilityFanModuleManufacturingDef = import("./capabilityFanModuleManufacturingDef").CapabilityFanModuleManufacturingDef;
export const CapabilityFanModuleManufacturingDef: typeof import("./capabilityFanModuleManufacturingDef").CapabilityFanModuleManufacturingDef = null as any;
utilities.lazyLoad(exports, ["CapabilityFanModuleManufacturingDef"], () => require("./capabilityFanModuleManufacturingDef"));

export { CapabilityFexCapabilityDefArgs, CapabilityFexCapabilityDefState } from "./capabilityFexCapabilityDef";
export type CapabilityFexCapabilityDef = import("./capabilityFexCapabilityDef").CapabilityFexCapabilityDef;
export const CapabilityFexCapabilityDef: typeof import("./capabilityFexCapabilityDef").CapabilityFexCapabilityDef = null as any;
utilities.lazyLoad(exports, ["CapabilityFexCapabilityDef"], () => require("./capabilityFexCapabilityDef"));

export { CapabilityFexDescriptorArgs, CapabilityFexDescriptorState } from "./capabilityFexDescriptor";
export type CapabilityFexDescriptor = import("./capabilityFexDescriptor").CapabilityFexDescriptor;
export const CapabilityFexDescriptor: typeof import("./capabilityFexDescriptor").CapabilityFexDescriptor = null as any;
utilities.lazyLoad(exports, ["CapabilityFexDescriptor"], () => require("./capabilityFexDescriptor"));

export { CapabilityFexManufacturingDefArgs, CapabilityFexManufacturingDefState } from "./capabilityFexManufacturingDef";
export type CapabilityFexManufacturingDef = import("./capabilityFexManufacturingDef").CapabilityFexManufacturingDef;
export const CapabilityFexManufacturingDef: typeof import("./capabilityFexManufacturingDef").CapabilityFexManufacturingDef = null as any;
utilities.lazyLoad(exports, ["CapabilityFexManufacturingDef"], () => require("./capabilityFexManufacturingDef"));

export { CapabilityIoCardCapabilityDefArgs, CapabilityIoCardCapabilityDefState } from "./capabilityIoCardCapabilityDef";
export type CapabilityIoCardCapabilityDef = import("./capabilityIoCardCapabilityDef").CapabilityIoCardCapabilityDef;
export const CapabilityIoCardCapabilityDef: typeof import("./capabilityIoCardCapabilityDef").CapabilityIoCardCapabilityDef = null as any;
utilities.lazyLoad(exports, ["CapabilityIoCardCapabilityDef"], () => require("./capabilityIoCardCapabilityDef"));

export { CapabilityIoCardDescriptorArgs, CapabilityIoCardDescriptorState } from "./capabilityIoCardDescriptor";
export type CapabilityIoCardDescriptor = import("./capabilityIoCardDescriptor").CapabilityIoCardDescriptor;
export const CapabilityIoCardDescriptor: typeof import("./capabilityIoCardDescriptor").CapabilityIoCardDescriptor = null as any;
utilities.lazyLoad(exports, ["CapabilityIoCardDescriptor"], () => require("./capabilityIoCardDescriptor"));

export { CapabilityIoCardManufacturingDefArgs, CapabilityIoCardManufacturingDefState } from "./capabilityIoCardManufacturingDef";
export type CapabilityIoCardManufacturingDef = import("./capabilityIoCardManufacturingDef").CapabilityIoCardManufacturingDef;
export const CapabilityIoCardManufacturingDef: typeof import("./capabilityIoCardManufacturingDef").CapabilityIoCardManufacturingDef = null as any;
utilities.lazyLoad(exports, ["CapabilityIoCardManufacturingDef"], () => require("./capabilityIoCardManufacturingDef"));

export { CapabilityPortGroupAggregationDefArgs, CapabilityPortGroupAggregationDefState } from "./capabilityPortGroupAggregationDef";
export type CapabilityPortGroupAggregationDef = import("./capabilityPortGroupAggregationDef").CapabilityPortGroupAggregationDef;
export const CapabilityPortGroupAggregationDef: typeof import("./capabilityPortGroupAggregationDef").CapabilityPortGroupAggregationDef = null as any;
utilities.lazyLoad(exports, ["CapabilityPortGroupAggregationDef"], () => require("./capabilityPortGroupAggregationDef"));

export { CapabilityPsuDescriptorArgs, CapabilityPsuDescriptorState } from "./capabilityPsuDescriptor";
export type CapabilityPsuDescriptor = import("./capabilityPsuDescriptor").CapabilityPsuDescriptor;
export const CapabilityPsuDescriptor: typeof import("./capabilityPsuDescriptor").CapabilityPsuDescriptor = null as any;
utilities.lazyLoad(exports, ["CapabilityPsuDescriptor"], () => require("./capabilityPsuDescriptor"));

export { CapabilityPsuManufacturingDefArgs, CapabilityPsuManufacturingDefState } from "./capabilityPsuManufacturingDef";
export type CapabilityPsuManufacturingDef = import("./capabilityPsuManufacturingDef").CapabilityPsuManufacturingDef;
export const CapabilityPsuManufacturingDef: typeof import("./capabilityPsuManufacturingDef").CapabilityPsuManufacturingDef = null as any;
utilities.lazyLoad(exports, ["CapabilityPsuManufacturingDef"], () => require("./capabilityPsuManufacturingDef"));

export { CapabilityServerDescriptorArgs, CapabilityServerDescriptorState } from "./capabilityServerDescriptor";
export type CapabilityServerDescriptor = import("./capabilityServerDescriptor").CapabilityServerDescriptor;
export const CapabilityServerDescriptor: typeof import("./capabilityServerDescriptor").CapabilityServerDescriptor = null as any;
utilities.lazyLoad(exports, ["CapabilityServerDescriptor"], () => require("./capabilityServerDescriptor"));

export { CapabilityServerModelsCapabilityDefArgs, CapabilityServerModelsCapabilityDefState } from "./capabilityServerModelsCapabilityDef";
export type CapabilityServerModelsCapabilityDef = import("./capabilityServerModelsCapabilityDef").CapabilityServerModelsCapabilityDef;
export const CapabilityServerModelsCapabilityDef: typeof import("./capabilityServerModelsCapabilityDef").CapabilityServerModelsCapabilityDef = null as any;
utilities.lazyLoad(exports, ["CapabilityServerModelsCapabilityDef"], () => require("./capabilityServerModelsCapabilityDef"));

export { CapabilityServerSchemaDescriptorArgs, CapabilityServerSchemaDescriptorState } from "./capabilityServerSchemaDescriptor";
export type CapabilityServerSchemaDescriptor = import("./capabilityServerSchemaDescriptor").CapabilityServerSchemaDescriptor;
export const CapabilityServerSchemaDescriptor: typeof import("./capabilityServerSchemaDescriptor").CapabilityServerSchemaDescriptor = null as any;
utilities.lazyLoad(exports, ["CapabilityServerSchemaDescriptor"], () => require("./capabilityServerSchemaDescriptor"));

export { CapabilitySiocModuleCapabilityDefArgs, CapabilitySiocModuleCapabilityDefState } from "./capabilitySiocModuleCapabilityDef";
export type CapabilitySiocModuleCapabilityDef = import("./capabilitySiocModuleCapabilityDef").CapabilitySiocModuleCapabilityDef;
export const CapabilitySiocModuleCapabilityDef: typeof import("./capabilitySiocModuleCapabilityDef").CapabilitySiocModuleCapabilityDef = null as any;
utilities.lazyLoad(exports, ["CapabilitySiocModuleCapabilityDef"], () => require("./capabilitySiocModuleCapabilityDef"));

export { CapabilitySiocModuleDescriptorArgs, CapabilitySiocModuleDescriptorState } from "./capabilitySiocModuleDescriptor";
export type CapabilitySiocModuleDescriptor = import("./capabilitySiocModuleDescriptor").CapabilitySiocModuleDescriptor;
export const CapabilitySiocModuleDescriptor: typeof import("./capabilitySiocModuleDescriptor").CapabilitySiocModuleDescriptor = null as any;
utilities.lazyLoad(exports, ["CapabilitySiocModuleDescriptor"], () => require("./capabilitySiocModuleDescriptor"));

export { CapabilitySiocModuleManufacturingDefArgs, CapabilitySiocModuleManufacturingDefState } from "./capabilitySiocModuleManufacturingDef";
export type CapabilitySiocModuleManufacturingDef = import("./capabilitySiocModuleManufacturingDef").CapabilitySiocModuleManufacturingDef;
export const CapabilitySiocModuleManufacturingDef: typeof import("./capabilitySiocModuleManufacturingDef").CapabilitySiocModuleManufacturingDef = null as any;
utilities.lazyLoad(exports, ["CapabilitySiocModuleManufacturingDef"], () => require("./capabilitySiocModuleManufacturingDef"));

export { CapabilitySwitchCapabilityArgs, CapabilitySwitchCapabilityState } from "./capabilitySwitchCapability";
export type CapabilitySwitchCapability = import("./capabilitySwitchCapability").CapabilitySwitchCapability;
export const CapabilitySwitchCapability: typeof import("./capabilitySwitchCapability").CapabilitySwitchCapability = null as any;
utilities.lazyLoad(exports, ["CapabilitySwitchCapability"], () => require("./capabilitySwitchCapability"));

export { CapabilitySwitchDescriptorArgs, CapabilitySwitchDescriptorState } from "./capabilitySwitchDescriptor";
export type CapabilitySwitchDescriptor = import("./capabilitySwitchDescriptor").CapabilitySwitchDescriptor;
export const CapabilitySwitchDescriptor: typeof import("./capabilitySwitchDescriptor").CapabilitySwitchDescriptor = null as any;
utilities.lazyLoad(exports, ["CapabilitySwitchDescriptor"], () => require("./capabilitySwitchDescriptor"));

export { CapabilitySwitchEquipmentInfoArgs, CapabilitySwitchEquipmentInfoState } from "./capabilitySwitchEquipmentInfo";
export type CapabilitySwitchEquipmentInfo = import("./capabilitySwitchEquipmentInfo").CapabilitySwitchEquipmentInfo;
export const CapabilitySwitchEquipmentInfo: typeof import("./capabilitySwitchEquipmentInfo").CapabilitySwitchEquipmentInfo = null as any;
utilities.lazyLoad(exports, ["CapabilitySwitchEquipmentInfo"], () => require("./capabilitySwitchEquipmentInfo"));

export { CapabilitySwitchManufacturingDefArgs, CapabilitySwitchManufacturingDefState } from "./capabilitySwitchManufacturingDef";
export type CapabilitySwitchManufacturingDef = import("./capabilitySwitchManufacturingDef").CapabilitySwitchManufacturingDef;
export const CapabilitySwitchManufacturingDef: typeof import("./capabilitySwitchManufacturingDef").CapabilitySwitchManufacturingDef = null as any;
utilities.lazyLoad(exports, ["CapabilitySwitchManufacturingDef"], () => require("./capabilitySwitchManufacturingDef"));

export { CapabilityVicDescriptorArgs, CapabilityVicDescriptorState } from "./capabilityVicDescriptor";
export type CapabilityVicDescriptor = import("./capabilityVicDescriptor").CapabilityVicDescriptor;
export const CapabilityVicDescriptor: typeof import("./capabilityVicDescriptor").CapabilityVicDescriptor = null as any;
utilities.lazyLoad(exports, ["CapabilityVicDescriptor"], () => require("./capabilityVicDescriptor"));

export { CertificatemanagementPolicyArgs, CertificatemanagementPolicyState } from "./certificatemanagementPolicy";
export type CertificatemanagementPolicy = import("./certificatemanagementPolicy").CertificatemanagementPolicy;
export const CertificatemanagementPolicy: typeof import("./certificatemanagementPolicy").CertificatemanagementPolicy = null as any;
utilities.lazyLoad(exports, ["CertificatemanagementPolicy"], () => require("./certificatemanagementPolicy"));

export { ChassisConfigImportArgs, ChassisConfigImportState } from "./chassisConfigImport";
export type ChassisConfigImport = import("./chassisConfigImport").ChassisConfigImport;
export const ChassisConfigImport: typeof import("./chassisConfigImport").ChassisConfigImport = null as any;
utilities.lazyLoad(exports, ["ChassisConfigImport"], () => require("./chassisConfigImport"));

export { ChassisProfileArgs, ChassisProfileState } from "./chassisProfile";
export type ChassisProfile = import("./chassisProfile").ChassisProfile;
export const ChassisProfile: typeof import("./chassisProfile").ChassisProfile = null as any;
utilities.lazyLoad(exports, ["ChassisProfile"], () => require("./chassisProfile"));

export { ChassisProfileTemplateArgs, ChassisProfileTemplateState } from "./chassisProfileTemplate";
export type ChassisProfileTemplate = import("./chassisProfileTemplate").ChassisProfileTemplate;
export const ChassisProfileTemplate: typeof import("./chassisProfileTemplate").ChassisProfileTemplate = null as any;
utilities.lazyLoad(exports, ["ChassisProfileTemplate"], () => require("./chassisProfileTemplate"));

export { CloudCollectInventoryArgs, CloudCollectInventoryState } from "./cloudCollectInventory";
export type CloudCollectInventory = import("./cloudCollectInventory").CloudCollectInventory;
export const CloudCollectInventory: typeof import("./cloudCollectInventory").CloudCollectInventory = null as any;
utilities.lazyLoad(exports, ["CloudCollectInventory"], () => require("./cloudCollectInventory"));

export { CommHttpProxyPolicyArgs, CommHttpProxyPolicyState } from "./commHttpProxyPolicy";
export type CommHttpProxyPolicy = import("./commHttpProxyPolicy").CommHttpProxyPolicy;
export const CommHttpProxyPolicy: typeof import("./commHttpProxyPolicy").CommHttpProxyPolicy = null as any;
utilities.lazyLoad(exports, ["CommHttpProxyPolicy"], () => require("./commHttpProxyPolicy"));

export { ComputeHostUtilityOperationArgs, ComputeHostUtilityOperationState } from "./computeHostUtilityOperation";
export type ComputeHostUtilityOperation = import("./computeHostUtilityOperation").ComputeHostUtilityOperation;
export const ComputeHostUtilityOperation: typeof import("./computeHostUtilityOperation").ComputeHostUtilityOperation = null as any;
utilities.lazyLoad(exports, ["ComputeHostUtilityOperation"], () => require("./computeHostUtilityOperation"));

export { CondAlarmSuppressionArgs, CondAlarmSuppressionState } from "./condAlarmSuppression";
export type CondAlarmSuppression = import("./condAlarmSuppression").CondAlarmSuppression;
export const CondAlarmSuppression: typeof import("./condAlarmSuppression").CondAlarmSuppression = null as any;
utilities.lazyLoad(exports, ["CondAlarmSuppression"], () => require("./condAlarmSuppression"));

export { ConnectorpackConnectorPackUpgradeArgs, ConnectorpackConnectorPackUpgradeState } from "./connectorpackConnectorPackUpgrade";
export type ConnectorpackConnectorPackUpgrade = import("./connectorpackConnectorPackUpgrade").ConnectorpackConnectorPackUpgrade;
export const ConnectorpackConnectorPackUpgrade: typeof import("./connectorpackConnectorPackUpgrade").ConnectorpackConnectorPackUpgrade = null as any;
utilities.lazyLoad(exports, ["ConnectorpackConnectorPackUpgrade"], () => require("./connectorpackConnectorPackUpgrade"));

export { CrdCustomResourceArgs, CrdCustomResourceState } from "./crdCustomResource";
export type CrdCustomResource = import("./crdCustomResource").CrdCustomResource;
export const CrdCustomResource: typeof import("./crdCustomResource").CrdCustomResource = null as any;
utilities.lazyLoad(exports, ["CrdCustomResource"], () => require("./crdCustomResource"));

export { DeviceconnectorPolicyArgs, DeviceconnectorPolicyState } from "./deviceconnectorPolicy";
export type DeviceconnectorPolicy = import("./deviceconnectorPolicy").DeviceconnectorPolicy;
export const DeviceconnectorPolicy: typeof import("./deviceconnectorPolicy").DeviceconnectorPolicy = null as any;
utilities.lazyLoad(exports, ["DeviceconnectorPolicy"], () => require("./deviceconnectorPolicy"));

export { ExternalsiteAuthorizationArgs, ExternalsiteAuthorizationState } from "./externalsiteAuthorization";
export type ExternalsiteAuthorization = import("./externalsiteAuthorization").ExternalsiteAuthorization;
export const ExternalsiteAuthorization: typeof import("./externalsiteAuthorization").ExternalsiteAuthorization = null as any;
utilities.lazyLoad(exports, ["ExternalsiteAuthorization"], () => require("./externalsiteAuthorization"));

export { FabricAppliancePcRoleArgs, FabricAppliancePcRoleState } from "./fabricAppliancePcRole";
export type FabricAppliancePcRole = import("./fabricAppliancePcRole").FabricAppliancePcRole;
export const FabricAppliancePcRole: typeof import("./fabricAppliancePcRole").FabricAppliancePcRole = null as any;
utilities.lazyLoad(exports, ["FabricAppliancePcRole"], () => require("./fabricAppliancePcRole"));

export { FabricApplianceRoleArgs, FabricApplianceRoleState } from "./fabricApplianceRole";
export type FabricApplianceRole = import("./fabricApplianceRole").FabricApplianceRole;
export const FabricApplianceRole: typeof import("./fabricApplianceRole").FabricApplianceRole = null as any;
utilities.lazyLoad(exports, ["FabricApplianceRole"], () => require("./fabricApplianceRole"));

export { FabricEstimateImpactArgs, FabricEstimateImpactState } from "./fabricEstimateImpact";
export type FabricEstimateImpact = import("./fabricEstimateImpact").FabricEstimateImpact;
export const FabricEstimateImpact: typeof import("./fabricEstimateImpact").FabricEstimateImpact = null as any;
utilities.lazyLoad(exports, ["FabricEstimateImpact"], () => require("./fabricEstimateImpact"));

export { FabricEthNetworkControlPolicyArgs, FabricEthNetworkControlPolicyState } from "./fabricEthNetworkControlPolicy";
export type FabricEthNetworkControlPolicy = import("./fabricEthNetworkControlPolicy").FabricEthNetworkControlPolicy;
export const FabricEthNetworkControlPolicy: typeof import("./fabricEthNetworkControlPolicy").FabricEthNetworkControlPolicy = null as any;
utilities.lazyLoad(exports, ["FabricEthNetworkControlPolicy"], () => require("./fabricEthNetworkControlPolicy"));

export { FabricEthNetworkGroupPolicyArgs, FabricEthNetworkGroupPolicyState } from "./fabricEthNetworkGroupPolicy";
export type FabricEthNetworkGroupPolicy = import("./fabricEthNetworkGroupPolicy").FabricEthNetworkGroupPolicy;
export const FabricEthNetworkGroupPolicy: typeof import("./fabricEthNetworkGroupPolicy").FabricEthNetworkGroupPolicy = null as any;
utilities.lazyLoad(exports, ["FabricEthNetworkGroupPolicy"], () => require("./fabricEthNetworkGroupPolicy"));

export { FabricEthNetworkPolicyArgs, FabricEthNetworkPolicyState } from "./fabricEthNetworkPolicy";
export type FabricEthNetworkPolicy = import("./fabricEthNetworkPolicy").FabricEthNetworkPolicy;
export const FabricEthNetworkPolicy: typeof import("./fabricEthNetworkPolicy").FabricEthNetworkPolicy = null as any;
utilities.lazyLoad(exports, ["FabricEthNetworkPolicy"], () => require("./fabricEthNetworkPolicy"));

export { FabricFcNetworkPolicyArgs, FabricFcNetworkPolicyState } from "./fabricFcNetworkPolicy";
export type FabricFcNetworkPolicy = import("./fabricFcNetworkPolicy").FabricFcNetworkPolicy;
export const FabricFcNetworkPolicy: typeof import("./fabricFcNetworkPolicy").FabricFcNetworkPolicy = null as any;
utilities.lazyLoad(exports, ["FabricFcNetworkPolicy"], () => require("./fabricFcNetworkPolicy"));

export { FabricFcStorageRoleArgs, FabricFcStorageRoleState } from "./fabricFcStorageRole";
export type FabricFcStorageRole = import("./fabricFcStorageRole").FabricFcStorageRole;
export const FabricFcStorageRole: typeof import("./fabricFcStorageRole").FabricFcStorageRole = null as any;
utilities.lazyLoad(exports, ["FabricFcStorageRole"], () => require("./fabricFcStorageRole"));

export { FabricFcUplinkPcRoleArgs, FabricFcUplinkPcRoleState } from "./fabricFcUplinkPcRole";
export type FabricFcUplinkPcRole = import("./fabricFcUplinkPcRole").FabricFcUplinkPcRole;
export const FabricFcUplinkPcRole: typeof import("./fabricFcUplinkPcRole").FabricFcUplinkPcRole = null as any;
utilities.lazyLoad(exports, ["FabricFcUplinkPcRole"], () => require("./fabricFcUplinkPcRole"));

export { FabricFcUplinkRoleArgs, FabricFcUplinkRoleState } from "./fabricFcUplinkRole";
export type FabricFcUplinkRole = import("./fabricFcUplinkRole").FabricFcUplinkRole;
export const FabricFcUplinkRole: typeof import("./fabricFcUplinkRole").FabricFcUplinkRole = null as any;
utilities.lazyLoad(exports, ["FabricFcUplinkRole"], () => require("./fabricFcUplinkRole"));

export { FabricFcZonePolicyArgs, FabricFcZonePolicyState } from "./fabricFcZonePolicy";
export type FabricFcZonePolicy = import("./fabricFcZonePolicy").FabricFcZonePolicy;
export const FabricFcZonePolicy: typeof import("./fabricFcZonePolicy").FabricFcZonePolicy = null as any;
utilities.lazyLoad(exports, ["FabricFcZonePolicy"], () => require("./fabricFcZonePolicy"));

export { FabricFcoeUplinkPcRoleArgs, FabricFcoeUplinkPcRoleState } from "./fabricFcoeUplinkPcRole";
export type FabricFcoeUplinkPcRole = import("./fabricFcoeUplinkPcRole").FabricFcoeUplinkPcRole;
export const FabricFcoeUplinkPcRole: typeof import("./fabricFcoeUplinkPcRole").FabricFcoeUplinkPcRole = null as any;
utilities.lazyLoad(exports, ["FabricFcoeUplinkPcRole"], () => require("./fabricFcoeUplinkPcRole"));

export { FabricFcoeUplinkRoleArgs, FabricFcoeUplinkRoleState } from "./fabricFcoeUplinkRole";
export type FabricFcoeUplinkRole = import("./fabricFcoeUplinkRole").FabricFcoeUplinkRole;
export const FabricFcoeUplinkRole: typeof import("./fabricFcoeUplinkRole").FabricFcoeUplinkRole = null as any;
utilities.lazyLoad(exports, ["FabricFcoeUplinkRole"], () => require("./fabricFcoeUplinkRole"));

export { FabricFlowControlPolicyArgs, FabricFlowControlPolicyState } from "./fabricFlowControlPolicy";
export type FabricFlowControlPolicy = import("./fabricFlowControlPolicy").FabricFlowControlPolicy;
export const FabricFlowControlPolicy: typeof import("./fabricFlowControlPolicy").FabricFlowControlPolicy = null as any;
utilities.lazyLoad(exports, ["FabricFlowControlPolicy"], () => require("./fabricFlowControlPolicy"));

export { FabricLanPinGroupArgs, FabricLanPinGroupState } from "./fabricLanPinGroup";
export type FabricLanPinGroup = import("./fabricLanPinGroup").FabricLanPinGroup;
export const FabricLanPinGroup: typeof import("./fabricLanPinGroup").FabricLanPinGroup = null as any;
utilities.lazyLoad(exports, ["FabricLanPinGroup"], () => require("./fabricLanPinGroup"));

export { FabricLinkAggregationPolicyArgs, FabricLinkAggregationPolicyState } from "./fabricLinkAggregationPolicy";
export type FabricLinkAggregationPolicy = import("./fabricLinkAggregationPolicy").FabricLinkAggregationPolicy;
export const FabricLinkAggregationPolicy: typeof import("./fabricLinkAggregationPolicy").FabricLinkAggregationPolicy = null as any;
utilities.lazyLoad(exports, ["FabricLinkAggregationPolicy"], () => require("./fabricLinkAggregationPolicy"));

export { FabricLinkControlPolicyArgs, FabricLinkControlPolicyState } from "./fabricLinkControlPolicy";
export type FabricLinkControlPolicy = import("./fabricLinkControlPolicy").FabricLinkControlPolicy;
export const FabricLinkControlPolicy: typeof import("./fabricLinkControlPolicy").FabricLinkControlPolicy = null as any;
utilities.lazyLoad(exports, ["FabricLinkControlPolicy"], () => require("./fabricLinkControlPolicy"));

export { FabricMulticastPolicyArgs, FabricMulticastPolicyState } from "./fabricMulticastPolicy";
export type FabricMulticastPolicy = import("./fabricMulticastPolicy").FabricMulticastPolicy;
export const FabricMulticastPolicy: typeof import("./fabricMulticastPolicy").FabricMulticastPolicy = null as any;
utilities.lazyLoad(exports, ["FabricMulticastPolicy"], () => require("./fabricMulticastPolicy"));

export { FabricPcOperationArgs, FabricPcOperationState } from "./fabricPcOperation";
export type FabricPcOperation = import("./fabricPcOperation").FabricPcOperation;
export const FabricPcOperation: typeof import("./fabricPcOperation").FabricPcOperation = null as any;
utilities.lazyLoad(exports, ["FabricPcOperation"], () => require("./fabricPcOperation"));

export { FabricPortModeArgs, FabricPortModeState } from "./fabricPortMode";
export type FabricPortMode = import("./fabricPortMode").FabricPortMode;
export const FabricPortMode: typeof import("./fabricPortMode").FabricPortMode = null as any;
utilities.lazyLoad(exports, ["FabricPortMode"], () => require("./fabricPortMode"));

export { FabricPortOperationArgs, FabricPortOperationState } from "./fabricPortOperation";
export type FabricPortOperation = import("./fabricPortOperation").FabricPortOperation;
export const FabricPortOperation: typeof import("./fabricPortOperation").FabricPortOperation = null as any;
utilities.lazyLoad(exports, ["FabricPortOperation"], () => require("./fabricPortOperation"));

export { FabricPortPolicyArgs, FabricPortPolicyState } from "./fabricPortPolicy";
export type FabricPortPolicy = import("./fabricPortPolicy").FabricPortPolicy;
export const FabricPortPolicy: typeof import("./fabricPortPolicy").FabricPortPolicy = null as any;
utilities.lazyLoad(exports, ["FabricPortPolicy"], () => require("./fabricPortPolicy"));

export { FabricSanPinGroupArgs, FabricSanPinGroupState } from "./fabricSanPinGroup";
export type FabricSanPinGroup = import("./fabricSanPinGroup").FabricSanPinGroup;
export const FabricSanPinGroup: typeof import("./fabricSanPinGroup").FabricSanPinGroup = null as any;
utilities.lazyLoad(exports, ["FabricSanPinGroup"], () => require("./fabricSanPinGroup"));

export { FabricServerRoleArgs, FabricServerRoleState } from "./fabricServerRole";
export type FabricServerRole = import("./fabricServerRole").FabricServerRole;
export const FabricServerRole: typeof import("./fabricServerRole").FabricServerRole = null as any;
utilities.lazyLoad(exports, ["FabricServerRole"], () => require("./fabricServerRole"));

export { FabricSpanDestEthPortArgs, FabricSpanDestEthPortState } from "./fabricSpanDestEthPort";
export type FabricSpanDestEthPort = import("./fabricSpanDestEthPort").FabricSpanDestEthPort;
export const FabricSpanDestEthPort: typeof import("./fabricSpanDestEthPort").FabricSpanDestEthPort = null as any;
utilities.lazyLoad(exports, ["FabricSpanDestEthPort"], () => require("./fabricSpanDestEthPort"));

export { FabricSpanSessionArgs, FabricSpanSessionState } from "./fabricSpanSession";
export type FabricSpanSession = import("./fabricSpanSession").FabricSpanSession;
export const FabricSpanSession: typeof import("./fabricSpanSession").FabricSpanSession = null as any;
utilities.lazyLoad(exports, ["FabricSpanSession"], () => require("./fabricSpanSession"));

export { FabricSpanSourceEthPortArgs, FabricSpanSourceEthPortState } from "./fabricSpanSourceEthPort";
export type FabricSpanSourceEthPort = import("./fabricSpanSourceEthPort").FabricSpanSourceEthPort;
export const FabricSpanSourceEthPort: typeof import("./fabricSpanSourceEthPort").FabricSpanSourceEthPort = null as any;
utilities.lazyLoad(exports, ["FabricSpanSourceEthPort"], () => require("./fabricSpanSourceEthPort"));

export { FabricSpanSourceEthPortChannelArgs, FabricSpanSourceEthPortChannelState } from "./fabricSpanSourceEthPortChannel";
export type FabricSpanSourceEthPortChannel = import("./fabricSpanSourceEthPortChannel").FabricSpanSourceEthPortChannel;
export const FabricSpanSourceEthPortChannel: typeof import("./fabricSpanSourceEthPortChannel").FabricSpanSourceEthPortChannel = null as any;
utilities.lazyLoad(exports, ["FabricSpanSourceEthPortChannel"], () => require("./fabricSpanSourceEthPortChannel"));

export { FabricSpanSourceVlanArgs, FabricSpanSourceVlanState } from "./fabricSpanSourceVlan";
export type FabricSpanSourceVlan = import("./fabricSpanSourceVlan").FabricSpanSourceVlan;
export const FabricSpanSourceVlan: typeof import("./fabricSpanSourceVlan").FabricSpanSourceVlan = null as any;
utilities.lazyLoad(exports, ["FabricSpanSourceVlan"], () => require("./fabricSpanSourceVlan"));

export { FabricSpanSourceVnicEthIfArgs, FabricSpanSourceVnicEthIfState } from "./fabricSpanSourceVnicEthIf";
export type FabricSpanSourceVnicEthIf = import("./fabricSpanSourceVnicEthIf").FabricSpanSourceVnicEthIf;
export const FabricSpanSourceVnicEthIf: typeof import("./fabricSpanSourceVnicEthIf").FabricSpanSourceVnicEthIf = null as any;
utilities.lazyLoad(exports, ["FabricSpanSourceVnicEthIf"], () => require("./fabricSpanSourceVnicEthIf"));

export { FabricSwitchClusterProfileArgs, FabricSwitchClusterProfileState } from "./fabricSwitchClusterProfile";
export type FabricSwitchClusterProfile = import("./fabricSwitchClusterProfile").FabricSwitchClusterProfile;
export const FabricSwitchClusterProfile: typeof import("./fabricSwitchClusterProfile").FabricSwitchClusterProfile = null as any;
utilities.lazyLoad(exports, ["FabricSwitchClusterProfile"], () => require("./fabricSwitchClusterProfile"));

export { FabricSwitchClusterProfileTemplateArgs, FabricSwitchClusterProfileTemplateState } from "./fabricSwitchClusterProfileTemplate";
export type FabricSwitchClusterProfileTemplate = import("./fabricSwitchClusterProfileTemplate").FabricSwitchClusterProfileTemplate;
export const FabricSwitchClusterProfileTemplate: typeof import("./fabricSwitchClusterProfileTemplate").FabricSwitchClusterProfileTemplate = null as any;
utilities.lazyLoad(exports, ["FabricSwitchClusterProfileTemplate"], () => require("./fabricSwitchClusterProfileTemplate"));

export { FabricSwitchControlPolicyArgs, FabricSwitchControlPolicyState } from "./fabricSwitchControlPolicy";
export type FabricSwitchControlPolicy = import("./fabricSwitchControlPolicy").FabricSwitchControlPolicy;
export const FabricSwitchControlPolicy: typeof import("./fabricSwitchControlPolicy").FabricSwitchControlPolicy = null as any;
utilities.lazyLoad(exports, ["FabricSwitchControlPolicy"], () => require("./fabricSwitchControlPolicy"));

export { FabricSwitchProfileArgs, FabricSwitchProfileState } from "./fabricSwitchProfile";
export type FabricSwitchProfile = import("./fabricSwitchProfile").FabricSwitchProfile;
export const FabricSwitchProfile: typeof import("./fabricSwitchProfile").FabricSwitchProfile = null as any;
utilities.lazyLoad(exports, ["FabricSwitchProfile"], () => require("./fabricSwitchProfile"));

export { FabricSwitchProfileTemplateArgs, FabricSwitchProfileTemplateState } from "./fabricSwitchProfileTemplate";
export type FabricSwitchProfileTemplate = import("./fabricSwitchProfileTemplate").FabricSwitchProfileTemplate;
export const FabricSwitchProfileTemplate: typeof import("./fabricSwitchProfileTemplate").FabricSwitchProfileTemplate = null as any;
utilities.lazyLoad(exports, ["FabricSwitchProfileTemplate"], () => require("./fabricSwitchProfileTemplate"));

export { FabricSystemQosPolicyArgs, FabricSystemQosPolicyState } from "./fabricSystemQosPolicy";
export type FabricSystemQosPolicy = import("./fabricSystemQosPolicy").FabricSystemQosPolicy;
export const FabricSystemQosPolicy: typeof import("./fabricSystemQosPolicy").FabricSystemQosPolicy = null as any;
utilities.lazyLoad(exports, ["FabricSystemQosPolicy"], () => require("./fabricSystemQosPolicy"));

export { FabricUplinkPcRoleArgs, FabricUplinkPcRoleState } from "./fabricUplinkPcRole";
export type FabricUplinkPcRole = import("./fabricUplinkPcRole").FabricUplinkPcRole;
export const FabricUplinkPcRole: typeof import("./fabricUplinkPcRole").FabricUplinkPcRole = null as any;
utilities.lazyLoad(exports, ["FabricUplinkPcRole"], () => require("./fabricUplinkPcRole"));

export { FabricUplinkRoleArgs, FabricUplinkRoleState } from "./fabricUplinkRole";
export type FabricUplinkRole = import("./fabricUplinkRole").FabricUplinkRole;
export const FabricUplinkRole: typeof import("./fabricUplinkRole").FabricUplinkRole = null as any;
utilities.lazyLoad(exports, ["FabricUplinkRole"], () => require("./fabricUplinkRole"));

export { FabricVlanArgs, FabricVlanState } from "./fabricVlan";
export type FabricVlan = import("./fabricVlan").FabricVlan;
export const FabricVlan: typeof import("./fabricVlan").FabricVlan = null as any;
utilities.lazyLoad(exports, ["FabricVlan"], () => require("./fabricVlan"));

export { FabricVsanArgs, FabricVsanState } from "./fabricVsan";
export type FabricVsan = import("./fabricVsan").FabricVsan;
export const FabricVsan: typeof import("./fabricVsan").FabricVsan = null as any;
utilities.lazyLoad(exports, ["FabricVsan"], () => require("./fabricVsan"));

export { FcpoolPoolArgs, FcpoolPoolState } from "./fcpoolPool";
export type FcpoolPool = import("./fcpoolPool").FcpoolPool;
export const FcpoolPool: typeof import("./fcpoolPool").FcpoolPool = null as any;
utilities.lazyLoad(exports, ["FcpoolPool"], () => require("./fcpoolPool"));

export { FcpoolReservationArgs, FcpoolReservationState } from "./fcpoolReservation";
export type FcpoolReservation = import("./fcpoolReservation").FcpoolReservation;
export const FcpoolReservation: typeof import("./fcpoolReservation").FcpoolReservation = null as any;
utilities.lazyLoad(exports, ["FcpoolReservation"], () => require("./fcpoolReservation"));

export { FeedbackFeedbackPostArgs, FeedbackFeedbackPostState } from "./feedbackFeedbackPost";
export type FeedbackFeedbackPost = import("./feedbackFeedbackPost").FeedbackFeedbackPost;
export const FeedbackFeedbackPost: typeof import("./feedbackFeedbackPost").FeedbackFeedbackPost = null as any;
utilities.lazyLoad(exports, ["FeedbackFeedbackPost"], () => require("./feedbackFeedbackPost"));

export { FirmwareBiosDescriptorArgs, FirmwareBiosDescriptorState } from "./firmwareBiosDescriptor";
export type FirmwareBiosDescriptor = import("./firmwareBiosDescriptor").FirmwareBiosDescriptor;
export const FirmwareBiosDescriptor: typeof import("./firmwareBiosDescriptor").FirmwareBiosDescriptor = null as any;
utilities.lazyLoad(exports, ["FirmwareBiosDescriptor"], () => require("./firmwareBiosDescriptor"));

export { FirmwareBoardControllerDescriptorArgs, FirmwareBoardControllerDescriptorState } from "./firmwareBoardControllerDescriptor";
export type FirmwareBoardControllerDescriptor = import("./firmwareBoardControllerDescriptor").FirmwareBoardControllerDescriptor;
export const FirmwareBoardControllerDescriptor: typeof import("./firmwareBoardControllerDescriptor").FirmwareBoardControllerDescriptor = null as any;
utilities.lazyLoad(exports, ["FirmwareBoardControllerDescriptor"], () => require("./firmwareBoardControllerDescriptor"));

export { FirmwareChassisUpgradeArgs, FirmwareChassisUpgradeState } from "./firmwareChassisUpgrade";
export type FirmwareChassisUpgrade = import("./firmwareChassisUpgrade").FirmwareChassisUpgrade;
export const FirmwareChassisUpgrade: typeof import("./firmwareChassisUpgrade").FirmwareChassisUpgrade = null as any;
utilities.lazyLoad(exports, ["FirmwareChassisUpgrade"], () => require("./firmwareChassisUpgrade"));

export { FirmwareCimcDescriptorArgs, FirmwareCimcDescriptorState } from "./firmwareCimcDescriptor";
export type FirmwareCimcDescriptor = import("./firmwareCimcDescriptor").FirmwareCimcDescriptor;
export const FirmwareCimcDescriptor: typeof import("./firmwareCimcDescriptor").FirmwareCimcDescriptor = null as any;
utilities.lazyLoad(exports, ["FirmwareCimcDescriptor"], () => require("./firmwareCimcDescriptor"));

export { FirmwareDimmDescriptorArgs, FirmwareDimmDescriptorState } from "./firmwareDimmDescriptor";
export type FirmwareDimmDescriptor = import("./firmwareDimmDescriptor").FirmwareDimmDescriptor;
export const FirmwareDimmDescriptor: typeof import("./firmwareDimmDescriptor").FirmwareDimmDescriptor = null as any;
utilities.lazyLoad(exports, ["FirmwareDimmDescriptor"], () => require("./firmwareDimmDescriptor"));

export { FirmwareDistributableArgs, FirmwareDistributableState } from "./firmwareDistributable";
export type FirmwareDistributable = import("./firmwareDistributable").FirmwareDistributable;
export const FirmwareDistributable: typeof import("./firmwareDistributable").FirmwareDistributable = null as any;
utilities.lazyLoad(exports, ["FirmwareDistributable"], () => require("./firmwareDistributable"));

export { FirmwareDriveDescriptorArgs, FirmwareDriveDescriptorState } from "./firmwareDriveDescriptor";
export type FirmwareDriveDescriptor = import("./firmwareDriveDescriptor").FirmwareDriveDescriptor;
export const FirmwareDriveDescriptor: typeof import("./firmwareDriveDescriptor").FirmwareDriveDescriptor = null as any;
utilities.lazyLoad(exports, ["FirmwareDriveDescriptor"], () => require("./firmwareDriveDescriptor"));

export { FirmwareDriverDistributableArgs, FirmwareDriverDistributableState } from "./firmwareDriverDistributable";
export type FirmwareDriverDistributable = import("./firmwareDriverDistributable").FirmwareDriverDistributable;
export const FirmwareDriverDistributable: typeof import("./firmwareDriverDistributable").FirmwareDriverDistributable = null as any;
utilities.lazyLoad(exports, ["FirmwareDriverDistributable"], () => require("./firmwareDriverDistributable"));

export { FirmwareEulaArgs, FirmwareEulaState } from "./firmwareEula";
export type FirmwareEula = import("./firmwareEula").FirmwareEula;
export const FirmwareEula: typeof import("./firmwareEula").FirmwareEula = null as any;
utilities.lazyLoad(exports, ["FirmwareEula"], () => require("./firmwareEula"));

export { FirmwareGpuDescriptorArgs, FirmwareGpuDescriptorState } from "./firmwareGpuDescriptor";
export type FirmwareGpuDescriptor = import("./firmwareGpuDescriptor").FirmwareGpuDescriptor;
export const FirmwareGpuDescriptor: typeof import("./firmwareGpuDescriptor").FirmwareGpuDescriptor = null as any;
utilities.lazyLoad(exports, ["FirmwareGpuDescriptor"], () => require("./firmwareGpuDescriptor"));

export { FirmwareHbaDescriptorArgs, FirmwareHbaDescriptorState } from "./firmwareHbaDescriptor";
export type FirmwareHbaDescriptor = import("./firmwareHbaDescriptor").FirmwareHbaDescriptor;
export const FirmwareHbaDescriptor: typeof import("./firmwareHbaDescriptor").FirmwareHbaDescriptor = null as any;
utilities.lazyLoad(exports, ["FirmwareHbaDescriptor"], () => require("./firmwareHbaDescriptor"));

export { FirmwareIomDescriptorArgs, FirmwareIomDescriptorState } from "./firmwareIomDescriptor";
export type FirmwareIomDescriptor = import("./firmwareIomDescriptor").FirmwareIomDescriptor;
export const FirmwareIomDescriptor: typeof import("./firmwareIomDescriptor").FirmwareIomDescriptor = null as any;
utilities.lazyLoad(exports, ["FirmwareIomDescriptor"], () => require("./firmwareIomDescriptor"));

export { FirmwareMswitchDescriptorArgs, FirmwareMswitchDescriptorState } from "./firmwareMswitchDescriptor";
export type FirmwareMswitchDescriptor = import("./firmwareMswitchDescriptor").FirmwareMswitchDescriptor;
export const FirmwareMswitchDescriptor: typeof import("./firmwareMswitchDescriptor").FirmwareMswitchDescriptor = null as any;
utilities.lazyLoad(exports, ["FirmwareMswitchDescriptor"], () => require("./firmwareMswitchDescriptor"));

export { FirmwareNxosDescriptorArgs, FirmwareNxosDescriptorState } from "./firmwareNxosDescriptor";
export type FirmwareNxosDescriptor = import("./firmwareNxosDescriptor").FirmwareNxosDescriptor;
export const FirmwareNxosDescriptor: typeof import("./firmwareNxosDescriptor").FirmwareNxosDescriptor = null as any;
utilities.lazyLoad(exports, ["FirmwareNxosDescriptor"], () => require("./firmwareNxosDescriptor"));

export { FirmwarePcieDescriptorArgs, FirmwarePcieDescriptorState } from "./firmwarePcieDescriptor";
export type FirmwarePcieDescriptor = import("./firmwarePcieDescriptor").FirmwarePcieDescriptor;
export const FirmwarePcieDescriptor: typeof import("./firmwarePcieDescriptor").FirmwarePcieDescriptor = null as any;
utilities.lazyLoad(exports, ["FirmwarePcieDescriptor"], () => require("./firmwarePcieDescriptor"));

export { FirmwarePolicyArgs, FirmwarePolicyState } from "./firmwarePolicy";
export type FirmwarePolicy = import("./firmwarePolicy").FirmwarePolicy;
export const FirmwarePolicy: typeof import("./firmwarePolicy").FirmwarePolicy = null as any;
utilities.lazyLoad(exports, ["FirmwarePolicy"], () => require("./firmwarePolicy"));

export { FirmwarePsuDescriptorArgs, FirmwarePsuDescriptorState } from "./firmwarePsuDescriptor";
export type FirmwarePsuDescriptor = import("./firmwarePsuDescriptor").FirmwarePsuDescriptor;
export const FirmwarePsuDescriptor: typeof import("./firmwarePsuDescriptor").FirmwarePsuDescriptor = null as any;
utilities.lazyLoad(exports, ["FirmwarePsuDescriptor"], () => require("./firmwarePsuDescriptor"));

export { FirmwareSasExpanderDescriptorArgs, FirmwareSasExpanderDescriptorState } from "./firmwareSasExpanderDescriptor";
export type FirmwareSasExpanderDescriptor = import("./firmwareSasExpanderDescriptor").FirmwareSasExpanderDescriptor;
export const FirmwareSasExpanderDescriptor: typeof import("./firmwareSasExpanderDescriptor").FirmwareSasExpanderDescriptor = null as any;
utilities.lazyLoad(exports, ["FirmwareSasExpanderDescriptor"], () => require("./firmwareSasExpanderDescriptor"));

export { FirmwareServerConfigurationUtilityDistributableArgs, FirmwareServerConfigurationUtilityDistributableState } from "./firmwareServerConfigurationUtilityDistributable";
export type FirmwareServerConfigurationUtilityDistributable = import("./firmwareServerConfigurationUtilityDistributable").FirmwareServerConfigurationUtilityDistributable;
export const FirmwareServerConfigurationUtilityDistributable: typeof import("./firmwareServerConfigurationUtilityDistributable").FirmwareServerConfigurationUtilityDistributable = null as any;
utilities.lazyLoad(exports, ["FirmwareServerConfigurationUtilityDistributable"], () => require("./firmwareServerConfigurationUtilityDistributable"));

export { FirmwareStorageControllerDescriptorArgs, FirmwareStorageControllerDescriptorState } from "./firmwareStorageControllerDescriptor";
export type FirmwareStorageControllerDescriptor = import("./firmwareStorageControllerDescriptor").FirmwareStorageControllerDescriptor;
export const FirmwareStorageControllerDescriptor: typeof import("./firmwareStorageControllerDescriptor").FirmwareStorageControllerDescriptor = null as any;
utilities.lazyLoad(exports, ["FirmwareStorageControllerDescriptor"], () => require("./firmwareStorageControllerDescriptor"));

export { FirmwareSwitchUpgradeArgs, FirmwareSwitchUpgradeState } from "./firmwareSwitchUpgrade";
export type FirmwareSwitchUpgrade = import("./firmwareSwitchUpgrade").FirmwareSwitchUpgrade;
export const FirmwareSwitchUpgrade: typeof import("./firmwareSwitchUpgrade").FirmwareSwitchUpgrade = null as any;
utilities.lazyLoad(exports, ["FirmwareSwitchUpgrade"], () => require("./firmwareSwitchUpgrade"));

export { FirmwareUnsupportedVersionUpgradeArgs, FirmwareUnsupportedVersionUpgradeState } from "./firmwareUnsupportedVersionUpgrade";
export type FirmwareUnsupportedVersionUpgrade = import("./firmwareUnsupportedVersionUpgrade").FirmwareUnsupportedVersionUpgrade;
export const FirmwareUnsupportedVersionUpgrade: typeof import("./firmwareUnsupportedVersionUpgrade").FirmwareUnsupportedVersionUpgrade = null as any;
utilities.lazyLoad(exports, ["FirmwareUnsupportedVersionUpgrade"], () => require("./firmwareUnsupportedVersionUpgrade"));

export { FirmwareUpgradeArgs, FirmwareUpgradeState } from "./firmwareUpgrade";
export type FirmwareUpgrade = import("./firmwareUpgrade").FirmwareUpgrade;
export const FirmwareUpgrade: typeof import("./firmwareUpgrade").FirmwareUpgrade = null as any;
utilities.lazyLoad(exports, ["FirmwareUpgrade"], () => require("./firmwareUpgrade"));

export { FirmwareUpgradeImpactArgs, FirmwareUpgradeImpactState } from "./firmwareUpgradeImpact";
export type FirmwareUpgradeImpact = import("./firmwareUpgradeImpact").FirmwareUpgradeImpact;
export const FirmwareUpgradeImpact: typeof import("./firmwareUpgradeImpact").FirmwareUpgradeImpact = null as any;
utilities.lazyLoad(exports, ["FirmwareUpgradeImpact"], () => require("./firmwareUpgradeImpact"));

export { FirmwareUpgradeValidityArgs, FirmwareUpgradeValidityState } from "./firmwareUpgradeValidity";
export type FirmwareUpgradeValidity = import("./firmwareUpgradeValidity").FirmwareUpgradeValidity;
export const FirmwareUpgradeValidity: typeof import("./firmwareUpgradeValidity").FirmwareUpgradeValidity = null as any;
utilities.lazyLoad(exports, ["FirmwareUpgradeValidity"], () => require("./firmwareUpgradeValidity"));

export { GetAaaAuditRecordArgs, GetAaaAuditRecordResult, GetAaaAuditRecordOutputArgs } from "./getAaaAuditRecord";
export const getAaaAuditRecord: typeof import("./getAaaAuditRecord").getAaaAuditRecord = null as any;
export const getAaaAuditRecordOutput: typeof import("./getAaaAuditRecord").getAaaAuditRecordOutput = null as any;
utilities.lazyLoad(exports, ["getAaaAuditRecord","getAaaAuditRecordOutput"], () => require("./getAaaAuditRecord"));

export { GetAaaRetentionConfigArgs, GetAaaRetentionConfigResult, GetAaaRetentionConfigOutputArgs } from "./getAaaRetentionConfig";
export const getAaaRetentionConfig: typeof import("./getAaaRetentionConfig").getAaaRetentionConfig = null as any;
export const getAaaRetentionConfigOutput: typeof import("./getAaaRetentionConfig").getAaaRetentionConfigOutput = null as any;
utilities.lazyLoad(exports, ["getAaaRetentionConfig","getAaaRetentionConfigOutput"], () => require("./getAaaRetentionConfig"));

export { GetAaaRetentionPolicyArgs, GetAaaRetentionPolicyResult, GetAaaRetentionPolicyOutputArgs } from "./getAaaRetentionPolicy";
export const getAaaRetentionPolicy: typeof import("./getAaaRetentionPolicy").getAaaRetentionPolicy = null as any;
export const getAaaRetentionPolicyOutput: typeof import("./getAaaRetentionPolicy").getAaaRetentionPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAaaRetentionPolicy","getAaaRetentionPolicyOutput"], () => require("./getAaaRetentionPolicy"));

export { GetAccessIpAddressArgs, GetAccessIpAddressResult, GetAccessIpAddressOutputArgs } from "./getAccessIpAddress";
export const getAccessIpAddress: typeof import("./getAccessIpAddress").getAccessIpAddress = null as any;
export const getAccessIpAddressOutput: typeof import("./getAccessIpAddress").getAccessIpAddressOutput = null as any;
utilities.lazyLoad(exports, ["getAccessIpAddress","getAccessIpAddressOutput"], () => require("./getAccessIpAddress"));

export { GetAccessPolicyArgs, GetAccessPolicyResult, GetAccessPolicyOutputArgs } from "./getAccessPolicy";
export const getAccessPolicy: typeof import("./getAccessPolicy").getAccessPolicy = null as any;
export const getAccessPolicyOutput: typeof import("./getAccessPolicy").getAccessPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAccessPolicy","getAccessPolicyOutput"], () => require("./getAccessPolicy"));

export { GetAccessPolicyInventoryArgs, GetAccessPolicyInventoryResult, GetAccessPolicyInventoryOutputArgs } from "./getAccessPolicyInventory";
export const getAccessPolicyInventory: typeof import("./getAccessPolicyInventory").getAccessPolicyInventory = null as any;
export const getAccessPolicyInventoryOutput: typeof import("./getAccessPolicyInventory").getAccessPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getAccessPolicyInventory","getAccessPolicyInventoryOutput"], () => require("./getAccessPolicyInventory"));

export { GetAdapterConfigPolicyArgs, GetAdapterConfigPolicyResult, GetAdapterConfigPolicyOutputArgs } from "./getAdapterConfigPolicy";
export const getAdapterConfigPolicy: typeof import("./getAdapterConfigPolicy").getAdapterConfigPolicy = null as any;
export const getAdapterConfigPolicyOutput: typeof import("./getAdapterConfigPolicy").getAdapterConfigPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAdapterConfigPolicy","getAdapterConfigPolicyOutput"], () => require("./getAdapterConfigPolicy"));

export { GetAdapterExtEthInterfaceArgs, GetAdapterExtEthInterfaceResult, GetAdapterExtEthInterfaceOutputArgs } from "./getAdapterExtEthInterface";
export const getAdapterExtEthInterface: typeof import("./getAdapterExtEthInterface").getAdapterExtEthInterface = null as any;
export const getAdapterExtEthInterfaceOutput: typeof import("./getAdapterExtEthInterface").getAdapterExtEthInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getAdapterExtEthInterface","getAdapterExtEthInterfaceOutput"], () => require("./getAdapterExtEthInterface"));

export { GetAdapterHostEthInterfaceArgs, GetAdapterHostEthInterfaceResult, GetAdapterHostEthInterfaceOutputArgs } from "./getAdapterHostEthInterface";
export const getAdapterHostEthInterface: typeof import("./getAdapterHostEthInterface").getAdapterHostEthInterface = null as any;
export const getAdapterHostEthInterfaceOutput: typeof import("./getAdapterHostEthInterface").getAdapterHostEthInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getAdapterHostEthInterface","getAdapterHostEthInterfaceOutput"], () => require("./getAdapterHostEthInterface"));

export { GetAdapterHostFcInterfaceArgs, GetAdapterHostFcInterfaceResult, GetAdapterHostFcInterfaceOutputArgs } from "./getAdapterHostFcInterface";
export const getAdapterHostFcInterface: typeof import("./getAdapterHostFcInterface").getAdapterHostFcInterface = null as any;
export const getAdapterHostFcInterfaceOutput: typeof import("./getAdapterHostFcInterface").getAdapterHostFcInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getAdapterHostFcInterface","getAdapterHostFcInterfaceOutput"], () => require("./getAdapterHostFcInterface"));

export { GetAdapterHostIscsiInterfaceArgs, GetAdapterHostIscsiInterfaceResult, GetAdapterHostIscsiInterfaceOutputArgs } from "./getAdapterHostIscsiInterface";
export const getAdapterHostIscsiInterface: typeof import("./getAdapterHostIscsiInterface").getAdapterHostIscsiInterface = null as any;
export const getAdapterHostIscsiInterfaceOutput: typeof import("./getAdapterHostIscsiInterface").getAdapterHostIscsiInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getAdapterHostIscsiInterface","getAdapterHostIscsiInterfaceOutput"], () => require("./getAdapterHostIscsiInterface"));

export { GetAdapterUnitArgs, GetAdapterUnitResult, GetAdapterUnitOutputArgs } from "./getAdapterUnit";
export const getAdapterUnit: typeof import("./getAdapterUnit").getAdapterUnit = null as any;
export const getAdapterUnitOutput: typeof import("./getAdapterUnit").getAdapterUnitOutput = null as any;
utilities.lazyLoad(exports, ["getAdapterUnit","getAdapterUnitOutput"], () => require("./getAdapterUnit"));

export { GetAdapterUnitExpanderArgs, GetAdapterUnitExpanderResult, GetAdapterUnitExpanderOutputArgs } from "./getAdapterUnitExpander";
export const getAdapterUnitExpander: typeof import("./getAdapterUnitExpander").getAdapterUnitExpander = null as any;
export const getAdapterUnitExpanderOutput: typeof import("./getAdapterUnitExpander").getAdapterUnitExpanderOutput = null as any;
utilities.lazyLoad(exports, ["getAdapterUnitExpander","getAdapterUnitExpanderOutput"], () => require("./getAdapterUnitExpander"));

export { GetApicAciPodArgs, GetApicAciPodResult, GetApicAciPodOutputArgs } from "./getApicAciPod";
export const getApicAciPod: typeof import("./getApicAciPod").getApicAciPod = null as any;
export const getApicAciPodOutput: typeof import("./getApicAciPod").getApicAciPodOutput = null as any;
utilities.lazyLoad(exports, ["getApicAciPod","getApicAciPodOutput"], () => require("./getApicAciPod"));

export { GetApicApplicationArgs, GetApicApplicationResult, GetApicApplicationOutputArgs } from "./getApicApplication";
export const getApicApplication: typeof import("./getApicApplication").getApicApplication = null as any;
export const getApicApplicationOutput: typeof import("./getApicApplication").getApicApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getApicApplication","getApicApplicationOutput"], () => require("./getApicApplication"));

export { GetApicApplicationEndpointGroupArgs, GetApicApplicationEndpointGroupResult, GetApicApplicationEndpointGroupOutputArgs } from "./getApicApplicationEndpointGroup";
export const getApicApplicationEndpointGroup: typeof import("./getApicApplicationEndpointGroup").getApicApplicationEndpointGroup = null as any;
export const getApicApplicationEndpointGroupOutput: typeof import("./getApicApplicationEndpointGroup").getApicApplicationEndpointGroupOutput = null as any;
utilities.lazyLoad(exports, ["getApicApplicationEndpointGroup","getApicApplicationEndpointGroupOutput"], () => require("./getApicApplicationEndpointGroup"));

export { GetApicBridgeDomainArgs, GetApicBridgeDomainResult, GetApicBridgeDomainOutputArgs } from "./getApicBridgeDomain";
export const getApicBridgeDomain: typeof import("./getApicBridgeDomain").getApicBridgeDomain = null as any;
export const getApicBridgeDomainOutput: typeof import("./getApicBridgeDomain").getApicBridgeDomainOutput = null as any;
utilities.lazyLoad(exports, ["getApicBridgeDomain","getApicBridgeDomainOutput"], () => require("./getApicBridgeDomain"));

export { GetApicExternalRoutedLayerThreeDomainArgs, GetApicExternalRoutedLayerThreeDomainResult, GetApicExternalRoutedLayerThreeDomainOutputArgs } from "./getApicExternalRoutedLayerThreeDomain";
export const getApicExternalRoutedLayerThreeDomain: typeof import("./getApicExternalRoutedLayerThreeDomain").getApicExternalRoutedLayerThreeDomain = null as any;
export const getApicExternalRoutedLayerThreeDomainOutput: typeof import("./getApicExternalRoutedLayerThreeDomain").getApicExternalRoutedLayerThreeDomainOutput = null as any;
utilities.lazyLoad(exports, ["getApicExternalRoutedLayerThreeDomain","getApicExternalRoutedLayerThreeDomainOutput"], () => require("./getApicExternalRoutedLayerThreeDomain"));

export { GetApicFabricLeafNodeArgs, GetApicFabricLeafNodeResult, GetApicFabricLeafNodeOutputArgs } from "./getApicFabricLeafNode";
export const getApicFabricLeafNode: typeof import("./getApicFabricLeafNode").getApicFabricLeafNode = null as any;
export const getApicFabricLeafNodeOutput: typeof import("./getApicFabricLeafNode").getApicFabricLeafNodeOutput = null as any;
utilities.lazyLoad(exports, ["getApicFabricLeafNode","getApicFabricLeafNodeOutput"], () => require("./getApicFabricLeafNode"));

export { GetApicFabricLeafNodeInterfaceArgs, GetApicFabricLeafNodeInterfaceResult, GetApicFabricLeafNodeInterfaceOutputArgs } from "./getApicFabricLeafNodeInterface";
export const getApicFabricLeafNodeInterface: typeof import("./getApicFabricLeafNodeInterface").getApicFabricLeafNodeInterface = null as any;
export const getApicFabricLeafNodeInterfaceOutput: typeof import("./getApicFabricLeafNodeInterface").getApicFabricLeafNodeInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getApicFabricLeafNodeInterface","getApicFabricLeafNodeInterfaceOutput"], () => require("./getApicFabricLeafNodeInterface"));

export { GetApicOutArgs, GetApicOutResult, GetApicOutOutputArgs } from "./getApicOut";
export const getApicOut: typeof import("./getApicOut").getApicOut = null as any;
export const getApicOutOutput: typeof import("./getApicOut").getApicOutOutput = null as any;
utilities.lazyLoad(exports, ["getApicOut","getApicOutOutput"], () => require("./getApicOut"));

export { GetApicSubnetArgs, GetApicSubnetResult, GetApicSubnetOutputArgs } from "./getApicSubnet";
export const getApicSubnet: typeof import("./getApicSubnet").getApicSubnet = null as any;
export const getApicSubnetOutput: typeof import("./getApicSubnet").getApicSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getApicSubnet","getApicSubnetOutput"], () => require("./getApicSubnet"));

export { GetApicTenantArgs, GetApicTenantResult, GetApicTenantOutputArgs } from "./getApicTenant";
export const getApicTenant: typeof import("./getApicTenant").getApicTenant = null as any;
export const getApicTenantOutput: typeof import("./getApicTenant").getApicTenantOutput = null as any;
utilities.lazyLoad(exports, ["getApicTenant","getApicTenantOutput"], () => require("./getApicTenant"));

export { GetApicVpcGroupArgs, GetApicVpcGroupResult, GetApicVpcGroupOutputArgs } from "./getApicVpcGroup";
export const getApicVpcGroup: typeof import("./getApicVpcGroup").getApicVpcGroup = null as any;
export const getApicVpcGroupOutput: typeof import("./getApicVpcGroup").getApicVpcGroupOutput = null as any;
utilities.lazyLoad(exports, ["getApicVpcGroup","getApicVpcGroupOutput"], () => require("./getApicVpcGroup"));

export { GetApicVrfsArgs, GetApicVrfsResult, GetApicVrfsOutputArgs } from "./getApicVrfs";
export const getApicVrfs: typeof import("./getApicVrfs").getApicVrfs = null as any;
export const getApicVrfsOutput: typeof import("./getApicVrfs").getApicVrfsOutput = null as any;
utilities.lazyLoad(exports, ["getApicVrfs","getApicVrfsOutput"], () => require("./getApicVrfs"));

export { GetApplianceAppOpStatusArgs, GetApplianceAppOpStatusResult, GetApplianceAppOpStatusOutputArgs } from "./getApplianceAppOpStatus";
export const getApplianceAppOpStatus: typeof import("./getApplianceAppOpStatus").getApplianceAppOpStatus = null as any;
export const getApplianceAppOpStatusOutput: typeof import("./getApplianceAppOpStatus").getApplianceAppOpStatusOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceAppOpStatus","getApplianceAppOpStatusOutput"], () => require("./getApplianceAppOpStatus"));

export { GetApplianceAppStatusArgs, GetApplianceAppStatusResult, GetApplianceAppStatusOutputArgs } from "./getApplianceAppStatus";
export const getApplianceAppStatus: typeof import("./getApplianceAppStatus").getApplianceAppStatus = null as any;
export const getApplianceAppStatusOutput: typeof import("./getApplianceAppStatus").getApplianceAppStatusOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceAppStatus","getApplianceAppStatusOutput"], () => require("./getApplianceAppStatus"));

export { GetApplianceAutoRmaPolicyArgs, GetApplianceAutoRmaPolicyResult, GetApplianceAutoRmaPolicyOutputArgs } from "./getApplianceAutoRmaPolicy";
export const getApplianceAutoRmaPolicy: typeof import("./getApplianceAutoRmaPolicy").getApplianceAutoRmaPolicy = null as any;
export const getApplianceAutoRmaPolicyOutput: typeof import("./getApplianceAutoRmaPolicy").getApplianceAutoRmaPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceAutoRmaPolicy","getApplianceAutoRmaPolicyOutput"], () => require("./getApplianceAutoRmaPolicy"));

export { GetApplianceBackupArgs, GetApplianceBackupResult, GetApplianceBackupOutputArgs } from "./getApplianceBackup";
export const getApplianceBackup: typeof import("./getApplianceBackup").getApplianceBackup = null as any;
export const getApplianceBackupOutput: typeof import("./getApplianceBackup").getApplianceBackupOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceBackup","getApplianceBackupOutput"], () => require("./getApplianceBackup"));

export { GetApplianceBackupMonitorArgs, GetApplianceBackupMonitorResult, GetApplianceBackupMonitorOutputArgs } from "./getApplianceBackupMonitor";
export const getApplianceBackupMonitor: typeof import("./getApplianceBackupMonitor").getApplianceBackupMonitor = null as any;
export const getApplianceBackupMonitorOutput: typeof import("./getApplianceBackupMonitor").getApplianceBackupMonitorOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceBackupMonitor","getApplianceBackupMonitorOutput"], () => require("./getApplianceBackupMonitor"));

export { GetApplianceBackupPolicyArgs, GetApplianceBackupPolicyResult, GetApplianceBackupPolicyOutputArgs } from "./getApplianceBackupPolicy";
export const getApplianceBackupPolicy: typeof import("./getApplianceBackupPolicy").getApplianceBackupPolicy = null as any;
export const getApplianceBackupPolicyOutput: typeof import("./getApplianceBackupPolicy").getApplianceBackupPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceBackupPolicy","getApplianceBackupPolicyOutput"], () => require("./getApplianceBackupPolicy"));

export { GetApplianceBackupRotateDataArgs, GetApplianceBackupRotateDataResult, GetApplianceBackupRotateDataOutputArgs } from "./getApplianceBackupRotateData";
export const getApplianceBackupRotateData: typeof import("./getApplianceBackupRotateData").getApplianceBackupRotateData = null as any;
export const getApplianceBackupRotateDataOutput: typeof import("./getApplianceBackupRotateData").getApplianceBackupRotateDataOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceBackupRotateData","getApplianceBackupRotateDataOutput"], () => require("./getApplianceBackupRotateData"));

export { GetApplianceCertificateSettingArgs, GetApplianceCertificateSettingResult, GetApplianceCertificateSettingOutputArgs } from "./getApplianceCertificateSetting";
export const getApplianceCertificateSetting: typeof import("./getApplianceCertificateSetting").getApplianceCertificateSetting = null as any;
export const getApplianceCertificateSettingOutput: typeof import("./getApplianceCertificateSetting").getApplianceCertificateSettingOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceCertificateSetting","getApplianceCertificateSettingOutput"], () => require("./getApplianceCertificateSetting"));

export { GetApplianceClusterInfoArgs, GetApplianceClusterInfoResult, GetApplianceClusterInfoOutputArgs } from "./getApplianceClusterInfo";
export const getApplianceClusterInfo: typeof import("./getApplianceClusterInfo").getApplianceClusterInfo = null as any;
export const getApplianceClusterInfoOutput: typeof import("./getApplianceClusterInfo").getApplianceClusterInfoOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceClusterInfo","getApplianceClusterInfoOutput"], () => require("./getApplianceClusterInfo"));

export { GetApplianceClusterInstallArgs, GetApplianceClusterInstallResult, GetApplianceClusterInstallOutputArgs } from "./getApplianceClusterInstall";
export const getApplianceClusterInstall: typeof import("./getApplianceClusterInstall").getApplianceClusterInstall = null as any;
export const getApplianceClusterInstallOutput: typeof import("./getApplianceClusterInstall").getApplianceClusterInstallOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceClusterInstall","getApplianceClusterInstallOutput"], () => require("./getApplianceClusterInstall"));

export { GetApplianceClusterReplaceNodeArgs, GetApplianceClusterReplaceNodeResult, GetApplianceClusterReplaceNodeOutputArgs } from "./getApplianceClusterReplaceNode";
export const getApplianceClusterReplaceNode: typeof import("./getApplianceClusterReplaceNode").getApplianceClusterReplaceNode = null as any;
export const getApplianceClusterReplaceNodeOutput: typeof import("./getApplianceClusterReplaceNode").getApplianceClusterReplaceNodeOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceClusterReplaceNode","getApplianceClusterReplaceNodeOutput"], () => require("./getApplianceClusterReplaceNode"));

export { GetApplianceDataExportPolicyArgs, GetApplianceDataExportPolicyResult, GetApplianceDataExportPolicyOutputArgs } from "./getApplianceDataExportPolicy";
export const getApplianceDataExportPolicy: typeof import("./getApplianceDataExportPolicy").getApplianceDataExportPolicy = null as any;
export const getApplianceDataExportPolicyOutput: typeof import("./getApplianceDataExportPolicy").getApplianceDataExportPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceDataExportPolicy","getApplianceDataExportPolicyOutput"], () => require("./getApplianceDataExportPolicy"));

export { GetApplianceDeviceCertificateArgs, GetApplianceDeviceCertificateResult, GetApplianceDeviceCertificateOutputArgs } from "./getApplianceDeviceCertificate";
export const getApplianceDeviceCertificate: typeof import("./getApplianceDeviceCertificate").getApplianceDeviceCertificate = null as any;
export const getApplianceDeviceCertificateOutput: typeof import("./getApplianceDeviceCertificate").getApplianceDeviceCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceDeviceCertificate","getApplianceDeviceCertificateOutput"], () => require("./getApplianceDeviceCertificate"));

export { GetApplianceDeviceClaimArgs, GetApplianceDeviceClaimResult, GetApplianceDeviceClaimOutputArgs } from "./getApplianceDeviceClaim";
export const getApplianceDeviceClaim: typeof import("./getApplianceDeviceClaim").getApplianceDeviceClaim = null as any;
export const getApplianceDeviceClaimOutput: typeof import("./getApplianceDeviceClaim").getApplianceDeviceClaimOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceDeviceClaim","getApplianceDeviceClaimOutput"], () => require("./getApplianceDeviceClaim"));

export { GetApplianceDeviceClusterInstallArgs, GetApplianceDeviceClusterInstallResult, GetApplianceDeviceClusterInstallOutputArgs } from "./getApplianceDeviceClusterInstall";
export const getApplianceDeviceClusterInstall: typeof import("./getApplianceDeviceClusterInstall").getApplianceDeviceClusterInstall = null as any;
export const getApplianceDeviceClusterInstallOutput: typeof import("./getApplianceDeviceClusterInstall").getApplianceDeviceClusterInstallOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceDeviceClusterInstall","getApplianceDeviceClusterInstallOutput"], () => require("./getApplianceDeviceClusterInstall"));

export { GetApplianceDeviceStateArgs, GetApplianceDeviceStateResult, GetApplianceDeviceStateOutputArgs } from "./getApplianceDeviceState";
export const getApplianceDeviceState: typeof import("./getApplianceDeviceState").getApplianceDeviceState = null as any;
export const getApplianceDeviceStateOutput: typeof import("./getApplianceDeviceState").getApplianceDeviceStateOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceDeviceState","getApplianceDeviceStateOutput"], () => require("./getApplianceDeviceState"));

export { GetApplianceDeviceUpgradePolicyArgs, GetApplianceDeviceUpgradePolicyResult, GetApplianceDeviceUpgradePolicyOutputArgs } from "./getApplianceDeviceUpgradePolicy";
export const getApplianceDeviceUpgradePolicy: typeof import("./getApplianceDeviceUpgradePolicy").getApplianceDeviceUpgradePolicy = null as any;
export const getApplianceDeviceUpgradePolicyOutput: typeof import("./getApplianceDeviceUpgradePolicy").getApplianceDeviceUpgradePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceDeviceUpgradePolicy","getApplianceDeviceUpgradePolicyOutput"], () => require("./getApplianceDeviceUpgradePolicy"));

export { GetApplianceDiagSettingArgs, GetApplianceDiagSettingResult, GetApplianceDiagSettingOutputArgs } from "./getApplianceDiagSetting";
export const getApplianceDiagSetting: typeof import("./getApplianceDiagSetting").getApplianceDiagSetting = null as any;
export const getApplianceDiagSettingOutput: typeof import("./getApplianceDiagSetting").getApplianceDiagSettingOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceDiagSetting","getApplianceDiagSettingOutput"], () => require("./getApplianceDiagSetting"));

export { GetApplianceExternalSyslogSettingArgs, GetApplianceExternalSyslogSettingResult, GetApplianceExternalSyslogSettingOutputArgs } from "./getApplianceExternalSyslogSetting";
export const getApplianceExternalSyslogSetting: typeof import("./getApplianceExternalSyslogSetting").getApplianceExternalSyslogSetting = null as any;
export const getApplianceExternalSyslogSettingOutput: typeof import("./getApplianceExternalSyslogSetting").getApplianceExternalSyslogSettingOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceExternalSyslogSetting","getApplianceExternalSyslogSettingOutput"], () => require("./getApplianceExternalSyslogSetting"));

export { GetApplianceFileGatewayArgs, GetApplianceFileGatewayResult, GetApplianceFileGatewayOutputArgs } from "./getApplianceFileGateway";
export const getApplianceFileGateway: typeof import("./getApplianceFileGateway").getApplianceFileGateway = null as any;
export const getApplianceFileGatewayOutput: typeof import("./getApplianceFileGateway").getApplianceFileGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceFileGateway","getApplianceFileGatewayOutput"], () => require("./getApplianceFileGateway"));

export { GetApplianceFileSystemOpStatusArgs, GetApplianceFileSystemOpStatusResult, GetApplianceFileSystemOpStatusOutputArgs } from "./getApplianceFileSystemOpStatus";
export const getApplianceFileSystemOpStatus: typeof import("./getApplianceFileSystemOpStatus").getApplianceFileSystemOpStatus = null as any;
export const getApplianceFileSystemOpStatusOutput: typeof import("./getApplianceFileSystemOpStatus").getApplianceFileSystemOpStatusOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceFileSystemOpStatus","getApplianceFileSystemOpStatusOutput"], () => require("./getApplianceFileSystemOpStatus"));

export { GetApplianceFileSystemStatusArgs, GetApplianceFileSystemStatusResult, GetApplianceFileSystemStatusOutputArgs } from "./getApplianceFileSystemStatus";
export const getApplianceFileSystemStatus: typeof import("./getApplianceFileSystemStatus").getApplianceFileSystemStatus = null as any;
export const getApplianceFileSystemStatusOutput: typeof import("./getApplianceFileSystemStatus").getApplianceFileSystemStatusOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceFileSystemStatus","getApplianceFileSystemStatusOutput"], () => require("./getApplianceFileSystemStatus"));

export { GetApplianceGroupOpStatusArgs, GetApplianceGroupOpStatusResult, GetApplianceGroupOpStatusOutputArgs } from "./getApplianceGroupOpStatus";
export const getApplianceGroupOpStatus: typeof import("./getApplianceGroupOpStatus").getApplianceGroupOpStatus = null as any;
export const getApplianceGroupOpStatusOutput: typeof import("./getApplianceGroupOpStatus").getApplianceGroupOpStatusOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceGroupOpStatus","getApplianceGroupOpStatusOutput"], () => require("./getApplianceGroupOpStatus"));

export { GetApplianceGroupStatusArgs, GetApplianceGroupStatusResult, GetApplianceGroupStatusOutputArgs } from "./getApplianceGroupStatus";
export const getApplianceGroupStatus: typeof import("./getApplianceGroupStatus").getApplianceGroupStatus = null as any;
export const getApplianceGroupStatusOutput: typeof import("./getApplianceGroupStatus").getApplianceGroupStatusOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceGroupStatus","getApplianceGroupStatusOutput"], () => require("./getApplianceGroupStatus"));

export { GetApplianceImageBundleArgs, GetApplianceImageBundleResult, GetApplianceImageBundleOutputArgs } from "./getApplianceImageBundle";
export const getApplianceImageBundle: typeof import("./getApplianceImageBundle").getApplianceImageBundle = null as any;
export const getApplianceImageBundleOutput: typeof import("./getApplianceImageBundle").getApplianceImageBundleOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceImageBundle","getApplianceImageBundleOutput"], () => require("./getApplianceImageBundle"));

export { GetApplianceMetaManifestArgs, GetApplianceMetaManifestResult, GetApplianceMetaManifestOutputArgs } from "./getApplianceMetaManifest";
export const getApplianceMetaManifest: typeof import("./getApplianceMetaManifest").getApplianceMetaManifest = null as any;
export const getApplianceMetaManifestOutput: typeof import("./getApplianceMetaManifest").getApplianceMetaManifestOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceMetaManifest","getApplianceMetaManifestOutput"], () => require("./getApplianceMetaManifest"));

export { GetApplianceMetricsConfigArgs, GetApplianceMetricsConfigResult, GetApplianceMetricsConfigOutputArgs } from "./getApplianceMetricsConfig";
export const getApplianceMetricsConfig: typeof import("./getApplianceMetricsConfig").getApplianceMetricsConfig = null as any;
export const getApplianceMetricsConfigOutput: typeof import("./getApplianceMetricsConfig").getApplianceMetricsConfigOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceMetricsConfig","getApplianceMetricsConfigOutput"], () => require("./getApplianceMetricsConfig"));

export { GetApplianceNetworkLinkStatusArgs, GetApplianceNetworkLinkStatusResult, GetApplianceNetworkLinkStatusOutputArgs } from "./getApplianceNetworkLinkStatus";
export const getApplianceNetworkLinkStatus: typeof import("./getApplianceNetworkLinkStatus").getApplianceNetworkLinkStatus = null as any;
export const getApplianceNetworkLinkStatusOutput: typeof import("./getApplianceNetworkLinkStatus").getApplianceNetworkLinkStatusOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceNetworkLinkStatus","getApplianceNetworkLinkStatusOutput"], () => require("./getApplianceNetworkLinkStatus"));

export { GetApplianceNodeInfoArgs, GetApplianceNodeInfoResult, GetApplianceNodeInfoOutputArgs } from "./getApplianceNodeInfo";
export const getApplianceNodeInfo: typeof import("./getApplianceNodeInfo").getApplianceNodeInfo = null as any;
export const getApplianceNodeInfoOutput: typeof import("./getApplianceNodeInfo").getApplianceNodeInfoOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceNodeInfo","getApplianceNodeInfoOutput"], () => require("./getApplianceNodeInfo"));

export { GetApplianceNodeOpStatusArgs, GetApplianceNodeOpStatusResult, GetApplianceNodeOpStatusOutputArgs } from "./getApplianceNodeOpStatus";
export const getApplianceNodeOpStatus: typeof import("./getApplianceNodeOpStatus").getApplianceNodeOpStatus = null as any;
export const getApplianceNodeOpStatusOutput: typeof import("./getApplianceNodeOpStatus").getApplianceNodeOpStatusOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceNodeOpStatus","getApplianceNodeOpStatusOutput"], () => require("./getApplianceNodeOpStatus"));

export { GetApplianceNodeStatusArgs, GetApplianceNodeStatusResult, GetApplianceNodeStatusOutputArgs } from "./getApplianceNodeStatus";
export const getApplianceNodeStatus: typeof import("./getApplianceNodeStatus").getApplianceNodeStatus = null as any;
export const getApplianceNodeStatusOutput: typeof import("./getApplianceNodeStatus").getApplianceNodeStatusOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceNodeStatus","getApplianceNodeStatusOutput"], () => require("./getApplianceNodeStatus"));

export { GetApplianceReleaseNoteArgs, GetApplianceReleaseNoteResult, GetApplianceReleaseNoteOutputArgs } from "./getApplianceReleaseNote";
export const getApplianceReleaseNote: typeof import("./getApplianceReleaseNote").getApplianceReleaseNote = null as any;
export const getApplianceReleaseNoteOutput: typeof import("./getApplianceReleaseNote").getApplianceReleaseNoteOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceReleaseNote","getApplianceReleaseNoteOutput"], () => require("./getApplianceReleaseNote"));

export { GetApplianceRemoteFileImportArgs, GetApplianceRemoteFileImportResult, GetApplianceRemoteFileImportOutputArgs } from "./getApplianceRemoteFileImport";
export const getApplianceRemoteFileImport: typeof import("./getApplianceRemoteFileImport").getApplianceRemoteFileImport = null as any;
export const getApplianceRemoteFileImportOutput: typeof import("./getApplianceRemoteFileImport").getApplianceRemoteFileImportOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceRemoteFileImport","getApplianceRemoteFileImportOutput"], () => require("./getApplianceRemoteFileImport"));

export { GetApplianceRestoreArgs, GetApplianceRestoreResult, GetApplianceRestoreOutputArgs } from "./getApplianceRestore";
export const getApplianceRestore: typeof import("./getApplianceRestore").getApplianceRestore = null as any;
export const getApplianceRestoreOutput: typeof import("./getApplianceRestore").getApplianceRestoreOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceRestore","getApplianceRestoreOutput"], () => require("./getApplianceRestore"));

export { GetApplianceSetupInfoArgs, GetApplianceSetupInfoResult, GetApplianceSetupInfoOutputArgs } from "./getApplianceSetupInfo";
export const getApplianceSetupInfo: typeof import("./getApplianceSetupInfo").getApplianceSetupInfo = null as any;
export const getApplianceSetupInfoOutput: typeof import("./getApplianceSetupInfo").getApplianceSetupInfoOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceSetupInfo","getApplianceSetupInfoOutput"], () => require("./getApplianceSetupInfo"));

export { GetApplianceSystemInfoArgs, GetApplianceSystemInfoResult, GetApplianceSystemInfoOutputArgs } from "./getApplianceSystemInfo";
export const getApplianceSystemInfo: typeof import("./getApplianceSystemInfo").getApplianceSystemInfo = null as any;
export const getApplianceSystemInfoOutput: typeof import("./getApplianceSystemInfo").getApplianceSystemInfoOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceSystemInfo","getApplianceSystemInfoOutput"], () => require("./getApplianceSystemInfo"));

export { GetApplianceSystemOpStatusArgs, GetApplianceSystemOpStatusResult, GetApplianceSystemOpStatusOutputArgs } from "./getApplianceSystemOpStatus";
export const getApplianceSystemOpStatus: typeof import("./getApplianceSystemOpStatus").getApplianceSystemOpStatus = null as any;
export const getApplianceSystemOpStatusOutput: typeof import("./getApplianceSystemOpStatus").getApplianceSystemOpStatusOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceSystemOpStatus","getApplianceSystemOpStatusOutput"], () => require("./getApplianceSystemOpStatus"));

export { GetApplianceSystemStatusArgs, GetApplianceSystemStatusResult, GetApplianceSystemStatusOutputArgs } from "./getApplianceSystemStatus";
export const getApplianceSystemStatus: typeof import("./getApplianceSystemStatus").getApplianceSystemStatus = null as any;
export const getApplianceSystemStatusOutput: typeof import("./getApplianceSystemStatus").getApplianceSystemStatusOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceSystemStatus","getApplianceSystemStatusOutput"], () => require("./getApplianceSystemStatus"));

export { GetApplianceUpgradeArgs, GetApplianceUpgradeResult, GetApplianceUpgradeOutputArgs } from "./getApplianceUpgrade";
export const getApplianceUpgrade: typeof import("./getApplianceUpgrade").getApplianceUpgrade = null as any;
export const getApplianceUpgradeOutput: typeof import("./getApplianceUpgrade").getApplianceUpgradeOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceUpgrade","getApplianceUpgradeOutput"], () => require("./getApplianceUpgrade"));

export { GetApplianceUpgradePolicyArgs, GetApplianceUpgradePolicyResult, GetApplianceUpgradePolicyOutputArgs } from "./getApplianceUpgradePolicy";
export const getApplianceUpgradePolicy: typeof import("./getApplianceUpgradePolicy").getApplianceUpgradePolicy = null as any;
export const getApplianceUpgradePolicyOutput: typeof import("./getApplianceUpgradePolicy").getApplianceUpgradePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceUpgradePolicy","getApplianceUpgradePolicyOutput"], () => require("./getApplianceUpgradePolicy"));

export { GetApplianceUpgradeTrackerArgs, GetApplianceUpgradeTrackerResult, GetApplianceUpgradeTrackerOutputArgs } from "./getApplianceUpgradeTracker";
export const getApplianceUpgradeTracker: typeof import("./getApplianceUpgradeTracker").getApplianceUpgradeTracker = null as any;
export const getApplianceUpgradeTrackerOutput: typeof import("./getApplianceUpgradeTracker").getApplianceUpgradeTrackerOutput = null as any;
utilities.lazyLoad(exports, ["getApplianceUpgradeTracker","getApplianceUpgradeTrackerOutput"], () => require("./getApplianceUpgradeTracker"));

export { GetAssetClusterMemberArgs, GetAssetClusterMemberResult, GetAssetClusterMemberOutputArgs } from "./getAssetClusterMember";
export const getAssetClusterMember: typeof import("./getAssetClusterMember").getAssetClusterMember = null as any;
export const getAssetClusterMemberOutput: typeof import("./getAssetClusterMember").getAssetClusterMemberOutput = null as any;
utilities.lazyLoad(exports, ["getAssetClusterMember","getAssetClusterMemberOutput"], () => require("./getAssetClusterMember"));

export { GetAssetDeploymentArgs, GetAssetDeploymentResult, GetAssetDeploymentOutputArgs } from "./getAssetDeployment";
export const getAssetDeployment: typeof import("./getAssetDeployment").getAssetDeployment = null as any;
export const getAssetDeploymentOutput: typeof import("./getAssetDeployment").getAssetDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getAssetDeployment","getAssetDeploymentOutput"], () => require("./getAssetDeployment"));

export { GetAssetDeploymentDeviceArgs, GetAssetDeploymentDeviceResult, GetAssetDeploymentDeviceOutputArgs } from "./getAssetDeploymentDevice";
export const getAssetDeploymentDevice: typeof import("./getAssetDeploymentDevice").getAssetDeploymentDevice = null as any;
export const getAssetDeploymentDeviceOutput: typeof import("./getAssetDeploymentDevice").getAssetDeploymentDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getAssetDeploymentDevice","getAssetDeploymentDeviceOutput"], () => require("./getAssetDeploymentDevice"));

export { GetAssetDeviceConfigurationArgs, GetAssetDeviceConfigurationResult, GetAssetDeviceConfigurationOutputArgs } from "./getAssetDeviceConfiguration";
export const getAssetDeviceConfiguration: typeof import("./getAssetDeviceConfiguration").getAssetDeviceConfiguration = null as any;
export const getAssetDeviceConfigurationOutput: typeof import("./getAssetDeviceConfiguration").getAssetDeviceConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getAssetDeviceConfiguration","getAssetDeviceConfigurationOutput"], () => require("./getAssetDeviceConfiguration"));

export { GetAssetDeviceConnectorManagerArgs, GetAssetDeviceConnectorManagerResult, GetAssetDeviceConnectorManagerOutputArgs } from "./getAssetDeviceConnectorManager";
export const getAssetDeviceConnectorManager: typeof import("./getAssetDeviceConnectorManager").getAssetDeviceConnectorManager = null as any;
export const getAssetDeviceConnectorManagerOutput: typeof import("./getAssetDeviceConnectorManager").getAssetDeviceConnectorManagerOutput = null as any;
utilities.lazyLoad(exports, ["getAssetDeviceConnectorManager","getAssetDeviceConnectorManagerOutput"], () => require("./getAssetDeviceConnectorManager"));

export { GetAssetDeviceContractInformationArgs, GetAssetDeviceContractInformationResult, GetAssetDeviceContractInformationOutputArgs } from "./getAssetDeviceContractInformation";
export const getAssetDeviceContractInformation: typeof import("./getAssetDeviceContractInformation").getAssetDeviceContractInformation = null as any;
export const getAssetDeviceContractInformationOutput: typeof import("./getAssetDeviceContractInformation").getAssetDeviceContractInformationOutput = null as any;
utilities.lazyLoad(exports, ["getAssetDeviceContractInformation","getAssetDeviceContractInformationOutput"], () => require("./getAssetDeviceContractInformation"));

export { GetAssetDeviceRegistrationArgs, GetAssetDeviceRegistrationResult, GetAssetDeviceRegistrationOutputArgs } from "./getAssetDeviceRegistration";
export const getAssetDeviceRegistration: typeof import("./getAssetDeviceRegistration").getAssetDeviceRegistration = null as any;
export const getAssetDeviceRegistrationOutput: typeof import("./getAssetDeviceRegistration").getAssetDeviceRegistrationOutput = null as any;
utilities.lazyLoad(exports, ["getAssetDeviceRegistration","getAssetDeviceRegistrationOutput"], () => require("./getAssetDeviceRegistration"));

export { GetAssetSubscriptionArgs, GetAssetSubscriptionResult, GetAssetSubscriptionOutputArgs } from "./getAssetSubscription";
export const getAssetSubscription: typeof import("./getAssetSubscription").getAssetSubscription = null as any;
export const getAssetSubscriptionOutput: typeof import("./getAssetSubscription").getAssetSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getAssetSubscription","getAssetSubscriptionOutput"], () => require("./getAssetSubscription"));

export { GetAssetSubscriptionAccountArgs, GetAssetSubscriptionAccountResult, GetAssetSubscriptionAccountOutputArgs } from "./getAssetSubscriptionAccount";
export const getAssetSubscriptionAccount: typeof import("./getAssetSubscriptionAccount").getAssetSubscriptionAccount = null as any;
export const getAssetSubscriptionAccountOutput: typeof import("./getAssetSubscriptionAccount").getAssetSubscriptionAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAssetSubscriptionAccount","getAssetSubscriptionAccountOutput"], () => require("./getAssetSubscriptionAccount"));

export { GetAssetSubscriptionDeviceContractInformationArgs, GetAssetSubscriptionDeviceContractInformationResult, GetAssetSubscriptionDeviceContractInformationOutputArgs } from "./getAssetSubscriptionDeviceContractInformation";
export const getAssetSubscriptionDeviceContractInformation: typeof import("./getAssetSubscriptionDeviceContractInformation").getAssetSubscriptionDeviceContractInformation = null as any;
export const getAssetSubscriptionDeviceContractInformationOutput: typeof import("./getAssetSubscriptionDeviceContractInformation").getAssetSubscriptionDeviceContractInformationOutput = null as any;
utilities.lazyLoad(exports, ["getAssetSubscriptionDeviceContractInformation","getAssetSubscriptionDeviceContractInformationOutput"], () => require("./getAssetSubscriptionDeviceContractInformation"));

export { GetAssetTargetArgs, GetAssetTargetResult, GetAssetTargetOutputArgs } from "./getAssetTarget";
export const getAssetTarget: typeof import("./getAssetTarget").getAssetTarget = null as any;
export const getAssetTargetOutput: typeof import("./getAssetTarget").getAssetTargetOutput = null as any;
utilities.lazyLoad(exports, ["getAssetTarget","getAssetTargetOutput"], () => require("./getAssetTarget"));

export { GetBiosBootDeviceArgs, GetBiosBootDeviceResult, GetBiosBootDeviceOutputArgs } from "./getBiosBootDevice";
export const getBiosBootDevice: typeof import("./getBiosBootDevice").getBiosBootDevice = null as any;
export const getBiosBootDeviceOutput: typeof import("./getBiosBootDevice").getBiosBootDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getBiosBootDevice","getBiosBootDeviceOutput"], () => require("./getBiosBootDevice"));

export { GetBiosBootModeArgs, GetBiosBootModeResult, GetBiosBootModeOutputArgs } from "./getBiosBootMode";
export const getBiosBootMode: typeof import("./getBiosBootMode").getBiosBootMode = null as any;
export const getBiosBootModeOutput: typeof import("./getBiosBootMode").getBiosBootModeOutput = null as any;
utilities.lazyLoad(exports, ["getBiosBootMode","getBiosBootModeOutput"], () => require("./getBiosBootMode"));

export { GetBiosPolicyArgs, GetBiosPolicyResult, GetBiosPolicyOutputArgs } from "./getBiosPolicy";
export const getBiosPolicy: typeof import("./getBiosPolicy").getBiosPolicy = null as any;
export const getBiosPolicyOutput: typeof import("./getBiosPolicy").getBiosPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getBiosPolicy","getBiosPolicyOutput"], () => require("./getBiosPolicy"));

export { GetBiosSystemBootOrderArgs, GetBiosSystemBootOrderResult, GetBiosSystemBootOrderOutputArgs } from "./getBiosSystemBootOrder";
export const getBiosSystemBootOrder: typeof import("./getBiosSystemBootOrder").getBiosSystemBootOrder = null as any;
export const getBiosSystemBootOrderOutput: typeof import("./getBiosSystemBootOrder").getBiosSystemBootOrderOutput = null as any;
utilities.lazyLoad(exports, ["getBiosSystemBootOrder","getBiosSystemBootOrderOutput"], () => require("./getBiosSystemBootOrder"));

export { GetBiosTokenSettingsArgs, GetBiosTokenSettingsResult, GetBiosTokenSettingsOutputArgs } from "./getBiosTokenSettings";
export const getBiosTokenSettings: typeof import("./getBiosTokenSettings").getBiosTokenSettings = null as any;
export const getBiosTokenSettingsOutput: typeof import("./getBiosTokenSettings").getBiosTokenSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getBiosTokenSettings","getBiosTokenSettingsOutput"], () => require("./getBiosTokenSettings"));

export { GetBiosUnitArgs, GetBiosUnitResult, GetBiosUnitOutputArgs } from "./getBiosUnit";
export const getBiosUnit: typeof import("./getBiosUnit").getBiosUnit = null as any;
export const getBiosUnitOutput: typeof import("./getBiosUnit").getBiosUnitOutput = null as any;
utilities.lazyLoad(exports, ["getBiosUnit","getBiosUnitOutput"], () => require("./getBiosUnit"));

export { GetBiosVfSelectMemoryRasConfigurationArgs, GetBiosVfSelectMemoryRasConfigurationResult, GetBiosVfSelectMemoryRasConfigurationOutputArgs } from "./getBiosVfSelectMemoryRasConfiguration";
export const getBiosVfSelectMemoryRasConfiguration: typeof import("./getBiosVfSelectMemoryRasConfiguration").getBiosVfSelectMemoryRasConfiguration = null as any;
export const getBiosVfSelectMemoryRasConfigurationOutput: typeof import("./getBiosVfSelectMemoryRasConfiguration").getBiosVfSelectMemoryRasConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getBiosVfSelectMemoryRasConfiguration","getBiosVfSelectMemoryRasConfigurationOutput"], () => require("./getBiosVfSelectMemoryRasConfiguration"));

export { GetBootCddDeviceArgs, GetBootCddDeviceResult, GetBootCddDeviceOutputArgs } from "./getBootCddDevice";
export const getBootCddDevice: typeof import("./getBootCddDevice").getBootCddDevice = null as any;
export const getBootCddDeviceOutput: typeof import("./getBootCddDevice").getBootCddDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getBootCddDevice","getBootCddDeviceOutput"], () => require("./getBootCddDevice"));

export { GetBootDeviceBootModeArgs, GetBootDeviceBootModeResult, GetBootDeviceBootModeOutputArgs } from "./getBootDeviceBootMode";
export const getBootDeviceBootMode: typeof import("./getBootDeviceBootMode").getBootDeviceBootMode = null as any;
export const getBootDeviceBootModeOutput: typeof import("./getBootDeviceBootMode").getBootDeviceBootModeOutput = null as any;
utilities.lazyLoad(exports, ["getBootDeviceBootMode","getBootDeviceBootModeOutput"], () => require("./getBootDeviceBootMode"));

export { GetBootDeviceBootSecurityArgs, GetBootDeviceBootSecurityResult, GetBootDeviceBootSecurityOutputArgs } from "./getBootDeviceBootSecurity";
export const getBootDeviceBootSecurity: typeof import("./getBootDeviceBootSecurity").getBootDeviceBootSecurity = null as any;
export const getBootDeviceBootSecurityOutput: typeof import("./getBootDeviceBootSecurity").getBootDeviceBootSecurityOutput = null as any;
utilities.lazyLoad(exports, ["getBootDeviceBootSecurity","getBootDeviceBootSecurityOutput"], () => require("./getBootDeviceBootSecurity"));

export { GetBootHddDeviceArgs, GetBootHddDeviceResult, GetBootHddDeviceOutputArgs } from "./getBootHddDevice";
export const getBootHddDevice: typeof import("./getBootHddDevice").getBootHddDevice = null as any;
export const getBootHddDeviceOutput: typeof import("./getBootHddDevice").getBootHddDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getBootHddDevice","getBootHddDeviceOutput"], () => require("./getBootHddDevice"));

export { GetBootIscsiDeviceArgs, GetBootIscsiDeviceResult, GetBootIscsiDeviceOutputArgs } from "./getBootIscsiDevice";
export const getBootIscsiDevice: typeof import("./getBootIscsiDevice").getBootIscsiDevice = null as any;
export const getBootIscsiDeviceOutput: typeof import("./getBootIscsiDevice").getBootIscsiDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getBootIscsiDevice","getBootIscsiDeviceOutput"], () => require("./getBootIscsiDevice"));

export { GetBootNvmeDeviceArgs, GetBootNvmeDeviceResult, GetBootNvmeDeviceOutputArgs } from "./getBootNvmeDevice";
export const getBootNvmeDevice: typeof import("./getBootNvmeDevice").getBootNvmeDevice = null as any;
export const getBootNvmeDeviceOutput: typeof import("./getBootNvmeDevice").getBootNvmeDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getBootNvmeDevice","getBootNvmeDeviceOutput"], () => require("./getBootNvmeDevice"));

export { GetBootPchStorageDeviceArgs, GetBootPchStorageDeviceResult, GetBootPchStorageDeviceOutputArgs } from "./getBootPchStorageDevice";
export const getBootPchStorageDevice: typeof import("./getBootPchStorageDevice").getBootPchStorageDevice = null as any;
export const getBootPchStorageDeviceOutput: typeof import("./getBootPchStorageDevice").getBootPchStorageDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getBootPchStorageDevice","getBootPchStorageDeviceOutput"], () => require("./getBootPchStorageDevice"));

export { GetBootPrecisionPolicyArgs, GetBootPrecisionPolicyResult, GetBootPrecisionPolicyOutputArgs } from "./getBootPrecisionPolicy";
export const getBootPrecisionPolicy: typeof import("./getBootPrecisionPolicy").getBootPrecisionPolicy = null as any;
export const getBootPrecisionPolicyOutput: typeof import("./getBootPrecisionPolicy").getBootPrecisionPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getBootPrecisionPolicy","getBootPrecisionPolicyOutput"], () => require("./getBootPrecisionPolicy"));

export { GetBootPxeDeviceArgs, GetBootPxeDeviceResult, GetBootPxeDeviceOutputArgs } from "./getBootPxeDevice";
export const getBootPxeDevice: typeof import("./getBootPxeDevice").getBootPxeDevice = null as any;
export const getBootPxeDeviceOutput: typeof import("./getBootPxeDevice").getBootPxeDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getBootPxeDevice","getBootPxeDeviceOutput"], () => require("./getBootPxeDevice"));

export { GetBootSanDeviceArgs, GetBootSanDeviceResult, GetBootSanDeviceOutputArgs } from "./getBootSanDevice";
export const getBootSanDevice: typeof import("./getBootSanDevice").getBootSanDevice = null as any;
export const getBootSanDeviceOutput: typeof import("./getBootSanDevice").getBootSanDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getBootSanDevice","getBootSanDeviceOutput"], () => require("./getBootSanDevice"));

export { GetBootSdDeviceArgs, GetBootSdDeviceResult, GetBootSdDeviceOutputArgs } from "./getBootSdDevice";
export const getBootSdDevice: typeof import("./getBootSdDevice").getBootSdDevice = null as any;
export const getBootSdDeviceOutput: typeof import("./getBootSdDevice").getBootSdDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getBootSdDevice","getBootSdDeviceOutput"], () => require("./getBootSdDevice"));

export { GetBootUefiShellDeviceArgs, GetBootUefiShellDeviceResult, GetBootUefiShellDeviceOutputArgs } from "./getBootUefiShellDevice";
export const getBootUefiShellDevice: typeof import("./getBootUefiShellDevice").getBootUefiShellDevice = null as any;
export const getBootUefiShellDeviceOutput: typeof import("./getBootUefiShellDevice").getBootUefiShellDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getBootUefiShellDevice","getBootUefiShellDeviceOutput"], () => require("./getBootUefiShellDevice"));

export { GetBootUsbDeviceArgs, GetBootUsbDeviceResult, GetBootUsbDeviceOutputArgs } from "./getBootUsbDevice";
export const getBootUsbDevice: typeof import("./getBootUsbDevice").getBootUsbDevice = null as any;
export const getBootUsbDeviceOutput: typeof import("./getBootUsbDevice").getBootUsbDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getBootUsbDevice","getBootUsbDeviceOutput"], () => require("./getBootUsbDevice"));

export { GetBootVmediaDeviceArgs, GetBootVmediaDeviceResult, GetBootVmediaDeviceOutputArgs } from "./getBootVmediaDevice";
export const getBootVmediaDevice: typeof import("./getBootVmediaDevice").getBootVmediaDevice = null as any;
export const getBootVmediaDeviceOutput: typeof import("./getBootVmediaDevice").getBootVmediaDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getBootVmediaDevice","getBootVmediaDeviceOutput"], () => require("./getBootVmediaDevice"));

export { GetBulkExportArgs, GetBulkExportResult, GetBulkExportOutputArgs } from "./getBulkExport";
export const getBulkExport: typeof import("./getBulkExport").getBulkExport = null as any;
export const getBulkExportOutput: typeof import("./getBulkExport").getBulkExportOutput = null as any;
utilities.lazyLoad(exports, ["getBulkExport","getBulkExportOutput"], () => require("./getBulkExport"));

export { GetBulkExportedItemArgs, GetBulkExportedItemResult, GetBulkExportedItemOutputArgs } from "./getBulkExportedItem";
export const getBulkExportedItem: typeof import("./getBulkExportedItem").getBulkExportedItem = null as any;
export const getBulkExportedItemOutput: typeof import("./getBulkExportedItem").getBulkExportedItemOutput = null as any;
utilities.lazyLoad(exports, ["getBulkExportedItem","getBulkExportedItemOutput"], () => require("./getBulkExportedItem"));

export { GetBulkMoClonerArgs, GetBulkMoClonerResult, GetBulkMoClonerOutputArgs } from "./getBulkMoCloner";
export const getBulkMoCloner: typeof import("./getBulkMoCloner").getBulkMoCloner = null as any;
export const getBulkMoClonerOutput: typeof import("./getBulkMoCloner").getBulkMoClonerOutput = null as any;
utilities.lazyLoad(exports, ["getBulkMoCloner","getBulkMoClonerOutput"], () => require("./getBulkMoCloner"));

export { GetBulkMoDeepClonerArgs, GetBulkMoDeepClonerResult, GetBulkMoDeepClonerOutputArgs } from "./getBulkMoDeepCloner";
export const getBulkMoDeepCloner: typeof import("./getBulkMoDeepCloner").getBulkMoDeepCloner = null as any;
export const getBulkMoDeepClonerOutput: typeof import("./getBulkMoDeepCloner").getBulkMoDeepClonerOutput = null as any;
utilities.lazyLoad(exports, ["getBulkMoDeepCloner","getBulkMoDeepClonerOutput"], () => require("./getBulkMoDeepCloner"));

export { GetBulkMoMergerArgs, GetBulkMoMergerResult, GetBulkMoMergerOutputArgs } from "./getBulkMoMerger";
export const getBulkMoMerger: typeof import("./getBulkMoMerger").getBulkMoMerger = null as any;
export const getBulkMoMergerOutput: typeof import("./getBulkMoMerger").getBulkMoMergerOutput = null as any;
utilities.lazyLoad(exports, ["getBulkMoMerger","getBulkMoMergerOutput"], () => require("./getBulkMoMerger"));

export { GetBulkRequestArgs, GetBulkRequestResult, GetBulkRequestOutputArgs } from "./getBulkRequest";
export const getBulkRequest: typeof import("./getBulkRequest").getBulkRequest = null as any;
export const getBulkRequestOutput: typeof import("./getBulkRequest").getBulkRequestOutput = null as any;
utilities.lazyLoad(exports, ["getBulkRequest","getBulkRequestOutput"], () => require("./getBulkRequest"));

export { GetBulkResultArgs, GetBulkResultResult, GetBulkResultOutputArgs } from "./getBulkResult";
export const getBulkResult: typeof import("./getBulkResult").getBulkResult = null as any;
export const getBulkResultOutput: typeof import("./getBulkResult").getBulkResultOutput = null as any;
utilities.lazyLoad(exports, ["getBulkResult","getBulkResultOutput"], () => require("./getBulkResult"));

export { GetBulkSubRequestObjArgs, GetBulkSubRequestObjResult, GetBulkSubRequestObjOutputArgs } from "./getBulkSubRequestObj";
export const getBulkSubRequestObj: typeof import("./getBulkSubRequestObj").getBulkSubRequestObj = null as any;
export const getBulkSubRequestObjOutput: typeof import("./getBulkSubRequestObj").getBulkSubRequestObjOutput = null as any;
utilities.lazyLoad(exports, ["getBulkSubRequestObj","getBulkSubRequestObjOutput"], () => require("./getBulkSubRequestObj"));

export { GetCapabilityActionsMetaDataArgs, GetCapabilityActionsMetaDataResult, GetCapabilityActionsMetaDataOutputArgs } from "./getCapabilityActionsMetaData";
export const getCapabilityActionsMetaData: typeof import("./getCapabilityActionsMetaData").getCapabilityActionsMetaData = null as any;
export const getCapabilityActionsMetaDataOutput: typeof import("./getCapabilityActionsMetaData").getCapabilityActionsMetaDataOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityActionsMetaData","getCapabilityActionsMetaDataOutput"], () => require("./getCapabilityActionsMetaData"));

export { GetCapabilityAdapterDeprecatedDefArgs, GetCapabilityAdapterDeprecatedDefResult, GetCapabilityAdapterDeprecatedDefOutputArgs } from "./getCapabilityAdapterDeprecatedDef";
export const getCapabilityAdapterDeprecatedDef: typeof import("./getCapabilityAdapterDeprecatedDef").getCapabilityAdapterDeprecatedDef = null as any;
export const getCapabilityAdapterDeprecatedDefOutput: typeof import("./getCapabilityAdapterDeprecatedDef").getCapabilityAdapterDeprecatedDefOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityAdapterDeprecatedDef","getCapabilityAdapterDeprecatedDefOutput"], () => require("./getCapabilityAdapterDeprecatedDef"));

export { GetCapabilityAdapterFirmwareRequirementArgs, GetCapabilityAdapterFirmwareRequirementResult, GetCapabilityAdapterFirmwareRequirementOutputArgs } from "./getCapabilityAdapterFirmwareRequirement";
export const getCapabilityAdapterFirmwareRequirement: typeof import("./getCapabilityAdapterFirmwareRequirement").getCapabilityAdapterFirmwareRequirement = null as any;
export const getCapabilityAdapterFirmwareRequirementOutput: typeof import("./getCapabilityAdapterFirmwareRequirement").getCapabilityAdapterFirmwareRequirementOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityAdapterFirmwareRequirement","getCapabilityAdapterFirmwareRequirementOutput"], () => require("./getCapabilityAdapterFirmwareRequirement"));

export { GetCapabilityAdapterUnitDescriptorArgs, GetCapabilityAdapterUnitDescriptorResult, GetCapabilityAdapterUnitDescriptorOutputArgs } from "./getCapabilityAdapterUnitDescriptor";
export const getCapabilityAdapterUnitDescriptor: typeof import("./getCapabilityAdapterUnitDescriptor").getCapabilityAdapterUnitDescriptor = null as any;
export const getCapabilityAdapterUnitDescriptorOutput: typeof import("./getCapabilityAdapterUnitDescriptor").getCapabilityAdapterUnitDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityAdapterUnitDescriptor","getCapabilityAdapterUnitDescriptorOutput"], () => require("./getCapabilityAdapterUnitDescriptor"));

export { GetCapabilityAdapterUpdateConstraintMetaArgs, GetCapabilityAdapterUpdateConstraintMetaResult, GetCapabilityAdapterUpdateConstraintMetaOutputArgs } from "./getCapabilityAdapterUpdateConstraintMeta";
export const getCapabilityAdapterUpdateConstraintMeta: typeof import("./getCapabilityAdapterUpdateConstraintMeta").getCapabilityAdapterUpdateConstraintMeta = null as any;
export const getCapabilityAdapterUpdateConstraintMetaOutput: typeof import("./getCapabilityAdapterUpdateConstraintMeta").getCapabilityAdapterUpdateConstraintMetaOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityAdapterUpdateConstraintMeta","getCapabilityAdapterUpdateConstraintMetaOutput"], () => require("./getCapabilityAdapterUpdateConstraintMeta"));

export { GetCapabilityAdapterUpgradeSupportMetaArgs, GetCapabilityAdapterUpgradeSupportMetaResult, GetCapabilityAdapterUpgradeSupportMetaOutputArgs } from "./getCapabilityAdapterUpgradeSupportMeta";
export const getCapabilityAdapterUpgradeSupportMeta: typeof import("./getCapabilityAdapterUpgradeSupportMeta").getCapabilityAdapterUpgradeSupportMeta = null as any;
export const getCapabilityAdapterUpgradeSupportMetaOutput: typeof import("./getCapabilityAdapterUpgradeSupportMeta").getCapabilityAdapterUpgradeSupportMetaOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityAdapterUpgradeSupportMeta","getCapabilityAdapterUpgradeSupportMetaOutput"], () => require("./getCapabilityAdapterUpgradeSupportMeta"));

export { GetCapabilityCatalogArgs, GetCapabilityCatalogResult, GetCapabilityCatalogOutputArgs } from "./getCapabilityCatalog";
export const getCapabilityCatalog: typeof import("./getCapabilityCatalog").getCapabilityCatalog = null as any;
export const getCapabilityCatalogOutput: typeof import("./getCapabilityCatalog").getCapabilityCatalogOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityCatalog","getCapabilityCatalogOutput"], () => require("./getCapabilityCatalog"));

export { GetCapabilityChassisDescriptorArgs, GetCapabilityChassisDescriptorResult, GetCapabilityChassisDescriptorOutputArgs } from "./getCapabilityChassisDescriptor";
export const getCapabilityChassisDescriptor: typeof import("./getCapabilityChassisDescriptor").getCapabilityChassisDescriptor = null as any;
export const getCapabilityChassisDescriptorOutput: typeof import("./getCapabilityChassisDescriptor").getCapabilityChassisDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityChassisDescriptor","getCapabilityChassisDescriptorOutput"], () => require("./getCapabilityChassisDescriptor"));

export { GetCapabilityChassisManufacturingDefArgs, GetCapabilityChassisManufacturingDefResult, GetCapabilityChassisManufacturingDefOutputArgs } from "./getCapabilityChassisManufacturingDef";
export const getCapabilityChassisManufacturingDef: typeof import("./getCapabilityChassisManufacturingDef").getCapabilityChassisManufacturingDef = null as any;
export const getCapabilityChassisManufacturingDefOutput: typeof import("./getCapabilityChassisManufacturingDef").getCapabilityChassisManufacturingDefOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityChassisManufacturingDef","getCapabilityChassisManufacturingDefOutput"], () => require("./getCapabilityChassisManufacturingDef"));

export { GetCapabilityChassisUpgradeSupportMetaArgs, GetCapabilityChassisUpgradeSupportMetaResult, GetCapabilityChassisUpgradeSupportMetaOutputArgs } from "./getCapabilityChassisUpgradeSupportMeta";
export const getCapabilityChassisUpgradeSupportMeta: typeof import("./getCapabilityChassisUpgradeSupportMeta").getCapabilityChassisUpgradeSupportMeta = null as any;
export const getCapabilityChassisUpgradeSupportMetaOutput: typeof import("./getCapabilityChassisUpgradeSupportMeta").getCapabilityChassisUpgradeSupportMetaOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityChassisUpgradeSupportMeta","getCapabilityChassisUpgradeSupportMetaOutput"], () => require("./getCapabilityChassisUpgradeSupportMeta"));

export { GetCapabilityCimcFirmwareDescriptorArgs, GetCapabilityCimcFirmwareDescriptorResult, GetCapabilityCimcFirmwareDescriptorOutputArgs } from "./getCapabilityCimcFirmwareDescriptor";
export const getCapabilityCimcFirmwareDescriptor: typeof import("./getCapabilityCimcFirmwareDescriptor").getCapabilityCimcFirmwareDescriptor = null as any;
export const getCapabilityCimcFirmwareDescriptorOutput: typeof import("./getCapabilityCimcFirmwareDescriptor").getCapabilityCimcFirmwareDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityCimcFirmwareDescriptor","getCapabilityCimcFirmwareDescriptorOutput"], () => require("./getCapabilityCimcFirmwareDescriptor"));

export { GetCapabilityCpuEndpointDescriptorArgs, GetCapabilityCpuEndpointDescriptorResult, GetCapabilityCpuEndpointDescriptorOutputArgs } from "./getCapabilityCpuEndpointDescriptor";
export const getCapabilityCpuEndpointDescriptor: typeof import("./getCapabilityCpuEndpointDescriptor").getCapabilityCpuEndpointDescriptor = null as any;
export const getCapabilityCpuEndpointDescriptorOutput: typeof import("./getCapabilityCpuEndpointDescriptor").getCapabilityCpuEndpointDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityCpuEndpointDescriptor","getCapabilityCpuEndpointDescriptorOutput"], () => require("./getCapabilityCpuEndpointDescriptor"));

export { GetCapabilityDimmsEndpointDescriptorArgs, GetCapabilityDimmsEndpointDescriptorResult, GetCapabilityDimmsEndpointDescriptorOutputArgs } from "./getCapabilityDimmsEndpointDescriptor";
export const getCapabilityDimmsEndpointDescriptor: typeof import("./getCapabilityDimmsEndpointDescriptor").getCapabilityDimmsEndpointDescriptor = null as any;
export const getCapabilityDimmsEndpointDescriptorOutput: typeof import("./getCapabilityDimmsEndpointDescriptor").getCapabilityDimmsEndpointDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityDimmsEndpointDescriptor","getCapabilityDimmsEndpointDescriptorOutput"], () => require("./getCapabilityDimmsEndpointDescriptor"));

export { GetCapabilityDrivesEndpointDescriptorArgs, GetCapabilityDrivesEndpointDescriptorResult, GetCapabilityDrivesEndpointDescriptorOutputArgs } from "./getCapabilityDrivesEndpointDescriptor";
export const getCapabilityDrivesEndpointDescriptor: typeof import("./getCapabilityDrivesEndpointDescriptor").getCapabilityDrivesEndpointDescriptor = null as any;
export const getCapabilityDrivesEndpointDescriptorOutput: typeof import("./getCapabilityDrivesEndpointDescriptor").getCapabilityDrivesEndpointDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityDrivesEndpointDescriptor","getCapabilityDrivesEndpointDescriptorOutput"], () => require("./getCapabilityDrivesEndpointDescriptor"));

export { GetCapabilityEquipmentPhysicalDefArgs, GetCapabilityEquipmentPhysicalDefResult, GetCapabilityEquipmentPhysicalDefOutputArgs } from "./getCapabilityEquipmentPhysicalDef";
export const getCapabilityEquipmentPhysicalDef: typeof import("./getCapabilityEquipmentPhysicalDef").getCapabilityEquipmentPhysicalDef = null as any;
export const getCapabilityEquipmentPhysicalDefOutput: typeof import("./getCapabilityEquipmentPhysicalDef").getCapabilityEquipmentPhysicalDefOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityEquipmentPhysicalDef","getCapabilityEquipmentPhysicalDefOutput"], () => require("./getCapabilityEquipmentPhysicalDef"));

export { GetCapabilityEquipmentSlotArrayArgs, GetCapabilityEquipmentSlotArrayResult, GetCapabilityEquipmentSlotArrayOutputArgs } from "./getCapabilityEquipmentSlotArray";
export const getCapabilityEquipmentSlotArray: typeof import("./getCapabilityEquipmentSlotArray").getCapabilityEquipmentSlotArray = null as any;
export const getCapabilityEquipmentSlotArrayOutput: typeof import("./getCapabilityEquipmentSlotArray").getCapabilityEquipmentSlotArrayOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityEquipmentSlotArray","getCapabilityEquipmentSlotArrayOutput"], () => require("./getCapabilityEquipmentSlotArray"));

export { GetCapabilityFanModuleDescriptorArgs, GetCapabilityFanModuleDescriptorResult, GetCapabilityFanModuleDescriptorOutputArgs } from "./getCapabilityFanModuleDescriptor";
export const getCapabilityFanModuleDescriptor: typeof import("./getCapabilityFanModuleDescriptor").getCapabilityFanModuleDescriptor = null as any;
export const getCapabilityFanModuleDescriptorOutput: typeof import("./getCapabilityFanModuleDescriptor").getCapabilityFanModuleDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityFanModuleDescriptor","getCapabilityFanModuleDescriptorOutput"], () => require("./getCapabilityFanModuleDescriptor"));

export { GetCapabilityFanModuleManufacturingDefArgs, GetCapabilityFanModuleManufacturingDefResult, GetCapabilityFanModuleManufacturingDefOutputArgs } from "./getCapabilityFanModuleManufacturingDef";
export const getCapabilityFanModuleManufacturingDef: typeof import("./getCapabilityFanModuleManufacturingDef").getCapabilityFanModuleManufacturingDef = null as any;
export const getCapabilityFanModuleManufacturingDefOutput: typeof import("./getCapabilityFanModuleManufacturingDef").getCapabilityFanModuleManufacturingDefOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityFanModuleManufacturingDef","getCapabilityFanModuleManufacturingDefOutput"], () => require("./getCapabilityFanModuleManufacturingDef"));

export { GetCapabilityFexCapabilityDefArgs, GetCapabilityFexCapabilityDefResult, GetCapabilityFexCapabilityDefOutputArgs } from "./getCapabilityFexCapabilityDef";
export const getCapabilityFexCapabilityDef: typeof import("./getCapabilityFexCapabilityDef").getCapabilityFexCapabilityDef = null as any;
export const getCapabilityFexCapabilityDefOutput: typeof import("./getCapabilityFexCapabilityDef").getCapabilityFexCapabilityDefOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityFexCapabilityDef","getCapabilityFexCapabilityDefOutput"], () => require("./getCapabilityFexCapabilityDef"));

export { GetCapabilityFexDescriptorArgs, GetCapabilityFexDescriptorResult, GetCapabilityFexDescriptorOutputArgs } from "./getCapabilityFexDescriptor";
export const getCapabilityFexDescriptor: typeof import("./getCapabilityFexDescriptor").getCapabilityFexDescriptor = null as any;
export const getCapabilityFexDescriptorOutput: typeof import("./getCapabilityFexDescriptor").getCapabilityFexDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityFexDescriptor","getCapabilityFexDescriptorOutput"], () => require("./getCapabilityFexDescriptor"));

export { GetCapabilityFexManufacturingDefArgs, GetCapabilityFexManufacturingDefResult, GetCapabilityFexManufacturingDefOutputArgs } from "./getCapabilityFexManufacturingDef";
export const getCapabilityFexManufacturingDef: typeof import("./getCapabilityFexManufacturingDef").getCapabilityFexManufacturingDef = null as any;
export const getCapabilityFexManufacturingDefOutput: typeof import("./getCapabilityFexManufacturingDef").getCapabilityFexManufacturingDefOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityFexManufacturingDef","getCapabilityFexManufacturingDefOutput"], () => require("./getCapabilityFexManufacturingDef"));

export { GetCapabilityGpuEndpointDescriptorArgs, GetCapabilityGpuEndpointDescriptorResult, GetCapabilityGpuEndpointDescriptorOutputArgs } from "./getCapabilityGpuEndpointDescriptor";
export const getCapabilityGpuEndpointDescriptor: typeof import("./getCapabilityGpuEndpointDescriptor").getCapabilityGpuEndpointDescriptor = null as any;
export const getCapabilityGpuEndpointDescriptorOutput: typeof import("./getCapabilityGpuEndpointDescriptor").getCapabilityGpuEndpointDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityGpuEndpointDescriptor","getCapabilityGpuEndpointDescriptorOutput"], () => require("./getCapabilityGpuEndpointDescriptor"));

export { GetCapabilityHsuIsoFileSupportMetaArgs, GetCapabilityHsuIsoFileSupportMetaResult, GetCapabilityHsuIsoFileSupportMetaOutputArgs } from "./getCapabilityHsuIsoFileSupportMeta";
export const getCapabilityHsuIsoFileSupportMeta: typeof import("./getCapabilityHsuIsoFileSupportMeta").getCapabilityHsuIsoFileSupportMeta = null as any;
export const getCapabilityHsuIsoFileSupportMetaOutput: typeof import("./getCapabilityHsuIsoFileSupportMeta").getCapabilityHsuIsoFileSupportMetaOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityHsuIsoFileSupportMeta","getCapabilityHsuIsoFileSupportMetaOutput"], () => require("./getCapabilityHsuIsoFileSupportMeta"));

export { GetCapabilityIoCardCapabilityDefArgs, GetCapabilityIoCardCapabilityDefResult, GetCapabilityIoCardCapabilityDefOutputArgs } from "./getCapabilityIoCardCapabilityDef";
export const getCapabilityIoCardCapabilityDef: typeof import("./getCapabilityIoCardCapabilityDef").getCapabilityIoCardCapabilityDef = null as any;
export const getCapabilityIoCardCapabilityDefOutput: typeof import("./getCapabilityIoCardCapabilityDef").getCapabilityIoCardCapabilityDefOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityIoCardCapabilityDef","getCapabilityIoCardCapabilityDefOutput"], () => require("./getCapabilityIoCardCapabilityDef"));

export { GetCapabilityIoCardDescriptorArgs, GetCapabilityIoCardDescriptorResult, GetCapabilityIoCardDescriptorOutputArgs } from "./getCapabilityIoCardDescriptor";
export const getCapabilityIoCardDescriptor: typeof import("./getCapabilityIoCardDescriptor").getCapabilityIoCardDescriptor = null as any;
export const getCapabilityIoCardDescriptorOutput: typeof import("./getCapabilityIoCardDescriptor").getCapabilityIoCardDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityIoCardDescriptor","getCapabilityIoCardDescriptorOutput"], () => require("./getCapabilityIoCardDescriptor"));

export { GetCapabilityIoCardManufacturingDefArgs, GetCapabilityIoCardManufacturingDefResult, GetCapabilityIoCardManufacturingDefOutputArgs } from "./getCapabilityIoCardManufacturingDef";
export const getCapabilityIoCardManufacturingDef: typeof import("./getCapabilityIoCardManufacturingDef").getCapabilityIoCardManufacturingDef = null as any;
export const getCapabilityIoCardManufacturingDefOutput: typeof import("./getCapabilityIoCardManufacturingDef").getCapabilityIoCardManufacturingDefOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityIoCardManufacturingDef","getCapabilityIoCardManufacturingDefOutput"], () => require("./getCapabilityIoCardManufacturingDef"));

export { GetCapabilityIomUpgradeSupportMetaArgs, GetCapabilityIomUpgradeSupportMetaResult, GetCapabilityIomUpgradeSupportMetaOutputArgs } from "./getCapabilityIomUpgradeSupportMeta";
export const getCapabilityIomUpgradeSupportMeta: typeof import("./getCapabilityIomUpgradeSupportMeta").getCapabilityIomUpgradeSupportMeta = null as any;
export const getCapabilityIomUpgradeSupportMetaOutput: typeof import("./getCapabilityIomUpgradeSupportMeta").getCapabilityIomUpgradeSupportMetaOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityIomUpgradeSupportMeta","getCapabilityIomUpgradeSupportMetaOutput"], () => require("./getCapabilityIomUpgradeSupportMeta"));

export { GetCapabilityPortGroupAggregationDefArgs, GetCapabilityPortGroupAggregationDefResult, GetCapabilityPortGroupAggregationDefOutputArgs } from "./getCapabilityPortGroupAggregationDef";
export const getCapabilityPortGroupAggregationDef: typeof import("./getCapabilityPortGroupAggregationDef").getCapabilityPortGroupAggregationDef = null as any;
export const getCapabilityPortGroupAggregationDefOutput: typeof import("./getCapabilityPortGroupAggregationDef").getCapabilityPortGroupAggregationDefOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityPortGroupAggregationDef","getCapabilityPortGroupAggregationDefOutput"], () => require("./getCapabilityPortGroupAggregationDef"));

export { GetCapabilityProcessorUnitUpdateConstraintMetaArgs, GetCapabilityProcessorUnitUpdateConstraintMetaResult, GetCapabilityProcessorUnitUpdateConstraintMetaOutputArgs } from "./getCapabilityProcessorUnitUpdateConstraintMeta";
export const getCapabilityProcessorUnitUpdateConstraintMeta: typeof import("./getCapabilityProcessorUnitUpdateConstraintMeta").getCapabilityProcessorUnitUpdateConstraintMeta = null as any;
export const getCapabilityProcessorUnitUpdateConstraintMetaOutput: typeof import("./getCapabilityProcessorUnitUpdateConstraintMeta").getCapabilityProcessorUnitUpdateConstraintMetaOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityProcessorUnitUpdateConstraintMeta","getCapabilityProcessorUnitUpdateConstraintMetaOutput"], () => require("./getCapabilityProcessorUnitUpdateConstraintMeta"));

export { GetCapabilityPsuDescriptorArgs, GetCapabilityPsuDescriptorResult, GetCapabilityPsuDescriptorOutputArgs } from "./getCapabilityPsuDescriptor";
export const getCapabilityPsuDescriptor: typeof import("./getCapabilityPsuDescriptor").getCapabilityPsuDescriptor = null as any;
export const getCapabilityPsuDescriptorOutput: typeof import("./getCapabilityPsuDescriptor").getCapabilityPsuDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityPsuDescriptor","getCapabilityPsuDescriptorOutput"], () => require("./getCapabilityPsuDescriptor"));

export { GetCapabilityPsuManufacturingDefArgs, GetCapabilityPsuManufacturingDefResult, GetCapabilityPsuManufacturingDefOutputArgs } from "./getCapabilityPsuManufacturingDef";
export const getCapabilityPsuManufacturingDef: typeof import("./getCapabilityPsuManufacturingDef").getCapabilityPsuManufacturingDef = null as any;
export const getCapabilityPsuManufacturingDefOutput: typeof import("./getCapabilityPsuManufacturingDef").getCapabilityPsuManufacturingDefOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityPsuManufacturingDef","getCapabilityPsuManufacturingDefOutput"], () => require("./getCapabilityPsuManufacturingDef"));

export { GetCapabilityServerActionsMetaArgs, GetCapabilityServerActionsMetaResult, GetCapabilityServerActionsMetaOutputArgs } from "./getCapabilityServerActionsMeta";
export const getCapabilityServerActionsMeta: typeof import("./getCapabilityServerActionsMeta").getCapabilityServerActionsMeta = null as any;
export const getCapabilityServerActionsMetaOutput: typeof import("./getCapabilityServerActionsMeta").getCapabilityServerActionsMetaOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityServerActionsMeta","getCapabilityServerActionsMetaOutput"], () => require("./getCapabilityServerActionsMeta"));

export { GetCapabilityServerDescriptorArgs, GetCapabilityServerDescriptorResult, GetCapabilityServerDescriptorOutputArgs } from "./getCapabilityServerDescriptor";
export const getCapabilityServerDescriptor: typeof import("./getCapabilityServerDescriptor").getCapabilityServerDescriptor = null as any;
export const getCapabilityServerDescriptorOutput: typeof import("./getCapabilityServerDescriptor").getCapabilityServerDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityServerDescriptor","getCapabilityServerDescriptorOutput"], () => require("./getCapabilityServerDescriptor"));

export { GetCapabilityServerModelsCapabilityDefArgs, GetCapabilityServerModelsCapabilityDefResult, GetCapabilityServerModelsCapabilityDefOutputArgs } from "./getCapabilityServerModelsCapabilityDef";
export const getCapabilityServerModelsCapabilityDef: typeof import("./getCapabilityServerModelsCapabilityDef").getCapabilityServerModelsCapabilityDef = null as any;
export const getCapabilityServerModelsCapabilityDefOutput: typeof import("./getCapabilityServerModelsCapabilityDef").getCapabilityServerModelsCapabilityDefOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityServerModelsCapabilityDef","getCapabilityServerModelsCapabilityDefOutput"], () => require("./getCapabilityServerModelsCapabilityDef"));

export { GetCapabilityServerSchemaDescriptorArgs, GetCapabilityServerSchemaDescriptorResult, GetCapabilityServerSchemaDescriptorOutputArgs } from "./getCapabilityServerSchemaDescriptor";
export const getCapabilityServerSchemaDescriptor: typeof import("./getCapabilityServerSchemaDescriptor").getCapabilityServerSchemaDescriptor = null as any;
export const getCapabilityServerSchemaDescriptorOutput: typeof import("./getCapabilityServerSchemaDescriptor").getCapabilityServerSchemaDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityServerSchemaDescriptor","getCapabilityServerSchemaDescriptorOutput"], () => require("./getCapabilityServerSchemaDescriptor"));

export { GetCapabilityServerUpgradeSupportMetaArgs, GetCapabilityServerUpgradeSupportMetaResult, GetCapabilityServerUpgradeSupportMetaOutputArgs } from "./getCapabilityServerUpgradeSupportMeta";
export const getCapabilityServerUpgradeSupportMeta: typeof import("./getCapabilityServerUpgradeSupportMeta").getCapabilityServerUpgradeSupportMeta = null as any;
export const getCapabilityServerUpgradeSupportMetaOutput: typeof import("./getCapabilityServerUpgradeSupportMeta").getCapabilityServerUpgradeSupportMetaOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityServerUpgradeSupportMeta","getCapabilityServerUpgradeSupportMetaOutput"], () => require("./getCapabilityServerUpgradeSupportMeta"));

export { GetCapabilitySiocModuleCapabilityDefArgs, GetCapabilitySiocModuleCapabilityDefResult, GetCapabilitySiocModuleCapabilityDefOutputArgs } from "./getCapabilitySiocModuleCapabilityDef";
export const getCapabilitySiocModuleCapabilityDef: typeof import("./getCapabilitySiocModuleCapabilityDef").getCapabilitySiocModuleCapabilityDef = null as any;
export const getCapabilitySiocModuleCapabilityDefOutput: typeof import("./getCapabilitySiocModuleCapabilityDef").getCapabilitySiocModuleCapabilityDefOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilitySiocModuleCapabilityDef","getCapabilitySiocModuleCapabilityDefOutput"], () => require("./getCapabilitySiocModuleCapabilityDef"));

export { GetCapabilitySiocModuleDescriptorArgs, GetCapabilitySiocModuleDescriptorResult, GetCapabilitySiocModuleDescriptorOutputArgs } from "./getCapabilitySiocModuleDescriptor";
export const getCapabilitySiocModuleDescriptor: typeof import("./getCapabilitySiocModuleDescriptor").getCapabilitySiocModuleDescriptor = null as any;
export const getCapabilitySiocModuleDescriptorOutput: typeof import("./getCapabilitySiocModuleDescriptor").getCapabilitySiocModuleDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilitySiocModuleDescriptor","getCapabilitySiocModuleDescriptorOutput"], () => require("./getCapabilitySiocModuleDescriptor"));

export { GetCapabilitySiocModuleManufacturingDefArgs, GetCapabilitySiocModuleManufacturingDefResult, GetCapabilitySiocModuleManufacturingDefOutputArgs } from "./getCapabilitySiocModuleManufacturingDef";
export const getCapabilitySiocModuleManufacturingDef: typeof import("./getCapabilitySiocModuleManufacturingDef").getCapabilitySiocModuleManufacturingDef = null as any;
export const getCapabilitySiocModuleManufacturingDefOutput: typeof import("./getCapabilitySiocModuleManufacturingDef").getCapabilitySiocModuleManufacturingDefOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilitySiocModuleManufacturingDef","getCapabilitySiocModuleManufacturingDefOutput"], () => require("./getCapabilitySiocModuleManufacturingDef"));

export { GetCapabilityStorageControllerUpdateConstraintMetaArgs, GetCapabilityStorageControllerUpdateConstraintMetaResult, GetCapabilityStorageControllerUpdateConstraintMetaOutputArgs } from "./getCapabilityStorageControllerUpdateConstraintMeta";
export const getCapabilityStorageControllerUpdateConstraintMeta: typeof import("./getCapabilityStorageControllerUpdateConstraintMeta").getCapabilityStorageControllerUpdateConstraintMeta = null as any;
export const getCapabilityStorageControllerUpdateConstraintMetaOutput: typeof import("./getCapabilityStorageControllerUpdateConstraintMeta").getCapabilityStorageControllerUpdateConstraintMetaOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityStorageControllerUpdateConstraintMeta","getCapabilityStorageControllerUpdateConstraintMetaOutput"], () => require("./getCapabilityStorageControllerUpdateConstraintMeta"));

export { GetCapabilitySwitchCapabilityArgs, GetCapabilitySwitchCapabilityResult, GetCapabilitySwitchCapabilityOutputArgs } from "./getCapabilitySwitchCapability";
export const getCapabilitySwitchCapability: typeof import("./getCapabilitySwitchCapability").getCapabilitySwitchCapability = null as any;
export const getCapabilitySwitchCapabilityOutput: typeof import("./getCapabilitySwitchCapability").getCapabilitySwitchCapabilityOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilitySwitchCapability","getCapabilitySwitchCapabilityOutput"], () => require("./getCapabilitySwitchCapability"));

export { GetCapabilitySwitchDescriptorArgs, GetCapabilitySwitchDescriptorResult, GetCapabilitySwitchDescriptorOutputArgs } from "./getCapabilitySwitchDescriptor";
export const getCapabilitySwitchDescriptor: typeof import("./getCapabilitySwitchDescriptor").getCapabilitySwitchDescriptor = null as any;
export const getCapabilitySwitchDescriptorOutput: typeof import("./getCapabilitySwitchDescriptor").getCapabilitySwitchDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilitySwitchDescriptor","getCapabilitySwitchDescriptorOutput"], () => require("./getCapabilitySwitchDescriptor"));

export { GetCapabilitySwitchEquipmentInfoArgs, GetCapabilitySwitchEquipmentInfoResult, GetCapabilitySwitchEquipmentInfoOutputArgs } from "./getCapabilitySwitchEquipmentInfo";
export const getCapabilitySwitchEquipmentInfo: typeof import("./getCapabilitySwitchEquipmentInfo").getCapabilitySwitchEquipmentInfo = null as any;
export const getCapabilitySwitchEquipmentInfoOutput: typeof import("./getCapabilitySwitchEquipmentInfo").getCapabilitySwitchEquipmentInfoOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilitySwitchEquipmentInfo","getCapabilitySwitchEquipmentInfoOutput"], () => require("./getCapabilitySwitchEquipmentInfo"));

export { GetCapabilitySwitchManufacturingDefArgs, GetCapabilitySwitchManufacturingDefResult, GetCapabilitySwitchManufacturingDefOutputArgs } from "./getCapabilitySwitchManufacturingDef";
export const getCapabilitySwitchManufacturingDef: typeof import("./getCapabilitySwitchManufacturingDef").getCapabilitySwitchManufacturingDef = null as any;
export const getCapabilitySwitchManufacturingDefOutput: typeof import("./getCapabilitySwitchManufacturingDef").getCapabilitySwitchManufacturingDefOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilitySwitchManufacturingDef","getCapabilitySwitchManufacturingDefOutput"], () => require("./getCapabilitySwitchManufacturingDef"));

export { GetCapabilityTemplateCatalogArgs, GetCapabilityTemplateCatalogResult, GetCapabilityTemplateCatalogOutputArgs } from "./getCapabilityTemplateCatalog";
export const getCapabilityTemplateCatalog: typeof import("./getCapabilityTemplateCatalog").getCapabilityTemplateCatalog = null as any;
export const getCapabilityTemplateCatalogOutput: typeof import("./getCapabilityTemplateCatalog").getCapabilityTemplateCatalogOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityTemplateCatalog","getCapabilityTemplateCatalogOutput"], () => require("./getCapabilityTemplateCatalog"));

export { GetCapabilityUpdateOrderMetaArgs, GetCapabilityUpdateOrderMetaResult, GetCapabilityUpdateOrderMetaOutputArgs } from "./getCapabilityUpdateOrderMeta";
export const getCapabilityUpdateOrderMeta: typeof import("./getCapabilityUpdateOrderMeta").getCapabilityUpdateOrderMeta = null as any;
export const getCapabilityUpdateOrderMetaOutput: typeof import("./getCapabilityUpdateOrderMeta").getCapabilityUpdateOrderMetaOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityUpdateOrderMeta","getCapabilityUpdateOrderMetaOutput"], () => require("./getCapabilityUpdateOrderMeta"));

export { GetCapabilityVicDescriptorArgs, GetCapabilityVicDescriptorResult, GetCapabilityVicDescriptorOutputArgs } from "./getCapabilityVicDescriptor";
export const getCapabilityVicDescriptor: typeof import("./getCapabilityVicDescriptor").getCapabilityVicDescriptor = null as any;
export const getCapabilityVicDescriptorOutput: typeof import("./getCapabilityVicDescriptor").getCapabilityVicDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilityVicDescriptor","getCapabilityVicDescriptorOutput"], () => require("./getCapabilityVicDescriptor"));

export { GetCatalystsdwanConfigGroupArgs, GetCatalystsdwanConfigGroupResult, GetCatalystsdwanConfigGroupOutputArgs } from "./getCatalystsdwanConfigGroup";
export const getCatalystsdwanConfigGroup: typeof import("./getCatalystsdwanConfigGroup").getCatalystsdwanConfigGroup = null as any;
export const getCatalystsdwanConfigGroupOutput: typeof import("./getCatalystsdwanConfigGroup").getCatalystsdwanConfigGroupOutput = null as any;
utilities.lazyLoad(exports, ["getCatalystsdwanConfigGroup","getCatalystsdwanConfigGroupOutput"], () => require("./getCatalystsdwanConfigGroup"));

export { GetCatalystsdwanPolicyGroupArgs, GetCatalystsdwanPolicyGroupResult, GetCatalystsdwanPolicyGroupOutputArgs } from "./getCatalystsdwanPolicyGroup";
export const getCatalystsdwanPolicyGroup: typeof import("./getCatalystsdwanPolicyGroup").getCatalystsdwanPolicyGroup = null as any;
export const getCatalystsdwanPolicyGroupOutput: typeof import("./getCatalystsdwanPolicyGroup").getCatalystsdwanPolicyGroupOutput = null as any;
utilities.lazyLoad(exports, ["getCatalystsdwanPolicyGroup","getCatalystsdwanPolicyGroupOutput"], () => require("./getCatalystsdwanPolicyGroup"));

export { GetCatalystsdwanVedgeDeviceArgs, GetCatalystsdwanVedgeDeviceResult, GetCatalystsdwanVedgeDeviceOutputArgs } from "./getCatalystsdwanVedgeDevice";
export const getCatalystsdwanVedgeDevice: typeof import("./getCatalystsdwanVedgeDevice").getCatalystsdwanVedgeDevice = null as any;
export const getCatalystsdwanVedgeDeviceOutput: typeof import("./getCatalystsdwanVedgeDevice").getCatalystsdwanVedgeDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getCatalystsdwanVedgeDevice","getCatalystsdwanVedgeDeviceOutput"], () => require("./getCatalystsdwanVedgeDevice"));

export { GetCertificatemanagementPolicyArgs, GetCertificatemanagementPolicyResult, GetCertificatemanagementPolicyOutputArgs } from "./getCertificatemanagementPolicy";
export const getCertificatemanagementPolicy: typeof import("./getCertificatemanagementPolicy").getCertificatemanagementPolicy = null as any;
export const getCertificatemanagementPolicyOutput: typeof import("./getCertificatemanagementPolicy").getCertificatemanagementPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCertificatemanagementPolicy","getCertificatemanagementPolicyOutput"], () => require("./getCertificatemanagementPolicy"));

export { GetCertificatemanagementPolicyInventoryArgs, GetCertificatemanagementPolicyInventoryResult, GetCertificatemanagementPolicyInventoryOutputArgs } from "./getCertificatemanagementPolicyInventory";
export const getCertificatemanagementPolicyInventory: typeof import("./getCertificatemanagementPolicyInventory").getCertificatemanagementPolicyInventory = null as any;
export const getCertificatemanagementPolicyInventoryOutput: typeof import("./getCertificatemanagementPolicyInventory").getCertificatemanagementPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getCertificatemanagementPolicyInventory","getCertificatemanagementPolicyInventoryOutput"], () => require("./getCertificatemanagementPolicyInventory"));

export { GetChassisConfigChangeDetailArgs, GetChassisConfigChangeDetailResult, GetChassisConfigChangeDetailOutputArgs } from "./getChassisConfigChangeDetail";
export const getChassisConfigChangeDetail: typeof import("./getChassisConfigChangeDetail").getChassisConfigChangeDetail = null as any;
export const getChassisConfigChangeDetailOutput: typeof import("./getChassisConfigChangeDetail").getChassisConfigChangeDetailOutput = null as any;
utilities.lazyLoad(exports, ["getChassisConfigChangeDetail","getChassisConfigChangeDetailOutput"], () => require("./getChassisConfigChangeDetail"));

export { GetChassisConfigImportArgs, GetChassisConfigImportResult, GetChassisConfigImportOutputArgs } from "./getChassisConfigImport";
export const getChassisConfigImport: typeof import("./getChassisConfigImport").getChassisConfigImport = null as any;
export const getChassisConfigImportOutput: typeof import("./getChassisConfigImport").getChassisConfigImportOutput = null as any;
utilities.lazyLoad(exports, ["getChassisConfigImport","getChassisConfigImportOutput"], () => require("./getChassisConfigImport"));

export { GetChassisConfigResultArgs, GetChassisConfigResultResult, GetChassisConfigResultOutputArgs } from "./getChassisConfigResult";
export const getChassisConfigResult: typeof import("./getChassisConfigResult").getChassisConfigResult = null as any;
export const getChassisConfigResultOutput: typeof import("./getChassisConfigResult").getChassisConfigResultOutput = null as any;
utilities.lazyLoad(exports, ["getChassisConfigResult","getChassisConfigResultOutput"], () => require("./getChassisConfigResult"));

export { GetChassisConfigResultEntryArgs, GetChassisConfigResultEntryResult, GetChassisConfigResultEntryOutputArgs } from "./getChassisConfigResultEntry";
export const getChassisConfigResultEntry: typeof import("./getChassisConfigResultEntry").getChassisConfigResultEntry = null as any;
export const getChassisConfigResultEntryOutput: typeof import("./getChassisConfigResultEntry").getChassisConfigResultEntryOutput = null as any;
utilities.lazyLoad(exports, ["getChassisConfigResultEntry","getChassisConfigResultEntryOutput"], () => require("./getChassisConfigResultEntry"));

export { GetChassisIomProfileArgs, GetChassisIomProfileResult, GetChassisIomProfileOutputArgs } from "./getChassisIomProfile";
export const getChassisIomProfile: typeof import("./getChassisIomProfile").getChassisIomProfile = null as any;
export const getChassisIomProfileOutput: typeof import("./getChassisIomProfile").getChassisIomProfileOutput = null as any;
utilities.lazyLoad(exports, ["getChassisIomProfile","getChassisIomProfileOutput"], () => require("./getChassisIomProfile"));

export { GetChassisProfileArgs, GetChassisProfileResult, GetChassisProfileOutputArgs } from "./getChassisProfile";
export const getChassisProfile: typeof import("./getChassisProfile").getChassisProfile = null as any;
export const getChassisProfileOutput: typeof import("./getChassisProfile").getChassisProfileOutput = null as any;
utilities.lazyLoad(exports, ["getChassisProfile","getChassisProfileOutput"], () => require("./getChassisProfile"));

export { GetChassisProfileTemplateArgs, GetChassisProfileTemplateResult, GetChassisProfileTemplateOutputArgs } from "./getChassisProfileTemplate";
export const getChassisProfileTemplate: typeof import("./getChassisProfileTemplate").getChassisProfileTemplate = null as any;
export const getChassisProfileTemplateOutput: typeof import("./getChassisProfileTemplate").getChassisProfileTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getChassisProfileTemplate","getChassisProfileTemplateOutput"], () => require("./getChassisProfileTemplate"));

export { GetCloudAwsBillingUnitArgs, GetCloudAwsBillingUnitResult, GetCloudAwsBillingUnitOutputArgs } from "./getCloudAwsBillingUnit";
export const getCloudAwsBillingUnit: typeof import("./getCloudAwsBillingUnit").getCloudAwsBillingUnit = null as any;
export const getCloudAwsBillingUnitOutput: typeof import("./getCloudAwsBillingUnit").getCloudAwsBillingUnitOutput = null as any;
utilities.lazyLoad(exports, ["getCloudAwsBillingUnit","getCloudAwsBillingUnitOutput"], () => require("./getCloudAwsBillingUnit"));

export { GetCloudAwsKeyPairArgs, GetCloudAwsKeyPairResult, GetCloudAwsKeyPairOutputArgs } from "./getCloudAwsKeyPair";
export const getCloudAwsKeyPair: typeof import("./getCloudAwsKeyPair").getCloudAwsKeyPair = null as any;
export const getCloudAwsKeyPairOutput: typeof import("./getCloudAwsKeyPair").getCloudAwsKeyPairOutput = null as any;
utilities.lazyLoad(exports, ["getCloudAwsKeyPair","getCloudAwsKeyPairOutput"], () => require("./getCloudAwsKeyPair"));

export { GetCloudAwsNetworkInterfaceArgs, GetCloudAwsNetworkInterfaceResult, GetCloudAwsNetworkInterfaceOutputArgs } from "./getCloudAwsNetworkInterface";
export const getCloudAwsNetworkInterface: typeof import("./getCloudAwsNetworkInterface").getCloudAwsNetworkInterface = null as any;
export const getCloudAwsNetworkInterfaceOutput: typeof import("./getCloudAwsNetworkInterface").getCloudAwsNetworkInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getCloudAwsNetworkInterface","getCloudAwsNetworkInterfaceOutput"], () => require("./getCloudAwsNetworkInterface"));

export { GetCloudAwsOrganizationalUnitArgs, GetCloudAwsOrganizationalUnitResult, GetCloudAwsOrganizationalUnitOutputArgs } from "./getCloudAwsOrganizationalUnit";
export const getCloudAwsOrganizationalUnit: typeof import("./getCloudAwsOrganizationalUnit").getCloudAwsOrganizationalUnit = null as any;
export const getCloudAwsOrganizationalUnitOutput: typeof import("./getCloudAwsOrganizationalUnit").getCloudAwsOrganizationalUnitOutput = null as any;
utilities.lazyLoad(exports, ["getCloudAwsOrganizationalUnit","getCloudAwsOrganizationalUnitOutput"], () => require("./getCloudAwsOrganizationalUnit"));

export { GetCloudAwsSecurityGroupArgs, GetCloudAwsSecurityGroupResult, GetCloudAwsSecurityGroupOutputArgs } from "./getCloudAwsSecurityGroup";
export const getCloudAwsSecurityGroup: typeof import("./getCloudAwsSecurityGroup").getCloudAwsSecurityGroup = null as any;
export const getCloudAwsSecurityGroupOutput: typeof import("./getCloudAwsSecurityGroup").getCloudAwsSecurityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getCloudAwsSecurityGroup","getCloudAwsSecurityGroupOutput"], () => require("./getCloudAwsSecurityGroup"));

export { GetCloudAwsSubnetArgs, GetCloudAwsSubnetResult, GetCloudAwsSubnetOutputArgs } from "./getCloudAwsSubnet";
export const getCloudAwsSubnet: typeof import("./getCloudAwsSubnet").getCloudAwsSubnet = null as any;
export const getCloudAwsSubnetOutput: typeof import("./getCloudAwsSubnet").getCloudAwsSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getCloudAwsSubnet","getCloudAwsSubnetOutput"], () => require("./getCloudAwsSubnet"));

export { GetCloudAwsVirtualMachineArgs, GetCloudAwsVirtualMachineResult, GetCloudAwsVirtualMachineOutputArgs } from "./getCloudAwsVirtualMachine";
export const getCloudAwsVirtualMachine: typeof import("./getCloudAwsVirtualMachine").getCloudAwsVirtualMachine = null as any;
export const getCloudAwsVirtualMachineOutput: typeof import("./getCloudAwsVirtualMachine").getCloudAwsVirtualMachineOutput = null as any;
utilities.lazyLoad(exports, ["getCloudAwsVirtualMachine","getCloudAwsVirtualMachineOutput"], () => require("./getCloudAwsVirtualMachine"));

export { GetCloudAwsVolumeArgs, GetCloudAwsVolumeResult, GetCloudAwsVolumeOutputArgs } from "./getCloudAwsVolume";
export const getCloudAwsVolume: typeof import("./getCloudAwsVolume").getCloudAwsVolume = null as any;
export const getCloudAwsVolumeOutput: typeof import("./getCloudAwsVolume").getCloudAwsVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getCloudAwsVolume","getCloudAwsVolumeOutput"], () => require("./getCloudAwsVolume"));

export { GetCloudAwsVpcArgs, GetCloudAwsVpcResult, GetCloudAwsVpcOutputArgs } from "./getCloudAwsVpc";
export const getCloudAwsVpc: typeof import("./getCloudAwsVpc").getCloudAwsVpc = null as any;
export const getCloudAwsVpcOutput: typeof import("./getCloudAwsVpc").getCloudAwsVpcOutput = null as any;
utilities.lazyLoad(exports, ["getCloudAwsVpc","getCloudAwsVpcOutput"], () => require("./getCloudAwsVpc"));

export { GetCloudRegionsArgs, GetCloudRegionsResult, GetCloudRegionsOutputArgs } from "./getCloudRegions";
export const getCloudRegions: typeof import("./getCloudRegions").getCloudRegions = null as any;
export const getCloudRegionsOutput: typeof import("./getCloudRegions").getCloudRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudRegions","getCloudRegionsOutput"], () => require("./getCloudRegions"));

export { GetCloudSkuContainerTypeArgs, GetCloudSkuContainerTypeResult, GetCloudSkuContainerTypeOutputArgs } from "./getCloudSkuContainerType";
export const getCloudSkuContainerType: typeof import("./getCloudSkuContainerType").getCloudSkuContainerType = null as any;
export const getCloudSkuContainerTypeOutput: typeof import("./getCloudSkuContainerType").getCloudSkuContainerTypeOutput = null as any;
utilities.lazyLoad(exports, ["getCloudSkuContainerType","getCloudSkuContainerTypeOutput"], () => require("./getCloudSkuContainerType"));

export { GetCloudSkuDatabaseTypeArgs, GetCloudSkuDatabaseTypeResult, GetCloudSkuDatabaseTypeOutputArgs } from "./getCloudSkuDatabaseType";
export const getCloudSkuDatabaseType: typeof import("./getCloudSkuDatabaseType").getCloudSkuDatabaseType = null as any;
export const getCloudSkuDatabaseTypeOutput: typeof import("./getCloudSkuDatabaseType").getCloudSkuDatabaseTypeOutput = null as any;
utilities.lazyLoad(exports, ["getCloudSkuDatabaseType","getCloudSkuDatabaseTypeOutput"], () => require("./getCloudSkuDatabaseType"));

export { GetCloudSkuInstanceTypeArgs, GetCloudSkuInstanceTypeResult, GetCloudSkuInstanceTypeOutputArgs } from "./getCloudSkuInstanceType";
export const getCloudSkuInstanceType: typeof import("./getCloudSkuInstanceType").getCloudSkuInstanceType = null as any;
export const getCloudSkuInstanceTypeOutput: typeof import("./getCloudSkuInstanceType").getCloudSkuInstanceTypeOutput = null as any;
utilities.lazyLoad(exports, ["getCloudSkuInstanceType","getCloudSkuInstanceTypeOutput"], () => require("./getCloudSkuInstanceType"));

export { GetCloudSkuNetworkTypeArgs, GetCloudSkuNetworkTypeResult, GetCloudSkuNetworkTypeOutputArgs } from "./getCloudSkuNetworkType";
export const getCloudSkuNetworkType: typeof import("./getCloudSkuNetworkType").getCloudSkuNetworkType = null as any;
export const getCloudSkuNetworkTypeOutput: typeof import("./getCloudSkuNetworkType").getCloudSkuNetworkTypeOutput = null as any;
utilities.lazyLoad(exports, ["getCloudSkuNetworkType","getCloudSkuNetworkTypeOutput"], () => require("./getCloudSkuNetworkType"));

export { GetCloudSkuRegionRateCardsArgs, GetCloudSkuRegionRateCardsResult, GetCloudSkuRegionRateCardsOutputArgs } from "./getCloudSkuRegionRateCards";
export const getCloudSkuRegionRateCards: typeof import("./getCloudSkuRegionRateCards").getCloudSkuRegionRateCards = null as any;
export const getCloudSkuRegionRateCardsOutput: typeof import("./getCloudSkuRegionRateCards").getCloudSkuRegionRateCardsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudSkuRegionRateCards","getCloudSkuRegionRateCardsOutput"], () => require("./getCloudSkuRegionRateCards"));

export { GetCloudSkuVolumeTypeArgs, GetCloudSkuVolumeTypeResult, GetCloudSkuVolumeTypeOutputArgs } from "./getCloudSkuVolumeType";
export const getCloudSkuVolumeType: typeof import("./getCloudSkuVolumeType").getCloudSkuVolumeType = null as any;
export const getCloudSkuVolumeTypeOutput: typeof import("./getCloudSkuVolumeType").getCloudSkuVolumeTypeOutput = null as any;
utilities.lazyLoad(exports, ["getCloudSkuVolumeType","getCloudSkuVolumeTypeOutput"], () => require("./getCloudSkuVolumeType"));

export { GetCloudTfcAgentpoolArgs, GetCloudTfcAgentpoolResult, GetCloudTfcAgentpoolOutputArgs } from "./getCloudTfcAgentpool";
export const getCloudTfcAgentpool: typeof import("./getCloudTfcAgentpool").getCloudTfcAgentpool = null as any;
export const getCloudTfcAgentpoolOutput: typeof import("./getCloudTfcAgentpool").getCloudTfcAgentpoolOutput = null as any;
utilities.lazyLoad(exports, ["getCloudTfcAgentpool","getCloudTfcAgentpoolOutput"], () => require("./getCloudTfcAgentpool"));

export { GetCloudTfcOrganizationArgs, GetCloudTfcOrganizationResult, GetCloudTfcOrganizationOutputArgs } from "./getCloudTfcOrganization";
export const getCloudTfcOrganization: typeof import("./getCloudTfcOrganization").getCloudTfcOrganization = null as any;
export const getCloudTfcOrganizationOutput: typeof import("./getCloudTfcOrganization").getCloudTfcOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getCloudTfcOrganization","getCloudTfcOrganizationOutput"], () => require("./getCloudTfcOrganization"));

export { GetCloudTfcWorkspaceArgs, GetCloudTfcWorkspaceResult, GetCloudTfcWorkspaceOutputArgs } from "./getCloudTfcWorkspace";
export const getCloudTfcWorkspace: typeof import("./getCloudTfcWorkspace").getCloudTfcWorkspace = null as any;
export const getCloudTfcWorkspaceOutput: typeof import("./getCloudTfcWorkspace").getCloudTfcWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getCloudTfcWorkspace","getCloudTfcWorkspaceOutput"], () => require("./getCloudTfcWorkspace"));

export { GetCommHttpProxyPolicyArgs, GetCommHttpProxyPolicyResult, GetCommHttpProxyPolicyOutputArgs } from "./getCommHttpProxyPolicy";
export const getCommHttpProxyPolicy: typeof import("./getCommHttpProxyPolicy").getCommHttpProxyPolicy = null as any;
export const getCommHttpProxyPolicyOutput: typeof import("./getCommHttpProxyPolicy").getCommHttpProxyPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCommHttpProxyPolicy","getCommHttpProxyPolicyOutput"], () => require("./getCommHttpProxyPolicy"));

export { GetComputeBladeArgs, GetComputeBladeResult, GetComputeBladeOutputArgs } from "./getComputeBlade";
export const getComputeBlade: typeof import("./getComputeBlade").getComputeBlade = null as any;
export const getComputeBladeOutput: typeof import("./getComputeBlade").getComputeBladeOutput = null as any;
utilities.lazyLoad(exports, ["getComputeBlade","getComputeBladeOutput"], () => require("./getComputeBlade"));

export { GetComputeBladeIdentityArgs, GetComputeBladeIdentityResult, GetComputeBladeIdentityOutputArgs } from "./getComputeBladeIdentity";
export const getComputeBladeIdentity: typeof import("./getComputeBladeIdentity").getComputeBladeIdentity = null as any;
export const getComputeBladeIdentityOutput: typeof import("./getComputeBladeIdentity").getComputeBladeIdentityOutput = null as any;
utilities.lazyLoad(exports, ["getComputeBladeIdentity","getComputeBladeIdentityOutput"], () => require("./getComputeBladeIdentity"));

export { GetComputeBoardArgs, GetComputeBoardResult, GetComputeBoardOutputArgs } from "./getComputeBoard";
export const getComputeBoard: typeof import("./getComputeBoard").getComputeBoard = null as any;
export const getComputeBoardOutput: typeof import("./getComputeBoard").getComputeBoardOutput = null as any;
utilities.lazyLoad(exports, ["getComputeBoard","getComputeBoardOutput"], () => require("./getComputeBoard"));

export { GetComputeDownloadStatusArgs, GetComputeDownloadStatusResult, GetComputeDownloadStatusOutputArgs } from "./getComputeDownloadStatus";
export const getComputeDownloadStatus: typeof import("./getComputeDownloadStatus").getComputeDownloadStatus = null as any;
export const getComputeDownloadStatusOutput: typeof import("./getComputeDownloadStatus").getComputeDownloadStatusOutput = null as any;
utilities.lazyLoad(exports, ["getComputeDownloadStatus","getComputeDownloadStatusOutput"], () => require("./getComputeDownloadStatus"));

export { GetComputeHostUtilityOperationArgs, GetComputeHostUtilityOperationResult, GetComputeHostUtilityOperationOutputArgs } from "./getComputeHostUtilityOperation";
export const getComputeHostUtilityOperation: typeof import("./getComputeHostUtilityOperation").getComputeHostUtilityOperation = null as any;
export const getComputeHostUtilityOperationOutput: typeof import("./getComputeHostUtilityOperation").getComputeHostUtilityOperationOutput = null as any;
utilities.lazyLoad(exports, ["getComputeHostUtilityOperation","getComputeHostUtilityOperationOutput"], () => require("./getComputeHostUtilityOperation"));

export { GetComputeMappingArgs, GetComputeMappingResult, GetComputeMappingOutputArgs } from "./getComputeMapping";
export const getComputeMapping: typeof import("./getComputeMapping").getComputeMapping = null as any;
export const getComputeMappingOutput: typeof import("./getComputeMapping").getComputeMappingOutput = null as any;
utilities.lazyLoad(exports, ["getComputeMapping","getComputeMappingOutput"], () => require("./getComputeMapping"));

export { GetComputePersonalityArgs, GetComputePersonalityResult, GetComputePersonalityOutputArgs } from "./getComputePersonality";
export const getComputePersonality: typeof import("./getComputePersonality").getComputePersonality = null as any;
export const getComputePersonalityOutput: typeof import("./getComputePersonality").getComputePersonalityOutput = null as any;
utilities.lazyLoad(exports, ["getComputePersonality","getComputePersonalityOutput"], () => require("./getComputePersonality"));

export { GetComputePhysicalSummaryArgs, GetComputePhysicalSummaryResult, GetComputePhysicalSummaryOutputArgs } from "./getComputePhysicalSummary";
export const getComputePhysicalSummary: typeof import("./getComputePhysicalSummary").getComputePhysicalSummary = null as any;
export const getComputePhysicalSummaryOutput: typeof import("./getComputePhysicalSummary").getComputePhysicalSummaryOutput = null as any;
utilities.lazyLoad(exports, ["getComputePhysicalSummary","getComputePhysicalSummaryOutput"], () => require("./getComputePhysicalSummary"));

export { GetComputeRackUnitArgs, GetComputeRackUnitResult, GetComputeRackUnitOutputArgs } from "./getComputeRackUnit";
export const getComputeRackUnit: typeof import("./getComputeRackUnit").getComputeRackUnit = null as any;
export const getComputeRackUnitOutput: typeof import("./getComputeRackUnit").getComputeRackUnitOutput = null as any;
utilities.lazyLoad(exports, ["getComputeRackUnit","getComputeRackUnitOutput"], () => require("./getComputeRackUnit"));

export { GetComputeRackUnitIdentityArgs, GetComputeRackUnitIdentityResult, GetComputeRackUnitIdentityOutputArgs } from "./getComputeRackUnitIdentity";
export const getComputeRackUnitIdentity: typeof import("./getComputeRackUnitIdentity").getComputeRackUnitIdentity = null as any;
export const getComputeRackUnitIdentityOutput: typeof import("./getComputeRackUnitIdentity").getComputeRackUnitIdentityOutput = null as any;
utilities.lazyLoad(exports, ["getComputeRackUnitIdentity","getComputeRackUnitIdentityOutput"], () => require("./getComputeRackUnitIdentity"));

export { GetComputeServerIdPoolArgs, GetComputeServerIdPoolResult, GetComputeServerIdPoolOutputArgs } from "./getComputeServerIdPool";
export const getComputeServerIdPool: typeof import("./getComputeServerIdPool").getComputeServerIdPool = null as any;
export const getComputeServerIdPoolOutput: typeof import("./getComputeServerIdPool").getComputeServerIdPoolOutput = null as any;
utilities.lazyLoad(exports, ["getComputeServerIdPool","getComputeServerIdPoolOutput"], () => require("./getComputeServerIdPool"));

export { GetComputeServerPowerPolicyArgs, GetComputeServerPowerPolicyResult, GetComputeServerPowerPolicyOutputArgs } from "./getComputeServerPowerPolicy";
export const getComputeServerPowerPolicy: typeof import("./getComputeServerPowerPolicy").getComputeServerPowerPolicy = null as any;
export const getComputeServerPowerPolicyOutput: typeof import("./getComputeServerPowerPolicy").getComputeServerPowerPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getComputeServerPowerPolicy","getComputeServerPowerPolicyOutput"], () => require("./getComputeServerPowerPolicy"));

export { GetComputeServerSettingArgs, GetComputeServerSettingResult, GetComputeServerSettingOutputArgs } from "./getComputeServerSetting";
export const getComputeServerSetting: typeof import("./getComputeServerSetting").getComputeServerSetting = null as any;
export const getComputeServerSettingOutput: typeof import("./getComputeServerSetting").getComputeServerSettingOutput = null as any;
utilities.lazyLoad(exports, ["getComputeServerSetting","getComputeServerSettingOutput"], () => require("./getComputeServerSetting"));

export { GetComputeVmediaArgs, GetComputeVmediaResult, GetComputeVmediaOutputArgs } from "./getComputeVmedia";
export const getComputeVmedia: typeof import("./getComputeVmedia").getComputeVmedia = null as any;
export const getComputeVmediaOutput: typeof import("./getComputeVmedia").getComputeVmediaOutput = null as any;
utilities.lazyLoad(exports, ["getComputeVmedia","getComputeVmediaOutput"], () => require("./getComputeVmedia"));

export { GetCondAlarmArgs, GetCondAlarmResult, GetCondAlarmOutputArgs } from "./getCondAlarm";
export const getCondAlarm: typeof import("./getCondAlarm").getCondAlarm = null as any;
export const getCondAlarmOutput: typeof import("./getCondAlarm").getCondAlarmOutput = null as any;
utilities.lazyLoad(exports, ["getCondAlarm","getCondAlarmOutput"], () => require("./getCondAlarm"));

export { GetCondAlarmAggregationArgs, GetCondAlarmAggregationResult, GetCondAlarmAggregationOutputArgs } from "./getCondAlarmAggregation";
export const getCondAlarmAggregation: typeof import("./getCondAlarmAggregation").getCondAlarmAggregation = null as any;
export const getCondAlarmAggregationOutput: typeof import("./getCondAlarmAggregation").getCondAlarmAggregationOutput = null as any;
utilities.lazyLoad(exports, ["getCondAlarmAggregation","getCondAlarmAggregationOutput"], () => require("./getCondAlarmAggregation"));

export { GetCondAlarmClassificationArgs, GetCondAlarmClassificationResult, GetCondAlarmClassificationOutputArgs } from "./getCondAlarmClassification";
export const getCondAlarmClassification: typeof import("./getCondAlarmClassification").getCondAlarmClassification = null as any;
export const getCondAlarmClassificationOutput: typeof import("./getCondAlarmClassification").getCondAlarmClassificationOutput = null as any;
utilities.lazyLoad(exports, ["getCondAlarmClassification","getCondAlarmClassificationOutput"], () => require("./getCondAlarmClassification"));

export { GetCondAlarmDefinitionArgs, GetCondAlarmDefinitionResult, GetCondAlarmDefinitionOutputArgs } from "./getCondAlarmDefinition";
export const getCondAlarmDefinition: typeof import("./getCondAlarmDefinition").getCondAlarmDefinition = null as any;
export const getCondAlarmDefinitionOutput: typeof import("./getCondAlarmDefinition").getCondAlarmDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getCondAlarmDefinition","getCondAlarmDefinitionOutput"], () => require("./getCondAlarmDefinition"));

export { GetCondAlarmSuppressionArgs, GetCondAlarmSuppressionResult, GetCondAlarmSuppressionOutputArgs } from "./getCondAlarmSuppression";
export const getCondAlarmSuppression: typeof import("./getCondAlarmSuppression").getCondAlarmSuppression = null as any;
export const getCondAlarmSuppressionOutput: typeof import("./getCondAlarmSuppression").getCondAlarmSuppressionOutput = null as any;
utilities.lazyLoad(exports, ["getCondAlarmSuppression","getCondAlarmSuppressionOutput"], () => require("./getCondAlarmSuppression"));

export { GetCondHclStatusArgs, GetCondHclStatusResult, GetCondHclStatusOutputArgs } from "./getCondHclStatus";
export const getCondHclStatus: typeof import("./getCondHclStatus").getCondHclStatus = null as any;
export const getCondHclStatusOutput: typeof import("./getCondHclStatus").getCondHclStatusOutput = null as any;
utilities.lazyLoad(exports, ["getCondHclStatus","getCondHclStatusOutput"], () => require("./getCondHclStatus"));

export { GetCondHclStatusDetailArgs, GetCondHclStatusDetailResult, GetCondHclStatusDetailOutputArgs } from "./getCondHclStatusDetail";
export const getCondHclStatusDetail: typeof import("./getCondHclStatusDetail").getCondHclStatusDetail = null as any;
export const getCondHclStatusDetailOutput: typeof import("./getCondHclStatusDetail").getCondHclStatusDetailOutput = null as any;
utilities.lazyLoad(exports, ["getCondHclStatusDetail","getCondHclStatusDetailOutput"], () => require("./getCondHclStatusDetail"));

export { GetCondHclStatusJobArgs, GetCondHclStatusJobResult, GetCondHclStatusJobOutputArgs } from "./getCondHclStatusJob";
export const getCondHclStatusJob: typeof import("./getCondHclStatusJob").getCondHclStatusJob = null as any;
export const getCondHclStatusJobOutput: typeof import("./getCondHclStatusJob").getCondHclStatusJobOutput = null as any;
utilities.lazyLoad(exports, ["getCondHclStatusJob","getCondHclStatusJobOutput"], () => require("./getCondHclStatusJob"));

export { GetConnectorpackConnectorPackUpgradeArgs, GetConnectorpackConnectorPackUpgradeResult, GetConnectorpackConnectorPackUpgradeOutputArgs } from "./getConnectorpackConnectorPackUpgrade";
export const getConnectorpackConnectorPackUpgrade: typeof import("./getConnectorpackConnectorPackUpgrade").getConnectorpackConnectorPackUpgrade = null as any;
export const getConnectorpackConnectorPackUpgradeOutput: typeof import("./getConnectorpackConnectorPackUpgrade").getConnectorpackConnectorPackUpgradeOutput = null as any;
utilities.lazyLoad(exports, ["getConnectorpackConnectorPackUpgrade","getConnectorpackConnectorPackUpgradeOutput"], () => require("./getConnectorpackConnectorPackUpgrade"));

export { GetConnectorpackUpgradeImpactArgs, GetConnectorpackUpgradeImpactResult, GetConnectorpackUpgradeImpactOutputArgs } from "./getConnectorpackUpgradeImpact";
export const getConnectorpackUpgradeImpact: typeof import("./getConnectorpackUpgradeImpact").getConnectorpackUpgradeImpact = null as any;
export const getConnectorpackUpgradeImpactOutput: typeof import("./getConnectorpackUpgradeImpact").getConnectorpackUpgradeImpactOutput = null as any;
utilities.lazyLoad(exports, ["getConnectorpackUpgradeImpact","getConnectorpackUpgradeImpactOutput"], () => require("./getConnectorpackUpgradeImpact"));

export { GetConsoleConsoleConfigArgs, GetConsoleConsoleConfigResult, GetConsoleConsoleConfigOutputArgs } from "./getConsoleConsoleConfig";
export const getConsoleConsoleConfig: typeof import("./getConsoleConsoleConfig").getConsoleConsoleConfig = null as any;
export const getConsoleConsoleConfigOutput: typeof import("./getConsoleConsoleConfig").getConsoleConsoleConfigOutput = null as any;
utilities.lazyLoad(exports, ["getConsoleConsoleConfig","getConsoleConsoleConfigOutput"], () => require("./getConsoleConsoleConfig"));

export { GetConvergedinfraAdapterComplianceDetailsArgs, GetConvergedinfraAdapterComplianceDetailsResult, GetConvergedinfraAdapterComplianceDetailsOutputArgs } from "./getConvergedinfraAdapterComplianceDetails";
export const getConvergedinfraAdapterComplianceDetails: typeof import("./getConvergedinfraAdapterComplianceDetails").getConvergedinfraAdapterComplianceDetails = null as any;
export const getConvergedinfraAdapterComplianceDetailsOutput: typeof import("./getConvergedinfraAdapterComplianceDetails").getConvergedinfraAdapterComplianceDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getConvergedinfraAdapterComplianceDetails","getConvergedinfraAdapterComplianceDetailsOutput"], () => require("./getConvergedinfraAdapterComplianceDetails"));

export { GetConvergedinfraPodArgs, GetConvergedinfraPodResult, GetConvergedinfraPodOutputArgs } from "./getConvergedinfraPod";
export const getConvergedinfraPod: typeof import("./getConvergedinfraPod").getConvergedinfraPod = null as any;
export const getConvergedinfraPodOutput: typeof import("./getConvergedinfraPod").getConvergedinfraPodOutput = null as any;
utilities.lazyLoad(exports, ["getConvergedinfraPod","getConvergedinfraPodOutput"], () => require("./getConvergedinfraPod"));

export { GetConvergedinfraPodComplianceInfoArgs, GetConvergedinfraPodComplianceInfoResult, GetConvergedinfraPodComplianceInfoOutputArgs } from "./getConvergedinfraPodComplianceInfo";
export const getConvergedinfraPodComplianceInfo: typeof import("./getConvergedinfraPodComplianceInfo").getConvergedinfraPodComplianceInfo = null as any;
export const getConvergedinfraPodComplianceInfoOutput: typeof import("./getConvergedinfraPodComplianceInfo").getConvergedinfraPodComplianceInfoOutput = null as any;
utilities.lazyLoad(exports, ["getConvergedinfraPodComplianceInfo","getConvergedinfraPodComplianceInfoOutput"], () => require("./getConvergedinfraPodComplianceInfo"));

export { GetConvergedinfraServerComplianceDetailsArgs, GetConvergedinfraServerComplianceDetailsResult, GetConvergedinfraServerComplianceDetailsOutputArgs } from "./getConvergedinfraServerComplianceDetails";
export const getConvergedinfraServerComplianceDetails: typeof import("./getConvergedinfraServerComplianceDetails").getConvergedinfraServerComplianceDetails = null as any;
export const getConvergedinfraServerComplianceDetailsOutput: typeof import("./getConvergedinfraServerComplianceDetails").getConvergedinfraServerComplianceDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getConvergedinfraServerComplianceDetails","getConvergedinfraServerComplianceDetailsOutput"], () => require("./getConvergedinfraServerComplianceDetails"));

export { GetConvergedinfraStorageComplianceDetailsArgs, GetConvergedinfraStorageComplianceDetailsResult, GetConvergedinfraStorageComplianceDetailsOutputArgs } from "./getConvergedinfraStorageComplianceDetails";
export const getConvergedinfraStorageComplianceDetails: typeof import("./getConvergedinfraStorageComplianceDetails").getConvergedinfraStorageComplianceDetails = null as any;
export const getConvergedinfraStorageComplianceDetailsOutput: typeof import("./getConvergedinfraStorageComplianceDetails").getConvergedinfraStorageComplianceDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getConvergedinfraStorageComplianceDetails","getConvergedinfraStorageComplianceDetailsOutput"], () => require("./getConvergedinfraStorageComplianceDetails"));

export { GetConvergedinfraSwitchComplianceDetailsArgs, GetConvergedinfraSwitchComplianceDetailsResult, GetConvergedinfraSwitchComplianceDetailsOutputArgs } from "./getConvergedinfraSwitchComplianceDetails";
export const getConvergedinfraSwitchComplianceDetails: typeof import("./getConvergedinfraSwitchComplianceDetails").getConvergedinfraSwitchComplianceDetails = null as any;
export const getConvergedinfraSwitchComplianceDetailsOutput: typeof import("./getConvergedinfraSwitchComplianceDetails").getConvergedinfraSwitchComplianceDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getConvergedinfraSwitchComplianceDetails","getConvergedinfraSwitchComplianceDetailsOutput"], () => require("./getConvergedinfraSwitchComplianceDetails"));

export { GetCrdCustomResourceArgs, GetCrdCustomResourceResult, GetCrdCustomResourceOutputArgs } from "./getCrdCustomResource";
export const getCrdCustomResource: typeof import("./getCrdCustomResource").getCrdCustomResource = null as any;
export const getCrdCustomResourceOutput: typeof import("./getCrdCustomResource").getCrdCustomResourceOutput = null as any;
utilities.lazyLoad(exports, ["getCrdCustomResource","getCrdCustomResourceOutput"], () => require("./getCrdCustomResource"));

export { GetDeviceconnectorPolicyArgs, GetDeviceconnectorPolicyResult, GetDeviceconnectorPolicyOutputArgs } from "./getDeviceconnectorPolicy";
export const getDeviceconnectorPolicy: typeof import("./getDeviceconnectorPolicy").getDeviceconnectorPolicy = null as any;
export const getDeviceconnectorPolicyOutput: typeof import("./getDeviceconnectorPolicy").getDeviceconnectorPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceconnectorPolicy","getDeviceconnectorPolicyOutput"], () => require("./getDeviceconnectorPolicy"));

export { GetDnacDeviceArgs, GetDnacDeviceResult, GetDnacDeviceOutputArgs } from "./getDnacDevice";
export const getDnacDevice: typeof import("./getDnacDevice").getDnacDevice = null as any;
export const getDnacDeviceOutput: typeof import("./getDnacDevice").getDnacDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getDnacDevice","getDnacDeviceOutput"], () => require("./getDnacDevice"));

export { GetDnacDeviceInterfaceArgs, GetDnacDeviceInterfaceResult, GetDnacDeviceInterfaceOutputArgs } from "./getDnacDeviceInterface";
export const getDnacDeviceInterface: typeof import("./getDnacDeviceInterface").getDnacDeviceInterface = null as any;
export const getDnacDeviceInterfaceOutput: typeof import("./getDnacDeviceInterface").getDnacDeviceInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getDnacDeviceInterface","getDnacDeviceInterfaceOutput"], () => require("./getDnacDeviceInterface"));

export { GetDnacExternalBorderNodeArgs, GetDnacExternalBorderNodeResult, GetDnacExternalBorderNodeOutputArgs } from "./getDnacExternalBorderNode";
export const getDnacExternalBorderNode: typeof import("./getDnacExternalBorderNode").getDnacExternalBorderNode = null as any;
export const getDnacExternalBorderNodeOutput: typeof import("./getDnacExternalBorderNode").getDnacExternalBorderNodeOutput = null as any;
utilities.lazyLoad(exports, ["getDnacExternalBorderNode","getDnacExternalBorderNodeOutput"], () => require("./getDnacExternalBorderNode"));

export { GetDnacExternalBorderNodeInterfaceArgs, GetDnacExternalBorderNodeInterfaceResult, GetDnacExternalBorderNodeInterfaceOutputArgs } from "./getDnacExternalBorderNodeInterface";
export const getDnacExternalBorderNodeInterface: typeof import("./getDnacExternalBorderNodeInterface").getDnacExternalBorderNodeInterface = null as any;
export const getDnacExternalBorderNodeInterfaceOutput: typeof import("./getDnacExternalBorderNodeInterface").getDnacExternalBorderNodeInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getDnacExternalBorderNodeInterface","getDnacExternalBorderNodeInterfaceOutput"], () => require("./getDnacExternalBorderNodeInterface"));

export { GetDnacFabricSiteArgs, GetDnacFabricSiteResult, GetDnacFabricSiteOutputArgs } from "./getDnacFabricSite";
export const getDnacFabricSite: typeof import("./getDnacFabricSite").getDnacFabricSite = null as any;
export const getDnacFabricSiteOutput: typeof import("./getDnacFabricSite").getDnacFabricSiteOutput = null as any;
utilities.lazyLoad(exports, ["getDnacFabricSite","getDnacFabricSiteOutput"], () => require("./getDnacFabricSite"));

export { GetDnacSiteArgs, GetDnacSiteResult, GetDnacSiteOutputArgs } from "./getDnacSite";
export const getDnacSite: typeof import("./getDnacSite").getDnacSite = null as any;
export const getDnacSiteOutput: typeof import("./getDnacSite").getDnacSiteOutput = null as any;
utilities.lazyLoad(exports, ["getDnacSite","getDnacSiteOutput"], () => require("./getDnacSite"));

export { GetDnacSiteIpPoolArgs, GetDnacSiteIpPoolResult, GetDnacSiteIpPoolOutputArgs } from "./getDnacSiteIpPool";
export const getDnacSiteIpPool: typeof import("./getDnacSiteIpPool").getDnacSiteIpPool = null as any;
export const getDnacSiteIpPoolOutput: typeof import("./getDnacSiteIpPool").getDnacSiteIpPoolOutput = null as any;
utilities.lazyLoad(exports, ["getDnacSiteIpPool","getDnacSiteIpPoolOutput"], () => require("./getDnacSiteIpPool"));

export { GetDnacTemplateArgs, GetDnacTemplateResult, GetDnacTemplateOutputArgs } from "./getDnacTemplate";
export const getDnacTemplate: typeof import("./getDnacTemplate").getDnacTemplate = null as any;
export const getDnacTemplateOutput: typeof import("./getDnacTemplate").getDnacTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getDnacTemplate","getDnacTemplateOutput"], () => require("./getDnacTemplate"));

export { GetDnacTransitArgs, GetDnacTransitResult, GetDnacTransitOutputArgs } from "./getDnacTransit";
export const getDnacTransit: typeof import("./getDnacTransit").getDnacTransit = null as any;
export const getDnacTransitOutput: typeof import("./getDnacTransit").getDnacTransitOutput = null as any;
utilities.lazyLoad(exports, ["getDnacTransit","getDnacTransitOutput"], () => require("./getDnacTransit"));

export { GetDnacVirtualNetworkFabricSiteArgs, GetDnacVirtualNetworkFabricSiteResult, GetDnacVirtualNetworkFabricSiteOutputArgs } from "./getDnacVirtualNetworkFabricSite";
export const getDnacVirtualNetworkFabricSite: typeof import("./getDnacVirtualNetworkFabricSite").getDnacVirtualNetworkFabricSite = null as any;
export const getDnacVirtualNetworkFabricSiteOutput: typeof import("./getDnacVirtualNetworkFabricSite").getDnacVirtualNetworkFabricSiteOutput = null as any;
utilities.lazyLoad(exports, ["getDnacVirtualNetworkFabricSite","getDnacVirtualNetworkFabricSiteOutput"], () => require("./getDnacVirtualNetworkFabricSite"));

export { GetEquipmentChassisArgs, GetEquipmentChassisResult, GetEquipmentChassisOutputArgs } from "./getEquipmentChassis";
export const getEquipmentChassis: typeof import("./getEquipmentChassis").getEquipmentChassis = null as any;
export const getEquipmentChassisOutput: typeof import("./getEquipmentChassis").getEquipmentChassisOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentChassis","getEquipmentChassisOutput"], () => require("./getEquipmentChassis"));

export { GetEquipmentChassisIdPoolArgs, GetEquipmentChassisIdPoolResult, GetEquipmentChassisIdPoolOutputArgs } from "./getEquipmentChassisIdPool";
export const getEquipmentChassisIdPool: typeof import("./getEquipmentChassisIdPool").getEquipmentChassisIdPool = null as any;
export const getEquipmentChassisIdPoolOutput: typeof import("./getEquipmentChassisIdPool").getEquipmentChassisIdPoolOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentChassisIdPool","getEquipmentChassisIdPoolOutput"], () => require("./getEquipmentChassisIdPool"));

export { GetEquipmentChassisIdentityArgs, GetEquipmentChassisIdentityResult, GetEquipmentChassisIdentityOutputArgs } from "./getEquipmentChassisIdentity";
export const getEquipmentChassisIdentity: typeof import("./getEquipmentChassisIdentity").getEquipmentChassisIdentity = null as any;
export const getEquipmentChassisIdentityOutput: typeof import("./getEquipmentChassisIdentity").getEquipmentChassisIdentityOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentChassisIdentity","getEquipmentChassisIdentityOutput"], () => require("./getEquipmentChassisIdentity"));

export { GetEquipmentChassisOperationArgs, GetEquipmentChassisOperationResult, GetEquipmentChassisOperationOutputArgs } from "./getEquipmentChassisOperation";
export const getEquipmentChassisOperation: typeof import("./getEquipmentChassisOperation").getEquipmentChassisOperation = null as any;
export const getEquipmentChassisOperationOutput: typeof import("./getEquipmentChassisOperation").getEquipmentChassisOperationOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentChassisOperation","getEquipmentChassisOperationOutput"], () => require("./getEquipmentChassisOperation"));

export { GetEquipmentDeviceSummaryArgs, GetEquipmentDeviceSummaryResult, GetEquipmentDeviceSummaryOutputArgs } from "./getEquipmentDeviceSummary";
export const getEquipmentDeviceSummary: typeof import("./getEquipmentDeviceSummary").getEquipmentDeviceSummary = null as any;
export const getEquipmentDeviceSummaryOutput: typeof import("./getEquipmentDeviceSummary").getEquipmentDeviceSummaryOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentDeviceSummary","getEquipmentDeviceSummaryOutput"], () => require("./getEquipmentDeviceSummary"));

export { GetEquipmentEndPointLogArgs, GetEquipmentEndPointLogResult, GetEquipmentEndPointLogOutputArgs } from "./getEquipmentEndPointLog";
export const getEquipmentEndPointLog: typeof import("./getEquipmentEndPointLog").getEquipmentEndPointLog = null as any;
export const getEquipmentEndPointLogOutput: typeof import("./getEquipmentEndPointLog").getEquipmentEndPointLogOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentEndPointLog","getEquipmentEndPointLogOutput"], () => require("./getEquipmentEndPointLog"));

export { GetEquipmentExpanderModuleArgs, GetEquipmentExpanderModuleResult, GetEquipmentExpanderModuleOutputArgs } from "./getEquipmentExpanderModule";
export const getEquipmentExpanderModule: typeof import("./getEquipmentExpanderModule").getEquipmentExpanderModule = null as any;
export const getEquipmentExpanderModuleOutput: typeof import("./getEquipmentExpanderModule").getEquipmentExpanderModuleOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentExpanderModule","getEquipmentExpanderModuleOutput"], () => require("./getEquipmentExpanderModule"));

export { GetEquipmentFanArgs, GetEquipmentFanResult, GetEquipmentFanOutputArgs } from "./getEquipmentFan";
export const getEquipmentFan: typeof import("./getEquipmentFan").getEquipmentFan = null as any;
export const getEquipmentFanOutput: typeof import("./getEquipmentFan").getEquipmentFanOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentFan","getEquipmentFanOutput"], () => require("./getEquipmentFan"));

export { GetEquipmentFanControlArgs, GetEquipmentFanControlResult, GetEquipmentFanControlOutputArgs } from "./getEquipmentFanControl";
export const getEquipmentFanControl: typeof import("./getEquipmentFanControl").getEquipmentFanControl = null as any;
export const getEquipmentFanControlOutput: typeof import("./getEquipmentFanControl").getEquipmentFanControlOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentFanControl","getEquipmentFanControlOutput"], () => require("./getEquipmentFanControl"));

export { GetEquipmentFanModuleArgs, GetEquipmentFanModuleResult, GetEquipmentFanModuleOutputArgs } from "./getEquipmentFanModule";
export const getEquipmentFanModule: typeof import("./getEquipmentFanModule").getEquipmentFanModule = null as any;
export const getEquipmentFanModuleOutput: typeof import("./getEquipmentFanModule").getEquipmentFanModuleOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentFanModule","getEquipmentFanModuleOutput"], () => require("./getEquipmentFanModule"));

export { GetEquipmentFexArgs, GetEquipmentFexResult, GetEquipmentFexOutputArgs } from "./getEquipmentFex";
export const getEquipmentFex: typeof import("./getEquipmentFex").getEquipmentFex = null as any;
export const getEquipmentFexOutput: typeof import("./getEquipmentFex").getEquipmentFexOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentFex","getEquipmentFexOutput"], () => require("./getEquipmentFex"));

export { GetEquipmentFexIdentityArgs, GetEquipmentFexIdentityResult, GetEquipmentFexIdentityOutputArgs } from "./getEquipmentFexIdentity";
export const getEquipmentFexIdentity: typeof import("./getEquipmentFexIdentity").getEquipmentFexIdentity = null as any;
export const getEquipmentFexIdentityOutput: typeof import("./getEquipmentFexIdentity").getEquipmentFexIdentityOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentFexIdentity","getEquipmentFexIdentityOutput"], () => require("./getEquipmentFexIdentity"));

export { GetEquipmentFexOperationArgs, GetEquipmentFexOperationResult, GetEquipmentFexOperationOutputArgs } from "./getEquipmentFexOperation";
export const getEquipmentFexOperation: typeof import("./getEquipmentFexOperation").getEquipmentFexOperation = null as any;
export const getEquipmentFexOperationOutput: typeof import("./getEquipmentFexOperation").getEquipmentFexOperationOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentFexOperation","getEquipmentFexOperationOutput"], () => require("./getEquipmentFexOperation"));

export { GetEquipmentFruArgs, GetEquipmentFruResult, GetEquipmentFruOutputArgs } from "./getEquipmentFru";
export const getEquipmentFru: typeof import("./getEquipmentFru").getEquipmentFru = null as any;
export const getEquipmentFruOutput: typeof import("./getEquipmentFru").getEquipmentFruOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentFru","getEquipmentFruOutput"], () => require("./getEquipmentFru"));

export { GetEquipmentHybridDriveSlotArgs, GetEquipmentHybridDriveSlotResult, GetEquipmentHybridDriveSlotOutputArgs } from "./getEquipmentHybridDriveSlot";
export const getEquipmentHybridDriveSlot: typeof import("./getEquipmentHybridDriveSlot").getEquipmentHybridDriveSlot = null as any;
export const getEquipmentHybridDriveSlotOutput: typeof import("./getEquipmentHybridDriveSlot").getEquipmentHybridDriveSlotOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentHybridDriveSlot","getEquipmentHybridDriveSlotOutput"], () => require("./getEquipmentHybridDriveSlot"));

export { GetEquipmentIoCardArgs, GetEquipmentIoCardResult, GetEquipmentIoCardOutputArgs } from "./getEquipmentIoCard";
export const getEquipmentIoCard: typeof import("./getEquipmentIoCard").getEquipmentIoCard = null as any;
export const getEquipmentIoCardOutput: typeof import("./getEquipmentIoCard").getEquipmentIoCardOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentIoCard","getEquipmentIoCardOutput"], () => require("./getEquipmentIoCard"));

export { GetEquipmentIoCardOperationArgs, GetEquipmentIoCardOperationResult, GetEquipmentIoCardOperationOutputArgs } from "./getEquipmentIoCardOperation";
export const getEquipmentIoCardOperation: typeof import("./getEquipmentIoCardOperation").getEquipmentIoCardOperation = null as any;
export const getEquipmentIoCardOperationOutput: typeof import("./getEquipmentIoCardOperation").getEquipmentIoCardOperationOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentIoCardOperation","getEquipmentIoCardOperationOutput"], () => require("./getEquipmentIoCardOperation"));

export { GetEquipmentIoExpanderArgs, GetEquipmentIoExpanderResult, GetEquipmentIoExpanderOutputArgs } from "./getEquipmentIoExpander";
export const getEquipmentIoExpander: typeof import("./getEquipmentIoExpander").getEquipmentIoExpander = null as any;
export const getEquipmentIoExpanderOutput: typeof import("./getEquipmentIoExpander").getEquipmentIoExpanderOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentIoExpander","getEquipmentIoExpanderOutput"], () => require("./getEquipmentIoExpander"));

export { GetEquipmentLocatorLedArgs, GetEquipmentLocatorLedResult, GetEquipmentLocatorLedOutputArgs } from "./getEquipmentLocatorLed";
export const getEquipmentLocatorLed: typeof import("./getEquipmentLocatorLed").getEquipmentLocatorLed = null as any;
export const getEquipmentLocatorLedOutput: typeof import("./getEquipmentLocatorLed").getEquipmentLocatorLedOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentLocatorLed","getEquipmentLocatorLedOutput"], () => require("./getEquipmentLocatorLed"));

export { GetEquipmentLogDownloadArgs, GetEquipmentLogDownloadResult, GetEquipmentLogDownloadOutputArgs } from "./getEquipmentLogDownload";
export const getEquipmentLogDownload: typeof import("./getEquipmentLogDownload").getEquipmentLogDownload = null as any;
export const getEquipmentLogDownloadOutput: typeof import("./getEquipmentLogDownload").getEquipmentLogDownloadOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentLogDownload","getEquipmentLogDownloadOutput"], () => require("./getEquipmentLogDownload"));

export { GetEquipmentPsuArgs, GetEquipmentPsuResult, GetEquipmentPsuOutputArgs } from "./getEquipmentPsu";
export const getEquipmentPsu: typeof import("./getEquipmentPsu").getEquipmentPsu = null as any;
export const getEquipmentPsuOutput: typeof import("./getEquipmentPsu").getEquipmentPsuOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentPsu","getEquipmentPsuOutput"], () => require("./getEquipmentPsu"));

export { GetEquipmentPsuControlArgs, GetEquipmentPsuControlResult, GetEquipmentPsuControlOutputArgs } from "./getEquipmentPsuControl";
export const getEquipmentPsuControl: typeof import("./getEquipmentPsuControl").getEquipmentPsuControl = null as any;
export const getEquipmentPsuControlOutput: typeof import("./getEquipmentPsuControl").getEquipmentPsuControlOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentPsuControl","getEquipmentPsuControlOutput"], () => require("./getEquipmentPsuControl"));

export { GetEquipmentRackEnclosureArgs, GetEquipmentRackEnclosureResult, GetEquipmentRackEnclosureOutputArgs } from "./getEquipmentRackEnclosure";
export const getEquipmentRackEnclosure: typeof import("./getEquipmentRackEnclosure").getEquipmentRackEnclosure = null as any;
export const getEquipmentRackEnclosureOutput: typeof import("./getEquipmentRackEnclosure").getEquipmentRackEnclosureOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentRackEnclosure","getEquipmentRackEnclosureOutput"], () => require("./getEquipmentRackEnclosure"));

export { GetEquipmentRackEnclosureSlotArgs, GetEquipmentRackEnclosureSlotResult, GetEquipmentRackEnclosureSlotOutputArgs } from "./getEquipmentRackEnclosureSlot";
export const getEquipmentRackEnclosureSlot: typeof import("./getEquipmentRackEnclosureSlot").getEquipmentRackEnclosureSlot = null as any;
export const getEquipmentRackEnclosureSlotOutput: typeof import("./getEquipmentRackEnclosureSlot").getEquipmentRackEnclosureSlotOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentRackEnclosureSlot","getEquipmentRackEnclosureSlotOutput"], () => require("./getEquipmentRackEnclosureSlot"));

export { GetEquipmentSensorArgs, GetEquipmentSensorResult, GetEquipmentSensorOutputArgs } from "./getEquipmentSensor";
export const getEquipmentSensor: typeof import("./getEquipmentSensor").getEquipmentSensor = null as any;
export const getEquipmentSensorOutput: typeof import("./getEquipmentSensor").getEquipmentSensorOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentSensor","getEquipmentSensorOutput"], () => require("./getEquipmentSensor"));

export { GetEquipmentSharedIoModuleArgs, GetEquipmentSharedIoModuleResult, GetEquipmentSharedIoModuleOutputArgs } from "./getEquipmentSharedIoModule";
export const getEquipmentSharedIoModule: typeof import("./getEquipmentSharedIoModule").getEquipmentSharedIoModule = null as any;
export const getEquipmentSharedIoModuleOutput: typeof import("./getEquipmentSharedIoModule").getEquipmentSharedIoModuleOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentSharedIoModule","getEquipmentSharedIoModuleOutput"], () => require("./getEquipmentSharedIoModule"));

export { GetEquipmentSwitchCardArgs, GetEquipmentSwitchCardResult, GetEquipmentSwitchCardOutputArgs } from "./getEquipmentSwitchCard";
export const getEquipmentSwitchCard: typeof import("./getEquipmentSwitchCard").getEquipmentSwitchCard = null as any;
export const getEquipmentSwitchCardOutput: typeof import("./getEquipmentSwitchCard").getEquipmentSwitchCardOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentSwitchCard","getEquipmentSwitchCardOutput"], () => require("./getEquipmentSwitchCard"));

export { GetEquipmentSwitchOperationArgs, GetEquipmentSwitchOperationResult, GetEquipmentSwitchOperationOutputArgs } from "./getEquipmentSwitchOperation";
export const getEquipmentSwitchOperation: typeof import("./getEquipmentSwitchOperation").getEquipmentSwitchOperation = null as any;
export const getEquipmentSwitchOperationOutput: typeof import("./getEquipmentSwitchOperation").getEquipmentSwitchOperationOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentSwitchOperation","getEquipmentSwitchOperationOutput"], () => require("./getEquipmentSwitchOperation"));

export { GetEquipmentSystemIoControllerArgs, GetEquipmentSystemIoControllerResult, GetEquipmentSystemIoControllerOutputArgs } from "./getEquipmentSystemIoController";
export const getEquipmentSystemIoController: typeof import("./getEquipmentSystemIoController").getEquipmentSystemIoController = null as any;
export const getEquipmentSystemIoControllerOutput: typeof import("./getEquipmentSystemIoController").getEquipmentSystemIoControllerOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentSystemIoController","getEquipmentSystemIoControllerOutput"], () => require("./getEquipmentSystemIoController"));

export { GetEquipmentTpmArgs, GetEquipmentTpmResult, GetEquipmentTpmOutputArgs } from "./getEquipmentTpm";
export const getEquipmentTpm: typeof import("./getEquipmentTpm").getEquipmentTpm = null as any;
export const getEquipmentTpmOutput: typeof import("./getEquipmentTpm").getEquipmentTpmOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentTpm","getEquipmentTpmOutput"], () => require("./getEquipmentTpm"));

export { GetEquipmentTransceiverArgs, GetEquipmentTransceiverResult, GetEquipmentTransceiverOutputArgs } from "./getEquipmentTransceiver";
export const getEquipmentTransceiver: typeof import("./getEquipmentTransceiver").getEquipmentTransceiver = null as any;
export const getEquipmentTransceiverOutput: typeof import("./getEquipmentTransceiver").getEquipmentTransceiverOutput = null as any;
utilities.lazyLoad(exports, ["getEquipmentTransceiver","getEquipmentTransceiverOutput"], () => require("./getEquipmentTransceiver"));

export { GetEtherHostPortArgs, GetEtherHostPortResult, GetEtherHostPortOutputArgs } from "./getEtherHostPort";
export const getEtherHostPort: typeof import("./getEtherHostPort").getEtherHostPort = null as any;
export const getEtherHostPortOutput: typeof import("./getEtherHostPort").getEtherHostPortOutput = null as any;
utilities.lazyLoad(exports, ["getEtherHostPort","getEtherHostPortOutput"], () => require("./getEtherHostPort"));

export { GetEtherNetworkPortArgs, GetEtherNetworkPortResult, GetEtherNetworkPortOutputArgs } from "./getEtherNetworkPort";
export const getEtherNetworkPort: typeof import("./getEtherNetworkPort").getEtherNetworkPort = null as any;
export const getEtherNetworkPortOutput: typeof import("./getEtherNetworkPort").getEtherNetworkPortOutput = null as any;
utilities.lazyLoad(exports, ["getEtherNetworkPort","getEtherNetworkPortOutput"], () => require("./getEtherNetworkPort"));

export { GetEtherPhysicalPortArgs, GetEtherPhysicalPortResult, GetEtherPhysicalPortOutputArgs } from "./getEtherPhysicalPort";
export const getEtherPhysicalPort: typeof import("./getEtherPhysicalPort").getEtherPhysicalPort = null as any;
export const getEtherPhysicalPortOutput: typeof import("./getEtherPhysicalPort").getEtherPhysicalPortOutput = null as any;
utilities.lazyLoad(exports, ["getEtherPhysicalPort","getEtherPhysicalPortOutput"], () => require("./getEtherPhysicalPort"));

export { GetEtherPortChannelArgs, GetEtherPortChannelResult, GetEtherPortChannelOutputArgs } from "./getEtherPortChannel";
export const getEtherPortChannel: typeof import("./getEtherPortChannel").getEtherPortChannel = null as any;
export const getEtherPortChannelOutput: typeof import("./getEtherPortChannel").getEtherPortChannelOutput = null as any;
utilities.lazyLoad(exports, ["getEtherPortChannel","getEtherPortChannelOutput"], () => require("./getEtherPortChannel"));

export { GetExternalsiteAuthorizationArgs, GetExternalsiteAuthorizationResult, GetExternalsiteAuthorizationOutputArgs } from "./getExternalsiteAuthorization";
export const getExternalsiteAuthorization: typeof import("./getExternalsiteAuthorization").getExternalsiteAuthorization = null as any;
export const getExternalsiteAuthorizationOutput: typeof import("./getExternalsiteAuthorization").getExternalsiteAuthorizationOutput = null as any;
utilities.lazyLoad(exports, ["getExternalsiteAuthorization","getExternalsiteAuthorizationOutput"], () => require("./getExternalsiteAuthorization"));

export { GetFabricAppliancePcRoleArgs, GetFabricAppliancePcRoleResult, GetFabricAppliancePcRoleOutputArgs } from "./getFabricAppliancePcRole";
export const getFabricAppliancePcRole: typeof import("./getFabricAppliancePcRole").getFabricAppliancePcRole = null as any;
export const getFabricAppliancePcRoleOutput: typeof import("./getFabricAppliancePcRole").getFabricAppliancePcRoleOutput = null as any;
utilities.lazyLoad(exports, ["getFabricAppliancePcRole","getFabricAppliancePcRoleOutput"], () => require("./getFabricAppliancePcRole"));

export { GetFabricApplianceRoleArgs, GetFabricApplianceRoleResult, GetFabricApplianceRoleOutputArgs } from "./getFabricApplianceRole";
export const getFabricApplianceRole: typeof import("./getFabricApplianceRole").getFabricApplianceRole = null as any;
export const getFabricApplianceRoleOutput: typeof import("./getFabricApplianceRole").getFabricApplianceRoleOutput = null as any;
utilities.lazyLoad(exports, ["getFabricApplianceRole","getFabricApplianceRoleOutput"], () => require("./getFabricApplianceRole"));

export { GetFabricConfigChangeDetailArgs, GetFabricConfigChangeDetailResult, GetFabricConfigChangeDetailOutputArgs } from "./getFabricConfigChangeDetail";
export const getFabricConfigChangeDetail: typeof import("./getFabricConfigChangeDetail").getFabricConfigChangeDetail = null as any;
export const getFabricConfigChangeDetailOutput: typeof import("./getFabricConfigChangeDetail").getFabricConfigChangeDetailOutput = null as any;
utilities.lazyLoad(exports, ["getFabricConfigChangeDetail","getFabricConfigChangeDetailOutput"], () => require("./getFabricConfigChangeDetail"));

export { GetFabricConfigResultArgs, GetFabricConfigResultResult, GetFabricConfigResultOutputArgs } from "./getFabricConfigResult";
export const getFabricConfigResult: typeof import("./getFabricConfigResult").getFabricConfigResult = null as any;
export const getFabricConfigResultOutput: typeof import("./getFabricConfigResult").getFabricConfigResultOutput = null as any;
utilities.lazyLoad(exports, ["getFabricConfigResult","getFabricConfigResultOutput"], () => require("./getFabricConfigResult"));

export { GetFabricConfigResultEntryArgs, GetFabricConfigResultEntryResult, GetFabricConfigResultEntryOutputArgs } from "./getFabricConfigResultEntry";
export const getFabricConfigResultEntry: typeof import("./getFabricConfigResultEntry").getFabricConfigResultEntry = null as any;
export const getFabricConfigResultEntryOutput: typeof import("./getFabricConfigResultEntry").getFabricConfigResultEntryOutput = null as any;
utilities.lazyLoad(exports, ["getFabricConfigResultEntry","getFabricConfigResultEntryOutput"], () => require("./getFabricConfigResultEntry"));

export { GetFabricElementIdentityArgs, GetFabricElementIdentityResult, GetFabricElementIdentityOutputArgs } from "./getFabricElementIdentity";
export const getFabricElementIdentity: typeof import("./getFabricElementIdentity").getFabricElementIdentity = null as any;
export const getFabricElementIdentityOutput: typeof import("./getFabricElementIdentity").getFabricElementIdentityOutput = null as any;
utilities.lazyLoad(exports, ["getFabricElementIdentity","getFabricElementIdentityOutput"], () => require("./getFabricElementIdentity"));

export { GetFabricEthNetworkControlPolicyArgs, GetFabricEthNetworkControlPolicyResult, GetFabricEthNetworkControlPolicyOutputArgs } from "./getFabricEthNetworkControlPolicy";
export const getFabricEthNetworkControlPolicy: typeof import("./getFabricEthNetworkControlPolicy").getFabricEthNetworkControlPolicy = null as any;
export const getFabricEthNetworkControlPolicyOutput: typeof import("./getFabricEthNetworkControlPolicy").getFabricEthNetworkControlPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFabricEthNetworkControlPolicy","getFabricEthNetworkControlPolicyOutput"], () => require("./getFabricEthNetworkControlPolicy"));

export { GetFabricEthNetworkControlPolicyInventoryArgs, GetFabricEthNetworkControlPolicyInventoryResult, GetFabricEthNetworkControlPolicyInventoryOutputArgs } from "./getFabricEthNetworkControlPolicyInventory";
export const getFabricEthNetworkControlPolicyInventory: typeof import("./getFabricEthNetworkControlPolicyInventory").getFabricEthNetworkControlPolicyInventory = null as any;
export const getFabricEthNetworkControlPolicyInventoryOutput: typeof import("./getFabricEthNetworkControlPolicyInventory").getFabricEthNetworkControlPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getFabricEthNetworkControlPolicyInventory","getFabricEthNetworkControlPolicyInventoryOutput"], () => require("./getFabricEthNetworkControlPolicyInventory"));

export { GetFabricEthNetworkGroupPolicyArgs, GetFabricEthNetworkGroupPolicyResult, GetFabricEthNetworkGroupPolicyOutputArgs } from "./getFabricEthNetworkGroupPolicy";
export const getFabricEthNetworkGroupPolicy: typeof import("./getFabricEthNetworkGroupPolicy").getFabricEthNetworkGroupPolicy = null as any;
export const getFabricEthNetworkGroupPolicyOutput: typeof import("./getFabricEthNetworkGroupPolicy").getFabricEthNetworkGroupPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFabricEthNetworkGroupPolicy","getFabricEthNetworkGroupPolicyOutput"], () => require("./getFabricEthNetworkGroupPolicy"));

export { GetFabricEthNetworkGroupPolicyInventoryArgs, GetFabricEthNetworkGroupPolicyInventoryResult, GetFabricEthNetworkGroupPolicyInventoryOutputArgs } from "./getFabricEthNetworkGroupPolicyInventory";
export const getFabricEthNetworkGroupPolicyInventory: typeof import("./getFabricEthNetworkGroupPolicyInventory").getFabricEthNetworkGroupPolicyInventory = null as any;
export const getFabricEthNetworkGroupPolicyInventoryOutput: typeof import("./getFabricEthNetworkGroupPolicyInventory").getFabricEthNetworkGroupPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getFabricEthNetworkGroupPolicyInventory","getFabricEthNetworkGroupPolicyInventoryOutput"], () => require("./getFabricEthNetworkGroupPolicyInventory"));

export { GetFabricEthNetworkPolicyArgs, GetFabricEthNetworkPolicyResult, GetFabricEthNetworkPolicyOutputArgs } from "./getFabricEthNetworkPolicy";
export const getFabricEthNetworkPolicy: typeof import("./getFabricEthNetworkPolicy").getFabricEthNetworkPolicy = null as any;
export const getFabricEthNetworkPolicyOutput: typeof import("./getFabricEthNetworkPolicy").getFabricEthNetworkPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFabricEthNetworkPolicy","getFabricEthNetworkPolicyOutput"], () => require("./getFabricEthNetworkPolicy"));

export { GetFabricFcNetworkPolicyArgs, GetFabricFcNetworkPolicyResult, GetFabricFcNetworkPolicyOutputArgs } from "./getFabricFcNetworkPolicy";
export const getFabricFcNetworkPolicy: typeof import("./getFabricFcNetworkPolicy").getFabricFcNetworkPolicy = null as any;
export const getFabricFcNetworkPolicyOutput: typeof import("./getFabricFcNetworkPolicy").getFabricFcNetworkPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFabricFcNetworkPolicy","getFabricFcNetworkPolicyOutput"], () => require("./getFabricFcNetworkPolicy"));

export { GetFabricFcStorageRoleArgs, GetFabricFcStorageRoleResult, GetFabricFcStorageRoleOutputArgs } from "./getFabricFcStorageRole";
export const getFabricFcStorageRole: typeof import("./getFabricFcStorageRole").getFabricFcStorageRole = null as any;
export const getFabricFcStorageRoleOutput: typeof import("./getFabricFcStorageRole").getFabricFcStorageRoleOutput = null as any;
utilities.lazyLoad(exports, ["getFabricFcStorageRole","getFabricFcStorageRoleOutput"], () => require("./getFabricFcStorageRole"));

export { GetFabricFcUplinkPcRoleArgs, GetFabricFcUplinkPcRoleResult, GetFabricFcUplinkPcRoleOutputArgs } from "./getFabricFcUplinkPcRole";
export const getFabricFcUplinkPcRole: typeof import("./getFabricFcUplinkPcRole").getFabricFcUplinkPcRole = null as any;
export const getFabricFcUplinkPcRoleOutput: typeof import("./getFabricFcUplinkPcRole").getFabricFcUplinkPcRoleOutput = null as any;
utilities.lazyLoad(exports, ["getFabricFcUplinkPcRole","getFabricFcUplinkPcRoleOutput"], () => require("./getFabricFcUplinkPcRole"));

export { GetFabricFcUplinkRoleArgs, GetFabricFcUplinkRoleResult, GetFabricFcUplinkRoleOutputArgs } from "./getFabricFcUplinkRole";
export const getFabricFcUplinkRole: typeof import("./getFabricFcUplinkRole").getFabricFcUplinkRole = null as any;
export const getFabricFcUplinkRoleOutput: typeof import("./getFabricFcUplinkRole").getFabricFcUplinkRoleOutput = null as any;
utilities.lazyLoad(exports, ["getFabricFcUplinkRole","getFabricFcUplinkRoleOutput"], () => require("./getFabricFcUplinkRole"));

export { GetFabricFcZonePolicyArgs, GetFabricFcZonePolicyResult, GetFabricFcZonePolicyOutputArgs } from "./getFabricFcZonePolicy";
export const getFabricFcZonePolicy: typeof import("./getFabricFcZonePolicy").getFabricFcZonePolicy = null as any;
export const getFabricFcZonePolicyOutput: typeof import("./getFabricFcZonePolicy").getFabricFcZonePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFabricFcZonePolicy","getFabricFcZonePolicyOutput"], () => require("./getFabricFcZonePolicy"));

export { GetFabricFcoeUplinkPcRoleArgs, GetFabricFcoeUplinkPcRoleResult, GetFabricFcoeUplinkPcRoleOutputArgs } from "./getFabricFcoeUplinkPcRole";
export const getFabricFcoeUplinkPcRole: typeof import("./getFabricFcoeUplinkPcRole").getFabricFcoeUplinkPcRole = null as any;
export const getFabricFcoeUplinkPcRoleOutput: typeof import("./getFabricFcoeUplinkPcRole").getFabricFcoeUplinkPcRoleOutput = null as any;
utilities.lazyLoad(exports, ["getFabricFcoeUplinkPcRole","getFabricFcoeUplinkPcRoleOutput"], () => require("./getFabricFcoeUplinkPcRole"));

export { GetFabricFcoeUplinkRoleArgs, GetFabricFcoeUplinkRoleResult, GetFabricFcoeUplinkRoleOutputArgs } from "./getFabricFcoeUplinkRole";
export const getFabricFcoeUplinkRole: typeof import("./getFabricFcoeUplinkRole").getFabricFcoeUplinkRole = null as any;
export const getFabricFcoeUplinkRoleOutput: typeof import("./getFabricFcoeUplinkRole").getFabricFcoeUplinkRoleOutput = null as any;
utilities.lazyLoad(exports, ["getFabricFcoeUplinkRole","getFabricFcoeUplinkRoleOutput"], () => require("./getFabricFcoeUplinkRole"));

export { GetFabricFlowControlPolicyArgs, GetFabricFlowControlPolicyResult, GetFabricFlowControlPolicyOutputArgs } from "./getFabricFlowControlPolicy";
export const getFabricFlowControlPolicy: typeof import("./getFabricFlowControlPolicy").getFabricFlowControlPolicy = null as any;
export const getFabricFlowControlPolicyOutput: typeof import("./getFabricFlowControlPolicy").getFabricFlowControlPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFabricFlowControlPolicy","getFabricFlowControlPolicyOutput"], () => require("./getFabricFlowControlPolicy"));

export { GetFabricLanPinGroupArgs, GetFabricLanPinGroupResult, GetFabricLanPinGroupOutputArgs } from "./getFabricLanPinGroup";
export const getFabricLanPinGroup: typeof import("./getFabricLanPinGroup").getFabricLanPinGroup = null as any;
export const getFabricLanPinGroupOutput: typeof import("./getFabricLanPinGroup").getFabricLanPinGroupOutput = null as any;
utilities.lazyLoad(exports, ["getFabricLanPinGroup","getFabricLanPinGroupOutput"], () => require("./getFabricLanPinGroup"));

export { GetFabricLinkAggregationPolicyArgs, GetFabricLinkAggregationPolicyResult, GetFabricLinkAggregationPolicyOutputArgs } from "./getFabricLinkAggregationPolicy";
export const getFabricLinkAggregationPolicy: typeof import("./getFabricLinkAggregationPolicy").getFabricLinkAggregationPolicy = null as any;
export const getFabricLinkAggregationPolicyOutput: typeof import("./getFabricLinkAggregationPolicy").getFabricLinkAggregationPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFabricLinkAggregationPolicy","getFabricLinkAggregationPolicyOutput"], () => require("./getFabricLinkAggregationPolicy"));

export { GetFabricLinkControlPolicyArgs, GetFabricLinkControlPolicyResult, GetFabricLinkControlPolicyOutputArgs } from "./getFabricLinkControlPolicy";
export const getFabricLinkControlPolicy: typeof import("./getFabricLinkControlPolicy").getFabricLinkControlPolicy = null as any;
export const getFabricLinkControlPolicyOutput: typeof import("./getFabricLinkControlPolicy").getFabricLinkControlPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFabricLinkControlPolicy","getFabricLinkControlPolicyOutput"], () => require("./getFabricLinkControlPolicy"));

export { GetFabricMulticastPolicyArgs, GetFabricMulticastPolicyResult, GetFabricMulticastPolicyOutputArgs } from "./getFabricMulticastPolicy";
export const getFabricMulticastPolicy: typeof import("./getFabricMulticastPolicy").getFabricMulticastPolicy = null as any;
export const getFabricMulticastPolicyOutput: typeof import("./getFabricMulticastPolicy").getFabricMulticastPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFabricMulticastPolicy","getFabricMulticastPolicyOutput"], () => require("./getFabricMulticastPolicy"));

export { GetFabricPcMemberArgs, GetFabricPcMemberResult, GetFabricPcMemberOutputArgs } from "./getFabricPcMember";
export const getFabricPcMember: typeof import("./getFabricPcMember").getFabricPcMember = null as any;
export const getFabricPcMemberOutput: typeof import("./getFabricPcMember").getFabricPcMemberOutput = null as any;
utilities.lazyLoad(exports, ["getFabricPcMember","getFabricPcMemberOutput"], () => require("./getFabricPcMember"));

export { GetFabricPcOperationArgs, GetFabricPcOperationResult, GetFabricPcOperationOutputArgs } from "./getFabricPcOperation";
export const getFabricPcOperation: typeof import("./getFabricPcOperation").getFabricPcOperation = null as any;
export const getFabricPcOperationOutput: typeof import("./getFabricPcOperation").getFabricPcOperationOutput = null as any;
utilities.lazyLoad(exports, ["getFabricPcOperation","getFabricPcOperationOutput"], () => require("./getFabricPcOperation"));

export { GetFabricPortModeArgs, GetFabricPortModeResult, GetFabricPortModeOutputArgs } from "./getFabricPortMode";
export const getFabricPortMode: typeof import("./getFabricPortMode").getFabricPortMode = null as any;
export const getFabricPortModeOutput: typeof import("./getFabricPortMode").getFabricPortModeOutput = null as any;
utilities.lazyLoad(exports, ["getFabricPortMode","getFabricPortModeOutput"], () => require("./getFabricPortMode"));

export { GetFabricPortOperationArgs, GetFabricPortOperationResult, GetFabricPortOperationOutputArgs } from "./getFabricPortOperation";
export const getFabricPortOperation: typeof import("./getFabricPortOperation").getFabricPortOperation = null as any;
export const getFabricPortOperationOutput: typeof import("./getFabricPortOperation").getFabricPortOperationOutput = null as any;
utilities.lazyLoad(exports, ["getFabricPortOperation","getFabricPortOperationOutput"], () => require("./getFabricPortOperation"));

export { GetFabricPortPolicyArgs, GetFabricPortPolicyResult, GetFabricPortPolicyOutputArgs } from "./getFabricPortPolicy";
export const getFabricPortPolicy: typeof import("./getFabricPortPolicy").getFabricPortPolicy = null as any;
export const getFabricPortPolicyOutput: typeof import("./getFabricPortPolicy").getFabricPortPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFabricPortPolicy","getFabricPortPolicyOutput"], () => require("./getFabricPortPolicy"));

export { GetFabricSanPinGroupArgs, GetFabricSanPinGroupResult, GetFabricSanPinGroupOutputArgs } from "./getFabricSanPinGroup";
export const getFabricSanPinGroup: typeof import("./getFabricSanPinGroup").getFabricSanPinGroup = null as any;
export const getFabricSanPinGroupOutput: typeof import("./getFabricSanPinGroup").getFabricSanPinGroupOutput = null as any;
utilities.lazyLoad(exports, ["getFabricSanPinGroup","getFabricSanPinGroupOutput"], () => require("./getFabricSanPinGroup"));

export { GetFabricServerRoleArgs, GetFabricServerRoleResult, GetFabricServerRoleOutputArgs } from "./getFabricServerRole";
export const getFabricServerRole: typeof import("./getFabricServerRole").getFabricServerRole = null as any;
export const getFabricServerRoleOutput: typeof import("./getFabricServerRole").getFabricServerRoleOutput = null as any;
utilities.lazyLoad(exports, ["getFabricServerRole","getFabricServerRoleOutput"], () => require("./getFabricServerRole"));

export { GetFabricSpanDestEthPortArgs, GetFabricSpanDestEthPortResult, GetFabricSpanDestEthPortOutputArgs } from "./getFabricSpanDestEthPort";
export const getFabricSpanDestEthPort: typeof import("./getFabricSpanDestEthPort").getFabricSpanDestEthPort = null as any;
export const getFabricSpanDestEthPortOutput: typeof import("./getFabricSpanDestEthPort").getFabricSpanDestEthPortOutput = null as any;
utilities.lazyLoad(exports, ["getFabricSpanDestEthPort","getFabricSpanDestEthPortOutput"], () => require("./getFabricSpanDestEthPort"));

export { GetFabricSpanSessionArgs, GetFabricSpanSessionResult, GetFabricSpanSessionOutputArgs } from "./getFabricSpanSession";
export const getFabricSpanSession: typeof import("./getFabricSpanSession").getFabricSpanSession = null as any;
export const getFabricSpanSessionOutput: typeof import("./getFabricSpanSession").getFabricSpanSessionOutput = null as any;
utilities.lazyLoad(exports, ["getFabricSpanSession","getFabricSpanSessionOutput"], () => require("./getFabricSpanSession"));

export { GetFabricSpanSourceEthPortArgs, GetFabricSpanSourceEthPortResult, GetFabricSpanSourceEthPortOutputArgs } from "./getFabricSpanSourceEthPort";
export const getFabricSpanSourceEthPort: typeof import("./getFabricSpanSourceEthPort").getFabricSpanSourceEthPort = null as any;
export const getFabricSpanSourceEthPortOutput: typeof import("./getFabricSpanSourceEthPort").getFabricSpanSourceEthPortOutput = null as any;
utilities.lazyLoad(exports, ["getFabricSpanSourceEthPort","getFabricSpanSourceEthPortOutput"], () => require("./getFabricSpanSourceEthPort"));

export { GetFabricSpanSourceEthPortChannelArgs, GetFabricSpanSourceEthPortChannelResult, GetFabricSpanSourceEthPortChannelOutputArgs } from "./getFabricSpanSourceEthPortChannel";
export const getFabricSpanSourceEthPortChannel: typeof import("./getFabricSpanSourceEthPortChannel").getFabricSpanSourceEthPortChannel = null as any;
export const getFabricSpanSourceEthPortChannelOutput: typeof import("./getFabricSpanSourceEthPortChannel").getFabricSpanSourceEthPortChannelOutput = null as any;
utilities.lazyLoad(exports, ["getFabricSpanSourceEthPortChannel","getFabricSpanSourceEthPortChannelOutput"], () => require("./getFabricSpanSourceEthPortChannel"));

export { GetFabricSpanSourceVlanArgs, GetFabricSpanSourceVlanResult, GetFabricSpanSourceVlanOutputArgs } from "./getFabricSpanSourceVlan";
export const getFabricSpanSourceVlan: typeof import("./getFabricSpanSourceVlan").getFabricSpanSourceVlan = null as any;
export const getFabricSpanSourceVlanOutput: typeof import("./getFabricSpanSourceVlan").getFabricSpanSourceVlanOutput = null as any;
utilities.lazyLoad(exports, ["getFabricSpanSourceVlan","getFabricSpanSourceVlanOutput"], () => require("./getFabricSpanSourceVlan"));

export { GetFabricSpanSourceVnicEthIfArgs, GetFabricSpanSourceVnicEthIfResult, GetFabricSpanSourceVnicEthIfOutputArgs } from "./getFabricSpanSourceVnicEthIf";
export const getFabricSpanSourceVnicEthIf: typeof import("./getFabricSpanSourceVnicEthIf").getFabricSpanSourceVnicEthIf = null as any;
export const getFabricSpanSourceVnicEthIfOutput: typeof import("./getFabricSpanSourceVnicEthIf").getFabricSpanSourceVnicEthIfOutput = null as any;
utilities.lazyLoad(exports, ["getFabricSpanSourceVnicEthIf","getFabricSpanSourceVnicEthIfOutput"], () => require("./getFabricSpanSourceVnicEthIf"));

export { GetFabricSwitchClusterProfileArgs, GetFabricSwitchClusterProfileResult, GetFabricSwitchClusterProfileOutputArgs } from "./getFabricSwitchClusterProfile";
export const getFabricSwitchClusterProfile: typeof import("./getFabricSwitchClusterProfile").getFabricSwitchClusterProfile = null as any;
export const getFabricSwitchClusterProfileOutput: typeof import("./getFabricSwitchClusterProfile").getFabricSwitchClusterProfileOutput = null as any;
utilities.lazyLoad(exports, ["getFabricSwitchClusterProfile","getFabricSwitchClusterProfileOutput"], () => require("./getFabricSwitchClusterProfile"));

export { GetFabricSwitchClusterProfileTemplateArgs, GetFabricSwitchClusterProfileTemplateResult, GetFabricSwitchClusterProfileTemplateOutputArgs } from "./getFabricSwitchClusterProfileTemplate";
export const getFabricSwitchClusterProfileTemplate: typeof import("./getFabricSwitchClusterProfileTemplate").getFabricSwitchClusterProfileTemplate = null as any;
export const getFabricSwitchClusterProfileTemplateOutput: typeof import("./getFabricSwitchClusterProfileTemplate").getFabricSwitchClusterProfileTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getFabricSwitchClusterProfileTemplate","getFabricSwitchClusterProfileTemplateOutput"], () => require("./getFabricSwitchClusterProfileTemplate"));

export { GetFabricSwitchControlPolicyArgs, GetFabricSwitchControlPolicyResult, GetFabricSwitchControlPolicyOutputArgs } from "./getFabricSwitchControlPolicy";
export const getFabricSwitchControlPolicy: typeof import("./getFabricSwitchControlPolicy").getFabricSwitchControlPolicy = null as any;
export const getFabricSwitchControlPolicyOutput: typeof import("./getFabricSwitchControlPolicy").getFabricSwitchControlPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFabricSwitchControlPolicy","getFabricSwitchControlPolicyOutput"], () => require("./getFabricSwitchControlPolicy"));

export { GetFabricSwitchProfileArgs, GetFabricSwitchProfileResult, GetFabricSwitchProfileOutputArgs } from "./getFabricSwitchProfile";
export const getFabricSwitchProfile: typeof import("./getFabricSwitchProfile").getFabricSwitchProfile = null as any;
export const getFabricSwitchProfileOutput: typeof import("./getFabricSwitchProfile").getFabricSwitchProfileOutput = null as any;
utilities.lazyLoad(exports, ["getFabricSwitchProfile","getFabricSwitchProfileOutput"], () => require("./getFabricSwitchProfile"));

export { GetFabricSwitchProfileTemplateArgs, GetFabricSwitchProfileTemplateResult, GetFabricSwitchProfileTemplateOutputArgs } from "./getFabricSwitchProfileTemplate";
export const getFabricSwitchProfileTemplate: typeof import("./getFabricSwitchProfileTemplate").getFabricSwitchProfileTemplate = null as any;
export const getFabricSwitchProfileTemplateOutput: typeof import("./getFabricSwitchProfileTemplate").getFabricSwitchProfileTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getFabricSwitchProfileTemplate","getFabricSwitchProfileTemplateOutput"], () => require("./getFabricSwitchProfileTemplate"));

export { GetFabricSystemQosPolicyArgs, GetFabricSystemQosPolicyResult, GetFabricSystemQosPolicyOutputArgs } from "./getFabricSystemQosPolicy";
export const getFabricSystemQosPolicy: typeof import("./getFabricSystemQosPolicy").getFabricSystemQosPolicy = null as any;
export const getFabricSystemQosPolicyOutput: typeof import("./getFabricSystemQosPolicy").getFabricSystemQosPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFabricSystemQosPolicy","getFabricSystemQosPolicyOutput"], () => require("./getFabricSystemQosPolicy"));

export { GetFabricUplinkPcRoleArgs, GetFabricUplinkPcRoleResult, GetFabricUplinkPcRoleOutputArgs } from "./getFabricUplinkPcRole";
export const getFabricUplinkPcRole: typeof import("./getFabricUplinkPcRole").getFabricUplinkPcRole = null as any;
export const getFabricUplinkPcRoleOutput: typeof import("./getFabricUplinkPcRole").getFabricUplinkPcRoleOutput = null as any;
utilities.lazyLoad(exports, ["getFabricUplinkPcRole","getFabricUplinkPcRoleOutput"], () => require("./getFabricUplinkPcRole"));

export { GetFabricUplinkRoleArgs, GetFabricUplinkRoleResult, GetFabricUplinkRoleOutputArgs } from "./getFabricUplinkRole";
export const getFabricUplinkRole: typeof import("./getFabricUplinkRole").getFabricUplinkRole = null as any;
export const getFabricUplinkRoleOutput: typeof import("./getFabricUplinkRole").getFabricUplinkRoleOutput = null as any;
utilities.lazyLoad(exports, ["getFabricUplinkRole","getFabricUplinkRoleOutput"], () => require("./getFabricUplinkRole"));

export { GetFabricVlanArgs, GetFabricVlanResult, GetFabricVlanOutputArgs } from "./getFabricVlan";
export const getFabricVlan: typeof import("./getFabricVlan").getFabricVlan = null as any;
export const getFabricVlanOutput: typeof import("./getFabricVlan").getFabricVlanOutput = null as any;
utilities.lazyLoad(exports, ["getFabricVlan","getFabricVlanOutput"], () => require("./getFabricVlan"));

export { GetFabricVlanInventoryArgs, GetFabricVlanInventoryResult, GetFabricVlanInventoryOutputArgs } from "./getFabricVlanInventory";
export const getFabricVlanInventory: typeof import("./getFabricVlanInventory").getFabricVlanInventory = null as any;
export const getFabricVlanInventoryOutput: typeof import("./getFabricVlanInventory").getFabricVlanInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getFabricVlanInventory","getFabricVlanInventoryOutput"], () => require("./getFabricVlanInventory"));

export { GetFabricVlanSetArgs, GetFabricVlanSetResult, GetFabricVlanSetOutputArgs } from "./getFabricVlanSet";
export const getFabricVlanSet: typeof import("./getFabricVlanSet").getFabricVlanSet = null as any;
export const getFabricVlanSetOutput: typeof import("./getFabricVlanSet").getFabricVlanSetOutput = null as any;
utilities.lazyLoad(exports, ["getFabricVlanSet","getFabricVlanSetOutput"], () => require("./getFabricVlanSet"));

export { GetFabricVsanArgs, GetFabricVsanResult, GetFabricVsanOutputArgs } from "./getFabricVsan";
export const getFabricVsan: typeof import("./getFabricVsan").getFabricVsan = null as any;
export const getFabricVsanOutput: typeof import("./getFabricVsan").getFabricVsanOutput = null as any;
utilities.lazyLoad(exports, ["getFabricVsan","getFabricVsanOutput"], () => require("./getFabricVsan"));

export { GetFabricVsanInventoryArgs, GetFabricVsanInventoryResult, GetFabricVsanInventoryOutputArgs } from "./getFabricVsanInventory";
export const getFabricVsanInventory: typeof import("./getFabricVsanInventory").getFabricVsanInventory = null as any;
export const getFabricVsanInventoryOutput: typeof import("./getFabricVsanInventory").getFabricVsanInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getFabricVsanInventory","getFabricVsanInventoryOutput"], () => require("./getFabricVsanInventory"));

export { GetFaultInstanceArgs, GetFaultInstanceResult, GetFaultInstanceOutputArgs } from "./getFaultInstance";
export const getFaultInstance: typeof import("./getFaultInstance").getFaultInstance = null as any;
export const getFaultInstanceOutput: typeof import("./getFaultInstance").getFaultInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getFaultInstance","getFaultInstanceOutput"], () => require("./getFaultInstance"));

export { GetFcNeighborArgs, GetFcNeighborResult, GetFcNeighborOutputArgs } from "./getFcNeighbor";
export const getFcNeighbor: typeof import("./getFcNeighbor").getFcNeighbor = null as any;
export const getFcNeighborOutput: typeof import("./getFcNeighbor").getFcNeighborOutput = null as any;
utilities.lazyLoad(exports, ["getFcNeighbor","getFcNeighborOutput"], () => require("./getFcNeighbor"));

export { GetFcPhysicalPortArgs, GetFcPhysicalPortResult, GetFcPhysicalPortOutputArgs } from "./getFcPhysicalPort";
export const getFcPhysicalPort: typeof import("./getFcPhysicalPort").getFcPhysicalPort = null as any;
export const getFcPhysicalPortOutput: typeof import("./getFcPhysicalPort").getFcPhysicalPortOutput = null as any;
utilities.lazyLoad(exports, ["getFcPhysicalPort","getFcPhysicalPortOutput"], () => require("./getFcPhysicalPort"));

export { GetFcPortChannelArgs, GetFcPortChannelResult, GetFcPortChannelOutputArgs } from "./getFcPortChannel";
export const getFcPortChannel: typeof import("./getFcPortChannel").getFcPortChannel = null as any;
export const getFcPortChannelOutput: typeof import("./getFcPortChannel").getFcPortChannelOutput = null as any;
utilities.lazyLoad(exports, ["getFcPortChannel","getFcPortChannelOutput"], () => require("./getFcPortChannel"));

export { GetFcpoolFcBlockArgs, GetFcpoolFcBlockResult, GetFcpoolFcBlockOutputArgs } from "./getFcpoolFcBlock";
export const getFcpoolFcBlock: typeof import("./getFcpoolFcBlock").getFcpoolFcBlock = null as any;
export const getFcpoolFcBlockOutput: typeof import("./getFcpoolFcBlock").getFcpoolFcBlockOutput = null as any;
utilities.lazyLoad(exports, ["getFcpoolFcBlock","getFcpoolFcBlockOutput"], () => require("./getFcpoolFcBlock"));

export { GetFcpoolLeaseArgs, GetFcpoolLeaseResult, GetFcpoolLeaseOutputArgs } from "./getFcpoolLease";
export const getFcpoolLease: typeof import("./getFcpoolLease").getFcpoolLease = null as any;
export const getFcpoolLeaseOutput: typeof import("./getFcpoolLease").getFcpoolLeaseOutput = null as any;
utilities.lazyLoad(exports, ["getFcpoolLease","getFcpoolLeaseOutput"], () => require("./getFcpoolLease"));

export { GetFcpoolPoolArgs, GetFcpoolPoolResult, GetFcpoolPoolOutputArgs } from "./getFcpoolPool";
export const getFcpoolPool: typeof import("./getFcpoolPool").getFcpoolPool = null as any;
export const getFcpoolPoolOutput: typeof import("./getFcpoolPool").getFcpoolPoolOutput = null as any;
utilities.lazyLoad(exports, ["getFcpoolPool","getFcpoolPoolOutput"], () => require("./getFcpoolPool"));

export { GetFcpoolPoolMemberArgs, GetFcpoolPoolMemberResult, GetFcpoolPoolMemberOutputArgs } from "./getFcpoolPoolMember";
export const getFcpoolPoolMember: typeof import("./getFcpoolPoolMember").getFcpoolPoolMember = null as any;
export const getFcpoolPoolMemberOutput: typeof import("./getFcpoolPoolMember").getFcpoolPoolMemberOutput = null as any;
utilities.lazyLoad(exports, ["getFcpoolPoolMember","getFcpoolPoolMemberOutput"], () => require("./getFcpoolPoolMember"));

export { GetFcpoolReservationArgs, GetFcpoolReservationResult, GetFcpoolReservationOutputArgs } from "./getFcpoolReservation";
export const getFcpoolReservation: typeof import("./getFcpoolReservation").getFcpoolReservation = null as any;
export const getFcpoolReservationOutput: typeof import("./getFcpoolReservation").getFcpoolReservationOutput = null as any;
utilities.lazyLoad(exports, ["getFcpoolReservation","getFcpoolReservationOutput"], () => require("./getFcpoolReservation"));

export { GetFcpoolUniverseArgs, GetFcpoolUniverseResult, GetFcpoolUniverseOutputArgs } from "./getFcpoolUniverse";
export const getFcpoolUniverse: typeof import("./getFcpoolUniverse").getFcpoolUniverse = null as any;
export const getFcpoolUniverseOutput: typeof import("./getFcpoolUniverse").getFcpoolUniverseOutput = null as any;
utilities.lazyLoad(exports, ["getFcpoolUniverse","getFcpoolUniverseOutput"], () => require("./getFcpoolUniverse"));

export { GetFirmwareBiosDescriptorArgs, GetFirmwareBiosDescriptorResult, GetFirmwareBiosDescriptorOutputArgs } from "./getFirmwareBiosDescriptor";
export const getFirmwareBiosDescriptor: typeof import("./getFirmwareBiosDescriptor").getFirmwareBiosDescriptor = null as any;
export const getFirmwareBiosDescriptorOutput: typeof import("./getFirmwareBiosDescriptor").getFirmwareBiosDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareBiosDescriptor","getFirmwareBiosDescriptorOutput"], () => require("./getFirmwareBiosDescriptor"));

export { GetFirmwareBoardControllerDescriptorArgs, GetFirmwareBoardControllerDescriptorResult, GetFirmwareBoardControllerDescriptorOutputArgs } from "./getFirmwareBoardControllerDescriptor";
export const getFirmwareBoardControllerDescriptor: typeof import("./getFirmwareBoardControllerDescriptor").getFirmwareBoardControllerDescriptor = null as any;
export const getFirmwareBoardControllerDescriptorOutput: typeof import("./getFirmwareBoardControllerDescriptor").getFirmwareBoardControllerDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareBoardControllerDescriptor","getFirmwareBoardControllerDescriptorOutput"], () => require("./getFirmwareBoardControllerDescriptor"));

export { GetFirmwareChassisUpgradeArgs, GetFirmwareChassisUpgradeResult, GetFirmwareChassisUpgradeOutputArgs } from "./getFirmwareChassisUpgrade";
export const getFirmwareChassisUpgrade: typeof import("./getFirmwareChassisUpgrade").getFirmwareChassisUpgrade = null as any;
export const getFirmwareChassisUpgradeOutput: typeof import("./getFirmwareChassisUpgrade").getFirmwareChassisUpgradeOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareChassisUpgrade","getFirmwareChassisUpgradeOutput"], () => require("./getFirmwareChassisUpgrade"));

export { GetFirmwareCimcDescriptorArgs, GetFirmwareCimcDescriptorResult, GetFirmwareCimcDescriptorOutputArgs } from "./getFirmwareCimcDescriptor";
export const getFirmwareCimcDescriptor: typeof import("./getFirmwareCimcDescriptor").getFirmwareCimcDescriptor = null as any;
export const getFirmwareCimcDescriptorOutput: typeof import("./getFirmwareCimcDescriptor").getFirmwareCimcDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareCimcDescriptor","getFirmwareCimcDescriptorOutput"], () => require("./getFirmwareCimcDescriptor"));

export { GetFirmwareDimmDescriptorArgs, GetFirmwareDimmDescriptorResult, GetFirmwareDimmDescriptorOutputArgs } from "./getFirmwareDimmDescriptor";
export const getFirmwareDimmDescriptor: typeof import("./getFirmwareDimmDescriptor").getFirmwareDimmDescriptor = null as any;
export const getFirmwareDimmDescriptorOutput: typeof import("./getFirmwareDimmDescriptor").getFirmwareDimmDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareDimmDescriptor","getFirmwareDimmDescriptorOutput"], () => require("./getFirmwareDimmDescriptor"));

export { GetFirmwareDistributableArgs, GetFirmwareDistributableResult, GetFirmwareDistributableOutputArgs } from "./getFirmwareDistributable";
export const getFirmwareDistributable: typeof import("./getFirmwareDistributable").getFirmwareDistributable = null as any;
export const getFirmwareDistributableOutput: typeof import("./getFirmwareDistributable").getFirmwareDistributableOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareDistributable","getFirmwareDistributableOutput"], () => require("./getFirmwareDistributable"));

export { GetFirmwareDistributableMetaArgs, GetFirmwareDistributableMetaResult, GetFirmwareDistributableMetaOutputArgs } from "./getFirmwareDistributableMeta";
export const getFirmwareDistributableMeta: typeof import("./getFirmwareDistributableMeta").getFirmwareDistributableMeta = null as any;
export const getFirmwareDistributableMetaOutput: typeof import("./getFirmwareDistributableMeta").getFirmwareDistributableMetaOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareDistributableMeta","getFirmwareDistributableMetaOutput"], () => require("./getFirmwareDistributableMeta"));

export { GetFirmwareDriveDescriptorArgs, GetFirmwareDriveDescriptorResult, GetFirmwareDriveDescriptorOutputArgs } from "./getFirmwareDriveDescriptor";
export const getFirmwareDriveDescriptor: typeof import("./getFirmwareDriveDescriptor").getFirmwareDriveDescriptor = null as any;
export const getFirmwareDriveDescriptorOutput: typeof import("./getFirmwareDriveDescriptor").getFirmwareDriveDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareDriveDescriptor","getFirmwareDriveDescriptorOutput"], () => require("./getFirmwareDriveDescriptor"));

export { GetFirmwareDriverDistributableArgs, GetFirmwareDriverDistributableResult, GetFirmwareDriverDistributableOutputArgs } from "./getFirmwareDriverDistributable";
export const getFirmwareDriverDistributable: typeof import("./getFirmwareDriverDistributable").getFirmwareDriverDistributable = null as any;
export const getFirmwareDriverDistributableOutput: typeof import("./getFirmwareDriverDistributable").getFirmwareDriverDistributableOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareDriverDistributable","getFirmwareDriverDistributableOutput"], () => require("./getFirmwareDriverDistributable"));

export { GetFirmwareEulaArgs, GetFirmwareEulaResult, GetFirmwareEulaOutputArgs } from "./getFirmwareEula";
export const getFirmwareEula: typeof import("./getFirmwareEula").getFirmwareEula = null as any;
export const getFirmwareEulaOutput: typeof import("./getFirmwareEula").getFirmwareEulaOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareEula","getFirmwareEulaOutput"], () => require("./getFirmwareEula"));

export { GetFirmwareFirmwareSummaryArgs, GetFirmwareFirmwareSummaryResult, GetFirmwareFirmwareSummaryOutputArgs } from "./getFirmwareFirmwareSummary";
export const getFirmwareFirmwareSummary: typeof import("./getFirmwareFirmwareSummary").getFirmwareFirmwareSummary = null as any;
export const getFirmwareFirmwareSummaryOutput: typeof import("./getFirmwareFirmwareSummary").getFirmwareFirmwareSummaryOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareFirmwareSummary","getFirmwareFirmwareSummaryOutput"], () => require("./getFirmwareFirmwareSummary"));

export { GetFirmwareGpuDescriptorArgs, GetFirmwareGpuDescriptorResult, GetFirmwareGpuDescriptorOutputArgs } from "./getFirmwareGpuDescriptor";
export const getFirmwareGpuDescriptor: typeof import("./getFirmwareGpuDescriptor").getFirmwareGpuDescriptor = null as any;
export const getFirmwareGpuDescriptorOutput: typeof import("./getFirmwareGpuDescriptor").getFirmwareGpuDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareGpuDescriptor","getFirmwareGpuDescriptorOutput"], () => require("./getFirmwareGpuDescriptor"));

export { GetFirmwareHbaDescriptorArgs, GetFirmwareHbaDescriptorResult, GetFirmwareHbaDescriptorOutputArgs } from "./getFirmwareHbaDescriptor";
export const getFirmwareHbaDescriptor: typeof import("./getFirmwareHbaDescriptor").getFirmwareHbaDescriptor = null as any;
export const getFirmwareHbaDescriptorOutput: typeof import("./getFirmwareHbaDescriptor").getFirmwareHbaDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareHbaDescriptor","getFirmwareHbaDescriptorOutput"], () => require("./getFirmwareHbaDescriptor"));

export { GetFirmwareIomDescriptorArgs, GetFirmwareIomDescriptorResult, GetFirmwareIomDescriptorOutputArgs } from "./getFirmwareIomDescriptor";
export const getFirmwareIomDescriptor: typeof import("./getFirmwareIomDescriptor").getFirmwareIomDescriptor = null as any;
export const getFirmwareIomDescriptorOutput: typeof import("./getFirmwareIomDescriptor").getFirmwareIomDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareIomDescriptor","getFirmwareIomDescriptorOutput"], () => require("./getFirmwareIomDescriptor"));

export { GetFirmwareMswitchDescriptorArgs, GetFirmwareMswitchDescriptorResult, GetFirmwareMswitchDescriptorOutputArgs } from "./getFirmwareMswitchDescriptor";
export const getFirmwareMswitchDescriptor: typeof import("./getFirmwareMswitchDescriptor").getFirmwareMswitchDescriptor = null as any;
export const getFirmwareMswitchDescriptorOutput: typeof import("./getFirmwareMswitchDescriptor").getFirmwareMswitchDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareMswitchDescriptor","getFirmwareMswitchDescriptorOutput"], () => require("./getFirmwareMswitchDescriptor"));

export { GetFirmwareNxosDescriptorArgs, GetFirmwareNxosDescriptorResult, GetFirmwareNxosDescriptorOutputArgs } from "./getFirmwareNxosDescriptor";
export const getFirmwareNxosDescriptor: typeof import("./getFirmwareNxosDescriptor").getFirmwareNxosDescriptor = null as any;
export const getFirmwareNxosDescriptorOutput: typeof import("./getFirmwareNxosDescriptor").getFirmwareNxosDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareNxosDescriptor","getFirmwareNxosDescriptorOutput"], () => require("./getFirmwareNxosDescriptor"));

export { GetFirmwarePcieDescriptorArgs, GetFirmwarePcieDescriptorResult, GetFirmwarePcieDescriptorOutputArgs } from "./getFirmwarePcieDescriptor";
export const getFirmwarePcieDescriptor: typeof import("./getFirmwarePcieDescriptor").getFirmwarePcieDescriptor = null as any;
export const getFirmwarePcieDescriptorOutput: typeof import("./getFirmwarePcieDescriptor").getFirmwarePcieDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwarePcieDescriptor","getFirmwarePcieDescriptorOutput"], () => require("./getFirmwarePcieDescriptor"));

export { GetFirmwarePolicyArgs, GetFirmwarePolicyResult, GetFirmwarePolicyOutputArgs } from "./getFirmwarePolicy";
export const getFirmwarePolicy: typeof import("./getFirmwarePolicy").getFirmwarePolicy = null as any;
export const getFirmwarePolicyOutput: typeof import("./getFirmwarePolicy").getFirmwarePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwarePolicy","getFirmwarePolicyOutput"], () => require("./getFirmwarePolicy"));

export { GetFirmwarePsuDescriptorArgs, GetFirmwarePsuDescriptorResult, GetFirmwarePsuDescriptorOutputArgs } from "./getFirmwarePsuDescriptor";
export const getFirmwarePsuDescriptor: typeof import("./getFirmwarePsuDescriptor").getFirmwarePsuDescriptor = null as any;
export const getFirmwarePsuDescriptorOutput: typeof import("./getFirmwarePsuDescriptor").getFirmwarePsuDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwarePsuDescriptor","getFirmwarePsuDescriptorOutput"], () => require("./getFirmwarePsuDescriptor"));

export { GetFirmwareRunningFirmwareArgs, GetFirmwareRunningFirmwareResult, GetFirmwareRunningFirmwareOutputArgs } from "./getFirmwareRunningFirmware";
export const getFirmwareRunningFirmware: typeof import("./getFirmwareRunningFirmware").getFirmwareRunningFirmware = null as any;
export const getFirmwareRunningFirmwareOutput: typeof import("./getFirmwareRunningFirmware").getFirmwareRunningFirmwareOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareRunningFirmware","getFirmwareRunningFirmwareOutput"], () => require("./getFirmwareRunningFirmware"));

export { GetFirmwareSasExpanderDescriptorArgs, GetFirmwareSasExpanderDescriptorResult, GetFirmwareSasExpanderDescriptorOutputArgs } from "./getFirmwareSasExpanderDescriptor";
export const getFirmwareSasExpanderDescriptor: typeof import("./getFirmwareSasExpanderDescriptor").getFirmwareSasExpanderDescriptor = null as any;
export const getFirmwareSasExpanderDescriptorOutput: typeof import("./getFirmwareSasExpanderDescriptor").getFirmwareSasExpanderDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareSasExpanderDescriptor","getFirmwareSasExpanderDescriptorOutput"], () => require("./getFirmwareSasExpanderDescriptor"));

export { GetFirmwareServerConfigurationUtilityDistributableArgs, GetFirmwareServerConfigurationUtilityDistributableResult, GetFirmwareServerConfigurationUtilityDistributableOutputArgs } from "./getFirmwareServerConfigurationUtilityDistributable";
export const getFirmwareServerConfigurationUtilityDistributable: typeof import("./getFirmwareServerConfigurationUtilityDistributable").getFirmwareServerConfigurationUtilityDistributable = null as any;
export const getFirmwareServerConfigurationUtilityDistributableOutput: typeof import("./getFirmwareServerConfigurationUtilityDistributable").getFirmwareServerConfigurationUtilityDistributableOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareServerConfigurationUtilityDistributable","getFirmwareServerConfigurationUtilityDistributableOutput"], () => require("./getFirmwareServerConfigurationUtilityDistributable"));

export { GetFirmwareStorageControllerDescriptorArgs, GetFirmwareStorageControllerDescriptorResult, GetFirmwareStorageControllerDescriptorOutputArgs } from "./getFirmwareStorageControllerDescriptor";
export const getFirmwareStorageControllerDescriptor: typeof import("./getFirmwareStorageControllerDescriptor").getFirmwareStorageControllerDescriptor = null as any;
export const getFirmwareStorageControllerDescriptorOutput: typeof import("./getFirmwareStorageControllerDescriptor").getFirmwareStorageControllerDescriptorOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareStorageControllerDescriptor","getFirmwareStorageControllerDescriptorOutput"], () => require("./getFirmwareStorageControllerDescriptor"));

export { GetFirmwareSwitchUpgradeArgs, GetFirmwareSwitchUpgradeResult, GetFirmwareSwitchUpgradeOutputArgs } from "./getFirmwareSwitchUpgrade";
export const getFirmwareSwitchUpgrade: typeof import("./getFirmwareSwitchUpgrade").getFirmwareSwitchUpgrade = null as any;
export const getFirmwareSwitchUpgradeOutput: typeof import("./getFirmwareSwitchUpgrade").getFirmwareSwitchUpgradeOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareSwitchUpgrade","getFirmwareSwitchUpgradeOutput"], () => require("./getFirmwareSwitchUpgrade"));

export { GetFirmwareUnsupportedVersionUpgradeArgs, GetFirmwareUnsupportedVersionUpgradeResult, GetFirmwareUnsupportedVersionUpgradeOutputArgs } from "./getFirmwareUnsupportedVersionUpgrade";
export const getFirmwareUnsupportedVersionUpgrade: typeof import("./getFirmwareUnsupportedVersionUpgrade").getFirmwareUnsupportedVersionUpgrade = null as any;
export const getFirmwareUnsupportedVersionUpgradeOutput: typeof import("./getFirmwareUnsupportedVersionUpgrade").getFirmwareUnsupportedVersionUpgradeOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareUnsupportedVersionUpgrade","getFirmwareUnsupportedVersionUpgradeOutput"], () => require("./getFirmwareUnsupportedVersionUpgrade"));

export { GetFirmwareUpgradeArgs, GetFirmwareUpgradeResult, GetFirmwareUpgradeOutputArgs } from "./getFirmwareUpgrade";
export const getFirmwareUpgrade: typeof import("./getFirmwareUpgrade").getFirmwareUpgrade = null as any;
export const getFirmwareUpgradeOutput: typeof import("./getFirmwareUpgrade").getFirmwareUpgradeOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareUpgrade","getFirmwareUpgradeOutput"], () => require("./getFirmwareUpgrade"));

export { GetFirmwareUpgradeImpactStatusArgs, GetFirmwareUpgradeImpactStatusResult, GetFirmwareUpgradeImpactStatusOutputArgs } from "./getFirmwareUpgradeImpactStatus";
export const getFirmwareUpgradeImpactStatus: typeof import("./getFirmwareUpgradeImpactStatus").getFirmwareUpgradeImpactStatus = null as any;
export const getFirmwareUpgradeImpactStatusOutput: typeof import("./getFirmwareUpgradeImpactStatus").getFirmwareUpgradeImpactStatusOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareUpgradeImpactStatus","getFirmwareUpgradeImpactStatusOutput"], () => require("./getFirmwareUpgradeImpactStatus"));

export { GetFirmwareUpgradeStatusArgs, GetFirmwareUpgradeStatusResult, GetFirmwareUpgradeStatusOutputArgs } from "./getFirmwareUpgradeStatus";
export const getFirmwareUpgradeStatus: typeof import("./getFirmwareUpgradeStatus").getFirmwareUpgradeStatus = null as any;
export const getFirmwareUpgradeStatusOutput: typeof import("./getFirmwareUpgradeStatus").getFirmwareUpgradeStatusOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareUpgradeStatus","getFirmwareUpgradeStatusOutput"], () => require("./getFirmwareUpgradeStatus"));

export { GetFmcDeviceArgs, GetFmcDeviceResult, GetFmcDeviceOutputArgs } from "./getFmcDevice";
export const getFmcDevice: typeof import("./getFmcDevice").getFmcDevice = null as any;
export const getFmcDeviceOutput: typeof import("./getFmcDevice").getFmcDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getFmcDevice","getFmcDeviceOutput"], () => require("./getFmcDevice"));

export { GetFmcDeviceHaPairArgs, GetFmcDeviceHaPairResult, GetFmcDeviceHaPairOutputArgs } from "./getFmcDeviceHaPair";
export const getFmcDeviceHaPair: typeof import("./getFmcDeviceHaPair").getFmcDeviceHaPair = null as any;
export const getFmcDeviceHaPairOutput: typeof import("./getFmcDeviceHaPair").getFmcDeviceHaPairOutput = null as any;
utilities.lazyLoad(exports, ["getFmcDeviceHaPair","getFmcDeviceHaPairOutput"], () => require("./getFmcDeviceHaPair"));

export { GetFmcDomainArgs, GetFmcDomainResult, GetFmcDomainOutputArgs } from "./getFmcDomain";
export const getFmcDomain: typeof import("./getFmcDomain").getFmcDomain = null as any;
export const getFmcDomainOutput: typeof import("./getFmcDomain").getFmcDomainOutput = null as any;
utilities.lazyLoad(exports, ["getFmcDomain","getFmcDomainOutput"], () => require("./getFmcDomain"));

export { GetFmcPhysicalInterfaceArgs, GetFmcPhysicalInterfaceResult, GetFmcPhysicalInterfaceOutputArgs } from "./getFmcPhysicalInterface";
export const getFmcPhysicalInterface: typeof import("./getFmcPhysicalInterface").getFmcPhysicalInterface = null as any;
export const getFmcPhysicalInterfaceOutput: typeof import("./getFmcPhysicalInterface").getFmcPhysicalInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getFmcPhysicalInterface","getFmcPhysicalInterfaceOutput"], () => require("./getFmcPhysicalInterface"));

export { GetForecastCatalogArgs, GetForecastCatalogResult, GetForecastCatalogOutputArgs } from "./getForecastCatalog";
export const getForecastCatalog: typeof import("./getForecastCatalog").getForecastCatalog = null as any;
export const getForecastCatalogOutput: typeof import("./getForecastCatalog").getForecastCatalogOutput = null as any;
utilities.lazyLoad(exports, ["getForecastCatalog","getForecastCatalogOutput"], () => require("./getForecastCatalog"));

export { GetForecastDefinitionArgs, GetForecastDefinitionResult, GetForecastDefinitionOutputArgs } from "./getForecastDefinition";
export const getForecastDefinition: typeof import("./getForecastDefinition").getForecastDefinition = null as any;
export const getForecastDefinitionOutput: typeof import("./getForecastDefinition").getForecastDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getForecastDefinition","getForecastDefinitionOutput"], () => require("./getForecastDefinition"));

export { GetForecastInstanceArgs, GetForecastInstanceResult, GetForecastInstanceOutputArgs } from "./getForecastInstance";
export const getForecastInstance: typeof import("./getForecastInstance").getForecastInstance = null as any;
export const getForecastInstanceOutput: typeof import("./getForecastInstance").getForecastInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getForecastInstance","getForecastInstanceOutput"], () => require("./getForecastInstance"));

export { GetGraphicsCardArgs, GetGraphicsCardResult, GetGraphicsCardOutputArgs } from "./getGraphicsCard";
export const getGraphicsCard: typeof import("./getGraphicsCard").getGraphicsCard = null as any;
export const getGraphicsCardOutput: typeof import("./getGraphicsCard").getGraphicsCardOutput = null as any;
utilities.lazyLoad(exports, ["getGraphicsCard","getGraphicsCardOutput"], () => require("./getGraphicsCard"));

export { GetGraphicsControllerArgs, GetGraphicsControllerResult, GetGraphicsControllerOutputArgs } from "./getGraphicsController";
export const getGraphicsController: typeof import("./getGraphicsController").getGraphicsController = null as any;
export const getGraphicsControllerOutput: typeof import("./getGraphicsController").getGraphicsControllerOutput = null as any;
utilities.lazyLoad(exports, ["getGraphicsController","getGraphicsControllerOutput"], () => require("./getGraphicsController"));

export { GetHclDriverImageArgs, GetHclDriverImageResult, GetHclDriverImageOutputArgs } from "./getHclDriverImage";
export const getHclDriverImage: typeof import("./getHclDriverImage").getHclDriverImage = null as any;
export const getHclDriverImageOutput: typeof import("./getHclDriverImage").getHclDriverImageOutput = null as any;
utilities.lazyLoad(exports, ["getHclDriverImage","getHclDriverImageOutput"], () => require("./getHclDriverImage"));

export { GetHclExemptedCatalogArgs, GetHclExemptedCatalogResult, GetHclExemptedCatalogOutputArgs } from "./getHclExemptedCatalog";
export const getHclExemptedCatalog: typeof import("./getHclExemptedCatalog").getHclExemptedCatalog = null as any;
export const getHclExemptedCatalogOutput: typeof import("./getHclExemptedCatalog").getHclExemptedCatalogOutput = null as any;
utilities.lazyLoad(exports, ["getHclExemptedCatalog","getHclExemptedCatalogOutput"], () => require("./getHclExemptedCatalog"));

export { GetHclHwCatalogInfoArgs, GetHclHwCatalogInfoResult, GetHclHwCatalogInfoOutputArgs } from "./getHclHwCatalogInfo";
export const getHclHwCatalogInfo: typeof import("./getHclHwCatalogInfo").getHclHwCatalogInfo = null as any;
export const getHclHwCatalogInfoOutput: typeof import("./getHclHwCatalogInfo").getHclHwCatalogInfoOutput = null as any;
utilities.lazyLoad(exports, ["getHclHwCatalogInfo","getHclHwCatalogInfoOutput"], () => require("./getHclHwCatalogInfo"));

export { GetHclHyperflexSoftwareCompatibilityInfoArgs, GetHclHyperflexSoftwareCompatibilityInfoResult, GetHclHyperflexSoftwareCompatibilityInfoOutputArgs } from "./getHclHyperflexSoftwareCompatibilityInfo";
export const getHclHyperflexSoftwareCompatibilityInfo: typeof import("./getHclHyperflexSoftwareCompatibilityInfo").getHclHyperflexSoftwareCompatibilityInfo = null as any;
export const getHclHyperflexSoftwareCompatibilityInfoOutput: typeof import("./getHclHyperflexSoftwareCompatibilityInfo").getHclHyperflexSoftwareCompatibilityInfoOutput = null as any;
utilities.lazyLoad(exports, ["getHclHyperflexSoftwareCompatibilityInfo","getHclHyperflexSoftwareCompatibilityInfoOutput"], () => require("./getHclHyperflexSoftwareCompatibilityInfo"));

export { GetHclOperatingSystemArgs, GetHclOperatingSystemResult, GetHclOperatingSystemOutputArgs } from "./getHclOperatingSystem";
export const getHclOperatingSystem: typeof import("./getHclOperatingSystem").getHclOperatingSystem = null as any;
export const getHclOperatingSystemOutput: typeof import("./getHclOperatingSystem").getHclOperatingSystemOutput = null as any;
utilities.lazyLoad(exports, ["getHclOperatingSystem","getHclOperatingSystemOutput"], () => require("./getHclOperatingSystem"));

export { GetHclOperatingSystemVendorArgs, GetHclOperatingSystemVendorResult, GetHclOperatingSystemVendorOutputArgs } from "./getHclOperatingSystemVendor";
export const getHclOperatingSystemVendor: typeof import("./getHclOperatingSystemVendor").getHclOperatingSystemVendor = null as any;
export const getHclOperatingSystemVendorOutput: typeof import("./getHclOperatingSystemVendor").getHclOperatingSystemVendorOutput = null as any;
utilities.lazyLoad(exports, ["getHclOperatingSystemVendor","getHclOperatingSystemVendorOutput"], () => require("./getHclOperatingSystemVendor"));

export { GetHclServerHwCatalogInfoArgs, GetHclServerHwCatalogInfoResult, GetHclServerHwCatalogInfoOutputArgs } from "./getHclServerHwCatalogInfo";
export const getHclServerHwCatalogInfo: typeof import("./getHclServerHwCatalogInfo").getHclServerHwCatalogInfo = null as any;
export const getHclServerHwCatalogInfoOutput: typeof import("./getHclServerHwCatalogInfo").getHclServerHwCatalogInfoOutput = null as any;
utilities.lazyLoad(exports, ["getHclServerHwCatalogInfo","getHclServerHwCatalogInfoOutput"], () => require("./getHclServerHwCatalogInfo"));

export { GetHyperflexAlarmArgs, GetHyperflexAlarmResult, GetHyperflexAlarmOutputArgs } from "./getHyperflexAlarm";
export const getHyperflexAlarm: typeof import("./getHyperflexAlarm").getHyperflexAlarm = null as any;
export const getHyperflexAlarmOutput: typeof import("./getHyperflexAlarm").getHyperflexAlarmOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexAlarm","getHyperflexAlarmOutput"], () => require("./getHyperflexAlarm"));

export { GetHyperflexAppCatalogArgs, GetHyperflexAppCatalogResult, GetHyperflexAppCatalogOutputArgs } from "./getHyperflexAppCatalog";
export const getHyperflexAppCatalog: typeof import("./getHyperflexAppCatalog").getHyperflexAppCatalog = null as any;
export const getHyperflexAppCatalogOutput: typeof import("./getHyperflexAppCatalog").getHyperflexAppCatalogOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexAppCatalog","getHyperflexAppCatalogOutput"], () => require("./getHyperflexAppCatalog"));

export { GetHyperflexAutoSupportPolicyArgs, GetHyperflexAutoSupportPolicyResult, GetHyperflexAutoSupportPolicyOutputArgs } from "./getHyperflexAutoSupportPolicy";
export const getHyperflexAutoSupportPolicy: typeof import("./getHyperflexAutoSupportPolicy").getHyperflexAutoSupportPolicy = null as any;
export const getHyperflexAutoSupportPolicyOutput: typeof import("./getHyperflexAutoSupportPolicy").getHyperflexAutoSupportPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexAutoSupportPolicy","getHyperflexAutoSupportPolicyOutput"], () => require("./getHyperflexAutoSupportPolicy"));

export { GetHyperflexBackupClusterArgs, GetHyperflexBackupClusterResult, GetHyperflexBackupClusterOutputArgs } from "./getHyperflexBackupCluster";
export const getHyperflexBackupCluster: typeof import("./getHyperflexBackupCluster").getHyperflexBackupCluster = null as any;
export const getHyperflexBackupClusterOutput: typeof import("./getHyperflexBackupCluster").getHyperflexBackupClusterOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexBackupCluster","getHyperflexBackupClusterOutput"], () => require("./getHyperflexBackupCluster"));

export { GetHyperflexCapabilityInfoArgs, GetHyperflexCapabilityInfoResult, GetHyperflexCapabilityInfoOutputArgs } from "./getHyperflexCapabilityInfo";
export const getHyperflexCapabilityInfo: typeof import("./getHyperflexCapabilityInfo").getHyperflexCapabilityInfo = null as any;
export const getHyperflexCapabilityInfoOutput: typeof import("./getHyperflexCapabilityInfo").getHyperflexCapabilityInfoOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexCapabilityInfo","getHyperflexCapabilityInfoOutput"], () => require("./getHyperflexCapabilityInfo"));

export { GetHyperflexClusterArgs, GetHyperflexClusterResult, GetHyperflexClusterOutputArgs } from "./getHyperflexCluster";
export const getHyperflexCluster: typeof import("./getHyperflexCluster").getHyperflexCluster = null as any;
export const getHyperflexClusterOutput: typeof import("./getHyperflexCluster").getHyperflexClusterOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexCluster","getHyperflexClusterOutput"], () => require("./getHyperflexCluster"));

export { GetHyperflexClusterBackupPolicyArgs, GetHyperflexClusterBackupPolicyResult, GetHyperflexClusterBackupPolicyOutputArgs } from "./getHyperflexClusterBackupPolicy";
export const getHyperflexClusterBackupPolicy: typeof import("./getHyperflexClusterBackupPolicy").getHyperflexClusterBackupPolicy = null as any;
export const getHyperflexClusterBackupPolicyOutput: typeof import("./getHyperflexClusterBackupPolicy").getHyperflexClusterBackupPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexClusterBackupPolicy","getHyperflexClusterBackupPolicyOutput"], () => require("./getHyperflexClusterBackupPolicy"));

export { GetHyperflexClusterBackupPolicyDeploymentArgs, GetHyperflexClusterBackupPolicyDeploymentResult, GetHyperflexClusterBackupPolicyDeploymentOutputArgs } from "./getHyperflexClusterBackupPolicyDeployment";
export const getHyperflexClusterBackupPolicyDeployment: typeof import("./getHyperflexClusterBackupPolicyDeployment").getHyperflexClusterBackupPolicyDeployment = null as any;
export const getHyperflexClusterBackupPolicyDeploymentOutput: typeof import("./getHyperflexClusterBackupPolicyDeployment").getHyperflexClusterBackupPolicyDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexClusterBackupPolicyDeployment","getHyperflexClusterBackupPolicyDeploymentOutput"], () => require("./getHyperflexClusterBackupPolicyDeployment"));

export { GetHyperflexClusterBackupPolicyInventoryArgs, GetHyperflexClusterBackupPolicyInventoryResult, GetHyperflexClusterBackupPolicyInventoryOutputArgs } from "./getHyperflexClusterBackupPolicyInventory";
export const getHyperflexClusterBackupPolicyInventory: typeof import("./getHyperflexClusterBackupPolicyInventory").getHyperflexClusterBackupPolicyInventory = null as any;
export const getHyperflexClusterBackupPolicyInventoryOutput: typeof import("./getHyperflexClusterBackupPolicyInventory").getHyperflexClusterBackupPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexClusterBackupPolicyInventory","getHyperflexClusterBackupPolicyInventoryOutput"], () => require("./getHyperflexClusterBackupPolicyInventory"));

export { GetHyperflexClusterHealthCheckExecutionSnapshotArgs, GetHyperflexClusterHealthCheckExecutionSnapshotResult, GetHyperflexClusterHealthCheckExecutionSnapshotOutputArgs } from "./getHyperflexClusterHealthCheckExecutionSnapshot";
export const getHyperflexClusterHealthCheckExecutionSnapshot: typeof import("./getHyperflexClusterHealthCheckExecutionSnapshot").getHyperflexClusterHealthCheckExecutionSnapshot = null as any;
export const getHyperflexClusterHealthCheckExecutionSnapshotOutput: typeof import("./getHyperflexClusterHealthCheckExecutionSnapshot").getHyperflexClusterHealthCheckExecutionSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexClusterHealthCheckExecutionSnapshot","getHyperflexClusterHealthCheckExecutionSnapshotOutput"], () => require("./getHyperflexClusterHealthCheckExecutionSnapshot"));

export { GetHyperflexClusterNetworkPolicyArgs, GetHyperflexClusterNetworkPolicyResult, GetHyperflexClusterNetworkPolicyOutputArgs } from "./getHyperflexClusterNetworkPolicy";
export const getHyperflexClusterNetworkPolicy: typeof import("./getHyperflexClusterNetworkPolicy").getHyperflexClusterNetworkPolicy = null as any;
export const getHyperflexClusterNetworkPolicyOutput: typeof import("./getHyperflexClusterNetworkPolicy").getHyperflexClusterNetworkPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexClusterNetworkPolicy","getHyperflexClusterNetworkPolicyOutput"], () => require("./getHyperflexClusterNetworkPolicy"));

export { GetHyperflexClusterProfileArgs, GetHyperflexClusterProfileResult, GetHyperflexClusterProfileOutputArgs } from "./getHyperflexClusterProfile";
export const getHyperflexClusterProfile: typeof import("./getHyperflexClusterProfile").getHyperflexClusterProfile = null as any;
export const getHyperflexClusterProfileOutput: typeof import("./getHyperflexClusterProfile").getHyperflexClusterProfileOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexClusterProfile","getHyperflexClusterProfileOutput"], () => require("./getHyperflexClusterProfile"));

export { GetHyperflexClusterReplicationNetworkPolicyArgs, GetHyperflexClusterReplicationNetworkPolicyResult, GetHyperflexClusterReplicationNetworkPolicyOutputArgs } from "./getHyperflexClusterReplicationNetworkPolicy";
export const getHyperflexClusterReplicationNetworkPolicy: typeof import("./getHyperflexClusterReplicationNetworkPolicy").getHyperflexClusterReplicationNetworkPolicy = null as any;
export const getHyperflexClusterReplicationNetworkPolicyOutput: typeof import("./getHyperflexClusterReplicationNetworkPolicy").getHyperflexClusterReplicationNetworkPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexClusterReplicationNetworkPolicy","getHyperflexClusterReplicationNetworkPolicyOutput"], () => require("./getHyperflexClusterReplicationNetworkPolicy"));

export { GetHyperflexClusterReplicationNetworkPolicyDeploymentArgs, GetHyperflexClusterReplicationNetworkPolicyDeploymentResult, GetHyperflexClusterReplicationNetworkPolicyDeploymentOutputArgs } from "./getHyperflexClusterReplicationNetworkPolicyDeployment";
export const getHyperflexClusterReplicationNetworkPolicyDeployment: typeof import("./getHyperflexClusterReplicationNetworkPolicyDeployment").getHyperflexClusterReplicationNetworkPolicyDeployment = null as any;
export const getHyperflexClusterReplicationNetworkPolicyDeploymentOutput: typeof import("./getHyperflexClusterReplicationNetworkPolicyDeployment").getHyperflexClusterReplicationNetworkPolicyDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexClusterReplicationNetworkPolicyDeployment","getHyperflexClusterReplicationNetworkPolicyDeploymentOutput"], () => require("./getHyperflexClusterReplicationNetworkPolicyDeployment"));

export { GetHyperflexClusterStoragePolicyArgs, GetHyperflexClusterStoragePolicyResult, GetHyperflexClusterStoragePolicyOutputArgs } from "./getHyperflexClusterStoragePolicy";
export const getHyperflexClusterStoragePolicy: typeof import("./getHyperflexClusterStoragePolicy").getHyperflexClusterStoragePolicy = null as any;
export const getHyperflexClusterStoragePolicyOutput: typeof import("./getHyperflexClusterStoragePolicy").getHyperflexClusterStoragePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexClusterStoragePolicy","getHyperflexClusterStoragePolicyOutput"], () => require("./getHyperflexClusterStoragePolicy"));

export { GetHyperflexConfigResultArgs, GetHyperflexConfigResultResult, GetHyperflexConfigResultOutputArgs } from "./getHyperflexConfigResult";
export const getHyperflexConfigResult: typeof import("./getHyperflexConfigResult").getHyperflexConfigResult = null as any;
export const getHyperflexConfigResultOutput: typeof import("./getHyperflexConfigResult").getHyperflexConfigResultOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexConfigResult","getHyperflexConfigResultOutput"], () => require("./getHyperflexConfigResult"));

export { GetHyperflexConfigResultEntryArgs, GetHyperflexConfigResultEntryResult, GetHyperflexConfigResultEntryOutputArgs } from "./getHyperflexConfigResultEntry";
export const getHyperflexConfigResultEntry: typeof import("./getHyperflexConfigResultEntry").getHyperflexConfigResultEntry = null as any;
export const getHyperflexConfigResultEntryOutput: typeof import("./getHyperflexConfigResultEntry").getHyperflexConfigResultEntryOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexConfigResultEntry","getHyperflexConfigResultEntryOutput"], () => require("./getHyperflexConfigResultEntry"));

export { GetHyperflexDataProtectionPeerArgs, GetHyperflexDataProtectionPeerResult, GetHyperflexDataProtectionPeerOutputArgs } from "./getHyperflexDataProtectionPeer";
export const getHyperflexDataProtectionPeer: typeof import("./getHyperflexDataProtectionPeer").getHyperflexDataProtectionPeer = null as any;
export const getHyperflexDataProtectionPeerOutput: typeof import("./getHyperflexDataProtectionPeer").getHyperflexDataProtectionPeerOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexDataProtectionPeer","getHyperflexDataProtectionPeerOutput"], () => require("./getHyperflexDataProtectionPeer"));

export { GetHyperflexDatastoreStatisticArgs, GetHyperflexDatastoreStatisticResult, GetHyperflexDatastoreStatisticOutputArgs } from "./getHyperflexDatastoreStatistic";
export const getHyperflexDatastoreStatistic: typeof import("./getHyperflexDatastoreStatistic").getHyperflexDatastoreStatistic = null as any;
export const getHyperflexDatastoreStatisticOutput: typeof import("./getHyperflexDatastoreStatistic").getHyperflexDatastoreStatisticOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexDatastoreStatistic","getHyperflexDatastoreStatisticOutput"], () => require("./getHyperflexDatastoreStatistic"));

export { GetHyperflexDevicePackageDownloadStateArgs, GetHyperflexDevicePackageDownloadStateResult, GetHyperflexDevicePackageDownloadStateOutputArgs } from "./getHyperflexDevicePackageDownloadState";
export const getHyperflexDevicePackageDownloadState: typeof import("./getHyperflexDevicePackageDownloadState").getHyperflexDevicePackageDownloadState = null as any;
export const getHyperflexDevicePackageDownloadStateOutput: typeof import("./getHyperflexDevicePackageDownloadState").getHyperflexDevicePackageDownloadStateOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexDevicePackageDownloadState","getHyperflexDevicePackageDownloadStateOutput"], () => require("./getHyperflexDevicePackageDownloadState"));

export { GetHyperflexDriveArgs, GetHyperflexDriveResult, GetHyperflexDriveOutputArgs } from "./getHyperflexDrive";
export const getHyperflexDrive: typeof import("./getHyperflexDrive").getHyperflexDrive = null as any;
export const getHyperflexDriveOutput: typeof import("./getHyperflexDrive").getHyperflexDriveOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexDrive","getHyperflexDriveOutput"], () => require("./getHyperflexDrive"));

export { GetHyperflexEncryptionArgs, GetHyperflexEncryptionResult, GetHyperflexEncryptionOutputArgs } from "./getHyperflexEncryption";
export const getHyperflexEncryption: typeof import("./getHyperflexEncryption").getHyperflexEncryption = null as any;
export const getHyperflexEncryptionOutput: typeof import("./getHyperflexEncryption").getHyperflexEncryptionOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexEncryption","getHyperflexEncryptionOutput"], () => require("./getHyperflexEncryption"));

export { GetHyperflexExtFcStoragePolicyArgs, GetHyperflexExtFcStoragePolicyResult, GetHyperflexExtFcStoragePolicyOutputArgs } from "./getHyperflexExtFcStoragePolicy";
export const getHyperflexExtFcStoragePolicy: typeof import("./getHyperflexExtFcStoragePolicy").getHyperflexExtFcStoragePolicy = null as any;
export const getHyperflexExtFcStoragePolicyOutput: typeof import("./getHyperflexExtFcStoragePolicy").getHyperflexExtFcStoragePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexExtFcStoragePolicy","getHyperflexExtFcStoragePolicyOutput"], () => require("./getHyperflexExtFcStoragePolicy"));

export { GetHyperflexExtIscsiStoragePolicyArgs, GetHyperflexExtIscsiStoragePolicyResult, GetHyperflexExtIscsiStoragePolicyOutputArgs } from "./getHyperflexExtIscsiStoragePolicy";
export const getHyperflexExtIscsiStoragePolicy: typeof import("./getHyperflexExtIscsiStoragePolicy").getHyperflexExtIscsiStoragePolicy = null as any;
export const getHyperflexExtIscsiStoragePolicyOutput: typeof import("./getHyperflexExtIscsiStoragePolicy").getHyperflexExtIscsiStoragePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexExtIscsiStoragePolicy","getHyperflexExtIscsiStoragePolicyOutput"], () => require("./getHyperflexExtIscsiStoragePolicy"));

export { GetHyperflexFeatureLimitExternalArgs, GetHyperflexFeatureLimitExternalResult, GetHyperflexFeatureLimitExternalOutputArgs } from "./getHyperflexFeatureLimitExternal";
export const getHyperflexFeatureLimitExternal: typeof import("./getHyperflexFeatureLimitExternal").getHyperflexFeatureLimitExternal = null as any;
export const getHyperflexFeatureLimitExternalOutput: typeof import("./getHyperflexFeatureLimitExternal").getHyperflexFeatureLimitExternalOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexFeatureLimitExternal","getHyperflexFeatureLimitExternalOutput"], () => require("./getHyperflexFeatureLimitExternal"));

export { GetHyperflexFeatureLimitInternalArgs, GetHyperflexFeatureLimitInternalResult, GetHyperflexFeatureLimitInternalOutputArgs } from "./getHyperflexFeatureLimitInternal";
export const getHyperflexFeatureLimitInternal: typeof import("./getHyperflexFeatureLimitInternal").getHyperflexFeatureLimitInternal = null as any;
export const getHyperflexFeatureLimitInternalOutput: typeof import("./getHyperflexFeatureLimitInternal").getHyperflexFeatureLimitInternalOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexFeatureLimitInternal","getHyperflexFeatureLimitInternalOutput"], () => require("./getHyperflexFeatureLimitInternal"));

export { GetHyperflexHealthArgs, GetHyperflexHealthResult, GetHyperflexHealthOutputArgs } from "./getHyperflexHealth";
export const getHyperflexHealth: typeof import("./getHyperflexHealth").getHyperflexHealth = null as any;
export const getHyperflexHealthOutput: typeof import("./getHyperflexHealth").getHyperflexHealthOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexHealth","getHyperflexHealthOutput"], () => require("./getHyperflexHealth"));

export { GetHyperflexHealthCheckDefinitionArgs, GetHyperflexHealthCheckDefinitionResult, GetHyperflexHealthCheckDefinitionOutputArgs } from "./getHyperflexHealthCheckDefinition";
export const getHyperflexHealthCheckDefinition: typeof import("./getHyperflexHealthCheckDefinition").getHyperflexHealthCheckDefinition = null as any;
export const getHyperflexHealthCheckDefinitionOutput: typeof import("./getHyperflexHealthCheckDefinition").getHyperflexHealthCheckDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexHealthCheckDefinition","getHyperflexHealthCheckDefinitionOutput"], () => require("./getHyperflexHealthCheckDefinition"));

export { GetHyperflexHealthCheckExecutionArgs, GetHyperflexHealthCheckExecutionResult, GetHyperflexHealthCheckExecutionOutputArgs } from "./getHyperflexHealthCheckExecution";
export const getHyperflexHealthCheckExecution: typeof import("./getHyperflexHealthCheckExecution").getHyperflexHealthCheckExecution = null as any;
export const getHyperflexHealthCheckExecutionOutput: typeof import("./getHyperflexHealthCheckExecution").getHyperflexHealthCheckExecutionOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexHealthCheckExecution","getHyperflexHealthCheckExecutionOutput"], () => require("./getHyperflexHealthCheckExecution"));

export { GetHyperflexHealthCheckExecutionSnapshotArgs, GetHyperflexHealthCheckExecutionSnapshotResult, GetHyperflexHealthCheckExecutionSnapshotOutputArgs } from "./getHyperflexHealthCheckExecutionSnapshot";
export const getHyperflexHealthCheckExecutionSnapshot: typeof import("./getHyperflexHealthCheckExecutionSnapshot").getHyperflexHealthCheckExecutionSnapshot = null as any;
export const getHyperflexHealthCheckExecutionSnapshotOutput: typeof import("./getHyperflexHealthCheckExecutionSnapshot").getHyperflexHealthCheckExecutionSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexHealthCheckExecutionSnapshot","getHyperflexHealthCheckExecutionSnapshotOutput"], () => require("./getHyperflexHealthCheckExecutionSnapshot"));

export { GetHyperflexHealthCheckPackageChecksumArgs, GetHyperflexHealthCheckPackageChecksumResult, GetHyperflexHealthCheckPackageChecksumOutputArgs } from "./getHyperflexHealthCheckPackageChecksum";
export const getHyperflexHealthCheckPackageChecksum: typeof import("./getHyperflexHealthCheckPackageChecksum").getHyperflexHealthCheckPackageChecksum = null as any;
export const getHyperflexHealthCheckPackageChecksumOutput: typeof import("./getHyperflexHealthCheckPackageChecksum").getHyperflexHealthCheckPackageChecksumOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexHealthCheckPackageChecksum","getHyperflexHealthCheckPackageChecksumOutput"], () => require("./getHyperflexHealthCheckPackageChecksum"));

export { GetHyperflexHealthCheckSchedulePolicyArgs, GetHyperflexHealthCheckSchedulePolicyResult, GetHyperflexHealthCheckSchedulePolicyOutputArgs } from "./getHyperflexHealthCheckSchedulePolicy";
export const getHyperflexHealthCheckSchedulePolicy: typeof import("./getHyperflexHealthCheckSchedulePolicy").getHyperflexHealthCheckSchedulePolicy = null as any;
export const getHyperflexHealthCheckSchedulePolicyOutput: typeof import("./getHyperflexHealthCheckSchedulePolicy").getHyperflexHealthCheckSchedulePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexHealthCheckSchedulePolicy","getHyperflexHealthCheckSchedulePolicyOutput"], () => require("./getHyperflexHealthCheckSchedulePolicy"));

export { GetHyperflexHwCatalogArgs, GetHyperflexHwCatalogResult, GetHyperflexHwCatalogOutputArgs } from "./getHyperflexHwCatalog";
export const getHyperflexHwCatalog: typeof import("./getHyperflexHwCatalog").getHyperflexHwCatalog = null as any;
export const getHyperflexHwCatalogOutput: typeof import("./getHyperflexHwCatalog").getHyperflexHwCatalogOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexHwCatalog","getHyperflexHwCatalogOutput"], () => require("./getHyperflexHwCatalog"));

export { GetHyperflexHxdpVersionArgs, GetHyperflexHxdpVersionResult, GetHyperflexHxdpVersionOutputArgs } from "./getHyperflexHxdpVersion";
export const getHyperflexHxdpVersion: typeof import("./getHyperflexHxdpVersion").getHyperflexHxdpVersion = null as any;
export const getHyperflexHxdpVersionOutput: typeof import("./getHyperflexHxdpVersion").getHyperflexHxdpVersionOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexHxdpVersion","getHyperflexHxdpVersionOutput"], () => require("./getHyperflexHxdpVersion"));

export { GetHyperflexHypervisorHostArgs, GetHyperflexHypervisorHostResult, GetHyperflexHypervisorHostOutputArgs } from "./getHyperflexHypervisorHost";
export const getHyperflexHypervisorHost: typeof import("./getHyperflexHypervisorHost").getHyperflexHypervisorHost = null as any;
export const getHyperflexHypervisorHostOutput: typeof import("./getHyperflexHypervisorHost").getHyperflexHypervisorHostOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexHypervisorHost","getHyperflexHypervisorHostOutput"], () => require("./getHyperflexHypervisorHost"));

export { GetHyperflexHypervisorVirtualMachineArgs, GetHyperflexHypervisorVirtualMachineResult, GetHyperflexHypervisorVirtualMachineOutputArgs } from "./getHyperflexHypervisorVirtualMachine";
export const getHyperflexHypervisorVirtualMachine: typeof import("./getHyperflexHypervisorVirtualMachine").getHyperflexHypervisorVirtualMachine = null as any;
export const getHyperflexHypervisorVirtualMachineOutput: typeof import("./getHyperflexHypervisorVirtualMachine").getHyperflexHypervisorVirtualMachineOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexHypervisorVirtualMachine","getHyperflexHypervisorVirtualMachineOutput"], () => require("./getHyperflexHypervisorVirtualMachine"));

export { GetHyperflexInitiatorGroupArgs, GetHyperflexInitiatorGroupResult, GetHyperflexInitiatorGroupOutputArgs } from "./getHyperflexInitiatorGroup";
export const getHyperflexInitiatorGroup: typeof import("./getHyperflexInitiatorGroup").getHyperflexInitiatorGroup = null as any;
export const getHyperflexInitiatorGroupOutput: typeof import("./getHyperflexInitiatorGroup").getHyperflexInitiatorGroupOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexInitiatorGroup","getHyperflexInitiatorGroupOutput"], () => require("./getHyperflexInitiatorGroup"));

export { GetHyperflexIscsiNetworkArgs, GetHyperflexIscsiNetworkResult, GetHyperflexIscsiNetworkOutputArgs } from "./getHyperflexIscsiNetwork";
export const getHyperflexIscsiNetwork: typeof import("./getHyperflexIscsiNetwork").getHyperflexIscsiNetwork = null as any;
export const getHyperflexIscsiNetworkOutput: typeof import("./getHyperflexIscsiNetwork").getHyperflexIscsiNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexIscsiNetwork","getHyperflexIscsiNetworkOutput"], () => require("./getHyperflexIscsiNetwork"));

export { GetHyperflexKeyEncryptionKeyArgs, GetHyperflexKeyEncryptionKeyResult, GetHyperflexKeyEncryptionKeyOutputArgs } from "./getHyperflexKeyEncryptionKey";
export const getHyperflexKeyEncryptionKey: typeof import("./getHyperflexKeyEncryptionKey").getHyperflexKeyEncryptionKey = null as any;
export const getHyperflexKeyEncryptionKeyOutput: typeof import("./getHyperflexKeyEncryptionKey").getHyperflexKeyEncryptionKeyOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexKeyEncryptionKey","getHyperflexKeyEncryptionKeyOutput"], () => require("./getHyperflexKeyEncryptionKey"));

export { GetHyperflexLicenseArgs, GetHyperflexLicenseResult, GetHyperflexLicenseOutputArgs } from "./getHyperflexLicense";
export const getHyperflexLicense: typeof import("./getHyperflexLicense").getHyperflexLicense = null as any;
export const getHyperflexLicenseOutput: typeof import("./getHyperflexLicense").getHyperflexLicenseOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexLicense","getHyperflexLicenseOutput"], () => require("./getHyperflexLicense"));

export { GetHyperflexLocalCredentialPolicyArgs, GetHyperflexLocalCredentialPolicyResult, GetHyperflexLocalCredentialPolicyOutputArgs } from "./getHyperflexLocalCredentialPolicy";
export const getHyperflexLocalCredentialPolicy: typeof import("./getHyperflexLocalCredentialPolicy").getHyperflexLocalCredentialPolicy = null as any;
export const getHyperflexLocalCredentialPolicyOutput: typeof import("./getHyperflexLocalCredentialPolicy").getHyperflexLocalCredentialPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexLocalCredentialPolicy","getHyperflexLocalCredentialPolicyOutput"], () => require("./getHyperflexLocalCredentialPolicy"));

export { GetHyperflexLunArgs, GetHyperflexLunResult, GetHyperflexLunOutputArgs } from "./getHyperflexLun";
export const getHyperflexLun: typeof import("./getHyperflexLun").getHyperflexLun = null as any;
export const getHyperflexLunOutput: typeof import("./getHyperflexLun").getHyperflexLunOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexLun","getHyperflexLunOutput"], () => require("./getHyperflexLun"));

export { GetHyperflexNodeArgs, GetHyperflexNodeResult, GetHyperflexNodeOutputArgs } from "./getHyperflexNode";
export const getHyperflexNode: typeof import("./getHyperflexNode").getHyperflexNode = null as any;
export const getHyperflexNodeOutput: typeof import("./getHyperflexNode").getHyperflexNodeOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexNode","getHyperflexNodeOutput"], () => require("./getHyperflexNode"));

export { GetHyperflexNodeConfigPolicyArgs, GetHyperflexNodeConfigPolicyResult, GetHyperflexNodeConfigPolicyOutputArgs } from "./getHyperflexNodeConfigPolicy";
export const getHyperflexNodeConfigPolicy: typeof import("./getHyperflexNodeConfigPolicy").getHyperflexNodeConfigPolicy = null as any;
export const getHyperflexNodeConfigPolicyOutput: typeof import("./getHyperflexNodeConfigPolicy").getHyperflexNodeConfigPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexNodeConfigPolicy","getHyperflexNodeConfigPolicyOutput"], () => require("./getHyperflexNodeConfigPolicy"));

export { GetHyperflexNodeProfileArgs, GetHyperflexNodeProfileResult, GetHyperflexNodeProfileOutputArgs } from "./getHyperflexNodeProfile";
export const getHyperflexNodeProfile: typeof import("./getHyperflexNodeProfile").getHyperflexNodeProfile = null as any;
export const getHyperflexNodeProfileOutput: typeof import("./getHyperflexNodeProfile").getHyperflexNodeProfileOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexNodeProfile","getHyperflexNodeProfileOutput"], () => require("./getHyperflexNodeProfile"));

export { GetHyperflexProtectedClusterArgs, GetHyperflexProtectedClusterResult, GetHyperflexProtectedClusterOutputArgs } from "./getHyperflexProtectedCluster";
export const getHyperflexProtectedCluster: typeof import("./getHyperflexProtectedCluster").getHyperflexProtectedCluster = null as any;
export const getHyperflexProtectedClusterOutput: typeof import("./getHyperflexProtectedCluster").getHyperflexProtectedClusterOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexProtectedCluster","getHyperflexProtectedClusterOutput"], () => require("./getHyperflexProtectedCluster"));

export { GetHyperflexProxySettingPolicyArgs, GetHyperflexProxySettingPolicyResult, GetHyperflexProxySettingPolicyOutputArgs } from "./getHyperflexProxySettingPolicy";
export const getHyperflexProxySettingPolicy: typeof import("./getHyperflexProxySettingPolicy").getHyperflexProxySettingPolicy = null as any;
export const getHyperflexProxySettingPolicyOutput: typeof import("./getHyperflexProxySettingPolicy").getHyperflexProxySettingPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexProxySettingPolicy","getHyperflexProxySettingPolicyOutput"], () => require("./getHyperflexProxySettingPolicy"));

export { GetHyperflexReduceReSyncArgs, GetHyperflexReduceReSyncResult, GetHyperflexReduceReSyncOutputArgs } from "./getHyperflexReduceReSync";
export const getHyperflexReduceReSync: typeof import("./getHyperflexReduceReSync").getHyperflexReduceReSync = null as any;
export const getHyperflexReduceReSyncOutput: typeof import("./getHyperflexReduceReSync").getHyperflexReduceReSyncOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexReduceReSync","getHyperflexReduceReSyncOutput"], () => require("./getHyperflexReduceReSync"));

export { GetHyperflexServerFirmwareVersionArgs, GetHyperflexServerFirmwareVersionResult, GetHyperflexServerFirmwareVersionOutputArgs } from "./getHyperflexServerFirmwareVersion";
export const getHyperflexServerFirmwareVersion: typeof import("./getHyperflexServerFirmwareVersion").getHyperflexServerFirmwareVersion = null as any;
export const getHyperflexServerFirmwareVersionOutput: typeof import("./getHyperflexServerFirmwareVersion").getHyperflexServerFirmwareVersionOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexServerFirmwareVersion","getHyperflexServerFirmwareVersionOutput"], () => require("./getHyperflexServerFirmwareVersion"));

export { GetHyperflexServerFirmwareVersionEntryArgs, GetHyperflexServerFirmwareVersionEntryResult, GetHyperflexServerFirmwareVersionEntryOutputArgs } from "./getHyperflexServerFirmwareVersionEntry";
export const getHyperflexServerFirmwareVersionEntry: typeof import("./getHyperflexServerFirmwareVersionEntry").getHyperflexServerFirmwareVersionEntry = null as any;
export const getHyperflexServerFirmwareVersionEntryOutput: typeof import("./getHyperflexServerFirmwareVersionEntry").getHyperflexServerFirmwareVersionEntryOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexServerFirmwareVersionEntry","getHyperflexServerFirmwareVersionEntryOutput"], () => require("./getHyperflexServerFirmwareVersionEntry"));

export { GetHyperflexServerModelArgs, GetHyperflexServerModelResult, GetHyperflexServerModelOutputArgs } from "./getHyperflexServerModel";
export const getHyperflexServerModel: typeof import("./getHyperflexServerModel").getHyperflexServerModel = null as any;
export const getHyperflexServerModelOutput: typeof import("./getHyperflexServerModel").getHyperflexServerModelOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexServerModel","getHyperflexServerModelOutput"], () => require("./getHyperflexServerModel"));

export { GetHyperflexServiceAuthTokenArgs, GetHyperflexServiceAuthTokenResult, GetHyperflexServiceAuthTokenOutputArgs } from "./getHyperflexServiceAuthToken";
export const getHyperflexServiceAuthToken: typeof import("./getHyperflexServiceAuthToken").getHyperflexServiceAuthToken = null as any;
export const getHyperflexServiceAuthTokenOutput: typeof import("./getHyperflexServiceAuthToken").getHyperflexServiceAuthTokenOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexServiceAuthToken","getHyperflexServiceAuthTokenOutput"], () => require("./getHyperflexServiceAuthToken"));

export { GetHyperflexSoftwareDistributionComponentArgs, GetHyperflexSoftwareDistributionComponentResult, GetHyperflexSoftwareDistributionComponentOutputArgs } from "./getHyperflexSoftwareDistributionComponent";
export const getHyperflexSoftwareDistributionComponent: typeof import("./getHyperflexSoftwareDistributionComponent").getHyperflexSoftwareDistributionComponent = null as any;
export const getHyperflexSoftwareDistributionComponentOutput: typeof import("./getHyperflexSoftwareDistributionComponent").getHyperflexSoftwareDistributionComponentOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexSoftwareDistributionComponent","getHyperflexSoftwareDistributionComponentOutput"], () => require("./getHyperflexSoftwareDistributionComponent"));

export { GetHyperflexSoftwareDistributionEntryArgs, GetHyperflexSoftwareDistributionEntryResult, GetHyperflexSoftwareDistributionEntryOutputArgs } from "./getHyperflexSoftwareDistributionEntry";
export const getHyperflexSoftwareDistributionEntry: typeof import("./getHyperflexSoftwareDistributionEntry").getHyperflexSoftwareDistributionEntry = null as any;
export const getHyperflexSoftwareDistributionEntryOutput: typeof import("./getHyperflexSoftwareDistributionEntry").getHyperflexSoftwareDistributionEntryOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexSoftwareDistributionEntry","getHyperflexSoftwareDistributionEntryOutput"], () => require("./getHyperflexSoftwareDistributionEntry"));

export { GetHyperflexSoftwareDistributionVersionArgs, GetHyperflexSoftwareDistributionVersionResult, GetHyperflexSoftwareDistributionVersionOutputArgs } from "./getHyperflexSoftwareDistributionVersion";
export const getHyperflexSoftwareDistributionVersion: typeof import("./getHyperflexSoftwareDistributionVersion").getHyperflexSoftwareDistributionVersion = null as any;
export const getHyperflexSoftwareDistributionVersionOutput: typeof import("./getHyperflexSoftwareDistributionVersion").getHyperflexSoftwareDistributionVersionOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexSoftwareDistributionVersion","getHyperflexSoftwareDistributionVersionOutput"], () => require("./getHyperflexSoftwareDistributionVersion"));

export { GetHyperflexSoftwareVersionPolicyArgs, GetHyperflexSoftwareVersionPolicyResult, GetHyperflexSoftwareVersionPolicyOutputArgs } from "./getHyperflexSoftwareVersionPolicy";
export const getHyperflexSoftwareVersionPolicy: typeof import("./getHyperflexSoftwareVersionPolicy").getHyperflexSoftwareVersionPolicy = null as any;
export const getHyperflexSoftwareVersionPolicyOutput: typeof import("./getHyperflexSoftwareVersionPolicy").getHyperflexSoftwareVersionPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexSoftwareVersionPolicy","getHyperflexSoftwareVersionPolicyOutput"], () => require("./getHyperflexSoftwareVersionPolicy"));

export { GetHyperflexStartReduceReSyncArgs, GetHyperflexStartReduceReSyncResult, GetHyperflexStartReduceReSyncOutputArgs } from "./getHyperflexStartReduceReSync";
export const getHyperflexStartReduceReSync: typeof import("./getHyperflexStartReduceReSync").getHyperflexStartReduceReSync = null as any;
export const getHyperflexStartReduceReSyncOutput: typeof import("./getHyperflexStartReduceReSync").getHyperflexStartReduceReSyncOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexStartReduceReSync","getHyperflexStartReduceReSyncOutput"], () => require("./getHyperflexStartReduceReSync"));

export { GetHyperflexStorageContainerArgs, GetHyperflexStorageContainerResult, GetHyperflexStorageContainerOutputArgs } from "./getHyperflexStorageContainer";
export const getHyperflexStorageContainer: typeof import("./getHyperflexStorageContainer").getHyperflexStorageContainer = null as any;
export const getHyperflexStorageContainerOutput: typeof import("./getHyperflexStorageContainer").getHyperflexStorageContainerOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexStorageContainer","getHyperflexStorageContainerOutput"], () => require("./getHyperflexStorageContainer"));

export { GetHyperflexSysConfigPolicyArgs, GetHyperflexSysConfigPolicyResult, GetHyperflexSysConfigPolicyOutputArgs } from "./getHyperflexSysConfigPolicy";
export const getHyperflexSysConfigPolicy: typeof import("./getHyperflexSysConfigPolicy").getHyperflexSysConfigPolicy = null as any;
export const getHyperflexSysConfigPolicyOutput: typeof import("./getHyperflexSysConfigPolicy").getHyperflexSysConfigPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexSysConfigPolicy","getHyperflexSysConfigPolicyOutput"], () => require("./getHyperflexSysConfigPolicy"));

export { GetHyperflexTargetArgs, GetHyperflexTargetResult, GetHyperflexTargetOutputArgs } from "./getHyperflexTarget";
export const getHyperflexTarget: typeof import("./getHyperflexTarget").getHyperflexTarget = null as any;
export const getHyperflexTargetOutput: typeof import("./getHyperflexTarget").getHyperflexTargetOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexTarget","getHyperflexTargetOutput"], () => require("./getHyperflexTarget"));

export { GetHyperflexUcsmConfigPolicyArgs, GetHyperflexUcsmConfigPolicyResult, GetHyperflexUcsmConfigPolicyOutputArgs } from "./getHyperflexUcsmConfigPolicy";
export const getHyperflexUcsmConfigPolicy: typeof import("./getHyperflexUcsmConfigPolicy").getHyperflexUcsmConfigPolicy = null as any;
export const getHyperflexUcsmConfigPolicyOutput: typeof import("./getHyperflexUcsmConfigPolicy").getHyperflexUcsmConfigPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexUcsmConfigPolicy","getHyperflexUcsmConfigPolicyOutput"], () => require("./getHyperflexUcsmConfigPolicy"));

export { GetHyperflexVcenterConfigPolicyArgs, GetHyperflexVcenterConfigPolicyResult, GetHyperflexVcenterConfigPolicyOutputArgs } from "./getHyperflexVcenterConfigPolicy";
export const getHyperflexVcenterConfigPolicy: typeof import("./getHyperflexVcenterConfigPolicy").getHyperflexVcenterConfigPolicy = null as any;
export const getHyperflexVcenterConfigPolicyOutput: typeof import("./getHyperflexVcenterConfigPolicy").getHyperflexVcenterConfigPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexVcenterConfigPolicy","getHyperflexVcenterConfigPolicyOutput"], () => require("./getHyperflexVcenterConfigPolicy"));

export { GetHyperflexVmBackupInfoArgs, GetHyperflexVmBackupInfoResult, GetHyperflexVmBackupInfoOutputArgs } from "./getHyperflexVmBackupInfo";
export const getHyperflexVmBackupInfo: typeof import("./getHyperflexVmBackupInfo").getHyperflexVmBackupInfo = null as any;
export const getHyperflexVmBackupInfoOutput: typeof import("./getHyperflexVmBackupInfo").getHyperflexVmBackupInfoOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexVmBackupInfo","getHyperflexVmBackupInfoOutput"], () => require("./getHyperflexVmBackupInfo"));

export { GetHyperflexVmImportOperationArgs, GetHyperflexVmImportOperationResult, GetHyperflexVmImportOperationOutputArgs } from "./getHyperflexVmImportOperation";
export const getHyperflexVmImportOperation: typeof import("./getHyperflexVmImportOperation").getHyperflexVmImportOperation = null as any;
export const getHyperflexVmImportOperationOutput: typeof import("./getHyperflexVmImportOperation").getHyperflexVmImportOperationOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexVmImportOperation","getHyperflexVmImportOperationOutput"], () => require("./getHyperflexVmImportOperation"));

export { GetHyperflexVmRestoreOperationArgs, GetHyperflexVmRestoreOperationResult, GetHyperflexVmRestoreOperationOutputArgs } from "./getHyperflexVmRestoreOperation";
export const getHyperflexVmRestoreOperation: typeof import("./getHyperflexVmRestoreOperation").getHyperflexVmRestoreOperation = null as any;
export const getHyperflexVmRestoreOperationOutput: typeof import("./getHyperflexVmRestoreOperation").getHyperflexVmRestoreOperationOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexVmRestoreOperation","getHyperflexVmRestoreOperationOutput"], () => require("./getHyperflexVmRestoreOperation"));

export { GetHyperflexVmSnapshotInfoArgs, GetHyperflexVmSnapshotInfoResult, GetHyperflexVmSnapshotInfoOutputArgs } from "./getHyperflexVmSnapshotInfo";
export const getHyperflexVmSnapshotInfo: typeof import("./getHyperflexVmSnapshotInfo").getHyperflexVmSnapshotInfo = null as any;
export const getHyperflexVmSnapshotInfoOutput: typeof import("./getHyperflexVmSnapshotInfo").getHyperflexVmSnapshotInfoOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexVmSnapshotInfo","getHyperflexVmSnapshotInfoOutput"], () => require("./getHyperflexVmSnapshotInfo"));

export { GetHyperflexVolumeArgs, GetHyperflexVolumeResult, GetHyperflexVolumeOutputArgs } from "./getHyperflexVolume";
export const getHyperflexVolume: typeof import("./getHyperflexVolume").getHyperflexVolume = null as any;
export const getHyperflexVolumeOutput: typeof import("./getHyperflexVolume").getHyperflexVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexVolume","getHyperflexVolumeOutput"], () => require("./getHyperflexVolume"));

export { GetHyperflexWitnessConfigurationArgs, GetHyperflexWitnessConfigurationResult, GetHyperflexWitnessConfigurationOutputArgs } from "./getHyperflexWitnessConfiguration";
export const getHyperflexWitnessConfiguration: typeof import("./getHyperflexWitnessConfiguration").getHyperflexWitnessConfiguration = null as any;
export const getHyperflexWitnessConfigurationOutput: typeof import("./getHyperflexWitnessConfiguration").getHyperflexWitnessConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getHyperflexWitnessConfiguration","getHyperflexWitnessConfigurationOutput"], () => require("./getHyperflexWitnessConfiguration"));

export { GetIaasConnectorPackArgs, GetIaasConnectorPackResult, GetIaasConnectorPackOutputArgs } from "./getIaasConnectorPack";
export const getIaasConnectorPack: typeof import("./getIaasConnectorPack").getIaasConnectorPack = null as any;
export const getIaasConnectorPackOutput: typeof import("./getIaasConnectorPack").getIaasConnectorPackOutput = null as any;
utilities.lazyLoad(exports, ["getIaasConnectorPack","getIaasConnectorPackOutput"], () => require("./getIaasConnectorPack"));

export { GetIaasCustomTaskInfoArgs, GetIaasCustomTaskInfoResult, GetIaasCustomTaskInfoOutputArgs } from "./getIaasCustomTaskInfo";
export const getIaasCustomTaskInfo: typeof import("./getIaasCustomTaskInfo").getIaasCustomTaskInfo = null as any;
export const getIaasCustomTaskInfoOutput: typeof import("./getIaasCustomTaskInfo").getIaasCustomTaskInfoOutput = null as any;
utilities.lazyLoad(exports, ["getIaasCustomTaskInfo","getIaasCustomTaskInfoOutput"], () => require("./getIaasCustomTaskInfo"));

export { GetIaasDeviceStatusArgs, GetIaasDeviceStatusResult, GetIaasDeviceStatusOutputArgs } from "./getIaasDeviceStatus";
export const getIaasDeviceStatus: typeof import("./getIaasDeviceStatus").getIaasDeviceStatus = null as any;
export const getIaasDeviceStatusOutput: typeof import("./getIaasDeviceStatus").getIaasDeviceStatusOutput = null as any;
utilities.lazyLoad(exports, ["getIaasDeviceStatus","getIaasDeviceStatusOutput"], () => require("./getIaasDeviceStatus"));

export { GetIaasDiagnosticMessagesArgs, GetIaasDiagnosticMessagesResult, GetIaasDiagnosticMessagesOutputArgs } from "./getIaasDiagnosticMessages";
export const getIaasDiagnosticMessages: typeof import("./getIaasDiagnosticMessages").getIaasDiagnosticMessages = null as any;
export const getIaasDiagnosticMessagesOutput: typeof import("./getIaasDiagnosticMessages").getIaasDiagnosticMessagesOutput = null as any;
utilities.lazyLoad(exports, ["getIaasDiagnosticMessages","getIaasDiagnosticMessagesOutput"], () => require("./getIaasDiagnosticMessages"));

export { GetIaasLicenseInfoArgs, GetIaasLicenseInfoResult, GetIaasLicenseInfoOutputArgs } from "./getIaasLicenseInfo";
export const getIaasLicenseInfo: typeof import("./getIaasLicenseInfo").getIaasLicenseInfo = null as any;
export const getIaasLicenseInfoOutput: typeof import("./getIaasLicenseInfo").getIaasLicenseInfoOutput = null as any;
utilities.lazyLoad(exports, ["getIaasLicenseInfo","getIaasLicenseInfoOutput"], () => require("./getIaasLicenseInfo"));

export { GetIaasMostRunTasksArgs, GetIaasMostRunTasksResult, GetIaasMostRunTasksOutputArgs } from "./getIaasMostRunTasks";
export const getIaasMostRunTasks: typeof import("./getIaasMostRunTasks").getIaasMostRunTasks = null as any;
export const getIaasMostRunTasksOutput: typeof import("./getIaasMostRunTasks").getIaasMostRunTasksOutput = null as any;
utilities.lazyLoad(exports, ["getIaasMostRunTasks","getIaasMostRunTasksOutput"], () => require("./getIaasMostRunTasks"));

export { GetIaasServiceRequestArgs, GetIaasServiceRequestResult, GetIaasServiceRequestOutputArgs } from "./getIaasServiceRequest";
export const getIaasServiceRequest: typeof import("./getIaasServiceRequest").getIaasServiceRequest = null as any;
export const getIaasServiceRequestOutput: typeof import("./getIaasServiceRequest").getIaasServiceRequestOutput = null as any;
utilities.lazyLoad(exports, ["getIaasServiceRequest","getIaasServiceRequestOutput"], () => require("./getIaasServiceRequest"));

export { GetIaasSystemTaskInfoArgs, GetIaasSystemTaskInfoResult, GetIaasSystemTaskInfoOutputArgs } from "./getIaasSystemTaskInfo";
export const getIaasSystemTaskInfo: typeof import("./getIaasSystemTaskInfo").getIaasSystemTaskInfo = null as any;
export const getIaasSystemTaskInfoOutput: typeof import("./getIaasSystemTaskInfo").getIaasSystemTaskInfoOutput = null as any;
utilities.lazyLoad(exports, ["getIaasSystemTaskInfo","getIaasSystemTaskInfoOutput"], () => require("./getIaasSystemTaskInfo"));

export { GetIaasUcsdInfoArgs, GetIaasUcsdInfoResult, GetIaasUcsdInfoOutputArgs } from "./getIaasUcsdInfo";
export const getIaasUcsdInfo: typeof import("./getIaasUcsdInfo").getIaasUcsdInfo = null as any;
export const getIaasUcsdInfoOutput: typeof import("./getIaasUcsdInfo").getIaasUcsdInfoOutput = null as any;
utilities.lazyLoad(exports, ["getIaasUcsdInfo","getIaasUcsdInfoOutput"], () => require("./getIaasUcsdInfo"));

export { GetIaasUcsdManagedInfraArgs, GetIaasUcsdManagedInfraResult, GetIaasUcsdManagedInfraOutputArgs } from "./getIaasUcsdManagedInfra";
export const getIaasUcsdManagedInfra: typeof import("./getIaasUcsdManagedInfra").getIaasUcsdManagedInfra = null as any;
export const getIaasUcsdManagedInfraOutput: typeof import("./getIaasUcsdManagedInfra").getIaasUcsdManagedInfraOutput = null as any;
utilities.lazyLoad(exports, ["getIaasUcsdManagedInfra","getIaasUcsdManagedInfraOutput"], () => require("./getIaasUcsdManagedInfra"));

export { GetIaasUcsdMessagesArgs, GetIaasUcsdMessagesResult, GetIaasUcsdMessagesOutputArgs } from "./getIaasUcsdMessages";
export const getIaasUcsdMessages: typeof import("./getIaasUcsdMessages").getIaasUcsdMessages = null as any;
export const getIaasUcsdMessagesOutput: typeof import("./getIaasUcsdMessages").getIaasUcsdMessagesOutput = null as any;
utilities.lazyLoad(exports, ["getIaasUcsdMessages","getIaasUcsdMessagesOutput"], () => require("./getIaasUcsdMessages"));

export { GetIamAccountArgs, GetIamAccountResult, GetIamAccountOutputArgs } from "./getIamAccount";
export const getIamAccount: typeof import("./getIamAccount").getIamAccount = null as any;
export const getIamAccountOutput: typeof import("./getIamAccount").getIamAccountOutput = null as any;
utilities.lazyLoad(exports, ["getIamAccount","getIamAccountOutput"], () => require("./getIamAccount"));

export { GetIamAccountExperienceArgs, GetIamAccountExperienceResult, GetIamAccountExperienceOutputArgs } from "./getIamAccountExperience";
export const getIamAccountExperience: typeof import("./getIamAccountExperience").getIamAccountExperience = null as any;
export const getIamAccountExperienceOutput: typeof import("./getIamAccountExperience").getIamAccountExperienceOutput = null as any;
utilities.lazyLoad(exports, ["getIamAccountExperience","getIamAccountExperienceOutput"], () => require("./getIamAccountExperience"));

export { GetIamApiKeyArgs, GetIamApiKeyResult, GetIamApiKeyOutputArgs } from "./getIamApiKey";
export const getIamApiKey: typeof import("./getIamApiKey").getIamApiKey = null as any;
export const getIamApiKeyOutput: typeof import("./getIamApiKey").getIamApiKeyOutput = null as any;
utilities.lazyLoad(exports, ["getIamApiKey","getIamApiKeyOutput"], () => require("./getIamApiKey"));

export { GetIamAppRegistrationArgs, GetIamAppRegistrationResult, GetIamAppRegistrationOutputArgs } from "./getIamAppRegistration";
export const getIamAppRegistration: typeof import("./getIamAppRegistration").getIamAppRegistration = null as any;
export const getIamAppRegistrationOutput: typeof import("./getIamAppRegistration").getIamAppRegistrationOutput = null as any;
utilities.lazyLoad(exports, ["getIamAppRegistration","getIamAppRegistrationOutput"], () => require("./getIamAppRegistration"));

export { GetIamBannerMessageArgs, GetIamBannerMessageResult, GetIamBannerMessageOutputArgs } from "./getIamBannerMessage";
export const getIamBannerMessage: typeof import("./getIamBannerMessage").getIamBannerMessage = null as any;
export const getIamBannerMessageOutput: typeof import("./getIamBannerMessage").getIamBannerMessageOutput = null as any;
utilities.lazyLoad(exports, ["getIamBannerMessage","getIamBannerMessageOutput"], () => require("./getIamBannerMessage"));

export { GetIamCertificateArgs, GetIamCertificateResult, GetIamCertificateOutputArgs } from "./getIamCertificate";
export const getIamCertificate: typeof import("./getIamCertificate").getIamCertificate = null as any;
export const getIamCertificateOutput: typeof import("./getIamCertificate").getIamCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getIamCertificate","getIamCertificateOutput"], () => require("./getIamCertificate"));

export { GetIamCertificateRequestArgs, GetIamCertificateRequestResult, GetIamCertificateRequestOutputArgs } from "./getIamCertificateRequest";
export const getIamCertificateRequest: typeof import("./getIamCertificateRequest").getIamCertificateRequest = null as any;
export const getIamCertificateRequestOutput: typeof import("./getIamCertificateRequest").getIamCertificateRequestOutput = null as any;
utilities.lazyLoad(exports, ["getIamCertificateRequest","getIamCertificateRequestOutput"], () => require("./getIamCertificateRequest"));

export { GetIamDomainGroupArgs, GetIamDomainGroupResult, GetIamDomainGroupOutputArgs } from "./getIamDomainGroup";
export const getIamDomainGroup: typeof import("./getIamDomainGroup").getIamDomainGroup = null as any;
export const getIamDomainGroupOutput: typeof import("./getIamDomainGroup").getIamDomainGroupOutput = null as any;
utilities.lazyLoad(exports, ["getIamDomainGroup","getIamDomainGroupOutput"], () => require("./getIamDomainGroup"));

export { GetIamDomainNameInfoArgs, GetIamDomainNameInfoResult, GetIamDomainNameInfoOutputArgs } from "./getIamDomainNameInfo";
export const getIamDomainNameInfo: typeof import("./getIamDomainNameInfo").getIamDomainNameInfo = null as any;
export const getIamDomainNameInfoOutput: typeof import("./getIamDomainNameInfo").getIamDomainNameInfoOutput = null as any;
utilities.lazyLoad(exports, ["getIamDomainNameInfo","getIamDomainNameInfoOutput"], () => require("./getIamDomainNameInfo"));

export { GetIamEndPointPrivilegeArgs, GetIamEndPointPrivilegeResult, GetIamEndPointPrivilegeOutputArgs } from "./getIamEndPointPrivilege";
export const getIamEndPointPrivilege: typeof import("./getIamEndPointPrivilege").getIamEndPointPrivilege = null as any;
export const getIamEndPointPrivilegeOutput: typeof import("./getIamEndPointPrivilege").getIamEndPointPrivilegeOutput = null as any;
utilities.lazyLoad(exports, ["getIamEndPointPrivilege","getIamEndPointPrivilegeOutput"], () => require("./getIamEndPointPrivilege"));

export { GetIamEndPointRoleArgs, GetIamEndPointRoleResult, GetIamEndPointRoleOutputArgs } from "./getIamEndPointRole";
export const getIamEndPointRole: typeof import("./getIamEndPointRole").getIamEndPointRole = null as any;
export const getIamEndPointRoleOutput: typeof import("./getIamEndPointRole").getIamEndPointRoleOutput = null as any;
utilities.lazyLoad(exports, ["getIamEndPointRole","getIamEndPointRoleOutput"], () => require("./getIamEndPointRole"));

export { GetIamEndPointUserArgs, GetIamEndPointUserResult, GetIamEndPointUserOutputArgs } from "./getIamEndPointUser";
export const getIamEndPointUser: typeof import("./getIamEndPointUser").getIamEndPointUser = null as any;
export const getIamEndPointUserOutput: typeof import("./getIamEndPointUser").getIamEndPointUserOutput = null as any;
utilities.lazyLoad(exports, ["getIamEndPointUser","getIamEndPointUserOutput"], () => require("./getIamEndPointUser"));

export { GetIamEndPointUserInventoryArgs, GetIamEndPointUserInventoryResult, GetIamEndPointUserInventoryOutputArgs } from "./getIamEndPointUserInventory";
export const getIamEndPointUserInventory: typeof import("./getIamEndPointUserInventory").getIamEndPointUserInventory = null as any;
export const getIamEndPointUserInventoryOutput: typeof import("./getIamEndPointUserInventory").getIamEndPointUserInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getIamEndPointUserInventory","getIamEndPointUserInventoryOutput"], () => require("./getIamEndPointUserInventory"));

export { GetIamEndPointUserPolicyArgs, GetIamEndPointUserPolicyResult, GetIamEndPointUserPolicyOutputArgs } from "./getIamEndPointUserPolicy";
export const getIamEndPointUserPolicy: typeof import("./getIamEndPointUserPolicy").getIamEndPointUserPolicy = null as any;
export const getIamEndPointUserPolicyOutput: typeof import("./getIamEndPointUserPolicy").getIamEndPointUserPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIamEndPointUserPolicy","getIamEndPointUserPolicyOutput"], () => require("./getIamEndPointUserPolicy"));

export { GetIamEndPointUserPolicyInventoryArgs, GetIamEndPointUserPolicyInventoryResult, GetIamEndPointUserPolicyInventoryOutputArgs } from "./getIamEndPointUserPolicyInventory";
export const getIamEndPointUserPolicyInventory: typeof import("./getIamEndPointUserPolicyInventory").getIamEndPointUserPolicyInventory = null as any;
export const getIamEndPointUserPolicyInventoryOutput: typeof import("./getIamEndPointUserPolicyInventory").getIamEndPointUserPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getIamEndPointUserPolicyInventory","getIamEndPointUserPolicyInventoryOutput"], () => require("./getIamEndPointUserPolicyInventory"));

export { GetIamEndPointUserRoleArgs, GetIamEndPointUserRoleResult, GetIamEndPointUserRoleOutputArgs } from "./getIamEndPointUserRole";
export const getIamEndPointUserRole: typeof import("./getIamEndPointUserRole").getIamEndPointUserRole = null as any;
export const getIamEndPointUserRoleOutput: typeof import("./getIamEndPointUserRole").getIamEndPointUserRoleOutput = null as any;
utilities.lazyLoad(exports, ["getIamEndPointUserRole","getIamEndPointUserRoleOutput"], () => require("./getIamEndPointUserRole"));

export { GetIamEndPointUserRoleInventoryArgs, GetIamEndPointUserRoleInventoryResult, GetIamEndPointUserRoleInventoryOutputArgs } from "./getIamEndPointUserRoleInventory";
export const getIamEndPointUserRoleInventory: typeof import("./getIamEndPointUserRoleInventory").getIamEndPointUserRoleInventory = null as any;
export const getIamEndPointUserRoleInventoryOutput: typeof import("./getIamEndPointUserRoleInventory").getIamEndPointUserRoleInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getIamEndPointUserRoleInventory","getIamEndPointUserRoleInventoryOutput"], () => require("./getIamEndPointUserRoleInventory"));

export { GetIamIdpArgs, GetIamIdpResult, GetIamIdpOutputArgs } from "./getIamIdp";
export const getIamIdp: typeof import("./getIamIdp").getIamIdp = null as any;
export const getIamIdpOutput: typeof import("./getIamIdp").getIamIdpOutput = null as any;
utilities.lazyLoad(exports, ["getIamIdp","getIamIdpOutput"], () => require("./getIamIdp"));

export { GetIamIdpReferenceArgs, GetIamIdpReferenceResult, GetIamIdpReferenceOutputArgs } from "./getIamIdpReference";
export const getIamIdpReference: typeof import("./getIamIdpReference").getIamIdpReference = null as any;
export const getIamIdpReferenceOutput: typeof import("./getIamIdpReference").getIamIdpReferenceOutput = null as any;
utilities.lazyLoad(exports, ["getIamIdpReference","getIamIdpReferenceOutput"], () => require("./getIamIdpReference"));

export { GetIamIpAccessManagementArgs, GetIamIpAccessManagementResult, GetIamIpAccessManagementOutputArgs } from "./getIamIpAccessManagement";
export const getIamIpAccessManagement: typeof import("./getIamIpAccessManagement").getIamIpAccessManagement = null as any;
export const getIamIpAccessManagementOutput: typeof import("./getIamIpAccessManagement").getIamIpAccessManagementOutput = null as any;
utilities.lazyLoad(exports, ["getIamIpAccessManagement","getIamIpAccessManagementOutput"], () => require("./getIamIpAccessManagement"));

export { GetIamIpAddressArgs, GetIamIpAddressResult, GetIamIpAddressOutputArgs } from "./getIamIpAddress";
export const getIamIpAddress: typeof import("./getIamIpAddress").getIamIpAddress = null as any;
export const getIamIpAddressOutput: typeof import("./getIamIpAddress").getIamIpAddressOutput = null as any;
utilities.lazyLoad(exports, ["getIamIpAddress","getIamIpAddressOutput"], () => require("./getIamIpAddress"));

export { GetIamLdapConfigParamsArgs, GetIamLdapConfigParamsResult, GetIamLdapConfigParamsOutputArgs } from "./getIamLdapConfigParams";
export const getIamLdapConfigParams: typeof import("./getIamLdapConfigParams").getIamLdapConfigParams = null as any;
export const getIamLdapConfigParamsOutput: typeof import("./getIamLdapConfigParams").getIamLdapConfigParamsOutput = null as any;
utilities.lazyLoad(exports, ["getIamLdapConfigParams","getIamLdapConfigParamsOutput"], () => require("./getIamLdapConfigParams"));

export { GetIamLdapGroupArgs, GetIamLdapGroupResult, GetIamLdapGroupOutputArgs } from "./getIamLdapGroup";
export const getIamLdapGroup: typeof import("./getIamLdapGroup").getIamLdapGroup = null as any;
export const getIamLdapGroupOutput: typeof import("./getIamLdapGroup").getIamLdapGroupOutput = null as any;
utilities.lazyLoad(exports, ["getIamLdapGroup","getIamLdapGroupOutput"], () => require("./getIamLdapGroup"));

export { GetIamLdapPolicyArgs, GetIamLdapPolicyResult, GetIamLdapPolicyOutputArgs } from "./getIamLdapPolicy";
export const getIamLdapPolicy: typeof import("./getIamLdapPolicy").getIamLdapPolicy = null as any;
export const getIamLdapPolicyOutput: typeof import("./getIamLdapPolicy").getIamLdapPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIamLdapPolicy","getIamLdapPolicyOutput"], () => require("./getIamLdapPolicy"));

export { GetIamLdapProviderArgs, GetIamLdapProviderResult, GetIamLdapProviderOutputArgs } from "./getIamLdapProvider";
export const getIamLdapProvider: typeof import("./getIamLdapProvider").getIamLdapProvider = null as any;
export const getIamLdapProviderOutput: typeof import("./getIamLdapProvider").getIamLdapProviderOutput = null as any;
utilities.lazyLoad(exports, ["getIamLdapProvider","getIamLdapProviderOutput"], () => require("./getIamLdapProvider"));

export { GetIamLocalUserPasswordArgs, GetIamLocalUserPasswordResult, GetIamLocalUserPasswordOutputArgs } from "./getIamLocalUserPassword";
export const getIamLocalUserPassword: typeof import("./getIamLocalUserPassword").getIamLocalUserPassword = null as any;
export const getIamLocalUserPasswordOutput: typeof import("./getIamLocalUserPassword").getIamLocalUserPasswordOutput = null as any;
utilities.lazyLoad(exports, ["getIamLocalUserPassword","getIamLocalUserPasswordOutput"], () => require("./getIamLocalUserPassword"));

export { GetIamLocalUserPasswordPolicyArgs, GetIamLocalUserPasswordPolicyResult, GetIamLocalUserPasswordPolicyOutputArgs } from "./getIamLocalUserPasswordPolicy";
export const getIamLocalUserPasswordPolicy: typeof import("./getIamLocalUserPasswordPolicy").getIamLocalUserPasswordPolicy = null as any;
export const getIamLocalUserPasswordPolicyOutput: typeof import("./getIamLocalUserPasswordPolicy").getIamLocalUserPasswordPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIamLocalUserPasswordPolicy","getIamLocalUserPasswordPolicyOutput"], () => require("./getIamLocalUserPasswordPolicy"));

export { GetIamOAuthTokenArgs, GetIamOAuthTokenResult, GetIamOAuthTokenOutputArgs } from "./getIamOAuthToken";
export const getIamOAuthToken: typeof import("./getIamOAuthToken").getIamOAuthToken = null as any;
export const getIamOAuthTokenOutput: typeof import("./getIamOAuthToken").getIamOAuthTokenOutput = null as any;
utilities.lazyLoad(exports, ["getIamOAuthToken","getIamOAuthTokenOutput"], () => require("./getIamOAuthToken"));

export { GetIamPermissionArgs, GetIamPermissionResult, GetIamPermissionOutputArgs } from "./getIamPermission";
export const getIamPermission: typeof import("./getIamPermission").getIamPermission = null as any;
export const getIamPermissionOutput: typeof import("./getIamPermission").getIamPermissionOutput = null as any;
utilities.lazyLoad(exports, ["getIamPermission","getIamPermissionOutput"], () => require("./getIamPermission"));

export { GetIamPrivateKeySpecArgs, GetIamPrivateKeySpecResult, GetIamPrivateKeySpecOutputArgs } from "./getIamPrivateKeySpec";
export const getIamPrivateKeySpec: typeof import("./getIamPrivateKeySpec").getIamPrivateKeySpec = null as any;
export const getIamPrivateKeySpecOutput: typeof import("./getIamPrivateKeySpec").getIamPrivateKeySpecOutput = null as any;
utilities.lazyLoad(exports, ["getIamPrivateKeySpec","getIamPrivateKeySpecOutput"], () => require("./getIamPrivateKeySpec"));

export { GetIamPrivilegeArgs, GetIamPrivilegeResult, GetIamPrivilegeOutputArgs } from "./getIamPrivilege";
export const getIamPrivilege: typeof import("./getIamPrivilege").getIamPrivilege = null as any;
export const getIamPrivilegeOutput: typeof import("./getIamPrivilege").getIamPrivilegeOutput = null as any;
utilities.lazyLoad(exports, ["getIamPrivilege","getIamPrivilegeOutput"], () => require("./getIamPrivilege"));

export { GetIamPrivilegeSetArgs, GetIamPrivilegeSetResult, GetIamPrivilegeSetOutputArgs } from "./getIamPrivilegeSet";
export const getIamPrivilegeSet: typeof import("./getIamPrivilegeSet").getIamPrivilegeSet = null as any;
export const getIamPrivilegeSetOutput: typeof import("./getIamPrivilegeSet").getIamPrivilegeSetOutput = null as any;
utilities.lazyLoad(exports, ["getIamPrivilegeSet","getIamPrivilegeSetOutput"], () => require("./getIamPrivilegeSet"));

export { GetIamQualifierArgs, GetIamQualifierResult, GetIamQualifierOutputArgs } from "./getIamQualifier";
export const getIamQualifier: typeof import("./getIamQualifier").getIamQualifier = null as any;
export const getIamQualifierOutput: typeof import("./getIamQualifier").getIamQualifierOutput = null as any;
utilities.lazyLoad(exports, ["getIamQualifier","getIamQualifierOutput"], () => require("./getIamQualifier"));

export { GetIamResourceLimitsArgs, GetIamResourceLimitsResult, GetIamResourceLimitsOutputArgs } from "./getIamResourceLimits";
export const getIamResourceLimits: typeof import("./getIamResourceLimits").getIamResourceLimits = null as any;
export const getIamResourceLimitsOutput: typeof import("./getIamResourceLimits").getIamResourceLimitsOutput = null as any;
utilities.lazyLoad(exports, ["getIamResourceLimits","getIamResourceLimitsOutput"], () => require("./getIamResourceLimits"));

export { GetIamResourcePermissionArgs, GetIamResourcePermissionResult, GetIamResourcePermissionOutputArgs } from "./getIamResourcePermission";
export const getIamResourcePermission: typeof import("./getIamResourcePermission").getIamResourcePermission = null as any;
export const getIamResourcePermissionOutput: typeof import("./getIamResourcePermission").getIamResourcePermissionOutput = null as any;
utilities.lazyLoad(exports, ["getIamResourcePermission","getIamResourcePermissionOutput"], () => require("./getIamResourcePermission"));

export { GetIamResourceRolesArgs, GetIamResourceRolesResult, GetIamResourceRolesOutputArgs } from "./getIamResourceRoles";
export const getIamResourceRoles: typeof import("./getIamResourceRoles").getIamResourceRoles = null as any;
export const getIamResourceRolesOutput: typeof import("./getIamResourceRoles").getIamResourceRolesOutput = null as any;
utilities.lazyLoad(exports, ["getIamResourceRoles","getIamResourceRolesOutput"], () => require("./getIamResourceRoles"));

export { GetIamRoleArgs, GetIamRoleResult, GetIamRoleOutputArgs } from "./getIamRole";
export const getIamRole: typeof import("./getIamRole").getIamRole = null as any;
export const getIamRoleOutput: typeof import("./getIamRole").getIamRoleOutput = null as any;
utilities.lazyLoad(exports, ["getIamRole","getIamRoleOutput"], () => require("./getIamRole"));

export { GetIamSecurityHolderArgs, GetIamSecurityHolderResult, GetIamSecurityHolderOutputArgs } from "./getIamSecurityHolder";
export const getIamSecurityHolder: typeof import("./getIamSecurityHolder").getIamSecurityHolder = null as any;
export const getIamSecurityHolderOutput: typeof import("./getIamSecurityHolder").getIamSecurityHolderOutput = null as any;
utilities.lazyLoad(exports, ["getIamSecurityHolder","getIamSecurityHolderOutput"], () => require("./getIamSecurityHolder"));

export { GetIamServiceProviderArgs, GetIamServiceProviderResult, GetIamServiceProviderOutputArgs } from "./getIamServiceProvider";
export const getIamServiceProvider: typeof import("./getIamServiceProvider").getIamServiceProvider = null as any;
export const getIamServiceProviderOutput: typeof import("./getIamServiceProvider").getIamServiceProviderOutput = null as any;
utilities.lazyLoad(exports, ["getIamServiceProvider","getIamServiceProviderOutput"], () => require("./getIamServiceProvider"));

export { GetIamSessionArgs, GetIamSessionResult, GetIamSessionOutputArgs } from "./getIamSession";
export const getIamSession: typeof import("./getIamSession").getIamSession = null as any;
export const getIamSessionOutput: typeof import("./getIamSession").getIamSessionOutput = null as any;
utilities.lazyLoad(exports, ["getIamSession","getIamSessionOutput"], () => require("./getIamSession"));

export { GetIamSessionLimitsArgs, GetIamSessionLimitsResult, GetIamSessionLimitsOutputArgs } from "./getIamSessionLimits";
export const getIamSessionLimits: typeof import("./getIamSessionLimits").getIamSessionLimits = null as any;
export const getIamSessionLimitsOutput: typeof import("./getIamSessionLimits").getIamSessionLimitsOutput = null as any;
utilities.lazyLoad(exports, ["getIamSessionLimits","getIamSessionLimitsOutput"], () => require("./getIamSessionLimits"));

export { GetIamSharingRuleArgs, GetIamSharingRuleResult, GetIamSharingRuleOutputArgs } from "./getIamSharingRule";
export const getIamSharingRule: typeof import("./getIamSharingRule").getIamSharingRule = null as any;
export const getIamSharingRuleOutput: typeof import("./getIamSharingRule").getIamSharingRuleOutput = null as any;
utilities.lazyLoad(exports, ["getIamSharingRule","getIamSharingRuleOutput"], () => require("./getIamSharingRule"));

export { GetIamSystemArgs, GetIamSystemResult, GetIamSystemOutputArgs } from "./getIamSystem";
export const getIamSystem: typeof import("./getIamSystem").getIamSystem = null as any;
export const getIamSystemOutput: typeof import("./getIamSystem").getIamSystemOutput = null as any;
utilities.lazyLoad(exports, ["getIamSystem","getIamSystemOutput"], () => require("./getIamSystem"));

export { GetIamTrustPointArgs, GetIamTrustPointResult, GetIamTrustPointOutputArgs } from "./getIamTrustPoint";
export const getIamTrustPoint: typeof import("./getIamTrustPoint").getIamTrustPoint = null as any;
export const getIamTrustPointOutput: typeof import("./getIamTrustPoint").getIamTrustPointOutput = null as any;
utilities.lazyLoad(exports, ["getIamTrustPoint","getIamTrustPointOutput"], () => require("./getIamTrustPoint"));

export { GetIamUserArgs, GetIamUserResult, GetIamUserOutputArgs } from "./getIamUser";
export const getIamUser: typeof import("./getIamUser").getIamUser = null as any;
export const getIamUserOutput: typeof import("./getIamUser").getIamUserOutput = null as any;
utilities.lazyLoad(exports, ["getIamUser","getIamUserOutput"], () => require("./getIamUser"));

export { GetIamUserGroupArgs, GetIamUserGroupResult, GetIamUserGroupOutputArgs } from "./getIamUserGroup";
export const getIamUserGroup: typeof import("./getIamUserGroup").getIamUserGroup = null as any;
export const getIamUserGroupOutput: typeof import("./getIamUserGroup").getIamUserGroupOutput = null as any;
utilities.lazyLoad(exports, ["getIamUserGroup","getIamUserGroupOutput"], () => require("./getIamUserGroup"));

export { GetIamUserPreferenceArgs, GetIamUserPreferenceResult, GetIamUserPreferenceOutputArgs } from "./getIamUserPreference";
export const getIamUserPreference: typeof import("./getIamUserPreference").getIamUserPreference = null as any;
export const getIamUserPreferenceOutput: typeof import("./getIamUserPreference").getIamUserPreferenceOutput = null as any;
utilities.lazyLoad(exports, ["getIamUserPreference","getIamUserPreferenceOutput"], () => require("./getIamUserPreference"));

export { GetIamUserSettingArgs, GetIamUserSettingResult, GetIamUserSettingOutputArgs } from "./getIamUserSetting";
export const getIamUserSetting: typeof import("./getIamUserSetting").getIamUserSetting = null as any;
export const getIamUserSettingOutput: typeof import("./getIamUserSetting").getIamUserSettingOutput = null as any;
utilities.lazyLoad(exports, ["getIamUserSetting","getIamUserSettingOutput"], () => require("./getIamUserSetting"));

export { GetInventoryDeviceInfoArgs, GetInventoryDeviceInfoResult, GetInventoryDeviceInfoOutputArgs } from "./getInventoryDeviceInfo";
export const getInventoryDeviceInfo: typeof import("./getInventoryDeviceInfo").getInventoryDeviceInfo = null as any;
export const getInventoryDeviceInfoOutput: typeof import("./getInventoryDeviceInfo").getInventoryDeviceInfoOutput = null as any;
utilities.lazyLoad(exports, ["getInventoryDeviceInfo","getInventoryDeviceInfoOutput"], () => require("./getInventoryDeviceInfo"));

export { GetInventoryDnMoBindingArgs, GetInventoryDnMoBindingResult, GetInventoryDnMoBindingOutputArgs } from "./getInventoryDnMoBinding";
export const getInventoryDnMoBinding: typeof import("./getInventoryDnMoBinding").getInventoryDnMoBinding = null as any;
export const getInventoryDnMoBindingOutput: typeof import("./getInventoryDnMoBinding").getInventoryDnMoBindingOutput = null as any;
utilities.lazyLoad(exports, ["getInventoryDnMoBinding","getInventoryDnMoBindingOutput"], () => require("./getInventoryDnMoBinding"));

export { GetInventoryGenericInventoryArgs, GetInventoryGenericInventoryResult, GetInventoryGenericInventoryOutputArgs } from "./getInventoryGenericInventory";
export const getInventoryGenericInventory: typeof import("./getInventoryGenericInventory").getInventoryGenericInventory = null as any;
export const getInventoryGenericInventoryOutput: typeof import("./getInventoryGenericInventory").getInventoryGenericInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getInventoryGenericInventory","getInventoryGenericInventoryOutput"], () => require("./getInventoryGenericInventory"));

export { GetInventoryGenericInventoryHolderArgs, GetInventoryGenericInventoryHolderResult, GetInventoryGenericInventoryHolderOutputArgs } from "./getInventoryGenericInventoryHolder";
export const getInventoryGenericInventoryHolder: typeof import("./getInventoryGenericInventoryHolder").getInventoryGenericInventoryHolder = null as any;
export const getInventoryGenericInventoryHolderOutput: typeof import("./getInventoryGenericInventoryHolder").getInventoryGenericInventoryHolderOutput = null as any;
utilities.lazyLoad(exports, ["getInventoryGenericInventoryHolder","getInventoryGenericInventoryHolderOutput"], () => require("./getInventoryGenericInventoryHolder"));

export { GetIpmioverlanPolicyArgs, GetIpmioverlanPolicyResult, GetIpmioverlanPolicyOutputArgs } from "./getIpmioverlanPolicy";
export const getIpmioverlanPolicy: typeof import("./getIpmioverlanPolicy").getIpmioverlanPolicy = null as any;
export const getIpmioverlanPolicyOutput: typeof import("./getIpmioverlanPolicy").getIpmioverlanPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIpmioverlanPolicy","getIpmioverlanPolicyOutput"], () => require("./getIpmioverlanPolicy"));

export { GetIpmioverlanPolicyInventoryArgs, GetIpmioverlanPolicyInventoryResult, GetIpmioverlanPolicyInventoryOutputArgs } from "./getIpmioverlanPolicyInventory";
export const getIpmioverlanPolicyInventory: typeof import("./getIpmioverlanPolicyInventory").getIpmioverlanPolicyInventory = null as any;
export const getIpmioverlanPolicyInventoryOutput: typeof import("./getIpmioverlanPolicyInventory").getIpmioverlanPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getIpmioverlanPolicyInventory","getIpmioverlanPolicyInventoryOutput"], () => require("./getIpmioverlanPolicyInventory"));

export { GetIppoolBlockLeaseArgs, GetIppoolBlockLeaseResult, GetIppoolBlockLeaseOutputArgs } from "./getIppoolBlockLease";
export const getIppoolBlockLease: typeof import("./getIppoolBlockLease").getIppoolBlockLease = null as any;
export const getIppoolBlockLeaseOutput: typeof import("./getIppoolBlockLease").getIppoolBlockLeaseOutput = null as any;
utilities.lazyLoad(exports, ["getIppoolBlockLease","getIppoolBlockLeaseOutput"], () => require("./getIppoolBlockLease"));

export { GetIppoolIpLeaseArgs, GetIppoolIpLeaseResult, GetIppoolIpLeaseOutputArgs } from "./getIppoolIpLease";
export const getIppoolIpLease: typeof import("./getIppoolIpLease").getIppoolIpLease = null as any;
export const getIppoolIpLeaseOutput: typeof import("./getIppoolIpLease").getIppoolIpLeaseOutput = null as any;
utilities.lazyLoad(exports, ["getIppoolIpLease","getIppoolIpLeaseOutput"], () => require("./getIppoolIpLease"));

export { GetIppoolPoolArgs, GetIppoolPoolResult, GetIppoolPoolOutputArgs } from "./getIppoolPool";
export const getIppoolPool: typeof import("./getIppoolPool").getIppoolPool = null as any;
export const getIppoolPoolOutput: typeof import("./getIppoolPool").getIppoolPoolOutput = null as any;
utilities.lazyLoad(exports, ["getIppoolPool","getIppoolPoolOutput"], () => require("./getIppoolPool"));

export { GetIppoolPoolMemberArgs, GetIppoolPoolMemberResult, GetIppoolPoolMemberOutputArgs } from "./getIppoolPoolMember";
export const getIppoolPoolMember: typeof import("./getIppoolPoolMember").getIppoolPoolMember = null as any;
export const getIppoolPoolMemberOutput: typeof import("./getIppoolPoolMember").getIppoolPoolMemberOutput = null as any;
utilities.lazyLoad(exports, ["getIppoolPoolMember","getIppoolPoolMemberOutput"], () => require("./getIppoolPoolMember"));

export { GetIppoolReservationArgs, GetIppoolReservationResult, GetIppoolReservationOutputArgs } from "./getIppoolReservation";
export const getIppoolReservation: typeof import("./getIppoolReservation").getIppoolReservation = null as any;
export const getIppoolReservationOutput: typeof import("./getIppoolReservation").getIppoolReservationOutput = null as any;
utilities.lazyLoad(exports, ["getIppoolReservation","getIppoolReservationOutput"], () => require("./getIppoolReservation"));

export { GetIppoolShadowBlockArgs, GetIppoolShadowBlockResult, GetIppoolShadowBlockOutputArgs } from "./getIppoolShadowBlock";
export const getIppoolShadowBlock: typeof import("./getIppoolShadowBlock").getIppoolShadowBlock = null as any;
export const getIppoolShadowBlockOutput: typeof import("./getIppoolShadowBlock").getIppoolShadowBlockOutput = null as any;
utilities.lazyLoad(exports, ["getIppoolShadowBlock","getIppoolShadowBlockOutput"], () => require("./getIppoolShadowBlock"));

export { GetIppoolShadowPoolArgs, GetIppoolShadowPoolResult, GetIppoolShadowPoolOutputArgs } from "./getIppoolShadowPool";
export const getIppoolShadowPool: typeof import("./getIppoolShadowPool").getIppoolShadowPool = null as any;
export const getIppoolShadowPoolOutput: typeof import("./getIppoolShadowPool").getIppoolShadowPoolOutput = null as any;
utilities.lazyLoad(exports, ["getIppoolShadowPool","getIppoolShadowPoolOutput"], () => require("./getIppoolShadowPool"));

export { GetIppoolUniverseArgs, GetIppoolUniverseResult, GetIppoolUniverseOutputArgs } from "./getIppoolUniverse";
export const getIppoolUniverse: typeof import("./getIppoolUniverse").getIppoolUniverse = null as any;
export const getIppoolUniverseOutput: typeof import("./getIppoolUniverse").getIppoolUniverseOutput = null as any;
utilities.lazyLoad(exports, ["getIppoolUniverse","getIppoolUniverseOutput"], () => require("./getIppoolUniverse"));

export { GetIqnpoolBlockArgs, GetIqnpoolBlockResult, GetIqnpoolBlockOutputArgs } from "./getIqnpoolBlock";
export const getIqnpoolBlock: typeof import("./getIqnpoolBlock").getIqnpoolBlock = null as any;
export const getIqnpoolBlockOutput: typeof import("./getIqnpoolBlock").getIqnpoolBlockOutput = null as any;
utilities.lazyLoad(exports, ["getIqnpoolBlock","getIqnpoolBlockOutput"], () => require("./getIqnpoolBlock"));

export { GetIqnpoolLeaseArgs, GetIqnpoolLeaseResult, GetIqnpoolLeaseOutputArgs } from "./getIqnpoolLease";
export const getIqnpoolLease: typeof import("./getIqnpoolLease").getIqnpoolLease = null as any;
export const getIqnpoolLeaseOutput: typeof import("./getIqnpoolLease").getIqnpoolLeaseOutput = null as any;
utilities.lazyLoad(exports, ["getIqnpoolLease","getIqnpoolLeaseOutput"], () => require("./getIqnpoolLease"));

export { GetIqnpoolPoolArgs, GetIqnpoolPoolResult, GetIqnpoolPoolOutputArgs } from "./getIqnpoolPool";
export const getIqnpoolPool: typeof import("./getIqnpoolPool").getIqnpoolPool = null as any;
export const getIqnpoolPoolOutput: typeof import("./getIqnpoolPool").getIqnpoolPoolOutput = null as any;
utilities.lazyLoad(exports, ["getIqnpoolPool","getIqnpoolPoolOutput"], () => require("./getIqnpoolPool"));

export { GetIqnpoolPoolMemberArgs, GetIqnpoolPoolMemberResult, GetIqnpoolPoolMemberOutputArgs } from "./getIqnpoolPoolMember";
export const getIqnpoolPoolMember: typeof import("./getIqnpoolPoolMember").getIqnpoolPoolMember = null as any;
export const getIqnpoolPoolMemberOutput: typeof import("./getIqnpoolPoolMember").getIqnpoolPoolMemberOutput = null as any;
utilities.lazyLoad(exports, ["getIqnpoolPoolMember","getIqnpoolPoolMemberOutput"], () => require("./getIqnpoolPoolMember"));

export { GetIqnpoolReservationArgs, GetIqnpoolReservationResult, GetIqnpoolReservationOutputArgs } from "./getIqnpoolReservation";
export const getIqnpoolReservation: typeof import("./getIqnpoolReservation").getIqnpoolReservation = null as any;
export const getIqnpoolReservationOutput: typeof import("./getIqnpoolReservation").getIqnpoolReservationOutput = null as any;
utilities.lazyLoad(exports, ["getIqnpoolReservation","getIqnpoolReservationOutput"], () => require("./getIqnpoolReservation"));

export { GetIqnpoolUniverseArgs, GetIqnpoolUniverseResult, GetIqnpoolUniverseOutputArgs } from "./getIqnpoolUniverse";
export const getIqnpoolUniverse: typeof import("./getIqnpoolUniverse").getIqnpoolUniverse = null as any;
export const getIqnpoolUniverseOutput: typeof import("./getIqnpoolUniverse").getIqnpoolUniverseOutput = null as any;
utilities.lazyLoad(exports, ["getIqnpoolUniverse","getIqnpoolUniverseOutput"], () => require("./getIqnpoolUniverse"));

export { GetIwotenantMaintenanceNotificationArgs, GetIwotenantMaintenanceNotificationResult, GetIwotenantMaintenanceNotificationOutputArgs } from "./getIwotenantMaintenanceNotification";
export const getIwotenantMaintenanceNotification: typeof import("./getIwotenantMaintenanceNotification").getIwotenantMaintenanceNotification = null as any;
export const getIwotenantMaintenanceNotificationOutput: typeof import("./getIwotenantMaintenanceNotification").getIwotenantMaintenanceNotificationOutput = null as any;
utilities.lazyLoad(exports, ["getIwotenantMaintenanceNotification","getIwotenantMaintenanceNotificationOutput"], () => require("./getIwotenantMaintenanceNotification"));

export { GetIwotenantMigrateArgs, GetIwotenantMigrateResult, GetIwotenantMigrateOutputArgs } from "./getIwotenantMigrate";
export const getIwotenantMigrate: typeof import("./getIwotenantMigrate").getIwotenantMigrate = null as any;
export const getIwotenantMigrateOutput: typeof import("./getIwotenantMigrate").getIwotenantMigrateOutput = null as any;
utilities.lazyLoad(exports, ["getIwotenantMigrate","getIwotenantMigrateOutput"], () => require("./getIwotenantMigrate"));

export { GetIwotenantTenantCustomizationArgs, GetIwotenantTenantCustomizationResult, GetIwotenantTenantCustomizationOutputArgs } from "./getIwotenantTenantCustomization";
export const getIwotenantTenantCustomization: typeof import("./getIwotenantTenantCustomization").getIwotenantTenantCustomization = null as any;
export const getIwotenantTenantCustomizationOutput: typeof import("./getIwotenantTenantCustomization").getIwotenantTenantCustomizationOutput = null as any;
utilities.lazyLoad(exports, ["getIwotenantTenantCustomization","getIwotenantTenantCustomizationOutput"], () => require("./getIwotenantTenantCustomization"));

export { GetIwotenantTenantStatusArgs, GetIwotenantTenantStatusResult, GetIwotenantTenantStatusOutputArgs } from "./getIwotenantTenantStatus";
export const getIwotenantTenantStatus: typeof import("./getIwotenantTenantStatus").getIwotenantTenantStatus = null as any;
export const getIwotenantTenantStatusOutput: typeof import("./getIwotenantTenantStatus").getIwotenantTenantStatusOutput = null as any;
utilities.lazyLoad(exports, ["getIwotenantTenantStatus","getIwotenantTenantStatusOutput"], () => require("./getIwotenantTenantStatus"));

export { GetKubernetesAciCniApicArgs, GetKubernetesAciCniApicResult, GetKubernetesAciCniApicOutputArgs } from "./getKubernetesAciCniApic";
export const getKubernetesAciCniApic: typeof import("./getKubernetesAciCniApic").getKubernetesAciCniApic = null as any;
export const getKubernetesAciCniApicOutput: typeof import("./getKubernetesAciCniApic").getKubernetesAciCniApicOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesAciCniApic","getKubernetesAciCniApicOutput"], () => require("./getKubernetesAciCniApic"));

export { GetKubernetesAciCniProfileArgs, GetKubernetesAciCniProfileResult, GetKubernetesAciCniProfileOutputArgs } from "./getKubernetesAciCniProfile";
export const getKubernetesAciCniProfile: typeof import("./getKubernetesAciCniProfile").getKubernetesAciCniProfile = null as any;
export const getKubernetesAciCniProfileOutput: typeof import("./getKubernetesAciCniProfile").getKubernetesAciCniProfileOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesAciCniProfile","getKubernetesAciCniProfileOutput"], () => require("./getKubernetesAciCniProfile"));

export { GetKubernetesAciCniTenantClusterAllocationArgs, GetKubernetesAciCniTenantClusterAllocationResult, GetKubernetesAciCniTenantClusterAllocationOutputArgs } from "./getKubernetesAciCniTenantClusterAllocation";
export const getKubernetesAciCniTenantClusterAllocation: typeof import("./getKubernetesAciCniTenantClusterAllocation").getKubernetesAciCniTenantClusterAllocation = null as any;
export const getKubernetesAciCniTenantClusterAllocationOutput: typeof import("./getKubernetesAciCniTenantClusterAllocation").getKubernetesAciCniTenantClusterAllocationOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesAciCniTenantClusterAllocation","getKubernetesAciCniTenantClusterAllocationOutput"], () => require("./getKubernetesAciCniTenantClusterAllocation"));

export { GetKubernetesAddonDefinitionArgs, GetKubernetesAddonDefinitionResult, GetKubernetesAddonDefinitionOutputArgs } from "./getKubernetesAddonDefinition";
export const getKubernetesAddonDefinition: typeof import("./getKubernetesAddonDefinition").getKubernetesAddonDefinition = null as any;
export const getKubernetesAddonDefinitionOutput: typeof import("./getKubernetesAddonDefinition").getKubernetesAddonDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesAddonDefinition","getKubernetesAddonDefinitionOutput"], () => require("./getKubernetesAddonDefinition"));

export { GetKubernetesAddonPolicyArgs, GetKubernetesAddonPolicyResult, GetKubernetesAddonPolicyOutputArgs } from "./getKubernetesAddonPolicy";
export const getKubernetesAddonPolicy: typeof import("./getKubernetesAddonPolicy").getKubernetesAddonPolicy = null as any;
export const getKubernetesAddonPolicyOutput: typeof import("./getKubernetesAddonPolicy").getKubernetesAddonPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesAddonPolicy","getKubernetesAddonPolicyOutput"], () => require("./getKubernetesAddonPolicy"));

export { GetKubernetesAddonRepositoryArgs, GetKubernetesAddonRepositoryResult, GetKubernetesAddonRepositoryOutputArgs } from "./getKubernetesAddonRepository";
export const getKubernetesAddonRepository: typeof import("./getKubernetesAddonRepository").getKubernetesAddonRepository = null as any;
export const getKubernetesAddonRepositoryOutput: typeof import("./getKubernetesAddonRepository").getKubernetesAddonRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesAddonRepository","getKubernetesAddonRepositoryOutput"], () => require("./getKubernetesAddonRepository"));

export { GetKubernetesBaremetalNodeProfileArgs, GetKubernetesBaremetalNodeProfileResult, GetKubernetesBaremetalNodeProfileOutputArgs } from "./getKubernetesBaremetalNodeProfile";
export const getKubernetesBaremetalNodeProfile: typeof import("./getKubernetesBaremetalNodeProfile").getKubernetesBaremetalNodeProfile = null as any;
export const getKubernetesBaremetalNodeProfileOutput: typeof import("./getKubernetesBaremetalNodeProfile").getKubernetesBaremetalNodeProfileOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesBaremetalNodeProfile","getKubernetesBaremetalNodeProfileOutput"], () => require("./getKubernetesBaremetalNodeProfile"));

export { GetKubernetesCatalogArgs, GetKubernetesCatalogResult, GetKubernetesCatalogOutputArgs } from "./getKubernetesCatalog";
export const getKubernetesCatalog: typeof import("./getKubernetesCatalog").getKubernetesCatalog = null as any;
export const getKubernetesCatalogOutput: typeof import("./getKubernetesCatalog").getKubernetesCatalogOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesCatalog","getKubernetesCatalogOutput"], () => require("./getKubernetesCatalog"));

export { GetKubernetesClusterArgs, GetKubernetesClusterResult, GetKubernetesClusterOutputArgs } from "./getKubernetesCluster";
export const getKubernetesCluster: typeof import("./getKubernetesCluster").getKubernetesCluster = null as any;
export const getKubernetesClusterOutput: typeof import("./getKubernetesCluster").getKubernetesClusterOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesCluster","getKubernetesClusterOutput"], () => require("./getKubernetesCluster"));

export { GetKubernetesClusterAddonProfileArgs, GetKubernetesClusterAddonProfileResult, GetKubernetesClusterAddonProfileOutputArgs } from "./getKubernetesClusterAddonProfile";
export const getKubernetesClusterAddonProfile: typeof import("./getKubernetesClusterAddonProfile").getKubernetesClusterAddonProfile = null as any;
export const getKubernetesClusterAddonProfileOutput: typeof import("./getKubernetesClusterAddonProfile").getKubernetesClusterAddonProfileOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesClusterAddonProfile","getKubernetesClusterAddonProfileOutput"], () => require("./getKubernetesClusterAddonProfile"));

export { GetKubernetesClusterProfileArgs, GetKubernetesClusterProfileResult, GetKubernetesClusterProfileOutputArgs } from "./getKubernetesClusterProfile";
export const getKubernetesClusterProfile: typeof import("./getKubernetesClusterProfile").getKubernetesClusterProfile = null as any;
export const getKubernetesClusterProfileOutput: typeof import("./getKubernetesClusterProfile").getKubernetesClusterProfileOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesClusterProfile","getKubernetesClusterProfileOutput"], () => require("./getKubernetesClusterProfile"));

export { GetKubernetesConfigResultArgs, GetKubernetesConfigResultResult, GetKubernetesConfigResultOutputArgs } from "./getKubernetesConfigResult";
export const getKubernetesConfigResult: typeof import("./getKubernetesConfigResult").getKubernetesConfigResult = null as any;
export const getKubernetesConfigResultOutput: typeof import("./getKubernetesConfigResult").getKubernetesConfigResultOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesConfigResult","getKubernetesConfigResultOutput"], () => require("./getKubernetesConfigResult"));

export { GetKubernetesConfigResultEntryArgs, GetKubernetesConfigResultEntryResult, GetKubernetesConfigResultEntryOutputArgs } from "./getKubernetesConfigResultEntry";
export const getKubernetesConfigResultEntry: typeof import("./getKubernetesConfigResultEntry").getKubernetesConfigResultEntry = null as any;
export const getKubernetesConfigResultEntryOutput: typeof import("./getKubernetesConfigResultEntry").getKubernetesConfigResultEntryOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesConfigResultEntry","getKubernetesConfigResultEntryOutput"], () => require("./getKubernetesConfigResultEntry"));

export { GetKubernetesContainerRuntimePolicyArgs, GetKubernetesContainerRuntimePolicyResult, GetKubernetesContainerRuntimePolicyOutputArgs } from "./getKubernetesContainerRuntimePolicy";
export const getKubernetesContainerRuntimePolicy: typeof import("./getKubernetesContainerRuntimePolicy").getKubernetesContainerRuntimePolicy = null as any;
export const getKubernetesContainerRuntimePolicyOutput: typeof import("./getKubernetesContainerRuntimePolicy").getKubernetesContainerRuntimePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesContainerRuntimePolicy","getKubernetesContainerRuntimePolicyOutput"], () => require("./getKubernetesContainerRuntimePolicy"));

export { GetKubernetesDaemonSetArgs, GetKubernetesDaemonSetResult, GetKubernetesDaemonSetOutputArgs } from "./getKubernetesDaemonSet";
export const getKubernetesDaemonSet: typeof import("./getKubernetesDaemonSet").getKubernetesDaemonSet = null as any;
export const getKubernetesDaemonSetOutput: typeof import("./getKubernetesDaemonSet").getKubernetesDaemonSetOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesDaemonSet","getKubernetesDaemonSetOutput"], () => require("./getKubernetesDaemonSet"));

export { GetKubernetesDeploymentArgs, GetKubernetesDeploymentResult, GetKubernetesDeploymentOutputArgs } from "./getKubernetesDeployment";
export const getKubernetesDeployment: typeof import("./getKubernetesDeployment").getKubernetesDeployment = null as any;
export const getKubernetesDeploymentOutput: typeof import("./getKubernetesDeployment").getKubernetesDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesDeployment","getKubernetesDeploymentOutput"], () => require("./getKubernetesDeployment"));

export { GetKubernetesHttpProxyPolicyArgs, GetKubernetesHttpProxyPolicyResult, GetKubernetesHttpProxyPolicyOutputArgs } from "./getKubernetesHttpProxyPolicy";
export const getKubernetesHttpProxyPolicy: typeof import("./getKubernetesHttpProxyPolicy").getKubernetesHttpProxyPolicy = null as any;
export const getKubernetesHttpProxyPolicyOutput: typeof import("./getKubernetesHttpProxyPolicy").getKubernetesHttpProxyPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesHttpProxyPolicy","getKubernetesHttpProxyPolicyOutput"], () => require("./getKubernetesHttpProxyPolicy"));

export { GetKubernetesIngressArgs, GetKubernetesIngressResult, GetKubernetesIngressOutputArgs } from "./getKubernetesIngress";
export const getKubernetesIngress: typeof import("./getKubernetesIngress").getKubernetesIngress = null as any;
export const getKubernetesIngressOutput: typeof import("./getKubernetesIngress").getKubernetesIngressOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesIngress","getKubernetesIngressOutput"], () => require("./getKubernetesIngress"));

export { GetKubernetesNetworkPolicyArgs, GetKubernetesNetworkPolicyResult, GetKubernetesNetworkPolicyOutputArgs } from "./getKubernetesNetworkPolicy";
export const getKubernetesNetworkPolicy: typeof import("./getKubernetesNetworkPolicy").getKubernetesNetworkPolicy = null as any;
export const getKubernetesNetworkPolicyOutput: typeof import("./getKubernetesNetworkPolicy").getKubernetesNetworkPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesNetworkPolicy","getKubernetesNetworkPolicyOutput"], () => require("./getKubernetesNetworkPolicy"));

export { GetKubernetesNodeArgs, GetKubernetesNodeResult, GetKubernetesNodeOutputArgs } from "./getKubernetesNode";
export const getKubernetesNode: typeof import("./getKubernetesNode").getKubernetesNode = null as any;
export const getKubernetesNodeOutput: typeof import("./getKubernetesNode").getKubernetesNodeOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesNode","getKubernetesNodeOutput"], () => require("./getKubernetesNode"));

export { GetKubernetesNodeGroupProfileArgs, GetKubernetesNodeGroupProfileResult, GetKubernetesNodeGroupProfileOutputArgs } from "./getKubernetesNodeGroupProfile";
export const getKubernetesNodeGroupProfile: typeof import("./getKubernetesNodeGroupProfile").getKubernetesNodeGroupProfile = null as any;
export const getKubernetesNodeGroupProfileOutput: typeof import("./getKubernetesNodeGroupProfile").getKubernetesNodeGroupProfileOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesNodeGroupProfile","getKubernetesNodeGroupProfileOutput"], () => require("./getKubernetesNodeGroupProfile"));

export { GetKubernetesNvidiaGpuProductArgs, GetKubernetesNvidiaGpuProductResult, GetKubernetesNvidiaGpuProductOutputArgs } from "./getKubernetesNvidiaGpuProduct";
export const getKubernetesNvidiaGpuProduct: typeof import("./getKubernetesNvidiaGpuProduct").getKubernetesNvidiaGpuProduct = null as any;
export const getKubernetesNvidiaGpuProductOutput: typeof import("./getKubernetesNvidiaGpuProduct").getKubernetesNvidiaGpuProductOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesNvidiaGpuProduct","getKubernetesNvidiaGpuProductOutput"], () => require("./getKubernetesNvidiaGpuProduct"));

export { GetKubernetesPodArgs, GetKubernetesPodResult, GetKubernetesPodOutputArgs } from "./getKubernetesPod";
export const getKubernetesPod: typeof import("./getKubernetesPod").getKubernetesPod = null as any;
export const getKubernetesPodOutput: typeof import("./getKubernetesPod").getKubernetesPodOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesPod","getKubernetesPodOutput"], () => require("./getKubernetesPod"));

export { GetKubernetesServiceArgs, GetKubernetesServiceResult, GetKubernetesServiceOutputArgs } from "./getKubernetesService";
export const getKubernetesService: typeof import("./getKubernetesService").getKubernetesService = null as any;
export const getKubernetesServiceOutput: typeof import("./getKubernetesService").getKubernetesServiceOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesService","getKubernetesServiceOutput"], () => require("./getKubernetesService"));

export { GetKubernetesStatefulSetArgs, GetKubernetesStatefulSetResult, GetKubernetesStatefulSetOutputArgs } from "./getKubernetesStatefulSet";
export const getKubernetesStatefulSet: typeof import("./getKubernetesStatefulSet").getKubernetesStatefulSet = null as any;
export const getKubernetesStatefulSetOutput: typeof import("./getKubernetesStatefulSet").getKubernetesStatefulSetOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesStatefulSet","getKubernetesStatefulSetOutput"], () => require("./getKubernetesStatefulSet"));

export { GetKubernetesSysConfigPolicyArgs, GetKubernetesSysConfigPolicyResult, GetKubernetesSysConfigPolicyOutputArgs } from "./getKubernetesSysConfigPolicy";
export const getKubernetesSysConfigPolicy: typeof import("./getKubernetesSysConfigPolicy").getKubernetesSysConfigPolicy = null as any;
export const getKubernetesSysConfigPolicyOutput: typeof import("./getKubernetesSysConfigPolicy").getKubernetesSysConfigPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesSysConfigPolicy","getKubernetesSysConfigPolicyOutput"], () => require("./getKubernetesSysConfigPolicy"));

export { GetKubernetesTrustedRegistriesPolicyArgs, GetKubernetesTrustedRegistriesPolicyResult, GetKubernetesTrustedRegistriesPolicyOutputArgs } from "./getKubernetesTrustedRegistriesPolicy";
export const getKubernetesTrustedRegistriesPolicy: typeof import("./getKubernetesTrustedRegistriesPolicy").getKubernetesTrustedRegistriesPolicy = null as any;
export const getKubernetesTrustedRegistriesPolicyOutput: typeof import("./getKubernetesTrustedRegistriesPolicy").getKubernetesTrustedRegistriesPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesTrustedRegistriesPolicy","getKubernetesTrustedRegistriesPolicyOutput"], () => require("./getKubernetesTrustedRegistriesPolicy"));

export { GetKubernetesVersionArgs, GetKubernetesVersionResult, GetKubernetesVersionOutputArgs } from "./getKubernetesVersion";
export const getKubernetesVersion: typeof import("./getKubernetesVersion").getKubernetesVersion = null as any;
export const getKubernetesVersionOutput: typeof import("./getKubernetesVersion").getKubernetesVersionOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesVersion","getKubernetesVersionOutput"], () => require("./getKubernetesVersion"));

export { GetKubernetesVersionPolicyArgs, GetKubernetesVersionPolicyResult, GetKubernetesVersionPolicyOutputArgs } from "./getKubernetesVersionPolicy";
export const getKubernetesVersionPolicy: typeof import("./getKubernetesVersionPolicy").getKubernetesVersionPolicy = null as any;
export const getKubernetesVersionPolicyOutput: typeof import("./getKubernetesVersionPolicy").getKubernetesVersionPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesVersionPolicy","getKubernetesVersionPolicyOutput"], () => require("./getKubernetesVersionPolicy"));

export { GetKubernetesVirtualMachineInfraConfigPolicyArgs, GetKubernetesVirtualMachineInfraConfigPolicyResult, GetKubernetesVirtualMachineInfraConfigPolicyOutputArgs } from "./getKubernetesVirtualMachineInfraConfigPolicy";
export const getKubernetesVirtualMachineInfraConfigPolicy: typeof import("./getKubernetesVirtualMachineInfraConfigPolicy").getKubernetesVirtualMachineInfraConfigPolicy = null as any;
export const getKubernetesVirtualMachineInfraConfigPolicyOutput: typeof import("./getKubernetesVirtualMachineInfraConfigPolicy").getKubernetesVirtualMachineInfraConfigPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesVirtualMachineInfraConfigPolicy","getKubernetesVirtualMachineInfraConfigPolicyOutput"], () => require("./getKubernetesVirtualMachineInfraConfigPolicy"));

export { GetKubernetesVirtualMachineInfrastructureProviderArgs, GetKubernetesVirtualMachineInfrastructureProviderResult, GetKubernetesVirtualMachineInfrastructureProviderOutputArgs } from "./getKubernetesVirtualMachineInfrastructureProvider";
export const getKubernetesVirtualMachineInfrastructureProvider: typeof import("./getKubernetesVirtualMachineInfrastructureProvider").getKubernetesVirtualMachineInfrastructureProvider = null as any;
export const getKubernetesVirtualMachineInfrastructureProviderOutput: typeof import("./getKubernetesVirtualMachineInfrastructureProvider").getKubernetesVirtualMachineInfrastructureProviderOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesVirtualMachineInfrastructureProvider","getKubernetesVirtualMachineInfrastructureProviderOutput"], () => require("./getKubernetesVirtualMachineInfrastructureProvider"));

export { GetKubernetesVirtualMachineInstanceTypeArgs, GetKubernetesVirtualMachineInstanceTypeResult, GetKubernetesVirtualMachineInstanceTypeOutputArgs } from "./getKubernetesVirtualMachineInstanceType";
export const getKubernetesVirtualMachineInstanceType: typeof import("./getKubernetesVirtualMachineInstanceType").getKubernetesVirtualMachineInstanceType = null as any;
export const getKubernetesVirtualMachineInstanceTypeOutput: typeof import("./getKubernetesVirtualMachineInstanceType").getKubernetesVirtualMachineInstanceTypeOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesVirtualMachineInstanceType","getKubernetesVirtualMachineInstanceTypeOutput"], () => require("./getKubernetesVirtualMachineInstanceType"));

export { GetKubernetesVirtualMachineNodeProfileArgs, GetKubernetesVirtualMachineNodeProfileResult, GetKubernetesVirtualMachineNodeProfileOutputArgs } from "./getKubernetesVirtualMachineNodeProfile";
export const getKubernetesVirtualMachineNodeProfile: typeof import("./getKubernetesVirtualMachineNodeProfile").getKubernetesVirtualMachineNodeProfile = null as any;
export const getKubernetesVirtualMachineNodeProfileOutput: typeof import("./getKubernetesVirtualMachineNodeProfile").getKubernetesVirtualMachineNodeProfileOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesVirtualMachineNodeProfile","getKubernetesVirtualMachineNodeProfileOutput"], () => require("./getKubernetesVirtualMachineNodeProfile"));

export { GetKvmPolicyArgs, GetKvmPolicyResult, GetKvmPolicyOutputArgs } from "./getKvmPolicy";
export const getKvmPolicy: typeof import("./getKvmPolicy").getKvmPolicy = null as any;
export const getKvmPolicyOutput: typeof import("./getKvmPolicy").getKvmPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getKvmPolicy","getKvmPolicyOutput"], () => require("./getKvmPolicy"));

export { GetKvmPolicyInventoryArgs, GetKvmPolicyInventoryResult, GetKvmPolicyInventoryOutputArgs } from "./getKvmPolicyInventory";
export const getKvmPolicyInventory: typeof import("./getKvmPolicyInventory").getKvmPolicyInventory = null as any;
export const getKvmPolicyInventoryOutput: typeof import("./getKvmPolicyInventory").getKvmPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getKvmPolicyInventory","getKvmPolicyInventoryOutput"], () => require("./getKvmPolicyInventory"));

export { GetKvmSessionArgs, GetKvmSessionResult, GetKvmSessionOutputArgs } from "./getKvmSession";
export const getKvmSession: typeof import("./getKvmSession").getKvmSession = null as any;
export const getKvmSessionOutput: typeof import("./getKvmSession").getKvmSessionOutput = null as any;
utilities.lazyLoad(exports, ["getKvmSession","getKvmSessionOutput"], () => require("./getKvmSession"));

export { GetKvmTunnelArgs, GetKvmTunnelResult, GetKvmTunnelOutputArgs } from "./getKvmTunnel";
export const getKvmTunnel: typeof import("./getKvmTunnel").getKvmTunnel = null as any;
export const getKvmTunnelOutput: typeof import("./getKvmTunnel").getKvmTunnelOutput = null as any;
utilities.lazyLoad(exports, ["getKvmTunnel","getKvmTunnelOutput"], () => require("./getKvmTunnel"));

export { GetKvmTunneledKvmPolicyArgs, GetKvmTunneledKvmPolicyResult, GetKvmTunneledKvmPolicyOutputArgs } from "./getKvmTunneledKvmPolicy";
export const getKvmTunneledKvmPolicy: typeof import("./getKvmTunneledKvmPolicy").getKvmTunneledKvmPolicy = null as any;
export const getKvmTunneledKvmPolicyOutput: typeof import("./getKvmTunneledKvmPolicy").getKvmTunneledKvmPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getKvmTunneledKvmPolicy","getKvmTunneledKvmPolicyOutput"], () => require("./getKvmTunneledKvmPolicy"));

export { GetLicenseAccountLicenseDataArgs, GetLicenseAccountLicenseDataResult, GetLicenseAccountLicenseDataOutputArgs } from "./getLicenseAccountLicenseData";
export const getLicenseAccountLicenseData: typeof import("./getLicenseAccountLicenseData").getLicenseAccountLicenseData = null as any;
export const getLicenseAccountLicenseDataOutput: typeof import("./getLicenseAccountLicenseData").getLicenseAccountLicenseDataOutput = null as any;
utilities.lazyLoad(exports, ["getLicenseAccountLicenseData","getLicenseAccountLicenseDataOutput"], () => require("./getLicenseAccountLicenseData"));

export { GetLicenseCustomerOpArgs, GetLicenseCustomerOpResult, GetLicenseCustomerOpOutputArgs } from "./getLicenseCustomerOp";
export const getLicenseCustomerOp: typeof import("./getLicenseCustomerOp").getLicenseCustomerOp = null as any;
export const getLicenseCustomerOpOutput: typeof import("./getLicenseCustomerOp").getLicenseCustomerOpOutput = null as any;
utilities.lazyLoad(exports, ["getLicenseCustomerOp","getLicenseCustomerOpOutput"], () => require("./getLicenseCustomerOp"));

export { GetLicenseIksCustomerOpArgs, GetLicenseIksCustomerOpResult, GetLicenseIksCustomerOpOutputArgs } from "./getLicenseIksCustomerOp";
export const getLicenseIksCustomerOp: typeof import("./getLicenseIksCustomerOp").getLicenseIksCustomerOp = null as any;
export const getLicenseIksCustomerOpOutput: typeof import("./getLicenseIksCustomerOp").getLicenseIksCustomerOpOutput = null as any;
utilities.lazyLoad(exports, ["getLicenseIksCustomerOp","getLicenseIksCustomerOpOutput"], () => require("./getLicenseIksCustomerOp"));

export { GetLicenseIksLicenseCountArgs, GetLicenseIksLicenseCountResult, GetLicenseIksLicenseCountOutputArgs } from "./getLicenseIksLicenseCount";
export const getLicenseIksLicenseCount: typeof import("./getLicenseIksLicenseCount").getLicenseIksLicenseCount = null as any;
export const getLicenseIksLicenseCountOutput: typeof import("./getLicenseIksLicenseCount").getLicenseIksLicenseCountOutput = null as any;
utilities.lazyLoad(exports, ["getLicenseIksLicenseCount","getLicenseIksLicenseCountOutput"], () => require("./getLicenseIksLicenseCount"));

export { GetLicenseIncCustomerOpArgs, GetLicenseIncCustomerOpResult, GetLicenseIncCustomerOpOutputArgs } from "./getLicenseIncCustomerOp";
export const getLicenseIncCustomerOp: typeof import("./getLicenseIncCustomerOp").getLicenseIncCustomerOp = null as any;
export const getLicenseIncCustomerOpOutput: typeof import("./getLicenseIncCustomerOp").getLicenseIncCustomerOpOutput = null as any;
utilities.lazyLoad(exports, ["getLicenseIncCustomerOp","getLicenseIncCustomerOpOutput"], () => require("./getLicenseIncCustomerOp"));

export { GetLicenseIncLicenseCountArgs, GetLicenseIncLicenseCountResult, GetLicenseIncLicenseCountOutputArgs } from "./getLicenseIncLicenseCount";
export const getLicenseIncLicenseCount: typeof import("./getLicenseIncLicenseCount").getLicenseIncLicenseCount = null as any;
export const getLicenseIncLicenseCountOutput: typeof import("./getLicenseIncLicenseCount").getLicenseIncLicenseCountOutput = null as any;
utilities.lazyLoad(exports, ["getLicenseIncLicenseCount","getLicenseIncLicenseCountOutput"], () => require("./getLicenseIncLicenseCount"));

export { GetLicenseIwoCustomerOpArgs, GetLicenseIwoCustomerOpResult, GetLicenseIwoCustomerOpOutputArgs } from "./getLicenseIwoCustomerOp";
export const getLicenseIwoCustomerOp: typeof import("./getLicenseIwoCustomerOp").getLicenseIwoCustomerOp = null as any;
export const getLicenseIwoCustomerOpOutput: typeof import("./getLicenseIwoCustomerOp").getLicenseIwoCustomerOpOutput = null as any;
utilities.lazyLoad(exports, ["getLicenseIwoCustomerOp","getLicenseIwoCustomerOpOutput"], () => require("./getLicenseIwoCustomerOp"));

export { GetLicenseIwoLicenseCountArgs, GetLicenseIwoLicenseCountResult, GetLicenseIwoLicenseCountOutputArgs } from "./getLicenseIwoLicenseCount";
export const getLicenseIwoLicenseCount: typeof import("./getLicenseIwoLicenseCount").getLicenseIwoLicenseCount = null as any;
export const getLicenseIwoLicenseCountOutput: typeof import("./getLicenseIwoLicenseCount").getLicenseIwoLicenseCountOutput = null as any;
utilities.lazyLoad(exports, ["getLicenseIwoLicenseCount","getLicenseIwoLicenseCountOutput"], () => require("./getLicenseIwoLicenseCount"));

export { GetLicenseLicenseInfoArgs, GetLicenseLicenseInfoResult, GetLicenseLicenseInfoOutputArgs } from "./getLicenseLicenseInfo";
export const getLicenseLicenseInfo: typeof import("./getLicenseLicenseInfo").getLicenseLicenseInfo = null as any;
export const getLicenseLicenseInfoOutput: typeof import("./getLicenseLicenseInfo").getLicenseLicenseInfoOutput = null as any;
utilities.lazyLoad(exports, ["getLicenseLicenseInfo","getLicenseLicenseInfoOutput"], () => require("./getLicenseLicenseInfo"));

export { GetLicenseLicenseInfoViewArgs, GetLicenseLicenseInfoViewResult, GetLicenseLicenseInfoViewOutputArgs } from "./getLicenseLicenseInfoView";
export const getLicenseLicenseInfoView: typeof import("./getLicenseLicenseInfoView").getLicenseLicenseInfoView = null as any;
export const getLicenseLicenseInfoViewOutput: typeof import("./getLicenseLicenseInfoView").getLicenseLicenseInfoViewOutput = null as any;
utilities.lazyLoad(exports, ["getLicenseLicenseInfoView","getLicenseLicenseInfoViewOutput"], () => require("./getLicenseLicenseInfoView"));

export { GetLicenseLicenseRegistrationStatusArgs, GetLicenseLicenseRegistrationStatusResult, GetLicenseLicenseRegistrationStatusOutputArgs } from "./getLicenseLicenseRegistrationStatus";
export const getLicenseLicenseRegistrationStatus: typeof import("./getLicenseLicenseRegistrationStatus").getLicenseLicenseRegistrationStatus = null as any;
export const getLicenseLicenseRegistrationStatusOutput: typeof import("./getLicenseLicenseRegistrationStatus").getLicenseLicenseRegistrationStatusOutput = null as any;
utilities.lazyLoad(exports, ["getLicenseLicenseRegistrationStatus","getLicenseLicenseRegistrationStatusOutput"], () => require("./getLicenseLicenseRegistrationStatus"));

export { GetLicenseLicenseReservationOpArgs, GetLicenseLicenseReservationOpResult, GetLicenseLicenseReservationOpOutputArgs } from "./getLicenseLicenseReservationOp";
export const getLicenseLicenseReservationOp: typeof import("./getLicenseLicenseReservationOp").getLicenseLicenseReservationOp = null as any;
export const getLicenseLicenseReservationOpOutput: typeof import("./getLicenseLicenseReservationOp").getLicenseLicenseReservationOpOutput = null as any;
utilities.lazyLoad(exports, ["getLicenseLicenseReservationOp","getLicenseLicenseReservationOpOutput"], () => require("./getLicenseLicenseReservationOp"));

export { GetLicenseSmartlicenseTokenArgs, GetLicenseSmartlicenseTokenResult, GetLicenseSmartlicenseTokenOutputArgs } from "./getLicenseSmartlicenseToken";
export const getLicenseSmartlicenseToken: typeof import("./getLicenseSmartlicenseToken").getLicenseSmartlicenseToken = null as any;
export const getLicenseSmartlicenseTokenOutput: typeof import("./getLicenseSmartlicenseToken").getLicenseSmartlicenseTokenOutput = null as any;
utilities.lazyLoad(exports, ["getLicenseSmartlicenseToken","getLicenseSmartlicenseTokenOutput"], () => require("./getLicenseSmartlicenseToken"));

export { GetLsServiceProfileArgs, GetLsServiceProfileResult, GetLsServiceProfileOutputArgs } from "./getLsServiceProfile";
export const getLsServiceProfile: typeof import("./getLsServiceProfile").getLsServiceProfile = null as any;
export const getLsServiceProfileOutput: typeof import("./getLsServiceProfile").getLsServiceProfileOutput = null as any;
utilities.lazyLoad(exports, ["getLsServiceProfile","getLsServiceProfileOutput"], () => require("./getLsServiceProfile"));

export { GetMacpoolIdBlockArgs, GetMacpoolIdBlockResult, GetMacpoolIdBlockOutputArgs } from "./getMacpoolIdBlock";
export const getMacpoolIdBlock: typeof import("./getMacpoolIdBlock").getMacpoolIdBlock = null as any;
export const getMacpoolIdBlockOutput: typeof import("./getMacpoolIdBlock").getMacpoolIdBlockOutput = null as any;
utilities.lazyLoad(exports, ["getMacpoolIdBlock","getMacpoolIdBlockOutput"], () => require("./getMacpoolIdBlock"));

export { GetMacpoolLeaseArgs, GetMacpoolLeaseResult, GetMacpoolLeaseOutputArgs } from "./getMacpoolLease";
export const getMacpoolLease: typeof import("./getMacpoolLease").getMacpoolLease = null as any;
export const getMacpoolLeaseOutput: typeof import("./getMacpoolLease").getMacpoolLeaseOutput = null as any;
utilities.lazyLoad(exports, ["getMacpoolLease","getMacpoolLeaseOutput"], () => require("./getMacpoolLease"));

export { GetMacpoolPoolArgs, GetMacpoolPoolResult, GetMacpoolPoolOutputArgs } from "./getMacpoolPool";
export const getMacpoolPool: typeof import("./getMacpoolPool").getMacpoolPool = null as any;
export const getMacpoolPoolOutput: typeof import("./getMacpoolPool").getMacpoolPoolOutput = null as any;
utilities.lazyLoad(exports, ["getMacpoolPool","getMacpoolPoolOutput"], () => require("./getMacpoolPool"));

export { GetMacpoolPoolMemberArgs, GetMacpoolPoolMemberResult, GetMacpoolPoolMemberOutputArgs } from "./getMacpoolPoolMember";
export const getMacpoolPoolMember: typeof import("./getMacpoolPoolMember").getMacpoolPoolMember = null as any;
export const getMacpoolPoolMemberOutput: typeof import("./getMacpoolPoolMember").getMacpoolPoolMemberOutput = null as any;
utilities.lazyLoad(exports, ["getMacpoolPoolMember","getMacpoolPoolMemberOutput"], () => require("./getMacpoolPoolMember"));

export { GetMacpoolReservationArgs, GetMacpoolReservationResult, GetMacpoolReservationOutputArgs } from "./getMacpoolReservation";
export const getMacpoolReservation: typeof import("./getMacpoolReservation").getMacpoolReservation = null as any;
export const getMacpoolReservationOutput: typeof import("./getMacpoolReservation").getMacpoolReservationOutput = null as any;
utilities.lazyLoad(exports, ["getMacpoolReservation","getMacpoolReservationOutput"], () => require("./getMacpoolReservation"));

export { GetMacpoolUniverseArgs, GetMacpoolUniverseResult, GetMacpoolUniverseOutputArgs } from "./getMacpoolUniverse";
export const getMacpoolUniverse: typeof import("./getMacpoolUniverse").getMacpoolUniverse = null as any;
export const getMacpoolUniverseOutput: typeof import("./getMacpoolUniverse").getMacpoolUniverseOutput = null as any;
utilities.lazyLoad(exports, ["getMacpoolUniverse","getMacpoolUniverseOutput"], () => require("./getMacpoolUniverse"));

export { GetManagementControllerArgs, GetManagementControllerResult, GetManagementControllerOutputArgs } from "./getManagementController";
export const getManagementController: typeof import("./getManagementController").getManagementController = null as any;
export const getManagementControllerOutput: typeof import("./getManagementController").getManagementControllerOutput = null as any;
utilities.lazyLoad(exports, ["getManagementController","getManagementControllerOutput"], () => require("./getManagementController"));

export { GetManagementEntityArgs, GetManagementEntityResult, GetManagementEntityOutputArgs } from "./getManagementEntity";
export const getManagementEntity: typeof import("./getManagementEntity").getManagementEntity = null as any;
export const getManagementEntityOutput: typeof import("./getManagementEntity").getManagementEntityOutput = null as any;
utilities.lazyLoad(exports, ["getManagementEntity","getManagementEntityOutput"], () => require("./getManagementEntity"));

export { GetManagementInterfaceArgs, GetManagementInterfaceResult, GetManagementInterfaceOutputArgs } from "./getManagementInterface";
export const getManagementInterface: typeof import("./getManagementInterface").getManagementInterface = null as any;
export const getManagementInterfaceOutput: typeof import("./getManagementInterface").getManagementInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getManagementInterface","getManagementInterfaceOutput"], () => require("./getManagementInterface"));

export { GetMarketplaceUseCaseArgs, GetMarketplaceUseCaseResult, GetMarketplaceUseCaseOutputArgs } from "./getMarketplaceUseCase";
export const getMarketplaceUseCase: typeof import("./getMarketplaceUseCase").getMarketplaceUseCase = null as any;
export const getMarketplaceUseCaseOutput: typeof import("./getMarketplaceUseCase").getMarketplaceUseCaseOutput = null as any;
utilities.lazyLoad(exports, ["getMarketplaceUseCase","getMarketplaceUseCaseOutput"], () => require("./getMarketplaceUseCase"));

export { GetMarketplaceUseCaseVersionArgs, GetMarketplaceUseCaseVersionResult, GetMarketplaceUseCaseVersionOutputArgs } from "./getMarketplaceUseCaseVersion";
export const getMarketplaceUseCaseVersion: typeof import("./getMarketplaceUseCaseVersion").getMarketplaceUseCaseVersion = null as any;
export const getMarketplaceUseCaseVersionOutput: typeof import("./getMarketplaceUseCaseVersion").getMarketplaceUseCaseVersionOutput = null as any;
utilities.lazyLoad(exports, ["getMarketplaceUseCaseVersion","getMarketplaceUseCaseVersionOutput"], () => require("./getMarketplaceUseCaseVersion"));

export { GetMemoryArrayArgs, GetMemoryArrayResult, GetMemoryArrayOutputArgs } from "./getMemoryArray";
export const getMemoryArray: typeof import("./getMemoryArray").getMemoryArray = null as any;
export const getMemoryArrayOutput: typeof import("./getMemoryArray").getMemoryArrayOutput = null as any;
utilities.lazyLoad(exports, ["getMemoryArray","getMemoryArrayOutput"], () => require("./getMemoryArray"));

export { GetMemoryPersistentMemoryConfigResultArgs, GetMemoryPersistentMemoryConfigResultResult, GetMemoryPersistentMemoryConfigResultOutputArgs } from "./getMemoryPersistentMemoryConfigResult";
export const getMemoryPersistentMemoryConfigResult: typeof import("./getMemoryPersistentMemoryConfigResult").getMemoryPersistentMemoryConfigResult = null as any;
export const getMemoryPersistentMemoryConfigResultOutput: typeof import("./getMemoryPersistentMemoryConfigResult").getMemoryPersistentMemoryConfigResultOutput = null as any;
utilities.lazyLoad(exports, ["getMemoryPersistentMemoryConfigResult","getMemoryPersistentMemoryConfigResultOutput"], () => require("./getMemoryPersistentMemoryConfigResult"));

export { GetMemoryPersistentMemoryConfigurationArgs, GetMemoryPersistentMemoryConfigurationResult, GetMemoryPersistentMemoryConfigurationOutputArgs } from "./getMemoryPersistentMemoryConfiguration";
export const getMemoryPersistentMemoryConfiguration: typeof import("./getMemoryPersistentMemoryConfiguration").getMemoryPersistentMemoryConfiguration = null as any;
export const getMemoryPersistentMemoryConfigurationOutput: typeof import("./getMemoryPersistentMemoryConfiguration").getMemoryPersistentMemoryConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getMemoryPersistentMemoryConfiguration","getMemoryPersistentMemoryConfigurationOutput"], () => require("./getMemoryPersistentMemoryConfiguration"));

export { GetMemoryPersistentMemoryNamespaceArgs, GetMemoryPersistentMemoryNamespaceResult, GetMemoryPersistentMemoryNamespaceOutputArgs } from "./getMemoryPersistentMemoryNamespace";
export const getMemoryPersistentMemoryNamespace: typeof import("./getMemoryPersistentMemoryNamespace").getMemoryPersistentMemoryNamespace = null as any;
export const getMemoryPersistentMemoryNamespaceOutput: typeof import("./getMemoryPersistentMemoryNamespace").getMemoryPersistentMemoryNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getMemoryPersistentMemoryNamespace","getMemoryPersistentMemoryNamespaceOutput"], () => require("./getMemoryPersistentMemoryNamespace"));

export { GetMemoryPersistentMemoryNamespaceConfigResultArgs, GetMemoryPersistentMemoryNamespaceConfigResultResult, GetMemoryPersistentMemoryNamespaceConfigResultOutputArgs } from "./getMemoryPersistentMemoryNamespaceConfigResult";
export const getMemoryPersistentMemoryNamespaceConfigResult: typeof import("./getMemoryPersistentMemoryNamespaceConfigResult").getMemoryPersistentMemoryNamespaceConfigResult = null as any;
export const getMemoryPersistentMemoryNamespaceConfigResultOutput: typeof import("./getMemoryPersistentMemoryNamespaceConfigResult").getMemoryPersistentMemoryNamespaceConfigResultOutput = null as any;
utilities.lazyLoad(exports, ["getMemoryPersistentMemoryNamespaceConfigResult","getMemoryPersistentMemoryNamespaceConfigResultOutput"], () => require("./getMemoryPersistentMemoryNamespaceConfigResult"));

export { GetMemoryPersistentMemoryPolicyArgs, GetMemoryPersistentMemoryPolicyResult, GetMemoryPersistentMemoryPolicyOutputArgs } from "./getMemoryPersistentMemoryPolicy";
export const getMemoryPersistentMemoryPolicy: typeof import("./getMemoryPersistentMemoryPolicy").getMemoryPersistentMemoryPolicy = null as any;
export const getMemoryPersistentMemoryPolicyOutput: typeof import("./getMemoryPersistentMemoryPolicy").getMemoryPersistentMemoryPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getMemoryPersistentMemoryPolicy","getMemoryPersistentMemoryPolicyOutput"], () => require("./getMemoryPersistentMemoryPolicy"));

export { GetMemoryPersistentMemoryRegionArgs, GetMemoryPersistentMemoryRegionResult, GetMemoryPersistentMemoryRegionOutputArgs } from "./getMemoryPersistentMemoryRegion";
export const getMemoryPersistentMemoryRegion: typeof import("./getMemoryPersistentMemoryRegion").getMemoryPersistentMemoryRegion = null as any;
export const getMemoryPersistentMemoryRegionOutput: typeof import("./getMemoryPersistentMemoryRegion").getMemoryPersistentMemoryRegionOutput = null as any;
utilities.lazyLoad(exports, ["getMemoryPersistentMemoryRegion","getMemoryPersistentMemoryRegionOutput"], () => require("./getMemoryPersistentMemoryRegion"));

export { GetMemoryPersistentMemoryUnitArgs, GetMemoryPersistentMemoryUnitResult, GetMemoryPersistentMemoryUnitOutputArgs } from "./getMemoryPersistentMemoryUnit";
export const getMemoryPersistentMemoryUnit: typeof import("./getMemoryPersistentMemoryUnit").getMemoryPersistentMemoryUnit = null as any;
export const getMemoryPersistentMemoryUnitOutput: typeof import("./getMemoryPersistentMemoryUnit").getMemoryPersistentMemoryUnitOutput = null as any;
utilities.lazyLoad(exports, ["getMemoryPersistentMemoryUnit","getMemoryPersistentMemoryUnitOutput"], () => require("./getMemoryPersistentMemoryUnit"));

export { GetMemoryUnitArgs, GetMemoryUnitResult, GetMemoryUnitOutputArgs } from "./getMemoryUnit";
export const getMemoryUnit: typeof import("./getMemoryUnit").getMemoryUnit = null as any;
export const getMemoryUnitOutput: typeof import("./getMemoryUnit").getMemoryUnitOutput = null as any;
utilities.lazyLoad(exports, ["getMemoryUnit","getMemoryUnitOutput"], () => require("./getMemoryUnit"));

export { GetMerakiDeviceArgs, GetMerakiDeviceResult, GetMerakiDeviceOutputArgs } from "./getMerakiDevice";
export const getMerakiDevice: typeof import("./getMerakiDevice").getMerakiDevice = null as any;
export const getMerakiDeviceOutput: typeof import("./getMerakiDevice").getMerakiDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getMerakiDevice","getMerakiDeviceOutput"], () => require("./getMerakiDevice"));

export { GetMerakiNetworkArgs, GetMerakiNetworkResult, GetMerakiNetworkOutputArgs } from "./getMerakiNetwork";
export const getMerakiNetwork: typeof import("./getMerakiNetwork").getMerakiNetwork = null as any;
export const getMerakiNetworkOutput: typeof import("./getMerakiNetwork").getMerakiNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getMerakiNetwork","getMerakiNetworkOutput"], () => require("./getMerakiNetwork"));

export { GetMerakiOrganizationArgs, GetMerakiOrganizationResult, GetMerakiOrganizationOutputArgs } from "./getMerakiOrganization";
export const getMerakiOrganization: typeof import("./getMerakiOrganization").getMerakiOrganization = null as any;
export const getMerakiOrganizationOutput: typeof import("./getMerakiOrganization").getMerakiOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getMerakiOrganization","getMerakiOrganizationOutput"], () => require("./getMerakiOrganization"));

export { GetMerakiPortProfileArgs, GetMerakiPortProfileResult, GetMerakiPortProfileOutputArgs } from "./getMerakiPortProfile";
export const getMerakiPortProfile: typeof import("./getMerakiPortProfile").getMerakiPortProfile = null as any;
export const getMerakiPortProfileOutput: typeof import("./getMerakiPortProfile").getMerakiPortProfileOutput = null as any;
utilities.lazyLoad(exports, ["getMerakiPortProfile","getMerakiPortProfileOutput"], () => require("./getMerakiPortProfile"));

export { GetMerakiTagArgs, GetMerakiTagResult, GetMerakiTagOutputArgs } from "./getMerakiTag";
export const getMerakiTag: typeof import("./getMerakiTag").getMerakiTag = null as any;
export const getMerakiTagOutput: typeof import("./getMerakiTag").getMerakiTagOutput = null as any;
utilities.lazyLoad(exports, ["getMerakiTag","getMerakiTagOutput"], () => require("./getMerakiTag"));

export { GetMetaDefinitionArgs, GetMetaDefinitionResult, GetMetaDefinitionOutputArgs } from "./getMetaDefinition";
export const getMetaDefinition: typeof import("./getMetaDefinition").getMetaDefinition = null as any;
export const getMetaDefinitionOutput: typeof import("./getMetaDefinition").getMetaDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getMetaDefinition","getMetaDefinitionOutput"], () => require("./getMetaDefinition"));

export { GetMetricsMetricsExplorationArgs, GetMetricsMetricsExplorationResult, GetMetricsMetricsExplorationOutputArgs } from "./getMetricsMetricsExploration";
export const getMetricsMetricsExploration: typeof import("./getMetricsMetricsExploration").getMetricsMetricsExploration = null as any;
export const getMetricsMetricsExplorationOutput: typeof import("./getMetricsMetricsExploration").getMetricsMetricsExplorationOutput = null as any;
utilities.lazyLoad(exports, ["getMetricsMetricsExploration","getMetricsMetricsExplorationOutput"], () => require("./getMetricsMetricsExploration"));

export { GetMonitoringHealthStatusArgs, GetMonitoringHealthStatusResult, GetMonitoringHealthStatusOutputArgs } from "./getMonitoringHealthStatus";
export const getMonitoringHealthStatus: typeof import("./getMonitoringHealthStatus").getMonitoringHealthStatus = null as any;
export const getMonitoringHealthStatusOutput: typeof import("./getMonitoringHealthStatus").getMonitoringHealthStatusOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoringHealthStatus","getMonitoringHealthStatusOutput"], () => require("./getMonitoringHealthStatus"));

export { GetNetworkDiscoveredNeighborArgs, GetNetworkDiscoveredNeighborResult, GetNetworkDiscoveredNeighborOutputArgs } from "./getNetworkDiscoveredNeighbor";
export const getNetworkDiscoveredNeighbor: typeof import("./getNetworkDiscoveredNeighbor").getNetworkDiscoveredNeighbor = null as any;
export const getNetworkDiscoveredNeighborOutput: typeof import("./getNetworkDiscoveredNeighbor").getNetworkDiscoveredNeighborOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkDiscoveredNeighbor","getNetworkDiscoveredNeighborOutput"], () => require("./getNetworkDiscoveredNeighbor"));

export { GetNetworkDnsArgs, GetNetworkDnsResult, GetNetworkDnsOutputArgs } from "./getNetworkDns";
export const getNetworkDns: typeof import("./getNetworkDns").getNetworkDns = null as any;
export const getNetworkDnsOutput: typeof import("./getNetworkDns").getNetworkDnsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkDns","getNetworkDnsOutput"], () => require("./getNetworkDns"));

export { GetNetworkElementArgs, GetNetworkElementResult, GetNetworkElementOutputArgs } from "./getNetworkElement";
export const getNetworkElement: typeof import("./getNetworkElement").getNetworkElement = null as any;
export const getNetworkElementOutput: typeof import("./getNetworkElement").getNetworkElementOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkElement","getNetworkElementOutput"], () => require("./getNetworkElement"));

export { GetNetworkElementSummaryArgs, GetNetworkElementSummaryResult, GetNetworkElementSummaryOutputArgs } from "./getNetworkElementSummary";
export const getNetworkElementSummary: typeof import("./getNetworkElementSummary").getNetworkElementSummary = null as any;
export const getNetworkElementSummaryOutput: typeof import("./getNetworkElementSummary").getNetworkElementSummaryOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkElementSummary","getNetworkElementSummaryOutput"], () => require("./getNetworkElementSummary"));

export { GetNetworkFcZoneInfoArgs, GetNetworkFcZoneInfoResult, GetNetworkFcZoneInfoOutputArgs } from "./getNetworkFcZoneInfo";
export const getNetworkFcZoneInfo: typeof import("./getNetworkFcZoneInfo").getNetworkFcZoneInfo = null as any;
export const getNetworkFcZoneInfoOutput: typeof import("./getNetworkFcZoneInfo").getNetworkFcZoneInfoOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFcZoneInfo","getNetworkFcZoneInfoOutput"], () => require("./getNetworkFcZoneInfo"));

export { GetNetworkFeatureControlArgs, GetNetworkFeatureControlResult, GetNetworkFeatureControlOutputArgs } from "./getNetworkFeatureControl";
export const getNetworkFeatureControl: typeof import("./getNetworkFeatureControl").getNetworkFeatureControl = null as any;
export const getNetworkFeatureControlOutput: typeof import("./getNetworkFeatureControl").getNetworkFeatureControlOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkFeatureControl","getNetworkFeatureControlOutput"], () => require("./getNetworkFeatureControl"));

export { GetNetworkInterfaceListArgs, GetNetworkInterfaceListResult, GetNetworkInterfaceListOutputArgs } from "./getNetworkInterfaceList";
export const getNetworkInterfaceList: typeof import("./getNetworkInterfaceList").getNetworkInterfaceList = null as any;
export const getNetworkInterfaceListOutput: typeof import("./getNetworkInterfaceList").getNetworkInterfaceListOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkInterfaceList","getNetworkInterfaceListOutput"], () => require("./getNetworkInterfaceList"));

export { GetNetworkLicenseFileArgs, GetNetworkLicenseFileResult, GetNetworkLicenseFileOutputArgs } from "./getNetworkLicenseFile";
export const getNetworkLicenseFile: typeof import("./getNetworkLicenseFile").getNetworkLicenseFile = null as any;
export const getNetworkLicenseFileOutput: typeof import("./getNetworkLicenseFile").getNetworkLicenseFileOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkLicenseFile","getNetworkLicenseFileOutput"], () => require("./getNetworkLicenseFile"));

export { GetNetworkSupervisorCardArgs, GetNetworkSupervisorCardResult, GetNetworkSupervisorCardOutputArgs } from "./getNetworkSupervisorCard";
export const getNetworkSupervisorCard: typeof import("./getNetworkSupervisorCard").getNetworkSupervisorCard = null as any;
export const getNetworkSupervisorCardOutput: typeof import("./getNetworkSupervisorCard").getNetworkSupervisorCardOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkSupervisorCard","getNetworkSupervisorCardOutput"], () => require("./getNetworkSupervisorCard"));

export { GetNetworkTelemetryCheckArgs, GetNetworkTelemetryCheckResult, GetNetworkTelemetryCheckOutputArgs } from "./getNetworkTelemetryCheck";
export const getNetworkTelemetryCheck: typeof import("./getNetworkTelemetryCheck").getNetworkTelemetryCheck = null as any;
export const getNetworkTelemetryCheckOutput: typeof import("./getNetworkTelemetryCheck").getNetworkTelemetryCheckOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkTelemetryCheck","getNetworkTelemetryCheckOutput"], () => require("./getNetworkTelemetryCheck"));

export { GetNetworkVethernetArgs, GetNetworkVethernetResult, GetNetworkVethernetOutputArgs } from "./getNetworkVethernet";
export const getNetworkVethernet: typeof import("./getNetworkVethernet").getNetworkVethernet = null as any;
export const getNetworkVethernetOutput: typeof import("./getNetworkVethernet").getNetworkVethernetOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkVethernet","getNetworkVethernetOutput"], () => require("./getNetworkVethernet"));

export { GetNetworkVfcArgs, GetNetworkVfcResult, GetNetworkVfcOutputArgs } from "./getNetworkVfc";
export const getNetworkVfc: typeof import("./getNetworkVfc").getNetworkVfc = null as any;
export const getNetworkVfcOutput: typeof import("./getNetworkVfc").getNetworkVfcOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkVfc","getNetworkVfcOutput"], () => require("./getNetworkVfc"));

export { GetNetworkVlanPortInfoArgs, GetNetworkVlanPortInfoResult, GetNetworkVlanPortInfoOutputArgs } from "./getNetworkVlanPortInfo";
export const getNetworkVlanPortInfo: typeof import("./getNetworkVlanPortInfo").getNetworkVlanPortInfo = null as any;
export const getNetworkVlanPortInfoOutput: typeof import("./getNetworkVlanPortInfo").getNetworkVlanPortInfoOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkVlanPortInfo","getNetworkVlanPortInfoOutput"], () => require("./getNetworkVlanPortInfo"));

export { GetNetworkVpcDomainArgs, GetNetworkVpcDomainResult, GetNetworkVpcDomainOutputArgs } from "./getNetworkVpcDomain";
export const getNetworkVpcDomain: typeof import("./getNetworkVpcDomain").getNetworkVpcDomain = null as any;
export const getNetworkVpcDomainOutput: typeof import("./getNetworkVpcDomain").getNetworkVpcDomainOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkVpcDomain","getNetworkVpcDomainOutput"], () => require("./getNetworkVpcDomain"));

export { GetNetworkVpcMemberArgs, GetNetworkVpcMemberResult, GetNetworkVpcMemberOutputArgs } from "./getNetworkVpcMember";
export const getNetworkVpcMember: typeof import("./getNetworkVpcMember").getNetworkVpcMember = null as any;
export const getNetworkVpcMemberOutput: typeof import("./getNetworkVpcMember").getNetworkVpcMemberOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkVpcMember","getNetworkVpcMemberOutput"], () => require("./getNetworkVpcMember"));

export { GetNetworkVpcPeerArgs, GetNetworkVpcPeerResult, GetNetworkVpcPeerOutputArgs } from "./getNetworkVpcPeer";
export const getNetworkVpcPeer: typeof import("./getNetworkVpcPeer").getNetworkVpcPeer = null as any;
export const getNetworkVpcPeerOutput: typeof import("./getNetworkVpcPeer").getNetworkVpcPeerOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkVpcPeer","getNetworkVpcPeerOutput"], () => require("./getNetworkVpcPeer"));

export { GetNetworkVrfArgs, GetNetworkVrfResult, GetNetworkVrfOutputArgs } from "./getNetworkVrf";
export const getNetworkVrf: typeof import("./getNetworkVrf").getNetworkVrf = null as any;
export const getNetworkVrfOutput: typeof import("./getNetworkVrf").getNetworkVrfOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkVrf","getNetworkVrfOutput"], () => require("./getNetworkVrf"));

export { GetNetworkconfigPolicyArgs, GetNetworkconfigPolicyResult, GetNetworkconfigPolicyOutputArgs } from "./getNetworkconfigPolicy";
export const getNetworkconfigPolicy: typeof import("./getNetworkconfigPolicy").getNetworkconfigPolicy = null as any;
export const getNetworkconfigPolicyOutput: typeof import("./getNetworkconfigPolicy").getNetworkconfigPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkconfigPolicy","getNetworkconfigPolicyOutput"], () => require("./getNetworkconfigPolicy"));

export { GetNetworkconfigPolicyInventoryArgs, GetNetworkconfigPolicyInventoryResult, GetNetworkconfigPolicyInventoryOutputArgs } from "./getNetworkconfigPolicyInventory";
export const getNetworkconfigPolicyInventory: typeof import("./getNetworkconfigPolicyInventory").getNetworkconfigPolicyInventory = null as any;
export const getNetworkconfigPolicyInventoryOutput: typeof import("./getNetworkconfigPolicyInventory").getNetworkconfigPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkconfigPolicyInventory","getNetworkconfigPolicyInventoryOutput"], () => require("./getNetworkconfigPolicyInventory"));

export { GetNiaapiApicCcoPostArgs, GetNiaapiApicCcoPostResult, GetNiaapiApicCcoPostOutputArgs } from "./getNiaapiApicCcoPost";
export const getNiaapiApicCcoPost: typeof import("./getNiaapiApicCcoPost").getNiaapiApicCcoPost = null as any;
export const getNiaapiApicCcoPostOutput: typeof import("./getNiaapiApicCcoPost").getNiaapiApicCcoPostOutput = null as any;
utilities.lazyLoad(exports, ["getNiaapiApicCcoPost","getNiaapiApicCcoPostOutput"], () => require("./getNiaapiApicCcoPost"));

export { GetNiaapiApicFieldNoticeArgs, GetNiaapiApicFieldNoticeResult, GetNiaapiApicFieldNoticeOutputArgs } from "./getNiaapiApicFieldNotice";
export const getNiaapiApicFieldNotice: typeof import("./getNiaapiApicFieldNotice").getNiaapiApicFieldNotice = null as any;
export const getNiaapiApicFieldNoticeOutput: typeof import("./getNiaapiApicFieldNotice").getNiaapiApicFieldNoticeOutput = null as any;
utilities.lazyLoad(exports, ["getNiaapiApicFieldNotice","getNiaapiApicFieldNoticeOutput"], () => require("./getNiaapiApicFieldNotice"));

export { GetNiaapiApicHweolArgs, GetNiaapiApicHweolResult, GetNiaapiApicHweolOutputArgs } from "./getNiaapiApicHweol";
export const getNiaapiApicHweol: typeof import("./getNiaapiApicHweol").getNiaapiApicHweol = null as any;
export const getNiaapiApicHweolOutput: typeof import("./getNiaapiApicHweol").getNiaapiApicHweolOutput = null as any;
utilities.lazyLoad(exports, ["getNiaapiApicHweol","getNiaapiApicHweolOutput"], () => require("./getNiaapiApicHweol"));

export { GetNiaapiApicLatestMaintainedReleaseArgs, GetNiaapiApicLatestMaintainedReleaseResult, GetNiaapiApicLatestMaintainedReleaseOutputArgs } from "./getNiaapiApicLatestMaintainedRelease";
export const getNiaapiApicLatestMaintainedRelease: typeof import("./getNiaapiApicLatestMaintainedRelease").getNiaapiApicLatestMaintainedRelease = null as any;
export const getNiaapiApicLatestMaintainedReleaseOutput: typeof import("./getNiaapiApicLatestMaintainedRelease").getNiaapiApicLatestMaintainedReleaseOutput = null as any;
utilities.lazyLoad(exports, ["getNiaapiApicLatestMaintainedRelease","getNiaapiApicLatestMaintainedReleaseOutput"], () => require("./getNiaapiApicLatestMaintainedRelease"));

export { GetNiaapiApicReleaseRecommendArgs, GetNiaapiApicReleaseRecommendResult, GetNiaapiApicReleaseRecommendOutputArgs } from "./getNiaapiApicReleaseRecommend";
export const getNiaapiApicReleaseRecommend: typeof import("./getNiaapiApicReleaseRecommend").getNiaapiApicReleaseRecommend = null as any;
export const getNiaapiApicReleaseRecommendOutput: typeof import("./getNiaapiApicReleaseRecommend").getNiaapiApicReleaseRecommendOutput = null as any;
utilities.lazyLoad(exports, ["getNiaapiApicReleaseRecommend","getNiaapiApicReleaseRecommendOutput"], () => require("./getNiaapiApicReleaseRecommend"));

export { GetNiaapiApicSweolArgs, GetNiaapiApicSweolResult, GetNiaapiApicSweolOutputArgs } from "./getNiaapiApicSweol";
export const getNiaapiApicSweol: typeof import("./getNiaapiApicSweol").getNiaapiApicSweol = null as any;
export const getNiaapiApicSweolOutput: typeof import("./getNiaapiApicSweol").getNiaapiApicSweolOutput = null as any;
utilities.lazyLoad(exports, ["getNiaapiApicSweol","getNiaapiApicSweolOutput"], () => require("./getNiaapiApicSweol"));

export { GetNiaapiDcnmCcoPostArgs, GetNiaapiDcnmCcoPostResult, GetNiaapiDcnmCcoPostOutputArgs } from "./getNiaapiDcnmCcoPost";
export const getNiaapiDcnmCcoPost: typeof import("./getNiaapiDcnmCcoPost").getNiaapiDcnmCcoPost = null as any;
export const getNiaapiDcnmCcoPostOutput: typeof import("./getNiaapiDcnmCcoPost").getNiaapiDcnmCcoPostOutput = null as any;
utilities.lazyLoad(exports, ["getNiaapiDcnmCcoPost","getNiaapiDcnmCcoPostOutput"], () => require("./getNiaapiDcnmCcoPost"));

export { GetNiaapiDcnmFieldNoticeArgs, GetNiaapiDcnmFieldNoticeResult, GetNiaapiDcnmFieldNoticeOutputArgs } from "./getNiaapiDcnmFieldNotice";
export const getNiaapiDcnmFieldNotice: typeof import("./getNiaapiDcnmFieldNotice").getNiaapiDcnmFieldNotice = null as any;
export const getNiaapiDcnmFieldNoticeOutput: typeof import("./getNiaapiDcnmFieldNotice").getNiaapiDcnmFieldNoticeOutput = null as any;
utilities.lazyLoad(exports, ["getNiaapiDcnmFieldNotice","getNiaapiDcnmFieldNoticeOutput"], () => require("./getNiaapiDcnmFieldNotice"));

export { GetNiaapiDcnmHweolArgs, GetNiaapiDcnmHweolResult, GetNiaapiDcnmHweolOutputArgs } from "./getNiaapiDcnmHweol";
export const getNiaapiDcnmHweol: typeof import("./getNiaapiDcnmHweol").getNiaapiDcnmHweol = null as any;
export const getNiaapiDcnmHweolOutput: typeof import("./getNiaapiDcnmHweol").getNiaapiDcnmHweolOutput = null as any;
utilities.lazyLoad(exports, ["getNiaapiDcnmHweol","getNiaapiDcnmHweolOutput"], () => require("./getNiaapiDcnmHweol"));

export { GetNiaapiDcnmLatestMaintainedReleaseArgs, GetNiaapiDcnmLatestMaintainedReleaseResult, GetNiaapiDcnmLatestMaintainedReleaseOutputArgs } from "./getNiaapiDcnmLatestMaintainedRelease";
export const getNiaapiDcnmLatestMaintainedRelease: typeof import("./getNiaapiDcnmLatestMaintainedRelease").getNiaapiDcnmLatestMaintainedRelease = null as any;
export const getNiaapiDcnmLatestMaintainedReleaseOutput: typeof import("./getNiaapiDcnmLatestMaintainedRelease").getNiaapiDcnmLatestMaintainedReleaseOutput = null as any;
utilities.lazyLoad(exports, ["getNiaapiDcnmLatestMaintainedRelease","getNiaapiDcnmLatestMaintainedReleaseOutput"], () => require("./getNiaapiDcnmLatestMaintainedRelease"));

export { GetNiaapiDcnmReleaseRecommendArgs, GetNiaapiDcnmReleaseRecommendResult, GetNiaapiDcnmReleaseRecommendOutputArgs } from "./getNiaapiDcnmReleaseRecommend";
export const getNiaapiDcnmReleaseRecommend: typeof import("./getNiaapiDcnmReleaseRecommend").getNiaapiDcnmReleaseRecommend = null as any;
export const getNiaapiDcnmReleaseRecommendOutput: typeof import("./getNiaapiDcnmReleaseRecommend").getNiaapiDcnmReleaseRecommendOutput = null as any;
utilities.lazyLoad(exports, ["getNiaapiDcnmReleaseRecommend","getNiaapiDcnmReleaseRecommendOutput"], () => require("./getNiaapiDcnmReleaseRecommend"));

export { GetNiaapiDcnmSweolArgs, GetNiaapiDcnmSweolResult, GetNiaapiDcnmSweolOutputArgs } from "./getNiaapiDcnmSweol";
export const getNiaapiDcnmSweol: typeof import("./getNiaapiDcnmSweol").getNiaapiDcnmSweol = null as any;
export const getNiaapiDcnmSweolOutput: typeof import("./getNiaapiDcnmSweol").getNiaapiDcnmSweolOutput = null as any;
utilities.lazyLoad(exports, ["getNiaapiDcnmSweol","getNiaapiDcnmSweolOutput"], () => require("./getNiaapiDcnmSweol"));

export { GetNiaapiFileDownloaderArgs, GetNiaapiFileDownloaderResult, GetNiaapiFileDownloaderOutputArgs } from "./getNiaapiFileDownloader";
export const getNiaapiFileDownloader: typeof import("./getNiaapiFileDownloader").getNiaapiFileDownloader = null as any;
export const getNiaapiFileDownloaderOutput: typeof import("./getNiaapiFileDownloader").getNiaapiFileDownloaderOutput = null as any;
utilities.lazyLoad(exports, ["getNiaapiFileDownloader","getNiaapiFileDownloaderOutput"], () => require("./getNiaapiFileDownloader"));

export { GetNiaapiNiaMetadataArgs, GetNiaapiNiaMetadataResult, GetNiaapiNiaMetadataOutputArgs } from "./getNiaapiNiaMetadata";
export const getNiaapiNiaMetadata: typeof import("./getNiaapiNiaMetadata").getNiaapiNiaMetadata = null as any;
export const getNiaapiNiaMetadataOutput: typeof import("./getNiaapiNiaMetadata").getNiaapiNiaMetadataOutput = null as any;
utilities.lazyLoad(exports, ["getNiaapiNiaMetadata","getNiaapiNiaMetadataOutput"], () => require("./getNiaapiNiaMetadata"));

export { GetNiaapiNibFileDownloaderArgs, GetNiaapiNibFileDownloaderResult, GetNiaapiNibFileDownloaderOutputArgs } from "./getNiaapiNibFileDownloader";
export const getNiaapiNibFileDownloader: typeof import("./getNiaapiNibFileDownloader").getNiaapiNibFileDownloader = null as any;
export const getNiaapiNibFileDownloaderOutput: typeof import("./getNiaapiNibFileDownloader").getNiaapiNibFileDownloaderOutput = null as any;
utilities.lazyLoad(exports, ["getNiaapiNibFileDownloader","getNiaapiNibFileDownloaderOutput"], () => require("./getNiaapiNibFileDownloader"));

export { GetNiaapiNibMetadataArgs, GetNiaapiNibMetadataResult, GetNiaapiNibMetadataOutputArgs } from "./getNiaapiNibMetadata";
export const getNiaapiNibMetadata: typeof import("./getNiaapiNibMetadata").getNiaapiNibMetadata = null as any;
export const getNiaapiNibMetadataOutput: typeof import("./getNiaapiNibMetadata").getNiaapiNibMetadataOutput = null as any;
utilities.lazyLoad(exports, ["getNiaapiNibMetadata","getNiaapiNibMetadataOutput"], () => require("./getNiaapiNibMetadata"));

export { GetNiaapiPuvScriptDownloaderArgs, GetNiaapiPuvScriptDownloaderResult, GetNiaapiPuvScriptDownloaderOutputArgs } from "./getNiaapiPuvScriptDownloader";
export const getNiaapiPuvScriptDownloader: typeof import("./getNiaapiPuvScriptDownloader").getNiaapiPuvScriptDownloader = null as any;
export const getNiaapiPuvScriptDownloaderOutput: typeof import("./getNiaapiPuvScriptDownloader").getNiaapiPuvScriptDownloaderOutput = null as any;
utilities.lazyLoad(exports, ["getNiaapiPuvScriptDownloader","getNiaapiPuvScriptDownloaderOutput"], () => require("./getNiaapiPuvScriptDownloader"));

export { GetNiaapiSnValidatorMetadataArgs, GetNiaapiSnValidatorMetadataResult, GetNiaapiSnValidatorMetadataOutputArgs } from "./getNiaapiSnValidatorMetadata";
export const getNiaapiSnValidatorMetadata: typeof import("./getNiaapiSnValidatorMetadata").getNiaapiSnValidatorMetadata = null as any;
export const getNiaapiSnValidatorMetadataOutput: typeof import("./getNiaapiSnValidatorMetadata").getNiaapiSnValidatorMetadataOutput = null as any;
utilities.lazyLoad(exports, ["getNiaapiSnValidatorMetadata","getNiaapiSnValidatorMetadataOutput"], () => require("./getNiaapiSnValidatorMetadata"));

export { GetNiaapiUpgradeAssistFileArgs, GetNiaapiUpgradeAssistFileResult, GetNiaapiUpgradeAssistFileOutputArgs } from "./getNiaapiUpgradeAssistFile";
export const getNiaapiUpgradeAssistFile: typeof import("./getNiaapiUpgradeAssistFile").getNiaapiUpgradeAssistFile = null as any;
export const getNiaapiUpgradeAssistFileOutput: typeof import("./getNiaapiUpgradeAssistFile").getNiaapiUpgradeAssistFileOutput = null as any;
utilities.lazyLoad(exports, ["getNiaapiUpgradeAssistFile","getNiaapiUpgradeAssistFileOutput"], () => require("./getNiaapiUpgradeAssistFile"));

export { GetNiaapiVersionRegexArgs, GetNiaapiVersionRegexResult, GetNiaapiVersionRegexOutputArgs } from "./getNiaapiVersionRegex";
export const getNiaapiVersionRegex: typeof import("./getNiaapiVersionRegex").getNiaapiVersionRegex = null as any;
export const getNiaapiVersionRegexOutput: typeof import("./getNiaapiVersionRegex").getNiaapiVersionRegexOutput = null as any;
utilities.lazyLoad(exports, ["getNiaapiVersionRegex","getNiaapiVersionRegexOutput"], () => require("./getNiaapiVersionRegex"));

export { GetNiatelemetryAaaLdapProviderDetailsArgs, GetNiatelemetryAaaLdapProviderDetailsResult, GetNiatelemetryAaaLdapProviderDetailsOutputArgs } from "./getNiatelemetryAaaLdapProviderDetails";
export const getNiatelemetryAaaLdapProviderDetails: typeof import("./getNiatelemetryAaaLdapProviderDetails").getNiatelemetryAaaLdapProviderDetails = null as any;
export const getNiatelemetryAaaLdapProviderDetailsOutput: typeof import("./getNiatelemetryAaaLdapProviderDetails").getNiatelemetryAaaLdapProviderDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryAaaLdapProviderDetails","getNiatelemetryAaaLdapProviderDetailsOutput"], () => require("./getNiatelemetryAaaLdapProviderDetails"));

export { GetNiatelemetryAaaRadiusProviderDetailsArgs, GetNiatelemetryAaaRadiusProviderDetailsResult, GetNiatelemetryAaaRadiusProviderDetailsOutputArgs } from "./getNiatelemetryAaaRadiusProviderDetails";
export const getNiatelemetryAaaRadiusProviderDetails: typeof import("./getNiatelemetryAaaRadiusProviderDetails").getNiatelemetryAaaRadiusProviderDetails = null as any;
export const getNiatelemetryAaaRadiusProviderDetailsOutput: typeof import("./getNiatelemetryAaaRadiusProviderDetails").getNiatelemetryAaaRadiusProviderDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryAaaRadiusProviderDetails","getNiatelemetryAaaRadiusProviderDetailsOutput"], () => require("./getNiatelemetryAaaRadiusProviderDetails"));

export { GetNiatelemetryAaaTacacsProviderDetailsArgs, GetNiatelemetryAaaTacacsProviderDetailsResult, GetNiatelemetryAaaTacacsProviderDetailsOutputArgs } from "./getNiatelemetryAaaTacacsProviderDetails";
export const getNiatelemetryAaaTacacsProviderDetails: typeof import("./getNiatelemetryAaaTacacsProviderDetails").getNiatelemetryAaaTacacsProviderDetails = null as any;
export const getNiatelemetryAaaTacacsProviderDetailsOutput: typeof import("./getNiatelemetryAaaTacacsProviderDetails").getNiatelemetryAaaTacacsProviderDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryAaaTacacsProviderDetails","getNiatelemetryAaaTacacsProviderDetailsOutput"], () => require("./getNiatelemetryAaaTacacsProviderDetails"));

export { GetNiatelemetryApicAppPluginDetailsArgs, GetNiatelemetryApicAppPluginDetailsResult, GetNiatelemetryApicAppPluginDetailsOutputArgs } from "./getNiatelemetryApicAppPluginDetails";
export const getNiatelemetryApicAppPluginDetails: typeof import("./getNiatelemetryApicAppPluginDetails").getNiatelemetryApicAppPluginDetails = null as any;
export const getNiatelemetryApicAppPluginDetailsOutput: typeof import("./getNiatelemetryApicAppPluginDetails").getNiatelemetryApicAppPluginDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryApicAppPluginDetails","getNiatelemetryApicAppPluginDetailsOutput"], () => require("./getNiatelemetryApicAppPluginDetails"));

export { GetNiatelemetryApicCoreFileDetailsArgs, GetNiatelemetryApicCoreFileDetailsResult, GetNiatelemetryApicCoreFileDetailsOutputArgs } from "./getNiatelemetryApicCoreFileDetails";
export const getNiatelemetryApicCoreFileDetails: typeof import("./getNiatelemetryApicCoreFileDetails").getNiatelemetryApicCoreFileDetails = null as any;
export const getNiatelemetryApicCoreFileDetailsOutput: typeof import("./getNiatelemetryApicCoreFileDetails").getNiatelemetryApicCoreFileDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryApicCoreFileDetails","getNiatelemetryApicCoreFileDetailsOutput"], () => require("./getNiatelemetryApicCoreFileDetails"));

export { GetNiatelemetryApicDbgexpRsExportDestArgs, GetNiatelemetryApicDbgexpRsExportDestResult, GetNiatelemetryApicDbgexpRsExportDestOutputArgs } from "./getNiatelemetryApicDbgexpRsExportDest";
export const getNiatelemetryApicDbgexpRsExportDest: typeof import("./getNiatelemetryApicDbgexpRsExportDest").getNiatelemetryApicDbgexpRsExportDest = null as any;
export const getNiatelemetryApicDbgexpRsExportDestOutput: typeof import("./getNiatelemetryApicDbgexpRsExportDest").getNiatelemetryApicDbgexpRsExportDestOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryApicDbgexpRsExportDest","getNiatelemetryApicDbgexpRsExportDestOutput"], () => require("./getNiatelemetryApicDbgexpRsExportDest"));

export { GetNiatelemetryApicDbgexpRsTsSchedulerArgs, GetNiatelemetryApicDbgexpRsTsSchedulerResult, GetNiatelemetryApicDbgexpRsTsSchedulerOutputArgs } from "./getNiatelemetryApicDbgexpRsTsScheduler";
export const getNiatelemetryApicDbgexpRsTsScheduler: typeof import("./getNiatelemetryApicDbgexpRsTsScheduler").getNiatelemetryApicDbgexpRsTsScheduler = null as any;
export const getNiatelemetryApicDbgexpRsTsSchedulerOutput: typeof import("./getNiatelemetryApicDbgexpRsTsScheduler").getNiatelemetryApicDbgexpRsTsSchedulerOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryApicDbgexpRsTsScheduler","getNiatelemetryApicDbgexpRsTsSchedulerOutput"], () => require("./getNiatelemetryApicDbgexpRsTsScheduler"));

export { GetNiatelemetryApicFanDetailsArgs, GetNiatelemetryApicFanDetailsResult, GetNiatelemetryApicFanDetailsOutputArgs } from "./getNiatelemetryApicFanDetails";
export const getNiatelemetryApicFanDetails: typeof import("./getNiatelemetryApicFanDetails").getNiatelemetryApicFanDetails = null as any;
export const getNiatelemetryApicFanDetailsOutput: typeof import("./getNiatelemetryApicFanDetails").getNiatelemetryApicFanDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryApicFanDetails","getNiatelemetryApicFanDetailsOutput"], () => require("./getNiatelemetryApicFanDetails"));

export { GetNiatelemetryApicFexDetailsArgs, GetNiatelemetryApicFexDetailsResult, GetNiatelemetryApicFexDetailsOutputArgs } from "./getNiatelemetryApicFexDetails";
export const getNiatelemetryApicFexDetails: typeof import("./getNiatelemetryApicFexDetails").getNiatelemetryApicFexDetails = null as any;
export const getNiatelemetryApicFexDetailsOutput: typeof import("./getNiatelemetryApicFexDetails").getNiatelemetryApicFexDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryApicFexDetails","getNiatelemetryApicFexDetailsOutput"], () => require("./getNiatelemetryApicFexDetails"));

export { GetNiatelemetryApicFlashDetailsArgs, GetNiatelemetryApicFlashDetailsResult, GetNiatelemetryApicFlashDetailsOutputArgs } from "./getNiatelemetryApicFlashDetails";
export const getNiatelemetryApicFlashDetails: typeof import("./getNiatelemetryApicFlashDetails").getNiatelemetryApicFlashDetails = null as any;
export const getNiatelemetryApicFlashDetailsOutput: typeof import("./getNiatelemetryApicFlashDetails").getNiatelemetryApicFlashDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryApicFlashDetails","getNiatelemetryApicFlashDetailsOutput"], () => require("./getNiatelemetryApicFlashDetails"));

export { GetNiatelemetryApicNtpAuthArgs, GetNiatelemetryApicNtpAuthResult, GetNiatelemetryApicNtpAuthOutputArgs } from "./getNiatelemetryApicNtpAuth";
export const getNiatelemetryApicNtpAuth: typeof import("./getNiatelemetryApicNtpAuth").getNiatelemetryApicNtpAuth = null as any;
export const getNiatelemetryApicNtpAuthOutput: typeof import("./getNiatelemetryApicNtpAuth").getNiatelemetryApicNtpAuthOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryApicNtpAuth","getNiatelemetryApicNtpAuthOutput"], () => require("./getNiatelemetryApicNtpAuth"));

export { GetNiatelemetryApicPerformanceDataArgs, GetNiatelemetryApicPerformanceDataResult, GetNiatelemetryApicPerformanceDataOutputArgs } from "./getNiatelemetryApicPerformanceData";
export const getNiatelemetryApicPerformanceData: typeof import("./getNiatelemetryApicPerformanceData").getNiatelemetryApicPerformanceData = null as any;
export const getNiatelemetryApicPerformanceDataOutput: typeof import("./getNiatelemetryApicPerformanceData").getNiatelemetryApicPerformanceDataOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryApicPerformanceData","getNiatelemetryApicPerformanceDataOutput"], () => require("./getNiatelemetryApicPerformanceData"));

export { GetNiatelemetryApicPodDataArgs, GetNiatelemetryApicPodDataResult, GetNiatelemetryApicPodDataOutputArgs } from "./getNiatelemetryApicPodData";
export const getNiatelemetryApicPodData: typeof import("./getNiatelemetryApicPodData").getNiatelemetryApicPodData = null as any;
export const getNiatelemetryApicPodDataOutput: typeof import("./getNiatelemetryApicPodData").getNiatelemetryApicPodDataOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryApicPodData","getNiatelemetryApicPodDataOutput"], () => require("./getNiatelemetryApicPodData"));

export { GetNiatelemetryApicPsuDetailsArgs, GetNiatelemetryApicPsuDetailsResult, GetNiatelemetryApicPsuDetailsOutputArgs } from "./getNiatelemetryApicPsuDetails";
export const getNiatelemetryApicPsuDetails: typeof import("./getNiatelemetryApicPsuDetails").getNiatelemetryApicPsuDetails = null as any;
export const getNiatelemetryApicPsuDetailsOutput: typeof import("./getNiatelemetryApicPsuDetails").getNiatelemetryApicPsuDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryApicPsuDetails","getNiatelemetryApicPsuDetailsOutput"], () => require("./getNiatelemetryApicPsuDetails"));

export { GetNiatelemetryApicRealmDetailsArgs, GetNiatelemetryApicRealmDetailsResult, GetNiatelemetryApicRealmDetailsOutputArgs } from "./getNiatelemetryApicRealmDetails";
export const getNiatelemetryApicRealmDetails: typeof import("./getNiatelemetryApicRealmDetails").getNiatelemetryApicRealmDetails = null as any;
export const getNiatelemetryApicRealmDetailsOutput: typeof import("./getNiatelemetryApicRealmDetails").getNiatelemetryApicRealmDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryApicRealmDetails","getNiatelemetryApicRealmDetailsOutput"], () => require("./getNiatelemetryApicRealmDetails"));

export { GetNiatelemetryApicSnmpClientGrpDetailsArgs, GetNiatelemetryApicSnmpClientGrpDetailsResult, GetNiatelemetryApicSnmpClientGrpDetailsOutputArgs } from "./getNiatelemetryApicSnmpClientGrpDetails";
export const getNiatelemetryApicSnmpClientGrpDetails: typeof import("./getNiatelemetryApicSnmpClientGrpDetails").getNiatelemetryApicSnmpClientGrpDetails = null as any;
export const getNiatelemetryApicSnmpClientGrpDetailsOutput: typeof import("./getNiatelemetryApicSnmpClientGrpDetails").getNiatelemetryApicSnmpClientGrpDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryApicSnmpClientGrpDetails","getNiatelemetryApicSnmpClientGrpDetailsOutput"], () => require("./getNiatelemetryApicSnmpClientGrpDetails"));

export { GetNiatelemetryApicSnmpCommunityAccessDetailsArgs, GetNiatelemetryApicSnmpCommunityAccessDetailsResult, GetNiatelemetryApicSnmpCommunityAccessDetailsOutputArgs } from "./getNiatelemetryApicSnmpCommunityAccessDetails";
export const getNiatelemetryApicSnmpCommunityAccessDetails: typeof import("./getNiatelemetryApicSnmpCommunityAccessDetails").getNiatelemetryApicSnmpCommunityAccessDetails = null as any;
export const getNiatelemetryApicSnmpCommunityAccessDetailsOutput: typeof import("./getNiatelemetryApicSnmpCommunityAccessDetails").getNiatelemetryApicSnmpCommunityAccessDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryApicSnmpCommunityAccessDetails","getNiatelemetryApicSnmpCommunityAccessDetailsOutput"], () => require("./getNiatelemetryApicSnmpCommunityAccessDetails"));

export { GetNiatelemetryApicSnmpCommunityDetailsArgs, GetNiatelemetryApicSnmpCommunityDetailsResult, GetNiatelemetryApicSnmpCommunityDetailsOutputArgs } from "./getNiatelemetryApicSnmpCommunityDetails";
export const getNiatelemetryApicSnmpCommunityDetails: typeof import("./getNiatelemetryApicSnmpCommunityDetails").getNiatelemetryApicSnmpCommunityDetails = null as any;
export const getNiatelemetryApicSnmpCommunityDetailsOutput: typeof import("./getNiatelemetryApicSnmpCommunityDetails").getNiatelemetryApicSnmpCommunityDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryApicSnmpCommunityDetails","getNiatelemetryApicSnmpCommunityDetailsOutput"], () => require("./getNiatelemetryApicSnmpCommunityDetails"));

export { GetNiatelemetryApicSnmpTrapDetailsArgs, GetNiatelemetryApicSnmpTrapDetailsResult, GetNiatelemetryApicSnmpTrapDetailsOutputArgs } from "./getNiatelemetryApicSnmpTrapDetails";
export const getNiatelemetryApicSnmpTrapDetails: typeof import("./getNiatelemetryApicSnmpTrapDetails").getNiatelemetryApicSnmpTrapDetails = null as any;
export const getNiatelemetryApicSnmpTrapDetailsOutput: typeof import("./getNiatelemetryApicSnmpTrapDetails").getNiatelemetryApicSnmpTrapDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryApicSnmpTrapDetails","getNiatelemetryApicSnmpTrapDetailsOutput"], () => require("./getNiatelemetryApicSnmpTrapDetails"));

export { GetNiatelemetryApicSnmpTrapFwdServerDetailsArgs, GetNiatelemetryApicSnmpTrapFwdServerDetailsResult, GetNiatelemetryApicSnmpTrapFwdServerDetailsOutputArgs } from "./getNiatelemetryApicSnmpTrapFwdServerDetails";
export const getNiatelemetryApicSnmpTrapFwdServerDetails: typeof import("./getNiatelemetryApicSnmpTrapFwdServerDetails").getNiatelemetryApicSnmpTrapFwdServerDetails = null as any;
export const getNiatelemetryApicSnmpTrapFwdServerDetailsOutput: typeof import("./getNiatelemetryApicSnmpTrapFwdServerDetails").getNiatelemetryApicSnmpTrapFwdServerDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryApicSnmpTrapFwdServerDetails","getNiatelemetryApicSnmpTrapFwdServerDetailsOutput"], () => require("./getNiatelemetryApicSnmpTrapFwdServerDetails"));

export { GetNiatelemetryApicSnmpVersionThreeDetailsArgs, GetNiatelemetryApicSnmpVersionThreeDetailsResult, GetNiatelemetryApicSnmpVersionThreeDetailsOutputArgs } from "./getNiatelemetryApicSnmpVersionThreeDetails";
export const getNiatelemetryApicSnmpVersionThreeDetails: typeof import("./getNiatelemetryApicSnmpVersionThreeDetails").getNiatelemetryApicSnmpVersionThreeDetails = null as any;
export const getNiatelemetryApicSnmpVersionThreeDetailsOutput: typeof import("./getNiatelemetryApicSnmpVersionThreeDetails").getNiatelemetryApicSnmpVersionThreeDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryApicSnmpVersionThreeDetails","getNiatelemetryApicSnmpVersionThreeDetailsOutput"], () => require("./getNiatelemetryApicSnmpVersionThreeDetails"));

export { GetNiatelemetryApicSysLogGrpArgs, GetNiatelemetryApicSysLogGrpResult, GetNiatelemetryApicSysLogGrpOutputArgs } from "./getNiatelemetryApicSysLogGrp";
export const getNiatelemetryApicSysLogGrp: typeof import("./getNiatelemetryApicSysLogGrp").getNiatelemetryApicSysLogGrp = null as any;
export const getNiatelemetryApicSysLogGrpOutput: typeof import("./getNiatelemetryApicSysLogGrp").getNiatelemetryApicSysLogGrpOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryApicSysLogGrp","getNiatelemetryApicSysLogGrpOutput"], () => require("./getNiatelemetryApicSysLogGrp"));

export { GetNiatelemetryApicSysLogSrcArgs, GetNiatelemetryApicSysLogSrcResult, GetNiatelemetryApicSysLogSrcOutputArgs } from "./getNiatelemetryApicSysLogSrc";
export const getNiatelemetryApicSysLogSrc: typeof import("./getNiatelemetryApicSysLogSrc").getNiatelemetryApicSysLogSrc = null as any;
export const getNiatelemetryApicSysLogSrcOutput: typeof import("./getNiatelemetryApicSysLogSrc").getNiatelemetryApicSysLogSrcOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryApicSysLogSrc","getNiatelemetryApicSysLogSrcOutput"], () => require("./getNiatelemetryApicSysLogSrc"));

export { GetNiatelemetryApicTransceiverDetailsArgs, GetNiatelemetryApicTransceiverDetailsResult, GetNiatelemetryApicTransceiverDetailsOutputArgs } from "./getNiatelemetryApicTransceiverDetails";
export const getNiatelemetryApicTransceiverDetails: typeof import("./getNiatelemetryApicTransceiverDetails").getNiatelemetryApicTransceiverDetails = null as any;
export const getNiatelemetryApicTransceiverDetailsOutput: typeof import("./getNiatelemetryApicTransceiverDetails").getNiatelemetryApicTransceiverDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryApicTransceiverDetails","getNiatelemetryApicTransceiverDetailsOutput"], () => require("./getNiatelemetryApicTransceiverDetails"));

export { GetNiatelemetryApicUiPageCountsArgs, GetNiatelemetryApicUiPageCountsResult, GetNiatelemetryApicUiPageCountsOutputArgs } from "./getNiatelemetryApicUiPageCounts";
export const getNiatelemetryApicUiPageCounts: typeof import("./getNiatelemetryApicUiPageCounts").getNiatelemetryApicUiPageCounts = null as any;
export const getNiatelemetryApicUiPageCountsOutput: typeof import("./getNiatelemetryApicUiPageCounts").getNiatelemetryApicUiPageCountsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryApicUiPageCounts","getNiatelemetryApicUiPageCountsOutput"], () => require("./getNiatelemetryApicUiPageCounts"));

export { GetNiatelemetryApicVisionArgs, GetNiatelemetryApicVisionResult, GetNiatelemetryApicVisionOutputArgs } from "./getNiatelemetryApicVision";
export const getNiatelemetryApicVision: typeof import("./getNiatelemetryApicVision").getNiatelemetryApicVision = null as any;
export const getNiatelemetryApicVisionOutput: typeof import("./getNiatelemetryApicVision").getNiatelemetryApicVisionOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryApicVision","getNiatelemetryApicVisionOutput"], () => require("./getNiatelemetryApicVision"));

export { GetNiatelemetryAppDetailsArgs, GetNiatelemetryAppDetailsResult, GetNiatelemetryAppDetailsOutputArgs } from "./getNiatelemetryAppDetails";
export const getNiatelemetryAppDetails: typeof import("./getNiatelemetryAppDetails").getNiatelemetryAppDetails = null as any;
export const getNiatelemetryAppDetailsOutput: typeof import("./getNiatelemetryAppDetails").getNiatelemetryAppDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryAppDetails","getNiatelemetryAppDetailsOutput"], () => require("./getNiatelemetryAppDetails"));

export { GetNiatelemetryCloudDetailsArgs, GetNiatelemetryCloudDetailsResult, GetNiatelemetryCloudDetailsOutputArgs } from "./getNiatelemetryCloudDetails";
export const getNiatelemetryCloudDetails: typeof import("./getNiatelemetryCloudDetails").getNiatelemetryCloudDetails = null as any;
export const getNiatelemetryCloudDetailsOutput: typeof import("./getNiatelemetryCloudDetails").getNiatelemetryCloudDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryCloudDetails","getNiatelemetryCloudDetailsOutput"], () => require("./getNiatelemetryCloudDetails"));

export { GetNiatelemetryCommonPoliciesArgs, GetNiatelemetryCommonPoliciesResult, GetNiatelemetryCommonPoliciesOutputArgs } from "./getNiatelemetryCommonPolicies";
export const getNiatelemetryCommonPolicies: typeof import("./getNiatelemetryCommonPolicies").getNiatelemetryCommonPolicies = null as any;
export const getNiatelemetryCommonPoliciesOutput: typeof import("./getNiatelemetryCommonPolicies").getNiatelemetryCommonPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryCommonPolicies","getNiatelemetryCommonPoliciesOutput"], () => require("./getNiatelemetryCommonPolicies"));

export { GetNiatelemetryDcnmFanDetailsArgs, GetNiatelemetryDcnmFanDetailsResult, GetNiatelemetryDcnmFanDetailsOutputArgs } from "./getNiatelemetryDcnmFanDetails";
export const getNiatelemetryDcnmFanDetails: typeof import("./getNiatelemetryDcnmFanDetails").getNiatelemetryDcnmFanDetails = null as any;
export const getNiatelemetryDcnmFanDetailsOutput: typeof import("./getNiatelemetryDcnmFanDetails").getNiatelemetryDcnmFanDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryDcnmFanDetails","getNiatelemetryDcnmFanDetailsOutput"], () => require("./getNiatelemetryDcnmFanDetails"));

export { GetNiatelemetryDcnmFexDetailsArgs, GetNiatelemetryDcnmFexDetailsResult, GetNiatelemetryDcnmFexDetailsOutputArgs } from "./getNiatelemetryDcnmFexDetails";
export const getNiatelemetryDcnmFexDetails: typeof import("./getNiatelemetryDcnmFexDetails").getNiatelemetryDcnmFexDetails = null as any;
export const getNiatelemetryDcnmFexDetailsOutput: typeof import("./getNiatelemetryDcnmFexDetails").getNiatelemetryDcnmFexDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryDcnmFexDetails","getNiatelemetryDcnmFexDetailsOutput"], () => require("./getNiatelemetryDcnmFexDetails"));

export { GetNiatelemetryDcnmModuleDetailsArgs, GetNiatelemetryDcnmModuleDetailsResult, GetNiatelemetryDcnmModuleDetailsOutputArgs } from "./getNiatelemetryDcnmModuleDetails";
export const getNiatelemetryDcnmModuleDetails: typeof import("./getNiatelemetryDcnmModuleDetails").getNiatelemetryDcnmModuleDetails = null as any;
export const getNiatelemetryDcnmModuleDetailsOutput: typeof import("./getNiatelemetryDcnmModuleDetails").getNiatelemetryDcnmModuleDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryDcnmModuleDetails","getNiatelemetryDcnmModuleDetailsOutput"], () => require("./getNiatelemetryDcnmModuleDetails"));

export { GetNiatelemetryDcnmPsuDetailsArgs, GetNiatelemetryDcnmPsuDetailsResult, GetNiatelemetryDcnmPsuDetailsOutputArgs } from "./getNiatelemetryDcnmPsuDetails";
export const getNiatelemetryDcnmPsuDetails: typeof import("./getNiatelemetryDcnmPsuDetails").getNiatelemetryDcnmPsuDetails = null as any;
export const getNiatelemetryDcnmPsuDetailsOutput: typeof import("./getNiatelemetryDcnmPsuDetails").getNiatelemetryDcnmPsuDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryDcnmPsuDetails","getNiatelemetryDcnmPsuDetailsOutput"], () => require("./getNiatelemetryDcnmPsuDetails"));

export { GetNiatelemetryDcnmTransceiverDetailsArgs, GetNiatelemetryDcnmTransceiverDetailsResult, GetNiatelemetryDcnmTransceiverDetailsOutputArgs } from "./getNiatelemetryDcnmTransceiverDetails";
export const getNiatelemetryDcnmTransceiverDetails: typeof import("./getNiatelemetryDcnmTransceiverDetails").getNiatelemetryDcnmTransceiverDetails = null as any;
export const getNiatelemetryDcnmTransceiverDetailsOutput: typeof import("./getNiatelemetryDcnmTransceiverDetails").getNiatelemetryDcnmTransceiverDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryDcnmTransceiverDetails","getNiatelemetryDcnmTransceiverDetailsOutput"], () => require("./getNiatelemetryDcnmTransceiverDetails"));

export { GetNiatelemetryEpgArgs, GetNiatelemetryEpgResult, GetNiatelemetryEpgOutputArgs } from "./getNiatelemetryEpg";
export const getNiatelemetryEpg: typeof import("./getNiatelemetryEpg").getNiatelemetryEpg = null as any;
export const getNiatelemetryEpgOutput: typeof import("./getNiatelemetryEpg").getNiatelemetryEpgOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryEpg","getNiatelemetryEpgOutput"], () => require("./getNiatelemetryEpg"));

export { GetNiatelemetryFabricModuleDetailsArgs, GetNiatelemetryFabricModuleDetailsResult, GetNiatelemetryFabricModuleDetailsOutputArgs } from "./getNiatelemetryFabricModuleDetails";
export const getNiatelemetryFabricModuleDetails: typeof import("./getNiatelemetryFabricModuleDetails").getNiatelemetryFabricModuleDetails = null as any;
export const getNiatelemetryFabricModuleDetailsOutput: typeof import("./getNiatelemetryFabricModuleDetails").getNiatelemetryFabricModuleDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryFabricModuleDetails","getNiatelemetryFabricModuleDetailsOutput"], () => require("./getNiatelemetryFabricModuleDetails"));

export { GetNiatelemetryFabricNodeControlDetailsArgs, GetNiatelemetryFabricNodeControlDetailsResult, GetNiatelemetryFabricNodeControlDetailsOutputArgs } from "./getNiatelemetryFabricNodeControlDetails";
export const getNiatelemetryFabricNodeControlDetails: typeof import("./getNiatelemetryFabricNodeControlDetails").getNiatelemetryFabricNodeControlDetails = null as any;
export const getNiatelemetryFabricNodeControlDetailsOutput: typeof import("./getNiatelemetryFabricNodeControlDetails").getNiatelemetryFabricNodeControlDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryFabricNodeControlDetails","getNiatelemetryFabricNodeControlDetailsOutput"], () => require("./getNiatelemetryFabricNodeControlDetails"));

export { GetNiatelemetryFabricPodProfileArgs, GetNiatelemetryFabricPodProfileResult, GetNiatelemetryFabricPodProfileOutputArgs } from "./getNiatelemetryFabricPodProfile";
export const getNiatelemetryFabricPodProfile: typeof import("./getNiatelemetryFabricPodProfile").getNiatelemetryFabricPodProfile = null as any;
export const getNiatelemetryFabricPodProfileOutput: typeof import("./getNiatelemetryFabricPodProfile").getNiatelemetryFabricPodProfileOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryFabricPodProfile","getNiatelemetryFabricPodProfileOutput"], () => require("./getNiatelemetryFabricPodProfile"));

export { GetNiatelemetryFabricPodSsArgs, GetNiatelemetryFabricPodSsResult, GetNiatelemetryFabricPodSsOutputArgs } from "./getNiatelemetryFabricPodSs";
export const getNiatelemetryFabricPodSs: typeof import("./getNiatelemetryFabricPodSs").getNiatelemetryFabricPodSs = null as any;
export const getNiatelemetryFabricPodSsOutput: typeof import("./getNiatelemetryFabricPodSs").getNiatelemetryFabricPodSsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryFabricPodSs","getNiatelemetryFabricPodSsOutput"], () => require("./getNiatelemetryFabricPodSs"));

export { GetNiatelemetryFaultArgs, GetNiatelemetryFaultResult, GetNiatelemetryFaultOutputArgs } from "./getNiatelemetryFault";
export const getNiatelemetryFault: typeof import("./getNiatelemetryFault").getNiatelemetryFault = null as any;
export const getNiatelemetryFaultOutput: typeof import("./getNiatelemetryFault").getNiatelemetryFaultOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryFault","getNiatelemetryFaultOutput"], () => require("./getNiatelemetryFault"));

export { GetNiatelemetryHcloudDetailsArgs, GetNiatelemetryHcloudDetailsResult, GetNiatelemetryHcloudDetailsOutputArgs } from "./getNiatelemetryHcloudDetails";
export const getNiatelemetryHcloudDetails: typeof import("./getNiatelemetryHcloudDetails").getNiatelemetryHcloudDetails = null as any;
export const getNiatelemetryHcloudDetailsOutput: typeof import("./getNiatelemetryHcloudDetails").getNiatelemetryHcloudDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryHcloudDetails","getNiatelemetryHcloudDetailsOutput"], () => require("./getNiatelemetryHcloudDetails"));

export { GetNiatelemetryHealthInsightsDataArgs, GetNiatelemetryHealthInsightsDataResult, GetNiatelemetryHealthInsightsDataOutputArgs } from "./getNiatelemetryHealthInsightsData";
export const getNiatelemetryHealthInsightsData: typeof import("./getNiatelemetryHealthInsightsData").getNiatelemetryHealthInsightsData = null as any;
export const getNiatelemetryHealthInsightsDataOutput: typeof import("./getNiatelemetryHealthInsightsData").getNiatelemetryHealthInsightsDataOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryHealthInsightsData","getNiatelemetryHealthInsightsDataOutput"], () => require("./getNiatelemetryHealthInsightsData"));

export { GetNiatelemetryHttpsAclContractDetailsArgs, GetNiatelemetryHttpsAclContractDetailsResult, GetNiatelemetryHttpsAclContractDetailsOutputArgs } from "./getNiatelemetryHttpsAclContractDetails";
export const getNiatelemetryHttpsAclContractDetails: typeof import("./getNiatelemetryHttpsAclContractDetails").getNiatelemetryHttpsAclContractDetails = null as any;
export const getNiatelemetryHttpsAclContractDetailsOutput: typeof import("./getNiatelemetryHttpsAclContractDetails").getNiatelemetryHttpsAclContractDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryHttpsAclContractDetails","getNiatelemetryHttpsAclContractDetailsOutput"], () => require("./getNiatelemetryHttpsAclContractDetails"));

export { GetNiatelemetryHttpsAclContractFilterMapArgs, GetNiatelemetryHttpsAclContractFilterMapResult, GetNiatelemetryHttpsAclContractFilterMapOutputArgs } from "./getNiatelemetryHttpsAclContractFilterMap";
export const getNiatelemetryHttpsAclContractFilterMap: typeof import("./getNiatelemetryHttpsAclContractFilterMap").getNiatelemetryHttpsAclContractFilterMap = null as any;
export const getNiatelemetryHttpsAclContractFilterMapOutput: typeof import("./getNiatelemetryHttpsAclContractFilterMap").getNiatelemetryHttpsAclContractFilterMapOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryHttpsAclContractFilterMap","getNiatelemetryHttpsAclContractFilterMapOutput"], () => require("./getNiatelemetryHttpsAclContractFilterMap"));

export { GetNiatelemetryHttpsAclEpgContractMapArgs, GetNiatelemetryHttpsAclEpgContractMapResult, GetNiatelemetryHttpsAclEpgContractMapOutputArgs } from "./getNiatelemetryHttpsAclEpgContractMap";
export const getNiatelemetryHttpsAclEpgContractMap: typeof import("./getNiatelemetryHttpsAclEpgContractMap").getNiatelemetryHttpsAclEpgContractMap = null as any;
export const getNiatelemetryHttpsAclEpgContractMapOutput: typeof import("./getNiatelemetryHttpsAclEpgContractMap").getNiatelemetryHttpsAclEpgContractMapOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryHttpsAclEpgContractMap","getNiatelemetryHttpsAclEpgContractMapOutput"], () => require("./getNiatelemetryHttpsAclEpgContractMap"));

export { GetNiatelemetryHttpsAclEpgDetailsArgs, GetNiatelemetryHttpsAclEpgDetailsResult, GetNiatelemetryHttpsAclEpgDetailsOutputArgs } from "./getNiatelemetryHttpsAclEpgDetails";
export const getNiatelemetryHttpsAclEpgDetails: typeof import("./getNiatelemetryHttpsAclEpgDetails").getNiatelemetryHttpsAclEpgDetails = null as any;
export const getNiatelemetryHttpsAclEpgDetailsOutput: typeof import("./getNiatelemetryHttpsAclEpgDetails").getNiatelemetryHttpsAclEpgDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryHttpsAclEpgDetails","getNiatelemetryHttpsAclEpgDetailsOutput"], () => require("./getNiatelemetryHttpsAclEpgDetails"));

export { GetNiatelemetryHttpsAclFilterDetailsArgs, GetNiatelemetryHttpsAclFilterDetailsResult, GetNiatelemetryHttpsAclFilterDetailsOutputArgs } from "./getNiatelemetryHttpsAclFilterDetails";
export const getNiatelemetryHttpsAclFilterDetails: typeof import("./getNiatelemetryHttpsAclFilterDetails").getNiatelemetryHttpsAclFilterDetails = null as any;
export const getNiatelemetryHttpsAclFilterDetailsOutput: typeof import("./getNiatelemetryHttpsAclFilterDetails").getNiatelemetryHttpsAclFilterDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryHttpsAclFilterDetails","getNiatelemetryHttpsAclFilterDetailsOutput"], () => require("./getNiatelemetryHttpsAclFilterDetails"));

export { GetNiatelemetryInsightGroupDetailsArgs, GetNiatelemetryInsightGroupDetailsResult, GetNiatelemetryInsightGroupDetailsOutputArgs } from "./getNiatelemetryInsightGroupDetails";
export const getNiatelemetryInsightGroupDetails: typeof import("./getNiatelemetryInsightGroupDetails").getNiatelemetryInsightGroupDetails = null as any;
export const getNiatelemetryInsightGroupDetailsOutput: typeof import("./getNiatelemetryInsightGroupDetails").getNiatelemetryInsightGroupDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryInsightGroupDetails","getNiatelemetryInsightGroupDetailsOutput"], () => require("./getNiatelemetryInsightGroupDetails"));

export { GetNiatelemetryLcArgs, GetNiatelemetryLcResult, GetNiatelemetryLcOutputArgs } from "./getNiatelemetryLc";
export const getNiatelemetryLc: typeof import("./getNiatelemetryLc").getNiatelemetryLc = null as any;
export const getNiatelemetryLcOutput: typeof import("./getNiatelemetryLc").getNiatelemetryLcOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryLc","getNiatelemetryLcOutput"], () => require("./getNiatelemetryLc"));

export { GetNiatelemetryLeafPolGrpDetailsArgs, GetNiatelemetryLeafPolGrpDetailsResult, GetNiatelemetryLeafPolGrpDetailsOutputArgs } from "./getNiatelemetryLeafPolGrpDetails";
export const getNiatelemetryLeafPolGrpDetails: typeof import("./getNiatelemetryLeafPolGrpDetails").getNiatelemetryLeafPolGrpDetails = null as any;
export const getNiatelemetryLeafPolGrpDetailsOutput: typeof import("./getNiatelemetryLeafPolGrpDetails").getNiatelemetryLeafPolGrpDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryLeafPolGrpDetails","getNiatelemetryLeafPolGrpDetailsOutput"], () => require("./getNiatelemetryLeafPolGrpDetails"));

export { GetNiatelemetryMdsNeighborsArgs, GetNiatelemetryMdsNeighborsResult, GetNiatelemetryMdsNeighborsOutputArgs } from "./getNiatelemetryMdsNeighbors";
export const getNiatelemetryMdsNeighbors: typeof import("./getNiatelemetryMdsNeighbors").getNiatelemetryMdsNeighbors = null as any;
export const getNiatelemetryMdsNeighborsOutput: typeof import("./getNiatelemetryMdsNeighbors").getNiatelemetryMdsNeighborsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryMdsNeighbors","getNiatelemetryMdsNeighborsOutput"], () => require("./getNiatelemetryMdsNeighbors"));

export { GetNiatelemetryMsoContractDetailsArgs, GetNiatelemetryMsoContractDetailsResult, GetNiatelemetryMsoContractDetailsOutputArgs } from "./getNiatelemetryMsoContractDetails";
export const getNiatelemetryMsoContractDetails: typeof import("./getNiatelemetryMsoContractDetails").getNiatelemetryMsoContractDetails = null as any;
export const getNiatelemetryMsoContractDetailsOutput: typeof import("./getNiatelemetryMsoContractDetails").getNiatelemetryMsoContractDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryMsoContractDetails","getNiatelemetryMsoContractDetailsOutput"], () => require("./getNiatelemetryMsoContractDetails"));

export { GetNiatelemetryMsoEpgDetailsArgs, GetNiatelemetryMsoEpgDetailsResult, GetNiatelemetryMsoEpgDetailsOutputArgs } from "./getNiatelemetryMsoEpgDetails";
export const getNiatelemetryMsoEpgDetails: typeof import("./getNiatelemetryMsoEpgDetails").getNiatelemetryMsoEpgDetails = null as any;
export const getNiatelemetryMsoEpgDetailsOutput: typeof import("./getNiatelemetryMsoEpgDetails").getNiatelemetryMsoEpgDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryMsoEpgDetails","getNiatelemetryMsoEpgDetailsOutput"], () => require("./getNiatelemetryMsoEpgDetails"));

export { GetNiatelemetryMsoSchemaDetailsArgs, GetNiatelemetryMsoSchemaDetailsResult, GetNiatelemetryMsoSchemaDetailsOutputArgs } from "./getNiatelemetryMsoSchemaDetails";
export const getNiatelemetryMsoSchemaDetails: typeof import("./getNiatelemetryMsoSchemaDetails").getNiatelemetryMsoSchemaDetails = null as any;
export const getNiatelemetryMsoSchemaDetailsOutput: typeof import("./getNiatelemetryMsoSchemaDetails").getNiatelemetryMsoSchemaDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryMsoSchemaDetails","getNiatelemetryMsoSchemaDetailsOutput"], () => require("./getNiatelemetryMsoSchemaDetails"));

export { GetNiatelemetryMsoSiteDetailsArgs, GetNiatelemetryMsoSiteDetailsResult, GetNiatelemetryMsoSiteDetailsOutputArgs } from "./getNiatelemetryMsoSiteDetails";
export const getNiatelemetryMsoSiteDetails: typeof import("./getNiatelemetryMsoSiteDetails").getNiatelemetryMsoSiteDetails = null as any;
export const getNiatelemetryMsoSiteDetailsOutput: typeof import("./getNiatelemetryMsoSiteDetails").getNiatelemetryMsoSiteDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryMsoSiteDetails","getNiatelemetryMsoSiteDetailsOutput"], () => require("./getNiatelemetryMsoSiteDetails"));

export { GetNiatelemetryMsoTenantDetailsArgs, GetNiatelemetryMsoTenantDetailsResult, GetNiatelemetryMsoTenantDetailsOutputArgs } from "./getNiatelemetryMsoTenantDetails";
export const getNiatelemetryMsoTenantDetails: typeof import("./getNiatelemetryMsoTenantDetails").getNiatelemetryMsoTenantDetails = null as any;
export const getNiatelemetryMsoTenantDetailsOutput: typeof import("./getNiatelemetryMsoTenantDetails").getNiatelemetryMsoTenantDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryMsoTenantDetails","getNiatelemetryMsoTenantDetailsOutput"], () => require("./getNiatelemetryMsoTenantDetails"));

export { GetNiatelemetryNexusCloudAccountArgs, GetNiatelemetryNexusCloudAccountResult, GetNiatelemetryNexusCloudAccountOutputArgs } from "./getNiatelemetryNexusCloudAccount";
export const getNiatelemetryNexusCloudAccount: typeof import("./getNiatelemetryNexusCloudAccount").getNiatelemetryNexusCloudAccount = null as any;
export const getNiatelemetryNexusCloudAccountOutput: typeof import("./getNiatelemetryNexusCloudAccount").getNiatelemetryNexusCloudAccountOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryNexusCloudAccount","getNiatelemetryNexusCloudAccountOutput"], () => require("./getNiatelemetryNexusCloudAccount"));

export { GetNiatelemetryNexusCloudSiteArgs, GetNiatelemetryNexusCloudSiteResult, GetNiatelemetryNexusCloudSiteOutputArgs } from "./getNiatelemetryNexusCloudSite";
export const getNiatelemetryNexusCloudSite: typeof import("./getNiatelemetryNexusCloudSite").getNiatelemetryNexusCloudSite = null as any;
export const getNiatelemetryNexusCloudSiteOutput: typeof import("./getNiatelemetryNexusCloudSite").getNiatelemetryNexusCloudSiteOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryNexusCloudSite","getNiatelemetryNexusCloudSiteOutput"], () => require("./getNiatelemetryNexusCloudSite"));

export { GetNiatelemetryNexusDashboardControllerDetailsArgs, GetNiatelemetryNexusDashboardControllerDetailsResult, GetNiatelemetryNexusDashboardControllerDetailsOutputArgs } from "./getNiatelemetryNexusDashboardControllerDetails";
export const getNiatelemetryNexusDashboardControllerDetails: typeof import("./getNiatelemetryNexusDashboardControllerDetails").getNiatelemetryNexusDashboardControllerDetails = null as any;
export const getNiatelemetryNexusDashboardControllerDetailsOutput: typeof import("./getNiatelemetryNexusDashboardControllerDetails").getNiatelemetryNexusDashboardControllerDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryNexusDashboardControllerDetails","getNiatelemetryNexusDashboardControllerDetailsOutput"], () => require("./getNiatelemetryNexusDashboardControllerDetails"));

export { GetNiatelemetryNexusDashboardDetailsArgs, GetNiatelemetryNexusDashboardDetailsResult, GetNiatelemetryNexusDashboardDetailsOutputArgs } from "./getNiatelemetryNexusDashboardDetails";
export const getNiatelemetryNexusDashboardDetails: typeof import("./getNiatelemetryNexusDashboardDetails").getNiatelemetryNexusDashboardDetails = null as any;
export const getNiatelemetryNexusDashboardDetailsOutput: typeof import("./getNiatelemetryNexusDashboardDetails").getNiatelemetryNexusDashboardDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryNexusDashboardDetails","getNiatelemetryNexusDashboardDetailsOutput"], () => require("./getNiatelemetryNexusDashboardDetails"));

export { GetNiatelemetryNexusDashboardMemoryDetailsArgs, GetNiatelemetryNexusDashboardMemoryDetailsResult, GetNiatelemetryNexusDashboardMemoryDetailsOutputArgs } from "./getNiatelemetryNexusDashboardMemoryDetails";
export const getNiatelemetryNexusDashboardMemoryDetails: typeof import("./getNiatelemetryNexusDashboardMemoryDetails").getNiatelemetryNexusDashboardMemoryDetails = null as any;
export const getNiatelemetryNexusDashboardMemoryDetailsOutput: typeof import("./getNiatelemetryNexusDashboardMemoryDetails").getNiatelemetryNexusDashboardMemoryDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryNexusDashboardMemoryDetails","getNiatelemetryNexusDashboardMemoryDetailsOutput"], () => require("./getNiatelemetryNexusDashboardMemoryDetails"));

export { GetNiatelemetryNexusDashboardsArgs, GetNiatelemetryNexusDashboardsResult, GetNiatelemetryNexusDashboardsOutputArgs } from "./getNiatelemetryNexusDashboards";
export const getNiatelemetryNexusDashboards: typeof import("./getNiatelemetryNexusDashboards").getNiatelemetryNexusDashboards = null as any;
export const getNiatelemetryNexusDashboardsOutput: typeof import("./getNiatelemetryNexusDashboards").getNiatelemetryNexusDashboardsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryNexusDashboards","getNiatelemetryNexusDashboardsOutput"], () => require("./getNiatelemetryNexusDashboards"));

export { GetNiatelemetryNiaFeatureUsageArgs, GetNiatelemetryNiaFeatureUsageResult, GetNiatelemetryNiaFeatureUsageOutputArgs } from "./getNiatelemetryNiaFeatureUsage";
export const getNiatelemetryNiaFeatureUsage: typeof import("./getNiatelemetryNiaFeatureUsage").getNiatelemetryNiaFeatureUsage = null as any;
export const getNiatelemetryNiaFeatureUsageOutput: typeof import("./getNiatelemetryNiaFeatureUsage").getNiatelemetryNiaFeatureUsageOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryNiaFeatureUsage","getNiatelemetryNiaFeatureUsageOutput"], () => require("./getNiatelemetryNiaFeatureUsage"));

export { GetNiatelemetryNiaInventoryArgs, GetNiatelemetryNiaInventoryResult, GetNiatelemetryNiaInventoryOutputArgs } from "./getNiatelemetryNiaInventory";
export const getNiatelemetryNiaInventory: typeof import("./getNiatelemetryNiaInventory").getNiatelemetryNiaInventory = null as any;
export const getNiatelemetryNiaInventoryOutput: typeof import("./getNiatelemetryNiaInventory").getNiatelemetryNiaInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryNiaInventory","getNiatelemetryNiaInventoryOutput"], () => require("./getNiatelemetryNiaInventory"));

export { GetNiatelemetryNiaInventoryDcnmArgs, GetNiatelemetryNiaInventoryDcnmResult, GetNiatelemetryNiaInventoryDcnmOutputArgs } from "./getNiatelemetryNiaInventoryDcnm";
export const getNiatelemetryNiaInventoryDcnm: typeof import("./getNiatelemetryNiaInventoryDcnm").getNiatelemetryNiaInventoryDcnm = null as any;
export const getNiatelemetryNiaInventoryDcnmOutput: typeof import("./getNiatelemetryNiaInventoryDcnm").getNiatelemetryNiaInventoryDcnmOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryNiaInventoryDcnm","getNiatelemetryNiaInventoryDcnmOutput"], () => require("./getNiatelemetryNiaInventoryDcnm"));

export { GetNiatelemetryNiaInventoryFabricArgs, GetNiatelemetryNiaInventoryFabricResult, GetNiatelemetryNiaInventoryFabricOutputArgs } from "./getNiatelemetryNiaInventoryFabric";
export const getNiatelemetryNiaInventoryFabric: typeof import("./getNiatelemetryNiaInventoryFabric").getNiatelemetryNiaInventoryFabric = null as any;
export const getNiatelemetryNiaInventoryFabricOutput: typeof import("./getNiatelemetryNiaInventoryFabric").getNiatelemetryNiaInventoryFabricOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryNiaInventoryFabric","getNiatelemetryNiaInventoryFabricOutput"], () => require("./getNiatelemetryNiaInventoryFabric"));

export { GetNiatelemetryNiaLicenseStateArgs, GetNiatelemetryNiaLicenseStateResult, GetNiatelemetryNiaLicenseStateOutputArgs } from "./getNiatelemetryNiaLicenseState";
export const getNiatelemetryNiaLicenseState: typeof import("./getNiatelemetryNiaLicenseState").getNiatelemetryNiaLicenseState = null as any;
export const getNiatelemetryNiaLicenseStateOutput: typeof import("./getNiatelemetryNiaLicenseState").getNiatelemetryNiaLicenseStateOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryNiaLicenseState","getNiatelemetryNiaLicenseStateOutput"], () => require("./getNiatelemetryNiaLicenseState"));

export { GetNiatelemetryNiccArgs, GetNiatelemetryNiccResult, GetNiatelemetryNiccOutputArgs } from "./getNiatelemetryNicc";
export const getNiatelemetryNicc: typeof import("./getNiatelemetryNicc").getNiatelemetryNicc = null as any;
export const getNiatelemetryNiccOutput: typeof import("./getNiatelemetryNicc").getNiatelemetryNiccOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryNicc","getNiatelemetryNiccOutput"], () => require("./getNiatelemetryNicc"));

export { GetNiatelemetryPasswordStrengthCheckArgs, GetNiatelemetryPasswordStrengthCheckResult, GetNiatelemetryPasswordStrengthCheckOutputArgs } from "./getNiatelemetryPasswordStrengthCheck";
export const getNiatelemetryPasswordStrengthCheck: typeof import("./getNiatelemetryPasswordStrengthCheck").getNiatelemetryPasswordStrengthCheck = null as any;
export const getNiatelemetryPasswordStrengthCheckOutput: typeof import("./getNiatelemetryPasswordStrengthCheck").getNiatelemetryPasswordStrengthCheckOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryPasswordStrengthCheck","getNiatelemetryPasswordStrengthCheckOutput"], () => require("./getNiatelemetryPasswordStrengthCheck"));

export { GetNiatelemetryPodCommPoliciesArgs, GetNiatelemetryPodCommPoliciesResult, GetNiatelemetryPodCommPoliciesOutputArgs } from "./getNiatelemetryPodCommPolicies";
export const getNiatelemetryPodCommPolicies: typeof import("./getNiatelemetryPodCommPolicies").getNiatelemetryPodCommPolicies = null as any;
export const getNiatelemetryPodCommPoliciesOutput: typeof import("./getNiatelemetryPodCommPolicies").getNiatelemetryPodCommPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryPodCommPolicies","getNiatelemetryPodCommPoliciesOutput"], () => require("./getNiatelemetryPodCommPolicies"));

export { GetNiatelemetryPodSnmpPoliciesArgs, GetNiatelemetryPodSnmpPoliciesResult, GetNiatelemetryPodSnmpPoliciesOutputArgs } from "./getNiatelemetryPodSnmpPolicies";
export const getNiatelemetryPodSnmpPolicies: typeof import("./getNiatelemetryPodSnmpPolicies").getNiatelemetryPodSnmpPolicies = null as any;
export const getNiatelemetryPodSnmpPoliciesOutput: typeof import("./getNiatelemetryPodSnmpPolicies").getNiatelemetryPodSnmpPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryPodSnmpPolicies","getNiatelemetryPodSnmpPoliciesOutput"], () => require("./getNiatelemetryPodSnmpPolicies"));

export { GetNiatelemetryPodTimeServerPoliciesArgs, GetNiatelemetryPodTimeServerPoliciesResult, GetNiatelemetryPodTimeServerPoliciesOutputArgs } from "./getNiatelemetryPodTimeServerPolicies";
export const getNiatelemetryPodTimeServerPolicies: typeof import("./getNiatelemetryPodTimeServerPolicies").getNiatelemetryPodTimeServerPolicies = null as any;
export const getNiatelemetryPodTimeServerPoliciesOutput: typeof import("./getNiatelemetryPodTimeServerPolicies").getNiatelemetryPodTimeServerPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryPodTimeServerPolicies","getNiatelemetryPodTimeServerPoliciesOutput"], () => require("./getNiatelemetryPodTimeServerPolicies"));

export { GetNiatelemetrySiteInventoryArgs, GetNiatelemetrySiteInventoryResult, GetNiatelemetrySiteInventoryOutputArgs } from "./getNiatelemetrySiteInventory";
export const getNiatelemetrySiteInventory: typeof import("./getNiatelemetrySiteInventory").getNiatelemetrySiteInventory = null as any;
export const getNiatelemetrySiteInventoryOutput: typeof import("./getNiatelemetrySiteInventory").getNiatelemetrySiteInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetrySiteInventory","getNiatelemetrySiteInventoryOutput"], () => require("./getNiatelemetrySiteInventory"));

export { GetNiatelemetrySnmpSrcArgs, GetNiatelemetrySnmpSrcResult, GetNiatelemetrySnmpSrcOutputArgs } from "./getNiatelemetrySnmpSrc";
export const getNiatelemetrySnmpSrc: typeof import("./getNiatelemetrySnmpSrc").getNiatelemetrySnmpSrc = null as any;
export const getNiatelemetrySnmpSrcOutput: typeof import("./getNiatelemetrySnmpSrc").getNiatelemetrySnmpSrcOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetrySnmpSrc","getNiatelemetrySnmpSrcOutput"], () => require("./getNiatelemetrySnmpSrc"));

export { GetNiatelemetrySpinePolGrpDetailsArgs, GetNiatelemetrySpinePolGrpDetailsResult, GetNiatelemetrySpinePolGrpDetailsOutputArgs } from "./getNiatelemetrySpinePolGrpDetails";
export const getNiatelemetrySpinePolGrpDetails: typeof import("./getNiatelemetrySpinePolGrpDetails").getNiatelemetrySpinePolGrpDetails = null as any;
export const getNiatelemetrySpinePolGrpDetailsOutput: typeof import("./getNiatelemetrySpinePolGrpDetails").getNiatelemetrySpinePolGrpDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetrySpinePolGrpDetails","getNiatelemetrySpinePolGrpDetailsOutput"], () => require("./getNiatelemetrySpinePolGrpDetails"));

export { GetNiatelemetrySshVersionTwoArgs, GetNiatelemetrySshVersionTwoResult, GetNiatelemetrySshVersionTwoOutputArgs } from "./getNiatelemetrySshVersionTwo";
export const getNiatelemetrySshVersionTwo: typeof import("./getNiatelemetrySshVersionTwo").getNiatelemetrySshVersionTwo = null as any;
export const getNiatelemetrySshVersionTwoOutput: typeof import("./getNiatelemetrySshVersionTwo").getNiatelemetrySshVersionTwoOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetrySshVersionTwo","getNiatelemetrySshVersionTwoOutput"], () => require("./getNiatelemetrySshVersionTwo"));

export { GetNiatelemetrySupervisorModuleDetailsArgs, GetNiatelemetrySupervisorModuleDetailsResult, GetNiatelemetrySupervisorModuleDetailsOutputArgs } from "./getNiatelemetrySupervisorModuleDetails";
export const getNiatelemetrySupervisorModuleDetails: typeof import("./getNiatelemetrySupervisorModuleDetails").getNiatelemetrySupervisorModuleDetails = null as any;
export const getNiatelemetrySupervisorModuleDetailsOutput: typeof import("./getNiatelemetrySupervisorModuleDetails").getNiatelemetrySupervisorModuleDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetrySupervisorModuleDetails","getNiatelemetrySupervisorModuleDetailsOutput"], () => require("./getNiatelemetrySupervisorModuleDetails"));

export { GetNiatelemetrySyslogRemoteDestArgs, GetNiatelemetrySyslogRemoteDestResult, GetNiatelemetrySyslogRemoteDestOutputArgs } from "./getNiatelemetrySyslogRemoteDest";
export const getNiatelemetrySyslogRemoteDest: typeof import("./getNiatelemetrySyslogRemoteDest").getNiatelemetrySyslogRemoteDest = null as any;
export const getNiatelemetrySyslogRemoteDestOutput: typeof import("./getNiatelemetrySyslogRemoteDest").getNiatelemetrySyslogRemoteDestOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetrySyslogRemoteDest","getNiatelemetrySyslogRemoteDestOutput"], () => require("./getNiatelemetrySyslogRemoteDest"));

export { GetNiatelemetrySyslogSysMsgArgs, GetNiatelemetrySyslogSysMsgResult, GetNiatelemetrySyslogSysMsgOutputArgs } from "./getNiatelemetrySyslogSysMsg";
export const getNiatelemetrySyslogSysMsg: typeof import("./getNiatelemetrySyslogSysMsg").getNiatelemetrySyslogSysMsg = null as any;
export const getNiatelemetrySyslogSysMsgOutput: typeof import("./getNiatelemetrySyslogSysMsg").getNiatelemetrySyslogSysMsgOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetrySyslogSysMsg","getNiatelemetrySyslogSysMsgOutput"], () => require("./getNiatelemetrySyslogSysMsg"));

export { GetNiatelemetrySyslogSysMsgFacFilterArgs, GetNiatelemetrySyslogSysMsgFacFilterResult, GetNiatelemetrySyslogSysMsgFacFilterOutputArgs } from "./getNiatelemetrySyslogSysMsgFacFilter";
export const getNiatelemetrySyslogSysMsgFacFilter: typeof import("./getNiatelemetrySyslogSysMsgFacFilter").getNiatelemetrySyslogSysMsgFacFilter = null as any;
export const getNiatelemetrySyslogSysMsgFacFilterOutput: typeof import("./getNiatelemetrySyslogSysMsgFacFilter").getNiatelemetrySyslogSysMsgFacFilterOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetrySyslogSysMsgFacFilter","getNiatelemetrySyslogSysMsgFacFilterOutput"], () => require("./getNiatelemetrySyslogSysMsgFacFilter"));

export { GetNiatelemetrySystemControllerDetailsArgs, GetNiatelemetrySystemControllerDetailsResult, GetNiatelemetrySystemControllerDetailsOutputArgs } from "./getNiatelemetrySystemControllerDetails";
export const getNiatelemetrySystemControllerDetails: typeof import("./getNiatelemetrySystemControllerDetails").getNiatelemetrySystemControllerDetails = null as any;
export const getNiatelemetrySystemControllerDetailsOutput: typeof import("./getNiatelemetrySystemControllerDetails").getNiatelemetrySystemControllerDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetrySystemControllerDetails","getNiatelemetrySystemControllerDetailsOutput"], () => require("./getNiatelemetrySystemControllerDetails"));

export { GetNiatelemetryTenantArgs, GetNiatelemetryTenantResult, GetNiatelemetryTenantOutputArgs } from "./getNiatelemetryTenant";
export const getNiatelemetryTenant: typeof import("./getNiatelemetryTenant").getNiatelemetryTenant = null as any;
export const getNiatelemetryTenantOutput: typeof import("./getNiatelemetryTenant").getNiatelemetryTenantOutput = null as any;
utilities.lazyLoad(exports, ["getNiatelemetryTenant","getNiatelemetryTenantOutput"], () => require("./getNiatelemetryTenant"));

export { GetNotificationAccountSubscriptionArgs, GetNotificationAccountSubscriptionResult, GetNotificationAccountSubscriptionOutputArgs } from "./getNotificationAccountSubscription";
export const getNotificationAccountSubscription: typeof import("./getNotificationAccountSubscription").getNotificationAccountSubscription = null as any;
export const getNotificationAccountSubscriptionOutput: typeof import("./getNotificationAccountSubscription").getNotificationAccountSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getNotificationAccountSubscription","getNotificationAccountSubscriptionOutput"], () => require("./getNotificationAccountSubscription"));

export { GetNtpNtpServerArgs, GetNtpNtpServerResult, GetNtpNtpServerOutputArgs } from "./getNtpNtpServer";
export const getNtpNtpServer: typeof import("./getNtpNtpServer").getNtpNtpServer = null as any;
export const getNtpNtpServerOutput: typeof import("./getNtpNtpServer").getNtpNtpServerOutput = null as any;
utilities.lazyLoad(exports, ["getNtpNtpServer","getNtpNtpServerOutput"], () => require("./getNtpNtpServer"));

export { GetNtpPolicyArgs, GetNtpPolicyResult, GetNtpPolicyOutputArgs } from "./getNtpPolicy";
export const getNtpPolicy: typeof import("./getNtpPolicy").getNtpPolicy = null as any;
export const getNtpPolicyOutput: typeof import("./getNtpPolicy").getNtpPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getNtpPolicy","getNtpPolicyOutput"], () => require("./getNtpPolicy"));

export { GetOauthAccessTokenArgs, GetOauthAccessTokenResult, GetOauthAccessTokenOutputArgs } from "./getOauthAccessToken";
export const getOauthAccessToken: typeof import("./getOauthAccessToken").getOauthAccessToken = null as any;
export const getOauthAccessTokenOutput: typeof import("./getOauthAccessToken").getOauthAccessTokenOutput = null as any;
utilities.lazyLoad(exports, ["getOauthAccessToken","getOauthAccessTokenOutput"], () => require("./getOauthAccessToken"));

export { GetOauthAuthorizationArgs, GetOauthAuthorizationResult, GetOauthAuthorizationOutputArgs } from "./getOauthAuthorization";
export const getOauthAuthorization: typeof import("./getOauthAuthorization").getOauthAuthorization = null as any;
export const getOauthAuthorizationOutput: typeof import("./getOauthAuthorization").getOauthAuthorizationOutput = null as any;
utilities.lazyLoad(exports, ["getOauthAuthorization","getOauthAuthorizationOutput"], () => require("./getOauthAuthorization"));

export { GetOpenapiApiMethodMetaArgs, GetOpenapiApiMethodMetaResult, GetOpenapiApiMethodMetaOutputArgs } from "./getOpenapiApiMethodMeta";
export const getOpenapiApiMethodMeta: typeof import("./getOpenapiApiMethodMeta").getOpenapiApiMethodMeta = null as any;
export const getOpenapiApiMethodMetaOutput: typeof import("./getOpenapiApiMethodMeta").getOpenapiApiMethodMetaOutput = null as any;
utilities.lazyLoad(exports, ["getOpenapiApiMethodMeta","getOpenapiApiMethodMetaOutput"], () => require("./getOpenapiApiMethodMeta"));

export { GetOpenapiOpenApiSpecificationArgs, GetOpenapiOpenApiSpecificationResult, GetOpenapiOpenApiSpecificationOutputArgs } from "./getOpenapiOpenApiSpecification";
export const getOpenapiOpenApiSpecification: typeof import("./getOpenapiOpenApiSpecification").getOpenapiOpenApiSpecification = null as any;
export const getOpenapiOpenApiSpecificationOutput: typeof import("./getOpenapiOpenApiSpecification").getOpenapiOpenApiSpecificationOutput = null as any;
utilities.lazyLoad(exports, ["getOpenapiOpenApiSpecification","getOpenapiOpenApiSpecificationOutput"], () => require("./getOpenapiOpenApiSpecification"));

export { GetOpenapiProcessFileArgs, GetOpenapiProcessFileResult, GetOpenapiProcessFileOutputArgs } from "./getOpenapiProcessFile";
export const getOpenapiProcessFile: typeof import("./getOpenapiProcessFile").getOpenapiProcessFile = null as any;
export const getOpenapiProcessFileOutput: typeof import("./getOpenapiProcessFile").getOpenapiProcessFileOutput = null as any;
utilities.lazyLoad(exports, ["getOpenapiProcessFile","getOpenapiProcessFileOutput"], () => require("./getOpenapiProcessFile"));

export { GetOpenapiTaskGenerationRequestArgs, GetOpenapiTaskGenerationRequestResult, GetOpenapiTaskGenerationRequestOutputArgs } from "./getOpenapiTaskGenerationRequest";
export const getOpenapiTaskGenerationRequest: typeof import("./getOpenapiTaskGenerationRequest").getOpenapiTaskGenerationRequest = null as any;
export const getOpenapiTaskGenerationRequestOutput: typeof import("./getOpenapiTaskGenerationRequest").getOpenapiTaskGenerationRequestOutput = null as any;
utilities.lazyLoad(exports, ["getOpenapiTaskGenerationRequest","getOpenapiTaskGenerationRequestOutput"], () => require("./getOpenapiTaskGenerationRequest"));

export { GetOpenapiTaskGenerationResultArgs, GetOpenapiTaskGenerationResultResult, GetOpenapiTaskGenerationResultOutputArgs } from "./getOpenapiTaskGenerationResult";
export const getOpenapiTaskGenerationResult: typeof import("./getOpenapiTaskGenerationResult").getOpenapiTaskGenerationResult = null as any;
export const getOpenapiTaskGenerationResultOutput: typeof import("./getOpenapiTaskGenerationResult").getOpenapiTaskGenerationResultOutput = null as any;
utilities.lazyLoad(exports, ["getOpenapiTaskGenerationResult","getOpenapiTaskGenerationResultOutput"], () => require("./getOpenapiTaskGenerationResult"));

export { GetOprsDeploymentArgs, GetOprsDeploymentResult, GetOprsDeploymentOutputArgs } from "./getOprsDeployment";
export const getOprsDeployment: typeof import("./getOprsDeployment").getOprsDeployment = null as any;
export const getOprsDeploymentOutput: typeof import("./getOprsDeployment").getOprsDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getOprsDeployment","getOprsDeploymentOutput"], () => require("./getOprsDeployment"));

export { GetOprsSyncTargetListMessageArgs, GetOprsSyncTargetListMessageResult, GetOprsSyncTargetListMessageOutputArgs } from "./getOprsSyncTargetListMessage";
export const getOprsSyncTargetListMessage: typeof import("./getOprsSyncTargetListMessage").getOprsSyncTargetListMessage = null as any;
export const getOprsSyncTargetListMessageOutput: typeof import("./getOprsSyncTargetListMessage").getOprsSyncTargetListMessageOutput = null as any;
utilities.lazyLoad(exports, ["getOprsSyncTargetListMessage","getOprsSyncTargetListMessageOutput"], () => require("./getOprsSyncTargetListMessage"));

export { GetOrganizationOrganizationArgs, GetOrganizationOrganizationResult, GetOrganizationOrganizationOutputArgs } from "./getOrganizationOrganization";
export const getOrganizationOrganization: typeof import("./getOrganizationOrganization").getOrganizationOrganization = null as any;
export const getOrganizationOrganizationOutput: typeof import("./getOrganizationOrganization").getOrganizationOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationOrganization","getOrganizationOrganizationOutput"], () => require("./getOrganizationOrganization"));

export { GetOsBulkInstallInfoArgs, GetOsBulkInstallInfoResult, GetOsBulkInstallInfoOutputArgs } from "./getOsBulkInstallInfo";
export const getOsBulkInstallInfo: typeof import("./getOsBulkInstallInfo").getOsBulkInstallInfo = null as any;
export const getOsBulkInstallInfoOutput: typeof import("./getOsBulkInstallInfo").getOsBulkInstallInfoOutput = null as any;
utilities.lazyLoad(exports, ["getOsBulkInstallInfo","getOsBulkInstallInfoOutput"], () => require("./getOsBulkInstallInfo"));

export { GetOsCatalogArgs, GetOsCatalogResult, GetOsCatalogOutputArgs } from "./getOsCatalog";
export const getOsCatalog: typeof import("./getOsCatalog").getOsCatalog = null as any;
export const getOsCatalogOutput: typeof import("./getOsCatalog").getOsCatalogOutput = null as any;
utilities.lazyLoad(exports, ["getOsCatalog","getOsCatalogOutput"], () => require("./getOsCatalog"));

export { GetOsConfigurationFileArgs, GetOsConfigurationFileResult, GetOsConfigurationFileOutputArgs } from "./getOsConfigurationFile";
export const getOsConfigurationFile: typeof import("./getOsConfigurationFile").getOsConfigurationFile = null as any;
export const getOsConfigurationFileOutput: typeof import("./getOsConfigurationFile").getOsConfigurationFileOutput = null as any;
utilities.lazyLoad(exports, ["getOsConfigurationFile","getOsConfigurationFileOutput"], () => require("./getOsConfigurationFile"));

export { GetOsDistributionArgs, GetOsDistributionResult, GetOsDistributionOutputArgs } from "./getOsDistribution";
export const getOsDistribution: typeof import("./getOsDistribution").getOsDistribution = null as any;
export const getOsDistributionOutput: typeof import("./getOsDistribution").getOsDistributionOutput = null as any;
utilities.lazyLoad(exports, ["getOsDistribution","getOsDistributionOutput"], () => require("./getOsDistribution"));

export { GetOsInstallArgs, GetOsInstallResult, GetOsInstallOutputArgs } from "./getOsInstall";
export const getOsInstall: typeof import("./getOsInstall").getOsInstall = null as any;
export const getOsInstallOutput: typeof import("./getOsInstall").getOsInstallOutput = null as any;
utilities.lazyLoad(exports, ["getOsInstall","getOsInstallOutput"], () => require("./getOsInstall"));

export { GetOsSupportedVersionArgs, GetOsSupportedVersionResult, GetOsSupportedVersionOutputArgs } from "./getOsSupportedVersion";
export const getOsSupportedVersion: typeof import("./getOsSupportedVersion").getOsSupportedVersion = null as any;
export const getOsSupportedVersionOutput: typeof import("./getOsSupportedVersion").getOsSupportedVersionOutput = null as any;
utilities.lazyLoad(exports, ["getOsSupportedVersion","getOsSupportedVersionOutput"], () => require("./getOsSupportedVersion"));

export { GetPartnerintegrationDcLogsArgs, GetPartnerintegrationDcLogsResult, GetPartnerintegrationDcLogsOutputArgs } from "./getPartnerintegrationDcLogs";
export const getPartnerintegrationDcLogs: typeof import("./getPartnerintegrationDcLogs").getPartnerintegrationDcLogs = null as any;
export const getPartnerintegrationDcLogsOutput: typeof import("./getPartnerintegrationDcLogs").getPartnerintegrationDcLogsOutput = null as any;
utilities.lazyLoad(exports, ["getPartnerintegrationDcLogs","getPartnerintegrationDcLogsOutput"], () => require("./getPartnerintegrationDcLogs"));

export { GetPartnerintegrationDeviceConnectorArgs, GetPartnerintegrationDeviceConnectorResult, GetPartnerintegrationDeviceConnectorOutputArgs } from "./getPartnerintegrationDeviceConnector";
export const getPartnerintegrationDeviceConnector: typeof import("./getPartnerintegrationDeviceConnector").getPartnerintegrationDeviceConnector = null as any;
export const getPartnerintegrationDeviceConnectorOutput: typeof import("./getPartnerintegrationDeviceConnector").getPartnerintegrationDeviceConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getPartnerintegrationDeviceConnector","getPartnerintegrationDeviceConnectorOutput"], () => require("./getPartnerintegrationDeviceConnector"));

export { GetPartnerintegrationDocIssuesArgs, GetPartnerintegrationDocIssuesResult, GetPartnerintegrationDocIssuesOutputArgs } from "./getPartnerintegrationDocIssues";
export const getPartnerintegrationDocIssues: typeof import("./getPartnerintegrationDocIssues").getPartnerintegrationDocIssues = null as any;
export const getPartnerintegrationDocIssuesOutput: typeof import("./getPartnerintegrationDocIssues").getPartnerintegrationDocIssuesOutput = null as any;
utilities.lazyLoad(exports, ["getPartnerintegrationDocIssues","getPartnerintegrationDocIssuesOutput"], () => require("./getPartnerintegrationDocIssues"));

export { GetPartnerintegrationEtlArgs, GetPartnerintegrationEtlResult, GetPartnerintegrationEtlOutputArgs } from "./getPartnerintegrationEtl";
export const getPartnerintegrationEtl: typeof import("./getPartnerintegrationEtl").getPartnerintegrationEtl = null as any;
export const getPartnerintegrationEtlOutput: typeof import("./getPartnerintegrationEtl").getPartnerintegrationEtlOutput = null as any;
utilities.lazyLoad(exports, ["getPartnerintegrationEtl","getPartnerintegrationEtlOutput"], () => require("./getPartnerintegrationEtl"));

export { GetPartnerintegrationFileArgs, GetPartnerintegrationFileResult, GetPartnerintegrationFileOutputArgs } from "./getPartnerintegrationFile";
export const getPartnerintegrationFile: typeof import("./getPartnerintegrationFile").getPartnerintegrationFile = null as any;
export const getPartnerintegrationFileOutput: typeof import("./getPartnerintegrationFile").getPartnerintegrationFileOutput = null as any;
utilities.lazyLoad(exports, ["getPartnerintegrationFile","getPartnerintegrationFileOutput"], () => require("./getPartnerintegrationFile"));

export { GetPartnerintegrationInventoryArgs, GetPartnerintegrationInventoryResult, GetPartnerintegrationInventoryOutputArgs } from "./getPartnerintegrationInventory";
export const getPartnerintegrationInventory: typeof import("./getPartnerintegrationInventory").getPartnerintegrationInventory = null as any;
export const getPartnerintegrationInventoryOutput: typeof import("./getPartnerintegrationInventory").getPartnerintegrationInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getPartnerintegrationInventory","getPartnerintegrationInventoryOutput"], () => require("./getPartnerintegrationInventory"));

export { GetPartnerintegrationLogsArgs, GetPartnerintegrationLogsResult, GetPartnerintegrationLogsOutputArgs } from "./getPartnerintegrationLogs";
export const getPartnerintegrationLogs: typeof import("./getPartnerintegrationLogs").getPartnerintegrationLogs = null as any;
export const getPartnerintegrationLogsOutput: typeof import("./getPartnerintegrationLogs").getPartnerintegrationLogsOutput = null as any;
utilities.lazyLoad(exports, ["getPartnerintegrationLogs","getPartnerintegrationLogsOutput"], () => require("./getPartnerintegrationLogs"));

export { GetPartnerintegrationMetricsArgs, GetPartnerintegrationMetricsResult, GetPartnerintegrationMetricsOutputArgs } from "./getPartnerintegrationMetrics";
export const getPartnerintegrationMetrics: typeof import("./getPartnerintegrationMetrics").getPartnerintegrationMetrics = null as any;
export const getPartnerintegrationMetricsOutput: typeof import("./getPartnerintegrationMetrics").getPartnerintegrationMetricsOutput = null as any;
utilities.lazyLoad(exports, ["getPartnerintegrationMetrics","getPartnerintegrationMetricsOutput"], () => require("./getPartnerintegrationMetrics"));

export { GetPartnerintegrationModelArgs, GetPartnerintegrationModelResult, GetPartnerintegrationModelOutputArgs } from "./getPartnerintegrationModel";
export const getPartnerintegrationModel: typeof import("./getPartnerintegrationModel").getPartnerintegrationModel = null as any;
export const getPartnerintegrationModelOutput: typeof import("./getPartnerintegrationModel").getPartnerintegrationModelOutput = null as any;
utilities.lazyLoad(exports, ["getPartnerintegrationModel","getPartnerintegrationModelOutput"], () => require("./getPartnerintegrationModel"));

export { GetPciCoprocessorCardArgs, GetPciCoprocessorCardResult, GetPciCoprocessorCardOutputArgs } from "./getPciCoprocessorCard";
export const getPciCoprocessorCard: typeof import("./getPciCoprocessorCard").getPciCoprocessorCard = null as any;
export const getPciCoprocessorCardOutput: typeof import("./getPciCoprocessorCard").getPciCoprocessorCardOutput = null as any;
utilities.lazyLoad(exports, ["getPciCoprocessorCard","getPciCoprocessorCardOutput"], () => require("./getPciCoprocessorCard"));

export { GetPciDeviceArgs, GetPciDeviceResult, GetPciDeviceOutputArgs } from "./getPciDevice";
export const getPciDevice: typeof import("./getPciDevice").getPciDevice = null as any;
export const getPciDeviceOutput: typeof import("./getPciDevice").getPciDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getPciDevice","getPciDeviceOutput"], () => require("./getPciDevice"));

export { GetPciLinkArgs, GetPciLinkResult, GetPciLinkOutputArgs } from "./getPciLink";
export const getPciLink: typeof import("./getPciLink").getPciLink = null as any;
export const getPciLinkOutput: typeof import("./getPciLink").getPciLinkOutput = null as any;
utilities.lazyLoad(exports, ["getPciLink","getPciLinkOutput"], () => require("./getPciLink"));

export { GetPciNodeArgs, GetPciNodeResult, GetPciNodeOutputArgs } from "./getPciNode";
export const getPciNode: typeof import("./getPciNode").getPciNode = null as any;
export const getPciNodeOutput: typeof import("./getPciNode").getPciNodeOutput = null as any;
utilities.lazyLoad(exports, ["getPciNode","getPciNodeOutput"], () => require("./getPciNode"));

export { GetPciSwitchArgs, GetPciSwitchResult, GetPciSwitchOutputArgs } from "./getPciSwitch";
export const getPciSwitch: typeof import("./getPciSwitch").getPciSwitch = null as any;
export const getPciSwitchOutput: typeof import("./getPciSwitch").getPciSwitchOutput = null as any;
utilities.lazyLoad(exports, ["getPciSwitch","getPciSwitchOutput"], () => require("./getPciSwitch"));

export { GetPortGroupArgs, GetPortGroupResult, GetPortGroupOutputArgs } from "./getPortGroup";
export const getPortGroup: typeof import("./getPortGroup").getPortGroup = null as any;
export const getPortGroupOutput: typeof import("./getPortGroup").getPortGroupOutput = null as any;
utilities.lazyLoad(exports, ["getPortGroup","getPortGroupOutput"], () => require("./getPortGroup"));

export { GetPortMacBindingArgs, GetPortMacBindingResult, GetPortMacBindingOutputArgs } from "./getPortMacBinding";
export const getPortMacBinding: typeof import("./getPortMacBinding").getPortMacBinding = null as any;
export const getPortMacBindingOutput: typeof import("./getPortMacBinding").getPortMacBindingOutput = null as any;
utilities.lazyLoad(exports, ["getPortMacBinding","getPortMacBindingOutput"], () => require("./getPortMacBinding"));

export { GetPortSubGroupArgs, GetPortSubGroupResult, GetPortSubGroupOutputArgs } from "./getPortSubGroup";
export const getPortSubGroup: typeof import("./getPortSubGroup").getPortSubGroup = null as any;
export const getPortSubGroupOutput: typeof import("./getPortSubGroup").getPortSubGroupOutput = null as any;
utilities.lazyLoad(exports, ["getPortSubGroup","getPortSubGroupOutput"], () => require("./getPortSubGroup"));

export { GetPowerControlStateArgs, GetPowerControlStateResult, GetPowerControlStateOutputArgs } from "./getPowerControlState";
export const getPowerControlState: typeof import("./getPowerControlState").getPowerControlState = null as any;
export const getPowerControlStateOutput: typeof import("./getPowerControlState").getPowerControlStateOutput = null as any;
utilities.lazyLoad(exports, ["getPowerControlState","getPowerControlStateOutput"], () => require("./getPowerControlState"));

export { GetPowerPolicyArgs, GetPowerPolicyResult, GetPowerPolicyOutputArgs } from "./getPowerPolicy";
export const getPowerPolicy: typeof import("./getPowerPolicy").getPowerPolicy = null as any;
export const getPowerPolicyOutput: typeof import("./getPowerPolicy").getPowerPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPowerPolicy","getPowerPolicyOutput"], () => require("./getPowerPolicy"));

export { GetPowerPolicyInventoryArgs, GetPowerPolicyInventoryResult, GetPowerPolicyInventoryOutputArgs } from "./getPowerPolicyInventory";
export const getPowerPolicyInventory: typeof import("./getPowerPolicyInventory").getPowerPolicyInventory = null as any;
export const getPowerPolicyInventoryOutput: typeof import("./getPowerPolicyInventory").getPowerPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getPowerPolicyInventory","getPowerPolicyInventoryOutput"], () => require("./getPowerPolicyInventory"));

export { GetProcessorUnitArgs, GetProcessorUnitResult, GetProcessorUnitOutputArgs } from "./getProcessorUnit";
export const getProcessorUnit: typeof import("./getProcessorUnit").getProcessorUnit = null as any;
export const getProcessorUnitOutput: typeof import("./getProcessorUnit").getProcessorUnitOutput = null as any;
utilities.lazyLoad(exports, ["getProcessorUnit","getProcessorUnitOutput"], () => require("./getProcessorUnit"));

export { GetRackUnitPersonalityArgs, GetRackUnitPersonalityResult, GetRackUnitPersonalityOutputArgs } from "./getRackUnitPersonality";
export const getRackUnitPersonality: typeof import("./getRackUnitPersonality").getRackUnitPersonality = null as any;
export const getRackUnitPersonalityOutput: typeof import("./getRackUnitPersonality").getRackUnitPersonalityOutput = null as any;
utilities.lazyLoad(exports, ["getRackUnitPersonality","getRackUnitPersonalityOutput"], () => require("./getRackUnitPersonality"));

export { GetRecommendationCapacityRunwayArgs, GetRecommendationCapacityRunwayResult, GetRecommendationCapacityRunwayOutputArgs } from "./getRecommendationCapacityRunway";
export const getRecommendationCapacityRunway: typeof import("./getRecommendationCapacityRunway").getRecommendationCapacityRunway = null as any;
export const getRecommendationCapacityRunwayOutput: typeof import("./getRecommendationCapacityRunway").getRecommendationCapacityRunwayOutput = null as any;
utilities.lazyLoad(exports, ["getRecommendationCapacityRunway","getRecommendationCapacityRunwayOutput"], () => require("./getRecommendationCapacityRunway"));

export { GetRecommendationClusterExpansionArgs, GetRecommendationClusterExpansionResult, GetRecommendationClusterExpansionOutputArgs } from "./getRecommendationClusterExpansion";
export const getRecommendationClusterExpansion: typeof import("./getRecommendationClusterExpansion").getRecommendationClusterExpansion = null as any;
export const getRecommendationClusterExpansionOutput: typeof import("./getRecommendationClusterExpansion").getRecommendationClusterExpansionOutput = null as any;
utilities.lazyLoad(exports, ["getRecommendationClusterExpansion","getRecommendationClusterExpansionOutput"], () => require("./getRecommendationClusterExpansion"));

export { GetRecommendationHardwareExpansionRequestArgs, GetRecommendationHardwareExpansionRequestResult, GetRecommendationHardwareExpansionRequestOutputArgs } from "./getRecommendationHardwareExpansionRequest";
export const getRecommendationHardwareExpansionRequest: typeof import("./getRecommendationHardwareExpansionRequest").getRecommendationHardwareExpansionRequest = null as any;
export const getRecommendationHardwareExpansionRequestOutput: typeof import("./getRecommendationHardwareExpansionRequest").getRecommendationHardwareExpansionRequestOutput = null as any;
utilities.lazyLoad(exports, ["getRecommendationHardwareExpansionRequest","getRecommendationHardwareExpansionRequestOutput"], () => require("./getRecommendationHardwareExpansionRequest"));

export { GetRecommendationHardwareExpansionRequestItemArgs, GetRecommendationHardwareExpansionRequestItemResult, GetRecommendationHardwareExpansionRequestItemOutputArgs } from "./getRecommendationHardwareExpansionRequestItem";
export const getRecommendationHardwareExpansionRequestItem: typeof import("./getRecommendationHardwareExpansionRequestItem").getRecommendationHardwareExpansionRequestItem = null as any;
export const getRecommendationHardwareExpansionRequestItemOutput: typeof import("./getRecommendationHardwareExpansionRequestItem").getRecommendationHardwareExpansionRequestItemOutput = null as any;
utilities.lazyLoad(exports, ["getRecommendationHardwareExpansionRequestItem","getRecommendationHardwareExpansionRequestItemOutput"], () => require("./getRecommendationHardwareExpansionRequestItem"));

export { GetRecommendationPhysicalItemArgs, GetRecommendationPhysicalItemResult, GetRecommendationPhysicalItemOutputArgs } from "./getRecommendationPhysicalItem";
export const getRecommendationPhysicalItem: typeof import("./getRecommendationPhysicalItem").getRecommendationPhysicalItem = null as any;
export const getRecommendationPhysicalItemOutput: typeof import("./getRecommendationPhysicalItem").getRecommendationPhysicalItemOutput = null as any;
utilities.lazyLoad(exports, ["getRecommendationPhysicalItem","getRecommendationPhysicalItemOutput"], () => require("./getRecommendationPhysicalItem"));

export { GetRecommendationPurchaseOrderEstimateArgs, GetRecommendationPurchaseOrderEstimateResult, GetRecommendationPurchaseOrderEstimateOutputArgs } from "./getRecommendationPurchaseOrderEstimate";
export const getRecommendationPurchaseOrderEstimate: typeof import("./getRecommendationPurchaseOrderEstimate").getRecommendationPurchaseOrderEstimate = null as any;
export const getRecommendationPurchaseOrderEstimateOutput: typeof import("./getRecommendationPurchaseOrderEstimate").getRecommendationPurchaseOrderEstimateOutput = null as any;
utilities.lazyLoad(exports, ["getRecommendationPurchaseOrderEstimate","getRecommendationPurchaseOrderEstimateOutput"], () => require("./getRecommendationPurchaseOrderEstimate"));

export { GetRecommendationPurchaseOrderListArgs, GetRecommendationPurchaseOrderListResult, GetRecommendationPurchaseOrderListOutputArgs } from "./getRecommendationPurchaseOrderList";
export const getRecommendationPurchaseOrderList: typeof import("./getRecommendationPurchaseOrderList").getRecommendationPurchaseOrderList = null as any;
export const getRecommendationPurchaseOrderListOutput: typeof import("./getRecommendationPurchaseOrderList").getRecommendationPurchaseOrderListOutput = null as any;
utilities.lazyLoad(exports, ["getRecommendationPurchaseOrderList","getRecommendationPurchaseOrderListOutput"], () => require("./getRecommendationPurchaseOrderList"));

export { GetRecommendationSoftwareItemArgs, GetRecommendationSoftwareItemResult, GetRecommendationSoftwareItemOutputArgs } from "./getRecommendationSoftwareItem";
export const getRecommendationSoftwareItem: typeof import("./getRecommendationSoftwareItem").getRecommendationSoftwareItem = null as any;
export const getRecommendationSoftwareItemOutput: typeof import("./getRecommendationSoftwareItem").getRecommendationSoftwareItemOutput = null as any;
utilities.lazyLoad(exports, ["getRecommendationSoftwareItem","getRecommendationSoftwareItemOutput"], () => require("./getRecommendationSoftwareItem"));

export { GetRecoveryBackupConfigPolicyArgs, GetRecoveryBackupConfigPolicyResult, GetRecoveryBackupConfigPolicyOutputArgs } from "./getRecoveryBackupConfigPolicy";
export const getRecoveryBackupConfigPolicy: typeof import("./getRecoveryBackupConfigPolicy").getRecoveryBackupConfigPolicy = null as any;
export const getRecoveryBackupConfigPolicyOutput: typeof import("./getRecoveryBackupConfigPolicy").getRecoveryBackupConfigPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getRecoveryBackupConfigPolicy","getRecoveryBackupConfigPolicyOutput"], () => require("./getRecoveryBackupConfigPolicy"));

export { GetRecoveryBackupProfileArgs, GetRecoveryBackupProfileResult, GetRecoveryBackupProfileOutputArgs } from "./getRecoveryBackupProfile";
export const getRecoveryBackupProfile: typeof import("./getRecoveryBackupProfile").getRecoveryBackupProfile = null as any;
export const getRecoveryBackupProfileOutput: typeof import("./getRecoveryBackupProfile").getRecoveryBackupProfileOutput = null as any;
utilities.lazyLoad(exports, ["getRecoveryBackupProfile","getRecoveryBackupProfileOutput"], () => require("./getRecoveryBackupProfile"));

export { GetRecoveryConfigResultArgs, GetRecoveryConfigResultResult, GetRecoveryConfigResultOutputArgs } from "./getRecoveryConfigResult";
export const getRecoveryConfigResult: typeof import("./getRecoveryConfigResult").getRecoveryConfigResult = null as any;
export const getRecoveryConfigResultOutput: typeof import("./getRecoveryConfigResult").getRecoveryConfigResultOutput = null as any;
utilities.lazyLoad(exports, ["getRecoveryConfigResult","getRecoveryConfigResultOutput"], () => require("./getRecoveryConfigResult"));

export { GetRecoveryConfigResultEntryArgs, GetRecoveryConfigResultEntryResult, GetRecoveryConfigResultEntryOutputArgs } from "./getRecoveryConfigResultEntry";
export const getRecoveryConfigResultEntry: typeof import("./getRecoveryConfigResultEntry").getRecoveryConfigResultEntry = null as any;
export const getRecoveryConfigResultEntryOutput: typeof import("./getRecoveryConfigResultEntry").getRecoveryConfigResultEntryOutput = null as any;
utilities.lazyLoad(exports, ["getRecoveryConfigResultEntry","getRecoveryConfigResultEntryOutput"], () => require("./getRecoveryConfigResultEntry"));

export { GetRecoveryOnDemandBackupArgs, GetRecoveryOnDemandBackupResult, GetRecoveryOnDemandBackupOutputArgs } from "./getRecoveryOnDemandBackup";
export const getRecoveryOnDemandBackup: typeof import("./getRecoveryOnDemandBackup").getRecoveryOnDemandBackup = null as any;
export const getRecoveryOnDemandBackupOutput: typeof import("./getRecoveryOnDemandBackup").getRecoveryOnDemandBackupOutput = null as any;
utilities.lazyLoad(exports, ["getRecoveryOnDemandBackup","getRecoveryOnDemandBackupOutput"], () => require("./getRecoveryOnDemandBackup"));

export { GetRecoveryRestoreArgs, GetRecoveryRestoreResult, GetRecoveryRestoreOutputArgs } from "./getRecoveryRestore";
export const getRecoveryRestore: typeof import("./getRecoveryRestore").getRecoveryRestore = null as any;
export const getRecoveryRestoreOutput: typeof import("./getRecoveryRestore").getRecoveryRestoreOutput = null as any;
utilities.lazyLoad(exports, ["getRecoveryRestore","getRecoveryRestoreOutput"], () => require("./getRecoveryRestore"));

export { GetRecoveryScheduleConfigPolicyArgs, GetRecoveryScheduleConfigPolicyResult, GetRecoveryScheduleConfigPolicyOutputArgs } from "./getRecoveryScheduleConfigPolicy";
export const getRecoveryScheduleConfigPolicy: typeof import("./getRecoveryScheduleConfigPolicy").getRecoveryScheduleConfigPolicy = null as any;
export const getRecoveryScheduleConfigPolicyOutput: typeof import("./getRecoveryScheduleConfigPolicy").getRecoveryScheduleConfigPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getRecoveryScheduleConfigPolicy","getRecoveryScheduleConfigPolicyOutput"], () => require("./getRecoveryScheduleConfigPolicy"));

export { GetResourceGroupArgs, GetResourceGroupResult, GetResourceGroupOutputArgs } from "./getResourceGroup";
export const getResourceGroup: typeof import("./getResourceGroup").getResourceGroup = null as any;
export const getResourceGroupOutput: typeof import("./getResourceGroup").getResourceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getResourceGroup","getResourceGroupOutput"], () => require("./getResourceGroup"));

export { GetResourceGroupMemberArgs, GetResourceGroupMemberResult, GetResourceGroupMemberOutputArgs } from "./getResourceGroupMember";
export const getResourceGroupMember: typeof import("./getResourceGroupMember").getResourceGroupMember = null as any;
export const getResourceGroupMemberOutput: typeof import("./getResourceGroupMember").getResourceGroupMemberOutput = null as any;
utilities.lazyLoad(exports, ["getResourceGroupMember","getResourceGroupMemberOutput"], () => require("./getResourceGroupMember"));

export { GetResourceLicenseResourceCountArgs, GetResourceLicenseResourceCountResult, GetResourceLicenseResourceCountOutputArgs } from "./getResourceLicenseResourceCount";
export const getResourceLicenseResourceCount: typeof import("./getResourceLicenseResourceCount").getResourceLicenseResourceCount = null as any;
export const getResourceLicenseResourceCountOutput: typeof import("./getResourceLicenseResourceCount").getResourceLicenseResourceCountOutput = null as any;
utilities.lazyLoad(exports, ["getResourceLicenseResourceCount","getResourceLicenseResourceCountOutput"], () => require("./getResourceLicenseResourceCount"));

export { GetResourceMembershipArgs, GetResourceMembershipResult, GetResourceMembershipOutputArgs } from "./getResourceMembership";
export const getResourceMembership: typeof import("./getResourceMembership").getResourceMembership = null as any;
export const getResourceMembershipOutput: typeof import("./getResourceMembership").getResourceMembershipOutput = null as any;
utilities.lazyLoad(exports, ["getResourceMembership","getResourceMembershipOutput"], () => require("./getResourceMembership"));

export { GetResourceMembershipHolderArgs, GetResourceMembershipHolderResult, GetResourceMembershipHolderOutputArgs } from "./getResourceMembershipHolder";
export const getResourceMembershipHolder: typeof import("./getResourceMembershipHolder").getResourceMembershipHolder = null as any;
export const getResourceMembershipHolderOutput: typeof import("./getResourceMembershipHolder").getResourceMembershipHolderOutput = null as any;
utilities.lazyLoad(exports, ["getResourceMembershipHolder","getResourceMembershipHolderOutput"], () => require("./getResourceMembershipHolder"));

export { GetResourceReservationArgs, GetResourceReservationResult, GetResourceReservationOutputArgs } from "./getResourceReservation";
export const getResourceReservation: typeof import("./getResourceReservation").getResourceReservation = null as any;
export const getResourceReservationOutput: typeof import("./getResourceReservation").getResourceReservationOutput = null as any;
utilities.lazyLoad(exports, ["getResourceReservation","getResourceReservationOutput"], () => require("./getResourceReservation"));

export { GetResourceSelectionCriteriaArgs, GetResourceSelectionCriteriaResult, GetResourceSelectionCriteriaOutputArgs } from "./getResourceSelectionCriteria";
export const getResourceSelectionCriteria: typeof import("./getResourceSelectionCriteria").getResourceSelectionCriteria = null as any;
export const getResourceSelectionCriteriaOutput: typeof import("./getResourceSelectionCriteria").getResourceSelectionCriteriaOutput = null as any;
utilities.lazyLoad(exports, ["getResourceSelectionCriteria","getResourceSelectionCriteriaOutput"], () => require("./getResourceSelectionCriteria"));

export { GetResourceSharedResourcesInfoHolderArgs, GetResourceSharedResourcesInfoHolderResult, GetResourceSharedResourcesInfoHolderOutputArgs } from "./getResourceSharedResourcesInfoHolder";
export const getResourceSharedResourcesInfoHolder: typeof import("./getResourceSharedResourcesInfoHolder").getResourceSharedResourcesInfoHolder = null as any;
export const getResourceSharedResourcesInfoHolderOutput: typeof import("./getResourceSharedResourcesInfoHolder").getResourceSharedResourcesInfoHolderOutput = null as any;
utilities.lazyLoad(exports, ["getResourceSharedResourcesInfoHolder","getResourceSharedResourcesInfoHolderOutput"], () => require("./getResourceSharedResourcesInfoHolder"));

export { GetResourcepoolLeaseArgs, GetResourcepoolLeaseResult, GetResourcepoolLeaseOutputArgs } from "./getResourcepoolLease";
export const getResourcepoolLease: typeof import("./getResourcepoolLease").getResourcepoolLease = null as any;
export const getResourcepoolLeaseOutput: typeof import("./getResourcepoolLease").getResourcepoolLeaseOutput = null as any;
utilities.lazyLoad(exports, ["getResourcepoolLease","getResourcepoolLeaseOutput"], () => require("./getResourcepoolLease"));

export { GetResourcepoolLeaseResourceArgs, GetResourcepoolLeaseResourceResult, GetResourcepoolLeaseResourceOutputArgs } from "./getResourcepoolLeaseResource";
export const getResourcepoolLeaseResource: typeof import("./getResourcepoolLeaseResource").getResourcepoolLeaseResource = null as any;
export const getResourcepoolLeaseResourceOutput: typeof import("./getResourcepoolLeaseResource").getResourcepoolLeaseResourceOutput = null as any;
utilities.lazyLoad(exports, ["getResourcepoolLeaseResource","getResourcepoolLeaseResourceOutput"], () => require("./getResourcepoolLeaseResource"));

export { GetResourcepoolMembershipReservationArgs, GetResourcepoolMembershipReservationResult, GetResourcepoolMembershipReservationOutputArgs } from "./getResourcepoolMembershipReservation";
export const getResourcepoolMembershipReservation: typeof import("./getResourcepoolMembershipReservation").getResourcepoolMembershipReservation = null as any;
export const getResourcepoolMembershipReservationOutput: typeof import("./getResourcepoolMembershipReservation").getResourcepoolMembershipReservationOutput = null as any;
utilities.lazyLoad(exports, ["getResourcepoolMembershipReservation","getResourcepoolMembershipReservationOutput"], () => require("./getResourcepoolMembershipReservation"));

export { GetResourcepoolPoolArgs, GetResourcepoolPoolResult, GetResourcepoolPoolOutputArgs } from "./getResourcepoolPool";
export const getResourcepoolPool: typeof import("./getResourcepoolPool").getResourcepoolPool = null as any;
export const getResourcepoolPoolOutput: typeof import("./getResourcepoolPool").getResourcepoolPoolOutput = null as any;
utilities.lazyLoad(exports, ["getResourcepoolPool","getResourcepoolPoolOutput"], () => require("./getResourcepoolPool"));

export { GetResourcepoolPoolMemberArgs, GetResourcepoolPoolMemberResult, GetResourcepoolPoolMemberOutputArgs } from "./getResourcepoolPoolMember";
export const getResourcepoolPoolMember: typeof import("./getResourcepoolPoolMember").getResourcepoolPoolMember = null as any;
export const getResourcepoolPoolMemberOutput: typeof import("./getResourcepoolPoolMember").getResourcepoolPoolMemberOutput = null as any;
utilities.lazyLoad(exports, ["getResourcepoolPoolMember","getResourcepoolPoolMemberOutput"], () => require("./getResourcepoolPoolMember"));

export { GetResourcepoolUniverseArgs, GetResourcepoolUniverseResult, GetResourcepoolUniverseOutputArgs } from "./getResourcepoolUniverse";
export const getResourcepoolUniverse: typeof import("./getResourcepoolUniverse").getResourcepoolUniverse = null as any;
export const getResourcepoolUniverseOutput: typeof import("./getResourcepoolUniverse").getResourcepoolUniverseOutput = null as any;
utilities.lazyLoad(exports, ["getResourcepoolUniverse","getResourcepoolUniverseOutput"], () => require("./getResourcepoolUniverse"));

export { GetSchedulerTaskResultArgs, GetSchedulerTaskResultResult, GetSchedulerTaskResultOutputArgs } from "./getSchedulerTaskResult";
export const getSchedulerTaskResult: typeof import("./getSchedulerTaskResult").getSchedulerTaskResult = null as any;
export const getSchedulerTaskResultOutput: typeof import("./getSchedulerTaskResult").getSchedulerTaskResultOutput = null as any;
utilities.lazyLoad(exports, ["getSchedulerTaskResult","getSchedulerTaskResultOutput"], () => require("./getSchedulerTaskResult"));

export { GetSchedulerTaskScheduleArgs, GetSchedulerTaskScheduleResult, GetSchedulerTaskScheduleOutputArgs } from "./getSchedulerTaskSchedule";
export const getSchedulerTaskSchedule: typeof import("./getSchedulerTaskSchedule").getSchedulerTaskSchedule = null as any;
export const getSchedulerTaskScheduleOutput: typeof import("./getSchedulerTaskSchedule").getSchedulerTaskScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getSchedulerTaskSchedule","getSchedulerTaskScheduleOutput"], () => require("./getSchedulerTaskSchedule"));

export { GetSdaaciConnectionArgs, GetSdaaciConnectionResult, GetSdaaciConnectionOutputArgs } from "./getSdaaciConnection";
export const getSdaaciConnection: typeof import("./getSdaaciConnection").getSdaaciConnection = null as any;
export const getSdaaciConnectionOutput: typeof import("./getSdaaciConnection").getSdaaciConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getSdaaciConnection","getSdaaciConnectionOutput"], () => require("./getSdaaciConnection"));

export { GetSdaaciConnectionDetailArgs, GetSdaaciConnectionDetailResult, GetSdaaciConnectionDetailOutputArgs } from "./getSdaaciConnectionDetail";
export const getSdaaciConnectionDetail: typeof import("./getSdaaciConnectionDetail").getSdaaciConnectionDetail = null as any;
export const getSdaaciConnectionDetailOutput: typeof import("./getSdaaciConnectionDetail").getSdaaciConnectionDetailOutput = null as any;
utilities.lazyLoad(exports, ["getSdaaciConnectionDetail","getSdaaciConnectionDetailOutput"], () => require("./getSdaaciConnectionDetail"));

export { GetSdcardPolicyArgs, GetSdcardPolicyResult, GetSdcardPolicyOutputArgs } from "./getSdcardPolicy";
export const getSdcardPolicy: typeof import("./getSdcardPolicy").getSdcardPolicy = null as any;
export const getSdcardPolicyOutput: typeof import("./getSdcardPolicy").getSdcardPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSdcardPolicy","getSdcardPolicyOutput"], () => require("./getSdcardPolicy"));

export { GetSdcardPolicyInventoryArgs, GetSdcardPolicyInventoryResult, GetSdcardPolicyInventoryOutputArgs } from "./getSdcardPolicyInventory";
export const getSdcardPolicyInventory: typeof import("./getSdcardPolicyInventory").getSdcardPolicyInventory = null as any;
export const getSdcardPolicyInventoryOutput: typeof import("./getSdcardPolicyInventory").getSdcardPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getSdcardPolicyInventory","getSdcardPolicyInventoryOutput"], () => require("./getSdcardPolicyInventory"));

export { GetSearchSearchItemArgs, GetSearchSearchItemResult, GetSearchSearchItemOutputArgs } from "./getSearchSearchItem";
export const getSearchSearchItem: typeof import("./getSearchSearchItem").getSearchSearchItem = null as any;
export const getSearchSearchItemOutput: typeof import("./getSearchSearchItem").getSearchSearchItemOutput = null as any;
utilities.lazyLoad(exports, ["getSearchSearchItem","getSearchSearchItemOutput"], () => require("./getSearchSearchItem"));

export { GetSearchTagItemArgs, GetSearchTagItemResult, GetSearchTagItemOutputArgs } from "./getSearchTagItem";
export const getSearchTagItem: typeof import("./getSearchTagItem").getSearchTagItem = null as any;
export const getSearchTagItemOutput: typeof import("./getSearchTagItem").getSearchTagItemOutput = null as any;
utilities.lazyLoad(exports, ["getSearchTagItem","getSearchTagItemOutput"], () => require("./getSearchTagItem"));

export { GetSecurityUnitArgs, GetSecurityUnitResult, GetSecurityUnitOutputArgs } from "./getSecurityUnit";
export const getSecurityUnit: typeof import("./getSecurityUnit").getSecurityUnit = null as any;
export const getSecurityUnitOutput: typeof import("./getSecurityUnit").getSecurityUnitOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityUnit","getSecurityUnitOutput"], () => require("./getSecurityUnit"));

export { GetServerConfigChangeDetailArgs, GetServerConfigChangeDetailResult, GetServerConfigChangeDetailOutputArgs } from "./getServerConfigChangeDetail";
export const getServerConfigChangeDetail: typeof import("./getServerConfigChangeDetail").getServerConfigChangeDetail = null as any;
export const getServerConfigChangeDetailOutput: typeof import("./getServerConfigChangeDetail").getServerConfigChangeDetailOutput = null as any;
utilities.lazyLoad(exports, ["getServerConfigChangeDetail","getServerConfigChangeDetailOutput"], () => require("./getServerConfigChangeDetail"));

export { GetServerConfigImportArgs, GetServerConfigImportResult, GetServerConfigImportOutputArgs } from "./getServerConfigImport";
export const getServerConfigImport: typeof import("./getServerConfigImport").getServerConfigImport = null as any;
export const getServerConfigImportOutput: typeof import("./getServerConfigImport").getServerConfigImportOutput = null as any;
utilities.lazyLoad(exports, ["getServerConfigImport","getServerConfigImportOutput"], () => require("./getServerConfigImport"));

export { GetServerConfigResultArgs, GetServerConfigResultResult, GetServerConfigResultOutputArgs } from "./getServerConfigResult";
export const getServerConfigResult: typeof import("./getServerConfigResult").getServerConfigResult = null as any;
export const getServerConfigResultOutput: typeof import("./getServerConfigResult").getServerConfigResultOutput = null as any;
utilities.lazyLoad(exports, ["getServerConfigResult","getServerConfigResultOutput"], () => require("./getServerConfigResult"));

export { GetServerConfigResultEntryArgs, GetServerConfigResultEntryResult, GetServerConfigResultEntryOutputArgs } from "./getServerConfigResultEntry";
export const getServerConfigResultEntry: typeof import("./getServerConfigResultEntry").getServerConfigResultEntry = null as any;
export const getServerConfigResultEntryOutput: typeof import("./getServerConfigResultEntry").getServerConfigResultEntryOutput = null as any;
utilities.lazyLoad(exports, ["getServerConfigResultEntry","getServerConfigResultEntryOutput"], () => require("./getServerConfigResultEntry"));

export { GetServerDisruptionArgs, GetServerDisruptionResult, GetServerDisruptionOutputArgs } from "./getServerDisruption";
export const getServerDisruption: typeof import("./getServerDisruption").getServerDisruption = null as any;
export const getServerDisruptionOutput: typeof import("./getServerDisruption").getServerDisruptionOutput = null as any;
utilities.lazyLoad(exports, ["getServerDisruption","getServerDisruptionOutput"], () => require("./getServerDisruption"));

export { GetServerProfileArgs, GetServerProfileResult, GetServerProfileOutputArgs } from "./getServerProfile";
export const getServerProfile: typeof import("./getServerProfile").getServerProfile = null as any;
export const getServerProfileOutput: typeof import("./getServerProfile").getServerProfileOutput = null as any;
utilities.lazyLoad(exports, ["getServerProfile","getServerProfileOutput"], () => require("./getServerProfile"));

export { GetServerProfileTemplateArgs, GetServerProfileTemplateResult, GetServerProfileTemplateOutputArgs } from "./getServerProfileTemplate";
export const getServerProfileTemplate: typeof import("./getServerProfileTemplate").getServerProfileTemplate = null as any;
export const getServerProfileTemplateOutput: typeof import("./getServerProfileTemplate").getServerProfileTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getServerProfileTemplate","getServerProfileTemplateOutput"], () => require("./getServerProfileTemplate"));

export { GetServicenowChangeRequestArgs, GetServicenowChangeRequestResult, GetServicenowChangeRequestOutputArgs } from "./getServicenowChangeRequest";
export const getServicenowChangeRequest: typeof import("./getServicenowChangeRequest").getServicenowChangeRequest = null as any;
export const getServicenowChangeRequestOutput: typeof import("./getServicenowChangeRequest").getServicenowChangeRequestOutput = null as any;
utilities.lazyLoad(exports, ["getServicenowChangeRequest","getServicenowChangeRequestOutput"], () => require("./getServicenowChangeRequest"));

export { GetServicenowIncidentArgs, GetServicenowIncidentResult, GetServicenowIncidentOutputArgs } from "./getServicenowIncident";
export const getServicenowIncident: typeof import("./getServicenowIncident").getServicenowIncident = null as any;
export const getServicenowIncidentOutput: typeof import("./getServicenowIncident").getServicenowIncidentOutput = null as any;
utilities.lazyLoad(exports, ["getServicenowIncident","getServicenowIncidentOutput"], () => require("./getServicenowIncident"));

export { GetSmtpPolicyArgs, GetSmtpPolicyResult, GetSmtpPolicyOutputArgs } from "./getSmtpPolicy";
export const getSmtpPolicy: typeof import("./getSmtpPolicy").getSmtpPolicy = null as any;
export const getSmtpPolicyOutput: typeof import("./getSmtpPolicy").getSmtpPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSmtpPolicy","getSmtpPolicyOutput"], () => require("./getSmtpPolicy"));

export { GetSnmpPolicyArgs, GetSnmpPolicyResult, GetSnmpPolicyOutputArgs } from "./getSnmpPolicy";
export const getSnmpPolicy: typeof import("./getSnmpPolicy").getSnmpPolicy = null as any;
export const getSnmpPolicyOutput: typeof import("./getSnmpPolicy").getSnmpPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSnmpPolicy","getSnmpPolicyOutput"], () => require("./getSnmpPolicy"));

export { GetSnmpPolicyInventoryArgs, GetSnmpPolicyInventoryResult, GetSnmpPolicyInventoryOutputArgs } from "./getSnmpPolicyInventory";
export const getSnmpPolicyInventory: typeof import("./getSnmpPolicyInventory").getSnmpPolicyInventory = null as any;
export const getSnmpPolicyInventoryOutput: typeof import("./getSnmpPolicyInventory").getSnmpPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getSnmpPolicyInventory","getSnmpPolicyInventoryOutput"], () => require("./getSnmpPolicyInventory"));

export { GetSoftwareApplianceDistributableArgs, GetSoftwareApplianceDistributableResult, GetSoftwareApplianceDistributableOutputArgs } from "./getSoftwareApplianceDistributable";
export const getSoftwareApplianceDistributable: typeof import("./getSoftwareApplianceDistributable").getSoftwareApplianceDistributable = null as any;
export const getSoftwareApplianceDistributableOutput: typeof import("./getSoftwareApplianceDistributable").getSoftwareApplianceDistributableOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareApplianceDistributable","getSoftwareApplianceDistributableOutput"], () => require("./getSoftwareApplianceDistributable"));

export { GetSoftwareDownloadHistoryArgs, GetSoftwareDownloadHistoryResult, GetSoftwareDownloadHistoryOutputArgs } from "./getSoftwareDownloadHistory";
export const getSoftwareDownloadHistory: typeof import("./getSoftwareDownloadHistory").getSoftwareDownloadHistory = null as any;
export const getSoftwareDownloadHistoryOutput: typeof import("./getSoftwareDownloadHistory").getSoftwareDownloadHistoryOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareDownloadHistory","getSoftwareDownloadHistoryOutput"], () => require("./getSoftwareDownloadHistory"));

export { GetSoftwareHciBundleDistributableArgs, GetSoftwareHciBundleDistributableResult, GetSoftwareHciBundleDistributableOutputArgs } from "./getSoftwareHciBundleDistributable";
export const getSoftwareHciBundleDistributable: typeof import("./getSoftwareHciBundleDistributable").getSoftwareHciBundleDistributable = null as any;
export const getSoftwareHciBundleDistributableOutput: typeof import("./getSoftwareHciBundleDistributable").getSoftwareHciBundleDistributableOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareHciBundleDistributable","getSoftwareHciBundleDistributableOutput"], () => require("./getSoftwareHciBundleDistributable"));

export { GetSoftwareHciDistributableArgs, GetSoftwareHciDistributableResult, GetSoftwareHciDistributableOutputArgs } from "./getSoftwareHciDistributable";
export const getSoftwareHciDistributable: typeof import("./getSoftwareHciDistributable").getSoftwareHciDistributable = null as any;
export const getSoftwareHciDistributableOutput: typeof import("./getSoftwareHciDistributable").getSoftwareHciDistributableOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareHciDistributable","getSoftwareHciDistributableOutput"], () => require("./getSoftwareHciDistributable"));

export { GetSoftwareHclMetaArgs, GetSoftwareHclMetaResult, GetSoftwareHclMetaOutputArgs } from "./getSoftwareHclMeta";
export const getSoftwareHclMeta: typeof import("./getSoftwareHclMeta").getSoftwareHclMeta = null as any;
export const getSoftwareHclMetaOutput: typeof import("./getSoftwareHclMeta").getSoftwareHclMetaOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareHclMeta","getSoftwareHclMetaOutput"], () => require("./getSoftwareHclMeta"));

export { GetSoftwareHyperflexBundleDistributableArgs, GetSoftwareHyperflexBundleDistributableResult, GetSoftwareHyperflexBundleDistributableOutputArgs } from "./getSoftwareHyperflexBundleDistributable";
export const getSoftwareHyperflexBundleDistributable: typeof import("./getSoftwareHyperflexBundleDistributable").getSoftwareHyperflexBundleDistributable = null as any;
export const getSoftwareHyperflexBundleDistributableOutput: typeof import("./getSoftwareHyperflexBundleDistributable").getSoftwareHyperflexBundleDistributableOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareHyperflexBundleDistributable","getSoftwareHyperflexBundleDistributableOutput"], () => require("./getSoftwareHyperflexBundleDistributable"));

export { GetSoftwareHyperflexDistributableArgs, GetSoftwareHyperflexDistributableResult, GetSoftwareHyperflexDistributableOutputArgs } from "./getSoftwareHyperflexDistributable";
export const getSoftwareHyperflexDistributable: typeof import("./getSoftwareHyperflexDistributable").getSoftwareHyperflexDistributable = null as any;
export const getSoftwareHyperflexDistributableOutput: typeof import("./getSoftwareHyperflexDistributable").getSoftwareHyperflexDistributableOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareHyperflexDistributable","getSoftwareHyperflexDistributableOutput"], () => require("./getSoftwareHyperflexDistributable"));

export { GetSoftwareIksBundleDistributableArgs, GetSoftwareIksBundleDistributableResult, GetSoftwareIksBundleDistributableOutputArgs } from "./getSoftwareIksBundleDistributable";
export const getSoftwareIksBundleDistributable: typeof import("./getSoftwareIksBundleDistributable").getSoftwareIksBundleDistributable = null as any;
export const getSoftwareIksBundleDistributableOutput: typeof import("./getSoftwareIksBundleDistributable").getSoftwareIksBundleDistributableOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareIksBundleDistributable","getSoftwareIksBundleDistributableOutput"], () => require("./getSoftwareIksBundleDistributable"));

export { GetSoftwareReleaseMetaArgs, GetSoftwareReleaseMetaResult, GetSoftwareReleaseMetaOutputArgs } from "./getSoftwareReleaseMeta";
export const getSoftwareReleaseMeta: typeof import("./getSoftwareReleaseMeta").getSoftwareReleaseMeta = null as any;
export const getSoftwareReleaseMetaOutput: typeof import("./getSoftwareReleaseMeta").getSoftwareReleaseMetaOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareReleaseMeta","getSoftwareReleaseMetaOutput"], () => require("./getSoftwareReleaseMeta"));

export { GetSoftwareSolutionDistributableArgs, GetSoftwareSolutionDistributableResult, GetSoftwareSolutionDistributableOutputArgs } from "./getSoftwareSolutionDistributable";
export const getSoftwareSolutionDistributable: typeof import("./getSoftwareSolutionDistributable").getSoftwareSolutionDistributable = null as any;
export const getSoftwareSolutionDistributableOutput: typeof import("./getSoftwareSolutionDistributable").getSoftwareSolutionDistributableOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareSolutionDistributable","getSoftwareSolutionDistributableOutput"], () => require("./getSoftwareSolutionDistributable"));

export { GetSoftwareUcsdBundleDistributableArgs, GetSoftwareUcsdBundleDistributableResult, GetSoftwareUcsdBundleDistributableOutputArgs } from "./getSoftwareUcsdBundleDistributable";
export const getSoftwareUcsdBundleDistributable: typeof import("./getSoftwareUcsdBundleDistributable").getSoftwareUcsdBundleDistributable = null as any;
export const getSoftwareUcsdBundleDistributableOutput: typeof import("./getSoftwareUcsdBundleDistributable").getSoftwareUcsdBundleDistributableOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareUcsdBundleDistributable","getSoftwareUcsdBundleDistributableOutput"], () => require("./getSoftwareUcsdBundleDistributable"));

export { GetSoftwareUcsdDistributableArgs, GetSoftwareUcsdDistributableResult, GetSoftwareUcsdDistributableOutputArgs } from "./getSoftwareUcsdDistributable";
export const getSoftwareUcsdDistributable: typeof import("./getSoftwareUcsdDistributable").getSoftwareUcsdDistributable = null as any;
export const getSoftwareUcsdDistributableOutput: typeof import("./getSoftwareUcsdDistributable").getSoftwareUcsdDistributableOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareUcsdDistributable","getSoftwareUcsdDistributableOutput"], () => require("./getSoftwareUcsdDistributable"));

export { GetSoftwarerepositoryAuthorizationArgs, GetSoftwarerepositoryAuthorizationResult, GetSoftwarerepositoryAuthorizationOutputArgs } from "./getSoftwarerepositoryAuthorization";
export const getSoftwarerepositoryAuthorization: typeof import("./getSoftwarerepositoryAuthorization").getSoftwarerepositoryAuthorization = null as any;
export const getSoftwarerepositoryAuthorizationOutput: typeof import("./getSoftwarerepositoryAuthorization").getSoftwarerepositoryAuthorizationOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwarerepositoryAuthorization","getSoftwarerepositoryAuthorizationOutput"], () => require("./getSoftwarerepositoryAuthorization"));

export { GetSoftwarerepositoryCachedImageArgs, GetSoftwarerepositoryCachedImageResult, GetSoftwarerepositoryCachedImageOutputArgs } from "./getSoftwarerepositoryCachedImage";
export const getSoftwarerepositoryCachedImage: typeof import("./getSoftwarerepositoryCachedImage").getSoftwarerepositoryCachedImage = null as any;
export const getSoftwarerepositoryCachedImageOutput: typeof import("./getSoftwarerepositoryCachedImage").getSoftwarerepositoryCachedImageOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwarerepositoryCachedImage","getSoftwarerepositoryCachedImageOutput"], () => require("./getSoftwarerepositoryCachedImage"));

export { GetSoftwarerepositoryCatalogArgs, GetSoftwarerepositoryCatalogResult, GetSoftwarerepositoryCatalogOutputArgs } from "./getSoftwarerepositoryCatalog";
export const getSoftwarerepositoryCatalog: typeof import("./getSoftwarerepositoryCatalog").getSoftwarerepositoryCatalog = null as any;
export const getSoftwarerepositoryCatalogOutput: typeof import("./getSoftwarerepositoryCatalog").getSoftwarerepositoryCatalogOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwarerepositoryCatalog","getSoftwarerepositoryCatalogOutput"], () => require("./getSoftwarerepositoryCatalog"));

export { GetSoftwarerepositoryCategoryMapperArgs, GetSoftwarerepositoryCategoryMapperResult, GetSoftwarerepositoryCategoryMapperOutputArgs } from "./getSoftwarerepositoryCategoryMapper";
export const getSoftwarerepositoryCategoryMapper: typeof import("./getSoftwarerepositoryCategoryMapper").getSoftwarerepositoryCategoryMapper = null as any;
export const getSoftwarerepositoryCategoryMapperOutput: typeof import("./getSoftwarerepositoryCategoryMapper").getSoftwarerepositoryCategoryMapperOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwarerepositoryCategoryMapper","getSoftwarerepositoryCategoryMapperOutput"], () => require("./getSoftwarerepositoryCategoryMapper"));

export { GetSoftwarerepositoryCategoryMapperModelArgs, GetSoftwarerepositoryCategoryMapperModelResult, GetSoftwarerepositoryCategoryMapperModelOutputArgs } from "./getSoftwarerepositoryCategoryMapperModel";
export const getSoftwarerepositoryCategoryMapperModel: typeof import("./getSoftwarerepositoryCategoryMapperModel").getSoftwarerepositoryCategoryMapperModel = null as any;
export const getSoftwarerepositoryCategoryMapperModelOutput: typeof import("./getSoftwarerepositoryCategoryMapperModel").getSoftwarerepositoryCategoryMapperModelOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwarerepositoryCategoryMapperModel","getSoftwarerepositoryCategoryMapperModelOutput"], () => require("./getSoftwarerepositoryCategoryMapperModel"));

export { GetSoftwarerepositoryCategorySupportConstraintArgs, GetSoftwarerepositoryCategorySupportConstraintResult, GetSoftwarerepositoryCategorySupportConstraintOutputArgs } from "./getSoftwarerepositoryCategorySupportConstraint";
export const getSoftwarerepositoryCategorySupportConstraint: typeof import("./getSoftwarerepositoryCategorySupportConstraint").getSoftwarerepositoryCategorySupportConstraint = null as any;
export const getSoftwarerepositoryCategorySupportConstraintOutput: typeof import("./getSoftwarerepositoryCategorySupportConstraint").getSoftwarerepositoryCategorySupportConstraintOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwarerepositoryCategorySupportConstraint","getSoftwarerepositoryCategorySupportConstraintOutput"], () => require("./getSoftwarerepositoryCategorySupportConstraint"));

export { GetSoftwarerepositoryCategoryUnsupportedModelsArgs, GetSoftwarerepositoryCategoryUnsupportedModelsResult, GetSoftwarerepositoryCategoryUnsupportedModelsOutputArgs } from "./getSoftwarerepositoryCategoryUnsupportedModels";
export const getSoftwarerepositoryCategoryUnsupportedModels: typeof import("./getSoftwarerepositoryCategoryUnsupportedModels").getSoftwarerepositoryCategoryUnsupportedModels = null as any;
export const getSoftwarerepositoryCategoryUnsupportedModelsOutput: typeof import("./getSoftwarerepositoryCategoryUnsupportedModels").getSoftwarerepositoryCategoryUnsupportedModelsOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwarerepositoryCategoryUnsupportedModels","getSoftwarerepositoryCategoryUnsupportedModelsOutput"], () => require("./getSoftwarerepositoryCategoryUnsupportedModels"));

export { GetSoftwarerepositoryDownloadSpecArgs, GetSoftwarerepositoryDownloadSpecResult, GetSoftwarerepositoryDownloadSpecOutputArgs } from "./getSoftwarerepositoryDownloadSpec";
export const getSoftwarerepositoryDownloadSpec: typeof import("./getSoftwarerepositoryDownloadSpec").getSoftwarerepositoryDownloadSpec = null as any;
export const getSoftwarerepositoryDownloadSpecOutput: typeof import("./getSoftwarerepositoryDownloadSpec").getSoftwarerepositoryDownloadSpecOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwarerepositoryDownloadSpec","getSoftwarerepositoryDownloadSpecOutput"], () => require("./getSoftwarerepositoryDownloadSpec"));

export { GetSoftwarerepositoryOperatingSystemFileArgs, GetSoftwarerepositoryOperatingSystemFileResult, GetSoftwarerepositoryOperatingSystemFileOutputArgs } from "./getSoftwarerepositoryOperatingSystemFile";
export const getSoftwarerepositoryOperatingSystemFile: typeof import("./getSoftwarerepositoryOperatingSystemFile").getSoftwarerepositoryOperatingSystemFile = null as any;
export const getSoftwarerepositoryOperatingSystemFileOutput: typeof import("./getSoftwarerepositoryOperatingSystemFile").getSoftwarerepositoryOperatingSystemFileOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwarerepositoryOperatingSystemFile","getSoftwarerepositoryOperatingSystemFileOutput"], () => require("./getSoftwarerepositoryOperatingSystemFile"));

export { GetSoftwarerepositoryReleaseArgs, GetSoftwarerepositoryReleaseResult, GetSoftwarerepositoryReleaseOutputArgs } from "./getSoftwarerepositoryRelease";
export const getSoftwarerepositoryRelease: typeof import("./getSoftwarerepositoryRelease").getSoftwarerepositoryRelease = null as any;
export const getSoftwarerepositoryReleaseOutput: typeof import("./getSoftwarerepositoryRelease").getSoftwarerepositoryReleaseOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwarerepositoryRelease","getSoftwarerepositoryReleaseOutput"], () => require("./getSoftwarerepositoryRelease"));

export { GetSolPolicyArgs, GetSolPolicyResult, GetSolPolicyOutputArgs } from "./getSolPolicy";
export const getSolPolicy: typeof import("./getSolPolicy").getSolPolicy = null as any;
export const getSolPolicyOutput: typeof import("./getSolPolicy").getSolPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSolPolicy","getSolPolicyOutput"], () => require("./getSolPolicy"));

export { GetSolPolicyInventoryArgs, GetSolPolicyInventoryResult, GetSolPolicyInventoryOutputArgs } from "./getSolPolicyInventory";
export const getSolPolicyInventory: typeof import("./getSolPolicyInventory").getSolPolicyInventory = null as any;
export const getSolPolicyInventoryOutput: typeof import("./getSolPolicyInventory").getSolPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getSolPolicyInventory","getSolPolicyInventoryOutput"], () => require("./getSolPolicyInventory"));

export { GetSshPolicyArgs, GetSshPolicyResult, GetSshPolicyOutputArgs } from "./getSshPolicy";
export const getSshPolicy: typeof import("./getSshPolicy").getSshPolicy = null as any;
export const getSshPolicyOutput: typeof import("./getSshPolicy").getSshPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSshPolicy","getSshPolicyOutput"], () => require("./getSshPolicy"));

export { GetSshPolicyInventoryArgs, GetSshPolicyInventoryResult, GetSshPolicyInventoryOutputArgs } from "./getSshPolicyInventory";
export const getSshPolicyInventory: typeof import("./getSshPolicyInventory").getSshPolicyInventory = null as any;
export const getSshPolicyInventoryOutput: typeof import("./getSshPolicyInventory").getSshPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getSshPolicyInventory","getSshPolicyInventoryOutput"], () => require("./getSshPolicyInventory"));

export { GetStorageBatteryBackupUnitArgs, GetStorageBatteryBackupUnitResult, GetStorageBatteryBackupUnitOutputArgs } from "./getStorageBatteryBackupUnit";
export const getStorageBatteryBackupUnit: typeof import("./getStorageBatteryBackupUnit").getStorageBatteryBackupUnit = null as any;
export const getStorageBatteryBackupUnitOutput: typeof import("./getStorageBatteryBackupUnit").getStorageBatteryBackupUnitOutput = null as any;
utilities.lazyLoad(exports, ["getStorageBatteryBackupUnit","getStorageBatteryBackupUnitOutput"], () => require("./getStorageBatteryBackupUnit"));

export { GetStorageControllerArgs, GetStorageControllerResult, GetStorageControllerOutputArgs } from "./getStorageController";
export const getStorageController: typeof import("./getStorageController").getStorageController = null as any;
export const getStorageControllerOutput: typeof import("./getStorageController").getStorageControllerOutput = null as any;
utilities.lazyLoad(exports, ["getStorageController","getStorageControllerOutput"], () => require("./getStorageController"));

export { GetStorageControllerDriveArgs, GetStorageControllerDriveResult, GetStorageControllerDriveOutputArgs } from "./getStorageControllerDrive";
export const getStorageControllerDrive: typeof import("./getStorageControllerDrive").getStorageControllerDrive = null as any;
export const getStorageControllerDriveOutput: typeof import("./getStorageControllerDrive").getStorageControllerDriveOutput = null as any;
utilities.lazyLoad(exports, ["getStorageControllerDrive","getStorageControllerDriveOutput"], () => require("./getStorageControllerDrive"));

export { GetStorageDiskGroupArgs, GetStorageDiskGroupResult, GetStorageDiskGroupOutputArgs } from "./getStorageDiskGroup";
export const getStorageDiskGroup: typeof import("./getStorageDiskGroup").getStorageDiskGroup = null as any;
export const getStorageDiskGroupOutput: typeof import("./getStorageDiskGroup").getStorageDiskGroupOutput = null as any;
utilities.lazyLoad(exports, ["getStorageDiskGroup","getStorageDiskGroupOutput"], () => require("./getStorageDiskGroup"));

export { GetStorageDiskSlotArgs, GetStorageDiskSlotResult, GetStorageDiskSlotOutputArgs } from "./getStorageDiskSlot";
export const getStorageDiskSlot: typeof import("./getStorageDiskSlot").getStorageDiskSlot = null as any;
export const getStorageDiskSlotOutput: typeof import("./getStorageDiskSlot").getStorageDiskSlotOutput = null as any;
utilities.lazyLoad(exports, ["getStorageDiskSlot","getStorageDiskSlotOutput"], () => require("./getStorageDiskSlot"));

export { GetStorageDriveGroupArgs, GetStorageDriveGroupResult, GetStorageDriveGroupOutputArgs } from "./getStorageDriveGroup";
export const getStorageDriveGroup: typeof import("./getStorageDriveGroup").getStorageDriveGroup = null as any;
export const getStorageDriveGroupOutput: typeof import("./getStorageDriveGroup").getStorageDriveGroupOutput = null as any;
utilities.lazyLoad(exports, ["getStorageDriveGroup","getStorageDriveGroupOutput"], () => require("./getStorageDriveGroup"));

export { GetStorageDriveSecurityPolicyArgs, GetStorageDriveSecurityPolicyResult, GetStorageDriveSecurityPolicyOutputArgs } from "./getStorageDriveSecurityPolicy";
export const getStorageDriveSecurityPolicy: typeof import("./getStorageDriveSecurityPolicy").getStorageDriveSecurityPolicy = null as any;
export const getStorageDriveSecurityPolicyOutput: typeof import("./getStorageDriveSecurityPolicy").getStorageDriveSecurityPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getStorageDriveSecurityPolicy","getStorageDriveSecurityPolicyOutput"], () => require("./getStorageDriveSecurityPolicy"));

export { GetStorageEnclosureArgs, GetStorageEnclosureResult, GetStorageEnclosureOutputArgs } from "./getStorageEnclosure";
export const getStorageEnclosure: typeof import("./getStorageEnclosure").getStorageEnclosure = null as any;
export const getStorageEnclosureOutput: typeof import("./getStorageEnclosure").getStorageEnclosureOutput = null as any;
utilities.lazyLoad(exports, ["getStorageEnclosure","getStorageEnclosureOutput"], () => require("./getStorageEnclosure"));

export { GetStorageEnclosureDiskArgs, GetStorageEnclosureDiskResult, GetStorageEnclosureDiskOutputArgs } from "./getStorageEnclosureDisk";
export const getStorageEnclosureDisk: typeof import("./getStorageEnclosureDisk").getStorageEnclosureDisk = null as any;
export const getStorageEnclosureDiskOutput: typeof import("./getStorageEnclosureDisk").getStorageEnclosureDiskOutput = null as any;
utilities.lazyLoad(exports, ["getStorageEnclosureDisk","getStorageEnclosureDiskOutput"], () => require("./getStorageEnclosureDisk"));

export { GetStorageEnclosureDiskSlotEpArgs, GetStorageEnclosureDiskSlotEpResult, GetStorageEnclosureDiskSlotEpOutputArgs } from "./getStorageEnclosureDiskSlotEp";
export const getStorageEnclosureDiskSlotEp: typeof import("./getStorageEnclosureDiskSlotEp").getStorageEnclosureDiskSlotEp = null as any;
export const getStorageEnclosureDiskSlotEpOutput: typeof import("./getStorageEnclosureDiskSlotEp").getStorageEnclosureDiskSlotEpOutput = null as any;
utilities.lazyLoad(exports, ["getStorageEnclosureDiskSlotEp","getStorageEnclosureDiskSlotEpOutput"], () => require("./getStorageEnclosureDiskSlotEp"));

export { GetStorageFileItemArgs, GetStorageFileItemResult, GetStorageFileItemOutputArgs } from "./getStorageFileItem";
export const getStorageFileItem: typeof import("./getStorageFileItem").getStorageFileItem = null as any;
export const getStorageFileItemOutput: typeof import("./getStorageFileItem").getStorageFileItemOutput = null as any;
utilities.lazyLoad(exports, ["getStorageFileItem","getStorageFileItemOutput"], () => require("./getStorageFileItem"));

export { GetStorageFlexFlashControllerArgs, GetStorageFlexFlashControllerResult, GetStorageFlexFlashControllerOutputArgs } from "./getStorageFlexFlashController";
export const getStorageFlexFlashController: typeof import("./getStorageFlexFlashController").getStorageFlexFlashController = null as any;
export const getStorageFlexFlashControllerOutput: typeof import("./getStorageFlexFlashController").getStorageFlexFlashControllerOutput = null as any;
utilities.lazyLoad(exports, ["getStorageFlexFlashController","getStorageFlexFlashControllerOutput"], () => require("./getStorageFlexFlashController"));

export { GetStorageFlexFlashControllerPropsArgs, GetStorageFlexFlashControllerPropsResult, GetStorageFlexFlashControllerPropsOutputArgs } from "./getStorageFlexFlashControllerProps";
export const getStorageFlexFlashControllerProps: typeof import("./getStorageFlexFlashControllerProps").getStorageFlexFlashControllerProps = null as any;
export const getStorageFlexFlashControllerPropsOutput: typeof import("./getStorageFlexFlashControllerProps").getStorageFlexFlashControllerPropsOutput = null as any;
utilities.lazyLoad(exports, ["getStorageFlexFlashControllerProps","getStorageFlexFlashControllerPropsOutput"], () => require("./getStorageFlexFlashControllerProps"));

export { GetStorageFlexFlashPhysicalDriveArgs, GetStorageFlexFlashPhysicalDriveResult, GetStorageFlexFlashPhysicalDriveOutputArgs } from "./getStorageFlexFlashPhysicalDrive";
export const getStorageFlexFlashPhysicalDrive: typeof import("./getStorageFlexFlashPhysicalDrive").getStorageFlexFlashPhysicalDrive = null as any;
export const getStorageFlexFlashPhysicalDriveOutput: typeof import("./getStorageFlexFlashPhysicalDrive").getStorageFlexFlashPhysicalDriveOutput = null as any;
utilities.lazyLoad(exports, ["getStorageFlexFlashPhysicalDrive","getStorageFlexFlashPhysicalDriveOutput"], () => require("./getStorageFlexFlashPhysicalDrive"));

export { GetStorageFlexFlashVirtualDriveArgs, GetStorageFlexFlashVirtualDriveResult, GetStorageFlexFlashVirtualDriveOutputArgs } from "./getStorageFlexFlashVirtualDrive";
export const getStorageFlexFlashVirtualDrive: typeof import("./getStorageFlexFlashVirtualDrive").getStorageFlexFlashVirtualDrive = null as any;
export const getStorageFlexFlashVirtualDriveOutput: typeof import("./getStorageFlexFlashVirtualDrive").getStorageFlexFlashVirtualDriveOutput = null as any;
utilities.lazyLoad(exports, ["getStorageFlexFlashVirtualDrive","getStorageFlexFlashVirtualDriveOutput"], () => require("./getStorageFlexFlashVirtualDrive"));

export { GetStorageFlexUtilControllerArgs, GetStorageFlexUtilControllerResult, GetStorageFlexUtilControllerOutputArgs } from "./getStorageFlexUtilController";
export const getStorageFlexUtilController: typeof import("./getStorageFlexUtilController").getStorageFlexUtilController = null as any;
export const getStorageFlexUtilControllerOutput: typeof import("./getStorageFlexUtilController").getStorageFlexUtilControllerOutput = null as any;
utilities.lazyLoad(exports, ["getStorageFlexUtilController","getStorageFlexUtilControllerOutput"], () => require("./getStorageFlexUtilController"));

export { GetStorageFlexUtilPhysicalDriveArgs, GetStorageFlexUtilPhysicalDriveResult, GetStorageFlexUtilPhysicalDriveOutputArgs } from "./getStorageFlexUtilPhysicalDrive";
export const getStorageFlexUtilPhysicalDrive: typeof import("./getStorageFlexUtilPhysicalDrive").getStorageFlexUtilPhysicalDrive = null as any;
export const getStorageFlexUtilPhysicalDriveOutput: typeof import("./getStorageFlexUtilPhysicalDrive").getStorageFlexUtilPhysicalDriveOutput = null as any;
utilities.lazyLoad(exports, ["getStorageFlexUtilPhysicalDrive","getStorageFlexUtilPhysicalDriveOutput"], () => require("./getStorageFlexUtilPhysicalDrive"));

export { GetStorageFlexUtilVirtualDriveArgs, GetStorageFlexUtilVirtualDriveResult, GetStorageFlexUtilVirtualDriveOutputArgs } from "./getStorageFlexUtilVirtualDrive";
export const getStorageFlexUtilVirtualDrive: typeof import("./getStorageFlexUtilVirtualDrive").getStorageFlexUtilVirtualDrive = null as any;
export const getStorageFlexUtilVirtualDriveOutput: typeof import("./getStorageFlexUtilVirtualDrive").getStorageFlexUtilVirtualDriveOutput = null as any;
utilities.lazyLoad(exports, ["getStorageFlexUtilVirtualDrive","getStorageFlexUtilVirtualDriveOutput"], () => require("./getStorageFlexUtilVirtualDrive"));

export { GetStorageHitachiArrayArgs, GetStorageHitachiArrayResult, GetStorageHitachiArrayOutputArgs } from "./getStorageHitachiArray";
export const getStorageHitachiArray: typeof import("./getStorageHitachiArray").getStorageHitachiArray = null as any;
export const getStorageHitachiArrayOutput: typeof import("./getStorageHitachiArray").getStorageHitachiArrayOutput = null as any;
utilities.lazyLoad(exports, ["getStorageHitachiArray","getStorageHitachiArrayOutput"], () => require("./getStorageHitachiArray"));

export { GetStorageHitachiControllerArgs, GetStorageHitachiControllerResult, GetStorageHitachiControllerOutputArgs } from "./getStorageHitachiController";
export const getStorageHitachiController: typeof import("./getStorageHitachiController").getStorageHitachiController = null as any;
export const getStorageHitachiControllerOutput: typeof import("./getStorageHitachiController").getStorageHitachiControllerOutput = null as any;
utilities.lazyLoad(exports, ["getStorageHitachiController","getStorageHitachiControllerOutput"], () => require("./getStorageHitachiController"));

export { GetStorageHitachiDiskArgs, GetStorageHitachiDiskResult, GetStorageHitachiDiskOutputArgs } from "./getStorageHitachiDisk";
export const getStorageHitachiDisk: typeof import("./getStorageHitachiDisk").getStorageHitachiDisk = null as any;
export const getStorageHitachiDiskOutput: typeof import("./getStorageHitachiDisk").getStorageHitachiDiskOutput = null as any;
utilities.lazyLoad(exports, ["getStorageHitachiDisk","getStorageHitachiDiskOutput"], () => require("./getStorageHitachiDisk"));

export { GetStorageHitachiExternalParityGroupArgs, GetStorageHitachiExternalParityGroupResult, GetStorageHitachiExternalParityGroupOutputArgs } from "./getStorageHitachiExternalParityGroup";
export const getStorageHitachiExternalParityGroup: typeof import("./getStorageHitachiExternalParityGroup").getStorageHitachiExternalParityGroup = null as any;
export const getStorageHitachiExternalParityGroupOutput: typeof import("./getStorageHitachiExternalParityGroup").getStorageHitachiExternalParityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getStorageHitachiExternalParityGroup","getStorageHitachiExternalParityGroupOutput"], () => require("./getStorageHitachiExternalParityGroup"));

export { GetStorageHitachiExternalPathGroupArgs, GetStorageHitachiExternalPathGroupResult, GetStorageHitachiExternalPathGroupOutputArgs } from "./getStorageHitachiExternalPathGroup";
export const getStorageHitachiExternalPathGroup: typeof import("./getStorageHitachiExternalPathGroup").getStorageHitachiExternalPathGroup = null as any;
export const getStorageHitachiExternalPathGroupOutput: typeof import("./getStorageHitachiExternalPathGroup").getStorageHitachiExternalPathGroupOutput = null as any;
utilities.lazyLoad(exports, ["getStorageHitachiExternalPathGroup","getStorageHitachiExternalPathGroupOutput"], () => require("./getStorageHitachiExternalPathGroup"));

export { GetStorageHitachiExternalStorageLunArgs, GetStorageHitachiExternalStorageLunResult, GetStorageHitachiExternalStorageLunOutputArgs } from "./getStorageHitachiExternalStorageLun";
export const getStorageHitachiExternalStorageLun: typeof import("./getStorageHitachiExternalStorageLun").getStorageHitachiExternalStorageLun = null as any;
export const getStorageHitachiExternalStorageLunOutput: typeof import("./getStorageHitachiExternalStorageLun").getStorageHitachiExternalStorageLunOutput = null as any;
utilities.lazyLoad(exports, ["getStorageHitachiExternalStorageLun","getStorageHitachiExternalStorageLunOutput"], () => require("./getStorageHitachiExternalStorageLun"));

export { GetStorageHitachiExternalStoragePortArgs, GetStorageHitachiExternalStoragePortResult, GetStorageHitachiExternalStoragePortOutputArgs } from "./getStorageHitachiExternalStoragePort";
export const getStorageHitachiExternalStoragePort: typeof import("./getStorageHitachiExternalStoragePort").getStorageHitachiExternalStoragePort = null as any;
export const getStorageHitachiExternalStoragePortOutput: typeof import("./getStorageHitachiExternalStoragePort").getStorageHitachiExternalStoragePortOutput = null as any;
utilities.lazyLoad(exports, ["getStorageHitachiExternalStoragePort","getStorageHitachiExternalStoragePortOutput"], () => require("./getStorageHitachiExternalStoragePort"));

export { GetStorageHitachiHostArgs, GetStorageHitachiHostResult, GetStorageHitachiHostOutputArgs } from "./getStorageHitachiHost";
export const getStorageHitachiHost: typeof import("./getStorageHitachiHost").getStorageHitachiHost = null as any;
export const getStorageHitachiHostOutput: typeof import("./getStorageHitachiHost").getStorageHitachiHostOutput = null as any;
utilities.lazyLoad(exports, ["getStorageHitachiHost","getStorageHitachiHostOutput"], () => require("./getStorageHitachiHost"));

export { GetStorageHitachiHostLunArgs, GetStorageHitachiHostLunResult, GetStorageHitachiHostLunOutputArgs } from "./getStorageHitachiHostLun";
export const getStorageHitachiHostLun: typeof import("./getStorageHitachiHostLun").getStorageHitachiHostLun = null as any;
export const getStorageHitachiHostLunOutput: typeof import("./getStorageHitachiHostLun").getStorageHitachiHostLunOutput = null as any;
utilities.lazyLoad(exports, ["getStorageHitachiHostLun","getStorageHitachiHostLunOutput"], () => require("./getStorageHitachiHostLun"));

export { GetStorageHitachiParityGroupArgs, GetStorageHitachiParityGroupResult, GetStorageHitachiParityGroupOutputArgs } from "./getStorageHitachiParityGroup";
export const getStorageHitachiParityGroup: typeof import("./getStorageHitachiParityGroup").getStorageHitachiParityGroup = null as any;
export const getStorageHitachiParityGroupOutput: typeof import("./getStorageHitachiParityGroup").getStorageHitachiParityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getStorageHitachiParityGroup","getStorageHitachiParityGroupOutput"], () => require("./getStorageHitachiParityGroup"));

export { GetStorageHitachiPoolArgs, GetStorageHitachiPoolResult, GetStorageHitachiPoolOutputArgs } from "./getStorageHitachiPool";
export const getStorageHitachiPool: typeof import("./getStorageHitachiPool").getStorageHitachiPool = null as any;
export const getStorageHitachiPoolOutput: typeof import("./getStorageHitachiPool").getStorageHitachiPoolOutput = null as any;
utilities.lazyLoad(exports, ["getStorageHitachiPool","getStorageHitachiPoolOutput"], () => require("./getStorageHitachiPool"));

export { GetStorageHitachiPortArgs, GetStorageHitachiPortResult, GetStorageHitachiPortOutputArgs } from "./getStorageHitachiPort";
export const getStorageHitachiPort: typeof import("./getStorageHitachiPort").getStorageHitachiPort = null as any;
export const getStorageHitachiPortOutput: typeof import("./getStorageHitachiPort").getStorageHitachiPortOutput = null as any;
utilities.lazyLoad(exports, ["getStorageHitachiPort","getStorageHitachiPortOutput"], () => require("./getStorageHitachiPort"));

export { GetStorageHitachiRemoteCopyPairGadArgs, GetStorageHitachiRemoteCopyPairGadResult, GetStorageHitachiRemoteCopyPairGadOutputArgs } from "./getStorageHitachiRemoteCopyPairGad";
export const getStorageHitachiRemoteCopyPairGad: typeof import("./getStorageHitachiRemoteCopyPairGad").getStorageHitachiRemoteCopyPairGad = null as any;
export const getStorageHitachiRemoteCopyPairGadOutput: typeof import("./getStorageHitachiRemoteCopyPairGad").getStorageHitachiRemoteCopyPairGadOutput = null as any;
utilities.lazyLoad(exports, ["getStorageHitachiRemoteCopyPairGad","getStorageHitachiRemoteCopyPairGadOutput"], () => require("./getStorageHitachiRemoteCopyPairGad"));

export { GetStorageHitachiRemoteCopyPairTcArgs, GetStorageHitachiRemoteCopyPairTcResult, GetStorageHitachiRemoteCopyPairTcOutputArgs } from "./getStorageHitachiRemoteCopyPairTc";
export const getStorageHitachiRemoteCopyPairTc: typeof import("./getStorageHitachiRemoteCopyPairTc").getStorageHitachiRemoteCopyPairTc = null as any;
export const getStorageHitachiRemoteCopyPairTcOutput: typeof import("./getStorageHitachiRemoteCopyPairTc").getStorageHitachiRemoteCopyPairTcOutput = null as any;
utilities.lazyLoad(exports, ["getStorageHitachiRemoteCopyPairTc","getStorageHitachiRemoteCopyPairTcOutput"], () => require("./getStorageHitachiRemoteCopyPairTc"));

export { GetStorageHitachiRemoteCopyPairUrArgs, GetStorageHitachiRemoteCopyPairUrResult, GetStorageHitachiRemoteCopyPairUrOutputArgs } from "./getStorageHitachiRemoteCopyPairUr";
export const getStorageHitachiRemoteCopyPairUr: typeof import("./getStorageHitachiRemoteCopyPairUr").getStorageHitachiRemoteCopyPairUr = null as any;
export const getStorageHitachiRemoteCopyPairUrOutput: typeof import("./getStorageHitachiRemoteCopyPairUr").getStorageHitachiRemoteCopyPairUrOutput = null as any;
utilities.lazyLoad(exports, ["getStorageHitachiRemoteCopyPairUr","getStorageHitachiRemoteCopyPairUrOutput"], () => require("./getStorageHitachiRemoteCopyPairUr"));

export { GetStorageHitachiRemoteReplicationArgs, GetStorageHitachiRemoteReplicationResult, GetStorageHitachiRemoteReplicationOutputArgs } from "./getStorageHitachiRemoteReplication";
export const getStorageHitachiRemoteReplication: typeof import("./getStorageHitachiRemoteReplication").getStorageHitachiRemoteReplication = null as any;
export const getStorageHitachiRemoteReplicationOutput: typeof import("./getStorageHitachiRemoteReplication").getStorageHitachiRemoteReplicationOutput = null as any;
utilities.lazyLoad(exports, ["getStorageHitachiRemoteReplication","getStorageHitachiRemoteReplicationOutput"], () => require("./getStorageHitachiRemoteReplication"));

export { GetStorageHitachiSnapshotArgs, GetStorageHitachiSnapshotResult, GetStorageHitachiSnapshotOutputArgs } from "./getStorageHitachiSnapshot";
export const getStorageHitachiSnapshot: typeof import("./getStorageHitachiSnapshot").getStorageHitachiSnapshot = null as any;
export const getStorageHitachiSnapshotOutput: typeof import("./getStorageHitachiSnapshot").getStorageHitachiSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getStorageHitachiSnapshot","getStorageHitachiSnapshotOutput"], () => require("./getStorageHitachiSnapshot"));

export { GetStorageHitachiVolumeArgs, GetStorageHitachiVolumeResult, GetStorageHitachiVolumeOutputArgs } from "./getStorageHitachiVolume";
export const getStorageHitachiVolume: typeof import("./getStorageHitachiVolume").getStorageHitachiVolume = null as any;
export const getStorageHitachiVolumeOutput: typeof import("./getStorageHitachiVolume").getStorageHitachiVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getStorageHitachiVolume","getStorageHitachiVolumeOutput"], () => require("./getStorageHitachiVolume"));

export { GetStorageHitachiVolumeMigrationPairArgs, GetStorageHitachiVolumeMigrationPairResult, GetStorageHitachiVolumeMigrationPairOutputArgs } from "./getStorageHitachiVolumeMigrationPair";
export const getStorageHitachiVolumeMigrationPair: typeof import("./getStorageHitachiVolumeMigrationPair").getStorageHitachiVolumeMigrationPair = null as any;
export const getStorageHitachiVolumeMigrationPairOutput: typeof import("./getStorageHitachiVolumeMigrationPair").getStorageHitachiVolumeMigrationPairOutput = null as any;
utilities.lazyLoad(exports, ["getStorageHitachiVolumeMigrationPair","getStorageHitachiVolumeMigrationPairOutput"], () => require("./getStorageHitachiVolumeMigrationPair"));

export { GetStorageHyperFlexStorageContainerArgs, GetStorageHyperFlexStorageContainerResult, GetStorageHyperFlexStorageContainerOutputArgs } from "./getStorageHyperFlexStorageContainer";
export const getStorageHyperFlexStorageContainer: typeof import("./getStorageHyperFlexStorageContainer").getStorageHyperFlexStorageContainer = null as any;
export const getStorageHyperFlexStorageContainerOutput: typeof import("./getStorageHyperFlexStorageContainer").getStorageHyperFlexStorageContainerOutput = null as any;
utilities.lazyLoad(exports, ["getStorageHyperFlexStorageContainer","getStorageHyperFlexStorageContainerOutput"], () => require("./getStorageHyperFlexStorageContainer"));

export { GetStorageHyperFlexVolumeArgs, GetStorageHyperFlexVolumeResult, GetStorageHyperFlexVolumeOutputArgs } from "./getStorageHyperFlexVolume";
export const getStorageHyperFlexVolume: typeof import("./getStorageHyperFlexVolume").getStorageHyperFlexVolume = null as any;
export const getStorageHyperFlexVolumeOutput: typeof import("./getStorageHyperFlexVolume").getStorageHyperFlexVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getStorageHyperFlexVolume","getStorageHyperFlexVolumeOutput"], () => require("./getStorageHyperFlexVolume"));

export { GetStorageItemArgs, GetStorageItemResult, GetStorageItemOutputArgs } from "./getStorageItem";
export const getStorageItem: typeof import("./getStorageItem").getStorageItem = null as any;
export const getStorageItemOutput: typeof import("./getStorageItem").getStorageItemOutput = null as any;
utilities.lazyLoad(exports, ["getStorageItem","getStorageItemOutput"], () => require("./getStorageItem"));

export { GetStorageNetAppAggregateArgs, GetStorageNetAppAggregateResult, GetStorageNetAppAggregateOutputArgs } from "./getStorageNetAppAggregate";
export const getStorageNetAppAggregate: typeof import("./getStorageNetAppAggregate").getStorageNetAppAggregate = null as any;
export const getStorageNetAppAggregateOutput: typeof import("./getStorageNetAppAggregate").getStorageNetAppAggregateOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppAggregate","getStorageNetAppAggregateOutput"], () => require("./getStorageNetAppAggregate"));

export { GetStorageNetAppAggregateEventArgs, GetStorageNetAppAggregateEventResult, GetStorageNetAppAggregateEventOutputArgs } from "./getStorageNetAppAggregateEvent";
export const getStorageNetAppAggregateEvent: typeof import("./getStorageNetAppAggregateEvent").getStorageNetAppAggregateEvent = null as any;
export const getStorageNetAppAggregateEventOutput: typeof import("./getStorageNetAppAggregateEvent").getStorageNetAppAggregateEventOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppAggregateEvent","getStorageNetAppAggregateEventOutput"], () => require("./getStorageNetAppAggregateEvent"));

export { GetStorageNetAppBaseDiskArgs, GetStorageNetAppBaseDiskResult, GetStorageNetAppBaseDiskOutputArgs } from "./getStorageNetAppBaseDisk";
export const getStorageNetAppBaseDisk: typeof import("./getStorageNetAppBaseDisk").getStorageNetAppBaseDisk = null as any;
export const getStorageNetAppBaseDiskOutput: typeof import("./getStorageNetAppBaseDisk").getStorageNetAppBaseDiskOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppBaseDisk","getStorageNetAppBaseDiskOutput"], () => require("./getStorageNetAppBaseDisk"));

export { GetStorageNetAppCifsServiceArgs, GetStorageNetAppCifsServiceResult, GetStorageNetAppCifsServiceOutputArgs } from "./getStorageNetAppCifsService";
export const getStorageNetAppCifsService: typeof import("./getStorageNetAppCifsService").getStorageNetAppCifsService = null as any;
export const getStorageNetAppCifsServiceOutput: typeof import("./getStorageNetAppCifsService").getStorageNetAppCifsServiceOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppCifsService","getStorageNetAppCifsServiceOutput"], () => require("./getStorageNetAppCifsService"));

export { GetStorageNetAppCifsShareArgs, GetStorageNetAppCifsShareResult, GetStorageNetAppCifsShareOutputArgs } from "./getStorageNetAppCifsShare";
export const getStorageNetAppCifsShare: typeof import("./getStorageNetAppCifsShare").getStorageNetAppCifsShare = null as any;
export const getStorageNetAppCifsShareOutput: typeof import("./getStorageNetAppCifsShare").getStorageNetAppCifsShareOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppCifsShare","getStorageNetAppCifsShareOutput"], () => require("./getStorageNetAppCifsShare"));

export { GetStorageNetAppCloudTargetArgs, GetStorageNetAppCloudTargetResult, GetStorageNetAppCloudTargetOutputArgs } from "./getStorageNetAppCloudTarget";
export const getStorageNetAppCloudTarget: typeof import("./getStorageNetAppCloudTarget").getStorageNetAppCloudTarget = null as any;
export const getStorageNetAppCloudTargetOutput: typeof import("./getStorageNetAppCloudTarget").getStorageNetAppCloudTargetOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppCloudTarget","getStorageNetAppCloudTargetOutput"], () => require("./getStorageNetAppCloudTarget"));

export { GetStorageNetAppClusterArgs, GetStorageNetAppClusterResult, GetStorageNetAppClusterOutputArgs } from "./getStorageNetAppCluster";
export const getStorageNetAppCluster: typeof import("./getStorageNetAppCluster").getStorageNetAppCluster = null as any;
export const getStorageNetAppClusterOutput: typeof import("./getStorageNetAppCluster").getStorageNetAppClusterOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppCluster","getStorageNetAppClusterOutput"], () => require("./getStorageNetAppCluster"));

export { GetStorageNetAppClusterEventArgs, GetStorageNetAppClusterEventResult, GetStorageNetAppClusterEventOutputArgs } from "./getStorageNetAppClusterEvent";
export const getStorageNetAppClusterEvent: typeof import("./getStorageNetAppClusterEvent").getStorageNetAppClusterEvent = null as any;
export const getStorageNetAppClusterEventOutput: typeof import("./getStorageNetAppClusterEvent").getStorageNetAppClusterEventOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppClusterEvent","getStorageNetAppClusterEventOutput"], () => require("./getStorageNetAppClusterEvent"));

export { GetStorageNetAppClusterSnapMirrorPolicyArgs, GetStorageNetAppClusterSnapMirrorPolicyResult, GetStorageNetAppClusterSnapMirrorPolicyOutputArgs } from "./getStorageNetAppClusterSnapMirrorPolicy";
export const getStorageNetAppClusterSnapMirrorPolicy: typeof import("./getStorageNetAppClusterSnapMirrorPolicy").getStorageNetAppClusterSnapMirrorPolicy = null as any;
export const getStorageNetAppClusterSnapMirrorPolicyOutput: typeof import("./getStorageNetAppClusterSnapMirrorPolicy").getStorageNetAppClusterSnapMirrorPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppClusterSnapMirrorPolicy","getStorageNetAppClusterSnapMirrorPolicyOutput"], () => require("./getStorageNetAppClusterSnapMirrorPolicy"));

export { GetStorageNetAppClusterSnapshotPolicyArgs, GetStorageNetAppClusterSnapshotPolicyResult, GetStorageNetAppClusterSnapshotPolicyOutputArgs } from "./getStorageNetAppClusterSnapshotPolicy";
export const getStorageNetAppClusterSnapshotPolicy: typeof import("./getStorageNetAppClusterSnapshotPolicy").getStorageNetAppClusterSnapshotPolicy = null as any;
export const getStorageNetAppClusterSnapshotPolicyOutput: typeof import("./getStorageNetAppClusterSnapshotPolicy").getStorageNetAppClusterSnapshotPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppClusterSnapshotPolicy","getStorageNetAppClusterSnapshotPolicyOutput"], () => require("./getStorageNetAppClusterSnapshotPolicy"));

export { GetStorageNetAppDataIpInterfaceArgs, GetStorageNetAppDataIpInterfaceResult, GetStorageNetAppDataIpInterfaceOutputArgs } from "./getStorageNetAppDataIpInterface";
export const getStorageNetAppDataIpInterface: typeof import("./getStorageNetAppDataIpInterface").getStorageNetAppDataIpInterface = null as any;
export const getStorageNetAppDataIpInterfaceOutput: typeof import("./getStorageNetAppDataIpInterface").getStorageNetAppDataIpInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppDataIpInterface","getStorageNetAppDataIpInterfaceOutput"], () => require("./getStorageNetAppDataIpInterface"));

export { GetStorageNetAppDataIpInterfaceEventArgs, GetStorageNetAppDataIpInterfaceEventResult, GetStorageNetAppDataIpInterfaceEventOutputArgs } from "./getStorageNetAppDataIpInterfaceEvent";
export const getStorageNetAppDataIpInterfaceEvent: typeof import("./getStorageNetAppDataIpInterfaceEvent").getStorageNetAppDataIpInterfaceEvent = null as any;
export const getStorageNetAppDataIpInterfaceEventOutput: typeof import("./getStorageNetAppDataIpInterfaceEvent").getStorageNetAppDataIpInterfaceEventOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppDataIpInterfaceEvent","getStorageNetAppDataIpInterfaceEventOutput"], () => require("./getStorageNetAppDataIpInterfaceEvent"));

export { GetStorageNetAppDiskEventArgs, GetStorageNetAppDiskEventResult, GetStorageNetAppDiskEventOutputArgs } from "./getStorageNetAppDiskEvent";
export const getStorageNetAppDiskEvent: typeof import("./getStorageNetAppDiskEvent").getStorageNetAppDiskEvent = null as any;
export const getStorageNetAppDiskEventOutput: typeof import("./getStorageNetAppDiskEvent").getStorageNetAppDiskEventOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppDiskEvent","getStorageNetAppDiskEventOutput"], () => require("./getStorageNetAppDiskEvent"));

export { GetStorageNetAppEthernetPortArgs, GetStorageNetAppEthernetPortResult, GetStorageNetAppEthernetPortOutputArgs } from "./getStorageNetAppEthernetPort";
export const getStorageNetAppEthernetPort: typeof import("./getStorageNetAppEthernetPort").getStorageNetAppEthernetPort = null as any;
export const getStorageNetAppEthernetPortOutput: typeof import("./getStorageNetAppEthernetPort").getStorageNetAppEthernetPortOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppEthernetPort","getStorageNetAppEthernetPortOutput"], () => require("./getStorageNetAppEthernetPort"));

export { GetStorageNetAppEthernetPortEventArgs, GetStorageNetAppEthernetPortEventResult, GetStorageNetAppEthernetPortEventOutputArgs } from "./getStorageNetAppEthernetPortEvent";
export const getStorageNetAppEthernetPortEvent: typeof import("./getStorageNetAppEthernetPortEvent").getStorageNetAppEthernetPortEvent = null as any;
export const getStorageNetAppEthernetPortEventOutput: typeof import("./getStorageNetAppEthernetPortEvent").getStorageNetAppEthernetPortEventOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppEthernetPortEvent","getStorageNetAppEthernetPortEventOutput"], () => require("./getStorageNetAppEthernetPortEvent"));

export { GetStorageNetAppExportPolicyArgs, GetStorageNetAppExportPolicyResult, GetStorageNetAppExportPolicyOutputArgs } from "./getStorageNetAppExportPolicy";
export const getStorageNetAppExportPolicy: typeof import("./getStorageNetAppExportPolicy").getStorageNetAppExportPolicy = null as any;
export const getStorageNetAppExportPolicyOutput: typeof import("./getStorageNetAppExportPolicy").getStorageNetAppExportPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppExportPolicy","getStorageNetAppExportPolicyOutput"], () => require("./getStorageNetAppExportPolicy"));

export { GetStorageNetAppFcInterfaceArgs, GetStorageNetAppFcInterfaceResult, GetStorageNetAppFcInterfaceOutputArgs } from "./getStorageNetAppFcInterface";
export const getStorageNetAppFcInterface: typeof import("./getStorageNetAppFcInterface").getStorageNetAppFcInterface = null as any;
export const getStorageNetAppFcInterfaceOutput: typeof import("./getStorageNetAppFcInterface").getStorageNetAppFcInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppFcInterface","getStorageNetAppFcInterfaceOutput"], () => require("./getStorageNetAppFcInterface"));

export { GetStorageNetAppFcInterfaceEventArgs, GetStorageNetAppFcInterfaceEventResult, GetStorageNetAppFcInterfaceEventOutputArgs } from "./getStorageNetAppFcInterfaceEvent";
export const getStorageNetAppFcInterfaceEvent: typeof import("./getStorageNetAppFcInterfaceEvent").getStorageNetAppFcInterfaceEvent = null as any;
export const getStorageNetAppFcInterfaceEventOutput: typeof import("./getStorageNetAppFcInterfaceEvent").getStorageNetAppFcInterfaceEventOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppFcInterfaceEvent","getStorageNetAppFcInterfaceEventOutput"], () => require("./getStorageNetAppFcInterfaceEvent"));

export { GetStorageNetAppFcPortArgs, GetStorageNetAppFcPortResult, GetStorageNetAppFcPortOutputArgs } from "./getStorageNetAppFcPort";
export const getStorageNetAppFcPort: typeof import("./getStorageNetAppFcPort").getStorageNetAppFcPort = null as any;
export const getStorageNetAppFcPortOutput: typeof import("./getStorageNetAppFcPort").getStorageNetAppFcPortOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppFcPort","getStorageNetAppFcPortOutput"], () => require("./getStorageNetAppFcPort"));

export { GetStorageNetAppFcPortEventArgs, GetStorageNetAppFcPortEventResult, GetStorageNetAppFcPortEventOutputArgs } from "./getStorageNetAppFcPortEvent";
export const getStorageNetAppFcPortEvent: typeof import("./getStorageNetAppFcPortEvent").getStorageNetAppFcPortEvent = null as any;
export const getStorageNetAppFcPortEventOutput: typeof import("./getStorageNetAppFcPortEvent").getStorageNetAppFcPortEventOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppFcPortEvent","getStorageNetAppFcPortEventOutput"], () => require("./getStorageNetAppFcPortEvent"));

export { GetStorageNetAppInitiatorGroupArgs, GetStorageNetAppInitiatorGroupResult, GetStorageNetAppInitiatorGroupOutputArgs } from "./getStorageNetAppInitiatorGroup";
export const getStorageNetAppInitiatorGroup: typeof import("./getStorageNetAppInitiatorGroup").getStorageNetAppInitiatorGroup = null as any;
export const getStorageNetAppInitiatorGroupOutput: typeof import("./getStorageNetAppInitiatorGroup").getStorageNetAppInitiatorGroupOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppInitiatorGroup","getStorageNetAppInitiatorGroupOutput"], () => require("./getStorageNetAppInitiatorGroup"));

export { GetStorageNetAppIpInterfaceArgs, GetStorageNetAppIpInterfaceResult, GetStorageNetAppIpInterfaceOutputArgs } from "./getStorageNetAppIpInterface";
export const getStorageNetAppIpInterface: typeof import("./getStorageNetAppIpInterface").getStorageNetAppIpInterface = null as any;
export const getStorageNetAppIpInterfaceOutput: typeof import("./getStorageNetAppIpInterface").getStorageNetAppIpInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppIpInterface","getStorageNetAppIpInterfaceOutput"], () => require("./getStorageNetAppIpInterface"));

export { GetStorageNetAppIpInterfaceEventArgs, GetStorageNetAppIpInterfaceEventResult, GetStorageNetAppIpInterfaceEventOutputArgs } from "./getStorageNetAppIpInterfaceEvent";
export const getStorageNetAppIpInterfaceEvent: typeof import("./getStorageNetAppIpInterfaceEvent").getStorageNetAppIpInterfaceEvent = null as any;
export const getStorageNetAppIpInterfaceEventOutput: typeof import("./getStorageNetAppIpInterfaceEvent").getStorageNetAppIpInterfaceEventOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppIpInterfaceEvent","getStorageNetAppIpInterfaceEventOutput"], () => require("./getStorageNetAppIpInterfaceEvent"));

export { GetStorageNetAppIscsiServiceArgs, GetStorageNetAppIscsiServiceResult, GetStorageNetAppIscsiServiceOutputArgs } from "./getStorageNetAppIscsiService";
export const getStorageNetAppIscsiService: typeof import("./getStorageNetAppIscsiService").getStorageNetAppIscsiService = null as any;
export const getStorageNetAppIscsiServiceOutput: typeof import("./getStorageNetAppIscsiService").getStorageNetAppIscsiServiceOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppIscsiService","getStorageNetAppIscsiServiceOutput"], () => require("./getStorageNetAppIscsiService"));

export { GetStorageNetAppLicenseArgs, GetStorageNetAppLicenseResult, GetStorageNetAppLicenseOutputArgs } from "./getStorageNetAppLicense";
export const getStorageNetAppLicense: typeof import("./getStorageNetAppLicense").getStorageNetAppLicense = null as any;
export const getStorageNetAppLicenseOutput: typeof import("./getStorageNetAppLicense").getStorageNetAppLicenseOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppLicense","getStorageNetAppLicenseOutput"], () => require("./getStorageNetAppLicense"));

export { GetStorageNetAppLunArgs, GetStorageNetAppLunResult, GetStorageNetAppLunOutputArgs } from "./getStorageNetAppLun";
export const getStorageNetAppLun: typeof import("./getStorageNetAppLun").getStorageNetAppLun = null as any;
export const getStorageNetAppLunOutput: typeof import("./getStorageNetAppLun").getStorageNetAppLunOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppLun","getStorageNetAppLunOutput"], () => require("./getStorageNetAppLun"));

export { GetStorageNetAppLunEventArgs, GetStorageNetAppLunEventResult, GetStorageNetAppLunEventOutputArgs } from "./getStorageNetAppLunEvent";
export const getStorageNetAppLunEvent: typeof import("./getStorageNetAppLunEvent").getStorageNetAppLunEvent = null as any;
export const getStorageNetAppLunEventOutput: typeof import("./getStorageNetAppLunEvent").getStorageNetAppLunEventOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppLunEvent","getStorageNetAppLunEventOutput"], () => require("./getStorageNetAppLunEvent"));

export { GetStorageNetAppLunMapArgs, GetStorageNetAppLunMapResult, GetStorageNetAppLunMapOutputArgs } from "./getStorageNetAppLunMap";
export const getStorageNetAppLunMap: typeof import("./getStorageNetAppLunMap").getStorageNetAppLunMap = null as any;
export const getStorageNetAppLunMapOutput: typeof import("./getStorageNetAppLunMap").getStorageNetAppLunMapOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppLunMap","getStorageNetAppLunMapOutput"], () => require("./getStorageNetAppLunMap"));

export { GetStorageNetAppNamespaceArgs, GetStorageNetAppNamespaceResult, GetStorageNetAppNamespaceOutputArgs } from "./getStorageNetAppNamespace";
export const getStorageNetAppNamespace: typeof import("./getStorageNetAppNamespace").getStorageNetAppNamespace = null as any;
export const getStorageNetAppNamespaceOutput: typeof import("./getStorageNetAppNamespace").getStorageNetAppNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppNamespace","getStorageNetAppNamespaceOutput"], () => require("./getStorageNetAppNamespace"));

export { GetStorageNetAppNfsClientArgs, GetStorageNetAppNfsClientResult, GetStorageNetAppNfsClientOutputArgs } from "./getStorageNetAppNfsClient";
export const getStorageNetAppNfsClient: typeof import("./getStorageNetAppNfsClient").getStorageNetAppNfsClient = null as any;
export const getStorageNetAppNfsClientOutput: typeof import("./getStorageNetAppNfsClient").getStorageNetAppNfsClientOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppNfsClient","getStorageNetAppNfsClientOutput"], () => require("./getStorageNetAppNfsClient"));

export { GetStorageNetAppNfsServiceArgs, GetStorageNetAppNfsServiceResult, GetStorageNetAppNfsServiceOutputArgs } from "./getStorageNetAppNfsService";
export const getStorageNetAppNfsService: typeof import("./getStorageNetAppNfsService").getStorageNetAppNfsService = null as any;
export const getStorageNetAppNfsServiceOutput: typeof import("./getStorageNetAppNfsService").getStorageNetAppNfsServiceOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppNfsService","getStorageNetAppNfsServiceOutput"], () => require("./getStorageNetAppNfsService"));

export { GetStorageNetAppNodeArgs, GetStorageNetAppNodeResult, GetStorageNetAppNodeOutputArgs } from "./getStorageNetAppNode";
export const getStorageNetAppNode: typeof import("./getStorageNetAppNode").getStorageNetAppNode = null as any;
export const getStorageNetAppNodeOutput: typeof import("./getStorageNetAppNode").getStorageNetAppNodeOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppNode","getStorageNetAppNodeOutput"], () => require("./getStorageNetAppNode"));

export { GetStorageNetAppNodeCdpNeighborArgs, GetStorageNetAppNodeCdpNeighborResult, GetStorageNetAppNodeCdpNeighborOutputArgs } from "./getStorageNetAppNodeCdpNeighbor";
export const getStorageNetAppNodeCdpNeighbor: typeof import("./getStorageNetAppNodeCdpNeighbor").getStorageNetAppNodeCdpNeighbor = null as any;
export const getStorageNetAppNodeCdpNeighborOutput: typeof import("./getStorageNetAppNodeCdpNeighbor").getStorageNetAppNodeCdpNeighborOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppNodeCdpNeighbor","getStorageNetAppNodeCdpNeighborOutput"], () => require("./getStorageNetAppNodeCdpNeighbor"));

export { GetStorageNetAppNodeEventArgs, GetStorageNetAppNodeEventResult, GetStorageNetAppNodeEventOutputArgs } from "./getStorageNetAppNodeEvent";
export const getStorageNetAppNodeEvent: typeof import("./getStorageNetAppNodeEvent").getStorageNetAppNodeEvent = null as any;
export const getStorageNetAppNodeEventOutput: typeof import("./getStorageNetAppNodeEvent").getStorageNetAppNodeEventOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppNodeEvent","getStorageNetAppNodeEventOutput"], () => require("./getStorageNetAppNodeEvent"));

export { GetStorageNetAppNonDataIpInterfaceArgs, GetStorageNetAppNonDataIpInterfaceResult, GetStorageNetAppNonDataIpInterfaceOutputArgs } from "./getStorageNetAppNonDataIpInterface";
export const getStorageNetAppNonDataIpInterface: typeof import("./getStorageNetAppNonDataIpInterface").getStorageNetAppNonDataIpInterface = null as any;
export const getStorageNetAppNonDataIpInterfaceOutput: typeof import("./getStorageNetAppNonDataIpInterface").getStorageNetAppNonDataIpInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppNonDataIpInterface","getStorageNetAppNonDataIpInterfaceOutput"], () => require("./getStorageNetAppNonDataIpInterface"));

export { GetStorageNetAppNonDataIpInterfaceEventArgs, GetStorageNetAppNonDataIpInterfaceEventResult, GetStorageNetAppNonDataIpInterfaceEventOutputArgs } from "./getStorageNetAppNonDataIpInterfaceEvent";
export const getStorageNetAppNonDataIpInterfaceEvent: typeof import("./getStorageNetAppNonDataIpInterfaceEvent").getStorageNetAppNonDataIpInterfaceEvent = null as any;
export const getStorageNetAppNonDataIpInterfaceEventOutput: typeof import("./getStorageNetAppNonDataIpInterfaceEvent").getStorageNetAppNonDataIpInterfaceEventOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppNonDataIpInterfaceEvent","getStorageNetAppNonDataIpInterfaceEventOutput"], () => require("./getStorageNetAppNonDataIpInterfaceEvent"));

export { GetStorageNetAppNtpServerArgs, GetStorageNetAppNtpServerResult, GetStorageNetAppNtpServerOutputArgs } from "./getStorageNetAppNtpServer";
export const getStorageNetAppNtpServer: typeof import("./getStorageNetAppNtpServer").getStorageNetAppNtpServer = null as any;
export const getStorageNetAppNtpServerOutput: typeof import("./getStorageNetAppNtpServer").getStorageNetAppNtpServerOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppNtpServer","getStorageNetAppNtpServerOutput"], () => require("./getStorageNetAppNtpServer"));

export { GetStorageNetAppQtreeArgs, GetStorageNetAppQtreeResult, GetStorageNetAppQtreeOutputArgs } from "./getStorageNetAppQtree";
export const getStorageNetAppQtree: typeof import("./getStorageNetAppQtree").getStorageNetAppQtree = null as any;
export const getStorageNetAppQtreeOutput: typeof import("./getStorageNetAppQtree").getStorageNetAppQtreeOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppQtree","getStorageNetAppQtreeOutput"], () => require("./getStorageNetAppQtree"));

export { GetStorageNetAppScheduleArgs, GetStorageNetAppScheduleResult, GetStorageNetAppScheduleOutputArgs } from "./getStorageNetAppSchedule";
export const getStorageNetAppSchedule: typeof import("./getStorageNetAppSchedule").getStorageNetAppSchedule = null as any;
export const getStorageNetAppScheduleOutput: typeof import("./getStorageNetAppSchedule").getStorageNetAppScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppSchedule","getStorageNetAppScheduleOutput"], () => require("./getStorageNetAppSchedule"));

export { GetStorageNetAppSensorArgs, GetStorageNetAppSensorResult, GetStorageNetAppSensorOutputArgs } from "./getStorageNetAppSensor";
export const getStorageNetAppSensor: typeof import("./getStorageNetAppSensor").getStorageNetAppSensor = null as any;
export const getStorageNetAppSensorOutput: typeof import("./getStorageNetAppSensor").getStorageNetAppSensorOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppSensor","getStorageNetAppSensorOutput"], () => require("./getStorageNetAppSensor"));

export { GetStorageNetAppSnapMirrorRelationshipArgs, GetStorageNetAppSnapMirrorRelationshipResult, GetStorageNetAppSnapMirrorRelationshipOutputArgs } from "./getStorageNetAppSnapMirrorRelationship";
export const getStorageNetAppSnapMirrorRelationship: typeof import("./getStorageNetAppSnapMirrorRelationship").getStorageNetAppSnapMirrorRelationship = null as any;
export const getStorageNetAppSnapMirrorRelationshipOutput: typeof import("./getStorageNetAppSnapMirrorRelationship").getStorageNetAppSnapMirrorRelationshipOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppSnapMirrorRelationship","getStorageNetAppSnapMirrorRelationshipOutput"], () => require("./getStorageNetAppSnapMirrorRelationship"));

export { GetStorageNetAppStorageVmArgs, GetStorageNetAppStorageVmResult, GetStorageNetAppStorageVmOutputArgs } from "./getStorageNetAppStorageVm";
export const getStorageNetAppStorageVm: typeof import("./getStorageNetAppStorageVm").getStorageNetAppStorageVm = null as any;
export const getStorageNetAppStorageVmOutput: typeof import("./getStorageNetAppStorageVm").getStorageNetAppStorageVmOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppStorageVm","getStorageNetAppStorageVmOutput"], () => require("./getStorageNetAppStorageVm"));

export { GetStorageNetAppSvmEventArgs, GetStorageNetAppSvmEventResult, GetStorageNetAppSvmEventOutputArgs } from "./getStorageNetAppSvmEvent";
export const getStorageNetAppSvmEvent: typeof import("./getStorageNetAppSvmEvent").getStorageNetAppSvmEvent = null as any;
export const getStorageNetAppSvmEventOutput: typeof import("./getStorageNetAppSvmEvent").getStorageNetAppSvmEventOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppSvmEvent","getStorageNetAppSvmEventOutput"], () => require("./getStorageNetAppSvmEvent"));

export { GetStorageNetAppSvmSnapMirrorPolicyArgs, GetStorageNetAppSvmSnapMirrorPolicyResult, GetStorageNetAppSvmSnapMirrorPolicyOutputArgs } from "./getStorageNetAppSvmSnapMirrorPolicy";
export const getStorageNetAppSvmSnapMirrorPolicy: typeof import("./getStorageNetAppSvmSnapMirrorPolicy").getStorageNetAppSvmSnapMirrorPolicy = null as any;
export const getStorageNetAppSvmSnapMirrorPolicyOutput: typeof import("./getStorageNetAppSvmSnapMirrorPolicy").getStorageNetAppSvmSnapMirrorPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppSvmSnapMirrorPolicy","getStorageNetAppSvmSnapMirrorPolicyOutput"], () => require("./getStorageNetAppSvmSnapMirrorPolicy"));

export { GetStorageNetAppSvmSnapshotPolicyArgs, GetStorageNetAppSvmSnapshotPolicyResult, GetStorageNetAppSvmSnapshotPolicyOutputArgs } from "./getStorageNetAppSvmSnapshotPolicy";
export const getStorageNetAppSvmSnapshotPolicy: typeof import("./getStorageNetAppSvmSnapshotPolicy").getStorageNetAppSvmSnapshotPolicy = null as any;
export const getStorageNetAppSvmSnapshotPolicyOutput: typeof import("./getStorageNetAppSvmSnapshotPolicy").getStorageNetAppSvmSnapshotPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppSvmSnapshotPolicy","getStorageNetAppSvmSnapshotPolicyOutput"], () => require("./getStorageNetAppSvmSnapshotPolicy"));

export { GetStorageNetAppVolumeArgs, GetStorageNetAppVolumeResult, GetStorageNetAppVolumeOutputArgs } from "./getStorageNetAppVolume";
export const getStorageNetAppVolume: typeof import("./getStorageNetAppVolume").getStorageNetAppVolume = null as any;
export const getStorageNetAppVolumeOutput: typeof import("./getStorageNetAppVolume").getStorageNetAppVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppVolume","getStorageNetAppVolumeOutput"], () => require("./getStorageNetAppVolume"));

export { GetStorageNetAppVolumeEventArgs, GetStorageNetAppVolumeEventResult, GetStorageNetAppVolumeEventOutputArgs } from "./getStorageNetAppVolumeEvent";
export const getStorageNetAppVolumeEvent: typeof import("./getStorageNetAppVolumeEvent").getStorageNetAppVolumeEvent = null as any;
export const getStorageNetAppVolumeEventOutput: typeof import("./getStorageNetAppVolumeEvent").getStorageNetAppVolumeEventOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppVolumeEvent","getStorageNetAppVolumeEventOutput"], () => require("./getStorageNetAppVolumeEvent"));

export { GetStorageNetAppVolumeSnapshotArgs, GetStorageNetAppVolumeSnapshotResult, GetStorageNetAppVolumeSnapshotOutputArgs } from "./getStorageNetAppVolumeSnapshot";
export const getStorageNetAppVolumeSnapshot: typeof import("./getStorageNetAppVolumeSnapshot").getStorageNetAppVolumeSnapshot = null as any;
export const getStorageNetAppVolumeSnapshotOutput: typeof import("./getStorageNetAppVolumeSnapshot").getStorageNetAppVolumeSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetAppVolumeSnapshot","getStorageNetAppVolumeSnapshotOutput"], () => require("./getStorageNetAppVolumeSnapshot"));

export { GetStorageNvmeRaidConfigurationArgs, GetStorageNvmeRaidConfigurationResult, GetStorageNvmeRaidConfigurationOutputArgs } from "./getStorageNvmeRaidConfiguration";
export const getStorageNvmeRaidConfiguration: typeof import("./getStorageNvmeRaidConfiguration").getStorageNvmeRaidConfiguration = null as any;
export const getStorageNvmeRaidConfigurationOutput: typeof import("./getStorageNvmeRaidConfiguration").getStorageNvmeRaidConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNvmeRaidConfiguration","getStorageNvmeRaidConfigurationOutput"], () => require("./getStorageNvmeRaidConfiguration"));

export { GetStoragePhysicalDiskArgs, GetStoragePhysicalDiskResult, GetStoragePhysicalDiskOutputArgs } from "./getStoragePhysicalDisk";
export const getStoragePhysicalDisk: typeof import("./getStoragePhysicalDisk").getStoragePhysicalDisk = null as any;
export const getStoragePhysicalDiskOutput: typeof import("./getStoragePhysicalDisk").getStoragePhysicalDiskOutput = null as any;
utilities.lazyLoad(exports, ["getStoragePhysicalDisk","getStoragePhysicalDiskOutput"], () => require("./getStoragePhysicalDisk"));

export { GetStoragePhysicalDiskExtensionArgs, GetStoragePhysicalDiskExtensionResult, GetStoragePhysicalDiskExtensionOutputArgs } from "./getStoragePhysicalDiskExtension";
export const getStoragePhysicalDiskExtension: typeof import("./getStoragePhysicalDiskExtension").getStoragePhysicalDiskExtension = null as any;
export const getStoragePhysicalDiskExtensionOutput: typeof import("./getStoragePhysicalDiskExtension").getStoragePhysicalDiskExtensionOutput = null as any;
utilities.lazyLoad(exports, ["getStoragePhysicalDiskExtension","getStoragePhysicalDiskExtensionOutput"], () => require("./getStoragePhysicalDiskExtension"));

export { GetStoragePhysicalDiskUsageArgs, GetStoragePhysicalDiskUsageResult, GetStoragePhysicalDiskUsageOutputArgs } from "./getStoragePhysicalDiskUsage";
export const getStoragePhysicalDiskUsage: typeof import("./getStoragePhysicalDiskUsage").getStoragePhysicalDiskUsage = null as any;
export const getStoragePhysicalDiskUsageOutput: typeof import("./getStoragePhysicalDiskUsage").getStoragePhysicalDiskUsageOutput = null as any;
utilities.lazyLoad(exports, ["getStoragePhysicalDiskUsage","getStoragePhysicalDiskUsageOutput"], () => require("./getStoragePhysicalDiskUsage"));

export { GetStoragePureArrayArgs, GetStoragePureArrayResult, GetStoragePureArrayOutputArgs } from "./getStoragePureArray";
export const getStoragePureArray: typeof import("./getStoragePureArray").getStoragePureArray = null as any;
export const getStoragePureArrayOutput: typeof import("./getStoragePureArray").getStoragePureArrayOutput = null as any;
utilities.lazyLoad(exports, ["getStoragePureArray","getStoragePureArrayOutput"], () => require("./getStoragePureArray"));

export { GetStoragePureArrayAlertsArgs, GetStoragePureArrayAlertsResult, GetStoragePureArrayAlertsOutputArgs } from "./getStoragePureArrayAlerts";
export const getStoragePureArrayAlerts: typeof import("./getStoragePureArrayAlerts").getStoragePureArrayAlerts = null as any;
export const getStoragePureArrayAlertsOutput: typeof import("./getStoragePureArrayAlerts").getStoragePureArrayAlertsOutput = null as any;
utilities.lazyLoad(exports, ["getStoragePureArrayAlerts","getStoragePureArrayAlertsOutput"], () => require("./getStoragePureArrayAlerts"));

export { GetStoragePureControllerArgs, GetStoragePureControllerResult, GetStoragePureControllerOutputArgs } from "./getStoragePureController";
export const getStoragePureController: typeof import("./getStoragePureController").getStoragePureController = null as any;
export const getStoragePureControllerOutput: typeof import("./getStoragePureController").getStoragePureControllerOutput = null as any;
utilities.lazyLoad(exports, ["getStoragePureController","getStoragePureControllerOutput"], () => require("./getStoragePureController"));

export { GetStoragePureDiskArgs, GetStoragePureDiskResult, GetStoragePureDiskOutputArgs } from "./getStoragePureDisk";
export const getStoragePureDisk: typeof import("./getStoragePureDisk").getStoragePureDisk = null as any;
export const getStoragePureDiskOutput: typeof import("./getStoragePureDisk").getStoragePureDiskOutput = null as any;
utilities.lazyLoad(exports, ["getStoragePureDisk","getStoragePureDiskOutput"], () => require("./getStoragePureDisk"));

export { GetStoragePureHostArgs, GetStoragePureHostResult, GetStoragePureHostOutputArgs } from "./getStoragePureHost";
export const getStoragePureHost: typeof import("./getStoragePureHost").getStoragePureHost = null as any;
export const getStoragePureHostOutput: typeof import("./getStoragePureHost").getStoragePureHostOutput = null as any;
utilities.lazyLoad(exports, ["getStoragePureHost","getStoragePureHostOutput"], () => require("./getStoragePureHost"));

export { GetStoragePureHostGroupArgs, GetStoragePureHostGroupResult, GetStoragePureHostGroupOutputArgs } from "./getStoragePureHostGroup";
export const getStoragePureHostGroup: typeof import("./getStoragePureHostGroup").getStoragePureHostGroup = null as any;
export const getStoragePureHostGroupOutput: typeof import("./getStoragePureHostGroup").getStoragePureHostGroupOutput = null as any;
utilities.lazyLoad(exports, ["getStoragePureHostGroup","getStoragePureHostGroupOutput"], () => require("./getStoragePureHostGroup"));

export { GetStoragePureHostLunArgs, GetStoragePureHostLunResult, GetStoragePureHostLunOutputArgs } from "./getStoragePureHostLun";
export const getStoragePureHostLun: typeof import("./getStoragePureHostLun").getStoragePureHostLun = null as any;
export const getStoragePureHostLunOutput: typeof import("./getStoragePureHostLun").getStoragePureHostLunOutput = null as any;
utilities.lazyLoad(exports, ["getStoragePureHostLun","getStoragePureHostLunOutput"], () => require("./getStoragePureHostLun"));

export { GetStoragePurePortArgs, GetStoragePurePortResult, GetStoragePurePortOutputArgs } from "./getStoragePurePort";
export const getStoragePurePort: typeof import("./getStoragePurePort").getStoragePurePort = null as any;
export const getStoragePurePortOutput: typeof import("./getStoragePurePort").getStoragePurePortOutput = null as any;
utilities.lazyLoad(exports, ["getStoragePurePort","getStoragePurePortOutput"], () => require("./getStoragePurePort"));

export { GetStoragePureProtectionGroupArgs, GetStoragePureProtectionGroupResult, GetStoragePureProtectionGroupOutputArgs } from "./getStoragePureProtectionGroup";
export const getStoragePureProtectionGroup: typeof import("./getStoragePureProtectionGroup").getStoragePureProtectionGroup = null as any;
export const getStoragePureProtectionGroupOutput: typeof import("./getStoragePureProtectionGroup").getStoragePureProtectionGroupOutput = null as any;
utilities.lazyLoad(exports, ["getStoragePureProtectionGroup","getStoragePureProtectionGroupOutput"], () => require("./getStoragePureProtectionGroup"));

export { GetStoragePureProtectionGroupSnapshotArgs, GetStoragePureProtectionGroupSnapshotResult, GetStoragePureProtectionGroupSnapshotOutputArgs } from "./getStoragePureProtectionGroupSnapshot";
export const getStoragePureProtectionGroupSnapshot: typeof import("./getStoragePureProtectionGroupSnapshot").getStoragePureProtectionGroupSnapshot = null as any;
export const getStoragePureProtectionGroupSnapshotOutput: typeof import("./getStoragePureProtectionGroupSnapshot").getStoragePureProtectionGroupSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getStoragePureProtectionGroupSnapshot","getStoragePureProtectionGroupSnapshotOutput"], () => require("./getStoragePureProtectionGroupSnapshot"));

export { GetStoragePureReplicationScheduleArgs, GetStoragePureReplicationScheduleResult, GetStoragePureReplicationScheduleOutputArgs } from "./getStoragePureReplicationSchedule";
export const getStoragePureReplicationSchedule: typeof import("./getStoragePureReplicationSchedule").getStoragePureReplicationSchedule = null as any;
export const getStoragePureReplicationScheduleOutput: typeof import("./getStoragePureReplicationSchedule").getStoragePureReplicationScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getStoragePureReplicationSchedule","getStoragePureReplicationScheduleOutput"], () => require("./getStoragePureReplicationSchedule"));

export { GetStoragePureSnapshotScheduleArgs, GetStoragePureSnapshotScheduleResult, GetStoragePureSnapshotScheduleOutputArgs } from "./getStoragePureSnapshotSchedule";
export const getStoragePureSnapshotSchedule: typeof import("./getStoragePureSnapshotSchedule").getStoragePureSnapshotSchedule = null as any;
export const getStoragePureSnapshotScheduleOutput: typeof import("./getStoragePureSnapshotSchedule").getStoragePureSnapshotScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getStoragePureSnapshotSchedule","getStoragePureSnapshotScheduleOutput"], () => require("./getStoragePureSnapshotSchedule"));

export { GetStoragePureTargetArrayArgs, GetStoragePureTargetArrayResult, GetStoragePureTargetArrayOutputArgs } from "./getStoragePureTargetArray";
export const getStoragePureTargetArray: typeof import("./getStoragePureTargetArray").getStoragePureTargetArray = null as any;
export const getStoragePureTargetArrayOutput: typeof import("./getStoragePureTargetArray").getStoragePureTargetArrayOutput = null as any;
utilities.lazyLoad(exports, ["getStoragePureTargetArray","getStoragePureTargetArrayOutput"], () => require("./getStoragePureTargetArray"));

export { GetStoragePureVolumeArgs, GetStoragePureVolumeResult, GetStoragePureVolumeOutputArgs } from "./getStoragePureVolume";
export const getStoragePureVolume: typeof import("./getStoragePureVolume").getStoragePureVolume = null as any;
export const getStoragePureVolumeOutput: typeof import("./getStoragePureVolume").getStoragePureVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getStoragePureVolume","getStoragePureVolumeOutput"], () => require("./getStoragePureVolume"));

export { GetStoragePureVolumeSnapshotArgs, GetStoragePureVolumeSnapshotResult, GetStoragePureVolumeSnapshotOutputArgs } from "./getStoragePureVolumeSnapshot";
export const getStoragePureVolumeSnapshot: typeof import("./getStoragePureVolumeSnapshot").getStoragePureVolumeSnapshot = null as any;
export const getStoragePureVolumeSnapshotOutput: typeof import("./getStoragePureVolumeSnapshot").getStoragePureVolumeSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getStoragePureVolumeSnapshot","getStoragePureVolumeSnapshotOutput"], () => require("./getStoragePureVolumeSnapshot"));

export { GetStorageSasExpanderArgs, GetStorageSasExpanderResult, GetStorageSasExpanderOutputArgs } from "./getStorageSasExpander";
export const getStorageSasExpander: typeof import("./getStorageSasExpander").getStorageSasExpander = null as any;
export const getStorageSasExpanderOutput: typeof import("./getStorageSasExpander").getStorageSasExpanderOutput = null as any;
utilities.lazyLoad(exports, ["getStorageSasExpander","getStorageSasExpanderOutput"], () => require("./getStorageSasExpander"));

export { GetStorageSasPortArgs, GetStorageSasPortResult, GetStorageSasPortOutputArgs } from "./getStorageSasPort";
export const getStorageSasPort: typeof import("./getStorageSasPort").getStorageSasPort = null as any;
export const getStorageSasPortOutput: typeof import("./getStorageSasPort").getStorageSasPortOutput = null as any;
utilities.lazyLoad(exports, ["getStorageSasPort","getStorageSasPortOutput"], () => require("./getStorageSasPort"));

export { GetStorageSpanArgs, GetStorageSpanResult, GetStorageSpanOutputArgs } from "./getStorageSpan";
export const getStorageSpan: typeof import("./getStorageSpan").getStorageSpan = null as any;
export const getStorageSpanOutput: typeof import("./getStorageSpan").getStorageSpanOutput = null as any;
utilities.lazyLoad(exports, ["getStorageSpan","getStorageSpanOutput"], () => require("./getStorageSpan"));

export { GetStorageStoragePolicyArgs, GetStorageStoragePolicyResult, GetStorageStoragePolicyOutputArgs } from "./getStorageStoragePolicy";
export const getStorageStoragePolicy: typeof import("./getStorageStoragePolicy").getStorageStoragePolicy = null as any;
export const getStorageStoragePolicyOutput: typeof import("./getStorageStoragePolicy").getStorageStoragePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getStorageStoragePolicy","getStorageStoragePolicyOutput"], () => require("./getStorageStoragePolicy"));

export { GetStorageVdMemberEpArgs, GetStorageVdMemberEpResult, GetStorageVdMemberEpOutputArgs } from "./getStorageVdMemberEp";
export const getStorageVdMemberEp: typeof import("./getStorageVdMemberEp").getStorageVdMemberEp = null as any;
export const getStorageVdMemberEpOutput: typeof import("./getStorageVdMemberEp").getStorageVdMemberEpOutput = null as any;
utilities.lazyLoad(exports, ["getStorageVdMemberEp","getStorageVdMemberEpOutput"], () => require("./getStorageVdMemberEp"));

export { GetStorageVirtualDriveArgs, GetStorageVirtualDriveResult, GetStorageVirtualDriveOutputArgs } from "./getStorageVirtualDrive";
export const getStorageVirtualDrive: typeof import("./getStorageVirtualDrive").getStorageVirtualDrive = null as any;
export const getStorageVirtualDriveOutput: typeof import("./getStorageVirtualDrive").getStorageVirtualDriveOutput = null as any;
utilities.lazyLoad(exports, ["getStorageVirtualDrive","getStorageVirtualDriveOutput"], () => require("./getStorageVirtualDrive"));

export { GetStorageVirtualDriveContainerArgs, GetStorageVirtualDriveContainerResult, GetStorageVirtualDriveContainerOutputArgs } from "./getStorageVirtualDriveContainer";
export const getStorageVirtualDriveContainer: typeof import("./getStorageVirtualDriveContainer").getStorageVirtualDriveContainer = null as any;
export const getStorageVirtualDriveContainerOutput: typeof import("./getStorageVirtualDriveContainer").getStorageVirtualDriveContainerOutput = null as any;
utilities.lazyLoad(exports, ["getStorageVirtualDriveContainer","getStorageVirtualDriveContainerOutput"], () => require("./getStorageVirtualDriveContainer"));

export { GetStorageVirtualDriveExtensionArgs, GetStorageVirtualDriveExtensionResult, GetStorageVirtualDriveExtensionOutputArgs } from "./getStorageVirtualDriveExtension";
export const getStorageVirtualDriveExtension: typeof import("./getStorageVirtualDriveExtension").getStorageVirtualDriveExtension = null as any;
export const getStorageVirtualDriveExtensionOutput: typeof import("./getStorageVirtualDriveExtension").getStorageVirtualDriveExtensionOutput = null as any;
utilities.lazyLoad(exports, ["getStorageVirtualDriveExtension","getStorageVirtualDriveExtensionOutput"], () => require("./getStorageVirtualDriveExtension"));

export { GetStorageVirtualDriveIdentityArgs, GetStorageVirtualDriveIdentityResult, GetStorageVirtualDriveIdentityOutputArgs } from "./getStorageVirtualDriveIdentity";
export const getStorageVirtualDriveIdentity: typeof import("./getStorageVirtualDriveIdentity").getStorageVirtualDriveIdentity = null as any;
export const getStorageVirtualDriveIdentityOutput: typeof import("./getStorageVirtualDriveIdentity").getStorageVirtualDriveIdentityOutput = null as any;
utilities.lazyLoad(exports, ["getStorageVirtualDriveIdentity","getStorageVirtualDriveIdentityOutput"], () => require("./getStorageVirtualDriveIdentity"));

export { GetSyslogPolicyArgs, GetSyslogPolicyResult, GetSyslogPolicyOutputArgs } from "./getSyslogPolicy";
export const getSyslogPolicy: typeof import("./getSyslogPolicy").getSyslogPolicy = null as any;
export const getSyslogPolicyOutput: typeof import("./getSyslogPolicy").getSyslogPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSyslogPolicy","getSyslogPolicyOutput"], () => require("./getSyslogPolicy"));

export { GetSyslogPolicyInventoryArgs, GetSyslogPolicyInventoryResult, GetSyslogPolicyInventoryOutputArgs } from "./getSyslogPolicyInventory";
export const getSyslogPolicyInventory: typeof import("./getSyslogPolicyInventory").getSyslogPolicyInventory = null as any;
export const getSyslogPolicyInventoryOutput: typeof import("./getSyslogPolicyInventory").getSyslogPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getSyslogPolicyInventory","getSyslogPolicyInventoryOutput"], () => require("./getSyslogPolicyInventory"));

export { GetTamAdvisoryCountArgs, GetTamAdvisoryCountResult, GetTamAdvisoryCountOutputArgs } from "./getTamAdvisoryCount";
export const getTamAdvisoryCount: typeof import("./getTamAdvisoryCount").getTamAdvisoryCount = null as any;
export const getTamAdvisoryCountOutput: typeof import("./getTamAdvisoryCount").getTamAdvisoryCountOutput = null as any;
utilities.lazyLoad(exports, ["getTamAdvisoryCount","getTamAdvisoryCountOutput"], () => require("./getTamAdvisoryCount"));

export { GetTamAdvisoryDefinitionArgs, GetTamAdvisoryDefinitionResult, GetTamAdvisoryDefinitionOutputArgs } from "./getTamAdvisoryDefinition";
export const getTamAdvisoryDefinition: typeof import("./getTamAdvisoryDefinition").getTamAdvisoryDefinition = null as any;
export const getTamAdvisoryDefinitionOutput: typeof import("./getTamAdvisoryDefinition").getTamAdvisoryDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getTamAdvisoryDefinition","getTamAdvisoryDefinitionOutput"], () => require("./getTamAdvisoryDefinition"));

export { GetTamAdvisoryInfoArgs, GetTamAdvisoryInfoResult, GetTamAdvisoryInfoOutputArgs } from "./getTamAdvisoryInfo";
export const getTamAdvisoryInfo: typeof import("./getTamAdvisoryInfo").getTamAdvisoryInfo = null as any;
export const getTamAdvisoryInfoOutput: typeof import("./getTamAdvisoryInfo").getTamAdvisoryInfoOutput = null as any;
utilities.lazyLoad(exports, ["getTamAdvisoryInfo","getTamAdvisoryInfoOutput"], () => require("./getTamAdvisoryInfo"));

export { GetTamAdvisoryInstanceArgs, GetTamAdvisoryInstanceResult, GetTamAdvisoryInstanceOutputArgs } from "./getTamAdvisoryInstance";
export const getTamAdvisoryInstance: typeof import("./getTamAdvisoryInstance").getTamAdvisoryInstance = null as any;
export const getTamAdvisoryInstanceOutput: typeof import("./getTamAdvisoryInstance").getTamAdvisoryInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getTamAdvisoryInstance","getTamAdvisoryInstanceOutput"], () => require("./getTamAdvisoryInstance"));

export { GetTamSecurityAdvisoryArgs, GetTamSecurityAdvisoryResult, GetTamSecurityAdvisoryOutputArgs } from "./getTamSecurityAdvisory";
export const getTamSecurityAdvisory: typeof import("./getTamSecurityAdvisory").getTamSecurityAdvisory = null as any;
export const getTamSecurityAdvisoryOutput: typeof import("./getTamSecurityAdvisory").getTamSecurityAdvisoryOutput = null as any;
utilities.lazyLoad(exports, ["getTamSecurityAdvisory","getTamSecurityAdvisoryOutput"], () => require("./getTamSecurityAdvisory"));

export { GetTechsupportmanagementCollectionControlPolicyArgs, GetTechsupportmanagementCollectionControlPolicyResult, GetTechsupportmanagementCollectionControlPolicyOutputArgs } from "./getTechsupportmanagementCollectionControlPolicy";
export const getTechsupportmanagementCollectionControlPolicy: typeof import("./getTechsupportmanagementCollectionControlPolicy").getTechsupportmanagementCollectionControlPolicy = null as any;
export const getTechsupportmanagementCollectionControlPolicyOutput: typeof import("./getTechsupportmanagementCollectionControlPolicy").getTechsupportmanagementCollectionControlPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getTechsupportmanagementCollectionControlPolicy","getTechsupportmanagementCollectionControlPolicyOutput"], () => require("./getTechsupportmanagementCollectionControlPolicy"));

export { GetTechsupportmanagementDownloadArgs, GetTechsupportmanagementDownloadResult, GetTechsupportmanagementDownloadOutputArgs } from "./getTechsupportmanagementDownload";
export const getTechsupportmanagementDownload: typeof import("./getTechsupportmanagementDownload").getTechsupportmanagementDownload = null as any;
export const getTechsupportmanagementDownloadOutput: typeof import("./getTechsupportmanagementDownload").getTechsupportmanagementDownloadOutput = null as any;
utilities.lazyLoad(exports, ["getTechsupportmanagementDownload","getTechsupportmanagementDownloadOutput"], () => require("./getTechsupportmanagementDownload"));

export { GetTechsupportmanagementEndPointArgs, GetTechsupportmanagementEndPointResult, GetTechsupportmanagementEndPointOutputArgs } from "./getTechsupportmanagementEndPoint";
export const getTechsupportmanagementEndPoint: typeof import("./getTechsupportmanagementEndPoint").getTechsupportmanagementEndPoint = null as any;
export const getTechsupportmanagementEndPointOutput: typeof import("./getTechsupportmanagementEndPoint").getTechsupportmanagementEndPointOutput = null as any;
utilities.lazyLoad(exports, ["getTechsupportmanagementEndPoint","getTechsupportmanagementEndPointOutput"], () => require("./getTechsupportmanagementEndPoint"));

export { GetTechsupportmanagementTechSupportBundleArgs, GetTechsupportmanagementTechSupportBundleResult, GetTechsupportmanagementTechSupportBundleOutputArgs } from "./getTechsupportmanagementTechSupportBundle";
export const getTechsupportmanagementTechSupportBundle: typeof import("./getTechsupportmanagementTechSupportBundle").getTechsupportmanagementTechSupportBundle = null as any;
export const getTechsupportmanagementTechSupportBundleOutput: typeof import("./getTechsupportmanagementTechSupportBundle").getTechsupportmanagementTechSupportBundleOutput = null as any;
utilities.lazyLoad(exports, ["getTechsupportmanagementTechSupportBundle","getTechsupportmanagementTechSupportBundleOutput"], () => require("./getTechsupportmanagementTechSupportBundle"));

export { GetTechsupportmanagementTechSupportStatusArgs, GetTechsupportmanagementTechSupportStatusResult, GetTechsupportmanagementTechSupportStatusOutputArgs } from "./getTechsupportmanagementTechSupportStatus";
export const getTechsupportmanagementTechSupportStatus: typeof import("./getTechsupportmanagementTechSupportStatus").getTechsupportmanagementTechSupportStatus = null as any;
export const getTechsupportmanagementTechSupportStatusOutput: typeof import("./getTechsupportmanagementTechSupportStatus").getTechsupportmanagementTechSupportStatusOutput = null as any;
utilities.lazyLoad(exports, ["getTechsupportmanagementTechSupportStatus","getTechsupportmanagementTechSupportStatusOutput"], () => require("./getTechsupportmanagementTechSupportStatus"));

export { GetTerminalAuditLogArgs, GetTerminalAuditLogResult, GetTerminalAuditLogOutputArgs } from "./getTerminalAuditLog";
export const getTerminalAuditLog: typeof import("./getTerminalAuditLog").getTerminalAuditLog = null as any;
export const getTerminalAuditLogOutput: typeof import("./getTerminalAuditLog").getTerminalAuditLogOutput = null as any;
utilities.lazyLoad(exports, ["getTerminalAuditLog","getTerminalAuditLogOutput"], () => require("./getTerminalAuditLog"));

export { GetTerraformExecutorArgs, GetTerraformExecutorResult, GetTerraformExecutorOutputArgs } from "./getTerraformExecutor";
export const getTerraformExecutor: typeof import("./getTerraformExecutor").getTerraformExecutor = null as any;
export const getTerraformExecutorOutput: typeof import("./getTerraformExecutor").getTerraformExecutorOutput = null as any;
utilities.lazyLoad(exports, ["getTerraformExecutor","getTerraformExecutorOutput"], () => require("./getTerraformExecutor"));

export { GetThermalPolicyArgs, GetThermalPolicyResult, GetThermalPolicyOutputArgs } from "./getThermalPolicy";
export const getThermalPolicy: typeof import("./getThermalPolicy").getThermalPolicy = null as any;
export const getThermalPolicyOutput: typeof import("./getThermalPolicy").getThermalPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getThermalPolicy","getThermalPolicyOutput"], () => require("./getThermalPolicy"));

export { GetThermalPolicyInventoryArgs, GetThermalPolicyInventoryResult, GetThermalPolicyInventoryOutputArgs } from "./getThermalPolicyInventory";
export const getThermalPolicyInventory: typeof import("./getThermalPolicyInventory").getThermalPolicyInventory = null as any;
export const getThermalPolicyInventoryOutput: typeof import("./getThermalPolicyInventory").getThermalPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getThermalPolicyInventory","getThermalPolicyInventoryOutput"], () => require("./getThermalPolicyInventory"));

export { GetTopSystemArgs, GetTopSystemResult, GetTopSystemOutputArgs } from "./getTopSystem";
export const getTopSystem: typeof import("./getTopSystem").getTopSystem = null as any;
export const getTopSystemOutput: typeof import("./getTopSystem").getTopSystemOutput = null as any;
utilities.lazyLoad(exports, ["getTopSystem","getTopSystemOutput"], () => require("./getTopSystem"));

export { GetUcsdBackupInfoArgs, GetUcsdBackupInfoResult, GetUcsdBackupInfoOutputArgs } from "./getUcsdBackupInfo";
export const getUcsdBackupInfo: typeof import("./getUcsdBackupInfo").getUcsdBackupInfo = null as any;
export const getUcsdBackupInfoOutput: typeof import("./getUcsdBackupInfo").getUcsdBackupInfoOutput = null as any;
utilities.lazyLoad(exports, ["getUcsdBackupInfo","getUcsdBackupInfoOutput"], () => require("./getUcsdBackupInfo"));

export { GetUuidpoolBlockArgs, GetUuidpoolBlockResult, GetUuidpoolBlockOutputArgs } from "./getUuidpoolBlock";
export const getUuidpoolBlock: typeof import("./getUuidpoolBlock").getUuidpoolBlock = null as any;
export const getUuidpoolBlockOutput: typeof import("./getUuidpoolBlock").getUuidpoolBlockOutput = null as any;
utilities.lazyLoad(exports, ["getUuidpoolBlock","getUuidpoolBlockOutput"], () => require("./getUuidpoolBlock"));

export { GetUuidpoolPoolArgs, GetUuidpoolPoolResult, GetUuidpoolPoolOutputArgs } from "./getUuidpoolPool";
export const getUuidpoolPool: typeof import("./getUuidpoolPool").getUuidpoolPool = null as any;
export const getUuidpoolPoolOutput: typeof import("./getUuidpoolPool").getUuidpoolPoolOutput = null as any;
utilities.lazyLoad(exports, ["getUuidpoolPool","getUuidpoolPoolOutput"], () => require("./getUuidpoolPool"));

export { GetUuidpoolPoolMemberArgs, GetUuidpoolPoolMemberResult, GetUuidpoolPoolMemberOutputArgs } from "./getUuidpoolPoolMember";
export const getUuidpoolPoolMember: typeof import("./getUuidpoolPoolMember").getUuidpoolPoolMember = null as any;
export const getUuidpoolPoolMemberOutput: typeof import("./getUuidpoolPoolMember").getUuidpoolPoolMemberOutput = null as any;
utilities.lazyLoad(exports, ["getUuidpoolPoolMember","getUuidpoolPoolMemberOutput"], () => require("./getUuidpoolPoolMember"));

export { GetUuidpoolReservationArgs, GetUuidpoolReservationResult, GetUuidpoolReservationOutputArgs } from "./getUuidpoolReservation";
export const getUuidpoolReservation: typeof import("./getUuidpoolReservation").getUuidpoolReservation = null as any;
export const getUuidpoolReservationOutput: typeof import("./getUuidpoolReservation").getUuidpoolReservationOutput = null as any;
utilities.lazyLoad(exports, ["getUuidpoolReservation","getUuidpoolReservationOutput"], () => require("./getUuidpoolReservation"));

export { GetUuidpoolUniverseArgs, GetUuidpoolUniverseResult, GetUuidpoolUniverseOutputArgs } from "./getUuidpoolUniverse";
export const getUuidpoolUniverse: typeof import("./getUuidpoolUniverse").getUuidpoolUniverse = null as any;
export const getUuidpoolUniverseOutput: typeof import("./getUuidpoolUniverse").getUuidpoolUniverseOutput = null as any;
utilities.lazyLoad(exports, ["getUuidpoolUniverse","getUuidpoolUniverseOutput"], () => require("./getUuidpoolUniverse"));

export { GetUuidpoolUuidLeaseArgs, GetUuidpoolUuidLeaseResult, GetUuidpoolUuidLeaseOutputArgs } from "./getUuidpoolUuidLease";
export const getUuidpoolUuidLease: typeof import("./getUuidpoolUuidLease").getUuidpoolUuidLease = null as any;
export const getUuidpoolUuidLeaseOutput: typeof import("./getUuidpoolUuidLease").getUuidpoolUuidLeaseOutput = null as any;
utilities.lazyLoad(exports, ["getUuidpoolUuidLease","getUuidpoolUuidLeaseOutput"], () => require("./getUuidpoolUuidLease"));

export { GetViewHealthStatusArgs, GetViewHealthStatusResult, GetViewHealthStatusOutputArgs } from "./getViewHealthStatus";
export const getViewHealthStatus: typeof import("./getViewHealthStatus").getViewHealthStatus = null as any;
export const getViewHealthStatusOutput: typeof import("./getViewHealthStatus").getViewHealthStatusOutput = null as any;
utilities.lazyLoad(exports, ["getViewHealthStatus","getViewHealthStatusOutput"], () => require("./getViewHealthStatus"));

export { GetViewServerArgs, GetViewServerResult, GetViewServerOutputArgs } from "./getViewServer";
export const getViewServer: typeof import("./getViewServer").getViewServer = null as any;
export const getViewServerOutput: typeof import("./getViewServer").getViewServerOutput = null as any;
utilities.lazyLoad(exports, ["getViewServer","getViewServerOutput"], () => require("./getViewServer"));

export { GetVirtualizationEsxiConsoleArgs, GetVirtualizationEsxiConsoleResult, GetVirtualizationEsxiConsoleOutputArgs } from "./getVirtualizationEsxiConsole";
export const getVirtualizationEsxiConsole: typeof import("./getVirtualizationEsxiConsole").getVirtualizationEsxiConsole = null as any;
export const getVirtualizationEsxiConsoleOutput: typeof import("./getVirtualizationEsxiConsole").getVirtualizationEsxiConsoleOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualizationEsxiConsole","getVirtualizationEsxiConsoleOutput"], () => require("./getVirtualizationEsxiConsole"));

export { GetVirtualizationHostArgs, GetVirtualizationHostResult, GetVirtualizationHostOutputArgs } from "./getVirtualizationHost";
export const getVirtualizationHost: typeof import("./getVirtualizationHost").getVirtualizationHost = null as any;
export const getVirtualizationHostOutput: typeof import("./getVirtualizationHost").getVirtualizationHostOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualizationHost","getVirtualizationHostOutput"], () => require("./getVirtualizationHost"));

export { GetVirtualizationVirtualMachineArgs, GetVirtualizationVirtualMachineResult, GetVirtualizationVirtualMachineOutputArgs } from "./getVirtualizationVirtualMachine";
export const getVirtualizationVirtualMachine: typeof import("./getVirtualizationVirtualMachine").getVirtualizationVirtualMachine = null as any;
export const getVirtualizationVirtualMachineOutput: typeof import("./getVirtualizationVirtualMachine").getVirtualizationVirtualMachineOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualizationVirtualMachine","getVirtualizationVirtualMachineOutput"], () => require("./getVirtualizationVirtualMachine"));

export { GetVirtualizationVmwareClusterArgs, GetVirtualizationVmwareClusterResult, GetVirtualizationVmwareClusterOutputArgs } from "./getVirtualizationVmwareCluster";
export const getVirtualizationVmwareCluster: typeof import("./getVirtualizationVmwareCluster").getVirtualizationVmwareCluster = null as any;
export const getVirtualizationVmwareClusterOutput: typeof import("./getVirtualizationVmwareCluster").getVirtualizationVmwareClusterOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualizationVmwareCluster","getVirtualizationVmwareClusterOutput"], () => require("./getVirtualizationVmwareCluster"));

export { GetVirtualizationVmwareDatacenterArgs, GetVirtualizationVmwareDatacenterResult, GetVirtualizationVmwareDatacenterOutputArgs } from "./getVirtualizationVmwareDatacenter";
export const getVirtualizationVmwareDatacenter: typeof import("./getVirtualizationVmwareDatacenter").getVirtualizationVmwareDatacenter = null as any;
export const getVirtualizationVmwareDatacenterOutput: typeof import("./getVirtualizationVmwareDatacenter").getVirtualizationVmwareDatacenterOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualizationVmwareDatacenter","getVirtualizationVmwareDatacenterOutput"], () => require("./getVirtualizationVmwareDatacenter"));

export { GetVirtualizationVmwareDatastoreArgs, GetVirtualizationVmwareDatastoreResult, GetVirtualizationVmwareDatastoreOutputArgs } from "./getVirtualizationVmwareDatastore";
export const getVirtualizationVmwareDatastore: typeof import("./getVirtualizationVmwareDatastore").getVirtualizationVmwareDatastore = null as any;
export const getVirtualizationVmwareDatastoreOutput: typeof import("./getVirtualizationVmwareDatastore").getVirtualizationVmwareDatastoreOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualizationVmwareDatastore","getVirtualizationVmwareDatastoreOutput"], () => require("./getVirtualizationVmwareDatastore"));

export { GetVirtualizationVmwareDatastoreClusterArgs, GetVirtualizationVmwareDatastoreClusterResult, GetVirtualizationVmwareDatastoreClusterOutputArgs } from "./getVirtualizationVmwareDatastoreCluster";
export const getVirtualizationVmwareDatastoreCluster: typeof import("./getVirtualizationVmwareDatastoreCluster").getVirtualizationVmwareDatastoreCluster = null as any;
export const getVirtualizationVmwareDatastoreClusterOutput: typeof import("./getVirtualizationVmwareDatastoreCluster").getVirtualizationVmwareDatastoreClusterOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualizationVmwareDatastoreCluster","getVirtualizationVmwareDatastoreClusterOutput"], () => require("./getVirtualizationVmwareDatastoreCluster"));

export { GetVirtualizationVmwareDistributedNetworkArgs, GetVirtualizationVmwareDistributedNetworkResult, GetVirtualizationVmwareDistributedNetworkOutputArgs } from "./getVirtualizationVmwareDistributedNetwork";
export const getVirtualizationVmwareDistributedNetwork: typeof import("./getVirtualizationVmwareDistributedNetwork").getVirtualizationVmwareDistributedNetwork = null as any;
export const getVirtualizationVmwareDistributedNetworkOutput: typeof import("./getVirtualizationVmwareDistributedNetwork").getVirtualizationVmwareDistributedNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualizationVmwareDistributedNetwork","getVirtualizationVmwareDistributedNetworkOutput"], () => require("./getVirtualizationVmwareDistributedNetwork"));

export { GetVirtualizationVmwareDistributedSwitchArgs, GetVirtualizationVmwareDistributedSwitchResult, GetVirtualizationVmwareDistributedSwitchOutputArgs } from "./getVirtualizationVmwareDistributedSwitch";
export const getVirtualizationVmwareDistributedSwitch: typeof import("./getVirtualizationVmwareDistributedSwitch").getVirtualizationVmwareDistributedSwitch = null as any;
export const getVirtualizationVmwareDistributedSwitchOutput: typeof import("./getVirtualizationVmwareDistributedSwitch").getVirtualizationVmwareDistributedSwitchOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualizationVmwareDistributedSwitch","getVirtualizationVmwareDistributedSwitchOutput"], () => require("./getVirtualizationVmwareDistributedSwitch"));

export { GetVirtualizationVmwareFolderArgs, GetVirtualizationVmwareFolderResult, GetVirtualizationVmwareFolderOutputArgs } from "./getVirtualizationVmwareFolder";
export const getVirtualizationVmwareFolder: typeof import("./getVirtualizationVmwareFolder").getVirtualizationVmwareFolder = null as any;
export const getVirtualizationVmwareFolderOutput: typeof import("./getVirtualizationVmwareFolder").getVirtualizationVmwareFolderOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualizationVmwareFolder","getVirtualizationVmwareFolderOutput"], () => require("./getVirtualizationVmwareFolder"));

export { GetVirtualizationVmwareHostArgs, GetVirtualizationVmwareHostResult, GetVirtualizationVmwareHostOutputArgs } from "./getVirtualizationVmwareHost";
export const getVirtualizationVmwareHost: typeof import("./getVirtualizationVmwareHost").getVirtualizationVmwareHost = null as any;
export const getVirtualizationVmwareHostOutput: typeof import("./getVirtualizationVmwareHost").getVirtualizationVmwareHostOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualizationVmwareHost","getVirtualizationVmwareHostOutput"], () => require("./getVirtualizationVmwareHost"));

export { GetVirtualizationVmwareHostGpuArgs, GetVirtualizationVmwareHostGpuResult, GetVirtualizationVmwareHostGpuOutputArgs } from "./getVirtualizationVmwareHostGpu";
export const getVirtualizationVmwareHostGpu: typeof import("./getVirtualizationVmwareHostGpu").getVirtualizationVmwareHostGpu = null as any;
export const getVirtualizationVmwareHostGpuOutput: typeof import("./getVirtualizationVmwareHostGpu").getVirtualizationVmwareHostGpuOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualizationVmwareHostGpu","getVirtualizationVmwareHostGpuOutput"], () => require("./getVirtualizationVmwareHostGpu"));

export { GetVirtualizationVmwareKernelNetworkArgs, GetVirtualizationVmwareKernelNetworkResult, GetVirtualizationVmwareKernelNetworkOutputArgs } from "./getVirtualizationVmwareKernelNetwork";
export const getVirtualizationVmwareKernelNetwork: typeof import("./getVirtualizationVmwareKernelNetwork").getVirtualizationVmwareKernelNetwork = null as any;
export const getVirtualizationVmwareKernelNetworkOutput: typeof import("./getVirtualizationVmwareKernelNetwork").getVirtualizationVmwareKernelNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualizationVmwareKernelNetwork","getVirtualizationVmwareKernelNetworkOutput"], () => require("./getVirtualizationVmwareKernelNetwork"));

export { GetVirtualizationVmwareNetworkArgs, GetVirtualizationVmwareNetworkResult, GetVirtualizationVmwareNetworkOutputArgs } from "./getVirtualizationVmwareNetwork";
export const getVirtualizationVmwareNetwork: typeof import("./getVirtualizationVmwareNetwork").getVirtualizationVmwareNetwork = null as any;
export const getVirtualizationVmwareNetworkOutput: typeof import("./getVirtualizationVmwareNetwork").getVirtualizationVmwareNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualizationVmwareNetwork","getVirtualizationVmwareNetworkOutput"], () => require("./getVirtualizationVmwareNetwork"));

export { GetVirtualizationVmwarePhysicalNetworkInterfaceArgs, GetVirtualizationVmwarePhysicalNetworkInterfaceResult, GetVirtualizationVmwarePhysicalNetworkInterfaceOutputArgs } from "./getVirtualizationVmwarePhysicalNetworkInterface";
export const getVirtualizationVmwarePhysicalNetworkInterface: typeof import("./getVirtualizationVmwarePhysicalNetworkInterface").getVirtualizationVmwarePhysicalNetworkInterface = null as any;
export const getVirtualizationVmwarePhysicalNetworkInterfaceOutput: typeof import("./getVirtualizationVmwarePhysicalNetworkInterface").getVirtualizationVmwarePhysicalNetworkInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualizationVmwarePhysicalNetworkInterface","getVirtualizationVmwarePhysicalNetworkInterfaceOutput"], () => require("./getVirtualizationVmwarePhysicalNetworkInterface"));

export { GetVirtualizationVmwareProactiveHaArgs, GetVirtualizationVmwareProactiveHaResult, GetVirtualizationVmwareProactiveHaOutputArgs } from "./getVirtualizationVmwareProactiveHa";
export const getVirtualizationVmwareProactiveHa: typeof import("./getVirtualizationVmwareProactiveHa").getVirtualizationVmwareProactiveHa = null as any;
export const getVirtualizationVmwareProactiveHaOutput: typeof import("./getVirtualizationVmwareProactiveHa").getVirtualizationVmwareProactiveHaOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualizationVmwareProactiveHa","getVirtualizationVmwareProactiveHaOutput"], () => require("./getVirtualizationVmwareProactiveHa"));

export { GetVirtualizationVmwareUplinkPortArgs, GetVirtualizationVmwareUplinkPortResult, GetVirtualizationVmwareUplinkPortOutputArgs } from "./getVirtualizationVmwareUplinkPort";
export const getVirtualizationVmwareUplinkPort: typeof import("./getVirtualizationVmwareUplinkPort").getVirtualizationVmwareUplinkPort = null as any;
export const getVirtualizationVmwareUplinkPortOutput: typeof import("./getVirtualizationVmwareUplinkPort").getVirtualizationVmwareUplinkPortOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualizationVmwareUplinkPort","getVirtualizationVmwareUplinkPortOutput"], () => require("./getVirtualizationVmwareUplinkPort"));

export { GetVirtualizationVmwareVcenterArgs, GetVirtualizationVmwareVcenterResult, GetVirtualizationVmwareVcenterOutputArgs } from "./getVirtualizationVmwareVcenter";
export const getVirtualizationVmwareVcenter: typeof import("./getVirtualizationVmwareVcenter").getVirtualizationVmwareVcenter = null as any;
export const getVirtualizationVmwareVcenterOutput: typeof import("./getVirtualizationVmwareVcenter").getVirtualizationVmwareVcenterOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualizationVmwareVcenter","getVirtualizationVmwareVcenterOutput"], () => require("./getVirtualizationVmwareVcenter"));

export { GetVirtualizationVmwareVirtualDiskArgs, GetVirtualizationVmwareVirtualDiskResult, GetVirtualizationVmwareVirtualDiskOutputArgs } from "./getVirtualizationVmwareVirtualDisk";
export const getVirtualizationVmwareVirtualDisk: typeof import("./getVirtualizationVmwareVirtualDisk").getVirtualizationVmwareVirtualDisk = null as any;
export const getVirtualizationVmwareVirtualDiskOutput: typeof import("./getVirtualizationVmwareVirtualDisk").getVirtualizationVmwareVirtualDiskOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualizationVmwareVirtualDisk","getVirtualizationVmwareVirtualDiskOutput"], () => require("./getVirtualizationVmwareVirtualDisk"));

export { GetVirtualizationVmwareVirtualMachineArgs, GetVirtualizationVmwareVirtualMachineResult, GetVirtualizationVmwareVirtualMachineOutputArgs } from "./getVirtualizationVmwareVirtualMachine";
export const getVirtualizationVmwareVirtualMachine: typeof import("./getVirtualizationVmwareVirtualMachine").getVirtualizationVmwareVirtualMachine = null as any;
export const getVirtualizationVmwareVirtualMachineOutput: typeof import("./getVirtualizationVmwareVirtualMachine").getVirtualizationVmwareVirtualMachineOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualizationVmwareVirtualMachine","getVirtualizationVmwareVirtualMachineOutput"], () => require("./getVirtualizationVmwareVirtualMachine"));

export { GetVirtualizationVmwareVirtualMachineGpuArgs, GetVirtualizationVmwareVirtualMachineGpuResult, GetVirtualizationVmwareVirtualMachineGpuOutputArgs } from "./getVirtualizationVmwareVirtualMachineGpu";
export const getVirtualizationVmwareVirtualMachineGpu: typeof import("./getVirtualizationVmwareVirtualMachineGpu").getVirtualizationVmwareVirtualMachineGpu = null as any;
export const getVirtualizationVmwareVirtualMachineGpuOutput: typeof import("./getVirtualizationVmwareVirtualMachineGpu").getVirtualizationVmwareVirtualMachineGpuOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualizationVmwareVirtualMachineGpu","getVirtualizationVmwareVirtualMachineGpuOutput"], () => require("./getVirtualizationVmwareVirtualMachineGpu"));

export { GetVirtualizationVmwareVirtualMachineSnapshotArgs, GetVirtualizationVmwareVirtualMachineSnapshotResult, GetVirtualizationVmwareVirtualMachineSnapshotOutputArgs } from "./getVirtualizationVmwareVirtualMachineSnapshot";
export const getVirtualizationVmwareVirtualMachineSnapshot: typeof import("./getVirtualizationVmwareVirtualMachineSnapshot").getVirtualizationVmwareVirtualMachineSnapshot = null as any;
export const getVirtualizationVmwareVirtualMachineSnapshotOutput: typeof import("./getVirtualizationVmwareVirtualMachineSnapshot").getVirtualizationVmwareVirtualMachineSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualizationVmwareVirtualMachineSnapshot","getVirtualizationVmwareVirtualMachineSnapshotOutput"], () => require("./getVirtualizationVmwareVirtualMachineSnapshot"));

export { GetVirtualizationVmwareVirtualNetworkInterfaceArgs, GetVirtualizationVmwareVirtualNetworkInterfaceResult, GetVirtualizationVmwareVirtualNetworkInterfaceOutputArgs } from "./getVirtualizationVmwareVirtualNetworkInterface";
export const getVirtualizationVmwareVirtualNetworkInterface: typeof import("./getVirtualizationVmwareVirtualNetworkInterface").getVirtualizationVmwareVirtualNetworkInterface = null as any;
export const getVirtualizationVmwareVirtualNetworkInterfaceOutput: typeof import("./getVirtualizationVmwareVirtualNetworkInterface").getVirtualizationVmwareVirtualNetworkInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualizationVmwareVirtualNetworkInterface","getVirtualizationVmwareVirtualNetworkInterfaceOutput"], () => require("./getVirtualizationVmwareVirtualNetworkInterface"));

export { GetVirtualizationVmwareVirtualSwitchArgs, GetVirtualizationVmwareVirtualSwitchResult, GetVirtualizationVmwareVirtualSwitchOutputArgs } from "./getVirtualizationVmwareVirtualSwitch";
export const getVirtualizationVmwareVirtualSwitch: typeof import("./getVirtualizationVmwareVirtualSwitch").getVirtualizationVmwareVirtualSwitch = null as any;
export const getVirtualizationVmwareVirtualSwitchOutput: typeof import("./getVirtualizationVmwareVirtualSwitch").getVirtualizationVmwareVirtualSwitchOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualizationVmwareVirtualSwitch","getVirtualizationVmwareVirtualSwitchOutput"], () => require("./getVirtualizationVmwareVirtualSwitch"));

export { GetVmediaPolicyArgs, GetVmediaPolicyResult, GetVmediaPolicyOutputArgs } from "./getVmediaPolicy";
export const getVmediaPolicy: typeof import("./getVmediaPolicy").getVmediaPolicy = null as any;
export const getVmediaPolicyOutput: typeof import("./getVmediaPolicy").getVmediaPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getVmediaPolicy","getVmediaPolicyOutput"], () => require("./getVmediaPolicy"));

export { GetVmediaPolicyInventoryArgs, GetVmediaPolicyInventoryResult, GetVmediaPolicyInventoryOutputArgs } from "./getVmediaPolicyInventory";
export const getVmediaPolicyInventory: typeof import("./getVmediaPolicyInventory").getVmediaPolicyInventory = null as any;
export const getVmediaPolicyInventoryOutput: typeof import("./getVmediaPolicyInventory").getVmediaPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getVmediaPolicyInventory","getVmediaPolicyInventoryOutput"], () => require("./getVmediaPolicyInventory"));

export { GetVmrcConsoleArgs, GetVmrcConsoleResult, GetVmrcConsoleOutputArgs } from "./getVmrcConsole";
export const getVmrcConsole: typeof import("./getVmrcConsole").getVmrcConsole = null as any;
export const getVmrcConsoleOutput: typeof import("./getVmrcConsole").getVmrcConsoleOutput = null as any;
utilities.lazyLoad(exports, ["getVmrcConsole","getVmrcConsoleOutput"], () => require("./getVmrcConsole"));

export { GetVnicEthAdapterPolicyArgs, GetVnicEthAdapterPolicyResult, GetVnicEthAdapterPolicyOutputArgs } from "./getVnicEthAdapterPolicy";
export const getVnicEthAdapterPolicy: typeof import("./getVnicEthAdapterPolicy").getVnicEthAdapterPolicy = null as any;
export const getVnicEthAdapterPolicyOutput: typeof import("./getVnicEthAdapterPolicy").getVnicEthAdapterPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getVnicEthAdapterPolicy","getVnicEthAdapterPolicyOutput"], () => require("./getVnicEthAdapterPolicy"));

export { GetVnicEthAdapterPolicyInventoryArgs, GetVnicEthAdapterPolicyInventoryResult, GetVnicEthAdapterPolicyInventoryOutputArgs } from "./getVnicEthAdapterPolicyInventory";
export const getVnicEthAdapterPolicyInventory: typeof import("./getVnicEthAdapterPolicyInventory").getVnicEthAdapterPolicyInventory = null as any;
export const getVnicEthAdapterPolicyInventoryOutput: typeof import("./getVnicEthAdapterPolicyInventory").getVnicEthAdapterPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getVnicEthAdapterPolicyInventory","getVnicEthAdapterPolicyInventoryOutput"], () => require("./getVnicEthAdapterPolicyInventory"));

export { GetVnicEthIfArgs, GetVnicEthIfResult, GetVnicEthIfOutputArgs } from "./getVnicEthIf";
export const getVnicEthIf: typeof import("./getVnicEthIf").getVnicEthIf = null as any;
export const getVnicEthIfOutput: typeof import("./getVnicEthIf").getVnicEthIfOutput = null as any;
utilities.lazyLoad(exports, ["getVnicEthIf","getVnicEthIfOutput"], () => require("./getVnicEthIf"));

export { GetVnicEthIfInventoryArgs, GetVnicEthIfInventoryResult, GetVnicEthIfInventoryOutputArgs } from "./getVnicEthIfInventory";
export const getVnicEthIfInventory: typeof import("./getVnicEthIfInventory").getVnicEthIfInventory = null as any;
export const getVnicEthIfInventoryOutput: typeof import("./getVnicEthIfInventory").getVnicEthIfInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getVnicEthIfInventory","getVnicEthIfInventoryOutput"], () => require("./getVnicEthIfInventory"));

export { GetVnicEthNetworkPolicyArgs, GetVnicEthNetworkPolicyResult, GetVnicEthNetworkPolicyOutputArgs } from "./getVnicEthNetworkPolicy";
export const getVnicEthNetworkPolicy: typeof import("./getVnicEthNetworkPolicy").getVnicEthNetworkPolicy = null as any;
export const getVnicEthNetworkPolicyOutput: typeof import("./getVnicEthNetworkPolicy").getVnicEthNetworkPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getVnicEthNetworkPolicy","getVnicEthNetworkPolicyOutput"], () => require("./getVnicEthNetworkPolicy"));

export { GetVnicEthNetworkPolicyInventoryArgs, GetVnicEthNetworkPolicyInventoryResult, GetVnicEthNetworkPolicyInventoryOutputArgs } from "./getVnicEthNetworkPolicyInventory";
export const getVnicEthNetworkPolicyInventory: typeof import("./getVnicEthNetworkPolicyInventory").getVnicEthNetworkPolicyInventory = null as any;
export const getVnicEthNetworkPolicyInventoryOutput: typeof import("./getVnicEthNetworkPolicyInventory").getVnicEthNetworkPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getVnicEthNetworkPolicyInventory","getVnicEthNetworkPolicyInventoryOutput"], () => require("./getVnicEthNetworkPolicyInventory"));

export { GetVnicEthQosPolicyArgs, GetVnicEthQosPolicyResult, GetVnicEthQosPolicyOutputArgs } from "./getVnicEthQosPolicy";
export const getVnicEthQosPolicy: typeof import("./getVnicEthQosPolicy").getVnicEthQosPolicy = null as any;
export const getVnicEthQosPolicyOutput: typeof import("./getVnicEthQosPolicy").getVnicEthQosPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getVnicEthQosPolicy","getVnicEthQosPolicyOutput"], () => require("./getVnicEthQosPolicy"));

export { GetVnicEthQosPolicyInventoryArgs, GetVnicEthQosPolicyInventoryResult, GetVnicEthQosPolicyInventoryOutputArgs } from "./getVnicEthQosPolicyInventory";
export const getVnicEthQosPolicyInventory: typeof import("./getVnicEthQosPolicyInventory").getVnicEthQosPolicyInventory = null as any;
export const getVnicEthQosPolicyInventoryOutput: typeof import("./getVnicEthQosPolicyInventory").getVnicEthQosPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getVnicEthQosPolicyInventory","getVnicEthQosPolicyInventoryOutput"], () => require("./getVnicEthQosPolicyInventory"));

export { GetVnicEthVethInventoryArgs, GetVnicEthVethInventoryResult, GetVnicEthVethInventoryOutputArgs } from "./getVnicEthVethInventory";
export const getVnicEthVethInventory: typeof import("./getVnicEthVethInventory").getVnicEthVethInventory = null as any;
export const getVnicEthVethInventoryOutput: typeof import("./getVnicEthVethInventory").getVnicEthVethInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getVnicEthVethInventory","getVnicEthVethInventoryOutput"], () => require("./getVnicEthVethInventory"));

export { GetVnicEthVnicInventoryArgs, GetVnicEthVnicInventoryResult, GetVnicEthVnicInventoryOutputArgs } from "./getVnicEthVnicInventory";
export const getVnicEthVnicInventory: typeof import("./getVnicEthVnicInventory").getVnicEthVnicInventory = null as any;
export const getVnicEthVnicInventoryOutput: typeof import("./getVnicEthVnicInventory").getVnicEthVnicInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getVnicEthVnicInventory","getVnicEthVnicInventoryOutput"], () => require("./getVnicEthVnicInventory"));

export { GetVnicFcAdapterPolicyArgs, GetVnicFcAdapterPolicyResult, GetVnicFcAdapterPolicyOutputArgs } from "./getVnicFcAdapterPolicy";
export const getVnicFcAdapterPolicy: typeof import("./getVnicFcAdapterPolicy").getVnicFcAdapterPolicy = null as any;
export const getVnicFcAdapterPolicyOutput: typeof import("./getVnicFcAdapterPolicy").getVnicFcAdapterPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getVnicFcAdapterPolicy","getVnicFcAdapterPolicyOutput"], () => require("./getVnicFcAdapterPolicy"));

export { GetVnicFcAdapterPolicyInventoryArgs, GetVnicFcAdapterPolicyInventoryResult, GetVnicFcAdapterPolicyInventoryOutputArgs } from "./getVnicFcAdapterPolicyInventory";
export const getVnicFcAdapterPolicyInventory: typeof import("./getVnicFcAdapterPolicyInventory").getVnicFcAdapterPolicyInventory = null as any;
export const getVnicFcAdapterPolicyInventoryOutput: typeof import("./getVnicFcAdapterPolicyInventory").getVnicFcAdapterPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getVnicFcAdapterPolicyInventory","getVnicFcAdapterPolicyInventoryOutput"], () => require("./getVnicFcAdapterPolicyInventory"));

export { GetVnicFcIfArgs, GetVnicFcIfResult, GetVnicFcIfOutputArgs } from "./getVnicFcIf";
export const getVnicFcIf: typeof import("./getVnicFcIf").getVnicFcIf = null as any;
export const getVnicFcIfOutput: typeof import("./getVnicFcIf").getVnicFcIfOutput = null as any;
utilities.lazyLoad(exports, ["getVnicFcIf","getVnicFcIfOutput"], () => require("./getVnicFcIf"));

export { GetVnicFcIfInventoryArgs, GetVnicFcIfInventoryResult, GetVnicFcIfInventoryOutputArgs } from "./getVnicFcIfInventory";
export const getVnicFcIfInventory: typeof import("./getVnicFcIfInventory").getVnicFcIfInventory = null as any;
export const getVnicFcIfInventoryOutput: typeof import("./getVnicFcIfInventory").getVnicFcIfInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getVnicFcIfInventory","getVnicFcIfInventoryOutput"], () => require("./getVnicFcIfInventory"));

export { GetVnicFcNetworkPolicyArgs, GetVnicFcNetworkPolicyResult, GetVnicFcNetworkPolicyOutputArgs } from "./getVnicFcNetworkPolicy";
export const getVnicFcNetworkPolicy: typeof import("./getVnicFcNetworkPolicy").getVnicFcNetworkPolicy = null as any;
export const getVnicFcNetworkPolicyOutput: typeof import("./getVnicFcNetworkPolicy").getVnicFcNetworkPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getVnicFcNetworkPolicy","getVnicFcNetworkPolicyOutput"], () => require("./getVnicFcNetworkPolicy"));

export { GetVnicFcNetworkPolicyInventoryArgs, GetVnicFcNetworkPolicyInventoryResult, GetVnicFcNetworkPolicyInventoryOutputArgs } from "./getVnicFcNetworkPolicyInventory";
export const getVnicFcNetworkPolicyInventory: typeof import("./getVnicFcNetworkPolicyInventory").getVnicFcNetworkPolicyInventory = null as any;
export const getVnicFcNetworkPolicyInventoryOutput: typeof import("./getVnicFcNetworkPolicyInventory").getVnicFcNetworkPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getVnicFcNetworkPolicyInventory","getVnicFcNetworkPolicyInventoryOutput"], () => require("./getVnicFcNetworkPolicyInventory"));

export { GetVnicFcQosPolicyArgs, GetVnicFcQosPolicyResult, GetVnicFcQosPolicyOutputArgs } from "./getVnicFcQosPolicy";
export const getVnicFcQosPolicy: typeof import("./getVnicFcQosPolicy").getVnicFcQosPolicy = null as any;
export const getVnicFcQosPolicyOutput: typeof import("./getVnicFcQosPolicy").getVnicFcQosPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getVnicFcQosPolicy","getVnicFcQosPolicyOutput"], () => require("./getVnicFcQosPolicy"));

export { GetVnicFcQosPolicyInventoryArgs, GetVnicFcQosPolicyInventoryResult, GetVnicFcQosPolicyInventoryOutputArgs } from "./getVnicFcQosPolicyInventory";
export const getVnicFcQosPolicyInventory: typeof import("./getVnicFcQosPolicyInventory").getVnicFcQosPolicyInventory = null as any;
export const getVnicFcQosPolicyInventoryOutput: typeof import("./getVnicFcQosPolicyInventory").getVnicFcQosPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getVnicFcQosPolicyInventory","getVnicFcQosPolicyInventoryOutput"], () => require("./getVnicFcQosPolicyInventory"));

export { GetVnicFcVethInventoryArgs, GetVnicFcVethInventoryResult, GetVnicFcVethInventoryOutputArgs } from "./getVnicFcVethInventory";
export const getVnicFcVethInventory: typeof import("./getVnicFcVethInventory").getVnicFcVethInventory = null as any;
export const getVnicFcVethInventoryOutput: typeof import("./getVnicFcVethInventory").getVnicFcVethInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getVnicFcVethInventory","getVnicFcVethInventoryOutput"], () => require("./getVnicFcVethInventory"));

export { GetVnicFcVhbaPolicyInventoryArgs, GetVnicFcVhbaPolicyInventoryResult, GetVnicFcVhbaPolicyInventoryOutputArgs } from "./getVnicFcVhbaPolicyInventory";
export const getVnicFcVhbaPolicyInventory: typeof import("./getVnicFcVhbaPolicyInventory").getVnicFcVhbaPolicyInventory = null as any;
export const getVnicFcVhbaPolicyInventoryOutput: typeof import("./getVnicFcVhbaPolicyInventory").getVnicFcVhbaPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getVnicFcVhbaPolicyInventory","getVnicFcVhbaPolicyInventoryOutput"], () => require("./getVnicFcVhbaPolicyInventory"));

export { GetVnicIscsiAdapterPolicyArgs, GetVnicIscsiAdapterPolicyResult, GetVnicIscsiAdapterPolicyOutputArgs } from "./getVnicIscsiAdapterPolicy";
export const getVnicIscsiAdapterPolicy: typeof import("./getVnicIscsiAdapterPolicy").getVnicIscsiAdapterPolicy = null as any;
export const getVnicIscsiAdapterPolicyOutput: typeof import("./getVnicIscsiAdapterPolicy").getVnicIscsiAdapterPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getVnicIscsiAdapterPolicy","getVnicIscsiAdapterPolicyOutput"], () => require("./getVnicIscsiAdapterPolicy"));

export { GetVnicIscsiAdapterPolicyInventoryArgs, GetVnicIscsiAdapterPolicyInventoryResult, GetVnicIscsiAdapterPolicyInventoryOutputArgs } from "./getVnicIscsiAdapterPolicyInventory";
export const getVnicIscsiAdapterPolicyInventory: typeof import("./getVnicIscsiAdapterPolicyInventory").getVnicIscsiAdapterPolicyInventory = null as any;
export const getVnicIscsiAdapterPolicyInventoryOutput: typeof import("./getVnicIscsiAdapterPolicyInventory").getVnicIscsiAdapterPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getVnicIscsiAdapterPolicyInventory","getVnicIscsiAdapterPolicyInventoryOutput"], () => require("./getVnicIscsiAdapterPolicyInventory"));

export { GetVnicIscsiBootPolicyArgs, GetVnicIscsiBootPolicyResult, GetVnicIscsiBootPolicyOutputArgs } from "./getVnicIscsiBootPolicy";
export const getVnicIscsiBootPolicy: typeof import("./getVnicIscsiBootPolicy").getVnicIscsiBootPolicy = null as any;
export const getVnicIscsiBootPolicyOutput: typeof import("./getVnicIscsiBootPolicy").getVnicIscsiBootPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getVnicIscsiBootPolicy","getVnicIscsiBootPolicyOutput"], () => require("./getVnicIscsiBootPolicy"));

export { GetVnicIscsiBootPolicyInventoryArgs, GetVnicIscsiBootPolicyInventoryResult, GetVnicIscsiBootPolicyInventoryOutputArgs } from "./getVnicIscsiBootPolicyInventory";
export const getVnicIscsiBootPolicyInventory: typeof import("./getVnicIscsiBootPolicyInventory").getVnicIscsiBootPolicyInventory = null as any;
export const getVnicIscsiBootPolicyInventoryOutput: typeof import("./getVnicIscsiBootPolicyInventory").getVnicIscsiBootPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getVnicIscsiBootPolicyInventory","getVnicIscsiBootPolicyInventoryOutput"], () => require("./getVnicIscsiBootPolicyInventory"));

export { GetVnicIscsiStaticTargetPolicyArgs, GetVnicIscsiStaticTargetPolicyResult, GetVnicIscsiStaticTargetPolicyOutputArgs } from "./getVnicIscsiStaticTargetPolicy";
export const getVnicIscsiStaticTargetPolicy: typeof import("./getVnicIscsiStaticTargetPolicy").getVnicIscsiStaticTargetPolicy = null as any;
export const getVnicIscsiStaticTargetPolicyOutput: typeof import("./getVnicIscsiStaticTargetPolicy").getVnicIscsiStaticTargetPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getVnicIscsiStaticTargetPolicy","getVnicIscsiStaticTargetPolicyOutput"], () => require("./getVnicIscsiStaticTargetPolicy"));

export { GetVnicIscsiStaticTargetPolicyInventoryArgs, GetVnicIscsiStaticTargetPolicyInventoryResult, GetVnicIscsiStaticTargetPolicyInventoryOutputArgs } from "./getVnicIscsiStaticTargetPolicyInventory";
export const getVnicIscsiStaticTargetPolicyInventory: typeof import("./getVnicIscsiStaticTargetPolicyInventory").getVnicIscsiStaticTargetPolicyInventory = null as any;
export const getVnicIscsiStaticTargetPolicyInventoryOutput: typeof import("./getVnicIscsiStaticTargetPolicyInventory").getVnicIscsiStaticTargetPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getVnicIscsiStaticTargetPolicyInventory","getVnicIscsiStaticTargetPolicyInventoryOutput"], () => require("./getVnicIscsiStaticTargetPolicyInventory"));

export { GetVnicLanConnectivityPolicyArgs, GetVnicLanConnectivityPolicyResult, GetVnicLanConnectivityPolicyOutputArgs } from "./getVnicLanConnectivityPolicy";
export const getVnicLanConnectivityPolicy: typeof import("./getVnicLanConnectivityPolicy").getVnicLanConnectivityPolicy = null as any;
export const getVnicLanConnectivityPolicyOutput: typeof import("./getVnicLanConnectivityPolicy").getVnicLanConnectivityPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getVnicLanConnectivityPolicy","getVnicLanConnectivityPolicyOutput"], () => require("./getVnicLanConnectivityPolicy"));

export { GetVnicLanConnectivityPolicyInventoryArgs, GetVnicLanConnectivityPolicyInventoryResult, GetVnicLanConnectivityPolicyInventoryOutputArgs } from "./getVnicLanConnectivityPolicyInventory";
export const getVnicLanConnectivityPolicyInventory: typeof import("./getVnicLanConnectivityPolicyInventory").getVnicLanConnectivityPolicyInventory = null as any;
export const getVnicLanConnectivityPolicyInventoryOutput: typeof import("./getVnicLanConnectivityPolicyInventory").getVnicLanConnectivityPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getVnicLanConnectivityPolicyInventory","getVnicLanConnectivityPolicyInventoryOutput"], () => require("./getVnicLanConnectivityPolicyInventory"));

export { GetVnicLcpStatusArgs, GetVnicLcpStatusResult, GetVnicLcpStatusOutputArgs } from "./getVnicLcpStatus";
export const getVnicLcpStatus: typeof import("./getVnicLcpStatus").getVnicLcpStatus = null as any;
export const getVnicLcpStatusOutput: typeof import("./getVnicLcpStatus").getVnicLcpStatusOutput = null as any;
utilities.lazyLoad(exports, ["getVnicLcpStatus","getVnicLcpStatusOutput"], () => require("./getVnicLcpStatus"));

export { GetVnicSanConnectivityPolicyArgs, GetVnicSanConnectivityPolicyResult, GetVnicSanConnectivityPolicyOutputArgs } from "./getVnicSanConnectivityPolicy";
export const getVnicSanConnectivityPolicy: typeof import("./getVnicSanConnectivityPolicy").getVnicSanConnectivityPolicy = null as any;
export const getVnicSanConnectivityPolicyOutput: typeof import("./getVnicSanConnectivityPolicy").getVnicSanConnectivityPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getVnicSanConnectivityPolicy","getVnicSanConnectivityPolicyOutput"], () => require("./getVnicSanConnectivityPolicy"));

export { GetVnicSanConnectivityPolicyInventoryArgs, GetVnicSanConnectivityPolicyInventoryResult, GetVnicSanConnectivityPolicyInventoryOutputArgs } from "./getVnicSanConnectivityPolicyInventory";
export const getVnicSanConnectivityPolicyInventory: typeof import("./getVnicSanConnectivityPolicyInventory").getVnicSanConnectivityPolicyInventory = null as any;
export const getVnicSanConnectivityPolicyInventoryOutput: typeof import("./getVnicSanConnectivityPolicyInventory").getVnicSanConnectivityPolicyInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getVnicSanConnectivityPolicyInventory","getVnicSanConnectivityPolicyInventoryOutput"], () => require("./getVnicSanConnectivityPolicyInventory"));

export { GetVnicScpStatusArgs, GetVnicScpStatusResult, GetVnicScpStatusOutputArgs } from "./getVnicScpStatus";
export const getVnicScpStatus: typeof import("./getVnicScpStatus").getVnicScpStatus = null as any;
export const getVnicScpStatusOutput: typeof import("./getVnicScpStatus").getVnicScpStatusOutput = null as any;
utilities.lazyLoad(exports, ["getVnicScpStatus","getVnicScpStatusOutput"], () => require("./getVnicScpStatus"));

export { GetVnicVhbaTemplateArgs, GetVnicVhbaTemplateResult, GetVnicVhbaTemplateOutputArgs } from "./getVnicVhbaTemplate";
export const getVnicVhbaTemplate: typeof import("./getVnicVhbaTemplate").getVnicVhbaTemplate = null as any;
export const getVnicVhbaTemplateOutput: typeof import("./getVnicVhbaTemplate").getVnicVhbaTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getVnicVhbaTemplate","getVnicVhbaTemplateOutput"], () => require("./getVnicVhbaTemplate"));

export { GetVnicVnicTemplateArgs, GetVnicVnicTemplateResult, GetVnicVnicTemplateOutputArgs } from "./getVnicVnicTemplate";
export const getVnicVnicTemplate: typeof import("./getVnicVnicTemplate").getVnicVnicTemplate = null as any;
export const getVnicVnicTemplateOutput: typeof import("./getVnicVnicTemplate").getVnicVnicTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getVnicVnicTemplate","getVnicVnicTemplateOutput"], () => require("./getVnicVnicTemplate"));

export { GetVrfVrfArgs, GetVrfVrfResult, GetVrfVrfOutputArgs } from "./getVrfVrf";
export const getVrfVrf: typeof import("./getVrfVrf").getVrfVrf = null as any;
export const getVrfVrfOutput: typeof import("./getVrfVrf").getVrfVrfOutput = null as any;
utilities.lazyLoad(exports, ["getVrfVrf","getVrfVrfOutput"], () => require("./getVrfVrf"));

export { GetWorkflowAnsibleBatchExecutorArgs, GetWorkflowAnsibleBatchExecutorResult, GetWorkflowAnsibleBatchExecutorOutputArgs } from "./getWorkflowAnsibleBatchExecutor";
export const getWorkflowAnsibleBatchExecutor: typeof import("./getWorkflowAnsibleBatchExecutor").getWorkflowAnsibleBatchExecutor = null as any;
export const getWorkflowAnsibleBatchExecutorOutput: typeof import("./getWorkflowAnsibleBatchExecutor").getWorkflowAnsibleBatchExecutorOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowAnsibleBatchExecutor","getWorkflowAnsibleBatchExecutorOutput"], () => require("./getWorkflowAnsibleBatchExecutor"));

export { GetWorkflowBatchApiExecutorArgs, GetWorkflowBatchApiExecutorResult, GetWorkflowBatchApiExecutorOutputArgs } from "./getWorkflowBatchApiExecutor";
export const getWorkflowBatchApiExecutor: typeof import("./getWorkflowBatchApiExecutor").getWorkflowBatchApiExecutor = null as any;
export const getWorkflowBatchApiExecutorOutput: typeof import("./getWorkflowBatchApiExecutor").getWorkflowBatchApiExecutorOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowBatchApiExecutor","getWorkflowBatchApiExecutorOutput"], () => require("./getWorkflowBatchApiExecutor"));

export { GetWorkflowCatalogArgs, GetWorkflowCatalogResult, GetWorkflowCatalogOutputArgs } from "./getWorkflowCatalog";
export const getWorkflowCatalog: typeof import("./getWorkflowCatalog").getWorkflowCatalog = null as any;
export const getWorkflowCatalogOutput: typeof import("./getWorkflowCatalog").getWorkflowCatalogOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowCatalog","getWorkflowCatalogOutput"], () => require("./getWorkflowCatalog"));

export { GetWorkflowCatalogItemDefinitionArgs, GetWorkflowCatalogItemDefinitionResult, GetWorkflowCatalogItemDefinitionOutputArgs } from "./getWorkflowCatalogItemDefinition";
export const getWorkflowCatalogItemDefinition: typeof import("./getWorkflowCatalogItemDefinition").getWorkflowCatalogItemDefinition = null as any;
export const getWorkflowCatalogItemDefinitionOutput: typeof import("./getWorkflowCatalogItemDefinition").getWorkflowCatalogItemDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowCatalogItemDefinition","getWorkflowCatalogItemDefinitionOutput"], () => require("./getWorkflowCatalogItemDefinition"));

export { GetWorkflowCatalogServiceRequestArgs, GetWorkflowCatalogServiceRequestResult, GetWorkflowCatalogServiceRequestOutputArgs } from "./getWorkflowCatalogServiceRequest";
export const getWorkflowCatalogServiceRequest: typeof import("./getWorkflowCatalogServiceRequest").getWorkflowCatalogServiceRequest = null as any;
export const getWorkflowCatalogServiceRequestOutput: typeof import("./getWorkflowCatalogServiceRequest").getWorkflowCatalogServiceRequestOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowCatalogServiceRequest","getWorkflowCatalogServiceRequestOutput"], () => require("./getWorkflowCatalogServiceRequest"));

export { GetWorkflowCustomDataTypeDefinitionArgs, GetWorkflowCustomDataTypeDefinitionResult, GetWorkflowCustomDataTypeDefinitionOutputArgs } from "./getWorkflowCustomDataTypeDefinition";
export const getWorkflowCustomDataTypeDefinition: typeof import("./getWorkflowCustomDataTypeDefinition").getWorkflowCustomDataTypeDefinition = null as any;
export const getWorkflowCustomDataTypeDefinitionOutput: typeof import("./getWorkflowCustomDataTypeDefinition").getWorkflowCustomDataTypeDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowCustomDataTypeDefinition","getWorkflowCustomDataTypeDefinitionOutput"], () => require("./getWorkflowCustomDataTypeDefinition"));

export { GetWorkflowErrorResponseHandlerArgs, GetWorkflowErrorResponseHandlerResult, GetWorkflowErrorResponseHandlerOutputArgs } from "./getWorkflowErrorResponseHandler";
export const getWorkflowErrorResponseHandler: typeof import("./getWorkflowErrorResponseHandler").getWorkflowErrorResponseHandler = null as any;
export const getWorkflowErrorResponseHandlerOutput: typeof import("./getWorkflowErrorResponseHandler").getWorkflowErrorResponseHandlerOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowErrorResponseHandler","getWorkflowErrorResponseHandlerOutput"], () => require("./getWorkflowErrorResponseHandler"));

export { GetWorkflowPowerShellBatchApiExecutorArgs, GetWorkflowPowerShellBatchApiExecutorResult, GetWorkflowPowerShellBatchApiExecutorOutputArgs } from "./getWorkflowPowerShellBatchApiExecutor";
export const getWorkflowPowerShellBatchApiExecutor: typeof import("./getWorkflowPowerShellBatchApiExecutor").getWorkflowPowerShellBatchApiExecutor = null as any;
export const getWorkflowPowerShellBatchApiExecutorOutput: typeof import("./getWorkflowPowerShellBatchApiExecutor").getWorkflowPowerShellBatchApiExecutorOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowPowerShellBatchApiExecutor","getWorkflowPowerShellBatchApiExecutorOutput"], () => require("./getWorkflowPowerShellBatchApiExecutor"));

export { GetWorkflowRollbackWorkflowArgs, GetWorkflowRollbackWorkflowResult, GetWorkflowRollbackWorkflowOutputArgs } from "./getWorkflowRollbackWorkflow";
export const getWorkflowRollbackWorkflow: typeof import("./getWorkflowRollbackWorkflow").getWorkflowRollbackWorkflow = null as any;
export const getWorkflowRollbackWorkflowOutput: typeof import("./getWorkflowRollbackWorkflow").getWorkflowRollbackWorkflowOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowRollbackWorkflow","getWorkflowRollbackWorkflowOutput"], () => require("./getWorkflowRollbackWorkflow"));

export { GetWorkflowServiceItemActionDefinitionArgs, GetWorkflowServiceItemActionDefinitionResult, GetWorkflowServiceItemActionDefinitionOutputArgs } from "./getWorkflowServiceItemActionDefinition";
export const getWorkflowServiceItemActionDefinition: typeof import("./getWorkflowServiceItemActionDefinition").getWorkflowServiceItemActionDefinition = null as any;
export const getWorkflowServiceItemActionDefinitionOutput: typeof import("./getWorkflowServiceItemActionDefinition").getWorkflowServiceItemActionDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowServiceItemActionDefinition","getWorkflowServiceItemActionDefinitionOutput"], () => require("./getWorkflowServiceItemActionDefinition"));

export { GetWorkflowServiceItemActionInstanceArgs, GetWorkflowServiceItemActionInstanceResult, GetWorkflowServiceItemActionInstanceOutputArgs } from "./getWorkflowServiceItemActionInstance";
export const getWorkflowServiceItemActionInstance: typeof import("./getWorkflowServiceItemActionInstance").getWorkflowServiceItemActionInstance = null as any;
export const getWorkflowServiceItemActionInstanceOutput: typeof import("./getWorkflowServiceItemActionInstance").getWorkflowServiceItemActionInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowServiceItemActionInstance","getWorkflowServiceItemActionInstanceOutput"], () => require("./getWorkflowServiceItemActionInstance"));

export { GetWorkflowServiceItemAttributeArgs, GetWorkflowServiceItemAttributeResult, GetWorkflowServiceItemAttributeOutputArgs } from "./getWorkflowServiceItemAttribute";
export const getWorkflowServiceItemAttribute: typeof import("./getWorkflowServiceItemAttribute").getWorkflowServiceItemAttribute = null as any;
export const getWorkflowServiceItemAttributeOutput: typeof import("./getWorkflowServiceItemAttribute").getWorkflowServiceItemAttributeOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowServiceItemAttribute","getWorkflowServiceItemAttributeOutput"], () => require("./getWorkflowServiceItemAttribute"));

export { GetWorkflowServiceItemDefinitionArgs, GetWorkflowServiceItemDefinitionResult, GetWorkflowServiceItemDefinitionOutputArgs } from "./getWorkflowServiceItemDefinition";
export const getWorkflowServiceItemDefinition: typeof import("./getWorkflowServiceItemDefinition").getWorkflowServiceItemDefinition = null as any;
export const getWorkflowServiceItemDefinitionOutput: typeof import("./getWorkflowServiceItemDefinition").getWorkflowServiceItemDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowServiceItemDefinition","getWorkflowServiceItemDefinitionOutput"], () => require("./getWorkflowServiceItemDefinition"));

export { GetWorkflowServiceItemHealthCheckDefinitionArgs, GetWorkflowServiceItemHealthCheckDefinitionResult, GetWorkflowServiceItemHealthCheckDefinitionOutputArgs } from "./getWorkflowServiceItemHealthCheckDefinition";
export const getWorkflowServiceItemHealthCheckDefinition: typeof import("./getWorkflowServiceItemHealthCheckDefinition").getWorkflowServiceItemHealthCheckDefinition = null as any;
export const getWorkflowServiceItemHealthCheckDefinitionOutput: typeof import("./getWorkflowServiceItemHealthCheckDefinition").getWorkflowServiceItemHealthCheckDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowServiceItemHealthCheckDefinition","getWorkflowServiceItemHealthCheckDefinitionOutput"], () => require("./getWorkflowServiceItemHealthCheckDefinition"));

export { GetWorkflowServiceItemHealthCheckExecutionArgs, GetWorkflowServiceItemHealthCheckExecutionResult, GetWorkflowServiceItemHealthCheckExecutionOutputArgs } from "./getWorkflowServiceItemHealthCheckExecution";
export const getWorkflowServiceItemHealthCheckExecution: typeof import("./getWorkflowServiceItemHealthCheckExecution").getWorkflowServiceItemHealthCheckExecution = null as any;
export const getWorkflowServiceItemHealthCheckExecutionOutput: typeof import("./getWorkflowServiceItemHealthCheckExecution").getWorkflowServiceItemHealthCheckExecutionOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowServiceItemHealthCheckExecution","getWorkflowServiceItemHealthCheckExecutionOutput"], () => require("./getWorkflowServiceItemHealthCheckExecution"));

export { GetWorkflowServiceItemInstanceArgs, GetWorkflowServiceItemInstanceResult, GetWorkflowServiceItemInstanceOutputArgs } from "./getWorkflowServiceItemInstance";
export const getWorkflowServiceItemInstance: typeof import("./getWorkflowServiceItemInstance").getWorkflowServiceItemInstance = null as any;
export const getWorkflowServiceItemInstanceOutput: typeof import("./getWorkflowServiceItemInstance").getWorkflowServiceItemInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowServiceItemInstance","getWorkflowServiceItemInstanceOutput"], () => require("./getWorkflowServiceItemInstance"));

export { GetWorkflowServiceItemOutputArgs, GetWorkflowServiceItemOutputResult, GetWorkflowServiceItemOutputOutputArgs } from "./getWorkflowServiceItemOutput";
export const getWorkflowServiceItemOutput: typeof import("./getWorkflowServiceItemOutput").getWorkflowServiceItemOutput = null as any;
export const getWorkflowServiceItemOutputOutput: typeof import("./getWorkflowServiceItemOutput").getWorkflowServiceItemOutputOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowServiceItemOutput","getWorkflowServiceItemOutputOutput"], () => require("./getWorkflowServiceItemOutput"));

export { GetWorkflowSshBatchExecutorArgs, GetWorkflowSshBatchExecutorResult, GetWorkflowSshBatchExecutorOutputArgs } from "./getWorkflowSshBatchExecutor";
export const getWorkflowSshBatchExecutor: typeof import("./getWorkflowSshBatchExecutor").getWorkflowSshBatchExecutor = null as any;
export const getWorkflowSshBatchExecutorOutput: typeof import("./getWorkflowSshBatchExecutor").getWorkflowSshBatchExecutorOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowSshBatchExecutor","getWorkflowSshBatchExecutorOutput"], () => require("./getWorkflowSshBatchExecutor"));

export { GetWorkflowTaskDebugLogArgs, GetWorkflowTaskDebugLogResult, GetWorkflowTaskDebugLogOutputArgs } from "./getWorkflowTaskDebugLog";
export const getWorkflowTaskDebugLog: typeof import("./getWorkflowTaskDebugLog").getWorkflowTaskDebugLog = null as any;
export const getWorkflowTaskDebugLogOutput: typeof import("./getWorkflowTaskDebugLog").getWorkflowTaskDebugLogOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowTaskDebugLog","getWorkflowTaskDebugLogOutput"], () => require("./getWorkflowTaskDebugLog"));

export { GetWorkflowTaskDefinitionArgs, GetWorkflowTaskDefinitionResult, GetWorkflowTaskDefinitionOutputArgs } from "./getWorkflowTaskDefinition";
export const getWorkflowTaskDefinition: typeof import("./getWorkflowTaskDefinition").getWorkflowTaskDefinition = null as any;
export const getWorkflowTaskDefinitionOutput: typeof import("./getWorkflowTaskDefinition").getWorkflowTaskDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowTaskDefinition","getWorkflowTaskDefinitionOutput"], () => require("./getWorkflowTaskDefinition"));

export { GetWorkflowTaskInfoArgs, GetWorkflowTaskInfoResult, GetWorkflowTaskInfoOutputArgs } from "./getWorkflowTaskInfo";
export const getWorkflowTaskInfo: typeof import("./getWorkflowTaskInfo").getWorkflowTaskInfo = null as any;
export const getWorkflowTaskInfoOutput: typeof import("./getWorkflowTaskInfo").getWorkflowTaskInfoOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowTaskInfo","getWorkflowTaskInfoOutput"], () => require("./getWorkflowTaskInfo"));

export { GetWorkflowTaskMetadataArgs, GetWorkflowTaskMetadataResult, GetWorkflowTaskMetadataOutputArgs } from "./getWorkflowTaskMetadata";
export const getWorkflowTaskMetadata: typeof import("./getWorkflowTaskMetadata").getWorkflowTaskMetadata = null as any;
export const getWorkflowTaskMetadataOutput: typeof import("./getWorkflowTaskMetadata").getWorkflowTaskMetadataOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowTaskMetadata","getWorkflowTaskMetadataOutput"], () => require("./getWorkflowTaskMetadata"));

export { GetWorkflowTemplateFunctionMetaArgs, GetWorkflowTemplateFunctionMetaResult, GetWorkflowTemplateFunctionMetaOutputArgs } from "./getWorkflowTemplateFunctionMeta";
export const getWorkflowTemplateFunctionMeta: typeof import("./getWorkflowTemplateFunctionMeta").getWorkflowTemplateFunctionMeta = null as any;
export const getWorkflowTemplateFunctionMetaOutput: typeof import("./getWorkflowTemplateFunctionMeta").getWorkflowTemplateFunctionMetaOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowTemplateFunctionMeta","getWorkflowTemplateFunctionMetaOutput"], () => require("./getWorkflowTemplateFunctionMeta"));

export { GetWorkflowUiDisplayMetadataArgs, GetWorkflowUiDisplayMetadataResult, GetWorkflowUiDisplayMetadataOutputArgs } from "./getWorkflowUiDisplayMetadata";
export const getWorkflowUiDisplayMetadata: typeof import("./getWorkflowUiDisplayMetadata").getWorkflowUiDisplayMetadata = null as any;
export const getWorkflowUiDisplayMetadataOutput: typeof import("./getWorkflowUiDisplayMetadata").getWorkflowUiDisplayMetadataOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowUiDisplayMetadata","getWorkflowUiDisplayMetadataOutput"], () => require("./getWorkflowUiDisplayMetadata"));

export { GetWorkflowWorkflowDefinitionArgs, GetWorkflowWorkflowDefinitionResult, GetWorkflowWorkflowDefinitionOutputArgs } from "./getWorkflowWorkflowDefinition";
export const getWorkflowWorkflowDefinition: typeof import("./getWorkflowWorkflowDefinition").getWorkflowWorkflowDefinition = null as any;
export const getWorkflowWorkflowDefinitionOutput: typeof import("./getWorkflowWorkflowDefinition").getWorkflowWorkflowDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowWorkflowDefinition","getWorkflowWorkflowDefinitionOutput"], () => require("./getWorkflowWorkflowDefinition"));

export { GetWorkflowWorkflowInfoArgs, GetWorkflowWorkflowInfoResult, GetWorkflowWorkflowInfoOutputArgs } from "./getWorkflowWorkflowInfo";
export const getWorkflowWorkflowInfo: typeof import("./getWorkflowWorkflowInfo").getWorkflowWorkflowInfo = null as any;
export const getWorkflowWorkflowInfoOutput: typeof import("./getWorkflowWorkflowInfo").getWorkflowWorkflowInfoOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowWorkflowInfo","getWorkflowWorkflowInfoOutput"], () => require("./getWorkflowWorkflowInfo"));

export { GetWorkflowWorkflowMetadataArgs, GetWorkflowWorkflowMetadataResult, GetWorkflowWorkflowMetadataOutputArgs } from "./getWorkflowWorkflowMetadata";
export const getWorkflowWorkflowMetadata: typeof import("./getWorkflowWorkflowMetadata").getWorkflowWorkflowMetadata = null as any;
export const getWorkflowWorkflowMetadataOutput: typeof import("./getWorkflowWorkflowMetadata").getWorkflowWorkflowMetadataOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowWorkflowMetadata","getWorkflowWorkflowMetadataOutput"], () => require("./getWorkflowWorkflowMetadata"));

export { GetWorkspaceFolderArgs, GetWorkspaceFolderResult, GetWorkspaceFolderOutputArgs } from "./getWorkspaceFolder";
export const getWorkspaceFolder: typeof import("./getWorkspaceFolder").getWorkspaceFolder = null as any;
export const getWorkspaceFolderOutput: typeof import("./getWorkspaceFolder").getWorkspaceFolderOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceFolder","getWorkspaceFolderOutput"], () => require("./getWorkspaceFolder"));

export { HclCompatibilityStatusArgs, HclCompatibilityStatusState } from "./hclCompatibilityStatus";
export type HclCompatibilityStatus = import("./hclCompatibilityStatus").HclCompatibilityStatus;
export const HclCompatibilityStatus: typeof import("./hclCompatibilityStatus").HclCompatibilityStatus = null as any;
utilities.lazyLoad(exports, ["HclCompatibilityStatus"], () => require("./hclCompatibilityStatus"));

export { HclHyperflexSoftwareCompatibilityInfoArgs, HclHyperflexSoftwareCompatibilityInfoState } from "./hclHyperflexSoftwareCompatibilityInfo";
export type HclHyperflexSoftwareCompatibilityInfo = import("./hclHyperflexSoftwareCompatibilityInfo").HclHyperflexSoftwareCompatibilityInfo;
export const HclHyperflexSoftwareCompatibilityInfo: typeof import("./hclHyperflexSoftwareCompatibilityInfo").HclHyperflexSoftwareCompatibilityInfo = null as any;
utilities.lazyLoad(exports, ["HclHyperflexSoftwareCompatibilityInfo"], () => require("./hclHyperflexSoftwareCompatibilityInfo"));

export { HclSupportedDriverNameArgs, HclSupportedDriverNameState } from "./hclSupportedDriverName";
export type HclSupportedDriverName = import("./hclSupportedDriverName").HclSupportedDriverName;
export const HclSupportedDriverName: typeof import("./hclSupportedDriverName").HclSupportedDriverName = null as any;
utilities.lazyLoad(exports, ["HclSupportedDriverName"], () => require("./hclSupportedDriverName"));

export { HyperflexAppCatalogArgs, HyperflexAppCatalogState } from "./hyperflexAppCatalog";
export type HyperflexAppCatalog = import("./hyperflexAppCatalog").HyperflexAppCatalog;
export const HyperflexAppCatalog: typeof import("./hyperflexAppCatalog").HyperflexAppCatalog = null as any;
utilities.lazyLoad(exports, ["HyperflexAppCatalog"], () => require("./hyperflexAppCatalog"));

export { HyperflexAutoSupportPolicyArgs, HyperflexAutoSupportPolicyState } from "./hyperflexAutoSupportPolicy";
export type HyperflexAutoSupportPolicy = import("./hyperflexAutoSupportPolicy").HyperflexAutoSupportPolicy;
export const HyperflexAutoSupportPolicy: typeof import("./hyperflexAutoSupportPolicy").HyperflexAutoSupportPolicy = null as any;
utilities.lazyLoad(exports, ["HyperflexAutoSupportPolicy"], () => require("./hyperflexAutoSupportPolicy"));

export { HyperflexCapabilityInfoArgs, HyperflexCapabilityInfoState } from "./hyperflexCapabilityInfo";
export type HyperflexCapabilityInfo = import("./hyperflexCapabilityInfo").HyperflexCapabilityInfo;
export const HyperflexCapabilityInfo: typeof import("./hyperflexCapabilityInfo").HyperflexCapabilityInfo = null as any;
utilities.lazyLoad(exports, ["HyperflexCapabilityInfo"], () => require("./hyperflexCapabilityInfo"));

export { HyperflexClusterBackupPolicyArgs, HyperflexClusterBackupPolicyState } from "./hyperflexClusterBackupPolicy";
export type HyperflexClusterBackupPolicy = import("./hyperflexClusterBackupPolicy").HyperflexClusterBackupPolicy;
export const HyperflexClusterBackupPolicy: typeof import("./hyperflexClusterBackupPolicy").HyperflexClusterBackupPolicy = null as any;
utilities.lazyLoad(exports, ["HyperflexClusterBackupPolicy"], () => require("./hyperflexClusterBackupPolicy"));

export { HyperflexClusterBackupPolicyDeploymentArgs, HyperflexClusterBackupPolicyDeploymentState } from "./hyperflexClusterBackupPolicyDeployment";
export type HyperflexClusterBackupPolicyDeployment = import("./hyperflexClusterBackupPolicyDeployment").HyperflexClusterBackupPolicyDeployment;
export const HyperflexClusterBackupPolicyDeployment: typeof import("./hyperflexClusterBackupPolicyDeployment").HyperflexClusterBackupPolicyDeployment = null as any;
utilities.lazyLoad(exports, ["HyperflexClusterBackupPolicyDeployment"], () => require("./hyperflexClusterBackupPolicyDeployment"));

export { HyperflexClusterNetworkPolicyArgs, HyperflexClusterNetworkPolicyState } from "./hyperflexClusterNetworkPolicy";
export type HyperflexClusterNetworkPolicy = import("./hyperflexClusterNetworkPolicy").HyperflexClusterNetworkPolicy;
export const HyperflexClusterNetworkPolicy: typeof import("./hyperflexClusterNetworkPolicy").HyperflexClusterNetworkPolicy = null as any;
utilities.lazyLoad(exports, ["HyperflexClusterNetworkPolicy"], () => require("./hyperflexClusterNetworkPolicy"));

export { HyperflexClusterProfileArgs, HyperflexClusterProfileState } from "./hyperflexClusterProfile";
export type HyperflexClusterProfile = import("./hyperflexClusterProfile").HyperflexClusterProfile;
export const HyperflexClusterProfile: typeof import("./hyperflexClusterProfile").HyperflexClusterProfile = null as any;
utilities.lazyLoad(exports, ["HyperflexClusterProfile"], () => require("./hyperflexClusterProfile"));

export { HyperflexClusterReplicationNetworkPolicyArgs, HyperflexClusterReplicationNetworkPolicyState } from "./hyperflexClusterReplicationNetworkPolicy";
export type HyperflexClusterReplicationNetworkPolicy = import("./hyperflexClusterReplicationNetworkPolicy").HyperflexClusterReplicationNetworkPolicy;
export const HyperflexClusterReplicationNetworkPolicy: typeof import("./hyperflexClusterReplicationNetworkPolicy").HyperflexClusterReplicationNetworkPolicy = null as any;
utilities.lazyLoad(exports, ["HyperflexClusterReplicationNetworkPolicy"], () => require("./hyperflexClusterReplicationNetworkPolicy"));

export { HyperflexClusterReplicationNetworkPolicyDeploymentArgs, HyperflexClusterReplicationNetworkPolicyDeploymentState } from "./hyperflexClusterReplicationNetworkPolicyDeployment";
export type HyperflexClusterReplicationNetworkPolicyDeployment = import("./hyperflexClusterReplicationNetworkPolicyDeployment").HyperflexClusterReplicationNetworkPolicyDeployment;
export const HyperflexClusterReplicationNetworkPolicyDeployment: typeof import("./hyperflexClusterReplicationNetworkPolicyDeployment").HyperflexClusterReplicationNetworkPolicyDeployment = null as any;
utilities.lazyLoad(exports, ["HyperflexClusterReplicationNetworkPolicyDeployment"], () => require("./hyperflexClusterReplicationNetworkPolicyDeployment"));

export { HyperflexClusterStoragePolicyArgs, HyperflexClusterStoragePolicyState } from "./hyperflexClusterStoragePolicy";
export type HyperflexClusterStoragePolicy = import("./hyperflexClusterStoragePolicy").HyperflexClusterStoragePolicy;
export const HyperflexClusterStoragePolicy: typeof import("./hyperflexClusterStoragePolicy").HyperflexClusterStoragePolicy = null as any;
utilities.lazyLoad(exports, ["HyperflexClusterStoragePolicy"], () => require("./hyperflexClusterStoragePolicy"));

export { HyperflexExtFcStoragePolicyArgs, HyperflexExtFcStoragePolicyState } from "./hyperflexExtFcStoragePolicy";
export type HyperflexExtFcStoragePolicy = import("./hyperflexExtFcStoragePolicy").HyperflexExtFcStoragePolicy;
export const HyperflexExtFcStoragePolicy: typeof import("./hyperflexExtFcStoragePolicy").HyperflexExtFcStoragePolicy = null as any;
utilities.lazyLoad(exports, ["HyperflexExtFcStoragePolicy"], () => require("./hyperflexExtFcStoragePolicy"));

export { HyperflexExtIscsiStoragePolicyArgs, HyperflexExtIscsiStoragePolicyState } from "./hyperflexExtIscsiStoragePolicy";
export type HyperflexExtIscsiStoragePolicy = import("./hyperflexExtIscsiStoragePolicy").HyperflexExtIscsiStoragePolicy;
export const HyperflexExtIscsiStoragePolicy: typeof import("./hyperflexExtIscsiStoragePolicy").HyperflexExtIscsiStoragePolicy = null as any;
utilities.lazyLoad(exports, ["HyperflexExtIscsiStoragePolicy"], () => require("./hyperflexExtIscsiStoragePolicy"));

export { HyperflexFeatureLimitExternalArgs, HyperflexFeatureLimitExternalState } from "./hyperflexFeatureLimitExternal";
export type HyperflexFeatureLimitExternal = import("./hyperflexFeatureLimitExternal").HyperflexFeatureLimitExternal;
export const HyperflexFeatureLimitExternal: typeof import("./hyperflexFeatureLimitExternal").HyperflexFeatureLimitExternal = null as any;
utilities.lazyLoad(exports, ["HyperflexFeatureLimitExternal"], () => require("./hyperflexFeatureLimitExternal"));

export { HyperflexFeatureLimitInternalArgs, HyperflexFeatureLimitInternalState } from "./hyperflexFeatureLimitInternal";
export type HyperflexFeatureLimitInternal = import("./hyperflexFeatureLimitInternal").HyperflexFeatureLimitInternal;
export const HyperflexFeatureLimitInternal: typeof import("./hyperflexFeatureLimitInternal").HyperflexFeatureLimitInternal = null as any;
utilities.lazyLoad(exports, ["HyperflexFeatureLimitInternal"], () => require("./hyperflexFeatureLimitInternal"));

export { HyperflexHealthCheckDefinitionArgs, HyperflexHealthCheckDefinitionState } from "./hyperflexHealthCheckDefinition";
export type HyperflexHealthCheckDefinition = import("./hyperflexHealthCheckDefinition").HyperflexHealthCheckDefinition;
export const HyperflexHealthCheckDefinition: typeof import("./hyperflexHealthCheckDefinition").HyperflexHealthCheckDefinition = null as any;
utilities.lazyLoad(exports, ["HyperflexHealthCheckDefinition"], () => require("./hyperflexHealthCheckDefinition"));

export { HyperflexHealthCheckPackageChecksumArgs, HyperflexHealthCheckPackageChecksumState } from "./hyperflexHealthCheckPackageChecksum";
export type HyperflexHealthCheckPackageChecksum = import("./hyperflexHealthCheckPackageChecksum").HyperflexHealthCheckPackageChecksum;
export const HyperflexHealthCheckPackageChecksum: typeof import("./hyperflexHealthCheckPackageChecksum").HyperflexHealthCheckPackageChecksum = null as any;
utilities.lazyLoad(exports, ["HyperflexHealthCheckPackageChecksum"], () => require("./hyperflexHealthCheckPackageChecksum"));

export { HyperflexHxdpVersionArgs, HyperflexHxdpVersionState } from "./hyperflexHxdpVersion";
export type HyperflexHxdpVersion = import("./hyperflexHxdpVersion").HyperflexHxdpVersion;
export const HyperflexHxdpVersion: typeof import("./hyperflexHxdpVersion").HyperflexHxdpVersion = null as any;
utilities.lazyLoad(exports, ["HyperflexHxdpVersion"], () => require("./hyperflexHxdpVersion"));

export { HyperflexKeyEncryptionKeyArgs, HyperflexKeyEncryptionKeyState } from "./hyperflexKeyEncryptionKey";
export type HyperflexKeyEncryptionKey = import("./hyperflexKeyEncryptionKey").HyperflexKeyEncryptionKey;
export const HyperflexKeyEncryptionKey: typeof import("./hyperflexKeyEncryptionKey").HyperflexKeyEncryptionKey = null as any;
utilities.lazyLoad(exports, ["HyperflexKeyEncryptionKey"], () => require("./hyperflexKeyEncryptionKey"));

export { HyperflexLocalCredentialPolicyArgs, HyperflexLocalCredentialPolicyState } from "./hyperflexLocalCredentialPolicy";
export type HyperflexLocalCredentialPolicy = import("./hyperflexLocalCredentialPolicy").HyperflexLocalCredentialPolicy;
export const HyperflexLocalCredentialPolicy: typeof import("./hyperflexLocalCredentialPolicy").HyperflexLocalCredentialPolicy = null as any;
utilities.lazyLoad(exports, ["HyperflexLocalCredentialPolicy"], () => require("./hyperflexLocalCredentialPolicy"));

export { HyperflexNodeConfigPolicyArgs, HyperflexNodeConfigPolicyState } from "./hyperflexNodeConfigPolicy";
export type HyperflexNodeConfigPolicy = import("./hyperflexNodeConfigPolicy").HyperflexNodeConfigPolicy;
export const HyperflexNodeConfigPolicy: typeof import("./hyperflexNodeConfigPolicy").HyperflexNodeConfigPolicy = null as any;
utilities.lazyLoad(exports, ["HyperflexNodeConfigPolicy"], () => require("./hyperflexNodeConfigPolicy"));

export { HyperflexNodeProfileArgs, HyperflexNodeProfileState } from "./hyperflexNodeProfile";
export type HyperflexNodeProfile = import("./hyperflexNodeProfile").HyperflexNodeProfile;
export const HyperflexNodeProfile: typeof import("./hyperflexNodeProfile").HyperflexNodeProfile = null as any;
utilities.lazyLoad(exports, ["HyperflexNodeProfile"], () => require("./hyperflexNodeProfile"));

export { HyperflexProxySettingPolicyArgs, HyperflexProxySettingPolicyState } from "./hyperflexProxySettingPolicy";
export type HyperflexProxySettingPolicy = import("./hyperflexProxySettingPolicy").HyperflexProxySettingPolicy;
export const HyperflexProxySettingPolicy: typeof import("./hyperflexProxySettingPolicy").HyperflexProxySettingPolicy = null as any;
utilities.lazyLoad(exports, ["HyperflexProxySettingPolicy"], () => require("./hyperflexProxySettingPolicy"));

export { HyperflexReduceReSyncArgs, HyperflexReduceReSyncState } from "./hyperflexReduceReSync";
export type HyperflexReduceReSync = import("./hyperflexReduceReSync").HyperflexReduceReSync;
export const HyperflexReduceReSync: typeof import("./hyperflexReduceReSync").HyperflexReduceReSync = null as any;
utilities.lazyLoad(exports, ["HyperflexReduceReSync"], () => require("./hyperflexReduceReSync"));

export { HyperflexServerFirmwareVersionArgs, HyperflexServerFirmwareVersionState } from "./hyperflexServerFirmwareVersion";
export type HyperflexServerFirmwareVersion = import("./hyperflexServerFirmwareVersion").HyperflexServerFirmwareVersion;
export const HyperflexServerFirmwareVersion: typeof import("./hyperflexServerFirmwareVersion").HyperflexServerFirmwareVersion = null as any;
utilities.lazyLoad(exports, ["HyperflexServerFirmwareVersion"], () => require("./hyperflexServerFirmwareVersion"));

export { HyperflexServerFirmwareVersionEntryArgs, HyperflexServerFirmwareVersionEntryState } from "./hyperflexServerFirmwareVersionEntry";
export type HyperflexServerFirmwareVersionEntry = import("./hyperflexServerFirmwareVersionEntry").HyperflexServerFirmwareVersionEntry;
export const HyperflexServerFirmwareVersionEntry: typeof import("./hyperflexServerFirmwareVersionEntry").HyperflexServerFirmwareVersionEntry = null as any;
utilities.lazyLoad(exports, ["HyperflexServerFirmwareVersionEntry"], () => require("./hyperflexServerFirmwareVersionEntry"));

export { HyperflexServerModelArgs, HyperflexServerModelState } from "./hyperflexServerModel";
export type HyperflexServerModel = import("./hyperflexServerModel").HyperflexServerModel;
export const HyperflexServerModel: typeof import("./hyperflexServerModel").HyperflexServerModel = null as any;
utilities.lazyLoad(exports, ["HyperflexServerModel"], () => require("./hyperflexServerModel"));

export { HyperflexServiceAuthTokenArgs, HyperflexServiceAuthTokenState } from "./hyperflexServiceAuthToken";
export type HyperflexServiceAuthToken = import("./hyperflexServiceAuthToken").HyperflexServiceAuthToken;
export const HyperflexServiceAuthToken: typeof import("./hyperflexServiceAuthToken").HyperflexServiceAuthToken = null as any;
utilities.lazyLoad(exports, ["HyperflexServiceAuthToken"], () => require("./hyperflexServiceAuthToken"));

export { HyperflexSoftwareDistributionComponentArgs, HyperflexSoftwareDistributionComponentState } from "./hyperflexSoftwareDistributionComponent";
export type HyperflexSoftwareDistributionComponent = import("./hyperflexSoftwareDistributionComponent").HyperflexSoftwareDistributionComponent;
export const HyperflexSoftwareDistributionComponent: typeof import("./hyperflexSoftwareDistributionComponent").HyperflexSoftwareDistributionComponent = null as any;
utilities.lazyLoad(exports, ["HyperflexSoftwareDistributionComponent"], () => require("./hyperflexSoftwareDistributionComponent"));

export { HyperflexSoftwareDistributionEntryArgs, HyperflexSoftwareDistributionEntryState } from "./hyperflexSoftwareDistributionEntry";
export type HyperflexSoftwareDistributionEntry = import("./hyperflexSoftwareDistributionEntry").HyperflexSoftwareDistributionEntry;
export const HyperflexSoftwareDistributionEntry: typeof import("./hyperflexSoftwareDistributionEntry").HyperflexSoftwareDistributionEntry = null as any;
utilities.lazyLoad(exports, ["HyperflexSoftwareDistributionEntry"], () => require("./hyperflexSoftwareDistributionEntry"));

export { HyperflexSoftwareDistributionVersionArgs, HyperflexSoftwareDistributionVersionState } from "./hyperflexSoftwareDistributionVersion";
export type HyperflexSoftwareDistributionVersion = import("./hyperflexSoftwareDistributionVersion").HyperflexSoftwareDistributionVersion;
export const HyperflexSoftwareDistributionVersion: typeof import("./hyperflexSoftwareDistributionVersion").HyperflexSoftwareDistributionVersion = null as any;
utilities.lazyLoad(exports, ["HyperflexSoftwareDistributionVersion"], () => require("./hyperflexSoftwareDistributionVersion"));

export { HyperflexSoftwareVersionPolicyArgs, HyperflexSoftwareVersionPolicyState } from "./hyperflexSoftwareVersionPolicy";
export type HyperflexSoftwareVersionPolicy = import("./hyperflexSoftwareVersionPolicy").HyperflexSoftwareVersionPolicy;
export const HyperflexSoftwareVersionPolicy: typeof import("./hyperflexSoftwareVersionPolicy").HyperflexSoftwareVersionPolicy = null as any;
utilities.lazyLoad(exports, ["HyperflexSoftwareVersionPolicy"], () => require("./hyperflexSoftwareVersionPolicy"));

export { HyperflexStartReduceReSyncArgs, HyperflexStartReduceReSyncState } from "./hyperflexStartReduceReSync";
export type HyperflexStartReduceReSync = import("./hyperflexStartReduceReSync").HyperflexStartReduceReSync;
export const HyperflexStartReduceReSync: typeof import("./hyperflexStartReduceReSync").HyperflexStartReduceReSync = null as any;
utilities.lazyLoad(exports, ["HyperflexStartReduceReSync"], () => require("./hyperflexStartReduceReSync"));

export { HyperflexSysConfigPolicyArgs, HyperflexSysConfigPolicyState } from "./hyperflexSysConfigPolicy";
export type HyperflexSysConfigPolicy = import("./hyperflexSysConfigPolicy").HyperflexSysConfigPolicy;
export const HyperflexSysConfigPolicy: typeof import("./hyperflexSysConfigPolicy").HyperflexSysConfigPolicy = null as any;
utilities.lazyLoad(exports, ["HyperflexSysConfigPolicy"], () => require("./hyperflexSysConfigPolicy"));

export { HyperflexUcsmConfigPolicyArgs, HyperflexUcsmConfigPolicyState } from "./hyperflexUcsmConfigPolicy";
export type HyperflexUcsmConfigPolicy = import("./hyperflexUcsmConfigPolicy").HyperflexUcsmConfigPolicy;
export const HyperflexUcsmConfigPolicy: typeof import("./hyperflexUcsmConfigPolicy").HyperflexUcsmConfigPolicy = null as any;
utilities.lazyLoad(exports, ["HyperflexUcsmConfigPolicy"], () => require("./hyperflexUcsmConfigPolicy"));

export { HyperflexVcenterConfigPolicyArgs, HyperflexVcenterConfigPolicyState } from "./hyperflexVcenterConfigPolicy";
export type HyperflexVcenterConfigPolicy = import("./hyperflexVcenterConfigPolicy").HyperflexVcenterConfigPolicy;
export const HyperflexVcenterConfigPolicy: typeof import("./hyperflexVcenterConfigPolicy").HyperflexVcenterConfigPolicy = null as any;
utilities.lazyLoad(exports, ["HyperflexVcenterConfigPolicy"], () => require("./hyperflexVcenterConfigPolicy"));

export { HyperflexVmImportOperationArgs, HyperflexVmImportOperationState } from "./hyperflexVmImportOperation";
export type HyperflexVmImportOperation = import("./hyperflexVmImportOperation").HyperflexVmImportOperation;
export const HyperflexVmImportOperation: typeof import("./hyperflexVmImportOperation").HyperflexVmImportOperation = null as any;
utilities.lazyLoad(exports, ["HyperflexVmImportOperation"], () => require("./hyperflexVmImportOperation"));

export { HyperflexVmRestoreOperationArgs, HyperflexVmRestoreOperationState } from "./hyperflexVmRestoreOperation";
export type HyperflexVmRestoreOperation = import("./hyperflexVmRestoreOperation").HyperflexVmRestoreOperation;
export const HyperflexVmRestoreOperation: typeof import("./hyperflexVmRestoreOperation").HyperflexVmRestoreOperation = null as any;
utilities.lazyLoad(exports, ["HyperflexVmRestoreOperation"], () => require("./hyperflexVmRestoreOperation"));

export { IamAccountArgs, IamAccountState } from "./iamAccount";
export type IamAccount = import("./iamAccount").IamAccount;
export const IamAccount: typeof import("./iamAccount").IamAccount = null as any;
utilities.lazyLoad(exports, ["IamAccount"], () => require("./iamAccount"));

export { IamAccountExperienceArgs, IamAccountExperienceState } from "./iamAccountExperience";
export type IamAccountExperience = import("./iamAccountExperience").IamAccountExperience;
export const IamAccountExperience: typeof import("./iamAccountExperience").IamAccountExperience = null as any;
utilities.lazyLoad(exports, ["IamAccountExperience"], () => require("./iamAccountExperience"));

export { IamApiKeyArgs, IamApiKeyState } from "./iamApiKey";
export type IamApiKey = import("./iamApiKey").IamApiKey;
export const IamApiKey: typeof import("./iamApiKey").IamApiKey = null as any;
utilities.lazyLoad(exports, ["IamApiKey"], () => require("./iamApiKey"));

export { IamAppRegistrationArgs, IamAppRegistrationState } from "./iamAppRegistration";
export type IamAppRegistration = import("./iamAppRegistration").IamAppRegistration;
export const IamAppRegistration: typeof import("./iamAppRegistration").IamAppRegistration = null as any;
utilities.lazyLoad(exports, ["IamAppRegistration"], () => require("./iamAppRegistration"));

export { IamCertificateArgs, IamCertificateState } from "./iamCertificate";
export type IamCertificate = import("./iamCertificate").IamCertificate;
export const IamCertificate: typeof import("./iamCertificate").IamCertificate = null as any;
utilities.lazyLoad(exports, ["IamCertificate"], () => require("./iamCertificate"));

export { IamCertificateRequestArgs, IamCertificateRequestState } from "./iamCertificateRequest";
export type IamCertificateRequest = import("./iamCertificateRequest").IamCertificateRequest;
export const IamCertificateRequest: typeof import("./iamCertificateRequest").IamCertificateRequest = null as any;
utilities.lazyLoad(exports, ["IamCertificateRequest"], () => require("./iamCertificateRequest"));

export { IamDomainNameInfoArgs, IamDomainNameInfoState } from "./iamDomainNameInfo";
export type IamDomainNameInfo = import("./iamDomainNameInfo").IamDomainNameInfo;
export const IamDomainNameInfo: typeof import("./iamDomainNameInfo").IamDomainNameInfo = null as any;
utilities.lazyLoad(exports, ["IamDomainNameInfo"], () => require("./iamDomainNameInfo"));

export { IamEndPointUserArgs, IamEndPointUserState } from "./iamEndPointUser";
export type IamEndPointUser = import("./iamEndPointUser").IamEndPointUser;
export const IamEndPointUser: typeof import("./iamEndPointUser").IamEndPointUser = null as any;
utilities.lazyLoad(exports, ["IamEndPointUser"], () => require("./iamEndPointUser"));

export { IamEndPointUserPolicyArgs, IamEndPointUserPolicyState } from "./iamEndPointUserPolicy";
export type IamEndPointUserPolicy = import("./iamEndPointUserPolicy").IamEndPointUserPolicy;
export const IamEndPointUserPolicy: typeof import("./iamEndPointUserPolicy").IamEndPointUserPolicy = null as any;
utilities.lazyLoad(exports, ["IamEndPointUserPolicy"], () => require("./iamEndPointUserPolicy"));

export { IamEndPointUserRoleArgs, IamEndPointUserRoleState } from "./iamEndPointUserRole";
export type IamEndPointUserRole = import("./iamEndPointUserRole").IamEndPointUserRole;
export const IamEndPointUserRole: typeof import("./iamEndPointUserRole").IamEndPointUserRole = null as any;
utilities.lazyLoad(exports, ["IamEndPointUserRole"], () => require("./iamEndPointUserRole"));

export { IamIdpArgs, IamIdpState } from "./iamIdp";
export type IamIdp = import("./iamIdp").IamIdp;
export const IamIdp: typeof import("./iamIdp").IamIdp = null as any;
utilities.lazyLoad(exports, ["IamIdp"], () => require("./iamIdp"));

export { IamIpAccessManagementArgs, IamIpAccessManagementState } from "./iamIpAccessManagement";
export type IamIpAccessManagement = import("./iamIpAccessManagement").IamIpAccessManagement;
export const IamIpAccessManagement: typeof import("./iamIpAccessManagement").IamIpAccessManagement = null as any;
utilities.lazyLoad(exports, ["IamIpAccessManagement"], () => require("./iamIpAccessManagement"));

export { IamIpAddressArgs, IamIpAddressState } from "./iamIpAddress";
export type IamIpAddress = import("./iamIpAddress").IamIpAddress;
export const IamIpAddress: typeof import("./iamIpAddress").IamIpAddress = null as any;
utilities.lazyLoad(exports, ["IamIpAddress"], () => require("./iamIpAddress"));

export { IamLdapGroupArgs, IamLdapGroupState } from "./iamLdapGroup";
export type IamLdapGroup = import("./iamLdapGroup").IamLdapGroup;
export const IamLdapGroup: typeof import("./iamLdapGroup").IamLdapGroup = null as any;
utilities.lazyLoad(exports, ["IamLdapGroup"], () => require("./iamLdapGroup"));

export { IamLdapPolicyArgs, IamLdapPolicyState } from "./iamLdapPolicy";
export type IamLdapPolicy = import("./iamLdapPolicy").IamLdapPolicy;
export const IamLdapPolicy: typeof import("./iamLdapPolicy").IamLdapPolicy = null as any;
utilities.lazyLoad(exports, ["IamLdapPolicy"], () => require("./iamLdapPolicy"));

export { IamLdapProviderArgs, IamLdapProviderState } from "./iamLdapProvider";
export type IamLdapProvider = import("./iamLdapProvider").IamLdapProvider;
export const IamLdapProvider: typeof import("./iamLdapProvider").IamLdapProvider = null as any;
utilities.lazyLoad(exports, ["IamLdapProvider"], () => require("./iamLdapProvider"));

export { IamLocalUserPasswordArgs, IamLocalUserPasswordState } from "./iamLocalUserPassword";
export type IamLocalUserPassword = import("./iamLocalUserPassword").IamLocalUserPassword;
export const IamLocalUserPassword: typeof import("./iamLocalUserPassword").IamLocalUserPassword = null as any;
utilities.lazyLoad(exports, ["IamLocalUserPassword"], () => require("./iamLocalUserPassword"));

export { IamPermissionArgs, IamPermissionState } from "./iamPermission";
export type IamPermission = import("./iamPermission").IamPermission;
export const IamPermission: typeof import("./iamPermission").IamPermission = null as any;
utilities.lazyLoad(exports, ["IamPermission"], () => require("./iamPermission"));

export { IamPrivateKeySpecArgs, IamPrivateKeySpecState } from "./iamPrivateKeySpec";
export type IamPrivateKeySpec = import("./iamPrivateKeySpec").IamPrivateKeySpec;
export const IamPrivateKeySpec: typeof import("./iamPrivateKeySpec").IamPrivateKeySpec = null as any;
utilities.lazyLoad(exports, ["IamPrivateKeySpec"], () => require("./iamPrivateKeySpec"));

export { IamQualifierArgs, IamQualifierState } from "./iamQualifier";
export type IamQualifier = import("./iamQualifier").IamQualifier;
export const IamQualifier: typeof import("./iamQualifier").IamQualifier = null as any;
utilities.lazyLoad(exports, ["IamQualifier"], () => require("./iamQualifier"));

export { IamResourceRolesArgs, IamResourceRolesState } from "./iamResourceRoles";
export type IamResourceRoles = import("./iamResourceRoles").IamResourceRoles;
export const IamResourceRoles: typeof import("./iamResourceRoles").IamResourceRoles = null as any;
utilities.lazyLoad(exports, ["IamResourceRoles"], () => require("./iamResourceRoles"));

export { IamSessionLimitsArgs, IamSessionLimitsState } from "./iamSessionLimits";
export type IamSessionLimits = import("./iamSessionLimits").IamSessionLimits;
export const IamSessionLimits: typeof import("./iamSessionLimits").IamSessionLimits = null as any;
utilities.lazyLoad(exports, ["IamSessionLimits"], () => require("./iamSessionLimits"));

export { IamSharingRuleArgs, IamSharingRuleState } from "./iamSharingRule";
export type IamSharingRule = import("./iamSharingRule").IamSharingRule;
export const IamSharingRule: typeof import("./iamSharingRule").IamSharingRule = null as any;
utilities.lazyLoad(exports, ["IamSharingRule"], () => require("./iamSharingRule"));

export { IamTrustPointArgs, IamTrustPointState } from "./iamTrustPoint";
export type IamTrustPoint = import("./iamTrustPoint").IamTrustPoint;
export const IamTrustPoint: typeof import("./iamTrustPoint").IamTrustPoint = null as any;
utilities.lazyLoad(exports, ["IamTrustPoint"], () => require("./iamTrustPoint"));

export { IamUserArgs, IamUserState } from "./iamUser";
export type IamUser = import("./iamUser").IamUser;
export const IamUser: typeof import("./iamUser").IamUser = null as any;
utilities.lazyLoad(exports, ["IamUser"], () => require("./iamUser"));

export { IamUserGroupArgs, IamUserGroupState } from "./iamUserGroup";
export type IamUserGroup = import("./iamUserGroup").IamUserGroup;
export const IamUserGroup: typeof import("./iamUserGroup").IamUserGroup = null as any;
utilities.lazyLoad(exports, ["IamUserGroup"], () => require("./iamUserGroup"));

export { IamUserSettingArgs, IamUserSettingState } from "./iamUserSetting";
export type IamUserSetting = import("./iamUserSetting").IamUserSetting;
export const IamUserSetting: typeof import("./iamUserSetting").IamUserSetting = null as any;
utilities.lazyLoad(exports, ["IamUserSetting"], () => require("./iamUserSetting"));

export { InventoryRequestArgs, InventoryRequestState } from "./inventoryRequest";
export type InventoryRequest = import("./inventoryRequest").InventoryRequest;
export const InventoryRequest: typeof import("./inventoryRequest").InventoryRequest = null as any;
utilities.lazyLoad(exports, ["InventoryRequest"], () => require("./inventoryRequest"));

export { IpmioverlanPolicyArgs, IpmioverlanPolicyState } from "./ipmioverlanPolicy";
export type IpmioverlanPolicy = import("./ipmioverlanPolicy").IpmioverlanPolicy;
export const IpmioverlanPolicy: typeof import("./ipmioverlanPolicy").IpmioverlanPolicy = null as any;
utilities.lazyLoad(exports, ["IpmioverlanPolicy"], () => require("./ipmioverlanPolicy"));

export { IppoolPoolArgs, IppoolPoolState } from "./ippoolPool";
export type IppoolPool = import("./ippoolPool").IppoolPool;
export const IppoolPool: typeof import("./ippoolPool").IppoolPool = null as any;
utilities.lazyLoad(exports, ["IppoolPool"], () => require("./ippoolPool"));

export { IppoolReservationArgs, IppoolReservationState } from "./ippoolReservation";
export type IppoolReservation = import("./ippoolReservation").IppoolReservation;
export const IppoolReservation: typeof import("./ippoolReservation").IppoolReservation = null as any;
utilities.lazyLoad(exports, ["IppoolReservation"], () => require("./ippoolReservation"));

export { IqnpoolPoolArgs, IqnpoolPoolState } from "./iqnpoolPool";
export type IqnpoolPool = import("./iqnpoolPool").IqnpoolPool;
export const IqnpoolPool: typeof import("./iqnpoolPool").IqnpoolPool = null as any;
utilities.lazyLoad(exports, ["IqnpoolPool"], () => require("./iqnpoolPool"));

export { IqnpoolReservationArgs, IqnpoolReservationState } from "./iqnpoolReservation";
export type IqnpoolReservation = import("./iqnpoolReservation").IqnpoolReservation;
export const IqnpoolReservation: typeof import("./iqnpoolReservation").IqnpoolReservation = null as any;
utilities.lazyLoad(exports, ["IqnpoolReservation"], () => require("./iqnpoolReservation"));

export { IwotenantMaintenanceNotificationArgs, IwotenantMaintenanceNotificationState } from "./iwotenantMaintenanceNotification";
export type IwotenantMaintenanceNotification = import("./iwotenantMaintenanceNotification").IwotenantMaintenanceNotification;
export const IwotenantMaintenanceNotification: typeof import("./iwotenantMaintenanceNotification").IwotenantMaintenanceNotification = null as any;
utilities.lazyLoad(exports, ["IwotenantMaintenanceNotification"], () => require("./iwotenantMaintenanceNotification"));

export { IwotenantMigrateArgs, IwotenantMigrateState } from "./iwotenantMigrate";
export type IwotenantMigrate = import("./iwotenantMigrate").IwotenantMigrate;
export const IwotenantMigrate: typeof import("./iwotenantMigrate").IwotenantMigrate = null as any;
utilities.lazyLoad(exports, ["IwotenantMigrate"], () => require("./iwotenantMigrate"));

export { IwotenantTenantCustomizationArgs, IwotenantTenantCustomizationState } from "./iwotenantTenantCustomization";
export type IwotenantTenantCustomization = import("./iwotenantTenantCustomization").IwotenantTenantCustomization;
export const IwotenantTenantCustomization: typeof import("./iwotenantTenantCustomization").IwotenantTenantCustomization = null as any;
utilities.lazyLoad(exports, ["IwotenantTenantCustomization"], () => require("./iwotenantTenantCustomization"));

export { KubernetesAciCniApicArgs, KubernetesAciCniApicState } from "./kubernetesAciCniApic";
export type KubernetesAciCniApic = import("./kubernetesAciCniApic").KubernetesAciCniApic;
export const KubernetesAciCniApic: typeof import("./kubernetesAciCniApic").KubernetesAciCniApic = null as any;
utilities.lazyLoad(exports, ["KubernetesAciCniApic"], () => require("./kubernetesAciCniApic"));

export { KubernetesAciCniProfileArgs, KubernetesAciCniProfileState } from "./kubernetesAciCniProfile";
export type KubernetesAciCniProfile = import("./kubernetesAciCniProfile").KubernetesAciCniProfile;
export const KubernetesAciCniProfile: typeof import("./kubernetesAciCniProfile").KubernetesAciCniProfile = null as any;
utilities.lazyLoad(exports, ["KubernetesAciCniProfile"], () => require("./kubernetesAciCniProfile"));

export { KubernetesAciCniTenantClusterAllocationArgs, KubernetesAciCniTenantClusterAllocationState } from "./kubernetesAciCniTenantClusterAllocation";
export type KubernetesAciCniTenantClusterAllocation = import("./kubernetesAciCniTenantClusterAllocation").KubernetesAciCniTenantClusterAllocation;
export const KubernetesAciCniTenantClusterAllocation: typeof import("./kubernetesAciCniTenantClusterAllocation").KubernetesAciCniTenantClusterAllocation = null as any;
utilities.lazyLoad(exports, ["KubernetesAciCniTenantClusterAllocation"], () => require("./kubernetesAciCniTenantClusterAllocation"));

export { KubernetesAddonDefinitionArgs, KubernetesAddonDefinitionState } from "./kubernetesAddonDefinition";
export type KubernetesAddonDefinition = import("./kubernetesAddonDefinition").KubernetesAddonDefinition;
export const KubernetesAddonDefinition: typeof import("./kubernetesAddonDefinition").KubernetesAddonDefinition = null as any;
utilities.lazyLoad(exports, ["KubernetesAddonDefinition"], () => require("./kubernetesAddonDefinition"));

export { KubernetesAddonPolicyArgs, KubernetesAddonPolicyState } from "./kubernetesAddonPolicy";
export type KubernetesAddonPolicy = import("./kubernetesAddonPolicy").KubernetesAddonPolicy;
export const KubernetesAddonPolicy: typeof import("./kubernetesAddonPolicy").KubernetesAddonPolicy = null as any;
utilities.lazyLoad(exports, ["KubernetesAddonPolicy"], () => require("./kubernetesAddonPolicy"));

export { KubernetesAddonRepositoryArgs, KubernetesAddonRepositoryState } from "./kubernetesAddonRepository";
export type KubernetesAddonRepository = import("./kubernetesAddonRepository").KubernetesAddonRepository;
export const KubernetesAddonRepository: typeof import("./kubernetesAddonRepository").KubernetesAddonRepository = null as any;
utilities.lazyLoad(exports, ["KubernetesAddonRepository"], () => require("./kubernetesAddonRepository"));

export { KubernetesBaremetalNodeProfileArgs, KubernetesBaremetalNodeProfileState } from "./kubernetesBaremetalNodeProfile";
export type KubernetesBaremetalNodeProfile = import("./kubernetesBaremetalNodeProfile").KubernetesBaremetalNodeProfile;
export const KubernetesBaremetalNodeProfile: typeof import("./kubernetesBaremetalNodeProfile").KubernetesBaremetalNodeProfile = null as any;
utilities.lazyLoad(exports, ["KubernetesBaremetalNodeProfile"], () => require("./kubernetesBaremetalNodeProfile"));

export { KubernetesClusterArgs, KubernetesClusterState } from "./kubernetesCluster";
export type KubernetesCluster = import("./kubernetesCluster").KubernetesCluster;
export const KubernetesCluster: typeof import("./kubernetesCluster").KubernetesCluster = null as any;
utilities.lazyLoad(exports, ["KubernetesCluster"], () => require("./kubernetesCluster"));

export { KubernetesClusterAddonProfileArgs, KubernetesClusterAddonProfileState } from "./kubernetesClusterAddonProfile";
export type KubernetesClusterAddonProfile = import("./kubernetesClusterAddonProfile").KubernetesClusterAddonProfile;
export const KubernetesClusterAddonProfile: typeof import("./kubernetesClusterAddonProfile").KubernetesClusterAddonProfile = null as any;
utilities.lazyLoad(exports, ["KubernetesClusterAddonProfile"], () => require("./kubernetesClusterAddonProfile"));

export { KubernetesClusterProfileArgs, KubernetesClusterProfileState } from "./kubernetesClusterProfile";
export type KubernetesClusterProfile = import("./kubernetesClusterProfile").KubernetesClusterProfile;
export const KubernetesClusterProfile: typeof import("./kubernetesClusterProfile").KubernetesClusterProfile = null as any;
utilities.lazyLoad(exports, ["KubernetesClusterProfile"], () => require("./kubernetesClusterProfile"));

export { KubernetesContainerRuntimePolicyArgs, KubernetesContainerRuntimePolicyState } from "./kubernetesContainerRuntimePolicy";
export type KubernetesContainerRuntimePolicy = import("./kubernetesContainerRuntimePolicy").KubernetesContainerRuntimePolicy;
export const KubernetesContainerRuntimePolicy: typeof import("./kubernetesContainerRuntimePolicy").KubernetesContainerRuntimePolicy = null as any;
utilities.lazyLoad(exports, ["KubernetesContainerRuntimePolicy"], () => require("./kubernetesContainerRuntimePolicy"));

export { KubernetesHttpProxyPolicyArgs, KubernetesHttpProxyPolicyState } from "./kubernetesHttpProxyPolicy";
export type KubernetesHttpProxyPolicy = import("./kubernetesHttpProxyPolicy").KubernetesHttpProxyPolicy;
export const KubernetesHttpProxyPolicy: typeof import("./kubernetesHttpProxyPolicy").KubernetesHttpProxyPolicy = null as any;
utilities.lazyLoad(exports, ["KubernetesHttpProxyPolicy"], () => require("./kubernetesHttpProxyPolicy"));

export { KubernetesNetworkPolicyArgs, KubernetesNetworkPolicyState } from "./kubernetesNetworkPolicy";
export type KubernetesNetworkPolicy = import("./kubernetesNetworkPolicy").KubernetesNetworkPolicy;
export const KubernetesNetworkPolicy: typeof import("./kubernetesNetworkPolicy").KubernetesNetworkPolicy = null as any;
utilities.lazyLoad(exports, ["KubernetesNetworkPolicy"], () => require("./kubernetesNetworkPolicy"));

export { KubernetesNodeGroupProfileArgs, KubernetesNodeGroupProfileState } from "./kubernetesNodeGroupProfile";
export type KubernetesNodeGroupProfile = import("./kubernetesNodeGroupProfile").KubernetesNodeGroupProfile;
export const KubernetesNodeGroupProfile: typeof import("./kubernetesNodeGroupProfile").KubernetesNodeGroupProfile = null as any;
utilities.lazyLoad(exports, ["KubernetesNodeGroupProfile"], () => require("./kubernetesNodeGroupProfile"));

export { KubernetesNvidiaGpuProductArgs, KubernetesNvidiaGpuProductState } from "./kubernetesNvidiaGpuProduct";
export type KubernetesNvidiaGpuProduct = import("./kubernetesNvidiaGpuProduct").KubernetesNvidiaGpuProduct;
export const KubernetesNvidiaGpuProduct: typeof import("./kubernetesNvidiaGpuProduct").KubernetesNvidiaGpuProduct = null as any;
utilities.lazyLoad(exports, ["KubernetesNvidiaGpuProduct"], () => require("./kubernetesNvidiaGpuProduct"));

export { KubernetesSysConfigPolicyArgs, KubernetesSysConfigPolicyState } from "./kubernetesSysConfigPolicy";
export type KubernetesSysConfigPolicy = import("./kubernetesSysConfigPolicy").KubernetesSysConfigPolicy;
export const KubernetesSysConfigPolicy: typeof import("./kubernetesSysConfigPolicy").KubernetesSysConfigPolicy = null as any;
utilities.lazyLoad(exports, ["KubernetesSysConfigPolicy"], () => require("./kubernetesSysConfigPolicy"));

export { KubernetesTrustedRegistriesPolicyArgs, KubernetesTrustedRegistriesPolicyState } from "./kubernetesTrustedRegistriesPolicy";
export type KubernetesTrustedRegistriesPolicy = import("./kubernetesTrustedRegistriesPolicy").KubernetesTrustedRegistriesPolicy;
export const KubernetesTrustedRegistriesPolicy: typeof import("./kubernetesTrustedRegistriesPolicy").KubernetesTrustedRegistriesPolicy = null as any;
utilities.lazyLoad(exports, ["KubernetesTrustedRegistriesPolicy"], () => require("./kubernetesTrustedRegistriesPolicy"));

export { KubernetesVersionArgs, KubernetesVersionState } from "./kubernetesVersion";
export type KubernetesVersion = import("./kubernetesVersion").KubernetesVersion;
export const KubernetesVersion: typeof import("./kubernetesVersion").KubernetesVersion = null as any;
utilities.lazyLoad(exports, ["KubernetesVersion"], () => require("./kubernetesVersion"));

export { KubernetesVersionPolicyArgs, KubernetesVersionPolicyState } from "./kubernetesVersionPolicy";
export type KubernetesVersionPolicy = import("./kubernetesVersionPolicy").KubernetesVersionPolicy;
export const KubernetesVersionPolicy: typeof import("./kubernetesVersionPolicy").KubernetesVersionPolicy = null as any;
utilities.lazyLoad(exports, ["KubernetesVersionPolicy"], () => require("./kubernetesVersionPolicy"));

export { KubernetesVirtualMachineInfraConfigPolicyArgs, KubernetesVirtualMachineInfraConfigPolicyState } from "./kubernetesVirtualMachineInfraConfigPolicy";
export type KubernetesVirtualMachineInfraConfigPolicy = import("./kubernetesVirtualMachineInfraConfigPolicy").KubernetesVirtualMachineInfraConfigPolicy;
export const KubernetesVirtualMachineInfraConfigPolicy: typeof import("./kubernetesVirtualMachineInfraConfigPolicy").KubernetesVirtualMachineInfraConfigPolicy = null as any;
utilities.lazyLoad(exports, ["KubernetesVirtualMachineInfraConfigPolicy"], () => require("./kubernetesVirtualMachineInfraConfigPolicy"));

export { KubernetesVirtualMachineInfrastructureProviderArgs, KubernetesVirtualMachineInfrastructureProviderState } from "./kubernetesVirtualMachineInfrastructureProvider";
export type KubernetesVirtualMachineInfrastructureProvider = import("./kubernetesVirtualMachineInfrastructureProvider").KubernetesVirtualMachineInfrastructureProvider;
export const KubernetesVirtualMachineInfrastructureProvider: typeof import("./kubernetesVirtualMachineInfrastructureProvider").KubernetesVirtualMachineInfrastructureProvider = null as any;
utilities.lazyLoad(exports, ["KubernetesVirtualMachineInfrastructureProvider"], () => require("./kubernetesVirtualMachineInfrastructureProvider"));

export { KubernetesVirtualMachineInstanceTypeArgs, KubernetesVirtualMachineInstanceTypeState } from "./kubernetesVirtualMachineInstanceType";
export type KubernetesVirtualMachineInstanceType = import("./kubernetesVirtualMachineInstanceType").KubernetesVirtualMachineInstanceType;
export const KubernetesVirtualMachineInstanceType: typeof import("./kubernetesVirtualMachineInstanceType").KubernetesVirtualMachineInstanceType = null as any;
utilities.lazyLoad(exports, ["KubernetesVirtualMachineInstanceType"], () => require("./kubernetesVirtualMachineInstanceType"));

export { KubernetesVirtualMachineNodeProfileArgs, KubernetesVirtualMachineNodeProfileState } from "./kubernetesVirtualMachineNodeProfile";
export type KubernetesVirtualMachineNodeProfile = import("./kubernetesVirtualMachineNodeProfile").KubernetesVirtualMachineNodeProfile;
export const KubernetesVirtualMachineNodeProfile: typeof import("./kubernetesVirtualMachineNodeProfile").KubernetesVirtualMachineNodeProfile = null as any;
utilities.lazyLoad(exports, ["KubernetesVirtualMachineNodeProfile"], () => require("./kubernetesVirtualMachineNodeProfile"));

export { KvmPolicyArgs, KvmPolicyState } from "./kvmPolicy";
export type KvmPolicy = import("./kvmPolicy").KvmPolicy;
export const KvmPolicy: typeof import("./kvmPolicy").KvmPolicy = null as any;
utilities.lazyLoad(exports, ["KvmPolicy"], () => require("./kvmPolicy"));

export { KvmSessionArgs, KvmSessionState } from "./kvmSession";
export type KvmSession = import("./kvmSession").KvmSession;
export const KvmSession: typeof import("./kvmSession").KvmSession = null as any;
utilities.lazyLoad(exports, ["KvmSession"], () => require("./kvmSession"));

export { KvmTunnelArgs, KvmTunnelState } from "./kvmTunnel";
export type KvmTunnel = import("./kvmTunnel").KvmTunnel;
export const KvmTunnel: typeof import("./kvmTunnel").KvmTunnel = null as any;
utilities.lazyLoad(exports, ["KvmTunnel"], () => require("./kvmTunnel"));

export { KvmTunneledKvmPolicyArgs, KvmTunneledKvmPolicyState } from "./kvmTunneledKvmPolicy";
export type KvmTunneledKvmPolicy = import("./kvmTunneledKvmPolicy").KvmTunneledKvmPolicy;
export const KvmTunneledKvmPolicy: typeof import("./kvmTunneledKvmPolicy").KvmTunneledKvmPolicy = null as any;
utilities.lazyLoad(exports, ["KvmTunneledKvmPolicy"], () => require("./kvmTunneledKvmPolicy"));

export { LicenseIksLicenseCountArgs, LicenseIksLicenseCountState } from "./licenseIksLicenseCount";
export type LicenseIksLicenseCount = import("./licenseIksLicenseCount").LicenseIksLicenseCount;
export const LicenseIksLicenseCount: typeof import("./licenseIksLicenseCount").LicenseIksLicenseCount = null as any;
utilities.lazyLoad(exports, ["LicenseIksLicenseCount"], () => require("./licenseIksLicenseCount"));

export { LicenseIncLicenseCountArgs, LicenseIncLicenseCountState } from "./licenseIncLicenseCount";
export type LicenseIncLicenseCount = import("./licenseIncLicenseCount").LicenseIncLicenseCount;
export const LicenseIncLicenseCount: typeof import("./licenseIncLicenseCount").LicenseIncLicenseCount = null as any;
utilities.lazyLoad(exports, ["LicenseIncLicenseCount"], () => require("./licenseIncLicenseCount"));

export { LicenseIwoLicenseCountArgs, LicenseIwoLicenseCountState } from "./licenseIwoLicenseCount";
export type LicenseIwoLicenseCount = import("./licenseIwoLicenseCount").LicenseIwoLicenseCount;
export const LicenseIwoLicenseCount: typeof import("./licenseIwoLicenseCount").LicenseIwoLicenseCount = null as any;
utilities.lazyLoad(exports, ["LicenseIwoLicenseCount"], () => require("./licenseIwoLicenseCount"));

export { LicenseLicenseInfoArgs, LicenseLicenseInfoState } from "./licenseLicenseInfo";
export type LicenseLicenseInfo = import("./licenseLicenseInfo").LicenseLicenseInfo;
export const LicenseLicenseInfo: typeof import("./licenseLicenseInfo").LicenseLicenseInfo = null as any;
utilities.lazyLoad(exports, ["LicenseLicenseInfo"], () => require("./licenseLicenseInfo"));

export { LicenseLicenseReservationOpArgs, LicenseLicenseReservationOpState } from "./licenseLicenseReservationOp";
export type LicenseLicenseReservationOp = import("./licenseLicenseReservationOp").LicenseLicenseReservationOp;
export const LicenseLicenseReservationOp: typeof import("./licenseLicenseReservationOp").LicenseLicenseReservationOp = null as any;
utilities.lazyLoad(exports, ["LicenseLicenseReservationOp"], () => require("./licenseLicenseReservationOp"));

export { MacpoolPoolArgs, MacpoolPoolState } from "./macpoolPool";
export type MacpoolPool = import("./macpoolPool").MacpoolPool;
export const MacpoolPool: typeof import("./macpoolPool").MacpoolPool = null as any;
utilities.lazyLoad(exports, ["MacpoolPool"], () => require("./macpoolPool"));

export { MacpoolReservationArgs, MacpoolReservationState } from "./macpoolReservation";
export type MacpoolReservation = import("./macpoolReservation").MacpoolReservation;
export const MacpoolReservation: typeof import("./macpoolReservation").MacpoolReservation = null as any;
utilities.lazyLoad(exports, ["MacpoolReservation"], () => require("./macpoolReservation"));

export { MarketplaceUseCaseArgs, MarketplaceUseCaseState } from "./marketplaceUseCase";
export type MarketplaceUseCase = import("./marketplaceUseCase").MarketplaceUseCase;
export const MarketplaceUseCase: typeof import("./marketplaceUseCase").MarketplaceUseCase = null as any;
utilities.lazyLoad(exports, ["MarketplaceUseCase"], () => require("./marketplaceUseCase"));

export { MarketplaceUseCaseVersionArgs, MarketplaceUseCaseVersionState } from "./marketplaceUseCaseVersion";
export type MarketplaceUseCaseVersion = import("./marketplaceUseCaseVersion").MarketplaceUseCaseVersion;
export const MarketplaceUseCaseVersion: typeof import("./marketplaceUseCaseVersion").MarketplaceUseCaseVersion = null as any;
utilities.lazyLoad(exports, ["MarketplaceUseCaseVersion"], () => require("./marketplaceUseCaseVersion"));

export { MemoryPersistentMemoryPolicyArgs, MemoryPersistentMemoryPolicyState } from "./memoryPersistentMemoryPolicy";
export type MemoryPersistentMemoryPolicy = import("./memoryPersistentMemoryPolicy").MemoryPersistentMemoryPolicy;
export const MemoryPersistentMemoryPolicy: typeof import("./memoryPersistentMemoryPolicy").MemoryPersistentMemoryPolicy = null as any;
utilities.lazyLoad(exports, ["MemoryPersistentMemoryPolicy"], () => require("./memoryPersistentMemoryPolicy"));

export { MetricsMetricsExplorationArgs, MetricsMetricsExplorationState } from "./metricsMetricsExploration";
export type MetricsMetricsExploration = import("./metricsMetricsExploration").MetricsMetricsExploration;
export const MetricsMetricsExploration: typeof import("./metricsMetricsExploration").MetricsMetricsExploration = null as any;
utilities.lazyLoad(exports, ["MetricsMetricsExploration"], () => require("./metricsMetricsExploration"));

export { NetworkconfigPolicyArgs, NetworkconfigPolicyState } from "./networkconfigPolicy";
export type NetworkconfigPolicy = import("./networkconfigPolicy").NetworkconfigPolicy;
export const NetworkconfigPolicy: typeof import("./networkconfigPolicy").NetworkconfigPolicy = null as any;
utilities.lazyLoad(exports, ["NetworkconfigPolicy"], () => require("./networkconfigPolicy"));

export { NiatelemetryNexusCloudAccountArgs, NiatelemetryNexusCloudAccountState } from "./niatelemetryNexusCloudAccount";
export type NiatelemetryNexusCloudAccount = import("./niatelemetryNexusCloudAccount").NiatelemetryNexusCloudAccount;
export const NiatelemetryNexusCloudAccount: typeof import("./niatelemetryNexusCloudAccount").NiatelemetryNexusCloudAccount = null as any;
utilities.lazyLoad(exports, ["NiatelemetryNexusCloudAccount"], () => require("./niatelemetryNexusCloudAccount"));

export { NiatelemetryNexusCloudSiteArgs, NiatelemetryNexusCloudSiteState } from "./niatelemetryNexusCloudSite";
export type NiatelemetryNexusCloudSite = import("./niatelemetryNexusCloudSite").NiatelemetryNexusCloudSite;
export const NiatelemetryNexusCloudSite: typeof import("./niatelemetryNexusCloudSite").NiatelemetryNexusCloudSite = null as any;
utilities.lazyLoad(exports, ["NiatelemetryNexusCloudSite"], () => require("./niatelemetryNexusCloudSite"));

export { NotificationAccountSubscriptionArgs, NotificationAccountSubscriptionState } from "./notificationAccountSubscription";
export type NotificationAccountSubscription = import("./notificationAccountSubscription").NotificationAccountSubscription;
export const NotificationAccountSubscription: typeof import("./notificationAccountSubscription").NotificationAccountSubscription = null as any;
utilities.lazyLoad(exports, ["NotificationAccountSubscription"], () => require("./notificationAccountSubscription"));

export { NtpPolicyArgs, NtpPolicyState } from "./ntpPolicy";
export type NtpPolicy = import("./ntpPolicy").NtpPolicy;
export const NtpPolicy: typeof import("./ntpPolicy").NtpPolicy = null as any;
utilities.lazyLoad(exports, ["NtpPolicy"], () => require("./ntpPolicy"));

export { OauthAuthorizationArgs, OauthAuthorizationState } from "./oauthAuthorization";
export type OauthAuthorization = import("./oauthAuthorization").OauthAuthorization;
export const OauthAuthorization: typeof import("./oauthAuthorization").OauthAuthorization = null as any;
utilities.lazyLoad(exports, ["OauthAuthorization"], () => require("./oauthAuthorization"));

export { OpenapiOpenApiSpecificationArgs, OpenapiOpenApiSpecificationState } from "./openapiOpenApiSpecification";
export type OpenapiOpenApiSpecification = import("./openapiOpenApiSpecification").OpenapiOpenApiSpecification;
export const OpenapiOpenApiSpecification: typeof import("./openapiOpenApiSpecification").OpenapiOpenApiSpecification = null as any;
utilities.lazyLoad(exports, ["OpenapiOpenApiSpecification"], () => require("./openapiOpenApiSpecification"));

export { OpenapiProcessFileArgs, OpenapiProcessFileState } from "./openapiProcessFile";
export type OpenapiProcessFile = import("./openapiProcessFile").OpenapiProcessFile;
export const OpenapiProcessFile: typeof import("./openapiProcessFile").OpenapiProcessFile = null as any;
utilities.lazyLoad(exports, ["OpenapiProcessFile"], () => require("./openapiProcessFile"));

export { OpenapiTaskGenerationRequestArgs, OpenapiTaskGenerationRequestState } from "./openapiTaskGenerationRequest";
export type OpenapiTaskGenerationRequest = import("./openapiTaskGenerationRequest").OpenapiTaskGenerationRequest;
export const OpenapiTaskGenerationRequest: typeof import("./openapiTaskGenerationRequest").OpenapiTaskGenerationRequest = null as any;
utilities.lazyLoad(exports, ["OpenapiTaskGenerationRequest"], () => require("./openapiTaskGenerationRequest"));

export { OprsDeploymentArgs, OprsDeploymentState } from "./oprsDeployment";
export type OprsDeployment = import("./oprsDeployment").OprsDeployment;
export const OprsDeployment: typeof import("./oprsDeployment").OprsDeployment = null as any;
utilities.lazyLoad(exports, ["OprsDeployment"], () => require("./oprsDeployment"));

export { OprsSyncTargetListMessageArgs, OprsSyncTargetListMessageState } from "./oprsSyncTargetListMessage";
export type OprsSyncTargetListMessage = import("./oprsSyncTargetListMessage").OprsSyncTargetListMessage;
export const OprsSyncTargetListMessage: typeof import("./oprsSyncTargetListMessage").OprsSyncTargetListMessage = null as any;
utilities.lazyLoad(exports, ["OprsSyncTargetListMessage"], () => require("./oprsSyncTargetListMessage"));

export { OrganizationOrganizationArgs, OrganizationOrganizationState } from "./organizationOrganization";
export type OrganizationOrganization = import("./organizationOrganization").OrganizationOrganization;
export const OrganizationOrganization: typeof import("./organizationOrganization").OrganizationOrganization = null as any;
utilities.lazyLoad(exports, ["OrganizationOrganization"], () => require("./organizationOrganization"));

export { OsBulkInstallInfoArgs, OsBulkInstallInfoState } from "./osBulkInstallInfo";
export type OsBulkInstallInfo = import("./osBulkInstallInfo").OsBulkInstallInfo;
export const OsBulkInstallInfo: typeof import("./osBulkInstallInfo").OsBulkInstallInfo = null as any;
utilities.lazyLoad(exports, ["OsBulkInstallInfo"], () => require("./osBulkInstallInfo"));

export { OsConfigurationFileArgs, OsConfigurationFileState } from "./osConfigurationFile";
export type OsConfigurationFile = import("./osConfigurationFile").OsConfigurationFile;
export const OsConfigurationFile: typeof import("./osConfigurationFile").OsConfigurationFile = null as any;
utilities.lazyLoad(exports, ["OsConfigurationFile"], () => require("./osConfigurationFile"));

export { OsInstallArgs, OsInstallState } from "./osInstall";
export type OsInstall = import("./osInstall").OsInstall;
export const OsInstall: typeof import("./osInstall").OsInstall = null as any;
utilities.lazyLoad(exports, ["OsInstall"], () => require("./osInstall"));

export { OsOsSupportArgs, OsOsSupportState } from "./osOsSupport";
export type OsOsSupport = import("./osOsSupport").OsOsSupport;
export const OsOsSupport: typeof import("./osOsSupport").OsOsSupport = null as any;
utilities.lazyLoad(exports, ["OsOsSupport"], () => require("./osOsSupport"));

export { OsTemplateFileArgs, OsTemplateFileState } from "./osTemplateFile";
export type OsTemplateFile = import("./osTemplateFile").OsTemplateFile;
export const OsTemplateFile: typeof import("./osTemplateFile").OsTemplateFile = null as any;
utilities.lazyLoad(exports, ["OsTemplateFile"], () => require("./osTemplateFile"));

export { OsValidInstallTargetArgs, OsValidInstallTargetState } from "./osValidInstallTarget";
export type OsValidInstallTarget = import("./osValidInstallTarget").OsValidInstallTarget;
export const OsValidInstallTarget: typeof import("./osValidInstallTarget").OsValidInstallTarget = null as any;
utilities.lazyLoad(exports, ["OsValidInstallTarget"], () => require("./osValidInstallTarget"));

export { PartnerintegrationDeviceConnectorArgs, PartnerintegrationDeviceConnectorState } from "./partnerintegrationDeviceConnector";
export type PartnerintegrationDeviceConnector = import("./partnerintegrationDeviceConnector").PartnerintegrationDeviceConnector;
export const PartnerintegrationDeviceConnector: typeof import("./partnerintegrationDeviceConnector").PartnerintegrationDeviceConnector = null as any;
utilities.lazyLoad(exports, ["PartnerintegrationDeviceConnector"], () => require("./partnerintegrationDeviceConnector"));

export { PartnerintegrationEtlArgs, PartnerintegrationEtlState } from "./partnerintegrationEtl";
export type PartnerintegrationEtl = import("./partnerintegrationEtl").PartnerintegrationEtl;
export const PartnerintegrationEtl: typeof import("./partnerintegrationEtl").PartnerintegrationEtl = null as any;
utilities.lazyLoad(exports, ["PartnerintegrationEtl"], () => require("./partnerintegrationEtl"));

export { PartnerintegrationFileArgs, PartnerintegrationFileState } from "./partnerintegrationFile";
export type PartnerintegrationFile = import("./partnerintegrationFile").PartnerintegrationFile;
export const PartnerintegrationFile: typeof import("./partnerintegrationFile").PartnerintegrationFile = null as any;
utilities.lazyLoad(exports, ["PartnerintegrationFile"], () => require("./partnerintegrationFile"));

export { PartnerintegrationInventoryArgs, PartnerintegrationInventoryState } from "./partnerintegrationInventory";
export type PartnerintegrationInventory = import("./partnerintegrationInventory").PartnerintegrationInventory;
export const PartnerintegrationInventory: typeof import("./partnerintegrationInventory").PartnerintegrationInventory = null as any;
utilities.lazyLoad(exports, ["PartnerintegrationInventory"], () => require("./partnerintegrationInventory"));

export { PartnerintegrationMetricsArgs, PartnerintegrationMetricsState } from "./partnerintegrationMetrics";
export type PartnerintegrationMetrics = import("./partnerintegrationMetrics").PartnerintegrationMetrics;
export const PartnerintegrationMetrics: typeof import("./partnerintegrationMetrics").PartnerintegrationMetrics = null as any;
utilities.lazyLoad(exports, ["PartnerintegrationMetrics"], () => require("./partnerintegrationMetrics"));

export { PartnerintegrationModelArgs, PartnerintegrationModelState } from "./partnerintegrationModel";
export type PartnerintegrationModel = import("./partnerintegrationModel").PartnerintegrationModel;
export const PartnerintegrationModel: typeof import("./partnerintegrationModel").PartnerintegrationModel = null as any;
utilities.lazyLoad(exports, ["PartnerintegrationModel"], () => require("./partnerintegrationModel"));

export { PowerPolicyArgs, PowerPolicyState } from "./powerPolicy";
export type PowerPolicy = import("./powerPolicy").PowerPolicy;
export const PowerPolicy: typeof import("./powerPolicy").PowerPolicy = null as any;
utilities.lazyLoad(exports, ["PowerPolicy"], () => require("./powerPolicy"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RecommendationHardwareExpansionRequestArgs, RecommendationHardwareExpansionRequestState } from "./recommendationHardwareExpansionRequest";
export type RecommendationHardwareExpansionRequest = import("./recommendationHardwareExpansionRequest").RecommendationHardwareExpansionRequest;
export const RecommendationHardwareExpansionRequest: typeof import("./recommendationHardwareExpansionRequest").RecommendationHardwareExpansionRequest = null as any;
utilities.lazyLoad(exports, ["RecommendationHardwareExpansionRequest"], () => require("./recommendationHardwareExpansionRequest"));

export { RecommendationHardwareExpansionRequestItemArgs, RecommendationHardwareExpansionRequestItemState } from "./recommendationHardwareExpansionRequestItem";
export type RecommendationHardwareExpansionRequestItem = import("./recommendationHardwareExpansionRequestItem").RecommendationHardwareExpansionRequestItem;
export const RecommendationHardwareExpansionRequestItem: typeof import("./recommendationHardwareExpansionRequestItem").RecommendationHardwareExpansionRequestItem = null as any;
utilities.lazyLoad(exports, ["RecommendationHardwareExpansionRequestItem"], () => require("./recommendationHardwareExpansionRequestItem"));

export { RecommendationPurchaseOrderEstimateArgs, RecommendationPurchaseOrderEstimateState } from "./recommendationPurchaseOrderEstimate";
export type RecommendationPurchaseOrderEstimate = import("./recommendationPurchaseOrderEstimate").RecommendationPurchaseOrderEstimate;
export const RecommendationPurchaseOrderEstimate: typeof import("./recommendationPurchaseOrderEstimate").RecommendationPurchaseOrderEstimate = null as any;
utilities.lazyLoad(exports, ["RecommendationPurchaseOrderEstimate"], () => require("./recommendationPurchaseOrderEstimate"));

export { RecoveryBackupConfigPolicyArgs, RecoveryBackupConfigPolicyState } from "./recoveryBackupConfigPolicy";
export type RecoveryBackupConfigPolicy = import("./recoveryBackupConfigPolicy").RecoveryBackupConfigPolicy;
export const RecoveryBackupConfigPolicy: typeof import("./recoveryBackupConfigPolicy").RecoveryBackupConfigPolicy = null as any;
utilities.lazyLoad(exports, ["RecoveryBackupConfigPolicy"], () => require("./recoveryBackupConfigPolicy"));

export { RecoveryBackupProfileArgs, RecoveryBackupProfileState } from "./recoveryBackupProfile";
export type RecoveryBackupProfile = import("./recoveryBackupProfile").RecoveryBackupProfile;
export const RecoveryBackupProfile: typeof import("./recoveryBackupProfile").RecoveryBackupProfile = null as any;
utilities.lazyLoad(exports, ["RecoveryBackupProfile"], () => require("./recoveryBackupProfile"));

export { RecoveryOnDemandBackupArgs, RecoveryOnDemandBackupState } from "./recoveryOnDemandBackup";
export type RecoveryOnDemandBackup = import("./recoveryOnDemandBackup").RecoveryOnDemandBackup;
export const RecoveryOnDemandBackup: typeof import("./recoveryOnDemandBackup").RecoveryOnDemandBackup = null as any;
utilities.lazyLoad(exports, ["RecoveryOnDemandBackup"], () => require("./recoveryOnDemandBackup"));

export { RecoveryRestoreArgs, RecoveryRestoreState } from "./recoveryRestore";
export type RecoveryRestore = import("./recoveryRestore").RecoveryRestore;
export const RecoveryRestore: typeof import("./recoveryRestore").RecoveryRestore = null as any;
utilities.lazyLoad(exports, ["RecoveryRestore"], () => require("./recoveryRestore"));

export { RecoveryScheduleConfigPolicyArgs, RecoveryScheduleConfigPolicyState } from "./recoveryScheduleConfigPolicy";
export type RecoveryScheduleConfigPolicy = import("./recoveryScheduleConfigPolicy").RecoveryScheduleConfigPolicy;
export const RecoveryScheduleConfigPolicy: typeof import("./recoveryScheduleConfigPolicy").RecoveryScheduleConfigPolicy = null as any;
utilities.lazyLoad(exports, ["RecoveryScheduleConfigPolicy"], () => require("./recoveryScheduleConfigPolicy"));

export { ResourceGroupArgs, ResourceGroupState } from "./resourceGroup";
export type ResourceGroup = import("./resourceGroup").ResourceGroup;
export const ResourceGroup: typeof import("./resourceGroup").ResourceGroup = null as any;
utilities.lazyLoad(exports, ["ResourceGroup"], () => require("./resourceGroup"));

export { ResourceMembershipArgs, ResourceMembershipState } from "./resourceMembership";
export type ResourceMembership = import("./resourceMembership").ResourceMembership;
export const ResourceMembership: typeof import("./resourceMembership").ResourceMembership = null as any;
utilities.lazyLoad(exports, ["ResourceMembership"], () => require("./resourceMembership"));

export { ResourceReservationArgs, ResourceReservationState } from "./resourceReservation";
export type ResourceReservation = import("./resourceReservation").ResourceReservation;
export const ResourceReservation: typeof import("./resourceReservation").ResourceReservation = null as any;
utilities.lazyLoad(exports, ["ResourceReservation"], () => require("./resourceReservation"));

export { ResourceSelectionCriteriaArgs, ResourceSelectionCriteriaState } from "./resourceSelectionCriteria";
export type ResourceSelectionCriteria = import("./resourceSelectionCriteria").ResourceSelectionCriteria;
export const ResourceSelectionCriteria: typeof import("./resourceSelectionCriteria").ResourceSelectionCriteria = null as any;
utilities.lazyLoad(exports, ["ResourceSelectionCriteria"], () => require("./resourceSelectionCriteria"));

export { ResourcepoolPoolArgs, ResourcepoolPoolState } from "./resourcepoolPool";
export type ResourcepoolPool = import("./resourcepoolPool").ResourcepoolPool;
export const ResourcepoolPool: typeof import("./resourcepoolPool").ResourcepoolPool = null as any;
utilities.lazyLoad(exports, ["ResourcepoolPool"], () => require("./resourcepoolPool"));

export { RproxyReverseProxyArgs, RproxyReverseProxyState } from "./rproxyReverseProxy";
export type RproxyReverseProxy = import("./rproxyReverseProxy").RproxyReverseProxy;
export const RproxyReverseProxy: typeof import("./rproxyReverseProxy").RproxyReverseProxy = null as any;
utilities.lazyLoad(exports, ["RproxyReverseProxy"], () => require("./rproxyReverseProxy"));

export { SchedulerTaskScheduleArgs, SchedulerTaskScheduleState } from "./schedulerTaskSchedule";
export type SchedulerTaskSchedule = import("./schedulerTaskSchedule").SchedulerTaskSchedule;
export const SchedulerTaskSchedule: typeof import("./schedulerTaskSchedule").SchedulerTaskSchedule = null as any;
utilities.lazyLoad(exports, ["SchedulerTaskSchedule"], () => require("./schedulerTaskSchedule"));

export { SdaaciConnectionArgs, SdaaciConnectionState } from "./sdaaciConnection";
export type SdaaciConnection = import("./sdaaciConnection").SdaaciConnection;
export const SdaaciConnection: typeof import("./sdaaciConnection").SdaaciConnection = null as any;
utilities.lazyLoad(exports, ["SdaaciConnection"], () => require("./sdaaciConnection"));

export { SdaaciConnectionDetailArgs, SdaaciConnectionDetailState } from "./sdaaciConnectionDetail";
export type SdaaciConnectionDetail = import("./sdaaciConnectionDetail").SdaaciConnectionDetail;
export const SdaaciConnectionDetail: typeof import("./sdaaciConnectionDetail").SdaaciConnectionDetail = null as any;
utilities.lazyLoad(exports, ["SdaaciConnectionDetail"], () => require("./sdaaciConnectionDetail"));

export { SdcardPolicyArgs, SdcardPolicyState } from "./sdcardPolicy";
export type SdcardPolicy = import("./sdcardPolicy").SdcardPolicy;
export const SdcardPolicy: typeof import("./sdcardPolicy").SdcardPolicy = null as any;
utilities.lazyLoad(exports, ["SdcardPolicy"], () => require("./sdcardPolicy"));

export { SearchSuggestItemArgs, SearchSuggestItemState } from "./searchSuggestItem";
export type SearchSuggestItem = import("./searchSuggestItem").SearchSuggestItem;
export const SearchSuggestItem: typeof import("./searchSuggestItem").SearchSuggestItem = null as any;
utilities.lazyLoad(exports, ["SearchSuggestItem"], () => require("./searchSuggestItem"));

export { ServerConfigImportArgs, ServerConfigImportState } from "./serverConfigImport";
export type ServerConfigImport = import("./serverConfigImport").ServerConfigImport;
export const ServerConfigImport: typeof import("./serverConfigImport").ServerConfigImport = null as any;
utilities.lazyLoad(exports, ["ServerConfigImport"], () => require("./serverConfigImport"));

export { ServerProfileArgs, ServerProfileState } from "./serverProfile";
export type ServerProfile = import("./serverProfile").ServerProfile;
export const ServerProfile: typeof import("./serverProfile").ServerProfile = null as any;
utilities.lazyLoad(exports, ["ServerProfile"], () => require("./serverProfile"));

export { ServerProfileTemplateArgs, ServerProfileTemplateState } from "./serverProfileTemplate";
export type ServerProfileTemplate = import("./serverProfileTemplate").ServerProfileTemplate;
export const ServerProfileTemplate: typeof import("./serverProfileTemplate").ServerProfileTemplate = null as any;
utilities.lazyLoad(exports, ["ServerProfileTemplate"], () => require("./serverProfileTemplate"));

export { SmtpPolicyArgs, SmtpPolicyState } from "./smtpPolicy";
export type SmtpPolicy = import("./smtpPolicy").SmtpPolicy;
export const SmtpPolicy: typeof import("./smtpPolicy").SmtpPolicy = null as any;
utilities.lazyLoad(exports, ["SmtpPolicy"], () => require("./smtpPolicy"));

export { SnmpPolicyArgs, SnmpPolicyState } from "./snmpPolicy";
export type SnmpPolicy = import("./snmpPolicy").SnmpPolicy;
export const SnmpPolicy: typeof import("./snmpPolicy").SnmpPolicy = null as any;
utilities.lazyLoad(exports, ["SnmpPolicy"], () => require("./snmpPolicy"));

export { SoftwareApplianceDistributableArgs, SoftwareApplianceDistributableState } from "./softwareApplianceDistributable";
export type SoftwareApplianceDistributable = import("./softwareApplianceDistributable").SoftwareApplianceDistributable;
export const SoftwareApplianceDistributable: typeof import("./softwareApplianceDistributable").SoftwareApplianceDistributable = null as any;
utilities.lazyLoad(exports, ["SoftwareApplianceDistributable"], () => require("./softwareApplianceDistributable"));

export { SoftwareHciBundleDistributableArgs, SoftwareHciBundleDistributableState } from "./softwareHciBundleDistributable";
export type SoftwareHciBundleDistributable = import("./softwareHciBundleDistributable").SoftwareHciBundleDistributable;
export const SoftwareHciBundleDistributable: typeof import("./softwareHciBundleDistributable").SoftwareHciBundleDistributable = null as any;
utilities.lazyLoad(exports, ["SoftwareHciBundleDistributable"], () => require("./softwareHciBundleDistributable"));

export { SoftwareHciDistributableArgs, SoftwareHciDistributableState } from "./softwareHciDistributable";
export type SoftwareHciDistributable = import("./softwareHciDistributable").SoftwareHciDistributable;
export const SoftwareHciDistributable: typeof import("./softwareHciDistributable").SoftwareHciDistributable = null as any;
utilities.lazyLoad(exports, ["SoftwareHciDistributable"], () => require("./softwareHciDistributable"));

export { SoftwareHclMetaArgs, SoftwareHclMetaState } from "./softwareHclMeta";
export type SoftwareHclMeta = import("./softwareHclMeta").SoftwareHclMeta;
export const SoftwareHclMeta: typeof import("./softwareHclMeta").SoftwareHclMeta = null as any;
utilities.lazyLoad(exports, ["SoftwareHclMeta"], () => require("./softwareHclMeta"));

export { SoftwareHyperflexBundleDistributableArgs, SoftwareHyperflexBundleDistributableState } from "./softwareHyperflexBundleDistributable";
export type SoftwareHyperflexBundleDistributable = import("./softwareHyperflexBundleDistributable").SoftwareHyperflexBundleDistributable;
export const SoftwareHyperflexBundleDistributable: typeof import("./softwareHyperflexBundleDistributable").SoftwareHyperflexBundleDistributable = null as any;
utilities.lazyLoad(exports, ["SoftwareHyperflexBundleDistributable"], () => require("./softwareHyperflexBundleDistributable"));

export { SoftwareHyperflexDistributableArgs, SoftwareHyperflexDistributableState } from "./softwareHyperflexDistributable";
export type SoftwareHyperflexDistributable = import("./softwareHyperflexDistributable").SoftwareHyperflexDistributable;
export const SoftwareHyperflexDistributable: typeof import("./softwareHyperflexDistributable").SoftwareHyperflexDistributable = null as any;
utilities.lazyLoad(exports, ["SoftwareHyperflexDistributable"], () => require("./softwareHyperflexDistributable"));

export { SoftwareIksBundleDistributableArgs, SoftwareIksBundleDistributableState } from "./softwareIksBundleDistributable";
export type SoftwareIksBundleDistributable = import("./softwareIksBundleDistributable").SoftwareIksBundleDistributable;
export const SoftwareIksBundleDistributable: typeof import("./softwareIksBundleDistributable").SoftwareIksBundleDistributable = null as any;
utilities.lazyLoad(exports, ["SoftwareIksBundleDistributable"], () => require("./softwareIksBundleDistributable"));

export { SoftwareReleaseMetaArgs, SoftwareReleaseMetaState } from "./softwareReleaseMeta";
export type SoftwareReleaseMeta = import("./softwareReleaseMeta").SoftwareReleaseMeta;
export const SoftwareReleaseMeta: typeof import("./softwareReleaseMeta").SoftwareReleaseMeta = null as any;
utilities.lazyLoad(exports, ["SoftwareReleaseMeta"], () => require("./softwareReleaseMeta"));

export { SoftwareSolutionDistributableArgs, SoftwareSolutionDistributableState } from "./softwareSolutionDistributable";
export type SoftwareSolutionDistributable = import("./softwareSolutionDistributable").SoftwareSolutionDistributable;
export const SoftwareSolutionDistributable: typeof import("./softwareSolutionDistributable").SoftwareSolutionDistributable = null as any;
utilities.lazyLoad(exports, ["SoftwareSolutionDistributable"], () => require("./softwareSolutionDistributable"));

export { SoftwareUcsdBundleDistributableArgs, SoftwareUcsdBundleDistributableState } from "./softwareUcsdBundleDistributable";
export type SoftwareUcsdBundleDistributable = import("./softwareUcsdBundleDistributable").SoftwareUcsdBundleDistributable;
export const SoftwareUcsdBundleDistributable: typeof import("./softwareUcsdBundleDistributable").SoftwareUcsdBundleDistributable = null as any;
utilities.lazyLoad(exports, ["SoftwareUcsdBundleDistributable"], () => require("./softwareUcsdBundleDistributable"));

export { SoftwareUcsdDistributableArgs, SoftwareUcsdDistributableState } from "./softwareUcsdDistributable";
export type SoftwareUcsdDistributable = import("./softwareUcsdDistributable").SoftwareUcsdDistributable;
export const SoftwareUcsdDistributable: typeof import("./softwareUcsdDistributable").SoftwareUcsdDistributable = null as any;
utilities.lazyLoad(exports, ["SoftwareUcsdDistributable"], () => require("./softwareUcsdDistributable"));

export { SoftwarerepositoryAuthorizationArgs, SoftwarerepositoryAuthorizationState } from "./softwarerepositoryAuthorization";
export type SoftwarerepositoryAuthorization = import("./softwarerepositoryAuthorization").SoftwarerepositoryAuthorization;
export const SoftwarerepositoryAuthorization: typeof import("./softwarerepositoryAuthorization").SoftwarerepositoryAuthorization = null as any;
utilities.lazyLoad(exports, ["SoftwarerepositoryAuthorization"], () => require("./softwarerepositoryAuthorization"));

export { SoftwarerepositoryCategoryMapperArgs, SoftwarerepositoryCategoryMapperState } from "./softwarerepositoryCategoryMapper";
export type SoftwarerepositoryCategoryMapper = import("./softwarerepositoryCategoryMapper").SoftwarerepositoryCategoryMapper;
export const SoftwarerepositoryCategoryMapper: typeof import("./softwarerepositoryCategoryMapper").SoftwarerepositoryCategoryMapper = null as any;
utilities.lazyLoad(exports, ["SoftwarerepositoryCategoryMapper"], () => require("./softwarerepositoryCategoryMapper"));

export { SoftwarerepositoryCategoryMapperModelArgs, SoftwarerepositoryCategoryMapperModelState } from "./softwarerepositoryCategoryMapperModel";
export type SoftwarerepositoryCategoryMapperModel = import("./softwarerepositoryCategoryMapperModel").SoftwarerepositoryCategoryMapperModel;
export const SoftwarerepositoryCategoryMapperModel: typeof import("./softwarerepositoryCategoryMapperModel").SoftwarerepositoryCategoryMapperModel = null as any;
utilities.lazyLoad(exports, ["SoftwarerepositoryCategoryMapperModel"], () => require("./softwarerepositoryCategoryMapperModel"));

export { SoftwarerepositoryCategorySupportConstraintArgs, SoftwarerepositoryCategorySupportConstraintState } from "./softwarerepositoryCategorySupportConstraint";
export type SoftwarerepositoryCategorySupportConstraint = import("./softwarerepositoryCategorySupportConstraint").SoftwarerepositoryCategorySupportConstraint;
export const SoftwarerepositoryCategorySupportConstraint: typeof import("./softwarerepositoryCategorySupportConstraint").SoftwarerepositoryCategorySupportConstraint = null as any;
utilities.lazyLoad(exports, ["SoftwarerepositoryCategorySupportConstraint"], () => require("./softwarerepositoryCategorySupportConstraint"));

export { SoftwarerepositoryCategoryUnsupportedModelsArgs, SoftwarerepositoryCategoryUnsupportedModelsState } from "./softwarerepositoryCategoryUnsupportedModels";
export type SoftwarerepositoryCategoryUnsupportedModels = import("./softwarerepositoryCategoryUnsupportedModels").SoftwarerepositoryCategoryUnsupportedModels;
export const SoftwarerepositoryCategoryUnsupportedModels: typeof import("./softwarerepositoryCategoryUnsupportedModels").SoftwarerepositoryCategoryUnsupportedModels = null as any;
utilities.lazyLoad(exports, ["SoftwarerepositoryCategoryUnsupportedModels"], () => require("./softwarerepositoryCategoryUnsupportedModels"));

export { SoftwarerepositoryOperatingSystemFileArgs, SoftwarerepositoryOperatingSystemFileState } from "./softwarerepositoryOperatingSystemFile";
export type SoftwarerepositoryOperatingSystemFile = import("./softwarerepositoryOperatingSystemFile").SoftwarerepositoryOperatingSystemFile;
export const SoftwarerepositoryOperatingSystemFile: typeof import("./softwarerepositoryOperatingSystemFile").SoftwarerepositoryOperatingSystemFile = null as any;
utilities.lazyLoad(exports, ["SoftwarerepositoryOperatingSystemFile"], () => require("./softwarerepositoryOperatingSystemFile"));

export { SoftwarerepositoryReleaseArgs, SoftwarerepositoryReleaseState } from "./softwarerepositoryRelease";
export type SoftwarerepositoryRelease = import("./softwarerepositoryRelease").SoftwarerepositoryRelease;
export const SoftwarerepositoryRelease: typeof import("./softwarerepositoryRelease").SoftwarerepositoryRelease = null as any;
utilities.lazyLoad(exports, ["SoftwarerepositoryRelease"], () => require("./softwarerepositoryRelease"));

export { SolPolicyArgs, SolPolicyState } from "./solPolicy";
export type SolPolicy = import("./solPolicy").SolPolicy;
export const SolPolicy: typeof import("./solPolicy").SolPolicy = null as any;
utilities.lazyLoad(exports, ["SolPolicy"], () => require("./solPolicy"));

export { SshPolicyArgs, SshPolicyState } from "./sshPolicy";
export type SshPolicy = import("./sshPolicy").SshPolicy;
export const SshPolicy: typeof import("./sshPolicy").SshPolicy = null as any;
utilities.lazyLoad(exports, ["SshPolicy"], () => require("./sshPolicy"));

export { StorageDriveGroupArgs, StorageDriveGroupState } from "./storageDriveGroup";
export type StorageDriveGroup = import("./storageDriveGroup").StorageDriveGroup;
export const StorageDriveGroup: typeof import("./storageDriveGroup").StorageDriveGroup = null as any;
utilities.lazyLoad(exports, ["StorageDriveGroup"], () => require("./storageDriveGroup"));

export { StorageDriveSecurityPolicyArgs, StorageDriveSecurityPolicyState } from "./storageDriveSecurityPolicy";
export type StorageDriveSecurityPolicy = import("./storageDriveSecurityPolicy").StorageDriveSecurityPolicy;
export const StorageDriveSecurityPolicy: typeof import("./storageDriveSecurityPolicy").StorageDriveSecurityPolicy = null as any;
utilities.lazyLoad(exports, ["StorageDriveSecurityPolicy"], () => require("./storageDriveSecurityPolicy"));

export { StorageStoragePolicyArgs, StorageStoragePolicyState } from "./storageStoragePolicy";
export type StorageStoragePolicy = import("./storageStoragePolicy").StorageStoragePolicy;
export const StorageStoragePolicy: typeof import("./storageStoragePolicy").StorageStoragePolicy = null as any;
utilities.lazyLoad(exports, ["StorageStoragePolicy"], () => require("./storageStoragePolicy"));

export { SyslogPolicyArgs, SyslogPolicyState } from "./syslogPolicy";
export type SyslogPolicy = import("./syslogPolicy").SyslogPolicy;
export const SyslogPolicy: typeof import("./syslogPolicy").SyslogPolicy = null as any;
utilities.lazyLoad(exports, ["SyslogPolicy"], () => require("./syslogPolicy"));

export { TamAdvisoryCountArgs, TamAdvisoryCountState } from "./tamAdvisoryCount";
export type TamAdvisoryCount = import("./tamAdvisoryCount").TamAdvisoryCount;
export const TamAdvisoryCount: typeof import("./tamAdvisoryCount").TamAdvisoryCount = null as any;
utilities.lazyLoad(exports, ["TamAdvisoryCount"], () => require("./tamAdvisoryCount"));

export { TamAdvisoryDefinitionArgs, TamAdvisoryDefinitionState } from "./tamAdvisoryDefinition";
export type TamAdvisoryDefinition = import("./tamAdvisoryDefinition").TamAdvisoryDefinition;
export const TamAdvisoryDefinition: typeof import("./tamAdvisoryDefinition").TamAdvisoryDefinition = null as any;
utilities.lazyLoad(exports, ["TamAdvisoryDefinition"], () => require("./tamAdvisoryDefinition"));

export { TamAdvisoryInfoArgs, TamAdvisoryInfoState } from "./tamAdvisoryInfo";
export type TamAdvisoryInfo = import("./tamAdvisoryInfo").TamAdvisoryInfo;
export const TamAdvisoryInfo: typeof import("./tamAdvisoryInfo").TamAdvisoryInfo = null as any;
utilities.lazyLoad(exports, ["TamAdvisoryInfo"], () => require("./tamAdvisoryInfo"));

export { TamAdvisoryInstanceArgs, TamAdvisoryInstanceState } from "./tamAdvisoryInstance";
export type TamAdvisoryInstance = import("./tamAdvisoryInstance").TamAdvisoryInstance;
export const TamAdvisoryInstance: typeof import("./tamAdvisoryInstance").TamAdvisoryInstance = null as any;
utilities.lazyLoad(exports, ["TamAdvisoryInstance"], () => require("./tamAdvisoryInstance"));

export { TamSecurityAdvisoryArgs, TamSecurityAdvisoryState } from "./tamSecurityAdvisory";
export type TamSecurityAdvisory = import("./tamSecurityAdvisory").TamSecurityAdvisory;
export const TamSecurityAdvisory: typeof import("./tamSecurityAdvisory").TamSecurityAdvisory = null as any;
utilities.lazyLoad(exports, ["TamSecurityAdvisory"], () => require("./tamSecurityAdvisory"));

export { TaskFabricMosScopedInventoryArgs, TaskFabricMosScopedInventoryState } from "./taskFabricMosScopedInventory";
export type TaskFabricMosScopedInventory = import("./taskFabricMosScopedInventory").TaskFabricMosScopedInventory;
export const TaskFabricMosScopedInventory: typeof import("./taskFabricMosScopedInventory").TaskFabricMosScopedInventory = null as any;
utilities.lazyLoad(exports, ["TaskFabricMosScopedInventory"], () => require("./taskFabricMosScopedInventory"));

export { TaskHitachiScopedInventoryArgs, TaskHitachiScopedInventoryState } from "./taskHitachiScopedInventory";
export type TaskHitachiScopedInventory = import("./taskHitachiScopedInventory").TaskHitachiScopedInventory;
export const TaskHitachiScopedInventory: typeof import("./taskHitachiScopedInventory").TaskHitachiScopedInventory = null as any;
utilities.lazyLoad(exports, ["TaskHitachiScopedInventory"], () => require("./taskHitachiScopedInventory"));

export { TaskHyperFlexManagementScopedInventoryArgs, TaskHyperFlexManagementScopedInventoryState } from "./taskHyperFlexManagementScopedInventory";
export type TaskHyperFlexManagementScopedInventory = import("./taskHyperFlexManagementScopedInventory").TaskHyperFlexManagementScopedInventory;
export const TaskHyperFlexManagementScopedInventory: typeof import("./taskHyperFlexManagementScopedInventory").TaskHyperFlexManagementScopedInventory = null as any;
utilities.lazyLoad(exports, ["TaskHyperFlexManagementScopedInventory"], () => require("./taskHyperFlexManagementScopedInventory"));

export { TaskHyperflexScopedInventoryArgs, TaskHyperflexScopedInventoryState } from "./taskHyperflexScopedInventory";
export type TaskHyperflexScopedInventory = import("./taskHyperflexScopedInventory").TaskHyperflexScopedInventory;
export const TaskHyperflexScopedInventory: typeof import("./taskHyperflexScopedInventory").TaskHyperflexScopedInventory = null as any;
utilities.lazyLoad(exports, ["TaskHyperflexScopedInventory"], () => require("./taskHyperflexScopedInventory"));

export { TaskMdsScopedInventoryArgs, TaskMdsScopedInventoryState } from "./taskMdsScopedInventory";
export type TaskMdsScopedInventory = import("./taskMdsScopedInventory").TaskMdsScopedInventory;
export const TaskMdsScopedInventory: typeof import("./taskMdsScopedInventory").TaskMdsScopedInventory = null as any;
utilities.lazyLoad(exports, ["TaskMdsScopedInventory"], () => require("./taskMdsScopedInventory"));

export { TaskMdsSystemScopedInventoryArgs, TaskMdsSystemScopedInventoryState } from "./taskMdsSystemScopedInventory";
export type TaskMdsSystemScopedInventory = import("./taskMdsSystemScopedInventory").TaskMdsSystemScopedInventory;
export const TaskMdsSystemScopedInventory: typeof import("./taskMdsSystemScopedInventory").TaskMdsSystemScopedInventory = null as any;
utilities.lazyLoad(exports, ["TaskMdsSystemScopedInventory"], () => require("./taskMdsSystemScopedInventory"));

export { TaskMerakiScopedInventoryArgs, TaskMerakiScopedInventoryState } from "./taskMerakiScopedInventory";
export type TaskMerakiScopedInventory = import("./taskMerakiScopedInventory").TaskMerakiScopedInventory;
export const TaskMerakiScopedInventory: typeof import("./taskMerakiScopedInventory").TaskMerakiScopedInventory = null as any;
utilities.lazyLoad(exports, ["TaskMerakiScopedInventory"], () => require("./taskMerakiScopedInventory"));

export { TaskNetAppScopedInventoryArgs, TaskNetAppScopedInventoryState } from "./taskNetAppScopedInventory";
export type TaskNetAppScopedInventory = import("./taskNetAppScopedInventory").TaskNetAppScopedInventory;
export const TaskNetAppScopedInventory: typeof import("./taskNetAppScopedInventory").TaskNetAppScopedInventory = null as any;
utilities.lazyLoad(exports, ["TaskNetAppScopedInventory"], () => require("./taskNetAppScopedInventory"));

export { TaskNexusScopedInventoryArgs, TaskNexusScopedInventoryState } from "./taskNexusScopedInventory";
export type TaskNexusScopedInventory = import("./taskNexusScopedInventory").TaskNexusScopedInventory;
export const TaskNexusScopedInventory: typeof import("./taskNexusScopedInventory").TaskNexusScopedInventory = null as any;
utilities.lazyLoad(exports, ["TaskNexusScopedInventory"], () => require("./taskNexusScopedInventory"));

export { TaskNexusSystemScopedInventoryArgs, TaskNexusSystemScopedInventoryState } from "./taskNexusSystemScopedInventory";
export type TaskNexusSystemScopedInventory = import("./taskNexusSystemScopedInventory").TaskNexusSystemScopedInventory;
export const TaskNexusSystemScopedInventory: typeof import("./taskNexusSystemScopedInventory").TaskNexusSystemScopedInventory = null as any;
utilities.lazyLoad(exports, ["TaskNexusSystemScopedInventory"], () => require("./taskNexusSystemScopedInventory"));

export { TaskNexusVlanScopedInventoryArgs, TaskNexusVlanScopedInventoryState } from "./taskNexusVlanScopedInventory";
export type TaskNexusVlanScopedInventory = import("./taskNexusVlanScopedInventory").TaskNexusVlanScopedInventory;
export const TaskNexusVlanScopedInventory: typeof import("./taskNexusVlanScopedInventory").TaskNexusVlanScopedInventory = null as any;
utilities.lazyLoad(exports, ["TaskNexusVlanScopedInventory"], () => require("./taskNexusVlanScopedInventory"));

export { TaskPublicCloudScopedInventoryArgs, TaskPublicCloudScopedInventoryState } from "./taskPublicCloudScopedInventory";
export type TaskPublicCloudScopedInventory = import("./taskPublicCloudScopedInventory").TaskPublicCloudScopedInventory;
export const TaskPublicCloudScopedInventory: typeof import("./taskPublicCloudScopedInventory").TaskPublicCloudScopedInventory = null as any;
utilities.lazyLoad(exports, ["TaskPublicCloudScopedInventory"], () => require("./taskPublicCloudScopedInventory"));

export { TaskPureScopedInventoryArgs, TaskPureScopedInventoryState } from "./taskPureScopedInventory";
export type TaskPureScopedInventory = import("./taskPureScopedInventory").TaskPureScopedInventory;
export const TaskPureScopedInventory: typeof import("./taskPureScopedInventory").TaskPureScopedInventory = null as any;
utilities.lazyLoad(exports, ["TaskPureScopedInventory"], () => require("./taskPureScopedInventory"));

export { TaskServerScopedInventoryArgs, TaskServerScopedInventoryState } from "./taskServerScopedInventory";
export type TaskServerScopedInventory = import("./taskServerScopedInventory").TaskServerScopedInventory;
export const TaskServerScopedInventory: typeof import("./taskServerScopedInventory").TaskServerScopedInventory = null as any;
utilities.lazyLoad(exports, ["TaskServerScopedInventory"], () => require("./taskServerScopedInventory"));

export { TechsupportmanagementCollectionControlPolicyArgs, TechsupportmanagementCollectionControlPolicyState } from "./techsupportmanagementCollectionControlPolicy";
export type TechsupportmanagementCollectionControlPolicy = import("./techsupportmanagementCollectionControlPolicy").TechsupportmanagementCollectionControlPolicy;
export const TechsupportmanagementCollectionControlPolicy: typeof import("./techsupportmanagementCollectionControlPolicy").TechsupportmanagementCollectionControlPolicy = null as any;
utilities.lazyLoad(exports, ["TechsupportmanagementCollectionControlPolicy"], () => require("./techsupportmanagementCollectionControlPolicy"));

export { TechsupportmanagementTechSupportBundleArgs, TechsupportmanagementTechSupportBundleState } from "./techsupportmanagementTechSupportBundle";
export type TechsupportmanagementTechSupportBundle = import("./techsupportmanagementTechSupportBundle").TechsupportmanagementTechSupportBundle;
export const TechsupportmanagementTechSupportBundle: typeof import("./techsupportmanagementTechSupportBundle").TechsupportmanagementTechSupportBundle = null as any;
utilities.lazyLoad(exports, ["TechsupportmanagementTechSupportBundle"], () => require("./techsupportmanagementTechSupportBundle"));

export { TerraformExecutorArgs, TerraformExecutorState } from "./terraformExecutor";
export type TerraformExecutor = import("./terraformExecutor").TerraformExecutor;
export const TerraformExecutor: typeof import("./terraformExecutor").TerraformExecutor = null as any;
utilities.lazyLoad(exports, ["TerraformExecutor"], () => require("./terraformExecutor"));

export { ThermalPolicyArgs, ThermalPolicyState } from "./thermalPolicy";
export type ThermalPolicy = import("./thermalPolicy").ThermalPolicy;
export const ThermalPolicy: typeof import("./thermalPolicy").ThermalPolicy = null as any;
utilities.lazyLoad(exports, ["ThermalPolicy"], () => require("./thermalPolicy"));

export { UuidpoolPoolArgs, UuidpoolPoolState } from "./uuidpoolPool";
export type UuidpoolPool = import("./uuidpoolPool").UuidpoolPool;
export const UuidpoolPool: typeof import("./uuidpoolPool").UuidpoolPool = null as any;
utilities.lazyLoad(exports, ["UuidpoolPool"], () => require("./uuidpoolPool"));

export { UuidpoolReservationArgs, UuidpoolReservationState } from "./uuidpoolReservation";
export type UuidpoolReservation = import("./uuidpoolReservation").UuidpoolReservation;
export const UuidpoolReservation: typeof import("./uuidpoolReservation").UuidpoolReservation = null as any;
utilities.lazyLoad(exports, ["UuidpoolReservation"], () => require("./uuidpoolReservation"));

export { VirtualizationEsxiConsoleArgs, VirtualizationEsxiConsoleState } from "./virtualizationEsxiConsole";
export type VirtualizationEsxiConsole = import("./virtualizationEsxiConsole").VirtualizationEsxiConsole;
export const VirtualizationEsxiConsole: typeof import("./virtualizationEsxiConsole").VirtualizationEsxiConsole = null as any;
utilities.lazyLoad(exports, ["VirtualizationEsxiConsole"], () => require("./virtualizationEsxiConsole"));

export { VirtualizationVirtualMachineArgs, VirtualizationVirtualMachineState } from "./virtualizationVirtualMachine";
export type VirtualizationVirtualMachine = import("./virtualizationVirtualMachine").VirtualizationVirtualMachine;
export const VirtualizationVirtualMachine: typeof import("./virtualizationVirtualMachine").VirtualizationVirtualMachine = null as any;
utilities.lazyLoad(exports, ["VirtualizationVirtualMachine"], () => require("./virtualizationVirtualMachine"));

export { VmediaPolicyArgs, VmediaPolicyState } from "./vmediaPolicy";
export type VmediaPolicy = import("./vmediaPolicy").VmediaPolicy;
export const VmediaPolicy: typeof import("./vmediaPolicy").VmediaPolicy = null as any;
utilities.lazyLoad(exports, ["VmediaPolicy"], () => require("./vmediaPolicy"));

export { VmrcConsoleArgs, VmrcConsoleState } from "./vmrcConsole";
export type VmrcConsole = import("./vmrcConsole").VmrcConsole;
export const VmrcConsole: typeof import("./vmrcConsole").VmrcConsole = null as any;
utilities.lazyLoad(exports, ["VmrcConsole"], () => require("./vmrcConsole"));

export { VnicEthAdapterPolicyArgs, VnicEthAdapterPolicyState } from "./vnicEthAdapterPolicy";
export type VnicEthAdapterPolicy = import("./vnicEthAdapterPolicy").VnicEthAdapterPolicy;
export const VnicEthAdapterPolicy: typeof import("./vnicEthAdapterPolicy").VnicEthAdapterPolicy = null as any;
utilities.lazyLoad(exports, ["VnicEthAdapterPolicy"], () => require("./vnicEthAdapterPolicy"));

export { VnicEthIfArgs, VnicEthIfState } from "./vnicEthIf";
export type VnicEthIf = import("./vnicEthIf").VnicEthIf;
export const VnicEthIf: typeof import("./vnicEthIf").VnicEthIf = null as any;
utilities.lazyLoad(exports, ["VnicEthIf"], () => require("./vnicEthIf"));

export { VnicEthNetworkPolicyArgs, VnicEthNetworkPolicyState } from "./vnicEthNetworkPolicy";
export type VnicEthNetworkPolicy = import("./vnicEthNetworkPolicy").VnicEthNetworkPolicy;
export const VnicEthNetworkPolicy: typeof import("./vnicEthNetworkPolicy").VnicEthNetworkPolicy = null as any;
utilities.lazyLoad(exports, ["VnicEthNetworkPolicy"], () => require("./vnicEthNetworkPolicy"));

export { VnicEthQosPolicyArgs, VnicEthQosPolicyState } from "./vnicEthQosPolicy";
export type VnicEthQosPolicy = import("./vnicEthQosPolicy").VnicEthQosPolicy;
export const VnicEthQosPolicy: typeof import("./vnicEthQosPolicy").VnicEthQosPolicy = null as any;
utilities.lazyLoad(exports, ["VnicEthQosPolicy"], () => require("./vnicEthQosPolicy"));

export { VnicFcAdapterPolicyArgs, VnicFcAdapterPolicyState } from "./vnicFcAdapterPolicy";
export type VnicFcAdapterPolicy = import("./vnicFcAdapterPolicy").VnicFcAdapterPolicy;
export const VnicFcAdapterPolicy: typeof import("./vnicFcAdapterPolicy").VnicFcAdapterPolicy = null as any;
utilities.lazyLoad(exports, ["VnicFcAdapterPolicy"], () => require("./vnicFcAdapterPolicy"));

export { VnicFcIfArgs, VnicFcIfState } from "./vnicFcIf";
export type VnicFcIf = import("./vnicFcIf").VnicFcIf;
export const VnicFcIf: typeof import("./vnicFcIf").VnicFcIf = null as any;
utilities.lazyLoad(exports, ["VnicFcIf"], () => require("./vnicFcIf"));

export { VnicFcNetworkPolicyArgs, VnicFcNetworkPolicyState } from "./vnicFcNetworkPolicy";
export type VnicFcNetworkPolicy = import("./vnicFcNetworkPolicy").VnicFcNetworkPolicy;
export const VnicFcNetworkPolicy: typeof import("./vnicFcNetworkPolicy").VnicFcNetworkPolicy = null as any;
utilities.lazyLoad(exports, ["VnicFcNetworkPolicy"], () => require("./vnicFcNetworkPolicy"));

export { VnicFcQosPolicyArgs, VnicFcQosPolicyState } from "./vnicFcQosPolicy";
export type VnicFcQosPolicy = import("./vnicFcQosPolicy").VnicFcQosPolicy;
export const VnicFcQosPolicy: typeof import("./vnicFcQosPolicy").VnicFcQosPolicy = null as any;
utilities.lazyLoad(exports, ["VnicFcQosPolicy"], () => require("./vnicFcQosPolicy"));

export { VnicIscsiAdapterPolicyArgs, VnicIscsiAdapterPolicyState } from "./vnicIscsiAdapterPolicy";
export type VnicIscsiAdapterPolicy = import("./vnicIscsiAdapterPolicy").VnicIscsiAdapterPolicy;
export const VnicIscsiAdapterPolicy: typeof import("./vnicIscsiAdapterPolicy").VnicIscsiAdapterPolicy = null as any;
utilities.lazyLoad(exports, ["VnicIscsiAdapterPolicy"], () => require("./vnicIscsiAdapterPolicy"));

export { VnicIscsiBootPolicyArgs, VnicIscsiBootPolicyState } from "./vnicIscsiBootPolicy";
export type VnicIscsiBootPolicy = import("./vnicIscsiBootPolicy").VnicIscsiBootPolicy;
export const VnicIscsiBootPolicy: typeof import("./vnicIscsiBootPolicy").VnicIscsiBootPolicy = null as any;
utilities.lazyLoad(exports, ["VnicIscsiBootPolicy"], () => require("./vnicIscsiBootPolicy"));

export { VnicIscsiStaticTargetPolicyArgs, VnicIscsiStaticTargetPolicyState } from "./vnicIscsiStaticTargetPolicy";
export type VnicIscsiStaticTargetPolicy = import("./vnicIscsiStaticTargetPolicy").VnicIscsiStaticTargetPolicy;
export const VnicIscsiStaticTargetPolicy: typeof import("./vnicIscsiStaticTargetPolicy").VnicIscsiStaticTargetPolicy = null as any;
utilities.lazyLoad(exports, ["VnicIscsiStaticTargetPolicy"], () => require("./vnicIscsiStaticTargetPolicy"));

export { VnicLanConnectivityPolicyArgs, VnicLanConnectivityPolicyState } from "./vnicLanConnectivityPolicy";
export type VnicLanConnectivityPolicy = import("./vnicLanConnectivityPolicy").VnicLanConnectivityPolicy;
export const VnicLanConnectivityPolicy: typeof import("./vnicLanConnectivityPolicy").VnicLanConnectivityPolicy = null as any;
utilities.lazyLoad(exports, ["VnicLanConnectivityPolicy"], () => require("./vnicLanConnectivityPolicy"));

export { VnicSanConnectivityPolicyArgs, VnicSanConnectivityPolicyState } from "./vnicSanConnectivityPolicy";
export type VnicSanConnectivityPolicy = import("./vnicSanConnectivityPolicy").VnicSanConnectivityPolicy;
export const VnicSanConnectivityPolicy: typeof import("./vnicSanConnectivityPolicy").VnicSanConnectivityPolicy = null as any;
utilities.lazyLoad(exports, ["VnicSanConnectivityPolicy"], () => require("./vnicSanConnectivityPolicy"));

export { VnicVhbaTemplateArgs, VnicVhbaTemplateState } from "./vnicVhbaTemplate";
export type VnicVhbaTemplate = import("./vnicVhbaTemplate").VnicVhbaTemplate;
export const VnicVhbaTemplate: typeof import("./vnicVhbaTemplate").VnicVhbaTemplate = null as any;
utilities.lazyLoad(exports, ["VnicVhbaTemplate"], () => require("./vnicVhbaTemplate"));

export { VnicVnicTemplateArgs, VnicVnicTemplateState } from "./vnicVnicTemplate";
export type VnicVnicTemplate = import("./vnicVnicTemplate").VnicVnicTemplate;
export const VnicVnicTemplate: typeof import("./vnicVnicTemplate").VnicVnicTemplate = null as any;
utilities.lazyLoad(exports, ["VnicVnicTemplate"], () => require("./vnicVnicTemplate"));

export { VrfVrfArgs, VrfVrfState } from "./vrfVrf";
export type VrfVrf = import("./vrfVrf").VrfVrf;
export const VrfVrf: typeof import("./vrfVrf").VrfVrf = null as any;
utilities.lazyLoad(exports, ["VrfVrf"], () => require("./vrfVrf"));

export { WorkflowAnsibleBatchExecutorArgs, WorkflowAnsibleBatchExecutorState } from "./workflowAnsibleBatchExecutor";
export type WorkflowAnsibleBatchExecutor = import("./workflowAnsibleBatchExecutor").WorkflowAnsibleBatchExecutor;
export const WorkflowAnsibleBatchExecutor: typeof import("./workflowAnsibleBatchExecutor").WorkflowAnsibleBatchExecutor = null as any;
utilities.lazyLoad(exports, ["WorkflowAnsibleBatchExecutor"], () => require("./workflowAnsibleBatchExecutor"));

export { WorkflowBatchApiExecutorArgs, WorkflowBatchApiExecutorState } from "./workflowBatchApiExecutor";
export type WorkflowBatchApiExecutor = import("./workflowBatchApiExecutor").WorkflowBatchApiExecutor;
export const WorkflowBatchApiExecutor: typeof import("./workflowBatchApiExecutor").WorkflowBatchApiExecutor = null as any;
utilities.lazyLoad(exports, ["WorkflowBatchApiExecutor"], () => require("./workflowBatchApiExecutor"));

export { WorkflowCatalogItemDefinitionArgs, WorkflowCatalogItemDefinitionState } from "./workflowCatalogItemDefinition";
export type WorkflowCatalogItemDefinition = import("./workflowCatalogItemDefinition").WorkflowCatalogItemDefinition;
export const WorkflowCatalogItemDefinition: typeof import("./workflowCatalogItemDefinition").WorkflowCatalogItemDefinition = null as any;
utilities.lazyLoad(exports, ["WorkflowCatalogItemDefinition"], () => require("./workflowCatalogItemDefinition"));

export { WorkflowCatalogServiceRequestArgs, WorkflowCatalogServiceRequestState } from "./workflowCatalogServiceRequest";
export type WorkflowCatalogServiceRequest = import("./workflowCatalogServiceRequest").WorkflowCatalogServiceRequest;
export const WorkflowCatalogServiceRequest: typeof import("./workflowCatalogServiceRequest").WorkflowCatalogServiceRequest = null as any;
utilities.lazyLoad(exports, ["WorkflowCatalogServiceRequest"], () => require("./workflowCatalogServiceRequest"));

export { WorkflowCustomDataTypeDefinitionArgs, WorkflowCustomDataTypeDefinitionState } from "./workflowCustomDataTypeDefinition";
export type WorkflowCustomDataTypeDefinition = import("./workflowCustomDataTypeDefinition").WorkflowCustomDataTypeDefinition;
export const WorkflowCustomDataTypeDefinition: typeof import("./workflowCustomDataTypeDefinition").WorkflowCustomDataTypeDefinition = null as any;
utilities.lazyLoad(exports, ["WorkflowCustomDataTypeDefinition"], () => require("./workflowCustomDataTypeDefinition"));

export { WorkflowErrorResponseHandlerArgs, WorkflowErrorResponseHandlerState } from "./workflowErrorResponseHandler";
export type WorkflowErrorResponseHandler = import("./workflowErrorResponseHandler").WorkflowErrorResponseHandler;
export const WorkflowErrorResponseHandler: typeof import("./workflowErrorResponseHandler").WorkflowErrorResponseHandler = null as any;
utilities.lazyLoad(exports, ["WorkflowErrorResponseHandler"], () => require("./workflowErrorResponseHandler"));

export { WorkflowPowerShellBatchApiExecutorArgs, WorkflowPowerShellBatchApiExecutorState } from "./workflowPowerShellBatchApiExecutor";
export type WorkflowPowerShellBatchApiExecutor = import("./workflowPowerShellBatchApiExecutor").WorkflowPowerShellBatchApiExecutor;
export const WorkflowPowerShellBatchApiExecutor: typeof import("./workflowPowerShellBatchApiExecutor").WorkflowPowerShellBatchApiExecutor = null as any;
utilities.lazyLoad(exports, ["WorkflowPowerShellBatchApiExecutor"], () => require("./workflowPowerShellBatchApiExecutor"));

export { WorkflowRollbackWorkflowArgs, WorkflowRollbackWorkflowState } from "./workflowRollbackWorkflow";
export type WorkflowRollbackWorkflow = import("./workflowRollbackWorkflow").WorkflowRollbackWorkflow;
export const WorkflowRollbackWorkflow: typeof import("./workflowRollbackWorkflow").WorkflowRollbackWorkflow = null as any;
utilities.lazyLoad(exports, ["WorkflowRollbackWorkflow"], () => require("./workflowRollbackWorkflow"));

export { WorkflowServiceItemActionDefinitionArgs, WorkflowServiceItemActionDefinitionState } from "./workflowServiceItemActionDefinition";
export type WorkflowServiceItemActionDefinition = import("./workflowServiceItemActionDefinition").WorkflowServiceItemActionDefinition;
export const WorkflowServiceItemActionDefinition: typeof import("./workflowServiceItemActionDefinition").WorkflowServiceItemActionDefinition = null as any;
utilities.lazyLoad(exports, ["WorkflowServiceItemActionDefinition"], () => require("./workflowServiceItemActionDefinition"));

export { WorkflowServiceItemActionInstanceArgs, WorkflowServiceItemActionInstanceState } from "./workflowServiceItemActionInstance";
export type WorkflowServiceItemActionInstance = import("./workflowServiceItemActionInstance").WorkflowServiceItemActionInstance;
export const WorkflowServiceItemActionInstance: typeof import("./workflowServiceItemActionInstance").WorkflowServiceItemActionInstance = null as any;
utilities.lazyLoad(exports, ["WorkflowServiceItemActionInstance"], () => require("./workflowServiceItemActionInstance"));

export { WorkflowServiceItemDefinitionArgs, WorkflowServiceItemDefinitionState } from "./workflowServiceItemDefinition";
export type WorkflowServiceItemDefinition = import("./workflowServiceItemDefinition").WorkflowServiceItemDefinition;
export const WorkflowServiceItemDefinition: typeof import("./workflowServiceItemDefinition").WorkflowServiceItemDefinition = null as any;
utilities.lazyLoad(exports, ["WorkflowServiceItemDefinition"], () => require("./workflowServiceItemDefinition"));

export { WorkflowServiceItemHealthCheckDefinitionArgs, WorkflowServiceItemHealthCheckDefinitionState } from "./workflowServiceItemHealthCheckDefinition";
export type WorkflowServiceItemHealthCheckDefinition = import("./workflowServiceItemHealthCheckDefinition").WorkflowServiceItemHealthCheckDefinition;
export const WorkflowServiceItemHealthCheckDefinition: typeof import("./workflowServiceItemHealthCheckDefinition").WorkflowServiceItemHealthCheckDefinition = null as any;
utilities.lazyLoad(exports, ["WorkflowServiceItemHealthCheckDefinition"], () => require("./workflowServiceItemHealthCheckDefinition"));

export { WorkflowServiceItemInstanceArgs, WorkflowServiceItemInstanceState } from "./workflowServiceItemInstance";
export type WorkflowServiceItemInstance = import("./workflowServiceItemInstance").WorkflowServiceItemInstance;
export const WorkflowServiceItemInstance: typeof import("./workflowServiceItemInstance").WorkflowServiceItemInstance = null as any;
utilities.lazyLoad(exports, ["WorkflowServiceItemInstance"], () => require("./workflowServiceItemInstance"));

export { WorkflowServiceItemOutputArgs, WorkflowServiceItemOutputState } from "./workflowServiceItemOutput";
export type WorkflowServiceItemOutput = import("./workflowServiceItemOutput").WorkflowServiceItemOutput;
export const WorkflowServiceItemOutput: typeof import("./workflowServiceItemOutput").WorkflowServiceItemOutput = null as any;
utilities.lazyLoad(exports, ["WorkflowServiceItemOutput"], () => require("./workflowServiceItemOutput"));

export { WorkflowSshBatchExecutorArgs, WorkflowSshBatchExecutorState } from "./workflowSshBatchExecutor";
export type WorkflowSshBatchExecutor = import("./workflowSshBatchExecutor").WorkflowSshBatchExecutor;
export const WorkflowSshBatchExecutor: typeof import("./workflowSshBatchExecutor").WorkflowSshBatchExecutor = null as any;
utilities.lazyLoad(exports, ["WorkflowSshBatchExecutor"], () => require("./workflowSshBatchExecutor"));

export { WorkflowTaskDefinitionArgs, WorkflowTaskDefinitionState } from "./workflowTaskDefinition";
export type WorkflowTaskDefinition = import("./workflowTaskDefinition").WorkflowTaskDefinition;
export const WorkflowTaskDefinition: typeof import("./workflowTaskDefinition").WorkflowTaskDefinition = null as any;
utilities.lazyLoad(exports, ["WorkflowTaskDefinition"], () => require("./workflowTaskDefinition"));

export { WorkflowTemplateEvaluationArgs, WorkflowTemplateEvaluationState } from "./workflowTemplateEvaluation";
export type WorkflowTemplateEvaluation = import("./workflowTemplateEvaluation").WorkflowTemplateEvaluation;
export const WorkflowTemplateEvaluation: typeof import("./workflowTemplateEvaluation").WorkflowTemplateEvaluation = null as any;
utilities.lazyLoad(exports, ["WorkflowTemplateEvaluation"], () => require("./workflowTemplateEvaluation"));

export { WorkflowTemplateParserArgs, WorkflowTemplateParserState } from "./workflowTemplateParser";
export type WorkflowTemplateParser = import("./workflowTemplateParser").WorkflowTemplateParser;
export const WorkflowTemplateParser: typeof import("./workflowTemplateParser").WorkflowTemplateParser = null as any;
utilities.lazyLoad(exports, ["WorkflowTemplateParser"], () => require("./workflowTemplateParser"));

export { WorkflowUiDisplayMetadataArgs, WorkflowUiDisplayMetadataState } from "./workflowUiDisplayMetadata";
export type WorkflowUiDisplayMetadata = import("./workflowUiDisplayMetadata").WorkflowUiDisplayMetadata;
export const WorkflowUiDisplayMetadata: typeof import("./workflowUiDisplayMetadata").WorkflowUiDisplayMetadata = null as any;
utilities.lazyLoad(exports, ["WorkflowUiDisplayMetadata"], () => require("./workflowUiDisplayMetadata"));

export { WorkflowWorkflowDefinitionArgs, WorkflowWorkflowDefinitionState } from "./workflowWorkflowDefinition";
export type WorkflowWorkflowDefinition = import("./workflowWorkflowDefinition").WorkflowWorkflowDefinition;
export const WorkflowWorkflowDefinition: typeof import("./workflowWorkflowDefinition").WorkflowWorkflowDefinition = null as any;
utilities.lazyLoad(exports, ["WorkflowWorkflowDefinition"], () => require("./workflowWorkflowDefinition"));

export { WorkflowWorkflowInfoArgs, WorkflowWorkflowInfoState } from "./workflowWorkflowInfo";
export type WorkflowWorkflowInfo = import("./workflowWorkflowInfo").WorkflowWorkflowInfo;
export const WorkflowWorkflowInfo: typeof import("./workflowWorkflowInfo").WorkflowWorkflowInfo = null as any;
utilities.lazyLoad(exports, ["WorkflowWorkflowInfo"], () => require("./workflowWorkflowInfo"));

export { WorkspaceFolderArgs, WorkspaceFolderState } from "./workspaceFolder";
export type WorkspaceFolder = import("./workspaceFolder").WorkspaceFolder;
export const WorkspaceFolder: typeof import("./workspaceFolder").WorkspaceFolder = null as any;
utilities.lazyLoad(exports, ["WorkspaceFolder"], () => require("./workspaceFolder"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "intersight:index/aaaRetentionPolicy:AaaRetentionPolicy":
                return new AaaRetentionPolicy(name, <any>undefined, { urn })
            case "intersight:index/accessPolicy:AccessPolicy":
                return new AccessPolicy(name, <any>undefined, { urn })
            case "intersight:index/adapterConfigPolicy:AdapterConfigPolicy":
                return new AdapterConfigPolicy(name, <any>undefined, { urn })
            case "intersight:index/applianceAutoRmaPolicy:ApplianceAutoRmaPolicy":
                return new ApplianceAutoRmaPolicy(name, <any>undefined, { urn })
            case "intersight:index/applianceBackup:ApplianceBackup":
                return new ApplianceBackup(name, <any>undefined, { urn })
            case "intersight:index/applianceBackupPolicy:ApplianceBackupPolicy":
                return new ApplianceBackupPolicy(name, <any>undefined, { urn })
            case "intersight:index/applianceClusterInfo:ApplianceClusterInfo":
                return new ApplianceClusterInfo(name, <any>undefined, { urn })
            case "intersight:index/applianceClusterReplaceNode:ApplianceClusterReplaceNode":
                return new ApplianceClusterReplaceNode(name, <any>undefined, { urn })
            case "intersight:index/applianceDataExportPolicy:ApplianceDataExportPolicy":
                return new ApplianceDataExportPolicy(name, <any>undefined, { urn })
            case "intersight:index/applianceDeviceClaim:ApplianceDeviceClaim":
                return new ApplianceDeviceClaim(name, <any>undefined, { urn })
            case "intersight:index/applianceDiagSetting:ApplianceDiagSetting":
                return new ApplianceDiagSetting(name, <any>undefined, { urn })
            case "intersight:index/applianceExternalSyslogSetting:ApplianceExternalSyslogSetting":
                return new ApplianceExternalSyslogSetting(name, <any>undefined, { urn })
            case "intersight:index/applianceRemoteFileImport:ApplianceRemoteFileImport":
                return new ApplianceRemoteFileImport(name, <any>undefined, { urn })
            case "intersight:index/applianceRestore:ApplianceRestore":
                return new ApplianceRestore(name, <any>undefined, { urn })
            case "intersight:index/assetDeviceClaim:AssetDeviceClaim":
                return new AssetDeviceClaim(name, <any>undefined, { urn })
            case "intersight:index/assetDeviceContractNotification:AssetDeviceContractNotification":
                return new AssetDeviceContractNotification(name, <any>undefined, { urn })
            case "intersight:index/assetTarget:AssetTarget":
                return new AssetTarget(name, <any>undefined, { urn })
            case "intersight:index/biosPolicy:BiosPolicy":
                return new BiosPolicy(name, <any>undefined, { urn })
            case "intersight:index/bootPrecisionPolicy:BootPrecisionPolicy":
                return new BootPrecisionPolicy(name, <any>undefined, { urn })
            case "intersight:index/bulkExport:BulkExport":
                return new BulkExport(name, <any>undefined, { urn })
            case "intersight:index/bulkMoCloner:BulkMoCloner":
                return new BulkMoCloner(name, <any>undefined, { urn })
            case "intersight:index/bulkMoDeepCloner:BulkMoDeepCloner":
                return new BulkMoDeepCloner(name, <any>undefined, { urn })
            case "intersight:index/bulkMoMerger:BulkMoMerger":
                return new BulkMoMerger(name, <any>undefined, { urn })
            case "intersight:index/bulkRequest:BulkRequest":
                return new BulkRequest(name, <any>undefined, { urn })
            case "intersight:index/capabilityActionsMetaData:CapabilityActionsMetaData":
                return new CapabilityActionsMetaData(name, <any>undefined, { urn })
            case "intersight:index/capabilityAdapterDeprecatedDef:CapabilityAdapterDeprecatedDef":
                return new CapabilityAdapterDeprecatedDef(name, <any>undefined, { urn })
            case "intersight:index/capabilityAdapterUnitDescriptor:CapabilityAdapterUnitDescriptor":
                return new CapabilityAdapterUnitDescriptor(name, <any>undefined, { urn })
            case "intersight:index/capabilityChassisDescriptor:CapabilityChassisDescriptor":
                return new CapabilityChassisDescriptor(name, <any>undefined, { urn })
            case "intersight:index/capabilityChassisManufacturingDef:CapabilityChassisManufacturingDef":
                return new CapabilityChassisManufacturingDef(name, <any>undefined, { urn })
            case "intersight:index/capabilityCimcFirmwareDescriptor:CapabilityCimcFirmwareDescriptor":
                return new CapabilityCimcFirmwareDescriptor(name, <any>undefined, { urn })
            case "intersight:index/capabilityEquipmentPhysicalDef:CapabilityEquipmentPhysicalDef":
                return new CapabilityEquipmentPhysicalDef(name, <any>undefined, { urn })
            case "intersight:index/capabilityEquipmentSlotArray:CapabilityEquipmentSlotArray":
                return new CapabilityEquipmentSlotArray(name, <any>undefined, { urn })
            case "intersight:index/capabilityFanModuleDescriptor:CapabilityFanModuleDescriptor":
                return new CapabilityFanModuleDescriptor(name, <any>undefined, { urn })
            case "intersight:index/capabilityFanModuleManufacturingDef:CapabilityFanModuleManufacturingDef":
                return new CapabilityFanModuleManufacturingDef(name, <any>undefined, { urn })
            case "intersight:index/capabilityFexCapabilityDef:CapabilityFexCapabilityDef":
                return new CapabilityFexCapabilityDef(name, <any>undefined, { urn })
            case "intersight:index/capabilityFexDescriptor:CapabilityFexDescriptor":
                return new CapabilityFexDescriptor(name, <any>undefined, { urn })
            case "intersight:index/capabilityFexManufacturingDef:CapabilityFexManufacturingDef":
                return new CapabilityFexManufacturingDef(name, <any>undefined, { urn })
            case "intersight:index/capabilityIoCardCapabilityDef:CapabilityIoCardCapabilityDef":
                return new CapabilityIoCardCapabilityDef(name, <any>undefined, { urn })
            case "intersight:index/capabilityIoCardDescriptor:CapabilityIoCardDescriptor":
                return new CapabilityIoCardDescriptor(name, <any>undefined, { urn })
            case "intersight:index/capabilityIoCardManufacturingDef:CapabilityIoCardManufacturingDef":
                return new CapabilityIoCardManufacturingDef(name, <any>undefined, { urn })
            case "intersight:index/capabilityPortGroupAggregationDef:CapabilityPortGroupAggregationDef":
                return new CapabilityPortGroupAggregationDef(name, <any>undefined, { urn })
            case "intersight:index/capabilityPsuDescriptor:CapabilityPsuDescriptor":
                return new CapabilityPsuDescriptor(name, <any>undefined, { urn })
            case "intersight:index/capabilityPsuManufacturingDef:CapabilityPsuManufacturingDef":
                return new CapabilityPsuManufacturingDef(name, <any>undefined, { urn })
            case "intersight:index/capabilityServerDescriptor:CapabilityServerDescriptor":
                return new CapabilityServerDescriptor(name, <any>undefined, { urn })
            case "intersight:index/capabilityServerModelsCapabilityDef:CapabilityServerModelsCapabilityDef":
                return new CapabilityServerModelsCapabilityDef(name, <any>undefined, { urn })
            case "intersight:index/capabilityServerSchemaDescriptor:CapabilityServerSchemaDescriptor":
                return new CapabilityServerSchemaDescriptor(name, <any>undefined, { urn })
            case "intersight:index/capabilitySiocModuleCapabilityDef:CapabilitySiocModuleCapabilityDef":
                return new CapabilitySiocModuleCapabilityDef(name, <any>undefined, { urn })
            case "intersight:index/capabilitySiocModuleDescriptor:CapabilitySiocModuleDescriptor":
                return new CapabilitySiocModuleDescriptor(name, <any>undefined, { urn })
            case "intersight:index/capabilitySiocModuleManufacturingDef:CapabilitySiocModuleManufacturingDef":
                return new CapabilitySiocModuleManufacturingDef(name, <any>undefined, { urn })
            case "intersight:index/capabilitySwitchCapability:CapabilitySwitchCapability":
                return new CapabilitySwitchCapability(name, <any>undefined, { urn })
            case "intersight:index/capabilitySwitchDescriptor:CapabilitySwitchDescriptor":
                return new CapabilitySwitchDescriptor(name, <any>undefined, { urn })
            case "intersight:index/capabilitySwitchEquipmentInfo:CapabilitySwitchEquipmentInfo":
                return new CapabilitySwitchEquipmentInfo(name, <any>undefined, { urn })
            case "intersight:index/capabilitySwitchManufacturingDef:CapabilitySwitchManufacturingDef":
                return new CapabilitySwitchManufacturingDef(name, <any>undefined, { urn })
            case "intersight:index/capabilityVicDescriptor:CapabilityVicDescriptor":
                return new CapabilityVicDescriptor(name, <any>undefined, { urn })
            case "intersight:index/certificatemanagementPolicy:CertificatemanagementPolicy":
                return new CertificatemanagementPolicy(name, <any>undefined, { urn })
            case "intersight:index/chassisConfigImport:ChassisConfigImport":
                return new ChassisConfigImport(name, <any>undefined, { urn })
            case "intersight:index/chassisProfile:ChassisProfile":
                return new ChassisProfile(name, <any>undefined, { urn })
            case "intersight:index/chassisProfileTemplate:ChassisProfileTemplate":
                return new ChassisProfileTemplate(name, <any>undefined, { urn })
            case "intersight:index/cloudCollectInventory:CloudCollectInventory":
                return new CloudCollectInventory(name, <any>undefined, { urn })
            case "intersight:index/commHttpProxyPolicy:CommHttpProxyPolicy":
                return new CommHttpProxyPolicy(name, <any>undefined, { urn })
            case "intersight:index/computeHostUtilityOperation:ComputeHostUtilityOperation":
                return new ComputeHostUtilityOperation(name, <any>undefined, { urn })
            case "intersight:index/condAlarmSuppression:CondAlarmSuppression":
                return new CondAlarmSuppression(name, <any>undefined, { urn })
            case "intersight:index/connectorpackConnectorPackUpgrade:ConnectorpackConnectorPackUpgrade":
                return new ConnectorpackConnectorPackUpgrade(name, <any>undefined, { urn })
            case "intersight:index/crdCustomResource:CrdCustomResource":
                return new CrdCustomResource(name, <any>undefined, { urn })
            case "intersight:index/deviceconnectorPolicy:DeviceconnectorPolicy":
                return new DeviceconnectorPolicy(name, <any>undefined, { urn })
            case "intersight:index/externalsiteAuthorization:ExternalsiteAuthorization":
                return new ExternalsiteAuthorization(name, <any>undefined, { urn })
            case "intersight:index/fabricAppliancePcRole:FabricAppliancePcRole":
                return new FabricAppliancePcRole(name, <any>undefined, { urn })
            case "intersight:index/fabricApplianceRole:FabricApplianceRole":
                return new FabricApplianceRole(name, <any>undefined, { urn })
            case "intersight:index/fabricEstimateImpact:FabricEstimateImpact":
                return new FabricEstimateImpact(name, <any>undefined, { urn })
            case "intersight:index/fabricEthNetworkControlPolicy:FabricEthNetworkControlPolicy":
                return new FabricEthNetworkControlPolicy(name, <any>undefined, { urn })
            case "intersight:index/fabricEthNetworkGroupPolicy:FabricEthNetworkGroupPolicy":
                return new FabricEthNetworkGroupPolicy(name, <any>undefined, { urn })
            case "intersight:index/fabricEthNetworkPolicy:FabricEthNetworkPolicy":
                return new FabricEthNetworkPolicy(name, <any>undefined, { urn })
            case "intersight:index/fabricFcNetworkPolicy:FabricFcNetworkPolicy":
                return new FabricFcNetworkPolicy(name, <any>undefined, { urn })
            case "intersight:index/fabricFcStorageRole:FabricFcStorageRole":
                return new FabricFcStorageRole(name, <any>undefined, { urn })
            case "intersight:index/fabricFcUplinkPcRole:FabricFcUplinkPcRole":
                return new FabricFcUplinkPcRole(name, <any>undefined, { urn })
            case "intersight:index/fabricFcUplinkRole:FabricFcUplinkRole":
                return new FabricFcUplinkRole(name, <any>undefined, { urn })
            case "intersight:index/fabricFcZonePolicy:FabricFcZonePolicy":
                return new FabricFcZonePolicy(name, <any>undefined, { urn })
            case "intersight:index/fabricFcoeUplinkPcRole:FabricFcoeUplinkPcRole":
                return new FabricFcoeUplinkPcRole(name, <any>undefined, { urn })
            case "intersight:index/fabricFcoeUplinkRole:FabricFcoeUplinkRole":
                return new FabricFcoeUplinkRole(name, <any>undefined, { urn })
            case "intersight:index/fabricFlowControlPolicy:FabricFlowControlPolicy":
                return new FabricFlowControlPolicy(name, <any>undefined, { urn })
            case "intersight:index/fabricLanPinGroup:FabricLanPinGroup":
                return new FabricLanPinGroup(name, <any>undefined, { urn })
            case "intersight:index/fabricLinkAggregationPolicy:FabricLinkAggregationPolicy":
                return new FabricLinkAggregationPolicy(name, <any>undefined, { urn })
            case "intersight:index/fabricLinkControlPolicy:FabricLinkControlPolicy":
                return new FabricLinkControlPolicy(name, <any>undefined, { urn })
            case "intersight:index/fabricMulticastPolicy:FabricMulticastPolicy":
                return new FabricMulticastPolicy(name, <any>undefined, { urn })
            case "intersight:index/fabricPcOperation:FabricPcOperation":
                return new FabricPcOperation(name, <any>undefined, { urn })
            case "intersight:index/fabricPortMode:FabricPortMode":
                return new FabricPortMode(name, <any>undefined, { urn })
            case "intersight:index/fabricPortOperation:FabricPortOperation":
                return new FabricPortOperation(name, <any>undefined, { urn })
            case "intersight:index/fabricPortPolicy:FabricPortPolicy":
                return new FabricPortPolicy(name, <any>undefined, { urn })
            case "intersight:index/fabricSanPinGroup:FabricSanPinGroup":
                return new FabricSanPinGroup(name, <any>undefined, { urn })
            case "intersight:index/fabricServerRole:FabricServerRole":
                return new FabricServerRole(name, <any>undefined, { urn })
            case "intersight:index/fabricSpanDestEthPort:FabricSpanDestEthPort":
                return new FabricSpanDestEthPort(name, <any>undefined, { urn })
            case "intersight:index/fabricSpanSession:FabricSpanSession":
                return new FabricSpanSession(name, <any>undefined, { urn })
            case "intersight:index/fabricSpanSourceEthPort:FabricSpanSourceEthPort":
                return new FabricSpanSourceEthPort(name, <any>undefined, { urn })
            case "intersight:index/fabricSpanSourceEthPortChannel:FabricSpanSourceEthPortChannel":
                return new FabricSpanSourceEthPortChannel(name, <any>undefined, { urn })
            case "intersight:index/fabricSpanSourceVlan:FabricSpanSourceVlan":
                return new FabricSpanSourceVlan(name, <any>undefined, { urn })
            case "intersight:index/fabricSpanSourceVnicEthIf:FabricSpanSourceVnicEthIf":
                return new FabricSpanSourceVnicEthIf(name, <any>undefined, { urn })
            case "intersight:index/fabricSwitchClusterProfile:FabricSwitchClusterProfile":
                return new FabricSwitchClusterProfile(name, <any>undefined, { urn })
            case "intersight:index/fabricSwitchClusterProfileTemplate:FabricSwitchClusterProfileTemplate":
                return new FabricSwitchClusterProfileTemplate(name, <any>undefined, { urn })
            case "intersight:index/fabricSwitchControlPolicy:FabricSwitchControlPolicy":
                return new FabricSwitchControlPolicy(name, <any>undefined, { urn })
            case "intersight:index/fabricSwitchProfile:FabricSwitchProfile":
                return new FabricSwitchProfile(name, <any>undefined, { urn })
            case "intersight:index/fabricSwitchProfileTemplate:FabricSwitchProfileTemplate":
                return new FabricSwitchProfileTemplate(name, <any>undefined, { urn })
            case "intersight:index/fabricSystemQosPolicy:FabricSystemQosPolicy":
                return new FabricSystemQosPolicy(name, <any>undefined, { urn })
            case "intersight:index/fabricUplinkPcRole:FabricUplinkPcRole":
                return new FabricUplinkPcRole(name, <any>undefined, { urn })
            case "intersight:index/fabricUplinkRole:FabricUplinkRole":
                return new FabricUplinkRole(name, <any>undefined, { urn })
            case "intersight:index/fabricVlan:FabricVlan":
                return new FabricVlan(name, <any>undefined, { urn })
            case "intersight:index/fabricVsan:FabricVsan":
                return new FabricVsan(name, <any>undefined, { urn })
            case "intersight:index/fcpoolPool:FcpoolPool":
                return new FcpoolPool(name, <any>undefined, { urn })
            case "intersight:index/fcpoolReservation:FcpoolReservation":
                return new FcpoolReservation(name, <any>undefined, { urn })
            case "intersight:index/feedbackFeedbackPost:FeedbackFeedbackPost":
                return new FeedbackFeedbackPost(name, <any>undefined, { urn })
            case "intersight:index/firmwareBiosDescriptor:FirmwareBiosDescriptor":
                return new FirmwareBiosDescriptor(name, <any>undefined, { urn })
            case "intersight:index/firmwareBoardControllerDescriptor:FirmwareBoardControllerDescriptor":
                return new FirmwareBoardControllerDescriptor(name, <any>undefined, { urn })
            case "intersight:index/firmwareChassisUpgrade:FirmwareChassisUpgrade":
                return new FirmwareChassisUpgrade(name, <any>undefined, { urn })
            case "intersight:index/firmwareCimcDescriptor:FirmwareCimcDescriptor":
                return new FirmwareCimcDescriptor(name, <any>undefined, { urn })
            case "intersight:index/firmwareDimmDescriptor:FirmwareDimmDescriptor":
                return new FirmwareDimmDescriptor(name, <any>undefined, { urn })
            case "intersight:index/firmwareDistributable:FirmwareDistributable":
                return new FirmwareDistributable(name, <any>undefined, { urn })
            case "intersight:index/firmwareDriveDescriptor:FirmwareDriveDescriptor":
                return new FirmwareDriveDescriptor(name, <any>undefined, { urn })
            case "intersight:index/firmwareDriverDistributable:FirmwareDriverDistributable":
                return new FirmwareDriverDistributable(name, <any>undefined, { urn })
            case "intersight:index/firmwareEula:FirmwareEula":
                return new FirmwareEula(name, <any>undefined, { urn })
            case "intersight:index/firmwareGpuDescriptor:FirmwareGpuDescriptor":
                return new FirmwareGpuDescriptor(name, <any>undefined, { urn })
            case "intersight:index/firmwareHbaDescriptor:FirmwareHbaDescriptor":
                return new FirmwareHbaDescriptor(name, <any>undefined, { urn })
            case "intersight:index/firmwareIomDescriptor:FirmwareIomDescriptor":
                return new FirmwareIomDescriptor(name, <any>undefined, { urn })
            case "intersight:index/firmwareMswitchDescriptor:FirmwareMswitchDescriptor":
                return new FirmwareMswitchDescriptor(name, <any>undefined, { urn })
            case "intersight:index/firmwareNxosDescriptor:FirmwareNxosDescriptor":
                return new FirmwareNxosDescriptor(name, <any>undefined, { urn })
            case "intersight:index/firmwarePcieDescriptor:FirmwarePcieDescriptor":
                return new FirmwarePcieDescriptor(name, <any>undefined, { urn })
            case "intersight:index/firmwarePolicy:FirmwarePolicy":
                return new FirmwarePolicy(name, <any>undefined, { urn })
            case "intersight:index/firmwarePsuDescriptor:FirmwarePsuDescriptor":
                return new FirmwarePsuDescriptor(name, <any>undefined, { urn })
            case "intersight:index/firmwareSasExpanderDescriptor:FirmwareSasExpanderDescriptor":
                return new FirmwareSasExpanderDescriptor(name, <any>undefined, { urn })
            case "intersight:index/firmwareServerConfigurationUtilityDistributable:FirmwareServerConfigurationUtilityDistributable":
                return new FirmwareServerConfigurationUtilityDistributable(name, <any>undefined, { urn })
            case "intersight:index/firmwareStorageControllerDescriptor:FirmwareStorageControllerDescriptor":
                return new FirmwareStorageControllerDescriptor(name, <any>undefined, { urn })
            case "intersight:index/firmwareSwitchUpgrade:FirmwareSwitchUpgrade":
                return new FirmwareSwitchUpgrade(name, <any>undefined, { urn })
            case "intersight:index/firmwareUnsupportedVersionUpgrade:FirmwareUnsupportedVersionUpgrade":
                return new FirmwareUnsupportedVersionUpgrade(name, <any>undefined, { urn })
            case "intersight:index/firmwareUpgrade:FirmwareUpgrade":
                return new FirmwareUpgrade(name, <any>undefined, { urn })
            case "intersight:index/firmwareUpgradeImpact:FirmwareUpgradeImpact":
                return new FirmwareUpgradeImpact(name, <any>undefined, { urn })
            case "intersight:index/firmwareUpgradeValidity:FirmwareUpgradeValidity":
                return new FirmwareUpgradeValidity(name, <any>undefined, { urn })
            case "intersight:index/hclCompatibilityStatus:HclCompatibilityStatus":
                return new HclCompatibilityStatus(name, <any>undefined, { urn })
            case "intersight:index/hclHyperflexSoftwareCompatibilityInfo:HclHyperflexSoftwareCompatibilityInfo":
                return new HclHyperflexSoftwareCompatibilityInfo(name, <any>undefined, { urn })
            case "intersight:index/hclSupportedDriverName:HclSupportedDriverName":
                return new HclSupportedDriverName(name, <any>undefined, { urn })
            case "intersight:index/hyperflexAppCatalog:HyperflexAppCatalog":
                return new HyperflexAppCatalog(name, <any>undefined, { urn })
            case "intersight:index/hyperflexAutoSupportPolicy:HyperflexAutoSupportPolicy":
                return new HyperflexAutoSupportPolicy(name, <any>undefined, { urn })
            case "intersight:index/hyperflexCapabilityInfo:HyperflexCapabilityInfo":
                return new HyperflexCapabilityInfo(name, <any>undefined, { urn })
            case "intersight:index/hyperflexClusterBackupPolicy:HyperflexClusterBackupPolicy":
                return new HyperflexClusterBackupPolicy(name, <any>undefined, { urn })
            case "intersight:index/hyperflexClusterBackupPolicyDeployment:HyperflexClusterBackupPolicyDeployment":
                return new HyperflexClusterBackupPolicyDeployment(name, <any>undefined, { urn })
            case "intersight:index/hyperflexClusterNetworkPolicy:HyperflexClusterNetworkPolicy":
                return new HyperflexClusterNetworkPolicy(name, <any>undefined, { urn })
            case "intersight:index/hyperflexClusterProfile:HyperflexClusterProfile":
                return new HyperflexClusterProfile(name, <any>undefined, { urn })
            case "intersight:index/hyperflexClusterReplicationNetworkPolicy:HyperflexClusterReplicationNetworkPolicy":
                return new HyperflexClusterReplicationNetworkPolicy(name, <any>undefined, { urn })
            case "intersight:index/hyperflexClusterReplicationNetworkPolicyDeployment:HyperflexClusterReplicationNetworkPolicyDeployment":
                return new HyperflexClusterReplicationNetworkPolicyDeployment(name, <any>undefined, { urn })
            case "intersight:index/hyperflexClusterStoragePolicy:HyperflexClusterStoragePolicy":
                return new HyperflexClusterStoragePolicy(name, <any>undefined, { urn })
            case "intersight:index/hyperflexExtFcStoragePolicy:HyperflexExtFcStoragePolicy":
                return new HyperflexExtFcStoragePolicy(name, <any>undefined, { urn })
            case "intersight:index/hyperflexExtIscsiStoragePolicy:HyperflexExtIscsiStoragePolicy":
                return new HyperflexExtIscsiStoragePolicy(name, <any>undefined, { urn })
            case "intersight:index/hyperflexFeatureLimitExternal:HyperflexFeatureLimitExternal":
                return new HyperflexFeatureLimitExternal(name, <any>undefined, { urn })
            case "intersight:index/hyperflexFeatureLimitInternal:HyperflexFeatureLimitInternal":
                return new HyperflexFeatureLimitInternal(name, <any>undefined, { urn })
            case "intersight:index/hyperflexHealthCheckDefinition:HyperflexHealthCheckDefinition":
                return new HyperflexHealthCheckDefinition(name, <any>undefined, { urn })
            case "intersight:index/hyperflexHealthCheckPackageChecksum:HyperflexHealthCheckPackageChecksum":
                return new HyperflexHealthCheckPackageChecksum(name, <any>undefined, { urn })
            case "intersight:index/hyperflexHxdpVersion:HyperflexHxdpVersion":
                return new HyperflexHxdpVersion(name, <any>undefined, { urn })
            case "intersight:index/hyperflexKeyEncryptionKey:HyperflexKeyEncryptionKey":
                return new HyperflexKeyEncryptionKey(name, <any>undefined, { urn })
            case "intersight:index/hyperflexLocalCredentialPolicy:HyperflexLocalCredentialPolicy":
                return new HyperflexLocalCredentialPolicy(name, <any>undefined, { urn })
            case "intersight:index/hyperflexNodeConfigPolicy:HyperflexNodeConfigPolicy":
                return new HyperflexNodeConfigPolicy(name, <any>undefined, { urn })
            case "intersight:index/hyperflexNodeProfile:HyperflexNodeProfile":
                return new HyperflexNodeProfile(name, <any>undefined, { urn })
            case "intersight:index/hyperflexProxySettingPolicy:HyperflexProxySettingPolicy":
                return new HyperflexProxySettingPolicy(name, <any>undefined, { urn })
            case "intersight:index/hyperflexReduceReSync:HyperflexReduceReSync":
                return new HyperflexReduceReSync(name, <any>undefined, { urn })
            case "intersight:index/hyperflexServerFirmwareVersion:HyperflexServerFirmwareVersion":
                return new HyperflexServerFirmwareVersion(name, <any>undefined, { urn })
            case "intersight:index/hyperflexServerFirmwareVersionEntry:HyperflexServerFirmwareVersionEntry":
                return new HyperflexServerFirmwareVersionEntry(name, <any>undefined, { urn })
            case "intersight:index/hyperflexServerModel:HyperflexServerModel":
                return new HyperflexServerModel(name, <any>undefined, { urn })
            case "intersight:index/hyperflexServiceAuthToken:HyperflexServiceAuthToken":
                return new HyperflexServiceAuthToken(name, <any>undefined, { urn })
            case "intersight:index/hyperflexSoftwareDistributionComponent:HyperflexSoftwareDistributionComponent":
                return new HyperflexSoftwareDistributionComponent(name, <any>undefined, { urn })
            case "intersight:index/hyperflexSoftwareDistributionEntry:HyperflexSoftwareDistributionEntry":
                return new HyperflexSoftwareDistributionEntry(name, <any>undefined, { urn })
            case "intersight:index/hyperflexSoftwareDistributionVersion:HyperflexSoftwareDistributionVersion":
                return new HyperflexSoftwareDistributionVersion(name, <any>undefined, { urn })
            case "intersight:index/hyperflexSoftwareVersionPolicy:HyperflexSoftwareVersionPolicy":
                return new HyperflexSoftwareVersionPolicy(name, <any>undefined, { urn })
            case "intersight:index/hyperflexStartReduceReSync:HyperflexStartReduceReSync":
                return new HyperflexStartReduceReSync(name, <any>undefined, { urn })
            case "intersight:index/hyperflexSysConfigPolicy:HyperflexSysConfigPolicy":
                return new HyperflexSysConfigPolicy(name, <any>undefined, { urn })
            case "intersight:index/hyperflexUcsmConfigPolicy:HyperflexUcsmConfigPolicy":
                return new HyperflexUcsmConfigPolicy(name, <any>undefined, { urn })
            case "intersight:index/hyperflexVcenterConfigPolicy:HyperflexVcenterConfigPolicy":
                return new HyperflexVcenterConfigPolicy(name, <any>undefined, { urn })
            case "intersight:index/hyperflexVmImportOperation:HyperflexVmImportOperation":
                return new HyperflexVmImportOperation(name, <any>undefined, { urn })
            case "intersight:index/hyperflexVmRestoreOperation:HyperflexVmRestoreOperation":
                return new HyperflexVmRestoreOperation(name, <any>undefined, { urn })
            case "intersight:index/iamAccount:IamAccount":
                return new IamAccount(name, <any>undefined, { urn })
            case "intersight:index/iamAccountExperience:IamAccountExperience":
                return new IamAccountExperience(name, <any>undefined, { urn })
            case "intersight:index/iamApiKey:IamApiKey":
                return new IamApiKey(name, <any>undefined, { urn })
            case "intersight:index/iamAppRegistration:IamAppRegistration":
                return new IamAppRegistration(name, <any>undefined, { urn })
            case "intersight:index/iamCertificate:IamCertificate":
                return new IamCertificate(name, <any>undefined, { urn })
            case "intersight:index/iamCertificateRequest:IamCertificateRequest":
                return new IamCertificateRequest(name, <any>undefined, { urn })
            case "intersight:index/iamDomainNameInfo:IamDomainNameInfo":
                return new IamDomainNameInfo(name, <any>undefined, { urn })
            case "intersight:index/iamEndPointUser:IamEndPointUser":
                return new IamEndPointUser(name, <any>undefined, { urn })
            case "intersight:index/iamEndPointUserPolicy:IamEndPointUserPolicy":
                return new IamEndPointUserPolicy(name, <any>undefined, { urn })
            case "intersight:index/iamEndPointUserRole:IamEndPointUserRole":
                return new IamEndPointUserRole(name, <any>undefined, { urn })
            case "intersight:index/iamIdp:IamIdp":
                return new IamIdp(name, <any>undefined, { urn })
            case "intersight:index/iamIpAccessManagement:IamIpAccessManagement":
                return new IamIpAccessManagement(name, <any>undefined, { urn })
            case "intersight:index/iamIpAddress:IamIpAddress":
                return new IamIpAddress(name, <any>undefined, { urn })
            case "intersight:index/iamLdapGroup:IamLdapGroup":
                return new IamLdapGroup(name, <any>undefined, { urn })
            case "intersight:index/iamLdapPolicy:IamLdapPolicy":
                return new IamLdapPolicy(name, <any>undefined, { urn })
            case "intersight:index/iamLdapProvider:IamLdapProvider":
                return new IamLdapProvider(name, <any>undefined, { urn })
            case "intersight:index/iamLocalUserPassword:IamLocalUserPassword":
                return new IamLocalUserPassword(name, <any>undefined, { urn })
            case "intersight:index/iamPermission:IamPermission":
                return new IamPermission(name, <any>undefined, { urn })
            case "intersight:index/iamPrivateKeySpec:IamPrivateKeySpec":
                return new IamPrivateKeySpec(name, <any>undefined, { urn })
            case "intersight:index/iamQualifier:IamQualifier":
                return new IamQualifier(name, <any>undefined, { urn })
            case "intersight:index/iamResourceRoles:IamResourceRoles":
                return new IamResourceRoles(name, <any>undefined, { urn })
            case "intersight:index/iamSessionLimits:IamSessionLimits":
                return new IamSessionLimits(name, <any>undefined, { urn })
            case "intersight:index/iamSharingRule:IamSharingRule":
                return new IamSharingRule(name, <any>undefined, { urn })
            case "intersight:index/iamTrustPoint:IamTrustPoint":
                return new IamTrustPoint(name, <any>undefined, { urn })
            case "intersight:index/iamUser:IamUser":
                return new IamUser(name, <any>undefined, { urn })
            case "intersight:index/iamUserGroup:IamUserGroup":
                return new IamUserGroup(name, <any>undefined, { urn })
            case "intersight:index/iamUserSetting:IamUserSetting":
                return new IamUserSetting(name, <any>undefined, { urn })
            case "intersight:index/inventoryRequest:InventoryRequest":
                return new InventoryRequest(name, <any>undefined, { urn })
            case "intersight:index/ipmioverlanPolicy:IpmioverlanPolicy":
                return new IpmioverlanPolicy(name, <any>undefined, { urn })
            case "intersight:index/ippoolPool:IppoolPool":
                return new IppoolPool(name, <any>undefined, { urn })
            case "intersight:index/ippoolReservation:IppoolReservation":
                return new IppoolReservation(name, <any>undefined, { urn })
            case "intersight:index/iqnpoolPool:IqnpoolPool":
                return new IqnpoolPool(name, <any>undefined, { urn })
            case "intersight:index/iqnpoolReservation:IqnpoolReservation":
                return new IqnpoolReservation(name, <any>undefined, { urn })
            case "intersight:index/iwotenantMaintenanceNotification:IwotenantMaintenanceNotification":
                return new IwotenantMaintenanceNotification(name, <any>undefined, { urn })
            case "intersight:index/iwotenantMigrate:IwotenantMigrate":
                return new IwotenantMigrate(name, <any>undefined, { urn })
            case "intersight:index/iwotenantTenantCustomization:IwotenantTenantCustomization":
                return new IwotenantTenantCustomization(name, <any>undefined, { urn })
            case "intersight:index/kubernetesAciCniApic:KubernetesAciCniApic":
                return new KubernetesAciCniApic(name, <any>undefined, { urn })
            case "intersight:index/kubernetesAciCniProfile:KubernetesAciCniProfile":
                return new KubernetesAciCniProfile(name, <any>undefined, { urn })
            case "intersight:index/kubernetesAciCniTenantClusterAllocation:KubernetesAciCniTenantClusterAllocation":
                return new KubernetesAciCniTenantClusterAllocation(name, <any>undefined, { urn })
            case "intersight:index/kubernetesAddonDefinition:KubernetesAddonDefinition":
                return new KubernetesAddonDefinition(name, <any>undefined, { urn })
            case "intersight:index/kubernetesAddonPolicy:KubernetesAddonPolicy":
                return new KubernetesAddonPolicy(name, <any>undefined, { urn })
            case "intersight:index/kubernetesAddonRepository:KubernetesAddonRepository":
                return new KubernetesAddonRepository(name, <any>undefined, { urn })
            case "intersight:index/kubernetesBaremetalNodeProfile:KubernetesBaremetalNodeProfile":
                return new KubernetesBaremetalNodeProfile(name, <any>undefined, { urn })
            case "intersight:index/kubernetesCluster:KubernetesCluster":
                return new KubernetesCluster(name, <any>undefined, { urn })
            case "intersight:index/kubernetesClusterAddonProfile:KubernetesClusterAddonProfile":
                return new KubernetesClusterAddonProfile(name, <any>undefined, { urn })
            case "intersight:index/kubernetesClusterProfile:KubernetesClusterProfile":
                return new KubernetesClusterProfile(name, <any>undefined, { urn })
            case "intersight:index/kubernetesContainerRuntimePolicy:KubernetesContainerRuntimePolicy":
                return new KubernetesContainerRuntimePolicy(name, <any>undefined, { urn })
            case "intersight:index/kubernetesHttpProxyPolicy:KubernetesHttpProxyPolicy":
                return new KubernetesHttpProxyPolicy(name, <any>undefined, { urn })
            case "intersight:index/kubernetesNetworkPolicy:KubernetesNetworkPolicy":
                return new KubernetesNetworkPolicy(name, <any>undefined, { urn })
            case "intersight:index/kubernetesNodeGroupProfile:KubernetesNodeGroupProfile":
                return new KubernetesNodeGroupProfile(name, <any>undefined, { urn })
            case "intersight:index/kubernetesNvidiaGpuProduct:KubernetesNvidiaGpuProduct":
                return new KubernetesNvidiaGpuProduct(name, <any>undefined, { urn })
            case "intersight:index/kubernetesSysConfigPolicy:KubernetesSysConfigPolicy":
                return new KubernetesSysConfigPolicy(name, <any>undefined, { urn })
            case "intersight:index/kubernetesTrustedRegistriesPolicy:KubernetesTrustedRegistriesPolicy":
                return new KubernetesTrustedRegistriesPolicy(name, <any>undefined, { urn })
            case "intersight:index/kubernetesVersion:KubernetesVersion":
                return new KubernetesVersion(name, <any>undefined, { urn })
            case "intersight:index/kubernetesVersionPolicy:KubernetesVersionPolicy":
                return new KubernetesVersionPolicy(name, <any>undefined, { urn })
            case "intersight:index/kubernetesVirtualMachineInfraConfigPolicy:KubernetesVirtualMachineInfraConfigPolicy":
                return new KubernetesVirtualMachineInfraConfigPolicy(name, <any>undefined, { urn })
            case "intersight:index/kubernetesVirtualMachineInfrastructureProvider:KubernetesVirtualMachineInfrastructureProvider":
                return new KubernetesVirtualMachineInfrastructureProvider(name, <any>undefined, { urn })
            case "intersight:index/kubernetesVirtualMachineInstanceType:KubernetesVirtualMachineInstanceType":
                return new KubernetesVirtualMachineInstanceType(name, <any>undefined, { urn })
            case "intersight:index/kubernetesVirtualMachineNodeProfile:KubernetesVirtualMachineNodeProfile":
                return new KubernetesVirtualMachineNodeProfile(name, <any>undefined, { urn })
            case "intersight:index/kvmPolicy:KvmPolicy":
                return new KvmPolicy(name, <any>undefined, { urn })
            case "intersight:index/kvmSession:KvmSession":
                return new KvmSession(name, <any>undefined, { urn })
            case "intersight:index/kvmTunnel:KvmTunnel":
                return new KvmTunnel(name, <any>undefined, { urn })
            case "intersight:index/kvmTunneledKvmPolicy:KvmTunneledKvmPolicy":
                return new KvmTunneledKvmPolicy(name, <any>undefined, { urn })
            case "intersight:index/licenseIksLicenseCount:LicenseIksLicenseCount":
                return new LicenseIksLicenseCount(name, <any>undefined, { urn })
            case "intersight:index/licenseIncLicenseCount:LicenseIncLicenseCount":
                return new LicenseIncLicenseCount(name, <any>undefined, { urn })
            case "intersight:index/licenseIwoLicenseCount:LicenseIwoLicenseCount":
                return new LicenseIwoLicenseCount(name, <any>undefined, { urn })
            case "intersight:index/licenseLicenseInfo:LicenseLicenseInfo":
                return new LicenseLicenseInfo(name, <any>undefined, { urn })
            case "intersight:index/licenseLicenseReservationOp:LicenseLicenseReservationOp":
                return new LicenseLicenseReservationOp(name, <any>undefined, { urn })
            case "intersight:index/macpoolPool:MacpoolPool":
                return new MacpoolPool(name, <any>undefined, { urn })
            case "intersight:index/macpoolReservation:MacpoolReservation":
                return new MacpoolReservation(name, <any>undefined, { urn })
            case "intersight:index/marketplaceUseCase:MarketplaceUseCase":
                return new MarketplaceUseCase(name, <any>undefined, { urn })
            case "intersight:index/marketplaceUseCaseVersion:MarketplaceUseCaseVersion":
                return new MarketplaceUseCaseVersion(name, <any>undefined, { urn })
            case "intersight:index/memoryPersistentMemoryPolicy:MemoryPersistentMemoryPolicy":
                return new MemoryPersistentMemoryPolicy(name, <any>undefined, { urn })
            case "intersight:index/metricsMetricsExploration:MetricsMetricsExploration":
                return new MetricsMetricsExploration(name, <any>undefined, { urn })
            case "intersight:index/networkconfigPolicy:NetworkconfigPolicy":
                return new NetworkconfigPolicy(name, <any>undefined, { urn })
            case "intersight:index/niatelemetryNexusCloudAccount:NiatelemetryNexusCloudAccount":
                return new NiatelemetryNexusCloudAccount(name, <any>undefined, { urn })
            case "intersight:index/niatelemetryNexusCloudSite:NiatelemetryNexusCloudSite":
                return new NiatelemetryNexusCloudSite(name, <any>undefined, { urn })
            case "intersight:index/notificationAccountSubscription:NotificationAccountSubscription":
                return new NotificationAccountSubscription(name, <any>undefined, { urn })
            case "intersight:index/ntpPolicy:NtpPolicy":
                return new NtpPolicy(name, <any>undefined, { urn })
            case "intersight:index/oauthAuthorization:OauthAuthorization":
                return new OauthAuthorization(name, <any>undefined, { urn })
            case "intersight:index/openapiOpenApiSpecification:OpenapiOpenApiSpecification":
                return new OpenapiOpenApiSpecification(name, <any>undefined, { urn })
            case "intersight:index/openapiProcessFile:OpenapiProcessFile":
                return new OpenapiProcessFile(name, <any>undefined, { urn })
            case "intersight:index/openapiTaskGenerationRequest:OpenapiTaskGenerationRequest":
                return new OpenapiTaskGenerationRequest(name, <any>undefined, { urn })
            case "intersight:index/oprsDeployment:OprsDeployment":
                return new OprsDeployment(name, <any>undefined, { urn })
            case "intersight:index/oprsSyncTargetListMessage:OprsSyncTargetListMessage":
                return new OprsSyncTargetListMessage(name, <any>undefined, { urn })
            case "intersight:index/organizationOrganization:OrganizationOrganization":
                return new OrganizationOrganization(name, <any>undefined, { urn })
            case "intersight:index/osBulkInstallInfo:OsBulkInstallInfo":
                return new OsBulkInstallInfo(name, <any>undefined, { urn })
            case "intersight:index/osConfigurationFile:OsConfigurationFile":
                return new OsConfigurationFile(name, <any>undefined, { urn })
            case "intersight:index/osInstall:OsInstall":
                return new OsInstall(name, <any>undefined, { urn })
            case "intersight:index/osOsSupport:OsOsSupport":
                return new OsOsSupport(name, <any>undefined, { urn })
            case "intersight:index/osTemplateFile:OsTemplateFile":
                return new OsTemplateFile(name, <any>undefined, { urn })
            case "intersight:index/osValidInstallTarget:OsValidInstallTarget":
                return new OsValidInstallTarget(name, <any>undefined, { urn })
            case "intersight:index/partnerintegrationDeviceConnector:PartnerintegrationDeviceConnector":
                return new PartnerintegrationDeviceConnector(name, <any>undefined, { urn })
            case "intersight:index/partnerintegrationEtl:PartnerintegrationEtl":
                return new PartnerintegrationEtl(name, <any>undefined, { urn })
            case "intersight:index/partnerintegrationFile:PartnerintegrationFile":
                return new PartnerintegrationFile(name, <any>undefined, { urn })
            case "intersight:index/partnerintegrationInventory:PartnerintegrationInventory":
                return new PartnerintegrationInventory(name, <any>undefined, { urn })
            case "intersight:index/partnerintegrationMetrics:PartnerintegrationMetrics":
                return new PartnerintegrationMetrics(name, <any>undefined, { urn })
            case "intersight:index/partnerintegrationModel:PartnerintegrationModel":
                return new PartnerintegrationModel(name, <any>undefined, { urn })
            case "intersight:index/powerPolicy:PowerPolicy":
                return new PowerPolicy(name, <any>undefined, { urn })
            case "intersight:index/recommendationHardwareExpansionRequest:RecommendationHardwareExpansionRequest":
                return new RecommendationHardwareExpansionRequest(name, <any>undefined, { urn })
            case "intersight:index/recommendationHardwareExpansionRequestItem:RecommendationHardwareExpansionRequestItem":
                return new RecommendationHardwareExpansionRequestItem(name, <any>undefined, { urn })
            case "intersight:index/recommendationPurchaseOrderEstimate:RecommendationPurchaseOrderEstimate":
                return new RecommendationPurchaseOrderEstimate(name, <any>undefined, { urn })
            case "intersight:index/recoveryBackupConfigPolicy:RecoveryBackupConfigPolicy":
                return new RecoveryBackupConfigPolicy(name, <any>undefined, { urn })
            case "intersight:index/recoveryBackupProfile:RecoveryBackupProfile":
                return new RecoveryBackupProfile(name, <any>undefined, { urn })
            case "intersight:index/recoveryOnDemandBackup:RecoveryOnDemandBackup":
                return new RecoveryOnDemandBackup(name, <any>undefined, { urn })
            case "intersight:index/recoveryRestore:RecoveryRestore":
                return new RecoveryRestore(name, <any>undefined, { urn })
            case "intersight:index/recoveryScheduleConfigPolicy:RecoveryScheduleConfigPolicy":
                return new RecoveryScheduleConfigPolicy(name, <any>undefined, { urn })
            case "intersight:index/resourceGroup:ResourceGroup":
                return new ResourceGroup(name, <any>undefined, { urn })
            case "intersight:index/resourceMembership:ResourceMembership":
                return new ResourceMembership(name, <any>undefined, { urn })
            case "intersight:index/resourceReservation:ResourceReservation":
                return new ResourceReservation(name, <any>undefined, { urn })
            case "intersight:index/resourceSelectionCriteria:ResourceSelectionCriteria":
                return new ResourceSelectionCriteria(name, <any>undefined, { urn })
            case "intersight:index/resourcepoolPool:ResourcepoolPool":
                return new ResourcepoolPool(name, <any>undefined, { urn })
            case "intersight:index/rproxyReverseProxy:RproxyReverseProxy":
                return new RproxyReverseProxy(name, <any>undefined, { urn })
            case "intersight:index/schedulerTaskSchedule:SchedulerTaskSchedule":
                return new SchedulerTaskSchedule(name, <any>undefined, { urn })
            case "intersight:index/sdaaciConnection:SdaaciConnection":
                return new SdaaciConnection(name, <any>undefined, { urn })
            case "intersight:index/sdaaciConnectionDetail:SdaaciConnectionDetail":
                return new SdaaciConnectionDetail(name, <any>undefined, { urn })
            case "intersight:index/sdcardPolicy:SdcardPolicy":
                return new SdcardPolicy(name, <any>undefined, { urn })
            case "intersight:index/searchSuggestItem:SearchSuggestItem":
                return new SearchSuggestItem(name, <any>undefined, { urn })
            case "intersight:index/serverConfigImport:ServerConfigImport":
                return new ServerConfigImport(name, <any>undefined, { urn })
            case "intersight:index/serverProfile:ServerProfile":
                return new ServerProfile(name, <any>undefined, { urn })
            case "intersight:index/serverProfileTemplate:ServerProfileTemplate":
                return new ServerProfileTemplate(name, <any>undefined, { urn })
            case "intersight:index/smtpPolicy:SmtpPolicy":
                return new SmtpPolicy(name, <any>undefined, { urn })
            case "intersight:index/snmpPolicy:SnmpPolicy":
                return new SnmpPolicy(name, <any>undefined, { urn })
            case "intersight:index/softwareApplianceDistributable:SoftwareApplianceDistributable":
                return new SoftwareApplianceDistributable(name, <any>undefined, { urn })
            case "intersight:index/softwareHciBundleDistributable:SoftwareHciBundleDistributable":
                return new SoftwareHciBundleDistributable(name, <any>undefined, { urn })
            case "intersight:index/softwareHciDistributable:SoftwareHciDistributable":
                return new SoftwareHciDistributable(name, <any>undefined, { urn })
            case "intersight:index/softwareHclMeta:SoftwareHclMeta":
                return new SoftwareHclMeta(name, <any>undefined, { urn })
            case "intersight:index/softwareHyperflexBundleDistributable:SoftwareHyperflexBundleDistributable":
                return new SoftwareHyperflexBundleDistributable(name, <any>undefined, { urn })
            case "intersight:index/softwareHyperflexDistributable:SoftwareHyperflexDistributable":
                return new SoftwareHyperflexDistributable(name, <any>undefined, { urn })
            case "intersight:index/softwareIksBundleDistributable:SoftwareIksBundleDistributable":
                return new SoftwareIksBundleDistributable(name, <any>undefined, { urn })
            case "intersight:index/softwareReleaseMeta:SoftwareReleaseMeta":
                return new SoftwareReleaseMeta(name, <any>undefined, { urn })
            case "intersight:index/softwareSolutionDistributable:SoftwareSolutionDistributable":
                return new SoftwareSolutionDistributable(name, <any>undefined, { urn })
            case "intersight:index/softwareUcsdBundleDistributable:SoftwareUcsdBundleDistributable":
                return new SoftwareUcsdBundleDistributable(name, <any>undefined, { urn })
            case "intersight:index/softwareUcsdDistributable:SoftwareUcsdDistributable":
                return new SoftwareUcsdDistributable(name, <any>undefined, { urn })
            case "intersight:index/softwarerepositoryAuthorization:SoftwarerepositoryAuthorization":
                return new SoftwarerepositoryAuthorization(name, <any>undefined, { urn })
            case "intersight:index/softwarerepositoryCategoryMapper:SoftwarerepositoryCategoryMapper":
                return new SoftwarerepositoryCategoryMapper(name, <any>undefined, { urn })
            case "intersight:index/softwarerepositoryCategoryMapperModel:SoftwarerepositoryCategoryMapperModel":
                return new SoftwarerepositoryCategoryMapperModel(name, <any>undefined, { urn })
            case "intersight:index/softwarerepositoryCategorySupportConstraint:SoftwarerepositoryCategorySupportConstraint":
                return new SoftwarerepositoryCategorySupportConstraint(name, <any>undefined, { urn })
            case "intersight:index/softwarerepositoryCategoryUnsupportedModels:SoftwarerepositoryCategoryUnsupportedModels":
                return new SoftwarerepositoryCategoryUnsupportedModels(name, <any>undefined, { urn })
            case "intersight:index/softwarerepositoryOperatingSystemFile:SoftwarerepositoryOperatingSystemFile":
                return new SoftwarerepositoryOperatingSystemFile(name, <any>undefined, { urn })
            case "intersight:index/softwarerepositoryRelease:SoftwarerepositoryRelease":
                return new SoftwarerepositoryRelease(name, <any>undefined, { urn })
            case "intersight:index/solPolicy:SolPolicy":
                return new SolPolicy(name, <any>undefined, { urn })
            case "intersight:index/sshPolicy:SshPolicy":
                return new SshPolicy(name, <any>undefined, { urn })
            case "intersight:index/storageDriveGroup:StorageDriveGroup":
                return new StorageDriveGroup(name, <any>undefined, { urn })
            case "intersight:index/storageDriveSecurityPolicy:StorageDriveSecurityPolicy":
                return new StorageDriveSecurityPolicy(name, <any>undefined, { urn })
            case "intersight:index/storageStoragePolicy:StorageStoragePolicy":
                return new StorageStoragePolicy(name, <any>undefined, { urn })
            case "intersight:index/syslogPolicy:SyslogPolicy":
                return new SyslogPolicy(name, <any>undefined, { urn })
            case "intersight:index/tamAdvisoryCount:TamAdvisoryCount":
                return new TamAdvisoryCount(name, <any>undefined, { urn })
            case "intersight:index/tamAdvisoryDefinition:TamAdvisoryDefinition":
                return new TamAdvisoryDefinition(name, <any>undefined, { urn })
            case "intersight:index/tamAdvisoryInfo:TamAdvisoryInfo":
                return new TamAdvisoryInfo(name, <any>undefined, { urn })
            case "intersight:index/tamAdvisoryInstance:TamAdvisoryInstance":
                return new TamAdvisoryInstance(name, <any>undefined, { urn })
            case "intersight:index/tamSecurityAdvisory:TamSecurityAdvisory":
                return new TamSecurityAdvisory(name, <any>undefined, { urn })
            case "intersight:index/taskFabricMosScopedInventory:TaskFabricMosScopedInventory":
                return new TaskFabricMosScopedInventory(name, <any>undefined, { urn })
            case "intersight:index/taskHitachiScopedInventory:TaskHitachiScopedInventory":
                return new TaskHitachiScopedInventory(name, <any>undefined, { urn })
            case "intersight:index/taskHyperFlexManagementScopedInventory:TaskHyperFlexManagementScopedInventory":
                return new TaskHyperFlexManagementScopedInventory(name, <any>undefined, { urn })
            case "intersight:index/taskHyperflexScopedInventory:TaskHyperflexScopedInventory":
                return new TaskHyperflexScopedInventory(name, <any>undefined, { urn })
            case "intersight:index/taskMdsScopedInventory:TaskMdsScopedInventory":
                return new TaskMdsScopedInventory(name, <any>undefined, { urn })
            case "intersight:index/taskMdsSystemScopedInventory:TaskMdsSystemScopedInventory":
                return new TaskMdsSystemScopedInventory(name, <any>undefined, { urn })
            case "intersight:index/taskMerakiScopedInventory:TaskMerakiScopedInventory":
                return new TaskMerakiScopedInventory(name, <any>undefined, { urn })
            case "intersight:index/taskNetAppScopedInventory:TaskNetAppScopedInventory":
                return new TaskNetAppScopedInventory(name, <any>undefined, { urn })
            case "intersight:index/taskNexusScopedInventory:TaskNexusScopedInventory":
                return new TaskNexusScopedInventory(name, <any>undefined, { urn })
            case "intersight:index/taskNexusSystemScopedInventory:TaskNexusSystemScopedInventory":
                return new TaskNexusSystemScopedInventory(name, <any>undefined, { urn })
            case "intersight:index/taskNexusVlanScopedInventory:TaskNexusVlanScopedInventory":
                return new TaskNexusVlanScopedInventory(name, <any>undefined, { urn })
            case "intersight:index/taskPublicCloudScopedInventory:TaskPublicCloudScopedInventory":
                return new TaskPublicCloudScopedInventory(name, <any>undefined, { urn })
            case "intersight:index/taskPureScopedInventory:TaskPureScopedInventory":
                return new TaskPureScopedInventory(name, <any>undefined, { urn })
            case "intersight:index/taskServerScopedInventory:TaskServerScopedInventory":
                return new TaskServerScopedInventory(name, <any>undefined, { urn })
            case "intersight:index/techsupportmanagementCollectionControlPolicy:TechsupportmanagementCollectionControlPolicy":
                return new TechsupportmanagementCollectionControlPolicy(name, <any>undefined, { urn })
            case "intersight:index/techsupportmanagementTechSupportBundle:TechsupportmanagementTechSupportBundle":
                return new TechsupportmanagementTechSupportBundle(name, <any>undefined, { urn })
            case "intersight:index/terraformExecutor:TerraformExecutor":
                return new TerraformExecutor(name, <any>undefined, { urn })
            case "intersight:index/thermalPolicy:ThermalPolicy":
                return new ThermalPolicy(name, <any>undefined, { urn })
            case "intersight:index/uuidpoolPool:UuidpoolPool":
                return new UuidpoolPool(name, <any>undefined, { urn })
            case "intersight:index/uuidpoolReservation:UuidpoolReservation":
                return new UuidpoolReservation(name, <any>undefined, { urn })
            case "intersight:index/virtualizationEsxiConsole:VirtualizationEsxiConsole":
                return new VirtualizationEsxiConsole(name, <any>undefined, { urn })
            case "intersight:index/virtualizationVirtualMachine:VirtualizationVirtualMachine":
                return new VirtualizationVirtualMachine(name, <any>undefined, { urn })
            case "intersight:index/vmediaPolicy:VmediaPolicy":
                return new VmediaPolicy(name, <any>undefined, { urn })
            case "intersight:index/vmrcConsole:VmrcConsole":
                return new VmrcConsole(name, <any>undefined, { urn })
            case "intersight:index/vnicEthAdapterPolicy:VnicEthAdapterPolicy":
                return new VnicEthAdapterPolicy(name, <any>undefined, { urn })
            case "intersight:index/vnicEthIf:VnicEthIf":
                return new VnicEthIf(name, <any>undefined, { urn })
            case "intersight:index/vnicEthNetworkPolicy:VnicEthNetworkPolicy":
                return new VnicEthNetworkPolicy(name, <any>undefined, { urn })
            case "intersight:index/vnicEthQosPolicy:VnicEthQosPolicy":
                return new VnicEthQosPolicy(name, <any>undefined, { urn })
            case "intersight:index/vnicFcAdapterPolicy:VnicFcAdapterPolicy":
                return new VnicFcAdapterPolicy(name, <any>undefined, { urn })
            case "intersight:index/vnicFcIf:VnicFcIf":
                return new VnicFcIf(name, <any>undefined, { urn })
            case "intersight:index/vnicFcNetworkPolicy:VnicFcNetworkPolicy":
                return new VnicFcNetworkPolicy(name, <any>undefined, { urn })
            case "intersight:index/vnicFcQosPolicy:VnicFcQosPolicy":
                return new VnicFcQosPolicy(name, <any>undefined, { urn })
            case "intersight:index/vnicIscsiAdapterPolicy:VnicIscsiAdapterPolicy":
                return new VnicIscsiAdapterPolicy(name, <any>undefined, { urn })
            case "intersight:index/vnicIscsiBootPolicy:VnicIscsiBootPolicy":
                return new VnicIscsiBootPolicy(name, <any>undefined, { urn })
            case "intersight:index/vnicIscsiStaticTargetPolicy:VnicIscsiStaticTargetPolicy":
                return new VnicIscsiStaticTargetPolicy(name, <any>undefined, { urn })
            case "intersight:index/vnicLanConnectivityPolicy:VnicLanConnectivityPolicy":
                return new VnicLanConnectivityPolicy(name, <any>undefined, { urn })
            case "intersight:index/vnicSanConnectivityPolicy:VnicSanConnectivityPolicy":
                return new VnicSanConnectivityPolicy(name, <any>undefined, { urn })
            case "intersight:index/vnicVhbaTemplate:VnicVhbaTemplate":
                return new VnicVhbaTemplate(name, <any>undefined, { urn })
            case "intersight:index/vnicVnicTemplate:VnicVnicTemplate":
                return new VnicVnicTemplate(name, <any>undefined, { urn })
            case "intersight:index/vrfVrf:VrfVrf":
                return new VrfVrf(name, <any>undefined, { urn })
            case "intersight:index/workflowAnsibleBatchExecutor:WorkflowAnsibleBatchExecutor":
                return new WorkflowAnsibleBatchExecutor(name, <any>undefined, { urn })
            case "intersight:index/workflowBatchApiExecutor:WorkflowBatchApiExecutor":
                return new WorkflowBatchApiExecutor(name, <any>undefined, { urn })
            case "intersight:index/workflowCatalogItemDefinition:WorkflowCatalogItemDefinition":
                return new WorkflowCatalogItemDefinition(name, <any>undefined, { urn })
            case "intersight:index/workflowCatalogServiceRequest:WorkflowCatalogServiceRequest":
                return new WorkflowCatalogServiceRequest(name, <any>undefined, { urn })
            case "intersight:index/workflowCustomDataTypeDefinition:WorkflowCustomDataTypeDefinition":
                return new WorkflowCustomDataTypeDefinition(name, <any>undefined, { urn })
            case "intersight:index/workflowErrorResponseHandler:WorkflowErrorResponseHandler":
                return new WorkflowErrorResponseHandler(name, <any>undefined, { urn })
            case "intersight:index/workflowPowerShellBatchApiExecutor:WorkflowPowerShellBatchApiExecutor":
                return new WorkflowPowerShellBatchApiExecutor(name, <any>undefined, { urn })
            case "intersight:index/workflowRollbackWorkflow:WorkflowRollbackWorkflow":
                return new WorkflowRollbackWorkflow(name, <any>undefined, { urn })
            case "intersight:index/workflowServiceItemActionDefinition:WorkflowServiceItemActionDefinition":
                return new WorkflowServiceItemActionDefinition(name, <any>undefined, { urn })
            case "intersight:index/workflowServiceItemActionInstance:WorkflowServiceItemActionInstance":
                return new WorkflowServiceItemActionInstance(name, <any>undefined, { urn })
            case "intersight:index/workflowServiceItemDefinition:WorkflowServiceItemDefinition":
                return new WorkflowServiceItemDefinition(name, <any>undefined, { urn })
            case "intersight:index/workflowServiceItemHealthCheckDefinition:WorkflowServiceItemHealthCheckDefinition":
                return new WorkflowServiceItemHealthCheckDefinition(name, <any>undefined, { urn })
            case "intersight:index/workflowServiceItemInstance:WorkflowServiceItemInstance":
                return new WorkflowServiceItemInstance(name, <any>undefined, { urn })
            case "intersight:index/workflowServiceItemOutput:WorkflowServiceItemOutput":
                return new WorkflowServiceItemOutput(name, <any>undefined, { urn })
            case "intersight:index/workflowSshBatchExecutor:WorkflowSshBatchExecutor":
                return new WorkflowSshBatchExecutor(name, <any>undefined, { urn })
            case "intersight:index/workflowTaskDefinition:WorkflowTaskDefinition":
                return new WorkflowTaskDefinition(name, <any>undefined, { urn })
            case "intersight:index/workflowTemplateEvaluation:WorkflowTemplateEvaluation":
                return new WorkflowTemplateEvaluation(name, <any>undefined, { urn })
            case "intersight:index/workflowTemplateParser:WorkflowTemplateParser":
                return new WorkflowTemplateParser(name, <any>undefined, { urn })
            case "intersight:index/workflowUiDisplayMetadata:WorkflowUiDisplayMetadata":
                return new WorkflowUiDisplayMetadata(name, <any>undefined, { urn })
            case "intersight:index/workflowWorkflowDefinition:WorkflowWorkflowDefinition":
                return new WorkflowWorkflowDefinition(name, <any>undefined, { urn })
            case "intersight:index/workflowWorkflowInfo:WorkflowWorkflowInfo":
                return new WorkflowWorkflowInfo(name, <any>undefined, { urn })
            case "intersight:index/workspaceFolder:WorkspaceFolder":
                return new WorkspaceFolder(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("intersight", "index/aaaRetentionPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/accessPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/adapterConfigPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/applianceAutoRmaPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/applianceBackup", _module)
pulumi.runtime.registerResourceModule("intersight", "index/applianceBackupPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/applianceClusterInfo", _module)
pulumi.runtime.registerResourceModule("intersight", "index/applianceClusterReplaceNode", _module)
pulumi.runtime.registerResourceModule("intersight", "index/applianceDataExportPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/applianceDeviceClaim", _module)
pulumi.runtime.registerResourceModule("intersight", "index/applianceDiagSetting", _module)
pulumi.runtime.registerResourceModule("intersight", "index/applianceExternalSyslogSetting", _module)
pulumi.runtime.registerResourceModule("intersight", "index/applianceRemoteFileImport", _module)
pulumi.runtime.registerResourceModule("intersight", "index/applianceRestore", _module)
pulumi.runtime.registerResourceModule("intersight", "index/assetDeviceClaim", _module)
pulumi.runtime.registerResourceModule("intersight", "index/assetDeviceContractNotification", _module)
pulumi.runtime.registerResourceModule("intersight", "index/assetTarget", _module)
pulumi.runtime.registerResourceModule("intersight", "index/biosPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/bootPrecisionPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/bulkExport", _module)
pulumi.runtime.registerResourceModule("intersight", "index/bulkMoCloner", _module)
pulumi.runtime.registerResourceModule("intersight", "index/bulkMoDeepCloner", _module)
pulumi.runtime.registerResourceModule("intersight", "index/bulkMoMerger", _module)
pulumi.runtime.registerResourceModule("intersight", "index/bulkRequest", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilityActionsMetaData", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilityAdapterDeprecatedDef", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilityAdapterUnitDescriptor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilityChassisDescriptor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilityChassisManufacturingDef", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilityCimcFirmwareDescriptor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilityEquipmentPhysicalDef", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilityEquipmentSlotArray", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilityFanModuleDescriptor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilityFanModuleManufacturingDef", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilityFexCapabilityDef", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilityFexDescriptor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilityFexManufacturingDef", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilityIoCardCapabilityDef", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilityIoCardDescriptor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilityIoCardManufacturingDef", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilityPortGroupAggregationDef", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilityPsuDescriptor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilityPsuManufacturingDef", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilityServerDescriptor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilityServerModelsCapabilityDef", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilityServerSchemaDescriptor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilitySiocModuleCapabilityDef", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilitySiocModuleDescriptor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilitySiocModuleManufacturingDef", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilitySwitchCapability", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilitySwitchDescriptor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilitySwitchEquipmentInfo", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilitySwitchManufacturingDef", _module)
pulumi.runtime.registerResourceModule("intersight", "index/capabilityVicDescriptor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/certificatemanagementPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/chassisConfigImport", _module)
pulumi.runtime.registerResourceModule("intersight", "index/chassisProfile", _module)
pulumi.runtime.registerResourceModule("intersight", "index/chassisProfileTemplate", _module)
pulumi.runtime.registerResourceModule("intersight", "index/cloudCollectInventory", _module)
pulumi.runtime.registerResourceModule("intersight", "index/commHttpProxyPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/computeHostUtilityOperation", _module)
pulumi.runtime.registerResourceModule("intersight", "index/condAlarmSuppression", _module)
pulumi.runtime.registerResourceModule("intersight", "index/connectorpackConnectorPackUpgrade", _module)
pulumi.runtime.registerResourceModule("intersight", "index/crdCustomResource", _module)
pulumi.runtime.registerResourceModule("intersight", "index/deviceconnectorPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/externalsiteAuthorization", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricAppliancePcRole", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricApplianceRole", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricEstimateImpact", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricEthNetworkControlPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricEthNetworkGroupPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricEthNetworkPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricFcNetworkPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricFcStorageRole", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricFcUplinkPcRole", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricFcUplinkRole", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricFcZonePolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricFcoeUplinkPcRole", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricFcoeUplinkRole", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricFlowControlPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricLanPinGroup", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricLinkAggregationPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricLinkControlPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricMulticastPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricPcOperation", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricPortMode", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricPortOperation", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricPortPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricSanPinGroup", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricServerRole", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricSpanDestEthPort", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricSpanSession", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricSpanSourceEthPort", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricSpanSourceEthPortChannel", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricSpanSourceVlan", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricSpanSourceVnicEthIf", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricSwitchClusterProfile", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricSwitchClusterProfileTemplate", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricSwitchControlPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricSwitchProfile", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricSwitchProfileTemplate", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricSystemQosPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricUplinkPcRole", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricUplinkRole", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricVlan", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fabricVsan", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fcpoolPool", _module)
pulumi.runtime.registerResourceModule("intersight", "index/fcpoolReservation", _module)
pulumi.runtime.registerResourceModule("intersight", "index/feedbackFeedbackPost", _module)
pulumi.runtime.registerResourceModule("intersight", "index/firmwareBiosDescriptor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/firmwareBoardControllerDescriptor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/firmwareChassisUpgrade", _module)
pulumi.runtime.registerResourceModule("intersight", "index/firmwareCimcDescriptor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/firmwareDimmDescriptor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/firmwareDistributable", _module)
pulumi.runtime.registerResourceModule("intersight", "index/firmwareDriveDescriptor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/firmwareDriverDistributable", _module)
pulumi.runtime.registerResourceModule("intersight", "index/firmwareEula", _module)
pulumi.runtime.registerResourceModule("intersight", "index/firmwareGpuDescriptor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/firmwareHbaDescriptor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/firmwareIomDescriptor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/firmwareMswitchDescriptor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/firmwareNxosDescriptor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/firmwarePcieDescriptor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/firmwarePolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/firmwarePsuDescriptor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/firmwareSasExpanderDescriptor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/firmwareServerConfigurationUtilityDistributable", _module)
pulumi.runtime.registerResourceModule("intersight", "index/firmwareStorageControllerDescriptor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/firmwareSwitchUpgrade", _module)
pulumi.runtime.registerResourceModule("intersight", "index/firmwareUnsupportedVersionUpgrade", _module)
pulumi.runtime.registerResourceModule("intersight", "index/firmwareUpgrade", _module)
pulumi.runtime.registerResourceModule("intersight", "index/firmwareUpgradeImpact", _module)
pulumi.runtime.registerResourceModule("intersight", "index/firmwareUpgradeValidity", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hclCompatibilityStatus", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hclHyperflexSoftwareCompatibilityInfo", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hclSupportedDriverName", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexAppCatalog", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexAutoSupportPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexCapabilityInfo", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexClusterBackupPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexClusterBackupPolicyDeployment", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexClusterNetworkPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexClusterProfile", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexClusterReplicationNetworkPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexClusterReplicationNetworkPolicyDeployment", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexClusterStoragePolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexExtFcStoragePolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexExtIscsiStoragePolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexFeatureLimitExternal", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexFeatureLimitInternal", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexHealthCheckDefinition", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexHealthCheckPackageChecksum", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexHxdpVersion", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexKeyEncryptionKey", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexLocalCredentialPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexNodeConfigPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexNodeProfile", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexProxySettingPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexReduceReSync", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexServerFirmwareVersion", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexServerFirmwareVersionEntry", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexServerModel", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexServiceAuthToken", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexSoftwareDistributionComponent", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexSoftwareDistributionEntry", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexSoftwareDistributionVersion", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexSoftwareVersionPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexStartReduceReSync", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexSysConfigPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexUcsmConfigPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexVcenterConfigPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexVmImportOperation", _module)
pulumi.runtime.registerResourceModule("intersight", "index/hyperflexVmRestoreOperation", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iamAccount", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iamAccountExperience", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iamApiKey", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iamAppRegistration", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iamCertificate", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iamCertificateRequest", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iamDomainNameInfo", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iamEndPointUser", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iamEndPointUserPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iamEndPointUserRole", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iamIdp", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iamIpAccessManagement", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iamIpAddress", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iamLdapGroup", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iamLdapPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iamLdapProvider", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iamLocalUserPassword", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iamPermission", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iamPrivateKeySpec", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iamQualifier", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iamResourceRoles", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iamSessionLimits", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iamSharingRule", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iamTrustPoint", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iamUser", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iamUserGroup", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iamUserSetting", _module)
pulumi.runtime.registerResourceModule("intersight", "index/inventoryRequest", _module)
pulumi.runtime.registerResourceModule("intersight", "index/ipmioverlanPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/ippoolPool", _module)
pulumi.runtime.registerResourceModule("intersight", "index/ippoolReservation", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iqnpoolPool", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iqnpoolReservation", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iwotenantMaintenanceNotification", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iwotenantMigrate", _module)
pulumi.runtime.registerResourceModule("intersight", "index/iwotenantTenantCustomization", _module)
pulumi.runtime.registerResourceModule("intersight", "index/kubernetesAciCniApic", _module)
pulumi.runtime.registerResourceModule("intersight", "index/kubernetesAciCniProfile", _module)
pulumi.runtime.registerResourceModule("intersight", "index/kubernetesAciCniTenantClusterAllocation", _module)
pulumi.runtime.registerResourceModule("intersight", "index/kubernetesAddonDefinition", _module)
pulumi.runtime.registerResourceModule("intersight", "index/kubernetesAddonPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/kubernetesAddonRepository", _module)
pulumi.runtime.registerResourceModule("intersight", "index/kubernetesBaremetalNodeProfile", _module)
pulumi.runtime.registerResourceModule("intersight", "index/kubernetesCluster", _module)
pulumi.runtime.registerResourceModule("intersight", "index/kubernetesClusterAddonProfile", _module)
pulumi.runtime.registerResourceModule("intersight", "index/kubernetesClusterProfile", _module)
pulumi.runtime.registerResourceModule("intersight", "index/kubernetesContainerRuntimePolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/kubernetesHttpProxyPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/kubernetesNetworkPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/kubernetesNodeGroupProfile", _module)
pulumi.runtime.registerResourceModule("intersight", "index/kubernetesNvidiaGpuProduct", _module)
pulumi.runtime.registerResourceModule("intersight", "index/kubernetesSysConfigPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/kubernetesTrustedRegistriesPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/kubernetesVersion", _module)
pulumi.runtime.registerResourceModule("intersight", "index/kubernetesVersionPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/kubernetesVirtualMachineInfraConfigPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/kubernetesVirtualMachineInfrastructureProvider", _module)
pulumi.runtime.registerResourceModule("intersight", "index/kubernetesVirtualMachineInstanceType", _module)
pulumi.runtime.registerResourceModule("intersight", "index/kubernetesVirtualMachineNodeProfile", _module)
pulumi.runtime.registerResourceModule("intersight", "index/kvmPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/kvmSession", _module)
pulumi.runtime.registerResourceModule("intersight", "index/kvmTunnel", _module)
pulumi.runtime.registerResourceModule("intersight", "index/kvmTunneledKvmPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/licenseIksLicenseCount", _module)
pulumi.runtime.registerResourceModule("intersight", "index/licenseIncLicenseCount", _module)
pulumi.runtime.registerResourceModule("intersight", "index/licenseIwoLicenseCount", _module)
pulumi.runtime.registerResourceModule("intersight", "index/licenseLicenseInfo", _module)
pulumi.runtime.registerResourceModule("intersight", "index/licenseLicenseReservationOp", _module)
pulumi.runtime.registerResourceModule("intersight", "index/macpoolPool", _module)
pulumi.runtime.registerResourceModule("intersight", "index/macpoolReservation", _module)
pulumi.runtime.registerResourceModule("intersight", "index/marketplaceUseCase", _module)
pulumi.runtime.registerResourceModule("intersight", "index/marketplaceUseCaseVersion", _module)
pulumi.runtime.registerResourceModule("intersight", "index/memoryPersistentMemoryPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/metricsMetricsExploration", _module)
pulumi.runtime.registerResourceModule("intersight", "index/networkconfigPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/niatelemetryNexusCloudAccount", _module)
pulumi.runtime.registerResourceModule("intersight", "index/niatelemetryNexusCloudSite", _module)
pulumi.runtime.registerResourceModule("intersight", "index/notificationAccountSubscription", _module)
pulumi.runtime.registerResourceModule("intersight", "index/ntpPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/oauthAuthorization", _module)
pulumi.runtime.registerResourceModule("intersight", "index/openapiOpenApiSpecification", _module)
pulumi.runtime.registerResourceModule("intersight", "index/openapiProcessFile", _module)
pulumi.runtime.registerResourceModule("intersight", "index/openapiTaskGenerationRequest", _module)
pulumi.runtime.registerResourceModule("intersight", "index/oprsDeployment", _module)
pulumi.runtime.registerResourceModule("intersight", "index/oprsSyncTargetListMessage", _module)
pulumi.runtime.registerResourceModule("intersight", "index/organizationOrganization", _module)
pulumi.runtime.registerResourceModule("intersight", "index/osBulkInstallInfo", _module)
pulumi.runtime.registerResourceModule("intersight", "index/osConfigurationFile", _module)
pulumi.runtime.registerResourceModule("intersight", "index/osInstall", _module)
pulumi.runtime.registerResourceModule("intersight", "index/osOsSupport", _module)
pulumi.runtime.registerResourceModule("intersight", "index/osTemplateFile", _module)
pulumi.runtime.registerResourceModule("intersight", "index/osValidInstallTarget", _module)
pulumi.runtime.registerResourceModule("intersight", "index/partnerintegrationDeviceConnector", _module)
pulumi.runtime.registerResourceModule("intersight", "index/partnerintegrationEtl", _module)
pulumi.runtime.registerResourceModule("intersight", "index/partnerintegrationFile", _module)
pulumi.runtime.registerResourceModule("intersight", "index/partnerintegrationInventory", _module)
pulumi.runtime.registerResourceModule("intersight", "index/partnerintegrationMetrics", _module)
pulumi.runtime.registerResourceModule("intersight", "index/partnerintegrationModel", _module)
pulumi.runtime.registerResourceModule("intersight", "index/powerPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/recommendationHardwareExpansionRequest", _module)
pulumi.runtime.registerResourceModule("intersight", "index/recommendationHardwareExpansionRequestItem", _module)
pulumi.runtime.registerResourceModule("intersight", "index/recommendationPurchaseOrderEstimate", _module)
pulumi.runtime.registerResourceModule("intersight", "index/recoveryBackupConfigPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/recoveryBackupProfile", _module)
pulumi.runtime.registerResourceModule("intersight", "index/recoveryOnDemandBackup", _module)
pulumi.runtime.registerResourceModule("intersight", "index/recoveryRestore", _module)
pulumi.runtime.registerResourceModule("intersight", "index/recoveryScheduleConfigPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/resourceGroup", _module)
pulumi.runtime.registerResourceModule("intersight", "index/resourceMembership", _module)
pulumi.runtime.registerResourceModule("intersight", "index/resourceReservation", _module)
pulumi.runtime.registerResourceModule("intersight", "index/resourceSelectionCriteria", _module)
pulumi.runtime.registerResourceModule("intersight", "index/resourcepoolPool", _module)
pulumi.runtime.registerResourceModule("intersight", "index/rproxyReverseProxy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/schedulerTaskSchedule", _module)
pulumi.runtime.registerResourceModule("intersight", "index/sdaaciConnection", _module)
pulumi.runtime.registerResourceModule("intersight", "index/sdaaciConnectionDetail", _module)
pulumi.runtime.registerResourceModule("intersight", "index/sdcardPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/searchSuggestItem", _module)
pulumi.runtime.registerResourceModule("intersight", "index/serverConfigImport", _module)
pulumi.runtime.registerResourceModule("intersight", "index/serverProfile", _module)
pulumi.runtime.registerResourceModule("intersight", "index/serverProfileTemplate", _module)
pulumi.runtime.registerResourceModule("intersight", "index/smtpPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/snmpPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/softwareApplianceDistributable", _module)
pulumi.runtime.registerResourceModule("intersight", "index/softwareHciBundleDistributable", _module)
pulumi.runtime.registerResourceModule("intersight", "index/softwareHciDistributable", _module)
pulumi.runtime.registerResourceModule("intersight", "index/softwareHclMeta", _module)
pulumi.runtime.registerResourceModule("intersight", "index/softwareHyperflexBundleDistributable", _module)
pulumi.runtime.registerResourceModule("intersight", "index/softwareHyperflexDistributable", _module)
pulumi.runtime.registerResourceModule("intersight", "index/softwareIksBundleDistributable", _module)
pulumi.runtime.registerResourceModule("intersight", "index/softwareReleaseMeta", _module)
pulumi.runtime.registerResourceModule("intersight", "index/softwareSolutionDistributable", _module)
pulumi.runtime.registerResourceModule("intersight", "index/softwareUcsdBundleDistributable", _module)
pulumi.runtime.registerResourceModule("intersight", "index/softwareUcsdDistributable", _module)
pulumi.runtime.registerResourceModule("intersight", "index/softwarerepositoryAuthorization", _module)
pulumi.runtime.registerResourceModule("intersight", "index/softwarerepositoryCategoryMapper", _module)
pulumi.runtime.registerResourceModule("intersight", "index/softwarerepositoryCategoryMapperModel", _module)
pulumi.runtime.registerResourceModule("intersight", "index/softwarerepositoryCategorySupportConstraint", _module)
pulumi.runtime.registerResourceModule("intersight", "index/softwarerepositoryCategoryUnsupportedModels", _module)
pulumi.runtime.registerResourceModule("intersight", "index/softwarerepositoryOperatingSystemFile", _module)
pulumi.runtime.registerResourceModule("intersight", "index/softwarerepositoryRelease", _module)
pulumi.runtime.registerResourceModule("intersight", "index/solPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/sshPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/storageDriveGroup", _module)
pulumi.runtime.registerResourceModule("intersight", "index/storageDriveSecurityPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/storageStoragePolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/syslogPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/tamAdvisoryCount", _module)
pulumi.runtime.registerResourceModule("intersight", "index/tamAdvisoryDefinition", _module)
pulumi.runtime.registerResourceModule("intersight", "index/tamAdvisoryInfo", _module)
pulumi.runtime.registerResourceModule("intersight", "index/tamAdvisoryInstance", _module)
pulumi.runtime.registerResourceModule("intersight", "index/tamSecurityAdvisory", _module)
pulumi.runtime.registerResourceModule("intersight", "index/taskFabricMosScopedInventory", _module)
pulumi.runtime.registerResourceModule("intersight", "index/taskHitachiScopedInventory", _module)
pulumi.runtime.registerResourceModule("intersight", "index/taskHyperFlexManagementScopedInventory", _module)
pulumi.runtime.registerResourceModule("intersight", "index/taskHyperflexScopedInventory", _module)
pulumi.runtime.registerResourceModule("intersight", "index/taskMdsScopedInventory", _module)
pulumi.runtime.registerResourceModule("intersight", "index/taskMdsSystemScopedInventory", _module)
pulumi.runtime.registerResourceModule("intersight", "index/taskMerakiScopedInventory", _module)
pulumi.runtime.registerResourceModule("intersight", "index/taskNetAppScopedInventory", _module)
pulumi.runtime.registerResourceModule("intersight", "index/taskNexusScopedInventory", _module)
pulumi.runtime.registerResourceModule("intersight", "index/taskNexusSystemScopedInventory", _module)
pulumi.runtime.registerResourceModule("intersight", "index/taskNexusVlanScopedInventory", _module)
pulumi.runtime.registerResourceModule("intersight", "index/taskPublicCloudScopedInventory", _module)
pulumi.runtime.registerResourceModule("intersight", "index/taskPureScopedInventory", _module)
pulumi.runtime.registerResourceModule("intersight", "index/taskServerScopedInventory", _module)
pulumi.runtime.registerResourceModule("intersight", "index/techsupportmanagementCollectionControlPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/techsupportmanagementTechSupportBundle", _module)
pulumi.runtime.registerResourceModule("intersight", "index/terraformExecutor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/thermalPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/uuidpoolPool", _module)
pulumi.runtime.registerResourceModule("intersight", "index/uuidpoolReservation", _module)
pulumi.runtime.registerResourceModule("intersight", "index/virtualizationEsxiConsole", _module)
pulumi.runtime.registerResourceModule("intersight", "index/virtualizationVirtualMachine", _module)
pulumi.runtime.registerResourceModule("intersight", "index/vmediaPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/vmrcConsole", _module)
pulumi.runtime.registerResourceModule("intersight", "index/vnicEthAdapterPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/vnicEthIf", _module)
pulumi.runtime.registerResourceModule("intersight", "index/vnicEthNetworkPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/vnicEthQosPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/vnicFcAdapterPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/vnicFcIf", _module)
pulumi.runtime.registerResourceModule("intersight", "index/vnicFcNetworkPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/vnicFcQosPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/vnicIscsiAdapterPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/vnicIscsiBootPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/vnicIscsiStaticTargetPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/vnicLanConnectivityPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/vnicSanConnectivityPolicy", _module)
pulumi.runtime.registerResourceModule("intersight", "index/vnicVhbaTemplate", _module)
pulumi.runtime.registerResourceModule("intersight", "index/vnicVnicTemplate", _module)
pulumi.runtime.registerResourceModule("intersight", "index/vrfVrf", _module)
pulumi.runtime.registerResourceModule("intersight", "index/workflowAnsibleBatchExecutor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/workflowBatchApiExecutor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/workflowCatalogItemDefinition", _module)
pulumi.runtime.registerResourceModule("intersight", "index/workflowCatalogServiceRequest", _module)
pulumi.runtime.registerResourceModule("intersight", "index/workflowCustomDataTypeDefinition", _module)
pulumi.runtime.registerResourceModule("intersight", "index/workflowErrorResponseHandler", _module)
pulumi.runtime.registerResourceModule("intersight", "index/workflowPowerShellBatchApiExecutor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/workflowRollbackWorkflow", _module)
pulumi.runtime.registerResourceModule("intersight", "index/workflowServiceItemActionDefinition", _module)
pulumi.runtime.registerResourceModule("intersight", "index/workflowServiceItemActionInstance", _module)
pulumi.runtime.registerResourceModule("intersight", "index/workflowServiceItemDefinition", _module)
pulumi.runtime.registerResourceModule("intersight", "index/workflowServiceItemHealthCheckDefinition", _module)
pulumi.runtime.registerResourceModule("intersight", "index/workflowServiceItemInstance", _module)
pulumi.runtime.registerResourceModule("intersight", "index/workflowServiceItemOutput", _module)
pulumi.runtime.registerResourceModule("intersight", "index/workflowSshBatchExecutor", _module)
pulumi.runtime.registerResourceModule("intersight", "index/workflowTaskDefinition", _module)
pulumi.runtime.registerResourceModule("intersight", "index/workflowTemplateEvaluation", _module)
pulumi.runtime.registerResourceModule("intersight", "index/workflowTemplateParser", _module)
pulumi.runtime.registerResourceModule("intersight", "index/workflowUiDisplayMetadata", _module)
pulumi.runtime.registerResourceModule("intersight", "index/workflowWorkflowDefinition", _module)
pulumi.runtime.registerResourceModule("intersight", "index/workflowWorkflowInfo", _module)
pulumi.runtime.registerResourceModule("intersight", "index/workspaceFolder", _module)
pulumi.runtime.registerResourcePackage("intersight", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:intersight") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
