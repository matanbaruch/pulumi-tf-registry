// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getFcpoolPoolMember(args?: GetFcpoolPoolMemberArgs, opts?: pulumi.InvokeOptions): Promise<GetFcpoolPoolMemberResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getFcpoolPoolMember:getFcpoolPoolMember", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "assigned": args.assigned,
        "assignedByAnother": args.assignedByAnother,
        "assignedToEntity": args.assignedToEntity,
        "blockHead": args.blockHead,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "peer": args.peer,
        "permissionResources": args.permissionResources,
        "pool": args.pool,
        "reservation": args.reservation,
        "reserved": args.reserved,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
        "wwnId": args.wwnId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFcpoolPoolMember.
 */
export interface GetFcpoolPoolMemberArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetFcpoolPoolMemberAncestor[];
    assigned?: boolean;
    assignedByAnother?: boolean;
    assignedToEntity?: inputs.GetFcpoolPoolMemberAssignedToEntity;
    blockHead?: inputs.GetFcpoolPoolMemberBlockHead;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetFcpoolPoolMemberParent;
    peer?: inputs.GetFcpoolPoolMemberPeer;
    permissionResources?: inputs.GetFcpoolPoolMemberPermissionResource[];
    pool?: inputs.GetFcpoolPoolMemberPool;
    reservation?: inputs.GetFcpoolPoolMemberReservation;
    reserved?: boolean;
    sharedScope?: string;
    tags?: inputs.GetFcpoolPoolMemberTag[];
    versionContext?: inputs.GetFcpoolPoolMemberVersionContext;
    wwnId?: string;
}

/**
 * A collection of values returned by getFcpoolPoolMember.
 */
export interface GetFcpoolPoolMemberResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetFcpoolPoolMemberAncestor[];
    readonly assigned?: boolean;
    readonly assignedByAnother?: boolean;
    readonly assignedToEntity?: outputs.GetFcpoolPoolMemberAssignedToEntity;
    readonly blockHead?: outputs.GetFcpoolPoolMemberBlockHead;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetFcpoolPoolMemberParent;
    readonly peer?: outputs.GetFcpoolPoolMemberPeer;
    readonly permissionResources?: outputs.GetFcpoolPoolMemberPermissionResource[];
    readonly pool?: outputs.GetFcpoolPoolMemberPool;
    readonly reservation?: outputs.GetFcpoolPoolMemberReservation;
    readonly reserved?: boolean;
    readonly results: outputs.GetFcpoolPoolMemberResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetFcpoolPoolMemberTag[];
    readonly versionContext?: outputs.GetFcpoolPoolMemberVersionContext;
    readonly wwnId?: string;
}
export function getFcpoolPoolMemberOutput(args?: GetFcpoolPoolMemberOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFcpoolPoolMemberResult> {
    return pulumi.output(args).apply((a: any) => getFcpoolPoolMember(a, opts))
}

/**
 * A collection of arguments for invoking getFcpoolPoolMember.
 */
export interface GetFcpoolPoolMemberOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetFcpoolPoolMemberAncestorArgs>[]>;
    assigned?: pulumi.Input<boolean>;
    assignedByAnother?: pulumi.Input<boolean>;
    assignedToEntity?: pulumi.Input<inputs.GetFcpoolPoolMemberAssignedToEntityArgs>;
    blockHead?: pulumi.Input<inputs.GetFcpoolPoolMemberBlockHeadArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetFcpoolPoolMemberParentArgs>;
    peer?: pulumi.Input<inputs.GetFcpoolPoolMemberPeerArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetFcpoolPoolMemberPermissionResourceArgs>[]>;
    pool?: pulumi.Input<inputs.GetFcpoolPoolMemberPoolArgs>;
    reservation?: pulumi.Input<inputs.GetFcpoolPoolMemberReservationArgs>;
    reserved?: pulumi.Input<boolean>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetFcpoolPoolMemberTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetFcpoolPoolMemberVersionContextArgs>;
    wwnId?: pulumi.Input<string>;
}
