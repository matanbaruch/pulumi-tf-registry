// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCloudAwsVolume(args?: GetCloudAwsVolumeArgs, opts?: pulumi.InvokeOptions): Promise<GetCloudAwsVolumeResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getCloudAwsVolume:getCloudAwsVolume", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "awsBillingUnit": args.awsBillingUnit,
        "billingUnit": args.billingUnit,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "encryptionState": args.encryptionState,
        "id": args.id,
        "identity": args.identity,
        "instanceAttachments": args.instanceAttachments,
        "iopsInfo": args.iopsInfo,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "regionInfo": args.regionInfo,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "size": args.size,
        "sourceImageId": args.sourceImageId,
        "state": args.state,
        "tags": args.tags,
        "uuid": args.uuid,
        "versionContext": args.versionContext,
        "volumeCreateTime": args.volumeCreateTime,
        "volumeTags": args.volumeTags,
        "volumeType": args.volumeType,
        "zoneInfo": args.zoneInfo,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCloudAwsVolume.
 */
export interface GetCloudAwsVolumeArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetCloudAwsVolumeAncestor[];
    awsBillingUnit?: inputs.GetCloudAwsVolumeAwsBillingUnit;
    billingUnit?: inputs.GetCloudAwsVolumeBillingUnit;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    encryptionState?: string;
    id?: string;
    identity?: string;
    instanceAttachments?: inputs.GetCloudAwsVolumeInstanceAttachment[];
    iopsInfo?: inputs.GetCloudAwsVolumeIopsInfo;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetCloudAwsVolumeParent;
    permissionResources?: inputs.GetCloudAwsVolumePermissionResource[];
    regionInfo?: inputs.GetCloudAwsVolumeRegionInfo;
    registeredDevice?: inputs.GetCloudAwsVolumeRegisteredDevice;
    sharedScope?: string;
    size?: number;
    sourceImageId?: string;
    state?: string;
    tags?: inputs.GetCloudAwsVolumeTag[];
    uuid?: string;
    versionContext?: inputs.GetCloudAwsVolumeVersionContext;
    volumeCreateTime?: string;
    volumeTags?: inputs.GetCloudAwsVolumeVolumeTag[];
    volumeType?: inputs.GetCloudAwsVolumeVolumeType;
    zoneInfo?: inputs.GetCloudAwsVolumeZoneInfo;
}

/**
 * A collection of values returned by getCloudAwsVolume.
 */
export interface GetCloudAwsVolumeResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetCloudAwsVolumeAncestor[];
    readonly awsBillingUnit?: outputs.GetCloudAwsVolumeAwsBillingUnit;
    readonly billingUnit?: outputs.GetCloudAwsVolumeBillingUnit;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly encryptionState?: string;
    readonly id: string;
    readonly identity?: string;
    readonly instanceAttachments?: outputs.GetCloudAwsVolumeInstanceAttachment[];
    readonly iopsInfo?: outputs.GetCloudAwsVolumeIopsInfo;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetCloudAwsVolumeParent;
    readonly permissionResources?: outputs.GetCloudAwsVolumePermissionResource[];
    readonly regionInfo?: outputs.GetCloudAwsVolumeRegionInfo;
    readonly registeredDevice?: outputs.GetCloudAwsVolumeRegisteredDevice;
    readonly results: outputs.GetCloudAwsVolumeResult[];
    readonly sharedScope?: string;
    readonly size?: number;
    readonly sourceImageId?: string;
    readonly state?: string;
    readonly tags?: outputs.GetCloudAwsVolumeTag[];
    readonly uuid?: string;
    readonly versionContext?: outputs.GetCloudAwsVolumeVersionContext;
    readonly volumeCreateTime?: string;
    readonly volumeTags?: outputs.GetCloudAwsVolumeVolumeTag[];
    readonly volumeType?: outputs.GetCloudAwsVolumeVolumeType;
    readonly zoneInfo?: outputs.GetCloudAwsVolumeZoneInfo;
}
export function getCloudAwsVolumeOutput(args?: GetCloudAwsVolumeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCloudAwsVolumeResult> {
    return pulumi.output(args).apply((a: any) => getCloudAwsVolume(a, opts))
}

/**
 * A collection of arguments for invoking getCloudAwsVolume.
 */
export interface GetCloudAwsVolumeOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetCloudAwsVolumeAncestorArgs>[]>;
    awsBillingUnit?: pulumi.Input<inputs.GetCloudAwsVolumeAwsBillingUnitArgs>;
    billingUnit?: pulumi.Input<inputs.GetCloudAwsVolumeBillingUnitArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    encryptionState?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    identity?: pulumi.Input<string>;
    instanceAttachments?: pulumi.Input<pulumi.Input<inputs.GetCloudAwsVolumeInstanceAttachmentArgs>[]>;
    iopsInfo?: pulumi.Input<inputs.GetCloudAwsVolumeIopsInfoArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetCloudAwsVolumeParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetCloudAwsVolumePermissionResourceArgs>[]>;
    regionInfo?: pulumi.Input<inputs.GetCloudAwsVolumeRegionInfoArgs>;
    registeredDevice?: pulumi.Input<inputs.GetCloudAwsVolumeRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    sourceImageId?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetCloudAwsVolumeTagArgs>[]>;
    uuid?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetCloudAwsVolumeVersionContextArgs>;
    volumeCreateTime?: pulumi.Input<string>;
    volumeTags?: pulumi.Input<pulumi.Input<inputs.GetCloudAwsVolumeVolumeTagArgs>[]>;
    volumeType?: pulumi.Input<inputs.GetCloudAwsVolumeVolumeTypeArgs>;
    zoneInfo?: pulumi.Input<inputs.GetCloudAwsVolumeZoneInfoArgs>;
}
