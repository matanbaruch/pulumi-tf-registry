// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCloudAwsSubnet(args?: GetCloudAwsSubnetArgs, opts?: pulumi.InvokeOptions): Promise<GetCloudAwsSubnetResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getCloudAwsSubnet:getCloudAwsSubnet", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "autoAssignPrivateIpV6": args.autoAssignPrivateIpV6,
        "autoAssignPublicIpV4": args.autoAssignPublicIpV4,
        "availabilityZoneName": args.availabilityZoneName,
        "awsVpc": args.awsVpc,
        "billingUnit": args.billingUnit,
        "cidr": args.cidr,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "identity": args.identity,
        "ipv4Cidr": args.ipv4Cidr,
        "ipv6Cidr": args.ipv6Cidr,
        "isDefault": args.isDefault,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "regionInfo": args.regionInfo,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "state": args.state,
        "subnetTags": args.subnetTags,
        "tags": args.tags,
        "versionContext": args.versionContext,
        "zoneInfo": args.zoneInfo,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCloudAwsSubnet.
 */
export interface GetCloudAwsSubnetArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetCloudAwsSubnetAncestor[];
    autoAssignPrivateIpV6?: boolean;
    autoAssignPublicIpV4?: boolean;
    availabilityZoneName?: string;
    awsVpc?: inputs.GetCloudAwsSubnetAwsVpc;
    billingUnit?: inputs.GetCloudAwsSubnetBillingUnit;
    cidr?: string;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    id?: string;
    identity?: string;
    ipv4Cidr?: string;
    ipv6Cidr?: string;
    isDefault?: boolean;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetCloudAwsSubnetParent;
    permissionResources?: inputs.GetCloudAwsSubnetPermissionResource[];
    regionInfo?: inputs.GetCloudAwsSubnetRegionInfo;
    registeredDevice?: inputs.GetCloudAwsSubnetRegisteredDevice;
    sharedScope?: string;
    state?: string;
    subnetTags?: inputs.GetCloudAwsSubnetSubnetTag[];
    tags?: inputs.GetCloudAwsSubnetTag[];
    versionContext?: inputs.GetCloudAwsSubnetVersionContext;
    zoneInfo?: inputs.GetCloudAwsSubnetZoneInfo;
}

/**
 * A collection of values returned by getCloudAwsSubnet.
 */
export interface GetCloudAwsSubnetResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetCloudAwsSubnetAncestor[];
    readonly autoAssignPrivateIpV6?: boolean;
    readonly autoAssignPublicIpV4?: boolean;
    readonly availabilityZoneName?: string;
    readonly awsVpc?: outputs.GetCloudAwsSubnetAwsVpc;
    readonly billingUnit?: outputs.GetCloudAwsSubnetBillingUnit;
    readonly cidr?: string;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly identity?: string;
    readonly ipv4Cidr?: string;
    readonly ipv6Cidr?: string;
    readonly isDefault?: boolean;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetCloudAwsSubnetParent;
    readonly permissionResources?: outputs.GetCloudAwsSubnetPermissionResource[];
    readonly regionInfo?: outputs.GetCloudAwsSubnetRegionInfo;
    readonly registeredDevice?: outputs.GetCloudAwsSubnetRegisteredDevice;
    readonly results: outputs.GetCloudAwsSubnetResult[];
    readonly sharedScope?: string;
    readonly state?: string;
    readonly subnetTags?: outputs.GetCloudAwsSubnetSubnetTag[];
    readonly tags?: outputs.GetCloudAwsSubnetTag[];
    readonly versionContext?: outputs.GetCloudAwsSubnetVersionContext;
    readonly zoneInfo?: outputs.GetCloudAwsSubnetZoneInfo;
}
export function getCloudAwsSubnetOutput(args?: GetCloudAwsSubnetOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCloudAwsSubnetResult> {
    return pulumi.output(args).apply((a: any) => getCloudAwsSubnet(a, opts))
}

/**
 * A collection of arguments for invoking getCloudAwsSubnet.
 */
export interface GetCloudAwsSubnetOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetCloudAwsSubnetAncestorArgs>[]>;
    autoAssignPrivateIpV6?: pulumi.Input<boolean>;
    autoAssignPublicIpV4?: pulumi.Input<boolean>;
    availabilityZoneName?: pulumi.Input<string>;
    awsVpc?: pulumi.Input<inputs.GetCloudAwsSubnetAwsVpcArgs>;
    billingUnit?: pulumi.Input<inputs.GetCloudAwsSubnetBillingUnitArgs>;
    cidr?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    identity?: pulumi.Input<string>;
    ipv4Cidr?: pulumi.Input<string>;
    ipv6Cidr?: pulumi.Input<string>;
    isDefault?: pulumi.Input<boolean>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetCloudAwsSubnetParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetCloudAwsSubnetPermissionResourceArgs>[]>;
    regionInfo?: pulumi.Input<inputs.GetCloudAwsSubnetRegionInfoArgs>;
    registeredDevice?: pulumi.Input<inputs.GetCloudAwsSubnetRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    subnetTags?: pulumi.Input<pulumi.Input<inputs.GetCloudAwsSubnetSubnetTagArgs>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetCloudAwsSubnetTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetCloudAwsSubnetVersionContextArgs>;
    zoneInfo?: pulumi.Input<inputs.GetCloudAwsSubnetZoneInfoArgs>;
}
