// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIaasLicenseInfo(args?: GetIaasLicenseInfoArgs, opts?: pulumi.InvokeOptions): Promise<GetIaasLicenseInfoResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getIaasLicenseInfo:getIaasLicenseInfo", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "guid": args.guid,
        "id": args.id,
        "licenseExpirationDate": args.licenseExpirationDate,
        "licenseKeysInfos": args.licenseKeysInfos,
        "licenseType": args.licenseType,
        "licenseUtilizationInfos": args.licenseUtilizationInfos,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIaasLicenseInfo.
 */
export interface GetIaasLicenseInfoArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetIaasLicenseInfoAncestor[];
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    guid?: inputs.GetIaasLicenseInfoGuid;
    id?: string;
    licenseExpirationDate?: string;
    licenseKeysInfos?: inputs.GetIaasLicenseInfoLicenseKeysInfo[];
    licenseType?: string;
    licenseUtilizationInfos?: inputs.GetIaasLicenseInfoLicenseUtilizationInfo[];
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetIaasLicenseInfoParent;
    permissionResources?: inputs.GetIaasLicenseInfoPermissionResource[];
    sharedScope?: string;
    tags?: inputs.GetIaasLicenseInfoTag[];
    versionContext?: inputs.GetIaasLicenseInfoVersionContext;
}

/**
 * A collection of values returned by getIaasLicenseInfo.
 */
export interface GetIaasLicenseInfoResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetIaasLicenseInfoAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly guid?: outputs.GetIaasLicenseInfoGuid;
    readonly id: string;
    readonly licenseExpirationDate?: string;
    readonly licenseKeysInfos?: outputs.GetIaasLicenseInfoLicenseKeysInfo[];
    readonly licenseType?: string;
    readonly licenseUtilizationInfos?: outputs.GetIaasLicenseInfoLicenseUtilizationInfo[];
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetIaasLicenseInfoParent;
    readonly permissionResources?: outputs.GetIaasLicenseInfoPermissionResource[];
    readonly results: outputs.GetIaasLicenseInfoResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetIaasLicenseInfoTag[];
    readonly versionContext?: outputs.GetIaasLicenseInfoVersionContext;
}
export function getIaasLicenseInfoOutput(args?: GetIaasLicenseInfoOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIaasLicenseInfoResult> {
    return pulumi.output(args).apply((a: any) => getIaasLicenseInfo(a, opts))
}

/**
 * A collection of arguments for invoking getIaasLicenseInfo.
 */
export interface GetIaasLicenseInfoOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetIaasLicenseInfoAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    guid?: pulumi.Input<inputs.GetIaasLicenseInfoGuidArgs>;
    id?: pulumi.Input<string>;
    licenseExpirationDate?: pulumi.Input<string>;
    licenseKeysInfos?: pulumi.Input<pulumi.Input<inputs.GetIaasLicenseInfoLicenseKeysInfoArgs>[]>;
    licenseType?: pulumi.Input<string>;
    licenseUtilizationInfos?: pulumi.Input<pulumi.Input<inputs.GetIaasLicenseInfoLicenseUtilizationInfoArgs>[]>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetIaasLicenseInfoParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetIaasLicenseInfoPermissionResourceArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetIaasLicenseInfoTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetIaasLicenseInfoVersionContextArgs>;
}
