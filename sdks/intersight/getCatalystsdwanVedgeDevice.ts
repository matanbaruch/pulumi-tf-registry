// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCatalystsdwanVedgeDevice(args?: GetCatalystsdwanVedgeDeviceArgs, opts?: pulumi.InvokeOptions): Promise<GetCatalystsdwanVedgeDeviceResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getCatalystsdwanVedgeDevice:getCatalystsdwanVedgeDevice", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "configStatusMessage": args.configStatusMessage,
        "createTime": args.createTime,
        "deviceLocation": args.deviceLocation,
        "deviceMoId": args.deviceMoId,
        "deviceState": args.deviceState,
        "deviceType": args.deviceType,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "hardwareVersion": args.hardwareVersion,
        "hostName": args.hostName,
        "id": args.id,
        "isUpgraded": args.isUpgraded,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "name": args.name,
        "nrVersion": args.nrVersion,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "platformFamily": args.platformFamily,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "reachability": args.reachability,
        "registeredDevice": args.registeredDevice,
        "revision": args.revision,
        "rn": args.rn,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "siteId": args.siteId,
        "siteName": args.siteName,
        "spOrganizationName": args.spOrganizationName,
        "systemIp": args.systemIp,
        "tags": args.tags,
        "templateStatus": args.templateStatus,
        "uuid": args.uuid,
        "validity": args.validity,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCatalystsdwanVedgeDevice.
 */
export interface GetCatalystsdwanVedgeDeviceArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetCatalystsdwanVedgeDeviceAncestor[];
    classId?: string;
    configStatusMessage?: string;
    createTime?: string;
    deviceLocation?: inputs.GetCatalystsdwanVedgeDeviceDeviceLocation;
    deviceMoId?: string;
    deviceState?: string;
    deviceType?: string;
    dn?: string;
    domainGroupMoid?: string;
    hardwareVersion?: string;
    hostName?: string;
    id?: string;
    isUpgraded?: boolean;
    modTime?: string;
    model?: string;
    moid?: string;
    name?: string;
    nrVersion?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetCatalystsdwanVedgeDeviceParent;
    permissionResources?: inputs.GetCatalystsdwanVedgeDevicePermissionResource[];
    platformFamily?: string;
    presence?: string;
    previousFru?: inputs.GetCatalystsdwanVedgeDevicePreviousFru;
    reachability?: string;
    registeredDevice?: inputs.GetCatalystsdwanVedgeDeviceRegisteredDevice;
    revision?: string;
    rn?: string;
    serial?: string;
    sharedScope?: string;
    siteId?: string;
    siteName?: string;
    spOrganizationName?: string;
    systemIp?: string;
    tags?: inputs.GetCatalystsdwanVedgeDeviceTag[];
    templateStatus?: string;
    uuid?: string;
    validity?: string;
    vendor?: string;
    versionContext?: inputs.GetCatalystsdwanVedgeDeviceVersionContext;
}

/**
 * A collection of values returned by getCatalystsdwanVedgeDevice.
 */
export interface GetCatalystsdwanVedgeDeviceResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetCatalystsdwanVedgeDeviceAncestor[];
    readonly classId?: string;
    readonly configStatusMessage?: string;
    readonly createTime?: string;
    readonly deviceLocation?: outputs.GetCatalystsdwanVedgeDeviceDeviceLocation;
    readonly deviceMoId?: string;
    readonly deviceState?: string;
    readonly deviceType?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly hardwareVersion?: string;
    readonly hostName?: string;
    readonly id: string;
    readonly isUpgraded?: boolean;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nrVersion?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetCatalystsdwanVedgeDeviceParent;
    readonly permissionResources?: outputs.GetCatalystsdwanVedgeDevicePermissionResource[];
    readonly platformFamily?: string;
    readonly presence?: string;
    readonly previousFru?: outputs.GetCatalystsdwanVedgeDevicePreviousFru;
    readonly reachability?: string;
    readonly registeredDevice?: outputs.GetCatalystsdwanVedgeDeviceRegisteredDevice;
    readonly results: outputs.GetCatalystsdwanVedgeDeviceResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly siteId?: string;
    readonly siteName?: string;
    readonly spOrganizationName?: string;
    readonly systemIp?: string;
    readonly tags?: outputs.GetCatalystsdwanVedgeDeviceTag[];
    readonly templateStatus?: string;
    readonly uuid?: string;
    readonly validity?: string;
    readonly vendor?: string;
    readonly versionContext?: outputs.GetCatalystsdwanVedgeDeviceVersionContext;
}
export function getCatalystsdwanVedgeDeviceOutput(args?: GetCatalystsdwanVedgeDeviceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCatalystsdwanVedgeDeviceResult> {
    return pulumi.output(args).apply((a: any) => getCatalystsdwanVedgeDevice(a, opts))
}

/**
 * A collection of arguments for invoking getCatalystsdwanVedgeDevice.
 */
export interface GetCatalystsdwanVedgeDeviceOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetCatalystsdwanVedgeDeviceAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    configStatusMessage?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceLocation?: pulumi.Input<inputs.GetCatalystsdwanVedgeDeviceDeviceLocationArgs>;
    deviceMoId?: pulumi.Input<string>;
    deviceState?: pulumi.Input<string>;
    deviceType?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    hardwareVersion?: pulumi.Input<string>;
    hostName?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    isUpgraded?: pulumi.Input<boolean>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nrVersion?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetCatalystsdwanVedgeDeviceParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetCatalystsdwanVedgeDevicePermissionResourceArgs>[]>;
    platformFamily?: pulumi.Input<string>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetCatalystsdwanVedgeDevicePreviousFruArgs>;
    reachability?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetCatalystsdwanVedgeDeviceRegisteredDeviceArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    siteId?: pulumi.Input<string>;
    siteName?: pulumi.Input<string>;
    spOrganizationName?: pulumi.Input<string>;
    systemIp?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetCatalystsdwanVedgeDeviceTagArgs>[]>;
    templateStatus?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    validity?: pulumi.Input<string>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetCatalystsdwanVedgeDeviceVersionContextArgs>;
}
