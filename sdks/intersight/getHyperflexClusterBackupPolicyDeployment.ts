// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getHyperflexClusterBackupPolicyDeployment(args?: GetHyperflexClusterBackupPolicyDeploymentArgs, opts?: pulumi.InvokeOptions): Promise<GetHyperflexClusterBackupPolicyDeploymentResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getHyperflexClusterBackupPolicyDeployment:getHyperflexClusterBackupPolicyDeployment", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "backupDataStoreName": args.backupDataStoreName,
        "backupDataStoreSize": args.backupDataStoreSize,
        "backupDataStoreSizeUnit": args.backupDataStoreSizeUnit,
        "backupTarget": args.backupTarget,
        "classId": args.classId,
        "createTime": args.createTime,
        "dataStoreEncryptionEnabled": args.dataStoreEncryptionEnabled,
        "description": args.description,
        "discovered": args.discovered,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "localSnapshotRetentionCount": args.localSnapshotRetentionCount,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "organization": args.organization,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "policyMoid": args.policyMoid,
        "profileMoid": args.profileMoid,
        "replicationPairNamePrefix": args.replicationPairNamePrefix,
        "replicationSchedule": args.replicationSchedule,
        "sharedScope": args.sharedScope,
        "snapshotRetentionCount": args.snapshotRetentionCount,
        "sourceCluster": args.sourceCluster,
        "sourceDetached": args.sourceDetached,
        "sourceRequestId": args.sourceRequestId,
        "sourceUuid": args.sourceUuid,
        "tags": args.tags,
        "targetDetached": args.targetDetached,
        "targetRequestId": args.targetRequestId,
        "targetUuid": args.targetUuid,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getHyperflexClusterBackupPolicyDeployment.
 */
export interface GetHyperflexClusterBackupPolicyDeploymentArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetHyperflexClusterBackupPolicyDeploymentAncestor[];
    backupDataStoreName?: string;
    backupDataStoreSize?: number;
    backupDataStoreSizeUnit?: string;
    backupTarget?: inputs.GetHyperflexClusterBackupPolicyDeploymentBackupTarget;
    classId?: string;
    createTime?: string;
    dataStoreEncryptionEnabled?: boolean;
    description?: string;
    discovered?: boolean;
    domainGroupMoid?: string;
    id?: string;
    localSnapshotRetentionCount?: number;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    organization?: inputs.GetHyperflexClusterBackupPolicyDeploymentOrganization;
    owners?: string[];
    parent?: inputs.GetHyperflexClusterBackupPolicyDeploymentParent;
    permissionResources?: inputs.GetHyperflexClusterBackupPolicyDeploymentPermissionResource[];
    policyMoid?: string;
    profileMoid?: string;
    replicationPairNamePrefix?: string;
    replicationSchedule?: inputs.GetHyperflexClusterBackupPolicyDeploymentReplicationSchedule;
    sharedScope?: string;
    snapshotRetentionCount?: number;
    sourceCluster?: inputs.GetHyperflexClusterBackupPolicyDeploymentSourceCluster;
    sourceDetached?: boolean;
    sourceRequestId?: string;
    sourceUuid?: string;
    tags?: inputs.GetHyperflexClusterBackupPolicyDeploymentTag[];
    targetDetached?: boolean;
    targetRequestId?: string;
    targetUuid?: string;
    versionContext?: inputs.GetHyperflexClusterBackupPolicyDeploymentVersionContext;
}

/**
 * A collection of values returned by getHyperflexClusterBackupPolicyDeployment.
 */
export interface GetHyperflexClusterBackupPolicyDeploymentResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetHyperflexClusterBackupPolicyDeploymentAncestor[];
    readonly backupDataStoreName?: string;
    readonly backupDataStoreSize?: number;
    readonly backupDataStoreSizeUnit?: string;
    readonly backupTarget?: outputs.GetHyperflexClusterBackupPolicyDeploymentBackupTarget;
    readonly classId?: string;
    readonly createTime?: string;
    readonly dataStoreEncryptionEnabled?: boolean;
    readonly description?: string;
    readonly discovered?: boolean;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly localSnapshotRetentionCount?: number;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly organization?: outputs.GetHyperflexClusterBackupPolicyDeploymentOrganization;
    readonly owners?: string[];
    readonly parent?: outputs.GetHyperflexClusterBackupPolicyDeploymentParent;
    readonly permissionResources?: outputs.GetHyperflexClusterBackupPolicyDeploymentPermissionResource[];
    readonly policyMoid?: string;
    readonly profileMoid?: string;
    readonly replicationPairNamePrefix?: string;
    readonly replicationSchedule?: outputs.GetHyperflexClusterBackupPolicyDeploymentReplicationSchedule;
    readonly results: outputs.GetHyperflexClusterBackupPolicyDeploymentResult[];
    readonly sharedScope?: string;
    readonly snapshotRetentionCount?: number;
    readonly sourceCluster?: outputs.GetHyperflexClusterBackupPolicyDeploymentSourceCluster;
    readonly sourceDetached?: boolean;
    readonly sourceRequestId?: string;
    readonly sourceUuid?: string;
    readonly tags?: outputs.GetHyperflexClusterBackupPolicyDeploymentTag[];
    readonly targetDetached?: boolean;
    readonly targetRequestId?: string;
    readonly targetUuid?: string;
    readonly versionContext?: outputs.GetHyperflexClusterBackupPolicyDeploymentVersionContext;
}
export function getHyperflexClusterBackupPolicyDeploymentOutput(args?: GetHyperflexClusterBackupPolicyDeploymentOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetHyperflexClusterBackupPolicyDeploymentResult> {
    return pulumi.output(args).apply((a: any) => getHyperflexClusterBackupPolicyDeployment(a, opts))
}

/**
 * A collection of arguments for invoking getHyperflexClusterBackupPolicyDeployment.
 */
export interface GetHyperflexClusterBackupPolicyDeploymentOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetHyperflexClusterBackupPolicyDeploymentAncestorArgs>[]>;
    backupDataStoreName?: pulumi.Input<string>;
    backupDataStoreSize?: pulumi.Input<number>;
    backupDataStoreSizeUnit?: pulumi.Input<string>;
    backupTarget?: pulumi.Input<inputs.GetHyperflexClusterBackupPolicyDeploymentBackupTargetArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    dataStoreEncryptionEnabled?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    discovered?: pulumi.Input<boolean>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    localSnapshotRetentionCount?: pulumi.Input<number>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.GetHyperflexClusterBackupPolicyDeploymentOrganizationArgs>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetHyperflexClusterBackupPolicyDeploymentParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetHyperflexClusterBackupPolicyDeploymentPermissionResourceArgs>[]>;
    policyMoid?: pulumi.Input<string>;
    profileMoid?: pulumi.Input<string>;
    replicationPairNamePrefix?: pulumi.Input<string>;
    replicationSchedule?: pulumi.Input<inputs.GetHyperflexClusterBackupPolicyDeploymentReplicationScheduleArgs>;
    sharedScope?: pulumi.Input<string>;
    snapshotRetentionCount?: pulumi.Input<number>;
    sourceCluster?: pulumi.Input<inputs.GetHyperflexClusterBackupPolicyDeploymentSourceClusterArgs>;
    sourceDetached?: pulumi.Input<boolean>;
    sourceRequestId?: pulumi.Input<string>;
    sourceUuid?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetHyperflexClusterBackupPolicyDeploymentTagArgs>[]>;
    targetDetached?: pulumi.Input<boolean>;
    targetRequestId?: pulumi.Input<string>;
    targetUuid?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetHyperflexClusterBackupPolicyDeploymentVersionContextArgs>;
}
