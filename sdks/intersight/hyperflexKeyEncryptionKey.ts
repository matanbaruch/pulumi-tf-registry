// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HyperflexKeyEncryptionKey extends pulumi.CustomResource {
    /**
     * Get an existing HyperflexKeyEncryptionKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HyperflexKeyEncryptionKeyState, opts?: pulumi.CustomResourceOptions): HyperflexKeyEncryptionKey {
        return new HyperflexKeyEncryptionKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'intersight:index/hyperflexKeyEncryptionKey:HyperflexKeyEncryptionKey';

    /**
     * Returns true if the given object is an instance of HyperflexKeyEncryptionKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HyperflexKeyEncryptionKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HyperflexKeyEncryptionKey.__pulumiType;
    }

    /**
     * The Account ID for this managed object.
     */
    public readonly accountMoid!: pulumi.Output<string>;
    public readonly additionalProperties!: pulumi.Output<string | undefined>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly ancestors!: pulumi.Output<outputs.HyperflexKeyEncryptionKeyAncestor[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    public readonly classId!: pulumi.Output<string | undefined>;
    /**
     * A reference to a hyperflexClusterProfile resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    public readonly clusterProfiles!: pulumi.Output<outputs.HyperflexKeyEncryptionKeyClusterProfile[]>;
    /**
     * The time when this managed object was created.
     */
    public readonly createTime!: pulumi.Output<string>;
    /**
     * The DomainGroup ID for this managed object.
     */
    public readonly domainGroupMoid!: pulumi.Output<string>;
    /**
     * This defines whether we need to operate in an account recovery scenario or not. If yes, then most of the parameters will
     * be populated from an internal MO. So, some of the input parameters MAY be ignored, if this value is set to true.
     */
    public readonly isAccountRecovery!: pulumi.Output<boolean | undefined>;
    /**
     * Indicates whether the value of the 'kek' property has been set.
     */
    public readonly isKekSet!: pulumi.Output<boolean>;
    /**
     * Indicates whether the value of the 'passphrase' property has been set.
     */
    public readonly isPassphraseSet!: pulumi.Output<boolean>;
    /**
     * Number of iterations we want the hash to be run.
     */
    public readonly iteration!: pulumi.Output<number | undefined>;
    /**
     * Key encryption key used to encrypt the DEK's on the HyperFlex cluster.
     */
    public readonly kek!: pulumi.Output<string | undefined>;
    /**
     * Resource id + time of creation used for retrieving the KEK.
     */
    public readonly keyId!: pulumi.Output<string | undefined>;
    /**
     * Last known Key encryption key state for this Key. * `NEW` - Key Encryption key is newly created. * `ACTIVE` - Key
     * Encryption key is deployed on active resource. * `INACTIVE` - Key Encryption key is inactive and not used. *
     * `INPROGRESS` - Key Encryption key is in a state where it was used on Intersight but did not receive confirmation from
     * platform of success/failure.
     */
    public readonly keyState!: pulumi.Output<string | undefined>;
    /**
     * The time when this managed object was last modified.
     */
    public readonly modTime!: pulumi.Output<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    public readonly moid!: pulumi.Output<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    public readonly objectType!: pulumi.Output<string | undefined>;
    public readonly owners!: pulumi.Output<string[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    public readonly parents!: pulumi.Output<outputs.HyperflexKeyEncryptionKeyParent[]>;
    /**
     * Initial passphrase for the encryption policy, password must contain a minimum of 12 characters, with at least 1
     * lowercase, 1 uppercase, 1 numeric.
     */
    public readonly passphrase!: pulumi.Output<string | undefined>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly permissionResources!: pulumi.Output<outputs.HyperflexKeyEncryptionKeyPermissionResource[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    public readonly resourceMos!: pulumi.Output<outputs.HyperflexKeyEncryptionKeyResourceMo[]>;
    /**
     * Resource type on which this key will be applied. * `CLUSTER` - Encryption is per HyperFlex cluster. * `DATASTORE` -
     * Encryption is per dataStore on the HyperFlex cluster. * `DRIVE` - Encryption is per drive on the HyperFlex cluster.
     */
    public readonly resourceType!: pulumi.Output<string | undefined>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    public readonly sharedScope!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.HyperflexKeyEncryptionKeyTag[]>;
    /**
     * Copy of Key encryption key, which is used for sending the key over to the remote device endpoint. It is not persisited
     * anywhere.
     */
    public readonly transitKek!: pulumi.Output<string | undefined>;
    /**
     * The versioning info for this managed object.
     */
    public readonly versionContexts!: pulumi.Output<outputs.HyperflexKeyEncryptionKeyVersionContext[]>;

    /**
     * Create a HyperflexKeyEncryptionKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: HyperflexKeyEncryptionKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HyperflexKeyEncryptionKeyArgs | HyperflexKeyEncryptionKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HyperflexKeyEncryptionKeyState | undefined;
            resourceInputs["accountMoid"] = state ? state.accountMoid : undefined;
            resourceInputs["additionalProperties"] = state ? state.additionalProperties : undefined;
            resourceInputs["ancestors"] = state ? state.ancestors : undefined;
            resourceInputs["classId"] = state ? state.classId : undefined;
            resourceInputs["clusterProfiles"] = state ? state.clusterProfiles : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["domainGroupMoid"] = state ? state.domainGroupMoid : undefined;
            resourceInputs["isAccountRecovery"] = state ? state.isAccountRecovery : undefined;
            resourceInputs["isKekSet"] = state ? state.isKekSet : undefined;
            resourceInputs["isPassphraseSet"] = state ? state.isPassphraseSet : undefined;
            resourceInputs["iteration"] = state ? state.iteration : undefined;
            resourceInputs["kek"] = state ? state.kek : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["keyState"] = state ? state.keyState : undefined;
            resourceInputs["modTime"] = state ? state.modTime : undefined;
            resourceInputs["moid"] = state ? state.moid : undefined;
            resourceInputs["objectType"] = state ? state.objectType : undefined;
            resourceInputs["owners"] = state ? state.owners : undefined;
            resourceInputs["parents"] = state ? state.parents : undefined;
            resourceInputs["passphrase"] = state ? state.passphrase : undefined;
            resourceInputs["permissionResources"] = state ? state.permissionResources : undefined;
            resourceInputs["resourceMos"] = state ? state.resourceMos : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["sharedScope"] = state ? state.sharedScope : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["transitKek"] = state ? state.transitKek : undefined;
            resourceInputs["versionContexts"] = state ? state.versionContexts : undefined;
        } else {
            const args = argsOrState as HyperflexKeyEncryptionKeyArgs | undefined;
            resourceInputs["accountMoid"] = args ? args.accountMoid : undefined;
            resourceInputs["additionalProperties"] = args ? args.additionalProperties : undefined;
            resourceInputs["ancestors"] = args ? args.ancestors : undefined;
            resourceInputs["classId"] = args ? args.classId : undefined;
            resourceInputs["clusterProfiles"] = args ? args.clusterProfiles : undefined;
            resourceInputs["createTime"] = args ? args.createTime : undefined;
            resourceInputs["domainGroupMoid"] = args ? args.domainGroupMoid : undefined;
            resourceInputs["isAccountRecovery"] = args ? args.isAccountRecovery : undefined;
            resourceInputs["isKekSet"] = args ? args.isKekSet : undefined;
            resourceInputs["isPassphraseSet"] = args ? args.isPassphraseSet : undefined;
            resourceInputs["iteration"] = args ? args.iteration : undefined;
            resourceInputs["kek"] = args ? args.kek : undefined;
            resourceInputs["keyId"] = args ? args.keyId : undefined;
            resourceInputs["keyState"] = args ? args.keyState : undefined;
            resourceInputs["modTime"] = args ? args.modTime : undefined;
            resourceInputs["moid"] = args ? args.moid : undefined;
            resourceInputs["objectType"] = args ? args.objectType : undefined;
            resourceInputs["owners"] = args ? args.owners : undefined;
            resourceInputs["parents"] = args ? args.parents : undefined;
            resourceInputs["passphrase"] = args ? args.passphrase : undefined;
            resourceInputs["permissionResources"] = args ? args.permissionResources : undefined;
            resourceInputs["resourceMos"] = args ? args.resourceMos : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["sharedScope"] = args ? args.sharedScope : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["transitKek"] = args ? args.transitKek : undefined;
            resourceInputs["versionContexts"] = args ? args.versionContexts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HyperflexKeyEncryptionKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HyperflexKeyEncryptionKey resources.
 */
export interface HyperflexKeyEncryptionKeyState {
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.HyperflexKeyEncryptionKeyAncestor>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    /**
     * A reference to a hyperflexClusterProfile resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    clusterProfiles?: pulumi.Input<pulumi.Input<inputs.HyperflexKeyEncryptionKeyClusterProfile>[]>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    /**
     * This defines whether we need to operate in an account recovery scenario or not. If yes, then most of the parameters will
     * be populated from an internal MO. So, some of the input parameters MAY be ignored, if this value is set to true.
     */
    isAccountRecovery?: pulumi.Input<boolean>;
    /**
     * Indicates whether the value of the 'kek' property has been set.
     */
    isKekSet?: pulumi.Input<boolean>;
    /**
     * Indicates whether the value of the 'passphrase' property has been set.
     */
    isPassphraseSet?: pulumi.Input<boolean>;
    /**
     * Number of iterations we want the hash to be run.
     */
    iteration?: pulumi.Input<number>;
    /**
     * Key encryption key used to encrypt the DEK's on the HyperFlex cluster.
     */
    kek?: pulumi.Input<string>;
    /**
     * Resource id + time of creation used for retrieving the KEK.
     */
    keyId?: pulumi.Input<string>;
    /**
     * Last known Key encryption key state for this Key. * `NEW` - Key Encryption key is newly created. * `ACTIVE` - Key
     * Encryption key is deployed on active resource. * `INACTIVE` - Key Encryption key is inactive and not used. *
     * `INPROGRESS` - Key Encryption key is in a state where it was used on Intersight but did not receive confirmation from
     * platform of success/failure.
     */
    keyState?: pulumi.Input<string>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.HyperflexKeyEncryptionKeyParent>[]>;
    /**
     * Initial passphrase for the encryption policy, password must contain a minimum of 12 characters, with at least 1
     * lowercase, 1 uppercase, 1 numeric.
     */
    passphrase?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.HyperflexKeyEncryptionKeyPermissionResource>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    resourceMos?: pulumi.Input<pulumi.Input<inputs.HyperflexKeyEncryptionKeyResourceMo>[]>;
    /**
     * Resource type on which this key will be applied. * `CLUSTER` - Encryption is per HyperFlex cluster. * `DATASTORE` -
     * Encryption is per dataStore on the HyperFlex cluster. * `DRIVE` - Encryption is per drive on the HyperFlex cluster.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.HyperflexKeyEncryptionKeyTag>[]>;
    /**
     * Copy of Key encryption key, which is used for sending the key over to the remote device endpoint. It is not persisited
     * anywhere.
     */
    transitKek?: pulumi.Input<string>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.HyperflexKeyEncryptionKeyVersionContext>[]>;
}

/**
 * The set of arguments for constructing a HyperflexKeyEncryptionKey resource.
 */
export interface HyperflexKeyEncryptionKeyArgs {
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.HyperflexKeyEncryptionKeyAncestor>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    /**
     * A reference to a hyperflexClusterProfile resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    clusterProfiles?: pulumi.Input<pulumi.Input<inputs.HyperflexKeyEncryptionKeyClusterProfile>[]>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    /**
     * This defines whether we need to operate in an account recovery scenario or not. If yes, then most of the parameters will
     * be populated from an internal MO. So, some of the input parameters MAY be ignored, if this value is set to true.
     */
    isAccountRecovery?: pulumi.Input<boolean>;
    /**
     * Indicates whether the value of the 'kek' property has been set.
     */
    isKekSet?: pulumi.Input<boolean>;
    /**
     * Indicates whether the value of the 'passphrase' property has been set.
     */
    isPassphraseSet?: pulumi.Input<boolean>;
    /**
     * Number of iterations we want the hash to be run.
     */
    iteration?: pulumi.Input<number>;
    /**
     * Key encryption key used to encrypt the DEK's on the HyperFlex cluster.
     */
    kek?: pulumi.Input<string>;
    /**
     * Resource id + time of creation used for retrieving the KEK.
     */
    keyId?: pulumi.Input<string>;
    /**
     * Last known Key encryption key state for this Key. * `NEW` - Key Encryption key is newly created. * `ACTIVE` - Key
     * Encryption key is deployed on active resource. * `INACTIVE` - Key Encryption key is inactive and not used. *
     * `INPROGRESS` - Key Encryption key is in a state where it was used on Intersight but did not receive confirmation from
     * platform of success/failure.
     */
    keyState?: pulumi.Input<string>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.HyperflexKeyEncryptionKeyParent>[]>;
    /**
     * Initial passphrase for the encryption policy, password must contain a minimum of 12 characters, with at least 1
     * lowercase, 1 uppercase, 1 numeric.
     */
    passphrase?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.HyperflexKeyEncryptionKeyPermissionResource>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    resourceMos?: pulumi.Input<pulumi.Input<inputs.HyperflexKeyEncryptionKeyResourceMo>[]>;
    /**
     * Resource type on which this key will be applied. * `CLUSTER` - Encryption is per HyperFlex cluster. * `DATASTORE` -
     * Encryption is per dataStore on the HyperFlex cluster. * `DRIVE` - Encryption is per drive on the HyperFlex cluster.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.HyperflexKeyEncryptionKeyTag>[]>;
    /**
     * Copy of Key encryption key, which is used for sending the key over to the remote device endpoint. It is not persisited
     * anywhere.
     */
    transitKek?: pulumi.Input<string>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.HyperflexKeyEncryptionKeyVersionContext>[]>;
}
