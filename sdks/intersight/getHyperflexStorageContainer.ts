// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getHyperflexStorageContainer(args?: GetHyperflexStorageContainerArgs, opts?: pulumi.InvokeOptions): Promise<GetHyperflexStorageContainerResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getHyperflexStorageContainer:getHyperflexStorageContainer", {
        "accessibilitySummary": args.accessibilitySummary,
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "cluster": args.cluster,
        "createTime": args.createTime,
        "createdTime": args.createdTime,
        "dataBlockSize": args.dataBlockSize,
        "domainGroupMoid": args.domainGroupMoid,
        "encryptionEnabled": args.encryptionEnabled,
        "hostMountStatuses": args.hostMountStatuses,
        "id": args.id,
        "inUse": args.inUse,
        "kind": args.kind,
        "lastAccessTime": args.lastAccessTime,
        "lastModifiedTime": args.lastModifiedTime,
        "modTime": args.modTime,
        "moid": args.moid,
        "mountStatus": args.mountStatus,
        "mountSummary": args.mountSummary,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "provisionedCapacity": args.provisionedCapacity,
        "provisionedVolumeCapacityUtilization": args.provisionedVolumeCapacityUtilization,
        "sharedScope": args.sharedScope,
        "storageUtilization": args.storageUtilization,
        "tags": args.tags,
        "type": args.type,
        "unCompressedUsedBytes": args.unCompressedUsedBytes,
        "uuid": args.uuid,
        "versionContext": args.versionContext,
        "volumeCount": args.volumeCount,
        "volumes": args.volumes,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getHyperflexStorageContainer.
 */
export interface GetHyperflexStorageContainerArgs {
    accessibilitySummary?: string;
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetHyperflexStorageContainerAncestor[];
    classId?: string;
    cluster?: inputs.GetHyperflexStorageContainerCluster;
    createTime?: string;
    createdTime?: string;
    dataBlockSize?: number;
    domainGroupMoid?: string;
    encryptionEnabled?: boolean;
    hostMountStatuses?: inputs.GetHyperflexStorageContainerHostMountStatus[];
    id?: string;
    inUse?: boolean;
    kind?: string;
    lastAccessTime?: string;
    lastModifiedTime?: string;
    modTime?: string;
    moid?: string;
    mountStatus?: string;
    mountSummary?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetHyperflexStorageContainerParent;
    permissionResources?: inputs.GetHyperflexStorageContainerPermissionResource[];
    provisionedCapacity?: number;
    provisionedVolumeCapacityUtilization?: number;
    sharedScope?: string;
    storageUtilization?: inputs.GetHyperflexStorageContainerStorageUtilization;
    tags?: inputs.GetHyperflexStorageContainerTag[];
    type?: string;
    unCompressedUsedBytes?: number;
    uuid?: string;
    versionContext?: inputs.GetHyperflexStorageContainerVersionContext;
    volumeCount?: number;
    volumes?: inputs.GetHyperflexStorageContainerVolume[];
}

/**
 * A collection of values returned by getHyperflexStorageContainer.
 */
export interface GetHyperflexStorageContainerResult {
    readonly accessibilitySummary?: string;
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetHyperflexStorageContainerAncestor[];
    readonly classId?: string;
    readonly cluster?: outputs.GetHyperflexStorageContainerCluster;
    readonly createTime?: string;
    readonly createdTime?: string;
    readonly dataBlockSize?: number;
    readonly domainGroupMoid?: string;
    readonly encryptionEnabled?: boolean;
    readonly hostMountStatuses?: outputs.GetHyperflexStorageContainerHostMountStatus[];
    readonly id: string;
    readonly inUse?: boolean;
    readonly kind?: string;
    readonly lastAccessTime?: string;
    readonly lastModifiedTime?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly mountStatus?: string;
    readonly mountSummary?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetHyperflexStorageContainerParent;
    readonly permissionResources?: outputs.GetHyperflexStorageContainerPermissionResource[];
    readonly provisionedCapacity?: number;
    readonly provisionedVolumeCapacityUtilization?: number;
    readonly results: outputs.GetHyperflexStorageContainerResult[];
    readonly sharedScope?: string;
    readonly storageUtilization?: outputs.GetHyperflexStorageContainerStorageUtilization;
    readonly tags?: outputs.GetHyperflexStorageContainerTag[];
    readonly type?: string;
    readonly unCompressedUsedBytes?: number;
    readonly uuid?: string;
    readonly versionContext?: outputs.GetHyperflexStorageContainerVersionContext;
    readonly volumeCount?: number;
    readonly volumes?: outputs.GetHyperflexStorageContainerVolume[];
}
export function getHyperflexStorageContainerOutput(args?: GetHyperflexStorageContainerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetHyperflexStorageContainerResult> {
    return pulumi.output(args).apply((a: any) => getHyperflexStorageContainer(a, opts))
}

/**
 * A collection of arguments for invoking getHyperflexStorageContainer.
 */
export interface GetHyperflexStorageContainerOutputArgs {
    accessibilitySummary?: pulumi.Input<string>;
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetHyperflexStorageContainerAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    cluster?: pulumi.Input<inputs.GetHyperflexStorageContainerClusterArgs>;
    createTime?: pulumi.Input<string>;
    createdTime?: pulumi.Input<string>;
    dataBlockSize?: pulumi.Input<number>;
    domainGroupMoid?: pulumi.Input<string>;
    encryptionEnabled?: pulumi.Input<boolean>;
    hostMountStatuses?: pulumi.Input<pulumi.Input<inputs.GetHyperflexStorageContainerHostMountStatusArgs>[]>;
    id?: pulumi.Input<string>;
    inUse?: pulumi.Input<boolean>;
    kind?: pulumi.Input<string>;
    lastAccessTime?: pulumi.Input<string>;
    lastModifiedTime?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    mountStatus?: pulumi.Input<string>;
    mountSummary?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetHyperflexStorageContainerParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetHyperflexStorageContainerPermissionResourceArgs>[]>;
    provisionedCapacity?: pulumi.Input<number>;
    provisionedVolumeCapacityUtilization?: pulumi.Input<number>;
    sharedScope?: pulumi.Input<string>;
    storageUtilization?: pulumi.Input<inputs.GetHyperflexStorageContainerStorageUtilizationArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetHyperflexStorageContainerTagArgs>[]>;
    type?: pulumi.Input<string>;
    unCompressedUsedBytes?: pulumi.Input<number>;
    uuid?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetHyperflexStorageContainerVersionContextArgs>;
    volumeCount?: pulumi.Input<number>;
    volumes?: pulumi.Input<pulumi.Input<inputs.GetHyperflexStorageContainerVolumeArgs>[]>;
}
