// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNetworkVpcMember(args?: GetNetworkVpcMemberArgs, opts?: pulumi.InvokeOptions): Promise<GetNetworkVpcMemberResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getNetworkVpcMember:getNetworkVpcMember", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "etherPortChannel": args.etherPortChannel,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "networkElement": args.networkElement,
        "objectType": args.objectType,
        "operationalState": args.operationalState,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "portChannel": args.portChannel,
        "portChannelId": args.portChannelId,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
        "vpcDomainId": args.vpcDomainId,
        "vpcMemberId": args.vpcMemberId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNetworkVpcMember.
 */
export interface GetNetworkVpcMemberArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetNetworkVpcMemberAncestor[];
    classId?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    etherPortChannel?: inputs.GetNetworkVpcMemberEtherPortChannel;
    id?: string;
    modTime?: string;
    moid?: string;
    networkElement?: inputs.GetNetworkVpcMemberNetworkElement;
    objectType?: string;
    operationalState?: string;
    owners?: string[];
    parent?: inputs.GetNetworkVpcMemberParent;
    permissionResources?: inputs.GetNetworkVpcMemberPermissionResource[];
    portChannel?: string;
    portChannelId?: number;
    registeredDevice?: inputs.GetNetworkVpcMemberRegisteredDevice;
    rn?: string;
    sharedScope?: string;
    tags?: inputs.GetNetworkVpcMemberTag[];
    versionContext?: inputs.GetNetworkVpcMemberVersionContext;
    vpcDomainId?: number;
    vpcMemberId?: number;
}

/**
 * A collection of values returned by getNetworkVpcMember.
 */
export interface GetNetworkVpcMemberResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetNetworkVpcMemberAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly etherPortChannel?: outputs.GetNetworkVpcMemberEtherPortChannel;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly networkElement?: outputs.GetNetworkVpcMemberNetworkElement;
    readonly objectType?: string;
    readonly operationalState?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetNetworkVpcMemberParent;
    readonly permissionResources?: outputs.GetNetworkVpcMemberPermissionResource[];
    readonly portChannel?: string;
    readonly portChannelId?: number;
    readonly registeredDevice?: outputs.GetNetworkVpcMemberRegisteredDevice;
    readonly results: outputs.GetNetworkVpcMemberResult[];
    readonly rn?: string;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetNetworkVpcMemberTag[];
    readonly versionContext?: outputs.GetNetworkVpcMemberVersionContext;
    readonly vpcDomainId?: number;
    readonly vpcMemberId?: number;
}
export function getNetworkVpcMemberOutput(args?: GetNetworkVpcMemberOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkVpcMemberResult> {
    return pulumi.output(args).apply((a: any) => getNetworkVpcMember(a, opts))
}

/**
 * A collection of arguments for invoking getNetworkVpcMember.
 */
export interface GetNetworkVpcMemberOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetNetworkVpcMemberAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    etherPortChannel?: pulumi.Input<inputs.GetNetworkVpcMemberEtherPortChannelArgs>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    networkElement?: pulumi.Input<inputs.GetNetworkVpcMemberNetworkElementArgs>;
    objectType?: pulumi.Input<string>;
    operationalState?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetNetworkVpcMemberParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetNetworkVpcMemberPermissionResourceArgs>[]>;
    portChannel?: pulumi.Input<string>;
    portChannelId?: pulumi.Input<number>;
    registeredDevice?: pulumi.Input<inputs.GetNetworkVpcMemberRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetNetworkVpcMemberTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetNetworkVpcMemberVersionContextArgs>;
    vpcDomainId?: pulumi.Input<number>;
    vpcMemberId?: pulumi.Input<number>;
}
