// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getApplianceUpgrade(args?: GetApplianceUpgradeArgs, opts?: pulumi.InvokeOptions): Promise<GetApplianceUpgradeResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getApplianceUpgrade:getApplianceUpgrade", {
        "account": args.account,
        "accountMoid": args.accountMoid,
        "active": args.active,
        "additionalProperties": args.additionalProperties,
        "allNodesPingable": args.allNodesPingable,
        "ancestors": args.ancestors,
        "autoCreated": args.autoCreated,
        "classId": args.classId,
        "completedPhases": args.completedPhases,
        "createTime": args.createTime,
        "currentPhase": args.currentPhase,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "elapsedTime": args.elapsedTime,
        "endTime": args.endTime,
        "errorCode": args.errorCode,
        "fingerprint": args.fingerprint,
        "id": args.id,
        "imageBundle": args.imageBundle,
        "isRollingBack": args.isRollingBack,
        "isUserTriggered": args.isUserTriggered,
        "messages": args.messages,
        "modTime": args.modTime,
        "moid": args.moid,
        "nodeInfos": args.nodeInfos,
        "nrVersion": args.nrVersion,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "requires": args.requires,
        "rollbackNeeded": args.rollbackNeeded,
        "rollbackPhases": args.rollbackPhases,
        "rollbackStatus": args.rollbackStatus,
        "services": args.services,
        "sharedScope": args.sharedScope,
        "startTime": args.startTime,
        "status": args.status,
        "tags": args.tags,
        "totalNodes": args.totalNodes,
        "totalPhases": args.totalPhases,
        "uiPackages": args.uiPackages,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getApplianceUpgrade.
 */
export interface GetApplianceUpgradeArgs {
    account?: inputs.GetApplianceUpgradeAccount;
    accountMoid?: string;
    active?: boolean;
    additionalProperties?: string;
    allNodesPingable?: boolean;
    ancestors?: inputs.GetApplianceUpgradeAncestor[];
    autoCreated?: boolean;
    classId?: string;
    completedPhases?: inputs.GetApplianceUpgradeCompletedPhase[];
    createTime?: string;
    currentPhase?: inputs.GetApplianceUpgradeCurrentPhase;
    description?: string;
    domainGroupMoid?: string;
    elapsedTime?: number;
    endTime?: string;
    errorCode?: number;
    fingerprint?: string;
    id?: string;
    imageBundle?: inputs.GetApplianceUpgradeImageBundle;
    isRollingBack?: boolean;
    isUserTriggered?: boolean;
    messages?: string[];
    modTime?: string;
    moid?: string;
    nodeInfos?: inputs.GetApplianceUpgradeNodeInfo[];
    nrVersion?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetApplianceUpgradeParent;
    permissionResources?: inputs.GetApplianceUpgradePermissionResource[];
    requires?: inputs.GetApplianceUpgradeRequires;
    rollbackNeeded?: boolean;
    rollbackPhases?: inputs.GetApplianceUpgradeRollbackPhase[];
    rollbackStatus?: string;
    services?: string[];
    sharedScope?: string;
    startTime?: string;
    status?: string;
    tags?: inputs.GetApplianceUpgradeTag[];
    totalNodes?: number;
    totalPhases?: number;
    uiPackages?: string[];
    versionContext?: inputs.GetApplianceUpgradeVersionContext;
}

/**
 * A collection of values returned by getApplianceUpgrade.
 */
export interface GetApplianceUpgradeResult {
    readonly account?: outputs.GetApplianceUpgradeAccount;
    readonly accountMoid?: string;
    readonly active?: boolean;
    readonly additionalProperties?: string;
    readonly allNodesPingable?: boolean;
    readonly ancestors?: outputs.GetApplianceUpgradeAncestor[];
    readonly autoCreated?: boolean;
    readonly classId?: string;
    readonly completedPhases?: outputs.GetApplianceUpgradeCompletedPhase[];
    readonly createTime?: string;
    readonly currentPhase?: outputs.GetApplianceUpgradeCurrentPhase;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly elapsedTime?: number;
    readonly endTime?: string;
    readonly errorCode?: number;
    readonly fingerprint?: string;
    readonly id: string;
    readonly imageBundle?: outputs.GetApplianceUpgradeImageBundle;
    readonly isRollingBack?: boolean;
    readonly isUserTriggered?: boolean;
    readonly messages?: string[];
    readonly modTime?: string;
    readonly moid?: string;
    readonly nodeInfos?: outputs.GetApplianceUpgradeNodeInfo[];
    readonly nrVersion?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetApplianceUpgradeParent;
    readonly permissionResources?: outputs.GetApplianceUpgradePermissionResource[];
    readonly requires?: outputs.GetApplianceUpgradeRequires;
    readonly results: outputs.GetApplianceUpgradeResult[];
    readonly rollbackNeeded?: boolean;
    readonly rollbackPhases?: outputs.GetApplianceUpgradeRollbackPhase[];
    readonly rollbackStatus?: string;
    readonly services?: string[];
    readonly sharedScope?: string;
    readonly startTime?: string;
    readonly status?: string;
    readonly tags?: outputs.GetApplianceUpgradeTag[];
    readonly totalNodes?: number;
    readonly totalPhases?: number;
    readonly uiPackages?: string[];
    readonly versionContext?: outputs.GetApplianceUpgradeVersionContext;
}
export function getApplianceUpgradeOutput(args?: GetApplianceUpgradeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetApplianceUpgradeResult> {
    return pulumi.output(args).apply((a: any) => getApplianceUpgrade(a, opts))
}

/**
 * A collection of arguments for invoking getApplianceUpgrade.
 */
export interface GetApplianceUpgradeOutputArgs {
    account?: pulumi.Input<inputs.GetApplianceUpgradeAccountArgs>;
    accountMoid?: pulumi.Input<string>;
    active?: pulumi.Input<boolean>;
    additionalProperties?: pulumi.Input<string>;
    allNodesPingable?: pulumi.Input<boolean>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetApplianceUpgradeAncestorArgs>[]>;
    autoCreated?: pulumi.Input<boolean>;
    classId?: pulumi.Input<string>;
    completedPhases?: pulumi.Input<pulumi.Input<inputs.GetApplianceUpgradeCompletedPhaseArgs>[]>;
    createTime?: pulumi.Input<string>;
    currentPhase?: pulumi.Input<inputs.GetApplianceUpgradeCurrentPhaseArgs>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    elapsedTime?: pulumi.Input<number>;
    endTime?: pulumi.Input<string>;
    errorCode?: pulumi.Input<number>;
    fingerprint?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    imageBundle?: pulumi.Input<inputs.GetApplianceUpgradeImageBundleArgs>;
    isRollingBack?: pulumi.Input<boolean>;
    isUserTriggered?: pulumi.Input<boolean>;
    messages?: pulumi.Input<pulumi.Input<string>[]>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    nodeInfos?: pulumi.Input<pulumi.Input<inputs.GetApplianceUpgradeNodeInfoArgs>[]>;
    nrVersion?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetApplianceUpgradeParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetApplianceUpgradePermissionResourceArgs>[]>;
    requires?: pulumi.Input<inputs.GetApplianceUpgradeRequiresArgs>;
    rollbackNeeded?: pulumi.Input<boolean>;
    rollbackPhases?: pulumi.Input<pulumi.Input<inputs.GetApplianceUpgradeRollbackPhaseArgs>[]>;
    rollbackStatus?: pulumi.Input<string>;
    services?: pulumi.Input<pulumi.Input<string>[]>;
    sharedScope?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetApplianceUpgradeTagArgs>[]>;
    totalNodes?: pulumi.Input<number>;
    totalPhases?: pulumi.Input<number>;
    uiPackages?: pulumi.Input<pulumi.Input<string>[]>;
    versionContext?: pulumi.Input<inputs.GetApplianceUpgradeVersionContextArgs>;
}
