// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVnicIscsiBootPolicyInventory(args?: GetVnicIscsiBootPolicyInventoryArgs, opts?: pulumi.InvokeOptions): Promise<GetVnicIscsiBootPolicyInventoryResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getVnicIscsiBootPolicyInventory:getVnicIscsiBootPolicyInventory", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "autoTargetvendorName": args.autoTargetvendorName,
        "chap": args.chap,
        "classId": args.classId,
        "createTime": args.createTime,
        "description": args.description,
        "deviceMoId": args.deviceMoId,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "initiatorIpPool": args.initiatorIpPool,
        "initiatorIpSource": args.initiatorIpSource,
        "initiatorStaticIpV4Address": args.initiatorStaticIpV4Address,
        "initiatorStaticIpV4Config": args.initiatorStaticIpV4Config,
        "iscsiAdapterPolicy": args.iscsiAdapterPolicy,
        "modTime": args.modTime,
        "moid": args.moid,
        "mutualChap": args.mutualChap,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "primaryTargetPolicy": args.primaryTargetPolicy,
        "secondaryTargetPolicy": args.secondaryTargetPolicy,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "targetMo": args.targetMo,
        "targetSourceType": args.targetSourceType,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVnicIscsiBootPolicyInventory.
 */
export interface GetVnicIscsiBootPolicyInventoryArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetVnicIscsiBootPolicyInventoryAncestor[];
    autoTargetvendorName?: string;
    chap?: inputs.GetVnicIscsiBootPolicyInventoryChap;
    classId?: string;
    createTime?: string;
    description?: string;
    deviceMoId?: string;
    domainGroupMoid?: string;
    id?: string;
    initiatorIpPool?: inputs.GetVnicIscsiBootPolicyInventoryInitiatorIpPool;
    initiatorIpSource?: string;
    initiatorStaticIpV4Address?: string;
    initiatorStaticIpV4Config?: inputs.GetVnicIscsiBootPolicyInventoryInitiatorStaticIpV4Config;
    iscsiAdapterPolicy?: inputs.GetVnicIscsiBootPolicyInventoryIscsiAdapterPolicy;
    modTime?: string;
    moid?: string;
    mutualChap?: inputs.GetVnicIscsiBootPolicyInventoryMutualChap;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetVnicIscsiBootPolicyInventoryParent;
    permissionResources?: inputs.GetVnicIscsiBootPolicyInventoryPermissionResource[];
    primaryTargetPolicy?: inputs.GetVnicIscsiBootPolicyInventoryPrimaryTargetPolicy;
    secondaryTargetPolicy?: inputs.GetVnicIscsiBootPolicyInventorySecondaryTargetPolicy;
    sharedScope?: string;
    tags?: inputs.GetVnicIscsiBootPolicyInventoryTag[];
    targetMo?: inputs.GetVnicIscsiBootPolicyInventoryTargetMo;
    targetSourceType?: string;
    versionContext?: inputs.GetVnicIscsiBootPolicyInventoryVersionContext;
}

/**
 * A collection of values returned by getVnicIscsiBootPolicyInventory.
 */
export interface GetVnicIscsiBootPolicyInventoryResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetVnicIscsiBootPolicyInventoryAncestor[];
    readonly autoTargetvendorName?: string;
    readonly chap?: outputs.GetVnicIscsiBootPolicyInventoryChap;
    readonly classId?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly deviceMoId?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly initiatorIpPool?: outputs.GetVnicIscsiBootPolicyInventoryInitiatorIpPool;
    readonly initiatorIpSource?: string;
    readonly initiatorStaticIpV4Address?: string;
    readonly initiatorStaticIpV4Config?: outputs.GetVnicIscsiBootPolicyInventoryInitiatorStaticIpV4Config;
    readonly iscsiAdapterPolicy?: outputs.GetVnicIscsiBootPolicyInventoryIscsiAdapterPolicy;
    readonly modTime?: string;
    readonly moid?: string;
    readonly mutualChap?: outputs.GetVnicIscsiBootPolicyInventoryMutualChap;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetVnicIscsiBootPolicyInventoryParent;
    readonly permissionResources?: outputs.GetVnicIscsiBootPolicyInventoryPermissionResource[];
    readonly primaryTargetPolicy?: outputs.GetVnicIscsiBootPolicyInventoryPrimaryTargetPolicy;
    readonly results: outputs.GetVnicIscsiBootPolicyInventoryResult[];
    readonly secondaryTargetPolicy?: outputs.GetVnicIscsiBootPolicyInventorySecondaryTargetPolicy;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetVnicIscsiBootPolicyInventoryTag[];
    readonly targetMo?: outputs.GetVnicIscsiBootPolicyInventoryTargetMo;
    readonly targetSourceType?: string;
    readonly versionContext?: outputs.GetVnicIscsiBootPolicyInventoryVersionContext;
}
export function getVnicIscsiBootPolicyInventoryOutput(args?: GetVnicIscsiBootPolicyInventoryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVnicIscsiBootPolicyInventoryResult> {
    return pulumi.output(args).apply((a: any) => getVnicIscsiBootPolicyInventory(a, opts))
}

/**
 * A collection of arguments for invoking getVnicIscsiBootPolicyInventory.
 */
export interface GetVnicIscsiBootPolicyInventoryOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetVnicIscsiBootPolicyInventoryAncestorArgs>[]>;
    autoTargetvendorName?: pulumi.Input<string>;
    chap?: pulumi.Input<inputs.GetVnicIscsiBootPolicyInventoryChapArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    initiatorIpPool?: pulumi.Input<inputs.GetVnicIscsiBootPolicyInventoryInitiatorIpPoolArgs>;
    initiatorIpSource?: pulumi.Input<string>;
    initiatorStaticIpV4Address?: pulumi.Input<string>;
    initiatorStaticIpV4Config?: pulumi.Input<inputs.GetVnicIscsiBootPolicyInventoryInitiatorStaticIpV4ConfigArgs>;
    iscsiAdapterPolicy?: pulumi.Input<inputs.GetVnicIscsiBootPolicyInventoryIscsiAdapterPolicyArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    mutualChap?: pulumi.Input<inputs.GetVnicIscsiBootPolicyInventoryMutualChapArgs>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetVnicIscsiBootPolicyInventoryParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetVnicIscsiBootPolicyInventoryPermissionResourceArgs>[]>;
    primaryTargetPolicy?: pulumi.Input<inputs.GetVnicIscsiBootPolicyInventoryPrimaryTargetPolicyArgs>;
    secondaryTargetPolicy?: pulumi.Input<inputs.GetVnicIscsiBootPolicyInventorySecondaryTargetPolicyArgs>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetVnicIscsiBootPolicyInventoryTagArgs>[]>;
    targetMo?: pulumi.Input<inputs.GetVnicIscsiBootPolicyInventoryTargetMoArgs>;
    targetSourceType?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetVnicIscsiBootPolicyInventoryVersionContextArgs>;
}
