// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSoftwareUcsdBundleDistributable(args?: GetSoftwareUcsdBundleDistributableArgs, opts?: pulumi.InvokeOptions): Promise<GetSoftwareUcsdBundleDistributableResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getSoftwareUcsdBundleDistributable:getSoftwareUcsdBundleDistributable", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "bundleType": args.bundleType,
        "catalog": args.catalog,
        "classId": args.classId,
        "componentMetas": args.componentMetas,
        "createTime": args.createTime,
        "description": args.description,
        "distributableMetas": args.distributableMetas,
        "domainGroupMoid": args.domainGroupMoid,
        "downloadCount": args.downloadCount,
        "featureSource": args.featureSource,
        "guid": args.guid,
        "id": args.id,
        "imageType": args.imageType,
        "images": args.images,
        "importAction": args.importAction,
        "importState": args.importState,
        "importedTime": args.importedTime,
        "lastAccessTime": args.lastAccessTime,
        "md5eTag": args.md5eTag,
        "md5sum": args.md5sum,
        "mdfid": args.mdfid,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "name": args.name,
        "nrSource": args.nrSource,
        "nrVersion": args.nrVersion,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "platformType": args.platformType,
        "recommendedBuild": args.recommendedBuild,
        "release": args.release,
        "releaseDate": args.releaseDate,
        "releaseNotesUrl": args.releaseNotesUrl,
        "sha512sum": args.sha512sum,
        "sharedScope": args.sharedScope,
        "size": args.size,
        "softwareAdvisoryUrl": args.softwareAdvisoryUrl,
        "softwareTypeId": args.softwareTypeId,
        "supportedModels": args.supportedModels,
        "tags": args.tags,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSoftwareUcsdBundleDistributable.
 */
export interface GetSoftwareUcsdBundleDistributableArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetSoftwareUcsdBundleDistributableAncestor[];
    bundleType?: string;
    catalog?: inputs.GetSoftwareUcsdBundleDistributableCatalog;
    classId?: string;
    componentMetas?: inputs.GetSoftwareUcsdBundleDistributableComponentMeta[];
    createTime?: string;
    description?: string;
    distributableMetas?: inputs.GetSoftwareUcsdBundleDistributableDistributableMeta[];
    domainGroupMoid?: string;
    downloadCount?: number;
    featureSource?: string;
    guid?: string;
    id?: string;
    imageType?: string;
    images?: inputs.GetSoftwareUcsdBundleDistributableImage[];
    importAction?: string;
    importState?: string;
    importedTime?: string;
    lastAccessTime?: string;
    md5eTag?: string;
    md5sum?: string;
    mdfid?: string;
    modTime?: string;
    model?: string;
    moid?: string;
    name?: string;
    nrSource?: inputs.GetSoftwareUcsdBundleDistributableNrSource;
    nrVersion?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetSoftwareUcsdBundleDistributableParent;
    permissionResources?: inputs.GetSoftwareUcsdBundleDistributablePermissionResource[];
    platformType?: string;
    recommendedBuild?: string;
    release?: inputs.GetSoftwareUcsdBundleDistributableRelease;
    releaseDate?: string;
    releaseNotesUrl?: string;
    sha512sum?: string;
    sharedScope?: string;
    size?: number;
    softwareAdvisoryUrl?: string;
    softwareTypeId?: string;
    supportedModels?: string[];
    tags?: inputs.GetSoftwareUcsdBundleDistributableTag[];
    vendor?: string;
    versionContext?: inputs.GetSoftwareUcsdBundleDistributableVersionContext;
}

/**
 * A collection of values returned by getSoftwareUcsdBundleDistributable.
 */
export interface GetSoftwareUcsdBundleDistributableResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetSoftwareUcsdBundleDistributableAncestor[];
    readonly bundleType?: string;
    readonly catalog?: outputs.GetSoftwareUcsdBundleDistributableCatalog;
    readonly classId?: string;
    readonly componentMetas?: outputs.GetSoftwareUcsdBundleDistributableComponentMeta[];
    readonly createTime?: string;
    readonly description?: string;
    readonly distributableMetas?: outputs.GetSoftwareUcsdBundleDistributableDistributableMeta[];
    readonly domainGroupMoid?: string;
    readonly downloadCount?: number;
    readonly featureSource?: string;
    readonly guid?: string;
    readonly id: string;
    readonly imageType?: string;
    readonly images?: outputs.GetSoftwareUcsdBundleDistributableImage[];
    readonly importAction?: string;
    readonly importState?: string;
    readonly importedTime?: string;
    readonly lastAccessTime?: string;
    readonly md5eTag?: string;
    readonly md5sum?: string;
    readonly mdfid?: string;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nrSource?: outputs.GetSoftwareUcsdBundleDistributableNrSource;
    readonly nrVersion?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetSoftwareUcsdBundleDistributableParent;
    readonly permissionResources?: outputs.GetSoftwareUcsdBundleDistributablePermissionResource[];
    readonly platformType?: string;
    readonly recommendedBuild?: string;
    readonly release?: outputs.GetSoftwareUcsdBundleDistributableRelease;
    readonly releaseDate?: string;
    readonly releaseNotesUrl?: string;
    readonly results: outputs.GetSoftwareUcsdBundleDistributableResult[];
    readonly sha512sum?: string;
    readonly sharedScope?: string;
    readonly size?: number;
    readonly softwareAdvisoryUrl?: string;
    readonly softwareTypeId?: string;
    readonly supportedModels?: string[];
    readonly tags?: outputs.GetSoftwareUcsdBundleDistributableTag[];
    readonly vendor?: string;
    readonly versionContext?: outputs.GetSoftwareUcsdBundleDistributableVersionContext;
}
export function getSoftwareUcsdBundleDistributableOutput(args?: GetSoftwareUcsdBundleDistributableOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSoftwareUcsdBundleDistributableResult> {
    return pulumi.output(args).apply((a: any) => getSoftwareUcsdBundleDistributable(a, opts))
}

/**
 * A collection of arguments for invoking getSoftwareUcsdBundleDistributable.
 */
export interface GetSoftwareUcsdBundleDistributableOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetSoftwareUcsdBundleDistributableAncestorArgs>[]>;
    bundleType?: pulumi.Input<string>;
    catalog?: pulumi.Input<inputs.GetSoftwareUcsdBundleDistributableCatalogArgs>;
    classId?: pulumi.Input<string>;
    componentMetas?: pulumi.Input<pulumi.Input<inputs.GetSoftwareUcsdBundleDistributableComponentMetaArgs>[]>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    distributableMetas?: pulumi.Input<pulumi.Input<inputs.GetSoftwareUcsdBundleDistributableDistributableMetaArgs>[]>;
    domainGroupMoid?: pulumi.Input<string>;
    downloadCount?: pulumi.Input<number>;
    featureSource?: pulumi.Input<string>;
    guid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    imageType?: pulumi.Input<string>;
    images?: pulumi.Input<pulumi.Input<inputs.GetSoftwareUcsdBundleDistributableImageArgs>[]>;
    importAction?: pulumi.Input<string>;
    importState?: pulumi.Input<string>;
    importedTime?: pulumi.Input<string>;
    lastAccessTime?: pulumi.Input<string>;
    md5eTag?: pulumi.Input<string>;
    md5sum?: pulumi.Input<string>;
    mdfid?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nrSource?: pulumi.Input<inputs.GetSoftwareUcsdBundleDistributableNrSourceArgs>;
    nrVersion?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetSoftwareUcsdBundleDistributableParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetSoftwareUcsdBundleDistributablePermissionResourceArgs>[]>;
    platformType?: pulumi.Input<string>;
    recommendedBuild?: pulumi.Input<string>;
    release?: pulumi.Input<inputs.GetSoftwareUcsdBundleDistributableReleaseArgs>;
    releaseDate?: pulumi.Input<string>;
    releaseNotesUrl?: pulumi.Input<string>;
    sha512sum?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    softwareAdvisoryUrl?: pulumi.Input<string>;
    softwareTypeId?: pulumi.Input<string>;
    supportedModels?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetSoftwareUcsdBundleDistributableTagArgs>[]>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetSoftwareUcsdBundleDistributableVersionContextArgs>;
}
