// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIamCertificateRequest(args?: GetIamCertificateRequestArgs, opts?: pulumi.InvokeOptions): Promise<GetIamCertificateRequestResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getIamCertificateRequest:getIamCertificateRequest", {
        "account": args.account,
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "certificate": args.certificate,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "emailAddress": args.emailAddress,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "privateKeySpec": args.privateKeySpec,
        "request": args.request,
        "selfSigned": args.selfSigned,
        "sharedScope": args.sharedScope,
        "subject": args.subject,
        "subjectAlternateName": args.subjectAlternateName,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIamCertificateRequest.
 */
export interface GetIamCertificateRequestArgs {
    account?: inputs.GetIamCertificateRequestAccount;
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetIamCertificateRequestAncestor[];
    certificate?: inputs.GetIamCertificateRequestCertificate;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    emailAddress?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetIamCertificateRequestParent;
    permissionResources?: inputs.GetIamCertificateRequestPermissionResource[];
    privateKeySpec?: inputs.GetIamCertificateRequestPrivateKeySpec;
    request?: string;
    selfSigned?: boolean;
    sharedScope?: string;
    subject?: inputs.GetIamCertificateRequestSubject;
    subjectAlternateName?: inputs.GetIamCertificateRequestSubjectAlternateName;
    tags?: inputs.GetIamCertificateRequestTag[];
    versionContext?: inputs.GetIamCertificateRequestVersionContext;
}

/**
 * A collection of values returned by getIamCertificateRequest.
 */
export interface GetIamCertificateRequestResult {
    readonly account?: outputs.GetIamCertificateRequestAccount;
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetIamCertificateRequestAncestor[];
    readonly certificate?: outputs.GetIamCertificateRequestCertificate;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly emailAddress?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetIamCertificateRequestParent;
    readonly permissionResources?: outputs.GetIamCertificateRequestPermissionResource[];
    readonly privateKeySpec?: outputs.GetIamCertificateRequestPrivateKeySpec;
    readonly request?: string;
    readonly results: outputs.GetIamCertificateRequestResult[];
    readonly selfSigned?: boolean;
    readonly sharedScope?: string;
    readonly subject?: outputs.GetIamCertificateRequestSubject;
    readonly subjectAlternateName?: outputs.GetIamCertificateRequestSubjectAlternateName;
    readonly tags?: outputs.GetIamCertificateRequestTag[];
    readonly versionContext?: outputs.GetIamCertificateRequestVersionContext;
}
export function getIamCertificateRequestOutput(args?: GetIamCertificateRequestOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIamCertificateRequestResult> {
    return pulumi.output(args).apply((a: any) => getIamCertificateRequest(a, opts))
}

/**
 * A collection of arguments for invoking getIamCertificateRequest.
 */
export interface GetIamCertificateRequestOutputArgs {
    account?: pulumi.Input<inputs.GetIamCertificateRequestAccountArgs>;
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetIamCertificateRequestAncestorArgs>[]>;
    certificate?: pulumi.Input<inputs.GetIamCertificateRequestCertificateArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    emailAddress?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetIamCertificateRequestParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetIamCertificateRequestPermissionResourceArgs>[]>;
    privateKeySpec?: pulumi.Input<inputs.GetIamCertificateRequestPrivateKeySpecArgs>;
    request?: pulumi.Input<string>;
    selfSigned?: pulumi.Input<boolean>;
    sharedScope?: pulumi.Input<string>;
    subject?: pulumi.Input<inputs.GetIamCertificateRequestSubjectArgs>;
    subjectAlternateName?: pulumi.Input<inputs.GetIamCertificateRequestSubjectAlternateNameArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetIamCertificateRequestTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetIamCertificateRequestVersionContextArgs>;
}
