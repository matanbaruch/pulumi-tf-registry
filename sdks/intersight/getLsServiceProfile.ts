// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLsServiceProfile(args?: GetLsServiceProfileArgs, opts?: pulumi.InvokeOptions): Promise<GetLsServiceProfileResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getLsServiceProfile:getLsServiceProfile", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "assignState": args.assignState,
        "assocState": args.assocState,
        "associatedServer": args.associatedServer,
        "classId": args.classId,
        "configState": args.configState,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "operState": args.operState,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLsServiceProfile.
 */
export interface GetLsServiceProfileArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetLsServiceProfileAncestor[];
    assignState?: string;
    assocState?: string;
    associatedServer?: string;
    classId?: string;
    configState?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    id?: string;
    inventoryDeviceInfo?: inputs.GetLsServiceProfileInventoryDeviceInfo;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    operState?: string;
    owners?: string[];
    parent?: inputs.GetLsServiceProfileParent;
    permissionResources?: inputs.GetLsServiceProfilePermissionResource[];
    registeredDevice?: inputs.GetLsServiceProfileRegisteredDevice;
    rn?: string;
    sharedScope?: string;
    tags?: inputs.GetLsServiceProfileTag[];
    versionContext?: inputs.GetLsServiceProfileVersionContext;
}

/**
 * A collection of values returned by getLsServiceProfile.
 */
export interface GetLsServiceProfileResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetLsServiceProfileAncestor[];
    readonly assignState?: string;
    readonly assocState?: string;
    readonly associatedServer?: string;
    readonly classId?: string;
    readonly configState?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetLsServiceProfileInventoryDeviceInfo;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly operState?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetLsServiceProfileParent;
    readonly permissionResources?: outputs.GetLsServiceProfilePermissionResource[];
    readonly registeredDevice?: outputs.GetLsServiceProfileRegisteredDevice;
    readonly results: outputs.GetLsServiceProfileResult[];
    readonly rn?: string;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetLsServiceProfileTag[];
    readonly versionContext?: outputs.GetLsServiceProfileVersionContext;
}
export function getLsServiceProfileOutput(args?: GetLsServiceProfileOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLsServiceProfileResult> {
    return pulumi.output(args).apply((a: any) => getLsServiceProfile(a, opts))
}

/**
 * A collection of arguments for invoking getLsServiceProfile.
 */
export interface GetLsServiceProfileOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetLsServiceProfileAncestorArgs>[]>;
    assignState?: pulumi.Input<string>;
    assocState?: pulumi.Input<string>;
    associatedServer?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    configState?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetLsServiceProfileInventoryDeviceInfoArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operState?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetLsServiceProfileParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetLsServiceProfilePermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetLsServiceProfileRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetLsServiceProfileTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetLsServiceProfileVersionContextArgs>;
}
