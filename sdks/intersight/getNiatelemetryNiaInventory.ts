// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNiatelemetryNiaInventory(args?: GetNiatelemetryNiaInventoryArgs, opts?: pulumi.InvokeOptions): Promise<GetNiatelemetryNiaInventoryResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getNiatelemetryNiaInventory:getNiatelemetryNiaInventory", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "controllerIpAddress": args.controllerIpAddress,
        "cpu": args.cpu,
        "crashResetLogs": args.crashResetLogs,
        "createTime": args.createTime,
        "customerDeviceConnector": args.customerDeviceConnector,
        "dcnmFanDetails": args.dcnmFanDetails,
        "dcnmLicenseState": args.dcnmLicenseState,
        "deviceDiscovery": args.deviceDiscovery,
        "deviceHealth": args.deviceHealth,
        "deviceId": args.deviceId,
        "deviceName": args.deviceName,
        "deviceType": args.deviceType,
        "deviceUpTime": args.deviceUpTime,
        "disk": args.disk,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "fabricName": args.fabricName,
        "fexCount": args.fexCount,
        "id": args.id,
        "infraWiNodeCount": args.infraWiNodeCount,
        "interfaces": args.interfaces,
        "ipAddress": args.ipAddress,
        "isVirtualNode": args.isVirtualNode,
        "lastRebootTime": args.lastRebootTime,
        "lastResetReason": args.lastResetReason,
        "licenseState": args.licenseState,
        "licenseType": args.licenseType,
        "logInTime": args.logInTime,
        "logOutTime": args.logOutTime,
        "macSecCount": args.macSecCount,
        "macSecFabCount": args.macSecFabCount,
        "macsecTotalCount": args.macsecTotalCount,
        "memory": args.memory,
        "modTime": args.modTime,
        "moid": args.moid,
        "nexusCloudMembershipStatus": args.nexusCloudMembershipStatus,
        "nodeId": args.nodeId,
        "nrVersion": args.nrVersion,
        "nxosBgpEvpn": args.nxosBgpEvpn,
        "nxosBgpMvpn": args.nxosBgpMvpn,
        "nxosBootflashDetails": args.nxosBootflashDetails,
        "nxosDciInterfaceStatus": args.nxosDciInterfaceStatus,
        "nxosInterfaceBrief": args.nxosInterfaceBrief,
        "nxosNveInterfaceStatus": args.nxosNveInterfaceStatus,
        "nxosNvePacketCounters": args.nxosNvePacketCounters,
        "nxosNveVni": args.nxosNveVni,
        "nxosOspfNeighbors": args.nxosOspfNeighbors,
        "nxosPimNeighbors": args.nxosPimNeighbors,
        "nxosTelnet": args.nxosTelnet,
        "nxosTotalRoutes": args.nxosTotalRoutes,
        "nxosVtp": args.nxosVtp,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "recordType": args.recordType,
        "recordVersion": args.recordVersion,
        "registeredDevice": args.registeredDevice,
        "routePrefixCount": args.routePrefixCount,
        "routePrefixV4Count": args.routePrefixV4Count,
        "routePrefixV6Count": args.routePrefixV6Count,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "siteName": args.siteName,
        "siteuuid": args.siteuuid,
        "smartAccountId": args.smartAccountId,
        "softwareDownload": args.softwareDownload,
        "systemUpTime": args.systemUpTime,
        "tags": args.tags,
        "versionContext": args.versionContext,
        "vniStatuses": args.vniStatuses,
        "vpcPeerIpAddress": args.vpcPeerIpAddress,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNiatelemetryNiaInventory.
 */
export interface GetNiatelemetryNiaInventoryArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetNiatelemetryNiaInventoryAncestor[];
    classId?: string;
    controllerIpAddress?: string;
    cpu?: number;
    crashResetLogs?: string;
    createTime?: string;
    customerDeviceConnector?: string;
    dcnmFanDetails?: inputs.GetNiatelemetryNiaInventoryDcnmFanDetail[];
    dcnmLicenseState?: string;
    deviceDiscovery?: string;
    deviceHealth?: number;
    deviceId?: string;
    deviceName?: string;
    deviceType?: string;
    deviceUpTime?: number;
    disk?: inputs.GetNiatelemetryNiaInventoryDisk;
    dn?: string;
    domainGroupMoid?: string;
    fabricName?: string;
    fexCount?: number;
    id?: string;
    infraWiNodeCount?: number;
    interfaces?: inputs.GetNiatelemetryNiaInventoryInterface[];
    ipAddress?: string;
    isVirtualNode?: string;
    lastRebootTime?: string;
    lastResetReason?: string;
    licenseState?: inputs.GetNiatelemetryNiaInventoryLicenseState;
    licenseType?: string;
    logInTime?: string;
    logOutTime?: string;
    macSecCount?: number;
    macSecFabCount?: number;
    macsecTotalCount?: number;
    memory?: number;
    modTime?: string;
    moid?: string;
    nexusCloudMembershipStatus?: boolean;
    nodeId?: string;
    nrVersion?: string;
    nxosBgpEvpn?: inputs.GetNiatelemetryNiaInventoryNxosBgpEvpn;
    nxosBgpMvpn?: inputs.GetNiatelemetryNiaInventoryNxosBgpMvpn;
    nxosBootflashDetails?: inputs.GetNiatelemetryNiaInventoryNxosBootflashDetails;
    nxosDciInterfaceStatus?: string;
    nxosInterfaceBrief?: inputs.GetNiatelemetryNiaInventoryNxosInterfaceBrief;
    nxosNveInterfaceStatus?: string;
    nxosNvePacketCounters?: inputs.GetNiatelemetryNiaInventoryNxosNvePacketCounters;
    nxosNveVni?: inputs.GetNiatelemetryNiaInventoryNxosNveVni;
    nxosOspfNeighbors?: number;
    nxosPimNeighbors?: string;
    nxosTelnet?: string;
    nxosTotalRoutes?: number;
    nxosVtp?: inputs.GetNiatelemetryNiaInventoryNxosVtp;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetNiatelemetryNiaInventoryParent;
    permissionResources?: inputs.GetNiatelemetryNiaInventoryPermissionResource[];
    recordType?: string;
    recordVersion?: string;
    registeredDevice?: inputs.GetNiatelemetryNiaInventoryRegisteredDevice;
    routePrefixCount?: number;
    routePrefixV4Count?: number;
    routePrefixV6Count?: number;
    serial?: string;
    sharedScope?: string;
    siteName?: string;
    siteuuid?: string;
    smartAccountId?: number;
    softwareDownload?: string;
    systemUpTime?: string;
    tags?: inputs.GetNiatelemetryNiaInventoryTag[];
    versionContext?: inputs.GetNiatelemetryNiaInventoryVersionContext;
    vniStatuses?: inputs.GetNiatelemetryNiaInventoryVniStatus[];
    vpcPeerIpAddress?: string;
}

/**
 * A collection of values returned by getNiatelemetryNiaInventory.
 */
export interface GetNiatelemetryNiaInventoryResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetNiatelemetryNiaInventoryAncestor[];
    readonly classId?: string;
    readonly controllerIpAddress?: string;
    readonly cpu?: number;
    readonly crashResetLogs?: string;
    readonly createTime?: string;
    readonly customerDeviceConnector?: string;
    readonly dcnmFanDetails?: outputs.GetNiatelemetryNiaInventoryDcnmFanDetail[];
    readonly dcnmLicenseState?: string;
    readonly deviceDiscovery?: string;
    readonly deviceHealth?: number;
    readonly deviceId?: string;
    readonly deviceName?: string;
    readonly deviceType?: string;
    readonly deviceUpTime?: number;
    readonly disk?: outputs.GetNiatelemetryNiaInventoryDisk;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly fabricName?: string;
    readonly fexCount?: number;
    readonly id: string;
    readonly infraWiNodeCount?: number;
    readonly interfaces?: outputs.GetNiatelemetryNiaInventoryInterface[];
    readonly ipAddress?: string;
    readonly isVirtualNode?: string;
    readonly lastRebootTime?: string;
    readonly lastResetReason?: string;
    readonly licenseState?: outputs.GetNiatelemetryNiaInventoryLicenseState;
    readonly licenseType?: string;
    readonly logInTime?: string;
    readonly logOutTime?: string;
    readonly macSecCount?: number;
    readonly macSecFabCount?: number;
    readonly macsecTotalCount?: number;
    readonly memory?: number;
    readonly modTime?: string;
    readonly moid?: string;
    readonly nexusCloudMembershipStatus?: boolean;
    readonly nodeId?: string;
    readonly nrVersion?: string;
    readonly nxosBgpEvpn?: outputs.GetNiatelemetryNiaInventoryNxosBgpEvpn;
    readonly nxosBgpMvpn?: outputs.GetNiatelemetryNiaInventoryNxosBgpMvpn;
    readonly nxosBootflashDetails?: outputs.GetNiatelemetryNiaInventoryNxosBootflashDetails;
    readonly nxosDciInterfaceStatus?: string;
    readonly nxosInterfaceBrief?: outputs.GetNiatelemetryNiaInventoryNxosInterfaceBrief;
    readonly nxosNveInterfaceStatus?: string;
    readonly nxosNvePacketCounters?: outputs.GetNiatelemetryNiaInventoryNxosNvePacketCounters;
    readonly nxosNveVni?: outputs.GetNiatelemetryNiaInventoryNxosNveVni;
    readonly nxosOspfNeighbors?: number;
    readonly nxosPimNeighbors?: string;
    readonly nxosTelnet?: string;
    readonly nxosTotalRoutes?: number;
    readonly nxosVtp?: outputs.GetNiatelemetryNiaInventoryNxosVtp;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetNiatelemetryNiaInventoryParent;
    readonly permissionResources?: outputs.GetNiatelemetryNiaInventoryPermissionResource[];
    readonly recordType?: string;
    readonly recordVersion?: string;
    readonly registeredDevice?: outputs.GetNiatelemetryNiaInventoryRegisteredDevice;
    readonly results: outputs.GetNiatelemetryNiaInventoryResult[];
    readonly routePrefixCount?: number;
    readonly routePrefixV4Count?: number;
    readonly routePrefixV6Count?: number;
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly siteName?: string;
    readonly siteuuid?: string;
    readonly smartAccountId?: number;
    readonly softwareDownload?: string;
    readonly systemUpTime?: string;
    readonly tags?: outputs.GetNiatelemetryNiaInventoryTag[];
    readonly versionContext?: outputs.GetNiatelemetryNiaInventoryVersionContext;
    readonly vniStatuses?: outputs.GetNiatelemetryNiaInventoryVniStatus[];
    readonly vpcPeerIpAddress?: string;
}
export function getNiatelemetryNiaInventoryOutput(args?: GetNiatelemetryNiaInventoryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNiatelemetryNiaInventoryResult> {
    return pulumi.output(args).apply((a: any) => getNiatelemetryNiaInventory(a, opts))
}

/**
 * A collection of arguments for invoking getNiatelemetryNiaInventory.
 */
export interface GetNiatelemetryNiaInventoryOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryNiaInventoryAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    controllerIpAddress?: pulumi.Input<string>;
    cpu?: pulumi.Input<number>;
    crashResetLogs?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    customerDeviceConnector?: pulumi.Input<string>;
    dcnmFanDetails?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryNiaInventoryDcnmFanDetailArgs>[]>;
    dcnmLicenseState?: pulumi.Input<string>;
    deviceDiscovery?: pulumi.Input<string>;
    deviceHealth?: pulumi.Input<number>;
    deviceId?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceType?: pulumi.Input<string>;
    deviceUpTime?: pulumi.Input<number>;
    disk?: pulumi.Input<inputs.GetNiatelemetryNiaInventoryDiskArgs>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    fabricName?: pulumi.Input<string>;
    fexCount?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    infraWiNodeCount?: pulumi.Input<number>;
    interfaces?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryNiaInventoryInterfaceArgs>[]>;
    ipAddress?: pulumi.Input<string>;
    isVirtualNode?: pulumi.Input<string>;
    lastRebootTime?: pulumi.Input<string>;
    lastResetReason?: pulumi.Input<string>;
    licenseState?: pulumi.Input<inputs.GetNiatelemetryNiaInventoryLicenseStateArgs>;
    licenseType?: pulumi.Input<string>;
    logInTime?: pulumi.Input<string>;
    logOutTime?: pulumi.Input<string>;
    macSecCount?: pulumi.Input<number>;
    macSecFabCount?: pulumi.Input<number>;
    macsecTotalCount?: pulumi.Input<number>;
    memory?: pulumi.Input<number>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    nexusCloudMembershipStatus?: pulumi.Input<boolean>;
    nodeId?: pulumi.Input<string>;
    nrVersion?: pulumi.Input<string>;
    nxosBgpEvpn?: pulumi.Input<inputs.GetNiatelemetryNiaInventoryNxosBgpEvpnArgs>;
    nxosBgpMvpn?: pulumi.Input<inputs.GetNiatelemetryNiaInventoryNxosBgpMvpnArgs>;
    nxosBootflashDetails?: pulumi.Input<inputs.GetNiatelemetryNiaInventoryNxosBootflashDetailsArgs>;
    nxosDciInterfaceStatus?: pulumi.Input<string>;
    nxosInterfaceBrief?: pulumi.Input<inputs.GetNiatelemetryNiaInventoryNxosInterfaceBriefArgs>;
    nxosNveInterfaceStatus?: pulumi.Input<string>;
    nxosNvePacketCounters?: pulumi.Input<inputs.GetNiatelemetryNiaInventoryNxosNvePacketCountersArgs>;
    nxosNveVni?: pulumi.Input<inputs.GetNiatelemetryNiaInventoryNxosNveVniArgs>;
    nxosOspfNeighbors?: pulumi.Input<number>;
    nxosPimNeighbors?: pulumi.Input<string>;
    nxosTelnet?: pulumi.Input<string>;
    nxosTotalRoutes?: pulumi.Input<number>;
    nxosVtp?: pulumi.Input<inputs.GetNiatelemetryNiaInventoryNxosVtpArgs>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetNiatelemetryNiaInventoryParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryNiaInventoryPermissionResourceArgs>[]>;
    recordType?: pulumi.Input<string>;
    recordVersion?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetNiatelemetryNiaInventoryRegisteredDeviceArgs>;
    routePrefixCount?: pulumi.Input<number>;
    routePrefixV4Count?: pulumi.Input<number>;
    routePrefixV6Count?: pulumi.Input<number>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    siteName?: pulumi.Input<string>;
    siteuuid?: pulumi.Input<string>;
    smartAccountId?: pulumi.Input<number>;
    softwareDownload?: pulumi.Input<string>;
    systemUpTime?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryNiaInventoryTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetNiatelemetryNiaInventoryVersionContextArgs>;
    vniStatuses?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryNiaInventoryVniStatusArgs>[]>;
    vpcPeerIpAddress?: pulumi.Input<string>;
}
