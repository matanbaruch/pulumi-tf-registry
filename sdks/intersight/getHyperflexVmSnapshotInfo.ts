// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getHyperflexVmSnapshotInfo(args?: GetHyperflexVmSnapshotInfoArgs, opts?: pulumi.InvokeOptions): Promise<GetHyperflexVmSnapshotInfoResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getHyperflexVmSnapshotInfo:getHyperflexVmSnapshotInfo", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "clusterIdSnapMaps": args.clusterIdSnapMaps,
        "createTime": args.createTime,
        "displayStatus": args.displayStatus,
        "domainGroupMoid": args.domainGroupMoid,
        "error": args.error,
        "id": args.id,
        "label": args.label,
        "modTime": args.modTime,
        "mode": args.mode,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "parentSnapshot": args.parentSnapshot,
        "permissionResources": args.permissionResources,
        "replicationStatus": args.replicationStatus,
        "sharedScope": args.sharedScope,
        "snapshotErrorMsg": args.snapshotErrorMsg,
        "snapshotStatus": args.snapshotStatus,
        "sourceTimestamp": args.sourceTimestamp,
        "srcCluster": args.srcCluster,
        "srcClusterName": args.srcClusterName,
        "tags": args.tags,
        "targetCompletionTimestamp": args.targetCompletionTimestamp,
        "tgtCluster": args.tgtCluster,
        "tgtClusterName": args.tgtClusterName,
        "versionContext": args.versionContext,
        "vmBackupInfo": args.vmBackupInfo,
        "vmEntityReference": args.vmEntityReference,
        "vmSnapshotEntityReference": args.vmSnapshotEntityReference,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getHyperflexVmSnapshotInfo.
 */
export interface GetHyperflexVmSnapshotInfoArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetHyperflexVmSnapshotInfoAncestor[];
    classId?: string;
    clusterIdSnapMaps?: inputs.GetHyperflexVmSnapshotInfoClusterIdSnapMap[];
    createTime?: string;
    displayStatus?: string;
    domainGroupMoid?: string;
    error?: inputs.GetHyperflexVmSnapshotInfoError;
    id?: string;
    label?: string;
    modTime?: string;
    mode?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetHyperflexVmSnapshotInfoParent;
    parentSnapshot?: inputs.GetHyperflexVmSnapshotInfoParentSnapshot;
    permissionResources?: inputs.GetHyperflexVmSnapshotInfoPermissionResource[];
    replicationStatus?: string;
    sharedScope?: string;
    snapshotErrorMsg?: string;
    snapshotStatus?: string;
    sourceTimestamp?: number;
    srcCluster?: inputs.GetHyperflexVmSnapshotInfoSrcCluster;
    srcClusterName?: string;
    tags?: inputs.GetHyperflexVmSnapshotInfoTag[];
    targetCompletionTimestamp?: number;
    tgtCluster?: inputs.GetHyperflexVmSnapshotInfoTgtCluster;
    tgtClusterName?: string;
    versionContext?: inputs.GetHyperflexVmSnapshotInfoVersionContext;
    vmBackupInfo?: inputs.GetHyperflexVmSnapshotInfoVmBackupInfo;
    vmEntityReference?: inputs.GetHyperflexVmSnapshotInfoVmEntityReference;
    vmSnapshotEntityReference?: inputs.GetHyperflexVmSnapshotInfoVmSnapshotEntityReference;
}

/**
 * A collection of values returned by getHyperflexVmSnapshotInfo.
 */
export interface GetHyperflexVmSnapshotInfoResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetHyperflexVmSnapshotInfoAncestor[];
    readonly classId?: string;
    readonly clusterIdSnapMaps?: outputs.GetHyperflexVmSnapshotInfoClusterIdSnapMap[];
    readonly createTime?: string;
    readonly displayStatus?: string;
    readonly domainGroupMoid?: string;
    readonly error?: outputs.GetHyperflexVmSnapshotInfoError;
    readonly id: string;
    readonly label?: string;
    readonly modTime?: string;
    readonly mode?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetHyperflexVmSnapshotInfoParent;
    readonly parentSnapshot?: outputs.GetHyperflexVmSnapshotInfoParentSnapshot;
    readonly permissionResources?: outputs.GetHyperflexVmSnapshotInfoPermissionResource[];
    readonly replicationStatus?: string;
    readonly results: outputs.GetHyperflexVmSnapshotInfoResult[];
    readonly sharedScope?: string;
    readonly snapshotErrorMsg?: string;
    readonly snapshotStatus?: string;
    readonly sourceTimestamp?: number;
    readonly srcCluster?: outputs.GetHyperflexVmSnapshotInfoSrcCluster;
    readonly srcClusterName?: string;
    readonly tags?: outputs.GetHyperflexVmSnapshotInfoTag[];
    readonly targetCompletionTimestamp?: number;
    readonly tgtCluster?: outputs.GetHyperflexVmSnapshotInfoTgtCluster;
    readonly tgtClusterName?: string;
    readonly versionContext?: outputs.GetHyperflexVmSnapshotInfoVersionContext;
    readonly vmBackupInfo?: outputs.GetHyperflexVmSnapshotInfoVmBackupInfo;
    readonly vmEntityReference?: outputs.GetHyperflexVmSnapshotInfoVmEntityReference;
    readonly vmSnapshotEntityReference?: outputs.GetHyperflexVmSnapshotInfoVmSnapshotEntityReference;
}
export function getHyperflexVmSnapshotInfoOutput(args?: GetHyperflexVmSnapshotInfoOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetHyperflexVmSnapshotInfoResult> {
    return pulumi.output(args).apply((a: any) => getHyperflexVmSnapshotInfo(a, opts))
}

/**
 * A collection of arguments for invoking getHyperflexVmSnapshotInfo.
 */
export interface GetHyperflexVmSnapshotInfoOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetHyperflexVmSnapshotInfoAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    clusterIdSnapMaps?: pulumi.Input<pulumi.Input<inputs.GetHyperflexVmSnapshotInfoClusterIdSnapMapArgs>[]>;
    createTime?: pulumi.Input<string>;
    displayStatus?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    error?: pulumi.Input<inputs.GetHyperflexVmSnapshotInfoErrorArgs>;
    id?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetHyperflexVmSnapshotInfoParentArgs>;
    parentSnapshot?: pulumi.Input<inputs.GetHyperflexVmSnapshotInfoParentSnapshotArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetHyperflexVmSnapshotInfoPermissionResourceArgs>[]>;
    replicationStatus?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    snapshotErrorMsg?: pulumi.Input<string>;
    snapshotStatus?: pulumi.Input<string>;
    sourceTimestamp?: pulumi.Input<number>;
    srcCluster?: pulumi.Input<inputs.GetHyperflexVmSnapshotInfoSrcClusterArgs>;
    srcClusterName?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetHyperflexVmSnapshotInfoTagArgs>[]>;
    targetCompletionTimestamp?: pulumi.Input<number>;
    tgtCluster?: pulumi.Input<inputs.GetHyperflexVmSnapshotInfoTgtClusterArgs>;
    tgtClusterName?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetHyperflexVmSnapshotInfoVersionContextArgs>;
    vmBackupInfo?: pulumi.Input<inputs.GetHyperflexVmSnapshotInfoVmBackupInfoArgs>;
    vmEntityReference?: pulumi.Input<inputs.GetHyperflexVmSnapshotInfoVmEntityReferenceArgs>;
    vmSnapshotEntityReference?: pulumi.Input<inputs.GetHyperflexVmSnapshotInfoVmSnapshotEntityReferenceArgs>;
}
