// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVnicFcIf(args?: GetVnicFcIfArgs, opts?: pulumi.InvokeOptions): Promise<GetVnicFcIfResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getVnicFcIf:getVnicFcIf", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "fcAdapterPolicy": args.fcAdapterPolicy,
        "fcNetworkPolicy": args.fcNetworkPolicy,
        "fcQosPolicy": args.fcQosPolicy,
        "fcZonePolicies": args.fcZonePolicies,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "order": args.order,
        "overriddenLists": args.overriddenLists,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "persistentBindings": args.persistentBindings,
        "pinGroupName": args.pinGroupName,
        "placement": args.placement,
        "profile": args.profile,
        "sanConnectivityPolicy": args.sanConnectivityPolicy,
        "scpVhba": args.scpVhba,
        "sharedScope": args.sharedScope,
        "spVhbas": args.spVhbas,
        "srcTemplate": args.srcTemplate,
        "staticWwpnAddress": args.staticWwpnAddress,
        "tags": args.tags,
        "templateActions": args.templateActions,
        "templateSyncErrors": args.templateSyncErrors,
        "templateSyncStatus": args.templateSyncStatus,
        "type": args.type,
        "versionContext": args.versionContext,
        "vifId": args.vifId,
        "wwpn": args.wwpn,
        "wwpnAddressType": args.wwpnAddressType,
        "wwpnLease": args.wwpnLease,
        "wwpnPool": args.wwpnPool,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVnicFcIf.
 */
export interface GetVnicFcIfArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetVnicFcIfAncestor[];
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    fcAdapterPolicy?: inputs.GetVnicFcIfFcAdapterPolicy;
    fcNetworkPolicy?: inputs.GetVnicFcIfFcNetworkPolicy;
    fcQosPolicy?: inputs.GetVnicFcIfFcQosPolicy;
    fcZonePolicies?: inputs.GetVnicFcIfFcZonePolicy[];
    id?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    order?: number;
    overriddenLists?: string[];
    owners?: string[];
    parent?: inputs.GetVnicFcIfParent;
    permissionResources?: inputs.GetVnicFcIfPermissionResource[];
    persistentBindings?: boolean;
    pinGroupName?: string;
    placement?: inputs.GetVnicFcIfPlacement;
    profile?: inputs.GetVnicFcIfProfile;
    sanConnectivityPolicy?: inputs.GetVnicFcIfSanConnectivityPolicy;
    scpVhba?: inputs.GetVnicFcIfScpVhba;
    sharedScope?: string;
    spVhbas?: inputs.GetVnicFcIfSpVhba[];
    srcTemplate?: inputs.GetVnicFcIfSrcTemplate;
    staticWwpnAddress?: string;
    tags?: inputs.GetVnicFcIfTag[];
    templateActions?: inputs.GetVnicFcIfTemplateAction[];
    templateSyncErrors?: inputs.GetVnicFcIfTemplateSyncError[];
    templateSyncStatus?: string;
    type?: string;
    versionContext?: inputs.GetVnicFcIfVersionContext;
    vifId?: number;
    wwpn?: string;
    wwpnAddressType?: string;
    wwpnLease?: inputs.GetVnicFcIfWwpnLease;
    wwpnPool?: inputs.GetVnicFcIfWwpnPool;
}

/**
 * A collection of values returned by getVnicFcIf.
 */
export interface GetVnicFcIfResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetVnicFcIfAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly fcAdapterPolicy?: outputs.GetVnicFcIfFcAdapterPolicy;
    readonly fcNetworkPolicy?: outputs.GetVnicFcIfFcNetworkPolicy;
    readonly fcQosPolicy?: outputs.GetVnicFcIfFcQosPolicy;
    readonly fcZonePolicies?: outputs.GetVnicFcIfFcZonePolicy[];
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly order?: number;
    readonly overriddenLists?: string[];
    readonly owners?: string[];
    readonly parent?: outputs.GetVnicFcIfParent;
    readonly permissionResources?: outputs.GetVnicFcIfPermissionResource[];
    readonly persistentBindings?: boolean;
    readonly pinGroupName?: string;
    readonly placement?: outputs.GetVnicFcIfPlacement;
    readonly profile?: outputs.GetVnicFcIfProfile;
    readonly results: outputs.GetVnicFcIfResult[];
    readonly sanConnectivityPolicy?: outputs.GetVnicFcIfSanConnectivityPolicy;
    readonly scpVhba?: outputs.GetVnicFcIfScpVhba;
    readonly sharedScope?: string;
    readonly spVhbas?: outputs.GetVnicFcIfSpVhba[];
    readonly srcTemplate?: outputs.GetVnicFcIfSrcTemplate;
    readonly staticWwpnAddress?: string;
    readonly tags?: outputs.GetVnicFcIfTag[];
    readonly templateActions?: outputs.GetVnicFcIfTemplateAction[];
    readonly templateSyncErrors?: outputs.GetVnicFcIfTemplateSyncError[];
    readonly templateSyncStatus?: string;
    readonly type?: string;
    readonly versionContext?: outputs.GetVnicFcIfVersionContext;
    readonly vifId?: number;
    readonly wwpn?: string;
    readonly wwpnAddressType?: string;
    readonly wwpnLease?: outputs.GetVnicFcIfWwpnLease;
    readonly wwpnPool?: outputs.GetVnicFcIfWwpnPool;
}
export function getVnicFcIfOutput(args?: GetVnicFcIfOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVnicFcIfResult> {
    return pulumi.output(args).apply((a: any) => getVnicFcIf(a, opts))
}

/**
 * A collection of arguments for invoking getVnicFcIf.
 */
export interface GetVnicFcIfOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetVnicFcIfAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    fcAdapterPolicy?: pulumi.Input<inputs.GetVnicFcIfFcAdapterPolicyArgs>;
    fcNetworkPolicy?: pulumi.Input<inputs.GetVnicFcIfFcNetworkPolicyArgs>;
    fcQosPolicy?: pulumi.Input<inputs.GetVnicFcIfFcQosPolicyArgs>;
    fcZonePolicies?: pulumi.Input<pulumi.Input<inputs.GetVnicFcIfFcZonePolicyArgs>[]>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    order?: pulumi.Input<number>;
    overriddenLists?: pulumi.Input<pulumi.Input<string>[]>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetVnicFcIfParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetVnicFcIfPermissionResourceArgs>[]>;
    persistentBindings?: pulumi.Input<boolean>;
    pinGroupName?: pulumi.Input<string>;
    placement?: pulumi.Input<inputs.GetVnicFcIfPlacementArgs>;
    profile?: pulumi.Input<inputs.GetVnicFcIfProfileArgs>;
    sanConnectivityPolicy?: pulumi.Input<inputs.GetVnicFcIfSanConnectivityPolicyArgs>;
    scpVhba?: pulumi.Input<inputs.GetVnicFcIfScpVhbaArgs>;
    sharedScope?: pulumi.Input<string>;
    spVhbas?: pulumi.Input<pulumi.Input<inputs.GetVnicFcIfSpVhbaArgs>[]>;
    srcTemplate?: pulumi.Input<inputs.GetVnicFcIfSrcTemplateArgs>;
    staticWwpnAddress?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetVnicFcIfTagArgs>[]>;
    templateActions?: pulumi.Input<pulumi.Input<inputs.GetVnicFcIfTemplateActionArgs>[]>;
    templateSyncErrors?: pulumi.Input<pulumi.Input<inputs.GetVnicFcIfTemplateSyncErrorArgs>[]>;
    templateSyncStatus?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetVnicFcIfVersionContextArgs>;
    vifId?: pulumi.Input<number>;
    wwpn?: pulumi.Input<string>;
    wwpnAddressType?: pulumi.Input<string>;
    wwpnLease?: pulumi.Input<inputs.GetVnicFcIfWwpnLeaseArgs>;
    wwpnPool?: pulumi.Input<inputs.GetVnicFcIfWwpnPoolArgs>;
}
