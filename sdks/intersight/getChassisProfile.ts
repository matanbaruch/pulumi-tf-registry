// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getChassisProfile(args?: GetChassisProfileArgs, opts?: pulumi.InvokeOptions): Promise<GetChassisProfileResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getChassisProfile:getChassisProfile", {
        "accountMoid": args.accountMoid,
        "action": args.action,
        "actionParams": args.actionParams,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "assignedChassis": args.assignedChassis,
        "associatedChassis": args.associatedChassis,
        "classId": args.classId,
        "configChangeContext": args.configChangeContext,
        "configChangeDetails": args.configChangeDetails,
        "configChanges": args.configChanges,
        "configContext": args.configContext,
        "configResult": args.configResult,
        "createTime": args.createTime,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "iomProfiles": args.iomProfiles,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "organization": args.organization,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "policyBuckets": args.policyBuckets,
        "runningWorkflows": args.runningWorkflows,
        "scheduledActions": args.scheduledActions,
        "sharedScope": args.sharedScope,
        "srcTemplate": args.srcTemplate,
        "tags": args.tags,
        "targetPlatform": args.targetPlatform,
        "type": args.type,
        "userLabel": args.userLabel,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getChassisProfile.
 */
export interface GetChassisProfileArgs {
    accountMoid?: string;
    action?: string;
    actionParams?: inputs.GetChassisProfileActionParam[];
    additionalProperties?: string;
    ancestors?: inputs.GetChassisProfileAncestor[];
    assignedChassis?: inputs.GetChassisProfileAssignedChassis;
    associatedChassis?: inputs.GetChassisProfileAssociatedChassis;
    classId?: string;
    configChangeContext?: inputs.GetChassisProfileConfigChangeContext;
    configChangeDetails?: inputs.GetChassisProfileConfigChangeDetail[];
    configChanges?: inputs.GetChassisProfileConfigChanges;
    configContext?: inputs.GetChassisProfileConfigContext;
    configResult?: inputs.GetChassisProfileConfigResult;
    createTime?: string;
    description?: string;
    domainGroupMoid?: string;
    id?: string;
    iomProfiles?: inputs.GetChassisProfileIomProfile[];
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    organization?: inputs.GetChassisProfileOrganization;
    owners?: string[];
    parent?: inputs.GetChassisProfileParent;
    permissionResources?: inputs.GetChassisProfilePermissionResource[];
    policyBuckets?: inputs.GetChassisProfilePolicyBucket[];
    runningWorkflows?: inputs.GetChassisProfileRunningWorkflow[];
    scheduledActions?: inputs.GetChassisProfileScheduledAction[];
    sharedScope?: string;
    srcTemplate?: inputs.GetChassisProfileSrcTemplate;
    tags?: inputs.GetChassisProfileTag[];
    targetPlatform?: string;
    type?: string;
    userLabel?: string;
    versionContext?: inputs.GetChassisProfileVersionContext;
}

/**
 * A collection of values returned by getChassisProfile.
 */
export interface GetChassisProfileResult {
    readonly accountMoid?: string;
    readonly action?: string;
    readonly actionParams?: outputs.GetChassisProfileActionParam[];
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetChassisProfileAncestor[];
    readonly assignedChassis?: outputs.GetChassisProfileAssignedChassis;
    readonly associatedChassis?: outputs.GetChassisProfileAssociatedChassis;
    readonly classId?: string;
    readonly configChangeContext?: outputs.GetChassisProfileConfigChangeContext;
    readonly configChangeDetails?: outputs.GetChassisProfileConfigChangeDetail[];
    readonly configChanges?: outputs.GetChassisProfileConfigChanges;
    readonly configContext?: outputs.GetChassisProfileConfigContext;
    readonly configResult?: outputs.GetChassisProfileConfigResult;
    readonly createTime?: string;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly iomProfiles?: outputs.GetChassisProfileIomProfile[];
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly organization?: outputs.GetChassisProfileOrganization;
    readonly owners?: string[];
    readonly parent?: outputs.GetChassisProfileParent;
    readonly permissionResources?: outputs.GetChassisProfilePermissionResource[];
    readonly policyBuckets?: outputs.GetChassisProfilePolicyBucket[];
    readonly results: outputs.GetChassisProfileResult[];
    readonly runningWorkflows?: outputs.GetChassisProfileRunningWorkflow[];
    readonly scheduledActions?: outputs.GetChassisProfileScheduledAction[];
    readonly sharedScope?: string;
    readonly srcTemplate?: outputs.GetChassisProfileSrcTemplate;
    readonly tags?: outputs.GetChassisProfileTag[];
    readonly targetPlatform?: string;
    readonly type?: string;
    readonly userLabel?: string;
    readonly versionContext?: outputs.GetChassisProfileVersionContext;
}
export function getChassisProfileOutput(args?: GetChassisProfileOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetChassisProfileResult> {
    return pulumi.output(args).apply((a: any) => getChassisProfile(a, opts))
}

/**
 * A collection of arguments for invoking getChassisProfile.
 */
export interface GetChassisProfileOutputArgs {
    accountMoid?: pulumi.Input<string>;
    action?: pulumi.Input<string>;
    actionParams?: pulumi.Input<pulumi.Input<inputs.GetChassisProfileActionParamArgs>[]>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetChassisProfileAncestorArgs>[]>;
    assignedChassis?: pulumi.Input<inputs.GetChassisProfileAssignedChassisArgs>;
    associatedChassis?: pulumi.Input<inputs.GetChassisProfileAssociatedChassisArgs>;
    classId?: pulumi.Input<string>;
    configChangeContext?: pulumi.Input<inputs.GetChassisProfileConfigChangeContextArgs>;
    configChangeDetails?: pulumi.Input<pulumi.Input<inputs.GetChassisProfileConfigChangeDetailArgs>[]>;
    configChanges?: pulumi.Input<inputs.GetChassisProfileConfigChangesArgs>;
    configContext?: pulumi.Input<inputs.GetChassisProfileConfigContextArgs>;
    configResult?: pulumi.Input<inputs.GetChassisProfileConfigResultArgs>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    iomProfiles?: pulumi.Input<pulumi.Input<inputs.GetChassisProfileIomProfileArgs>[]>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.GetChassisProfileOrganizationArgs>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetChassisProfileParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetChassisProfilePermissionResourceArgs>[]>;
    policyBuckets?: pulumi.Input<pulumi.Input<inputs.GetChassisProfilePolicyBucketArgs>[]>;
    runningWorkflows?: pulumi.Input<pulumi.Input<inputs.GetChassisProfileRunningWorkflowArgs>[]>;
    scheduledActions?: pulumi.Input<pulumi.Input<inputs.GetChassisProfileScheduledActionArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    srcTemplate?: pulumi.Input<inputs.GetChassisProfileSrcTemplateArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetChassisProfileTagArgs>[]>;
    targetPlatform?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    userLabel?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetChassisProfileVersionContextArgs>;
}
