// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNiatelemetryMdsNeighbors(args?: GetNiatelemetryMdsNeighborsArgs, opts?: pulumi.InvokeOptions): Promise<GetNiatelemetryMdsNeighborsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getNiatelemetryMdsNeighbors:getNiatelemetryMdsNeighbors", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceIp": args.deviceIp,
        "deviceName": args.deviceName,
        "deviceWwn": args.deviceWwn,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "neighborInfos": args.neighborInfos,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "recordType": args.recordType,
        "recordVersion": args.recordVersion,
        "registeredDevice": args.registeredDevice,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNiatelemetryMdsNeighbors.
 */
export interface GetNiatelemetryMdsNeighborsArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetNiatelemetryMdsNeighborsAncestor[];
    classId?: string;
    createTime?: string;
    deviceIp?: string;
    deviceName?: string;
    deviceWwn?: string;
    domainGroupMoid?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    neighborInfos?: inputs.GetNiatelemetryMdsNeighborsNeighborInfo[];
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetNiatelemetryMdsNeighborsParent;
    permissionResources?: inputs.GetNiatelemetryMdsNeighborsPermissionResource[];
    recordType?: string;
    recordVersion?: string;
    registeredDevice?: inputs.GetNiatelemetryMdsNeighborsRegisteredDevice;
    serial?: string;
    sharedScope?: string;
    tags?: inputs.GetNiatelemetryMdsNeighborsTag[];
    versionContext?: inputs.GetNiatelemetryMdsNeighborsVersionContext;
}

/**
 * A collection of values returned by getNiatelemetryMdsNeighbors.
 */
export interface GetNiatelemetryMdsNeighborsResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetNiatelemetryMdsNeighborsAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceIp?: string;
    readonly deviceName?: string;
    readonly deviceWwn?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly neighborInfos?: outputs.GetNiatelemetryMdsNeighborsNeighborInfo[];
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetNiatelemetryMdsNeighborsParent;
    readonly permissionResources?: outputs.GetNiatelemetryMdsNeighborsPermissionResource[];
    readonly recordType?: string;
    readonly recordVersion?: string;
    readonly registeredDevice?: outputs.GetNiatelemetryMdsNeighborsRegisteredDevice;
    readonly results: outputs.GetNiatelemetryMdsNeighborsResult[];
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetNiatelemetryMdsNeighborsTag[];
    readonly versionContext?: outputs.GetNiatelemetryMdsNeighborsVersionContext;
}
export function getNiatelemetryMdsNeighborsOutput(args?: GetNiatelemetryMdsNeighborsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNiatelemetryMdsNeighborsResult> {
    return pulumi.output(args).apply((a: any) => getNiatelemetryMdsNeighbors(a, opts))
}

/**
 * A collection of arguments for invoking getNiatelemetryMdsNeighbors.
 */
export interface GetNiatelemetryMdsNeighborsOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryMdsNeighborsAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceIp?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceWwn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    neighborInfos?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryMdsNeighborsNeighborInfoArgs>[]>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetNiatelemetryMdsNeighborsParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryMdsNeighborsPermissionResourceArgs>[]>;
    recordType?: pulumi.Input<string>;
    recordVersion?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetNiatelemetryMdsNeighborsRegisteredDeviceArgs>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryMdsNeighborsTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetNiatelemetryMdsNeighborsVersionContextArgs>;
}
