// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNetworkDiscoveredNeighbor(args?: GetNetworkDiscoveredNeighborArgs, opts?: pulumi.InvokeOptions): Promise<GetNetworkDiscoveredNeighborResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getNetworkDiscoveredNeighbor:getNetworkDiscoveredNeighbor", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "cdpNeighbor": args.cdpNeighbor,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceId": args.deviceId,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "lldpNeighbor": args.lldpNeighbor,
        "managementAddress": args.managementAddress,
        "modTime": args.modTime,
        "moid": args.moid,
        "neighborDeviceCapabilities": args.neighborDeviceCapabilities,
        "neighborDeviceId": args.neighborDeviceId,
        "neighborInterface": args.neighborInterface,
        "neighborPortId": args.neighborPortId,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "rn": args.rn,
        "sharedScope": args.sharedScope,
        "switchPortId": args.switchPortId,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNetworkDiscoveredNeighbor.
 */
export interface GetNetworkDiscoveredNeighborArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetNetworkDiscoveredNeighborAncestor[];
    cdpNeighbor?: inputs.GetNetworkDiscoveredNeighborCdpNeighbor;
    classId?: string;
    createTime?: string;
    deviceId?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    id?: string;
    lldpNeighbor?: inputs.GetNetworkDiscoveredNeighborLldpNeighbor;
    managementAddress?: string;
    modTime?: string;
    moid?: string;
    neighborDeviceCapabilities?: string[];
    neighborDeviceId?: string;
    neighborInterface?: string;
    neighborPortId?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetNetworkDiscoveredNeighborParent;
    permissionResources?: inputs.GetNetworkDiscoveredNeighborPermissionResource[];
    rn?: string;
    sharedScope?: string;
    switchPortId?: string;
    tags?: inputs.GetNetworkDiscoveredNeighborTag[];
    versionContext?: inputs.GetNetworkDiscoveredNeighborVersionContext;
}

/**
 * A collection of values returned by getNetworkDiscoveredNeighbor.
 */
export interface GetNetworkDiscoveredNeighborResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetNetworkDiscoveredNeighborAncestor[];
    readonly cdpNeighbor?: outputs.GetNetworkDiscoveredNeighborCdpNeighbor;
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceId?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly lldpNeighbor?: outputs.GetNetworkDiscoveredNeighborLldpNeighbor;
    readonly managementAddress?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly neighborDeviceCapabilities?: string[];
    readonly neighborDeviceId?: string;
    readonly neighborInterface?: string;
    readonly neighborPortId?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetNetworkDiscoveredNeighborParent;
    readonly permissionResources?: outputs.GetNetworkDiscoveredNeighborPermissionResource[];
    readonly results: outputs.GetNetworkDiscoveredNeighborResult[];
    readonly rn?: string;
    readonly sharedScope?: string;
    readonly switchPortId?: string;
    readonly tags?: outputs.GetNetworkDiscoveredNeighborTag[];
    readonly versionContext?: outputs.GetNetworkDiscoveredNeighborVersionContext;
}
export function getNetworkDiscoveredNeighborOutput(args?: GetNetworkDiscoveredNeighborOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkDiscoveredNeighborResult> {
    return pulumi.output(args).apply((a: any) => getNetworkDiscoveredNeighbor(a, opts))
}

/**
 * A collection of arguments for invoking getNetworkDiscoveredNeighbor.
 */
export interface GetNetworkDiscoveredNeighborOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetNetworkDiscoveredNeighborAncestorArgs>[]>;
    cdpNeighbor?: pulumi.Input<inputs.GetNetworkDiscoveredNeighborCdpNeighborArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceId?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    lldpNeighbor?: pulumi.Input<inputs.GetNetworkDiscoveredNeighborLldpNeighborArgs>;
    managementAddress?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    neighborDeviceCapabilities?: pulumi.Input<pulumi.Input<string>[]>;
    neighborDeviceId?: pulumi.Input<string>;
    neighborInterface?: pulumi.Input<string>;
    neighborPortId?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetNetworkDiscoveredNeighborParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetNetworkDiscoveredNeighborPermissionResourceArgs>[]>;
    rn?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    switchPortId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetNetworkDiscoveredNeighborTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetNetworkDiscoveredNeighborVersionContextArgs>;
}
