// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageNetAppNamespace(args?: GetStorageNetAppNamespaceArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageNetAppNamespaceResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageNetAppNamespace:getStorageNetAppNamespace", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "array": args.array,
        "classId": args.classId,
        "containerState": args.containerState,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "isMapped": args.isMapped,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "namespaceId": args.namespaceId,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "path": args.path,
        "permissionResources": args.permissionResources,
        "sharedScope": args.sharedScope,
        "state": args.state,
        "storageContainer": args.storageContainer,
        "storageUtilization": args.storageUtilization,
        "subsystemName": args.subsystemName,
        "svmName": args.svmName,
        "tags": args.tags,
        "uuid": args.uuid,
        "versionContext": args.versionContext,
        "volumeName": args.volumeName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageNetAppNamespace.
 */
export interface GetStorageNetAppNamespaceArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageNetAppNamespaceAncestor[];
    array?: inputs.GetStorageNetAppNamespaceArray;
    classId?: string;
    containerState?: string;
    createTime?: string;
    domainGroupMoid?: string;
    id?: string;
    isMapped?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    namespaceId?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageNetAppNamespaceParent;
    path?: string;
    permissionResources?: inputs.GetStorageNetAppNamespacePermissionResource[];
    sharedScope?: string;
    state?: string;
    storageContainer?: inputs.GetStorageNetAppNamespaceStorageContainer;
    storageUtilization?: inputs.GetStorageNetAppNamespaceStorageUtilization;
    subsystemName?: string;
    svmName?: string;
    tags?: inputs.GetStorageNetAppNamespaceTag[];
    uuid?: string;
    versionContext?: inputs.GetStorageNetAppNamespaceVersionContext;
    volumeName?: string;
}

/**
 * A collection of values returned by getStorageNetAppNamespace.
 */
export interface GetStorageNetAppNamespaceResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageNetAppNamespaceAncestor[];
    readonly array?: outputs.GetStorageNetAppNamespaceArray;
    readonly classId?: string;
    readonly containerState?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly isMapped?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly namespaceId?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageNetAppNamespaceParent;
    readonly path?: string;
    readonly permissionResources?: outputs.GetStorageNetAppNamespacePermissionResource[];
    readonly results: outputs.GetStorageNetAppNamespaceResult[];
    readonly sharedScope?: string;
    readonly state?: string;
    readonly storageContainer?: outputs.GetStorageNetAppNamespaceStorageContainer;
    readonly storageUtilization?: outputs.GetStorageNetAppNamespaceStorageUtilization;
    readonly subsystemName?: string;
    readonly svmName?: string;
    readonly tags?: outputs.GetStorageNetAppNamespaceTag[];
    readonly uuid?: string;
    readonly versionContext?: outputs.GetStorageNetAppNamespaceVersionContext;
    readonly volumeName?: string;
}
export function getStorageNetAppNamespaceOutput(args?: GetStorageNetAppNamespaceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageNetAppNamespaceResult> {
    return pulumi.output(args).apply((a: any) => getStorageNetAppNamespace(a, opts))
}

/**
 * A collection of arguments for invoking getStorageNetAppNamespace.
 */
export interface GetStorageNetAppNamespaceOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppNamespaceAncestorArgs>[]>;
    array?: pulumi.Input<inputs.GetStorageNetAppNamespaceArrayArgs>;
    classId?: pulumi.Input<string>;
    containerState?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    isMapped?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namespaceId?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageNetAppNamespaceParentArgs>;
    path?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppNamespacePermissionResourceArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    storageContainer?: pulumi.Input<inputs.GetStorageNetAppNamespaceStorageContainerArgs>;
    storageUtilization?: pulumi.Input<inputs.GetStorageNetAppNamespaceStorageUtilizationArgs>;
    subsystemName?: pulumi.Input<string>;
    svmName?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppNamespaceTagArgs>[]>;
    uuid?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetStorageNetAppNamespaceVersionContextArgs>;
    volumeName?: pulumi.Input<string>;
}
