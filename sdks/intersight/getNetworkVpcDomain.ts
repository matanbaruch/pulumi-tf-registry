// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNetworkVpcDomain(args?: GetNetworkVpcDomainArgs, opts?: pulumi.InvokeOptions): Promise<GetNetworkVpcDomainResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getNetworkVpcDomain:getNetworkVpcDomain", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "autoRecoveryStatus": args.autoRecoveryStatus,
        "classId": args.classId,
        "consistencyStatus": args.consistencyStatus,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "dualActiveExcludedVlans": args.dualActiveExcludedVlans,
        "id": args.id,
        "keepAliveStatus": args.keepAliveStatus,
        "modTime": args.modTime,
        "moid": args.moid,
        "networkElement": args.networkElement,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "peerStatus": args.peerStatus,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "role": args.role,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
        "vpcDomainId": args.vpcDomainId,
        "vpcsConfiguredCount": args.vpcsConfiguredCount,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNetworkVpcDomain.
 */
export interface GetNetworkVpcDomainArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetNetworkVpcDomainAncestor[];
    autoRecoveryStatus?: string;
    classId?: string;
    consistencyStatus?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    dualActiveExcludedVlans?: number;
    id?: string;
    keepAliveStatus?: string;
    modTime?: string;
    moid?: string;
    networkElement?: inputs.GetNetworkVpcDomainNetworkElement;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetNetworkVpcDomainParent;
    peerStatus?: string;
    permissionResources?: inputs.GetNetworkVpcDomainPermissionResource[];
    registeredDevice?: inputs.GetNetworkVpcDomainRegisteredDevice;
    rn?: string;
    role?: string;
    sharedScope?: string;
    tags?: inputs.GetNetworkVpcDomainTag[];
    versionContext?: inputs.GetNetworkVpcDomainVersionContext;
    vpcDomainId?: number;
    vpcsConfiguredCount?: number;
}

/**
 * A collection of values returned by getNetworkVpcDomain.
 */
export interface GetNetworkVpcDomainResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetNetworkVpcDomainAncestor[];
    readonly autoRecoveryStatus?: string;
    readonly classId?: string;
    readonly consistencyStatus?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly dualActiveExcludedVlans?: number;
    readonly id: string;
    readonly keepAliveStatus?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly networkElement?: outputs.GetNetworkVpcDomainNetworkElement;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetNetworkVpcDomainParent;
    readonly peerStatus?: string;
    readonly permissionResources?: outputs.GetNetworkVpcDomainPermissionResource[];
    readonly registeredDevice?: outputs.GetNetworkVpcDomainRegisteredDevice;
    readonly results: outputs.GetNetworkVpcDomainResult[];
    readonly rn?: string;
    readonly role?: string;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetNetworkVpcDomainTag[];
    readonly versionContext?: outputs.GetNetworkVpcDomainVersionContext;
    readonly vpcDomainId?: number;
    readonly vpcsConfiguredCount?: number;
}
export function getNetworkVpcDomainOutput(args?: GetNetworkVpcDomainOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkVpcDomainResult> {
    return pulumi.output(args).apply((a: any) => getNetworkVpcDomain(a, opts))
}

/**
 * A collection of arguments for invoking getNetworkVpcDomain.
 */
export interface GetNetworkVpcDomainOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetNetworkVpcDomainAncestorArgs>[]>;
    autoRecoveryStatus?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    consistencyStatus?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    dualActiveExcludedVlans?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    keepAliveStatus?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    networkElement?: pulumi.Input<inputs.GetNetworkVpcDomainNetworkElementArgs>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetNetworkVpcDomainParentArgs>;
    peerStatus?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetNetworkVpcDomainPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetNetworkVpcDomainRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetNetworkVpcDomainTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetNetworkVpcDomainVersionContextArgs>;
    vpcDomainId?: pulumi.Input<number>;
    vpcsConfiguredCount?: pulumi.Input<number>;
}
