// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PartnerintegrationInventory extends pulumi.CustomResource {
    /**
     * Get an existing PartnerintegrationInventory resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PartnerintegrationInventoryState, opts?: pulumi.CustomResourceOptions): PartnerintegrationInventory {
        return new PartnerintegrationInventory(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'intersight:index/partnerintegrationInventory:PartnerintegrationInventory';

    /**
     * Returns true if the given object is an instance of PartnerintegrationInventory.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PartnerintegrationInventory {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PartnerintegrationInventory.__pulumiType;
    }

    /**
     * The Account ID for this managed object.
     */
    public readonly accountMoid!: pulumi.Output<string>;
    /**
     * Action to be performed on the inventory collection. * `None` - Default Value of the action, i.e. do nothing. * `Build` -
     * Build the inventory service image. * `Deploy` - Deploy the inventory service on the appliance.
     */
    public readonly action!: pulumi.Output<string | undefined>;
    public readonly additionalProperties!: pulumi.Output<string | undefined>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly ancestors!: pulumi.Output<outputs.PartnerintegrationInventoryAncestor[]>;
    /**
     * Addtional flags to control build action.
     */
    public readonly buildFlags!: pulumi.Output<string | undefined>;
    /**
     * Time when build was triggered.
     */
    public readonly buildStartTime!: pulumi.Output<string>;
    /**
     * Status of build for inventory collection. * `None` - Default value of the status. i.e. done nothing. *
     * `BackendInProgress` - The backend build is in progress. * `BackendFailed` - The backend build has failed. *
     * `MetricsCollectorBackendInProgress` - The Metrics Collector backend build is in progress. *
     * `MetricsCollectorBackendFailed` - The Metrics Collector backend build has failed. * `DockerInProgress` - The docker
     * build is in progress. * `DockerFailed` - The docker build has failed. * `UiInProgress` - The UI build is in progress. *
     * `UiFailed` - The inventory UI build has failed. * `MetricsCollectorUiInProgress` - The Metrics Collector UI build is in
     * progress. * `MetricsCollectorUiFailed` - The Metrics Collector UI build has failed. *
     * `MetricsCollectorDependentBackendInProgress` - The Metrics Collector dependent backend build is in progress. *
     * `MetricsCollectorDependentBackendFailed` - The Metrics Collector dependent backend build has failed. *
     * `MetricsCollectorDependentDockerInProgress` - The Metrics Collector dependent docker build is in progress. *
     * `MetricsCollectorDependentDockerFailed` - The Metrics Collector dependent docker build has failed. * `ApidocsInProgress`
     * - The apidocs build is in progress. * `ApidocsFailed` - The apidocs build has failed. * `Completed` - The operation
     * completed successfully.
     */
    public readonly buildStatus!: pulumi.Output<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    public readonly classId!: pulumi.Output<string | undefined>;
    /**
     * The time when this managed object was created.
     */
    public readonly createTime!: pulumi.Output<string>;
    /**
     * Time when deploy was triggered.
     */
    public readonly deployStartTime!: pulumi.Output<string>;
    /**
     * Status of deployment of the inventory microservice. * `None` - Default value of the status. i.e. done nothing. *
     * `Completed` - The operation completed successfully. * `Failed` - The deploy operation failed.
     */
    public readonly deployStatus!: pulumi.Output<string>;
    /**
     * An array of relationships to partnerintegrationDocIssues resources.
     */
    public readonly docIssues!: pulumi.Output<outputs.PartnerintegrationInventoryDocIssue[]>;
    /**
     * The DomainGroup ID for this managed object.
     */
    public readonly domainGroupMoid!: pulumi.Output<string>;
    /**
     * An array of relationships to partnerintegrationEtl resources.
     */
    public readonly etls!: pulumi.Output<outputs.PartnerintegrationInventoryEtl[]>;
    /**
     * Name of the docker image that is built.
     */
    public readonly imageName!: pulumi.Output<string>;
    /**
     * An array of relationships to partnerintegrationLogs resources.
     */
    public readonly logs!: pulumi.Output<outputs.PartnerintegrationInventoryLog[]>;
    /**
     * A reference to a partnerintegrationMetrics resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    public readonly metrics!: pulumi.Output<outputs.PartnerintegrationInventoryMetric[]>;
    /**
     * The time when this managed object was last modified.
     */
    public readonly modTime!: pulumi.Output<string>;
    /**
     * An array of relationships to partnerintegrationModel resources.
     */
    public readonly models!: pulumi.Output<outputs.PartnerintegrationInventoryModel[]>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    public readonly moid!: pulumi.Output<string>;
    /**
     * Name of the inventory collection.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    public readonly objectType!: pulumi.Output<string | undefined>;
    /**
     * A reference to a organizationOrganization resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    public readonly organizations!: pulumi.Output<outputs.PartnerintegrationInventoryOrganization[]>;
    public readonly owners!: pulumi.Output<string[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    public readonly parents!: pulumi.Output<outputs.PartnerintegrationInventoryParent[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly permissionResources!: pulumi.Output<outputs.PartnerintegrationInventoryPermissionResource[]>;
    /**
     * Link to the generated v3 python SDK.
     */
    public readonly pythonSdkUrl!: pulumi.Output<string>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    public readonly sharedScope!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.PartnerintegrationInventoryTag[]>;
    /**
     * The versioning info for this managed object.
     */
    public readonly versionContexts!: pulumi.Output<outputs.PartnerintegrationInventoryVersionContext[]>;

    /**
     * Create a PartnerintegrationInventory resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PartnerintegrationInventoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PartnerintegrationInventoryArgs | PartnerintegrationInventoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PartnerintegrationInventoryState | undefined;
            resourceInputs["accountMoid"] = state ? state.accountMoid : undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["additionalProperties"] = state ? state.additionalProperties : undefined;
            resourceInputs["ancestors"] = state ? state.ancestors : undefined;
            resourceInputs["buildFlags"] = state ? state.buildFlags : undefined;
            resourceInputs["buildStartTime"] = state ? state.buildStartTime : undefined;
            resourceInputs["buildStatus"] = state ? state.buildStatus : undefined;
            resourceInputs["classId"] = state ? state.classId : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["deployStartTime"] = state ? state.deployStartTime : undefined;
            resourceInputs["deployStatus"] = state ? state.deployStatus : undefined;
            resourceInputs["docIssues"] = state ? state.docIssues : undefined;
            resourceInputs["domainGroupMoid"] = state ? state.domainGroupMoid : undefined;
            resourceInputs["etls"] = state ? state.etls : undefined;
            resourceInputs["imageName"] = state ? state.imageName : undefined;
            resourceInputs["logs"] = state ? state.logs : undefined;
            resourceInputs["metrics"] = state ? state.metrics : undefined;
            resourceInputs["modTime"] = state ? state.modTime : undefined;
            resourceInputs["models"] = state ? state.models : undefined;
            resourceInputs["moid"] = state ? state.moid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objectType"] = state ? state.objectType : undefined;
            resourceInputs["organizations"] = state ? state.organizations : undefined;
            resourceInputs["owners"] = state ? state.owners : undefined;
            resourceInputs["parents"] = state ? state.parents : undefined;
            resourceInputs["permissionResources"] = state ? state.permissionResources : undefined;
            resourceInputs["pythonSdkUrl"] = state ? state.pythonSdkUrl : undefined;
            resourceInputs["sharedScope"] = state ? state.sharedScope : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["versionContexts"] = state ? state.versionContexts : undefined;
        } else {
            const args = argsOrState as PartnerintegrationInventoryArgs | undefined;
            resourceInputs["accountMoid"] = args ? args.accountMoid : undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["additionalProperties"] = args ? args.additionalProperties : undefined;
            resourceInputs["ancestors"] = args ? args.ancestors : undefined;
            resourceInputs["buildFlags"] = args ? args.buildFlags : undefined;
            resourceInputs["buildStartTime"] = args ? args.buildStartTime : undefined;
            resourceInputs["buildStatus"] = args ? args.buildStatus : undefined;
            resourceInputs["classId"] = args ? args.classId : undefined;
            resourceInputs["createTime"] = args ? args.createTime : undefined;
            resourceInputs["deployStartTime"] = args ? args.deployStartTime : undefined;
            resourceInputs["deployStatus"] = args ? args.deployStatus : undefined;
            resourceInputs["docIssues"] = args ? args.docIssues : undefined;
            resourceInputs["domainGroupMoid"] = args ? args.domainGroupMoid : undefined;
            resourceInputs["etls"] = args ? args.etls : undefined;
            resourceInputs["imageName"] = args ? args.imageName : undefined;
            resourceInputs["logs"] = args ? args.logs : undefined;
            resourceInputs["metrics"] = args ? args.metrics : undefined;
            resourceInputs["modTime"] = args ? args.modTime : undefined;
            resourceInputs["models"] = args ? args.models : undefined;
            resourceInputs["moid"] = args ? args.moid : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["objectType"] = args ? args.objectType : undefined;
            resourceInputs["organizations"] = args ? args.organizations : undefined;
            resourceInputs["owners"] = args ? args.owners : undefined;
            resourceInputs["parents"] = args ? args.parents : undefined;
            resourceInputs["permissionResources"] = args ? args.permissionResources : undefined;
            resourceInputs["pythonSdkUrl"] = args ? args.pythonSdkUrl : undefined;
            resourceInputs["sharedScope"] = args ? args.sharedScope : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["versionContexts"] = args ? args.versionContexts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PartnerintegrationInventory.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PartnerintegrationInventory resources.
 */
export interface PartnerintegrationInventoryState {
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    /**
     * Action to be performed on the inventory collection. * `None` - Default Value of the action, i.e. do nothing. * `Build` -
     * Build the inventory service image. * `Deploy` - Deploy the inventory service on the appliance.
     */
    action?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.PartnerintegrationInventoryAncestor>[]>;
    /**
     * Addtional flags to control build action.
     */
    buildFlags?: pulumi.Input<string>;
    /**
     * Time when build was triggered.
     */
    buildStartTime?: pulumi.Input<string>;
    /**
     * Status of build for inventory collection. * `None` - Default value of the status. i.e. done nothing. *
     * `BackendInProgress` - The backend build is in progress. * `BackendFailed` - The backend build has failed. *
     * `MetricsCollectorBackendInProgress` - The Metrics Collector backend build is in progress. *
     * `MetricsCollectorBackendFailed` - The Metrics Collector backend build has failed. * `DockerInProgress` - The docker
     * build is in progress. * `DockerFailed` - The docker build has failed. * `UiInProgress` - The UI build is in progress. *
     * `UiFailed` - The inventory UI build has failed. * `MetricsCollectorUiInProgress` - The Metrics Collector UI build is in
     * progress. * `MetricsCollectorUiFailed` - The Metrics Collector UI build has failed. *
     * `MetricsCollectorDependentBackendInProgress` - The Metrics Collector dependent backend build is in progress. *
     * `MetricsCollectorDependentBackendFailed` - The Metrics Collector dependent backend build has failed. *
     * `MetricsCollectorDependentDockerInProgress` - The Metrics Collector dependent docker build is in progress. *
     * `MetricsCollectorDependentDockerFailed` - The Metrics Collector dependent docker build has failed. * `ApidocsInProgress`
     * - The apidocs build is in progress. * `ApidocsFailed` - The apidocs build has failed. * `Completed` - The operation
     * completed successfully.
     */
    buildStatus?: pulumi.Input<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Time when deploy was triggered.
     */
    deployStartTime?: pulumi.Input<string>;
    /**
     * Status of deployment of the inventory microservice. * `None` - Default value of the status. i.e. done nothing. *
     * `Completed` - The operation completed successfully. * `Failed` - The deploy operation failed.
     */
    deployStatus?: pulumi.Input<string>;
    /**
     * An array of relationships to partnerintegrationDocIssues resources.
     */
    docIssues?: pulumi.Input<pulumi.Input<inputs.PartnerintegrationInventoryDocIssue>[]>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    /**
     * An array of relationships to partnerintegrationEtl resources.
     */
    etls?: pulumi.Input<pulumi.Input<inputs.PartnerintegrationInventoryEtl>[]>;
    /**
     * Name of the docker image that is built.
     */
    imageName?: pulumi.Input<string>;
    /**
     * An array of relationships to partnerintegrationLogs resources.
     */
    logs?: pulumi.Input<pulumi.Input<inputs.PartnerintegrationInventoryLog>[]>;
    /**
     * A reference to a partnerintegrationMetrics resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    metrics?: pulumi.Input<pulumi.Input<inputs.PartnerintegrationInventoryMetric>[]>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * An array of relationships to partnerintegrationModel resources.
     */
    models?: pulumi.Input<pulumi.Input<inputs.PartnerintegrationInventoryModel>[]>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * Name of the inventory collection.
     */
    name?: pulumi.Input<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    /**
     * A reference to a organizationOrganization resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    organizations?: pulumi.Input<pulumi.Input<inputs.PartnerintegrationInventoryOrganization>[]>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.PartnerintegrationInventoryParent>[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.PartnerintegrationInventoryPermissionResource>[]>;
    /**
     * Link to the generated v3 python SDK.
     */
    pythonSdkUrl?: pulumi.Input<string>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.PartnerintegrationInventoryTag>[]>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.PartnerintegrationInventoryVersionContext>[]>;
}

/**
 * The set of arguments for constructing a PartnerintegrationInventory resource.
 */
export interface PartnerintegrationInventoryArgs {
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    /**
     * Action to be performed on the inventory collection. * `None` - Default Value of the action, i.e. do nothing. * `Build` -
     * Build the inventory service image. * `Deploy` - Deploy the inventory service on the appliance.
     */
    action?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.PartnerintegrationInventoryAncestor>[]>;
    /**
     * Addtional flags to control build action.
     */
    buildFlags?: pulumi.Input<string>;
    /**
     * Time when build was triggered.
     */
    buildStartTime?: pulumi.Input<string>;
    /**
     * Status of build for inventory collection. * `None` - Default value of the status. i.e. done nothing. *
     * `BackendInProgress` - The backend build is in progress. * `BackendFailed` - The backend build has failed. *
     * `MetricsCollectorBackendInProgress` - The Metrics Collector backend build is in progress. *
     * `MetricsCollectorBackendFailed` - The Metrics Collector backend build has failed. * `DockerInProgress` - The docker
     * build is in progress. * `DockerFailed` - The docker build has failed. * `UiInProgress` - The UI build is in progress. *
     * `UiFailed` - The inventory UI build has failed. * `MetricsCollectorUiInProgress` - The Metrics Collector UI build is in
     * progress. * `MetricsCollectorUiFailed` - The Metrics Collector UI build has failed. *
     * `MetricsCollectorDependentBackendInProgress` - The Metrics Collector dependent backend build is in progress. *
     * `MetricsCollectorDependentBackendFailed` - The Metrics Collector dependent backend build has failed. *
     * `MetricsCollectorDependentDockerInProgress` - The Metrics Collector dependent docker build is in progress. *
     * `MetricsCollectorDependentDockerFailed` - The Metrics Collector dependent docker build has failed. * `ApidocsInProgress`
     * - The apidocs build is in progress. * `ApidocsFailed` - The apidocs build has failed. * `Completed` - The operation
     * completed successfully.
     */
    buildStatus?: pulumi.Input<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Time when deploy was triggered.
     */
    deployStartTime?: pulumi.Input<string>;
    /**
     * Status of deployment of the inventory microservice. * `None` - Default value of the status. i.e. done nothing. *
     * `Completed` - The operation completed successfully. * `Failed` - The deploy operation failed.
     */
    deployStatus?: pulumi.Input<string>;
    /**
     * An array of relationships to partnerintegrationDocIssues resources.
     */
    docIssues?: pulumi.Input<pulumi.Input<inputs.PartnerintegrationInventoryDocIssue>[]>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    /**
     * An array of relationships to partnerintegrationEtl resources.
     */
    etls?: pulumi.Input<pulumi.Input<inputs.PartnerintegrationInventoryEtl>[]>;
    /**
     * Name of the docker image that is built.
     */
    imageName?: pulumi.Input<string>;
    /**
     * An array of relationships to partnerintegrationLogs resources.
     */
    logs?: pulumi.Input<pulumi.Input<inputs.PartnerintegrationInventoryLog>[]>;
    /**
     * A reference to a partnerintegrationMetrics resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    metrics?: pulumi.Input<pulumi.Input<inputs.PartnerintegrationInventoryMetric>[]>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * An array of relationships to partnerintegrationModel resources.
     */
    models?: pulumi.Input<pulumi.Input<inputs.PartnerintegrationInventoryModel>[]>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * Name of the inventory collection.
     */
    name?: pulumi.Input<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    /**
     * A reference to a organizationOrganization resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    organizations?: pulumi.Input<pulumi.Input<inputs.PartnerintegrationInventoryOrganization>[]>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.PartnerintegrationInventoryParent>[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.PartnerintegrationInventoryPermissionResource>[]>;
    /**
     * Link to the generated v3 python SDK.
     */
    pythonSdkUrl?: pulumi.Input<string>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.PartnerintegrationInventoryTag>[]>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.PartnerintegrationInventoryVersionContext>[]>;
}
