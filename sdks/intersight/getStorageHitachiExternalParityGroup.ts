// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageHitachiExternalParityGroup(args?: GetStorageHitachiExternalParityGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageHitachiExternalParityGroupResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageHitachiExternalParityGroup:getStorageHitachiExternalParityGroup", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "allocatableOpenVolumeCapacity": args.allocatableOpenVolumeCapacity,
        "allocatedOpenVolumeCapacity": args.allocatedOpenVolumeCapacity,
        "ancestors": args.ancestors,
        "array": args.array,
        "availableVolumeCapacity": args.availableVolumeCapacity,
        "classId": args.classId,
        "clprId": args.clprId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "emulationType": args.emulationType,
        "externalProductId": args.externalProductId,
        "id": args.id,
        "largestAvailableCapacity": args.largestAvailableCapacity,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "reservedOpenVolumeCapacity": args.reservedOpenVolumeCapacity,
        "sharedScope": args.sharedScope,
        "spaces": args.spaces,
        "storageUtilization": args.storageUtilization,
        "tags": args.tags,
        "totalOpenVolumeCapacity": args.totalOpenVolumeCapacity,
        "unallocatedOpenVolumeCapacity": args.unallocatedOpenVolumeCapacity,
        "usedCapacityRate": args.usedCapacityRate,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageHitachiExternalParityGroup.
 */
export interface GetStorageHitachiExternalParityGroupArgs {
    accountMoid?: string;
    additionalProperties?: string;
    allocatableOpenVolumeCapacity?: number;
    allocatedOpenVolumeCapacity?: number;
    ancestors?: inputs.GetStorageHitachiExternalParityGroupAncestor[];
    array?: inputs.GetStorageHitachiExternalParityGroupArray;
    availableVolumeCapacity?: number;
    classId?: string;
    clprId?: number;
    createTime?: string;
    domainGroupMoid?: string;
    emulationType?: string;
    externalProductId?: string;
    id?: string;
    largestAvailableCapacity?: number;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageHitachiExternalParityGroupParent;
    permissionResources?: inputs.GetStorageHitachiExternalParityGroupPermissionResource[];
    registeredDevice?: inputs.GetStorageHitachiExternalParityGroupRegisteredDevice;
    reservedOpenVolumeCapacity?: number;
    sharedScope?: string;
    spaces?: inputs.GetStorageHitachiExternalParityGroupSpace[];
    storageUtilization?: inputs.GetStorageHitachiExternalParityGroupStorageUtilization;
    tags?: inputs.GetStorageHitachiExternalParityGroupTag[];
    totalOpenVolumeCapacity?: number;
    unallocatedOpenVolumeCapacity?: number;
    usedCapacityRate?: number;
    versionContext?: inputs.GetStorageHitachiExternalParityGroupVersionContext;
}

/**
 * A collection of values returned by getStorageHitachiExternalParityGroup.
 */
export interface GetStorageHitachiExternalParityGroupResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly allocatableOpenVolumeCapacity?: number;
    readonly allocatedOpenVolumeCapacity?: number;
    readonly ancestors?: outputs.GetStorageHitachiExternalParityGroupAncestor[];
    readonly array?: outputs.GetStorageHitachiExternalParityGroupArray;
    readonly availableVolumeCapacity?: number;
    readonly classId?: string;
    readonly clprId?: number;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly emulationType?: string;
    readonly externalProductId?: string;
    readonly id: string;
    readonly largestAvailableCapacity?: number;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageHitachiExternalParityGroupParent;
    readonly permissionResources?: outputs.GetStorageHitachiExternalParityGroupPermissionResource[];
    readonly registeredDevice?: outputs.GetStorageHitachiExternalParityGroupRegisteredDevice;
    readonly reservedOpenVolumeCapacity?: number;
    readonly results: outputs.GetStorageHitachiExternalParityGroupResult[];
    readonly sharedScope?: string;
    readonly spaces?: outputs.GetStorageHitachiExternalParityGroupSpace[];
    readonly storageUtilization?: outputs.GetStorageHitachiExternalParityGroupStorageUtilization;
    readonly tags?: outputs.GetStorageHitachiExternalParityGroupTag[];
    readonly totalOpenVolumeCapacity?: number;
    readonly unallocatedOpenVolumeCapacity?: number;
    readonly usedCapacityRate?: number;
    readonly versionContext?: outputs.GetStorageHitachiExternalParityGroupVersionContext;
}
export function getStorageHitachiExternalParityGroupOutput(args?: GetStorageHitachiExternalParityGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageHitachiExternalParityGroupResult> {
    return pulumi.output(args).apply((a: any) => getStorageHitachiExternalParityGroup(a, opts))
}

/**
 * A collection of arguments for invoking getStorageHitachiExternalParityGroup.
 */
export interface GetStorageHitachiExternalParityGroupOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    allocatableOpenVolumeCapacity?: pulumi.Input<number>;
    allocatedOpenVolumeCapacity?: pulumi.Input<number>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiExternalParityGroupAncestorArgs>[]>;
    array?: pulumi.Input<inputs.GetStorageHitachiExternalParityGroupArrayArgs>;
    availableVolumeCapacity?: pulumi.Input<number>;
    classId?: pulumi.Input<string>;
    clprId?: pulumi.Input<number>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    emulationType?: pulumi.Input<string>;
    externalProductId?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    largestAvailableCapacity?: pulumi.Input<number>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageHitachiExternalParityGroupParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiExternalParityGroupPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetStorageHitachiExternalParityGroupRegisteredDeviceArgs>;
    reservedOpenVolumeCapacity?: pulumi.Input<number>;
    sharedScope?: pulumi.Input<string>;
    spaces?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiExternalParityGroupSpaceArgs>[]>;
    storageUtilization?: pulumi.Input<inputs.GetStorageHitachiExternalParityGroupStorageUtilizationArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiExternalParityGroupTagArgs>[]>;
    totalOpenVolumeCapacity?: pulumi.Input<number>;
    unallocatedOpenVolumeCapacity?: pulumi.Input<number>;
    usedCapacityRate?: pulumi.Input<number>;
    versionContext?: pulumi.Input<inputs.GetStorageHitachiExternalParityGroupVersionContextArgs>;
}
