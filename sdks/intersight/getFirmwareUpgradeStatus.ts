// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getFirmwareUpgradeStatus(args?: GetFirmwareUpgradeStatusArgs, opts?: pulumi.InvokeOptions): Promise<GetFirmwareUpgradeStatusResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getFirmwareUpgradeStatus:getFirmwareUpgradeStatus", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "checksum": args.checksum,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "downloadError": args.downloadError,
        "downloadMessage": args.downloadMessage,
        "downloadPercentage": args.downloadPercentage,
        "downloadProgress": args.downloadProgress,
        "downloadRetries": args.downloadRetries,
        "downloadStage": args.downloadStage,
        "epPowerStatus": args.epPowerStatus,
        "id": args.id,
        "initialPowerStatus": args.initialPowerStatus,
        "isCdnDisabled": args.isCdnDisabled,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "overallError": args.overallError,
        "overallPercentage": args.overallPercentage,
        "overallstatus": args.overallstatus,
        "owners": args.owners,
        "parent": args.parent,
        "pendingType": args.pendingType,
        "permissionResources": args.permissionResources,
        "sdCardDownloadError": args.sdCardDownloadError,
        "sharedScope": args.sharedScope,
        "sourceFirmwareVersion": args.sourceFirmwareVersion,
        "tags": args.tags,
        "targetFirmwareVersion": args.targetFirmwareVersion,
        "upgrade": args.upgrade,
        "versionContext": args.versionContext,
        "workflow": args.workflow,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFirmwareUpgradeStatus.
 */
export interface GetFirmwareUpgradeStatusArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetFirmwareUpgradeStatusAncestor[];
    checksum?: inputs.GetFirmwareUpgradeStatusChecksum;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    downloadError?: string;
    downloadMessage?: string;
    downloadPercentage?: number;
    downloadProgress?: number;
    downloadRetries?: number;
    downloadStage?: string;
    epPowerStatus?: string;
    id?: string;
    initialPowerStatus?: string;
    isCdnDisabled?: boolean;
    modTime?: string;
    moid?: string;
    objectType?: string;
    overallError?: string;
    overallPercentage?: number;
    overallstatus?: string;
    owners?: string[];
    parent?: inputs.GetFirmwareUpgradeStatusParent;
    pendingType?: string;
    permissionResources?: inputs.GetFirmwareUpgradeStatusPermissionResource[];
    sdCardDownloadError?: string;
    sharedScope?: string;
    sourceFirmwareVersion?: string;
    tags?: inputs.GetFirmwareUpgradeStatusTag[];
    targetFirmwareVersion?: string;
    upgrade?: inputs.GetFirmwareUpgradeStatusUpgrade;
    versionContext?: inputs.GetFirmwareUpgradeStatusVersionContext;
    workflow?: inputs.GetFirmwareUpgradeStatusWorkflow;
}

/**
 * A collection of values returned by getFirmwareUpgradeStatus.
 */
export interface GetFirmwareUpgradeStatusResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetFirmwareUpgradeStatusAncestor[];
    readonly checksum?: outputs.GetFirmwareUpgradeStatusChecksum;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly downloadError?: string;
    readonly downloadMessage?: string;
    readonly downloadPercentage?: number;
    readonly downloadProgress?: number;
    readonly downloadRetries?: number;
    readonly downloadStage?: string;
    readonly epPowerStatus?: string;
    readonly id: string;
    readonly initialPowerStatus?: string;
    readonly isCdnDisabled?: boolean;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly overallError?: string;
    readonly overallPercentage?: number;
    readonly overallstatus?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetFirmwareUpgradeStatusParent;
    readonly pendingType?: string;
    readonly permissionResources?: outputs.GetFirmwareUpgradeStatusPermissionResource[];
    readonly results: outputs.GetFirmwareUpgradeStatusResult[];
    readonly sdCardDownloadError?: string;
    readonly sharedScope?: string;
    readonly sourceFirmwareVersion?: string;
    readonly tags?: outputs.GetFirmwareUpgradeStatusTag[];
    readonly targetFirmwareVersion?: string;
    readonly upgrade?: outputs.GetFirmwareUpgradeStatusUpgrade;
    readonly versionContext?: outputs.GetFirmwareUpgradeStatusVersionContext;
    readonly workflow?: outputs.GetFirmwareUpgradeStatusWorkflow;
}
export function getFirmwareUpgradeStatusOutput(args?: GetFirmwareUpgradeStatusOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFirmwareUpgradeStatusResult> {
    return pulumi.output(args).apply((a: any) => getFirmwareUpgradeStatus(a, opts))
}

/**
 * A collection of arguments for invoking getFirmwareUpgradeStatus.
 */
export interface GetFirmwareUpgradeStatusOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetFirmwareUpgradeStatusAncestorArgs>[]>;
    checksum?: pulumi.Input<inputs.GetFirmwareUpgradeStatusChecksumArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    downloadError?: pulumi.Input<string>;
    downloadMessage?: pulumi.Input<string>;
    downloadPercentage?: pulumi.Input<number>;
    downloadProgress?: pulumi.Input<number>;
    downloadRetries?: pulumi.Input<number>;
    downloadStage?: pulumi.Input<string>;
    epPowerStatus?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    initialPowerStatus?: pulumi.Input<string>;
    isCdnDisabled?: pulumi.Input<boolean>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    overallError?: pulumi.Input<string>;
    overallPercentage?: pulumi.Input<number>;
    overallstatus?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetFirmwareUpgradeStatusParentArgs>;
    pendingType?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetFirmwareUpgradeStatusPermissionResourceArgs>[]>;
    sdCardDownloadError?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    sourceFirmwareVersion?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetFirmwareUpgradeStatusTagArgs>[]>;
    targetFirmwareVersion?: pulumi.Input<string>;
    upgrade?: pulumi.Input<inputs.GetFirmwareUpgradeStatusUpgradeArgs>;
    versionContext?: pulumi.Input<inputs.GetFirmwareUpgradeStatusVersionContextArgs>;
    workflow?: pulumi.Input<inputs.GetFirmwareUpgradeStatusWorkflowArgs>;
}
