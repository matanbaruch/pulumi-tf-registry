// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageNetAppVolumeSnapshot(args?: GetStorageNetAppVolumeSnapshotArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageNetAppVolumeSnapshotResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageNetAppVolumeSnapshot:getStorageNetAppVolumeSnapshot", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "array": args.array,
        "classId": args.classId,
        "createTime": args.createTime,
        "createdTime": args.createdTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "nrSource": args.nrSource,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "protectionGroupName": args.protectionGroupName,
        "sharedScope": args.sharedScope,
        "size": args.size,
        "storageContainer": args.storageContainer,
        "tags": args.tags,
        "uuid": args.uuid,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageNetAppVolumeSnapshot.
 */
export interface GetStorageNetAppVolumeSnapshotArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageNetAppVolumeSnapshotAncestor[];
    array?: inputs.GetStorageNetAppVolumeSnapshotArray;
    classId?: string;
    createTime?: string;
    createdTime?: string;
    domainGroupMoid?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    nrSource?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageNetAppVolumeSnapshotParent;
    permissionResources?: inputs.GetStorageNetAppVolumeSnapshotPermissionResource[];
    protectionGroupName?: string;
    sharedScope?: string;
    size?: number;
    storageContainer?: inputs.GetStorageNetAppVolumeSnapshotStorageContainer;
    tags?: inputs.GetStorageNetAppVolumeSnapshotTag[];
    uuid?: string;
    versionContext?: inputs.GetStorageNetAppVolumeSnapshotVersionContext;
}

/**
 * A collection of values returned by getStorageNetAppVolumeSnapshot.
 */
export interface GetStorageNetAppVolumeSnapshotResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageNetAppVolumeSnapshotAncestor[];
    readonly array?: outputs.GetStorageNetAppVolumeSnapshotArray;
    readonly classId?: string;
    readonly createTime?: string;
    readonly createdTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nrSource?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageNetAppVolumeSnapshotParent;
    readonly permissionResources?: outputs.GetStorageNetAppVolumeSnapshotPermissionResource[];
    readonly protectionGroupName?: string;
    readonly results: outputs.GetStorageNetAppVolumeSnapshotResult[];
    readonly sharedScope?: string;
    readonly size?: number;
    readonly storageContainer?: outputs.GetStorageNetAppVolumeSnapshotStorageContainer;
    readonly tags?: outputs.GetStorageNetAppVolumeSnapshotTag[];
    readonly uuid?: string;
    readonly versionContext?: outputs.GetStorageNetAppVolumeSnapshotVersionContext;
}
export function getStorageNetAppVolumeSnapshotOutput(args?: GetStorageNetAppVolumeSnapshotOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageNetAppVolumeSnapshotResult> {
    return pulumi.output(args).apply((a: any) => getStorageNetAppVolumeSnapshot(a, opts))
}

/**
 * A collection of arguments for invoking getStorageNetAppVolumeSnapshot.
 */
export interface GetStorageNetAppVolumeSnapshotOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppVolumeSnapshotAncestorArgs>[]>;
    array?: pulumi.Input<inputs.GetStorageNetAppVolumeSnapshotArrayArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    createdTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nrSource?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageNetAppVolumeSnapshotParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppVolumeSnapshotPermissionResourceArgs>[]>;
    protectionGroupName?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    storageContainer?: pulumi.Input<inputs.GetStorageNetAppVolumeSnapshotStorageContainerArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppVolumeSnapshotTagArgs>[]>;
    uuid?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetStorageNetAppVolumeSnapshotVersionContextArgs>;
}
