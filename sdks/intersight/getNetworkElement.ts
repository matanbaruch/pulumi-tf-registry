// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNetworkElement(args?: GetNetworkElementArgs, opts?: pulumi.InvokeOptions): Promise<GetNetworkElementResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getNetworkElement:getNetworkElement", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "adminEvacState": args.adminEvacState,
        "adminInbandInterfaceState": args.adminInbandInterfaceState,
        "alarmSummary": args.alarmSummary,
        "ancestors": args.ancestors,
        "availableMemory": args.availableMemory,
        "cards": args.cards,
        "cdpNeighbors": args.cdpNeighbors,
        "chassis": args.chassis,
        "classId": args.classId,
        "confModTs": args.confModTs,
        "confModTsBackup": args.confModTsBackup,
        "connectionStatus": args.connectionStatus,
        "consoles": args.consoles,
        "createTime": args.createTime,
        "defaultDomain": args.defaultDomain,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "dns": args.dns,
        "domainGroupMoid": args.domainGroupMoid,
        "etherPortChannels": args.etherPortChannels,
        "ethernetMode": args.ethernetMode,
        "ethernetSwitchingMode": args.ethernetSwitchingMode,
        "fanmodules": args.fanmodules,
        "faultSummary": args.faultSummary,
        "fcMode": args.fcMode,
        "fcPortChannels": args.fcPortChannels,
        "fcSwitchingMode": args.fcSwitchingMode,
        "featureControls": args.featureControls,
        "fpgaUpgradeNeeded": args.fpgaUpgradeNeeded,
        "id": args.id,
        "inbandIpAddress": args.inbandIpAddress,
        "inbandIpGateway": args.inbandIpGateway,
        "inbandIpMask": args.inbandIpMask,
        "inbandVlan": args.inbandVlan,
        "interClusterLinkState": args.interClusterLinkState,
        "interfaceLists": args.interfaceLists,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "isUpgraded": args.isUpgraded,
        "licenseFiles": args.licenseFiles,
        "lldpNeighbors": args.lldpNeighbors,
        "locatorLed": args.locatorLed,
        "managementController": args.managementController,
        "managementEntity": args.managementEntity,
        "managementMode": args.managementMode,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "networkFcZoneInfo": args.networkFcZoneInfo,
        "networkVlanPortInfo": args.networkVlanPortInfo,
        "nrVersion": args.nrVersion,
        "ntpServers": args.ntpServers,
        "objectType": args.objectType,
        "operEvacState": args.operEvacState,
        "operability": args.operability,
        "outOfBandIpAddress": args.outOfBandIpAddress,
        "outOfBandIpGateway": args.outOfBandIpGateway,
        "outOfBandIpMask": args.outOfBandIpMask,
        "outOfBandIpv4Address": args.outOfBandIpv4Address,
        "outOfBandIpv4Gateway": args.outOfBandIpv4Gateway,
        "outOfBandIpv4Mask": args.outOfBandIpv4Mask,
        "outOfBandIpv6Address": args.outOfBandIpv6Address,
        "outOfBandIpv6Gateway": args.outOfBandIpv6Gateway,
        "outOfBandIpv6Prefix": args.outOfBandIpv6Prefix,
        "outOfBandMac": args.outOfBandMac,
        "owners": args.owners,
        "parent": args.parent,
        "partNumber": args.partNumber,
        "peerFirmwareOutOfSync": args.peerFirmwareOutOfSync,
        "permissionResources": args.permissionResources,
        "portMacBindings": args.portMacBindings,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "processorUnits": args.processorUnits,
        "psuses": args.psuses,
        "registeredDevice": args.registeredDevice,
        "reservedVlanStartId": args.reservedVlanStartId,
        "revision": args.revision,
        "rn": args.rn,
        "sensors": args.sensors,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "status": args.status,
        "storageItems": args.storageItems,
        "supervisorCards": args.supervisorCards,
        "switchId": args.switchId,
        "switchProfileName": args.switchProfileName,
        "switchType": args.switchType,
        "systemUpTime": args.systemUpTime,
        "tags": args.tags,
        "thermal": args.thermal,
        "topSystem": args.topSystem,
        "totalMemory": args.totalMemory,
        "ucsmRunningFirmware": args.ucsmRunningFirmware,
        "userLabel": args.userLabel,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
        "veths": args.veths,
        "vfcs": args.vfcs,
        "vpcDomain": args.vpcDomain,
        "vpcMembers": args.vpcMembers,
        "vpcPeers": args.vpcPeers,
        "vrves": args.vrves,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNetworkElement.
 */
export interface GetNetworkElementArgs {
    accountMoid?: string;
    additionalProperties?: string;
    adminEvacState?: string;
    adminInbandInterfaceState?: string;
    alarmSummary?: inputs.GetNetworkElementAlarmSummary;
    ancestors?: inputs.GetNetworkElementAncestor[];
    availableMemory?: string;
    cards?: inputs.GetNetworkElementCard[];
    cdpNeighbors?: inputs.GetNetworkElementCdpNeighbor[];
    chassis?: string;
    classId?: string;
    confModTs?: string;
    confModTsBackup?: string;
    connectionStatus?: string;
    consoles?: inputs.GetNetworkElementConsole[];
    createTime?: string;
    defaultDomain?: string;
    deviceMoId?: string;
    dn?: string;
    dns?: inputs.GetNetworkElementDn[];
    domainGroupMoid?: string;
    etherPortChannels?: inputs.GetNetworkElementEtherPortChannel[];
    ethernetMode?: string;
    ethernetSwitchingMode?: string;
    fanmodules?: inputs.GetNetworkElementFanmodule[];
    faultSummary?: number;
    fcMode?: string;
    fcPortChannels?: inputs.GetNetworkElementFcPortChannel[];
    fcSwitchingMode?: string;
    featureControls?: inputs.GetNetworkElementFeatureControl[];
    fpgaUpgradeNeeded?: boolean;
    id?: string;
    inbandIpAddress?: string;
    inbandIpGateway?: string;
    inbandIpMask?: string;
    inbandVlan?: number;
    interClusterLinkState?: string;
    interfaceLists?: inputs.GetNetworkElementInterfaceList[];
    inventoryDeviceInfo?: inputs.GetNetworkElementInventoryDeviceInfo;
    isUpgraded?: boolean;
    licenseFiles?: inputs.GetNetworkElementLicenseFile[];
    lldpNeighbors?: inputs.GetNetworkElementLldpNeighbor[];
    locatorLed?: inputs.GetNetworkElementLocatorLed;
    managementController?: inputs.GetNetworkElementManagementController;
    managementEntity?: inputs.GetNetworkElementManagementEntity;
    managementMode?: string;
    modTime?: string;
    model?: string;
    moid?: string;
    networkFcZoneInfo?: inputs.GetNetworkElementNetworkFcZoneInfo;
    networkVlanPortInfo?: inputs.GetNetworkElementNetworkVlanPortInfo;
    nrVersion?: string;
    ntpServers?: inputs.GetNetworkElementNtpServer[];
    objectType?: string;
    operEvacState?: string;
    operability?: string;
    outOfBandIpAddress?: string;
    outOfBandIpGateway?: string;
    outOfBandIpMask?: string;
    outOfBandIpv4Address?: string;
    outOfBandIpv4Gateway?: string;
    outOfBandIpv4Mask?: string;
    outOfBandIpv6Address?: string;
    outOfBandIpv6Gateway?: string;
    outOfBandIpv6Prefix?: string;
    outOfBandMac?: string;
    owners?: string[];
    parent?: inputs.GetNetworkElementParent;
    partNumber?: string;
    peerFirmwareOutOfSync?: boolean;
    permissionResources?: inputs.GetNetworkElementPermissionResource[];
    portMacBindings?: inputs.GetNetworkElementPortMacBinding[];
    presence?: string;
    previousFru?: inputs.GetNetworkElementPreviousFru;
    processorUnits?: inputs.GetNetworkElementProcessorUnit[];
    psuses?: inputs.GetNetworkElementPsus[];
    registeredDevice?: inputs.GetNetworkElementRegisteredDevice;
    reservedVlanStartId?: number;
    revision?: string;
    rn?: string;
    sensors?: inputs.GetNetworkElementSensor[];
    serial?: string;
    sharedScope?: string;
    status?: string;
    storageItems?: inputs.GetNetworkElementStorageItem[];
    supervisorCards?: inputs.GetNetworkElementSupervisorCard[];
    switchId?: string;
    switchProfileName?: string;
    switchType?: string;
    systemUpTime?: string;
    tags?: inputs.GetNetworkElementTag[];
    thermal?: string;
    topSystem?: inputs.GetNetworkElementTopSystem;
    totalMemory?: number;
    ucsmRunningFirmware?: inputs.GetNetworkElementUcsmRunningFirmware;
    userLabel?: string;
    vendor?: string;
    versionContext?: inputs.GetNetworkElementVersionContext;
    veths?: inputs.GetNetworkElementVeth[];
    vfcs?: inputs.GetNetworkElementVfc[];
    vpcDomain?: inputs.GetNetworkElementVpcDomain;
    vpcMembers?: inputs.GetNetworkElementVpcMember[];
    vpcPeers?: inputs.GetNetworkElementVpcPeer[];
    vrves?: inputs.GetNetworkElementVrf[];
}

/**
 * A collection of values returned by getNetworkElement.
 */
export interface GetNetworkElementResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly adminEvacState?: string;
    readonly adminInbandInterfaceState?: string;
    readonly alarmSummary?: outputs.GetNetworkElementAlarmSummary;
    readonly ancestors?: outputs.GetNetworkElementAncestor[];
    readonly availableMemory?: string;
    readonly cards?: outputs.GetNetworkElementCard[];
    readonly cdpNeighbors?: outputs.GetNetworkElementCdpNeighbor[];
    readonly chassis?: string;
    readonly classId?: string;
    readonly confModTs?: string;
    readonly confModTsBackup?: string;
    readonly connectionStatus?: string;
    readonly consoles?: outputs.GetNetworkElementConsole[];
    readonly createTime?: string;
    readonly defaultDomain?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly dns?: outputs.GetNetworkElementDn[];
    readonly domainGroupMoid?: string;
    readonly etherPortChannels?: outputs.GetNetworkElementEtherPortChannel[];
    readonly ethernetMode?: string;
    readonly ethernetSwitchingMode?: string;
    readonly fanmodules?: outputs.GetNetworkElementFanmodule[];
    readonly faultSummary?: number;
    readonly fcMode?: string;
    readonly fcPortChannels?: outputs.GetNetworkElementFcPortChannel[];
    readonly fcSwitchingMode?: string;
    readonly featureControls?: outputs.GetNetworkElementFeatureControl[];
    readonly fpgaUpgradeNeeded?: boolean;
    readonly id: string;
    readonly inbandIpAddress?: string;
    readonly inbandIpGateway?: string;
    readonly inbandIpMask?: string;
    readonly inbandVlan?: number;
    readonly interClusterLinkState?: string;
    readonly interfaceLists?: outputs.GetNetworkElementInterfaceList[];
    readonly inventoryDeviceInfo?: outputs.GetNetworkElementInventoryDeviceInfo;
    readonly isUpgraded?: boolean;
    readonly licenseFiles?: outputs.GetNetworkElementLicenseFile[];
    readonly lldpNeighbors?: outputs.GetNetworkElementLldpNeighbor[];
    readonly locatorLed?: outputs.GetNetworkElementLocatorLed;
    readonly managementController?: outputs.GetNetworkElementManagementController;
    readonly managementEntity?: outputs.GetNetworkElementManagementEntity;
    readonly managementMode?: string;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly networkFcZoneInfo?: outputs.GetNetworkElementNetworkFcZoneInfo;
    readonly networkVlanPortInfo?: outputs.GetNetworkElementNetworkVlanPortInfo;
    readonly nrVersion?: string;
    readonly ntpServers?: outputs.GetNetworkElementNtpServer[];
    readonly objectType?: string;
    readonly operEvacState?: string;
    readonly operability?: string;
    readonly outOfBandIpAddress?: string;
    readonly outOfBandIpGateway?: string;
    readonly outOfBandIpMask?: string;
    readonly outOfBandIpv4Address?: string;
    readonly outOfBandIpv4Gateway?: string;
    readonly outOfBandIpv4Mask?: string;
    readonly outOfBandIpv6Address?: string;
    readonly outOfBandIpv6Gateway?: string;
    readonly outOfBandIpv6Prefix?: string;
    readonly outOfBandMac?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetNetworkElementParent;
    readonly partNumber?: string;
    readonly peerFirmwareOutOfSync?: boolean;
    readonly permissionResources?: outputs.GetNetworkElementPermissionResource[];
    readonly portMacBindings?: outputs.GetNetworkElementPortMacBinding[];
    readonly presence?: string;
    readonly previousFru?: outputs.GetNetworkElementPreviousFru;
    readonly processorUnits?: outputs.GetNetworkElementProcessorUnit[];
    readonly psuses?: outputs.GetNetworkElementPsus[];
    readonly registeredDevice?: outputs.GetNetworkElementRegisteredDevice;
    readonly reservedVlanStartId?: number;
    readonly results: outputs.GetNetworkElementResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly sensors?: outputs.GetNetworkElementSensor[];
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly status?: string;
    readonly storageItems?: outputs.GetNetworkElementStorageItem[];
    readonly supervisorCards?: outputs.GetNetworkElementSupervisorCard[];
    readonly switchId?: string;
    readonly switchProfileName?: string;
    readonly switchType?: string;
    readonly systemUpTime?: string;
    readonly tags?: outputs.GetNetworkElementTag[];
    readonly thermal?: string;
    readonly topSystem?: outputs.GetNetworkElementTopSystem;
    readonly totalMemory?: number;
    readonly ucsmRunningFirmware?: outputs.GetNetworkElementUcsmRunningFirmware;
    readonly userLabel?: string;
    readonly vendor?: string;
    readonly versionContext?: outputs.GetNetworkElementVersionContext;
    readonly veths?: outputs.GetNetworkElementVeth[];
    readonly vfcs?: outputs.GetNetworkElementVfc[];
    readonly vpcDomain?: outputs.GetNetworkElementVpcDomain;
    readonly vpcMembers?: outputs.GetNetworkElementVpcMember[];
    readonly vpcPeers?: outputs.GetNetworkElementVpcPeer[];
    readonly vrves?: outputs.GetNetworkElementVrf[];
}
export function getNetworkElementOutput(args?: GetNetworkElementOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkElementResult> {
    return pulumi.output(args).apply((a: any) => getNetworkElement(a, opts))
}

/**
 * A collection of arguments for invoking getNetworkElement.
 */
export interface GetNetworkElementOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    adminEvacState?: pulumi.Input<string>;
    adminInbandInterfaceState?: pulumi.Input<string>;
    alarmSummary?: pulumi.Input<inputs.GetNetworkElementAlarmSummaryArgs>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementAncestorArgs>[]>;
    availableMemory?: pulumi.Input<string>;
    cards?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementCardArgs>[]>;
    cdpNeighbors?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementCdpNeighborArgs>[]>;
    chassis?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    confModTs?: pulumi.Input<string>;
    confModTsBackup?: pulumi.Input<string>;
    connectionStatus?: pulumi.Input<string>;
    consoles?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementConsoleArgs>[]>;
    createTime?: pulumi.Input<string>;
    defaultDomain?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    dns?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementDnArgs>[]>;
    domainGroupMoid?: pulumi.Input<string>;
    etherPortChannels?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementEtherPortChannelArgs>[]>;
    ethernetMode?: pulumi.Input<string>;
    ethernetSwitchingMode?: pulumi.Input<string>;
    fanmodules?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementFanmoduleArgs>[]>;
    faultSummary?: pulumi.Input<number>;
    fcMode?: pulumi.Input<string>;
    fcPortChannels?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementFcPortChannelArgs>[]>;
    fcSwitchingMode?: pulumi.Input<string>;
    featureControls?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementFeatureControlArgs>[]>;
    fpgaUpgradeNeeded?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    inbandIpAddress?: pulumi.Input<string>;
    inbandIpGateway?: pulumi.Input<string>;
    inbandIpMask?: pulumi.Input<string>;
    inbandVlan?: pulumi.Input<number>;
    interClusterLinkState?: pulumi.Input<string>;
    interfaceLists?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementInterfaceListArgs>[]>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetNetworkElementInventoryDeviceInfoArgs>;
    isUpgraded?: pulumi.Input<boolean>;
    licenseFiles?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementLicenseFileArgs>[]>;
    lldpNeighbors?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementLldpNeighborArgs>[]>;
    locatorLed?: pulumi.Input<inputs.GetNetworkElementLocatorLedArgs>;
    managementController?: pulumi.Input<inputs.GetNetworkElementManagementControllerArgs>;
    managementEntity?: pulumi.Input<inputs.GetNetworkElementManagementEntityArgs>;
    managementMode?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    networkFcZoneInfo?: pulumi.Input<inputs.GetNetworkElementNetworkFcZoneInfoArgs>;
    networkVlanPortInfo?: pulumi.Input<inputs.GetNetworkElementNetworkVlanPortInfoArgs>;
    nrVersion?: pulumi.Input<string>;
    ntpServers?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementNtpServerArgs>[]>;
    objectType?: pulumi.Input<string>;
    operEvacState?: pulumi.Input<string>;
    operability?: pulumi.Input<string>;
    outOfBandIpAddress?: pulumi.Input<string>;
    outOfBandIpGateway?: pulumi.Input<string>;
    outOfBandIpMask?: pulumi.Input<string>;
    outOfBandIpv4Address?: pulumi.Input<string>;
    outOfBandIpv4Gateway?: pulumi.Input<string>;
    outOfBandIpv4Mask?: pulumi.Input<string>;
    outOfBandIpv6Address?: pulumi.Input<string>;
    outOfBandIpv6Gateway?: pulumi.Input<string>;
    outOfBandIpv6Prefix?: pulumi.Input<string>;
    outOfBandMac?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetNetworkElementParentArgs>;
    partNumber?: pulumi.Input<string>;
    peerFirmwareOutOfSync?: pulumi.Input<boolean>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementPermissionResourceArgs>[]>;
    portMacBindings?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementPortMacBindingArgs>[]>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetNetworkElementPreviousFruArgs>;
    processorUnits?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementProcessorUnitArgs>[]>;
    psuses?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementPsusArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetNetworkElementRegisteredDeviceArgs>;
    reservedVlanStartId?: pulumi.Input<number>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    sensors?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementSensorArgs>[]>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    storageItems?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementStorageItemArgs>[]>;
    supervisorCards?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementSupervisorCardArgs>[]>;
    switchId?: pulumi.Input<string>;
    switchProfileName?: pulumi.Input<string>;
    switchType?: pulumi.Input<string>;
    systemUpTime?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementTagArgs>[]>;
    thermal?: pulumi.Input<string>;
    topSystem?: pulumi.Input<inputs.GetNetworkElementTopSystemArgs>;
    totalMemory?: pulumi.Input<number>;
    ucsmRunningFirmware?: pulumi.Input<inputs.GetNetworkElementUcsmRunningFirmwareArgs>;
    userLabel?: pulumi.Input<string>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetNetworkElementVersionContextArgs>;
    veths?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementVethArgs>[]>;
    vfcs?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementVfcArgs>[]>;
    vpcDomain?: pulumi.Input<inputs.GetNetworkElementVpcDomainArgs>;
    vpcMembers?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementVpcMemberArgs>[]>;
    vpcPeers?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementVpcPeerArgs>[]>;
    vrves?: pulumi.Input<pulumi.Input<inputs.GetNetworkElementVrfArgs>[]>;
}
