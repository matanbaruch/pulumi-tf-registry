// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageNetAppFcInterface(args?: GetStorageNetAppFcInterfaceArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageNetAppFcInterfaceResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageNetAppFcInterface:getStorageNetAppFcInterface", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "arrayController": args.arrayController,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "enabled": args.enabled,
        "events": args.events,
        "id": args.id,
        "interfaceState": args.interfaceState,
        "iqn": args.iqn,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "physicalPort": args.physicalPort,
        "sharedScope": args.sharedScope,
        "speed": args.speed,
        "state": args.state,
        "status": args.status,
        "svmName": args.svmName,
        "tags": args.tags,
        "tenant": args.tenant,
        "type": args.type,
        "uuid": args.uuid,
        "versionContext": args.versionContext,
        "volumeName": args.volumeName,
        "wwn": args.wwn,
        "wwnn": args.wwnn,
        "wwpn": args.wwpn,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageNetAppFcInterface.
 */
export interface GetStorageNetAppFcInterfaceArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageNetAppFcInterfaceAncestor[];
    arrayController?: inputs.GetStorageNetAppFcInterfaceArrayController;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    enabled?: string;
    events?: inputs.GetStorageNetAppFcInterfaceEvent[];
    id?: string;
    interfaceState?: string;
    iqn?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageNetAppFcInterfaceParent;
    permissionResources?: inputs.GetStorageNetAppFcInterfacePermissionResource[];
    physicalPort?: inputs.GetStorageNetAppFcInterfacePhysicalPort;
    sharedScope?: string;
    speed?: number;
    state?: string;
    status?: string;
    svmName?: string;
    tags?: inputs.GetStorageNetAppFcInterfaceTag[];
    tenant?: inputs.GetStorageNetAppFcInterfaceTenant;
    type?: string;
    uuid?: string;
    versionContext?: inputs.GetStorageNetAppFcInterfaceVersionContext;
    volumeName?: string;
    wwn?: string;
    wwnn?: string;
    wwpn?: string;
}

/**
 * A collection of values returned by getStorageNetAppFcInterface.
 */
export interface GetStorageNetAppFcInterfaceResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageNetAppFcInterfaceAncestor[];
    readonly arrayController?: outputs.GetStorageNetAppFcInterfaceArrayController;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly enabled?: string;
    readonly events?: outputs.GetStorageNetAppFcInterfaceEvent[];
    readonly id: string;
    readonly interfaceState?: string;
    readonly iqn?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageNetAppFcInterfaceParent;
    readonly permissionResources?: outputs.GetStorageNetAppFcInterfacePermissionResource[];
    readonly physicalPort?: outputs.GetStorageNetAppFcInterfacePhysicalPort;
    readonly results: outputs.GetStorageNetAppFcInterfaceResult[];
    readonly sharedScope?: string;
    readonly speed?: number;
    readonly state?: string;
    readonly status?: string;
    readonly svmName?: string;
    readonly tags?: outputs.GetStorageNetAppFcInterfaceTag[];
    readonly tenant?: outputs.GetStorageNetAppFcInterfaceTenant;
    readonly type?: string;
    readonly uuid?: string;
    readonly versionContext?: outputs.GetStorageNetAppFcInterfaceVersionContext;
    readonly volumeName?: string;
    readonly wwn?: string;
    readonly wwnn?: string;
    readonly wwpn?: string;
}
export function getStorageNetAppFcInterfaceOutput(args?: GetStorageNetAppFcInterfaceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageNetAppFcInterfaceResult> {
    return pulumi.output(args).apply((a: any) => getStorageNetAppFcInterface(a, opts))
}

/**
 * A collection of arguments for invoking getStorageNetAppFcInterface.
 */
export interface GetStorageNetAppFcInterfaceOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppFcInterfaceAncestorArgs>[]>;
    arrayController?: pulumi.Input<inputs.GetStorageNetAppFcInterfaceArrayControllerArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    enabled?: pulumi.Input<string>;
    events?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppFcInterfaceEventArgs>[]>;
    id?: pulumi.Input<string>;
    interfaceState?: pulumi.Input<string>;
    iqn?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageNetAppFcInterfaceParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppFcInterfacePermissionResourceArgs>[]>;
    physicalPort?: pulumi.Input<inputs.GetStorageNetAppFcInterfacePhysicalPortArgs>;
    sharedScope?: pulumi.Input<string>;
    speed?: pulumi.Input<number>;
    state?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    svmName?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppFcInterfaceTagArgs>[]>;
    tenant?: pulumi.Input<inputs.GetStorageNetAppFcInterfaceTenantArgs>;
    type?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetStorageNetAppFcInterfaceVersionContextArgs>;
    volumeName?: pulumi.Input<string>;
    wwn?: pulumi.Input<string>;
    wwnn?: pulumi.Input<string>;
    wwpn?: pulumi.Input<string>;
}
