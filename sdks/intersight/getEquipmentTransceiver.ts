// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEquipmentTransceiver(args?: GetEquipmentTransceiverArgs, opts?: pulumi.InvokeOptions): Promise<GetEquipmentTransceiverResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getEquipmentTransceiver:getEquipmentTransceiver", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "aggregatePortId": args.aggregatePortId,
        "ancestors": args.ancestors,
        "ciscoExtendedIdNumber": args.ciscoExtendedIdNumber,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "etherHostPort": args.etherHostPort,
        "etherPhysicalPort": args.etherPhysicalPort,
        "fcPhysicalPort": args.fcPhysicalPort,
        "id": args.id,
        "interfaceType": args.interfaceType,
        "isUpgraded": args.isUpgraded,
        "manufacturerPartNumber": args.manufacturerPartNumber,
        "modTime": args.modTime,
        "model": args.model,
        "moduleId": args.moduleId,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "operSpeed": args.operSpeed,
        "operState": args.operState,
        "operStateQual": args.operStateQual,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "portId": args.portId,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "registeredDevice": args.registeredDevice,
        "revision": args.revision,
        "rn": args.rn,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "slotId": args.slotId,
        "status": args.status,
        "switchId": args.switchId,
        "tags": args.tags,
        "type": args.type,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEquipmentTransceiver.
 */
export interface GetEquipmentTransceiverArgs {
    accountMoid?: string;
    additionalProperties?: string;
    aggregatePortId?: number;
    ancestors?: inputs.GetEquipmentTransceiverAncestor[];
    ciscoExtendedIdNumber?: string;
    classId?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    etherHostPort?: inputs.GetEquipmentTransceiverEtherHostPort;
    etherPhysicalPort?: inputs.GetEquipmentTransceiverEtherPhysicalPort;
    fcPhysicalPort?: inputs.GetEquipmentTransceiverFcPhysicalPort;
    id?: string;
    interfaceType?: string;
    isUpgraded?: boolean;
    manufacturerPartNumber?: string;
    modTime?: string;
    model?: string;
    moduleId?: number;
    moid?: string;
    name?: string;
    objectType?: string;
    operSpeed?: string;
    operState?: string;
    operStateQual?: string;
    owners?: string[];
    parent?: inputs.GetEquipmentTransceiverParent;
    permissionResources?: inputs.GetEquipmentTransceiverPermissionResource[];
    portId?: number;
    presence?: string;
    previousFru?: inputs.GetEquipmentTransceiverPreviousFru;
    registeredDevice?: inputs.GetEquipmentTransceiverRegisteredDevice;
    revision?: string;
    rn?: string;
    serial?: string;
    sharedScope?: string;
    slotId?: number;
    status?: string;
    switchId?: string;
    tags?: inputs.GetEquipmentTransceiverTag[];
    type?: string;
    vendor?: string;
    versionContext?: inputs.GetEquipmentTransceiverVersionContext;
}

/**
 * A collection of values returned by getEquipmentTransceiver.
 */
export interface GetEquipmentTransceiverResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly aggregatePortId?: number;
    readonly ancestors?: outputs.GetEquipmentTransceiverAncestor[];
    readonly ciscoExtendedIdNumber?: string;
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly etherHostPort?: outputs.GetEquipmentTransceiverEtherHostPort;
    readonly etherPhysicalPort?: outputs.GetEquipmentTransceiverEtherPhysicalPort;
    readonly fcPhysicalPort?: outputs.GetEquipmentTransceiverFcPhysicalPort;
    readonly id: string;
    readonly interfaceType?: string;
    readonly isUpgraded?: boolean;
    readonly manufacturerPartNumber?: string;
    readonly modTime?: string;
    readonly model?: string;
    readonly moduleId?: number;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly operSpeed?: string;
    readonly operState?: string;
    readonly operStateQual?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetEquipmentTransceiverParent;
    readonly permissionResources?: outputs.GetEquipmentTransceiverPermissionResource[];
    readonly portId?: number;
    readonly presence?: string;
    readonly previousFru?: outputs.GetEquipmentTransceiverPreviousFru;
    readonly registeredDevice?: outputs.GetEquipmentTransceiverRegisteredDevice;
    readonly results: outputs.GetEquipmentTransceiverResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly slotId?: number;
    readonly status?: string;
    readonly switchId?: string;
    readonly tags?: outputs.GetEquipmentTransceiverTag[];
    readonly type?: string;
    readonly vendor?: string;
    readonly versionContext?: outputs.GetEquipmentTransceiverVersionContext;
}
export function getEquipmentTransceiverOutput(args?: GetEquipmentTransceiverOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEquipmentTransceiverResult> {
    return pulumi.output(args).apply((a: any) => getEquipmentTransceiver(a, opts))
}

/**
 * A collection of arguments for invoking getEquipmentTransceiver.
 */
export interface GetEquipmentTransceiverOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    aggregatePortId?: pulumi.Input<number>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetEquipmentTransceiverAncestorArgs>[]>;
    ciscoExtendedIdNumber?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    etherHostPort?: pulumi.Input<inputs.GetEquipmentTransceiverEtherHostPortArgs>;
    etherPhysicalPort?: pulumi.Input<inputs.GetEquipmentTransceiverEtherPhysicalPortArgs>;
    fcPhysicalPort?: pulumi.Input<inputs.GetEquipmentTransceiverFcPhysicalPortArgs>;
    id?: pulumi.Input<string>;
    interfaceType?: pulumi.Input<string>;
    isUpgraded?: pulumi.Input<boolean>;
    manufacturerPartNumber?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moduleId?: pulumi.Input<number>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operSpeed?: pulumi.Input<string>;
    operState?: pulumi.Input<string>;
    operStateQual?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetEquipmentTransceiverParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetEquipmentTransceiverPermissionResourceArgs>[]>;
    portId?: pulumi.Input<number>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetEquipmentTransceiverPreviousFruArgs>;
    registeredDevice?: pulumi.Input<inputs.GetEquipmentTransceiverRegisteredDeviceArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    slotId?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    switchId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetEquipmentTransceiverTagArgs>[]>;
    type?: pulumi.Input<string>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetEquipmentTransceiverVersionContextArgs>;
}
