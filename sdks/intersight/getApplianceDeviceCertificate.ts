// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getApplianceDeviceCertificate(args?: GetApplianceDeviceCertificateArgs, opts?: pulumi.InvokeOptions): Promise<GetApplianceDeviceCertificateResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getApplianceDeviceCertificate:getApplianceDeviceCertificate", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "caCertificate": args.caCertificate,
        "caCertificateExpiryTime": args.caCertificateExpiryTime,
        "certificateRenewalExpiryTime": args.certificateRenewalExpiryTime,
        "classId": args.classId,
        "completedPhases": args.completedPhases,
        "configurationMoId": args.configurationMoId,
        "createTime": args.createTime,
        "currentPhase": args.currentPhase,
        "domainGroupMoid": args.domainGroupMoid,
        "endTime": args.endTime,
        "id": args.id,
        "lastSuccessPollTime": args.lastSuccessPollTime,
        "messages": args.messages,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "sharedScope": args.sharedScope,
        "startTime": args.startTime,
        "status": args.status,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getApplianceDeviceCertificate.
 */
export interface GetApplianceDeviceCertificateArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetApplianceDeviceCertificateAncestor[];
    caCertificate?: string;
    caCertificateExpiryTime?: string;
    certificateRenewalExpiryTime?: string;
    classId?: string;
    completedPhases?: inputs.GetApplianceDeviceCertificateCompletedPhase[];
    configurationMoId?: string;
    createTime?: string;
    currentPhase?: inputs.GetApplianceDeviceCertificateCurrentPhase;
    domainGroupMoid?: string;
    endTime?: string;
    id?: string;
    lastSuccessPollTime?: string;
    messages?: string[];
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetApplianceDeviceCertificateParent;
    permissionResources?: inputs.GetApplianceDeviceCertificatePermissionResource[];
    sharedScope?: string;
    startTime?: string;
    status?: string;
    tags?: inputs.GetApplianceDeviceCertificateTag[];
    versionContext?: inputs.GetApplianceDeviceCertificateVersionContext;
}

/**
 * A collection of values returned by getApplianceDeviceCertificate.
 */
export interface GetApplianceDeviceCertificateResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetApplianceDeviceCertificateAncestor[];
    readonly caCertificate?: string;
    readonly caCertificateExpiryTime?: string;
    readonly certificateRenewalExpiryTime?: string;
    readonly classId?: string;
    readonly completedPhases?: outputs.GetApplianceDeviceCertificateCompletedPhase[];
    readonly configurationMoId?: string;
    readonly createTime?: string;
    readonly currentPhase?: outputs.GetApplianceDeviceCertificateCurrentPhase;
    readonly domainGroupMoid?: string;
    readonly endTime?: string;
    readonly id: string;
    readonly lastSuccessPollTime?: string;
    readonly messages?: string[];
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetApplianceDeviceCertificateParent;
    readonly permissionResources?: outputs.GetApplianceDeviceCertificatePermissionResource[];
    readonly results: outputs.GetApplianceDeviceCertificateResult[];
    readonly sharedScope?: string;
    readonly startTime?: string;
    readonly status?: string;
    readonly tags?: outputs.GetApplianceDeviceCertificateTag[];
    readonly versionContext?: outputs.GetApplianceDeviceCertificateVersionContext;
}
export function getApplianceDeviceCertificateOutput(args?: GetApplianceDeviceCertificateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetApplianceDeviceCertificateResult> {
    return pulumi.output(args).apply((a: any) => getApplianceDeviceCertificate(a, opts))
}

/**
 * A collection of arguments for invoking getApplianceDeviceCertificate.
 */
export interface GetApplianceDeviceCertificateOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetApplianceDeviceCertificateAncestorArgs>[]>;
    caCertificate?: pulumi.Input<string>;
    caCertificateExpiryTime?: pulumi.Input<string>;
    certificateRenewalExpiryTime?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    completedPhases?: pulumi.Input<pulumi.Input<inputs.GetApplianceDeviceCertificateCompletedPhaseArgs>[]>;
    configurationMoId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    currentPhase?: pulumi.Input<inputs.GetApplianceDeviceCertificateCurrentPhaseArgs>;
    domainGroupMoid?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    lastSuccessPollTime?: pulumi.Input<string>;
    messages?: pulumi.Input<pulumi.Input<string>[]>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetApplianceDeviceCertificateParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetApplianceDeviceCertificatePermissionResourceArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetApplianceDeviceCertificateTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetApplianceDeviceCertificateVersionContextArgs>;
}
