// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getHyperflexClusterProfile(args?: GetHyperflexClusterProfileArgs, opts?: pulumi.InvokeOptions): Promise<GetHyperflexClusterProfileResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getHyperflexClusterProfile:getHyperflexClusterProfile", {
        "accountMoid": args.accountMoid,
        "action": args.action,
        "actionParams": args.actionParams,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "associatedCluster": args.associatedCluster,
        "autoSupport": args.autoSupport,
        "classId": args.classId,
        "clusterInternalSubnet": args.clusterInternalSubnet,
        "clusterNetwork": args.clusterNetwork,
        "clusterStorage": args.clusterStorage,
        "configContext": args.configContext,
        "configResult": args.configResult,
        "createTime": args.createTime,
        "dataIpAddress": args.dataIpAddress,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "extFcStorage": args.extFcStorage,
        "extIscsiStorage": args.extIscsiStorage,
        "hostNamePrefix": args.hostNamePrefix,
        "httpproxypolicy": args.httpproxypolicy,
        "hypervisorControlIpAddress": args.hypervisorControlIpAddress,
        "hypervisorType": args.hypervisorType,
        "id": args.id,
        "isNicBased": args.isNicBased,
        "localCredential": args.localCredential,
        "macAddressPrefix": args.macAddressPrefix,
        "mgmtIpAddress": args.mgmtIpAddress,
        "mgmtPlatform": args.mgmtPlatform,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "nodeConfig": args.nodeConfig,
        "nodeProfileConfigs": args.nodeProfileConfigs,
        "objectType": args.objectType,
        "organization": args.organization,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "policyBuckets": args.policyBuckets,
        "proxySetting": args.proxySetting,
        "replication": args.replication,
        "runningWorkflows": args.runningWorkflows,
        "scheduledActions": args.scheduledActions,
        "sharedScope": args.sharedScope,
        "softwareVersion": args.softwareVersion,
        "srcTemplate": args.srcTemplate,
        "storageClientIpAddress": args.storageClientIpAddress,
        "storageClientNetmask": args.storageClientNetmask,
        "storageClientVlan": args.storageClientVlan,
        "storageClusterAuxiliaryIp": args.storageClusterAuxiliaryIp,
        "storageDataVlan": args.storageDataVlan,
        "storageType": args.storageType,
        "sysConfig": args.sysConfig,
        "tags": args.tags,
        "type": args.type,
        "ucsmConfig": args.ucsmConfig,
        "vcenterConfig": args.vcenterConfig,
        "versionContext": args.versionContext,
        "wwxnPrefix": args.wwxnPrefix,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getHyperflexClusterProfile.
 */
export interface GetHyperflexClusterProfileArgs {
    accountMoid?: string;
    action?: string;
    actionParams?: inputs.GetHyperflexClusterProfileActionParam[];
    additionalProperties?: string;
    ancestors?: inputs.GetHyperflexClusterProfileAncestor[];
    associatedCluster?: inputs.GetHyperflexClusterProfileAssociatedCluster;
    autoSupport?: inputs.GetHyperflexClusterProfileAutoSupport;
    classId?: string;
    clusterInternalSubnet?: inputs.GetHyperflexClusterProfileClusterInternalSubnet;
    clusterNetwork?: inputs.GetHyperflexClusterProfileClusterNetwork;
    clusterStorage?: inputs.GetHyperflexClusterProfileClusterStorage;
    configContext?: inputs.GetHyperflexClusterProfileConfigContext;
    configResult?: inputs.GetHyperflexClusterProfileConfigResult;
    createTime?: string;
    dataIpAddress?: string;
    description?: string;
    domainGroupMoid?: string;
    extFcStorage?: inputs.GetHyperflexClusterProfileExtFcStorage;
    extIscsiStorage?: inputs.GetHyperflexClusterProfileExtIscsiStorage;
    hostNamePrefix?: string;
    httpproxypolicy?: inputs.GetHyperflexClusterProfileHttpproxypolicy;
    hypervisorControlIpAddress?: string;
    hypervisorType?: string;
    id?: string;
    isNicBased?: boolean;
    localCredential?: inputs.GetHyperflexClusterProfileLocalCredential;
    macAddressPrefix?: string;
    mgmtIpAddress?: string;
    mgmtPlatform?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    nodeConfig?: inputs.GetHyperflexClusterProfileNodeConfig;
    nodeProfileConfigs?: inputs.GetHyperflexClusterProfileNodeProfileConfig[];
    objectType?: string;
    organization?: inputs.GetHyperflexClusterProfileOrganization;
    owners?: string[];
    parent?: inputs.GetHyperflexClusterProfileParent;
    permissionResources?: inputs.GetHyperflexClusterProfilePermissionResource[];
    policyBuckets?: inputs.GetHyperflexClusterProfilePolicyBucket[];
    proxySetting?: inputs.GetHyperflexClusterProfileProxySetting;
    replication?: number;
    runningWorkflows?: inputs.GetHyperflexClusterProfileRunningWorkflow[];
    scheduledActions?: inputs.GetHyperflexClusterProfileScheduledAction[];
    sharedScope?: string;
    softwareVersion?: inputs.GetHyperflexClusterProfileSoftwareVersion;
    srcTemplate?: inputs.GetHyperflexClusterProfileSrcTemplate;
    storageClientIpAddress?: string;
    storageClientNetmask?: string;
    storageClientVlan?: inputs.GetHyperflexClusterProfileStorageClientVlan;
    storageClusterAuxiliaryIp?: string;
    storageDataVlan?: inputs.GetHyperflexClusterProfileStorageDataVlan;
    storageType?: string;
    sysConfig?: inputs.GetHyperflexClusterProfileSysConfig;
    tags?: inputs.GetHyperflexClusterProfileTag[];
    type?: string;
    ucsmConfig?: inputs.GetHyperflexClusterProfileUcsmConfig;
    vcenterConfig?: inputs.GetHyperflexClusterProfileVcenterConfig;
    versionContext?: inputs.GetHyperflexClusterProfileVersionContext;
    wwxnPrefix?: string;
}

/**
 * A collection of values returned by getHyperflexClusterProfile.
 */
export interface GetHyperflexClusterProfileResult {
    readonly accountMoid?: string;
    readonly action?: string;
    readonly actionParams?: outputs.GetHyperflexClusterProfileActionParam[];
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetHyperflexClusterProfileAncestor[];
    readonly associatedCluster?: outputs.GetHyperflexClusterProfileAssociatedCluster;
    readonly autoSupport?: outputs.GetHyperflexClusterProfileAutoSupport;
    readonly classId?: string;
    readonly clusterInternalSubnet?: outputs.GetHyperflexClusterProfileClusterInternalSubnet;
    readonly clusterNetwork?: outputs.GetHyperflexClusterProfileClusterNetwork;
    readonly clusterStorage?: outputs.GetHyperflexClusterProfileClusterStorage;
    readonly configContext?: outputs.GetHyperflexClusterProfileConfigContext;
    readonly configResult?: outputs.GetHyperflexClusterProfileConfigResult;
    readonly createTime?: string;
    readonly dataIpAddress?: string;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly extFcStorage?: outputs.GetHyperflexClusterProfileExtFcStorage;
    readonly extIscsiStorage?: outputs.GetHyperflexClusterProfileExtIscsiStorage;
    readonly hostNamePrefix?: string;
    readonly httpproxypolicy?: outputs.GetHyperflexClusterProfileHttpproxypolicy;
    readonly hypervisorControlIpAddress?: string;
    readonly hypervisorType?: string;
    readonly id: string;
    readonly isNicBased?: boolean;
    readonly localCredential?: outputs.GetHyperflexClusterProfileLocalCredential;
    readonly macAddressPrefix?: string;
    readonly mgmtIpAddress?: string;
    readonly mgmtPlatform?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nodeConfig?: outputs.GetHyperflexClusterProfileNodeConfig;
    readonly nodeProfileConfigs?: outputs.GetHyperflexClusterProfileNodeProfileConfig[];
    readonly objectType?: string;
    readonly organization?: outputs.GetHyperflexClusterProfileOrganization;
    readonly owners?: string[];
    readonly parent?: outputs.GetHyperflexClusterProfileParent;
    readonly permissionResources?: outputs.GetHyperflexClusterProfilePermissionResource[];
    readonly policyBuckets?: outputs.GetHyperflexClusterProfilePolicyBucket[];
    readonly proxySetting?: outputs.GetHyperflexClusterProfileProxySetting;
    readonly replication?: number;
    readonly results: outputs.GetHyperflexClusterProfileResult[];
    readonly runningWorkflows?: outputs.GetHyperflexClusterProfileRunningWorkflow[];
    readonly scheduledActions?: outputs.GetHyperflexClusterProfileScheduledAction[];
    readonly sharedScope?: string;
    readonly softwareVersion?: outputs.GetHyperflexClusterProfileSoftwareVersion;
    readonly srcTemplate?: outputs.GetHyperflexClusterProfileSrcTemplate;
    readonly storageClientIpAddress?: string;
    readonly storageClientNetmask?: string;
    readonly storageClientVlan?: outputs.GetHyperflexClusterProfileStorageClientVlan;
    readonly storageClusterAuxiliaryIp?: string;
    readonly storageDataVlan?: outputs.GetHyperflexClusterProfileStorageDataVlan;
    readonly storageType?: string;
    readonly sysConfig?: outputs.GetHyperflexClusterProfileSysConfig;
    readonly tags?: outputs.GetHyperflexClusterProfileTag[];
    readonly type?: string;
    readonly ucsmConfig?: outputs.GetHyperflexClusterProfileUcsmConfig;
    readonly vcenterConfig?: outputs.GetHyperflexClusterProfileVcenterConfig;
    readonly versionContext?: outputs.GetHyperflexClusterProfileVersionContext;
    readonly wwxnPrefix?: string;
}
export function getHyperflexClusterProfileOutput(args?: GetHyperflexClusterProfileOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetHyperflexClusterProfileResult> {
    return pulumi.output(args).apply((a: any) => getHyperflexClusterProfile(a, opts))
}

/**
 * A collection of arguments for invoking getHyperflexClusterProfile.
 */
export interface GetHyperflexClusterProfileOutputArgs {
    accountMoid?: pulumi.Input<string>;
    action?: pulumi.Input<string>;
    actionParams?: pulumi.Input<pulumi.Input<inputs.GetHyperflexClusterProfileActionParamArgs>[]>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetHyperflexClusterProfileAncestorArgs>[]>;
    associatedCluster?: pulumi.Input<inputs.GetHyperflexClusterProfileAssociatedClusterArgs>;
    autoSupport?: pulumi.Input<inputs.GetHyperflexClusterProfileAutoSupportArgs>;
    classId?: pulumi.Input<string>;
    clusterInternalSubnet?: pulumi.Input<inputs.GetHyperflexClusterProfileClusterInternalSubnetArgs>;
    clusterNetwork?: pulumi.Input<inputs.GetHyperflexClusterProfileClusterNetworkArgs>;
    clusterStorage?: pulumi.Input<inputs.GetHyperflexClusterProfileClusterStorageArgs>;
    configContext?: pulumi.Input<inputs.GetHyperflexClusterProfileConfigContextArgs>;
    configResult?: pulumi.Input<inputs.GetHyperflexClusterProfileConfigResultArgs>;
    createTime?: pulumi.Input<string>;
    dataIpAddress?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    extFcStorage?: pulumi.Input<inputs.GetHyperflexClusterProfileExtFcStorageArgs>;
    extIscsiStorage?: pulumi.Input<inputs.GetHyperflexClusterProfileExtIscsiStorageArgs>;
    hostNamePrefix?: pulumi.Input<string>;
    httpproxypolicy?: pulumi.Input<inputs.GetHyperflexClusterProfileHttpproxypolicyArgs>;
    hypervisorControlIpAddress?: pulumi.Input<string>;
    hypervisorType?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    isNicBased?: pulumi.Input<boolean>;
    localCredential?: pulumi.Input<inputs.GetHyperflexClusterProfileLocalCredentialArgs>;
    macAddressPrefix?: pulumi.Input<string>;
    mgmtIpAddress?: pulumi.Input<string>;
    mgmtPlatform?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nodeConfig?: pulumi.Input<inputs.GetHyperflexClusterProfileNodeConfigArgs>;
    nodeProfileConfigs?: pulumi.Input<pulumi.Input<inputs.GetHyperflexClusterProfileNodeProfileConfigArgs>[]>;
    objectType?: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.GetHyperflexClusterProfileOrganizationArgs>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetHyperflexClusterProfileParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetHyperflexClusterProfilePermissionResourceArgs>[]>;
    policyBuckets?: pulumi.Input<pulumi.Input<inputs.GetHyperflexClusterProfilePolicyBucketArgs>[]>;
    proxySetting?: pulumi.Input<inputs.GetHyperflexClusterProfileProxySettingArgs>;
    replication?: pulumi.Input<number>;
    runningWorkflows?: pulumi.Input<pulumi.Input<inputs.GetHyperflexClusterProfileRunningWorkflowArgs>[]>;
    scheduledActions?: pulumi.Input<pulumi.Input<inputs.GetHyperflexClusterProfileScheduledActionArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    softwareVersion?: pulumi.Input<inputs.GetHyperflexClusterProfileSoftwareVersionArgs>;
    srcTemplate?: pulumi.Input<inputs.GetHyperflexClusterProfileSrcTemplateArgs>;
    storageClientIpAddress?: pulumi.Input<string>;
    storageClientNetmask?: pulumi.Input<string>;
    storageClientVlan?: pulumi.Input<inputs.GetHyperflexClusterProfileStorageClientVlanArgs>;
    storageClusterAuxiliaryIp?: pulumi.Input<string>;
    storageDataVlan?: pulumi.Input<inputs.GetHyperflexClusterProfileStorageDataVlanArgs>;
    storageType?: pulumi.Input<string>;
    sysConfig?: pulumi.Input<inputs.GetHyperflexClusterProfileSysConfigArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetHyperflexClusterProfileTagArgs>[]>;
    type?: pulumi.Input<string>;
    ucsmConfig?: pulumi.Input<inputs.GetHyperflexClusterProfileUcsmConfigArgs>;
    vcenterConfig?: pulumi.Input<inputs.GetHyperflexClusterProfileVcenterConfigArgs>;
    versionContext?: pulumi.Input<inputs.GetHyperflexClusterProfileVersionContextArgs>;
    wwxnPrefix?: pulumi.Input<string>;
}
