// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEquipmentChassisOperation(args?: GetEquipmentChassisOperationArgs, opts?: pulumi.InvokeOptions): Promise<GetEquipmentChassisOperationResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getEquipmentChassisOperation:getEquipmentChassisOperation", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "adminLocatorLedAction": args.adminLocatorLedAction,
        "adminPowerCycleSlotId": args.adminPowerCycleSlotId,
        "ancestors": args.ancestors,
        "chassis": args.chassis,
        "chassisOperationStatuses": args.chassisOperationStatuses,
        "classId": args.classId,
        "configState": args.configState,
        "createTime": args.createTime,
        "deviceRegistration": args.deviceRegistration,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEquipmentChassisOperation.
 */
export interface GetEquipmentChassisOperationArgs {
    accountMoid?: string;
    additionalProperties?: string;
    adminLocatorLedAction?: string;
    adminPowerCycleSlotId?: number;
    ancestors?: inputs.GetEquipmentChassisOperationAncestor[];
    chassis?: inputs.GetEquipmentChassisOperationChassis;
    chassisOperationStatuses?: inputs.GetEquipmentChassisOperationChassisOperationStatus[];
    classId?: string;
    configState?: string;
    createTime?: string;
    deviceRegistration?: inputs.GetEquipmentChassisOperationDeviceRegistration;
    domainGroupMoid?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetEquipmentChassisOperationParent;
    permissionResources?: inputs.GetEquipmentChassisOperationPermissionResource[];
    sharedScope?: string;
    tags?: inputs.GetEquipmentChassisOperationTag[];
    versionContext?: inputs.GetEquipmentChassisOperationVersionContext;
}

/**
 * A collection of values returned by getEquipmentChassisOperation.
 */
export interface GetEquipmentChassisOperationResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly adminLocatorLedAction?: string;
    readonly adminPowerCycleSlotId?: number;
    readonly ancestors?: outputs.GetEquipmentChassisOperationAncestor[];
    readonly chassis?: outputs.GetEquipmentChassisOperationChassis;
    readonly chassisOperationStatuses?: outputs.GetEquipmentChassisOperationChassisOperationStatus[];
    readonly classId?: string;
    readonly configState?: string;
    readonly createTime?: string;
    readonly deviceRegistration?: outputs.GetEquipmentChassisOperationDeviceRegistration;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetEquipmentChassisOperationParent;
    readonly permissionResources?: outputs.GetEquipmentChassisOperationPermissionResource[];
    readonly results: outputs.GetEquipmentChassisOperationResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetEquipmentChassisOperationTag[];
    readonly versionContext?: outputs.GetEquipmentChassisOperationVersionContext;
}
export function getEquipmentChassisOperationOutput(args?: GetEquipmentChassisOperationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEquipmentChassisOperationResult> {
    return pulumi.output(args).apply((a: any) => getEquipmentChassisOperation(a, opts))
}

/**
 * A collection of arguments for invoking getEquipmentChassisOperation.
 */
export interface GetEquipmentChassisOperationOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    adminLocatorLedAction?: pulumi.Input<string>;
    adminPowerCycleSlotId?: pulumi.Input<number>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetEquipmentChassisOperationAncestorArgs>[]>;
    chassis?: pulumi.Input<inputs.GetEquipmentChassisOperationChassisArgs>;
    chassisOperationStatuses?: pulumi.Input<pulumi.Input<inputs.GetEquipmentChassisOperationChassisOperationStatusArgs>[]>;
    classId?: pulumi.Input<string>;
    configState?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceRegistration?: pulumi.Input<inputs.GetEquipmentChassisOperationDeviceRegistrationArgs>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetEquipmentChassisOperationParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetEquipmentChassisOperationPermissionResourceArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetEquipmentChassisOperationTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetEquipmentChassisOperationVersionContextArgs>;
}
