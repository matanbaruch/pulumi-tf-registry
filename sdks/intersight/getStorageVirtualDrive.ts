// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageVirtualDrive(args?: GetStorageVirtualDriveArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageVirtualDriveResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageVirtualDrive:getStorageVirtualDrive", {
        "accessPolicy": args.accessPolicy,
        "accountMoid": args.accountMoid,
        "actualWriteCachePolicy": args.actualWriteCachePolicy,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "availableSize": args.availableSize,
        "blockSize": args.blockSize,
        "bootable": args.bootable,
        "classId": args.classId,
        "configState": args.configState,
        "configuredWriteCachePolicy": args.configuredWriteCachePolicy,
        "connectionProtocol": args.connectionProtocol,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "diskGroup": args.diskGroup,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "driveCache": args.driveCache,
        "driveSecurity": args.driveSecurity,
        "driveState": args.driveState,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "ioPolicy": args.ioPolicy,
        "isUpgraded": args.isUpgraded,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "name": args.name,
        "numBlocks": args.numBlocks,
        "objectType": args.objectType,
        "operState": args.operState,
        "operability": args.operability,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "physicalBlockSize": args.physicalBlockSize,
        "physicalDiskUsages": args.physicalDiskUsages,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "readPolicy": args.readPolicy,
        "registeredDevice": args.registeredDevice,
        "revision": args.revision,
        "rn": args.rn,
        "securityFlags": args.securityFlags,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "size": args.size,
        "storageController": args.storageController,
        "storageVirtualDriveContainer": args.storageVirtualDriveContainer,
        "stripSize": args.stripSize,
        "tags": args.tags,
        "type": args.type,
        "uuid": args.uuid,
        "vdMemberEps": args.vdMemberEps,
        "vendor": args.vendor,
        "vendorUuid": args.vendorUuid,
        "versionContext": args.versionContext,
        "virtualDriveExtension": args.virtualDriveExtension,
        "virtualDriveId": args.virtualDriveId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageVirtualDrive.
 */
export interface GetStorageVirtualDriveArgs {
    accessPolicy?: string;
    accountMoid?: string;
    actualWriteCachePolicy?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageVirtualDriveAncestor[];
    availableSize?: string;
    blockSize?: string;
    bootable?: string;
    classId?: string;
    configState?: string;
    configuredWriteCachePolicy?: string;
    connectionProtocol?: string;
    createTime?: string;
    deviceMoId?: string;
    diskGroup?: inputs.GetStorageVirtualDriveDiskGroup;
    dn?: string;
    domainGroupMoid?: string;
    driveCache?: string;
    driveSecurity?: string;
    driveState?: string;
    id?: string;
    inventoryDeviceInfo?: inputs.GetStorageVirtualDriveInventoryDeviceInfo;
    ioPolicy?: string;
    isUpgraded?: boolean;
    modTime?: string;
    model?: string;
    moid?: string;
    name?: string;
    numBlocks?: string;
    objectType?: string;
    operState?: string;
    operability?: string;
    owners?: string[];
    parent?: inputs.GetStorageVirtualDriveParent;
    permissionResources?: inputs.GetStorageVirtualDrivePermissionResource[];
    physicalBlockSize?: string;
    physicalDiskUsages?: inputs.GetStorageVirtualDrivePhysicalDiskUsage[];
    presence?: string;
    previousFru?: inputs.GetStorageVirtualDrivePreviousFru;
    readPolicy?: string;
    registeredDevice?: inputs.GetStorageVirtualDriveRegisteredDevice;
    revision?: string;
    rn?: string;
    securityFlags?: string;
    serial?: string;
    sharedScope?: string;
    size?: string;
    storageController?: inputs.GetStorageVirtualDriveStorageController;
    storageVirtualDriveContainer?: inputs.GetStorageVirtualDriveStorageVirtualDriveContainer;
    stripSize?: string;
    tags?: inputs.GetStorageVirtualDriveTag[];
    type?: string;
    uuid?: string;
    vdMemberEps?: inputs.GetStorageVirtualDriveVdMemberEp[];
    vendor?: string;
    vendorUuid?: string;
    versionContext?: inputs.GetStorageVirtualDriveVersionContext;
    virtualDriveExtension?: inputs.GetStorageVirtualDriveVirtualDriveExtension;
    virtualDriveId?: string;
}

/**
 * A collection of values returned by getStorageVirtualDrive.
 */
export interface GetStorageVirtualDriveResult {
    readonly accessPolicy?: string;
    readonly accountMoid?: string;
    readonly actualWriteCachePolicy?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageVirtualDriveAncestor[];
    readonly availableSize?: string;
    readonly blockSize?: string;
    readonly bootable?: string;
    readonly classId?: string;
    readonly configState?: string;
    readonly configuredWriteCachePolicy?: string;
    readonly connectionProtocol?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly diskGroup?: outputs.GetStorageVirtualDriveDiskGroup;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly driveCache?: string;
    readonly driveSecurity?: string;
    readonly driveState?: string;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetStorageVirtualDriveInventoryDeviceInfo;
    readonly ioPolicy?: string;
    readonly isUpgraded?: boolean;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly numBlocks?: string;
    readonly objectType?: string;
    readonly operState?: string;
    readonly operability?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageVirtualDriveParent;
    readonly permissionResources?: outputs.GetStorageVirtualDrivePermissionResource[];
    readonly physicalBlockSize?: string;
    readonly physicalDiskUsages?: outputs.GetStorageVirtualDrivePhysicalDiskUsage[];
    readonly presence?: string;
    readonly previousFru?: outputs.GetStorageVirtualDrivePreviousFru;
    readonly readPolicy?: string;
    readonly registeredDevice?: outputs.GetStorageVirtualDriveRegisteredDevice;
    readonly results: outputs.GetStorageVirtualDriveResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly securityFlags?: string;
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly size?: string;
    readonly storageController?: outputs.GetStorageVirtualDriveStorageController;
    readonly storageVirtualDriveContainer?: outputs.GetStorageVirtualDriveStorageVirtualDriveContainer;
    readonly stripSize?: string;
    readonly tags?: outputs.GetStorageVirtualDriveTag[];
    readonly type?: string;
    readonly uuid?: string;
    readonly vdMemberEps?: outputs.GetStorageVirtualDriveVdMemberEp[];
    readonly vendor?: string;
    readonly vendorUuid?: string;
    readonly versionContext?: outputs.GetStorageVirtualDriveVersionContext;
    readonly virtualDriveExtension?: outputs.GetStorageVirtualDriveVirtualDriveExtension;
    readonly virtualDriveId?: string;
}
export function getStorageVirtualDriveOutput(args?: GetStorageVirtualDriveOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageVirtualDriveResult> {
    return pulumi.output(args).apply((a: any) => getStorageVirtualDrive(a, opts))
}

/**
 * A collection of arguments for invoking getStorageVirtualDrive.
 */
export interface GetStorageVirtualDriveOutputArgs {
    accessPolicy?: pulumi.Input<string>;
    accountMoid?: pulumi.Input<string>;
    actualWriteCachePolicy?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageVirtualDriveAncestorArgs>[]>;
    availableSize?: pulumi.Input<string>;
    blockSize?: pulumi.Input<string>;
    bootable?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    configState?: pulumi.Input<string>;
    configuredWriteCachePolicy?: pulumi.Input<string>;
    connectionProtocol?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    diskGroup?: pulumi.Input<inputs.GetStorageVirtualDriveDiskGroupArgs>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    driveCache?: pulumi.Input<string>;
    driveSecurity?: pulumi.Input<string>;
    driveState?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetStorageVirtualDriveInventoryDeviceInfoArgs>;
    ioPolicy?: pulumi.Input<string>;
    isUpgraded?: pulumi.Input<boolean>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    numBlocks?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operState?: pulumi.Input<string>;
    operability?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageVirtualDriveParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageVirtualDrivePermissionResourceArgs>[]>;
    physicalBlockSize?: pulumi.Input<string>;
    physicalDiskUsages?: pulumi.Input<pulumi.Input<inputs.GetStorageVirtualDrivePhysicalDiskUsageArgs>[]>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetStorageVirtualDrivePreviousFruArgs>;
    readPolicy?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetStorageVirtualDriveRegisteredDeviceArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    securityFlags?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    size?: pulumi.Input<string>;
    storageController?: pulumi.Input<inputs.GetStorageVirtualDriveStorageControllerArgs>;
    storageVirtualDriveContainer?: pulumi.Input<inputs.GetStorageVirtualDriveStorageVirtualDriveContainerArgs>;
    stripSize?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageVirtualDriveTagArgs>[]>;
    type?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    vdMemberEps?: pulumi.Input<pulumi.Input<inputs.GetStorageVirtualDriveVdMemberEpArgs>[]>;
    vendor?: pulumi.Input<string>;
    vendorUuid?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetStorageVirtualDriveVersionContextArgs>;
    virtualDriveExtension?: pulumi.Input<inputs.GetStorageVirtualDriveVirtualDriveExtensionArgs>;
    virtualDriveId?: pulumi.Input<string>;
}
