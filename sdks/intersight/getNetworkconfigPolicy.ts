// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNetworkconfigPolicy(args?: GetNetworkconfigPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetNetworkconfigPolicyResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getNetworkconfigPolicy:getNetworkconfigPolicy", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "alternateIpv4dnsServer": args.alternateIpv4dnsServer,
        "alternateIpv6dnsServer": args.alternateIpv6dnsServer,
        "ancestors": args.ancestors,
        "applianceAccount": args.applianceAccount,
        "classId": args.classId,
        "createTime": args.createTime,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "dynamicDnsDomain": args.dynamicDnsDomain,
        "enableDynamicDns": args.enableDynamicDns,
        "enableIpv4dnsFromDhcp": args.enableIpv4dnsFromDhcp,
        "enableIpv6": args.enableIpv6,
        "enableIpv6dnsFromDhcp": args.enableIpv6dnsFromDhcp,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "organization": args.organization,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "preferredIpv4dnsServer": args.preferredIpv4dnsServer,
        "preferredIpv6dnsServer": args.preferredIpv6dnsServer,
        "profiles": args.profiles,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNetworkconfigPolicy.
 */
export interface GetNetworkconfigPolicyArgs {
    accountMoid?: string;
    additionalProperties?: string;
    alternateIpv4dnsServer?: string;
    alternateIpv6dnsServer?: string;
    ancestors?: inputs.GetNetworkconfigPolicyAncestor[];
    applianceAccount?: inputs.GetNetworkconfigPolicyApplianceAccount;
    classId?: string;
    createTime?: string;
    description?: string;
    domainGroupMoid?: string;
    dynamicDnsDomain?: string;
    enableDynamicDns?: boolean;
    enableIpv4dnsFromDhcp?: boolean;
    enableIpv6?: boolean;
    enableIpv6dnsFromDhcp?: boolean;
    id?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    organization?: inputs.GetNetworkconfigPolicyOrganization;
    owners?: string[];
    parent?: inputs.GetNetworkconfigPolicyParent;
    permissionResources?: inputs.GetNetworkconfigPolicyPermissionResource[];
    preferredIpv4dnsServer?: string;
    preferredIpv6dnsServer?: string;
    profiles?: inputs.GetNetworkconfigPolicyProfile[];
    sharedScope?: string;
    tags?: inputs.GetNetworkconfigPolicyTag[];
    versionContext?: inputs.GetNetworkconfigPolicyVersionContext;
}

/**
 * A collection of values returned by getNetworkconfigPolicy.
 */
export interface GetNetworkconfigPolicyResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly alternateIpv4dnsServer?: string;
    readonly alternateIpv6dnsServer?: string;
    readonly ancestors?: outputs.GetNetworkconfigPolicyAncestor[];
    readonly applianceAccount?: outputs.GetNetworkconfigPolicyApplianceAccount;
    readonly classId?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly dynamicDnsDomain?: string;
    readonly enableDynamicDns?: boolean;
    readonly enableIpv4dnsFromDhcp?: boolean;
    readonly enableIpv6?: boolean;
    readonly enableIpv6dnsFromDhcp?: boolean;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly organization?: outputs.GetNetworkconfigPolicyOrganization;
    readonly owners?: string[];
    readonly parent?: outputs.GetNetworkconfigPolicyParent;
    readonly permissionResources?: outputs.GetNetworkconfigPolicyPermissionResource[];
    readonly preferredIpv4dnsServer?: string;
    readonly preferredIpv6dnsServer?: string;
    readonly profiles?: outputs.GetNetworkconfigPolicyProfile[];
    readonly results: outputs.GetNetworkconfigPolicyResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetNetworkconfigPolicyTag[];
    readonly versionContext?: outputs.GetNetworkconfigPolicyVersionContext;
}
export function getNetworkconfigPolicyOutput(args?: GetNetworkconfigPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkconfigPolicyResult> {
    return pulumi.output(args).apply((a: any) => getNetworkconfigPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getNetworkconfigPolicy.
 */
export interface GetNetworkconfigPolicyOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    alternateIpv4dnsServer?: pulumi.Input<string>;
    alternateIpv6dnsServer?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetNetworkconfigPolicyAncestorArgs>[]>;
    applianceAccount?: pulumi.Input<inputs.GetNetworkconfigPolicyApplianceAccountArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    dynamicDnsDomain?: pulumi.Input<string>;
    enableDynamicDns?: pulumi.Input<boolean>;
    enableIpv4dnsFromDhcp?: pulumi.Input<boolean>;
    enableIpv6?: pulumi.Input<boolean>;
    enableIpv6dnsFromDhcp?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.GetNetworkconfigPolicyOrganizationArgs>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetNetworkconfigPolicyParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetNetworkconfigPolicyPermissionResourceArgs>[]>;
    preferredIpv4dnsServer?: pulumi.Input<string>;
    preferredIpv6dnsServer?: pulumi.Input<string>;
    profiles?: pulumi.Input<pulumi.Input<inputs.GetNetworkconfigPolicyProfileArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetNetworkconfigPolicyTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetNetworkconfigPolicyVersionContextArgs>;
}
