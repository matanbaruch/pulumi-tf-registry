// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIamIdp(args?: GetIamIdpArgs, opts?: pulumi.InvokeOptions): Promise<GetIamIdpResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getIamIdp:getIamIdp", {
        "account": args.account,
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "domainName": args.domainName,
        "domainNames": args.domainNames,
        "enableSingleLogout": args.enableSingleLogout,
        "id": args.id,
        "idpEntityId": args.idpEntityId,
        "ldapPolicy": args.ldapPolicy,
        "metadata": args.metadata,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "sharedScope": args.sharedScope,
        "skipWarning": args.skipWarning,
        "system": args.system,
        "tags": args.tags,
        "type": args.type,
        "userPreferences": args.userPreferences,
        "userSettings": args.userSettings,
        "usergroups": args.usergroups,
        "users": args.users,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIamIdp.
 */
export interface GetIamIdpArgs {
    account?: inputs.GetIamIdpAccount;
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetIamIdpAncestor[];
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    domainName?: string;
    domainNames?: string[];
    enableSingleLogout?: boolean;
    id?: string;
    idpEntityId?: string;
    ldapPolicy?: inputs.GetIamIdpLdapPolicy;
    metadata?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetIamIdpParent;
    permissionResources?: inputs.GetIamIdpPermissionResource[];
    sharedScope?: string;
    skipWarning?: boolean;
    system?: inputs.GetIamIdpSystem;
    tags?: inputs.GetIamIdpTag[];
    type?: string;
    userPreferences?: inputs.GetIamIdpUserPreference[];
    userSettings?: inputs.GetIamIdpUserSetting[];
    usergroups?: inputs.GetIamIdpUsergroup[];
    users?: inputs.GetIamIdpUser[];
    versionContext?: inputs.GetIamIdpVersionContext;
}

/**
 * A collection of values returned by getIamIdp.
 */
export interface GetIamIdpResult {
    readonly account?: outputs.GetIamIdpAccount;
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetIamIdpAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly domainName?: string;
    readonly domainNames?: string[];
    readonly enableSingleLogout?: boolean;
    readonly id: string;
    readonly idpEntityId?: string;
    readonly ldapPolicy?: outputs.GetIamIdpLdapPolicy;
    readonly metadata?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetIamIdpParent;
    readonly permissionResources?: outputs.GetIamIdpPermissionResource[];
    readonly results: outputs.GetIamIdpResult[];
    readonly sharedScope?: string;
    readonly skipWarning?: boolean;
    readonly system?: outputs.GetIamIdpSystem;
    readonly tags?: outputs.GetIamIdpTag[];
    readonly type?: string;
    readonly userPreferences?: outputs.GetIamIdpUserPreference[];
    readonly userSettings?: outputs.GetIamIdpUserSetting[];
    readonly usergroups?: outputs.GetIamIdpUsergroup[];
    readonly users?: outputs.GetIamIdpUser[];
    readonly versionContext?: outputs.GetIamIdpVersionContext;
}
export function getIamIdpOutput(args?: GetIamIdpOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIamIdpResult> {
    return pulumi.output(args).apply((a: any) => getIamIdp(a, opts))
}

/**
 * A collection of arguments for invoking getIamIdp.
 */
export interface GetIamIdpOutputArgs {
    account?: pulumi.Input<inputs.GetIamIdpAccountArgs>;
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetIamIdpAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    domainNames?: pulumi.Input<pulumi.Input<string>[]>;
    enableSingleLogout?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    idpEntityId?: pulumi.Input<string>;
    ldapPolicy?: pulumi.Input<inputs.GetIamIdpLdapPolicyArgs>;
    metadata?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetIamIdpParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetIamIdpPermissionResourceArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    skipWarning?: pulumi.Input<boolean>;
    system?: pulumi.Input<inputs.GetIamIdpSystemArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetIamIdpTagArgs>[]>;
    type?: pulumi.Input<string>;
    userPreferences?: pulumi.Input<pulumi.Input<inputs.GetIamIdpUserPreferenceArgs>[]>;
    userSettings?: pulumi.Input<pulumi.Input<inputs.GetIamIdpUserSettingArgs>[]>;
    usergroups?: pulumi.Input<pulumi.Input<inputs.GetIamIdpUsergroupArgs>[]>;
    users?: pulumi.Input<pulumi.Input<inputs.GetIamIdpUserArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetIamIdpVersionContextArgs>;
}
