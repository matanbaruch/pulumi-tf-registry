// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getApplianceNodeStatus(args?: GetApplianceNodeStatusArgs, opts?: pulumi.InvokeOptions): Promise<GetApplianceNodeStatusResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getApplianceNodeStatus:getApplianceNodeStatus", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "cpuUsage": args.cpuUsage,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "fileSystemStatuses": args.fileSystemStatuses,
        "id": args.id,
        "memUsage": args.memUsage,
        "modTime": args.modTime,
        "moid": args.moid,
        "nodeId": args.nodeId,
        "nodeInfo": args.nodeInfo,
        "nodeState": args.nodeState,
        "objectType": args.objectType,
        "operationalStatus": args.operationalStatus,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "sharedScope": args.sharedScope,
        "statusChecks": args.statusChecks,
        "systemStatus": args.systemStatus,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getApplianceNodeStatus.
 */
export interface GetApplianceNodeStatusArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetApplianceNodeStatusAncestor[];
    classId?: string;
    cpuUsage?: number;
    createTime?: string;
    domainGroupMoid?: string;
    fileSystemStatuses?: inputs.GetApplianceNodeStatusFileSystemStatus[];
    id?: string;
    memUsage?: number;
    modTime?: string;
    moid?: string;
    nodeId?: number;
    nodeInfo?: inputs.GetApplianceNodeStatusNodeInfo;
    nodeState?: string;
    objectType?: string;
    operationalStatus?: string;
    owners?: string[];
    parent?: inputs.GetApplianceNodeStatusParent;
    permissionResources?: inputs.GetApplianceNodeStatusPermissionResource[];
    sharedScope?: string;
    statusChecks?: inputs.GetApplianceNodeStatusStatusCheck[];
    systemStatus?: inputs.GetApplianceNodeStatusSystemStatus;
    tags?: inputs.GetApplianceNodeStatusTag[];
    versionContext?: inputs.GetApplianceNodeStatusVersionContext;
}

/**
 * A collection of values returned by getApplianceNodeStatus.
 */
export interface GetApplianceNodeStatusResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetApplianceNodeStatusAncestor[];
    readonly classId?: string;
    readonly cpuUsage?: number;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly fileSystemStatuses?: outputs.GetApplianceNodeStatusFileSystemStatus[];
    readonly id: string;
    readonly memUsage?: number;
    readonly modTime?: string;
    readonly moid?: string;
    readonly nodeId?: number;
    readonly nodeInfo?: outputs.GetApplianceNodeStatusNodeInfo;
    readonly nodeState?: string;
    readonly objectType?: string;
    readonly operationalStatus?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetApplianceNodeStatusParent;
    readonly permissionResources?: outputs.GetApplianceNodeStatusPermissionResource[];
    readonly results: outputs.GetApplianceNodeStatusResult[];
    readonly sharedScope?: string;
    readonly statusChecks?: outputs.GetApplianceNodeStatusStatusCheck[];
    readonly systemStatus?: outputs.GetApplianceNodeStatusSystemStatus;
    readonly tags?: outputs.GetApplianceNodeStatusTag[];
    readonly versionContext?: outputs.GetApplianceNodeStatusVersionContext;
}
export function getApplianceNodeStatusOutput(args?: GetApplianceNodeStatusOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetApplianceNodeStatusResult> {
    return pulumi.output(args).apply((a: any) => getApplianceNodeStatus(a, opts))
}

/**
 * A collection of arguments for invoking getApplianceNodeStatus.
 */
export interface GetApplianceNodeStatusOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetApplianceNodeStatusAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    cpuUsage?: pulumi.Input<number>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    fileSystemStatuses?: pulumi.Input<pulumi.Input<inputs.GetApplianceNodeStatusFileSystemStatusArgs>[]>;
    id?: pulumi.Input<string>;
    memUsage?: pulumi.Input<number>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    nodeId?: pulumi.Input<number>;
    nodeInfo?: pulumi.Input<inputs.GetApplianceNodeStatusNodeInfoArgs>;
    nodeState?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operationalStatus?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetApplianceNodeStatusParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetApplianceNodeStatusPermissionResourceArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    statusChecks?: pulumi.Input<pulumi.Input<inputs.GetApplianceNodeStatusStatusCheckArgs>[]>;
    systemStatus?: pulumi.Input<inputs.GetApplianceNodeStatusSystemStatusArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetApplianceNodeStatusTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetApplianceNodeStatusVersionContextArgs>;
}
