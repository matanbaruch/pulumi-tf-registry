// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getWorkflowServiceItemDefinition(args?: GetWorkflowServiceItemDefinitionArgs, opts?: pulumi.InvokeOptions): Promise<GetWorkflowServiceItemDefinitionResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getWorkflowServiceItemDefinition:getWorkflowServiceItemDefinition", {
        "accountMoid": args.accountMoid,
        "actionDefinitions": args.actionDefinitions,
        "additionalProperties": args.additionalProperties,
        "allowMultipleServiceItemInstances": args.allowMultipleServiceItemInstances,
        "ancestors": args.ancestors,
        "attributeDefinitions": args.attributeDefinitions,
        "catalog": args.catalog,
        "classId": args.classId,
        "createTime": args.createTime,
        "createUser": args.createUser,
        "cvdId": args.cvdId,
        "deleteInstanceOnDecommission": args.deleteInstanceOnDecommission,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "label": args.label,
        "licenseEntitlement": args.licenseEntitlement,
        "modTime": args.modTime,
        "modUser": args.modUser,
        "moid": args.moid,
        "name": args.name,
        "nrVersion": args.nrVersion,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "publishStatus": args.publishStatus,
        "sharedScope": args.sharedScope,
        "status": args.status,
        "supportStatus": args.supportStatus,
        "tags": args.tags,
        "userIdOrEmail": args.userIdOrEmail,
        "validationInformation": args.validationInformation,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getWorkflowServiceItemDefinition.
 */
export interface GetWorkflowServiceItemDefinitionArgs {
    accountMoid?: string;
    actionDefinitions?: inputs.GetWorkflowServiceItemDefinitionActionDefinition[];
    additionalProperties?: string;
    allowMultipleServiceItemInstances?: boolean;
    ancestors?: inputs.GetWorkflowServiceItemDefinitionAncestor[];
    attributeDefinitions?: inputs.GetWorkflowServiceItemDefinitionAttributeDefinition[];
    catalog?: inputs.GetWorkflowServiceItemDefinitionCatalog;
    classId?: string;
    createTime?: string;
    createUser?: string;
    cvdId?: string;
    deleteInstanceOnDecommission?: boolean;
    description?: string;
    domainGroupMoid?: string;
    id?: string;
    label?: string;
    licenseEntitlement?: string;
    modTime?: string;
    modUser?: string;
    moid?: string;
    name?: string;
    nrVersion?: number;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetWorkflowServiceItemDefinitionParent;
    permissionResources?: inputs.GetWorkflowServiceItemDefinitionPermissionResource[];
    publishStatus?: string;
    sharedScope?: string;
    status?: string;
    supportStatus?: string;
    tags?: inputs.GetWorkflowServiceItemDefinitionTag[];
    userIdOrEmail?: string;
    validationInformation?: inputs.GetWorkflowServiceItemDefinitionValidationInformation;
    versionContext?: inputs.GetWorkflowServiceItemDefinitionVersionContext;
}

/**
 * A collection of values returned by getWorkflowServiceItemDefinition.
 */
export interface GetWorkflowServiceItemDefinitionResult {
    readonly accountMoid?: string;
    readonly actionDefinitions?: outputs.GetWorkflowServiceItemDefinitionActionDefinition[];
    readonly additionalProperties?: string;
    readonly allowMultipleServiceItemInstances?: boolean;
    readonly ancestors?: outputs.GetWorkflowServiceItemDefinitionAncestor[];
    readonly attributeDefinitions?: outputs.GetWorkflowServiceItemDefinitionAttributeDefinition[];
    readonly catalog?: outputs.GetWorkflowServiceItemDefinitionCatalog;
    readonly classId?: string;
    readonly createTime?: string;
    readonly createUser?: string;
    readonly cvdId?: string;
    readonly deleteInstanceOnDecommission?: boolean;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly label?: string;
    readonly licenseEntitlement?: string;
    readonly modTime?: string;
    readonly modUser?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nrVersion?: number;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetWorkflowServiceItemDefinitionParent;
    readonly permissionResources?: outputs.GetWorkflowServiceItemDefinitionPermissionResource[];
    readonly publishStatus?: string;
    readonly results: outputs.GetWorkflowServiceItemDefinitionResult[];
    readonly sharedScope?: string;
    readonly status?: string;
    readonly supportStatus?: string;
    readonly tags?: outputs.GetWorkflowServiceItemDefinitionTag[];
    readonly userIdOrEmail?: string;
    readonly validationInformation?: outputs.GetWorkflowServiceItemDefinitionValidationInformation;
    readonly versionContext?: outputs.GetWorkflowServiceItemDefinitionVersionContext;
}
export function getWorkflowServiceItemDefinitionOutput(args?: GetWorkflowServiceItemDefinitionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWorkflowServiceItemDefinitionResult> {
    return pulumi.output(args).apply((a: any) => getWorkflowServiceItemDefinition(a, opts))
}

/**
 * A collection of arguments for invoking getWorkflowServiceItemDefinition.
 */
export interface GetWorkflowServiceItemDefinitionOutputArgs {
    accountMoid?: pulumi.Input<string>;
    actionDefinitions?: pulumi.Input<pulumi.Input<inputs.GetWorkflowServiceItemDefinitionActionDefinitionArgs>[]>;
    additionalProperties?: pulumi.Input<string>;
    allowMultipleServiceItemInstances?: pulumi.Input<boolean>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetWorkflowServiceItemDefinitionAncestorArgs>[]>;
    attributeDefinitions?: pulumi.Input<pulumi.Input<inputs.GetWorkflowServiceItemDefinitionAttributeDefinitionArgs>[]>;
    catalog?: pulumi.Input<inputs.GetWorkflowServiceItemDefinitionCatalogArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    createUser?: pulumi.Input<string>;
    cvdId?: pulumi.Input<string>;
    deleteInstanceOnDecommission?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    licenseEntitlement?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    modUser?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nrVersion?: pulumi.Input<number>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetWorkflowServiceItemDefinitionParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetWorkflowServiceItemDefinitionPermissionResourceArgs>[]>;
    publishStatus?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    supportStatus?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetWorkflowServiceItemDefinitionTagArgs>[]>;
    userIdOrEmail?: pulumi.Input<string>;
    validationInformation?: pulumi.Input<inputs.GetWorkflowServiceItemDefinitionValidationInformationArgs>;
    versionContext?: pulumi.Input<inputs.GetWorkflowServiceItemDefinitionVersionContextArgs>;
}
