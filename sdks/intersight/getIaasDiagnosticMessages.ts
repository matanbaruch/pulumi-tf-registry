// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIaasDiagnosticMessages(args?: GetIaasDiagnosticMessagesArgs, opts?: pulumi.InvokeOptions): Promise<GetIaasDiagnosticMessagesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getIaasDiagnosticMessages:getIaasDiagnosticMessages", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "category": args.category,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "guid": args.guid,
        "id": args.id,
        "item": args.item,
        "lastChecked": args.lastChecked,
        "message": args.message,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "recommendation": args.recommendation,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "status": args.status,
        "statusId": args.statusId,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIaasDiagnosticMessages.
 */
export interface GetIaasDiagnosticMessagesArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetIaasDiagnosticMessagesAncestor[];
    category?: string;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    guid?: string;
    id?: string;
    item?: string;
    lastChecked?: string;
    message?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetIaasDiagnosticMessagesParent;
    permissionResources?: inputs.GetIaasDiagnosticMessagesPermissionResource[];
    recommendation?: string;
    registeredDevice?: inputs.GetIaasDiagnosticMessagesRegisteredDevice;
    sharedScope?: string;
    status?: string;
    statusId?: string;
    tags?: inputs.GetIaasDiagnosticMessagesTag[];
    versionContext?: inputs.GetIaasDiagnosticMessagesVersionContext;
}

/**
 * A collection of values returned by getIaasDiagnosticMessages.
 */
export interface GetIaasDiagnosticMessagesResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetIaasDiagnosticMessagesAncestor[];
    readonly category?: string;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly guid?: string;
    readonly id: string;
    readonly item?: string;
    readonly lastChecked?: string;
    readonly message?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetIaasDiagnosticMessagesParent;
    readonly permissionResources?: outputs.GetIaasDiagnosticMessagesPermissionResource[];
    readonly recommendation?: string;
    readonly registeredDevice?: outputs.GetIaasDiagnosticMessagesRegisteredDevice;
    readonly results: outputs.GetIaasDiagnosticMessagesResult[];
    readonly sharedScope?: string;
    readonly status?: string;
    readonly statusId?: string;
    readonly tags?: outputs.GetIaasDiagnosticMessagesTag[];
    readonly versionContext?: outputs.GetIaasDiagnosticMessagesVersionContext;
}
export function getIaasDiagnosticMessagesOutput(args?: GetIaasDiagnosticMessagesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIaasDiagnosticMessagesResult> {
    return pulumi.output(args).apply((a: any) => getIaasDiagnosticMessages(a, opts))
}

/**
 * A collection of arguments for invoking getIaasDiagnosticMessages.
 */
export interface GetIaasDiagnosticMessagesOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetIaasDiagnosticMessagesAncestorArgs>[]>;
    category?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    guid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    item?: pulumi.Input<string>;
    lastChecked?: pulumi.Input<string>;
    message?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetIaasDiagnosticMessagesParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetIaasDiagnosticMessagesPermissionResourceArgs>[]>;
    recommendation?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetIaasDiagnosticMessagesRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    statusId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetIaasDiagnosticMessagesTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetIaasDiagnosticMessagesVersionContextArgs>;
}
