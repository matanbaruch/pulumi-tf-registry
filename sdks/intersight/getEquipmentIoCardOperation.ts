// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEquipmentIoCardOperation(args?: GetEquipmentIoCardOperationArgs, opts?: pulumi.InvokeOptions): Promise<GetEquipmentIoCardOperationResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getEquipmentIoCardOperation:getEquipmentIoCardOperation", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "adminPeerPowerState": args.adminPeerPowerState,
        "adminPowerState": args.adminPowerState,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "configState": args.configState,
        "createTime": args.createTime,
        "deviceRegistration": args.deviceRegistration,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "ioCard": args.ioCard,
        "ioCardOperationStatuses": args.ioCardOperationStatuses,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEquipmentIoCardOperation.
 */
export interface GetEquipmentIoCardOperationArgs {
    accountMoid?: string;
    additionalProperties?: string;
    adminPeerPowerState?: string;
    adminPowerState?: string;
    ancestors?: inputs.GetEquipmentIoCardOperationAncestor[];
    classId?: string;
    configState?: string;
    createTime?: string;
    deviceRegistration?: inputs.GetEquipmentIoCardOperationDeviceRegistration;
    domainGroupMoid?: string;
    id?: string;
    ioCard?: inputs.GetEquipmentIoCardOperationIoCard;
    ioCardOperationStatuses?: inputs.GetEquipmentIoCardOperationIoCardOperationStatus[];
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetEquipmentIoCardOperationParent;
    permissionResources?: inputs.GetEquipmentIoCardOperationPermissionResource[];
    sharedScope?: string;
    tags?: inputs.GetEquipmentIoCardOperationTag[];
    versionContext?: inputs.GetEquipmentIoCardOperationVersionContext;
}

/**
 * A collection of values returned by getEquipmentIoCardOperation.
 */
export interface GetEquipmentIoCardOperationResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly adminPeerPowerState?: string;
    readonly adminPowerState?: string;
    readonly ancestors?: outputs.GetEquipmentIoCardOperationAncestor[];
    readonly classId?: string;
    readonly configState?: string;
    readonly createTime?: string;
    readonly deviceRegistration?: outputs.GetEquipmentIoCardOperationDeviceRegistration;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly ioCard?: outputs.GetEquipmentIoCardOperationIoCard;
    readonly ioCardOperationStatuses?: outputs.GetEquipmentIoCardOperationIoCardOperationStatus[];
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetEquipmentIoCardOperationParent;
    readonly permissionResources?: outputs.GetEquipmentIoCardOperationPermissionResource[];
    readonly results: outputs.GetEquipmentIoCardOperationResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetEquipmentIoCardOperationTag[];
    readonly versionContext?: outputs.GetEquipmentIoCardOperationVersionContext;
}
export function getEquipmentIoCardOperationOutput(args?: GetEquipmentIoCardOperationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEquipmentIoCardOperationResult> {
    return pulumi.output(args).apply((a: any) => getEquipmentIoCardOperation(a, opts))
}

/**
 * A collection of arguments for invoking getEquipmentIoCardOperation.
 */
export interface GetEquipmentIoCardOperationOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    adminPeerPowerState?: pulumi.Input<string>;
    adminPowerState?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetEquipmentIoCardOperationAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    configState?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceRegistration?: pulumi.Input<inputs.GetEquipmentIoCardOperationDeviceRegistrationArgs>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ioCard?: pulumi.Input<inputs.GetEquipmentIoCardOperationIoCardArgs>;
    ioCardOperationStatuses?: pulumi.Input<pulumi.Input<inputs.GetEquipmentIoCardOperationIoCardOperationStatusArgs>[]>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetEquipmentIoCardOperationParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetEquipmentIoCardOperationPermissionResourceArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetEquipmentIoCardOperationTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetEquipmentIoCardOperationVersionContextArgs>;
}
