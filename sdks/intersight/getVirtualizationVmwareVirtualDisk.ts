// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVirtualizationVmwareVirtualDisk(args?: GetVirtualizationVmwareVirtualDiskArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualizationVmwareVirtualDiskResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getVirtualizationVmwareVirtualDisk:getVirtualizationVmwareVirtualDisk", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "compatibilityMode": args.compatibilityMode,
        "controllerKey": args.controllerKey,
        "createTime": args.createTime,
        "datastore": args.datastore,
        "deviceName": args.deviceName,
        "diskMode": args.diskMode,
        "diskType": args.diskType,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "key": args.key,
        "limit": args.limit,
        "lunUuid": args.lunUuid,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "shares": args.shares,
        "sharing": args.sharing,
        "size": args.size,
        "storageAllocationType": args.storageAllocationType,
        "tags": args.tags,
        "unitNumber": args.unitNumber,
        "uuid": args.uuid,
        "vdiskId": args.vdiskId,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
        "virtualDiskPath": args.virtualDiskPath,
        "virtualMachine": args.virtualMachine,
        "vmIdentity": args.vmIdentity,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareVirtualDisk.
 */
export interface GetVirtualizationVmwareVirtualDiskArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetVirtualizationVmwareVirtualDiskAncestor[];
    classId?: string;
    compatibilityMode?: string;
    controllerKey?: number;
    createTime?: string;
    datastore?: inputs.GetVirtualizationVmwareVirtualDiskDatastore;
    deviceName?: string;
    diskMode?: string;
    diskType?: string;
    domainGroupMoid?: string;
    id?: string;
    key?: number;
    limit?: number;
    lunUuid?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetVirtualizationVmwareVirtualDiskParent;
    permissionResources?: inputs.GetVirtualizationVmwareVirtualDiskPermissionResource[];
    registeredDevice?: inputs.GetVirtualizationVmwareVirtualDiskRegisteredDevice;
    serial?: string;
    sharedScope?: string;
    shares?: inputs.GetVirtualizationVmwareVirtualDiskShares;
    sharing?: string;
    size?: number;
    storageAllocationType?: string;
    tags?: inputs.GetVirtualizationVmwareVirtualDiskTag[];
    unitNumber?: number;
    uuid?: string;
    vdiskId?: string;
    vendor?: string;
    versionContext?: inputs.GetVirtualizationVmwareVirtualDiskVersionContext;
    virtualDiskPath?: string;
    virtualMachine?: inputs.GetVirtualizationVmwareVirtualDiskVirtualMachine;
    vmIdentity?: string;
}

/**
 * A collection of values returned by getVirtualizationVmwareVirtualDisk.
 */
export interface GetVirtualizationVmwareVirtualDiskResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetVirtualizationVmwareVirtualDiskAncestor[];
    readonly classId?: string;
    readonly compatibilityMode?: string;
    readonly controllerKey?: number;
    readonly createTime?: string;
    readonly datastore?: outputs.GetVirtualizationVmwareVirtualDiskDatastore;
    readonly deviceName?: string;
    readonly diskMode?: string;
    readonly diskType?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly key?: number;
    readonly limit?: number;
    readonly lunUuid?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetVirtualizationVmwareVirtualDiskParent;
    readonly permissionResources?: outputs.GetVirtualizationVmwareVirtualDiskPermissionResource[];
    readonly registeredDevice?: outputs.GetVirtualizationVmwareVirtualDiskRegisteredDevice;
    readonly results: outputs.GetVirtualizationVmwareVirtualDiskResult[];
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly shares?: outputs.GetVirtualizationVmwareVirtualDiskShares;
    readonly sharing?: string;
    readonly size?: number;
    readonly storageAllocationType?: string;
    readonly tags?: outputs.GetVirtualizationVmwareVirtualDiskTag[];
    readonly unitNumber?: number;
    readonly uuid?: string;
    readonly vdiskId?: string;
    readonly vendor?: string;
    readonly versionContext?: outputs.GetVirtualizationVmwareVirtualDiskVersionContext;
    readonly virtualDiskPath?: string;
    readonly virtualMachine?: outputs.GetVirtualizationVmwareVirtualDiskVirtualMachine;
    readonly vmIdentity?: string;
}
export function getVirtualizationVmwareVirtualDiskOutput(args?: GetVirtualizationVmwareVirtualDiskOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualizationVmwareVirtualDiskResult> {
    return pulumi.output(args).apply((a: any) => getVirtualizationVmwareVirtualDisk(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareVirtualDisk.
 */
export interface GetVirtualizationVmwareVirtualDiskOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareVirtualDiskAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    compatibilityMode?: pulumi.Input<string>;
    controllerKey?: pulumi.Input<number>;
    createTime?: pulumi.Input<string>;
    datastore?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualDiskDatastoreArgs>;
    deviceName?: pulumi.Input<string>;
    diskMode?: pulumi.Input<string>;
    diskType?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    key?: pulumi.Input<number>;
    limit?: pulumi.Input<number>;
    lunUuid?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualDiskParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareVirtualDiskPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualDiskRegisteredDeviceArgs>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    shares?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualDiskSharesArgs>;
    sharing?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    storageAllocationType?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareVirtualDiskTagArgs>[]>;
    unitNumber?: pulumi.Input<number>;
    uuid?: pulumi.Input<string>;
    vdiskId?: pulumi.Input<string>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualDiskVersionContextArgs>;
    virtualDiskPath?: pulumi.Input<string>;
    virtualMachine?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualDiskVirtualMachineArgs>;
    vmIdentity?: pulumi.Input<string>;
}
