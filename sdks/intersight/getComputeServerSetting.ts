// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getComputeServerSetting(args?: GetComputeServerSettingArgs, opts?: pulumi.InvokeOptions): Promise<GetComputeServerSettingResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getComputeServerSetting:getComputeServerSetting", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "adminLocatorLedState": args.adminLocatorLedState,
        "adminPowerState": args.adminPowerState,
        "ancestors": args.ancestors,
        "certificatesAction": args.certificatesAction,
        "classId": args.classId,
        "clearSel": args.clearSel,
        "cmosReset": args.cmosReset,
        "collectSel": args.collectSel,
        "configState": args.configState,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "frontPanelLockState": args.frontPanelLockState,
        "hostInitConfiguration": args.hostInitConfiguration,
        "id": args.id,
        "kvmReset": args.kvmReset,
        "locatorLed": args.locatorLed,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "oneTimeBootDevice": args.oneTimeBootDevice,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "persistentMemoryOperation": args.persistentMemoryOperation,
        "personalitySetting": args.personalitySetting,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "runningWorkflow": args.runningWorkflow,
        "server": args.server,
        "serverConfig": args.serverConfig,
        "serverOpStatuses": args.serverOpStatuses,
        "sharedScope": args.sharedScope,
        "storageControllerOperation": args.storageControllerOperation,
        "storagePhysicalDriveOperation": args.storagePhysicalDriveOperation,
        "storageUtilityImageOperation": args.storageUtilityImageOperation,
        "storageVirtualDriveOperation": args.storageVirtualDriveOperation,
        "tags": args.tags,
        "tpmReset": args.tpmReset,
        "tunneledKvmState": args.tunneledKvmState,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getComputeServerSetting.
 */
export interface GetComputeServerSettingArgs {
    accountMoid?: string;
    additionalProperties?: string;
    adminLocatorLedState?: string;
    adminPowerState?: string;
    ancestors?: inputs.GetComputeServerSettingAncestor[];
    certificatesAction?: inputs.GetComputeServerSettingCertificatesAction;
    classId?: string;
    clearSel?: string;
    cmosReset?: string;
    collectSel?: string;
    configState?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    frontPanelLockState?: string;
    hostInitConfiguration?: string;
    id?: string;
    kvmReset?: string;
    locatorLed?: inputs.GetComputeServerSettingLocatorLed;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    oneTimeBootDevice?: string;
    owners?: string[];
    parent?: inputs.GetComputeServerSettingParent;
    permissionResources?: inputs.GetComputeServerSettingPermissionResource[];
    persistentMemoryOperation?: inputs.GetComputeServerSettingPersistentMemoryOperation;
    personalitySetting?: inputs.GetComputeServerSettingPersonalitySetting;
    registeredDevice?: inputs.GetComputeServerSettingRegisteredDevice;
    rn?: string;
    runningWorkflow?: inputs.GetComputeServerSettingRunningWorkflow;
    server?: inputs.GetComputeServerSettingServer;
    serverConfig?: inputs.GetComputeServerSettingServerConfig;
    serverOpStatuses?: inputs.GetComputeServerSettingServerOpStatus[];
    sharedScope?: string;
    storageControllerOperation?: inputs.GetComputeServerSettingStorageControllerOperation;
    storagePhysicalDriveOperation?: inputs.GetComputeServerSettingStoragePhysicalDriveOperation;
    storageUtilityImageOperation?: inputs.GetComputeServerSettingStorageUtilityImageOperation;
    storageVirtualDriveOperation?: inputs.GetComputeServerSettingStorageVirtualDriveOperation;
    tags?: inputs.GetComputeServerSettingTag[];
    tpmReset?: string;
    tunneledKvmState?: string;
    versionContext?: inputs.GetComputeServerSettingVersionContext;
}

/**
 * A collection of values returned by getComputeServerSetting.
 */
export interface GetComputeServerSettingResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly adminLocatorLedState?: string;
    readonly adminPowerState?: string;
    readonly ancestors?: outputs.GetComputeServerSettingAncestor[];
    readonly certificatesAction?: outputs.GetComputeServerSettingCertificatesAction;
    readonly classId?: string;
    readonly clearSel?: string;
    readonly cmosReset?: string;
    readonly collectSel?: string;
    readonly configState?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly frontPanelLockState?: string;
    readonly hostInitConfiguration?: string;
    readonly id: string;
    readonly kvmReset?: string;
    readonly locatorLed?: outputs.GetComputeServerSettingLocatorLed;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly oneTimeBootDevice?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetComputeServerSettingParent;
    readonly permissionResources?: outputs.GetComputeServerSettingPermissionResource[];
    readonly persistentMemoryOperation?: outputs.GetComputeServerSettingPersistentMemoryOperation;
    readonly personalitySetting?: outputs.GetComputeServerSettingPersonalitySetting;
    readonly registeredDevice?: outputs.GetComputeServerSettingRegisteredDevice;
    readonly results: outputs.GetComputeServerSettingResult[];
    readonly rn?: string;
    readonly runningWorkflow?: outputs.GetComputeServerSettingRunningWorkflow;
    readonly server?: outputs.GetComputeServerSettingServer;
    readonly serverConfig?: outputs.GetComputeServerSettingServerConfig;
    readonly serverOpStatuses?: outputs.GetComputeServerSettingServerOpStatus[];
    readonly sharedScope?: string;
    readonly storageControllerOperation?: outputs.GetComputeServerSettingStorageControllerOperation;
    readonly storagePhysicalDriveOperation?: outputs.GetComputeServerSettingStoragePhysicalDriveOperation;
    readonly storageUtilityImageOperation?: outputs.GetComputeServerSettingStorageUtilityImageOperation;
    readonly storageVirtualDriveOperation?: outputs.GetComputeServerSettingStorageVirtualDriveOperation;
    readonly tags?: outputs.GetComputeServerSettingTag[];
    readonly tpmReset?: string;
    readonly tunneledKvmState?: string;
    readonly versionContext?: outputs.GetComputeServerSettingVersionContext;
}
export function getComputeServerSettingOutput(args?: GetComputeServerSettingOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetComputeServerSettingResult> {
    return pulumi.output(args).apply((a: any) => getComputeServerSetting(a, opts))
}

/**
 * A collection of arguments for invoking getComputeServerSetting.
 */
export interface GetComputeServerSettingOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    adminLocatorLedState?: pulumi.Input<string>;
    adminPowerState?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetComputeServerSettingAncestorArgs>[]>;
    certificatesAction?: pulumi.Input<inputs.GetComputeServerSettingCertificatesActionArgs>;
    classId?: pulumi.Input<string>;
    clearSel?: pulumi.Input<string>;
    cmosReset?: pulumi.Input<string>;
    collectSel?: pulumi.Input<string>;
    configState?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    frontPanelLockState?: pulumi.Input<string>;
    hostInitConfiguration?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    kvmReset?: pulumi.Input<string>;
    locatorLed?: pulumi.Input<inputs.GetComputeServerSettingLocatorLedArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    oneTimeBootDevice?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetComputeServerSettingParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetComputeServerSettingPermissionResourceArgs>[]>;
    persistentMemoryOperation?: pulumi.Input<inputs.GetComputeServerSettingPersistentMemoryOperationArgs>;
    personalitySetting?: pulumi.Input<inputs.GetComputeServerSettingPersonalitySettingArgs>;
    registeredDevice?: pulumi.Input<inputs.GetComputeServerSettingRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    runningWorkflow?: pulumi.Input<inputs.GetComputeServerSettingRunningWorkflowArgs>;
    server?: pulumi.Input<inputs.GetComputeServerSettingServerArgs>;
    serverConfig?: pulumi.Input<inputs.GetComputeServerSettingServerConfigArgs>;
    serverOpStatuses?: pulumi.Input<pulumi.Input<inputs.GetComputeServerSettingServerOpStatusArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    storageControllerOperation?: pulumi.Input<inputs.GetComputeServerSettingStorageControllerOperationArgs>;
    storagePhysicalDriveOperation?: pulumi.Input<inputs.GetComputeServerSettingStoragePhysicalDriveOperationArgs>;
    storageUtilityImageOperation?: pulumi.Input<inputs.GetComputeServerSettingStorageUtilityImageOperationArgs>;
    storageVirtualDriveOperation?: pulumi.Input<inputs.GetComputeServerSettingStorageVirtualDriveOperationArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetComputeServerSettingTagArgs>[]>;
    tpmReset?: pulumi.Input<string>;
    tunneledKvmState?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetComputeServerSettingVersionContextArgs>;
}
