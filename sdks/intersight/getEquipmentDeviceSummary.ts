// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEquipmentDeviceSummary(args?: GetEquipmentDeviceSummaryArgs, opts?: pulumi.InvokeOptions): Promise<GetEquipmentDeviceSummaryResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getEquipmentDeviceSummary:getEquipmentDeviceSummary", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "computeBlade": args.computeBlade,
        "computeRackUnit": args.computeRackUnit,
        "createTime": args.createTime,
        "customPermissionResources": args.customPermissionResources,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "equipmentChassis": args.equipmentChassis,
        "equipmentFex": args.equipmentFex,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "inventoryParent": args.inventoryParent,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "sourceObjectType": args.sourceObjectType,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEquipmentDeviceSummary.
 */
export interface GetEquipmentDeviceSummaryArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetEquipmentDeviceSummaryAncestor[];
    classId?: string;
    computeBlade?: inputs.GetEquipmentDeviceSummaryComputeBlade;
    computeRackUnit?: inputs.GetEquipmentDeviceSummaryComputeRackUnit;
    createTime?: string;
    customPermissionResources?: inputs.GetEquipmentDeviceSummaryCustomPermissionResource[];
    dn?: string;
    domainGroupMoid?: string;
    equipmentChassis?: inputs.GetEquipmentDeviceSummaryEquipmentChassis;
    equipmentFex?: inputs.GetEquipmentDeviceSummaryEquipmentFex;
    id?: string;
    inventoryDeviceInfo?: inputs.GetEquipmentDeviceSummaryInventoryDeviceInfo;
    inventoryParent?: inputs.GetEquipmentDeviceSummaryInventoryParent;
    modTime?: string;
    model?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetEquipmentDeviceSummaryParent;
    permissionResources?: inputs.GetEquipmentDeviceSummaryPermissionResource[];
    registeredDevice?: inputs.GetEquipmentDeviceSummaryRegisteredDevice;
    serial?: string;
    sharedScope?: string;
    sourceObjectType?: string;
    tags?: inputs.GetEquipmentDeviceSummaryTag[];
    versionContext?: inputs.GetEquipmentDeviceSummaryVersionContext;
}

/**
 * A collection of values returned by getEquipmentDeviceSummary.
 */
export interface GetEquipmentDeviceSummaryResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetEquipmentDeviceSummaryAncestor[];
    readonly classId?: string;
    readonly computeBlade?: outputs.GetEquipmentDeviceSummaryComputeBlade;
    readonly computeRackUnit?: outputs.GetEquipmentDeviceSummaryComputeRackUnit;
    readonly createTime?: string;
    readonly customPermissionResources?: outputs.GetEquipmentDeviceSummaryCustomPermissionResource[];
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly equipmentChassis?: outputs.GetEquipmentDeviceSummaryEquipmentChassis;
    readonly equipmentFex?: outputs.GetEquipmentDeviceSummaryEquipmentFex;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetEquipmentDeviceSummaryInventoryDeviceInfo;
    readonly inventoryParent?: outputs.GetEquipmentDeviceSummaryInventoryParent;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetEquipmentDeviceSummaryParent;
    readonly permissionResources?: outputs.GetEquipmentDeviceSummaryPermissionResource[];
    readonly registeredDevice?: outputs.GetEquipmentDeviceSummaryRegisteredDevice;
    readonly results: outputs.GetEquipmentDeviceSummaryResult[];
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly sourceObjectType?: string;
    readonly tags?: outputs.GetEquipmentDeviceSummaryTag[];
    readonly versionContext?: outputs.GetEquipmentDeviceSummaryVersionContext;
}
export function getEquipmentDeviceSummaryOutput(args?: GetEquipmentDeviceSummaryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEquipmentDeviceSummaryResult> {
    return pulumi.output(args).apply((a: any) => getEquipmentDeviceSummary(a, opts))
}

/**
 * A collection of arguments for invoking getEquipmentDeviceSummary.
 */
export interface GetEquipmentDeviceSummaryOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetEquipmentDeviceSummaryAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    computeBlade?: pulumi.Input<inputs.GetEquipmentDeviceSummaryComputeBladeArgs>;
    computeRackUnit?: pulumi.Input<inputs.GetEquipmentDeviceSummaryComputeRackUnitArgs>;
    createTime?: pulumi.Input<string>;
    customPermissionResources?: pulumi.Input<pulumi.Input<inputs.GetEquipmentDeviceSummaryCustomPermissionResourceArgs>[]>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    equipmentChassis?: pulumi.Input<inputs.GetEquipmentDeviceSummaryEquipmentChassisArgs>;
    equipmentFex?: pulumi.Input<inputs.GetEquipmentDeviceSummaryEquipmentFexArgs>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetEquipmentDeviceSummaryInventoryDeviceInfoArgs>;
    inventoryParent?: pulumi.Input<inputs.GetEquipmentDeviceSummaryInventoryParentArgs>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetEquipmentDeviceSummaryParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetEquipmentDeviceSummaryPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetEquipmentDeviceSummaryRegisteredDeviceArgs>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    sourceObjectType?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetEquipmentDeviceSummaryTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetEquipmentDeviceSummaryVersionContextArgs>;
}
