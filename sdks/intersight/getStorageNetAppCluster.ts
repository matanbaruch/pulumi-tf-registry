// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageNetAppCluster(args?: GetStorageNetAppClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageNetAppClusterResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageNetAppCluster:getStorageNetAppCluster", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "autoSupport": args.autoSupport,
        "avgPerformanceMetrics": args.avgPerformanceMetrics,
        "classId": args.classId,
        "clusterEfficiency": args.clusterEfficiency,
        "clusterHealthStatus": args.clusterHealthStatus,
        "createTime": args.createTime,
        "defaultAdminLocked": args.defaultAdminLocked,
        "deviceLocation": args.deviceLocation,
        "deviceMoId": args.deviceMoId,
        "deviceType": args.deviceType,
        "dn": args.dn,
        "dnsDomains": args.dnsDomains,
        "domainGroupMoid": args.domainGroupMoid,
        "events": args.events,
        "fipsCompliant": args.fipsCompliant,
        "hardwareVersion": args.hardwareVersion,
        "id": args.id,
        "insecureCiphers": args.insecureCiphers,
        "isUpgraded": args.isUpgraded,
        "key": args.key,
        "location": args.location,
        "managementAddresses": args.managementAddresses,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "name": args.name,
        "nameServers": args.nameServers,
        "nrVersion": args.nrVersion,
        "ntpServers": args.ntpServers,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "registeredDevice": args.registeredDevice,
        "revision": args.revision,
        "rn": args.rn,
        "rshEnabled": args.rshEnabled,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "storageUtilization": args.storageUtilization,
        "tags": args.tags,
        "telnetEnabled": args.telnetEnabled,
        "uuid": args.uuid,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
        "versionGeneration": args.versionGeneration,
        "versionMajor": args.versionMajor,
        "versionMinor": args.versionMinor,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageNetAppCluster.
 */
export interface GetStorageNetAppClusterArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageNetAppClusterAncestor[];
    autoSupport?: inputs.GetStorageNetAppClusterAutoSupport;
    avgPerformanceMetrics?: inputs.GetStorageNetAppClusterAvgPerformanceMetrics;
    classId?: string;
    clusterEfficiency?: inputs.GetStorageNetAppClusterClusterEfficiency;
    clusterHealthStatus?: string;
    createTime?: string;
    defaultAdminLocked?: boolean;
    deviceLocation?: inputs.GetStorageNetAppClusterDeviceLocation;
    deviceMoId?: string;
    deviceType?: string;
    dn?: string;
    dnsDomains?: string[];
    domainGroupMoid?: string;
    events?: inputs.GetStorageNetAppClusterEvent[];
    fipsCompliant?: boolean;
    hardwareVersion?: string;
    id?: string;
    insecureCiphers?: number;
    isUpgraded?: boolean;
    key?: string;
    location?: string;
    managementAddresses?: string[];
    modTime?: string;
    model?: string;
    moid?: string;
    name?: string;
    nameServers?: string[];
    nrVersion?: string;
    ntpServers?: string[];
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageNetAppClusterParent;
    permissionResources?: inputs.GetStorageNetAppClusterPermissionResource[];
    presence?: string;
    previousFru?: inputs.GetStorageNetAppClusterPreviousFru;
    registeredDevice?: inputs.GetStorageNetAppClusterRegisteredDevice;
    revision?: string;
    rn?: string;
    rshEnabled?: boolean;
    serial?: string;
    sharedScope?: string;
    storageUtilization?: inputs.GetStorageNetAppClusterStorageUtilization;
    tags?: inputs.GetStorageNetAppClusterTag[];
    telnetEnabled?: boolean;
    uuid?: string;
    vendor?: string;
    versionContext?: inputs.GetStorageNetAppClusterVersionContext;
    versionGeneration?: number;
    versionMajor?: number;
    versionMinor?: number;
}

/**
 * A collection of values returned by getStorageNetAppCluster.
 */
export interface GetStorageNetAppClusterResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageNetAppClusterAncestor[];
    readonly autoSupport?: outputs.GetStorageNetAppClusterAutoSupport;
    readonly avgPerformanceMetrics?: outputs.GetStorageNetAppClusterAvgPerformanceMetrics;
    readonly classId?: string;
    readonly clusterEfficiency?: outputs.GetStorageNetAppClusterClusterEfficiency;
    readonly clusterHealthStatus?: string;
    readonly createTime?: string;
    readonly defaultAdminLocked?: boolean;
    readonly deviceLocation?: outputs.GetStorageNetAppClusterDeviceLocation;
    readonly deviceMoId?: string;
    readonly deviceType?: string;
    readonly dn?: string;
    readonly dnsDomains?: string[];
    readonly domainGroupMoid?: string;
    readonly events?: outputs.GetStorageNetAppClusterEvent[];
    readonly fipsCompliant?: boolean;
    readonly hardwareVersion?: string;
    readonly id: string;
    readonly insecureCiphers?: number;
    readonly isUpgraded?: boolean;
    readonly key?: string;
    readonly location?: string;
    readonly managementAddresses?: string[];
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nameServers?: string[];
    readonly nrVersion?: string;
    readonly ntpServers?: string[];
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageNetAppClusterParent;
    readonly permissionResources?: outputs.GetStorageNetAppClusterPermissionResource[];
    readonly presence?: string;
    readonly previousFru?: outputs.GetStorageNetAppClusterPreviousFru;
    readonly registeredDevice?: outputs.GetStorageNetAppClusterRegisteredDevice;
    readonly results: outputs.GetStorageNetAppClusterResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly rshEnabled?: boolean;
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly storageUtilization?: outputs.GetStorageNetAppClusterStorageUtilization;
    readonly tags?: outputs.GetStorageNetAppClusterTag[];
    readonly telnetEnabled?: boolean;
    readonly uuid?: string;
    readonly vendor?: string;
    readonly versionContext?: outputs.GetStorageNetAppClusterVersionContext;
    readonly versionGeneration?: number;
    readonly versionMajor?: number;
    readonly versionMinor?: number;
}
export function getStorageNetAppClusterOutput(args?: GetStorageNetAppClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageNetAppClusterResult> {
    return pulumi.output(args).apply((a: any) => getStorageNetAppCluster(a, opts))
}

/**
 * A collection of arguments for invoking getStorageNetAppCluster.
 */
export interface GetStorageNetAppClusterOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppClusterAncestorArgs>[]>;
    autoSupport?: pulumi.Input<inputs.GetStorageNetAppClusterAutoSupportArgs>;
    avgPerformanceMetrics?: pulumi.Input<inputs.GetStorageNetAppClusterAvgPerformanceMetricsArgs>;
    classId?: pulumi.Input<string>;
    clusterEfficiency?: pulumi.Input<inputs.GetStorageNetAppClusterClusterEfficiencyArgs>;
    clusterHealthStatus?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    defaultAdminLocked?: pulumi.Input<boolean>;
    deviceLocation?: pulumi.Input<inputs.GetStorageNetAppClusterDeviceLocationArgs>;
    deviceMoId?: pulumi.Input<string>;
    deviceType?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    dnsDomains?: pulumi.Input<pulumi.Input<string>[]>;
    domainGroupMoid?: pulumi.Input<string>;
    events?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppClusterEventArgs>[]>;
    fipsCompliant?: pulumi.Input<boolean>;
    hardwareVersion?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    insecureCiphers?: pulumi.Input<number>;
    isUpgraded?: pulumi.Input<boolean>;
    key?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    managementAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameServers?: pulumi.Input<pulumi.Input<string>[]>;
    nrVersion?: pulumi.Input<string>;
    ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageNetAppClusterParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppClusterPermissionResourceArgs>[]>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetStorageNetAppClusterPreviousFruArgs>;
    registeredDevice?: pulumi.Input<inputs.GetStorageNetAppClusterRegisteredDeviceArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    rshEnabled?: pulumi.Input<boolean>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    storageUtilization?: pulumi.Input<inputs.GetStorageNetAppClusterStorageUtilizationArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppClusterTagArgs>[]>;
    telnetEnabled?: pulumi.Input<boolean>;
    uuid?: pulumi.Input<string>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetStorageNetAppClusterVersionContextArgs>;
    versionGeneration?: pulumi.Input<number>;
    versionMajor?: pulumi.Input<number>;
    versionMinor?: pulumi.Input<number>;
}
