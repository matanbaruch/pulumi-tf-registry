// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageSasPort(args?: GetStorageSasPortArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageSasPortResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageSasPort:getStorageSasPort", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "address": args.address,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "diskId": args.diskId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "endPointId": args.endPointId,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "linkDescription": args.linkDescription,
        "linkSpeed": args.linkSpeed,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "sharedScope": args.sharedScope,
        "storagePhysicalDisk": args.storagePhysicalDisk,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageSasPort.
 */
export interface GetStorageSasPortArgs {
    accountMoid?: string;
    additionalProperties?: string;
    address?: string;
    ancestors?: inputs.GetStorageSasPortAncestor[];
    classId?: string;
    createTime?: string;
    deviceMoId?: string;
    diskId?: number;
    dn?: string;
    domainGroupMoid?: string;
    endPointId?: number;
    id?: string;
    inventoryDeviceInfo?: inputs.GetStorageSasPortInventoryDeviceInfo;
    linkDescription?: string;
    linkSpeed?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageSasPortParent;
    permissionResources?: inputs.GetStorageSasPortPermissionResource[];
    registeredDevice?: inputs.GetStorageSasPortRegisteredDevice;
    rn?: string;
    sharedScope?: string;
    storagePhysicalDisk?: inputs.GetStorageSasPortStoragePhysicalDisk;
    tags?: inputs.GetStorageSasPortTag[];
    versionContext?: inputs.GetStorageSasPortVersionContext;
}

/**
 * A collection of values returned by getStorageSasPort.
 */
export interface GetStorageSasPortResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly address?: string;
    readonly ancestors?: outputs.GetStorageSasPortAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly diskId?: number;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly endPointId?: number;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetStorageSasPortInventoryDeviceInfo;
    readonly linkDescription?: string;
    readonly linkSpeed?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageSasPortParent;
    readonly permissionResources?: outputs.GetStorageSasPortPermissionResource[];
    readonly registeredDevice?: outputs.GetStorageSasPortRegisteredDevice;
    readonly results: outputs.GetStorageSasPortResult[];
    readonly rn?: string;
    readonly sharedScope?: string;
    readonly storagePhysicalDisk?: outputs.GetStorageSasPortStoragePhysicalDisk;
    readonly tags?: outputs.GetStorageSasPortTag[];
    readonly versionContext?: outputs.GetStorageSasPortVersionContext;
}
export function getStorageSasPortOutput(args?: GetStorageSasPortOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageSasPortResult> {
    return pulumi.output(args).apply((a: any) => getStorageSasPort(a, opts))
}

/**
 * A collection of arguments for invoking getStorageSasPort.
 */
export interface GetStorageSasPortOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    address?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageSasPortAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    diskId?: pulumi.Input<number>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    endPointId?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetStorageSasPortInventoryDeviceInfoArgs>;
    linkDescription?: pulumi.Input<string>;
    linkSpeed?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageSasPortParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageSasPortPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetStorageSasPortRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    storagePhysicalDisk?: pulumi.Input<inputs.GetStorageSasPortStoragePhysicalDiskArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageSasPortTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetStorageSasPortVersionContextArgs>;
}
