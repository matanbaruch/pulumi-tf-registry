// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNiatelemetryTenant(args?: GetNiatelemetryTenantArgs, opts?: pulumi.InvokeOptions): Promise<GetNiatelemetryTenantResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getNiatelemetryTenant:getNiatelemetryTenant", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "bfdIfPolCount": args.bfdIfPolCount,
        "bfdIfpCount": args.bfdIfpCount,
        "classId": args.classId,
        "createTime": args.createTime,
        "dhcpRsProvCount": args.dhcpRsProvCount,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "fhsBdPolCount": args.fhsBdPolCount,
        "fvApCount": args.fvApCount,
        "fvBdCount": args.fvBdCount,
        "fvBdSubnetCount": args.fvBdSubnetCount,
        "fvBdnoArpCount": args.fvBdnoArpCount,
        "fvCepCount": args.fvCepCount,
        "fvRsBdToFhsCount": args.fvRsBdToFhsCount,
        "fvRsBdToOutCount": args.fvRsBdToOutCount,
        "fvSiteConnpCount": args.fvSiteConnpCount,
        "fvSubnetCount": args.fvSubnetCount,
        "id": args.id,
        "ipStaticRouteCount": args.ipStaticRouteCount,
        "l3MulticastCount": args.l3MulticastCount,
        "l3MulticastCtxCount": args.l3MulticastCtxCount,
        "l3MulticastIfCount": args.l3MulticastIfCount,
        "l3outCount": args.l3outCount,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "qosCustomPolCount": args.qosCustomPolCount,
        "recordType": args.recordType,
        "recordVersion": args.recordVersion,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "siteName": args.siteName,
        "ssm": args.ssm,
        "ssmCount": args.ssmCount,
        "tags": args.tags,
        "tcamOptCount": args.tcamOptCount,
        "tenantHealth": args.tenantHealth,
        "traceRouteEpCount": args.traceRouteEpCount,
        "traceRouteEpExtCount": args.traceRouteEpExtCount,
        "traceRouteExtEpCount": args.traceRouteExtEpCount,
        "traceRouteExtExtCount": args.traceRouteExtExtCount,
        "versionContext": args.versionContext,
        "vnsAbsGraphCount": args.vnsAbsGraphCount,
        "vnsBackupPolCount": args.vnsBackupPolCount,
        "vnsRedirectDestCount": args.vnsRedirectDestCount,
        "vnsSvcRedirectPolCount": args.vnsSvcRedirectPolCount,
        "vrfCount": args.vrfCount,
        "vzBrCpCount": args.vzBrCpCount,
        "vzRtConsCount": args.vzRtConsCount,
        "vzRtProvCount": args.vzRtProvCount,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNiatelemetryTenant.
 */
export interface GetNiatelemetryTenantArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetNiatelemetryTenantAncestor[];
    bfdIfPolCount?: number;
    bfdIfpCount?: number;
    classId?: string;
    createTime?: string;
    dhcpRsProvCount?: number;
    dn?: string;
    domainGroupMoid?: string;
    fhsBdPolCount?: number;
    fvApCount?: number;
    fvBdCount?: number;
    fvBdSubnetCount?: number;
    fvBdnoArpCount?: number;
    fvCepCount?: number;
    fvRsBdToFhsCount?: number;
    fvRsBdToOutCount?: number;
    fvSiteConnpCount?: number;
    fvSubnetCount?: number;
    id?: string;
    ipStaticRouteCount?: number;
    l3MulticastCount?: number;
    l3MulticastCtxCount?: number;
    l3MulticastIfCount?: number;
    l3outCount?: number;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetNiatelemetryTenantParent;
    permissionResources?: inputs.GetNiatelemetryTenantPermissionResource[];
    qosCustomPolCount?: number;
    recordType?: string;
    recordVersion?: string;
    registeredDevice?: inputs.GetNiatelemetryTenantRegisteredDevice;
    sharedScope?: string;
    siteName?: string;
    ssm?: string;
    ssmCount?: number;
    tags?: inputs.GetNiatelemetryTenantTag[];
    tcamOptCount?: number;
    tenantHealth?: number;
    traceRouteEpCount?: number;
    traceRouteEpExtCount?: number;
    traceRouteExtEpCount?: number;
    traceRouteExtExtCount?: number;
    versionContext?: inputs.GetNiatelemetryTenantVersionContext;
    vnsAbsGraphCount?: number;
    vnsBackupPolCount?: number;
    vnsRedirectDestCount?: number;
    vnsSvcRedirectPolCount?: number;
    vrfCount?: number;
    vzBrCpCount?: number;
    vzRtConsCount?: number;
    vzRtProvCount?: number;
}

/**
 * A collection of values returned by getNiatelemetryTenant.
 */
export interface GetNiatelemetryTenantResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetNiatelemetryTenantAncestor[];
    readonly bfdIfPolCount?: number;
    readonly bfdIfpCount?: number;
    readonly classId?: string;
    readonly createTime?: string;
    readonly dhcpRsProvCount?: number;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly fhsBdPolCount?: number;
    readonly fvApCount?: number;
    readonly fvBdCount?: number;
    readonly fvBdSubnetCount?: number;
    readonly fvBdnoArpCount?: number;
    readonly fvCepCount?: number;
    readonly fvRsBdToFhsCount?: number;
    readonly fvRsBdToOutCount?: number;
    readonly fvSiteConnpCount?: number;
    readonly fvSubnetCount?: number;
    readonly id: string;
    readonly ipStaticRouteCount?: number;
    readonly l3MulticastCount?: number;
    readonly l3MulticastCtxCount?: number;
    readonly l3MulticastIfCount?: number;
    readonly l3outCount?: number;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetNiatelemetryTenantParent;
    readonly permissionResources?: outputs.GetNiatelemetryTenantPermissionResource[];
    readonly qosCustomPolCount?: number;
    readonly recordType?: string;
    readonly recordVersion?: string;
    readonly registeredDevice?: outputs.GetNiatelemetryTenantRegisteredDevice;
    readonly results: outputs.GetNiatelemetryTenantResult[];
    readonly sharedScope?: string;
    readonly siteName?: string;
    readonly ssm?: string;
    readonly ssmCount?: number;
    readonly tags?: outputs.GetNiatelemetryTenantTag[];
    readonly tcamOptCount?: number;
    readonly tenantHealth?: number;
    readonly traceRouteEpCount?: number;
    readonly traceRouteEpExtCount?: number;
    readonly traceRouteExtEpCount?: number;
    readonly traceRouteExtExtCount?: number;
    readonly versionContext?: outputs.GetNiatelemetryTenantVersionContext;
    readonly vnsAbsGraphCount?: number;
    readonly vnsBackupPolCount?: number;
    readonly vnsRedirectDestCount?: number;
    readonly vnsSvcRedirectPolCount?: number;
    readonly vrfCount?: number;
    readonly vzBrCpCount?: number;
    readonly vzRtConsCount?: number;
    readonly vzRtProvCount?: number;
}
export function getNiatelemetryTenantOutput(args?: GetNiatelemetryTenantOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNiatelemetryTenantResult> {
    return pulumi.output(args).apply((a: any) => getNiatelemetryTenant(a, opts))
}

/**
 * A collection of arguments for invoking getNiatelemetryTenant.
 */
export interface GetNiatelemetryTenantOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryTenantAncestorArgs>[]>;
    bfdIfPolCount?: pulumi.Input<number>;
    bfdIfpCount?: pulumi.Input<number>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    dhcpRsProvCount?: pulumi.Input<number>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    fhsBdPolCount?: pulumi.Input<number>;
    fvApCount?: pulumi.Input<number>;
    fvBdCount?: pulumi.Input<number>;
    fvBdSubnetCount?: pulumi.Input<number>;
    fvBdnoArpCount?: pulumi.Input<number>;
    fvCepCount?: pulumi.Input<number>;
    fvRsBdToFhsCount?: pulumi.Input<number>;
    fvRsBdToOutCount?: pulumi.Input<number>;
    fvSiteConnpCount?: pulumi.Input<number>;
    fvSubnetCount?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    ipStaticRouteCount?: pulumi.Input<number>;
    l3MulticastCount?: pulumi.Input<number>;
    l3MulticastCtxCount?: pulumi.Input<number>;
    l3MulticastIfCount?: pulumi.Input<number>;
    l3outCount?: pulumi.Input<number>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetNiatelemetryTenantParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryTenantPermissionResourceArgs>[]>;
    qosCustomPolCount?: pulumi.Input<number>;
    recordType?: pulumi.Input<string>;
    recordVersion?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetNiatelemetryTenantRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    siteName?: pulumi.Input<string>;
    ssm?: pulumi.Input<string>;
    ssmCount?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryTenantTagArgs>[]>;
    tcamOptCount?: pulumi.Input<number>;
    tenantHealth?: pulumi.Input<number>;
    traceRouteEpCount?: pulumi.Input<number>;
    traceRouteEpExtCount?: pulumi.Input<number>;
    traceRouteExtEpCount?: pulumi.Input<number>;
    traceRouteExtExtCount?: pulumi.Input<number>;
    versionContext?: pulumi.Input<inputs.GetNiatelemetryTenantVersionContextArgs>;
    vnsAbsGraphCount?: pulumi.Input<number>;
    vnsBackupPolCount?: pulumi.Input<number>;
    vnsRedirectDestCount?: pulumi.Input<number>;
    vnsSvcRedirectPolCount?: pulumi.Input<number>;
    vrfCount?: pulumi.Input<number>;
    vzBrCpCount?: pulumi.Input<number>;
    vzRtConsCount?: pulumi.Input<number>;
    vzRtProvCount?: pulumi.Input<number>;
}
