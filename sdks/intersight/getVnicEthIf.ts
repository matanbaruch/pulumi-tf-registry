// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVnicEthIf(args?: GetVnicEthIfArgs, opts?: pulumi.InvokeOptions): Promise<GetVnicEthIfResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getVnicEthIf:getVnicEthIf", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "cdn": args.cdn,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "ethAdapterPolicy": args.ethAdapterPolicy,
        "ethNetworkPolicy": args.ethNetworkPolicy,
        "ethQosPolicy": args.ethQosPolicy,
        "fabricEthNetworkControlPolicy": args.fabricEthNetworkControlPolicy,
        "fabricEthNetworkGroupPolicies": args.fabricEthNetworkGroupPolicies,
        "failoverEnabled": args.failoverEnabled,
        "id": args.id,
        "ipLease": args.ipLease,
        "iscsiBootPolicy": args.iscsiBootPolicy,
        "iscsiIpV4AddressAllocationType": args.iscsiIpV4AddressAllocationType,
        "iscsiIpV4Config": args.iscsiIpV4Config,
        "iscsiIpv4Address": args.iscsiIpv4Address,
        "lanConnectivityPolicy": args.lanConnectivityPolicy,
        "lcpVnic": args.lcpVnic,
        "macAddress": args.macAddress,
        "macAddressType": args.macAddressType,
        "macLease": args.macLease,
        "macPool": args.macPool,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "order": args.order,
        "overriddenLists": args.overriddenLists,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "pinGroupName": args.pinGroupName,
        "placement": args.placement,
        "profile": args.profile,
        "sharedScope": args.sharedScope,
        "spVnics": args.spVnics,
        "srcTemplate": args.srcTemplate,
        "sriovSettings": args.sriovSettings,
        "standbyVifId": args.standbyVifId,
        "staticMacAddress": args.staticMacAddress,
        "tags": args.tags,
        "templateActions": args.templateActions,
        "templateSyncErrors": args.templateSyncErrors,
        "templateSyncStatus": args.templateSyncStatus,
        "usnicSettings": args.usnicSettings,
        "versionContext": args.versionContext,
        "vifId": args.vifId,
        "vmqSettings": args.vmqSettings,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVnicEthIf.
 */
export interface GetVnicEthIfArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetVnicEthIfAncestor[];
    cdn?: inputs.GetVnicEthIfCdn;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    ethAdapterPolicy?: inputs.GetVnicEthIfEthAdapterPolicy;
    ethNetworkPolicy?: inputs.GetVnicEthIfEthNetworkPolicy;
    ethQosPolicy?: inputs.GetVnicEthIfEthQosPolicy;
    fabricEthNetworkControlPolicy?: inputs.GetVnicEthIfFabricEthNetworkControlPolicy;
    fabricEthNetworkGroupPolicies?: inputs.GetVnicEthIfFabricEthNetworkGroupPolicy[];
    failoverEnabled?: boolean;
    id?: string;
    ipLease?: inputs.GetVnicEthIfIpLease;
    iscsiBootPolicy?: inputs.GetVnicEthIfIscsiBootPolicy;
    iscsiIpV4AddressAllocationType?: string;
    iscsiIpV4Config?: inputs.GetVnicEthIfIscsiIpV4Config;
    iscsiIpv4Address?: string;
    lanConnectivityPolicy?: inputs.GetVnicEthIfLanConnectivityPolicy;
    lcpVnic?: inputs.GetVnicEthIfLcpVnic;
    macAddress?: string;
    macAddressType?: string;
    macLease?: inputs.GetVnicEthIfMacLease;
    macPool?: inputs.GetVnicEthIfMacPool;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    order?: number;
    overriddenLists?: string[];
    owners?: string[];
    parent?: inputs.GetVnicEthIfParent;
    permissionResources?: inputs.GetVnicEthIfPermissionResource[];
    pinGroupName?: string;
    placement?: inputs.GetVnicEthIfPlacement;
    profile?: inputs.GetVnicEthIfProfile;
    sharedScope?: string;
    spVnics?: inputs.GetVnicEthIfSpVnic[];
    srcTemplate?: inputs.GetVnicEthIfSrcTemplate;
    sriovSettings?: inputs.GetVnicEthIfSriovSettings;
    standbyVifId?: number;
    staticMacAddress?: string;
    tags?: inputs.GetVnicEthIfTag[];
    templateActions?: inputs.GetVnicEthIfTemplateAction[];
    templateSyncErrors?: inputs.GetVnicEthIfTemplateSyncError[];
    templateSyncStatus?: string;
    usnicSettings?: inputs.GetVnicEthIfUsnicSettings;
    versionContext?: inputs.GetVnicEthIfVersionContext;
    vifId?: number;
    vmqSettings?: inputs.GetVnicEthIfVmqSettings;
}

/**
 * A collection of values returned by getVnicEthIf.
 */
export interface GetVnicEthIfResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetVnicEthIfAncestor[];
    readonly cdn?: outputs.GetVnicEthIfCdn;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly ethAdapterPolicy?: outputs.GetVnicEthIfEthAdapterPolicy;
    readonly ethNetworkPolicy?: outputs.GetVnicEthIfEthNetworkPolicy;
    readonly ethQosPolicy?: outputs.GetVnicEthIfEthQosPolicy;
    readonly fabricEthNetworkControlPolicy?: outputs.GetVnicEthIfFabricEthNetworkControlPolicy;
    readonly fabricEthNetworkGroupPolicies?: outputs.GetVnicEthIfFabricEthNetworkGroupPolicy[];
    readonly failoverEnabled?: boolean;
    readonly id: string;
    readonly ipLease?: outputs.GetVnicEthIfIpLease;
    readonly iscsiBootPolicy?: outputs.GetVnicEthIfIscsiBootPolicy;
    readonly iscsiIpV4AddressAllocationType?: string;
    readonly iscsiIpV4Config?: outputs.GetVnicEthIfIscsiIpV4Config;
    readonly iscsiIpv4Address?: string;
    readonly lanConnectivityPolicy?: outputs.GetVnicEthIfLanConnectivityPolicy;
    readonly lcpVnic?: outputs.GetVnicEthIfLcpVnic;
    readonly macAddress?: string;
    readonly macAddressType?: string;
    readonly macLease?: outputs.GetVnicEthIfMacLease;
    readonly macPool?: outputs.GetVnicEthIfMacPool;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly order?: number;
    readonly overriddenLists?: string[];
    readonly owners?: string[];
    readonly parent?: outputs.GetVnicEthIfParent;
    readonly permissionResources?: outputs.GetVnicEthIfPermissionResource[];
    readonly pinGroupName?: string;
    readonly placement?: outputs.GetVnicEthIfPlacement;
    readonly profile?: outputs.GetVnicEthIfProfile;
    readonly results: outputs.GetVnicEthIfResult[];
    readonly sharedScope?: string;
    readonly spVnics?: outputs.GetVnicEthIfSpVnic[];
    readonly srcTemplate?: outputs.GetVnicEthIfSrcTemplate;
    readonly sriovSettings?: outputs.GetVnicEthIfSriovSettings;
    readonly standbyVifId?: number;
    readonly staticMacAddress?: string;
    readonly tags?: outputs.GetVnicEthIfTag[];
    readonly templateActions?: outputs.GetVnicEthIfTemplateAction[];
    readonly templateSyncErrors?: outputs.GetVnicEthIfTemplateSyncError[];
    readonly templateSyncStatus?: string;
    readonly usnicSettings?: outputs.GetVnicEthIfUsnicSettings;
    readonly versionContext?: outputs.GetVnicEthIfVersionContext;
    readonly vifId?: number;
    readonly vmqSettings?: outputs.GetVnicEthIfVmqSettings;
}
export function getVnicEthIfOutput(args?: GetVnicEthIfOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVnicEthIfResult> {
    return pulumi.output(args).apply((a: any) => getVnicEthIf(a, opts))
}

/**
 * A collection of arguments for invoking getVnicEthIf.
 */
export interface GetVnicEthIfOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetVnicEthIfAncestorArgs>[]>;
    cdn?: pulumi.Input<inputs.GetVnicEthIfCdnArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    ethAdapterPolicy?: pulumi.Input<inputs.GetVnicEthIfEthAdapterPolicyArgs>;
    ethNetworkPolicy?: pulumi.Input<inputs.GetVnicEthIfEthNetworkPolicyArgs>;
    ethQosPolicy?: pulumi.Input<inputs.GetVnicEthIfEthQosPolicyArgs>;
    fabricEthNetworkControlPolicy?: pulumi.Input<inputs.GetVnicEthIfFabricEthNetworkControlPolicyArgs>;
    fabricEthNetworkGroupPolicies?: pulumi.Input<pulumi.Input<inputs.GetVnicEthIfFabricEthNetworkGroupPolicyArgs>[]>;
    failoverEnabled?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    ipLease?: pulumi.Input<inputs.GetVnicEthIfIpLeaseArgs>;
    iscsiBootPolicy?: pulumi.Input<inputs.GetVnicEthIfIscsiBootPolicyArgs>;
    iscsiIpV4AddressAllocationType?: pulumi.Input<string>;
    iscsiIpV4Config?: pulumi.Input<inputs.GetVnicEthIfIscsiIpV4ConfigArgs>;
    iscsiIpv4Address?: pulumi.Input<string>;
    lanConnectivityPolicy?: pulumi.Input<inputs.GetVnicEthIfLanConnectivityPolicyArgs>;
    lcpVnic?: pulumi.Input<inputs.GetVnicEthIfLcpVnicArgs>;
    macAddress?: pulumi.Input<string>;
    macAddressType?: pulumi.Input<string>;
    macLease?: pulumi.Input<inputs.GetVnicEthIfMacLeaseArgs>;
    macPool?: pulumi.Input<inputs.GetVnicEthIfMacPoolArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    order?: pulumi.Input<number>;
    overriddenLists?: pulumi.Input<pulumi.Input<string>[]>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetVnicEthIfParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetVnicEthIfPermissionResourceArgs>[]>;
    pinGroupName?: pulumi.Input<string>;
    placement?: pulumi.Input<inputs.GetVnicEthIfPlacementArgs>;
    profile?: pulumi.Input<inputs.GetVnicEthIfProfileArgs>;
    sharedScope?: pulumi.Input<string>;
    spVnics?: pulumi.Input<pulumi.Input<inputs.GetVnicEthIfSpVnicArgs>[]>;
    srcTemplate?: pulumi.Input<inputs.GetVnicEthIfSrcTemplateArgs>;
    sriovSettings?: pulumi.Input<inputs.GetVnicEthIfSriovSettingsArgs>;
    standbyVifId?: pulumi.Input<number>;
    staticMacAddress?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetVnicEthIfTagArgs>[]>;
    templateActions?: pulumi.Input<pulumi.Input<inputs.GetVnicEthIfTemplateActionArgs>[]>;
    templateSyncErrors?: pulumi.Input<pulumi.Input<inputs.GetVnicEthIfTemplateSyncErrorArgs>[]>;
    templateSyncStatus?: pulumi.Input<string>;
    usnicSettings?: pulumi.Input<inputs.GetVnicEthIfUsnicSettingsArgs>;
    versionContext?: pulumi.Input<inputs.GetVnicEthIfVersionContextArgs>;
    vifId?: pulumi.Input<number>;
    vmqSettings?: pulumi.Input<inputs.GetVnicEthIfVmqSettingsArgs>;
}
