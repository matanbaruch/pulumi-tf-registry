// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getTopSystem(args?: GetTopSystemArgs, opts?: pulumi.InvokeOptions): Promise<GetTopSystemResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getTopSystem:getTopSystem", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "computeBlades": args.computeBlades,
        "computeRackUnits": args.computeRackUnits,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "ipv4Address": args.ipv4Address,
        "ipv6Address": args.ipv6Address,
        "managementController": args.managementController,
        "modTime": args.modTime,
        "mode": args.mode,
        "moid": args.moid,
        "name": args.name,
        "networkElements": args.networkElements,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "timeZone": args.timeZone,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getTopSystem.
 */
export interface GetTopSystemArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetTopSystemAncestor[];
    classId?: string;
    computeBlades?: inputs.GetTopSystemComputeBlade[];
    computeRackUnits?: inputs.GetTopSystemComputeRackUnit[];
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    id?: string;
    inventoryDeviceInfo?: inputs.GetTopSystemInventoryDeviceInfo;
    ipv4Address?: string;
    ipv6Address?: string;
    managementController?: inputs.GetTopSystemManagementController;
    modTime?: string;
    mode?: string;
    moid?: string;
    name?: string;
    networkElements?: inputs.GetTopSystemNetworkElement[];
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetTopSystemParent;
    permissionResources?: inputs.GetTopSystemPermissionResource[];
    registeredDevice?: inputs.GetTopSystemRegisteredDevice;
    rn?: string;
    sharedScope?: string;
    tags?: inputs.GetTopSystemTag[];
    timeZone?: string;
    versionContext?: inputs.GetTopSystemVersionContext;
}

/**
 * A collection of values returned by getTopSystem.
 */
export interface GetTopSystemResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetTopSystemAncestor[];
    readonly classId?: string;
    readonly computeBlades?: outputs.GetTopSystemComputeBlade[];
    readonly computeRackUnits?: outputs.GetTopSystemComputeRackUnit[];
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetTopSystemInventoryDeviceInfo;
    readonly ipv4Address?: string;
    readonly ipv6Address?: string;
    readonly managementController?: outputs.GetTopSystemManagementController;
    readonly modTime?: string;
    readonly mode?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly networkElements?: outputs.GetTopSystemNetworkElement[];
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetTopSystemParent;
    readonly permissionResources?: outputs.GetTopSystemPermissionResource[];
    readonly registeredDevice?: outputs.GetTopSystemRegisteredDevice;
    readonly results: outputs.GetTopSystemResult[];
    readonly rn?: string;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetTopSystemTag[];
    readonly timeZone?: string;
    readonly versionContext?: outputs.GetTopSystemVersionContext;
}
export function getTopSystemOutput(args?: GetTopSystemOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTopSystemResult> {
    return pulumi.output(args).apply((a: any) => getTopSystem(a, opts))
}

/**
 * A collection of arguments for invoking getTopSystem.
 */
export interface GetTopSystemOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetTopSystemAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    computeBlades?: pulumi.Input<pulumi.Input<inputs.GetTopSystemComputeBladeArgs>[]>;
    computeRackUnits?: pulumi.Input<pulumi.Input<inputs.GetTopSystemComputeRackUnitArgs>[]>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetTopSystemInventoryDeviceInfoArgs>;
    ipv4Address?: pulumi.Input<string>;
    ipv6Address?: pulumi.Input<string>;
    managementController?: pulumi.Input<inputs.GetTopSystemManagementControllerArgs>;
    modTime?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkElements?: pulumi.Input<pulumi.Input<inputs.GetTopSystemNetworkElementArgs>[]>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetTopSystemParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetTopSystemPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetTopSystemRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetTopSystemTagArgs>[]>;
    timeZone?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetTopSystemVersionContextArgs>;
}
