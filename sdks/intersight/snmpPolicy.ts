// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SnmpPolicy extends pulumi.CustomResource {
    /**
     * Get an existing SnmpPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnmpPolicyState, opts?: pulumi.CustomResourceOptions): SnmpPolicy {
        return new SnmpPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'intersight:index/snmpPolicy:SnmpPolicy';

    /**
     * Returns true if the given object is an instance of SnmpPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnmpPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnmpPolicy.__pulumiType;
    }

    /**
     * The default SNMPv1, SNMPv2c community name or SNMPv3 username to include on any trap messages sent to the SNMP host. The
     * name can be 18 characters long.
     */
    public readonly accessCommunityString!: pulumi.Output<string | undefined>;
    /**
     * The Account ID for this managed object.
     */
    public readonly accountMoid!: pulumi.Output<string>;
    public readonly additionalProperties!: pulumi.Output<string | undefined>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly ancestors!: pulumi.Output<outputs.SnmpPolicyAncestor[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    public readonly classId!: pulumi.Output<string | undefined>;
    /**
     * Controls access to the information in the inventory tables. Applicable only for SNMPv1 and SNMPv2c users. * `Disabled` -
     * Blocks access to the information in the inventory tables. * `Limited` - Partial access to read the information in the
     * inventory tables. * `Full` - Full access to read the information in the inventory tables.
     */
    public readonly communityAccess!: pulumi.Output<string | undefined>;
    /**
     * The time when this managed object was created.
     */
    public readonly createTime!: pulumi.Output<string>;
    /**
     * Description of the policy.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The DomainGroup ID for this managed object.
     */
    public readonly domainGroupMoid!: pulumi.Output<string>;
    /**
     * State of the SNMP Policy on the endpoint. If enabled, the endpoint sends SNMP traps to the designated host.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * User-defined unique identification of the static engine.
     */
    public readonly engineId!: pulumi.Output<string | undefined>;
    /**
     * The time when this managed object was last modified.
     */
    public readonly modTime!: pulumi.Output<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    public readonly moid!: pulumi.Output<string>;
    /**
     * Name of the concrete policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    public readonly objectType!: pulumi.Output<string | undefined>;
    /**
     * A reference to a organizationOrganization resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    public readonly organizations!: pulumi.Output<outputs.SnmpPolicyOrganization[]>;
    public readonly owners!: pulumi.Output<string[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    public readonly parents!: pulumi.Output<outputs.SnmpPolicyParent[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly permissionResources!: pulumi.Output<outputs.SnmpPolicyPermissionResource[]>;
    /**
     * An array of relationships to policyAbstractConfigProfile resources.
     */
    public readonly profiles!: pulumi.Output<outputs.SnmpPolicyProfile[]>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    public readonly sharedScope!: pulumi.Output<string>;
    /**
     * Port on which Cisco IMC SNMP agent runs. Enter a value between 1-65535. Reserved ports not allowed (22, 23, 80, 123,
     * 389, 443, 623, 636, 2068, 3268, 3269).
     */
    public readonly snmpPort!: pulumi.Output<number | undefined>;
    public readonly snmpTraps!: pulumi.Output<outputs.SnmpPolicySnmpTrap[]>;
    public readonly snmpUsers!: pulumi.Output<outputs.SnmpPolicySnmpUser[]>;
    /**
     * Contact person responsible for the SNMP implementation. Enter a string up to 64 characters, such as an email address or
     * a name and telephone number.
     */
    public readonly sysContact!: pulumi.Output<string | undefined>;
    /**
     * Location of host on which the SNMP agent (server) runs.
     */
    public readonly sysLocation!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<outputs.SnmpPolicyTag[]>;
    /**
     * SNMP community group used for sending SNMP trap to other devices. Valid only for SNMPv2c users.
     */
    public readonly trapCommunity!: pulumi.Output<string | undefined>;
    /**
     * State of the SNMP v2c on the endpoint. If enabled, the endpoint sends SNMP v2c properties to the designated host.
     */
    public readonly v2Enabled!: pulumi.Output<boolean | undefined>;
    /**
     * State of the SNMP v3 on the endpoint. If enabled, the endpoint sends SNMP v3 properties to the designated host.
     */
    public readonly v3Enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The versioning info for this managed object.
     */
    public readonly versionContexts!: pulumi.Output<outputs.SnmpPolicyVersionContext[]>;

    /**
     * Create a SnmpPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SnmpPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnmpPolicyArgs | SnmpPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnmpPolicyState | undefined;
            resourceInputs["accessCommunityString"] = state ? state.accessCommunityString : undefined;
            resourceInputs["accountMoid"] = state ? state.accountMoid : undefined;
            resourceInputs["additionalProperties"] = state ? state.additionalProperties : undefined;
            resourceInputs["ancestors"] = state ? state.ancestors : undefined;
            resourceInputs["classId"] = state ? state.classId : undefined;
            resourceInputs["communityAccess"] = state ? state.communityAccess : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domainGroupMoid"] = state ? state.domainGroupMoid : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["engineId"] = state ? state.engineId : undefined;
            resourceInputs["modTime"] = state ? state.modTime : undefined;
            resourceInputs["moid"] = state ? state.moid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objectType"] = state ? state.objectType : undefined;
            resourceInputs["organizations"] = state ? state.organizations : undefined;
            resourceInputs["owners"] = state ? state.owners : undefined;
            resourceInputs["parents"] = state ? state.parents : undefined;
            resourceInputs["permissionResources"] = state ? state.permissionResources : undefined;
            resourceInputs["profiles"] = state ? state.profiles : undefined;
            resourceInputs["sharedScope"] = state ? state.sharedScope : undefined;
            resourceInputs["snmpPort"] = state ? state.snmpPort : undefined;
            resourceInputs["snmpTraps"] = state ? state.snmpTraps : undefined;
            resourceInputs["snmpUsers"] = state ? state.snmpUsers : undefined;
            resourceInputs["sysContact"] = state ? state.sysContact : undefined;
            resourceInputs["sysLocation"] = state ? state.sysLocation : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["trapCommunity"] = state ? state.trapCommunity : undefined;
            resourceInputs["v2Enabled"] = state ? state.v2Enabled : undefined;
            resourceInputs["v3Enabled"] = state ? state.v3Enabled : undefined;
            resourceInputs["versionContexts"] = state ? state.versionContexts : undefined;
        } else {
            const args = argsOrState as SnmpPolicyArgs | undefined;
            resourceInputs["accessCommunityString"] = args ? args.accessCommunityString : undefined;
            resourceInputs["accountMoid"] = args ? args.accountMoid : undefined;
            resourceInputs["additionalProperties"] = args ? args.additionalProperties : undefined;
            resourceInputs["ancestors"] = args ? args.ancestors : undefined;
            resourceInputs["classId"] = args ? args.classId : undefined;
            resourceInputs["communityAccess"] = args ? args.communityAccess : undefined;
            resourceInputs["createTime"] = args ? args.createTime : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domainGroupMoid"] = args ? args.domainGroupMoid : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["engineId"] = args ? args.engineId : undefined;
            resourceInputs["modTime"] = args ? args.modTime : undefined;
            resourceInputs["moid"] = args ? args.moid : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["objectType"] = args ? args.objectType : undefined;
            resourceInputs["organizations"] = args ? args.organizations : undefined;
            resourceInputs["owners"] = args ? args.owners : undefined;
            resourceInputs["parents"] = args ? args.parents : undefined;
            resourceInputs["permissionResources"] = args ? args.permissionResources : undefined;
            resourceInputs["profiles"] = args ? args.profiles : undefined;
            resourceInputs["sharedScope"] = args ? args.sharedScope : undefined;
            resourceInputs["snmpPort"] = args ? args.snmpPort : undefined;
            resourceInputs["snmpTraps"] = args ? args.snmpTraps : undefined;
            resourceInputs["snmpUsers"] = args ? args.snmpUsers : undefined;
            resourceInputs["sysContact"] = args ? args.sysContact : undefined;
            resourceInputs["sysLocation"] = args ? args.sysLocation : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["trapCommunity"] = args ? args.trapCommunity : undefined;
            resourceInputs["v2Enabled"] = args ? args.v2Enabled : undefined;
            resourceInputs["v3Enabled"] = args ? args.v3Enabled : undefined;
            resourceInputs["versionContexts"] = args ? args.versionContexts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnmpPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SnmpPolicy resources.
 */
export interface SnmpPolicyState {
    /**
     * The default SNMPv1, SNMPv2c community name or SNMPv3 username to include on any trap messages sent to the SNMP host. The
     * name can be 18 characters long.
     */
    accessCommunityString?: pulumi.Input<string>;
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.SnmpPolicyAncestor>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    /**
     * Controls access to the information in the inventory tables. Applicable only for SNMPv1 and SNMPv2c users. * `Disabled` -
     * Blocks access to the information in the inventory tables. * `Limited` - Partial access to read the information in the
     * inventory tables. * `Full` - Full access to read the information in the inventory tables.
     */
    communityAccess?: pulumi.Input<string>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Description of the policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    /**
     * State of the SNMP Policy on the endpoint. If enabled, the endpoint sends SNMP traps to the designated host.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * User-defined unique identification of the static engine.
     */
    engineId?: pulumi.Input<string>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * Name of the concrete policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    /**
     * A reference to a organizationOrganization resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    organizations?: pulumi.Input<pulumi.Input<inputs.SnmpPolicyOrganization>[]>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.SnmpPolicyParent>[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.SnmpPolicyPermissionResource>[]>;
    /**
     * An array of relationships to policyAbstractConfigProfile resources.
     */
    profiles?: pulumi.Input<pulumi.Input<inputs.SnmpPolicyProfile>[]>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    /**
     * Port on which Cisco IMC SNMP agent runs. Enter a value between 1-65535. Reserved ports not allowed (22, 23, 80, 123,
     * 389, 443, 623, 636, 2068, 3268, 3269).
     */
    snmpPort?: pulumi.Input<number>;
    snmpTraps?: pulumi.Input<pulumi.Input<inputs.SnmpPolicySnmpTrap>[]>;
    snmpUsers?: pulumi.Input<pulumi.Input<inputs.SnmpPolicySnmpUser>[]>;
    /**
     * Contact person responsible for the SNMP implementation. Enter a string up to 64 characters, such as an email address or
     * a name and telephone number.
     */
    sysContact?: pulumi.Input<string>;
    /**
     * Location of host on which the SNMP agent (server) runs.
     */
    sysLocation?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.SnmpPolicyTag>[]>;
    /**
     * SNMP community group used for sending SNMP trap to other devices. Valid only for SNMPv2c users.
     */
    trapCommunity?: pulumi.Input<string>;
    /**
     * State of the SNMP v2c on the endpoint. If enabled, the endpoint sends SNMP v2c properties to the designated host.
     */
    v2Enabled?: pulumi.Input<boolean>;
    /**
     * State of the SNMP v3 on the endpoint. If enabled, the endpoint sends SNMP v3 properties to the designated host.
     */
    v3Enabled?: pulumi.Input<boolean>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.SnmpPolicyVersionContext>[]>;
}

/**
 * The set of arguments for constructing a SnmpPolicy resource.
 */
export interface SnmpPolicyArgs {
    /**
     * The default SNMPv1, SNMPv2c community name or SNMPv3 username to include on any trap messages sent to the SNMP host. The
     * name can be 18 characters long.
     */
    accessCommunityString?: pulumi.Input<string>;
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.SnmpPolicyAncestor>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    /**
     * Controls access to the information in the inventory tables. Applicable only for SNMPv1 and SNMPv2c users. * `Disabled` -
     * Blocks access to the information in the inventory tables. * `Limited` - Partial access to read the information in the
     * inventory tables. * `Full` - Full access to read the information in the inventory tables.
     */
    communityAccess?: pulumi.Input<string>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Description of the policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    /**
     * State of the SNMP Policy on the endpoint. If enabled, the endpoint sends SNMP traps to the designated host.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * User-defined unique identification of the static engine.
     */
    engineId?: pulumi.Input<string>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * Name of the concrete policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    /**
     * A reference to a organizationOrganization resource. When the $expand query parameter is specified, the referenced
     * resource is returned inline.
     */
    organizations?: pulumi.Input<pulumi.Input<inputs.SnmpPolicyOrganization>[]>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.SnmpPolicyParent>[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.SnmpPolicyPermissionResource>[]>;
    /**
     * An array of relationships to policyAbstractConfigProfile resources.
     */
    profiles?: pulumi.Input<pulumi.Input<inputs.SnmpPolicyProfile>[]>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    /**
     * Port on which Cisco IMC SNMP agent runs. Enter a value between 1-65535. Reserved ports not allowed (22, 23, 80, 123,
     * 389, 443, 623, 636, 2068, 3268, 3269).
     */
    snmpPort?: pulumi.Input<number>;
    snmpTraps?: pulumi.Input<pulumi.Input<inputs.SnmpPolicySnmpTrap>[]>;
    snmpUsers?: pulumi.Input<pulumi.Input<inputs.SnmpPolicySnmpUser>[]>;
    /**
     * Contact person responsible for the SNMP implementation. Enter a string up to 64 characters, such as an email address or
     * a name and telephone number.
     */
    sysContact?: pulumi.Input<string>;
    /**
     * Location of host on which the SNMP agent (server) runs.
     */
    sysLocation?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.SnmpPolicyTag>[]>;
    /**
     * SNMP community group used for sending SNMP trap to other devices. Valid only for SNMPv2c users.
     */
    trapCommunity?: pulumi.Input<string>;
    /**
     * State of the SNMP v2c on the endpoint. If enabled, the endpoint sends SNMP v2c properties to the designated host.
     */
    v2Enabled?: pulumi.Input<boolean>;
    /**
     * State of the SNMP v3 on the endpoint. If enabled, the endpoint sends SNMP v3 properties to the designated host.
     */
    v3Enabled?: pulumi.Input<boolean>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.SnmpPolicyVersionContext>[]>;
}
