// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getApplianceDeviceClusterInstall(args?: GetApplianceDeviceClusterInstallArgs, opts?: pulumi.InvokeOptions): Promise<GetApplianceDeviceClusterInstallResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getApplianceDeviceClusterInstall:getApplianceDeviceClusterInstall", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "completedPhases": args.completedPhases,
        "createTime": args.createTime,
        "currentPhase": args.currentPhase,
        "domainGroupMoid": args.domainGroupMoid,
        "elapsedTime": args.elapsedTime,
        "endTime": args.endTime,
        "errorCode": args.errorCode,
        "id": args.id,
        "messages": args.messages,
        "modTime": args.modTime,
        "moid": args.moid,
        "nodeInfos": args.nodeInfos,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "startTime": args.startTime,
        "status": args.status,
        "tags": args.tags,
        "totalNodes": args.totalNodes,
        "totalPhases": args.totalPhases,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getApplianceDeviceClusterInstall.
 */
export interface GetApplianceDeviceClusterInstallArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetApplianceDeviceClusterInstallAncestor[];
    classId?: string;
    completedPhases?: inputs.GetApplianceDeviceClusterInstallCompletedPhase[];
    createTime?: string;
    currentPhase?: inputs.GetApplianceDeviceClusterInstallCurrentPhase;
    domainGroupMoid?: string;
    elapsedTime?: number;
    endTime?: string;
    errorCode?: number;
    id?: string;
    messages?: string[];
    modTime?: string;
    moid?: string;
    nodeInfos?: inputs.GetApplianceDeviceClusterInstallNodeInfo[];
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetApplianceDeviceClusterInstallParent;
    permissionResources?: inputs.GetApplianceDeviceClusterInstallPermissionResource[];
    registeredDevice?: inputs.GetApplianceDeviceClusterInstallRegisteredDevice;
    sharedScope?: string;
    startTime?: string;
    status?: string;
    tags?: inputs.GetApplianceDeviceClusterInstallTag[];
    totalNodes?: number;
    totalPhases?: number;
    versionContext?: inputs.GetApplianceDeviceClusterInstallVersionContext;
}

/**
 * A collection of values returned by getApplianceDeviceClusterInstall.
 */
export interface GetApplianceDeviceClusterInstallResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetApplianceDeviceClusterInstallAncestor[];
    readonly classId?: string;
    readonly completedPhases?: outputs.GetApplianceDeviceClusterInstallCompletedPhase[];
    readonly createTime?: string;
    readonly currentPhase?: outputs.GetApplianceDeviceClusterInstallCurrentPhase;
    readonly domainGroupMoid?: string;
    readonly elapsedTime?: number;
    readonly endTime?: string;
    readonly errorCode?: number;
    readonly id: string;
    readonly messages?: string[];
    readonly modTime?: string;
    readonly moid?: string;
    readonly nodeInfos?: outputs.GetApplianceDeviceClusterInstallNodeInfo[];
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetApplianceDeviceClusterInstallParent;
    readonly permissionResources?: outputs.GetApplianceDeviceClusterInstallPermissionResource[];
    readonly registeredDevice?: outputs.GetApplianceDeviceClusterInstallRegisteredDevice;
    readonly results: outputs.GetApplianceDeviceClusterInstallResult[];
    readonly sharedScope?: string;
    readonly startTime?: string;
    readonly status?: string;
    readonly tags?: outputs.GetApplianceDeviceClusterInstallTag[];
    readonly totalNodes?: number;
    readonly totalPhases?: number;
    readonly versionContext?: outputs.GetApplianceDeviceClusterInstallVersionContext;
}
export function getApplianceDeviceClusterInstallOutput(args?: GetApplianceDeviceClusterInstallOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetApplianceDeviceClusterInstallResult> {
    return pulumi.output(args).apply((a: any) => getApplianceDeviceClusterInstall(a, opts))
}

/**
 * A collection of arguments for invoking getApplianceDeviceClusterInstall.
 */
export interface GetApplianceDeviceClusterInstallOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetApplianceDeviceClusterInstallAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    completedPhases?: pulumi.Input<pulumi.Input<inputs.GetApplianceDeviceClusterInstallCompletedPhaseArgs>[]>;
    createTime?: pulumi.Input<string>;
    currentPhase?: pulumi.Input<inputs.GetApplianceDeviceClusterInstallCurrentPhaseArgs>;
    domainGroupMoid?: pulumi.Input<string>;
    elapsedTime?: pulumi.Input<number>;
    endTime?: pulumi.Input<string>;
    errorCode?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    messages?: pulumi.Input<pulumi.Input<string>[]>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    nodeInfos?: pulumi.Input<pulumi.Input<inputs.GetApplianceDeviceClusterInstallNodeInfoArgs>[]>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetApplianceDeviceClusterInstallParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetApplianceDeviceClusterInstallPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetApplianceDeviceClusterInstallRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetApplianceDeviceClusterInstallTagArgs>[]>;
    totalNodes?: pulumi.Input<number>;
    totalPhases?: pulumi.Input<number>;
    versionContext?: pulumi.Input<inputs.GetApplianceDeviceClusterInstallVersionContextArgs>;
}
