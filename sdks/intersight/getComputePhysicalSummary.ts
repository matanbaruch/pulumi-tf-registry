// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getComputePhysicalSummary(args?: GetComputePhysicalSummaryArgs, opts?: pulumi.InvokeOptions): Promise<GetComputePhysicalSummaryResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getComputePhysicalSummary:getComputePhysicalSummary", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "adminPowerState": args.adminPowerState,
        "alarmSummary": args.alarmSummary,
        "ancestors": args.ancestors,
        "assetTag": args.assetTag,
        "availableMemory": args.availableMemory,
        "biosPostComplete": args.biosPostComplete,
        "chassisId": args.chassisId,
        "classId": args.classId,
        "connectionStatus": args.connectionStatus,
        "cpuCapacity": args.cpuCapacity,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "equipmentChassis": args.equipmentChassis,
        "faultSummary": args.faultSummary,
        "firmware": args.firmware,
        "frontPanelLockState": args.frontPanelLockState,
        "hardwareUuid": args.hardwareUuid,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "inventoryParent": args.inventoryParent,
        "ipv4Address": args.ipv4Address,
        "isUpgraded": args.isUpgraded,
        "kvmIpAddresses": args.kvmIpAddresses,
        "kvmServerStateEnabled": args.kvmServerStateEnabled,
        "kvmVendor": args.kvmVendor,
        "managementMode": args.managementMode,
        "memorySpeed": args.memorySpeed,
        "mgmtIpAddress": args.mgmtIpAddress,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "name": args.name,
        "nrLifecycle": args.nrLifecycle,
        "numAdaptors": args.numAdaptors,
        "numCpuCores": args.numCpuCores,
        "numCpuCoresEnabled": args.numCpuCoresEnabled,
        "numCpus": args.numCpus,
        "numEthHostInterfaces": args.numEthHostInterfaces,
        "numFcHostInterfaces": args.numFcHostInterfaces,
        "numThreads": args.numThreads,
        "objectType": args.objectType,
        "operPowerState": args.operPowerState,
        "operReasons": args.operReasons,
        "operState": args.operState,
        "operability": args.operability,
        "owners": args.owners,
        "packageVersion": args.packageVersion,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "personality": args.personality,
        "platformType": args.platformType,
        "presence": args.presence,
        "registeredDevice": args.registeredDevice,
        "revision": args.revision,
        "rn": args.rn,
        "scaledMode": args.scaledMode,
        "serial": args.serial,
        "serverId": args.serverId,
        "serviceProfile": args.serviceProfile,
        "sharedScope": args.sharedScope,
        "slotId": args.slotId,
        "sourceObjectType": args.sourceObjectType,
        "tags": args.tags,
        "topologyScanStatus": args.topologyScanStatus,
        "totalMemory": args.totalMemory,
        "tunneledKvm": args.tunneledKvm,
        "userLabel": args.userLabel,
        "uuid": args.uuid,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getComputePhysicalSummary.
 */
export interface GetComputePhysicalSummaryArgs {
    accountMoid?: string;
    additionalProperties?: string;
    adminPowerState?: string;
    alarmSummary?: inputs.GetComputePhysicalSummaryAlarmSummary;
    ancestors?: inputs.GetComputePhysicalSummaryAncestor[];
    assetTag?: string;
    availableMemory?: number;
    biosPostComplete?: boolean;
    chassisId?: string;
    classId?: string;
    connectionStatus?: string;
    cpuCapacity?: number;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    equipmentChassis?: inputs.GetComputePhysicalSummaryEquipmentChassis;
    faultSummary?: number;
    firmware?: string;
    frontPanelLockState?: string;
    hardwareUuid?: string;
    id?: string;
    inventoryDeviceInfo?: inputs.GetComputePhysicalSummaryInventoryDeviceInfo;
    inventoryParent?: inputs.GetComputePhysicalSummaryInventoryParent;
    ipv4Address?: string;
    isUpgraded?: boolean;
    kvmIpAddresses?: inputs.GetComputePhysicalSummaryKvmIpAddress[];
    kvmServerStateEnabled?: boolean;
    kvmVendor?: string;
    managementMode?: string;
    memorySpeed?: string;
    mgmtIpAddress?: string;
    modTime?: string;
    model?: string;
    moid?: string;
    name?: string;
    nrLifecycle?: string;
    numAdaptors?: number;
    numCpuCores?: number;
    numCpuCoresEnabled?: number;
    numCpus?: number;
    numEthHostInterfaces?: number;
    numFcHostInterfaces?: number;
    numThreads?: number;
    objectType?: string;
    operPowerState?: string;
    operReasons?: string[];
    operState?: string;
    operability?: string;
    owners?: string[];
    packageVersion?: string;
    parent?: inputs.GetComputePhysicalSummaryParent;
    permissionResources?: inputs.GetComputePhysicalSummaryPermissionResource[];
    personality?: string;
    platformType?: string;
    presence?: string;
    registeredDevice?: inputs.GetComputePhysicalSummaryRegisteredDevice;
    revision?: string;
    rn?: string;
    scaledMode?: string;
    serial?: string;
    serverId?: number;
    serviceProfile?: string;
    sharedScope?: string;
    slotId?: number;
    sourceObjectType?: string;
    tags?: inputs.GetComputePhysicalSummaryTag[];
    topologyScanStatus?: string;
    totalMemory?: number;
    tunneledKvm?: boolean;
    userLabel?: string;
    uuid?: string;
    vendor?: string;
    versionContext?: inputs.GetComputePhysicalSummaryVersionContext;
}

/**
 * A collection of values returned by getComputePhysicalSummary.
 */
export interface GetComputePhysicalSummaryResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly adminPowerState?: string;
    readonly alarmSummary?: outputs.GetComputePhysicalSummaryAlarmSummary;
    readonly ancestors?: outputs.GetComputePhysicalSummaryAncestor[];
    readonly assetTag?: string;
    readonly availableMemory?: number;
    readonly biosPostComplete?: boolean;
    readonly chassisId?: string;
    readonly classId?: string;
    readonly connectionStatus?: string;
    readonly cpuCapacity?: number;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly equipmentChassis?: outputs.GetComputePhysicalSummaryEquipmentChassis;
    readonly faultSummary?: number;
    readonly firmware?: string;
    readonly frontPanelLockState?: string;
    readonly hardwareUuid?: string;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetComputePhysicalSummaryInventoryDeviceInfo;
    readonly inventoryParent?: outputs.GetComputePhysicalSummaryInventoryParent;
    readonly ipv4Address?: string;
    readonly isUpgraded?: boolean;
    readonly kvmIpAddresses?: outputs.GetComputePhysicalSummaryKvmIpAddress[];
    readonly kvmServerStateEnabled?: boolean;
    readonly kvmVendor?: string;
    readonly managementMode?: string;
    readonly memorySpeed?: string;
    readonly mgmtIpAddress?: string;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nrLifecycle?: string;
    readonly numAdaptors?: number;
    readonly numCpuCores?: number;
    readonly numCpuCoresEnabled?: number;
    readonly numCpus?: number;
    readonly numEthHostInterfaces?: number;
    readonly numFcHostInterfaces?: number;
    readonly numThreads?: number;
    readonly objectType?: string;
    readonly operPowerState?: string;
    readonly operReasons?: string[];
    readonly operState?: string;
    readonly operability?: string;
    readonly owners?: string[];
    readonly packageVersion?: string;
    readonly parent?: outputs.GetComputePhysicalSummaryParent;
    readonly permissionResources?: outputs.GetComputePhysicalSummaryPermissionResource[];
    readonly personality?: string;
    readonly platformType?: string;
    readonly presence?: string;
    readonly registeredDevice?: outputs.GetComputePhysicalSummaryRegisteredDevice;
    readonly results: outputs.GetComputePhysicalSummaryResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly scaledMode?: string;
    readonly serial?: string;
    readonly serverId?: number;
    readonly serviceProfile?: string;
    readonly sharedScope?: string;
    readonly slotId?: number;
    readonly sourceObjectType?: string;
    readonly tags?: outputs.GetComputePhysicalSummaryTag[];
    readonly topologyScanStatus?: string;
    readonly totalMemory?: number;
    readonly tunneledKvm?: boolean;
    readonly userLabel?: string;
    readonly uuid?: string;
    readonly vendor?: string;
    readonly versionContext?: outputs.GetComputePhysicalSummaryVersionContext;
}
export function getComputePhysicalSummaryOutput(args?: GetComputePhysicalSummaryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetComputePhysicalSummaryResult> {
    return pulumi.output(args).apply((a: any) => getComputePhysicalSummary(a, opts))
}

/**
 * A collection of arguments for invoking getComputePhysicalSummary.
 */
export interface GetComputePhysicalSummaryOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    adminPowerState?: pulumi.Input<string>;
    alarmSummary?: pulumi.Input<inputs.GetComputePhysicalSummaryAlarmSummaryArgs>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetComputePhysicalSummaryAncestorArgs>[]>;
    assetTag?: pulumi.Input<string>;
    availableMemory?: pulumi.Input<number>;
    biosPostComplete?: pulumi.Input<boolean>;
    chassisId?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    connectionStatus?: pulumi.Input<string>;
    cpuCapacity?: pulumi.Input<number>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    equipmentChassis?: pulumi.Input<inputs.GetComputePhysicalSummaryEquipmentChassisArgs>;
    faultSummary?: pulumi.Input<number>;
    firmware?: pulumi.Input<string>;
    frontPanelLockState?: pulumi.Input<string>;
    hardwareUuid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetComputePhysicalSummaryInventoryDeviceInfoArgs>;
    inventoryParent?: pulumi.Input<inputs.GetComputePhysicalSummaryInventoryParentArgs>;
    ipv4Address?: pulumi.Input<string>;
    isUpgraded?: pulumi.Input<boolean>;
    kvmIpAddresses?: pulumi.Input<pulumi.Input<inputs.GetComputePhysicalSummaryKvmIpAddressArgs>[]>;
    kvmServerStateEnabled?: pulumi.Input<boolean>;
    kvmVendor?: pulumi.Input<string>;
    managementMode?: pulumi.Input<string>;
    memorySpeed?: pulumi.Input<string>;
    mgmtIpAddress?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nrLifecycle?: pulumi.Input<string>;
    numAdaptors?: pulumi.Input<number>;
    numCpuCores?: pulumi.Input<number>;
    numCpuCoresEnabled?: pulumi.Input<number>;
    numCpus?: pulumi.Input<number>;
    numEthHostInterfaces?: pulumi.Input<number>;
    numFcHostInterfaces?: pulumi.Input<number>;
    numThreads?: pulumi.Input<number>;
    objectType?: pulumi.Input<string>;
    operPowerState?: pulumi.Input<string>;
    operReasons?: pulumi.Input<pulumi.Input<string>[]>;
    operState?: pulumi.Input<string>;
    operability?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    packageVersion?: pulumi.Input<string>;
    parent?: pulumi.Input<inputs.GetComputePhysicalSummaryParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetComputePhysicalSummaryPermissionResourceArgs>[]>;
    personality?: pulumi.Input<string>;
    platformType?: pulumi.Input<string>;
    presence?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetComputePhysicalSummaryRegisteredDeviceArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    scaledMode?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    serverId?: pulumi.Input<number>;
    serviceProfile?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    slotId?: pulumi.Input<number>;
    sourceObjectType?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetComputePhysicalSummaryTagArgs>[]>;
    topologyScanStatus?: pulumi.Input<string>;
    totalMemory?: pulumi.Input<number>;
    tunneledKvm?: pulumi.Input<boolean>;
    userLabel?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetComputePhysicalSummaryVersionContextArgs>;
}
