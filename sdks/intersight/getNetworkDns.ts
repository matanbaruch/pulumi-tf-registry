// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNetworkDns(args?: GetNetworkDnsArgs, opts?: pulumi.InvokeOptions): Promise<GetNetworkDnsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getNetworkDns:getNetworkDns", {
        "accountMoid": args.accountMoid,
        "additionalDomains": args.additionalDomains,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "defaultDomain": args.defaultDomain,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "nameServers": args.nameServers,
        "networkElement": args.networkElement,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
        "vrfName": args.vrfName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNetworkDns.
 */
export interface GetNetworkDnsArgs {
    accountMoid?: string;
    additionalDomains?: string[];
    additionalProperties?: string;
    ancestors?: inputs.GetNetworkDnsAncestor[];
    classId?: string;
    createTime?: string;
    defaultDomain?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    nameServers?: string[];
    networkElement?: inputs.GetNetworkDnsNetworkElement;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetNetworkDnsParent;
    permissionResources?: inputs.GetNetworkDnsPermissionResource[];
    registeredDevice?: inputs.GetNetworkDnsRegisteredDevice;
    rn?: string;
    sharedScope?: string;
    tags?: inputs.GetNetworkDnsTag[];
    versionContext?: inputs.GetNetworkDnsVersionContext;
    vrfName?: string;
}

/**
 * A collection of values returned by getNetworkDns.
 */
export interface GetNetworkDnsResult {
    readonly accountMoid?: string;
    readonly additionalDomains?: string[];
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetNetworkDnsAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly defaultDomain?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly nameServers?: string[];
    readonly networkElement?: outputs.GetNetworkDnsNetworkElement;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetNetworkDnsParent;
    readonly permissionResources?: outputs.GetNetworkDnsPermissionResource[];
    readonly registeredDevice?: outputs.GetNetworkDnsRegisteredDevice;
    readonly results: outputs.GetNetworkDnsResult[];
    readonly rn?: string;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetNetworkDnsTag[];
    readonly versionContext?: outputs.GetNetworkDnsVersionContext;
    readonly vrfName?: string;
}
export function getNetworkDnsOutput(args?: GetNetworkDnsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkDnsResult> {
    return pulumi.output(args).apply((a: any) => getNetworkDns(a, opts))
}

/**
 * A collection of arguments for invoking getNetworkDns.
 */
export interface GetNetworkDnsOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalDomains?: pulumi.Input<pulumi.Input<string>[]>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetNetworkDnsAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    defaultDomain?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    nameServers?: pulumi.Input<pulumi.Input<string>[]>;
    networkElement?: pulumi.Input<inputs.GetNetworkDnsNetworkElementArgs>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetNetworkDnsParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetNetworkDnsPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetNetworkDnsRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetNetworkDnsTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetNetworkDnsVersionContextArgs>;
    vrfName?: pulumi.Input<string>;
}
