// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getWorkflowWorkflowDefinition(args?: GetWorkflowWorkflowDefinitionArgs, opts?: pulumi.InvokeOptions): Promise<GetWorkflowWorkflowDefinitionResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getWorkflowWorkflowDefinition:getWorkflowWorkflowDefinition", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "catalog": args.catalog,
        "classId": args.classId,
        "clonedFrom": args.clonedFrom,
        "createTime": args.createTime,
        "createUser": args.createUser,
        "defaultVersion": args.defaultVersion,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "inputDefinitions": args.inputDefinitions,
        "inputParameterSets": args.inputParameterSets,
        "label": args.label,
        "licenseEntitlement": args.licenseEntitlement,
        "maxTaskCount": args.maxTaskCount,
        "maxWorkerTaskCount": args.maxWorkerTaskCount,
        "modTime": args.modTime,
        "modUser": args.modUser,
        "moid": args.moid,
        "name": args.name,
        "nrVersion": args.nrVersion,
        "objectType": args.objectType,
        "outputDefinitions": args.outputDefinitions,
        "outputParameters": args.outputParameters,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "properties": args.properties,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "tasks": args.tasks,
        "uiInputFilters": args.uiInputFilters,
        "uiRenderingData": args.uiRenderingData,
        "validationInformation": args.validationInformation,
        "variableDefinitions": args.variableDefinitions,
        "versionContext": args.versionContext,
        "workflowMetadata": args.workflowMetadata,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getWorkflowWorkflowDefinition.
 */
export interface GetWorkflowWorkflowDefinitionArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetWorkflowWorkflowDefinitionAncestor[];
    catalog?: inputs.GetWorkflowWorkflowDefinitionCatalog;
    classId?: string;
    clonedFrom?: inputs.GetWorkflowWorkflowDefinitionClonedFrom;
    createTime?: string;
    createUser?: string;
    defaultVersion?: boolean;
    description?: string;
    domainGroupMoid?: string;
    id?: string;
    inputDefinitions?: inputs.GetWorkflowWorkflowDefinitionInputDefinition[];
    inputParameterSets?: inputs.GetWorkflowWorkflowDefinitionInputParameterSet[];
    label?: string;
    licenseEntitlement?: string;
    maxTaskCount?: number;
    maxWorkerTaskCount?: number;
    modTime?: string;
    modUser?: string;
    moid?: string;
    name?: string;
    nrVersion?: number;
    objectType?: string;
    outputDefinitions?: inputs.GetWorkflowWorkflowDefinitionOutputDefinition[];
    outputParameters?: string;
    owners?: string[];
    parent?: inputs.GetWorkflowWorkflowDefinitionParent;
    permissionResources?: inputs.GetWorkflowWorkflowDefinitionPermissionResource[];
    properties?: inputs.GetWorkflowWorkflowDefinitionProperties;
    sharedScope?: string;
    tags?: inputs.GetWorkflowWorkflowDefinitionTag[];
    tasks?: inputs.GetWorkflowWorkflowDefinitionTask[];
    uiInputFilters?: inputs.GetWorkflowWorkflowDefinitionUiInputFilter[];
    uiRenderingData?: string;
    validationInformation?: inputs.GetWorkflowWorkflowDefinitionValidationInformation;
    variableDefinitions?: inputs.GetWorkflowWorkflowDefinitionVariableDefinition[];
    versionContext?: inputs.GetWorkflowWorkflowDefinitionVersionContext;
    workflowMetadata?: inputs.GetWorkflowWorkflowDefinitionWorkflowMetadata;
}

/**
 * A collection of values returned by getWorkflowWorkflowDefinition.
 */
export interface GetWorkflowWorkflowDefinitionResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetWorkflowWorkflowDefinitionAncestor[];
    readonly catalog?: outputs.GetWorkflowWorkflowDefinitionCatalog;
    readonly classId?: string;
    readonly clonedFrom?: outputs.GetWorkflowWorkflowDefinitionClonedFrom;
    readonly createTime?: string;
    readonly createUser?: string;
    readonly defaultVersion?: boolean;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly inputDefinitions?: outputs.GetWorkflowWorkflowDefinitionInputDefinition[];
    readonly inputParameterSets?: outputs.GetWorkflowWorkflowDefinitionInputParameterSet[];
    readonly label?: string;
    readonly licenseEntitlement?: string;
    readonly maxTaskCount?: number;
    readonly maxWorkerTaskCount?: number;
    readonly modTime?: string;
    readonly modUser?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nrVersion?: number;
    readonly objectType?: string;
    readonly outputDefinitions?: outputs.GetWorkflowWorkflowDefinitionOutputDefinition[];
    readonly outputParameters?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetWorkflowWorkflowDefinitionParent;
    readonly permissionResources?: outputs.GetWorkflowWorkflowDefinitionPermissionResource[];
    readonly properties?: outputs.GetWorkflowWorkflowDefinitionProperties;
    readonly results: outputs.GetWorkflowWorkflowDefinitionResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetWorkflowWorkflowDefinitionTag[];
    readonly tasks?: outputs.GetWorkflowWorkflowDefinitionTask[];
    readonly uiInputFilters?: outputs.GetWorkflowWorkflowDefinitionUiInputFilter[];
    readonly uiRenderingData?: string;
    readonly validationInformation?: outputs.GetWorkflowWorkflowDefinitionValidationInformation;
    readonly variableDefinitions?: outputs.GetWorkflowWorkflowDefinitionVariableDefinition[];
    readonly versionContext?: outputs.GetWorkflowWorkflowDefinitionVersionContext;
    readonly workflowMetadata?: outputs.GetWorkflowWorkflowDefinitionWorkflowMetadata;
}
export function getWorkflowWorkflowDefinitionOutput(args?: GetWorkflowWorkflowDefinitionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWorkflowWorkflowDefinitionResult> {
    return pulumi.output(args).apply((a: any) => getWorkflowWorkflowDefinition(a, opts))
}

/**
 * A collection of arguments for invoking getWorkflowWorkflowDefinition.
 */
export interface GetWorkflowWorkflowDefinitionOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetWorkflowWorkflowDefinitionAncestorArgs>[]>;
    catalog?: pulumi.Input<inputs.GetWorkflowWorkflowDefinitionCatalogArgs>;
    classId?: pulumi.Input<string>;
    clonedFrom?: pulumi.Input<inputs.GetWorkflowWorkflowDefinitionClonedFromArgs>;
    createTime?: pulumi.Input<string>;
    createUser?: pulumi.Input<string>;
    defaultVersion?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    inputDefinitions?: pulumi.Input<pulumi.Input<inputs.GetWorkflowWorkflowDefinitionInputDefinitionArgs>[]>;
    inputParameterSets?: pulumi.Input<pulumi.Input<inputs.GetWorkflowWorkflowDefinitionInputParameterSetArgs>[]>;
    label?: pulumi.Input<string>;
    licenseEntitlement?: pulumi.Input<string>;
    maxTaskCount?: pulumi.Input<number>;
    maxWorkerTaskCount?: pulumi.Input<number>;
    modTime?: pulumi.Input<string>;
    modUser?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nrVersion?: pulumi.Input<number>;
    objectType?: pulumi.Input<string>;
    outputDefinitions?: pulumi.Input<pulumi.Input<inputs.GetWorkflowWorkflowDefinitionOutputDefinitionArgs>[]>;
    outputParameters?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetWorkflowWorkflowDefinitionParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetWorkflowWorkflowDefinitionPermissionResourceArgs>[]>;
    properties?: pulumi.Input<inputs.GetWorkflowWorkflowDefinitionPropertiesArgs>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetWorkflowWorkflowDefinitionTagArgs>[]>;
    tasks?: pulumi.Input<pulumi.Input<inputs.GetWorkflowWorkflowDefinitionTaskArgs>[]>;
    uiInputFilters?: pulumi.Input<pulumi.Input<inputs.GetWorkflowWorkflowDefinitionUiInputFilterArgs>[]>;
    uiRenderingData?: pulumi.Input<string>;
    validationInformation?: pulumi.Input<inputs.GetWorkflowWorkflowDefinitionValidationInformationArgs>;
    variableDefinitions?: pulumi.Input<pulumi.Input<inputs.GetWorkflowWorkflowDefinitionVariableDefinitionArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetWorkflowWorkflowDefinitionVersionContextArgs>;
    workflowMetadata?: pulumi.Input<inputs.GetWorkflowWorkflowDefinitionWorkflowMetadataArgs>;
}
