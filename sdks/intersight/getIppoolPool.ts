// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIppoolPool(args?: GetIppoolPoolArgs, opts?: pulumi.InvokeOptions): Promise<GetIppoolPoolResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getIppoolPool:getIppoolPool", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "assigned": args.assigned,
        "assignmentOrder": args.assignmentOrder,
        "classId": args.classId,
        "createTime": args.createTime,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "enableBlockLevelSubnetConfig": args.enableBlockLevelSubnetConfig,
        "id": args.id,
        "ipV4Blocks": args.ipV4Blocks,
        "ipV4Config": args.ipV4Config,
        "ipV6Blocks": args.ipV6Blocks,
        "ipV6Config": args.ipV6Config,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "organization": args.organization,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "reservations": args.reservations,
        "reserved": args.reserved,
        "shadowPools": args.shadowPools,
        "sharedScope": args.sharedScope,
        "size": args.size,
        "tags": args.tags,
        "v4Assigned": args.v4Assigned,
        "v4Size": args.v4Size,
        "v6Assigned": args.v6Assigned,
        "v6Size": args.v6Size,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIppoolPool.
 */
export interface GetIppoolPoolArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetIppoolPoolAncestor[];
    assigned?: number;
    assignmentOrder?: string;
    classId?: string;
    createTime?: string;
    description?: string;
    domainGroupMoid?: string;
    enableBlockLevelSubnetConfig?: boolean;
    id?: string;
    ipV4Blocks?: inputs.GetIppoolPoolIpV4Block[];
    ipV4Config?: inputs.GetIppoolPoolIpV4Config;
    ipV6Blocks?: inputs.GetIppoolPoolIpV6Block[];
    ipV6Config?: inputs.GetIppoolPoolIpV6Config;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    organization?: inputs.GetIppoolPoolOrganization;
    owners?: string[];
    parent?: inputs.GetIppoolPoolParent;
    permissionResources?: inputs.GetIppoolPoolPermissionResource[];
    reservations?: inputs.GetIppoolPoolReservation[];
    reserved?: number;
    shadowPools?: inputs.GetIppoolPoolShadowPool[];
    sharedScope?: string;
    size?: number;
    tags?: inputs.GetIppoolPoolTag[];
    v4Assigned?: number;
    v4Size?: number;
    v6Assigned?: number;
    v6Size?: number;
    versionContext?: inputs.GetIppoolPoolVersionContext;
}

/**
 * A collection of values returned by getIppoolPool.
 */
export interface GetIppoolPoolResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetIppoolPoolAncestor[];
    readonly assigned?: number;
    readonly assignmentOrder?: string;
    readonly classId?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly enableBlockLevelSubnetConfig?: boolean;
    readonly id: string;
    readonly ipV4Blocks?: outputs.GetIppoolPoolIpV4Block[];
    readonly ipV4Config?: outputs.GetIppoolPoolIpV4Config;
    readonly ipV6Blocks?: outputs.GetIppoolPoolIpV6Block[];
    readonly ipV6Config?: outputs.GetIppoolPoolIpV6Config;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly organization?: outputs.GetIppoolPoolOrganization;
    readonly owners?: string[];
    readonly parent?: outputs.GetIppoolPoolParent;
    readonly permissionResources?: outputs.GetIppoolPoolPermissionResource[];
    readonly reservations?: outputs.GetIppoolPoolReservation[];
    readonly reserved?: number;
    readonly results: outputs.GetIppoolPoolResult[];
    readonly shadowPools?: outputs.GetIppoolPoolShadowPool[];
    readonly sharedScope?: string;
    readonly size?: number;
    readonly tags?: outputs.GetIppoolPoolTag[];
    readonly v4Assigned?: number;
    readonly v4Size?: number;
    readonly v6Assigned?: number;
    readonly v6Size?: number;
    readonly versionContext?: outputs.GetIppoolPoolVersionContext;
}
export function getIppoolPoolOutput(args?: GetIppoolPoolOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIppoolPoolResult> {
    return pulumi.output(args).apply((a: any) => getIppoolPool(a, opts))
}

/**
 * A collection of arguments for invoking getIppoolPool.
 */
export interface GetIppoolPoolOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetIppoolPoolAncestorArgs>[]>;
    assigned?: pulumi.Input<number>;
    assignmentOrder?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    enableBlockLevelSubnetConfig?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    ipV4Blocks?: pulumi.Input<pulumi.Input<inputs.GetIppoolPoolIpV4BlockArgs>[]>;
    ipV4Config?: pulumi.Input<inputs.GetIppoolPoolIpV4ConfigArgs>;
    ipV6Blocks?: pulumi.Input<pulumi.Input<inputs.GetIppoolPoolIpV6BlockArgs>[]>;
    ipV6Config?: pulumi.Input<inputs.GetIppoolPoolIpV6ConfigArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.GetIppoolPoolOrganizationArgs>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetIppoolPoolParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetIppoolPoolPermissionResourceArgs>[]>;
    reservations?: pulumi.Input<pulumi.Input<inputs.GetIppoolPoolReservationArgs>[]>;
    reserved?: pulumi.Input<number>;
    shadowPools?: pulumi.Input<pulumi.Input<inputs.GetIppoolPoolShadowPoolArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetIppoolPoolTagArgs>[]>;
    v4Assigned?: pulumi.Input<number>;
    v4Size?: pulumi.Input<number>;
    v6Assigned?: pulumi.Input<number>;
    v6Size?: pulumi.Input<number>;
    versionContext?: pulumi.Input<inputs.GetIppoolPoolVersionContextArgs>;
}
