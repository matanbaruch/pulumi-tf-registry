// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVirtualizationVmwareVcenter(args?: GetVirtualizationVmwareVcenterArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualizationVmwareVcenterResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getVirtualizationVmwareVcenter:getVirtualizationVmwareVcenter", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "build": args.build,
        "classId": args.classId,
        "clusterCount": args.clusterCount,
        "createTime": args.createTime,
        "datacenterCount": args.datacenterCount,
        "datastoreCount": args.datastoreCount,
        "distributedVirtualSwitchCount": args.distributedVirtualSwitchCount,
        "domainGroupMoid": args.domainGroupMoid,
        "dsClusterCount": args.dsClusterCount,
        "externalIp": args.externalIp,
        "hostCount": args.hostCount,
        "id": args.id,
        "identity": args.identity,
        "ipAddresses": args.ipAddresses,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "nrVersion": args.nrVersion,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "targetName": args.targetName,
        "versionContext": args.versionContext,
        "vmCount": args.vmCount,
        "vmTemplatesCount": args.vmTemplatesCount,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareVcenter.
 */
export interface GetVirtualizationVmwareVcenterArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetVirtualizationVmwareVcenterAncestor[];
    build?: string;
    classId?: string;
    clusterCount?: number;
    createTime?: string;
    datacenterCount?: number;
    datastoreCount?: number;
    distributedVirtualSwitchCount?: number;
    domainGroupMoid?: string;
    dsClusterCount?: number;
    externalIp?: string;
    hostCount?: number;
    id?: string;
    identity?: string;
    ipAddresses?: string[];
    modTime?: string;
    moid?: string;
    name?: string;
    nrVersion?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetVirtualizationVmwareVcenterParent;
    permissionResources?: inputs.GetVirtualizationVmwareVcenterPermissionResource[];
    registeredDevice?: inputs.GetVirtualizationVmwareVcenterRegisteredDevice;
    sharedScope?: string;
    tags?: inputs.GetVirtualizationVmwareVcenterTag[];
    targetName?: string;
    versionContext?: inputs.GetVirtualizationVmwareVcenterVersionContext;
    vmCount?: number;
    vmTemplatesCount?: number;
}

/**
 * A collection of values returned by getVirtualizationVmwareVcenter.
 */
export interface GetVirtualizationVmwareVcenterResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetVirtualizationVmwareVcenterAncestor[];
    readonly build?: string;
    readonly classId?: string;
    readonly clusterCount?: number;
    readonly createTime?: string;
    readonly datacenterCount?: number;
    readonly datastoreCount?: number;
    readonly distributedVirtualSwitchCount?: number;
    readonly domainGroupMoid?: string;
    readonly dsClusterCount?: number;
    readonly externalIp?: string;
    readonly hostCount?: number;
    readonly id: string;
    readonly identity?: string;
    readonly ipAddresses?: string[];
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nrVersion?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetVirtualizationVmwareVcenterParent;
    readonly permissionResources?: outputs.GetVirtualizationVmwareVcenterPermissionResource[];
    readonly registeredDevice?: outputs.GetVirtualizationVmwareVcenterRegisteredDevice;
    readonly results: outputs.GetVirtualizationVmwareVcenterResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetVirtualizationVmwareVcenterTag[];
    readonly targetName?: string;
    readonly versionContext?: outputs.GetVirtualizationVmwareVcenterVersionContext;
    readonly vmCount?: number;
    readonly vmTemplatesCount?: number;
}
export function getVirtualizationVmwareVcenterOutput(args?: GetVirtualizationVmwareVcenterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualizationVmwareVcenterResult> {
    return pulumi.output(args).apply((a: any) => getVirtualizationVmwareVcenter(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareVcenter.
 */
export interface GetVirtualizationVmwareVcenterOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareVcenterAncestorArgs>[]>;
    build?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    clusterCount?: pulumi.Input<number>;
    createTime?: pulumi.Input<string>;
    datacenterCount?: pulumi.Input<number>;
    datastoreCount?: pulumi.Input<number>;
    distributedVirtualSwitchCount?: pulumi.Input<number>;
    domainGroupMoid?: pulumi.Input<string>;
    dsClusterCount?: pulumi.Input<number>;
    externalIp?: pulumi.Input<string>;
    hostCount?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    identity?: pulumi.Input<string>;
    ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nrVersion?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetVirtualizationVmwareVcenterParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareVcenterPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetVirtualizationVmwareVcenterRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareVcenterTagArgs>[]>;
    targetName?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetVirtualizationVmwareVcenterVersionContextArgs>;
    vmCount?: pulumi.Input<number>;
    vmTemplatesCount?: pulumi.Input<number>;
}
