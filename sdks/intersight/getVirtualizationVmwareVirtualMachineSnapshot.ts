// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVirtualizationVmwareVirtualMachineSnapshot(args?: GetVirtualizationVmwareVirtualMachineSnapshotArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualizationVmwareVirtualMachineSnapshotResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getVirtualizationVmwareVirtualMachineSnapshot:getVirtualizationVmwareVirtualMachineSnapshot", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "creationTime": args.creationTime,
        "currentSnapshot": args.currentSnapshot,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "golden": args.golden,
        "id": args.id,
        "identity": args.identity,
        "key": args.key,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "predecessorId": args.predecessorId,
        "quiesced": args.quiesced,
        "refValue": args.refValue,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "snapshotSize": args.snapshotSize,
        "tags": args.tags,
        "versionContext": args.versionContext,
        "virtualMachine": args.virtualMachine,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareVirtualMachineSnapshot.
 */
export interface GetVirtualizationVmwareVirtualMachineSnapshotArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetVirtualizationVmwareVirtualMachineSnapshotAncestor[];
    classId?: string;
    createTime?: string;
    creationTime?: string;
    currentSnapshot?: boolean;
    description?: string;
    domainGroupMoid?: string;
    golden?: boolean;
    id?: string;
    identity?: string;
    key?: number;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetVirtualizationVmwareVirtualMachineSnapshotParent;
    permissionResources?: inputs.GetVirtualizationVmwareVirtualMachineSnapshotPermissionResource[];
    predecessorId?: number;
    quiesced?: boolean;
    refValue?: string;
    registeredDevice?: inputs.GetVirtualizationVmwareVirtualMachineSnapshotRegisteredDevice;
    sharedScope?: string;
    snapshotSize?: number;
    tags?: inputs.GetVirtualizationVmwareVirtualMachineSnapshotTag[];
    versionContext?: inputs.GetVirtualizationVmwareVirtualMachineSnapshotVersionContext;
    virtualMachine?: inputs.GetVirtualizationVmwareVirtualMachineSnapshotVirtualMachine;
}

/**
 * A collection of values returned by getVirtualizationVmwareVirtualMachineSnapshot.
 */
export interface GetVirtualizationVmwareVirtualMachineSnapshotResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetVirtualizationVmwareVirtualMachineSnapshotAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly creationTime?: string;
    readonly currentSnapshot?: boolean;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly golden?: boolean;
    readonly id: string;
    readonly identity?: string;
    readonly key?: number;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetVirtualizationVmwareVirtualMachineSnapshotParent;
    readonly permissionResources?: outputs.GetVirtualizationVmwareVirtualMachineSnapshotPermissionResource[];
    readonly predecessorId?: number;
    readonly quiesced?: boolean;
    readonly refValue?: string;
    readonly registeredDevice?: outputs.GetVirtualizationVmwareVirtualMachineSnapshotRegisteredDevice;
    readonly results: outputs.GetVirtualizationVmwareVirtualMachineSnapshotResult[];
    readonly sharedScope?: string;
    readonly snapshotSize?: number;
    readonly tags?: outputs.GetVirtualizationVmwareVirtualMachineSnapshotTag[];
    readonly versionContext?: outputs.GetVirtualizationVmwareVirtualMachineSnapshotVersionContext;
    readonly virtualMachine?: outputs.GetVirtualizationVmwareVirtualMachineSnapshotVirtualMachine;
}
export function getVirtualizationVmwareVirtualMachineSnapshotOutput(args?: GetVirtualizationVmwareVirtualMachineSnapshotOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualizationVmwareVirtualMachineSnapshotResult> {
    return pulumi.output(args).apply((a: any) => getVirtualizationVmwareVirtualMachineSnapshot(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareVirtualMachineSnapshot.
 */
export interface GetVirtualizationVmwareVirtualMachineSnapshotOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineSnapshotAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    creationTime?: pulumi.Input<string>;
    currentSnapshot?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    golden?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    identity?: pulumi.Input<string>;
    key?: pulumi.Input<number>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineSnapshotParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineSnapshotPermissionResourceArgs>[]>;
    predecessorId?: pulumi.Input<number>;
    quiesced?: pulumi.Input<boolean>;
    refValue?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineSnapshotRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    snapshotSize?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineSnapshotTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineSnapshotVersionContextArgs>;
    virtualMachine?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineSnapshotVirtualMachineArgs>;
}
