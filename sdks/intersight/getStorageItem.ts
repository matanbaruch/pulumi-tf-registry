// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageItem(args?: GetStorageItemArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageItemResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageItem:getStorageItem", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "alarmType": args.alarmType,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "networkElement": args.networkElement,
        "objectType": args.objectType,
        "operState": args.operState,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "sharedScope": args.sharedScope,
        "size": args.size,
        "storageControllerDrive": args.storageControllerDrive,
        "storageFiles": args.storageFiles,
        "tags": args.tags,
        "used": args.used,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageItem.
 */
export interface GetStorageItemArgs {
    accountMoid?: string;
    additionalProperties?: string;
    alarmType?: string;
    ancestors?: inputs.GetStorageItemAncestor[];
    classId?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    id?: string;
    inventoryDeviceInfo?: inputs.GetStorageItemInventoryDeviceInfo;
    modTime?: string;
    moid?: string;
    name?: string;
    networkElement?: inputs.GetStorageItemNetworkElement;
    objectType?: string;
    operState?: string;
    owners?: string[];
    parent?: inputs.GetStorageItemParent;
    permissionResources?: inputs.GetStorageItemPermissionResource[];
    registeredDevice?: inputs.GetStorageItemRegisteredDevice;
    rn?: string;
    sharedScope?: string;
    size?: string;
    storageControllerDrive?: inputs.GetStorageItemStorageControllerDrive;
    storageFiles?: inputs.GetStorageItemStorageFile[];
    tags?: inputs.GetStorageItemTag[];
    used?: string;
    versionContext?: inputs.GetStorageItemVersionContext;
}

/**
 * A collection of values returned by getStorageItem.
 */
export interface GetStorageItemResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly alarmType?: string;
    readonly ancestors?: outputs.GetStorageItemAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetStorageItemInventoryDeviceInfo;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly networkElement?: outputs.GetStorageItemNetworkElement;
    readonly objectType?: string;
    readonly operState?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageItemParent;
    readonly permissionResources?: outputs.GetStorageItemPermissionResource[];
    readonly registeredDevice?: outputs.GetStorageItemRegisteredDevice;
    readonly results: outputs.GetStorageItemResult[];
    readonly rn?: string;
    readonly sharedScope?: string;
    readonly size?: string;
    readonly storageControllerDrive?: outputs.GetStorageItemStorageControllerDrive;
    readonly storageFiles?: outputs.GetStorageItemStorageFile[];
    readonly tags?: outputs.GetStorageItemTag[];
    readonly used?: string;
    readonly versionContext?: outputs.GetStorageItemVersionContext;
}
export function getStorageItemOutput(args?: GetStorageItemOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageItemResult> {
    return pulumi.output(args).apply((a: any) => getStorageItem(a, opts))
}

/**
 * A collection of arguments for invoking getStorageItem.
 */
export interface GetStorageItemOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    alarmType?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageItemAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetStorageItemInventoryDeviceInfoArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkElement?: pulumi.Input<inputs.GetStorageItemNetworkElementArgs>;
    objectType?: pulumi.Input<string>;
    operState?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageItemParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageItemPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetStorageItemRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    size?: pulumi.Input<string>;
    storageControllerDrive?: pulumi.Input<inputs.GetStorageItemStorageControllerDriveArgs>;
    storageFiles?: pulumi.Input<pulumi.Input<inputs.GetStorageItemStorageFileArgs>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageItemTagArgs>[]>;
    used?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetStorageItemVersionContextArgs>;
}
