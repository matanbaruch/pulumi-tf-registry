// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WorkflowServiceItemDefinition extends pulumi.CustomResource {
    /**
     * Get an existing WorkflowServiceItemDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkflowServiceItemDefinitionState, opts?: pulumi.CustomResourceOptions): WorkflowServiceItemDefinition {
        return new WorkflowServiceItemDefinition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'intersight:index/workflowServiceItemDefinition:WorkflowServiceItemDefinition';

    /**
     * Returns true if the given object is an instance of WorkflowServiceItemDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkflowServiceItemDefinition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkflowServiceItemDefinition.__pulumiType;
    }

    /**
     * The Account ID for this managed object.
     */
    public readonly accountMoid!: pulumi.Output<string>;
    /**
     * An array of relationships to workflowServiceItemActionDefinition resources.
     */
    public readonly actionDefinitions!: pulumi.Output<outputs.WorkflowServiceItemDefinitionActionDefinition[]>;
    public readonly additionalProperties!: pulumi.Output<string | undefined>;
    /**
     * Service item definition can declare that only one instance can be allowed within the customer account.
     */
    public readonly allowMultipleServiceItemInstances!: pulumi.Output<boolean | undefined>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly ancestors!: pulumi.Output<outputs.WorkflowServiceItemDefinitionAncestor[]>;
    public readonly attributeDefinitions!: pulumi.Output<outputs.WorkflowServiceItemDefinitionAttributeDefinition[]>;
    /**
     * A reference to a workflowCatalog resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    public readonly catalogs!: pulumi.Output<outputs.WorkflowServiceItemDefinitionCatalog[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    public readonly classId!: pulumi.Output<string | undefined>;
    /**
     * The time when this managed object was created.
     */
    public readonly createTime!: pulumi.Output<string>;
    /**
     * The user identifier who created or cloned the service item definition.
     */
    public readonly createUser!: pulumi.Output<string>;
    /**
     * The Cisco Validated Design (CVD) Identifier that this service item provides.
     */
    public readonly cvdId!: pulumi.Output<string | undefined>;
    /**
     * The flag to indicate that service item instance will be deleted after the completion of decommission action.
     */
    public readonly deleteInstanceOnDecommission!: pulumi.Output<boolean | undefined>;
    /**
     * The description for this service item which provides information on what are the pre-requisites to deploy the service
     * item and what features are supported on the service item.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The DomainGroup ID for this managed object.
     */
    public readonly domainGroupMoid!: pulumi.Output<string>;
    /**
     * A user friendly short name to identify the service item. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen
     * (-), period (.), colon (:), space ( ) or an underscore (_).
     */
    public readonly label!: pulumi.Output<string | undefined>;
    /**
     * License entitlement required to run this service item. * `Base` - Base as a License type. It is default license type. *
     * `Essential` - Essential as a License type. * `Standard` - Standard as a License type. * `Advantage` - Advantage as a
     * License type. * `Premier` - Premier as a License type. * `IWO-Essential` - IWO-Essential as a License type. *
     * `IWO-Advantage` - IWO-Advantage as a License type. * `IWO-Premier` - IWO-Premier as a License type. * `IKS-Advantage` -
     * IKS-Advantage as a License type. * `INC-Premier-1GFixed` - Premier 1G Fixed license tier for Intersight Nexus Cloud. *
     * `INC-Premier-10GFixed` - Premier 10G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-100GFixed` - Premier
     * 100G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-Mod4Slot` - Premier Modular 4 slot license tier for
     * Intersight Nexus Cloud. * `INC-Premier-Mod8Slot` - Premier Modular 8 slot license tier for Intersight Nexus Cloud. *
     * `INC-Premier-D2OpsFixed` - Premier D2Ops fixed license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsMod` -
     * Premier D2Ops modular license tier for Intersight Nexus Cloud. * `INC-Premier-CentralizedMod8Slot` - Premier modular
     * license tier of switch type CentralizedMod8Slot for Intersight Nexus Cloud. * `INC-Premier-DistributedMod8Slot` -
     * Premier modular license tier of switch type DistributedMod8Slot for Intersight Nexus Cloud. * `IntersightTrial` -
     * Virtual dummy license type to indicate trial. Used for UI display of trial mode Intersight tiers. * `IWOTrial` - Virtual
     * dummy license type to indicate trial. Used for UI display of trial mode IKS tiers. * `IKSTrial` - Virtual dummy license
     * type to indicate trial. Used for UI display of trial mode IWO tiers. * `INCTrial` - Virtual dummy license type to
     * indicate trial. Used for UI display of trial mode Nexus tiers.
     */
    public readonly licenseEntitlement!: pulumi.Output<string>;
    /**
     * The time when this managed object was last modified.
     */
    public readonly modTime!: pulumi.Output<string>;
    /**
     * The user identifier who last updated the service item definition.
     */
    public readonly modUser!: pulumi.Output<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    public readonly moid!: pulumi.Output<string>;
    /**
     * The name for this service item definition. You can have multiple versions of the service item with the same name. Name
     * can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.), colon (:) or an underscore (_).
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The version of the service item to support multiple versions.
     */
    public readonly nrVersion!: pulumi.Output<number | undefined>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    public readonly objectType!: pulumi.Output<string | undefined>;
    public readonly owners!: pulumi.Output<string[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    public readonly parents!: pulumi.Output<outputs.WorkflowServiceItemDefinitionParent[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    public readonly permissionResources!: pulumi.Output<outputs.WorkflowServiceItemDefinitionPermissionResource[]>;
    /**
     * The publish status of service item (Draft, Published, Archived). * `Draft` - The enum specifies the option as Draft
     * which means the meta definition is being designed and tested. * `Published` - The enum specifies the option as Published
     * which means the meta definition is ready for consumption. * `Archived` - The enum specifies the option as Archived which
     * means the meta definition is archived and can no longer be consumed.
     */
    public readonly publishStatus!: pulumi.Output<string | undefined>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    public readonly sharedScope!: pulumi.Output<string>;
    /**
     * State of service item considering the state of underlying service item actions definitions. * `Okay` - Deployment and
     * other post-deployment actions are in valid state. * `Critical` - Deployment action is not in valid state. * `Warning` -
     * Deployment action is in valid state, and one or more post-deployment actions are not in valid state.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * The service item can be marked as deprecated, supported or beta, the support status indicates that. When a new service
     * item is introduced, it can be marked beta to indicate this is experimental and later moved to Supported status. When
     * Service item is deprecated, it cannot be instantiated and used for a Catalog Item design. * `Supported` - The definition
     * is a supported version and there will be no changes to the mandatory inputs or outputs. * `Beta` - The definition is a
     * Beta version and this version can under go changes until the version is marked supported. * `Deprecated` - The version
     * of definition is deprecated and typically there will be a higher version of the same definition that has been added.
     */
    public readonly supportStatus!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<outputs.WorkflowServiceItemDefinitionTag[]>;
    /**
     * This attribute is deprecated and replaced by createUser and modUser.
     */
    public readonly userIdOrEmail!: pulumi.Output<string>;
    /**
     * The current validation state and associated validation errors when state is invalid.
     */
    public readonly validationInformations!: pulumi.Output<outputs.WorkflowServiceItemDefinitionValidationInformation[]>;
    /**
     * The versioning info for this managed object.
     */
    public readonly versionContexts!: pulumi.Output<outputs.WorkflowServiceItemDefinitionVersionContext[]>;

    /**
     * Create a WorkflowServiceItemDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WorkflowServiceItemDefinitionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkflowServiceItemDefinitionArgs | WorkflowServiceItemDefinitionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkflowServiceItemDefinitionState | undefined;
            resourceInputs["accountMoid"] = state ? state.accountMoid : undefined;
            resourceInputs["actionDefinitions"] = state ? state.actionDefinitions : undefined;
            resourceInputs["additionalProperties"] = state ? state.additionalProperties : undefined;
            resourceInputs["allowMultipleServiceItemInstances"] = state ? state.allowMultipleServiceItemInstances : undefined;
            resourceInputs["ancestors"] = state ? state.ancestors : undefined;
            resourceInputs["attributeDefinitions"] = state ? state.attributeDefinitions : undefined;
            resourceInputs["catalogs"] = state ? state.catalogs : undefined;
            resourceInputs["classId"] = state ? state.classId : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["createUser"] = state ? state.createUser : undefined;
            resourceInputs["cvdId"] = state ? state.cvdId : undefined;
            resourceInputs["deleteInstanceOnDecommission"] = state ? state.deleteInstanceOnDecommission : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domainGroupMoid"] = state ? state.domainGroupMoid : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["licenseEntitlement"] = state ? state.licenseEntitlement : undefined;
            resourceInputs["modTime"] = state ? state.modTime : undefined;
            resourceInputs["modUser"] = state ? state.modUser : undefined;
            resourceInputs["moid"] = state ? state.moid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nrVersion"] = state ? state.nrVersion : undefined;
            resourceInputs["objectType"] = state ? state.objectType : undefined;
            resourceInputs["owners"] = state ? state.owners : undefined;
            resourceInputs["parents"] = state ? state.parents : undefined;
            resourceInputs["permissionResources"] = state ? state.permissionResources : undefined;
            resourceInputs["publishStatus"] = state ? state.publishStatus : undefined;
            resourceInputs["sharedScope"] = state ? state.sharedScope : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["supportStatus"] = state ? state.supportStatus : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["userIdOrEmail"] = state ? state.userIdOrEmail : undefined;
            resourceInputs["validationInformations"] = state ? state.validationInformations : undefined;
            resourceInputs["versionContexts"] = state ? state.versionContexts : undefined;
        } else {
            const args = argsOrState as WorkflowServiceItemDefinitionArgs | undefined;
            resourceInputs["accountMoid"] = args ? args.accountMoid : undefined;
            resourceInputs["actionDefinitions"] = args ? args.actionDefinitions : undefined;
            resourceInputs["additionalProperties"] = args ? args.additionalProperties : undefined;
            resourceInputs["allowMultipleServiceItemInstances"] = args ? args.allowMultipleServiceItemInstances : undefined;
            resourceInputs["ancestors"] = args ? args.ancestors : undefined;
            resourceInputs["attributeDefinitions"] = args ? args.attributeDefinitions : undefined;
            resourceInputs["catalogs"] = args ? args.catalogs : undefined;
            resourceInputs["classId"] = args ? args.classId : undefined;
            resourceInputs["createTime"] = args ? args.createTime : undefined;
            resourceInputs["createUser"] = args ? args.createUser : undefined;
            resourceInputs["cvdId"] = args ? args.cvdId : undefined;
            resourceInputs["deleteInstanceOnDecommission"] = args ? args.deleteInstanceOnDecommission : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domainGroupMoid"] = args ? args.domainGroupMoid : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["licenseEntitlement"] = args ? args.licenseEntitlement : undefined;
            resourceInputs["modTime"] = args ? args.modTime : undefined;
            resourceInputs["modUser"] = args ? args.modUser : undefined;
            resourceInputs["moid"] = args ? args.moid : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nrVersion"] = args ? args.nrVersion : undefined;
            resourceInputs["objectType"] = args ? args.objectType : undefined;
            resourceInputs["owners"] = args ? args.owners : undefined;
            resourceInputs["parents"] = args ? args.parents : undefined;
            resourceInputs["permissionResources"] = args ? args.permissionResources : undefined;
            resourceInputs["publishStatus"] = args ? args.publishStatus : undefined;
            resourceInputs["sharedScope"] = args ? args.sharedScope : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["supportStatus"] = args ? args.supportStatus : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userIdOrEmail"] = args ? args.userIdOrEmail : undefined;
            resourceInputs["validationInformations"] = args ? args.validationInformations : undefined;
            resourceInputs["versionContexts"] = args ? args.versionContexts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WorkflowServiceItemDefinition.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WorkflowServiceItemDefinition resources.
 */
export interface WorkflowServiceItemDefinitionState {
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    /**
     * An array of relationships to workflowServiceItemActionDefinition resources.
     */
    actionDefinitions?: pulumi.Input<pulumi.Input<inputs.WorkflowServiceItemDefinitionActionDefinition>[]>;
    additionalProperties?: pulumi.Input<string>;
    /**
     * Service item definition can declare that only one instance can be allowed within the customer account.
     */
    allowMultipleServiceItemInstances?: pulumi.Input<boolean>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.WorkflowServiceItemDefinitionAncestor>[]>;
    attributeDefinitions?: pulumi.Input<pulumi.Input<inputs.WorkflowServiceItemDefinitionAttributeDefinition>[]>;
    /**
     * A reference to a workflowCatalog resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    catalogs?: pulumi.Input<pulumi.Input<inputs.WorkflowServiceItemDefinitionCatalog>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The user identifier who created or cloned the service item definition.
     */
    createUser?: pulumi.Input<string>;
    /**
     * The Cisco Validated Design (CVD) Identifier that this service item provides.
     */
    cvdId?: pulumi.Input<string>;
    /**
     * The flag to indicate that service item instance will be deleted after the completion of decommission action.
     */
    deleteInstanceOnDecommission?: pulumi.Input<boolean>;
    /**
     * The description for this service item which provides information on what are the pre-requisites to deploy the service
     * item and what features are supported on the service item.
     */
    description?: pulumi.Input<string>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    /**
     * A user friendly short name to identify the service item. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen
     * (-), period (.), colon (:), space ( ) or an underscore (_).
     */
    label?: pulumi.Input<string>;
    /**
     * License entitlement required to run this service item. * `Base` - Base as a License type. It is default license type. *
     * `Essential` - Essential as a License type. * `Standard` - Standard as a License type. * `Advantage` - Advantage as a
     * License type. * `Premier` - Premier as a License type. * `IWO-Essential` - IWO-Essential as a License type. *
     * `IWO-Advantage` - IWO-Advantage as a License type. * `IWO-Premier` - IWO-Premier as a License type. * `IKS-Advantage` -
     * IKS-Advantage as a License type. * `INC-Premier-1GFixed` - Premier 1G Fixed license tier for Intersight Nexus Cloud. *
     * `INC-Premier-10GFixed` - Premier 10G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-100GFixed` - Premier
     * 100G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-Mod4Slot` - Premier Modular 4 slot license tier for
     * Intersight Nexus Cloud. * `INC-Premier-Mod8Slot` - Premier Modular 8 slot license tier for Intersight Nexus Cloud. *
     * `INC-Premier-D2OpsFixed` - Premier D2Ops fixed license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsMod` -
     * Premier D2Ops modular license tier for Intersight Nexus Cloud. * `INC-Premier-CentralizedMod8Slot` - Premier modular
     * license tier of switch type CentralizedMod8Slot for Intersight Nexus Cloud. * `INC-Premier-DistributedMod8Slot` -
     * Premier modular license tier of switch type DistributedMod8Slot for Intersight Nexus Cloud. * `IntersightTrial` -
     * Virtual dummy license type to indicate trial. Used for UI display of trial mode Intersight tiers. * `IWOTrial` - Virtual
     * dummy license type to indicate trial. Used for UI display of trial mode IKS tiers. * `IKSTrial` - Virtual dummy license
     * type to indicate trial. Used for UI display of trial mode IWO tiers. * `INCTrial` - Virtual dummy license type to
     * indicate trial. Used for UI display of trial mode Nexus tiers.
     */
    licenseEntitlement?: pulumi.Input<string>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * The user identifier who last updated the service item definition.
     */
    modUser?: pulumi.Input<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * The name for this service item definition. You can have multiple versions of the service item with the same name. Name
     * can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.), colon (:) or an underscore (_).
     */
    name?: pulumi.Input<string>;
    /**
     * The version of the service item to support multiple versions.
     */
    nrVersion?: pulumi.Input<number>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.WorkflowServiceItemDefinitionParent>[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.WorkflowServiceItemDefinitionPermissionResource>[]>;
    /**
     * The publish status of service item (Draft, Published, Archived). * `Draft` - The enum specifies the option as Draft
     * which means the meta definition is being designed and tested. * `Published` - The enum specifies the option as Published
     * which means the meta definition is ready for consumption. * `Archived` - The enum specifies the option as Archived which
     * means the meta definition is archived and can no longer be consumed.
     */
    publishStatus?: pulumi.Input<string>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    /**
     * State of service item considering the state of underlying service item actions definitions. * `Okay` - Deployment and
     * other post-deployment actions are in valid state. * `Critical` - Deployment action is not in valid state. * `Warning` -
     * Deployment action is in valid state, and one or more post-deployment actions are not in valid state.
     */
    status?: pulumi.Input<string>;
    /**
     * The service item can be marked as deprecated, supported or beta, the support status indicates that. When a new service
     * item is introduced, it can be marked beta to indicate this is experimental and later moved to Supported status. When
     * Service item is deprecated, it cannot be instantiated and used for a Catalog Item design. * `Supported` - The definition
     * is a supported version and there will be no changes to the mandatory inputs or outputs. * `Beta` - The definition is a
     * Beta version and this version can under go changes until the version is marked supported. * `Deprecated` - The version
     * of definition is deprecated and typically there will be a higher version of the same definition that has been added.
     */
    supportStatus?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.WorkflowServiceItemDefinitionTag>[]>;
    /**
     * This attribute is deprecated and replaced by createUser and modUser.
     */
    userIdOrEmail?: pulumi.Input<string>;
    /**
     * The current validation state and associated validation errors when state is invalid.
     */
    validationInformations?: pulumi.Input<pulumi.Input<inputs.WorkflowServiceItemDefinitionValidationInformation>[]>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.WorkflowServiceItemDefinitionVersionContext>[]>;
}

/**
 * The set of arguments for constructing a WorkflowServiceItemDefinition resource.
 */
export interface WorkflowServiceItemDefinitionArgs {
    /**
     * The Account ID for this managed object.
     */
    accountMoid?: pulumi.Input<string>;
    /**
     * An array of relationships to workflowServiceItemActionDefinition resources.
     */
    actionDefinitions?: pulumi.Input<pulumi.Input<inputs.WorkflowServiceItemDefinitionActionDefinition>[]>;
    additionalProperties?: pulumi.Input<string>;
    /**
     * Service item definition can declare that only one instance can be allowed within the customer account.
     */
    allowMultipleServiceItemInstances?: pulumi.Input<boolean>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    ancestors?: pulumi.Input<pulumi.Input<inputs.WorkflowServiceItemDefinitionAncestor>[]>;
    attributeDefinitions?: pulumi.Input<pulumi.Input<inputs.WorkflowServiceItemDefinitionAttributeDefinition>[]>;
    /**
     * A reference to a workflowCatalog resource. When the $expand query parameter is specified, the referenced resource is
     * returned inline.
     */
    catalogs?: pulumi.Input<pulumi.Input<inputs.WorkflowServiceItemDefinitionCatalog>[]>;
    /**
     * The fully-qualified name of the instantiated, concrete type. This property is used as a discriminator to identify the
     * type of the payload when marshaling and unmarshaling data.
     */
    classId?: pulumi.Input<string>;
    /**
     * The time when this managed object was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The user identifier who created or cloned the service item definition.
     */
    createUser?: pulumi.Input<string>;
    /**
     * The Cisco Validated Design (CVD) Identifier that this service item provides.
     */
    cvdId?: pulumi.Input<string>;
    /**
     * The flag to indicate that service item instance will be deleted after the completion of decommission action.
     */
    deleteInstanceOnDecommission?: pulumi.Input<boolean>;
    /**
     * The description for this service item which provides information on what are the pre-requisites to deploy the service
     * item and what features are supported on the service item.
     */
    description?: pulumi.Input<string>;
    /**
     * The DomainGroup ID for this managed object.
     */
    domainGroupMoid?: pulumi.Input<string>;
    /**
     * A user friendly short name to identify the service item. Name can only contain letters (a-z, A-Z), numbers (0-9), hyphen
     * (-), period (.), colon (:), space ( ) or an underscore (_).
     */
    label?: pulumi.Input<string>;
    /**
     * License entitlement required to run this service item. * `Base` - Base as a License type. It is default license type. *
     * `Essential` - Essential as a License type. * `Standard` - Standard as a License type. * `Advantage` - Advantage as a
     * License type. * `Premier` - Premier as a License type. * `IWO-Essential` - IWO-Essential as a License type. *
     * `IWO-Advantage` - IWO-Advantage as a License type. * `IWO-Premier` - IWO-Premier as a License type. * `IKS-Advantage` -
     * IKS-Advantage as a License type. * `INC-Premier-1GFixed` - Premier 1G Fixed license tier for Intersight Nexus Cloud. *
     * `INC-Premier-10GFixed` - Premier 10G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-100GFixed` - Premier
     * 100G Fixed license tier for Intersight Nexus Cloud. * `INC-Premier-Mod4Slot` - Premier Modular 4 slot license tier for
     * Intersight Nexus Cloud. * `INC-Premier-Mod8Slot` - Premier Modular 8 slot license tier for Intersight Nexus Cloud. *
     * `INC-Premier-D2OpsFixed` - Premier D2Ops fixed license tier for Intersight Nexus Cloud. * `INC-Premier-D2OpsMod` -
     * Premier D2Ops modular license tier for Intersight Nexus Cloud. * `INC-Premier-CentralizedMod8Slot` - Premier modular
     * license tier of switch type CentralizedMod8Slot for Intersight Nexus Cloud. * `INC-Premier-DistributedMod8Slot` -
     * Premier modular license tier of switch type DistributedMod8Slot for Intersight Nexus Cloud. * `IntersightTrial` -
     * Virtual dummy license type to indicate trial. Used for UI display of trial mode Intersight tiers. * `IWOTrial` - Virtual
     * dummy license type to indicate trial. Used for UI display of trial mode IKS tiers. * `IKSTrial` - Virtual dummy license
     * type to indicate trial. Used for UI display of trial mode IWO tiers. * `INCTrial` - Virtual dummy license type to
     * indicate trial. Used for UI display of trial mode Nexus tiers.
     */
    licenseEntitlement?: pulumi.Input<string>;
    /**
     * The time when this managed object was last modified.
     */
    modTime?: pulumi.Input<string>;
    /**
     * The user identifier who last updated the service item definition.
     */
    modUser?: pulumi.Input<string>;
    /**
     * The unique identifier of this Managed Object instance.
     */
    moid?: pulumi.Input<string>;
    /**
     * The name for this service item definition. You can have multiple versions of the service item with the same name. Name
     * can only contain letters (a-z, A-Z), numbers (0-9), hyphen (-), period (.), colon (:) or an underscore (_).
     */
    name?: pulumi.Input<string>;
    /**
     * The version of the service item to support multiple versions.
     */
    nrVersion?: pulumi.Input<number>;
    /**
     * The fully-qualified name of the instantiated, concrete type. The value should be the same as the 'ClassId' property.
     */
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to a moBaseMo resource. When the $expand query parameter is specified, the referenced resource is returned
     * inline.
     */
    parents?: pulumi.Input<pulumi.Input<inputs.WorkflowServiceItemDefinitionParent>[]>;
    /**
     * An array of relationships to moBaseMo resources.
     */
    permissionResources?: pulumi.Input<pulumi.Input<inputs.WorkflowServiceItemDefinitionPermissionResource>[]>;
    /**
     * The publish status of service item (Draft, Published, Archived). * `Draft` - The enum specifies the option as Draft
     * which means the meta definition is being designed and tested. * `Published` - The enum specifies the option as Published
     * which means the meta definition is ready for consumption. * `Archived` - The enum specifies the option as Archived which
     * means the meta definition is archived and can no longer be consumed.
     */
    publishStatus?: pulumi.Input<string>;
    /**
     * Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made
     * available through global catalogs are said to have a 'shared' ownership. Shared objects are either made globally
     * available to all end users or restricted to end users based on their license entitlement. Users can use this property to
     * differentiate the scope (global or a specific license tier) to which a shared MO belongs.
     */
    sharedScope?: pulumi.Input<string>;
    /**
     * State of service item considering the state of underlying service item actions definitions. * `Okay` - Deployment and
     * other post-deployment actions are in valid state. * `Critical` - Deployment action is not in valid state. * `Warning` -
     * Deployment action is in valid state, and one or more post-deployment actions are not in valid state.
     */
    status?: pulumi.Input<string>;
    /**
     * The service item can be marked as deprecated, supported or beta, the support status indicates that. When a new service
     * item is introduced, it can be marked beta to indicate this is experimental and later moved to Supported status. When
     * Service item is deprecated, it cannot be instantiated and used for a Catalog Item design. * `Supported` - The definition
     * is a supported version and there will be no changes to the mandatory inputs or outputs. * `Beta` - The definition is a
     * Beta version and this version can under go changes until the version is marked supported. * `Deprecated` - The version
     * of definition is deprecated and typically there will be a higher version of the same definition that has been added.
     */
    supportStatus?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.WorkflowServiceItemDefinitionTag>[]>;
    /**
     * This attribute is deprecated and replaced by createUser and modUser.
     */
    userIdOrEmail?: pulumi.Input<string>;
    /**
     * The current validation state and associated validation errors when state is invalid.
     */
    validationInformations?: pulumi.Input<pulumi.Input<inputs.WorkflowServiceItemDefinitionValidationInformation>[]>;
    /**
     * The versioning info for this managed object.
     */
    versionContexts?: pulumi.Input<pulumi.Input<inputs.WorkflowServiceItemDefinitionVersionContext>[]>;
}
