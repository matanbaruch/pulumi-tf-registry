// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getPortMacBinding(args?: GetPortMacBindingArgs, opts?: pulumi.InvokeOptions): Promise<GetPortMacBindingResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getPortMacBinding:getPortMacBinding", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "aggregatePortId": args.aggregatePortId,
        "ancestors": args.ancestors,
        "chassisId": args.chassisId,
        "chassisModel": args.chassisModel,
        "chassisSerial": args.chassisSerial,
        "chassisVendor": args.chassisVendor,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceMac": args.deviceMac,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "modTime": args.modTime,
        "moduleMode": args.moduleMode,
        "moduleModel": args.moduleModel,
        "modulePortId": args.modulePortId,
        "moduleSerial": args.moduleSerial,
        "moduleSide": args.moduleSide,
        "moduleSlot": args.moduleSlot,
        "moduleVendor": args.moduleVendor,
        "moid": args.moid,
        "networkElement": args.networkElement,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "portId": args.portId,
        "portMac": args.portMac,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "sharedScope": args.sharedScope,
        "slotId": args.slotId,
        "switchId": args.switchId,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPortMacBinding.
 */
export interface GetPortMacBindingArgs {
    accountMoid?: string;
    additionalProperties?: string;
    aggregatePortId?: number;
    ancestors?: inputs.GetPortMacBindingAncestor[];
    chassisId?: number;
    chassisModel?: string;
    chassisSerial?: string;
    chassisVendor?: string;
    classId?: string;
    createTime?: string;
    deviceMac?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    id?: string;
    modTime?: string;
    moduleMode?: number;
    moduleModel?: string;
    modulePortId?: number;
    moduleSerial?: string;
    moduleSide?: number;
    moduleSlot?: number;
    moduleVendor?: string;
    moid?: string;
    networkElement?: inputs.GetPortMacBindingNetworkElement;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetPortMacBindingParent;
    permissionResources?: inputs.GetPortMacBindingPermissionResource[];
    portId?: number;
    portMac?: string;
    registeredDevice?: inputs.GetPortMacBindingRegisteredDevice;
    rn?: string;
    sharedScope?: string;
    slotId?: number;
    switchId?: number;
    tags?: inputs.GetPortMacBindingTag[];
    versionContext?: inputs.GetPortMacBindingVersionContext;
}

/**
 * A collection of values returned by getPortMacBinding.
 */
export interface GetPortMacBindingResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly aggregatePortId?: number;
    readonly ancestors?: outputs.GetPortMacBindingAncestor[];
    readonly chassisId?: number;
    readonly chassisModel?: string;
    readonly chassisSerial?: string;
    readonly chassisVendor?: string;
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceMac?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moduleMode?: number;
    readonly moduleModel?: string;
    readonly modulePortId?: number;
    readonly moduleSerial?: string;
    readonly moduleSide?: number;
    readonly moduleSlot?: number;
    readonly moduleVendor?: string;
    readonly moid?: string;
    readonly networkElement?: outputs.GetPortMacBindingNetworkElement;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetPortMacBindingParent;
    readonly permissionResources?: outputs.GetPortMacBindingPermissionResource[];
    readonly portId?: number;
    readonly portMac?: string;
    readonly registeredDevice?: outputs.GetPortMacBindingRegisteredDevice;
    readonly results: outputs.GetPortMacBindingResult[];
    readonly rn?: string;
    readonly sharedScope?: string;
    readonly slotId?: number;
    readonly switchId?: number;
    readonly tags?: outputs.GetPortMacBindingTag[];
    readonly versionContext?: outputs.GetPortMacBindingVersionContext;
}
export function getPortMacBindingOutput(args?: GetPortMacBindingOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPortMacBindingResult> {
    return pulumi.output(args).apply((a: any) => getPortMacBinding(a, opts))
}

/**
 * A collection of arguments for invoking getPortMacBinding.
 */
export interface GetPortMacBindingOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    aggregatePortId?: pulumi.Input<number>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetPortMacBindingAncestorArgs>[]>;
    chassisId?: pulumi.Input<number>;
    chassisModel?: pulumi.Input<string>;
    chassisSerial?: pulumi.Input<string>;
    chassisVendor?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMac?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moduleMode?: pulumi.Input<number>;
    moduleModel?: pulumi.Input<string>;
    modulePortId?: pulumi.Input<number>;
    moduleSerial?: pulumi.Input<string>;
    moduleSide?: pulumi.Input<number>;
    moduleSlot?: pulumi.Input<number>;
    moduleVendor?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    networkElement?: pulumi.Input<inputs.GetPortMacBindingNetworkElementArgs>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetPortMacBindingParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetPortMacBindingPermissionResourceArgs>[]>;
    portId?: pulumi.Input<number>;
    portMac?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetPortMacBindingRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    slotId?: pulumi.Input<number>;
    switchId?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetPortMacBindingTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetPortMacBindingVersionContextArgs>;
}
