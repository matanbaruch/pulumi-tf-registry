// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStoragePureVolume(args?: GetStoragePureVolumeArgs, opts?: pulumi.InvokeOptions): Promise<GetStoragePureVolumeResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStoragePureVolume:getStoragePureVolume", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "array": args.array,
        "classId": args.classId,
        "createTime": args.createTime,
        "created": args.created,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "naaId": args.naaId,
        "name": args.name,
        "nrSource": args.nrSource,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "protectionGroup": args.protectionGroup,
        "registeredDevice": args.registeredDevice,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "size": args.size,
        "storageUtilization": args.storageUtilization,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStoragePureVolume.
 */
export interface GetStoragePureVolumeArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStoragePureVolumeAncestor[];
    array?: inputs.GetStoragePureVolumeArray;
    classId?: string;
    createTime?: string;
    created?: string;
    description?: string;
    domainGroupMoid?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    naaId?: string;
    name?: string;
    nrSource?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStoragePureVolumeParent;
    permissionResources?: inputs.GetStoragePureVolumePermissionResource[];
    protectionGroup?: inputs.GetStoragePureVolumeProtectionGroup;
    registeredDevice?: inputs.GetStoragePureVolumeRegisteredDevice;
    serial?: string;
    sharedScope?: string;
    size?: number;
    storageUtilization?: inputs.GetStoragePureVolumeStorageUtilization;
    tags?: inputs.GetStoragePureVolumeTag[];
    versionContext?: inputs.GetStoragePureVolumeVersionContext;
}

/**
 * A collection of values returned by getStoragePureVolume.
 */
export interface GetStoragePureVolumeResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStoragePureVolumeAncestor[];
    readonly array?: outputs.GetStoragePureVolumeArray;
    readonly classId?: string;
    readonly createTime?: string;
    readonly created?: string;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly naaId?: string;
    readonly name?: string;
    readonly nrSource?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStoragePureVolumeParent;
    readonly permissionResources?: outputs.GetStoragePureVolumePermissionResource[];
    readonly protectionGroup?: outputs.GetStoragePureVolumeProtectionGroup;
    readonly registeredDevice?: outputs.GetStoragePureVolumeRegisteredDevice;
    readonly results: outputs.GetStoragePureVolumeResult[];
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly size?: number;
    readonly storageUtilization?: outputs.GetStoragePureVolumeStorageUtilization;
    readonly tags?: outputs.GetStoragePureVolumeTag[];
    readonly versionContext?: outputs.GetStoragePureVolumeVersionContext;
}
export function getStoragePureVolumeOutput(args?: GetStoragePureVolumeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStoragePureVolumeResult> {
    return pulumi.output(args).apply((a: any) => getStoragePureVolume(a, opts))
}

/**
 * A collection of arguments for invoking getStoragePureVolume.
 */
export interface GetStoragePureVolumeOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStoragePureVolumeAncestorArgs>[]>;
    array?: pulumi.Input<inputs.GetStoragePureVolumeArrayArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    created?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    naaId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nrSource?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStoragePureVolumeParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStoragePureVolumePermissionResourceArgs>[]>;
    protectionGroup?: pulumi.Input<inputs.GetStoragePureVolumeProtectionGroupArgs>;
    registeredDevice?: pulumi.Input<inputs.GetStoragePureVolumeRegisteredDeviceArgs>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    storageUtilization?: pulumi.Input<inputs.GetStoragePureVolumeStorageUtilizationArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStoragePureVolumeTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetStoragePureVolumeVersionContextArgs>;
}
