// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getWorkflowTaskDefinition(args?: GetWorkflowTaskDefinitionArgs, opts?: pulumi.InvokeOptions): Promise<GetWorkflowTaskDefinitionResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getWorkflowTaskDefinition:getWorkflowTaskDefinition", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "catalog": args.catalog,
        "classId": args.classId,
        "clonedFrom": args.clonedFrom,
        "createTime": args.createTime,
        "defaultVersion": args.defaultVersion,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "implementedTasks": args.implementedTasks,
        "interfaceTask": args.interfaceTask,
        "internalProperties": args.internalProperties,
        "label": args.label,
        "licenseEntitlement": args.licenseEntitlement,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "nrVersion": args.nrVersion,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "properties": args.properties,
        "rollbackTasks": args.rollbackTasks,
        "securePropAccess": args.securePropAccess,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "taskMetadata": args.taskMetadata,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getWorkflowTaskDefinition.
 */
export interface GetWorkflowTaskDefinitionArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetWorkflowTaskDefinitionAncestor[];
    catalog?: inputs.GetWorkflowTaskDefinitionCatalog;
    classId?: string;
    clonedFrom?: inputs.GetWorkflowTaskDefinitionClonedFrom;
    createTime?: string;
    defaultVersion?: boolean;
    description?: string;
    domainGroupMoid?: string;
    id?: string;
    implementedTasks?: inputs.GetWorkflowTaskDefinitionImplementedTask[];
    interfaceTask?: inputs.GetWorkflowTaskDefinitionInterfaceTask;
    internalProperties?: inputs.GetWorkflowTaskDefinitionInternalProperties;
    label?: string;
    licenseEntitlement?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    nrVersion?: number;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetWorkflowTaskDefinitionParent;
    permissionResources?: inputs.GetWorkflowTaskDefinitionPermissionResource[];
    properties?: inputs.GetWorkflowTaskDefinitionProperties;
    rollbackTasks?: inputs.GetWorkflowTaskDefinitionRollbackTask[];
    securePropAccess?: boolean;
    sharedScope?: string;
    tags?: inputs.GetWorkflowTaskDefinitionTag[];
    taskMetadata?: inputs.GetWorkflowTaskDefinitionTaskMetadata;
    versionContext?: inputs.GetWorkflowTaskDefinitionVersionContext;
}

/**
 * A collection of values returned by getWorkflowTaskDefinition.
 */
export interface GetWorkflowTaskDefinitionResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetWorkflowTaskDefinitionAncestor[];
    readonly catalog?: outputs.GetWorkflowTaskDefinitionCatalog;
    readonly classId?: string;
    readonly clonedFrom?: outputs.GetWorkflowTaskDefinitionClonedFrom;
    readonly createTime?: string;
    readonly defaultVersion?: boolean;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly implementedTasks?: outputs.GetWorkflowTaskDefinitionImplementedTask[];
    readonly interfaceTask?: outputs.GetWorkflowTaskDefinitionInterfaceTask;
    readonly internalProperties?: outputs.GetWorkflowTaskDefinitionInternalProperties;
    readonly label?: string;
    readonly licenseEntitlement?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nrVersion?: number;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetWorkflowTaskDefinitionParent;
    readonly permissionResources?: outputs.GetWorkflowTaskDefinitionPermissionResource[];
    readonly properties?: outputs.GetWorkflowTaskDefinitionProperties;
    readonly results: outputs.GetWorkflowTaskDefinitionResult[];
    readonly rollbackTasks?: outputs.GetWorkflowTaskDefinitionRollbackTask[];
    readonly securePropAccess?: boolean;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetWorkflowTaskDefinitionTag[];
    readonly taskMetadata?: outputs.GetWorkflowTaskDefinitionTaskMetadata;
    readonly versionContext?: outputs.GetWorkflowTaskDefinitionVersionContext;
}
export function getWorkflowTaskDefinitionOutput(args?: GetWorkflowTaskDefinitionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWorkflowTaskDefinitionResult> {
    return pulumi.output(args).apply((a: any) => getWorkflowTaskDefinition(a, opts))
}

/**
 * A collection of arguments for invoking getWorkflowTaskDefinition.
 */
export interface GetWorkflowTaskDefinitionOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetWorkflowTaskDefinitionAncestorArgs>[]>;
    catalog?: pulumi.Input<inputs.GetWorkflowTaskDefinitionCatalogArgs>;
    classId?: pulumi.Input<string>;
    clonedFrom?: pulumi.Input<inputs.GetWorkflowTaskDefinitionClonedFromArgs>;
    createTime?: pulumi.Input<string>;
    defaultVersion?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    implementedTasks?: pulumi.Input<pulumi.Input<inputs.GetWorkflowTaskDefinitionImplementedTaskArgs>[]>;
    interfaceTask?: pulumi.Input<inputs.GetWorkflowTaskDefinitionInterfaceTaskArgs>;
    internalProperties?: pulumi.Input<inputs.GetWorkflowTaskDefinitionInternalPropertiesArgs>;
    label?: pulumi.Input<string>;
    licenseEntitlement?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nrVersion?: pulumi.Input<number>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetWorkflowTaskDefinitionParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetWorkflowTaskDefinitionPermissionResourceArgs>[]>;
    properties?: pulumi.Input<inputs.GetWorkflowTaskDefinitionPropertiesArgs>;
    rollbackTasks?: pulumi.Input<pulumi.Input<inputs.GetWorkflowTaskDefinitionRollbackTaskArgs>[]>;
    securePropAccess?: pulumi.Input<boolean>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetWorkflowTaskDefinitionTagArgs>[]>;
    taskMetadata?: pulumi.Input<inputs.GetWorkflowTaskDefinitionTaskMetadataArgs>;
    versionContext?: pulumi.Input<inputs.GetWorkflowTaskDefinitionVersionContextArgs>;
}
