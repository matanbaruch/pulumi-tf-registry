// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageEnclosureDiskSlotEp(args?: GetStorageEnclosureDiskSlotEpArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageEnclosureDiskSlotEpResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageEnclosureDiskSlotEp:getStorageEnclosureDiskSlotEp", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "drivePath": args.drivePath,
        "health": args.health,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "presence": args.presence,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "sharedScope": args.sharedScope,
        "slot": args.slot,
        "storageEnclosure": args.storageEnclosure,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageEnclosureDiskSlotEp.
 */
export interface GetStorageEnclosureDiskSlotEpArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageEnclosureDiskSlotEpAncestor[];
    classId?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    drivePath?: string;
    health?: string;
    id?: string;
    inventoryDeviceInfo?: inputs.GetStorageEnclosureDiskSlotEpInventoryDeviceInfo;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageEnclosureDiskSlotEpParent;
    permissionResources?: inputs.GetStorageEnclosureDiskSlotEpPermissionResource[];
    presence?: string;
    registeredDevice?: inputs.GetStorageEnclosureDiskSlotEpRegisteredDevice;
    rn?: string;
    sharedScope?: string;
    slot?: string;
    storageEnclosure?: inputs.GetStorageEnclosureDiskSlotEpStorageEnclosure;
    tags?: inputs.GetStorageEnclosureDiskSlotEpTag[];
    versionContext?: inputs.GetStorageEnclosureDiskSlotEpVersionContext;
}

/**
 * A collection of values returned by getStorageEnclosureDiskSlotEp.
 */
export interface GetStorageEnclosureDiskSlotEpResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageEnclosureDiskSlotEpAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly drivePath?: string;
    readonly health?: string;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetStorageEnclosureDiskSlotEpInventoryDeviceInfo;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageEnclosureDiskSlotEpParent;
    readonly permissionResources?: outputs.GetStorageEnclosureDiskSlotEpPermissionResource[];
    readonly presence?: string;
    readonly registeredDevice?: outputs.GetStorageEnclosureDiskSlotEpRegisteredDevice;
    readonly results: outputs.GetStorageEnclosureDiskSlotEpResult[];
    readonly rn?: string;
    readonly sharedScope?: string;
    readonly slot?: string;
    readonly storageEnclosure?: outputs.GetStorageEnclosureDiskSlotEpStorageEnclosure;
    readonly tags?: outputs.GetStorageEnclosureDiskSlotEpTag[];
    readonly versionContext?: outputs.GetStorageEnclosureDiskSlotEpVersionContext;
}
export function getStorageEnclosureDiskSlotEpOutput(args?: GetStorageEnclosureDiskSlotEpOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageEnclosureDiskSlotEpResult> {
    return pulumi.output(args).apply((a: any) => getStorageEnclosureDiskSlotEp(a, opts))
}

/**
 * A collection of arguments for invoking getStorageEnclosureDiskSlotEp.
 */
export interface GetStorageEnclosureDiskSlotEpOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageEnclosureDiskSlotEpAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    drivePath?: pulumi.Input<string>;
    health?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetStorageEnclosureDiskSlotEpInventoryDeviceInfoArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageEnclosureDiskSlotEpParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageEnclosureDiskSlotEpPermissionResourceArgs>[]>;
    presence?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetStorageEnclosureDiskSlotEpRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    slot?: pulumi.Input<string>;
    storageEnclosure?: pulumi.Input<inputs.GetStorageEnclosureDiskSlotEpStorageEnclosureArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageEnclosureDiskSlotEpTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetStorageEnclosureDiskSlotEpVersionContextArgs>;
}
