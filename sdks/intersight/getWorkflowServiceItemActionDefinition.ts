// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getWorkflowServiceItemActionDefinition(args?: GetWorkflowServiceItemActionDefinitionArgs, opts?: pulumi.InvokeOptions): Promise<GetWorkflowServiceItemActionDefinitionResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getWorkflowServiceItemActionDefinition:getWorkflowServiceItemActionDefinition", {
        "accountMoid": args.accountMoid,
        "actionProperties": args.actionProperties,
        "actionType": args.actionType,
        "additionalProperties": args.additionalProperties,
        "allowedInstanceStates": args.allowedInstanceStates,
        "ancestors": args.ancestors,
        "associatedRoles": args.associatedRoles,
        "attributeParameters": args.attributeParameters,
        "classId": args.classId,
        "coreWorkflows": args.coreWorkflows,
        "createTime": args.createTime,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "inputDefinitions": args.inputDefinitions,
        "label": args.label,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "periodicity": args.periodicity,
        "permissionResources": args.permissionResources,
        "postCoreWorkflows": args.postCoreWorkflows,
        "preCoreWorkflows": args.preCoreWorkflows,
        "restrictOnPrivateAppliance": args.restrictOnPrivateAppliance,
        "serviceItemDefinition": args.serviceItemDefinition,
        "sharedScope": args.sharedScope,
        "stopWorkflows": args.stopWorkflows,
        "tags": args.tags,
        "userIdOrEmail": args.userIdOrEmail,
        "validationInformation": args.validationInformation,
        "validationWorkflows": args.validationWorkflows,
        "versionContext": args.versionContext,
        "workflowDefinition": args.workflowDefinition,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getWorkflowServiceItemActionDefinition.
 */
export interface GetWorkflowServiceItemActionDefinitionArgs {
    accountMoid?: string;
    actionProperties?: inputs.GetWorkflowServiceItemActionDefinitionActionProperties;
    actionType?: string;
    additionalProperties?: string;
    allowedInstanceStates?: string[];
    ancestors?: inputs.GetWorkflowServiceItemActionDefinitionAncestor[];
    associatedRoles?: inputs.GetWorkflowServiceItemActionDefinitionAssociatedRole[];
    attributeParameters?: string;
    classId?: string;
    coreWorkflows?: inputs.GetWorkflowServiceItemActionDefinitionCoreWorkflow[];
    createTime?: string;
    description?: string;
    domainGroupMoid?: string;
    id?: string;
    inputDefinitions?: inputs.GetWorkflowServiceItemActionDefinitionInputDefinition[];
    label?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetWorkflowServiceItemActionDefinitionParent;
    periodicity?: number;
    permissionResources?: inputs.GetWorkflowServiceItemActionDefinitionPermissionResource[];
    postCoreWorkflows?: inputs.GetWorkflowServiceItemActionDefinitionPostCoreWorkflow[];
    preCoreWorkflows?: inputs.GetWorkflowServiceItemActionDefinitionPreCoreWorkflow[];
    restrictOnPrivateAppliance?: boolean;
    serviceItemDefinition?: inputs.GetWorkflowServiceItemActionDefinitionServiceItemDefinition;
    sharedScope?: string;
    stopWorkflows?: inputs.GetWorkflowServiceItemActionDefinitionStopWorkflow[];
    tags?: inputs.GetWorkflowServiceItemActionDefinitionTag[];
    userIdOrEmail?: string;
    validationInformation?: inputs.GetWorkflowServiceItemActionDefinitionValidationInformation;
    validationWorkflows?: inputs.GetWorkflowServiceItemActionDefinitionValidationWorkflow[];
    versionContext?: inputs.GetWorkflowServiceItemActionDefinitionVersionContext;
    workflowDefinition?: inputs.GetWorkflowServiceItemActionDefinitionWorkflowDefinition;
}

/**
 * A collection of values returned by getWorkflowServiceItemActionDefinition.
 */
export interface GetWorkflowServiceItemActionDefinitionResult {
    readonly accountMoid?: string;
    readonly actionProperties?: outputs.GetWorkflowServiceItemActionDefinitionActionProperties;
    readonly actionType?: string;
    readonly additionalProperties?: string;
    readonly allowedInstanceStates?: string[];
    readonly ancestors?: outputs.GetWorkflowServiceItemActionDefinitionAncestor[];
    readonly associatedRoles?: outputs.GetWorkflowServiceItemActionDefinitionAssociatedRole[];
    readonly attributeParameters?: string;
    readonly classId?: string;
    readonly coreWorkflows?: outputs.GetWorkflowServiceItemActionDefinitionCoreWorkflow[];
    readonly createTime?: string;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly inputDefinitions?: outputs.GetWorkflowServiceItemActionDefinitionInputDefinition[];
    readonly label?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetWorkflowServiceItemActionDefinitionParent;
    readonly periodicity?: number;
    readonly permissionResources?: outputs.GetWorkflowServiceItemActionDefinitionPermissionResource[];
    readonly postCoreWorkflows?: outputs.GetWorkflowServiceItemActionDefinitionPostCoreWorkflow[];
    readonly preCoreWorkflows?: outputs.GetWorkflowServiceItemActionDefinitionPreCoreWorkflow[];
    readonly restrictOnPrivateAppliance?: boolean;
    readonly results: outputs.GetWorkflowServiceItemActionDefinitionResult[];
    readonly serviceItemDefinition?: outputs.GetWorkflowServiceItemActionDefinitionServiceItemDefinition;
    readonly sharedScope?: string;
    readonly stopWorkflows?: outputs.GetWorkflowServiceItemActionDefinitionStopWorkflow[];
    readonly tags?: outputs.GetWorkflowServiceItemActionDefinitionTag[];
    readonly userIdOrEmail?: string;
    readonly validationInformation?: outputs.GetWorkflowServiceItemActionDefinitionValidationInformation;
    readonly validationWorkflows?: outputs.GetWorkflowServiceItemActionDefinitionValidationWorkflow[];
    readonly versionContext?: outputs.GetWorkflowServiceItemActionDefinitionVersionContext;
    readonly workflowDefinition?: outputs.GetWorkflowServiceItemActionDefinitionWorkflowDefinition;
}
export function getWorkflowServiceItemActionDefinitionOutput(args?: GetWorkflowServiceItemActionDefinitionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWorkflowServiceItemActionDefinitionResult> {
    return pulumi.output(args).apply((a: any) => getWorkflowServiceItemActionDefinition(a, opts))
}

/**
 * A collection of arguments for invoking getWorkflowServiceItemActionDefinition.
 */
export interface GetWorkflowServiceItemActionDefinitionOutputArgs {
    accountMoid?: pulumi.Input<string>;
    actionProperties?: pulumi.Input<inputs.GetWorkflowServiceItemActionDefinitionActionPropertiesArgs>;
    actionType?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    allowedInstanceStates?: pulumi.Input<pulumi.Input<string>[]>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetWorkflowServiceItemActionDefinitionAncestorArgs>[]>;
    associatedRoles?: pulumi.Input<pulumi.Input<inputs.GetWorkflowServiceItemActionDefinitionAssociatedRoleArgs>[]>;
    attributeParameters?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    coreWorkflows?: pulumi.Input<pulumi.Input<inputs.GetWorkflowServiceItemActionDefinitionCoreWorkflowArgs>[]>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    inputDefinitions?: pulumi.Input<pulumi.Input<inputs.GetWorkflowServiceItemActionDefinitionInputDefinitionArgs>[]>;
    label?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetWorkflowServiceItemActionDefinitionParentArgs>;
    periodicity?: pulumi.Input<number>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetWorkflowServiceItemActionDefinitionPermissionResourceArgs>[]>;
    postCoreWorkflows?: pulumi.Input<pulumi.Input<inputs.GetWorkflowServiceItemActionDefinitionPostCoreWorkflowArgs>[]>;
    preCoreWorkflows?: pulumi.Input<pulumi.Input<inputs.GetWorkflowServiceItemActionDefinitionPreCoreWorkflowArgs>[]>;
    restrictOnPrivateAppliance?: pulumi.Input<boolean>;
    serviceItemDefinition?: pulumi.Input<inputs.GetWorkflowServiceItemActionDefinitionServiceItemDefinitionArgs>;
    sharedScope?: pulumi.Input<string>;
    stopWorkflows?: pulumi.Input<pulumi.Input<inputs.GetWorkflowServiceItemActionDefinitionStopWorkflowArgs>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetWorkflowServiceItemActionDefinitionTagArgs>[]>;
    userIdOrEmail?: pulumi.Input<string>;
    validationInformation?: pulumi.Input<inputs.GetWorkflowServiceItemActionDefinitionValidationInformationArgs>;
    validationWorkflows?: pulumi.Input<pulumi.Input<inputs.GetWorkflowServiceItemActionDefinitionValidationWorkflowArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetWorkflowServiceItemActionDefinitionVersionContextArgs>;
    workflowDefinition?: pulumi.Input<inputs.GetWorkflowServiceItemActionDefinitionWorkflowDefinitionArgs>;
}
