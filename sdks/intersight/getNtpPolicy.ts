// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNtpPolicy(args?: GetNtpPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetNtpPolicyResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getNtpPolicy:getNtpPolicy", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "applianceAccount": args.applianceAccount,
        "authenticatedNtpServers": args.authenticatedNtpServers,
        "classId": args.classId,
        "createTime": args.createTime,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "enabled": args.enabled,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "ntpServers": args.ntpServers,
        "objectType": args.objectType,
        "organization": args.organization,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "profiles": args.profiles,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "timezone": args.timezone,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNtpPolicy.
 */
export interface GetNtpPolicyArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetNtpPolicyAncestor[];
    applianceAccount?: inputs.GetNtpPolicyApplianceAccount;
    authenticatedNtpServers?: inputs.GetNtpPolicyAuthenticatedNtpServer[];
    classId?: string;
    createTime?: string;
    description?: string;
    domainGroupMoid?: string;
    enabled?: boolean;
    id?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    ntpServers?: string[];
    objectType?: string;
    organization?: inputs.GetNtpPolicyOrganization;
    owners?: string[];
    parent?: inputs.GetNtpPolicyParent;
    permissionResources?: inputs.GetNtpPolicyPermissionResource[];
    profiles?: inputs.GetNtpPolicyProfile[];
    sharedScope?: string;
    tags?: inputs.GetNtpPolicyTag[];
    timezone?: string;
    versionContext?: inputs.GetNtpPolicyVersionContext;
}

/**
 * A collection of values returned by getNtpPolicy.
 */
export interface GetNtpPolicyResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetNtpPolicyAncestor[];
    readonly applianceAccount?: outputs.GetNtpPolicyApplianceAccount;
    readonly authenticatedNtpServers?: outputs.GetNtpPolicyAuthenticatedNtpServer[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly enabled?: boolean;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly ntpServers?: string[];
    readonly objectType?: string;
    readonly organization?: outputs.GetNtpPolicyOrganization;
    readonly owners?: string[];
    readonly parent?: outputs.GetNtpPolicyParent;
    readonly permissionResources?: outputs.GetNtpPolicyPermissionResource[];
    readonly profiles?: outputs.GetNtpPolicyProfile[];
    readonly results: outputs.GetNtpPolicyResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetNtpPolicyTag[];
    readonly timezone?: string;
    readonly versionContext?: outputs.GetNtpPolicyVersionContext;
}
export function getNtpPolicyOutput(args?: GetNtpPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNtpPolicyResult> {
    return pulumi.output(args).apply((a: any) => getNtpPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getNtpPolicy.
 */
export interface GetNtpPolicyOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetNtpPolicyAncestorArgs>[]>;
    applianceAccount?: pulumi.Input<inputs.GetNtpPolicyApplianceAccountArgs>;
    authenticatedNtpServers?: pulumi.Input<pulumi.Input<inputs.GetNtpPolicyAuthenticatedNtpServerArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
    objectType?: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.GetNtpPolicyOrganizationArgs>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetNtpPolicyParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetNtpPolicyPermissionResourceArgs>[]>;
    profiles?: pulumi.Input<pulumi.Input<inputs.GetNtpPolicyProfileArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetNtpPolicyTagArgs>[]>;
    timezone?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetNtpPolicyVersionContextArgs>;
}
