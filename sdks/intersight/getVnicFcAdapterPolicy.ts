// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVnicFcAdapterPolicy(args?: GetVnicFcAdapterPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetVnicFcAdapterPolicyResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getVnicFcAdapterPolicy:getVnicFcAdapterPolicy", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "errorDetectionTimeout": args.errorDetectionTimeout,
        "errorRecoverySettings": args.errorRecoverySettings,
        "flogiSettings": args.flogiSettings,
        "id": args.id,
        "interruptSettings": args.interruptSettings,
        "ioThrottleCount": args.ioThrottleCount,
        "lunCount": args.lunCount,
        "lunQueueDepth": args.lunQueueDepth,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "organization": args.organization,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "plogiSettings": args.plogiSettings,
        "resourceAllocationTimeout": args.resourceAllocationTimeout,
        "rxQueueSettings": args.rxQueueSettings,
        "scsiQueueSettings": args.scsiQueueSettings,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "txQueueSettings": args.txQueueSettings,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVnicFcAdapterPolicy.
 */
export interface GetVnicFcAdapterPolicyArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetVnicFcAdapterPolicyAncestor[];
    classId?: string;
    createTime?: string;
    description?: string;
    domainGroupMoid?: string;
    errorDetectionTimeout?: number;
    errorRecoverySettings?: inputs.GetVnicFcAdapterPolicyErrorRecoverySettings;
    flogiSettings?: inputs.GetVnicFcAdapterPolicyFlogiSettings;
    id?: string;
    interruptSettings?: inputs.GetVnicFcAdapterPolicyInterruptSettings;
    ioThrottleCount?: number;
    lunCount?: number;
    lunQueueDepth?: number;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    organization?: inputs.GetVnicFcAdapterPolicyOrganization;
    owners?: string[];
    parent?: inputs.GetVnicFcAdapterPolicyParent;
    permissionResources?: inputs.GetVnicFcAdapterPolicyPermissionResource[];
    plogiSettings?: inputs.GetVnicFcAdapterPolicyPlogiSettings;
    resourceAllocationTimeout?: number;
    rxQueueSettings?: inputs.GetVnicFcAdapterPolicyRxQueueSettings;
    scsiQueueSettings?: inputs.GetVnicFcAdapterPolicyScsiQueueSettings;
    sharedScope?: string;
    tags?: inputs.GetVnicFcAdapterPolicyTag[];
    txQueueSettings?: inputs.GetVnicFcAdapterPolicyTxQueueSettings;
    versionContext?: inputs.GetVnicFcAdapterPolicyVersionContext;
}

/**
 * A collection of values returned by getVnicFcAdapterPolicy.
 */
export interface GetVnicFcAdapterPolicyResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetVnicFcAdapterPolicyAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly errorDetectionTimeout?: number;
    readonly errorRecoverySettings?: outputs.GetVnicFcAdapterPolicyErrorRecoverySettings;
    readonly flogiSettings?: outputs.GetVnicFcAdapterPolicyFlogiSettings;
    readonly id: string;
    readonly interruptSettings?: outputs.GetVnicFcAdapterPolicyInterruptSettings;
    readonly ioThrottleCount?: number;
    readonly lunCount?: number;
    readonly lunQueueDepth?: number;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly organization?: outputs.GetVnicFcAdapterPolicyOrganization;
    readonly owners?: string[];
    readonly parent?: outputs.GetVnicFcAdapterPolicyParent;
    readonly permissionResources?: outputs.GetVnicFcAdapterPolicyPermissionResource[];
    readonly plogiSettings?: outputs.GetVnicFcAdapterPolicyPlogiSettings;
    readonly resourceAllocationTimeout?: number;
    readonly results: outputs.GetVnicFcAdapterPolicyResult[];
    readonly rxQueueSettings?: outputs.GetVnicFcAdapterPolicyRxQueueSettings;
    readonly scsiQueueSettings?: outputs.GetVnicFcAdapterPolicyScsiQueueSettings;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetVnicFcAdapterPolicyTag[];
    readonly txQueueSettings?: outputs.GetVnicFcAdapterPolicyTxQueueSettings;
    readonly versionContext?: outputs.GetVnicFcAdapterPolicyVersionContext;
}
export function getVnicFcAdapterPolicyOutput(args?: GetVnicFcAdapterPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVnicFcAdapterPolicyResult> {
    return pulumi.output(args).apply((a: any) => getVnicFcAdapterPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getVnicFcAdapterPolicy.
 */
export interface GetVnicFcAdapterPolicyOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetVnicFcAdapterPolicyAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    errorDetectionTimeout?: pulumi.Input<number>;
    errorRecoverySettings?: pulumi.Input<inputs.GetVnicFcAdapterPolicyErrorRecoverySettingsArgs>;
    flogiSettings?: pulumi.Input<inputs.GetVnicFcAdapterPolicyFlogiSettingsArgs>;
    id?: pulumi.Input<string>;
    interruptSettings?: pulumi.Input<inputs.GetVnicFcAdapterPolicyInterruptSettingsArgs>;
    ioThrottleCount?: pulumi.Input<number>;
    lunCount?: pulumi.Input<number>;
    lunQueueDepth?: pulumi.Input<number>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.GetVnicFcAdapterPolicyOrganizationArgs>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetVnicFcAdapterPolicyParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetVnicFcAdapterPolicyPermissionResourceArgs>[]>;
    plogiSettings?: pulumi.Input<inputs.GetVnicFcAdapterPolicyPlogiSettingsArgs>;
    resourceAllocationTimeout?: pulumi.Input<number>;
    rxQueueSettings?: pulumi.Input<inputs.GetVnicFcAdapterPolicyRxQueueSettingsArgs>;
    scsiQueueSettings?: pulumi.Input<inputs.GetVnicFcAdapterPolicyScsiQueueSettingsArgs>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetVnicFcAdapterPolicyTagArgs>[]>;
    txQueueSettings?: pulumi.Input<inputs.GetVnicFcAdapterPolicyTxQueueSettingsArgs>;
    versionContext?: pulumi.Input<inputs.GetVnicFcAdapterPolicyVersionContextArgs>;
}
