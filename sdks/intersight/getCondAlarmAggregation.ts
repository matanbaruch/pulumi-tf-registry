// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCondAlarmAggregation(args?: GetCondAlarmAggregationArgs, opts?: pulumi.InvokeOptions): Promise<GetCondAlarmAggregationResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getCondAlarmAggregation:getCondAlarmAggregation", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "alarmAggregationSource": args.alarmAggregationSource,
        "alarmSummary": args.alarmSummary,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "criticalAlarmsCount": args.criticalAlarmsCount,
        "domainGroupMoid": args.domainGroupMoid,
        "health": args.health,
        "id": args.id,
        "infoAlarmsCount": args.infoAlarmsCount,
        "moType": args.moType,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
        "warningAlarmsCount": args.warningAlarmsCount,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCondAlarmAggregation.
 */
export interface GetCondAlarmAggregationArgs {
    accountMoid?: string;
    additionalProperties?: string;
    alarmAggregationSource?: inputs.GetCondAlarmAggregationAlarmAggregationSource;
    alarmSummary?: inputs.GetCondAlarmAggregationAlarmSummary;
    ancestors?: inputs.GetCondAlarmAggregationAncestor[];
    classId?: string;
    createTime?: string;
    criticalAlarmsCount?: number;
    domainGroupMoid?: string;
    health?: string;
    id?: string;
    infoAlarmsCount?: number;
    moType?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetCondAlarmAggregationParent;
    permissionResources?: inputs.GetCondAlarmAggregationPermissionResource[];
    sharedScope?: string;
    tags?: inputs.GetCondAlarmAggregationTag[];
    versionContext?: inputs.GetCondAlarmAggregationVersionContext;
    warningAlarmsCount?: number;
}

/**
 * A collection of values returned by getCondAlarmAggregation.
 */
export interface GetCondAlarmAggregationResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly alarmAggregationSource?: outputs.GetCondAlarmAggregationAlarmAggregationSource;
    readonly alarmSummary?: outputs.GetCondAlarmAggregationAlarmSummary;
    readonly ancestors?: outputs.GetCondAlarmAggregationAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly criticalAlarmsCount?: number;
    readonly domainGroupMoid?: string;
    readonly health?: string;
    readonly id: string;
    readonly infoAlarmsCount?: number;
    readonly moType?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetCondAlarmAggregationParent;
    readonly permissionResources?: outputs.GetCondAlarmAggregationPermissionResource[];
    readonly results: outputs.GetCondAlarmAggregationResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetCondAlarmAggregationTag[];
    readonly versionContext?: outputs.GetCondAlarmAggregationVersionContext;
    readonly warningAlarmsCount?: number;
}
export function getCondAlarmAggregationOutput(args?: GetCondAlarmAggregationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCondAlarmAggregationResult> {
    return pulumi.output(args).apply((a: any) => getCondAlarmAggregation(a, opts))
}

/**
 * A collection of arguments for invoking getCondAlarmAggregation.
 */
export interface GetCondAlarmAggregationOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    alarmAggregationSource?: pulumi.Input<inputs.GetCondAlarmAggregationAlarmAggregationSourceArgs>;
    alarmSummary?: pulumi.Input<inputs.GetCondAlarmAggregationAlarmSummaryArgs>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetCondAlarmAggregationAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    criticalAlarmsCount?: pulumi.Input<number>;
    domainGroupMoid?: pulumi.Input<string>;
    health?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    infoAlarmsCount?: pulumi.Input<number>;
    moType?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetCondAlarmAggregationParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetCondAlarmAggregationPermissionResourceArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetCondAlarmAggregationTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetCondAlarmAggregationVersionContextArgs>;
    warningAlarmsCount?: pulumi.Input<number>;
}
