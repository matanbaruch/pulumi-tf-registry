// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVirtualizationVmwareVirtualMachineGpu(args?: GetVirtualizationVmwareVirtualMachineGpuArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualizationVmwareVirtualMachineGpuResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getVirtualizationVmwareVirtualMachineGpu:getVirtualizationVmwareVirtualMachineGpu", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "backingPciDevice": args.backingPciDevice,
        "backingPciId": args.backingPciId,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "key": args.key,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "passthrough": args.passthrough,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
        "virtualMachine": args.virtualMachine,
        "vmIdentity": args.vmIdentity,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareVirtualMachineGpu.
 */
export interface GetVirtualizationVmwareVirtualMachineGpuArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetVirtualizationVmwareVirtualMachineGpuAncestor[];
    backingPciDevice?: inputs.GetVirtualizationVmwareVirtualMachineGpuBackingPciDevice;
    backingPciId?: string;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    id?: string;
    key?: number;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetVirtualizationVmwareVirtualMachineGpuParent;
    passthrough?: boolean;
    permissionResources?: inputs.GetVirtualizationVmwareVirtualMachineGpuPermissionResource[];
    registeredDevice?: inputs.GetVirtualizationVmwareVirtualMachineGpuRegisteredDevice;
    sharedScope?: string;
    tags?: inputs.GetVirtualizationVmwareVirtualMachineGpuTag[];
    versionContext?: inputs.GetVirtualizationVmwareVirtualMachineGpuVersionContext;
    virtualMachine?: inputs.GetVirtualizationVmwareVirtualMachineGpuVirtualMachine;
    vmIdentity?: string;
}

/**
 * A collection of values returned by getVirtualizationVmwareVirtualMachineGpu.
 */
export interface GetVirtualizationVmwareVirtualMachineGpuResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetVirtualizationVmwareVirtualMachineGpuAncestor[];
    readonly backingPciDevice?: outputs.GetVirtualizationVmwareVirtualMachineGpuBackingPciDevice;
    readonly backingPciId?: string;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly key?: number;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetVirtualizationVmwareVirtualMachineGpuParent;
    readonly passthrough?: boolean;
    readonly permissionResources?: outputs.GetVirtualizationVmwareVirtualMachineGpuPermissionResource[];
    readonly registeredDevice?: outputs.GetVirtualizationVmwareVirtualMachineGpuRegisteredDevice;
    readonly results: outputs.GetVirtualizationVmwareVirtualMachineGpuResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetVirtualizationVmwareVirtualMachineGpuTag[];
    readonly versionContext?: outputs.GetVirtualizationVmwareVirtualMachineGpuVersionContext;
    readonly virtualMachine?: outputs.GetVirtualizationVmwareVirtualMachineGpuVirtualMachine;
    readonly vmIdentity?: string;
}
export function getVirtualizationVmwareVirtualMachineGpuOutput(args?: GetVirtualizationVmwareVirtualMachineGpuOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualizationVmwareVirtualMachineGpuResult> {
    return pulumi.output(args).apply((a: any) => getVirtualizationVmwareVirtualMachineGpu(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareVirtualMachineGpu.
 */
export interface GetVirtualizationVmwareVirtualMachineGpuOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineGpuAncestorArgs>[]>;
    backingPciDevice?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineGpuBackingPciDeviceArgs>;
    backingPciId?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    key?: pulumi.Input<number>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineGpuParentArgs>;
    passthrough?: pulumi.Input<boolean>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineGpuPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineGpuRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineGpuTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineGpuVersionContextArgs>;
    virtualMachine?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualMachineGpuVirtualMachineArgs>;
    vmIdentity?: pulumi.Input<string>;
}
