// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIamLdapPolicy(args?: GetIamLdapPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetIamLdapPolicyResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getIamLdapPolicy:getIamLdapPolicy", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "applianceAccount": args.applianceAccount,
        "baseProperties": args.baseProperties,
        "classId": args.classId,
        "createTime": args.createTime,
        "description": args.description,
        "dnsParameters": args.dnsParameters,
        "domainGroupMoid": args.domainGroupMoid,
        "enableDns": args.enableDns,
        "enabled": args.enabled,
        "groups": args.groups,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "nrProviders": args.nrProviders,
        "objectType": args.objectType,
        "organization": args.organization,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "profiles": args.profiles,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "userSearchPrecedence": args.userSearchPrecedence,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIamLdapPolicy.
 */
export interface GetIamLdapPolicyArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetIamLdapPolicyAncestor[];
    applianceAccount?: inputs.GetIamLdapPolicyApplianceAccount;
    baseProperties?: inputs.GetIamLdapPolicyBaseProperties;
    classId?: string;
    createTime?: string;
    description?: string;
    dnsParameters?: inputs.GetIamLdapPolicyDnsParameters;
    domainGroupMoid?: string;
    enableDns?: boolean;
    enabled?: boolean;
    groups?: inputs.GetIamLdapPolicyGroup[];
    id?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    nrProviders?: inputs.GetIamLdapPolicyNrProvider[];
    objectType?: string;
    organization?: inputs.GetIamLdapPolicyOrganization;
    owners?: string[];
    parent?: inputs.GetIamLdapPolicyParent;
    permissionResources?: inputs.GetIamLdapPolicyPermissionResource[];
    profiles?: inputs.GetIamLdapPolicyProfile[];
    sharedScope?: string;
    tags?: inputs.GetIamLdapPolicyTag[];
    userSearchPrecedence?: string;
    versionContext?: inputs.GetIamLdapPolicyVersionContext;
}

/**
 * A collection of values returned by getIamLdapPolicy.
 */
export interface GetIamLdapPolicyResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetIamLdapPolicyAncestor[];
    readonly applianceAccount?: outputs.GetIamLdapPolicyApplianceAccount;
    readonly baseProperties?: outputs.GetIamLdapPolicyBaseProperties;
    readonly classId?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly dnsParameters?: outputs.GetIamLdapPolicyDnsParameters;
    readonly domainGroupMoid?: string;
    readonly enableDns?: boolean;
    readonly enabled?: boolean;
    readonly groups?: outputs.GetIamLdapPolicyGroup[];
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nrProviders?: outputs.GetIamLdapPolicyNrProvider[];
    readonly objectType?: string;
    readonly organization?: outputs.GetIamLdapPolicyOrganization;
    readonly owners?: string[];
    readonly parent?: outputs.GetIamLdapPolicyParent;
    readonly permissionResources?: outputs.GetIamLdapPolicyPermissionResource[];
    readonly profiles?: outputs.GetIamLdapPolicyProfile[];
    readonly results: outputs.GetIamLdapPolicyResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetIamLdapPolicyTag[];
    readonly userSearchPrecedence?: string;
    readonly versionContext?: outputs.GetIamLdapPolicyVersionContext;
}
export function getIamLdapPolicyOutput(args?: GetIamLdapPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIamLdapPolicyResult> {
    return pulumi.output(args).apply((a: any) => getIamLdapPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getIamLdapPolicy.
 */
export interface GetIamLdapPolicyOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetIamLdapPolicyAncestorArgs>[]>;
    applianceAccount?: pulumi.Input<inputs.GetIamLdapPolicyApplianceAccountArgs>;
    baseProperties?: pulumi.Input<inputs.GetIamLdapPolicyBasePropertiesArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dnsParameters?: pulumi.Input<inputs.GetIamLdapPolicyDnsParametersArgs>;
    domainGroupMoid?: pulumi.Input<string>;
    enableDns?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    groups?: pulumi.Input<pulumi.Input<inputs.GetIamLdapPolicyGroupArgs>[]>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nrProviders?: pulumi.Input<pulumi.Input<inputs.GetIamLdapPolicyNrProviderArgs>[]>;
    objectType?: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.GetIamLdapPolicyOrganizationArgs>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetIamLdapPolicyParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetIamLdapPolicyPermissionResourceArgs>[]>;
    profiles?: pulumi.Input<pulumi.Input<inputs.GetIamLdapPolicyProfileArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetIamLdapPolicyTagArgs>[]>;
    userSearchPrecedence?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetIamLdapPolicyVersionContextArgs>;
}
