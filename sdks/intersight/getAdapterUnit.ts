// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAdapterUnit(args?: GetAdapterUnitArgs, opts?: pulumi.InvokeOptions): Promise<GetAdapterUnitResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getAdapterUnit:getAdapterUnit", {
        "accountMoid": args.accountMoid,
        "adapterId": args.adapterId,
        "adapterUnitExpander": args.adapterUnitExpander,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "baseMacAddress": args.baseMacAddress,
        "classId": args.classId,
        "computeBlade": args.computeBlade,
        "computeRackUnit": args.computeRackUnit,
        "connectionStatus": args.connectionStatus,
        "controller": args.controller,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "extEthIfs": args.extEthIfs,
        "hostEthIfs": args.hostEthIfs,
        "hostFcIfs": args.hostFcIfs,
        "hostIscsiIfs": args.hostIscsiIfs,
        "id": args.id,
        "integrated": args.integrated,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "isUpgraded": args.isUpgraded,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "objectType": args.objectType,
        "operReasons": args.operReasons,
        "operState": args.operState,
        "operability": args.operability,
        "owners": args.owners,
        "parent": args.parent,
        "partNumber": args.partNumber,
        "pciSlot": args.pciSlot,
        "permissionResources": args.permissionResources,
        "power": args.power,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "registeredDevice": args.registeredDevice,
        "revision": args.revision,
        "rn": args.rn,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "thermal": args.thermal,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
        "vicCommunicable": args.vicCommunicable,
        "vid": args.vid,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAdapterUnit.
 */
export interface GetAdapterUnitArgs {
    accountMoid?: string;
    adapterId?: string;
    adapterUnitExpander?: inputs.GetAdapterUnitAdapterUnitExpander;
    additionalProperties?: string;
    ancestors?: inputs.GetAdapterUnitAncestor[];
    baseMacAddress?: string;
    classId?: string;
    computeBlade?: inputs.GetAdapterUnitComputeBlade;
    computeRackUnit?: inputs.GetAdapterUnitComputeRackUnit;
    connectionStatus?: string;
    controller?: inputs.GetAdapterUnitController;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    extEthIfs?: inputs.GetAdapterUnitExtEthIf[];
    hostEthIfs?: inputs.GetAdapterUnitHostEthIf[];
    hostFcIfs?: inputs.GetAdapterUnitHostFcIf[];
    hostIscsiIfs?: inputs.GetAdapterUnitHostIscsiIf[];
    id?: string;
    integrated?: string;
    inventoryDeviceInfo?: inputs.GetAdapterUnitInventoryDeviceInfo;
    isUpgraded?: boolean;
    modTime?: string;
    model?: string;
    moid?: string;
    objectType?: string;
    operReasons?: string[];
    operState?: string;
    operability?: string;
    owners?: string[];
    parent?: inputs.GetAdapterUnitParent;
    partNumber?: string;
    pciSlot?: string;
    permissionResources?: inputs.GetAdapterUnitPermissionResource[];
    power?: string;
    presence?: string;
    previousFru?: inputs.GetAdapterUnitPreviousFru;
    registeredDevice?: inputs.GetAdapterUnitRegisteredDevice;
    revision?: string;
    rn?: string;
    serial?: string;
    sharedScope?: string;
    tags?: inputs.GetAdapterUnitTag[];
    thermal?: string;
    vendor?: string;
    versionContext?: inputs.GetAdapterUnitVersionContext;
    vicCommunicable?: string;
    vid?: string;
}

/**
 * A collection of values returned by getAdapterUnit.
 */
export interface GetAdapterUnitResult {
    readonly accountMoid?: string;
    readonly adapterId?: string;
    readonly adapterUnitExpander?: outputs.GetAdapterUnitAdapterUnitExpander;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetAdapterUnitAncestor[];
    readonly baseMacAddress?: string;
    readonly classId?: string;
    readonly computeBlade?: outputs.GetAdapterUnitComputeBlade;
    readonly computeRackUnit?: outputs.GetAdapterUnitComputeRackUnit;
    readonly connectionStatus?: string;
    readonly controller?: outputs.GetAdapterUnitController;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly extEthIfs?: outputs.GetAdapterUnitExtEthIf[];
    readonly hostEthIfs?: outputs.GetAdapterUnitHostEthIf[];
    readonly hostFcIfs?: outputs.GetAdapterUnitHostFcIf[];
    readonly hostIscsiIfs?: outputs.GetAdapterUnitHostIscsiIf[];
    readonly id: string;
    readonly integrated?: string;
    readonly inventoryDeviceInfo?: outputs.GetAdapterUnitInventoryDeviceInfo;
    readonly isUpgraded?: boolean;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly operReasons?: string[];
    readonly operState?: string;
    readonly operability?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetAdapterUnitParent;
    readonly partNumber?: string;
    readonly pciSlot?: string;
    readonly permissionResources?: outputs.GetAdapterUnitPermissionResource[];
    readonly power?: string;
    readonly presence?: string;
    readonly previousFru?: outputs.GetAdapterUnitPreviousFru;
    readonly registeredDevice?: outputs.GetAdapterUnitRegisteredDevice;
    readonly results: outputs.GetAdapterUnitResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetAdapterUnitTag[];
    readonly thermal?: string;
    readonly vendor?: string;
    readonly versionContext?: outputs.GetAdapterUnitVersionContext;
    readonly vicCommunicable?: string;
    readonly vid?: string;
}
export function getAdapterUnitOutput(args?: GetAdapterUnitOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAdapterUnitResult> {
    return pulumi.output(args).apply((a: any) => getAdapterUnit(a, opts))
}

/**
 * A collection of arguments for invoking getAdapterUnit.
 */
export interface GetAdapterUnitOutputArgs {
    accountMoid?: pulumi.Input<string>;
    adapterId?: pulumi.Input<string>;
    adapterUnitExpander?: pulumi.Input<inputs.GetAdapterUnitAdapterUnitExpanderArgs>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetAdapterUnitAncestorArgs>[]>;
    baseMacAddress?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    computeBlade?: pulumi.Input<inputs.GetAdapterUnitComputeBladeArgs>;
    computeRackUnit?: pulumi.Input<inputs.GetAdapterUnitComputeRackUnitArgs>;
    connectionStatus?: pulumi.Input<string>;
    controller?: pulumi.Input<inputs.GetAdapterUnitControllerArgs>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    extEthIfs?: pulumi.Input<pulumi.Input<inputs.GetAdapterUnitExtEthIfArgs>[]>;
    hostEthIfs?: pulumi.Input<pulumi.Input<inputs.GetAdapterUnitHostEthIfArgs>[]>;
    hostFcIfs?: pulumi.Input<pulumi.Input<inputs.GetAdapterUnitHostFcIfArgs>[]>;
    hostIscsiIfs?: pulumi.Input<pulumi.Input<inputs.GetAdapterUnitHostIscsiIfArgs>[]>;
    id?: pulumi.Input<string>;
    integrated?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetAdapterUnitInventoryDeviceInfoArgs>;
    isUpgraded?: pulumi.Input<boolean>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operReasons?: pulumi.Input<pulumi.Input<string>[]>;
    operState?: pulumi.Input<string>;
    operability?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetAdapterUnitParentArgs>;
    partNumber?: pulumi.Input<string>;
    pciSlot?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetAdapterUnitPermissionResourceArgs>[]>;
    power?: pulumi.Input<string>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetAdapterUnitPreviousFruArgs>;
    registeredDevice?: pulumi.Input<inputs.GetAdapterUnitRegisteredDeviceArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetAdapterUnitTagArgs>[]>;
    thermal?: pulumi.Input<string>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetAdapterUnitVersionContextArgs>;
    vicCommunicable?: pulumi.Input<string>;
    vid?: pulumi.Input<string>;
}
