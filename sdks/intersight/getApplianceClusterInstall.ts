// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getApplianceClusterInstall(args?: GetApplianceClusterInstallArgs, opts?: pulumi.InvokeOptions): Promise<GetApplianceClusterInstallResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getApplianceClusterInstall:getApplianceClusterInstall", {
        "account": args.account,
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "completedPhases": args.completedPhases,
        "createTime": args.createTime,
        "currentPhase": args.currentPhase,
        "domainGroupMoid": args.domainGroupMoid,
        "elapsedTime": args.elapsedTime,
        "endTime": args.endTime,
        "errorCode": args.errorCode,
        "id": args.id,
        "messages": args.messages,
        "modTime": args.modTime,
        "moid": args.moid,
        "nodeInfos": args.nodeInfos,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "remoteDns": args.remoteDns,
        "sharedScope": args.sharedScope,
        "startTime": args.startTime,
        "status": args.status,
        "tags": args.tags,
        "totalNodes": args.totalNodes,
        "totalPhases": args.totalPhases,
        "versionContext": args.versionContext,
        "vip": args.vip,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getApplianceClusterInstall.
 */
export interface GetApplianceClusterInstallArgs {
    account?: inputs.GetApplianceClusterInstallAccount;
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetApplianceClusterInstallAncestor[];
    classId?: string;
    completedPhases?: inputs.GetApplianceClusterInstallCompletedPhase[];
    createTime?: string;
    currentPhase?: inputs.GetApplianceClusterInstallCurrentPhase;
    domainGroupMoid?: string;
    elapsedTime?: number;
    endTime?: string;
    errorCode?: number;
    id?: string;
    messages?: string[];
    modTime?: string;
    moid?: string;
    nodeInfos?: inputs.GetApplianceClusterInstallNodeInfo[];
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetApplianceClusterInstallParent;
    permissionResources?: inputs.GetApplianceClusterInstallPermissionResource[];
    remoteDns?: string;
    sharedScope?: string;
    startTime?: string;
    status?: string;
    tags?: inputs.GetApplianceClusterInstallTag[];
    totalNodes?: number;
    totalPhases?: number;
    versionContext?: inputs.GetApplianceClusterInstallVersionContext;
    vip?: inputs.GetApplianceClusterInstallVip;
}

/**
 * A collection of values returned by getApplianceClusterInstall.
 */
export interface GetApplianceClusterInstallResult {
    readonly account?: outputs.GetApplianceClusterInstallAccount;
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetApplianceClusterInstallAncestor[];
    readonly classId?: string;
    readonly completedPhases?: outputs.GetApplianceClusterInstallCompletedPhase[];
    readonly createTime?: string;
    readonly currentPhase?: outputs.GetApplianceClusterInstallCurrentPhase;
    readonly domainGroupMoid?: string;
    readonly elapsedTime?: number;
    readonly endTime?: string;
    readonly errorCode?: number;
    readonly id: string;
    readonly messages?: string[];
    readonly modTime?: string;
    readonly moid?: string;
    readonly nodeInfos?: outputs.GetApplianceClusterInstallNodeInfo[];
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetApplianceClusterInstallParent;
    readonly permissionResources?: outputs.GetApplianceClusterInstallPermissionResource[];
    readonly remoteDns?: string;
    readonly results: outputs.GetApplianceClusterInstallResult[];
    readonly sharedScope?: string;
    readonly startTime?: string;
    readonly status?: string;
    readonly tags?: outputs.GetApplianceClusterInstallTag[];
    readonly totalNodes?: number;
    readonly totalPhases?: number;
    readonly versionContext?: outputs.GetApplianceClusterInstallVersionContext;
    readonly vip?: outputs.GetApplianceClusterInstallVip;
}
export function getApplianceClusterInstallOutput(args?: GetApplianceClusterInstallOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetApplianceClusterInstallResult> {
    return pulumi.output(args).apply((a: any) => getApplianceClusterInstall(a, opts))
}

/**
 * A collection of arguments for invoking getApplianceClusterInstall.
 */
export interface GetApplianceClusterInstallOutputArgs {
    account?: pulumi.Input<inputs.GetApplianceClusterInstallAccountArgs>;
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetApplianceClusterInstallAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    completedPhases?: pulumi.Input<pulumi.Input<inputs.GetApplianceClusterInstallCompletedPhaseArgs>[]>;
    createTime?: pulumi.Input<string>;
    currentPhase?: pulumi.Input<inputs.GetApplianceClusterInstallCurrentPhaseArgs>;
    domainGroupMoid?: pulumi.Input<string>;
    elapsedTime?: pulumi.Input<number>;
    endTime?: pulumi.Input<string>;
    errorCode?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    messages?: pulumi.Input<pulumi.Input<string>[]>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    nodeInfos?: pulumi.Input<pulumi.Input<inputs.GetApplianceClusterInstallNodeInfoArgs>[]>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetApplianceClusterInstallParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetApplianceClusterInstallPermissionResourceArgs>[]>;
    remoteDns?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetApplianceClusterInstallTagArgs>[]>;
    totalNodes?: pulumi.Input<number>;
    totalPhases?: pulumi.Input<number>;
    versionContext?: pulumi.Input<inputs.GetApplianceClusterInstallVersionContextArgs>;
    vip?: pulumi.Input<inputs.GetApplianceClusterInstallVipArgs>;
}
