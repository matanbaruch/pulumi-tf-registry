// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIamOAuthToken(args?: GetIamOAuthTokenArgs, opts?: pulumi.InvokeOptions): Promise<GetIamOAuthTokenResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getIamOAuthToken:getIamOAuthToken", {
        "accessExpirationTime": args.accessExpirationTime,
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "appRegistration": args.appRegistration,
        "classId": args.classId,
        "clientId": args.clientId,
        "clientIpAddress": args.clientIpAddress,
        "clientName": args.clientName,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "expirationTime": args.expirationTime,
        "id": args.id,
        "lastLoginClient": args.lastLoginClient,
        "lastLoginTime": args.lastLoginTime,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permission": args.permission,
        "permissionResources": args.permissionResources,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "tokenId": args.tokenId,
        "user": args.user,
        "userMeta": args.userMeta,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIamOAuthToken.
 */
export interface GetIamOAuthTokenArgs {
    accessExpirationTime?: string;
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetIamOAuthTokenAncestor[];
    appRegistration?: inputs.GetIamOAuthTokenAppRegistration;
    classId?: string;
    clientId?: string;
    clientIpAddress?: string;
    clientName?: string;
    createTime?: string;
    domainGroupMoid?: string;
    expirationTime?: string;
    id?: string;
    lastLoginClient?: string;
    lastLoginTime?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetIamOAuthTokenParent;
    permission?: inputs.GetIamOAuthTokenPermission;
    permissionResources?: inputs.GetIamOAuthTokenPermissionResource[];
    sharedScope?: string;
    tags?: inputs.GetIamOAuthTokenTag[];
    tokenId?: string;
    user?: inputs.GetIamOAuthTokenUser;
    userMeta?: inputs.GetIamOAuthTokenUserMeta;
    versionContext?: inputs.GetIamOAuthTokenVersionContext;
}

/**
 * A collection of values returned by getIamOAuthToken.
 */
export interface GetIamOAuthTokenResult {
    readonly accessExpirationTime?: string;
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetIamOAuthTokenAncestor[];
    readonly appRegistration?: outputs.GetIamOAuthTokenAppRegistration;
    readonly classId?: string;
    readonly clientId?: string;
    readonly clientIpAddress?: string;
    readonly clientName?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly expirationTime?: string;
    readonly id: string;
    readonly lastLoginClient?: string;
    readonly lastLoginTime?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetIamOAuthTokenParent;
    readonly permission?: outputs.GetIamOAuthTokenPermission;
    readonly permissionResources?: outputs.GetIamOAuthTokenPermissionResource[];
    readonly results: outputs.GetIamOAuthTokenResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetIamOAuthTokenTag[];
    readonly tokenId?: string;
    readonly user?: outputs.GetIamOAuthTokenUser;
    readonly userMeta?: outputs.GetIamOAuthTokenUserMeta;
    readonly versionContext?: outputs.GetIamOAuthTokenVersionContext;
}
export function getIamOAuthTokenOutput(args?: GetIamOAuthTokenOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIamOAuthTokenResult> {
    return pulumi.output(args).apply((a: any) => getIamOAuthToken(a, opts))
}

/**
 * A collection of arguments for invoking getIamOAuthToken.
 */
export interface GetIamOAuthTokenOutputArgs {
    accessExpirationTime?: pulumi.Input<string>;
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetIamOAuthTokenAncestorArgs>[]>;
    appRegistration?: pulumi.Input<inputs.GetIamOAuthTokenAppRegistrationArgs>;
    classId?: pulumi.Input<string>;
    clientId?: pulumi.Input<string>;
    clientIpAddress?: pulumi.Input<string>;
    clientName?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    expirationTime?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    lastLoginClient?: pulumi.Input<string>;
    lastLoginTime?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetIamOAuthTokenParentArgs>;
    permission?: pulumi.Input<inputs.GetIamOAuthTokenPermissionArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetIamOAuthTokenPermissionResourceArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetIamOAuthTokenTagArgs>[]>;
    tokenId?: pulumi.Input<string>;
    user?: pulumi.Input<inputs.GetIamOAuthTokenUserArgs>;
    userMeta?: pulumi.Input<inputs.GetIamOAuthTokenUserMetaArgs>;
    versionContext?: pulumi.Input<inputs.GetIamOAuthTokenVersionContextArgs>;
}
