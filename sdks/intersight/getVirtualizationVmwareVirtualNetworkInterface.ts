// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVirtualizationVmwareVirtualNetworkInterface(args?: GetVirtualizationVmwareVirtualNetworkInterfaceArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualizationVmwareVirtualNetworkInterfaceResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getVirtualizationVmwareVirtualNetworkInterface:getVirtualizationVmwareVirtualNetworkInterface", {
        "accountMoid": args.accountMoid,
        "adapterType": args.adapterType,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "connectAtPowerOn": args.connectAtPowerOn,
        "connected": args.connected,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "key": args.key,
        "macAddress": args.macAddress,
        "macAddressType": args.macAddressType,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "network": args.network,
        "networkType": args.networkType,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
        "virtualMachine": args.virtualMachine,
        "vmIdentity": args.vmIdentity,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareVirtualNetworkInterface.
 */
export interface GetVirtualizationVmwareVirtualNetworkInterfaceArgs {
    accountMoid?: string;
    adapterType?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetVirtualizationVmwareVirtualNetworkInterfaceAncestor[];
    classId?: string;
    connectAtPowerOn?: boolean;
    connected?: boolean;
    createTime?: string;
    domainGroupMoid?: string;
    id?: string;
    key?: number;
    macAddress?: string;
    macAddressType?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    network?: inputs.GetVirtualizationVmwareVirtualNetworkInterfaceNetwork;
    networkType?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetVirtualizationVmwareVirtualNetworkInterfaceParent;
    permissionResources?: inputs.GetVirtualizationVmwareVirtualNetworkInterfacePermissionResource[];
    registeredDevice?: inputs.GetVirtualizationVmwareVirtualNetworkInterfaceRegisteredDevice;
    sharedScope?: string;
    tags?: inputs.GetVirtualizationVmwareVirtualNetworkInterfaceTag[];
    versionContext?: inputs.GetVirtualizationVmwareVirtualNetworkInterfaceVersionContext;
    virtualMachine?: inputs.GetVirtualizationVmwareVirtualNetworkInterfaceVirtualMachine;
    vmIdentity?: string;
}

/**
 * A collection of values returned by getVirtualizationVmwareVirtualNetworkInterface.
 */
export interface GetVirtualizationVmwareVirtualNetworkInterfaceResult {
    readonly accountMoid?: string;
    readonly adapterType?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetVirtualizationVmwareVirtualNetworkInterfaceAncestor[];
    readonly classId?: string;
    readonly connectAtPowerOn?: boolean;
    readonly connected?: boolean;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly key?: number;
    readonly macAddress?: string;
    readonly macAddressType?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly network?: outputs.GetVirtualizationVmwareVirtualNetworkInterfaceNetwork;
    readonly networkType?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetVirtualizationVmwareVirtualNetworkInterfaceParent;
    readonly permissionResources?: outputs.GetVirtualizationVmwareVirtualNetworkInterfacePermissionResource[];
    readonly registeredDevice?: outputs.GetVirtualizationVmwareVirtualNetworkInterfaceRegisteredDevice;
    readonly results: outputs.GetVirtualizationVmwareVirtualNetworkInterfaceResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetVirtualizationVmwareVirtualNetworkInterfaceTag[];
    readonly versionContext?: outputs.GetVirtualizationVmwareVirtualNetworkInterfaceVersionContext;
    readonly virtualMachine?: outputs.GetVirtualizationVmwareVirtualNetworkInterfaceVirtualMachine;
    readonly vmIdentity?: string;
}
export function getVirtualizationVmwareVirtualNetworkInterfaceOutput(args?: GetVirtualizationVmwareVirtualNetworkInterfaceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualizationVmwareVirtualNetworkInterfaceResult> {
    return pulumi.output(args).apply((a: any) => getVirtualizationVmwareVirtualNetworkInterface(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualizationVmwareVirtualNetworkInterface.
 */
export interface GetVirtualizationVmwareVirtualNetworkInterfaceOutputArgs {
    accountMoid?: pulumi.Input<string>;
    adapterType?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareVirtualNetworkInterfaceAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    connectAtPowerOn?: pulumi.Input<boolean>;
    connected?: pulumi.Input<boolean>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    key?: pulumi.Input<number>;
    macAddress?: pulumi.Input<string>;
    macAddressType?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    network?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualNetworkInterfaceNetworkArgs>;
    networkType?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualNetworkInterfaceParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareVirtualNetworkInterfacePermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualNetworkInterfaceRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetVirtualizationVmwareVirtualNetworkInterfaceTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualNetworkInterfaceVersionContextArgs>;
    virtualMachine?: pulumi.Input<inputs.GetVirtualizationVmwareVirtualNetworkInterfaceVirtualMachineArgs>;
    vmIdentity?: pulumi.Input<string>;
}
