// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEquipmentFexOperation(args?: GetEquipmentFexOperationArgs, opts?: pulumi.InvokeOptions): Promise<GetEquipmentFexOperationResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getEquipmentFexOperation:getEquipmentFexOperation", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "adminLocatorLedAction": args.adminLocatorLedAction,
        "adminLocatorLedActionState": args.adminLocatorLedActionState,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceRegistration": args.deviceRegistration,
        "domainGroupMoid": args.domainGroupMoid,
        "fex": args.fex,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEquipmentFexOperation.
 */
export interface GetEquipmentFexOperationArgs {
    accountMoid?: string;
    additionalProperties?: string;
    adminLocatorLedAction?: string;
    adminLocatorLedActionState?: string;
    ancestors?: inputs.GetEquipmentFexOperationAncestor[];
    classId?: string;
    createTime?: string;
    deviceRegistration?: inputs.GetEquipmentFexOperationDeviceRegistration;
    domainGroupMoid?: string;
    fex?: inputs.GetEquipmentFexOperationFex;
    id?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetEquipmentFexOperationParent;
    permissionResources?: inputs.GetEquipmentFexOperationPermissionResource[];
    sharedScope?: string;
    tags?: inputs.GetEquipmentFexOperationTag[];
    versionContext?: inputs.GetEquipmentFexOperationVersionContext;
}

/**
 * A collection of values returned by getEquipmentFexOperation.
 */
export interface GetEquipmentFexOperationResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly adminLocatorLedAction?: string;
    readonly adminLocatorLedActionState?: string;
    readonly ancestors?: outputs.GetEquipmentFexOperationAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceRegistration?: outputs.GetEquipmentFexOperationDeviceRegistration;
    readonly domainGroupMoid?: string;
    readonly fex?: outputs.GetEquipmentFexOperationFex;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetEquipmentFexOperationParent;
    readonly permissionResources?: outputs.GetEquipmentFexOperationPermissionResource[];
    readonly results: outputs.GetEquipmentFexOperationResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetEquipmentFexOperationTag[];
    readonly versionContext?: outputs.GetEquipmentFexOperationVersionContext;
}
export function getEquipmentFexOperationOutput(args?: GetEquipmentFexOperationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEquipmentFexOperationResult> {
    return pulumi.output(args).apply((a: any) => getEquipmentFexOperation(a, opts))
}

/**
 * A collection of arguments for invoking getEquipmentFexOperation.
 */
export interface GetEquipmentFexOperationOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    adminLocatorLedAction?: pulumi.Input<string>;
    adminLocatorLedActionState?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetEquipmentFexOperationAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceRegistration?: pulumi.Input<inputs.GetEquipmentFexOperationDeviceRegistrationArgs>;
    domainGroupMoid?: pulumi.Input<string>;
    fex?: pulumi.Input<inputs.GetEquipmentFexOperationFexArgs>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetEquipmentFexOperationParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetEquipmentFexOperationPermissionResourceArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetEquipmentFexOperationTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetEquipmentFexOperationVersionContextArgs>;
}
