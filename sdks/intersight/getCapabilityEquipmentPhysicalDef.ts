// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCapabilityEquipmentPhysicalDef(args?: GetCapabilityEquipmentPhysicalDefArgs, opts?: pulumi.InvokeOptions): Promise<GetCapabilityEquipmentPhysicalDefResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getCapabilityEquipmentPhysicalDef:getCapabilityEquipmentPhysicalDef", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "depth": args.depth,
        "domainGroupMoid": args.domainGroupMoid,
        "height": args.height,
        "id": args.id,
        "maxPower": args.maxPower,
        "minPower": args.minPower,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "nominalPower": args.nominalPower,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "pid": args.pid,
        "sharedScope": args.sharedScope,
        "sku": args.sku,
        "tags": args.tags,
        "versionContext": args.versionContext,
        "vid": args.vid,
        "weight": args.weight,
        "width": args.width,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCapabilityEquipmentPhysicalDef.
 */
export interface GetCapabilityEquipmentPhysicalDefArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetCapabilityEquipmentPhysicalDefAncestor[];
    classId?: string;
    createTime?: string;
    depth?: number;
    domainGroupMoid?: string;
    height?: number;
    id?: string;
    maxPower?: number;
    minPower?: number;
    modTime?: string;
    moid?: string;
    name?: string;
    nominalPower?: number;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetCapabilityEquipmentPhysicalDefParent;
    permissionResources?: inputs.GetCapabilityEquipmentPhysicalDefPermissionResource[];
    pid?: string;
    sharedScope?: string;
    sku?: string;
    tags?: inputs.GetCapabilityEquipmentPhysicalDefTag[];
    versionContext?: inputs.GetCapabilityEquipmentPhysicalDefVersionContext;
    vid?: string;
    weight?: number;
    width?: number;
}

/**
 * A collection of values returned by getCapabilityEquipmentPhysicalDef.
 */
export interface GetCapabilityEquipmentPhysicalDefResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetCapabilityEquipmentPhysicalDefAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly depth?: number;
    readonly domainGroupMoid?: string;
    readonly height?: number;
    readonly id: string;
    readonly maxPower?: number;
    readonly minPower?: number;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nominalPower?: number;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetCapabilityEquipmentPhysicalDefParent;
    readonly permissionResources?: outputs.GetCapabilityEquipmentPhysicalDefPermissionResource[];
    readonly pid?: string;
    readonly results: outputs.GetCapabilityEquipmentPhysicalDefResult[];
    readonly sharedScope?: string;
    readonly sku?: string;
    readonly tags?: outputs.GetCapabilityEquipmentPhysicalDefTag[];
    readonly versionContext?: outputs.GetCapabilityEquipmentPhysicalDefVersionContext;
    readonly vid?: string;
    readonly weight?: number;
    readonly width?: number;
}
export function getCapabilityEquipmentPhysicalDefOutput(args?: GetCapabilityEquipmentPhysicalDefOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCapabilityEquipmentPhysicalDefResult> {
    return pulumi.output(args).apply((a: any) => getCapabilityEquipmentPhysicalDef(a, opts))
}

/**
 * A collection of arguments for invoking getCapabilityEquipmentPhysicalDef.
 */
export interface GetCapabilityEquipmentPhysicalDefOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetCapabilityEquipmentPhysicalDefAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    depth?: pulumi.Input<number>;
    domainGroupMoid?: pulumi.Input<string>;
    height?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    maxPower?: pulumi.Input<number>;
    minPower?: pulumi.Input<number>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nominalPower?: pulumi.Input<number>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetCapabilityEquipmentPhysicalDefParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetCapabilityEquipmentPhysicalDefPermissionResourceArgs>[]>;
    pid?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    sku?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetCapabilityEquipmentPhysicalDefTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetCapabilityEquipmentPhysicalDefVersionContextArgs>;
    vid?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
    width?: pulumi.Input<number>;
}
