// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getKubernetesClusterProfile(args?: GetKubernetesClusterProfileArgs, opts?: pulumi.InvokeOptions): Promise<GetKubernetesClusterProfileResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getKubernetesClusterProfile:getKubernetesClusterProfile", {
        "accountMoid": args.accountMoid,
        "aciCniProfile": args.aciCniProfile,
        "action": args.action,
        "actionInfo": args.actionInfo,
        "actionParams": args.actionParams,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "associatedCluster": args.associatedCluster,
        "certConfig": args.certConfig,
        "classId": args.classId,
        "clusterIpPools": args.clusterIpPools,
        "configContext": args.configContext,
        "containerRuntimeConfig": args.containerRuntimeConfig,
        "containerRuntimeProxyPolicy": args.containerRuntimeProxyPolicy,
        "createTime": args.createTime,
        "description": args.description,
        "deviceConnectorProxyPolicy": args.deviceConnectorProxyPolicy,
        "domainGroupMoid": args.domainGroupMoid,
        "essentialAddons": args.essentialAddons,
        "id": args.id,
        "kubeConfig": args.kubeConfig,
        "loadbalancerBlockIpLeases": args.loadbalancerBlockIpLeases,
        "loadbalancerIpLeases": args.loadbalancerIpLeases,
        "managedMode": args.managedMode,
        "managementConfig": args.managementConfig,
        "masterVipLease": args.masterVipLease,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "netConfig": args.netConfig,
        "nodeGroups": args.nodeGroups,
        "objectType": args.objectType,
        "organization": args.organization,
        "owners": args.owners,
        "parent": args.parent,
        "parentSolutionProfile": args.parentSolutionProfile,
        "permissionResources": args.permissionResources,
        "policyBuckets": args.policyBuckets,
        "scheduledActions": args.scheduledActions,
        "sharedScope": args.sharedScope,
        "srcTemplate": args.srcTemplate,
        "status": args.status,
        "sysConfig": args.sysConfig,
        "tags": args.tags,
        "trustedRegistries": args.trustedRegistries,
        "type": args.type,
        "versionContext": args.versionContext,
        "workflowInfo": args.workflowInfo,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getKubernetesClusterProfile.
 */
export interface GetKubernetesClusterProfileArgs {
    accountMoid?: string;
    aciCniProfile?: inputs.GetKubernetesClusterProfileAciCniProfile;
    action?: string;
    actionInfo?: inputs.GetKubernetesClusterProfileActionInfo;
    actionParams?: inputs.GetKubernetesClusterProfileActionParam[];
    additionalProperties?: string;
    ancestors?: inputs.GetKubernetesClusterProfileAncestor[];
    associatedCluster?: inputs.GetKubernetesClusterProfileAssociatedCluster;
    certConfig?: inputs.GetKubernetesClusterProfileCertConfig;
    classId?: string;
    clusterIpPools?: inputs.GetKubernetesClusterProfileClusterIpPool[];
    configContext?: inputs.GetKubernetesClusterProfileConfigContext;
    containerRuntimeConfig?: inputs.GetKubernetesClusterProfileContainerRuntimeConfig;
    containerRuntimeProxyPolicy?: inputs.GetKubernetesClusterProfileContainerRuntimeProxyPolicy;
    createTime?: string;
    description?: string;
    deviceConnectorProxyPolicy?: inputs.GetKubernetesClusterProfileDeviceConnectorProxyPolicy;
    domainGroupMoid?: string;
    essentialAddons?: inputs.GetKubernetesClusterProfileEssentialAddon[];
    id?: string;
    kubeConfig?: inputs.GetKubernetesClusterProfileKubeConfig;
    loadbalancerBlockIpLeases?: inputs.GetKubernetesClusterProfileLoadbalancerBlockIpLease[];
    loadbalancerIpLeases?: inputs.GetKubernetesClusterProfileLoadbalancerIpLease[];
    managedMode?: string;
    managementConfig?: inputs.GetKubernetesClusterProfileManagementConfig;
    masterVipLease?: inputs.GetKubernetesClusterProfileMasterVipLease;
    modTime?: string;
    moid?: string;
    name?: string;
    netConfig?: inputs.GetKubernetesClusterProfileNetConfig;
    nodeGroups?: inputs.GetKubernetesClusterProfileNodeGroup[];
    objectType?: string;
    organization?: inputs.GetKubernetesClusterProfileOrganization;
    owners?: string[];
    parent?: inputs.GetKubernetesClusterProfileParent;
    parentSolutionProfile?: inputs.GetKubernetesClusterProfileParentSolutionProfile;
    permissionResources?: inputs.GetKubernetesClusterProfilePermissionResource[];
    policyBuckets?: inputs.GetKubernetesClusterProfilePolicyBucket[];
    scheduledActions?: inputs.GetKubernetesClusterProfileScheduledAction[];
    sharedScope?: string;
    srcTemplate?: inputs.GetKubernetesClusterProfileSrcTemplate;
    status?: string;
    sysConfig?: inputs.GetKubernetesClusterProfileSysConfig;
    tags?: inputs.GetKubernetesClusterProfileTag[];
    trustedRegistries?: inputs.GetKubernetesClusterProfileTrustedRegistries;
    type?: string;
    versionContext?: inputs.GetKubernetesClusterProfileVersionContext;
    workflowInfo?: inputs.GetKubernetesClusterProfileWorkflowInfo;
}

/**
 * A collection of values returned by getKubernetesClusterProfile.
 */
export interface GetKubernetesClusterProfileResult {
    readonly accountMoid?: string;
    readonly aciCniProfile?: outputs.GetKubernetesClusterProfileAciCniProfile;
    readonly action?: string;
    readonly actionInfo?: outputs.GetKubernetesClusterProfileActionInfo;
    readonly actionParams?: outputs.GetKubernetesClusterProfileActionParam[];
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetKubernetesClusterProfileAncestor[];
    readonly associatedCluster?: outputs.GetKubernetesClusterProfileAssociatedCluster;
    readonly certConfig?: outputs.GetKubernetesClusterProfileCertConfig;
    readonly classId?: string;
    readonly clusterIpPools?: outputs.GetKubernetesClusterProfileClusterIpPool[];
    readonly configContext?: outputs.GetKubernetesClusterProfileConfigContext;
    readonly containerRuntimeConfig?: outputs.GetKubernetesClusterProfileContainerRuntimeConfig;
    readonly containerRuntimeProxyPolicy?: outputs.GetKubernetesClusterProfileContainerRuntimeProxyPolicy;
    readonly createTime?: string;
    readonly description?: string;
    readonly deviceConnectorProxyPolicy?: outputs.GetKubernetesClusterProfileDeviceConnectorProxyPolicy;
    readonly domainGroupMoid?: string;
    readonly essentialAddons?: outputs.GetKubernetesClusterProfileEssentialAddon[];
    readonly id: string;
    readonly kubeConfig?: outputs.GetKubernetesClusterProfileKubeConfig;
    readonly loadbalancerBlockIpLeases?: outputs.GetKubernetesClusterProfileLoadbalancerBlockIpLease[];
    readonly loadbalancerIpLeases?: outputs.GetKubernetesClusterProfileLoadbalancerIpLease[];
    readonly managedMode?: string;
    readonly managementConfig?: outputs.GetKubernetesClusterProfileManagementConfig;
    readonly masterVipLease?: outputs.GetKubernetesClusterProfileMasterVipLease;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly netConfig?: outputs.GetKubernetesClusterProfileNetConfig;
    readonly nodeGroups?: outputs.GetKubernetesClusterProfileNodeGroup[];
    readonly objectType?: string;
    readonly organization?: outputs.GetKubernetesClusterProfileOrganization;
    readonly owners?: string[];
    readonly parent?: outputs.GetKubernetesClusterProfileParent;
    readonly parentSolutionProfile?: outputs.GetKubernetesClusterProfileParentSolutionProfile;
    readonly permissionResources?: outputs.GetKubernetesClusterProfilePermissionResource[];
    readonly policyBuckets?: outputs.GetKubernetesClusterProfilePolicyBucket[];
    readonly results: outputs.GetKubernetesClusterProfileResult[];
    readonly scheduledActions?: outputs.GetKubernetesClusterProfileScheduledAction[];
    readonly sharedScope?: string;
    readonly srcTemplate?: outputs.GetKubernetesClusterProfileSrcTemplate;
    readonly status?: string;
    readonly sysConfig?: outputs.GetKubernetesClusterProfileSysConfig;
    readonly tags?: outputs.GetKubernetesClusterProfileTag[];
    readonly trustedRegistries?: outputs.GetKubernetesClusterProfileTrustedRegistries;
    readonly type?: string;
    readonly versionContext?: outputs.GetKubernetesClusterProfileVersionContext;
    readonly workflowInfo?: outputs.GetKubernetesClusterProfileWorkflowInfo;
}
export function getKubernetesClusterProfileOutput(args?: GetKubernetesClusterProfileOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKubernetesClusterProfileResult> {
    return pulumi.output(args).apply((a: any) => getKubernetesClusterProfile(a, opts))
}

/**
 * A collection of arguments for invoking getKubernetesClusterProfile.
 */
export interface GetKubernetesClusterProfileOutputArgs {
    accountMoid?: pulumi.Input<string>;
    aciCniProfile?: pulumi.Input<inputs.GetKubernetesClusterProfileAciCniProfileArgs>;
    action?: pulumi.Input<string>;
    actionInfo?: pulumi.Input<inputs.GetKubernetesClusterProfileActionInfoArgs>;
    actionParams?: pulumi.Input<pulumi.Input<inputs.GetKubernetesClusterProfileActionParamArgs>[]>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetKubernetesClusterProfileAncestorArgs>[]>;
    associatedCluster?: pulumi.Input<inputs.GetKubernetesClusterProfileAssociatedClusterArgs>;
    certConfig?: pulumi.Input<inputs.GetKubernetesClusterProfileCertConfigArgs>;
    classId?: pulumi.Input<string>;
    clusterIpPools?: pulumi.Input<pulumi.Input<inputs.GetKubernetesClusterProfileClusterIpPoolArgs>[]>;
    configContext?: pulumi.Input<inputs.GetKubernetesClusterProfileConfigContextArgs>;
    containerRuntimeConfig?: pulumi.Input<inputs.GetKubernetesClusterProfileContainerRuntimeConfigArgs>;
    containerRuntimeProxyPolicy?: pulumi.Input<inputs.GetKubernetesClusterProfileContainerRuntimeProxyPolicyArgs>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceConnectorProxyPolicy?: pulumi.Input<inputs.GetKubernetesClusterProfileDeviceConnectorProxyPolicyArgs>;
    domainGroupMoid?: pulumi.Input<string>;
    essentialAddons?: pulumi.Input<pulumi.Input<inputs.GetKubernetesClusterProfileEssentialAddonArgs>[]>;
    id?: pulumi.Input<string>;
    kubeConfig?: pulumi.Input<inputs.GetKubernetesClusterProfileKubeConfigArgs>;
    loadbalancerBlockIpLeases?: pulumi.Input<pulumi.Input<inputs.GetKubernetesClusterProfileLoadbalancerBlockIpLeaseArgs>[]>;
    loadbalancerIpLeases?: pulumi.Input<pulumi.Input<inputs.GetKubernetesClusterProfileLoadbalancerIpLeaseArgs>[]>;
    managedMode?: pulumi.Input<string>;
    managementConfig?: pulumi.Input<inputs.GetKubernetesClusterProfileManagementConfigArgs>;
    masterVipLease?: pulumi.Input<inputs.GetKubernetesClusterProfileMasterVipLeaseArgs>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    netConfig?: pulumi.Input<inputs.GetKubernetesClusterProfileNetConfigArgs>;
    nodeGroups?: pulumi.Input<pulumi.Input<inputs.GetKubernetesClusterProfileNodeGroupArgs>[]>;
    objectType?: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.GetKubernetesClusterProfileOrganizationArgs>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetKubernetesClusterProfileParentArgs>;
    parentSolutionProfile?: pulumi.Input<inputs.GetKubernetesClusterProfileParentSolutionProfileArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetKubernetesClusterProfilePermissionResourceArgs>[]>;
    policyBuckets?: pulumi.Input<pulumi.Input<inputs.GetKubernetesClusterProfilePolicyBucketArgs>[]>;
    scheduledActions?: pulumi.Input<pulumi.Input<inputs.GetKubernetesClusterProfileScheduledActionArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    srcTemplate?: pulumi.Input<inputs.GetKubernetesClusterProfileSrcTemplateArgs>;
    status?: pulumi.Input<string>;
    sysConfig?: pulumi.Input<inputs.GetKubernetesClusterProfileSysConfigArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetKubernetesClusterProfileTagArgs>[]>;
    trustedRegistries?: pulumi.Input<inputs.GetKubernetesClusterProfileTrustedRegistriesArgs>;
    type?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetKubernetesClusterProfileVersionContextArgs>;
    workflowInfo?: pulumi.Input<inputs.GetKubernetesClusterProfileWorkflowInfoArgs>;
}
