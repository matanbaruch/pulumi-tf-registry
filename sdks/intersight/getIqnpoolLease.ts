// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIqnpoolLease(args?: GetIqnpoolLeaseArgs, opts?: pulumi.InvokeOptions): Promise<GetIqnpoolLeaseResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getIqnpoolLease:getIqnpoolLease", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "allocationType": args.allocationType,
        "ancestors": args.ancestors,
        "assignedToEntity": args.assignedToEntity,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "hasDuplicate": args.hasDuplicate,
        "id": args.id,
        "iqnAddress": args.iqnAddress,
        "iqnNumber": args.iqnNumber,
        "iqnPrefix": args.iqnPrefix,
        "iqnSuffix": args.iqnSuffix,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "pool": args.pool,
        "poolMember": args.poolMember,
        "reservation": args.reservation,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "universe": args.universe,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIqnpoolLease.
 */
export interface GetIqnpoolLeaseArgs {
    accountMoid?: string;
    additionalProperties?: string;
    allocationType?: string;
    ancestors?: inputs.GetIqnpoolLeaseAncestor[];
    assignedToEntity?: inputs.GetIqnpoolLeaseAssignedToEntity;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    hasDuplicate?: boolean;
    id?: string;
    iqnAddress?: string;
    iqnNumber?: number;
    iqnPrefix?: string;
    iqnSuffix?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetIqnpoolLeaseParent;
    permissionResources?: inputs.GetIqnpoolLeasePermissionResource[];
    pool?: inputs.GetIqnpoolLeasePool;
    poolMember?: inputs.GetIqnpoolLeasePoolMember;
    reservation?: inputs.GetIqnpoolLeaseReservation;
    sharedScope?: string;
    tags?: inputs.GetIqnpoolLeaseTag[];
    universe?: inputs.GetIqnpoolLeaseUniverse;
    versionContext?: inputs.GetIqnpoolLeaseVersionContext;
}

/**
 * A collection of values returned by getIqnpoolLease.
 */
export interface GetIqnpoolLeaseResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly allocationType?: string;
    readonly ancestors?: outputs.GetIqnpoolLeaseAncestor[];
    readonly assignedToEntity?: outputs.GetIqnpoolLeaseAssignedToEntity;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly hasDuplicate?: boolean;
    readonly id: string;
    readonly iqnAddress?: string;
    readonly iqnNumber?: number;
    readonly iqnPrefix?: string;
    readonly iqnSuffix?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetIqnpoolLeaseParent;
    readonly permissionResources?: outputs.GetIqnpoolLeasePermissionResource[];
    readonly pool?: outputs.GetIqnpoolLeasePool;
    readonly poolMember?: outputs.GetIqnpoolLeasePoolMember;
    readonly reservation?: outputs.GetIqnpoolLeaseReservation;
    readonly results: outputs.GetIqnpoolLeaseResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetIqnpoolLeaseTag[];
    readonly universe?: outputs.GetIqnpoolLeaseUniverse;
    readonly versionContext?: outputs.GetIqnpoolLeaseVersionContext;
}
export function getIqnpoolLeaseOutput(args?: GetIqnpoolLeaseOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIqnpoolLeaseResult> {
    return pulumi.output(args).apply((a: any) => getIqnpoolLease(a, opts))
}

/**
 * A collection of arguments for invoking getIqnpoolLease.
 */
export interface GetIqnpoolLeaseOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    allocationType?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetIqnpoolLeaseAncestorArgs>[]>;
    assignedToEntity?: pulumi.Input<inputs.GetIqnpoolLeaseAssignedToEntityArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    hasDuplicate?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    iqnAddress?: pulumi.Input<string>;
    iqnNumber?: pulumi.Input<number>;
    iqnPrefix?: pulumi.Input<string>;
    iqnSuffix?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetIqnpoolLeaseParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetIqnpoolLeasePermissionResourceArgs>[]>;
    pool?: pulumi.Input<inputs.GetIqnpoolLeasePoolArgs>;
    poolMember?: pulumi.Input<inputs.GetIqnpoolLeasePoolMemberArgs>;
    reservation?: pulumi.Input<inputs.GetIqnpoolLeaseReservationArgs>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetIqnpoolLeaseTagArgs>[]>;
    universe?: pulumi.Input<inputs.GetIqnpoolLeaseUniverseArgs>;
    versionContext?: pulumi.Input<inputs.GetIqnpoolLeaseVersionContextArgs>;
}
