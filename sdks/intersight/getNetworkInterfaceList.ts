// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNetworkInterfaceList(args?: GetNetworkInterfaceListArgs, opts?: pulumi.InvokeOptions): Promise<GetNetworkInterfaceListResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getNetworkInterfaceList:getNetworkInterfaceList", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "adminState": args.adminState,
        "allowedVlans": args.allowedVlans,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "description": args.description,
        "deviceMoId": args.deviceMoId,
        "displayName": args.displayName,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "ipAddress": args.ipAddress,
        "ipSubnet": args.ipSubnet,
        "mac": args.mac,
        "modTime": args.modTime,
        "moid": args.moid,
        "mtu": args.mtu,
        "name": args.name,
        "networkElement": args.networkElement,
        "objectType": args.objectType,
        "operState": args.operState,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "portChannelId": args.portChannelId,
        "portSubType": args.portSubType,
        "portType": args.portType,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "sharedScope": args.sharedScope,
        "slotId": args.slotId,
        "speed": args.speed,
        "speedGroup": args.speedGroup,
        "tags": args.tags,
        "versionContext": args.versionContext,
        "vlan": args.vlan,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNetworkInterfaceList.
 */
export interface GetNetworkInterfaceListArgs {
    accountMoid?: string;
    additionalProperties?: string;
    adminState?: string;
    allowedVlans?: string;
    ancestors?: inputs.GetNetworkInterfaceListAncestor[];
    classId?: string;
    createTime?: string;
    description?: string;
    deviceMoId?: string;
    displayName?: string;
    dn?: string;
    domainGroupMoid?: string;
    id?: string;
    ipAddress?: string;
    ipSubnet?: number;
    mac?: string;
    modTime?: string;
    moid?: string;
    mtu?: number;
    name?: string;
    networkElement?: inputs.GetNetworkInterfaceListNetworkElement;
    objectType?: string;
    operState?: string;
    owners?: string[];
    parent?: inputs.GetNetworkInterfaceListParent;
    permissionResources?: inputs.GetNetworkInterfaceListPermissionResource[];
    portChannelId?: number;
    portSubType?: string;
    portType?: string;
    registeredDevice?: inputs.GetNetworkInterfaceListRegisteredDevice;
    rn?: string;
    sharedScope?: string;
    slotId?: string;
    speed?: string;
    speedGroup?: string;
    tags?: inputs.GetNetworkInterfaceListTag[];
    versionContext?: inputs.GetNetworkInterfaceListVersionContext;
    vlan?: string;
}

/**
 * A collection of values returned by getNetworkInterfaceList.
 */
export interface GetNetworkInterfaceListResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly adminState?: string;
    readonly allowedVlans?: string;
    readonly ancestors?: outputs.GetNetworkInterfaceListAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly deviceMoId?: string;
    readonly displayName?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly ipAddress?: string;
    readonly ipSubnet?: number;
    readonly mac?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly mtu?: number;
    readonly name?: string;
    readonly networkElement?: outputs.GetNetworkInterfaceListNetworkElement;
    readonly objectType?: string;
    readonly operState?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetNetworkInterfaceListParent;
    readonly permissionResources?: outputs.GetNetworkInterfaceListPermissionResource[];
    readonly portChannelId?: number;
    readonly portSubType?: string;
    readonly portType?: string;
    readonly registeredDevice?: outputs.GetNetworkInterfaceListRegisteredDevice;
    readonly results: outputs.GetNetworkInterfaceListResult[];
    readonly rn?: string;
    readonly sharedScope?: string;
    readonly slotId?: string;
    readonly speed?: string;
    readonly speedGroup?: string;
    readonly tags?: outputs.GetNetworkInterfaceListTag[];
    readonly versionContext?: outputs.GetNetworkInterfaceListVersionContext;
    readonly vlan?: string;
}
export function getNetworkInterfaceListOutput(args?: GetNetworkInterfaceListOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkInterfaceListResult> {
    return pulumi.output(args).apply((a: any) => getNetworkInterfaceList(a, opts))
}

/**
 * A collection of arguments for invoking getNetworkInterfaceList.
 */
export interface GetNetworkInterfaceListOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    adminState?: pulumi.Input<string>;
    allowedVlans?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetNetworkInterfaceListAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    ipSubnet?: pulumi.Input<number>;
    mac?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    networkElement?: pulumi.Input<inputs.GetNetworkInterfaceListNetworkElementArgs>;
    objectType?: pulumi.Input<string>;
    operState?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetNetworkInterfaceListParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetNetworkInterfaceListPermissionResourceArgs>[]>;
    portChannelId?: pulumi.Input<number>;
    portSubType?: pulumi.Input<string>;
    portType?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetNetworkInterfaceListRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    slotId?: pulumi.Input<string>;
    speed?: pulumi.Input<string>;
    speedGroup?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetNetworkInterfaceListTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetNetworkInterfaceListVersionContextArgs>;
    vlan?: pulumi.Input<string>;
}
