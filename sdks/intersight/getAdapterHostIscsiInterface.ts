// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAdapterHostIscsiInterface(args?: GetAdapterHostIscsiInterfaceArgs, opts?: pulumi.InvokeOptions): Promise<GetAdapterHostIscsiInterfaceResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getAdapterHostIscsiInterface:getAdapterHostIscsiInterface", {
        "accountMoid": args.accountMoid,
        "adapterUnit": args.adapterUnit,
        "additionalProperties": args.additionalProperties,
        "adminState": args.adminState,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "epDn": args.epDn,
        "hostIscsiInterfaceId": args.hostIscsiInterfaceId,
        "hostVisible": args.hostVisible,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "isUpgraded": args.isUpgraded,
        "macAddress": args.macAddress,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "operState": args.operState,
        "operability": args.operability,
        "owners": args.owners,
        "parent": args.parent,
        "peerDn": args.peerDn,
        "permissionResources": args.permissionResources,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "registeredDevice": args.registeredDevice,
        "revision": args.revision,
        "rn": args.rn,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAdapterHostIscsiInterface.
 */
export interface GetAdapterHostIscsiInterfaceArgs {
    accountMoid?: string;
    adapterUnit?: inputs.GetAdapterHostIscsiInterfaceAdapterUnit;
    additionalProperties?: string;
    adminState?: string;
    ancestors?: inputs.GetAdapterHostIscsiInterfaceAncestor[];
    classId?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    epDn?: string;
    hostIscsiInterfaceId?: number;
    hostVisible?: string;
    id?: string;
    inventoryDeviceInfo?: inputs.GetAdapterHostIscsiInterfaceInventoryDeviceInfo;
    isUpgraded?: boolean;
    macAddress?: string;
    modTime?: string;
    model?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    operState?: string;
    operability?: string;
    owners?: string[];
    parent?: inputs.GetAdapterHostIscsiInterfaceParent;
    peerDn?: string;
    permissionResources?: inputs.GetAdapterHostIscsiInterfacePermissionResource[];
    presence?: string;
    previousFru?: inputs.GetAdapterHostIscsiInterfacePreviousFru;
    registeredDevice?: inputs.GetAdapterHostIscsiInterfaceRegisteredDevice;
    revision?: string;
    rn?: string;
    serial?: string;
    sharedScope?: string;
    tags?: inputs.GetAdapterHostIscsiInterfaceTag[];
    vendor?: string;
    versionContext?: inputs.GetAdapterHostIscsiInterfaceVersionContext;
}

/**
 * A collection of values returned by getAdapterHostIscsiInterface.
 */
export interface GetAdapterHostIscsiInterfaceResult {
    readonly accountMoid?: string;
    readonly adapterUnit?: outputs.GetAdapterHostIscsiInterfaceAdapterUnit;
    readonly additionalProperties?: string;
    readonly adminState?: string;
    readonly ancestors?: outputs.GetAdapterHostIscsiInterfaceAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly epDn?: string;
    readonly hostIscsiInterfaceId?: number;
    readonly hostVisible?: string;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetAdapterHostIscsiInterfaceInventoryDeviceInfo;
    readonly isUpgraded?: boolean;
    readonly macAddress?: string;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly operState?: string;
    readonly operability?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetAdapterHostIscsiInterfaceParent;
    readonly peerDn?: string;
    readonly permissionResources?: outputs.GetAdapterHostIscsiInterfacePermissionResource[];
    readonly presence?: string;
    readonly previousFru?: outputs.GetAdapterHostIscsiInterfacePreviousFru;
    readonly registeredDevice?: outputs.GetAdapterHostIscsiInterfaceRegisteredDevice;
    readonly results: outputs.GetAdapterHostIscsiInterfaceResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetAdapterHostIscsiInterfaceTag[];
    readonly vendor?: string;
    readonly versionContext?: outputs.GetAdapterHostIscsiInterfaceVersionContext;
}
export function getAdapterHostIscsiInterfaceOutput(args?: GetAdapterHostIscsiInterfaceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAdapterHostIscsiInterfaceResult> {
    return pulumi.output(args).apply((a: any) => getAdapterHostIscsiInterface(a, opts))
}

/**
 * A collection of arguments for invoking getAdapterHostIscsiInterface.
 */
export interface GetAdapterHostIscsiInterfaceOutputArgs {
    accountMoid?: pulumi.Input<string>;
    adapterUnit?: pulumi.Input<inputs.GetAdapterHostIscsiInterfaceAdapterUnitArgs>;
    additionalProperties?: pulumi.Input<string>;
    adminState?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetAdapterHostIscsiInterfaceAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    epDn?: pulumi.Input<string>;
    hostIscsiInterfaceId?: pulumi.Input<number>;
    hostVisible?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetAdapterHostIscsiInterfaceInventoryDeviceInfoArgs>;
    isUpgraded?: pulumi.Input<boolean>;
    macAddress?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operState?: pulumi.Input<string>;
    operability?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetAdapterHostIscsiInterfaceParentArgs>;
    peerDn?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetAdapterHostIscsiInterfacePermissionResourceArgs>[]>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetAdapterHostIscsiInterfacePreviousFruArgs>;
    registeredDevice?: pulumi.Input<inputs.GetAdapterHostIscsiInterfaceRegisteredDeviceArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetAdapterHostIscsiInterfaceTagArgs>[]>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetAdapterHostIscsiInterfaceVersionContextArgs>;
}
