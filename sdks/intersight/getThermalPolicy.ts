// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getThermalPolicy(args?: GetThermalPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetThermalPolicyResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getThermalPolicy:getThermalPolicy", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "fanControlMode": args.fanControlMode,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "organization": args.organization,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "profiles": args.profiles,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getThermalPolicy.
 */
export interface GetThermalPolicyArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetThermalPolicyAncestor[];
    classId?: string;
    createTime?: string;
    description?: string;
    domainGroupMoid?: string;
    fanControlMode?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    organization?: inputs.GetThermalPolicyOrganization;
    owners?: string[];
    parent?: inputs.GetThermalPolicyParent;
    permissionResources?: inputs.GetThermalPolicyPermissionResource[];
    profiles?: inputs.GetThermalPolicyProfile[];
    sharedScope?: string;
    tags?: inputs.GetThermalPolicyTag[];
    versionContext?: inputs.GetThermalPolicyVersionContext;
}

/**
 * A collection of values returned by getThermalPolicy.
 */
export interface GetThermalPolicyResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetThermalPolicyAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly fanControlMode?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly organization?: outputs.GetThermalPolicyOrganization;
    readonly owners?: string[];
    readonly parent?: outputs.GetThermalPolicyParent;
    readonly permissionResources?: outputs.GetThermalPolicyPermissionResource[];
    readonly profiles?: outputs.GetThermalPolicyProfile[];
    readonly results: outputs.GetThermalPolicyResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetThermalPolicyTag[];
    readonly versionContext?: outputs.GetThermalPolicyVersionContext;
}
export function getThermalPolicyOutput(args?: GetThermalPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetThermalPolicyResult> {
    return pulumi.output(args).apply((a: any) => getThermalPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getThermalPolicy.
 */
export interface GetThermalPolicyOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetThermalPolicyAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    fanControlMode?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.GetThermalPolicyOrganizationArgs>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetThermalPolicyParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetThermalPolicyPermissionResourceArgs>[]>;
    profiles?: pulumi.Input<pulumi.Input<inputs.GetThermalPolicyProfileArgs>[]>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetThermalPolicyTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetThermalPolicyVersionContextArgs>;
}
