// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getWorkflowTaskInfo(args?: GetWorkflowTaskInfoArgs, opts?: pulumi.InvokeOptions): Promise<GetWorkflowTaskInfoResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getWorkflowTaskInfo:getWorkflowTaskInfo", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "description": args.description,
        "domainGroupMoid": args.domainGroupMoid,
        "endTime": args.endTime,
        "failureReason": args.failureReason,
        "id": args.id,
        "input": args.input,
        "instId": args.instId,
        "internal": args.internal,
        "label": args.label,
        "messages": args.messages,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "output": args.output,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "refName": args.refName,
        "retryCount": args.retryCount,
        "rollbackDisabled": args.rollbackDisabled,
        "runningInstId": args.runningInstId,
        "sharedScope": args.sharedScope,
        "startTime": args.startTime,
        "status": args.status,
        "subWorkflowInfo": args.subWorkflowInfo,
        "subWorkflowRetryHistories": args.subWorkflowRetryHistories,
        "tags": args.tags,
        "taskDefinition": args.taskDefinition,
        "taskInstIdLists": args.taskInstIdLists,
        "taskLoopInfo": args.taskLoopInfo,
        "versionContext": args.versionContext,
        "workflowInfo": args.workflowInfo,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getWorkflowTaskInfo.
 */
export interface GetWorkflowTaskInfoArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetWorkflowTaskInfoAncestor[];
    classId?: string;
    createTime?: string;
    description?: string;
    domainGroupMoid?: string;
    endTime?: string;
    failureReason?: string;
    id?: string;
    input?: string;
    instId?: string;
    internal?: boolean;
    label?: string;
    messages?: inputs.GetWorkflowTaskInfoMessage[];
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    output?: string;
    owners?: string[];
    parent?: inputs.GetWorkflowTaskInfoParent;
    permissionResources?: inputs.GetWorkflowTaskInfoPermissionResource[];
    refName?: string;
    retryCount?: number;
    rollbackDisabled?: boolean;
    runningInstId?: string;
    sharedScope?: string;
    startTime?: string;
    status?: string;
    subWorkflowInfo?: inputs.GetWorkflowTaskInfoSubWorkflowInfo;
    subWorkflowRetryHistories?: inputs.GetWorkflowTaskInfoSubWorkflowRetryHistory[];
    tags?: inputs.GetWorkflowTaskInfoTag[];
    taskDefinition?: inputs.GetWorkflowTaskInfoTaskDefinition;
    taskInstIdLists?: inputs.GetWorkflowTaskInfoTaskInstIdList[];
    taskLoopInfo?: inputs.GetWorkflowTaskInfoTaskLoopInfo;
    versionContext?: inputs.GetWorkflowTaskInfoVersionContext;
    workflowInfo?: inputs.GetWorkflowTaskInfoWorkflowInfo;
}

/**
 * A collection of values returned by getWorkflowTaskInfo.
 */
export interface GetWorkflowTaskInfoResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetWorkflowTaskInfoAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly domainGroupMoid?: string;
    readonly endTime?: string;
    readonly failureReason?: string;
    readonly id: string;
    readonly input?: string;
    readonly instId?: string;
    readonly internal?: boolean;
    readonly label?: string;
    readonly messages?: outputs.GetWorkflowTaskInfoMessage[];
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly output?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetWorkflowTaskInfoParent;
    readonly permissionResources?: outputs.GetWorkflowTaskInfoPermissionResource[];
    readonly refName?: string;
    readonly results: outputs.GetWorkflowTaskInfoResult[];
    readonly retryCount?: number;
    readonly rollbackDisabled?: boolean;
    readonly runningInstId?: string;
    readonly sharedScope?: string;
    readonly startTime?: string;
    readonly status?: string;
    readonly subWorkflowInfo?: outputs.GetWorkflowTaskInfoSubWorkflowInfo;
    readonly subWorkflowRetryHistories?: outputs.GetWorkflowTaskInfoSubWorkflowRetryHistory[];
    readonly tags?: outputs.GetWorkflowTaskInfoTag[];
    readonly taskDefinition?: outputs.GetWorkflowTaskInfoTaskDefinition;
    readonly taskInstIdLists?: outputs.GetWorkflowTaskInfoTaskInstIdList[];
    readonly taskLoopInfo?: outputs.GetWorkflowTaskInfoTaskLoopInfo;
    readonly versionContext?: outputs.GetWorkflowTaskInfoVersionContext;
    readonly workflowInfo?: outputs.GetWorkflowTaskInfoWorkflowInfo;
}
export function getWorkflowTaskInfoOutput(args?: GetWorkflowTaskInfoOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWorkflowTaskInfoResult> {
    return pulumi.output(args).apply((a: any) => getWorkflowTaskInfo(a, opts))
}

/**
 * A collection of arguments for invoking getWorkflowTaskInfo.
 */
export interface GetWorkflowTaskInfoOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetWorkflowTaskInfoAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    failureReason?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    input?: pulumi.Input<string>;
    instId?: pulumi.Input<string>;
    internal?: pulumi.Input<boolean>;
    label?: pulumi.Input<string>;
    messages?: pulumi.Input<pulumi.Input<inputs.GetWorkflowTaskInfoMessageArgs>[]>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    output?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetWorkflowTaskInfoParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetWorkflowTaskInfoPermissionResourceArgs>[]>;
    refName?: pulumi.Input<string>;
    retryCount?: pulumi.Input<number>;
    rollbackDisabled?: pulumi.Input<boolean>;
    runningInstId?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    subWorkflowInfo?: pulumi.Input<inputs.GetWorkflowTaskInfoSubWorkflowInfoArgs>;
    subWorkflowRetryHistories?: pulumi.Input<pulumi.Input<inputs.GetWorkflowTaskInfoSubWorkflowRetryHistoryArgs>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetWorkflowTaskInfoTagArgs>[]>;
    taskDefinition?: pulumi.Input<inputs.GetWorkflowTaskInfoTaskDefinitionArgs>;
    taskInstIdLists?: pulumi.Input<pulumi.Input<inputs.GetWorkflowTaskInfoTaskInstIdListArgs>[]>;
    taskLoopInfo?: pulumi.Input<inputs.GetWorkflowTaskInfoTaskLoopInfoArgs>;
    versionContext?: pulumi.Input<inputs.GetWorkflowTaskInfoVersionContextArgs>;
    workflowInfo?: pulumi.Input<inputs.GetWorkflowTaskInfoWorkflowInfoArgs>;
}
