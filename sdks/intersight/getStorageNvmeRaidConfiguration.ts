// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageNvmeRaidConfiguration(args?: GetStorageNvmeRaidConfigurationArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageNvmeRaidConfigurationResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageNvmeRaidConfiguration:getStorageNvmeRaidConfiguration", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "controllerDn": args.controllerDn,
        "controllerMoid": args.controllerMoid,
        "createTime": args.createTime,
        "diskStates": args.diskStates,
        "domainGroupMoid": args.domainGroupMoid,
        "driveGroups": args.driveGroups,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "serverProfile": args.serverProfile,
        "sharedScope": args.sharedScope,
        "storagePolicy": args.storagePolicy,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageNvmeRaidConfiguration.
 */
export interface GetStorageNvmeRaidConfigurationArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageNvmeRaidConfigurationAncestor[];
    classId?: string;
    controllerDn?: string;
    controllerMoid?: string;
    createTime?: string;
    diskStates?: inputs.GetStorageNvmeRaidConfigurationDiskState[];
    domainGroupMoid?: string;
    driveGroups?: inputs.GetStorageNvmeRaidConfigurationDriveGroup[];
    id?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageNvmeRaidConfigurationParent;
    permissionResources?: inputs.GetStorageNvmeRaidConfigurationPermissionResource[];
    serverProfile?: inputs.GetStorageNvmeRaidConfigurationServerProfile;
    sharedScope?: string;
    storagePolicy?: inputs.GetStorageNvmeRaidConfigurationStoragePolicy;
    tags?: inputs.GetStorageNvmeRaidConfigurationTag[];
    versionContext?: inputs.GetStorageNvmeRaidConfigurationVersionContext;
}

/**
 * A collection of values returned by getStorageNvmeRaidConfiguration.
 */
export interface GetStorageNvmeRaidConfigurationResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageNvmeRaidConfigurationAncestor[];
    readonly classId?: string;
    readonly controllerDn?: string;
    readonly controllerMoid?: string;
    readonly createTime?: string;
    readonly diskStates?: outputs.GetStorageNvmeRaidConfigurationDiskState[];
    readonly domainGroupMoid?: string;
    readonly driveGroups?: outputs.GetStorageNvmeRaidConfigurationDriveGroup[];
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageNvmeRaidConfigurationParent;
    readonly permissionResources?: outputs.GetStorageNvmeRaidConfigurationPermissionResource[];
    readonly results: outputs.GetStorageNvmeRaidConfigurationResult[];
    readonly serverProfile?: outputs.GetStorageNvmeRaidConfigurationServerProfile;
    readonly sharedScope?: string;
    readonly storagePolicy?: outputs.GetStorageNvmeRaidConfigurationStoragePolicy;
    readonly tags?: outputs.GetStorageNvmeRaidConfigurationTag[];
    readonly versionContext?: outputs.GetStorageNvmeRaidConfigurationVersionContext;
}
export function getStorageNvmeRaidConfigurationOutput(args?: GetStorageNvmeRaidConfigurationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageNvmeRaidConfigurationResult> {
    return pulumi.output(args).apply((a: any) => getStorageNvmeRaidConfiguration(a, opts))
}

/**
 * A collection of arguments for invoking getStorageNvmeRaidConfiguration.
 */
export interface GetStorageNvmeRaidConfigurationOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageNvmeRaidConfigurationAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    controllerDn?: pulumi.Input<string>;
    controllerMoid?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    diskStates?: pulumi.Input<pulumi.Input<inputs.GetStorageNvmeRaidConfigurationDiskStateArgs>[]>;
    domainGroupMoid?: pulumi.Input<string>;
    driveGroups?: pulumi.Input<pulumi.Input<inputs.GetStorageNvmeRaidConfigurationDriveGroupArgs>[]>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageNvmeRaidConfigurationParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageNvmeRaidConfigurationPermissionResourceArgs>[]>;
    serverProfile?: pulumi.Input<inputs.GetStorageNvmeRaidConfigurationServerProfileArgs>;
    sharedScope?: pulumi.Input<string>;
    storagePolicy?: pulumi.Input<inputs.GetStorageNvmeRaidConfigurationStoragePolicyArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageNvmeRaidConfigurationTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetStorageNvmeRaidConfigurationVersionContextArgs>;
}
