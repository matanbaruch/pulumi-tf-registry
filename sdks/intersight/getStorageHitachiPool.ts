// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageHitachiPool(args?: GetStorageHitachiPoolArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageHitachiPoolResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageHitachiPool:getStorageHitachiPool", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "array": args.array,
        "blockingModeBlockade": args.blockingModeBlockade,
        "blockingModeFull": args.blockingModeFull,
        "classId": args.classId,
        "createTime": args.createTime,
        "depletionThreshold": args.depletionThreshold,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "isShrinking": args.isShrinking,
        "modTime": args.modTime,
        "moid": args.moid,
        "monitoringMode": args.monitoringMode,
        "monitoringStatus": args.monitoringStatus,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "poolActionMode": args.poolActionMode,
        "poolId": args.poolId,
        "progressOfReplacing": args.progressOfReplacing,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "status": args.status,
        "storageUtilization": args.storageUtilization,
        "tags": args.tags,
        "totalReservedCapacity": args.totalReservedCapacity,
        "type": args.type,
        "versionContext": args.versionContext,
        "warningThreshold": args.warningThreshold,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageHitachiPool.
 */
export interface GetStorageHitachiPoolArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageHitachiPoolAncestor[];
    array?: inputs.GetStorageHitachiPoolArray;
    blockingModeBlockade?: string;
    blockingModeFull?: string;
    classId?: string;
    createTime?: string;
    depletionThreshold?: string;
    domainGroupMoid?: string;
    id?: string;
    isShrinking?: boolean;
    modTime?: string;
    moid?: string;
    monitoringMode?: string;
    monitoringStatus?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageHitachiPoolParent;
    permissionResources?: inputs.GetStorageHitachiPoolPermissionResource[];
    poolActionMode?: string;
    poolId?: string;
    progressOfReplacing?: string;
    registeredDevice?: inputs.GetStorageHitachiPoolRegisteredDevice;
    sharedScope?: string;
    status?: string;
    storageUtilization?: inputs.GetStorageHitachiPoolStorageUtilization;
    tags?: inputs.GetStorageHitachiPoolTag[];
    totalReservedCapacity?: number;
    type?: string;
    versionContext?: inputs.GetStorageHitachiPoolVersionContext;
    warningThreshold?: number;
}

/**
 * A collection of values returned by getStorageHitachiPool.
 */
export interface GetStorageHitachiPoolResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageHitachiPoolAncestor[];
    readonly array?: outputs.GetStorageHitachiPoolArray;
    readonly blockingModeBlockade?: string;
    readonly blockingModeFull?: string;
    readonly classId?: string;
    readonly createTime?: string;
    readonly depletionThreshold?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly isShrinking?: boolean;
    readonly modTime?: string;
    readonly moid?: string;
    readonly monitoringMode?: string;
    readonly monitoringStatus?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageHitachiPoolParent;
    readonly permissionResources?: outputs.GetStorageHitachiPoolPermissionResource[];
    readonly poolActionMode?: string;
    readonly poolId?: string;
    readonly progressOfReplacing?: string;
    readonly registeredDevice?: outputs.GetStorageHitachiPoolRegisteredDevice;
    readonly results: outputs.GetStorageHitachiPoolResult[];
    readonly sharedScope?: string;
    readonly status?: string;
    readonly storageUtilization?: outputs.GetStorageHitachiPoolStorageUtilization;
    readonly tags?: outputs.GetStorageHitachiPoolTag[];
    readonly totalReservedCapacity?: number;
    readonly type?: string;
    readonly versionContext?: outputs.GetStorageHitachiPoolVersionContext;
    readonly warningThreshold?: number;
}
export function getStorageHitachiPoolOutput(args?: GetStorageHitachiPoolOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageHitachiPoolResult> {
    return pulumi.output(args).apply((a: any) => getStorageHitachiPool(a, opts))
}

/**
 * A collection of arguments for invoking getStorageHitachiPool.
 */
export interface GetStorageHitachiPoolOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiPoolAncestorArgs>[]>;
    array?: pulumi.Input<inputs.GetStorageHitachiPoolArrayArgs>;
    blockingModeBlockade?: pulumi.Input<string>;
    blockingModeFull?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    depletionThreshold?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    isShrinking?: pulumi.Input<boolean>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    monitoringMode?: pulumi.Input<string>;
    monitoringStatus?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageHitachiPoolParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiPoolPermissionResourceArgs>[]>;
    poolActionMode?: pulumi.Input<string>;
    poolId?: pulumi.Input<string>;
    progressOfReplacing?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetStorageHitachiPoolRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    storageUtilization?: pulumi.Input<inputs.GetStorageHitachiPoolStorageUtilizationArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiPoolTagArgs>[]>;
    totalReservedCapacity?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetStorageHitachiPoolVersionContextArgs>;
    warningThreshold?: pulumi.Input<number>;
}
