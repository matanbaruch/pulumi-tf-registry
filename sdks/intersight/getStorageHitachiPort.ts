// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageHitachiPort(args?: GetStorageHitachiPortArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageHitachiPortResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageHitachiPort:getStorageHitachiPort", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "array": args.array,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "fabricMode": args.fabricMode,
        "id": args.id,
        "ipv4Address": args.ipv4Address,
        "ipv6GlobalAddress": args.ipv6GlobalAddress,
        "ipv6LinkLocalAddress": args.ipv6LinkLocalAddress,
        "iqn": args.iqn,
        "isIpv6Enable": args.isIpv6Enable,
        "loopId": args.loopId,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "portConnection": args.portConnection,
        "portLunSecurity": args.portLunSecurity,
        "portMode": args.portMode,
        "registeredDevice": args.registeredDevice,
        "sharedScope": args.sharedScope,
        "shortportId": args.shortportId,
        "speed": args.speed,
        "status": args.status,
        "tags": args.tags,
        "tcpMtu": args.tcpMtu,
        "type": args.type,
        "versionContext": args.versionContext,
        "wwn": args.wwn,
        "wwnn": args.wwnn,
        "wwpn": args.wwpn,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageHitachiPort.
 */
export interface GetStorageHitachiPortArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageHitachiPortAncestor[];
    array?: inputs.GetStorageHitachiPortArray;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    fabricMode?: boolean;
    id?: string;
    ipv4Address?: string;
    ipv6GlobalAddress?: string;
    ipv6LinkLocalAddress?: string;
    iqn?: string;
    isIpv6Enable?: boolean;
    loopId?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageHitachiPortParent;
    permissionResources?: inputs.GetStorageHitachiPortPermissionResource[];
    portConnection?: string;
    portLunSecurity?: boolean;
    portMode?: string;
    registeredDevice?: inputs.GetStorageHitachiPortRegisteredDevice;
    sharedScope?: string;
    shortportId?: string;
    speed?: number;
    status?: string;
    tags?: inputs.GetStorageHitachiPortTag[];
    tcpMtu?: number;
    type?: string;
    versionContext?: inputs.GetStorageHitachiPortVersionContext;
    wwn?: string;
    wwnn?: string;
    wwpn?: string;
}

/**
 * A collection of values returned by getStorageHitachiPort.
 */
export interface GetStorageHitachiPortResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageHitachiPortAncestor[];
    readonly array?: outputs.GetStorageHitachiPortArray;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly fabricMode?: boolean;
    readonly id: string;
    readonly ipv4Address?: string;
    readonly ipv6GlobalAddress?: string;
    readonly ipv6LinkLocalAddress?: string;
    readonly iqn?: string;
    readonly isIpv6Enable?: boolean;
    readonly loopId?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageHitachiPortParent;
    readonly permissionResources?: outputs.GetStorageHitachiPortPermissionResource[];
    readonly portConnection?: string;
    readonly portLunSecurity?: boolean;
    readonly portMode?: string;
    readonly registeredDevice?: outputs.GetStorageHitachiPortRegisteredDevice;
    readonly results: outputs.GetStorageHitachiPortResult[];
    readonly sharedScope?: string;
    readonly shortportId?: string;
    readonly speed?: number;
    readonly status?: string;
    readonly tags?: outputs.GetStorageHitachiPortTag[];
    readonly tcpMtu?: number;
    readonly type?: string;
    readonly versionContext?: outputs.GetStorageHitachiPortVersionContext;
    readonly wwn?: string;
    readonly wwnn?: string;
    readonly wwpn?: string;
}
export function getStorageHitachiPortOutput(args?: GetStorageHitachiPortOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageHitachiPortResult> {
    return pulumi.output(args).apply((a: any) => getStorageHitachiPort(a, opts))
}

/**
 * A collection of arguments for invoking getStorageHitachiPort.
 */
export interface GetStorageHitachiPortOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiPortAncestorArgs>[]>;
    array?: pulumi.Input<inputs.GetStorageHitachiPortArrayArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    fabricMode?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    ipv4Address?: pulumi.Input<string>;
    ipv6GlobalAddress?: pulumi.Input<string>;
    ipv6LinkLocalAddress?: pulumi.Input<string>;
    iqn?: pulumi.Input<string>;
    isIpv6Enable?: pulumi.Input<boolean>;
    loopId?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageHitachiPortParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiPortPermissionResourceArgs>[]>;
    portConnection?: pulumi.Input<string>;
    portLunSecurity?: pulumi.Input<boolean>;
    portMode?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetStorageHitachiPortRegisteredDeviceArgs>;
    sharedScope?: pulumi.Input<string>;
    shortportId?: pulumi.Input<string>;
    speed?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageHitachiPortTagArgs>[]>;
    tcpMtu?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetStorageHitachiPortVersionContextArgs>;
    wwn?: pulumi.Input<string>;
    wwnn?: pulumi.Input<string>;
    wwpn?: pulumi.Input<string>;
}
