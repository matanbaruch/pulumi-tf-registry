// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getUuidpoolPoolMember(args?: GetUuidpoolPoolMemberArgs, opts?: pulumi.InvokeOptions): Promise<GetUuidpoolPoolMemberResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getUuidpoolPoolMember:getUuidpoolPoolMember", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "assigned": args.assigned,
        "assignedByAnother": args.assignedByAnother,
        "assignedToEntity": args.assignedToEntity,
        "blockHead": args.blockHead,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "peer": args.peer,
        "permissionResources": args.permissionResources,
        "pool": args.pool,
        "reservation": args.reservation,
        "reserved": args.reserved,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "uuid": args.uuid,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getUuidpoolPoolMember.
 */
export interface GetUuidpoolPoolMemberArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetUuidpoolPoolMemberAncestor[];
    assigned?: boolean;
    assignedByAnother?: boolean;
    assignedToEntity?: inputs.GetUuidpoolPoolMemberAssignedToEntity;
    blockHead?: inputs.GetUuidpoolPoolMemberBlockHead;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetUuidpoolPoolMemberParent;
    peer?: inputs.GetUuidpoolPoolMemberPeer;
    permissionResources?: inputs.GetUuidpoolPoolMemberPermissionResource[];
    pool?: inputs.GetUuidpoolPoolMemberPool;
    reservation?: inputs.GetUuidpoolPoolMemberReservation;
    reserved?: boolean;
    sharedScope?: string;
    tags?: inputs.GetUuidpoolPoolMemberTag[];
    uuid?: string;
    versionContext?: inputs.GetUuidpoolPoolMemberVersionContext;
}

/**
 * A collection of values returned by getUuidpoolPoolMember.
 */
export interface GetUuidpoolPoolMemberResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetUuidpoolPoolMemberAncestor[];
    readonly assigned?: boolean;
    readonly assignedByAnother?: boolean;
    readonly assignedToEntity?: outputs.GetUuidpoolPoolMemberAssignedToEntity;
    readonly blockHead?: outputs.GetUuidpoolPoolMemberBlockHead;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetUuidpoolPoolMemberParent;
    readonly peer?: outputs.GetUuidpoolPoolMemberPeer;
    readonly permissionResources?: outputs.GetUuidpoolPoolMemberPermissionResource[];
    readonly pool?: outputs.GetUuidpoolPoolMemberPool;
    readonly reservation?: outputs.GetUuidpoolPoolMemberReservation;
    readonly reserved?: boolean;
    readonly results: outputs.GetUuidpoolPoolMemberResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetUuidpoolPoolMemberTag[];
    readonly uuid?: string;
    readonly versionContext?: outputs.GetUuidpoolPoolMemberVersionContext;
}
export function getUuidpoolPoolMemberOutput(args?: GetUuidpoolPoolMemberOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUuidpoolPoolMemberResult> {
    return pulumi.output(args).apply((a: any) => getUuidpoolPoolMember(a, opts))
}

/**
 * A collection of arguments for invoking getUuidpoolPoolMember.
 */
export interface GetUuidpoolPoolMemberOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetUuidpoolPoolMemberAncestorArgs>[]>;
    assigned?: pulumi.Input<boolean>;
    assignedByAnother?: pulumi.Input<boolean>;
    assignedToEntity?: pulumi.Input<inputs.GetUuidpoolPoolMemberAssignedToEntityArgs>;
    blockHead?: pulumi.Input<inputs.GetUuidpoolPoolMemberBlockHeadArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetUuidpoolPoolMemberParentArgs>;
    peer?: pulumi.Input<inputs.GetUuidpoolPoolMemberPeerArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetUuidpoolPoolMemberPermissionResourceArgs>[]>;
    pool?: pulumi.Input<inputs.GetUuidpoolPoolMemberPoolArgs>;
    reservation?: pulumi.Input<inputs.GetUuidpoolPoolMemberReservationArgs>;
    reserved?: pulumi.Input<boolean>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetUuidpoolPoolMemberTagArgs>[]>;
    uuid?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetUuidpoolPoolMemberVersionContextArgs>;
}
