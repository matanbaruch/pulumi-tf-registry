// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNiatelemetryNiaInventoryDcnm(args?: GetNiatelemetryNiaInventoryDcnmArgs, opts?: pulumi.InvokeOptions): Promise<GetNiatelemetryNiaInventoryDcnmResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getNiatelemetryNiaInventoryDcnm:getNiatelemetryNiaInventoryDcnm", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "controllerHealth": args.controllerHealth,
        "createTime": args.createTime,
        "dev": args.dev,
        "domainGroupMoid": args.domainGroupMoid,
        "epldImageCount": args.epldImageCount,
        "goldenImageDetails": args.goldenImageDetails,
        "haEnabled": args.haEnabled,
        "haReplicationStatus": args.haReplicationStatus,
        "id": args.id,
        "install": args.install,
        "installationType": args.installationType,
        "installationTypeDescription": args.installationTypeDescription,
        "isIsnConfigured": args.isIsnConfigured,
        "isMediaController": args.isMediaController,
        "isSmartLicenseEnabled": args.isSmartLicenseEnabled,
        "modTime": args.modTime,
        "mode": args.mode,
        "moid": args.moid,
        "ndfcFabricName": args.ndfcFabricName,
        "ndfcOperState": args.ndfcOperState,
        "networkInfo": args.networkInfo,
        "nrVersion": args.nrVersion,
        "numDcnmSite": args.numDcnmSite,
        "numFabrics": args.numFabrics,
        "numFabricsInMsd": args.numFabricsInMsd,
        "numIngressReplicationFabrics": args.numIngressReplicationFabrics,
        "numLocalUsers": args.numLocalUsers,
        "numMsd": args.numMsd,
        "numSviVrfCount": args.numSviVrfCount,
        "numTrmEnabledCount": args.numTrmEnabledCount,
        "numUpgUsers": args.numUpgUsers,
        "nxosImageCount": args.nxosImageCount,
        "objectType": args.objectType,
        "outofbandIp": args.outofbandIp,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "recordType": args.recordType,
        "recordVersion": args.recordVersion,
        "registeredDevice": args.registeredDevice,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "siteName": args.siteName,
        "tags": args.tags,
        "underlayPeeringActiveLinksCount": args.underlayPeeringActiveLinksCount,
        "upgJobCount": args.upgJobCount,
        "upgStatuses": args.upgStatuses,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNiatelemetryNiaInventoryDcnm.
 */
export interface GetNiatelemetryNiaInventoryDcnmArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetNiatelemetryNiaInventoryDcnmAncestor[];
    classId?: string;
    controllerHealth?: number;
    createTime?: string;
    dev?: boolean;
    domainGroupMoid?: string;
    epldImageCount?: number;
    goldenImageDetails?: inputs.GetNiatelemetryNiaInventoryDcnmGoldenImageDetail[];
    haEnabled?: boolean;
    haReplicationStatus?: string;
    id?: string;
    install?: string;
    installationType?: string;
    installationTypeDescription?: string;
    isIsnConfigured?: boolean;
    isMediaController?: boolean;
    isSmartLicenseEnabled?: boolean;
    modTime?: string;
    mode?: string;
    moid?: string;
    ndfcFabricName?: string;
    ndfcOperState?: string;
    networkInfo?: inputs.GetNiatelemetryNiaInventoryDcnmNetworkInfo;
    nrVersion?: string;
    numDcnmSite?: number;
    numFabrics?: number;
    numFabricsInMsd?: number;
    numIngressReplicationFabrics?: number;
    numLocalUsers?: number;
    numMsd?: number;
    numSviVrfCount?: number;
    numTrmEnabledCount?: number;
    numUpgUsers?: number;
    nxosImageCount?: number;
    objectType?: string;
    outofbandIp?: string;
    owners?: string[];
    parent?: inputs.GetNiatelemetryNiaInventoryDcnmParent;
    permissionResources?: inputs.GetNiatelemetryNiaInventoryDcnmPermissionResource[];
    recordType?: string;
    recordVersion?: string;
    registeredDevice?: inputs.GetNiatelemetryNiaInventoryDcnmRegisteredDevice;
    serial?: string;
    sharedScope?: string;
    siteName?: string;
    tags?: inputs.GetNiatelemetryNiaInventoryDcnmTag[];
    underlayPeeringActiveLinksCount?: number;
    upgJobCount?: number;
    upgStatuses?: inputs.GetNiatelemetryNiaInventoryDcnmUpgStatus[];
    versionContext?: inputs.GetNiatelemetryNiaInventoryDcnmVersionContext;
}

/**
 * A collection of values returned by getNiatelemetryNiaInventoryDcnm.
 */
export interface GetNiatelemetryNiaInventoryDcnmResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetNiatelemetryNiaInventoryDcnmAncestor[];
    readonly classId?: string;
    readonly controllerHealth?: number;
    readonly createTime?: string;
    readonly dev?: boolean;
    readonly domainGroupMoid?: string;
    readonly epldImageCount?: number;
    readonly goldenImageDetails?: outputs.GetNiatelemetryNiaInventoryDcnmGoldenImageDetail[];
    readonly haEnabled?: boolean;
    readonly haReplicationStatus?: string;
    readonly id: string;
    readonly install?: string;
    readonly installationType?: string;
    readonly installationTypeDescription?: string;
    readonly isIsnConfigured?: boolean;
    readonly isMediaController?: boolean;
    readonly isSmartLicenseEnabled?: boolean;
    readonly modTime?: string;
    readonly mode?: string;
    readonly moid?: string;
    readonly ndfcFabricName?: string;
    readonly ndfcOperState?: string;
    readonly networkInfo?: outputs.GetNiatelemetryNiaInventoryDcnmNetworkInfo;
    readonly nrVersion?: string;
    readonly numDcnmSite?: number;
    readonly numFabrics?: number;
    readonly numFabricsInMsd?: number;
    readonly numIngressReplicationFabrics?: number;
    readonly numLocalUsers?: number;
    readonly numMsd?: number;
    readonly numSviVrfCount?: number;
    readonly numTrmEnabledCount?: number;
    readonly numUpgUsers?: number;
    readonly nxosImageCount?: number;
    readonly objectType?: string;
    readonly outofbandIp?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetNiatelemetryNiaInventoryDcnmParent;
    readonly permissionResources?: outputs.GetNiatelemetryNiaInventoryDcnmPermissionResource[];
    readonly recordType?: string;
    readonly recordVersion?: string;
    readonly registeredDevice?: outputs.GetNiatelemetryNiaInventoryDcnmRegisteredDevice;
    readonly results: outputs.GetNiatelemetryNiaInventoryDcnmResult[];
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly siteName?: string;
    readonly tags?: outputs.GetNiatelemetryNiaInventoryDcnmTag[];
    readonly underlayPeeringActiveLinksCount?: number;
    readonly upgJobCount?: number;
    readonly upgStatuses?: outputs.GetNiatelemetryNiaInventoryDcnmUpgStatus[];
    readonly versionContext?: outputs.GetNiatelemetryNiaInventoryDcnmVersionContext;
}
export function getNiatelemetryNiaInventoryDcnmOutput(args?: GetNiatelemetryNiaInventoryDcnmOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNiatelemetryNiaInventoryDcnmResult> {
    return pulumi.output(args).apply((a: any) => getNiatelemetryNiaInventoryDcnm(a, opts))
}

/**
 * A collection of arguments for invoking getNiatelemetryNiaInventoryDcnm.
 */
export interface GetNiatelemetryNiaInventoryDcnmOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryNiaInventoryDcnmAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    controllerHealth?: pulumi.Input<number>;
    createTime?: pulumi.Input<string>;
    dev?: pulumi.Input<boolean>;
    domainGroupMoid?: pulumi.Input<string>;
    epldImageCount?: pulumi.Input<number>;
    goldenImageDetails?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryNiaInventoryDcnmGoldenImageDetailArgs>[]>;
    haEnabled?: pulumi.Input<boolean>;
    haReplicationStatus?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    install?: pulumi.Input<string>;
    installationType?: pulumi.Input<string>;
    installationTypeDescription?: pulumi.Input<string>;
    isIsnConfigured?: pulumi.Input<boolean>;
    isMediaController?: pulumi.Input<boolean>;
    isSmartLicenseEnabled?: pulumi.Input<boolean>;
    modTime?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    ndfcFabricName?: pulumi.Input<string>;
    ndfcOperState?: pulumi.Input<string>;
    networkInfo?: pulumi.Input<inputs.GetNiatelemetryNiaInventoryDcnmNetworkInfoArgs>;
    nrVersion?: pulumi.Input<string>;
    numDcnmSite?: pulumi.Input<number>;
    numFabrics?: pulumi.Input<number>;
    numFabricsInMsd?: pulumi.Input<number>;
    numIngressReplicationFabrics?: pulumi.Input<number>;
    numLocalUsers?: pulumi.Input<number>;
    numMsd?: pulumi.Input<number>;
    numSviVrfCount?: pulumi.Input<number>;
    numTrmEnabledCount?: pulumi.Input<number>;
    numUpgUsers?: pulumi.Input<number>;
    nxosImageCount?: pulumi.Input<number>;
    objectType?: pulumi.Input<string>;
    outofbandIp?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetNiatelemetryNiaInventoryDcnmParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryNiaInventoryDcnmPermissionResourceArgs>[]>;
    recordType?: pulumi.Input<string>;
    recordVersion?: pulumi.Input<string>;
    registeredDevice?: pulumi.Input<inputs.GetNiatelemetryNiaInventoryDcnmRegisteredDeviceArgs>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    siteName?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryNiaInventoryDcnmTagArgs>[]>;
    underlayPeeringActiveLinksCount?: pulumi.Input<number>;
    upgJobCount?: pulumi.Input<number>;
    upgStatuses?: pulumi.Input<pulumi.Input<inputs.GetNiatelemetryNiaInventoryDcnmUpgStatusArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetNiatelemetryNiaInventoryDcnmVersionContextArgs>;
}
