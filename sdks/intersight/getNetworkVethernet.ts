// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNetworkVethernet(args?: GetNetworkVethernetArgs, opts?: pulumi.InvokeOptions): Promise<GetNetworkVethernetResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getNetworkVethernet:getNetworkVethernet", {
        "accountMoid": args.accountMoid,
        "adapterHostEthInterface": args.adapterHostEthInterface,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "boundInterface": args.boundInterface,
        "boundInterfaceDn": args.boundInterfaceDn,
        "burst": args.burst,
        "classId": args.classId,
        "createTime": args.createTime,
        "description": args.description,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "networkElement": args.networkElement,
        "objectType": args.objectType,
        "operReason": args.operReason,
        "operState": args.operState,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "pinnedInterface": args.pinnedInterface,
        "pinnedInterfaceDn": args.pinnedInterfaceDn,
        "ratelimit": args.ratelimit,
        "registeredDevice": args.registeredDevice,
        "rn": args.rn,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
        "vethId": args.vethId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNetworkVethernet.
 */
export interface GetNetworkVethernetArgs {
    accountMoid?: string;
    adapterHostEthInterface?: inputs.GetNetworkVethernetAdapterHostEthInterface;
    additionalProperties?: string;
    ancestors?: inputs.GetNetworkVethernetAncestor[];
    boundInterface?: inputs.GetNetworkVethernetBoundInterface;
    boundInterfaceDn?: string;
    burst?: number;
    classId?: string;
    createTime?: string;
    description?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    networkElement?: inputs.GetNetworkVethernetNetworkElement;
    objectType?: string;
    operReason?: string;
    operState?: string;
    owners?: string[];
    parent?: inputs.GetNetworkVethernetParent;
    permissionResources?: inputs.GetNetworkVethernetPermissionResource[];
    pinnedInterface?: inputs.GetNetworkVethernetPinnedInterface;
    pinnedInterfaceDn?: string;
    ratelimit?: number;
    registeredDevice?: inputs.GetNetworkVethernetRegisteredDevice;
    rn?: string;
    sharedScope?: string;
    tags?: inputs.GetNetworkVethernetTag[];
    versionContext?: inputs.GetNetworkVethernetVersionContext;
    vethId?: number;
}

/**
 * A collection of values returned by getNetworkVethernet.
 */
export interface GetNetworkVethernetResult {
    readonly accountMoid?: string;
    readonly adapterHostEthInterface?: outputs.GetNetworkVethernetAdapterHostEthInterface;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetNetworkVethernetAncestor[];
    readonly boundInterface?: outputs.GetNetworkVethernetBoundInterface;
    readonly boundInterfaceDn?: string;
    readonly burst?: number;
    readonly classId?: string;
    readonly createTime?: string;
    readonly description?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly networkElement?: outputs.GetNetworkVethernetNetworkElement;
    readonly objectType?: string;
    readonly operReason?: string;
    readonly operState?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetNetworkVethernetParent;
    readonly permissionResources?: outputs.GetNetworkVethernetPermissionResource[];
    readonly pinnedInterface?: outputs.GetNetworkVethernetPinnedInterface;
    readonly pinnedInterfaceDn?: string;
    readonly ratelimit?: number;
    readonly registeredDevice?: outputs.GetNetworkVethernetRegisteredDevice;
    readonly results: outputs.GetNetworkVethernetResult[];
    readonly rn?: string;
    readonly sharedScope?: string;
    readonly tags?: outputs.GetNetworkVethernetTag[];
    readonly versionContext?: outputs.GetNetworkVethernetVersionContext;
    readonly vethId?: number;
}
export function getNetworkVethernetOutput(args?: GetNetworkVethernetOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkVethernetResult> {
    return pulumi.output(args).apply((a: any) => getNetworkVethernet(a, opts))
}

/**
 * A collection of arguments for invoking getNetworkVethernet.
 */
export interface GetNetworkVethernetOutputArgs {
    accountMoid?: pulumi.Input<string>;
    adapterHostEthInterface?: pulumi.Input<inputs.GetNetworkVethernetAdapterHostEthInterfaceArgs>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetNetworkVethernetAncestorArgs>[]>;
    boundInterface?: pulumi.Input<inputs.GetNetworkVethernetBoundInterfaceArgs>;
    boundInterfaceDn?: pulumi.Input<string>;
    burst?: pulumi.Input<number>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    networkElement?: pulumi.Input<inputs.GetNetworkVethernetNetworkElementArgs>;
    objectType?: pulumi.Input<string>;
    operReason?: pulumi.Input<string>;
    operState?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetNetworkVethernetParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetNetworkVethernetPermissionResourceArgs>[]>;
    pinnedInterface?: pulumi.Input<inputs.GetNetworkVethernetPinnedInterfaceArgs>;
    pinnedInterfaceDn?: pulumi.Input<string>;
    ratelimit?: pulumi.Input<number>;
    registeredDevice?: pulumi.Input<inputs.GetNetworkVethernetRegisteredDeviceArgs>;
    rn?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetNetworkVethernetTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetNetworkVethernetVersionContextArgs>;
    vethId?: pulumi.Input<number>;
}
