// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMacpoolReservation(args?: GetMacpoolReservationArgs, opts?: pulumi.InvokeOptions): Promise<GetMacpoolReservationResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getMacpoolReservation:getMacpoolReservation", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "allocationType": args.allocationType,
        "ancestors": args.ancestors,
        "blockHead": args.blockHead,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "identity": args.identity,
        "memberOfs": args.memberOfs,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "organization": args.organization,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "pool": args.pool,
        "poolMember": args.poolMember,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "universe": args.universe,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMacpoolReservation.
 */
export interface GetMacpoolReservationArgs {
    accountMoid?: string;
    additionalProperties?: string;
    allocationType?: string;
    ancestors?: inputs.GetMacpoolReservationAncestor[];
    blockHead?: inputs.GetMacpoolReservationBlockHead;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    id?: string;
    identity?: string;
    memberOfs?: inputs.GetMacpoolReservationMemberOf[];
    modTime?: string;
    moid?: string;
    objectType?: string;
    organization?: inputs.GetMacpoolReservationOrganization;
    owners?: string[];
    parent?: inputs.GetMacpoolReservationParent;
    permissionResources?: inputs.GetMacpoolReservationPermissionResource[];
    pool?: inputs.GetMacpoolReservationPool;
    poolMember?: inputs.GetMacpoolReservationPoolMember;
    sharedScope?: string;
    tags?: inputs.GetMacpoolReservationTag[];
    universe?: inputs.GetMacpoolReservationUniverse;
    versionContext?: inputs.GetMacpoolReservationVersionContext;
}

/**
 * A collection of values returned by getMacpoolReservation.
 */
export interface GetMacpoolReservationResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly allocationType?: string;
    readonly ancestors?: outputs.GetMacpoolReservationAncestor[];
    readonly blockHead?: outputs.GetMacpoolReservationBlockHead;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly identity?: string;
    readonly memberOfs?: outputs.GetMacpoolReservationMemberOf[];
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly organization?: outputs.GetMacpoolReservationOrganization;
    readonly owners?: string[];
    readonly parent?: outputs.GetMacpoolReservationParent;
    readonly permissionResources?: outputs.GetMacpoolReservationPermissionResource[];
    readonly pool?: outputs.GetMacpoolReservationPool;
    readonly poolMember?: outputs.GetMacpoolReservationPoolMember;
    readonly results: outputs.GetMacpoolReservationResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetMacpoolReservationTag[];
    readonly universe?: outputs.GetMacpoolReservationUniverse;
    readonly versionContext?: outputs.GetMacpoolReservationVersionContext;
}
export function getMacpoolReservationOutput(args?: GetMacpoolReservationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMacpoolReservationResult> {
    return pulumi.output(args).apply((a: any) => getMacpoolReservation(a, opts))
}

/**
 * A collection of arguments for invoking getMacpoolReservation.
 */
export interface GetMacpoolReservationOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    allocationType?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetMacpoolReservationAncestorArgs>[]>;
    blockHead?: pulumi.Input<inputs.GetMacpoolReservationBlockHeadArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    identity?: pulumi.Input<string>;
    memberOfs?: pulumi.Input<pulumi.Input<inputs.GetMacpoolReservationMemberOfArgs>[]>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    organization?: pulumi.Input<inputs.GetMacpoolReservationOrganizationArgs>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetMacpoolReservationParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetMacpoolReservationPermissionResourceArgs>[]>;
    pool?: pulumi.Input<inputs.GetMacpoolReservationPoolArgs>;
    poolMember?: pulumi.Input<inputs.GetMacpoolReservationPoolMemberArgs>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetMacpoolReservationTagArgs>[]>;
    universe?: pulumi.Input<inputs.GetMacpoolReservationUniverseArgs>;
    versionContext?: pulumi.Input<inputs.GetMacpoolReservationVersionContextArgs>;
}
