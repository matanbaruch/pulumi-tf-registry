// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIaasServiceRequest(args?: GetIaasServiceRequestArgs, opts?: pulumi.InvokeOptions): Promise<GetIaasServiceRequestResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getIaasServiceRequest:getIaasServiceRequest", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "duration": args.duration,
        "id": args.id,
        "initiatingUser": args.initiatingUser,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "registeredDevice": args.registeredDevice,
        "requestEndTime": args.requestEndTime,
        "requestId": args.requestId,
        "requestStartTime": args.requestStartTime,
        "requestType": args.requestType,
        "sharedScope": args.sharedScope,
        "status": args.status,
        "tags": args.tags,
        "versionContext": args.versionContext,
        "workflowName": args.workflowName,
        "workflowSteps": args.workflowSteps,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIaasServiceRequest.
 */
export interface GetIaasServiceRequestArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetIaasServiceRequestAncestor[];
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    duration?: string;
    id?: string;
    initiatingUser?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetIaasServiceRequestParent;
    permissionResources?: inputs.GetIaasServiceRequestPermissionResource[];
    registeredDevice?: inputs.GetIaasServiceRequestRegisteredDevice;
    requestEndTime?: string;
    requestId?: string;
    requestStartTime?: string;
    requestType?: string;
    sharedScope?: string;
    status?: string;
    tags?: inputs.GetIaasServiceRequestTag[];
    versionContext?: inputs.GetIaasServiceRequestVersionContext;
    workflowName?: string;
    workflowSteps?: inputs.GetIaasServiceRequestWorkflowStep[];
}

/**
 * A collection of values returned by getIaasServiceRequest.
 */
export interface GetIaasServiceRequestResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetIaasServiceRequestAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly duration?: string;
    readonly id: string;
    readonly initiatingUser?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetIaasServiceRequestParent;
    readonly permissionResources?: outputs.GetIaasServiceRequestPermissionResource[];
    readonly registeredDevice?: outputs.GetIaasServiceRequestRegisteredDevice;
    readonly requestEndTime?: string;
    readonly requestId?: string;
    readonly requestStartTime?: string;
    readonly requestType?: string;
    readonly results: outputs.GetIaasServiceRequestResult[];
    readonly sharedScope?: string;
    readonly status?: string;
    readonly tags?: outputs.GetIaasServiceRequestTag[];
    readonly versionContext?: outputs.GetIaasServiceRequestVersionContext;
    readonly workflowName?: string;
    readonly workflowSteps?: outputs.GetIaasServiceRequestWorkflowStep[];
}
export function getIaasServiceRequestOutput(args?: GetIaasServiceRequestOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIaasServiceRequestResult> {
    return pulumi.output(args).apply((a: any) => getIaasServiceRequest(a, opts))
}

/**
 * A collection of arguments for invoking getIaasServiceRequest.
 */
export interface GetIaasServiceRequestOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetIaasServiceRequestAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    duration?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    initiatingUser?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetIaasServiceRequestParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetIaasServiceRequestPermissionResourceArgs>[]>;
    registeredDevice?: pulumi.Input<inputs.GetIaasServiceRequestRegisteredDeviceArgs>;
    requestEndTime?: pulumi.Input<string>;
    requestId?: pulumi.Input<string>;
    requestStartTime?: pulumi.Input<string>;
    requestType?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetIaasServiceRequestTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetIaasServiceRequestVersionContextArgs>;
    workflowName?: pulumi.Input<string>;
    workflowSteps?: pulumi.Input<pulumi.Input<inputs.GetIaasServiceRequestWorkflowStepArgs>[]>;
}
