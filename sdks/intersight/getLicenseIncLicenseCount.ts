// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLicenseIncLicenseCount(args?: GetLicenseIncLicenseCountArgs, opts?: pulumi.InvokeOptions): Promise<GetLicenseIncLicenseCountResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getLicenseIncLicenseCount:getLicenseIncLicenseCount", {
        "accountLicenseData": args.accountLicenseData,
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "id": args.id,
        "modTime": args.modTime,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "premier100GfxCount": args.premier100GfxCount,
        "premier10GfxCount": args.premier10GfxCount,
        "premier1GfxCount": args.premier1GfxCount,
        "premierCentralizedMod8SlotCount": args.premierCentralizedMod8SlotCount,
        "premierD2OpsFixedCount": args.premierD2OpsFixedCount,
        "premierD2OpsModCount": args.premierD2OpsModCount,
        "premierDistributedMod8SlotCount": args.premierDistributedMod8SlotCount,
        "premierMod4SlotCount": args.premierMod4SlotCount,
        "premierMod8SlotCount": args.premierMod8SlotCount,
        "sharedScope": args.sharedScope,
        "tags": args.tags,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLicenseIncLicenseCount.
 */
export interface GetLicenseIncLicenseCountArgs {
    accountLicenseData?: inputs.GetLicenseIncLicenseCountAccountLicenseData;
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetLicenseIncLicenseCountAncestor[];
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    id?: string;
    modTime?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetLicenseIncLicenseCountParent;
    permissionResources?: inputs.GetLicenseIncLicenseCountPermissionResource[];
    premier100GfxCount?: number;
    premier10GfxCount?: number;
    premier1GfxCount?: number;
    premierCentralizedMod8SlotCount?: number;
    premierD2OpsFixedCount?: number;
    premierD2OpsModCount?: number;
    premierDistributedMod8SlotCount?: number;
    premierMod4SlotCount?: number;
    premierMod8SlotCount?: number;
    sharedScope?: string;
    tags?: inputs.GetLicenseIncLicenseCountTag[];
    versionContext?: inputs.GetLicenseIncLicenseCountVersionContext;
}

/**
 * A collection of values returned by getLicenseIncLicenseCount.
 */
export interface GetLicenseIncLicenseCountResult {
    readonly accountLicenseData?: outputs.GetLicenseIncLicenseCountAccountLicenseData;
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetLicenseIncLicenseCountAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly id: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetLicenseIncLicenseCountParent;
    readonly permissionResources?: outputs.GetLicenseIncLicenseCountPermissionResource[];
    readonly premier100GfxCount?: number;
    readonly premier10GfxCount?: number;
    readonly premier1GfxCount?: number;
    readonly premierCentralizedMod8SlotCount?: number;
    readonly premierD2OpsFixedCount?: number;
    readonly premierD2OpsModCount?: number;
    readonly premierDistributedMod8SlotCount?: number;
    readonly premierMod4SlotCount?: number;
    readonly premierMod8SlotCount?: number;
    readonly results: outputs.GetLicenseIncLicenseCountResult[];
    readonly sharedScope?: string;
    readonly tags?: outputs.GetLicenseIncLicenseCountTag[];
    readonly versionContext?: outputs.GetLicenseIncLicenseCountVersionContext;
}
export function getLicenseIncLicenseCountOutput(args?: GetLicenseIncLicenseCountOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLicenseIncLicenseCountResult> {
    return pulumi.output(args).apply((a: any) => getLicenseIncLicenseCount(a, opts))
}

/**
 * A collection of arguments for invoking getLicenseIncLicenseCount.
 */
export interface GetLicenseIncLicenseCountOutputArgs {
    accountLicenseData?: pulumi.Input<inputs.GetLicenseIncLicenseCountAccountLicenseDataArgs>;
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetLicenseIncLicenseCountAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetLicenseIncLicenseCountParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetLicenseIncLicenseCountPermissionResourceArgs>[]>;
    premier100GfxCount?: pulumi.Input<number>;
    premier10GfxCount?: pulumi.Input<number>;
    premier1GfxCount?: pulumi.Input<number>;
    premierCentralizedMod8SlotCount?: pulumi.Input<number>;
    premierD2OpsFixedCount?: pulumi.Input<number>;
    premierD2OpsModCount?: pulumi.Input<number>;
    premierDistributedMod8SlotCount?: pulumi.Input<number>;
    premierMod4SlotCount?: pulumi.Input<number>;
    premierMod8SlotCount?: pulumi.Input<number>;
    sharedScope?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetLicenseIncLicenseCountTagArgs>[]>;
    versionContext?: pulumi.Input<inputs.GetLicenseIncLicenseCountVersionContextArgs>;
}
