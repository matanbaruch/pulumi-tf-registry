// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageNetAppIpInterface(args?: GetStorageNetAppIpInterfaceArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageNetAppIpInterfaceResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageNetAppIpInterface:getStorageNetAppIpInterface", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "arrayController": args.arrayController,
        "classId": args.classId,
        "createTime": args.createTime,
        "domainGroupMoid": args.domainGroupMoid,
        "enabled": args.enabled,
        "events": args.events,
        "homeNode": args.homeNode,
        "homePort": args.homePort,
        "id": args.id,
        "ipAddress": args.ipAddress,
        "ipFamily": args.ipFamily,
        "modTime": args.modTime,
        "moid": args.moid,
        "name": args.name,
        "netAppEthernetPort": args.netAppEthernetPort,
        "netmask": args.netmask,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "servicePolicyName": args.servicePolicyName,
        "servicePolicyUuid": args.servicePolicyUuid,
        "services": args.services,
        "sharedScope": args.sharedScope,
        "state": args.state,
        "tags": args.tags,
        "tenant": args.tenant,
        "uuid": args.uuid,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageNetAppIpInterface.
 */
export interface GetStorageNetAppIpInterfaceArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageNetAppIpInterfaceAncestor[];
    arrayController?: inputs.GetStorageNetAppIpInterfaceArrayController;
    classId?: string;
    createTime?: string;
    domainGroupMoid?: string;
    enabled?: string;
    events?: inputs.GetStorageNetAppIpInterfaceEvent[];
    homeNode?: string;
    homePort?: string;
    id?: string;
    ipAddress?: string;
    ipFamily?: string;
    modTime?: string;
    moid?: string;
    name?: string;
    netAppEthernetPort?: inputs.GetStorageNetAppIpInterfaceNetAppEthernetPort;
    netmask?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageNetAppIpInterfaceParent;
    permissionResources?: inputs.GetStorageNetAppIpInterfacePermissionResource[];
    servicePolicyName?: string;
    servicePolicyUuid?: string;
    services?: string[];
    sharedScope?: string;
    state?: string;
    tags?: inputs.GetStorageNetAppIpInterfaceTag[];
    tenant?: inputs.GetStorageNetAppIpInterfaceTenant;
    uuid?: string;
    versionContext?: inputs.GetStorageNetAppIpInterfaceVersionContext;
}

/**
 * A collection of values returned by getStorageNetAppIpInterface.
 */
export interface GetStorageNetAppIpInterfaceResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageNetAppIpInterfaceAncestor[];
    readonly arrayController?: outputs.GetStorageNetAppIpInterfaceArrayController;
    readonly classId?: string;
    readonly createTime?: string;
    readonly domainGroupMoid?: string;
    readonly enabled?: string;
    readonly events?: outputs.GetStorageNetAppIpInterfaceEvent[];
    readonly homeNode?: string;
    readonly homePort?: string;
    readonly id: string;
    readonly ipAddress?: string;
    readonly ipFamily?: string;
    readonly modTime?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly netAppEthernetPort?: outputs.GetStorageNetAppIpInterfaceNetAppEthernetPort;
    readonly netmask?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageNetAppIpInterfaceParent;
    readonly permissionResources?: outputs.GetStorageNetAppIpInterfacePermissionResource[];
    readonly results: outputs.GetStorageNetAppIpInterfaceResult[];
    readonly servicePolicyName?: string;
    readonly servicePolicyUuid?: string;
    readonly services?: string[];
    readonly sharedScope?: string;
    readonly state?: string;
    readonly tags?: outputs.GetStorageNetAppIpInterfaceTag[];
    readonly tenant?: outputs.GetStorageNetAppIpInterfaceTenant;
    readonly uuid?: string;
    readonly versionContext?: outputs.GetStorageNetAppIpInterfaceVersionContext;
}
export function getStorageNetAppIpInterfaceOutput(args?: GetStorageNetAppIpInterfaceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageNetAppIpInterfaceResult> {
    return pulumi.output(args).apply((a: any) => getStorageNetAppIpInterface(a, opts))
}

/**
 * A collection of arguments for invoking getStorageNetAppIpInterface.
 */
export interface GetStorageNetAppIpInterfaceOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppIpInterfaceAncestorArgs>[]>;
    arrayController?: pulumi.Input<inputs.GetStorageNetAppIpInterfaceArrayControllerArgs>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    enabled?: pulumi.Input<string>;
    events?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppIpInterfaceEventArgs>[]>;
    homeNode?: pulumi.Input<string>;
    homePort?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    ipFamily?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    netAppEthernetPort?: pulumi.Input<inputs.GetStorageNetAppIpInterfaceNetAppEthernetPortArgs>;
    netmask?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageNetAppIpInterfaceParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppIpInterfacePermissionResourceArgs>[]>;
    servicePolicyName?: pulumi.Input<string>;
    servicePolicyUuid?: pulumi.Input<string>;
    services?: pulumi.Input<pulumi.Input<string>[]>;
    sharedScope?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppIpInterfaceTagArgs>[]>;
    tenant?: pulumi.Input<inputs.GetStorageNetAppIpInterfaceTenantArgs>;
    uuid?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetStorageNetAppIpInterfaceVersionContextArgs>;
}
