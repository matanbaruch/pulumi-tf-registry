// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageFlexFlashVirtualDrive(args?: GetStorageFlexFlashVirtualDriveArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageFlexFlashVirtualDriveResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageFlexFlashVirtualDrive:getStorageFlexFlashVirtualDrive", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "driveScope": args.driveScope,
        "driveStatus": args.driveStatus,
        "id": args.id,
        "inventoryDeviceInfo": args.inventoryDeviceInfo,
        "isUpgraded": args.isUpgraded,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "objectType": args.objectType,
        "owners": args.owners,
        "parent": args.parent,
        "partitionId": args.partitionId,
        "permissionResources": args.permissionResources,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "registeredDevice": args.registeredDevice,
        "residentImage": args.residentImage,
        "revision": args.revision,
        "rn": args.rn,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "size": args.size,
        "storageFlexFlashController": args.storageFlexFlashController,
        "tags": args.tags,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
        "virtualDrive": args.virtualDrive,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageFlexFlashVirtualDrive.
 */
export interface GetStorageFlexFlashVirtualDriveArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageFlexFlashVirtualDriveAncestor[];
    classId?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    driveScope?: string;
    driveStatus?: string;
    id?: string;
    inventoryDeviceInfo?: inputs.GetStorageFlexFlashVirtualDriveInventoryDeviceInfo;
    isUpgraded?: boolean;
    modTime?: string;
    model?: string;
    moid?: string;
    objectType?: string;
    owners?: string[];
    parent?: inputs.GetStorageFlexFlashVirtualDriveParent;
    partitionId?: string;
    permissionResources?: inputs.GetStorageFlexFlashVirtualDrivePermissionResource[];
    presence?: string;
    previousFru?: inputs.GetStorageFlexFlashVirtualDrivePreviousFru;
    registeredDevice?: inputs.GetStorageFlexFlashVirtualDriveRegisteredDevice;
    residentImage?: string;
    revision?: string;
    rn?: string;
    serial?: string;
    sharedScope?: string;
    size?: string;
    storageFlexFlashController?: inputs.GetStorageFlexFlashVirtualDriveStorageFlexFlashController;
    tags?: inputs.GetStorageFlexFlashVirtualDriveTag[];
    vendor?: string;
    versionContext?: inputs.GetStorageFlexFlashVirtualDriveVersionContext;
    virtualDrive?: string;
}

/**
 * A collection of values returned by getStorageFlexFlashVirtualDrive.
 */
export interface GetStorageFlexFlashVirtualDriveResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageFlexFlashVirtualDriveAncestor[];
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly driveScope?: string;
    readonly driveStatus?: string;
    readonly id: string;
    readonly inventoryDeviceInfo?: outputs.GetStorageFlexFlashVirtualDriveInventoryDeviceInfo;
    readonly isUpgraded?: boolean;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly objectType?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageFlexFlashVirtualDriveParent;
    readonly partitionId?: string;
    readonly permissionResources?: outputs.GetStorageFlexFlashVirtualDrivePermissionResource[];
    readonly presence?: string;
    readonly previousFru?: outputs.GetStorageFlexFlashVirtualDrivePreviousFru;
    readonly registeredDevice?: outputs.GetStorageFlexFlashVirtualDriveRegisteredDevice;
    readonly residentImage?: string;
    readonly results: outputs.GetStorageFlexFlashVirtualDriveResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly size?: string;
    readonly storageFlexFlashController?: outputs.GetStorageFlexFlashVirtualDriveStorageFlexFlashController;
    readonly tags?: outputs.GetStorageFlexFlashVirtualDriveTag[];
    readonly vendor?: string;
    readonly versionContext?: outputs.GetStorageFlexFlashVirtualDriveVersionContext;
    readonly virtualDrive?: string;
}
export function getStorageFlexFlashVirtualDriveOutput(args?: GetStorageFlexFlashVirtualDriveOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageFlexFlashVirtualDriveResult> {
    return pulumi.output(args).apply((a: any) => getStorageFlexFlashVirtualDrive(a, opts))
}

/**
 * A collection of arguments for invoking getStorageFlexFlashVirtualDrive.
 */
export interface GetStorageFlexFlashVirtualDriveOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageFlexFlashVirtualDriveAncestorArgs>[]>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    driveScope?: pulumi.Input<string>;
    driveStatus?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    inventoryDeviceInfo?: pulumi.Input<inputs.GetStorageFlexFlashVirtualDriveInventoryDeviceInfoArgs>;
    isUpgraded?: pulumi.Input<boolean>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageFlexFlashVirtualDriveParentArgs>;
    partitionId?: pulumi.Input<string>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageFlexFlashVirtualDrivePermissionResourceArgs>[]>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetStorageFlexFlashVirtualDrivePreviousFruArgs>;
    registeredDevice?: pulumi.Input<inputs.GetStorageFlexFlashVirtualDriveRegisteredDeviceArgs>;
    residentImage?: pulumi.Input<string>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    size?: pulumi.Input<string>;
    storageFlexFlashController?: pulumi.Input<inputs.GetStorageFlexFlashVirtualDriveStorageFlexFlashControllerArgs>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageFlexFlashVirtualDriveTagArgs>[]>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetStorageFlexFlashVirtualDriveVersionContextArgs>;
    virtualDrive?: pulumi.Input<string>;
}
