// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageNetAppNode(args?: GetStorageNetAppNodeArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageNetAppNodeResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("intersight:index/getStorageNetAppNode:getStorageNetAppNode", {
        "accountMoid": args.accountMoid,
        "additionalProperties": args.additionalProperties,
        "ancestors": args.ancestors,
        "array": args.array,
        "avgPerformanceMetrics": args.avgPerformanceMetrics,
        "cdpdEnabled": args.cdpdEnabled,
        "classId": args.classId,
        "createTime": args.createTime,
        "deviceMoId": args.deviceMoId,
        "dn": args.dn,
        "domainGroupMoid": args.domainGroupMoid,
        "events": args.events,
        "health": args.health,
        "highAvailability": args.highAvailability,
        "id": args.id,
        "isUpgraded": args.isUpgraded,
        "key": args.key,
        "modTime": args.modTime,
        "model": args.model,
        "moid": args.moid,
        "name": args.name,
        "nrVersion": args.nrVersion,
        "objectType": args.objectType,
        "operationalMode": args.operationalMode,
        "owners": args.owners,
        "parent": args.parent,
        "permissionResources": args.permissionResources,
        "presence": args.presence,
        "previousFru": args.previousFru,
        "revision": args.revision,
        "rn": args.rn,
        "serial": args.serial,
        "sharedScope": args.sharedScope,
        "state": args.state,
        "status": args.status,
        "systemid": args.systemid,
        "tags": args.tags,
        "uuid": args.uuid,
        "vendor": args.vendor,
        "versionContext": args.versionContext,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageNetAppNode.
 */
export interface GetStorageNetAppNodeArgs {
    accountMoid?: string;
    additionalProperties?: string;
    ancestors?: inputs.GetStorageNetAppNodeAncestor[];
    array?: inputs.GetStorageNetAppNodeArray;
    avgPerformanceMetrics?: inputs.GetStorageNetAppNodeAvgPerformanceMetrics;
    cdpdEnabled?: string;
    classId?: string;
    createTime?: string;
    deviceMoId?: string;
    dn?: string;
    domainGroupMoid?: string;
    events?: inputs.GetStorageNetAppNodeEvent[];
    health?: boolean;
    highAvailability?: inputs.GetStorageNetAppNodeHighAvailability;
    id?: string;
    isUpgraded?: boolean;
    key?: string;
    modTime?: string;
    model?: string;
    moid?: string;
    name?: string;
    nrVersion?: string;
    objectType?: string;
    operationalMode?: string;
    owners?: string[];
    parent?: inputs.GetStorageNetAppNodeParent;
    permissionResources?: inputs.GetStorageNetAppNodePermissionResource[];
    presence?: string;
    previousFru?: inputs.GetStorageNetAppNodePreviousFru;
    revision?: string;
    rn?: string;
    serial?: string;
    sharedScope?: string;
    state?: string;
    status?: string;
    systemid?: string;
    tags?: inputs.GetStorageNetAppNodeTag[];
    uuid?: string;
    vendor?: string;
    versionContext?: inputs.GetStorageNetAppNodeVersionContext;
}

/**
 * A collection of values returned by getStorageNetAppNode.
 */
export interface GetStorageNetAppNodeResult {
    readonly accountMoid?: string;
    readonly additionalProperties?: string;
    readonly ancestors?: outputs.GetStorageNetAppNodeAncestor[];
    readonly array?: outputs.GetStorageNetAppNodeArray;
    readonly avgPerformanceMetrics?: outputs.GetStorageNetAppNodeAvgPerformanceMetrics;
    readonly cdpdEnabled?: string;
    readonly classId?: string;
    readonly createTime?: string;
    readonly deviceMoId?: string;
    readonly dn?: string;
    readonly domainGroupMoid?: string;
    readonly events?: outputs.GetStorageNetAppNodeEvent[];
    readonly health?: boolean;
    readonly highAvailability?: outputs.GetStorageNetAppNodeHighAvailability;
    readonly id: string;
    readonly isUpgraded?: boolean;
    readonly key?: string;
    readonly modTime?: string;
    readonly model?: string;
    readonly moid?: string;
    readonly name?: string;
    readonly nrVersion?: string;
    readonly objectType?: string;
    readonly operationalMode?: string;
    readonly owners?: string[];
    readonly parent?: outputs.GetStorageNetAppNodeParent;
    readonly permissionResources?: outputs.GetStorageNetAppNodePermissionResource[];
    readonly presence?: string;
    readonly previousFru?: outputs.GetStorageNetAppNodePreviousFru;
    readonly results: outputs.GetStorageNetAppNodeResult[];
    readonly revision?: string;
    readonly rn?: string;
    readonly serial?: string;
    readonly sharedScope?: string;
    readonly state?: string;
    readonly status?: string;
    readonly systemid?: string;
    readonly tags?: outputs.GetStorageNetAppNodeTag[];
    readonly uuid?: string;
    readonly vendor?: string;
    readonly versionContext?: outputs.GetStorageNetAppNodeVersionContext;
}
export function getStorageNetAppNodeOutput(args?: GetStorageNetAppNodeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageNetAppNodeResult> {
    return pulumi.output(args).apply((a: any) => getStorageNetAppNode(a, opts))
}

/**
 * A collection of arguments for invoking getStorageNetAppNode.
 */
export interface GetStorageNetAppNodeOutputArgs {
    accountMoid?: pulumi.Input<string>;
    additionalProperties?: pulumi.Input<string>;
    ancestors?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppNodeAncestorArgs>[]>;
    array?: pulumi.Input<inputs.GetStorageNetAppNodeArrayArgs>;
    avgPerformanceMetrics?: pulumi.Input<inputs.GetStorageNetAppNodeAvgPerformanceMetricsArgs>;
    cdpdEnabled?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    deviceMoId?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    domainGroupMoid?: pulumi.Input<string>;
    events?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppNodeEventArgs>[]>;
    health?: pulumi.Input<boolean>;
    highAvailability?: pulumi.Input<inputs.GetStorageNetAppNodeHighAvailabilityArgs>;
    id?: pulumi.Input<string>;
    isUpgraded?: pulumi.Input<boolean>;
    key?: pulumi.Input<string>;
    modTime?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    moid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nrVersion?: pulumi.Input<string>;
    objectType?: pulumi.Input<string>;
    operationalMode?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    parent?: pulumi.Input<inputs.GetStorageNetAppNodeParentArgs>;
    permissionResources?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppNodePermissionResourceArgs>[]>;
    presence?: pulumi.Input<string>;
    previousFru?: pulumi.Input<inputs.GetStorageNetAppNodePreviousFruArgs>;
    revision?: pulumi.Input<string>;
    rn?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    sharedScope?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    systemid?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetStorageNetAppNodeTagArgs>[]>;
    uuid?: pulumi.Input<string>;
    vendor?: pulumi.Input<string>;
    versionContext?: pulumi.Input<inputs.GetStorageNetAppNodeVersionContextArgs>;
}
