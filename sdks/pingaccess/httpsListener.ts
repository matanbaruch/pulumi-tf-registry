// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class HttpsListener extends pulumi.CustomResource {
    /**
     * Get an existing HttpsListener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HttpsListenerState, opts?: pulumi.CustomResourceOptions): HttpsListener {
        return new HttpsListener(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingaccess:index/httpsListener:HttpsListener';

    /**
     * Returns true if the given object is an instance of HttpsListener.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HttpsListener {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HttpsListener.__pulumiType;
    }

    /**
     * The ID of the default key pair used by the HTTPS listener.
     */
    public readonly keyPairId!: pulumi.Output<number>;
    /**
     * The name of the HTTPS listener. One of `ADMIN`, `AGENT`, `ENGINE`, `CONFIG QUERY`, `SIDEBAND`
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Enable server cipher suite ordering for the HTTPS listener.
     */
    public readonly useServerCipherSuiteOrder!: pulumi.Output<boolean>;

    /**
     * Create a HttpsListener resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HttpsListenerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HttpsListenerArgs | HttpsListenerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HttpsListenerState | undefined;
            resourceInputs["keyPairId"] = state ? state.keyPairId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["useServerCipherSuiteOrder"] = state ? state.useServerCipherSuiteOrder : undefined;
        } else {
            const args = argsOrState as HttpsListenerArgs | undefined;
            if ((!args || args.keyPairId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyPairId'");
            }
            if ((!args || args.useServerCipherSuiteOrder === undefined) && !opts.urn) {
                throw new Error("Missing required property 'useServerCipherSuiteOrder'");
            }
            resourceInputs["keyPairId"] = args ? args.keyPairId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["useServerCipherSuiteOrder"] = args ? args.useServerCipherSuiteOrder : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HttpsListener.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HttpsListener resources.
 */
export interface HttpsListenerState {
    /**
     * The ID of the default key pair used by the HTTPS listener.
     */
    keyPairId?: pulumi.Input<number>;
    /**
     * The name of the HTTPS listener. One of `ADMIN`, `AGENT`, `ENGINE`, `CONFIG QUERY`, `SIDEBAND`
     */
    name?: pulumi.Input<string>;
    /**
     * Enable server cipher suite ordering for the HTTPS listener.
     */
    useServerCipherSuiteOrder?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a HttpsListener resource.
 */
export interface HttpsListenerArgs {
    /**
     * The ID of the default key pair used by the HTTPS listener.
     */
    keyPairId: pulumi.Input<number>;
    /**
     * The name of the HTTPS listener. One of `ADMIN`, `AGENT`, `ENGINE`, `CONFIG QUERY`, `SIDEBAND`
     */
    name?: pulumi.Input<string>;
    /**
     * Enable server cipher suite ordering for the HTTPS listener.
     */
    useServerCipherSuiteOrder: pulumi.Input<boolean>;
}
