// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class TrustedCertificateGroup extends pulumi.CustomResource {
    /**
     * Get an existing TrustedCertificateGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrustedCertificateGroupState, opts?: pulumi.CustomResourceOptions): TrustedCertificateGroup {
        return new TrustedCertificateGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingaccess:index/trustedCertificateGroup:TrustedCertificateGroup';

    /**
     * Returns true if the given object is an instance of TrustedCertificateGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TrustedCertificateGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrustedCertificateGroup.__pulumiType;
    }

    /**
     * The IDs of the certificates that are in the trusted certificate group.
     */
    public readonly certIds!: pulumi.Output<string[] | undefined>;
    /**
     * This field is read-only and is only set to true for the Trust Any certificate group.
     *
     * @deprecated Deprecated
     */
    public readonly ignoreAllCertificateErrors!: pulumi.Output<boolean>;
    /**
     * The name of trusted certificate group.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * This field is true if certificates that have expired or are not yet valid but have passed the other certificate checks
     * should be trusted.
     */
    public readonly skipCertificateDateCheck!: pulumi.Output<boolean | undefined>;
    /**
     * This field is read-only and indicates the trusted certificate group cannot be modified.
     */
    public /*out*/ readonly systemGroup!: pulumi.Output<boolean>;
    /**
     * This field is true if the certificates in the group should also include all certificates in the Java Trust Store.
     */
    public readonly useJavaTrustStore!: pulumi.Output<boolean | undefined>;

    /**
     * Create a TrustedCertificateGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TrustedCertificateGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrustedCertificateGroupArgs | TrustedCertificateGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TrustedCertificateGroupState | undefined;
            resourceInputs["certIds"] = state ? state.certIds : undefined;
            resourceInputs["ignoreAllCertificateErrors"] = state ? state.ignoreAllCertificateErrors : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["skipCertificateDateCheck"] = state ? state.skipCertificateDateCheck : undefined;
            resourceInputs["systemGroup"] = state ? state.systemGroup : undefined;
            resourceInputs["useJavaTrustStore"] = state ? state.useJavaTrustStore : undefined;
        } else {
            const args = argsOrState as TrustedCertificateGroupArgs | undefined;
            resourceInputs["certIds"] = args ? args.certIds : undefined;
            resourceInputs["ignoreAllCertificateErrors"] = args ? args.ignoreAllCertificateErrors : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["skipCertificateDateCheck"] = args ? args.skipCertificateDateCheck : undefined;
            resourceInputs["useJavaTrustStore"] = args ? args.useJavaTrustStore : undefined;
            resourceInputs["systemGroup"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TrustedCertificateGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TrustedCertificateGroup resources.
 */
export interface TrustedCertificateGroupState {
    /**
     * The IDs of the certificates that are in the trusted certificate group.
     */
    certIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This field is read-only and is only set to true for the Trust Any certificate group.
     *
     * @deprecated Deprecated
     */
    ignoreAllCertificateErrors?: pulumi.Input<boolean>;
    /**
     * The name of trusted certificate group.
     */
    name?: pulumi.Input<string>;
    /**
     * This field is true if certificates that have expired or are not yet valid but have passed the other certificate checks
     * should be trusted.
     */
    skipCertificateDateCheck?: pulumi.Input<boolean>;
    /**
     * This field is read-only and indicates the trusted certificate group cannot be modified.
     */
    systemGroup?: pulumi.Input<boolean>;
    /**
     * This field is true if the certificates in the group should also include all certificates in the Java Trust Store.
     */
    useJavaTrustStore?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a TrustedCertificateGroup resource.
 */
export interface TrustedCertificateGroupArgs {
    /**
     * The IDs of the certificates that are in the trusted certificate group.
     */
    certIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This field is read-only and is only set to true for the Trust Any certificate group.
     *
     * @deprecated Deprecated
     */
    ignoreAllCertificateErrors?: pulumi.Input<boolean>;
    /**
     * The name of trusted certificate group.
     */
    name?: pulumi.Input<string>;
    /**
     * This field is true if certificates that have expired or are not yet valid but have passed the other certificate checks
     * should be trusted.
     */
    skipCertificateDateCheck?: pulumi.Input<boolean>;
    /**
     * This field is true if the certificates in the group should also include all certificates in the Java Trust Store.
     */
    useJavaTrustStore?: pulumi.Input<boolean>;
}
