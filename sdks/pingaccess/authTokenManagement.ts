// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AuthTokenManagement extends pulumi.CustomResource {
    /**
     * Get an existing AuthTokenManagement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthTokenManagementState, opts?: pulumi.CustomResourceOptions): AuthTokenManagement {
        return new AuthTokenManagement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingaccess:index/authTokenManagement:AuthTokenManagement';

    /**
     * Returns true if the given object is an instance of AuthTokenManagement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthTokenManagement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthTokenManagement.__pulumiType;
    }

    /**
     * The issuer value to include in auth tokens. PingAccess inserts this value as the iss claim within the auth tokens.
     */
    public readonly issuer!: pulumi.Output<string | undefined>;
    /**
     * This field is true if key rollover is enabled. When false, PingAccess will not rollover keys at the configured interval.
     */
    public readonly keyRollEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The interval (in hours) at which PingAccess will roll the keys. Key rollover updates keys at regular intervals to ensure
     * the security of signed auth tokens.
     */
    public readonly keyRollPeriodInHours!: pulumi.Output<number | undefined>;
    /**
     * The signing algorithm used when creating signed auth tokens.
     */
    public readonly signingAlgorithm!: pulumi.Output<string | undefined>;

    /**
     * Create a AuthTokenManagement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AuthTokenManagementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthTokenManagementArgs | AuthTokenManagementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthTokenManagementState | undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["keyRollEnabled"] = state ? state.keyRollEnabled : undefined;
            resourceInputs["keyRollPeriodInHours"] = state ? state.keyRollPeriodInHours : undefined;
            resourceInputs["signingAlgorithm"] = state ? state.signingAlgorithm : undefined;
        } else {
            const args = argsOrState as AuthTokenManagementArgs | undefined;
            resourceInputs["issuer"] = args ? args.issuer : undefined;
            resourceInputs["keyRollEnabled"] = args ? args.keyRollEnabled : undefined;
            resourceInputs["keyRollPeriodInHours"] = args ? args.keyRollPeriodInHours : undefined;
            resourceInputs["signingAlgorithm"] = args ? args.signingAlgorithm : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AuthTokenManagement.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AuthTokenManagement resources.
 */
export interface AuthTokenManagementState {
    /**
     * The issuer value to include in auth tokens. PingAccess inserts this value as the iss claim within the auth tokens.
     */
    issuer?: pulumi.Input<string>;
    /**
     * This field is true if key rollover is enabled. When false, PingAccess will not rollover keys at the configured interval.
     */
    keyRollEnabled?: pulumi.Input<boolean>;
    /**
     * The interval (in hours) at which PingAccess will roll the keys. Key rollover updates keys at regular intervals to ensure
     * the security of signed auth tokens.
     */
    keyRollPeriodInHours?: pulumi.Input<number>;
    /**
     * The signing algorithm used when creating signed auth tokens.
     */
    signingAlgorithm?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuthTokenManagement resource.
 */
export interface AuthTokenManagementArgs {
    /**
     * The issuer value to include in auth tokens. PingAccess inserts this value as the iss claim within the auth tokens.
     */
    issuer?: pulumi.Input<string>;
    /**
     * This field is true if key rollover is enabled. When false, PingAccess will not rollover keys at the configured interval.
     */
    keyRollEnabled?: pulumi.Input<boolean>;
    /**
     * The interval (in hours) at which PingAccess will roll the keys. Key rollover updates keys at regular intervals to ensure
     * the security of signed auth tokens.
     */
    keyRollPeriodInHours?: pulumi.Input<number>;
    /**
     * The signing algorithm used when creating signed auth tokens.
     */
    signingAlgorithm?: pulumi.Input<string>;
}
