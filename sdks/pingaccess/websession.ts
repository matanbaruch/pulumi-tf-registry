// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Websession extends pulumi.CustomResource {
    /**
     * Get an existing Websession resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebsessionState, opts?: pulumi.CustomResourceOptions): Websession {
        return new Websession(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingaccess:index/websession:Websession';

    /**
     * Returns true if the given object is an instance of Websession.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Websession {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Websession.__pulumiType;
    }

    /**
     * Enter a unique identifier between 1 and 32 characters that defines who the PA Token is applicable to.
     */
    public readonly audience!: pulumi.Output<string>;
    /**
     * Specify if PingAccess should cache user attribute information for use in policy decisions. When disabled, this data is
     * encoded and stored in the session cookie.
     */
    public readonly cacheUserAttributes!: pulumi.Output<boolean | undefined>;
    /**
     * Specify the client credentials.
     */
    public readonly clientCredentials!: pulumi.Output<outputs.WebsessionClientCredentials | undefined>;
    /**
     * The domain where the cookie is stored--for example, corp.yourcompany.com.
     */
    public readonly cookieDomain!: pulumi.Output<string | undefined>;
    /**
     * Specify an Encrypted JWT or a Signed JWT web session cookie. Default is Encrypted.
     */
    public readonly cookieType!: pulumi.Output<string | undefined>;
    /**
     * Specify if you want to have PingAccess periodically refresh user data from PingFederate for use in policy decisions.
     */
    public readonly enableRefreshUser!: pulumi.Output<boolean | undefined>;
    /**
     * Enable the HttpOnly flag on cookies that contain the PA Token.
     */
    public readonly httpOnlyCookie!: pulumi.Output<boolean | undefined>;
    /**
     * The length of time you want the PingAccess Token to remain active when no activity is detected.
     */
    public readonly idleTimeoutInMinutes!: pulumi.Output<number | undefined>;
    /**
     * The name of the web session.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The web session token type.
     */
    public readonly oidcLoginType!: pulumi.Output<string | undefined>;
    /**
     * Specify the number of seconds to cache PingFederate Session State information.
     */
    public readonly pfsessionStateCacheInSeconds!: pulumi.Output<number | undefined>;
    /**
     * Specify the code_challenge_method to use for PKCE during the Code login flow. OFF signifies to not use PKCE.
     */
    public readonly pkceChallengeType!: pulumi.Output<string | undefined>;
    /**
     * Specify the maximum number of seconds to cache user attribute information when the Refresh User is enabled.
     */
    public readonly refreshUserInfoClaimsInterval!: pulumi.Output<number | undefined>;
    /**
     * Specify the types of request data to be preserved if the user is redirected to an authentication page when submitting
     * information to a protected resource.
     */
    public readonly requestPreservationType!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether the default scopes ('profile', 'email', 'address', and 'phone') should be specified in the access
     * request.
     *
     * @deprecated Deprecated
     */
    public readonly requestProfile!: pulumi.Output<boolean | undefined>;
    /**
     * Specify the SameSite attribute to be used when setting the PingAccess Cookie. Default is None which allows the cookie to
     * be used in a third-party context. If the cookie is not used in a third-party context then Lax is recommended.
     */
    public readonly sameSite!: pulumi.Output<string | undefined>;
    /**
     * The list of scopes to be specified in the access request. If not specified, the default scopes ('profile', 'email',
     * 'address', and 'phone') will be used. The openid scope is implied and does not need to be specified in this list.
     */
    public readonly scopes!: pulumi.Output<string[] | undefined>;
    /**
     * Specify whether the PingAccess Cookie must be sent using only HTTPS connections.
     */
    public readonly secureCookie!: pulumi.Output<boolean | undefined>;
    /**
     * Specify if you want to send the requested URL as part of the authentication request to the OpenID Connect Provider.
     */
    public readonly sendRequestedUrlToProvider!: pulumi.Output<boolean | undefined>;
    /**
     * The length of time you want the PA Token to remain active. Once the PA Token expires, an authenticated user must
     * re-authenticate.
     */
    public readonly sessionTimeoutInMinutes!: pulumi.Output<number | undefined>;
    /**
     * Specify if PingAccess should validate sessions with the configured PingFederate instance during request processing.
     */
    public readonly validateSessionIsAlive!: pulumi.Output<boolean | undefined>;
    /**
     * Specify the type of web storage to use for request preservation data, either `SessionStorage` or `LocalStorage`. Default
     * is SessionStorage.
     */
    public readonly webStorageType!: pulumi.Output<string | undefined>;

    /**
     * Create a Websession resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebsessionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebsessionArgs | WebsessionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebsessionState | undefined;
            resourceInputs["audience"] = state ? state.audience : undefined;
            resourceInputs["cacheUserAttributes"] = state ? state.cacheUserAttributes : undefined;
            resourceInputs["clientCredentials"] = state ? state.clientCredentials : undefined;
            resourceInputs["cookieDomain"] = state ? state.cookieDomain : undefined;
            resourceInputs["cookieType"] = state ? state.cookieType : undefined;
            resourceInputs["enableRefreshUser"] = state ? state.enableRefreshUser : undefined;
            resourceInputs["httpOnlyCookie"] = state ? state.httpOnlyCookie : undefined;
            resourceInputs["idleTimeoutInMinutes"] = state ? state.idleTimeoutInMinutes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oidcLoginType"] = state ? state.oidcLoginType : undefined;
            resourceInputs["pfsessionStateCacheInSeconds"] = state ? state.pfsessionStateCacheInSeconds : undefined;
            resourceInputs["pkceChallengeType"] = state ? state.pkceChallengeType : undefined;
            resourceInputs["refreshUserInfoClaimsInterval"] = state ? state.refreshUserInfoClaimsInterval : undefined;
            resourceInputs["requestPreservationType"] = state ? state.requestPreservationType : undefined;
            resourceInputs["requestProfile"] = state ? state.requestProfile : undefined;
            resourceInputs["sameSite"] = state ? state.sameSite : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["secureCookie"] = state ? state.secureCookie : undefined;
            resourceInputs["sendRequestedUrlToProvider"] = state ? state.sendRequestedUrlToProvider : undefined;
            resourceInputs["sessionTimeoutInMinutes"] = state ? state.sessionTimeoutInMinutes : undefined;
            resourceInputs["validateSessionIsAlive"] = state ? state.validateSessionIsAlive : undefined;
            resourceInputs["webStorageType"] = state ? state.webStorageType : undefined;
        } else {
            const args = argsOrState as WebsessionArgs | undefined;
            if ((!args || args.audience === undefined) && !opts.urn) {
                throw new Error("Missing required property 'audience'");
            }
            resourceInputs["audience"] = args ? args.audience : undefined;
            resourceInputs["cacheUserAttributes"] = args ? args.cacheUserAttributes : undefined;
            resourceInputs["clientCredentials"] = args ? args.clientCredentials : undefined;
            resourceInputs["cookieDomain"] = args ? args.cookieDomain : undefined;
            resourceInputs["cookieType"] = args ? args.cookieType : undefined;
            resourceInputs["enableRefreshUser"] = args ? args.enableRefreshUser : undefined;
            resourceInputs["httpOnlyCookie"] = args ? args.httpOnlyCookie : undefined;
            resourceInputs["idleTimeoutInMinutes"] = args ? args.idleTimeoutInMinutes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["oidcLoginType"] = args ? args.oidcLoginType : undefined;
            resourceInputs["pfsessionStateCacheInSeconds"] = args ? args.pfsessionStateCacheInSeconds : undefined;
            resourceInputs["pkceChallengeType"] = args ? args.pkceChallengeType : undefined;
            resourceInputs["refreshUserInfoClaimsInterval"] = args ? args.refreshUserInfoClaimsInterval : undefined;
            resourceInputs["requestPreservationType"] = args ? args.requestPreservationType : undefined;
            resourceInputs["requestProfile"] = args ? args.requestProfile : undefined;
            resourceInputs["sameSite"] = args ? args.sameSite : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["secureCookie"] = args ? args.secureCookie : undefined;
            resourceInputs["sendRequestedUrlToProvider"] = args ? args.sendRequestedUrlToProvider : undefined;
            resourceInputs["sessionTimeoutInMinutes"] = args ? args.sessionTimeoutInMinutes : undefined;
            resourceInputs["validateSessionIsAlive"] = args ? args.validateSessionIsAlive : undefined;
            resourceInputs["webStorageType"] = args ? args.webStorageType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Websession.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Websession resources.
 */
export interface WebsessionState {
    /**
     * Enter a unique identifier between 1 and 32 characters that defines who the PA Token is applicable to.
     */
    audience?: pulumi.Input<string>;
    /**
     * Specify if PingAccess should cache user attribute information for use in policy decisions. When disabled, this data is
     * encoded and stored in the session cookie.
     */
    cacheUserAttributes?: pulumi.Input<boolean>;
    /**
     * Specify the client credentials.
     */
    clientCredentials?: pulumi.Input<inputs.WebsessionClientCredentials>;
    /**
     * The domain where the cookie is stored--for example, corp.yourcompany.com.
     */
    cookieDomain?: pulumi.Input<string>;
    /**
     * Specify an Encrypted JWT or a Signed JWT web session cookie. Default is Encrypted.
     */
    cookieType?: pulumi.Input<string>;
    /**
     * Specify if you want to have PingAccess periodically refresh user data from PingFederate for use in policy decisions.
     */
    enableRefreshUser?: pulumi.Input<boolean>;
    /**
     * Enable the HttpOnly flag on cookies that contain the PA Token.
     */
    httpOnlyCookie?: pulumi.Input<boolean>;
    /**
     * The length of time you want the PingAccess Token to remain active when no activity is detected.
     */
    idleTimeoutInMinutes?: pulumi.Input<number>;
    /**
     * The name of the web session.
     */
    name?: pulumi.Input<string>;
    /**
     * The web session token type.
     */
    oidcLoginType?: pulumi.Input<string>;
    /**
     * Specify the number of seconds to cache PingFederate Session State information.
     */
    pfsessionStateCacheInSeconds?: pulumi.Input<number>;
    /**
     * Specify the code_challenge_method to use for PKCE during the Code login flow. OFF signifies to not use PKCE.
     */
    pkceChallengeType?: pulumi.Input<string>;
    /**
     * Specify the maximum number of seconds to cache user attribute information when the Refresh User is enabled.
     */
    refreshUserInfoClaimsInterval?: pulumi.Input<number>;
    /**
     * Specify the types of request data to be preserved if the user is redirected to an authentication page when submitting
     * information to a protected resource.
     */
    requestPreservationType?: pulumi.Input<string>;
    /**
     * Specifies whether the default scopes ('profile', 'email', 'address', and 'phone') should be specified in the access
     * request.
     *
     * @deprecated Deprecated
     */
    requestProfile?: pulumi.Input<boolean>;
    /**
     * Specify the SameSite attribute to be used when setting the PingAccess Cookie. Default is None which allows the cookie to
     * be used in a third-party context. If the cookie is not used in a third-party context then Lax is recommended.
     */
    sameSite?: pulumi.Input<string>;
    /**
     * The list of scopes to be specified in the access request. If not specified, the default scopes ('profile', 'email',
     * 'address', and 'phone') will be used. The openid scope is implied and does not need to be specified in this list.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specify whether the PingAccess Cookie must be sent using only HTTPS connections.
     */
    secureCookie?: pulumi.Input<boolean>;
    /**
     * Specify if you want to send the requested URL as part of the authentication request to the OpenID Connect Provider.
     */
    sendRequestedUrlToProvider?: pulumi.Input<boolean>;
    /**
     * The length of time you want the PA Token to remain active. Once the PA Token expires, an authenticated user must
     * re-authenticate.
     */
    sessionTimeoutInMinutes?: pulumi.Input<number>;
    /**
     * Specify if PingAccess should validate sessions with the configured PingFederate instance during request processing.
     */
    validateSessionIsAlive?: pulumi.Input<boolean>;
    /**
     * Specify the type of web storage to use for request preservation data, either `SessionStorage` or `LocalStorage`. Default
     * is SessionStorage.
     */
    webStorageType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Websession resource.
 */
export interface WebsessionArgs {
    /**
     * Enter a unique identifier between 1 and 32 characters that defines who the PA Token is applicable to.
     */
    audience: pulumi.Input<string>;
    /**
     * Specify if PingAccess should cache user attribute information for use in policy decisions. When disabled, this data is
     * encoded and stored in the session cookie.
     */
    cacheUserAttributes?: pulumi.Input<boolean>;
    /**
     * Specify the client credentials.
     */
    clientCredentials?: pulumi.Input<inputs.WebsessionClientCredentials>;
    /**
     * The domain where the cookie is stored--for example, corp.yourcompany.com.
     */
    cookieDomain?: pulumi.Input<string>;
    /**
     * Specify an Encrypted JWT or a Signed JWT web session cookie. Default is Encrypted.
     */
    cookieType?: pulumi.Input<string>;
    /**
     * Specify if you want to have PingAccess periodically refresh user data from PingFederate for use in policy decisions.
     */
    enableRefreshUser?: pulumi.Input<boolean>;
    /**
     * Enable the HttpOnly flag on cookies that contain the PA Token.
     */
    httpOnlyCookie?: pulumi.Input<boolean>;
    /**
     * The length of time you want the PingAccess Token to remain active when no activity is detected.
     */
    idleTimeoutInMinutes?: pulumi.Input<number>;
    /**
     * The name of the web session.
     */
    name?: pulumi.Input<string>;
    /**
     * The web session token type.
     */
    oidcLoginType?: pulumi.Input<string>;
    /**
     * Specify the number of seconds to cache PingFederate Session State information.
     */
    pfsessionStateCacheInSeconds?: pulumi.Input<number>;
    /**
     * Specify the code_challenge_method to use for PKCE during the Code login flow. OFF signifies to not use PKCE.
     */
    pkceChallengeType?: pulumi.Input<string>;
    /**
     * Specify the maximum number of seconds to cache user attribute information when the Refresh User is enabled.
     */
    refreshUserInfoClaimsInterval?: pulumi.Input<number>;
    /**
     * Specify the types of request data to be preserved if the user is redirected to an authentication page when submitting
     * information to a protected resource.
     */
    requestPreservationType?: pulumi.Input<string>;
    /**
     * Specifies whether the default scopes ('profile', 'email', 'address', and 'phone') should be specified in the access
     * request.
     *
     * @deprecated Deprecated
     */
    requestProfile?: pulumi.Input<boolean>;
    /**
     * Specify the SameSite attribute to be used when setting the PingAccess Cookie. Default is None which allows the cookie to
     * be used in a third-party context. If the cookie is not used in a third-party context then Lax is recommended.
     */
    sameSite?: pulumi.Input<string>;
    /**
     * The list of scopes to be specified in the access request. If not specified, the default scopes ('profile', 'email',
     * 'address', and 'phone') will be used. The openid scope is implied and does not need to be specified in this list.
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specify whether the PingAccess Cookie must be sent using only HTTPS connections.
     */
    secureCookie?: pulumi.Input<boolean>;
    /**
     * Specify if you want to send the requested URL as part of the authentication request to the OpenID Connect Provider.
     */
    sendRequestedUrlToProvider?: pulumi.Input<boolean>;
    /**
     * The length of time you want the PA Token to remain active. Once the PA Token expires, an authenticated user must
     * re-authenticate.
     */
    sessionTimeoutInMinutes?: pulumi.Input<number>;
    /**
     * Specify if PingAccess should validate sessions with the configured PingFederate instance during request processing.
     */
    validateSessionIsAlive?: pulumi.Input<boolean>;
    /**
     * Specify the type of web storage to use for request preservation data, either `SessionStorage` or `LocalStorage`. Default
     * is SessionStorage.
     */
    webStorageType?: pulumi.Input<string>;
}
