// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApplicationResource extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationResourceState, opts?: pulumi.CustomResourceOptions): ApplicationResource {
        return new ApplicationResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingaccess:index/applicationResource:ApplicationResource';

    /**
     * Returns true if the given object is an instance of ApplicationResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationResource.__pulumiType;
    }

    /**
     * True if the resource is anonymous.
     */
    public readonly anonymous!: pulumi.Output<boolean | undefined>;
    /**
     * The id of the associated application. This field is read-only.
     */
    public readonly applicationId!: pulumi.Output<string>;
    /**
     * Indicates if audit logging is enabled for the resource.
     */
    public readonly auditLevel!: pulumi.Output<string | undefined>;
    /**
     * For Web + API applications (dynamic) default_auth_type selects the processing mode when a request: does not have a token
     * (web session, OAuth bearer) or has both tokens. default_auth_type_override overrides the default_auth_type at the
     * application level for this resource. A value of null indicates the resource should not override the default_auth_type.
     */
    public readonly defaultAuthTypeOverride!: pulumi.Output<string | undefined>;
    /**
     * True if the resource is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * An array of HTTP methods configured for the resource.
     */
    public readonly methods!: pulumi.Output<string[]>;
    /**
     * The name of the resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A list of one or more request path-matching patterns.
     */
    public readonly pathPatterns!: pulumi.Output<outputs.ApplicationResourcePathPattern[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly pathPrefixes!: pulumi.Output<string[]>;
    /**
     * A map of policy items associated with the resource. The key is 'web' or 'api' and the value is a list of Policy Items.
     */
    public readonly policy!: pulumi.Output<outputs.ApplicationResourcePolicy | undefined>;
    /**
     * The type of this resource. 'Standard' resources are those served by the protected applications. 'Virtual' resources do
     * not have a corresponding resource in the protected application. Instead, when accessing the resource, PingAccess returns
     * a response created by the response generator defined in the resource type configuration. The default type is 'Standard'.
     */
    public readonly resourceType!: pulumi.Output<string | undefined>;
    /**
     * A container for configuration specific to different types of resources.
     */
    public readonly resourceTypeConfigurations!: pulumi.Output<outputs.ApplicationResourceResourceTypeConfiguration[] | undefined>;
    /**
     * True if the resource is the root resource for the application.
     */
    public readonly rootResource!: pulumi.Output<boolean | undefined>;
    /**
     * True if the resource is unprotected.
     */
    public readonly unprotected!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ApplicationResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationResourceArgs | ApplicationResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationResourceState | undefined;
            resourceInputs["anonymous"] = state ? state.anonymous : undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["auditLevel"] = state ? state.auditLevel : undefined;
            resourceInputs["defaultAuthTypeOverride"] = state ? state.defaultAuthTypeOverride : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["methods"] = state ? state.methods : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pathPatterns"] = state ? state.pathPatterns : undefined;
            resourceInputs["pathPrefixes"] = state ? state.pathPrefixes : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["resourceTypeConfigurations"] = state ? state.resourceTypeConfigurations : undefined;
            resourceInputs["rootResource"] = state ? state.rootResource : undefined;
            resourceInputs["unprotected"] = state ? state.unprotected : undefined;
        } else {
            const args = argsOrState as ApplicationResourceArgs | undefined;
            if ((!args || args.applicationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationId'");
            }
            if ((!args || args.methods === undefined) && !opts.urn) {
                throw new Error("Missing required property 'methods'");
            }
            resourceInputs["anonymous"] = args ? args.anonymous : undefined;
            resourceInputs["applicationId"] = args ? args.applicationId : undefined;
            resourceInputs["auditLevel"] = args ? args.auditLevel : undefined;
            resourceInputs["defaultAuthTypeOverride"] = args ? args.defaultAuthTypeOverride : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["methods"] = args ? args.methods : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pathPatterns"] = args ? args.pathPatterns : undefined;
            resourceInputs["pathPrefixes"] = args ? args.pathPrefixes : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["resourceTypeConfigurations"] = args ? args.resourceTypeConfigurations : undefined;
            resourceInputs["rootResource"] = args ? args.rootResource : undefined;
            resourceInputs["unprotected"] = args ? args.unprotected : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplicationResource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApplicationResource resources.
 */
export interface ApplicationResourceState {
    /**
     * True if the resource is anonymous.
     */
    anonymous?: pulumi.Input<boolean>;
    /**
     * The id of the associated application. This field is read-only.
     */
    applicationId?: pulumi.Input<string>;
    /**
     * Indicates if audit logging is enabled for the resource.
     */
    auditLevel?: pulumi.Input<string>;
    /**
     * For Web + API applications (dynamic) default_auth_type selects the processing mode when a request: does not have a token
     * (web session, OAuth bearer) or has both tokens. default_auth_type_override overrides the default_auth_type at the
     * application level for this resource. A value of null indicates the resource should not override the default_auth_type.
     */
    defaultAuthTypeOverride?: pulumi.Input<string>;
    /**
     * True if the resource is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * An array of HTTP methods configured for the resource.
     */
    methods?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of one or more request path-matching patterns.
     */
    pathPatterns?: pulumi.Input<pulumi.Input<inputs.ApplicationResourcePathPattern>[]>;
    /**
     * @deprecated Deprecated
     */
    pathPrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A map of policy items associated with the resource. The key is 'web' or 'api' and the value is a list of Policy Items.
     */
    policy?: pulumi.Input<inputs.ApplicationResourcePolicy>;
    /**
     * The type of this resource. 'Standard' resources are those served by the protected applications. 'Virtual' resources do
     * not have a corresponding resource in the protected application. Instead, when accessing the resource, PingAccess returns
     * a response created by the response generator defined in the resource type configuration. The default type is 'Standard'.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * A container for configuration specific to different types of resources.
     */
    resourceTypeConfigurations?: pulumi.Input<pulumi.Input<inputs.ApplicationResourceResourceTypeConfiguration>[]>;
    /**
     * True if the resource is the root resource for the application.
     */
    rootResource?: pulumi.Input<boolean>;
    /**
     * True if the resource is unprotected.
     */
    unprotected?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ApplicationResource resource.
 */
export interface ApplicationResourceArgs {
    /**
     * True if the resource is anonymous.
     */
    anonymous?: pulumi.Input<boolean>;
    /**
     * The id of the associated application. This field is read-only.
     */
    applicationId: pulumi.Input<string>;
    /**
     * Indicates if audit logging is enabled for the resource.
     */
    auditLevel?: pulumi.Input<string>;
    /**
     * For Web + API applications (dynamic) default_auth_type selects the processing mode when a request: does not have a token
     * (web session, OAuth bearer) or has both tokens. default_auth_type_override overrides the default_auth_type at the
     * application level for this resource. A value of null indicates the resource should not override the default_auth_type.
     */
    defaultAuthTypeOverride?: pulumi.Input<string>;
    /**
     * True if the resource is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * An array of HTTP methods configured for the resource.
     */
    methods: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of one or more request path-matching patterns.
     */
    pathPatterns?: pulumi.Input<pulumi.Input<inputs.ApplicationResourcePathPattern>[]>;
    /**
     * @deprecated Deprecated
     */
    pathPrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A map of policy items associated with the resource. The key is 'web' or 'api' and the value is a list of Policy Items.
     */
    policy?: pulumi.Input<inputs.ApplicationResourcePolicy>;
    /**
     * The type of this resource. 'Standard' resources are those served by the protected applications. 'Virtual' resources do
     * not have a corresponding resource in the protected application. Instead, when accessing the resource, PingAccess returns
     * a response created by the response generator defined in the resource type configuration. The default type is 'Standard'.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * A container for configuration specific to different types of resources.
     */
    resourceTypeConfigurations?: pulumi.Input<pulumi.Input<inputs.ApplicationResourceResourceTypeConfiguration>[]>;
    /**
     * True if the resource is the root resource for the application.
     */
    rootResource?: pulumi.Input<boolean>;
    /**
     * True if the resource is unprotected.
     */
    unprotected?: pulumi.Input<boolean>;
}
