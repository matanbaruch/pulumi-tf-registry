// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Ruleset extends pulumi.CustomResource {
    /**
     * Get an existing Ruleset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RulesetState, opts?: pulumi.CustomResourceOptions): Ruleset {
        return new Ruleset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingaccess:index/ruleset:Ruleset';

    /**
     * Returns true if the given object is an instance of Ruleset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ruleset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ruleset.__pulumiType;
    }

    /**
     * The rule set's element type (what it contains). Can be either `Rule` or `Ruleset`.
     */
    public readonly elementType!: pulumi.Output<string>;
    /**
     * The rule set's name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The list of policy ids assigned to the rule set.
     */
    public readonly policies!: pulumi.Output<string[]>;
    /**
     * The rule set's success criteria. Can be either `SuccessIfAllSucceed` or `SuccessIfAnyOneSucceeds`.
     */
    public readonly successCriteria!: pulumi.Output<string>;

    /**
     * Create a Ruleset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RulesetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RulesetArgs | RulesetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RulesetState | undefined;
            resourceInputs["elementType"] = state ? state.elementType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["successCriteria"] = state ? state.successCriteria : undefined;
        } else {
            const args = argsOrState as RulesetArgs | undefined;
            if ((!args || args.elementType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'elementType'");
            }
            if ((!args || args.policies === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policies'");
            }
            if ((!args || args.successCriteria === undefined) && !opts.urn) {
                throw new Error("Missing required property 'successCriteria'");
            }
            resourceInputs["elementType"] = args ? args.elementType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["successCriteria"] = args ? args.successCriteria : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ruleset.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ruleset resources.
 */
export interface RulesetState {
    /**
     * The rule set's element type (what it contains). Can be either `Rule` or `Ruleset`.
     */
    elementType?: pulumi.Input<string>;
    /**
     * The rule set's name.
     */
    name?: pulumi.Input<string>;
    /**
     * The list of policy ids assigned to the rule set.
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The rule set's success criteria. Can be either `SuccessIfAllSucceed` or `SuccessIfAnyOneSucceeds`.
     */
    successCriteria?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ruleset resource.
 */
export interface RulesetArgs {
    /**
     * The rule set's element type (what it contains). Can be either `Rule` or `Ruleset`.
     */
    elementType: pulumi.Input<string>;
    /**
     * The rule set's name.
     */
    name?: pulumi.Input<string>;
    /**
     * The list of policy ids assigned to the rule set.
     */
    policies: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The rule set's success criteria. Can be either `SuccessIfAllSucceed` or `SuccessIfAnyOneSucceeds`.
     */
    successCriteria: pulumi.Input<string>;
}
