// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccessTokenValidatorArgs, AccessTokenValidatorState } from "./accessTokenValidator";
export type AccessTokenValidator = import("./accessTokenValidator").AccessTokenValidator;
export const AccessTokenValidator: typeof import("./accessTokenValidator").AccessTokenValidator = null as any;
utilities.lazyLoad(exports, ["AccessTokenValidator"], () => require("./accessTokenValidator"));

export { AcmeServerArgs, AcmeServerState } from "./acmeServer";
export type AcmeServer = import("./acmeServer").AcmeServer;
export const AcmeServer: typeof import("./acmeServer").AcmeServer = null as any;
utilities.lazyLoad(exports, ["AcmeServer"], () => require("./acmeServer"));

export { ApplicationArgs, ApplicationState } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { ApplicationResourceArgs, ApplicationResourceState } from "./applicationResource";
export type ApplicationResource = import("./applicationResource").ApplicationResource;
export const ApplicationResource: typeof import("./applicationResource").ApplicationResource = null as any;
utilities.lazyLoad(exports, ["ApplicationResource"], () => require("./applicationResource"));

export { AuthTokenManagementArgs, AuthTokenManagementState } from "./authTokenManagement";
export type AuthTokenManagement = import("./authTokenManagement").AuthTokenManagement;
export const AuthTokenManagement: typeof import("./authTokenManagement").AuthTokenManagement = null as any;
utilities.lazyLoad(exports, ["AuthTokenManagement"], () => require("./authTokenManagement"));

export { AuthnReqListArgs, AuthnReqListState } from "./authnReqList";
export type AuthnReqList = import("./authnReqList").AuthnReqList;
export const AuthnReqList: typeof import("./authnReqList").AuthnReqList = null as any;
utilities.lazyLoad(exports, ["AuthnReqList"], () => require("./authnReqList"));

export { AvailabilityProfileArgs, AvailabilityProfileState } from "./availabilityProfile";
export type AvailabilityProfile = import("./availabilityProfile").AvailabilityProfile;
export const AvailabilityProfile: typeof import("./availabilityProfile").AvailabilityProfile = null as any;
utilities.lazyLoad(exports, ["AvailabilityProfile"], () => require("./availabilityProfile"));

export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { EngineListenerArgs, EngineListenerState } from "./engineListener";
export type EngineListener = import("./engineListener").EngineListener;
export const EngineListener: typeof import("./engineListener").EngineListener = null as any;
utilities.lazyLoad(exports, ["EngineListener"], () => require("./engineListener"));

export { GetAcmeDefaultArgs, GetAcmeDefaultResult, GetAcmeDefaultOutputArgs } from "./getAcmeDefault";
export const getAcmeDefault: typeof import("./getAcmeDefault").getAcmeDefault = null as any;
export const getAcmeDefaultOutput: typeof import("./getAcmeDefault").getAcmeDefaultOutput = null as any;
utilities.lazyLoad(exports, ["getAcmeDefault","getAcmeDefaultOutput"], () => require("./getAcmeDefault"));

export { GetCertificateArgs, GetCertificateResult, GetCertificateOutputArgs } from "./getCertificate";
export const getCertificate: typeof import("./getCertificate").getCertificate = null as any;
export const getCertificateOutput: typeof import("./getCertificate").getCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getCertificate","getCertificateOutput"], () => require("./getCertificate"));

export { GetKeypairArgs, GetKeypairResult, GetKeypairOutputArgs } from "./getKeypair";
export const getKeypair: typeof import("./getKeypair").getKeypair = null as any;
export const getKeypairOutput: typeof import("./getKeypair").getKeypairOutput = null as any;
utilities.lazyLoad(exports, ["getKeypair","getKeypairOutput"], () => require("./getKeypair"));

export { GetKeypairCsrArgs, GetKeypairCsrResult, GetKeypairCsrOutputArgs } from "./getKeypairCsr";
export const getKeypairCsr: typeof import("./getKeypairCsr").getKeypairCsr = null as any;
export const getKeypairCsrOutput: typeof import("./getKeypairCsr").getKeypairCsrOutput = null as any;
utilities.lazyLoad(exports, ["getKeypairCsr","getKeypairCsrOutput"], () => require("./getKeypairCsr"));

export { GetPingfederateRuntimeMetadataArgs, GetPingfederateRuntimeMetadataResult, GetPingfederateRuntimeMetadataOutputArgs } from "./getPingfederateRuntimeMetadata";
export const getPingfederateRuntimeMetadata: typeof import("./getPingfederateRuntimeMetadata").getPingfederateRuntimeMetadata = null as any;
export const getPingfederateRuntimeMetadataOutput: typeof import("./getPingfederateRuntimeMetadata").getPingfederateRuntimeMetadataOutput = null as any;
utilities.lazyLoad(exports, ["getPingfederateRuntimeMetadata","getPingfederateRuntimeMetadataOutput"], () => require("./getPingfederateRuntimeMetadata"));

export { GetTrustedCertificateGroupArgs, GetTrustedCertificateGroupResult, GetTrustedCertificateGroupOutputArgs } from "./getTrustedCertificateGroup";
export const getTrustedCertificateGroup: typeof import("./getTrustedCertificateGroup").getTrustedCertificateGroup = null as any;
export const getTrustedCertificateGroupOutput: typeof import("./getTrustedCertificateGroup").getTrustedCertificateGroupOutput = null as any;
utilities.lazyLoad(exports, ["getTrustedCertificateGroup","getTrustedCertificateGroupOutput"], () => require("./getTrustedCertificateGroup"));

export { GetVersionArgs, GetVersionResult, GetVersionOutputArgs } from "./getVersion";
export const getVersion: typeof import("./getVersion").getVersion = null as any;
export const getVersionOutput: typeof import("./getVersion").getVersionOutput = null as any;
utilities.lazyLoad(exports, ["getVersion","getVersionOutput"], () => require("./getVersion"));

export { HsmProviderArgs, HsmProviderState } from "./hsmProvider";
export type HsmProvider = import("./hsmProvider").HsmProvider;
export const HsmProvider: typeof import("./hsmProvider").HsmProvider = null as any;
utilities.lazyLoad(exports, ["HsmProvider"], () => require("./hsmProvider"));

export { HttpConfigRequestHostSourceArgs, HttpConfigRequestHostSourceState } from "./httpConfigRequestHostSource";
export type HttpConfigRequestHostSource = import("./httpConfigRequestHostSource").HttpConfigRequestHostSource;
export const HttpConfigRequestHostSource: typeof import("./httpConfigRequestHostSource").HttpConfigRequestHostSource = null as any;
utilities.lazyLoad(exports, ["HttpConfigRequestHostSource"], () => require("./httpConfigRequestHostSource"));

export { HttpsListenerArgs, HttpsListenerState } from "./httpsListener";
export type HttpsListener = import("./httpsListener").HttpsListener;
export const HttpsListener: typeof import("./httpsListener").HttpsListener = null as any;
utilities.lazyLoad(exports, ["HttpsListener"], () => require("./httpsListener"));

export { IdentityMappingArgs, IdentityMappingState } from "./identityMapping";
export type IdentityMapping = import("./identityMapping").IdentityMapping;
export const IdentityMapping: typeof import("./identityMapping").IdentityMapping = null as any;
utilities.lazyLoad(exports, ["IdentityMapping"], () => require("./identityMapping"));

export { KeypairArgs, KeypairState } from "./keypair";
export type Keypair = import("./keypair").Keypair;
export const Keypair: typeof import("./keypair").Keypair = null as any;
utilities.lazyLoad(exports, ["Keypair"], () => require("./keypair"));

export { KeypairCsrArgs, KeypairCsrState } from "./keypairCsr";
export type KeypairCsr = import("./keypairCsr").KeypairCsr;
export const KeypairCsr: typeof import("./keypairCsr").KeypairCsr = null as any;
utilities.lazyLoad(exports, ["KeypairCsr"], () => require("./keypairCsr"));

export { LoadBalancingStrategyArgs, LoadBalancingStrategyState } from "./loadBalancingStrategy";
export type LoadBalancingStrategy = import("./loadBalancingStrategy").LoadBalancingStrategy;
export const LoadBalancingStrategy: typeof import("./loadBalancingStrategy").LoadBalancingStrategy = null as any;
utilities.lazyLoad(exports, ["LoadBalancingStrategy"], () => require("./loadBalancingStrategy"));

export { OauthServerArgs, OauthServerState } from "./oauthServer";
export type OauthServer = import("./oauthServer").OauthServer;
export const OauthServer: typeof import("./oauthServer").OauthServer = null as any;
utilities.lazyLoad(exports, ["OauthServer"], () => require("./oauthServer"));

export { PingfederateAdminArgs, PingfederateAdminState } from "./pingfederateAdmin";
export type PingfederateAdmin = import("./pingfederateAdmin").PingfederateAdmin;
export const PingfederateAdmin: typeof import("./pingfederateAdmin").PingfederateAdmin = null as any;
utilities.lazyLoad(exports, ["PingfederateAdmin"], () => require("./pingfederateAdmin"));

export { PingfederateOauthArgs, PingfederateOauthState } from "./pingfederateOauth";
export type PingfederateOauth = import("./pingfederateOauth").PingfederateOauth;
export const PingfederateOauth: typeof import("./pingfederateOauth").PingfederateOauth = null as any;
utilities.lazyLoad(exports, ["PingfederateOauth"], () => require("./pingfederateOauth"));

export { PingfederateRuntimeArgs, PingfederateRuntimeState } from "./pingfederateRuntime";
export type PingfederateRuntime = import("./pingfederateRuntime").PingfederateRuntime;
export const PingfederateRuntime: typeof import("./pingfederateRuntime").PingfederateRuntime = null as any;
utilities.lazyLoad(exports, ["PingfederateRuntime"], () => require("./pingfederateRuntime"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RuleArgs, RuleState } from "./rule";
export type Rule = import("./rule").Rule;
export const Rule: typeof import("./rule").Rule = null as any;
utilities.lazyLoad(exports, ["Rule"], () => require("./rule"));

export { RulesetArgs, RulesetState } from "./ruleset";
export type Ruleset = import("./ruleset").Ruleset;
export const Ruleset: typeof import("./ruleset").Ruleset = null as any;
utilities.lazyLoad(exports, ["Ruleset"], () => require("./ruleset"));

export { SiteArgs, SiteState } from "./site";
export type Site = import("./site").Site;
export const Site: typeof import("./site").Site = null as any;
utilities.lazyLoad(exports, ["Site"], () => require("./site"));

export { SiteAuthenticatorArgs, SiteAuthenticatorState } from "./siteAuthenticator";
export type SiteAuthenticator = import("./siteAuthenticator").SiteAuthenticator;
export const SiteAuthenticator: typeof import("./siteAuthenticator").SiteAuthenticator = null as any;
utilities.lazyLoad(exports, ["SiteAuthenticator"], () => require("./siteAuthenticator"));

export { ThirdPartyServiceArgs, ThirdPartyServiceState } from "./thirdPartyService";
export type ThirdPartyService = import("./thirdPartyService").ThirdPartyService;
export const ThirdPartyService: typeof import("./thirdPartyService").ThirdPartyService = null as any;
utilities.lazyLoad(exports, ["ThirdPartyService"], () => require("./thirdPartyService"));

export { TrustedCertificateGroupArgs, TrustedCertificateGroupState } from "./trustedCertificateGroup";
export type TrustedCertificateGroup = import("./trustedCertificateGroup").TrustedCertificateGroup;
export const TrustedCertificateGroup: typeof import("./trustedCertificateGroup").TrustedCertificateGroup = null as any;
utilities.lazyLoad(exports, ["TrustedCertificateGroup"], () => require("./trustedCertificateGroup"));

export { VirtualhostArgs, VirtualhostState } from "./virtualhost";
export type Virtualhost = import("./virtualhost").Virtualhost;
export const Virtualhost: typeof import("./virtualhost").Virtualhost = null as any;
utilities.lazyLoad(exports, ["Virtualhost"], () => require("./virtualhost"));

export { WebsessionArgs, WebsessionState } from "./websession";
export type Websession = import("./websession").Websession;
export const Websession: typeof import("./websession").Websession = null as any;
utilities.lazyLoad(exports, ["Websession"], () => require("./websession"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "pingaccess:index/accessTokenValidator:AccessTokenValidator":
                return new AccessTokenValidator(name, <any>undefined, { urn })
            case "pingaccess:index/acmeServer:AcmeServer":
                return new AcmeServer(name, <any>undefined, { urn })
            case "pingaccess:index/application:Application":
                return new Application(name, <any>undefined, { urn })
            case "pingaccess:index/applicationResource:ApplicationResource":
                return new ApplicationResource(name, <any>undefined, { urn })
            case "pingaccess:index/authTokenManagement:AuthTokenManagement":
                return new AuthTokenManagement(name, <any>undefined, { urn })
            case "pingaccess:index/authnReqList:AuthnReqList":
                return new AuthnReqList(name, <any>undefined, { urn })
            case "pingaccess:index/availabilityProfile:AvailabilityProfile":
                return new AvailabilityProfile(name, <any>undefined, { urn })
            case "pingaccess:index/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "pingaccess:index/engineListener:EngineListener":
                return new EngineListener(name, <any>undefined, { urn })
            case "pingaccess:index/hsmProvider:HsmProvider":
                return new HsmProvider(name, <any>undefined, { urn })
            case "pingaccess:index/httpConfigRequestHostSource:HttpConfigRequestHostSource":
                return new HttpConfigRequestHostSource(name, <any>undefined, { urn })
            case "pingaccess:index/httpsListener:HttpsListener":
                return new HttpsListener(name, <any>undefined, { urn })
            case "pingaccess:index/identityMapping:IdentityMapping":
                return new IdentityMapping(name, <any>undefined, { urn })
            case "pingaccess:index/keypair:Keypair":
                return new Keypair(name, <any>undefined, { urn })
            case "pingaccess:index/keypairCsr:KeypairCsr":
                return new KeypairCsr(name, <any>undefined, { urn })
            case "pingaccess:index/loadBalancingStrategy:LoadBalancingStrategy":
                return new LoadBalancingStrategy(name, <any>undefined, { urn })
            case "pingaccess:index/oauthServer:OauthServer":
                return new OauthServer(name, <any>undefined, { urn })
            case "pingaccess:index/pingfederateAdmin:PingfederateAdmin":
                return new PingfederateAdmin(name, <any>undefined, { urn })
            case "pingaccess:index/pingfederateOauth:PingfederateOauth":
                return new PingfederateOauth(name, <any>undefined, { urn })
            case "pingaccess:index/pingfederateRuntime:PingfederateRuntime":
                return new PingfederateRuntime(name, <any>undefined, { urn })
            case "pingaccess:index/rule:Rule":
                return new Rule(name, <any>undefined, { urn })
            case "pingaccess:index/ruleset:Ruleset":
                return new Ruleset(name, <any>undefined, { urn })
            case "pingaccess:index/site:Site":
                return new Site(name, <any>undefined, { urn })
            case "pingaccess:index/siteAuthenticator:SiteAuthenticator":
                return new SiteAuthenticator(name, <any>undefined, { urn })
            case "pingaccess:index/thirdPartyService:ThirdPartyService":
                return new ThirdPartyService(name, <any>undefined, { urn })
            case "pingaccess:index/trustedCertificateGroup:TrustedCertificateGroup":
                return new TrustedCertificateGroup(name, <any>undefined, { urn })
            case "pingaccess:index/virtualhost:Virtualhost":
                return new Virtualhost(name, <any>undefined, { urn })
            case "pingaccess:index/websession:Websession":
                return new Websession(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("pingaccess", "index/accessTokenValidator", _module)
pulumi.runtime.registerResourceModule("pingaccess", "index/acmeServer", _module)
pulumi.runtime.registerResourceModule("pingaccess", "index/application", _module)
pulumi.runtime.registerResourceModule("pingaccess", "index/applicationResource", _module)
pulumi.runtime.registerResourceModule("pingaccess", "index/authTokenManagement", _module)
pulumi.runtime.registerResourceModule("pingaccess", "index/authnReqList", _module)
pulumi.runtime.registerResourceModule("pingaccess", "index/availabilityProfile", _module)
pulumi.runtime.registerResourceModule("pingaccess", "index/certificate", _module)
pulumi.runtime.registerResourceModule("pingaccess", "index/engineListener", _module)
pulumi.runtime.registerResourceModule("pingaccess", "index/hsmProvider", _module)
pulumi.runtime.registerResourceModule("pingaccess", "index/httpConfigRequestHostSource", _module)
pulumi.runtime.registerResourceModule("pingaccess", "index/httpsListener", _module)
pulumi.runtime.registerResourceModule("pingaccess", "index/identityMapping", _module)
pulumi.runtime.registerResourceModule("pingaccess", "index/keypair", _module)
pulumi.runtime.registerResourceModule("pingaccess", "index/keypairCsr", _module)
pulumi.runtime.registerResourceModule("pingaccess", "index/loadBalancingStrategy", _module)
pulumi.runtime.registerResourceModule("pingaccess", "index/oauthServer", _module)
pulumi.runtime.registerResourceModule("pingaccess", "index/pingfederateAdmin", _module)
pulumi.runtime.registerResourceModule("pingaccess", "index/pingfederateOauth", _module)
pulumi.runtime.registerResourceModule("pingaccess", "index/pingfederateRuntime", _module)
pulumi.runtime.registerResourceModule("pingaccess", "index/rule", _module)
pulumi.runtime.registerResourceModule("pingaccess", "index/ruleset", _module)
pulumi.runtime.registerResourceModule("pingaccess", "index/site", _module)
pulumi.runtime.registerResourceModule("pingaccess", "index/siteAuthenticator", _module)
pulumi.runtime.registerResourceModule("pingaccess", "index/thirdPartyService", _module)
pulumi.runtime.registerResourceModule("pingaccess", "index/trustedCertificateGroup", _module)
pulumi.runtime.registerResourceModule("pingaccess", "index/virtualhost", _module)
pulumi.runtime.registerResourceModule("pingaccess", "index/websession", _module)
pulumi.runtime.registerResourcePackage("pingaccess", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:pingaccess") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
