// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateState, opts?: pulumi.CustomResourceOptions): Certificate {
        return new Certificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingaccess:index/certificate:Certificate';

    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }

    /**
     * The alias for the certificate.
     */
    public readonly alias!: pulumi.Output<string>;
    /**
     * The date at which the certificate expires as the number of milliseconds since January 1, 1970, 00:00:00 GMT.
     */
    public /*out*/ readonly expires!: pulumi.Output<number>;
    /**
     * The base64-encoded data of the certificate.
     */
    public readonly fileData!: pulumi.Output<string>;
    /**
     * The issuer DN for the certificate.
     */
    public /*out*/ readonly issuerDn!: pulumi.Output<string>;
    /**
     * The MD5 sum for the certificate. The value will be set to "" when in FIPS mode.
     */
    public /*out*/ readonly md5sum!: pulumi.Output<string>;
    /**
     * The serial number for the certificate.
     */
    public /*out*/ readonly serialNumber!: pulumi.Output<string>;
    /**
     * The SHA1 sum for the certificate.
     */
    public /*out*/ readonly sha1sum!: pulumi.Output<string>;
    /**
     * The algorithm used to sign the certificate.
     */
    public /*out*/ readonly signatureAlgorithm!: pulumi.Output<string>;
    /**
     * A high-level status for the certificate.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The subject CN for the certificate.
     */
    public /*out*/ readonly subjectCn!: pulumi.Output<string>;
    /**
     * The subject DN for the certificate.
     */
    public /*out*/ readonly subjectDn!: pulumi.Output<string>;
    /**
     * The date at which the certificate is valid from as the number of milliseconds since January 1, 1970, 00:00:00 GMT.
     */
    public /*out*/ readonly validFrom!: pulumi.Output<number>;

    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateArgs | CertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateState | undefined;
            resourceInputs["alias"] = state ? state.alias : undefined;
            resourceInputs["expires"] = state ? state.expires : undefined;
            resourceInputs["fileData"] = state ? state.fileData : undefined;
            resourceInputs["issuerDn"] = state ? state.issuerDn : undefined;
            resourceInputs["md5sum"] = state ? state.md5sum : undefined;
            resourceInputs["serialNumber"] = state ? state.serialNumber : undefined;
            resourceInputs["sha1sum"] = state ? state.sha1sum : undefined;
            resourceInputs["signatureAlgorithm"] = state ? state.signatureAlgorithm : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subjectCn"] = state ? state.subjectCn : undefined;
            resourceInputs["subjectDn"] = state ? state.subjectDn : undefined;
            resourceInputs["validFrom"] = state ? state.validFrom : undefined;
        } else {
            const args = argsOrState as CertificateArgs | undefined;
            if ((!args || args.alias === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alias'");
            }
            if ((!args || args.fileData === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileData'");
            }
            resourceInputs["alias"] = args ? args.alias : undefined;
            resourceInputs["fileData"] = args ? args.fileData : undefined;
            resourceInputs["expires"] = undefined /*out*/;
            resourceInputs["issuerDn"] = undefined /*out*/;
            resourceInputs["md5sum"] = undefined /*out*/;
            resourceInputs["serialNumber"] = undefined /*out*/;
            resourceInputs["sha1sum"] = undefined /*out*/;
            resourceInputs["signatureAlgorithm"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["subjectCn"] = undefined /*out*/;
            resourceInputs["subjectDn"] = undefined /*out*/;
            resourceInputs["validFrom"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Certificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Certificate resources.
 */
export interface CertificateState {
    /**
     * The alias for the certificate.
     */
    alias?: pulumi.Input<string>;
    /**
     * The date at which the certificate expires as the number of milliseconds since January 1, 1970, 00:00:00 GMT.
     */
    expires?: pulumi.Input<number>;
    /**
     * The base64-encoded data of the certificate.
     */
    fileData?: pulumi.Input<string>;
    /**
     * The issuer DN for the certificate.
     */
    issuerDn?: pulumi.Input<string>;
    /**
     * The MD5 sum for the certificate. The value will be set to "" when in FIPS mode.
     */
    md5sum?: pulumi.Input<string>;
    /**
     * The serial number for the certificate.
     */
    serialNumber?: pulumi.Input<string>;
    /**
     * The SHA1 sum for the certificate.
     */
    sha1sum?: pulumi.Input<string>;
    /**
     * The algorithm used to sign the certificate.
     */
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * A high-level status for the certificate.
     */
    status?: pulumi.Input<string>;
    /**
     * The subject CN for the certificate.
     */
    subjectCn?: pulumi.Input<string>;
    /**
     * The subject DN for the certificate.
     */
    subjectDn?: pulumi.Input<string>;
    /**
     * The date at which the certificate is valid from as the number of milliseconds since January 1, 1970, 00:00:00 GMT.
     */
    validFrom?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    /**
     * The alias for the certificate.
     */
    alias: pulumi.Input<string>;
    /**
     * The base64-encoded data of the certificate.
     */
    fileData: pulumi.Input<string>;
}
