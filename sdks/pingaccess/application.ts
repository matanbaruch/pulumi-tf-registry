// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Application extends pulumi.CustomResource {
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationState, opts?: pulumi.CustomResourceOptions): Application {
        return new Application(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingaccess:index/application:Application';

    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Application {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Application.__pulumiType;
    }

    /**
     * The ID of the access token validator for local token validation, 1 if the application is protected remotely by an
     * Authorization Server, or zero if unprotected. Only applies to applications of type API.
     */
    public readonly accessValidatorId!: pulumi.Output<number | undefined>;
    /**
     * The ID of the agent associated with the application or zero if none.
     */
    public readonly agentId!: pulumi.Output<number | undefined>;
    /**
     * The type of application.
     */
    public readonly applicationType!: pulumi.Output<string>;
    /**
     * True if the path is case sensitive.
     */
    public readonly caseSensitivePath!: pulumi.Output<boolean | undefined>;
    /**
     * The context root of the application.
     */
    public readonly contextRoot!: pulumi.Output<string>;
    /**
     * For Web + API applications (dynamic) default_auth_type selects the processing mode when a request: does not have a token
     * (web session, OAuth bearer) or has both tokens. This setting applies to all resources in the application except where
     * overridden with default_auth_type_override.
     *
     * @deprecated Deprecated
     */
    public readonly defaultAuthType!: pulumi.Output<string | undefined>;
    /**
     * A description of the application.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The application destination type.
     */
    public readonly destination!: pulumi.Output<string>;
    /**
     * True if the application is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * A map of Identity Mappings associated with the application. The key is 'web' or 'api' and the value is an Identity
     * Mapping ID.
     */
    public readonly identityMappingIds!: pulumi.Output<outputs.ApplicationIdentityMappingIds | undefined>;
    /**
     * Enable explicit, manual ordering of application resources and permit regex path patterns.
     */
    public readonly manualOrderingEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The application name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A map of policy items associated with the resource. The key is 'web' or 'api' and the value is a list of Policy Items.
     */
    public readonly policy!: pulumi.Output<outputs.ApplicationPolicy | undefined>;
    /**
     * The OAuth realm associated with the application.
     */
    public readonly realm!: pulumi.Output<string | undefined>;
    /**
     * True if the application requires HTTPS connections.
     */
    public readonly requireHttps!: pulumi.Output<boolean | undefined>;
    /**
     * The explicit resource order defined when manual ordering is enabled. Each existing resource ID must be represented.
     */
    public /*out*/ readonly resourceOrders!: pulumi.Output<number[]>;
    /**
     * The ID of the site associated with the application or zero if none.
     */
    public readonly siteId!: pulumi.Output<string>;
    /**
     * Enable SPA support.
     */
    public readonly spaSupportEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * An array of virtual host IDs associated with the application.
     */
    public readonly virtualHostIds!: pulumi.Output<string[]>;
    /**
     * The ID of the web session associated with the application or zero if none.
     */
    public readonly webSessionId!: pulumi.Output<string | undefined>;

    /**
     * Create a Application resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationArgs | ApplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationState | undefined;
            resourceInputs["accessValidatorId"] = state ? state.accessValidatorId : undefined;
            resourceInputs["agentId"] = state ? state.agentId : undefined;
            resourceInputs["applicationType"] = state ? state.applicationType : undefined;
            resourceInputs["caseSensitivePath"] = state ? state.caseSensitivePath : undefined;
            resourceInputs["contextRoot"] = state ? state.contextRoot : undefined;
            resourceInputs["defaultAuthType"] = state ? state.defaultAuthType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["identityMappingIds"] = state ? state.identityMappingIds : undefined;
            resourceInputs["manualOrderingEnabled"] = state ? state.manualOrderingEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["realm"] = state ? state.realm : undefined;
            resourceInputs["requireHttps"] = state ? state.requireHttps : undefined;
            resourceInputs["resourceOrders"] = state ? state.resourceOrders : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["spaSupportEnabled"] = state ? state.spaSupportEnabled : undefined;
            resourceInputs["virtualHostIds"] = state ? state.virtualHostIds : undefined;
            resourceInputs["webSessionId"] = state ? state.webSessionId : undefined;
        } else {
            const args = argsOrState as ApplicationArgs | undefined;
            if ((!args || args.applicationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationType'");
            }
            if ((!args || args.contextRoot === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contextRoot'");
            }
            if ((!args || args.destination === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            if ((!args || args.virtualHostIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualHostIds'");
            }
            resourceInputs["accessValidatorId"] = args ? args.accessValidatorId : undefined;
            resourceInputs["agentId"] = args ? args.agentId : undefined;
            resourceInputs["applicationType"] = args ? args.applicationType : undefined;
            resourceInputs["caseSensitivePath"] = args ? args.caseSensitivePath : undefined;
            resourceInputs["contextRoot"] = args ? args.contextRoot : undefined;
            resourceInputs["defaultAuthType"] = args ? args.defaultAuthType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["identityMappingIds"] = args ? args.identityMappingIds : undefined;
            resourceInputs["manualOrderingEnabled"] = args ? args.manualOrderingEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["realm"] = args ? args.realm : undefined;
            resourceInputs["requireHttps"] = args ? args.requireHttps : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["spaSupportEnabled"] = args ? args.spaSupportEnabled : undefined;
            resourceInputs["virtualHostIds"] = args ? args.virtualHostIds : undefined;
            resourceInputs["webSessionId"] = args ? args.webSessionId : undefined;
            resourceInputs["resourceOrders"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Application.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Application resources.
 */
export interface ApplicationState {
    /**
     * The ID of the access token validator for local token validation, 1 if the application is protected remotely by an
     * Authorization Server, or zero if unprotected. Only applies to applications of type API.
     */
    accessValidatorId?: pulumi.Input<number>;
    /**
     * The ID of the agent associated with the application or zero if none.
     */
    agentId?: pulumi.Input<number>;
    /**
     * The type of application.
     */
    applicationType?: pulumi.Input<string>;
    /**
     * True if the path is case sensitive.
     */
    caseSensitivePath?: pulumi.Input<boolean>;
    /**
     * The context root of the application.
     */
    contextRoot?: pulumi.Input<string>;
    /**
     * For Web + API applications (dynamic) default_auth_type selects the processing mode when a request: does not have a token
     * (web session, OAuth bearer) or has both tokens. This setting applies to all resources in the application except where
     * overridden with default_auth_type_override.
     *
     * @deprecated Deprecated
     */
    defaultAuthType?: pulumi.Input<string>;
    /**
     * A description of the application.
     */
    description?: pulumi.Input<string>;
    /**
     * The application destination type.
     */
    destination?: pulumi.Input<string>;
    /**
     * True if the application is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * A map of Identity Mappings associated with the application. The key is 'web' or 'api' and the value is an Identity
     * Mapping ID.
     */
    identityMappingIds?: pulumi.Input<inputs.ApplicationIdentityMappingIds>;
    /**
     * Enable explicit, manual ordering of application resources and permit regex path patterns.
     */
    manualOrderingEnabled?: pulumi.Input<boolean>;
    /**
     * The application name.
     */
    name?: pulumi.Input<string>;
    /**
     * A map of policy items associated with the resource. The key is 'web' or 'api' and the value is a list of Policy Items.
     */
    policy?: pulumi.Input<inputs.ApplicationPolicy>;
    /**
     * The OAuth realm associated with the application.
     */
    realm?: pulumi.Input<string>;
    /**
     * True if the application requires HTTPS connections.
     */
    requireHttps?: pulumi.Input<boolean>;
    /**
     * The explicit resource order defined when manual ordering is enabled. Each existing resource ID must be represented.
     */
    resourceOrders?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The ID of the site associated with the application or zero if none.
     */
    siteId?: pulumi.Input<string>;
    /**
     * Enable SPA support.
     */
    spaSupportEnabled?: pulumi.Input<boolean>;
    /**
     * An array of virtual host IDs associated with the application.
     */
    virtualHostIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the web session associated with the application or zero if none.
     */
    webSessionId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Application resource.
 */
export interface ApplicationArgs {
    /**
     * The ID of the access token validator for local token validation, 1 if the application is protected remotely by an
     * Authorization Server, or zero if unprotected. Only applies to applications of type API.
     */
    accessValidatorId?: pulumi.Input<number>;
    /**
     * The ID of the agent associated with the application or zero if none.
     */
    agentId?: pulumi.Input<number>;
    /**
     * The type of application.
     */
    applicationType: pulumi.Input<string>;
    /**
     * True if the path is case sensitive.
     */
    caseSensitivePath?: pulumi.Input<boolean>;
    /**
     * The context root of the application.
     */
    contextRoot: pulumi.Input<string>;
    /**
     * For Web + API applications (dynamic) default_auth_type selects the processing mode when a request: does not have a token
     * (web session, OAuth bearer) or has both tokens. This setting applies to all resources in the application except where
     * overridden with default_auth_type_override.
     *
     * @deprecated Deprecated
     */
    defaultAuthType?: pulumi.Input<string>;
    /**
     * A description of the application.
     */
    description?: pulumi.Input<string>;
    /**
     * The application destination type.
     */
    destination: pulumi.Input<string>;
    /**
     * True if the application is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * A map of Identity Mappings associated with the application. The key is 'web' or 'api' and the value is an Identity
     * Mapping ID.
     */
    identityMappingIds?: pulumi.Input<inputs.ApplicationIdentityMappingIds>;
    /**
     * Enable explicit, manual ordering of application resources and permit regex path patterns.
     */
    manualOrderingEnabled?: pulumi.Input<boolean>;
    /**
     * The application name.
     */
    name?: pulumi.Input<string>;
    /**
     * A map of policy items associated with the resource. The key is 'web' or 'api' and the value is a list of Policy Items.
     */
    policy?: pulumi.Input<inputs.ApplicationPolicy>;
    /**
     * The OAuth realm associated with the application.
     */
    realm?: pulumi.Input<string>;
    /**
     * True if the application requires HTTPS connections.
     */
    requireHttps?: pulumi.Input<boolean>;
    /**
     * The ID of the site associated with the application or zero if none.
     */
    siteId: pulumi.Input<string>;
    /**
     * Enable SPA support.
     */
    spaSupportEnabled?: pulumi.Input<boolean>;
    /**
     * An array of virtual host IDs associated with the application.
     */
    virtualHostIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the web session associated with the application or zero if none.
     */
    webSessionId?: pulumi.Input<string>;
}
