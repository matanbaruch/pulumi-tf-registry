// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Keypair extends pulumi.CustomResource {
    /**
     * Get an existing Keypair resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeypairState, opts?: pulumi.CustomResourceOptions): Keypair {
        return new Keypair(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingaccess:index/keypair:Keypair';

    /**
     * Returns true if the given object is an instance of Keypair.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Keypair {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Keypair.__pulumiType;
    }

    /**
     * A unique alias name to identify the key pair. Special characters and spaces are allowed.
     */
    public readonly alias!: pulumi.Output<string>;
    /**
     * The complete list of certificates in the key pair certificate chain.
     */
    public /*out*/ readonly chainCertificates!: pulumi.Output<outputs.KeypairChainCertificate[]>;
    /**
     * The city or other primary location (L) where the company operates.
     */
    public readonly city!: pulumi.Output<string | undefined>;
    /**
     * The common name (CN) identifying the certificate.
     */
    public readonly commonName!: pulumi.Output<string | undefined>;
    /**
     * The country (C) where the company is based, using two capital letters.
     */
    public readonly country!: pulumi.Output<string | undefined>;
    /**
     * True if a CSR is generated for this key pair.
     */
    public /*out*/ readonly csrPending!: pulumi.Output<boolean>;
    /**
     * The date at which the certificate expires as the number of milliseconds since January 1, 1970, 00:00:00 GMT.
     */
    public /*out*/ readonly expires!: pulumi.Output<number>;
    /**
     * Base-64 encoded PKCS12 or PEM file data. For PEM, the private key must precede the certificates, and certificates must
     * be ordered from leaf to root. In BCFIPS mode, only PEM with PBES2 and AES or Triple DES encryption is accepted and
     * 128-bit salt is required.
     */
    public readonly fileData!: pulumi.Output<string | undefined>;
    /**
     * The HSM Provider ID. The default value is 0 indicating an HSM is not used for this key pair.
     */
    public readonly hsmProviderId!: pulumi.Output<number | undefined>;
    /**
     * The issuer DN for the certificate.
     */
    public /*out*/ readonly issuerDn!: pulumi.Output<string>;
    /**
     * The key algorithm to use to generate a key.
     */
    public readonly keyAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * The number of bits used in the key. Choices depend on selected key algorithm.
     */
    public readonly keySize!: pulumi.Output<number | undefined>;
    /**
     * The MD5 sum for the certificate. The value will be set to "" when in FIPS mode.
     */
    public /*out*/ readonly md5sum!: pulumi.Output<string>;
    /**
     * The organization (O) or company name creating the certificate.
     */
    public readonly organization!: pulumi.Output<string | undefined>;
    /**
     * The specific unit within the organization (OU).
     */
    public readonly organizationUnit!: pulumi.Output<string | undefined>;
    /**
     * The password used to protect the private key. In FIPS mode, the password must be at least 14 characters.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The serial number for the certificate.
     */
    public /*out*/ readonly serialNumber!: pulumi.Output<string>;
    /**
     * The SHA1 sum for the certificate.
     */
    public /*out*/ readonly sha1sum!: pulumi.Output<string>;
    /**
     * The algorithm used to sign the certificate.
     */
    public /*out*/ readonly signatureAlgorithm!: pulumi.Output<string>;
    /**
     * The state (ST) or other political unit encompassing the location.
     */
    public readonly state!: pulumi.Output<string | undefined>;
    /**
     * A high-level status for the certificate.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The subject CN for the certificate.
     */
    public /*out*/ readonly subjectCn!: pulumi.Output<string>;
    /**
     * The subject DN for the certificate.
     */
    public /*out*/ readonly subjectDn!: pulumi.Output<string>;
    /**
     * The number of days the certificate is valid.
     */
    public readonly validDays!: pulumi.Output<number | undefined>;
    /**
     * The date at which the certificate is valid from as the number of milliseconds since January 1, 1970, 00:00:00 GMT.
     */
    public /*out*/ readonly validFrom!: pulumi.Output<number>;

    /**
     * Create a Keypair resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeypairArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeypairArgs | KeypairState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeypairState | undefined;
            resourceInputs["alias"] = state ? state.alias : undefined;
            resourceInputs["chainCertificates"] = state ? state.chainCertificates : undefined;
            resourceInputs["city"] = state ? state.city : undefined;
            resourceInputs["commonName"] = state ? state.commonName : undefined;
            resourceInputs["country"] = state ? state.country : undefined;
            resourceInputs["csrPending"] = state ? state.csrPending : undefined;
            resourceInputs["expires"] = state ? state.expires : undefined;
            resourceInputs["fileData"] = state ? state.fileData : undefined;
            resourceInputs["hsmProviderId"] = state ? state.hsmProviderId : undefined;
            resourceInputs["issuerDn"] = state ? state.issuerDn : undefined;
            resourceInputs["keyAlgorithm"] = state ? state.keyAlgorithm : undefined;
            resourceInputs["keySize"] = state ? state.keySize : undefined;
            resourceInputs["md5sum"] = state ? state.md5sum : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["organizationUnit"] = state ? state.organizationUnit : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["serialNumber"] = state ? state.serialNumber : undefined;
            resourceInputs["sha1sum"] = state ? state.sha1sum : undefined;
            resourceInputs["signatureAlgorithm"] = state ? state.signatureAlgorithm : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subjectCn"] = state ? state.subjectCn : undefined;
            resourceInputs["subjectDn"] = state ? state.subjectDn : undefined;
            resourceInputs["validDays"] = state ? state.validDays : undefined;
            resourceInputs["validFrom"] = state ? state.validFrom : undefined;
        } else {
            const args = argsOrState as KeypairArgs | undefined;
            if ((!args || args.alias === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alias'");
            }
            resourceInputs["alias"] = args ? args.alias : undefined;
            resourceInputs["city"] = args ? args.city : undefined;
            resourceInputs["commonName"] = args ? args.commonName : undefined;
            resourceInputs["country"] = args ? args.country : undefined;
            resourceInputs["fileData"] = args ? args.fileData : undefined;
            resourceInputs["hsmProviderId"] = args ? args.hsmProviderId : undefined;
            resourceInputs["keyAlgorithm"] = args ? args.keyAlgorithm : undefined;
            resourceInputs["keySize"] = args ? args.keySize : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["organizationUnit"] = args ? args.organizationUnit : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["validDays"] = args ? args.validDays : undefined;
            resourceInputs["chainCertificates"] = undefined /*out*/;
            resourceInputs["csrPending"] = undefined /*out*/;
            resourceInputs["expires"] = undefined /*out*/;
            resourceInputs["issuerDn"] = undefined /*out*/;
            resourceInputs["md5sum"] = undefined /*out*/;
            resourceInputs["serialNumber"] = undefined /*out*/;
            resourceInputs["sha1sum"] = undefined /*out*/;
            resourceInputs["signatureAlgorithm"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["subjectCn"] = undefined /*out*/;
            resourceInputs["subjectDn"] = undefined /*out*/;
            resourceInputs["validFrom"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Keypair.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Keypair resources.
 */
export interface KeypairState {
    /**
     * A unique alias name to identify the key pair. Special characters and spaces are allowed.
     */
    alias?: pulumi.Input<string>;
    /**
     * The complete list of certificates in the key pair certificate chain.
     */
    chainCertificates?: pulumi.Input<pulumi.Input<inputs.KeypairChainCertificate>[]>;
    /**
     * The city or other primary location (L) where the company operates.
     */
    city?: pulumi.Input<string>;
    /**
     * The common name (CN) identifying the certificate.
     */
    commonName?: pulumi.Input<string>;
    /**
     * The country (C) where the company is based, using two capital letters.
     */
    country?: pulumi.Input<string>;
    /**
     * True if a CSR is generated for this key pair.
     */
    csrPending?: pulumi.Input<boolean>;
    /**
     * The date at which the certificate expires as the number of milliseconds since January 1, 1970, 00:00:00 GMT.
     */
    expires?: pulumi.Input<number>;
    /**
     * Base-64 encoded PKCS12 or PEM file data. For PEM, the private key must precede the certificates, and certificates must
     * be ordered from leaf to root. In BCFIPS mode, only PEM with PBES2 and AES or Triple DES encryption is accepted and
     * 128-bit salt is required.
     */
    fileData?: pulumi.Input<string>;
    /**
     * The HSM Provider ID. The default value is 0 indicating an HSM is not used for this key pair.
     */
    hsmProviderId?: pulumi.Input<number>;
    /**
     * The issuer DN for the certificate.
     */
    issuerDn?: pulumi.Input<string>;
    /**
     * The key algorithm to use to generate a key.
     */
    keyAlgorithm?: pulumi.Input<string>;
    /**
     * The number of bits used in the key. Choices depend on selected key algorithm.
     */
    keySize?: pulumi.Input<number>;
    /**
     * The MD5 sum for the certificate. The value will be set to "" when in FIPS mode.
     */
    md5sum?: pulumi.Input<string>;
    /**
     * The organization (O) or company name creating the certificate.
     */
    organization?: pulumi.Input<string>;
    /**
     * The specific unit within the organization (OU).
     */
    organizationUnit?: pulumi.Input<string>;
    /**
     * The password used to protect the private key. In FIPS mode, the password must be at least 14 characters.
     */
    password?: pulumi.Input<string>;
    /**
     * The serial number for the certificate.
     */
    serialNumber?: pulumi.Input<string>;
    /**
     * The SHA1 sum for the certificate.
     */
    sha1sum?: pulumi.Input<string>;
    /**
     * The algorithm used to sign the certificate.
     */
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * The state (ST) or other political unit encompassing the location.
     */
    state?: pulumi.Input<string>;
    /**
     * A high-level status for the certificate.
     */
    status?: pulumi.Input<string>;
    /**
     * The subject CN for the certificate.
     */
    subjectCn?: pulumi.Input<string>;
    /**
     * The subject DN for the certificate.
     */
    subjectDn?: pulumi.Input<string>;
    /**
     * The number of days the certificate is valid.
     */
    validDays?: pulumi.Input<number>;
    /**
     * The date at which the certificate is valid from as the number of milliseconds since January 1, 1970, 00:00:00 GMT.
     */
    validFrom?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Keypair resource.
 */
export interface KeypairArgs {
    /**
     * A unique alias name to identify the key pair. Special characters and spaces are allowed.
     */
    alias: pulumi.Input<string>;
    /**
     * The city or other primary location (L) where the company operates.
     */
    city?: pulumi.Input<string>;
    /**
     * The common name (CN) identifying the certificate.
     */
    commonName?: pulumi.Input<string>;
    /**
     * The country (C) where the company is based, using two capital letters.
     */
    country?: pulumi.Input<string>;
    /**
     * Base-64 encoded PKCS12 or PEM file data. For PEM, the private key must precede the certificates, and certificates must
     * be ordered from leaf to root. In BCFIPS mode, only PEM with PBES2 and AES or Triple DES encryption is accepted and
     * 128-bit salt is required.
     */
    fileData?: pulumi.Input<string>;
    /**
     * The HSM Provider ID. The default value is 0 indicating an HSM is not used for this key pair.
     */
    hsmProviderId?: pulumi.Input<number>;
    /**
     * The key algorithm to use to generate a key.
     */
    keyAlgorithm?: pulumi.Input<string>;
    /**
     * The number of bits used in the key. Choices depend on selected key algorithm.
     */
    keySize?: pulumi.Input<number>;
    /**
     * The organization (O) or company name creating the certificate.
     */
    organization?: pulumi.Input<string>;
    /**
     * The specific unit within the organization (OU).
     */
    organizationUnit?: pulumi.Input<string>;
    /**
     * The password used to protect the private key. In FIPS mode, the password must be at least 14 characters.
     */
    password?: pulumi.Input<string>;
    /**
     * The state (ST) or other political unit encompassing the location.
     */
    state?: pulumi.Input<string>;
    /**
     * The number of days the certificate is valid.
     */
    validDays?: pulumi.Input<number>;
}
