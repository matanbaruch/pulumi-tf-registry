// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Site extends pulumi.CustomResource {
    /**
     * Get an existing Site resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SiteState, opts?: pulumi.CustomResourceOptions): Site {
        return new Site(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingaccess:index/site:Site';

    /**
     * Returns true if the given object is an instance of Site.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Site {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Site.__pulumiType;
    }

    /**
     * The ID of the availability profile associated with the site.
     */
    public readonly availabilityProfileId!: pulumi.Output<number | undefined>;
    /**
     * The name of the host expected in the site's certificate.
     */
    public readonly expectedHostname!: pulumi.Output<string | undefined>;
    /**
     * The time, in milliseconds, that an HTTP persistent connection to the site can be idle before PingAccess closes the
     * connection.
     */
    public readonly keepAliveTimeout!: pulumi.Output<number | undefined>;
    /**
     * The ID of the load balancing strategy associated with the site.
     */
    public readonly loadBalancingStrategyId!: pulumi.Output<number | undefined>;
    /**
     * The maximum number of HTTP persistent connections you want PingAccess to have open and maintain for the site. -1
     * indicates unlimited connections.
     */
    public readonly maxConnections!: pulumi.Output<number | undefined>;
    /**
     * The maximum number of WebSocket connections you want PingAccess to have open and maintain for the site. -1 indicates
     * unlimited connections.
     */
    public readonly maxWebSocketConnections!: pulumi.Output<number | undefined>;
    /**
     * The name of the site.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * This field is true if the site expects HTTPS connections.
     */
    public readonly secure!: pulumi.Output<boolean | undefined>;
    /**
     * This field is true if the PingAccess Token or OAuth Access Token should be included in the request to the site.
     */
    public readonly sendPaCookie!: pulumi.Output<boolean | undefined>;
    /**
     * The IDs of the site authenticators associated with the site.
     */
    public readonly siteAuthenticatorIds!: pulumi.Output<number[] | undefined>;
    /**
     * This field is true if the hostname verification of the site's certificate should be skipped.
     */
    public readonly skipHostnameVerification!: pulumi.Output<boolean | undefined>;
    /**
     * The {hostname}:{port} pairs for the hosts that make up the site.
     */
    public readonly targets!: pulumi.Output<string[]>;
    /**
     * The ID of the trusted certificate group associated with the site.
     */
    public readonly trustedCertificateGroupId!: pulumi.Output<number | undefined>;
    /**
     * True if a proxy should be used for HTTP or HTTPS requests.
     */
    public readonly useProxy!: pulumi.Output<boolean | undefined>;
    /**
     * Setting this field to true causes PingAccess to adjust the Host header to the site's selected target host rather than
     * the virtual host configured in the application.
     */
    public readonly useTargetHostHeader!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Site resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SiteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SiteArgs | SiteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SiteState | undefined;
            resourceInputs["availabilityProfileId"] = state ? state.availabilityProfileId : undefined;
            resourceInputs["expectedHostname"] = state ? state.expectedHostname : undefined;
            resourceInputs["keepAliveTimeout"] = state ? state.keepAliveTimeout : undefined;
            resourceInputs["loadBalancingStrategyId"] = state ? state.loadBalancingStrategyId : undefined;
            resourceInputs["maxConnections"] = state ? state.maxConnections : undefined;
            resourceInputs["maxWebSocketConnections"] = state ? state.maxWebSocketConnections : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["secure"] = state ? state.secure : undefined;
            resourceInputs["sendPaCookie"] = state ? state.sendPaCookie : undefined;
            resourceInputs["siteAuthenticatorIds"] = state ? state.siteAuthenticatorIds : undefined;
            resourceInputs["skipHostnameVerification"] = state ? state.skipHostnameVerification : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
            resourceInputs["trustedCertificateGroupId"] = state ? state.trustedCertificateGroupId : undefined;
            resourceInputs["useProxy"] = state ? state.useProxy : undefined;
            resourceInputs["useTargetHostHeader"] = state ? state.useTargetHostHeader : undefined;
        } else {
            const args = argsOrState as SiteArgs | undefined;
            if ((!args || args.targets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targets'");
            }
            resourceInputs["availabilityProfileId"] = args ? args.availabilityProfileId : undefined;
            resourceInputs["expectedHostname"] = args ? args.expectedHostname : undefined;
            resourceInputs["keepAliveTimeout"] = args ? args.keepAliveTimeout : undefined;
            resourceInputs["loadBalancingStrategyId"] = args ? args.loadBalancingStrategyId : undefined;
            resourceInputs["maxConnections"] = args ? args.maxConnections : undefined;
            resourceInputs["maxWebSocketConnections"] = args ? args.maxWebSocketConnections : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["secure"] = args ? args.secure : undefined;
            resourceInputs["sendPaCookie"] = args ? args.sendPaCookie : undefined;
            resourceInputs["siteAuthenticatorIds"] = args ? args.siteAuthenticatorIds : undefined;
            resourceInputs["skipHostnameVerification"] = args ? args.skipHostnameVerification : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["trustedCertificateGroupId"] = args ? args.trustedCertificateGroupId : undefined;
            resourceInputs["useProxy"] = args ? args.useProxy : undefined;
            resourceInputs["useTargetHostHeader"] = args ? args.useTargetHostHeader : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Site.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Site resources.
 */
export interface SiteState {
    /**
     * The ID of the availability profile associated with the site.
     */
    availabilityProfileId?: pulumi.Input<number>;
    /**
     * The name of the host expected in the site's certificate.
     */
    expectedHostname?: pulumi.Input<string>;
    /**
     * The time, in milliseconds, that an HTTP persistent connection to the site can be idle before PingAccess closes the
     * connection.
     */
    keepAliveTimeout?: pulumi.Input<number>;
    /**
     * The ID of the load balancing strategy associated with the site.
     */
    loadBalancingStrategyId?: pulumi.Input<number>;
    /**
     * The maximum number of HTTP persistent connections you want PingAccess to have open and maintain for the site. -1
     * indicates unlimited connections.
     */
    maxConnections?: pulumi.Input<number>;
    /**
     * The maximum number of WebSocket connections you want PingAccess to have open and maintain for the site. -1 indicates
     * unlimited connections.
     */
    maxWebSocketConnections?: pulumi.Input<number>;
    /**
     * The name of the site.
     */
    name?: pulumi.Input<string>;
    /**
     * This field is true if the site expects HTTPS connections.
     */
    secure?: pulumi.Input<boolean>;
    /**
     * This field is true if the PingAccess Token or OAuth Access Token should be included in the request to the site.
     */
    sendPaCookie?: pulumi.Input<boolean>;
    /**
     * The IDs of the site authenticators associated with the site.
     */
    siteAuthenticatorIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * This field is true if the hostname verification of the site's certificate should be skipped.
     */
    skipHostnameVerification?: pulumi.Input<boolean>;
    /**
     * The {hostname}:{port} pairs for the hosts that make up the site.
     */
    targets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the trusted certificate group associated with the site.
     */
    trustedCertificateGroupId?: pulumi.Input<number>;
    /**
     * True if a proxy should be used for HTTP or HTTPS requests.
     */
    useProxy?: pulumi.Input<boolean>;
    /**
     * Setting this field to true causes PingAccess to adjust the Host header to the site's selected target host rather than
     * the virtual host configured in the application.
     */
    useTargetHostHeader?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Site resource.
 */
export interface SiteArgs {
    /**
     * The ID of the availability profile associated with the site.
     */
    availabilityProfileId?: pulumi.Input<number>;
    /**
     * The name of the host expected in the site's certificate.
     */
    expectedHostname?: pulumi.Input<string>;
    /**
     * The time, in milliseconds, that an HTTP persistent connection to the site can be idle before PingAccess closes the
     * connection.
     */
    keepAliveTimeout?: pulumi.Input<number>;
    /**
     * The ID of the load balancing strategy associated with the site.
     */
    loadBalancingStrategyId?: pulumi.Input<number>;
    /**
     * The maximum number of HTTP persistent connections you want PingAccess to have open and maintain for the site. -1
     * indicates unlimited connections.
     */
    maxConnections?: pulumi.Input<number>;
    /**
     * The maximum number of WebSocket connections you want PingAccess to have open and maintain for the site. -1 indicates
     * unlimited connections.
     */
    maxWebSocketConnections?: pulumi.Input<number>;
    /**
     * The name of the site.
     */
    name?: pulumi.Input<string>;
    /**
     * This field is true if the site expects HTTPS connections.
     */
    secure?: pulumi.Input<boolean>;
    /**
     * This field is true if the PingAccess Token or OAuth Access Token should be included in the request to the site.
     */
    sendPaCookie?: pulumi.Input<boolean>;
    /**
     * The IDs of the site authenticators associated with the site.
     */
    siteAuthenticatorIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * This field is true if the hostname verification of the site's certificate should be skipped.
     */
    skipHostnameVerification?: pulumi.Input<boolean>;
    /**
     * The {hostname}:{port} pairs for the hosts that make up the site.
     */
    targets: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the trusted certificate group associated with the site.
     */
    trustedCertificateGroupId?: pulumi.Input<number>;
    /**
     * True if a proxy should be used for HTTP or HTTPS requests.
     */
    useProxy?: pulumi.Input<boolean>;
    /**
     * Setting this field to true causes PingAccess to adjust the Host header to the site's selected target host rather than
     * the virtual host configured in the application.
     */
    useTargetHostHeader?: pulumi.Input<boolean>;
}
