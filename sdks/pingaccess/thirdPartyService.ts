// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ThirdPartyService extends pulumi.CustomResource {
    /**
     * Get an existing ThirdPartyService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ThirdPartyServiceState, opts?: pulumi.CustomResourceOptions): ThirdPartyService {
        return new ThirdPartyService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingaccess:index/thirdPartyService:ThirdPartyService';

    /**
     * Returns true if the given object is an instance of ThirdPartyService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ThirdPartyService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ThirdPartyService.__pulumiType;
    }

    /**
     * The ID of the availability profile associated with the third-party service.
     */
    public readonly availabilityProfileId!: pulumi.Output<number | undefined>;
    /**
     * The name of the host expected in the third-party service's certificate.
     */
    public readonly expectedHostname!: pulumi.Output<string | undefined>;
    /**
     * The Host header field value in the requests sent to a Third-Party Services. When set, PingAccess will use the hostValue
     * as the Host header field value. Otherwise, the target value will be used.
     */
    public readonly hostValue!: pulumi.Output<string | undefined>;
    /**
     * The ID of the load balancing strategy associated with the third-party service.
     */
    public readonly loadBalancingStrategyId!: pulumi.Output<number | undefined>;
    /**
     * The maximum number of HTTP persistent connections you want PingAccess to have open and maintain for the third-party
     * service. -1 indicates unlimited connections.
     */
    public readonly maxConnections!: pulumi.Output<number | undefined>;
    /**
     * The name of the third-party service.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * This field is true if the third-party service expects HTTPS connections.
     */
    public readonly secure!: pulumi.Output<boolean | undefined>;
    /**
     * This field is true if the hostname verification of the third-party service's certificate should be skipped.
     */
    public readonly skipHostnameVerification!: pulumi.Output<boolean | undefined>;
    /**
     * The {hostname}:{port} pairs for the hosts that make up the third-party service.
     */
    public readonly targets!: pulumi.Output<string[]>;
    /**
     * The ID of the trusted certificate group associated with the third-party service.
     */
    public readonly trustedCertificateGroupId!: pulumi.Output<number | undefined>;
    /**
     * True if a proxy should be used for HTTP or HTTPS requests.
     */
    public readonly useProxy!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ThirdPartyService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ThirdPartyServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ThirdPartyServiceArgs | ThirdPartyServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ThirdPartyServiceState | undefined;
            resourceInputs["availabilityProfileId"] = state ? state.availabilityProfileId : undefined;
            resourceInputs["expectedHostname"] = state ? state.expectedHostname : undefined;
            resourceInputs["hostValue"] = state ? state.hostValue : undefined;
            resourceInputs["loadBalancingStrategyId"] = state ? state.loadBalancingStrategyId : undefined;
            resourceInputs["maxConnections"] = state ? state.maxConnections : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["secure"] = state ? state.secure : undefined;
            resourceInputs["skipHostnameVerification"] = state ? state.skipHostnameVerification : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
            resourceInputs["trustedCertificateGroupId"] = state ? state.trustedCertificateGroupId : undefined;
            resourceInputs["useProxy"] = state ? state.useProxy : undefined;
        } else {
            const args = argsOrState as ThirdPartyServiceArgs | undefined;
            if ((!args || args.targets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targets'");
            }
            resourceInputs["availabilityProfileId"] = args ? args.availabilityProfileId : undefined;
            resourceInputs["expectedHostname"] = args ? args.expectedHostname : undefined;
            resourceInputs["hostValue"] = args ? args.hostValue : undefined;
            resourceInputs["loadBalancingStrategyId"] = args ? args.loadBalancingStrategyId : undefined;
            resourceInputs["maxConnections"] = args ? args.maxConnections : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["secure"] = args ? args.secure : undefined;
            resourceInputs["skipHostnameVerification"] = args ? args.skipHostnameVerification : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["trustedCertificateGroupId"] = args ? args.trustedCertificateGroupId : undefined;
            resourceInputs["useProxy"] = args ? args.useProxy : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ThirdPartyService.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ThirdPartyService resources.
 */
export interface ThirdPartyServiceState {
    /**
     * The ID of the availability profile associated with the third-party service.
     */
    availabilityProfileId?: pulumi.Input<number>;
    /**
     * The name of the host expected in the third-party service's certificate.
     */
    expectedHostname?: pulumi.Input<string>;
    /**
     * The Host header field value in the requests sent to a Third-Party Services. When set, PingAccess will use the hostValue
     * as the Host header field value. Otherwise, the target value will be used.
     */
    hostValue?: pulumi.Input<string>;
    /**
     * The ID of the load balancing strategy associated with the third-party service.
     */
    loadBalancingStrategyId?: pulumi.Input<number>;
    /**
     * The maximum number of HTTP persistent connections you want PingAccess to have open and maintain for the third-party
     * service. -1 indicates unlimited connections.
     */
    maxConnections?: pulumi.Input<number>;
    /**
     * The name of the third-party service.
     */
    name?: pulumi.Input<string>;
    /**
     * This field is true if the third-party service expects HTTPS connections.
     */
    secure?: pulumi.Input<boolean>;
    /**
     * This field is true if the hostname verification of the third-party service's certificate should be skipped.
     */
    skipHostnameVerification?: pulumi.Input<boolean>;
    /**
     * The {hostname}:{port} pairs for the hosts that make up the third-party service.
     */
    targets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the trusted certificate group associated with the third-party service.
     */
    trustedCertificateGroupId?: pulumi.Input<number>;
    /**
     * True if a proxy should be used for HTTP or HTTPS requests.
     */
    useProxy?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ThirdPartyService resource.
 */
export interface ThirdPartyServiceArgs {
    /**
     * The ID of the availability profile associated with the third-party service.
     */
    availabilityProfileId?: pulumi.Input<number>;
    /**
     * The name of the host expected in the third-party service's certificate.
     */
    expectedHostname?: pulumi.Input<string>;
    /**
     * The Host header field value in the requests sent to a Third-Party Services. When set, PingAccess will use the hostValue
     * as the Host header field value. Otherwise, the target value will be used.
     */
    hostValue?: pulumi.Input<string>;
    /**
     * The ID of the load balancing strategy associated with the third-party service.
     */
    loadBalancingStrategyId?: pulumi.Input<number>;
    /**
     * The maximum number of HTTP persistent connections you want PingAccess to have open and maintain for the third-party
     * service. -1 indicates unlimited connections.
     */
    maxConnections?: pulumi.Input<number>;
    /**
     * The name of the third-party service.
     */
    name?: pulumi.Input<string>;
    /**
     * This field is true if the third-party service expects HTTPS connections.
     */
    secure?: pulumi.Input<boolean>;
    /**
     * This field is true if the hostname verification of the third-party service's certificate should be skipped.
     */
    skipHostnameVerification?: pulumi.Input<boolean>;
    /**
     * The {hostname}:{port} pairs for the hosts that make up the third-party service.
     */
    targets: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the trusted certificate group associated with the third-party service.
     */
    trustedCertificateGroupId?: pulumi.Input<number>;
    /**
     * True if a proxy should be used for HTTP or HTTPS requests.
     */
    useProxy?: pulumi.Input<boolean>;
}
