// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PingfederateAdmin extends pulumi.CustomResource {
    /**
     * Get an existing PingfederateAdmin resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PingfederateAdminState, opts?: pulumi.CustomResourceOptions): PingfederateAdmin {
        return new PingfederateAdmin(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingaccess:index/pingfederateAdmin:PingfederateAdmin';

    /**
     * Returns true if the given object is an instance of PingfederateAdmin.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PingfederateAdmin {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PingfederateAdmin.__pulumiType;
    }

    /**
     * The password for the administrator username.
     */
    public readonly adminPassword!: pulumi.Output<outputs.PingfederateAdminAdminPassword>;
    /**
     * The administrator username.
     */
    public readonly adminUsername!: pulumi.Output<string>;
    /**
     * Enable to record requests to the PingFederate Administrative API to the audit store.
     */
    public readonly auditLevel!: pulumi.Output<string | undefined>;
    /**
     * The base path, if needed, for Administration API.
     */
    public readonly basePath!: pulumi.Output<string | undefined>;
    /**
     * The host name or IP address for PingFederate Administration API.
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * The port number for PingFederate Administration API.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Enable if PingFederate is expecting HTTPS connections.
     */
    public readonly secure!: pulumi.Output<boolean | undefined>;
    /**
     * The group of certificates to use when authenticating to PingFederate Administrative API.
     */
    public readonly trustedCertificateGroupId!: pulumi.Output<number | undefined>;
    /**
     * True if a proxy should be used for HTTP or HTTPS requests.
     */
    public readonly useProxy!: pulumi.Output<boolean | undefined>;

    /**
     * Create a PingfederateAdmin resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PingfederateAdminArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PingfederateAdminArgs | PingfederateAdminState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PingfederateAdminState | undefined;
            resourceInputs["adminPassword"] = state ? state.adminPassword : undefined;
            resourceInputs["adminUsername"] = state ? state.adminUsername : undefined;
            resourceInputs["auditLevel"] = state ? state.auditLevel : undefined;
            resourceInputs["basePath"] = state ? state.basePath : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["secure"] = state ? state.secure : undefined;
            resourceInputs["trustedCertificateGroupId"] = state ? state.trustedCertificateGroupId : undefined;
            resourceInputs["useProxy"] = state ? state.useProxy : undefined;
        } else {
            const args = argsOrState as PingfederateAdminArgs | undefined;
            if ((!args || args.adminPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminPassword'");
            }
            if ((!args || args.adminUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminUsername'");
            }
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            resourceInputs["adminPassword"] = args ? args.adminPassword : undefined;
            resourceInputs["adminUsername"] = args ? args.adminUsername : undefined;
            resourceInputs["auditLevel"] = args ? args.auditLevel : undefined;
            resourceInputs["basePath"] = args ? args.basePath : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["secure"] = args ? args.secure : undefined;
            resourceInputs["trustedCertificateGroupId"] = args ? args.trustedCertificateGroupId : undefined;
            resourceInputs["useProxy"] = args ? args.useProxy : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PingfederateAdmin.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PingfederateAdmin resources.
 */
export interface PingfederateAdminState {
    /**
     * The password for the administrator username.
     */
    adminPassword?: pulumi.Input<inputs.PingfederateAdminAdminPassword>;
    /**
     * The administrator username.
     */
    adminUsername?: pulumi.Input<string>;
    /**
     * Enable to record requests to the PingFederate Administrative API to the audit store.
     */
    auditLevel?: pulumi.Input<string>;
    /**
     * The base path, if needed, for Administration API.
     */
    basePath?: pulumi.Input<string>;
    /**
     * The host name or IP address for PingFederate Administration API.
     */
    host?: pulumi.Input<string>;
    /**
     * The port number for PingFederate Administration API.
     */
    port?: pulumi.Input<number>;
    /**
     * Enable if PingFederate is expecting HTTPS connections.
     */
    secure?: pulumi.Input<boolean>;
    /**
     * The group of certificates to use when authenticating to PingFederate Administrative API.
     */
    trustedCertificateGroupId?: pulumi.Input<number>;
    /**
     * True if a proxy should be used for HTTP or HTTPS requests.
     */
    useProxy?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a PingfederateAdmin resource.
 */
export interface PingfederateAdminArgs {
    /**
     * The password for the administrator username.
     */
    adminPassword: pulumi.Input<inputs.PingfederateAdminAdminPassword>;
    /**
     * The administrator username.
     */
    adminUsername: pulumi.Input<string>;
    /**
     * Enable to record requests to the PingFederate Administrative API to the audit store.
     */
    auditLevel?: pulumi.Input<string>;
    /**
     * The base path, if needed, for Administration API.
     */
    basePath?: pulumi.Input<string>;
    /**
     * The host name or IP address for PingFederate Administration API.
     */
    host: pulumi.Input<string>;
    /**
     * The port number for PingFederate Administration API.
     */
    port: pulumi.Input<number>;
    /**
     * Enable if PingFederate is expecting HTTPS connections.
     */
    secure?: pulumi.Input<boolean>;
    /**
     * The group of certificates to use when authenticating to PingFederate Administrative API.
     */
    trustedCertificateGroupId?: pulumi.Input<number>;
    /**
     * True if a proxy should be used for HTTP or HTTPS requests.
     */
    useProxy?: pulumi.Input<boolean>;
}
