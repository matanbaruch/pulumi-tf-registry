// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Virtualhost extends pulumi.CustomResource {
    /**
     * Get an existing Virtualhost resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualhostState, opts?: pulumi.CustomResourceOptions): Virtualhost {
        return new Virtualhost(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingaccess:index/virtualhost:Virtualhost';

    /**
     * Returns true if the given object is an instance of Virtualhost.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Virtualhost {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Virtualhost.__pulumiType;
    }

    /**
     * Indicates the number of seconds the Agent can cache resources for this application.
     */
    public readonly agentResourceCacheTtl!: pulumi.Output<number | undefined>;
    /**
     * The host name for the Virtual Host.
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * Key pair assigned to Virtual Host used by SNI, If no key pair is assigned to a virtual host, ENGINE HTTPS Listener key
     * pair will be used.
     */
    public readonly keyPairId!: pulumi.Output<number | undefined>;
    /**
     * The integer port number for the Virtual Host.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Trusted Certificate Group assigned to Virtual Host for client certificate authentication.
     */
    public readonly trustedCertificateGroupId!: pulumi.Output<number | undefined>;

    /**
     * Create a Virtualhost resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualhostArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualhostArgs | VirtualhostState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualhostState | undefined;
            resourceInputs["agentResourceCacheTtl"] = state ? state.agentResourceCacheTtl : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["keyPairId"] = state ? state.keyPairId : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["trustedCertificateGroupId"] = state ? state.trustedCertificateGroupId : undefined;
        } else {
            const args = argsOrState as VirtualhostArgs | undefined;
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            resourceInputs["agentResourceCacheTtl"] = args ? args.agentResourceCacheTtl : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["keyPairId"] = args ? args.keyPairId : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["trustedCertificateGroupId"] = args ? args.trustedCertificateGroupId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Virtualhost.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Virtualhost resources.
 */
export interface VirtualhostState {
    /**
     * Indicates the number of seconds the Agent can cache resources for this application.
     */
    agentResourceCacheTtl?: pulumi.Input<number>;
    /**
     * The host name for the Virtual Host.
     */
    host?: pulumi.Input<string>;
    /**
     * Key pair assigned to Virtual Host used by SNI, If no key pair is assigned to a virtual host, ENGINE HTTPS Listener key
     * pair will be used.
     */
    keyPairId?: pulumi.Input<number>;
    /**
     * The integer port number for the Virtual Host.
     */
    port?: pulumi.Input<number>;
    /**
     * Trusted Certificate Group assigned to Virtual Host for client certificate authentication.
     */
    trustedCertificateGroupId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Virtualhost resource.
 */
export interface VirtualhostArgs {
    /**
     * Indicates the number of seconds the Agent can cache resources for this application.
     */
    agentResourceCacheTtl?: pulumi.Input<number>;
    /**
     * The host name for the Virtual Host.
     */
    host: pulumi.Input<string>;
    /**
     * Key pair assigned to Virtual Host used by SNI, If no key pair is assigned to a virtual host, ENGINE HTTPS Listener key
     * pair will be used.
     */
    keyPairId?: pulumi.Input<number>;
    /**
     * The integer port number for the Virtual Host.
     */
    port: pulumi.Input<number>;
    /**
     * Trusted Certificate Group assigned to Virtual Host for client certificate authentication.
     */
    trustedCertificateGroupId?: pulumi.Input<number>;
}
