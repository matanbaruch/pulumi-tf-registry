// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OauthServer extends pulumi.CustomResource {
    /**
     * Get an existing OauthServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OauthServerState, opts?: pulumi.CustomResourceOptions): OauthServer {
        return new OauthServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingaccess:index/oauthServer:OauthServer';

    /**
     * Returns true if the given object is an instance of OauthServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OauthServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OauthServer.__pulumiType;
    }

    /**
     * Enable to record requests to third-party OAuth 2.0 Authorization Server to the audit store.
     */
    public readonly auditLevel!: pulumi.Output<string | undefined>;
    /**
     * Enable to retain token details for subsequent requests.
     */
    public readonly cacheTokens!: pulumi.Output<boolean | undefined>;
    /**
     * Specify the client credentials.
     */
    public readonly clientCredentials!: pulumi.Output<outputs.OauthServerClientCredentials>;
    /**
     * The description of the third-party OAuth 2.0 Authorization Server.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The third-party OAuth 2.0 Authorization Server's token introspection endpoint.
     */
    public readonly introspectionEndpoint!: pulumi.Output<string>;
    /**
     * Enable if third-party OAuth 2.0 Authorization Server is expecting HTTPS connections.
     */
    public readonly secure!: pulumi.Output<boolean | undefined>;
    /**
     * Enable to send the URI the user requested as the 'aud' OAuth parameter for PingAccess to the OAuth 2.0 Authorization
     * server.
     */
    public readonly sendAudience!: pulumi.Output<boolean | undefined>;
    /**
     * The attribute you want to use from the OAuth access token as the subject for auditing purposes.
     */
    public readonly subjectAttributeName!: pulumi.Output<string>;
    /**
     * One or more server hostname:port pairs used to access third-party OAuth 2.0 Authorization Server.
     */
    public readonly targets!: pulumi.Output<string[]>;
    /**
     * Defines the number of seconds to cache the access token. -1 means no limit. This value should be less than the
     * PingFederate Token Lifetime.
     */
    public readonly tokenTimeToLiveSeconds!: pulumi.Output<number | undefined>;
    /**
     * The group of certificates to use when authenticating to third-party OAuth 2.0 Authorization Server.
     */
    public readonly trustedCertificateGroupId!: pulumi.Output<number>;
    /**
     * True if a proxy should be used for HTTP or HTTPS requests.
     */
    public readonly useProxy!: pulumi.Output<boolean | undefined>;

    /**
     * Create a OauthServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OauthServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OauthServerArgs | OauthServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OauthServerState | undefined;
            resourceInputs["auditLevel"] = state ? state.auditLevel : undefined;
            resourceInputs["cacheTokens"] = state ? state.cacheTokens : undefined;
            resourceInputs["clientCredentials"] = state ? state.clientCredentials : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["introspectionEndpoint"] = state ? state.introspectionEndpoint : undefined;
            resourceInputs["secure"] = state ? state.secure : undefined;
            resourceInputs["sendAudience"] = state ? state.sendAudience : undefined;
            resourceInputs["subjectAttributeName"] = state ? state.subjectAttributeName : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
            resourceInputs["tokenTimeToLiveSeconds"] = state ? state.tokenTimeToLiveSeconds : undefined;
            resourceInputs["trustedCertificateGroupId"] = state ? state.trustedCertificateGroupId : undefined;
            resourceInputs["useProxy"] = state ? state.useProxy : undefined;
        } else {
            const args = argsOrState as OauthServerArgs | undefined;
            if ((!args || args.clientCredentials === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientCredentials'");
            }
            if ((!args || args.introspectionEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'introspectionEndpoint'");
            }
            if ((!args || args.subjectAttributeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subjectAttributeName'");
            }
            if ((!args || args.targets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targets'");
            }
            if ((!args || args.trustedCertificateGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trustedCertificateGroupId'");
            }
            resourceInputs["auditLevel"] = args ? args.auditLevel : undefined;
            resourceInputs["cacheTokens"] = args ? args.cacheTokens : undefined;
            resourceInputs["clientCredentials"] = args ? args.clientCredentials : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["introspectionEndpoint"] = args ? args.introspectionEndpoint : undefined;
            resourceInputs["secure"] = args ? args.secure : undefined;
            resourceInputs["sendAudience"] = args ? args.sendAudience : undefined;
            resourceInputs["subjectAttributeName"] = args ? args.subjectAttributeName : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["tokenTimeToLiveSeconds"] = args ? args.tokenTimeToLiveSeconds : undefined;
            resourceInputs["trustedCertificateGroupId"] = args ? args.trustedCertificateGroupId : undefined;
            resourceInputs["useProxy"] = args ? args.useProxy : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OauthServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OauthServer resources.
 */
export interface OauthServerState {
    /**
     * Enable to record requests to third-party OAuth 2.0 Authorization Server to the audit store.
     */
    auditLevel?: pulumi.Input<string>;
    /**
     * Enable to retain token details for subsequent requests.
     */
    cacheTokens?: pulumi.Input<boolean>;
    /**
     * Specify the client credentials.
     */
    clientCredentials?: pulumi.Input<inputs.OauthServerClientCredentials>;
    /**
     * The description of the third-party OAuth 2.0 Authorization Server.
     */
    description?: pulumi.Input<string>;
    /**
     * The third-party OAuth 2.0 Authorization Server's token introspection endpoint.
     */
    introspectionEndpoint?: pulumi.Input<string>;
    /**
     * Enable if third-party OAuth 2.0 Authorization Server is expecting HTTPS connections.
     */
    secure?: pulumi.Input<boolean>;
    /**
     * Enable to send the URI the user requested as the 'aud' OAuth parameter for PingAccess to the OAuth 2.0 Authorization
     * server.
     */
    sendAudience?: pulumi.Input<boolean>;
    /**
     * The attribute you want to use from the OAuth access token as the subject for auditing purposes.
     */
    subjectAttributeName?: pulumi.Input<string>;
    /**
     * One or more server hostname:port pairs used to access third-party OAuth 2.0 Authorization Server.
     */
    targets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Defines the number of seconds to cache the access token. -1 means no limit. This value should be less than the
     * PingFederate Token Lifetime.
     */
    tokenTimeToLiveSeconds?: pulumi.Input<number>;
    /**
     * The group of certificates to use when authenticating to third-party OAuth 2.0 Authorization Server.
     */
    trustedCertificateGroupId?: pulumi.Input<number>;
    /**
     * True if a proxy should be used for HTTP or HTTPS requests.
     */
    useProxy?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a OauthServer resource.
 */
export interface OauthServerArgs {
    /**
     * Enable to record requests to third-party OAuth 2.0 Authorization Server to the audit store.
     */
    auditLevel?: pulumi.Input<string>;
    /**
     * Enable to retain token details for subsequent requests.
     */
    cacheTokens?: pulumi.Input<boolean>;
    /**
     * Specify the client credentials.
     */
    clientCredentials: pulumi.Input<inputs.OauthServerClientCredentials>;
    /**
     * The description of the third-party OAuth 2.0 Authorization Server.
     */
    description?: pulumi.Input<string>;
    /**
     * The third-party OAuth 2.0 Authorization Server's token introspection endpoint.
     */
    introspectionEndpoint: pulumi.Input<string>;
    /**
     * Enable if third-party OAuth 2.0 Authorization Server is expecting HTTPS connections.
     */
    secure?: pulumi.Input<boolean>;
    /**
     * Enable to send the URI the user requested as the 'aud' OAuth parameter for PingAccess to the OAuth 2.0 Authorization
     * server.
     */
    sendAudience?: pulumi.Input<boolean>;
    /**
     * The attribute you want to use from the OAuth access token as the subject for auditing purposes.
     */
    subjectAttributeName: pulumi.Input<string>;
    /**
     * One or more server hostname:port pairs used to access third-party OAuth 2.0 Authorization Server.
     */
    targets: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Defines the number of seconds to cache the access token. -1 means no limit. This value should be less than the
     * PingFederate Token Lifetime.
     */
    tokenTimeToLiveSeconds?: pulumi.Input<number>;
    /**
     * The group of certificates to use when authenticating to third-party OAuth 2.0 Authorization Server.
     */
    trustedCertificateGroupId: pulumi.Input<number>;
    /**
     * True if a proxy should be used for HTTP or HTTPS requests.
     */
    useProxy?: pulumi.Input<boolean>;
}
