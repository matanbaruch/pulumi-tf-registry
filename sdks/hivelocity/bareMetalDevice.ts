// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BareMetalDevice extends pulumi.CustomResource {
    /**
     * Get an existing BareMetalDevice resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BareMetalDeviceState, opts?: pulumi.CustomResourceOptions): BareMetalDevice {
        return new BareMetalDevice(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hivelocity:index/bareMetalDevice:BareMetalDevice';

    /**
     * Returns true if the given object is an instance of BareMetalDevice.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BareMetalDevice {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BareMetalDevice.__pulumiType;
    }

    /**
     * When set, prefer only bonded devices
     */
    public readonly bonded!: pulumi.Output<boolean | undefined>;
    /**
     * Device ID
     */
    public readonly deviceId!: pulumi.Output<number>;
    /**
     * Force deployment of this Device ID (internal use only)
     */
    public readonly forceDeviceId!: pulumi.Output<number | undefined>;
    /**
     * Hostname for this device
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * IgnitionConfig ID
     */
    public readonly ignitionId!: pulumi.Output<number | undefined>;
    /**
     * Last time this device was updated
     */
    public readonly lastUpdated!: pulumi.Output<string>;
    /**
     * Deploy device in this location
     */
    public readonly locationName!: pulumi.Output<string>;
    /**
     * Order ID
     */
    public readonly orderId!: pulumi.Output<number>;
    /**
     * Operating system to install on device
     */
    public readonly osName!: pulumi.Output<string>;
    /**
     * Billing period for device
     */
    public readonly period!: pulumi.Output<string>;
    /**
     * Power status
     */
    public readonly powerStatus!: pulumi.Output<string>;
    /**
     * Primary IP of device
     */
    public readonly primaryIp!: pulumi.Output<string>;
    /**
     * Product ID to pick from the stock
     */
    public readonly productId!: pulumi.Output<number>;
    /**
     * Product Name
     */
    public readonly productName!: pulumi.Output<string>;
    /**
     * ID of a SSH Key to apply for device
     */
    public readonly publicSshKeyId!: pulumi.Output<number | undefined>;
    /**
     * Post-install script for device
     */
    public readonly script!: pulumi.Output<string | undefined>;
    /**
     * Service ID
     */
    public readonly serviceId!: pulumi.Output<number>;
    /**
     * Tags to apply for device
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.BareMetalDeviceTimeouts | undefined>;
    /**
     * VLAN ID
     *
     * @deprecated Deprecated
     */
    public readonly vlanId!: pulumi.Output<number | undefined>;

    /**
     * Create a BareMetalDevice resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BareMetalDeviceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BareMetalDeviceArgs | BareMetalDeviceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BareMetalDeviceState | undefined;
            resourceInputs["bonded"] = state ? state.bonded : undefined;
            resourceInputs["deviceId"] = state ? state.deviceId : undefined;
            resourceInputs["forceDeviceId"] = state ? state.forceDeviceId : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["ignitionId"] = state ? state.ignitionId : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["locationName"] = state ? state.locationName : undefined;
            resourceInputs["orderId"] = state ? state.orderId : undefined;
            resourceInputs["osName"] = state ? state.osName : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["powerStatus"] = state ? state.powerStatus : undefined;
            resourceInputs["primaryIp"] = state ? state.primaryIp : undefined;
            resourceInputs["productId"] = state ? state.productId : undefined;
            resourceInputs["productName"] = state ? state.productName : undefined;
            resourceInputs["publicSshKeyId"] = state ? state.publicSshKeyId : undefined;
            resourceInputs["script"] = state ? state.script : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vlanId"] = state ? state.vlanId : undefined;
        } else {
            const args = argsOrState as BareMetalDeviceArgs | undefined;
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if ((!args || args.locationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locationName'");
            }
            if ((!args || args.osName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osName'");
            }
            if ((!args || args.productId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'productId'");
            }
            resourceInputs["bonded"] = args ? args.bonded : undefined;
            resourceInputs["deviceId"] = args ? args.deviceId : undefined;
            resourceInputs["forceDeviceId"] = args ? args.forceDeviceId : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["ignitionId"] = args ? args.ignitionId : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["locationName"] = args ? args.locationName : undefined;
            resourceInputs["orderId"] = args ? args.orderId : undefined;
            resourceInputs["osName"] = args ? args.osName : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["powerStatus"] = args ? args.powerStatus : undefined;
            resourceInputs["primaryIp"] = args ? args.primaryIp : undefined;
            resourceInputs["productId"] = args ? args.productId : undefined;
            resourceInputs["productName"] = args ? args.productName : undefined;
            resourceInputs["publicSshKeyId"] = args ? args.publicSshKeyId : undefined;
            resourceInputs["script"] = args ? args.script : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vlanId"] = args ? args.vlanId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BareMetalDevice.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BareMetalDevice resources.
 */
export interface BareMetalDeviceState {
    /**
     * When set, prefer only bonded devices
     */
    bonded?: pulumi.Input<boolean>;
    /**
     * Device ID
     */
    deviceId?: pulumi.Input<number>;
    /**
     * Force deployment of this Device ID (internal use only)
     */
    forceDeviceId?: pulumi.Input<number>;
    /**
     * Hostname for this device
     */
    hostname?: pulumi.Input<string>;
    /**
     * IgnitionConfig ID
     */
    ignitionId?: pulumi.Input<number>;
    /**
     * Last time this device was updated
     */
    lastUpdated?: pulumi.Input<string>;
    /**
     * Deploy device in this location
     */
    locationName?: pulumi.Input<string>;
    /**
     * Order ID
     */
    orderId?: pulumi.Input<number>;
    /**
     * Operating system to install on device
     */
    osName?: pulumi.Input<string>;
    /**
     * Billing period for device
     */
    period?: pulumi.Input<string>;
    /**
     * Power status
     */
    powerStatus?: pulumi.Input<string>;
    /**
     * Primary IP of device
     */
    primaryIp?: pulumi.Input<string>;
    /**
     * Product ID to pick from the stock
     */
    productId?: pulumi.Input<number>;
    /**
     * Product Name
     */
    productName?: pulumi.Input<string>;
    /**
     * ID of a SSH Key to apply for device
     */
    publicSshKeyId?: pulumi.Input<number>;
    /**
     * Post-install script for device
     */
    script?: pulumi.Input<string>;
    /**
     * Service ID
     */
    serviceId?: pulumi.Input<number>;
    /**
     * Tags to apply for device
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.BareMetalDeviceTimeouts>;
    /**
     * VLAN ID
     *
     * @deprecated Deprecated
     */
    vlanId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a BareMetalDevice resource.
 */
export interface BareMetalDeviceArgs {
    /**
     * When set, prefer only bonded devices
     */
    bonded?: pulumi.Input<boolean>;
    /**
     * Device ID
     */
    deviceId?: pulumi.Input<number>;
    /**
     * Force deployment of this Device ID (internal use only)
     */
    forceDeviceId?: pulumi.Input<number>;
    /**
     * Hostname for this device
     */
    hostname: pulumi.Input<string>;
    /**
     * IgnitionConfig ID
     */
    ignitionId?: pulumi.Input<number>;
    /**
     * Last time this device was updated
     */
    lastUpdated?: pulumi.Input<string>;
    /**
     * Deploy device in this location
     */
    locationName: pulumi.Input<string>;
    /**
     * Order ID
     */
    orderId?: pulumi.Input<number>;
    /**
     * Operating system to install on device
     */
    osName: pulumi.Input<string>;
    /**
     * Billing period for device
     */
    period?: pulumi.Input<string>;
    /**
     * Power status
     */
    powerStatus?: pulumi.Input<string>;
    /**
     * Primary IP of device
     */
    primaryIp?: pulumi.Input<string>;
    /**
     * Product ID to pick from the stock
     */
    productId: pulumi.Input<number>;
    /**
     * Product Name
     */
    productName?: pulumi.Input<string>;
    /**
     * ID of a SSH Key to apply for device
     */
    publicSshKeyId?: pulumi.Input<number>;
    /**
     * Post-install script for device
     */
    script?: pulumi.Input<string>;
    /**
     * Service ID
     */
    serviceId?: pulumi.Input<number>;
    /**
     * Tags to apply for device
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.BareMetalDeviceTimeouts>;
    /**
     * VLAN ID
     *
     * @deprecated Deprecated
     */
    vlanId?: pulumi.Input<number>;
}
