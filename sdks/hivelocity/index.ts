// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BareMetalDeviceArgs, BareMetalDeviceState } from "./bareMetalDevice";
export type BareMetalDevice = import("./bareMetalDevice").BareMetalDevice;
export const BareMetalDevice: typeof import("./bareMetalDevice").BareMetalDevice = null as any;
utilities.lazyLoad(exports, ["BareMetalDevice"], () => require("./bareMetalDevice"));

export { GetBareMetalDeviceArgs, GetBareMetalDeviceResult, GetBareMetalDeviceOutputArgs } from "./getBareMetalDevice";
export const getBareMetalDevice: typeof import("./getBareMetalDevice").getBareMetalDevice = null as any;
export const getBareMetalDeviceOutput: typeof import("./getBareMetalDevice").getBareMetalDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getBareMetalDevice","getBareMetalDeviceOutput"], () => require("./getBareMetalDevice"));

export { GetDeviceArgs, GetDeviceResult, GetDeviceOutputArgs } from "./getDevice";
export const getDevice: typeof import("./getDevice").getDevice = null as any;
export const getDeviceOutput: typeof import("./getDevice").getDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getDevice","getDeviceOutput"], () => require("./getDevice"));

export { GetDeviceInitialCredsArgs, GetDeviceInitialCredsResult, GetDeviceInitialCredsOutputArgs } from "./getDeviceInitialCreds";
export const getDeviceInitialCreds: typeof import("./getDeviceInitialCreds").getDeviceInitialCreds = null as any;
export const getDeviceInitialCredsOutput: typeof import("./getDeviceInitialCreds").getDeviceInitialCredsOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceInitialCreds","getDeviceInitialCredsOutput"], () => require("./getDeviceInitialCreds"));

export { GetDevicePortArgs, GetDevicePortResult, GetDevicePortOutputArgs } from "./getDevicePort";
export const getDevicePort: typeof import("./getDevicePort").getDevicePort = null as any;
export const getDevicePortOutput: typeof import("./getDevicePort").getDevicePortOutput = null as any;
utilities.lazyLoad(exports, ["getDevicePort","getDevicePortOutput"], () => require("./getDevicePort"));

export { GetEffectiveIgnitionArgs, GetEffectiveIgnitionResult, GetEffectiveIgnitionOutputArgs } from "./getEffectiveIgnition";
export const getEffectiveIgnition: typeof import("./getEffectiveIgnition").getEffectiveIgnition = null as any;
export const getEffectiveIgnitionOutput: typeof import("./getEffectiveIgnition").getEffectiveIgnitionOutput = null as any;
utilities.lazyLoad(exports, ["getEffectiveIgnition","getEffectiveIgnitionOutput"], () => require("./getEffectiveIgnition"));

export { GetProductArgs, GetProductResult, GetProductOutputArgs } from "./getProduct";
export const getProduct: typeof import("./getProduct").getProduct = null as any;
export const getProductOutput: typeof import("./getProduct").getProductOutput = null as any;
utilities.lazyLoad(exports, ["getProduct","getProductOutput"], () => require("./getProduct"));

export { GetSshKeyArgs, GetSshKeyResult, GetSshKeyOutputArgs } from "./getSshKey";
export const getSshKey: typeof import("./getSshKey").getSshKey = null as any;
export const getSshKeyOutput: typeof import("./getSshKey").getSshKeyOutput = null as any;
utilities.lazyLoad(exports, ["getSshKey","getSshKeyOutput"], () => require("./getSshKey"));

export { IgnitionArgs, IgnitionState } from "./ignition";
export type Ignition = import("./ignition").Ignition;
export const Ignition: typeof import("./ignition").Ignition = null as any;
utilities.lazyLoad(exports, ["Ignition"], () => require("./ignition"));

export { OrderGroupArgs, OrderGroupState } from "./orderGroup";
export type OrderGroup = import("./orderGroup").OrderGroup;
export const OrderGroup: typeof import("./orderGroup").OrderGroup = null as any;
utilities.lazyLoad(exports, ["OrderGroup"], () => require("./orderGroup"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SshKeyArgs, SshKeyState } from "./sshKey";
export type SshKey = import("./sshKey").SshKey;
export const SshKey: typeof import("./sshKey").SshKey = null as any;
utilities.lazyLoad(exports, ["SshKey"], () => require("./sshKey"));

export { VlanArgs, VlanState } from "./vlan";
export type Vlan = import("./vlan").Vlan;
export const Vlan: typeof import("./vlan").Vlan = null as any;
utilities.lazyLoad(exports, ["Vlan"], () => require("./vlan"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "hivelocity:index/bareMetalDevice:BareMetalDevice":
                return new BareMetalDevice(name, <any>undefined, { urn })
            case "hivelocity:index/ignition:Ignition":
                return new Ignition(name, <any>undefined, { urn })
            case "hivelocity:index/orderGroup:OrderGroup":
                return new OrderGroup(name, <any>undefined, { urn })
            case "hivelocity:index/sshKey:SshKey":
                return new SshKey(name, <any>undefined, { urn })
            case "hivelocity:index/vlan:Vlan":
                return new Vlan(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("hivelocity", "index/bareMetalDevice", _module)
pulumi.runtime.registerResourceModule("hivelocity", "index/ignition", _module)
pulumi.runtime.registerResourceModule("hivelocity", "index/orderGroup", _module)
pulumi.runtime.registerResourceModule("hivelocity", "index/sshKey", _module)
pulumi.runtime.registerResourceModule("hivelocity", "index/vlan", _module)
pulumi.runtime.registerResourcePackage("hivelocity", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:hivelocity") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
