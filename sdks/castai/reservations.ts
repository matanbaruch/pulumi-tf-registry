// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Reservations extends pulumi.CustomResource {
    /**
     * Get an existing Reservations resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReservationsState, opts?: pulumi.CustomResourceOptions): Reservations {
        return new Reservations(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'castai:index/reservations:Reservations';

    /**
     * Returns true if the given object is an instance of Reservations.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Reservations {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Reservations.__pulumiType;
    }

    /**
     * organization
     */
    public readonly organizationId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly reservations!: pulumi.Output<outputs.ReservationsReservation[]>;
    /**
     * csv file containing reservations
     */
    public readonly reservationsCsv!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ReservationsTimeouts | undefined>;

    /**
     * Create a Reservations resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReservationsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReservationsArgs | ReservationsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReservationsState | undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["reservations"] = state ? state.reservations : undefined;
            resourceInputs["reservationsCsv"] = state ? state.reservationsCsv : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ReservationsArgs | undefined;
            if ((!args || args.reservationsCsv === undefined) && !opts.urn) {
                throw new Error("Missing required property 'reservationsCsv'");
            }
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["reservationsCsv"] = args ? args.reservationsCsv : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["reservations"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Reservations.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Reservations resources.
 */
export interface ReservationsState {
    /**
     * organization
     */
    organizationId?: pulumi.Input<string>;
    reservations?: pulumi.Input<pulumi.Input<inputs.ReservationsReservation>[]>;
    /**
     * csv file containing reservations
     */
    reservationsCsv?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ReservationsTimeouts>;
}

/**
 * The set of arguments for constructing a Reservations resource.
 */
export interface ReservationsArgs {
    /**
     * organization
     */
    organizationId?: pulumi.Input<string>;
    /**
     * csv file containing reservations
     */
    reservationsCsv: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ReservationsTimeouts>;
}
