// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WorkloadScalingPolicy extends pulumi.CustomResource {
    /**
     * Get an existing WorkloadScalingPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkloadScalingPolicyState, opts?: pulumi.CustomResourceOptions): WorkloadScalingPolicy {
        return new WorkloadScalingPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'castai:index/workloadScalingPolicy:WorkloadScalingPolicy';

    /**
     * Returns true if the given object is an instance of WorkloadScalingPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkloadScalingPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkloadScalingPolicy.__pulumiType;
    }

    /**
     * Recommendation apply type. - IMMEDIATE - pods are restarted immediately when new recommendation is generated. - DEFERRED
     * - pods are not restarted and recommendation values are applied during natural restarts only (new deployment, etc.)
     */
    public readonly applyType!: pulumi.Output<string>;
    /**
     * CAST AI cluster id
     */
    public readonly clusterId!: pulumi.Output<string>;
    public readonly cpu!: pulumi.Output<outputs.WorkloadScalingPolicyCpu>;
    /**
     * Defines possible options for workload management. - READ_ONLY - workload watched (metrics collected), but no actions
     * performed by CAST AI. - MANAGED - workload watched (metrics collected), CAST AI may perform actions on the workload.
     */
    public readonly managementOption!: pulumi.Output<string>;
    public readonly memory!: pulumi.Output<outputs.WorkloadScalingPolicyMemory>;
    /**
     * Scaling policy name
     */
    public readonly name!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.WorkloadScalingPolicyTimeouts | undefined>;

    /**
     * Create a WorkloadScalingPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkloadScalingPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkloadScalingPolicyArgs | WorkloadScalingPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkloadScalingPolicyState | undefined;
            resourceInputs["applyType"] = state ? state.applyType : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["cpu"] = state ? state.cpu : undefined;
            resourceInputs["managementOption"] = state ? state.managementOption : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as WorkloadScalingPolicyArgs | undefined;
            if ((!args || args.applyType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applyType'");
            }
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.cpu === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cpu'");
            }
            if ((!args || args.managementOption === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managementOption'");
            }
            if ((!args || args.memory === undefined) && !opts.urn) {
                throw new Error("Missing required property 'memory'");
            }
            resourceInputs["applyType"] = args ? args.applyType : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["cpu"] = args ? args.cpu : undefined;
            resourceInputs["managementOption"] = args ? args.managementOption : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WorkloadScalingPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WorkloadScalingPolicy resources.
 */
export interface WorkloadScalingPolicyState {
    /**
     * Recommendation apply type. - IMMEDIATE - pods are restarted immediately when new recommendation is generated. - DEFERRED
     * - pods are not restarted and recommendation values are applied during natural restarts only (new deployment, etc.)
     */
    applyType?: pulumi.Input<string>;
    /**
     * CAST AI cluster id
     */
    clusterId?: pulumi.Input<string>;
    cpu?: pulumi.Input<inputs.WorkloadScalingPolicyCpu>;
    /**
     * Defines possible options for workload management. - READ_ONLY - workload watched (metrics collected), but no actions
     * performed by CAST AI. - MANAGED - workload watched (metrics collected), CAST AI may perform actions on the workload.
     */
    managementOption?: pulumi.Input<string>;
    memory?: pulumi.Input<inputs.WorkloadScalingPolicyMemory>;
    /**
     * Scaling policy name
     */
    name?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.WorkloadScalingPolicyTimeouts>;
}

/**
 * The set of arguments for constructing a WorkloadScalingPolicy resource.
 */
export interface WorkloadScalingPolicyArgs {
    /**
     * Recommendation apply type. - IMMEDIATE - pods are restarted immediately when new recommendation is generated. - DEFERRED
     * - pods are not restarted and recommendation values are applied during natural restarts only (new deployment, etc.)
     */
    applyType: pulumi.Input<string>;
    /**
     * CAST AI cluster id
     */
    clusterId: pulumi.Input<string>;
    cpu: pulumi.Input<inputs.WorkloadScalingPolicyCpu>;
    /**
     * Defines possible options for workload management. - READ_ONLY - workload watched (metrics collected), but no actions
     * performed by CAST AI. - MANAGED - workload watched (metrics collected), CAST AI may perform actions on the workload.
     */
    managementOption: pulumi.Input<string>;
    memory: pulumi.Input<inputs.WorkloadScalingPolicyMemory>;
    /**
     * Scaling policy name
     */
    name?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.WorkloadScalingPolicyTimeouts>;
}
