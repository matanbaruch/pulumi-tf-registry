// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NodeTemplate extends pulumi.CustomResource {
    /**
     * Get an existing NodeTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NodeTemplateState, opts?: pulumi.CustomResourceOptions): NodeTemplate {
        return new NodeTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'castai:index/nodeTemplate:NodeTemplate';

    /**
     * Returns true if the given object is an instance of NodeTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NodeTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NodeTemplate.__pulumiType;
    }

    /**
     * CAST AI cluster id.
     */
    public readonly clusterId!: pulumi.Output<string | undefined>;
    /**
     * CAST AI node configuration id to be used for node template.
     */
    public readonly configurationId!: pulumi.Output<string | undefined>;
    public readonly constraints!: pulumi.Output<outputs.NodeTemplateConstraints | undefined>;
    /**
     * Marks whether custom instances should be used when deciding which parts of inventory are available. Custom instances are
     * only supported in GCP.
     */
    public readonly customInstancesEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Marks whether custom instances with extended memory should be used when deciding which parts of inventory are available.
     * Custom instances are only supported in GCP.
     */
    public readonly customInstancesWithExtendedMemoryEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Custom labels to be added to nodes created from this template.
     */
    public readonly customLabels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Custom taints to be added to the nodes created from this template. `shouldTaint` has to be `true` in order to
     * create/update the node template with custom taints. If `shouldTaint` is `true`, but no custom taints are provided, the
     * nodes will be tainted with the default node template taint.
     */
    public readonly customTaints!: pulumi.Output<outputs.NodeTemplateCustomTaint[] | undefined>;
    /**
     * Flag whether the node template is default.
     */
    public readonly isDefault!: pulumi.Output<boolean | undefined>;
    /**
     * Flag whether the node template is enabled and considered for autoscaling.
     */
    public readonly isEnabled!: pulumi.Output<boolean>;
    /**
     * Name of the node template.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Minimum nodes that will be kept when rebalancing nodes using this node template.
     */
    public readonly rebalancingConfigMinNodes!: pulumi.Output<number | undefined>;
    /**
     * Marks whether the templated nodes will have a taint.
     */
    public readonly shouldTaint!: pulumi.Output<boolean | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.NodeTemplateTimeouts | undefined>;

    /**
     * Create a NodeTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NodeTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NodeTemplateArgs | NodeTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NodeTemplateState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["configurationId"] = state ? state.configurationId : undefined;
            resourceInputs["constraints"] = state ? state.constraints : undefined;
            resourceInputs["customInstancesEnabled"] = state ? state.customInstancesEnabled : undefined;
            resourceInputs["customInstancesWithExtendedMemoryEnabled"] = state ? state.customInstancesWithExtendedMemoryEnabled : undefined;
            resourceInputs["customLabels"] = state ? state.customLabels : undefined;
            resourceInputs["customTaints"] = state ? state.customTaints : undefined;
            resourceInputs["isDefault"] = state ? state.isDefault : undefined;
            resourceInputs["isEnabled"] = state ? state.isEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rebalancingConfigMinNodes"] = state ? state.rebalancingConfigMinNodes : undefined;
            resourceInputs["shouldTaint"] = state ? state.shouldTaint : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as NodeTemplateArgs | undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["configurationId"] = args ? args.configurationId : undefined;
            resourceInputs["constraints"] = args ? args.constraints : undefined;
            resourceInputs["customInstancesEnabled"] = args ? args.customInstancesEnabled : undefined;
            resourceInputs["customInstancesWithExtendedMemoryEnabled"] = args ? args.customInstancesWithExtendedMemoryEnabled : undefined;
            resourceInputs["customLabels"] = args ? args.customLabels : undefined;
            resourceInputs["customTaints"] = args ? args.customTaints : undefined;
            resourceInputs["isDefault"] = args ? args.isDefault : undefined;
            resourceInputs["isEnabled"] = args ? args.isEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rebalancingConfigMinNodes"] = args ? args.rebalancingConfigMinNodes : undefined;
            resourceInputs["shouldTaint"] = args ? args.shouldTaint : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NodeTemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NodeTemplate resources.
 */
export interface NodeTemplateState {
    /**
     * CAST AI cluster id.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * CAST AI node configuration id to be used for node template.
     */
    configurationId?: pulumi.Input<string>;
    constraints?: pulumi.Input<inputs.NodeTemplateConstraints>;
    /**
     * Marks whether custom instances should be used when deciding which parts of inventory are available. Custom instances are
     * only supported in GCP.
     */
    customInstancesEnabled?: pulumi.Input<boolean>;
    /**
     * Marks whether custom instances with extended memory should be used when deciding which parts of inventory are available.
     * Custom instances are only supported in GCP.
     */
    customInstancesWithExtendedMemoryEnabled?: pulumi.Input<boolean>;
    /**
     * Custom labels to be added to nodes created from this template.
     */
    customLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Custom taints to be added to the nodes created from this template. `shouldTaint` has to be `true` in order to
     * create/update the node template with custom taints. If `shouldTaint` is `true`, but no custom taints are provided, the
     * nodes will be tainted with the default node template taint.
     */
    customTaints?: pulumi.Input<pulumi.Input<inputs.NodeTemplateCustomTaint>[]>;
    /**
     * Flag whether the node template is default.
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * Flag whether the node template is enabled and considered for autoscaling.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the node template.
     */
    name?: pulumi.Input<string>;
    /**
     * Minimum nodes that will be kept when rebalancing nodes using this node template.
     */
    rebalancingConfigMinNodes?: pulumi.Input<number>;
    /**
     * Marks whether the templated nodes will have a taint.
     */
    shouldTaint?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.NodeTemplateTimeouts>;
}

/**
 * The set of arguments for constructing a NodeTemplate resource.
 */
export interface NodeTemplateArgs {
    /**
     * CAST AI cluster id.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * CAST AI node configuration id to be used for node template.
     */
    configurationId?: pulumi.Input<string>;
    constraints?: pulumi.Input<inputs.NodeTemplateConstraints>;
    /**
     * Marks whether custom instances should be used when deciding which parts of inventory are available. Custom instances are
     * only supported in GCP.
     */
    customInstancesEnabled?: pulumi.Input<boolean>;
    /**
     * Marks whether custom instances with extended memory should be used when deciding which parts of inventory are available.
     * Custom instances are only supported in GCP.
     */
    customInstancesWithExtendedMemoryEnabled?: pulumi.Input<boolean>;
    /**
     * Custom labels to be added to nodes created from this template.
     */
    customLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Custom taints to be added to the nodes created from this template. `shouldTaint` has to be `true` in order to
     * create/update the node template with custom taints. If `shouldTaint` is `true`, but no custom taints are provided, the
     * nodes will be tainted with the default node template taint.
     */
    customTaints?: pulumi.Input<pulumi.Input<inputs.NodeTemplateCustomTaint>[]>;
    /**
     * Flag whether the node template is default.
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * Flag whether the node template is enabled and considered for autoscaling.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * Name of the node template.
     */
    name?: pulumi.Input<string>;
    /**
     * Minimum nodes that will be kept when rebalancing nodes using this node template.
     */
    rebalancingConfigMinNodes?: pulumi.Input<number>;
    /**
     * Marks whether the templated nodes will have a taint.
     */
    shouldTaint?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.NodeTemplateTimeouts>;
}
