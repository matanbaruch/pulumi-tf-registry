// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RebalancingSchedule extends pulumi.CustomResource {
    /**
     * Get an existing RebalancingSchedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RebalancingScheduleState, opts?: pulumi.CustomResourceOptions): RebalancingSchedule {
        return new RebalancingSchedule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'castai:index/rebalancingSchedule:RebalancingSchedule';

    /**
     * Returns true if the given object is an instance of RebalancingSchedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RebalancingSchedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RebalancingSchedule.__pulumiType;
    }

    public readonly launchConfiguration!: pulumi.Output<outputs.RebalancingScheduleLaunchConfiguration>;
    /**
     * Name of the schedule.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly schedule!: pulumi.Output<outputs.RebalancingScheduleSchedule>;
    public readonly timeouts!: pulumi.Output<outputs.RebalancingScheduleTimeouts | undefined>;
    public readonly triggerConditions!: pulumi.Output<outputs.RebalancingScheduleTriggerConditions>;

    /**
     * Create a RebalancingSchedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RebalancingScheduleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RebalancingScheduleArgs | RebalancingScheduleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RebalancingScheduleState | undefined;
            resourceInputs["launchConfiguration"] = state ? state.launchConfiguration : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["triggerConditions"] = state ? state.triggerConditions : undefined;
        } else {
            const args = argsOrState as RebalancingScheduleArgs | undefined;
            if ((!args || args.launchConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'launchConfiguration'");
            }
            if ((!args || args.schedule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schedule'");
            }
            if ((!args || args.triggerConditions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'triggerConditions'");
            }
            resourceInputs["launchConfiguration"] = args ? args.launchConfiguration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["triggerConditions"] = args ? args.triggerConditions : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RebalancingSchedule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RebalancingSchedule resources.
 */
export interface RebalancingScheduleState {
    launchConfiguration?: pulumi.Input<inputs.RebalancingScheduleLaunchConfiguration>;
    /**
     * Name of the schedule.
     */
    name?: pulumi.Input<string>;
    schedule?: pulumi.Input<inputs.RebalancingScheduleSchedule>;
    timeouts?: pulumi.Input<inputs.RebalancingScheduleTimeouts>;
    triggerConditions?: pulumi.Input<inputs.RebalancingScheduleTriggerConditions>;
}

/**
 * The set of arguments for constructing a RebalancingSchedule resource.
 */
export interface RebalancingScheduleArgs {
    launchConfiguration: pulumi.Input<inputs.RebalancingScheduleLaunchConfiguration>;
    /**
     * Name of the schedule.
     */
    name?: pulumi.Input<string>;
    schedule: pulumi.Input<inputs.RebalancingScheduleSchedule>;
    timeouts?: pulumi.Input<inputs.RebalancingScheduleTimeouts>;
    triggerConditions: pulumi.Input<inputs.RebalancingScheduleTriggerConditions>;
}
