// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Commitments extends pulumi.CustomResource {
    /**
     * Get an existing Commitments resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CommitmentsState, opts?: pulumi.CustomResourceOptions): Commitments {
        return new Commitments(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'castai:index/commitments:Commitments';

    /**
     * Returns true if the given object is an instance of Commitments.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Commitments {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Commitments.__pulumiType;
    }

    /**
     * List of Azure reservations.
     */
    public /*out*/ readonly azureReservations!: pulumi.Output<outputs.CommitmentsAzureReservation[]>;
    /**
     * CSV file containing reservations exported from Azure.
     */
    public readonly azureReservationsCsv!: pulumi.Output<string | undefined>;
    /**
     * List of commitment configurations.
     */
    public readonly commitmentConfigs!: pulumi.Output<outputs.CommitmentsCommitmentConfig[] | undefined>;
    /**
     * List of GCP CUDs.
     */
    public /*out*/ readonly gcpCuds!: pulumi.Output<outputs.CommitmentsGcpCud[]>;
    /**
     * JSON file containing CUDs exported from GCP.
     */
    public readonly gcpCudsJson!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.CommitmentsTimeouts | undefined>;

    /**
     * Create a Commitments resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CommitmentsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CommitmentsArgs | CommitmentsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CommitmentsState | undefined;
            resourceInputs["azureReservations"] = state ? state.azureReservations : undefined;
            resourceInputs["azureReservationsCsv"] = state ? state.azureReservationsCsv : undefined;
            resourceInputs["commitmentConfigs"] = state ? state.commitmentConfigs : undefined;
            resourceInputs["gcpCuds"] = state ? state.gcpCuds : undefined;
            resourceInputs["gcpCudsJson"] = state ? state.gcpCudsJson : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as CommitmentsArgs | undefined;
            resourceInputs["azureReservationsCsv"] = args ? args.azureReservationsCsv : undefined;
            resourceInputs["commitmentConfigs"] = args ? args.commitmentConfigs : undefined;
            resourceInputs["gcpCudsJson"] = args ? args.gcpCudsJson : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["azureReservations"] = undefined /*out*/;
            resourceInputs["gcpCuds"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Commitments.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Commitments resources.
 */
export interface CommitmentsState {
    /**
     * List of Azure reservations.
     */
    azureReservations?: pulumi.Input<pulumi.Input<inputs.CommitmentsAzureReservation>[]>;
    /**
     * CSV file containing reservations exported from Azure.
     */
    azureReservationsCsv?: pulumi.Input<string>;
    /**
     * List of commitment configurations.
     */
    commitmentConfigs?: pulumi.Input<pulumi.Input<inputs.CommitmentsCommitmentConfig>[]>;
    /**
     * List of GCP CUDs.
     */
    gcpCuds?: pulumi.Input<pulumi.Input<inputs.CommitmentsGcpCud>[]>;
    /**
     * JSON file containing CUDs exported from GCP.
     */
    gcpCudsJson?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CommitmentsTimeouts>;
}

/**
 * The set of arguments for constructing a Commitments resource.
 */
export interface CommitmentsArgs {
    /**
     * CSV file containing reservations exported from Azure.
     */
    azureReservationsCsv?: pulumi.Input<string>;
    /**
     * List of commitment configurations.
     */
    commitmentConfigs?: pulumi.Input<pulumi.Input<inputs.CommitmentsCommitmentConfig>[]>;
    /**
     * JSON file containing CUDs exported from GCP.
     */
    gcpCudsJson?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CommitmentsTimeouts>;
}
