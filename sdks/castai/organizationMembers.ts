// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OrganizationMembers extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationMembers resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrganizationMembersState, opts?: pulumi.CustomResourceOptions): OrganizationMembers {
        return new OrganizationMembers(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'castai:index/organizationMembers:OrganizationMembers';

    /**
     * Returns true if the given object is an instance of OrganizationMembers.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrganizationMembers {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrganizationMembers.__pulumiType;
    }

    /**
     * A list of email addresses corresponding to users who should be given member access to the organization.
     */
    public readonly members!: pulumi.Output<string[] | undefined>;
    /**
     * CAST AI organization ID.
     */
    public readonly organizationId!: pulumi.Output<string>;
    /**
     * A list of email addresses corresponding to users who should be given owner access to the organization.
     */
    public readonly owners!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.OrganizationMembersTimeouts | undefined>;
    /**
     * A list of email addresses corresponding to users who should be given viewer access to the organization.
     */
    public readonly viewers!: pulumi.Output<string[] | undefined>;

    /**
     * Create a OrganizationMembers resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrganizationMembersArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrganizationMembersArgs | OrganizationMembersState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrganizationMembersState | undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["owners"] = state ? state.owners : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["viewers"] = state ? state.viewers : undefined;
        } else {
            const args = argsOrState as OrganizationMembersArgs | undefined;
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            resourceInputs["members"] = args ? args.members : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["owners"] = args ? args.owners : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["viewers"] = args ? args.viewers : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrganizationMembers.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OrganizationMembers resources.
 */
export interface OrganizationMembersState {
    /**
     * A list of email addresses corresponding to users who should be given member access to the organization.
     */
    members?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * CAST AI organization ID.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * A list of email addresses corresponding to users who should be given owner access to the organization.
     */
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.OrganizationMembersTimeouts>;
    /**
     * A list of email addresses corresponding to users who should be given viewer access to the organization.
     */
    viewers?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a OrganizationMembers resource.
 */
export interface OrganizationMembersArgs {
    /**
     * A list of email addresses corresponding to users who should be given member access to the organization.
     */
    members?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * CAST AI organization ID.
     */
    organizationId: pulumi.Input<string>;
    /**
     * A list of email addresses corresponding to users who should be given owner access to the organization.
     */
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.OrganizationMembersTimeouts>;
    /**
     * A list of email addresses corresponding to users who should be given viewer access to the organization.
     */
    viewers?: pulumi.Input<pulumi.Input<string>[]>;
}
