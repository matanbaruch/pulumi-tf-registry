// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SsoConnection extends pulumi.CustomResource {
    /**
     * Get an existing SsoConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SsoConnectionState, opts?: pulumi.CustomResourceOptions): SsoConnection {
        return new SsoConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'castai:index/ssoConnection:SsoConnection';

    /**
     * Returns true if the given object is an instance of SsoConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SsoConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SsoConnection.__pulumiType;
    }

    /**
     * Azure AD connector
     */
    public readonly aad!: pulumi.Output<outputs.SsoConnectionAad | undefined>;
    /**
     * Additional email domains that will be allowed to sign in via the connection
     */
    public readonly additionalEmailDomains!: pulumi.Output<string[] | undefined>;
    /**
     * Email domain of the connection
     */
    public readonly emailDomain!: pulumi.Output<string>;
    /**
     * Connection name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Okta connector
     */
    public readonly okta!: pulumi.Output<outputs.SsoConnectionOkta | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.SsoConnectionTimeouts | undefined>;

    /**
     * Create a SsoConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SsoConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SsoConnectionArgs | SsoConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SsoConnectionState | undefined;
            resourceInputs["aad"] = state ? state.aad : undefined;
            resourceInputs["additionalEmailDomains"] = state ? state.additionalEmailDomains : undefined;
            resourceInputs["emailDomain"] = state ? state.emailDomain : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["okta"] = state ? state.okta : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as SsoConnectionArgs | undefined;
            if ((!args || args.emailDomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'emailDomain'");
            }
            resourceInputs["aad"] = args ? args.aad : undefined;
            resourceInputs["additionalEmailDomains"] = args ? args.additionalEmailDomains : undefined;
            resourceInputs["emailDomain"] = args ? args.emailDomain : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["okta"] = args ? args.okta : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SsoConnection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SsoConnection resources.
 */
export interface SsoConnectionState {
    /**
     * Azure AD connector
     */
    aad?: pulumi.Input<inputs.SsoConnectionAad>;
    /**
     * Additional email domains that will be allowed to sign in via the connection
     */
    additionalEmailDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Email domain of the connection
     */
    emailDomain?: pulumi.Input<string>;
    /**
     * Connection name
     */
    name?: pulumi.Input<string>;
    /**
     * Okta connector
     */
    okta?: pulumi.Input<inputs.SsoConnectionOkta>;
    timeouts?: pulumi.Input<inputs.SsoConnectionTimeouts>;
}

/**
 * The set of arguments for constructing a SsoConnection resource.
 */
export interface SsoConnectionArgs {
    /**
     * Azure AD connector
     */
    aad?: pulumi.Input<inputs.SsoConnectionAad>;
    /**
     * Additional email domains that will be allowed to sign in via the connection
     */
    additionalEmailDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Email domain of the connection
     */
    emailDomain: pulumi.Input<string>;
    /**
     * Connection name
     */
    name?: pulumi.Input<string>;
    /**
     * Okta connector
     */
    okta?: pulumi.Input<inputs.SsoConnectionOkta>;
    timeouts?: pulumi.Input<inputs.SsoConnectionTimeouts>;
}
