// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AksClusterArgs, AksClusterState } from "./aksCluster";
export type AksCluster = import("./aksCluster").AksCluster;
export const AksCluster: typeof import("./aksCluster").AksCluster = null as any;
utilities.lazyLoad(exports, ["AksCluster"], () => require("./aksCluster"));

export { AutoscalerArgs, AutoscalerState } from "./autoscaler";
export type Autoscaler = import("./autoscaler").Autoscaler;
export const Autoscaler: typeof import("./autoscaler").Autoscaler = null as any;
utilities.lazyLoad(exports, ["Autoscaler"], () => require("./autoscaler"));

export { CommitmentsArgs, CommitmentsState } from "./commitments";
export type Commitments = import("./commitments").Commitments;
export const Commitments: typeof import("./commitments").Commitments = null as any;
utilities.lazyLoad(exports, ["Commitments"], () => require("./commitments"));

export { EksClusterArgs, EksClusterState } from "./eksCluster";
export type EksCluster = import("./eksCluster").EksCluster;
export const EksCluster: typeof import("./eksCluster").EksCluster = null as any;
utilities.lazyLoad(exports, ["EksCluster"], () => require("./eksCluster"));

export { EksClusteridArgs, EksClusteridState } from "./eksClusterid";
export type EksClusterid = import("./eksClusterid").EksClusterid;
export const EksClusterid: typeof import("./eksClusterid").EksClusterid = null as any;
utilities.lazyLoad(exports, ["EksClusterid"], () => require("./eksClusterid"));

export { EksUserArnArgs, EksUserArnState } from "./eksUserArn";
export type EksUserArn = import("./eksUserArn").EksUserArn;
export const EksUserArn: typeof import("./eksUserArn").EksUserArn = null as any;
utilities.lazyLoad(exports, ["EksUserArn"], () => require("./eksUserArn"));

export { EvictorAdvancedConfigArgs, EvictorAdvancedConfigState } from "./evictorAdvancedConfig";
export type EvictorAdvancedConfig = import("./evictorAdvancedConfig").EvictorAdvancedConfig;
export const EvictorAdvancedConfig: typeof import("./evictorAdvancedConfig").EvictorAdvancedConfig = null as any;
utilities.lazyLoad(exports, ["EvictorAdvancedConfig"], () => require("./evictorAdvancedConfig"));

export { GetEksSettingsArgs, GetEksSettingsResult, GetEksSettingsOutputArgs } from "./getEksSettings";
export const getEksSettings: typeof import("./getEksSettings").getEksSettings = null as any;
export const getEksSettingsOutput: typeof import("./getEksSettings").getEksSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getEksSettings","getEksSettingsOutput"], () => require("./getEksSettings"));

export { GetEksUserArnArgs, GetEksUserArnResult, GetEksUserArnOutputArgs } from "./getEksUserArn";
export const getEksUserArn: typeof import("./getEksUserArn").getEksUserArn = null as any;
export const getEksUserArnOutput: typeof import("./getEksUserArn").getEksUserArnOutput = null as any;
utilities.lazyLoad(exports, ["getEksUserArn","getEksUserArnOutput"], () => require("./getEksUserArn"));

export { GetGkeUserPoliciesArgs, GetGkeUserPoliciesResult, GetGkeUserPoliciesOutputArgs } from "./getGkeUserPolicies";
export const getGkeUserPolicies: typeof import("./getGkeUserPolicies").getGkeUserPolicies = null as any;
export const getGkeUserPoliciesOutput: typeof import("./getGkeUserPolicies").getGkeUserPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getGkeUserPolicies","getGkeUserPoliciesOutput"], () => require("./getGkeUserPolicies"));

export { GetOrganizationArgs, GetOrganizationResult, GetOrganizationOutputArgs } from "./getOrganization";
export const getOrganization: typeof import("./getOrganization").getOrganization = null as any;
export const getOrganizationOutput: typeof import("./getOrganization").getOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganization","getOrganizationOutput"], () => require("./getOrganization"));

export { GkeClusterArgs, GkeClusterState } from "./gkeCluster";
export type GkeCluster = import("./gkeCluster").GkeCluster;
export const GkeCluster: typeof import("./gkeCluster").GkeCluster = null as any;
utilities.lazyLoad(exports, ["GkeCluster"], () => require("./gkeCluster"));

export { NodeConfigurationArgs, NodeConfigurationState } from "./nodeConfiguration";
export type NodeConfiguration = import("./nodeConfiguration").NodeConfiguration;
export const NodeConfiguration: typeof import("./nodeConfiguration").NodeConfiguration = null as any;
utilities.lazyLoad(exports, ["NodeConfiguration"], () => require("./nodeConfiguration"));

export { NodeConfigurationDefaultArgs, NodeConfigurationDefaultState } from "./nodeConfigurationDefault";
export type NodeConfigurationDefault = import("./nodeConfigurationDefault").NodeConfigurationDefault;
export const NodeConfigurationDefault: typeof import("./nodeConfigurationDefault").NodeConfigurationDefault = null as any;
utilities.lazyLoad(exports, ["NodeConfigurationDefault"], () => require("./nodeConfigurationDefault"));

export { NodeTemplateArgs, NodeTemplateState } from "./nodeTemplate";
export type NodeTemplate = import("./nodeTemplate").NodeTemplate;
export const NodeTemplate: typeof import("./nodeTemplate").NodeTemplate = null as any;
utilities.lazyLoad(exports, ["NodeTemplate"], () => require("./nodeTemplate"));

export { OrganizationMembersArgs, OrganizationMembersState } from "./organizationMembers";
export type OrganizationMembers = import("./organizationMembers").OrganizationMembers;
export const OrganizationMembers: typeof import("./organizationMembers").OrganizationMembers = null as any;
utilities.lazyLoad(exports, ["OrganizationMembers"], () => require("./organizationMembers"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RebalancingJobArgs, RebalancingJobState } from "./rebalancingJob";
export type RebalancingJob = import("./rebalancingJob").RebalancingJob;
export const RebalancingJob: typeof import("./rebalancingJob").RebalancingJob = null as any;
utilities.lazyLoad(exports, ["RebalancingJob"], () => require("./rebalancingJob"));

export { RebalancingScheduleArgs, RebalancingScheduleState } from "./rebalancingSchedule";
export type RebalancingSchedule = import("./rebalancingSchedule").RebalancingSchedule;
export const RebalancingSchedule: typeof import("./rebalancingSchedule").RebalancingSchedule = null as any;
utilities.lazyLoad(exports, ["RebalancingSchedule"], () => require("./rebalancingSchedule"));

export { ReservationsArgs, ReservationsState } from "./reservations";
export type Reservations = import("./reservations").Reservations;
export const Reservations: typeof import("./reservations").Reservations = null as any;
utilities.lazyLoad(exports, ["Reservations"], () => require("./reservations"));

export { SsoConnectionArgs, SsoConnectionState } from "./ssoConnection";
export type SsoConnection = import("./ssoConnection").SsoConnection;
export const SsoConnection: typeof import("./ssoConnection").SsoConnection = null as any;
utilities.lazyLoad(exports, ["SsoConnection"], () => require("./ssoConnection"));

export { WorkloadScalingPolicyArgs, WorkloadScalingPolicyState } from "./workloadScalingPolicy";
export type WorkloadScalingPolicy = import("./workloadScalingPolicy").WorkloadScalingPolicy;
export const WorkloadScalingPolicy: typeof import("./workloadScalingPolicy").WorkloadScalingPolicy = null as any;
utilities.lazyLoad(exports, ["WorkloadScalingPolicy"], () => require("./workloadScalingPolicy"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "castai:index/aksCluster:AksCluster":
                return new AksCluster(name, <any>undefined, { urn })
            case "castai:index/autoscaler:Autoscaler":
                return new Autoscaler(name, <any>undefined, { urn })
            case "castai:index/commitments:Commitments":
                return new Commitments(name, <any>undefined, { urn })
            case "castai:index/eksCluster:EksCluster":
                return new EksCluster(name, <any>undefined, { urn })
            case "castai:index/eksClusterid:EksClusterid":
                return new EksClusterid(name, <any>undefined, { urn })
            case "castai:index/eksUserArn:EksUserArn":
                return new EksUserArn(name, <any>undefined, { urn })
            case "castai:index/evictorAdvancedConfig:EvictorAdvancedConfig":
                return new EvictorAdvancedConfig(name, <any>undefined, { urn })
            case "castai:index/gkeCluster:GkeCluster":
                return new GkeCluster(name, <any>undefined, { urn })
            case "castai:index/nodeConfiguration:NodeConfiguration":
                return new NodeConfiguration(name, <any>undefined, { urn })
            case "castai:index/nodeConfigurationDefault:NodeConfigurationDefault":
                return new NodeConfigurationDefault(name, <any>undefined, { urn })
            case "castai:index/nodeTemplate:NodeTemplate":
                return new NodeTemplate(name, <any>undefined, { urn })
            case "castai:index/organizationMembers:OrganizationMembers":
                return new OrganizationMembers(name, <any>undefined, { urn })
            case "castai:index/rebalancingJob:RebalancingJob":
                return new RebalancingJob(name, <any>undefined, { urn })
            case "castai:index/rebalancingSchedule:RebalancingSchedule":
                return new RebalancingSchedule(name, <any>undefined, { urn })
            case "castai:index/reservations:Reservations":
                return new Reservations(name, <any>undefined, { urn })
            case "castai:index/ssoConnection:SsoConnection":
                return new SsoConnection(name, <any>undefined, { urn })
            case "castai:index/workloadScalingPolicy:WorkloadScalingPolicy":
                return new WorkloadScalingPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("castai", "index/aksCluster", _module)
pulumi.runtime.registerResourceModule("castai", "index/autoscaler", _module)
pulumi.runtime.registerResourceModule("castai", "index/commitments", _module)
pulumi.runtime.registerResourceModule("castai", "index/eksCluster", _module)
pulumi.runtime.registerResourceModule("castai", "index/eksClusterid", _module)
pulumi.runtime.registerResourceModule("castai", "index/eksUserArn", _module)
pulumi.runtime.registerResourceModule("castai", "index/evictorAdvancedConfig", _module)
pulumi.runtime.registerResourceModule("castai", "index/gkeCluster", _module)
pulumi.runtime.registerResourceModule("castai", "index/nodeConfiguration", _module)
pulumi.runtime.registerResourceModule("castai", "index/nodeConfigurationDefault", _module)
pulumi.runtime.registerResourceModule("castai", "index/nodeTemplate", _module)
pulumi.runtime.registerResourceModule("castai", "index/organizationMembers", _module)
pulumi.runtime.registerResourceModule("castai", "index/rebalancingJob", _module)
pulumi.runtime.registerResourceModule("castai", "index/rebalancingSchedule", _module)
pulumi.runtime.registerResourceModule("castai", "index/reservations", _module)
pulumi.runtime.registerResourceModule("castai", "index/ssoConnection", _module)
pulumi.runtime.registerResourceModule("castai", "index/workloadScalingPolicy", _module)
pulumi.runtime.registerResourcePackage("castai", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:castai") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
