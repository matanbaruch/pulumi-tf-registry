// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Rule extends pulumi.CustomResource {
    /**
     * Get an existing Rule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RuleState, opts?: pulumi.CustomResourceOptions): Rule {
        return new Rule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'jupiterone:index/rule:Rule';

    /**
     * Returns true if the given object is an instance of Rule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Rule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Rule.__pulumiType;
    }

    /**
     * Description of the rule
     */
    public readonly description!: pulumi.Output<string>;
    public readonly ignorePreviousResults!: pulumi.Output<boolean>;
    /**
     * Name of the rule, which is unique to each account.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly notifyOnFailure!: pulumi.Output<boolean>;
    /**
     * Actions that are executed when a corresponding condition is met.
     */
    public readonly operations!: pulumi.Output<outputs.RuleOperation[]>;
    /**
     * Names of properties that can be used throughout the rule evaluation process and will be included in each record of a
     * rule evaluation. (e.g. queries.query0.total)
     */
    public readonly outputs!: pulumi.Output<string[] | undefined>;
    /**
     * Frequency of automated rule evaluation. Defaults to ONE_DAY.
     */
    public readonly pollingInterval!: pulumi.Output<string>;
    /**
     * Specifies the ID of a question to be used in rule evaluation.
     */
    public readonly questionId!: pulumi.Output<string | undefined>;
    /**
     * Contains properties related to queries used in the rule evaluation.
     */
    public readonly questions!: pulumi.Output<outputs.RuleQuestion[] | undefined>;
    /**
     * Rule evaluation specification version in the case of breaking changes.
     */
    public readonly specVersion!: pulumi.Output<number>;
    /**
     * Comma separated list of tags to apply to the rule.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Optional key/value pairs of template name to template
     */
    public readonly templates!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly triggerOnNewOnly!: pulumi.Output<boolean>;
    /**
     * Computed current version of the rule. Incremented each time the rule is updated.
     */
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a Rule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RuleArgs | RuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RuleState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ignorePreviousResults"] = state ? state.ignorePreviousResults : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifyOnFailure"] = state ? state.notifyOnFailure : undefined;
            resourceInputs["operations"] = state ? state.operations : undefined;
            resourceInputs["outputs"] = state ? state.outputs : undefined;
            resourceInputs["pollingInterval"] = state ? state.pollingInterval : undefined;
            resourceInputs["questionId"] = state ? state.questionId : undefined;
            resourceInputs["questions"] = state ? state.questions : undefined;
            resourceInputs["specVersion"] = state ? state.specVersion : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["templates"] = state ? state.templates : undefined;
            resourceInputs["triggerOnNewOnly"] = state ? state.triggerOnNewOnly : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as RuleArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.operations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'operations'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ignorePreviousResults"] = args ? args.ignorePreviousResults : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notifyOnFailure"] = args ? args.notifyOnFailure : undefined;
            resourceInputs["operations"] = args ? args.operations : undefined;
            resourceInputs["outputs"] = args ? args.outputs : undefined;
            resourceInputs["pollingInterval"] = args ? args.pollingInterval : undefined;
            resourceInputs["questionId"] = args ? args.questionId : undefined;
            resourceInputs["questions"] = args ? args.questions : undefined;
            resourceInputs["specVersion"] = args ? args.specVersion : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["templates"] = args ? args.templates : undefined;
            resourceInputs["triggerOnNewOnly"] = args ? args.triggerOnNewOnly : undefined;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Rule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Rule resources.
 */
export interface RuleState {
    /**
     * Description of the rule
     */
    description?: pulumi.Input<string>;
    ignorePreviousResults?: pulumi.Input<boolean>;
    /**
     * Name of the rule, which is unique to each account.
     */
    name?: pulumi.Input<string>;
    notifyOnFailure?: pulumi.Input<boolean>;
    /**
     * Actions that are executed when a corresponding condition is met.
     */
    operations?: pulumi.Input<pulumi.Input<inputs.RuleOperation>[]>;
    /**
     * Names of properties that can be used throughout the rule evaluation process and will be included in each record of a
     * rule evaluation. (e.g. queries.query0.total)
     */
    outputs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Frequency of automated rule evaluation. Defaults to ONE_DAY.
     */
    pollingInterval?: pulumi.Input<string>;
    /**
     * Specifies the ID of a question to be used in rule evaluation.
     */
    questionId?: pulumi.Input<string>;
    /**
     * Contains properties related to queries used in the rule evaluation.
     */
    questions?: pulumi.Input<pulumi.Input<inputs.RuleQuestion>[]>;
    /**
     * Rule evaluation specification version in the case of breaking changes.
     */
    specVersion?: pulumi.Input<number>;
    /**
     * Comma separated list of tags to apply to the rule.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Optional key/value pairs of template name to template
     */
    templates?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    triggerOnNewOnly?: pulumi.Input<boolean>;
    /**
     * Computed current version of the rule. Incremented each time the rule is updated.
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Rule resource.
 */
export interface RuleArgs {
    /**
     * Description of the rule
     */
    description: pulumi.Input<string>;
    ignorePreviousResults?: pulumi.Input<boolean>;
    /**
     * Name of the rule, which is unique to each account.
     */
    name?: pulumi.Input<string>;
    notifyOnFailure?: pulumi.Input<boolean>;
    /**
     * Actions that are executed when a corresponding condition is met.
     */
    operations: pulumi.Input<pulumi.Input<inputs.RuleOperation>[]>;
    /**
     * Names of properties that can be used throughout the rule evaluation process and will be included in each record of a
     * rule evaluation. (e.g. queries.query0.total)
     */
    outputs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Frequency of automated rule evaluation. Defaults to ONE_DAY.
     */
    pollingInterval?: pulumi.Input<string>;
    /**
     * Specifies the ID of a question to be used in rule evaluation.
     */
    questionId?: pulumi.Input<string>;
    /**
     * Contains properties related to queries used in the rule evaluation.
     */
    questions?: pulumi.Input<pulumi.Input<inputs.RuleQuestion>[]>;
    /**
     * Rule evaluation specification version in the case of breaking changes.
     */
    specVersion?: pulumi.Input<number>;
    /**
     * Comma separated list of tags to apply to the rule.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Optional key/value pairs of template name to template
     */
    templates?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    triggerOnNewOnly?: pulumi.Input<boolean>;
}
