// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Framework extends pulumi.CustomResource {
    /**
     * Get an existing Framework resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FrameworkState, opts?: pulumi.CustomResourceOptions): Framework {
        return new Framework(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'jupiterone:index/framework:Framework';

    /**
     * Returns true if the given object is an instance of Framework.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Framework {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Framework.__pulumiType;
    }

    /**
     * Whether this is a standard, benchmark, or questionnaire
     */
    public readonly frameworkType!: pulumi.Output<string>;
    /**
     * The framework's name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * JSON encoded filters for scoping the framework.
     */
    public readonly scopeFilters!: pulumi.Output<string[]>;
    /**
     * Version of the framework itself (not an J1 API version)
     */
    public readonly version!: pulumi.Output<string>;
    /**
     * A URL for referencing additional information about the framework
     */
    public readonly webLink!: pulumi.Output<string | undefined>;

    /**
     * Create a Framework resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FrameworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FrameworkArgs | FrameworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FrameworkState | undefined;
            resourceInputs["frameworkType"] = state ? state.frameworkType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scopeFilters"] = state ? state.scopeFilters : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["webLink"] = state ? state.webLink : undefined;
        } else {
            const args = argsOrState as FrameworkArgs | undefined;
            if ((!args || args.frameworkType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frameworkType'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["frameworkType"] = args ? args.frameworkType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scopeFilters"] = args ? args.scopeFilters : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["webLink"] = args ? args.webLink : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Framework.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Framework resources.
 */
export interface FrameworkState {
    /**
     * Whether this is a standard, benchmark, or questionnaire
     */
    frameworkType?: pulumi.Input<string>;
    /**
     * The framework's name
     */
    name?: pulumi.Input<string>;
    /**
     * JSON encoded filters for scoping the framework.
     */
    scopeFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Version of the framework itself (not an J1 API version)
     */
    version?: pulumi.Input<string>;
    /**
     * A URL for referencing additional information about the framework
     */
    webLink?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Framework resource.
 */
export interface FrameworkArgs {
    /**
     * Whether this is a standard, benchmark, or questionnaire
     */
    frameworkType: pulumi.Input<string>;
    /**
     * The framework's name
     */
    name?: pulumi.Input<string>;
    /**
     * JSON encoded filters for scoping the framework.
     */
    scopeFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Version of the framework itself (not an J1 API version)
     */
    version: pulumi.Input<string>;
    /**
     * A URL for referencing additional information about the framework
     */
    webLink?: pulumi.Input<string>;
}
