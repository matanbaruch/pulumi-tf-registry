// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Question extends pulumi.CustomResource {
    /**
     * Get an existing Question resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QuestionState, opts?: pulumi.CustomResourceOptions): Question {
        return new Question(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'jupiterone:index/question:Question';

    /**
     * Returns true if the given object is an instance of Question.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Question {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Question.__pulumiType;
    }

    public readonly compliances!: pulumi.Output<outputs.QuestionCompliance[] | undefined>;
    public readonly description!: pulumi.Output<string>;
    /**
     * Frequency of automated question evaluation. Defaults to ONE_DAY.
     */
    public readonly pollingInterval!: pulumi.Output<string>;
    public readonly queries!: pulumi.Output<outputs.QuestionQuery[] | undefined>;
    /**
     * Whether to enable daily trend data collection. Defaults to false.
     */
    public readonly showTrend!: pulumi.Output<boolean>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The title of the question
     */
    public readonly title!: pulumi.Output<string>;

    /**
     * Create a Question resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QuestionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QuestionArgs | QuestionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as QuestionState | undefined;
            resourceInputs["compliances"] = state ? state.compliances : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["pollingInterval"] = state ? state.pollingInterval : undefined;
            resourceInputs["queries"] = state ? state.queries : undefined;
            resourceInputs["showTrend"] = state ? state.showTrend : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
        } else {
            const args = argsOrState as QuestionArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["compliances"] = args ? args.compliances : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["pollingInterval"] = args ? args.pollingInterval : undefined;
            resourceInputs["queries"] = args ? args.queries : undefined;
            resourceInputs["showTrend"] = args ? args.showTrend : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Question.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Question resources.
 */
export interface QuestionState {
    compliances?: pulumi.Input<pulumi.Input<inputs.QuestionCompliance>[]>;
    description?: pulumi.Input<string>;
    /**
     * Frequency of automated question evaluation. Defaults to ONE_DAY.
     */
    pollingInterval?: pulumi.Input<string>;
    queries?: pulumi.Input<pulumi.Input<inputs.QuestionQuery>[]>;
    /**
     * Whether to enable daily trend data collection. Defaults to false.
     */
    showTrend?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The title of the question
     */
    title?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Question resource.
 */
export interface QuestionArgs {
    compliances?: pulumi.Input<pulumi.Input<inputs.QuestionCompliance>[]>;
    description: pulumi.Input<string>;
    /**
     * Frequency of automated question evaluation. Defaults to ONE_DAY.
     */
    pollingInterval?: pulumi.Input<string>;
    queries?: pulumi.Input<pulumi.Input<inputs.QuestionQuery>[]>;
    /**
     * Whether to enable daily trend data collection. Defaults to false.
     */
    showTrend?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The title of the question
     */
    title: pulumi.Input<string>;
}
