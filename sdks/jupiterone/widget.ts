// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Widget extends pulumi.CustomResource {
    /**
     * Get an existing Widget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WidgetState, opts?: pulumi.CustomResourceOptions): Widget {
        return new Widget(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'jupiterone:index/widget:Widget';

    /**
     * Returns true if the given object is an instance of Widget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Widget {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Widget.__pulumiType;
    }

    /**
     * The configuration properties for the widget.
     */
    public readonly config!: pulumi.Output<outputs.WidgetConfig>;
    /**
     * The ID for the dashboard where the widget will be added.
     */
    public readonly dashboardId!: pulumi.Output<string>;
    /**
     * The description for widget.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The title of the widget.
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * The type of the widget.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Widget resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WidgetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WidgetArgs | WidgetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WidgetState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["dashboardId"] = state ? state.dashboardId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as WidgetArgs | undefined;
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.dashboardId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dashboardId'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["dashboardId"] = args ? args.dashboardId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Widget.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Widget resources.
 */
export interface WidgetState {
    /**
     * The configuration properties for the widget.
     */
    config?: pulumi.Input<inputs.WidgetConfig>;
    /**
     * The ID for the dashboard where the widget will be added.
     */
    dashboardId?: pulumi.Input<string>;
    /**
     * The description for widget.
     */
    description?: pulumi.Input<string>;
    /**
     * The title of the widget.
     */
    title?: pulumi.Input<string>;
    /**
     * The type of the widget.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Widget resource.
 */
export interface WidgetArgs {
    /**
     * The configuration properties for the widget.
     */
    config: pulumi.Input<inputs.WidgetConfig>;
    /**
     * The ID for the dashboard where the widget will be added.
     */
    dashboardId: pulumi.Input<string>;
    /**
     * The description for widget.
     */
    description?: pulumi.Input<string>;
    /**
     * The title of the widget.
     */
    title: pulumi.Input<string>;
    /**
     * The type of the widget.
     */
    type: pulumi.Input<string>;
}
