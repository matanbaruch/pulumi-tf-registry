// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AnomalyNotification extends pulumi.CustomResource {
    /**
     * Get an existing AnomalyNotification resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AnomalyNotificationState, opts?: pulumi.CustomResourceOptions): AnomalyNotification {
        return new AnomalyNotification(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vantage:index/anomalyNotification:AnomalyNotification';

    /**
     * Returns true if the given object is an instance of AnomalyNotification.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AnomalyNotification {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AnomalyNotification.__pulumiType;
    }

    /**
     * The token of the Cost Report folder that has the notification.
     */
    public readonly costReportToken!: pulumi.Output<string>;
    /**
     * The date and time, in UTC, the AnomalyNotification was created. ISO 8601 Formatted.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The Slack/MS Teams channels that receive the notification.
     */
    public readonly recipientChannels!: pulumi.Output<string[]>;
    /**
     * The threshold amount that must be met for the notification to fire.
     */
    public readonly threshold!: pulumi.Output<number>;
    /**
     * The token of the report alert
     */
    public /*out*/ readonly token!: pulumi.Output<string>;
    /**
     * The date and time, in UTC, the AnomalyNotification was last updated at. ISO 8601 Formatted.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The tokens of the users that receive the notification.
     */
    public readonly userTokens!: pulumi.Output<string[]>;

    /**
     * Create a AnomalyNotification resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AnomalyNotificationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AnomalyNotificationArgs | AnomalyNotificationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AnomalyNotificationState | undefined;
            resourceInputs["costReportToken"] = state ? state.costReportToken : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["recipientChannels"] = state ? state.recipientChannels : undefined;
            resourceInputs["threshold"] = state ? state.threshold : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["userTokens"] = state ? state.userTokens : undefined;
        } else {
            const args = argsOrState as AnomalyNotificationArgs | undefined;
            if ((!args || args.costReportToken === undefined) && !opts.urn) {
                throw new Error("Missing required property 'costReportToken'");
            }
            resourceInputs["costReportToken"] = args ? args.costReportToken : undefined;
            resourceInputs["recipientChannels"] = args ? args.recipientChannels : undefined;
            resourceInputs["threshold"] = args ? args.threshold : undefined;
            resourceInputs["userTokens"] = args ? args.userTokens : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["token"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AnomalyNotification.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AnomalyNotification resources.
 */
export interface AnomalyNotificationState {
    /**
     * The token of the Cost Report folder that has the notification.
     */
    costReportToken?: pulumi.Input<string>;
    /**
     * The date and time, in UTC, the AnomalyNotification was created. ISO 8601 Formatted.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The Slack/MS Teams channels that receive the notification.
     */
    recipientChannels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The threshold amount that must be met for the notification to fire.
     */
    threshold?: pulumi.Input<number>;
    /**
     * The token of the report alert
     */
    token?: pulumi.Input<string>;
    /**
     * The date and time, in UTC, the AnomalyNotification was last updated at. ISO 8601 Formatted.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The tokens of the users that receive the notification.
     */
    userTokens?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a AnomalyNotification resource.
 */
export interface AnomalyNotificationArgs {
    /**
     * The token of the Cost Report folder that has the notification.
     */
    costReportToken: pulumi.Input<string>;
    /**
     * The Slack/MS Teams channels that receive the notification.
     */
    recipientChannels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The threshold amount that must be met for the notification to fire.
     */
    threshold?: pulumi.Input<number>;
    /**
     * The tokens of the users that receive the notification.
     */
    userTokens?: pulumi.Input<pulumi.Input<string>[]>;
}
