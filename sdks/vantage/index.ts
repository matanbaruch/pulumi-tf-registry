// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccessGrantArgs, AccessGrantState } from "./accessGrant";
export type AccessGrant = import("./accessGrant").AccessGrant;
export const AccessGrant: typeof import("./accessGrant").AccessGrant = null as any;
utilities.lazyLoad(exports, ["AccessGrant"], () => require("./accessGrant"));

export { AnomalyNotificationArgs, AnomalyNotificationState } from "./anomalyNotification";
export type AnomalyNotification = import("./anomalyNotification").AnomalyNotification;
export const AnomalyNotification: typeof import("./anomalyNotification").AnomalyNotification = null as any;
utilities.lazyLoad(exports, ["AnomalyNotification"], () => require("./anomalyNotification"));

export { AwsProviderArgs, AwsProviderState } from "./awsProvider";
export type AwsProvider = import("./awsProvider").AwsProvider;
export const AwsProvider: typeof import("./awsProvider").AwsProvider = null as any;
utilities.lazyLoad(exports, ["AwsProvider"], () => require("./awsProvider"));

export { BillingRuleArgs, BillingRuleState } from "./billingRule";
export type BillingRule = import("./billingRule").BillingRule;
export const BillingRule: typeof import("./billingRule").BillingRule = null as any;
utilities.lazyLoad(exports, ["BillingRule"], () => require("./billingRule"));

export { BudgetArgs, BudgetState } from "./budget";
export type Budget = import("./budget").Budget;
export const Budget: typeof import("./budget").Budget = null as any;
utilities.lazyLoad(exports, ["Budget"], () => require("./budget"));

export { BusinessMetricArgs, BusinessMetricState } from "./businessMetric";
export type BusinessMetric = import("./businessMetric").BusinessMetric;
export const BusinessMetric: typeof import("./businessMetric").BusinessMetric = null as any;
utilities.lazyLoad(exports, ["BusinessMetric"], () => require("./businessMetric"));

export { CostReportArgs, CostReportState } from "./costReport";
export type CostReport = import("./costReport").CostReport;
export const CostReport: typeof import("./costReport").CostReport = null as any;
utilities.lazyLoad(exports, ["CostReport"], () => require("./costReport"));

export { DashboardArgs, DashboardState } from "./dashboard";
export type Dashboard = import("./dashboard").Dashboard;
export const Dashboard: typeof import("./dashboard").Dashboard = null as any;
utilities.lazyLoad(exports, ["Dashboard"], () => require("./dashboard"));

export { FolderArgs, FolderState } from "./folder";
export type Folder = import("./folder").Folder;
export const Folder: typeof import("./folder").Folder = null as any;
utilities.lazyLoad(exports, ["Folder"], () => require("./folder"));

export { GetAccessGrantsResult } from "./getAccessGrants";
export const getAccessGrants: typeof import("./getAccessGrants").getAccessGrants = null as any;
export const getAccessGrantsOutput: typeof import("./getAccessGrants").getAccessGrantsOutput = null as any;
utilities.lazyLoad(exports, ["getAccessGrants","getAccessGrantsOutput"], () => require("./getAccessGrants"));

export { GetAnomalyNotificationsResult } from "./getAnomalyNotifications";
export const getAnomalyNotifications: typeof import("./getAnomalyNotifications").getAnomalyNotifications = null as any;
export const getAnomalyNotificationsOutput: typeof import("./getAnomalyNotifications").getAnomalyNotificationsOutput = null as any;
utilities.lazyLoad(exports, ["getAnomalyNotifications","getAnomalyNotificationsOutput"], () => require("./getAnomalyNotifications"));

export { GetAwsProviderInfoResult } from "./getAwsProviderInfo";
export const getAwsProviderInfo: typeof import("./getAwsProviderInfo").getAwsProviderInfo = null as any;
export const getAwsProviderInfoOutput: typeof import("./getAwsProviderInfo").getAwsProviderInfoOutput = null as any;
utilities.lazyLoad(exports, ["getAwsProviderInfo","getAwsProviderInfoOutput"], () => require("./getAwsProviderInfo"));

export { GetBillingRulesResult } from "./getBillingRules";
export const getBillingRules: typeof import("./getBillingRules").getBillingRules = null as any;
export const getBillingRulesOutput: typeof import("./getBillingRules").getBillingRulesOutput = null as any;
utilities.lazyLoad(exports, ["getBillingRules","getBillingRulesOutput"], () => require("./getBillingRules"));

export { GetBudgetsResult } from "./getBudgets";
export const getBudgets: typeof import("./getBudgets").getBudgets = null as any;
export const getBudgetsOutput: typeof import("./getBudgets").getBudgetsOutput = null as any;
utilities.lazyLoad(exports, ["getBudgets","getBudgetsOutput"], () => require("./getBudgets"));

export { GetBusinessMetricsResult } from "./getBusinessMetrics";
export const getBusinessMetrics: typeof import("./getBusinessMetrics").getBusinessMetrics = null as any;
export const getBusinessMetricsOutput: typeof import("./getBusinessMetrics").getBusinessMetricsOutput = null as any;
utilities.lazyLoad(exports, ["getBusinessMetrics","getBusinessMetricsOutput"], () => require("./getBusinessMetrics"));

export { GetCostReportsResult } from "./getCostReports";
export const getCostReports: typeof import("./getCostReports").getCostReports = null as any;
export const getCostReportsOutput: typeof import("./getCostReports").getCostReportsOutput = null as any;
utilities.lazyLoad(exports, ["getCostReports","getCostReportsOutput"], () => require("./getCostReports"));

export { GetDashboardsResult } from "./getDashboards";
export const getDashboards: typeof import("./getDashboards").getDashboards = null as any;
export const getDashboardsOutput: typeof import("./getDashboards").getDashboardsOutput = null as any;
utilities.lazyLoad(exports, ["getDashboards","getDashboardsOutput"], () => require("./getDashboards"));

export { GetFinancialCommitmentReportsResult } from "./getFinancialCommitmentReports";
export const getFinancialCommitmentReports: typeof import("./getFinancialCommitmentReports").getFinancialCommitmentReports = null as any;
export const getFinancialCommitmentReportsOutput: typeof import("./getFinancialCommitmentReports").getFinancialCommitmentReportsOutput = null as any;
utilities.lazyLoad(exports, ["getFinancialCommitmentReports","getFinancialCommitmentReportsOutput"], () => require("./getFinancialCommitmentReports"));

export { GetFoldersResult } from "./getFolders";
export const getFolders: typeof import("./getFolders").getFolders = null as any;
export const getFoldersOutput: typeof import("./getFolders").getFoldersOutput = null as any;
utilities.lazyLoad(exports, ["getFolders","getFoldersOutput"], () => require("./getFolders"));

export { GetKubernetesEfficiencyReportsResult } from "./getKubernetesEfficiencyReports";
export const getKubernetesEfficiencyReports: typeof import("./getKubernetesEfficiencyReports").getKubernetesEfficiencyReports = null as any;
export const getKubernetesEfficiencyReportsOutput: typeof import("./getKubernetesEfficiencyReports").getKubernetesEfficiencyReportsOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesEfficiencyReports","getKubernetesEfficiencyReportsOutput"], () => require("./getKubernetesEfficiencyReports"));

export { GetManagedAccountsResult } from "./getManagedAccounts";
export const getManagedAccounts: typeof import("./getManagedAccounts").getManagedAccounts = null as any;
export const getManagedAccountsOutput: typeof import("./getManagedAccounts").getManagedAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getManagedAccounts","getManagedAccountsOutput"], () => require("./getManagedAccounts"));

export { GetReportNotificationsResult } from "./getReportNotifications";
export const getReportNotifications: typeof import("./getReportNotifications").getReportNotifications = null as any;
export const getReportNotificationsOutput: typeof import("./getReportNotifications").getReportNotificationsOutput = null as any;
utilities.lazyLoad(exports, ["getReportNotifications","getReportNotificationsOutput"], () => require("./getReportNotifications"));

export { GetResourceReportsResult } from "./getResourceReports";
export const getResourceReports: typeof import("./getResourceReports").getResourceReports = null as any;
export const getResourceReportsOutput: typeof import("./getResourceReports").getResourceReportsOutput = null as any;
utilities.lazyLoad(exports, ["getResourceReports","getResourceReportsOutput"], () => require("./getResourceReports"));

export { GetSavedFiltersResult } from "./getSavedFilters";
export const getSavedFilters: typeof import("./getSavedFilters").getSavedFilters = null as any;
export const getSavedFiltersOutput: typeof import("./getSavedFilters").getSavedFiltersOutput = null as any;
utilities.lazyLoad(exports, ["getSavedFilters","getSavedFiltersOutput"], () => require("./getSavedFilters"));

export { GetSegmentsResult } from "./getSegments";
export const getSegments: typeof import("./getSegments").getSegments = null as any;
export const getSegmentsOutput: typeof import("./getSegments").getSegmentsOutput = null as any;
utilities.lazyLoad(exports, ["getSegments","getSegmentsOutput"], () => require("./getSegments"));

export { GetTeamsResult } from "./getTeams";
export const getTeams: typeof import("./getTeams").getTeams = null as any;
export const getTeamsOutput: typeof import("./getTeams").getTeamsOutput = null as any;
utilities.lazyLoad(exports, ["getTeams","getTeamsOutput"], () => require("./getTeams"));

export { GetUsersResult } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { GetVirtualTagConfigsResult } from "./getVirtualTagConfigs";
export const getVirtualTagConfigs: typeof import("./getVirtualTagConfigs").getVirtualTagConfigs = null as any;
export const getVirtualTagConfigsOutput: typeof import("./getVirtualTagConfigs").getVirtualTagConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualTagConfigs","getVirtualTagConfigsOutput"], () => require("./getVirtualTagConfigs"));

export { GetWorkspacesResult } from "./getWorkspaces";
export const getWorkspaces: typeof import("./getWorkspaces").getWorkspaces = null as any;
export const getWorkspacesOutput: typeof import("./getWorkspaces").getWorkspacesOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaces","getWorkspacesOutput"], () => require("./getWorkspaces"));

export { ManagedAccountArgs, ManagedAccountState } from "./managedAccount";
export type ManagedAccount = import("./managedAccount").ManagedAccount;
export const ManagedAccount: typeof import("./managedAccount").ManagedAccount = null as any;
utilities.lazyLoad(exports, ["ManagedAccount"], () => require("./managedAccount"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ReportNotificationArgs, ReportNotificationState } from "./reportNotification";
export type ReportNotification = import("./reportNotification").ReportNotification;
export const ReportNotification: typeof import("./reportNotification").ReportNotification = null as any;
utilities.lazyLoad(exports, ["ReportNotification"], () => require("./reportNotification"));

export { SavedFilterArgs, SavedFilterState } from "./savedFilter";
export type SavedFilter = import("./savedFilter").SavedFilter;
export const SavedFilter: typeof import("./savedFilter").SavedFilter = null as any;
utilities.lazyLoad(exports, ["SavedFilter"], () => require("./savedFilter"));

export { SegmentArgs, SegmentState } from "./segment";
export type Segment = import("./segment").Segment;
export const Segment: typeof import("./segment").Segment = null as any;
utilities.lazyLoad(exports, ["Segment"], () => require("./segment"));

export { TeamArgs, TeamState } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

export { VirtualTagConfigArgs, VirtualTagConfigState } from "./virtualTagConfig";
export type VirtualTagConfig = import("./virtualTagConfig").VirtualTagConfig;
export const VirtualTagConfig: typeof import("./virtualTagConfig").VirtualTagConfig = null as any;
utilities.lazyLoad(exports, ["VirtualTagConfig"], () => require("./virtualTagConfig"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "vantage:index/accessGrant:AccessGrant":
                return new AccessGrant(name, <any>undefined, { urn })
            case "vantage:index/anomalyNotification:AnomalyNotification":
                return new AnomalyNotification(name, <any>undefined, { urn })
            case "vantage:index/awsProvider:AwsProvider":
                return new AwsProvider(name, <any>undefined, { urn })
            case "vantage:index/billingRule:BillingRule":
                return new BillingRule(name, <any>undefined, { urn })
            case "vantage:index/budget:Budget":
                return new Budget(name, <any>undefined, { urn })
            case "vantage:index/businessMetric:BusinessMetric":
                return new BusinessMetric(name, <any>undefined, { urn })
            case "vantage:index/costReport:CostReport":
                return new CostReport(name, <any>undefined, { urn })
            case "vantage:index/dashboard:Dashboard":
                return new Dashboard(name, <any>undefined, { urn })
            case "vantage:index/folder:Folder":
                return new Folder(name, <any>undefined, { urn })
            case "vantage:index/managedAccount:ManagedAccount":
                return new ManagedAccount(name, <any>undefined, { urn })
            case "vantage:index/reportNotification:ReportNotification":
                return new ReportNotification(name, <any>undefined, { urn })
            case "vantage:index/savedFilter:SavedFilter":
                return new SavedFilter(name, <any>undefined, { urn })
            case "vantage:index/segment:Segment":
                return new Segment(name, <any>undefined, { urn })
            case "vantage:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "vantage:index/virtualTagConfig:VirtualTagConfig":
                return new VirtualTagConfig(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("vantage", "index/accessGrant", _module)
pulumi.runtime.registerResourceModule("vantage", "index/anomalyNotification", _module)
pulumi.runtime.registerResourceModule("vantage", "index/awsProvider", _module)
pulumi.runtime.registerResourceModule("vantage", "index/billingRule", _module)
pulumi.runtime.registerResourceModule("vantage", "index/budget", _module)
pulumi.runtime.registerResourceModule("vantage", "index/businessMetric", _module)
pulumi.runtime.registerResourceModule("vantage", "index/costReport", _module)
pulumi.runtime.registerResourceModule("vantage", "index/dashboard", _module)
pulumi.runtime.registerResourceModule("vantage", "index/folder", _module)
pulumi.runtime.registerResourceModule("vantage", "index/managedAccount", _module)
pulumi.runtime.registerResourceModule("vantage", "index/reportNotification", _module)
pulumi.runtime.registerResourceModule("vantage", "index/savedFilter", _module)
pulumi.runtime.registerResourceModule("vantage", "index/segment", _module)
pulumi.runtime.registerResourceModule("vantage", "index/team", _module)
pulumi.runtime.registerResourceModule("vantage", "index/virtualTagConfig", _module)
pulumi.runtime.registerResourcePackage("vantage", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:vantage") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
