// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ManagedAccount extends pulumi.CustomResource {
    /**
     * Get an existing ManagedAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagedAccountState, opts?: pulumi.CustomResourceOptions): ManagedAccount {
        return new ManagedAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vantage:index/managedAccount:ManagedAccount';

    /**
     * Returns true if the given object is an instance of ManagedAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagedAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedAccount.__pulumiType;
    }

    /**
     * Access Credential (aka Integrations) tokens to assign to the Managed Account.
     */
    public readonly accessCredentialTokens!: pulumi.Output<string[]>;
    /**
     * Billing Rule tokens to assign to the Managed Account.
     */
    public readonly billingRuleTokens!: pulumi.Output<string[]>;
    /**
     * The contact email address for the Managed Account.
     */
    public readonly contactEmail!: pulumi.Output<string>;
    /**
     * The name of the Managed Account.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The token for the parent Account.
     */
    public /*out*/ readonly parentAccountToken!: pulumi.Output<string>;
    /**
     * The token of the managed account
     */
    public /*out*/ readonly token!: pulumi.Output<string>;

    /**
     * Create a ManagedAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagedAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagedAccountArgs | ManagedAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagedAccountState | undefined;
            resourceInputs["accessCredentialTokens"] = state ? state.accessCredentialTokens : undefined;
            resourceInputs["billingRuleTokens"] = state ? state.billingRuleTokens : undefined;
            resourceInputs["contactEmail"] = state ? state.contactEmail : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentAccountToken"] = state ? state.parentAccountToken : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
        } else {
            const args = argsOrState as ManagedAccountArgs | undefined;
            if ((!args || args.contactEmail === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contactEmail'");
            }
            resourceInputs["accessCredentialTokens"] = args ? args.accessCredentialTokens : undefined;
            resourceInputs["billingRuleTokens"] = args ? args.billingRuleTokens : undefined;
            resourceInputs["contactEmail"] = args ? args.contactEmail : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentAccountToken"] = undefined /*out*/;
            resourceInputs["token"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagedAccount.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagedAccount resources.
 */
export interface ManagedAccountState {
    /**
     * Access Credential (aka Integrations) tokens to assign to the Managed Account.
     */
    accessCredentialTokens?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Billing Rule tokens to assign to the Managed Account.
     */
    billingRuleTokens?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The contact email address for the Managed Account.
     */
    contactEmail?: pulumi.Input<string>;
    /**
     * The name of the Managed Account.
     */
    name?: pulumi.Input<string>;
    /**
     * The token for the parent Account.
     */
    parentAccountToken?: pulumi.Input<string>;
    /**
     * The token of the managed account
     */
    token?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagedAccount resource.
 */
export interface ManagedAccountArgs {
    /**
     * Access Credential (aka Integrations) tokens to assign to the Managed Account.
     */
    accessCredentialTokens?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Billing Rule tokens to assign to the Managed Account.
     */
    billingRuleTokens?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The contact email address for the Managed Account.
     */
    contactEmail: pulumi.Input<string>;
    /**
     * The name of the Managed Account.
     */
    name?: pulumi.Input<string>;
}
