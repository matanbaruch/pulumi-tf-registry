// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface BudgetPerformance {
    /**
     * The date and time, in UTC, the Budget was created. ISO 8601 Formatted.
     */
    actual: string;
    /**
     * The amount of the Budget Period as a string to ensure precision.
     */
    amount: string;
    /**
     * The date and time, in UTC, the Budget was created. ISO 8601 Formatted.
     */
    date: string;
}

export interface BudgetPeriod {
    /**
     * The amount of the period.
     */
    amount: number;
    /**
     * The end date of the period.
     */
    endAt: string;
    /**
     * The start date of the period.
     */
    startAt: string;
}

export interface BusinessMetricCostReportTokensWithMetadata {
    /**
     * The token of the CostReport the BusinessMetric is attached to.
     */
    costReportToken: string;
    /**
     * The labels that the BusinessMetric is filtered by within a particular CostReport.
     */
    labelFilters: string[];
    /**
     * Determines the scale of the BusinessMetric's values within the CostReport.
     */
    unitScale: string;
}

export interface BusinessMetricValue {
    amount: number;
    /**
     * The date of the Business Metric Value. ISO 8601 formatted.
     */
    date: string;
    /**
     * The label of the Business Metric Value.
     */
    label: string;
}

export interface GetAccessGrantsAccessGrant {
    access: string;
    resourceToken: string;
    teamToken: string;
    token: string;
}

export interface GetAnomalyNotificationsAnomalyNotification {
    /**
     * The token for the CostReport the AnomalyNotification is associated with.
     */
    costReportToken: string;
    /**
     * The date and time, in UTC, the AnomalyNotification was created. ISO 8601 Formatted.
     */
    createdAt: string;
    /**
     * The channels that the notification is sent to.
     */
    recipientChannels: string[];
    /**
     * The threshold amount that must be met for the notification to fire.
     */
    threshold: number;
    token: string;
    /**
     * The date and time, in UTC, the AnomalyNotification was last updated at. ISO 8601 Formatted.
     */
    updatedAt: string;
    /**
     * The tokens of the users that receive the notification.
     */
    userTokens: string[];
}

export interface GetBillingRulesBillingRule {
    /**
     * The amount for the Billing Rule (Charge).
     */
    amount: string;
    /**
     * The category for the Billing Rule (Charge).
     */
    category: string;
    /**
     * The charge type for the Billing Rule.
     */
    chargeType: string;
    /**
     * The date and time, in UTC, the Billing Rule was created. ISO 8601 Formatted.
     */
    createdAt: string;
    /**
     * The token of the User who created the Billing Rule.
     */
    createdByToken: string;
    /**
     * The percentage of the cost shown for the Billing Rule (Adjustment).
     */
    percentage: string;
    /**
     * The service for the Billing Rule (Charge).
     */
    service: string;
    /**
     * The start period for the Billing Rule (Charge).
     */
    startPeriod: string;
    /**
     * The subcategory for the Billing Rule (Charge).
     */
    subCategory: string;
    /**
     * The title of the Billing Rule.
     */
    title: string;
    token: string;
    /**
     * The type of the Billing Rule.
     */
    type: string;
}

export interface GetBudgetsBudget {
    /**
     * The tokens of the BudgetAlerts associated with the Budget.
     */
    budgetAlertTokens: string[];
    /**
     * The token of the Report associated with the Budget.
     */
    costReportToken: string;
    /**
     * The date and time, in UTC, the Budget was created. ISO 8601 Formatted.
     */
    createdAt: string;
    /**
     * The name of the Budget.
     */
    name: string;
    /**
     * The historical performance of the Budget.
     */
    performances: outputs.GetBudgetsBudgetPerformance[];
    /**
     * The budget periods associated with the Budget.
     */
    periods: outputs.GetBudgetsBudgetPeriod[];
    token: string;
    /**
     * The token for the User who created this Budget.
     */
    userToken: string;
    /**
     * The token for the Workspace the Budget is a part of.
     */
    workspaceToken: string;
}

export interface GetBudgetsBudgetPerformance {
    /**
     * The date and time, in UTC, the Budget was created. ISO 8601 Formatted.
     */
    actual: string;
    /**
     * The amount of the Budget Period as a string to ensure precision.
     */
    amount: string;
    /**
     * The date and time, in UTC, the Budget was created. ISO 8601 Formatted.
     */
    date: string;
}

export interface GetBudgetsBudgetPeriod {
    /**
     * The amount of the Budget Period as a string to ensure precision.
     */
    amount: string;
    /**
     * The date and time, in UTC, the Budget was created. ISO 8601 Formatted.
     */
    endAt: string;
    /**
     * The date and time, in UTC, the Budget was created. ISO 8601 Formatted.
     */
    startAt: string;
}

export interface GetBusinessMetricsBusinessMetric {
    /**
     * The tokens for any CostReports that use the BusinessMetric, the unit scale, and label filter.
     */
    costReportTokensWithMetadatas: outputs.GetBusinessMetricsBusinessMetricCostReportTokensWithMetadata[];
    /**
     * The token of the User who created the BusinessMetric.
     */
    createdByToken: string;
    /**
     * The title of the BusinessMetric.
     */
    title: string;
    /**
     * The token of the BusinessMetric.
     */
    token: string;
    /**
     * The dates, amounts, and (optional) labels for the BusinessMetric.
     */
    values: outputs.GetBusinessMetricsBusinessMetricValue[];
}

export interface GetBusinessMetricsBusinessMetricCostReportTokensWithMetadata {
    /**
     * The token of the CostReport the BusinessMetric is attached to.
     */
    costReportToken: string;
    /**
     * The labels that the BusinessMetric is filtered by within a particular CostReport.
     */
    labelFilters: string[];
    /**
     * Determines the scale of the BusinessMetric's values within a particular CostReport.
     */
    unitScale: string;
}

export interface GetBusinessMetricsBusinessMetricValue {
    /**
     * The amount of the Business Metric Value as a string to ensure precision.
     */
    amount: string;
    /**
     * The date of the Business Metric Value. ISO 8601 formatted.
     */
    date: string;
    /**
     * The label of the Business Metric Value.
     */
    label: string;
}

export interface GetCostReportsCostReport {
    chartType: string;
    dateBin: string;
    dateInterval: string;
    endDate: string;
    filter: string;
    folderToken: string;
    groupings: string;
    previousPeriodEndDate: string;
    previousPeriodStartDate: string;
    savedFilterTokens: string[];
    startDate: string;
    title: string;
    token: string;
    workspaceToken: string;
}

export interface GetDashboardsDashboard {
    dateBin: string;
    dateInterval: string;
    endDate: string;
    savedFilterTokens: string[];
    startDate: string;
    title: string;
    token: string;
    widgetTokens: string[];
    workspaceToken: string;
}

export interface GetFinancialCommitmentReportsFinancialCommitmentReport {
    /**
     * The date and time, in UTC, the report was created. ISO 8601 Formatted.
     */
    createdAt: string;
    /**
     * How costs are grouped and displayed in the FinancialCommitmentReport. Possible values: day, week, month.
     */
    dateBucket: string;
    /**
     * The date range for the FinancialCommitmentReport. Only present if a custom date range is not specified.
     */
    dateInterval: string;
    /**
     * Indicates whether the FinancialCommitmentReport is the default report.
     */
    default: boolean;
    /**
     * The end date for the FinancialCommitmentReport. Only set for custom date ranges. ISO 8601 Formatted.
     */
    endDate: string;
    /**
     * The grouping aggregations applied to the filtered data.
     */
    groupings: string;
    /**
     * The scope for the costs. Possible values: discountable, all.
     */
    onDemandCostsScope: string;
    /**
     * The start date for the FinancialCommitmentReport. Only set for custom date ranges. ISO 8601 Formatted.
     */
    startDate: string;
    /**
     * The title of the FinancialCommitmentReport.
     */
    title: string;
    token: string;
    /**
     * The token for the User who created this FinancialCommitmentReport.
     */
    userToken: string;
    /**
     * The token for the Workspace the FinancialCommitmentReport is a part of.
     */
    workspaceToken: string;
}

export interface GetFoldersFolder {
    parentFolderToken: string;
    savedFilterTokens: string[];
    title: string;
    token: string;
    workspaceToken: string;
}

export interface GetKubernetesEfficiencyReportsKubernetesEfficiencyReport {
    /**
     * How costs are aggregated by. Possible values: idle_costs, amount.
     */
    aggregatedBy: string;
    /**
     * The date and time, in UTC, the report was created. ISO 8601 Formatted.
     */
    createdAt: string;
    /**
     * How costs are grouped and displayed in the KubernetesEfficiencyReport. Possible values: day, week, month.
     */
    dateBucket: string;
    /**
     * The date range for the KubernetesEfficiencyReport. Only present if a custom date range is not specified.
     */
    dateInterval: string;
    /**
     * Indicates whether the KubernetesEfficiencyReport is the default report.
     */
    default: boolean;
    /**
     * The end date for the KubernetesEfficiencyReport. Only set for custom date ranges. ISO 8601 Formatted.
     */
    endDate: string;
    /**
     * The grouping aggregations applied to the filtered data.
     */
    groupings: string;
    /**
     * The start date for the KubernetesEfficiencyReport. Only set for custom date ranges. ISO 8601 Formatted.
     */
    startDate: string;
    /**
     * The title of the KubernetesEfficiencyReport.
     */
    title: string;
    token: string;
    /**
     * The token for the User who created this KubernetesEfficiencyReport.
     */
    userToken: string;
    /**
     * The token for the Workspace the KubernetesEfficiencyReport is a part of.
     */
    workspaceToken: string;
}

export interface GetManagedAccountsManagedAccount {
    /**
     * The tokens for the Access Credentials assigned to the Managed Account.
     */
    accessCredentialTokens: string[];
    /**
     * The tokens for the Billing Rules assigned to the Managed Account.
     */
    billingRuleTokens: string[];
    contactEmail: string;
    name: string;
    /**
     * The token for the parent Account.
     */
    parentAccountToken: string;
    token: string;
}

export interface GetReportNotificationsReportNotification {
    /**
     * The type of change the ReportNotification is tracking.
     */
    change: string;
    /**
     * The token for a CostReport the ReportNotification is applied to.
     */
    costReportToken: string;
    /**
     * The frequency the ReportNotification is sent.
     */
    frequency: string;
    /**
     * The Slack or Microsoft Teams channels that receive the notification.
     */
    recipientChannels: string[];
    /**
     * The title of the ReportNotification.
     */
    title: string;
    token: string;
    /**
     * The Users that receive the notification.
     */
    userTokens: string[];
}

export interface GetResourceReportsResourceReport {
    createdAt: string;
    default: boolean;
    segmentToken: string;
    title: string;
    token: string;
    userToken: string;
    workspaceToken: string;
}

export interface GetSavedFiltersFilter {
    costReportTokens: string[];
    title: string;
    token: string;
    workspaceToken: string;
}

export interface GetSegmentsSegment {
    description: string;
    filter: string;
    parentSegmentToken: string;
    priority: number;
    reportToken: string;
    title: string;
    token: string;
    trackUnallocated: boolean;
    workspaceToken: string;
}

export interface GetTeamsTeam {
    description: string;
    name: string;
    token: string;
    userEmails: string[];
    userTokens: string[];
    workspaceTokens: string[];
}

export interface GetUsersUser {
    email: string;
    name: string;
    role: string;
    token: string;
}

export interface GetVirtualTagConfigsVirtualTagConfig {
    /**
     * The earliest month VirtualTagConfig should be backfilled to.
     */
    backfillUntil: string;
    /**
     * The token of the User who created the VirtualTagConfig.
     */
    createdByToken: string;
    /**
     * The key of the VirtualTagConfig.
     */
    key: string;
    /**
     * Whether the VirtualTagConfig can override a provider-supplied tag on a matching Cost.
     */
    overridable: boolean;
    /**
     * The token of the VirtualTagConfig.
     */
    token: string;
    /**
     * Values for the VirtualTagConfig, with match precedence determined by their relative order in the list.
     */
    values: outputs.GetVirtualTagConfigsVirtualTagConfigValue[];
}

export interface GetVirtualTagConfigsVirtualTagConfigValue {
    /**
     * The token of the associated BusinessMetric.
     */
    businessMetricToken: string;
    costMetric: outputs.GetVirtualTagConfigsVirtualTagConfigValueCostMetric;
    /**
     * The filter VQL for the Value.
     */
    filter: string;
    /**
     * The name of the Value.
     */
    name: string;
}

export interface GetVirtualTagConfigsVirtualTagConfigValueCostMetric {
    aggregation: outputs.GetVirtualTagConfigsVirtualTagConfigValueCostMetricAggregation;
    /**
     * The filter VQL for the cost metric.
     */
    filter: string;
}

export interface GetVirtualTagConfigsVirtualTagConfigValueCostMetricAggregation {
    /**
     * The tag to aggregate on.
     */
    tag: string;
}

export interface GetWorkspacesWorkspace {
    name: string;
    token: string;
}

export interface VirtualTagConfigValue {
    /**
     * The token of the associated BusinessMetric.
     */
    businessMetricToken: string;
    costMetric: outputs.VirtualTagConfigValueCostMetric;
    /**
     * The filter VQL for the Value.
     */
    filter: string;
    /**
     * The name of the Value.
     */
    name: string;
}

export interface VirtualTagConfigValueCostMetric {
    aggregation?: outputs.VirtualTagConfigValueCostMetricAggregation;
    /**
     * The filter VQL for the cost metric.
     */
    filter?: string;
}

export interface VirtualTagConfigValueCostMetricAggregation {
    /**
     * The tag to aggregate on.
     */
    tag?: string;
}

