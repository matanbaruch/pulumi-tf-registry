// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface BudgetPerformance {
    /**
     * The date and time, in UTC, the Budget was created. ISO 8601 Formatted.
     */
    actual?: pulumi.Input<string>;
    /**
     * The amount of the Budget Period as a string to ensure precision.
     */
    amount?: pulumi.Input<string>;
    /**
     * The date and time, in UTC, the Budget was created. ISO 8601 Formatted.
     */
    date?: pulumi.Input<string>;
}

export interface BudgetPeriod {
    /**
     * The amount of the period.
     */
    amount: pulumi.Input<number>;
    /**
     * The end date of the period.
     */
    endAt?: pulumi.Input<string>;
    /**
     * The start date of the period.
     */
    startAt: pulumi.Input<string>;
}

export interface BusinessMetricCostReportTokensWithMetadata {
    /**
     * The token of the CostReport the BusinessMetric is attached to.
     */
    costReportToken: pulumi.Input<string>;
    /**
     * The labels that the BusinessMetric is filtered by within a particular CostReport.
     */
    labelFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Determines the scale of the BusinessMetric's values within the CostReport.
     */
    unitScale?: pulumi.Input<string>;
}

export interface BusinessMetricValue {
    amount: pulumi.Input<number>;
    /**
     * The date of the Business Metric Value. ISO 8601 formatted.
     */
    date: pulumi.Input<string>;
    /**
     * The label of the Business Metric Value.
     */
    label?: pulumi.Input<string>;
}

export interface VirtualTagConfigValue {
    /**
     * The token of the associated BusinessMetric.
     */
    businessMetricToken?: pulumi.Input<string>;
    costMetric?: pulumi.Input<inputs.VirtualTagConfigValueCostMetric>;
    /**
     * The filter VQL for the Value.
     */
    filter: pulumi.Input<string>;
    /**
     * The name of the Value.
     */
    name?: pulumi.Input<string>;
}

export interface VirtualTagConfigValueCostMetric {
    aggregation?: pulumi.Input<inputs.VirtualTagConfigValueCostMetricAggregation>;
    /**
     * The filter VQL for the cost metric.
     */
    filter?: pulumi.Input<string>;
}

export interface VirtualTagConfigValueCostMetricAggregation {
    /**
     * The tag to aggregate on.
     */
    tag?: pulumi.Input<string>;
}
