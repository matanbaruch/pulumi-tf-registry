// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ReportNotification extends pulumi.CustomResource {
    /**
     * Get an existing ReportNotification resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReportNotificationState, opts?: pulumi.CustomResourceOptions): ReportNotification {
        return new ReportNotification(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vantage:index/reportNotification:ReportNotification';

    /**
     * Returns true if the given object is an instance of ReportNotification.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ReportNotification {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReportNotification.__pulumiType;
    }

    /**
     * The kind of change sent ReportNotification. One of percentage/dollars
     */
    public readonly change!: pulumi.Output<string>;
    /**
     * Token for the cost report to be used in the notification
     */
    public readonly costReportToken!: pulumi.Output<string>;
    /**
     * The frequency at which the ReportNotification is sent. One of daily/weekly/monthly
     */
    public readonly frequency!: pulumi.Output<string>;
    /**
     * Title of the report notification
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * Unique report notification identifier
     */
    public /*out*/ readonly token!: pulumi.Output<string>;
    /**
     * Tokens for the users to be notified
     */
    public readonly userTokens!: pulumi.Output<string[]>;
    /**
     * Token for the workspace the report notification is added toe notification
     */
    public readonly workspaceToken!: pulumi.Output<string | undefined>;

    /**
     * Create a ReportNotification resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReportNotificationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReportNotificationArgs | ReportNotificationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReportNotificationState | undefined;
            resourceInputs["change"] = state ? state.change : undefined;
            resourceInputs["costReportToken"] = state ? state.costReportToken : undefined;
            resourceInputs["frequency"] = state ? state.frequency : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["userTokens"] = state ? state.userTokens : undefined;
            resourceInputs["workspaceToken"] = state ? state.workspaceToken : undefined;
        } else {
            const args = argsOrState as ReportNotificationArgs | undefined;
            if ((!args || args.change === undefined) && !opts.urn) {
                throw new Error("Missing required property 'change'");
            }
            if ((!args || args.costReportToken === undefined) && !opts.urn) {
                throw new Error("Missing required property 'costReportToken'");
            }
            if ((!args || args.frequency === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frequency'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            if ((!args || args.userTokens === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userTokens'");
            }
            resourceInputs["change"] = args ? args.change : undefined;
            resourceInputs["costReportToken"] = args ? args.costReportToken : undefined;
            resourceInputs["frequency"] = args ? args.frequency : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["userTokens"] = args ? args.userTokens : undefined;
            resourceInputs["workspaceToken"] = args ? args.workspaceToken : undefined;
            resourceInputs["token"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ReportNotification.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ReportNotification resources.
 */
export interface ReportNotificationState {
    /**
     * The kind of change sent ReportNotification. One of percentage/dollars
     */
    change?: pulumi.Input<string>;
    /**
     * Token for the cost report to be used in the notification
     */
    costReportToken?: pulumi.Input<string>;
    /**
     * The frequency at which the ReportNotification is sent. One of daily/weekly/monthly
     */
    frequency?: pulumi.Input<string>;
    /**
     * Title of the report notification
     */
    title?: pulumi.Input<string>;
    /**
     * Unique report notification identifier
     */
    token?: pulumi.Input<string>;
    /**
     * Tokens for the users to be notified
     */
    userTokens?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Token for the workspace the report notification is added toe notification
     */
    workspaceToken?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ReportNotification resource.
 */
export interface ReportNotificationArgs {
    /**
     * The kind of change sent ReportNotification. One of percentage/dollars
     */
    change: pulumi.Input<string>;
    /**
     * Token for the cost report to be used in the notification
     */
    costReportToken: pulumi.Input<string>;
    /**
     * The frequency at which the ReportNotification is sent. One of daily/weekly/monthly
     */
    frequency: pulumi.Input<string>;
    /**
     * Title of the report notification
     */
    title: pulumi.Input<string>;
    /**
     * Tokens for the users to be notified
     */
    userTokens: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Token for the workspace the report notification is added toe notification
     */
    workspaceToken?: pulumi.Input<string>;
}
