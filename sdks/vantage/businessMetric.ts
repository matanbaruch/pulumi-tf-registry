// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BusinessMetric extends pulumi.CustomResource {
    /**
     * Get an existing BusinessMetric resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BusinessMetricState, opts?: pulumi.CustomResourceOptions): BusinessMetric {
        return new BusinessMetric(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vantage:index/businessMetric:BusinessMetric';

    /**
     * Returns true if the given object is an instance of BusinessMetric.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BusinessMetric {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BusinessMetric.__pulumiType;
    }

    /**
     * The tokens for any CostReports that use the BusinessMetric, and the unit scale.
     */
    public readonly costReportTokensWithMetadatas!: pulumi.Output<outputs.BusinessMetricCostReportTokensWithMetadata[]>;
    /**
     * The token of the User who created the BusinessMetric.
     */
    public /*out*/ readonly createdByToken!: pulumi.Output<string>;
    /**
     * The title of the BusinessMetrics.
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * The token of the business metric
     */
    public /*out*/ readonly token!: pulumi.Output<string>;
    /**
     * The dates and amounts for the BusinessMetric.
     */
    public readonly values!: pulumi.Output<outputs.BusinessMetricValue[]>;

    /**
     * Create a BusinessMetric resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BusinessMetricArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BusinessMetricArgs | BusinessMetricState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BusinessMetricState | undefined;
            resourceInputs["costReportTokensWithMetadatas"] = state ? state.costReportTokensWithMetadatas : undefined;
            resourceInputs["createdByToken"] = state ? state.createdByToken : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["values"] = state ? state.values : undefined;
        } else {
            const args = argsOrState as BusinessMetricArgs | undefined;
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["costReportTokensWithMetadatas"] = args ? args.costReportTokensWithMetadatas : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["values"] = args ? args.values : undefined;
            resourceInputs["createdByToken"] = undefined /*out*/;
            resourceInputs["token"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BusinessMetric.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BusinessMetric resources.
 */
export interface BusinessMetricState {
    /**
     * The tokens for any CostReports that use the BusinessMetric, and the unit scale.
     */
    costReportTokensWithMetadatas?: pulumi.Input<pulumi.Input<inputs.BusinessMetricCostReportTokensWithMetadata>[]>;
    /**
     * The token of the User who created the BusinessMetric.
     */
    createdByToken?: pulumi.Input<string>;
    /**
     * The title of the BusinessMetrics.
     */
    title?: pulumi.Input<string>;
    /**
     * The token of the business metric
     */
    token?: pulumi.Input<string>;
    /**
     * The dates and amounts for the BusinessMetric.
     */
    values?: pulumi.Input<pulumi.Input<inputs.BusinessMetricValue>[]>;
}

/**
 * The set of arguments for constructing a BusinessMetric resource.
 */
export interface BusinessMetricArgs {
    /**
     * The tokens for any CostReports that use the BusinessMetric, and the unit scale.
     */
    costReportTokensWithMetadatas?: pulumi.Input<pulumi.Input<inputs.BusinessMetricCostReportTokensWithMetadata>[]>;
    /**
     * The title of the BusinessMetrics.
     */
    title: pulumi.Input<string>;
    /**
     * The dates and amounts for the BusinessMetric.
     */
    values?: pulumi.Input<pulumi.Input<inputs.BusinessMetricValue>[]>;
}
