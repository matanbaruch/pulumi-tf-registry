// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VirtualTagConfig extends pulumi.CustomResource {
    /**
     * Get an existing VirtualTagConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualTagConfigState, opts?: pulumi.CustomResourceOptions): VirtualTagConfig {
        return new VirtualTagConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vantage:index/virtualTagConfig:VirtualTagConfig';

    /**
     * Returns true if the given object is an instance of VirtualTagConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualTagConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualTagConfig.__pulumiType;
    }

    /**
     * The earliest month VirtualTagConfig should be backfilled to.
     */
    public readonly backfillUntil!: pulumi.Output<string>;
    /**
     * The token of the User who created the VirtualTagConfig.
     */
    public /*out*/ readonly createdByToken!: pulumi.Output<string>;
    /**
     * The key of the VirtualTagConfig.
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * Whether the VirtualTagConfig can override a provider-supplied tag on a matching Cost.
     */
    public readonly overridable!: pulumi.Output<boolean>;
    /**
     * The token of the VirtualTagConfig.
     */
    public /*out*/ readonly token!: pulumi.Output<string>;
    public readonly values!: pulumi.Output<outputs.VirtualTagConfigValue[]>;

    /**
     * Create a VirtualTagConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualTagConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualTagConfigArgs | VirtualTagConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualTagConfigState | undefined;
            resourceInputs["backfillUntil"] = state ? state.backfillUntil : undefined;
            resourceInputs["createdByToken"] = state ? state.createdByToken : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["overridable"] = state ? state.overridable : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["values"] = state ? state.values : undefined;
        } else {
            const args = argsOrState as VirtualTagConfigArgs | undefined;
            if ((!args || args.backfillUntil === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backfillUntil'");
            }
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if ((!args || args.overridable === undefined) && !opts.urn) {
                throw new Error("Missing required property 'overridable'");
            }
            resourceInputs["backfillUntil"] = args ? args.backfillUntil : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["overridable"] = args ? args.overridable : undefined;
            resourceInputs["values"] = args ? args.values : undefined;
            resourceInputs["createdByToken"] = undefined /*out*/;
            resourceInputs["token"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualTagConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VirtualTagConfig resources.
 */
export interface VirtualTagConfigState {
    /**
     * The earliest month VirtualTagConfig should be backfilled to.
     */
    backfillUntil?: pulumi.Input<string>;
    /**
     * The token of the User who created the VirtualTagConfig.
     */
    createdByToken?: pulumi.Input<string>;
    /**
     * The key of the VirtualTagConfig.
     */
    key?: pulumi.Input<string>;
    /**
     * Whether the VirtualTagConfig can override a provider-supplied tag on a matching Cost.
     */
    overridable?: pulumi.Input<boolean>;
    /**
     * The token of the VirtualTagConfig.
     */
    token?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<inputs.VirtualTagConfigValue>[]>;
}

/**
 * The set of arguments for constructing a VirtualTagConfig resource.
 */
export interface VirtualTagConfigArgs {
    /**
     * The earliest month VirtualTagConfig should be backfilled to.
     */
    backfillUntil: pulumi.Input<string>;
    /**
     * The key of the VirtualTagConfig.
     */
    key: pulumi.Input<string>;
    /**
     * Whether the VirtualTagConfig can override a provider-supplied tag on a matching Cost.
     */
    overridable: pulumi.Input<boolean>;
    values?: pulumi.Input<pulumi.Input<inputs.VirtualTagConfigValue>[]>;
}
