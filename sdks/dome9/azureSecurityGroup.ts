// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AzureSecurityGroup extends pulumi.CustomResource {
    /**
     * Get an existing AzureSecurityGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AzureSecurityGroupState, opts?: pulumi.CustomResourceOptions): AzureSecurityGroup {
        return new AzureSecurityGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dome9:index/azureSecurityGroup:AzureSecurityGroup';

    /**
     * Returns true if the given object is an instance of AzureSecurityGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AzureSecurityGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AzureSecurityGroup.__pulumiType;
    }

    public /*out*/ readonly cloudAccountName!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dome9CloudAccountId!: pulumi.Output<string>;
    public readonly dome9SecurityGroupName!: pulumi.Output<string>;
    public /*out*/ readonly externalSecurityGroupId!: pulumi.Output<string>;
    public readonly inbounds!: pulumi.Output<outputs.AzureSecurityGroupInbound[] | undefined>;
    public readonly isTamperProtected!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly lastUpdatedByDome9!: pulumi.Output<string>;
    public readonly outbounds!: pulumi.Output<outputs.AzureSecurityGroupOutbound[] | undefined>;
    public readonly region!: pulumi.Output<string>;
    public readonly resourceGroup!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.AzureSecurityGroupTag[] | undefined>;

    /**
     * Create a AzureSecurityGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AzureSecurityGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AzureSecurityGroupArgs | AzureSecurityGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AzureSecurityGroupState | undefined;
            resourceInputs["cloudAccountName"] = state ? state.cloudAccountName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dome9CloudAccountId"] = state ? state.dome9CloudAccountId : undefined;
            resourceInputs["dome9SecurityGroupName"] = state ? state.dome9SecurityGroupName : undefined;
            resourceInputs["externalSecurityGroupId"] = state ? state.externalSecurityGroupId : undefined;
            resourceInputs["inbounds"] = state ? state.inbounds : undefined;
            resourceInputs["isTamperProtected"] = state ? state.isTamperProtected : undefined;
            resourceInputs["lastUpdatedByDome9"] = state ? state.lastUpdatedByDome9 : undefined;
            resourceInputs["outbounds"] = state ? state.outbounds : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["resourceGroup"] = state ? state.resourceGroup : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as AzureSecurityGroupArgs | undefined;
            if ((!args || args.dome9CloudAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dome9CloudAccountId'");
            }
            if ((!args || args.dome9SecurityGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dome9SecurityGroupName'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.resourceGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroup'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dome9CloudAccountId"] = args ? args.dome9CloudAccountId : undefined;
            resourceInputs["dome9SecurityGroupName"] = args ? args.dome9SecurityGroupName : undefined;
            resourceInputs["inbounds"] = args ? args.inbounds : undefined;
            resourceInputs["isTamperProtected"] = args ? args.isTamperProtected : undefined;
            resourceInputs["outbounds"] = args ? args.outbounds : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["resourceGroup"] = args ? args.resourceGroup : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["cloudAccountName"] = undefined /*out*/;
            resourceInputs["externalSecurityGroupId"] = undefined /*out*/;
            resourceInputs["lastUpdatedByDome9"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AzureSecurityGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AzureSecurityGroup resources.
 */
export interface AzureSecurityGroupState {
    cloudAccountName?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dome9CloudAccountId?: pulumi.Input<string>;
    dome9SecurityGroupName?: pulumi.Input<string>;
    externalSecurityGroupId?: pulumi.Input<string>;
    inbounds?: pulumi.Input<pulumi.Input<inputs.AzureSecurityGroupInbound>[]>;
    isTamperProtected?: pulumi.Input<boolean>;
    lastUpdatedByDome9?: pulumi.Input<string>;
    outbounds?: pulumi.Input<pulumi.Input<inputs.AzureSecurityGroupOutbound>[]>;
    region?: pulumi.Input<string>;
    resourceGroup?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.AzureSecurityGroupTag>[]>;
}

/**
 * The set of arguments for constructing a AzureSecurityGroup resource.
 */
export interface AzureSecurityGroupArgs {
    description?: pulumi.Input<string>;
    dome9CloudAccountId: pulumi.Input<string>;
    dome9SecurityGroupName: pulumi.Input<string>;
    inbounds?: pulumi.Input<pulumi.Input<inputs.AzureSecurityGroupInbound>[]>;
    isTamperProtected?: pulumi.Input<boolean>;
    outbounds?: pulumi.Input<pulumi.Input<inputs.AzureSecurityGroupOutbound>[]>;
    region: pulumi.Input<string>;
    resourceGroup: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.AzureSecurityGroupTag>[]>;
}
