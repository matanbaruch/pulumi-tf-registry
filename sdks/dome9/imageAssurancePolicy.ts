// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ImageAssurancePolicy extends pulumi.CustomResource {
    /**
     * Get an existing ImageAssurancePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageAssurancePolicyState, opts?: pulumi.CustomResourceOptions): ImageAssurancePolicy {
        return new ImageAssurancePolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dome9:index/imageAssurancePolicy:ImageAssurancePolicy';

    /**
     * Returns true if the given object is an instance of ImageAssurancePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImageAssurancePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImageAssurancePolicy.__pulumiType;
    }

    public readonly admissionControlAction!: pulumi.Output<string | undefined>;
    public readonly admissionControlUnscannedAction!: pulumi.Output<string | undefined>;
    public readonly notificationIds!: pulumi.Output<string[]>;
    public readonly rulesetId!: pulumi.Output<number>;
    public readonly targetId!: pulumi.Output<string>;
    public readonly targetType!: pulumi.Output<string>;

    /**
     * Create a ImageAssurancePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageAssurancePolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageAssurancePolicyArgs | ImageAssurancePolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageAssurancePolicyState | undefined;
            resourceInputs["admissionControlAction"] = state ? state.admissionControlAction : undefined;
            resourceInputs["admissionControlUnscannedAction"] = state ? state.admissionControlUnscannedAction : undefined;
            resourceInputs["notificationIds"] = state ? state.notificationIds : undefined;
            resourceInputs["rulesetId"] = state ? state.rulesetId : undefined;
            resourceInputs["targetId"] = state ? state.targetId : undefined;
            resourceInputs["targetType"] = state ? state.targetType : undefined;
        } else {
            const args = argsOrState as ImageAssurancePolicyArgs | undefined;
            if ((!args || args.notificationIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notificationIds'");
            }
            if ((!args || args.rulesetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rulesetId'");
            }
            if ((!args || args.targetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetId'");
            }
            if ((!args || args.targetType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetType'");
            }
            resourceInputs["admissionControlAction"] = args ? args.admissionControlAction : undefined;
            resourceInputs["admissionControlUnscannedAction"] = args ? args.admissionControlUnscannedAction : undefined;
            resourceInputs["notificationIds"] = args ? args.notificationIds : undefined;
            resourceInputs["rulesetId"] = args ? args.rulesetId : undefined;
            resourceInputs["targetId"] = args ? args.targetId : undefined;
            resourceInputs["targetType"] = args ? args.targetType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImageAssurancePolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ImageAssurancePolicy resources.
 */
export interface ImageAssurancePolicyState {
    admissionControlAction?: pulumi.Input<string>;
    admissionControlUnscannedAction?: pulumi.Input<string>;
    notificationIds?: pulumi.Input<pulumi.Input<string>[]>;
    rulesetId?: pulumi.Input<number>;
    targetId?: pulumi.Input<string>;
    targetType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ImageAssurancePolicy resource.
 */
export interface ImageAssurancePolicyArgs {
    admissionControlAction?: pulumi.Input<string>;
    admissionControlUnscannedAction?: pulumi.Input<string>;
    notificationIds: pulumi.Input<pulumi.Input<string>[]>;
    rulesetId: pulumi.Input<number>;
    targetId: pulumi.Input<string>;
    targetType: pulumi.Input<string>;
}
