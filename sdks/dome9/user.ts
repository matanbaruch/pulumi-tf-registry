// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dome9:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    public readonly accesses!: pulumi.Output<outputs.UserAccess[] | undefined>;
    public /*out*/ readonly canSwitchRole!: pulumi.Output<boolean>;
    public readonly creates!: pulumi.Output<string[] | undefined>;
    public readonly crossAccountAccesses!: pulumi.Output<string[] | undefined>;
    public readonly email!: pulumi.Output<string>;
    public readonly firstName!: pulumi.Output<string>;
    public /*out*/ readonly hasApiKey!: pulumi.Output<boolean>;
    public /*out*/ readonly hasApiKeyV1!: pulumi.Output<boolean>;
    public /*out*/ readonly hasApiKeyV2!: pulumi.Output<boolean>;
    public /*out*/ readonly iamSaves!: pulumi.Output<outputs.UserIamSafe[]>;
    public /*out*/ readonly isAuditor!: pulumi.Output<boolean>;
    public /*out*/ readonly isLocked!: pulumi.Output<boolean>;
    public /*out*/ readonly isMfaEnabled!: pulumi.Output<boolean>;
    public /*out*/ readonly isMobileDevicePaired!: pulumi.Output<boolean>;
    public readonly isOwner!: pulumi.Output<boolean>;
    public readonly isSsoEnabled!: pulumi.Output<boolean>;
    public /*out*/ readonly isSuperUser!: pulumi.Output<boolean>;
    public /*out*/ readonly isSuspended!: pulumi.Output<boolean>;
    public /*out*/ readonly lastLogin!: pulumi.Output<string>;
    public readonly lastName!: pulumi.Output<string>;
    public readonly manages!: pulumi.Output<outputs.UserManage[] | undefined>;
    public readonly permitAlertActions!: pulumi.Output<boolean | undefined>;
    public readonly permitNotifications!: pulumi.Output<boolean | undefined>;
    public readonly permitOnBoarding!: pulumi.Output<boolean | undefined>;
    public readonly permitPolicies!: pulumi.Output<boolean | undefined>;
    public readonly permitRulesets!: pulumi.Output<boolean | undefined>;
    public readonly roleIds!: pulumi.Output<number[]>;
    public readonly views!: pulumi.Output<outputs.UserView[] | undefined>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["accesses"] = state ? state.accesses : undefined;
            resourceInputs["canSwitchRole"] = state ? state.canSwitchRole : undefined;
            resourceInputs["creates"] = state ? state.creates : undefined;
            resourceInputs["crossAccountAccesses"] = state ? state.crossAccountAccesses : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["firstName"] = state ? state.firstName : undefined;
            resourceInputs["hasApiKey"] = state ? state.hasApiKey : undefined;
            resourceInputs["hasApiKeyV1"] = state ? state.hasApiKeyV1 : undefined;
            resourceInputs["hasApiKeyV2"] = state ? state.hasApiKeyV2 : undefined;
            resourceInputs["iamSaves"] = state ? state.iamSaves : undefined;
            resourceInputs["isAuditor"] = state ? state.isAuditor : undefined;
            resourceInputs["isLocked"] = state ? state.isLocked : undefined;
            resourceInputs["isMfaEnabled"] = state ? state.isMfaEnabled : undefined;
            resourceInputs["isMobileDevicePaired"] = state ? state.isMobileDevicePaired : undefined;
            resourceInputs["isOwner"] = state ? state.isOwner : undefined;
            resourceInputs["isSsoEnabled"] = state ? state.isSsoEnabled : undefined;
            resourceInputs["isSuperUser"] = state ? state.isSuperUser : undefined;
            resourceInputs["isSuspended"] = state ? state.isSuspended : undefined;
            resourceInputs["lastLogin"] = state ? state.lastLogin : undefined;
            resourceInputs["lastName"] = state ? state.lastName : undefined;
            resourceInputs["manages"] = state ? state.manages : undefined;
            resourceInputs["permitAlertActions"] = state ? state.permitAlertActions : undefined;
            resourceInputs["permitNotifications"] = state ? state.permitNotifications : undefined;
            resourceInputs["permitOnBoarding"] = state ? state.permitOnBoarding : undefined;
            resourceInputs["permitPolicies"] = state ? state.permitPolicies : undefined;
            resourceInputs["permitRulesets"] = state ? state.permitRulesets : undefined;
            resourceInputs["roleIds"] = state ? state.roleIds : undefined;
            resourceInputs["views"] = state ? state.views : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.firstName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'firstName'");
            }
            if ((!args || args.isSsoEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isSsoEnabled'");
            }
            if ((!args || args.lastName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lastName'");
            }
            resourceInputs["accesses"] = args ? args.accesses : undefined;
            resourceInputs["creates"] = args ? args.creates : undefined;
            resourceInputs["crossAccountAccesses"] = args ? args.crossAccountAccesses : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["firstName"] = args ? args.firstName : undefined;
            resourceInputs["isOwner"] = args ? args.isOwner : undefined;
            resourceInputs["isSsoEnabled"] = args ? args.isSsoEnabled : undefined;
            resourceInputs["lastName"] = args ? args.lastName : undefined;
            resourceInputs["manages"] = args ? args.manages : undefined;
            resourceInputs["permitAlertActions"] = args ? args.permitAlertActions : undefined;
            resourceInputs["permitNotifications"] = args ? args.permitNotifications : undefined;
            resourceInputs["permitOnBoarding"] = args ? args.permitOnBoarding : undefined;
            resourceInputs["permitPolicies"] = args ? args.permitPolicies : undefined;
            resourceInputs["permitRulesets"] = args ? args.permitRulesets : undefined;
            resourceInputs["roleIds"] = args ? args.roleIds : undefined;
            resourceInputs["views"] = args ? args.views : undefined;
            resourceInputs["canSwitchRole"] = undefined /*out*/;
            resourceInputs["hasApiKey"] = undefined /*out*/;
            resourceInputs["hasApiKeyV1"] = undefined /*out*/;
            resourceInputs["hasApiKeyV2"] = undefined /*out*/;
            resourceInputs["iamSaves"] = undefined /*out*/;
            resourceInputs["isAuditor"] = undefined /*out*/;
            resourceInputs["isLocked"] = undefined /*out*/;
            resourceInputs["isMfaEnabled"] = undefined /*out*/;
            resourceInputs["isMobileDevicePaired"] = undefined /*out*/;
            resourceInputs["isSuperUser"] = undefined /*out*/;
            resourceInputs["isSuspended"] = undefined /*out*/;
            resourceInputs["lastLogin"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(User.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    accesses?: pulumi.Input<pulumi.Input<inputs.UserAccess>[]>;
    canSwitchRole?: pulumi.Input<boolean>;
    creates?: pulumi.Input<pulumi.Input<string>[]>;
    crossAccountAccesses?: pulumi.Input<pulumi.Input<string>[]>;
    email?: pulumi.Input<string>;
    firstName?: pulumi.Input<string>;
    hasApiKey?: pulumi.Input<boolean>;
    hasApiKeyV1?: pulumi.Input<boolean>;
    hasApiKeyV2?: pulumi.Input<boolean>;
    iamSaves?: pulumi.Input<pulumi.Input<inputs.UserIamSafe>[]>;
    isAuditor?: pulumi.Input<boolean>;
    isLocked?: pulumi.Input<boolean>;
    isMfaEnabled?: pulumi.Input<boolean>;
    isMobileDevicePaired?: pulumi.Input<boolean>;
    isOwner?: pulumi.Input<boolean>;
    isSsoEnabled?: pulumi.Input<boolean>;
    isSuperUser?: pulumi.Input<boolean>;
    isSuspended?: pulumi.Input<boolean>;
    lastLogin?: pulumi.Input<string>;
    lastName?: pulumi.Input<string>;
    manages?: pulumi.Input<pulumi.Input<inputs.UserManage>[]>;
    permitAlertActions?: pulumi.Input<boolean>;
    permitNotifications?: pulumi.Input<boolean>;
    permitOnBoarding?: pulumi.Input<boolean>;
    permitPolicies?: pulumi.Input<boolean>;
    permitRulesets?: pulumi.Input<boolean>;
    roleIds?: pulumi.Input<pulumi.Input<number>[]>;
    views?: pulumi.Input<pulumi.Input<inputs.UserView>[]>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    accesses?: pulumi.Input<pulumi.Input<inputs.UserAccess>[]>;
    creates?: pulumi.Input<pulumi.Input<string>[]>;
    crossAccountAccesses?: pulumi.Input<pulumi.Input<string>[]>;
    email: pulumi.Input<string>;
    firstName: pulumi.Input<string>;
    isOwner?: pulumi.Input<boolean>;
    isSsoEnabled: pulumi.Input<boolean>;
    lastName: pulumi.Input<string>;
    manages?: pulumi.Input<pulumi.Input<inputs.UserManage>[]>;
    permitAlertActions?: pulumi.Input<boolean>;
    permitNotifications?: pulumi.Input<boolean>;
    permitOnBoarding?: pulumi.Input<boolean>;
    permitPolicies?: pulumi.Input<boolean>;
    permitRulesets?: pulumi.Input<boolean>;
    roleIds?: pulumi.Input<pulumi.Input<number>[]>;
    views?: pulumi.Input<pulumi.Input<inputs.UserView>[]>;
}
