// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AssessmentDataSyncStatus {
    entitiesWithPermissionIssues: outputs.AssessmentDataSyncStatusEntitiesWithPermissionIssue[];
    entityType: string;
    generalFetchPermissionIssues: boolean;
    recentlySuccessfulSync: boolean;
}

export interface AssessmentDataSyncStatusEntitiesWithPermissionIssue {
    cloudVendorIdentifier: string;
    externalId: string;
    name: string;
}

export interface AssessmentExclusion {
    cloudAccountIds: string[];
    comment: string;
    dateRanges: outputs.AssessmentExclusionDateRange[];
    id: number;
    logicExpressions: string[];
    organizationalUnitIds: string[];
    platform: string;
    rules: outputs.AssessmentExclusionRule[];
    rulesetId: number;
}

export interface AssessmentExclusionDateRange {
    from: string;
    to: string;
}

export interface AssessmentExclusionRule {
    id: number;
    logicHash: string;
    name: string;
}

export interface AssessmentRemediation {
    cloudAccountIds: string[];
    cloudBots: string[];
    comment: string;
    dateRanges: outputs.AssessmentRemediationDateRange[];
    id: number;
    logicExpressions: string[];
    organizationalUnitIds: string[];
    platform: string;
    rules: outputs.AssessmentRemediationRule[];
    rulesetId: number;
}

export interface AssessmentRemediationDateRange {
    from: string;
    to: string;
}

export interface AssessmentRemediationRule {
    id: number;
    logicHash: string;
    name: string;
}

export interface AssessmentRequest {
    cloudAccountId: string;
    cloudAccountType: string;
    description: string;
    dome9CloudAccountId: string;
    externalCloudAccountId: string;
    id: number;
    isTemplate: boolean;
    name: string;
    requestId: string;
    shouldMinimizeResult: boolean;
}

export interface AssessmentStat {
    error: number;
    excludedFailedTests: number;
    excludedRules: number;
    excludedRulesBySeverities: outputs.AssessmentStatExcludedRulesBySeverity[];
    excludedTests: number;
    failed: number;
    failedEntities: number;
    failedRulesBySeverities: outputs.AssessmentStatFailedRulesBySeverity[];
    failedTests: number;
    logicallyTested: number;
    passed: number;
    passedRulesBySeverities: outputs.AssessmentStatPassedRulesBySeverity[];
}

export interface AssessmentStatExcludedRulesBySeverity {
    critical: number;
    high: number;
    informational: number;
    low: number;
    medium: number;
}

export interface AssessmentStatFailedRulesBySeverity {
    critical: number;
    high: number;
    informational: number;
    low: number;
    medium: number;
}

export interface AssessmentStatPassedRulesBySeverity {
    critical: number;
    high: number;
    informational: number;
    low: number;
    medium: number;
}

export interface AssessmentTest {
    entityResults: outputs.AssessmentTestEntityResult[];
    error: string;
    exclusionStats: outputs.AssessmentTestExclusionStat[];
    nonComplyingCount: number;
    relevantCount: number;
    rules: outputs.AssessmentTestRule[];
    testPassed: boolean;
    testedCount: number;
}

export interface AssessmentTestEntityResult {
    error: string;
    exclusionId: string;
    isExcluded: boolean;
    isRelevant: boolean;
    isValid: boolean;
    remediationId: string;
    testObjs: outputs.AssessmentTestEntityResultTestObj[];
    validationStatus: string;
}

export interface AssessmentTestEntityResultTestObj {
    customEntityComparisonHash: string;
    dome9Id: string;
    entityIndex: number;
    entityType: string;
    id: string;
}

export interface AssessmentTestExclusionStat {
    nonComplyingCount: number;
    relevantCount: number;
    testedCount: number;
}

export interface AssessmentTestRule {
    category: string;
    cloudbots: string;
    complianceTag: string;
    controlTitle: string;
    description: string;
    domain: string;
    isDefault: boolean;
    labels: string[];
    logic: string;
    logicHash: string;
    name: string;
    priority: string;
    remediation: string;
    ruleId: string;
    severity: string;
}

export interface AwpAwsOnboardingAgentlessAccountSettings {
    customTags?: {[key: string]: string};
    disabledRegions?: string[];
    inAccountScannerVpc?: string;
    maxConcurrentScansPerRegion?: number;
    scanMachineIntervalInHours?: number;
}

export interface AwpAzureOnboardingAgentlessAccountSettings {
    customTags?: {[key: string]: string};
    disabledRegions?: string[];
    inAccountScannerVpc?: string;
    maxConcurrentScansPerRegion?: number;
    scanMachineIntervalInHours?: number;
    skipFunctionAppsScan?: boolean;
}

export interface AwsSecurityGroupService {
    inbounds?: outputs.AwsSecurityGroupServiceInbound[];
    outbounds?: outputs.AwsSecurityGroupServiceOutbound[];
}

export interface AwsSecurityGroupServiceInbound {
    description?: string;
    name?: string;
    openForAll?: boolean;
    port?: string;
    protocolType?: string;
    scopes?: outputs.AwsSecurityGroupServiceInboundScope[];
}

export interface AwsSecurityGroupServiceInboundScope {
    data: {[key: string]: string};
    type: string;
}

export interface AwsSecurityGroupServiceOutbound {
    description?: string;
    name?: string;
    openForAll?: boolean;
    port?: string;
    protocolType?: string;
    scopes?: outputs.AwsSecurityGroupServiceOutboundScope[];
}

export interface AwsSecurityGroupServiceOutboundScope {
    data?: {[key: string]: string};
    type?: string;
}

export interface AzureOrganizationOnboardingActiveBlades {
    awp: outputs.AzureOrganizationOnboardingActiveBladesAwp;
    cdr: outputs.AzureOrganizationOnboardingActiveBladesCdr;
    postureManagement: outputs.AzureOrganizationOnboardingActiveBladesPostureManagement;
    serverless: outputs.AzureOrganizationOnboardingActiveBladesServerless;
}

export interface AzureOrganizationOnboardingActiveBladesAwp {
    centralizedSubscriptionId?: string;
    isEnabled?: boolean;
    onboardingMode?: string;
    withFunctionAppsScan?: boolean;
}

export interface AzureOrganizationOnboardingActiveBladesCdr {
    accounts?: outputs.AzureOrganizationOnboardingActiveBladesCdrAccount[];
    isEnabled?: boolean;
}

export interface AzureOrganizationOnboardingActiveBladesCdrAccount {
    logTypes?: string[];
    storageId?: string;
}

export interface AzureOrganizationOnboardingActiveBladesPostureManagement {
    onboardingMode?: string;
}

export interface AzureOrganizationOnboardingActiveBladesServerless {
    isEnabled?: boolean;
}

export interface AzureSecurityGroupInbound {
    access?: string;
    description?: string;
    destinationPortRanges: string[];
    destinationScopes: outputs.AzureSecurityGroupInboundDestinationScope[];
    direction: string;
    isDefault?: boolean;
    name: string;
    priority: number;
    protocol: string;
    sourcePortRanges: string[];
    sourceScopes: outputs.AzureSecurityGroupInboundSourceScope[];
}

export interface AzureSecurityGroupInboundDestinationScope {
    data: {[key: string]: string};
    type: string;
}

export interface AzureSecurityGroupInboundSourceScope {
    data: {[key: string]: string};
    type: string;
}

export interface AzureSecurityGroupOutbound {
    access?: string;
    description?: string;
    destinationPortRanges: string[];
    destinationScopes: outputs.AzureSecurityGroupOutboundDestinationScope[];
    direction: string;
    isDefault?: boolean;
    name: string;
    priority: number;
    protocol: string;
    sourcePortRanges: string[];
    sourceScopes: outputs.AzureSecurityGroupOutboundSourceScope[];
}

export interface AzureSecurityGroupOutboundDestinationScope {
    data: {[key: string]: string};
    type: string;
}

export interface AzureSecurityGroupOutboundSourceScope {
    data: {[key: string]: string};
    type: string;
}

export interface AzureSecurityGroupTag {
    key: string;
    value: string;
}

export interface CloudSecurityGroupRuleService {
    inbounds?: outputs.CloudSecurityGroupRuleServiceInbound[];
    outbounds?: outputs.CloudSecurityGroupRuleServiceOutbound[];
}

export interface CloudSecurityGroupRuleServiceInbound {
    description?: string;
    name?: string;
    openForAll?: boolean;
    port?: string;
    protocolType?: string;
    scopes?: outputs.CloudSecurityGroupRuleServiceInboundScope[];
}

export interface CloudSecurityGroupRuleServiceInboundScope {
    data: {[key: string]: string};
    type: string;
}

export interface CloudSecurityGroupRuleServiceOutbound {
    description?: string;
    name?: string;
    openForAll?: boolean;
    port?: string;
    protocolType?: string;
    scopes?: outputs.CloudSecurityGroupRuleServiceOutboundScope[];
}

export interface CloudSecurityGroupRuleServiceOutboundScope {
    data?: {[key: string]: string};
    type?: string;
}

export interface CloudaccountAwsCredentials {
    apiKey?: string;
    arn?: string;
    iamUser?: string;
    isReadOnly: boolean;
    secret: string;
    /**
     * The cloud account onboarding method. Should be set to 'RoleBased' for aws and 'UserBased' for awsGov and awsChina
     */
    type: string;
}

export interface CloudaccountAwsIamSafe {
    awsGroupArn: string;
    awsPolicyArn: string;
    mode: string;
    restrictedIamEntities: outputs.CloudaccountAwsIamSafeRestrictedIamEntity[];
}

export interface CloudaccountAwsIamSafeRestrictedIamEntity {
    rolesArns: string[];
    usersArns: string[];
}

export interface CloudaccountAwsNetSec {
    regions: outputs.CloudaccountAwsNetSecRegion[];
}

export interface CloudaccountAwsNetSecRegion {
    hidden: boolean;
    name: string;
    newGroupBehavior: string;
    region: string;
}

export interface CloudaccountKubernetesAdmissionControl {
    enabled: boolean;
}

export interface CloudaccountKubernetesImageAssurance {
    enabled: boolean;
}

export interface CloudaccountKubernetesRuntimeProtection {
    enabled: boolean;
}

export interface CloudaccountKubernetesThreatIntelligence {
    enabled: boolean;
}

export interface ContinuousComplianceNotificationChangeDetection {
    awsSecurityHubIntegrationState?: string;
    awsSecurityHubIntegrations?: outputs.ContinuousComplianceNotificationChangeDetectionAwsSecurityHubIntegration[];
    emailDatas?: outputs.ContinuousComplianceNotificationChangeDetectionEmailData[];
    emailPerFindingDatas?: outputs.ContinuousComplianceNotificationChangeDetectionEmailPerFindingData[];
    emailPerFindingSendingState?: string;
    emailSendingState?: string;
    externalTicketCreatingState?: string;
    slackDatas?: outputs.ContinuousComplianceNotificationChangeDetectionSlackData[];
    slackIntegrationState?: string;
    snsDatas?: outputs.ContinuousComplianceNotificationChangeDetectionSnsData[];
    snsSendingState?: string;
    teamsDatas?: outputs.ContinuousComplianceNotificationChangeDetectionTeamsData[];
    teamsIntegrationState?: string;
    ticketingSystemDatas?: outputs.ContinuousComplianceNotificationChangeDetectionTicketingSystemData[];
    webhookDatas?: outputs.ContinuousComplianceNotificationChangeDetectionWebhookData[];
    webhookIntegrationState?: string;
}

export interface ContinuousComplianceNotificationChangeDetectionAwsSecurityHubIntegration {
    externalAccountId: string;
    region: string;
}

export interface ContinuousComplianceNotificationChangeDetectionEmailData {
    recipients: string[];
}

export interface ContinuousComplianceNotificationChangeDetectionEmailPerFindingData {
    notificationOutputFormat?: string;
    recipients: string[];
}

export interface ContinuousComplianceNotificationChangeDetectionSlackData {
    url: string;
}

export interface ContinuousComplianceNotificationChangeDetectionSnsData {
    snsOutputFormat: string;
    snsTopicArn: string;
}

export interface ContinuousComplianceNotificationChangeDetectionTeamsData {
    url: string;
}

export interface ContinuousComplianceNotificationChangeDetectionTicketingSystemData {
    domain: string;
    issueType: string;
    pass: string;
    projectKey: string;
    shouldCloseTickets?: boolean;
    systemType?: string;
    user: string;
}

export interface ContinuousComplianceNotificationChangeDetectionWebhookData {
    advancedUrl?: boolean;
    authMethod?: string;
    formatType?: string;
    httpMethod?: string;
    ignoreCertificate?: boolean;
    password: string;
    payloadFormat?: string;
    url: string;
    username: string;
}

export interface ContinuousComplianceNotificationGcpSecurityCommandCenterIntegration {
    projectId: string;
    sourceId: string;
    state?: string;
}

export interface ContinuousComplianceNotificationScheduledReport {
    emailSendingState?: string;
    scheduleDatas?: outputs.ContinuousComplianceNotificationScheduledReportScheduleData[];
}

export interface ContinuousComplianceNotificationScheduledReportScheduleData {
    cronExpression: string;
    recipients: string[];
    type: string;
}

export interface GetAssessmentDataSyncStatus {
    entitiesWithPermissionIssues: outputs.GetAssessmentDataSyncStatusEntitiesWithPermissionIssue[];
    entityType: string;
    generalFetchPermissionIssues: boolean;
    recentlySuccessfulSync: boolean;
}

export interface GetAssessmentDataSyncStatusEntitiesWithPermissionIssue {
    cloudVendorIdentifier: string;
    externalId: string;
    name: string;
}

export interface GetAssessmentExclusion {
    cloudAccountIds: string[];
    comment: string;
    dateRanges: outputs.GetAssessmentExclusionDateRange[];
    id: number;
    logicExpressions: string[];
    organizationalUnitIds: string[];
    platform: string;
    rules: outputs.GetAssessmentExclusionRule[];
    rulesetId: number;
}

export interface GetAssessmentExclusionDateRange {
    from: string;
    to: string;
}

export interface GetAssessmentExclusionRule {
    id: number;
    logicHash: string;
    name: string;
}

export interface GetAssessmentLocationMetadata {
    accounts: outputs.GetAssessmentLocationMetadataAccount[];
}

export interface GetAssessmentLocationMetadataAccount {
    externalId: string;
    id: string;
    name: string;
    srl: string;
}

export interface GetAssessmentRemediation {
    cloudAccountIds: string[];
    cloudBots: string[];
    comment: string;
    dateRanges: outputs.GetAssessmentRemediationDateRange[];
    id: number;
    logicExpressions: string[];
    organizationalUnitIds: string[];
    platform: string;
    rules: outputs.GetAssessmentRemediationRule[];
    rulesetId: number;
}

export interface GetAssessmentRemediationDateRange {
    from: string;
    to: string;
}

export interface GetAssessmentRemediationRule {
    id: number;
    logicHash: string;
    name: string;
}

export interface GetAssessmentRequest {
    cloudAccountId: string;
    cloudAccountType: string;
    description: string;
    dome9CloudAccountId: string;
    externalCloudAccountId: string;
    id: number;
    isTemplate: boolean;
    name: string;
    requestId: string;
    shouldMinimizeResult: boolean;
}

export interface GetAssessmentStat {
    error: number;
    excludedFailedTests: number;
    excludedRules: number;
    excludedRulesBySeverities: outputs.GetAssessmentStatExcludedRulesBySeverity[];
    excludedTests: number;
    failed: number;
    failedEntities: number;
    failedRulesBySeverities: outputs.GetAssessmentStatFailedRulesBySeverity[];
    failedTests: number;
    logicallyTested: number;
    passed: number;
    passedRulesBySeverities: outputs.GetAssessmentStatPassedRulesBySeverity[];
}

export interface GetAssessmentStatExcludedRulesBySeverity {
    critical: number;
    high: number;
    informational: number;
    low: number;
    medium: number;
}

export interface GetAssessmentStatFailedRulesBySeverity {
    critical: number;
    high: number;
    informational: number;
    low: number;
    medium: number;
}

export interface GetAssessmentStatPassedRulesBySeverity {
    critical: number;
    high: number;
    informational: number;
    low: number;
    medium: number;
}

export interface GetAssessmentTest {
    entityResults: outputs.GetAssessmentTestEntityResult[];
    error: string;
    exclusionStats: outputs.GetAssessmentTestExclusionStat[];
    nonComplyingCount: number;
    relevantCount: number;
    rules: outputs.GetAssessmentTestRule[];
    testPassed: boolean;
    testedCount: number;
}

export interface GetAssessmentTestEntityResult {
    error: string;
    exclusionId: string;
    isExcluded: boolean;
    isRelevant: boolean;
    isValid: boolean;
    remediationId: string;
    testObjs: outputs.GetAssessmentTestEntityResultTestObj[];
    validationStatus: string;
}

export interface GetAssessmentTestEntityResultTestObj {
    customEntityComparisonHash: string;
    dome9Id: string;
    entityIndex: number;
    entityType: string;
    id: string;
}

export interface GetAssessmentTestExclusionStat {
    nonComplyingCount: number;
    relevantCount: number;
    testedCount: number;
}

export interface GetAssessmentTestRule {
    category: string;
    cloudbots: string;
    complianceTag: string;
    controlTitle: string;
    description: string;
    domain: string;
    isDefault: boolean;
    labels: string[];
    logic: string;
    logicHash: string;
    name: string;
    priority: string;
    remediation: string;
    ruleId: string;
    severity: string;
}

export interface GetAwpAwsOnboardingAgentlessAccountSetting {
    customTags: {[key: string]: string};
    disabledRegions: string[];
    inAccountScannerVpc: string;
    maxConcurrentScansPerRegion: number;
    scanMachineIntervalInHours: number;
}

export interface GetAwpAzureOnboardingAgentlessAccountSetting {
    customTags: {[key: string]: string};
    disabledRegions: string[];
    inAccountScannerVpc: string;
    maxConcurrentScansPerRegion: number;
    scanMachineIntervalInHours: number;
    skipFunctionAppsScan: boolean;
}

export interface GetAwsSecurityGroupService {
    inbounds: outputs.GetAwsSecurityGroupServiceInbound[];
    outbounds: outputs.GetAwsSecurityGroupServiceOutbound[];
}

export interface GetAwsSecurityGroupServiceInbound {
    description: string;
    name: string;
    openForAll: boolean;
    port: string;
    protocolType: string;
    scopes: outputs.GetAwsSecurityGroupServiceInboundScope[];
}

export interface GetAwsSecurityGroupServiceInboundScope {
    data: {[key: string]: string};
    type: string;
}

export interface GetAwsSecurityGroupServiceOutbound {
    description: string;
    name: string;
    openForAll: boolean;
    port: string;
    protocolType: string;
    scopes: outputs.GetAwsSecurityGroupServiceOutboundScope[];
}

export interface GetAwsSecurityGroupServiceOutboundScope {
    data: {[key: string]: string};
    type: string;
}

export interface GetAwsUnifiedOnboardingStatus {
    feature: string;
    module: string;
    remediationRecommendation: string;
    stackMessage: string;
    stackStatus: string;
    status: string;
    statusMessage: string;
}

export interface GetAzureSecurityGroupInbound {
    access: string;
    description: string;
    destinationPortRanges: string[];
    destinationScopes: outputs.GetAzureSecurityGroupInboundDestinationScope[];
    direction: string;
    isDefault: boolean;
    name: string;
    priority: number;
    protocol: string;
    sourcePortRanges: string[];
    sourceScopes: outputs.GetAzureSecurityGroupInboundSourceScope[];
}

export interface GetAzureSecurityGroupInboundDestinationScope {
    data: {[key: string]: string};
    type: string;
}

export interface GetAzureSecurityGroupInboundSourceScope {
    data: {[key: string]: string};
    type: string;
}

export interface GetAzureSecurityGroupOutbound {
    access: string;
    description: string;
    destinationPortRanges: string[];
    destinationScopes: outputs.GetAzureSecurityGroupOutboundDestinationScope[];
    direction: string;
    isDefault: boolean;
    name: string;
    priority: number;
    protocol: string;
    sourcePortRanges: string[];
    sourceScopes: outputs.GetAzureSecurityGroupOutboundSourceScope[];
}

export interface GetAzureSecurityGroupOutboundDestinationScope {
    data: {[key: string]: string};
    type: string;
}

export interface GetAzureSecurityGroupOutboundSourceScope {
    data: {[key: string]: string};
    type: string;
}

export interface GetAzureSecurityGroupTag {
    key: string;
    value: string;
}

export interface GetCloudSecurityGroupRuleService {
    inbounds: outputs.GetCloudSecurityGroupRuleServiceInbound[];
    outbounds: outputs.GetCloudSecurityGroupRuleServiceOutbound[];
}

export interface GetCloudSecurityGroupRuleServiceInbound {
    description: string;
    name: string;
    openForAll: boolean;
    port: string;
    protocolType: string;
    scopes: outputs.GetCloudSecurityGroupRuleServiceInboundScope[];
}

export interface GetCloudSecurityGroupRuleServiceInboundScope {
    data: {[key: string]: string};
    type: string;
}

export interface GetCloudSecurityGroupRuleServiceOutbound {
    description: string;
    name: string;
    openForAll: boolean;
    port: string;
    protocolType: string;
    scopes: outputs.GetCloudSecurityGroupRuleServiceOutboundScope[];
}

export interface GetCloudSecurityGroupRuleServiceOutboundScope {
    data: {[key: string]: string};
    type: string;
}

export interface GetCloudaccountAwsIamSafe {
    awsGroupArn: string;
    awsPolicyArn: string;
    mode: string;
    restrictedIamEntities: outputs.GetCloudaccountAwsIamSafeRestrictedIamEntity[];
}

export interface GetCloudaccountAwsIamSafeRestrictedIamEntity {
    rolesArns: string[];
    usersArns: string[];
}

export interface GetCloudaccountAwsNetSec {
    regions: outputs.GetCloudaccountAwsNetSecRegion[];
}

export interface GetCloudaccountAwsNetSecRegion {
    hidden: boolean;
    name: string;
    newGroupBehavior: string;
    region: string;
}

export interface GetCloudaccountKubernetesAdmissionControl {
    enabled: boolean;
}

export interface GetCloudaccountKubernetesImageAssurance {
    enabled: boolean;
}

export interface GetCloudaccountKubernetesRuntimeProtection {
    enabled: boolean;
}

export interface GetCloudaccountKubernetesThreatIntelligence {
    enabled: boolean;
}

export interface GetContinuousComplianceNotificationChangeDetection {
    awsSecurityHubIntegrationState: string;
    awsSecurityHubIntegrations: outputs.GetContinuousComplianceNotificationChangeDetectionAwsSecurityHubIntegration[];
    emailDatas: outputs.GetContinuousComplianceNotificationChangeDetectionEmailData[];
    emailPerFindingDatas: outputs.GetContinuousComplianceNotificationChangeDetectionEmailPerFindingData[];
    emailPerFindingSendingState: string;
    emailSendingState: string;
    externalTicketCreatingState: string;
    slackDatas: outputs.GetContinuousComplianceNotificationChangeDetectionSlackData[];
    slackIntegrationState: string;
    snsDatas: outputs.GetContinuousComplianceNotificationChangeDetectionSnsData[];
    snsSendingState: string;
    teamsDatas: outputs.GetContinuousComplianceNotificationChangeDetectionTeamsData[];
    teamsIntegrationState: string;
    ticketingSystemDatas: outputs.GetContinuousComplianceNotificationChangeDetectionTicketingSystemData[];
    webhookDatas: outputs.GetContinuousComplianceNotificationChangeDetectionWebhookData[];
    webhookIntegrationState: string;
}

export interface GetContinuousComplianceNotificationChangeDetectionAwsSecurityHubIntegration {
    externalAccountId: string;
    region: string;
}

export interface GetContinuousComplianceNotificationChangeDetectionEmailData {
    recipients: string[];
}

export interface GetContinuousComplianceNotificationChangeDetectionEmailPerFindingData {
    notificationOutputFormat: string;
    recipients: string[];
}

export interface GetContinuousComplianceNotificationChangeDetectionSlackData {
    url: string;
}

export interface GetContinuousComplianceNotificationChangeDetectionSnsData {
    snsOutputFormat: string;
    snsTopicArn: string;
}

export interface GetContinuousComplianceNotificationChangeDetectionTeamsData {
    url: string;
}

export interface GetContinuousComplianceNotificationChangeDetectionTicketingSystemData {
    domain: string;
    issueType: string;
    pass: string;
    projectKey: string;
    shouldCloseTickets: boolean;
    systemType: string;
    user: string;
}

export interface GetContinuousComplianceNotificationChangeDetectionWebhookData {
    advancedUrl: boolean;
    authMethod: string;
    formatType: string;
    httpMethod: string;
    ignoreCertificate: boolean;
    password: string;
    payloadFormat: string;
    url: string;
    username: string;
}

export interface GetContinuousComplianceNotificationGcpSecurityCommandCenterIntegration {
    projectId: string;
    sourceId: string;
    state: string;
}

export interface GetContinuousComplianceNotificationScheduledReport {
    emailSendingState: string;
    scheduleDatas: outputs.GetContinuousComplianceNotificationScheduledReportScheduleData[];
}

export interface GetContinuousComplianceNotificationScheduledReportScheduleData {
    cronExpression: string;
    recipients: string[];
    type: string;
}

export interface GetIplistItem {
    comment: string;
    ip: string;
}

export interface GetNotificationIntegrationSetting {
    reportsIntegrationSettings: outputs.GetNotificationIntegrationSettingReportsIntegrationSetting[];
    scheduledIntegrationSettings: outputs.GetNotificationIntegrationSettingScheduledIntegrationSetting[];
    singleNotificationIntegrationSettings: outputs.GetNotificationIntegrationSettingSingleNotificationIntegrationSetting[];
}

export interface GetNotificationIntegrationSettingReportsIntegrationSetting {
    integrationId: string;
    outputType: string;
}

export interface GetNotificationIntegrationSettingScheduledIntegrationSetting {
    cronExpression: string;
    integrationId: string;
    outputType: string;
}

export interface GetNotificationIntegrationSettingSingleNotificationIntegrationSetting {
    integrationId: string;
    outputType: string;
    payload: string;
}

export interface GetRoleAccess {
    mainId: string;
    region: string;
    securityGroupId: string;
    traffic: string;
    type: string;
}

export interface GetRoleManage {
    mainId: string;
    region: string;
    securityGroupId: string;
    traffic: string;
    type: string;
}

export interface GetRoleView {
    mainId: string;
    region: string;
    securityGroupId: string;
    traffic: string;
    type: string;
}

export interface GetRulesetRule {
    category: string;
    complianceTag: string;
    controlTitle: string;
    description: string;
    domain: string;
    isDefault: boolean;
    logic: string;
    logicHash: string;
    name: string;
    priority: string;
    remediation: string;
    ruleId: string;
    severity: string;
}

export interface GetUserAccess {
    mainId: string;
    region: string;
    securityGroupId: string;
    traffic: string;
    type: string;
}

export interface GetUserIamSafe {
    cloudAccounts: outputs.GetUserIamSafeCloudAccount[];
}

export interface GetUserIamSafeCloudAccount {
    cloudAccountId: string;
    cloudAccountState: string;
    externalAccountNumber: string;
    iamEntities: string[];
    iamEntitiesLastLeaseTimes: outputs.GetUserIamSafeCloudAccountIamEntitiesLastLeaseTime[];
    iamEntity: string;
    lastLeaseTime: string;
    name: string;
    state: boolean;
}

export interface GetUserIamSafeCloudAccountIamEntitiesLastLeaseTime {
    iamEntity: string;
    lastLeaseTime: string;
}

export interface GetUserManage {
    mainId: string;
    region: string;
    securityGroupId: string;
    traffic: string;
    type: string;
}

export interface GetUserView {
    mainId: string;
    region: string;
    securityGroupId: string;
    traffic: string;
    type: string;
}

export interface IplistItem {
    comment?: string;
    ip?: string;
}

export interface NotificationIntegrationSettings {
    reportsIntegrationSettings?: outputs.NotificationIntegrationSettingsReportsIntegrationSetting[];
    scheduledIntegrationSettings?: outputs.NotificationIntegrationSettingsScheduledIntegrationSetting[];
    singleNotificationIntegrationSettings?: outputs.NotificationIntegrationSettingsSingleNotificationIntegrationSetting[];
}

export interface NotificationIntegrationSettingsReportsIntegrationSetting {
    integrationId?: string;
    outputType?: string;
}

export interface NotificationIntegrationSettingsScheduledIntegrationSetting {
    cronExpression?: string;
    integrationId?: string;
    outputType?: string;
}

export interface NotificationIntegrationSettingsSingleNotificationIntegrationSetting {
    integrationId?: string;
    outputType?: string;
    payload?: string;
}

export interface RoleAccess {
    mainId?: string;
    region?: string;
    securityGroupId?: string;
    traffic?: string;
    type?: string;
}

export interface RoleManage {
    mainId?: string;
    region?: string;
    securityGroupId?: string;
    traffic?: string;
    type?: string;
}

export interface RoleView {
    mainId?: string;
    region?: string;
    securityGroupId?: string;
    traffic?: string;
    type?: string;
}

export interface RulesetRule {
    category?: string;
    complianceTag?: string;
    controlTitle?: string;
    description?: string;
    domain?: string;
    isDefault?: boolean;
    logic: string;
    logicHash: string;
    name: string;
    priority?: string;
    remediation?: string;
    ruleId?: string;
    severity?: string;
}

export interface UserAccess {
    mainId?: string;
    region?: string;
    securityGroupId?: string;
    traffic?: string;
    type?: string;
}

export interface UserIamSafe {
    cloudAccounts: outputs.UserIamSafeCloudAccount[];
}

export interface UserIamSafeCloudAccount {
    cloudAccountId: string;
    cloudAccountState: string;
    externalAccountNumber: string;
    iamEntities: string[];
    iamEntitiesLastLeaseTimes: outputs.UserIamSafeCloudAccountIamEntitiesLastLeaseTime[];
    iamEntity: string;
    lastLeaseTime: string;
    name: string;
    state: boolean;
}

export interface UserIamSafeCloudAccountIamEntitiesLastLeaseTime {
    iamEntity: string;
    lastLeaseTime: string;
}

export interface UserManage {
    mainId?: string;
    region?: string;
    securityGroupId?: string;
    traffic?: string;
    type?: string;
}

export interface UserView {
    mainId?: string;
    region?: string;
    securityGroupId?: string;
    traffic?: string;
    type?: string;
}

