// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getContinuousComplianceNotification(args: GetContinuousComplianceNotificationArgs, opts?: pulumi.InvokeOptions): Promise<GetContinuousComplianceNotificationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("dome9:index/getContinuousComplianceNotification:getContinuousComplianceNotification", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getContinuousComplianceNotification.
 */
export interface GetContinuousComplianceNotificationArgs {
    id: string;
}

/**
 * A collection of values returned by getContinuousComplianceNotification.
 */
export interface GetContinuousComplianceNotificationResult {
    readonly alertsConsole: boolean;
    readonly changeDetections: outputs.GetContinuousComplianceNotificationChangeDetection[];
    readonly description: string;
    readonly gcpSecurityCommandCenterIntegrations: outputs.GetContinuousComplianceNotificationGcpSecurityCommandCenterIntegration[];
    readonly id: string;
    readonly name: string;
    readonly scheduledReports: outputs.GetContinuousComplianceNotificationScheduledReport[];
}
export function getContinuousComplianceNotificationOutput(args: GetContinuousComplianceNotificationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetContinuousComplianceNotificationResult> {
    return pulumi.output(args).apply((a: any) => getContinuousComplianceNotification(a, opts))
}

/**
 * A collection of arguments for invoking getContinuousComplianceNotification.
 */
export interface GetContinuousComplianceNotificationOutputArgs {
    id: pulumi.Input<string>;
}
