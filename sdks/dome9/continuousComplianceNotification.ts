// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ContinuousComplianceNotification extends pulumi.CustomResource {
    /**
     * Get an existing ContinuousComplianceNotification resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContinuousComplianceNotificationState, opts?: pulumi.CustomResourceOptions): ContinuousComplianceNotification {
        return new ContinuousComplianceNotification(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dome9:index/continuousComplianceNotification:ContinuousComplianceNotification';

    /**
     * Returns true if the given object is an instance of ContinuousComplianceNotification.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContinuousComplianceNotification {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContinuousComplianceNotification.__pulumiType;
    }

    public readonly alertsConsole!: pulumi.Output<boolean>;
    public readonly changeDetections!: pulumi.Output<outputs.ContinuousComplianceNotificationChangeDetection[]>;
    public readonly description!: pulumi.Output<string>;
    public readonly gcpSecurityCommandCenterIntegrations!: pulumi.Output<outputs.ContinuousComplianceNotificationGcpSecurityCommandCenterIntegration[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly scheduledReports!: pulumi.Output<outputs.ContinuousComplianceNotificationScheduledReport[] | undefined>;

    /**
     * Create a ContinuousComplianceNotification resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContinuousComplianceNotificationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContinuousComplianceNotificationArgs | ContinuousComplianceNotificationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContinuousComplianceNotificationState | undefined;
            resourceInputs["alertsConsole"] = state ? state.alertsConsole : undefined;
            resourceInputs["changeDetections"] = state ? state.changeDetections : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["gcpSecurityCommandCenterIntegrations"] = state ? state.gcpSecurityCommandCenterIntegrations : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scheduledReports"] = state ? state.scheduledReports : undefined;
        } else {
            const args = argsOrState as ContinuousComplianceNotificationArgs | undefined;
            if ((!args || args.changeDetections === undefined) && !opts.urn) {
                throw new Error("Missing required property 'changeDetections'");
            }
            resourceInputs["alertsConsole"] = args ? args.alertsConsole : undefined;
            resourceInputs["changeDetections"] = args ? args.changeDetections : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["gcpSecurityCommandCenterIntegrations"] = args ? args.gcpSecurityCommandCenterIntegrations : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scheduledReports"] = args ? args.scheduledReports : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContinuousComplianceNotification.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContinuousComplianceNotification resources.
 */
export interface ContinuousComplianceNotificationState {
    alertsConsole?: pulumi.Input<boolean>;
    changeDetections?: pulumi.Input<pulumi.Input<inputs.ContinuousComplianceNotificationChangeDetection>[]>;
    description?: pulumi.Input<string>;
    gcpSecurityCommandCenterIntegrations?: pulumi.Input<pulumi.Input<inputs.ContinuousComplianceNotificationGcpSecurityCommandCenterIntegration>[]>;
    name?: pulumi.Input<string>;
    scheduledReports?: pulumi.Input<pulumi.Input<inputs.ContinuousComplianceNotificationScheduledReport>[]>;
}

/**
 * The set of arguments for constructing a ContinuousComplianceNotification resource.
 */
export interface ContinuousComplianceNotificationArgs {
    alertsConsole?: pulumi.Input<boolean>;
    changeDetections: pulumi.Input<pulumi.Input<inputs.ContinuousComplianceNotificationChangeDetection>[]>;
    description?: pulumi.Input<string>;
    gcpSecurityCommandCenterIntegrations?: pulumi.Input<pulumi.Input<inputs.ContinuousComplianceNotificationGcpSecurityCommandCenterIntegration>[]>;
    name?: pulumi.Input<string>;
    scheduledReports?: pulumi.Input<pulumi.Input<inputs.ContinuousComplianceNotificationScheduledReport>[]>;
}
