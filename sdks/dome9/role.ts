// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Role extends pulumi.CustomResource {
    /**
     * Get an existing Role resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoleState, opts?: pulumi.CustomResourceOptions): Role {
        return new Role(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dome9:index/role:Role';

    /**
     * Returns true if the given object is an instance of Role.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Role {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Role.__pulumiType;
    }

    public readonly accesses!: pulumi.Output<outputs.RoleAccess[] | undefined>;
    public readonly creates!: pulumi.Output<string[] | undefined>;
    public readonly crossAccountAccesses!: pulumi.Output<string[] | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly manages!: pulumi.Output<outputs.RoleManage[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly permitAlertActions!: pulumi.Output<boolean | undefined>;
    public readonly permitNotifications!: pulumi.Output<boolean | undefined>;
    public readonly permitOnBoarding!: pulumi.Output<boolean | undefined>;
    public readonly permitPolicies!: pulumi.Output<boolean | undefined>;
    public readonly permitRulesets!: pulumi.Output<boolean | undefined>;
    public readonly views!: pulumi.Output<outputs.RoleView[] | undefined>;

    /**
     * Create a Role resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoleArgs | RoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoleState | undefined;
            resourceInputs["accesses"] = state ? state.accesses : undefined;
            resourceInputs["creates"] = state ? state.creates : undefined;
            resourceInputs["crossAccountAccesses"] = state ? state.crossAccountAccesses : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["manages"] = state ? state.manages : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["permitAlertActions"] = state ? state.permitAlertActions : undefined;
            resourceInputs["permitNotifications"] = state ? state.permitNotifications : undefined;
            resourceInputs["permitOnBoarding"] = state ? state.permitOnBoarding : undefined;
            resourceInputs["permitPolicies"] = state ? state.permitPolicies : undefined;
            resourceInputs["permitRulesets"] = state ? state.permitRulesets : undefined;
            resourceInputs["views"] = state ? state.views : undefined;
        } else {
            const args = argsOrState as RoleArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            resourceInputs["accesses"] = args ? args.accesses : undefined;
            resourceInputs["creates"] = args ? args.creates : undefined;
            resourceInputs["crossAccountAccesses"] = args ? args.crossAccountAccesses : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["manages"] = args ? args.manages : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permitAlertActions"] = args ? args.permitAlertActions : undefined;
            resourceInputs["permitNotifications"] = args ? args.permitNotifications : undefined;
            resourceInputs["permitOnBoarding"] = args ? args.permitOnBoarding : undefined;
            resourceInputs["permitPolicies"] = args ? args.permitPolicies : undefined;
            resourceInputs["permitRulesets"] = args ? args.permitRulesets : undefined;
            resourceInputs["views"] = args ? args.views : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Role.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Role resources.
 */
export interface RoleState {
    accesses?: pulumi.Input<pulumi.Input<inputs.RoleAccess>[]>;
    creates?: pulumi.Input<pulumi.Input<string>[]>;
    crossAccountAccesses?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    manages?: pulumi.Input<pulumi.Input<inputs.RoleManage>[]>;
    name?: pulumi.Input<string>;
    permitAlertActions?: pulumi.Input<boolean>;
    permitNotifications?: pulumi.Input<boolean>;
    permitOnBoarding?: pulumi.Input<boolean>;
    permitPolicies?: pulumi.Input<boolean>;
    permitRulesets?: pulumi.Input<boolean>;
    views?: pulumi.Input<pulumi.Input<inputs.RoleView>[]>;
}

/**
 * The set of arguments for constructing a Role resource.
 */
export interface RoleArgs {
    accesses?: pulumi.Input<pulumi.Input<inputs.RoleAccess>[]>;
    creates?: pulumi.Input<pulumi.Input<string>[]>;
    crossAccountAccesses?: pulumi.Input<pulumi.Input<string>[]>;
    description: pulumi.Input<string>;
    manages?: pulumi.Input<pulumi.Input<inputs.RoleManage>[]>;
    name?: pulumi.Input<string>;
    permitAlertActions?: pulumi.Input<boolean>;
    permitNotifications?: pulumi.Input<boolean>;
    permitOnBoarding?: pulumi.Input<boolean>;
    permitPolicies?: pulumi.Input<boolean>;
    permitRulesets?: pulumi.Input<boolean>;
    views?: pulumi.Input<pulumi.Input<inputs.RoleView>[]>;
}
