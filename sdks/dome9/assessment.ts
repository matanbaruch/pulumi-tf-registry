// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Assessment extends pulumi.CustomResource {
    /**
     * Get an existing Assessment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AssessmentState, opts?: pulumi.CustomResourceOptions): Assessment {
        return new Assessment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dome9:index/assessment:Assessment';

    /**
     * Returns true if the given object is an instance of Assessment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Assessment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Assessment.__pulumiType;
    }

    public /*out*/ readonly additionalFields!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly assessmentId!: pulumi.Output<string>;
    public /*out*/ readonly assessmentPassed!: pulumi.Output<boolean>;
    public readonly bundleId!: pulumi.Output<number>;
    public readonly cloudAccountId!: pulumi.Output<string>;
    public readonly cloudAccountType!: pulumi.Output<string>;
    public /*out*/ readonly comparisonCustomId!: pulumi.Output<string>;
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    public /*out*/ readonly dataSyncStatuses!: pulumi.Output<outputs.AssessmentDataSyncStatus[]>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dome9CloudAccountId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly exclusions!: pulumi.Output<outputs.AssessmentExclusion[]>;
    public readonly externalCloudAccountId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly hasDataSyncStatusIssues!: pulumi.Output<boolean>;
    public /*out*/ readonly hasErrors!: pulumi.Output<boolean>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly remediations!: pulumi.Output<outputs.AssessmentRemediation[]>;
    public readonly requestId!: pulumi.Output<string>;
    public /*out*/ readonly requests!: pulumi.Output<outputs.AssessmentRequest[]>;
    public readonly shouldMinimizeResult!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly stats!: pulumi.Output<outputs.AssessmentStat[]>;
    public /*out*/ readonly tests!: pulumi.Output<outputs.AssessmentTest[]>;
    public /*out*/ readonly triggeredBy!: pulumi.Output<string>;

    /**
     * Create a Assessment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AssessmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AssessmentArgs | AssessmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AssessmentState | undefined;
            resourceInputs["additionalFields"] = state ? state.additionalFields : undefined;
            resourceInputs["assessmentId"] = state ? state.assessmentId : undefined;
            resourceInputs["assessmentPassed"] = state ? state.assessmentPassed : undefined;
            resourceInputs["bundleId"] = state ? state.bundleId : undefined;
            resourceInputs["cloudAccountId"] = state ? state.cloudAccountId : undefined;
            resourceInputs["cloudAccountType"] = state ? state.cloudAccountType : undefined;
            resourceInputs["comparisonCustomId"] = state ? state.comparisonCustomId : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["dataSyncStatuses"] = state ? state.dataSyncStatuses : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dome9CloudAccountId"] = state ? state.dome9CloudAccountId : undefined;
            resourceInputs["exclusions"] = state ? state.exclusions : undefined;
            resourceInputs["externalCloudAccountId"] = state ? state.externalCloudAccountId : undefined;
            resourceInputs["hasDataSyncStatusIssues"] = state ? state.hasDataSyncStatusIssues : undefined;
            resourceInputs["hasErrors"] = state ? state.hasErrors : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["remediations"] = state ? state.remediations : undefined;
            resourceInputs["requestId"] = state ? state.requestId : undefined;
            resourceInputs["requests"] = state ? state.requests : undefined;
            resourceInputs["shouldMinimizeResult"] = state ? state.shouldMinimizeResult : undefined;
            resourceInputs["stats"] = state ? state.stats : undefined;
            resourceInputs["tests"] = state ? state.tests : undefined;
            resourceInputs["triggeredBy"] = state ? state.triggeredBy : undefined;
        } else {
            const args = argsOrState as AssessmentArgs | undefined;
            if ((!args || args.bundleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bundleId'");
            }
            if ((!args || args.cloudAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudAccountId'");
            }
            if ((!args || args.cloudAccountType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudAccountType'");
            }
            if ((!args || args.requestId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'requestId'");
            }
            resourceInputs["bundleId"] = args ? args.bundleId : undefined;
            resourceInputs["cloudAccountId"] = args ? args.cloudAccountId : undefined;
            resourceInputs["cloudAccountType"] = args ? args.cloudAccountType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dome9CloudAccountId"] = args ? args.dome9CloudAccountId : undefined;
            resourceInputs["externalCloudAccountId"] = args ? args.externalCloudAccountId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["requestId"] = args ? args.requestId : undefined;
            resourceInputs["shouldMinimizeResult"] = args ? args.shouldMinimizeResult : undefined;
            resourceInputs["additionalFields"] = undefined /*out*/;
            resourceInputs["assessmentId"] = undefined /*out*/;
            resourceInputs["assessmentPassed"] = undefined /*out*/;
            resourceInputs["comparisonCustomId"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["dataSyncStatuses"] = undefined /*out*/;
            resourceInputs["exclusions"] = undefined /*out*/;
            resourceInputs["hasDataSyncStatusIssues"] = undefined /*out*/;
            resourceInputs["hasErrors"] = undefined /*out*/;
            resourceInputs["remediations"] = undefined /*out*/;
            resourceInputs["requests"] = undefined /*out*/;
            resourceInputs["stats"] = undefined /*out*/;
            resourceInputs["tests"] = undefined /*out*/;
            resourceInputs["triggeredBy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Assessment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Assessment resources.
 */
export interface AssessmentState {
    additionalFields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    assessmentId?: pulumi.Input<string>;
    assessmentPassed?: pulumi.Input<boolean>;
    bundleId?: pulumi.Input<number>;
    cloudAccountId?: pulumi.Input<string>;
    cloudAccountType?: pulumi.Input<string>;
    comparisonCustomId?: pulumi.Input<string>;
    createdTime?: pulumi.Input<string>;
    dataSyncStatuses?: pulumi.Input<pulumi.Input<inputs.AssessmentDataSyncStatus>[]>;
    description?: pulumi.Input<string>;
    dome9CloudAccountId?: pulumi.Input<string>;
    exclusions?: pulumi.Input<pulumi.Input<inputs.AssessmentExclusion>[]>;
    externalCloudAccountId?: pulumi.Input<string>;
    hasDataSyncStatusIssues?: pulumi.Input<boolean>;
    hasErrors?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    remediations?: pulumi.Input<pulumi.Input<inputs.AssessmentRemediation>[]>;
    requestId?: pulumi.Input<string>;
    requests?: pulumi.Input<pulumi.Input<inputs.AssessmentRequest>[]>;
    shouldMinimizeResult?: pulumi.Input<boolean>;
    stats?: pulumi.Input<pulumi.Input<inputs.AssessmentStat>[]>;
    tests?: pulumi.Input<pulumi.Input<inputs.AssessmentTest>[]>;
    triggeredBy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Assessment resource.
 */
export interface AssessmentArgs {
    bundleId: pulumi.Input<number>;
    cloudAccountId: pulumi.Input<string>;
    cloudAccountType: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dome9CloudAccountId?: pulumi.Input<string>;
    externalCloudAccountId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    requestId: pulumi.Input<string>;
    shouldMinimizeResult?: pulumi.Input<boolean>;
}
