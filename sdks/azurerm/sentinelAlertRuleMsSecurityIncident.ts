// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SentinelAlertRuleMsSecurityIncident extends pulumi.CustomResource {
    /**
     * Get an existing SentinelAlertRuleMsSecurityIncident resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SentinelAlertRuleMsSecurityIncidentState, opts?: pulumi.CustomResourceOptions): SentinelAlertRuleMsSecurityIncident {
        return new SentinelAlertRuleMsSecurityIncident(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/sentinelAlertRuleMsSecurityIncident:SentinelAlertRuleMsSecurityIncident';

    /**
     * Returns true if the given object is an instance of SentinelAlertRuleMsSecurityIncident.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SentinelAlertRuleMsSecurityIncident {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SentinelAlertRuleMsSecurityIncident.__pulumiType;
    }

    public readonly alertRuleTemplateGuid!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly displayNameExcludeFilters!: pulumi.Output<string[] | undefined>;
    public readonly displayNameFilters!: pulumi.Output<string[] | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly logAnalyticsWorkspaceId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly productFilter!: pulumi.Output<string>;
    public readonly severityFilters!: pulumi.Output<string[]>;
    public readonly timeouts!: pulumi.Output<outputs.SentinelAlertRuleMsSecurityIncidentTimeouts | undefined>;

    /**
     * Create a SentinelAlertRuleMsSecurityIncident resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SentinelAlertRuleMsSecurityIncidentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SentinelAlertRuleMsSecurityIncidentArgs | SentinelAlertRuleMsSecurityIncidentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SentinelAlertRuleMsSecurityIncidentState | undefined;
            resourceInputs["alertRuleTemplateGuid"] = state ? state.alertRuleTemplateGuid : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["displayNameExcludeFilters"] = state ? state.displayNameExcludeFilters : undefined;
            resourceInputs["displayNameFilters"] = state ? state.displayNameFilters : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["logAnalyticsWorkspaceId"] = state ? state.logAnalyticsWorkspaceId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["productFilter"] = state ? state.productFilter : undefined;
            resourceInputs["severityFilters"] = state ? state.severityFilters : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as SentinelAlertRuleMsSecurityIncidentArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.logAnalyticsWorkspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logAnalyticsWorkspaceId'");
            }
            if ((!args || args.productFilter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'productFilter'");
            }
            if ((!args || args.severityFilters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'severityFilters'");
            }
            resourceInputs["alertRuleTemplateGuid"] = args ? args.alertRuleTemplateGuid : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["displayNameExcludeFilters"] = args ? args.displayNameExcludeFilters : undefined;
            resourceInputs["displayNameFilters"] = args ? args.displayNameFilters : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["logAnalyticsWorkspaceId"] = args ? args.logAnalyticsWorkspaceId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["productFilter"] = args ? args.productFilter : undefined;
            resourceInputs["severityFilters"] = args ? args.severityFilters : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SentinelAlertRuleMsSecurityIncident.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SentinelAlertRuleMsSecurityIncident resources.
 */
export interface SentinelAlertRuleMsSecurityIncidentState {
    alertRuleTemplateGuid?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    displayNameExcludeFilters?: pulumi.Input<pulumi.Input<string>[]>;
    displayNameFilters?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    logAnalyticsWorkspaceId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    productFilter?: pulumi.Input<string>;
    severityFilters?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.SentinelAlertRuleMsSecurityIncidentTimeouts>;
}

/**
 * The set of arguments for constructing a SentinelAlertRuleMsSecurityIncident resource.
 */
export interface SentinelAlertRuleMsSecurityIncidentArgs {
    alertRuleTemplateGuid?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName: pulumi.Input<string>;
    displayNameExcludeFilters?: pulumi.Input<pulumi.Input<string>[]>;
    displayNameFilters?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    logAnalyticsWorkspaceId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    productFilter: pulumi.Input<string>;
    severityFilters: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.SentinelAlertRuleMsSecurityIncidentTimeouts>;
}
