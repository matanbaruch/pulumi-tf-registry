// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getStorageAccountBlobContainerSas(args: GetStorageAccountBlobContainerSasArgs, opts?: pulumi.InvokeOptions): Promise<GetStorageAccountBlobContainerSasResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azurerm:index/getStorageAccountBlobContainerSas:getStorageAccountBlobContainerSas", {
        "cacheControl": args.cacheControl,
        "connectionString": args.connectionString,
        "containerName": args.containerName,
        "contentDisposition": args.contentDisposition,
        "contentEncoding": args.contentEncoding,
        "contentLanguage": args.contentLanguage,
        "contentType": args.contentType,
        "expiry": args.expiry,
        "httpsOnly": args.httpsOnly,
        "id": args.id,
        "ipAddress": args.ipAddress,
        "permissions": args.permissions,
        "start": args.start,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getStorageAccountBlobContainerSas.
 */
export interface GetStorageAccountBlobContainerSasArgs {
    cacheControl?: string;
    connectionString: string;
    containerName: string;
    contentDisposition?: string;
    contentEncoding?: string;
    contentLanguage?: string;
    contentType?: string;
    expiry: string;
    httpsOnly?: boolean;
    id?: string;
    ipAddress?: string;
    permissions: inputs.GetStorageAccountBlobContainerSasPermissions;
    start: string;
    timeouts?: inputs.GetStorageAccountBlobContainerSasTimeouts;
}

/**
 * A collection of values returned by getStorageAccountBlobContainerSas.
 */
export interface GetStorageAccountBlobContainerSasResult {
    readonly cacheControl?: string;
    readonly connectionString: string;
    readonly containerName: string;
    readonly contentDisposition?: string;
    readonly contentEncoding?: string;
    readonly contentLanguage?: string;
    readonly contentType?: string;
    readonly expiry: string;
    readonly httpsOnly?: boolean;
    readonly id: string;
    readonly ipAddress?: string;
    readonly permissions: outputs.GetStorageAccountBlobContainerSasPermissions;
    readonly sas: string;
    readonly start: string;
    readonly timeouts?: outputs.GetStorageAccountBlobContainerSasTimeouts;
}
export function getStorageAccountBlobContainerSasOutput(args: GetStorageAccountBlobContainerSasOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetStorageAccountBlobContainerSasResult> {
    return pulumi.output(args).apply((a: any) => getStorageAccountBlobContainerSas(a, opts))
}

/**
 * A collection of arguments for invoking getStorageAccountBlobContainerSas.
 */
export interface GetStorageAccountBlobContainerSasOutputArgs {
    cacheControl?: pulumi.Input<string>;
    connectionString: pulumi.Input<string>;
    containerName: pulumi.Input<string>;
    contentDisposition?: pulumi.Input<string>;
    contentEncoding?: pulumi.Input<string>;
    contentLanguage?: pulumi.Input<string>;
    contentType?: pulumi.Input<string>;
    expiry: pulumi.Input<string>;
    httpsOnly?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    permissions: pulumi.Input<inputs.GetStorageAccountBlobContainerSasPermissionsArgs>;
    start: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetStorageAccountBlobContainerSasTimeoutsArgs>;
}
