// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LighthouseDefinition extends pulumi.CustomResource {
    /**
     * Get an existing LighthouseDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LighthouseDefinitionState, opts?: pulumi.CustomResourceOptions): LighthouseDefinition {
        return new LighthouseDefinition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/lighthouseDefinition:LighthouseDefinition';

    /**
     * Returns true if the given object is an instance of LighthouseDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LighthouseDefinition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LighthouseDefinition.__pulumiType;
    }

    public readonly authorizations!: pulumi.Output<outputs.LighthouseDefinitionAuthorization[]>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly eligibleAuthorizations!: pulumi.Output<outputs.LighthouseDefinitionEligibleAuthorization[] | undefined>;
    public readonly lighthouseDefinitionId!: pulumi.Output<string>;
    public readonly managingTenantId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly plan!: pulumi.Output<outputs.LighthouseDefinitionPlan | undefined>;
    public readonly scope!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.LighthouseDefinitionTimeouts | undefined>;

    /**
     * Create a LighthouseDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LighthouseDefinitionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LighthouseDefinitionArgs | LighthouseDefinitionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LighthouseDefinitionState | undefined;
            resourceInputs["authorizations"] = state ? state.authorizations : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["eligibleAuthorizations"] = state ? state.eligibleAuthorizations : undefined;
            resourceInputs["lighthouseDefinitionId"] = state ? state.lighthouseDefinitionId : undefined;
            resourceInputs["managingTenantId"] = state ? state.managingTenantId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as LighthouseDefinitionArgs | undefined;
            if ((!args || args.authorizations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizations'");
            }
            if ((!args || args.managingTenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managingTenantId'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            resourceInputs["authorizations"] = args ? args.authorizations : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["eligibleAuthorizations"] = args ? args.eligibleAuthorizations : undefined;
            resourceInputs["lighthouseDefinitionId"] = args ? args.lighthouseDefinitionId : undefined;
            resourceInputs["managingTenantId"] = args ? args.managingTenantId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LighthouseDefinition.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LighthouseDefinition resources.
 */
export interface LighthouseDefinitionState {
    authorizations?: pulumi.Input<pulumi.Input<inputs.LighthouseDefinitionAuthorization>[]>;
    description?: pulumi.Input<string>;
    eligibleAuthorizations?: pulumi.Input<pulumi.Input<inputs.LighthouseDefinitionEligibleAuthorization>[]>;
    lighthouseDefinitionId?: pulumi.Input<string>;
    managingTenantId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    plan?: pulumi.Input<inputs.LighthouseDefinitionPlan>;
    scope?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LighthouseDefinitionTimeouts>;
}

/**
 * The set of arguments for constructing a LighthouseDefinition resource.
 */
export interface LighthouseDefinitionArgs {
    authorizations: pulumi.Input<pulumi.Input<inputs.LighthouseDefinitionAuthorization>[]>;
    description?: pulumi.Input<string>;
    eligibleAuthorizations?: pulumi.Input<pulumi.Input<inputs.LighthouseDefinitionEligibleAuthorization>[]>;
    lighthouseDefinitionId?: pulumi.Input<string>;
    managingTenantId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    plan?: pulumi.Input<inputs.LighthouseDefinitionPlan>;
    scope: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LighthouseDefinitionTimeouts>;
}
