// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StorageShare extends pulumi.CustomResource {
    /**
     * Get an existing StorageShare resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageShareState, opts?: pulumi.CustomResourceOptions): StorageShare {
        return new StorageShare(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/storageShare:StorageShare';

    /**
     * Returns true if the given object is an instance of StorageShare.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageShare {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageShare.__pulumiType;
    }

    public readonly accessTier!: pulumi.Output<string>;
    public readonly acls!: pulumi.Output<outputs.StorageShareAcl[] | undefined>;
    public readonly enabledProtocol!: pulumi.Output<string | undefined>;
    public readonly metadata!: pulumi.Output<{[key: string]: string}>;
    public readonly name!: pulumi.Output<string>;
    public readonly quota!: pulumi.Output<number>;
    public /*out*/ readonly resourceManagerId!: pulumi.Output<string>;
    public readonly storageAccountName!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.StorageShareTimeouts | undefined>;
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a StorageShare resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageShareArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageShareArgs | StorageShareState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageShareState | undefined;
            resourceInputs["accessTier"] = state ? state.accessTier : undefined;
            resourceInputs["acls"] = state ? state.acls : undefined;
            resourceInputs["enabledProtocol"] = state ? state.enabledProtocol : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["quota"] = state ? state.quota : undefined;
            resourceInputs["resourceManagerId"] = state ? state.resourceManagerId : undefined;
            resourceInputs["storageAccountName"] = state ? state.storageAccountName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as StorageShareArgs | undefined;
            if ((!args || args.quota === undefined) && !opts.urn) {
                throw new Error("Missing required property 'quota'");
            }
            if ((!args || args.storageAccountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageAccountName'");
            }
            resourceInputs["accessTier"] = args ? args.accessTier : undefined;
            resourceInputs["acls"] = args ? args.acls : undefined;
            resourceInputs["enabledProtocol"] = args ? args.enabledProtocol : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["quota"] = args ? args.quota : undefined;
            resourceInputs["storageAccountName"] = args ? args.storageAccountName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["resourceManagerId"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageShare.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageShare resources.
 */
export interface StorageShareState {
    accessTier?: pulumi.Input<string>;
    acls?: pulumi.Input<pulumi.Input<inputs.StorageShareAcl>[]>;
    enabledProtocol?: pulumi.Input<string>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    quota?: pulumi.Input<number>;
    resourceManagerId?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StorageShareTimeouts>;
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StorageShare resource.
 */
export interface StorageShareArgs {
    accessTier?: pulumi.Input<string>;
    acls?: pulumi.Input<pulumi.Input<inputs.StorageShareAcl>[]>;
    enabledProtocol?: pulumi.Input<string>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    quota: pulumi.Input<number>;
    storageAccountName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StorageShareTimeouts>;
}
