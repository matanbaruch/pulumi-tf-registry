// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SpringCloudAppCosmosdbAssociation extends pulumi.CustomResource {
    /**
     * Get an existing SpringCloudAppCosmosdbAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SpringCloudAppCosmosdbAssociationState, opts?: pulumi.CustomResourceOptions): SpringCloudAppCosmosdbAssociation {
        return new SpringCloudAppCosmosdbAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/springCloudAppCosmosdbAssociation:SpringCloudAppCosmosdbAssociation';

    /**
     * Returns true if the given object is an instance of SpringCloudAppCosmosdbAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SpringCloudAppCosmosdbAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SpringCloudAppCosmosdbAssociation.__pulumiType;
    }

    public readonly apiType!: pulumi.Output<string>;
    public readonly cosmosdbAccessKey!: pulumi.Output<string>;
    public readonly cosmosdbAccountId!: pulumi.Output<string>;
    public readonly cosmosdbCassandraKeyspaceName!: pulumi.Output<string | undefined>;
    public readonly cosmosdbGremlinDatabaseName!: pulumi.Output<string | undefined>;
    public readonly cosmosdbGremlinGraphName!: pulumi.Output<string | undefined>;
    public readonly cosmosdbMongoDatabaseName!: pulumi.Output<string | undefined>;
    public readonly cosmosdbSqlDatabaseName!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly springCloudAppId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.SpringCloudAppCosmosdbAssociationTimeouts | undefined>;

    /**
     * Create a SpringCloudAppCosmosdbAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SpringCloudAppCosmosdbAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SpringCloudAppCosmosdbAssociationArgs | SpringCloudAppCosmosdbAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SpringCloudAppCosmosdbAssociationState | undefined;
            resourceInputs["apiType"] = state ? state.apiType : undefined;
            resourceInputs["cosmosdbAccessKey"] = state ? state.cosmosdbAccessKey : undefined;
            resourceInputs["cosmosdbAccountId"] = state ? state.cosmosdbAccountId : undefined;
            resourceInputs["cosmosdbCassandraKeyspaceName"] = state ? state.cosmosdbCassandraKeyspaceName : undefined;
            resourceInputs["cosmosdbGremlinDatabaseName"] = state ? state.cosmosdbGremlinDatabaseName : undefined;
            resourceInputs["cosmosdbGremlinGraphName"] = state ? state.cosmosdbGremlinGraphName : undefined;
            resourceInputs["cosmosdbMongoDatabaseName"] = state ? state.cosmosdbMongoDatabaseName : undefined;
            resourceInputs["cosmosdbSqlDatabaseName"] = state ? state.cosmosdbSqlDatabaseName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["springCloudAppId"] = state ? state.springCloudAppId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as SpringCloudAppCosmosdbAssociationArgs | undefined;
            if ((!args || args.apiType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiType'");
            }
            if ((!args || args.cosmosdbAccessKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cosmosdbAccessKey'");
            }
            if ((!args || args.cosmosdbAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cosmosdbAccountId'");
            }
            if ((!args || args.springCloudAppId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'springCloudAppId'");
            }
            resourceInputs["apiType"] = args ? args.apiType : undefined;
            resourceInputs["cosmosdbAccessKey"] = args ? args.cosmosdbAccessKey : undefined;
            resourceInputs["cosmosdbAccountId"] = args ? args.cosmosdbAccountId : undefined;
            resourceInputs["cosmosdbCassandraKeyspaceName"] = args ? args.cosmosdbCassandraKeyspaceName : undefined;
            resourceInputs["cosmosdbGremlinDatabaseName"] = args ? args.cosmosdbGremlinDatabaseName : undefined;
            resourceInputs["cosmosdbGremlinGraphName"] = args ? args.cosmosdbGremlinGraphName : undefined;
            resourceInputs["cosmosdbMongoDatabaseName"] = args ? args.cosmosdbMongoDatabaseName : undefined;
            resourceInputs["cosmosdbSqlDatabaseName"] = args ? args.cosmosdbSqlDatabaseName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["springCloudAppId"] = args ? args.springCloudAppId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SpringCloudAppCosmosdbAssociation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SpringCloudAppCosmosdbAssociation resources.
 */
export interface SpringCloudAppCosmosdbAssociationState {
    apiType?: pulumi.Input<string>;
    cosmosdbAccessKey?: pulumi.Input<string>;
    cosmosdbAccountId?: pulumi.Input<string>;
    cosmosdbCassandraKeyspaceName?: pulumi.Input<string>;
    cosmosdbGremlinDatabaseName?: pulumi.Input<string>;
    cosmosdbGremlinGraphName?: pulumi.Input<string>;
    cosmosdbMongoDatabaseName?: pulumi.Input<string>;
    cosmosdbSqlDatabaseName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    springCloudAppId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SpringCloudAppCosmosdbAssociationTimeouts>;
}

/**
 * The set of arguments for constructing a SpringCloudAppCosmosdbAssociation resource.
 */
export interface SpringCloudAppCosmosdbAssociationArgs {
    apiType: pulumi.Input<string>;
    cosmosdbAccessKey: pulumi.Input<string>;
    cosmosdbAccountId: pulumi.Input<string>;
    cosmosdbCassandraKeyspaceName?: pulumi.Input<string>;
    cosmosdbGremlinDatabaseName?: pulumi.Input<string>;
    cosmosdbGremlinGraphName?: pulumi.Input<string>;
    cosmosdbMongoDatabaseName?: pulumi.Input<string>;
    cosmosdbSqlDatabaseName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    springCloudAppId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SpringCloudAppCosmosdbAssociationTimeouts>;
}
