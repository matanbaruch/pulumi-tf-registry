// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ContainerApp extends pulumi.CustomResource {
    /**
     * Get an existing ContainerApp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerAppState, opts?: pulumi.CustomResourceOptions): ContainerApp {
        return new ContainerApp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/containerApp:ContainerApp';

    /**
     * Returns true if the given object is an instance of ContainerApp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerApp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerApp.__pulumiType;
    }

    /**
     * The ID of the Container App Environment to host this Container App.
     */
    public readonly containerAppEnvironmentId!: pulumi.Output<string>;
    /**
     * The ID of the Custom Domain Verification for this Container App.
     */
    public /*out*/ readonly customDomainVerificationId!: pulumi.Output<string>;
    public readonly dapr!: pulumi.Output<outputs.ContainerAppDapr | undefined>;
    public readonly identity!: pulumi.Output<outputs.ContainerAppIdentity | undefined>;
    public readonly ingress!: pulumi.Output<outputs.ContainerAppIngress | undefined>;
    /**
     * The FQDN of the Latest Revision of the Container App.
     */
    public /*out*/ readonly latestRevisionFqdn!: pulumi.Output<string>;
    /**
     * The name of the latest Container Revision.
     */
    public /*out*/ readonly latestRevisionName!: pulumi.Output<string>;
    public /*out*/ readonly location!: pulumi.Output<string>;
    /**
     * The name for this Container App.
     */
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly outboundIpAddresses!: pulumi.Output<string[]>;
    public readonly registries!: pulumi.Output<outputs.ContainerAppRegistry[] | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly revisionMode!: pulumi.Output<string>;
    public readonly secrets!: pulumi.Output<outputs.ContainerAppSecret[] | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly template!: pulumi.Output<outputs.ContainerAppTemplate>;
    public readonly timeouts!: pulumi.Output<outputs.ContainerAppTimeouts | undefined>;
    public readonly workloadProfileName!: pulumi.Output<string | undefined>;

    /**
     * Create a ContainerApp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerAppArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerAppArgs | ContainerAppState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerAppState | undefined;
            resourceInputs["containerAppEnvironmentId"] = state ? state.containerAppEnvironmentId : undefined;
            resourceInputs["customDomainVerificationId"] = state ? state.customDomainVerificationId : undefined;
            resourceInputs["dapr"] = state ? state.dapr : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["ingress"] = state ? state.ingress : undefined;
            resourceInputs["latestRevisionFqdn"] = state ? state.latestRevisionFqdn : undefined;
            resourceInputs["latestRevisionName"] = state ? state.latestRevisionName : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outboundIpAddresses"] = state ? state.outboundIpAddresses : undefined;
            resourceInputs["registries"] = state ? state.registries : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["revisionMode"] = state ? state.revisionMode : undefined;
            resourceInputs["secrets"] = state ? state.secrets : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["workloadProfileName"] = state ? state.workloadProfileName : undefined;
        } else {
            const args = argsOrState as ContainerAppArgs | undefined;
            if ((!args || args.containerAppEnvironmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerAppEnvironmentId'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.revisionMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'revisionMode'");
            }
            if ((!args || args.template === undefined) && !opts.urn) {
                throw new Error("Missing required property 'template'");
            }
            resourceInputs["containerAppEnvironmentId"] = args ? args.containerAppEnvironmentId : undefined;
            resourceInputs["dapr"] = args ? args.dapr : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["ingress"] = args ? args.ingress : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["registries"] = args ? args.registries : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["revisionMode"] = args ? args.revisionMode : undefined;
            resourceInputs["secrets"] = args ? args.secrets : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["workloadProfileName"] = args ? args.workloadProfileName : undefined;
            resourceInputs["customDomainVerificationId"] = undefined /*out*/;
            resourceInputs["latestRevisionFqdn"] = undefined /*out*/;
            resourceInputs["latestRevisionName"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["outboundIpAddresses"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["customDomainVerificationId"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ContainerApp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContainerApp resources.
 */
export interface ContainerAppState {
    /**
     * The ID of the Container App Environment to host this Container App.
     */
    containerAppEnvironmentId?: pulumi.Input<string>;
    /**
     * The ID of the Custom Domain Verification for this Container App.
     */
    customDomainVerificationId?: pulumi.Input<string>;
    dapr?: pulumi.Input<inputs.ContainerAppDapr>;
    identity?: pulumi.Input<inputs.ContainerAppIdentity>;
    ingress?: pulumi.Input<inputs.ContainerAppIngress>;
    /**
     * The FQDN of the Latest Revision of the Container App.
     */
    latestRevisionFqdn?: pulumi.Input<string>;
    /**
     * The name of the latest Container Revision.
     */
    latestRevisionName?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    /**
     * The name for this Container App.
     */
    name?: pulumi.Input<string>;
    outboundIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    registries?: pulumi.Input<pulumi.Input<inputs.ContainerAppRegistry>[]>;
    resourceGroupName?: pulumi.Input<string>;
    revisionMode?: pulumi.Input<string>;
    secrets?: pulumi.Input<pulumi.Input<inputs.ContainerAppSecret>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    template?: pulumi.Input<inputs.ContainerAppTemplate>;
    timeouts?: pulumi.Input<inputs.ContainerAppTimeouts>;
    workloadProfileName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContainerApp resource.
 */
export interface ContainerAppArgs {
    /**
     * The ID of the Container App Environment to host this Container App.
     */
    containerAppEnvironmentId: pulumi.Input<string>;
    dapr?: pulumi.Input<inputs.ContainerAppDapr>;
    identity?: pulumi.Input<inputs.ContainerAppIdentity>;
    ingress?: pulumi.Input<inputs.ContainerAppIngress>;
    /**
     * The name for this Container App.
     */
    name?: pulumi.Input<string>;
    registries?: pulumi.Input<pulumi.Input<inputs.ContainerAppRegistry>[]>;
    resourceGroupName: pulumi.Input<string>;
    revisionMode: pulumi.Input<string>;
    secrets?: pulumi.Input<pulumi.Input<inputs.ContainerAppSecret>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    template: pulumi.Input<inputs.ContainerAppTemplate>;
    timeouts?: pulumi.Input<inputs.ContainerAppTimeouts>;
    workloadProfileName?: pulumi.Input<string>;
}
