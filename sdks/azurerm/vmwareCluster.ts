// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VmwareCluster extends pulumi.CustomResource {
    /**
     * Get an existing VmwareCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmwareClusterState, opts?: pulumi.CustomResourceOptions): VmwareCluster {
        return new VmwareCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/vmwareCluster:VmwareCluster';

    /**
     * Returns true if the given object is an instance of VmwareCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmwareCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmwareCluster.__pulumiType;
    }

    public readonly clusterNodeCount!: pulumi.Output<number>;
    public /*out*/ readonly clusterNumber!: pulumi.Output<number>;
    public /*out*/ readonly hosts!: pulumi.Output<string[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly skuName!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.VmwareClusterTimeouts | undefined>;
    public readonly vmwareCloudId!: pulumi.Output<string>;

    /**
     * Create a VmwareCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmwareClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmwareClusterArgs | VmwareClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmwareClusterState | undefined;
            resourceInputs["clusterNodeCount"] = state ? state.clusterNodeCount : undefined;
            resourceInputs["clusterNumber"] = state ? state.clusterNumber : undefined;
            resourceInputs["hosts"] = state ? state.hosts : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["skuName"] = state ? state.skuName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vmwareCloudId"] = state ? state.vmwareCloudId : undefined;
        } else {
            const args = argsOrState as VmwareClusterArgs | undefined;
            if ((!args || args.clusterNodeCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterNodeCount'");
            }
            if ((!args || args.skuName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'skuName'");
            }
            if ((!args || args.vmwareCloudId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmwareCloudId'");
            }
            resourceInputs["clusterNodeCount"] = args ? args.clusterNodeCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["skuName"] = args ? args.skuName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vmwareCloudId"] = args ? args.vmwareCloudId : undefined;
            resourceInputs["clusterNumber"] = undefined /*out*/;
            resourceInputs["hosts"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VmwareCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VmwareCluster resources.
 */
export interface VmwareClusterState {
    clusterNodeCount?: pulumi.Input<number>;
    clusterNumber?: pulumi.Input<number>;
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    skuName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VmwareClusterTimeouts>;
    vmwareCloudId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VmwareCluster resource.
 */
export interface VmwareClusterArgs {
    clusterNodeCount: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    skuName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VmwareClusterTimeouts>;
    vmwareCloudId: pulumi.Input<string>;
}
