// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CosmosdbAccount extends pulumi.CustomResource {
    /**
     * Get an existing CosmosdbAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CosmosdbAccountState, opts?: pulumi.CustomResourceOptions): CosmosdbAccount {
        return new CosmosdbAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/cosmosdbAccount:CosmosdbAccount';

    /**
     * Returns true if the given object is an instance of CosmosdbAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CosmosdbAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CosmosdbAccount.__pulumiType;
    }

    public readonly accessKeyMetadataWritesEnabled!: pulumi.Output<boolean | undefined>;
    public readonly analyticalStorage!: pulumi.Output<outputs.CosmosdbAccountAnalyticalStorage | undefined>;
    public readonly analyticalStorageEnabled!: pulumi.Output<boolean | undefined>;
    public readonly automaticFailoverEnabled!: pulumi.Output<boolean | undefined>;
    public readonly backup!: pulumi.Output<outputs.CosmosdbAccountBackup | undefined>;
    public readonly burstCapacityEnabled!: pulumi.Output<boolean | undefined>;
    public readonly capabilities!: pulumi.Output<outputs.CosmosdbAccountCapability[] | undefined>;
    public readonly capacity!: pulumi.Output<outputs.CosmosdbAccountCapacity | undefined>;
    public readonly consistencyPolicy!: pulumi.Output<outputs.CosmosdbAccountConsistencyPolicy>;
    public readonly corsRule!: pulumi.Output<outputs.CosmosdbAccountCorsRule | undefined>;
    public readonly createMode!: pulumi.Output<string>;
    public readonly defaultIdentityType!: pulumi.Output<string | undefined>;
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    public readonly freeTierEnabled!: pulumi.Output<boolean | undefined>;
    public readonly geoLocations!: pulumi.Output<outputs.CosmosdbAccountGeoLocation[]>;
    public readonly identity!: pulumi.Output<outputs.CosmosdbAccountIdentity | undefined>;
    public readonly ipRangeFilters!: pulumi.Output<string[] | undefined>;
    public readonly isVirtualNetworkFilterEnabled!: pulumi.Output<boolean | undefined>;
    public readonly keyVaultKeyId!: pulumi.Output<string | undefined>;
    public readonly kind!: pulumi.Output<string | undefined>;
    public readonly localAuthenticationDisabled!: pulumi.Output<boolean | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly minimalTlsVersion!: pulumi.Output<string | undefined>;
    public readonly mongoServerVersion!: pulumi.Output<string>;
    public readonly multipleWriteLocationsEnabled!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkAclBypassForAzureServices!: pulumi.Output<boolean | undefined>;
    public readonly networkAclBypassIds!: pulumi.Output<string[] | undefined>;
    public readonly offerType!: pulumi.Output<string>;
    public readonly partitionMergeEnabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly primaryKey!: pulumi.Output<string>;
    public /*out*/ readonly primaryMongodbConnectionString!: pulumi.Output<string>;
    public /*out*/ readonly primaryReadonlyKey!: pulumi.Output<string>;
    public /*out*/ readonly primaryReadonlyMongodbConnectionString!: pulumi.Output<string>;
    public /*out*/ readonly primaryReadonlySqlConnectionString!: pulumi.Output<string>;
    public /*out*/ readonly primarySqlConnectionString!: pulumi.Output<string>;
    public readonly publicNetworkAccessEnabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly readEndpoints!: pulumi.Output<string[]>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly restore!: pulumi.Output<outputs.CosmosdbAccountRestore | undefined>;
    public /*out*/ readonly secondaryKey!: pulumi.Output<string>;
    public /*out*/ readonly secondaryMongodbConnectionString!: pulumi.Output<string>;
    public /*out*/ readonly secondaryReadonlyKey!: pulumi.Output<string>;
    public /*out*/ readonly secondaryReadonlyMongodbConnectionString!: pulumi.Output<string>;
    public /*out*/ readonly secondaryReadonlySqlConnectionString!: pulumi.Output<string>;
    public /*out*/ readonly secondarySqlConnectionString!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.CosmosdbAccountTimeouts | undefined>;
    public readonly virtualNetworkRules!: pulumi.Output<outputs.CosmosdbAccountVirtualNetworkRule[] | undefined>;
    public /*out*/ readonly writeEndpoints!: pulumi.Output<string[]>;

    /**
     * Create a CosmosdbAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CosmosdbAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CosmosdbAccountArgs | CosmosdbAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CosmosdbAccountState | undefined;
            resourceInputs["accessKeyMetadataWritesEnabled"] = state ? state.accessKeyMetadataWritesEnabled : undefined;
            resourceInputs["analyticalStorage"] = state ? state.analyticalStorage : undefined;
            resourceInputs["analyticalStorageEnabled"] = state ? state.analyticalStorageEnabled : undefined;
            resourceInputs["automaticFailoverEnabled"] = state ? state.automaticFailoverEnabled : undefined;
            resourceInputs["backup"] = state ? state.backup : undefined;
            resourceInputs["burstCapacityEnabled"] = state ? state.burstCapacityEnabled : undefined;
            resourceInputs["capabilities"] = state ? state.capabilities : undefined;
            resourceInputs["capacity"] = state ? state.capacity : undefined;
            resourceInputs["consistencyPolicy"] = state ? state.consistencyPolicy : undefined;
            resourceInputs["corsRule"] = state ? state.corsRule : undefined;
            resourceInputs["createMode"] = state ? state.createMode : undefined;
            resourceInputs["defaultIdentityType"] = state ? state.defaultIdentityType : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["freeTierEnabled"] = state ? state.freeTierEnabled : undefined;
            resourceInputs["geoLocations"] = state ? state.geoLocations : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["ipRangeFilters"] = state ? state.ipRangeFilters : undefined;
            resourceInputs["isVirtualNetworkFilterEnabled"] = state ? state.isVirtualNetworkFilterEnabled : undefined;
            resourceInputs["keyVaultKeyId"] = state ? state.keyVaultKeyId : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["localAuthenticationDisabled"] = state ? state.localAuthenticationDisabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["minimalTlsVersion"] = state ? state.minimalTlsVersion : undefined;
            resourceInputs["mongoServerVersion"] = state ? state.mongoServerVersion : undefined;
            resourceInputs["multipleWriteLocationsEnabled"] = state ? state.multipleWriteLocationsEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkAclBypassForAzureServices"] = state ? state.networkAclBypassForAzureServices : undefined;
            resourceInputs["networkAclBypassIds"] = state ? state.networkAclBypassIds : undefined;
            resourceInputs["offerType"] = state ? state.offerType : undefined;
            resourceInputs["partitionMergeEnabled"] = state ? state.partitionMergeEnabled : undefined;
            resourceInputs["primaryKey"] = state ? state.primaryKey : undefined;
            resourceInputs["primaryMongodbConnectionString"] = state ? state.primaryMongodbConnectionString : undefined;
            resourceInputs["primaryReadonlyKey"] = state ? state.primaryReadonlyKey : undefined;
            resourceInputs["primaryReadonlyMongodbConnectionString"] = state ? state.primaryReadonlyMongodbConnectionString : undefined;
            resourceInputs["primaryReadonlySqlConnectionString"] = state ? state.primaryReadonlySqlConnectionString : undefined;
            resourceInputs["primarySqlConnectionString"] = state ? state.primarySqlConnectionString : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            resourceInputs["readEndpoints"] = state ? state.readEndpoints : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["restore"] = state ? state.restore : undefined;
            resourceInputs["secondaryKey"] = state ? state.secondaryKey : undefined;
            resourceInputs["secondaryMongodbConnectionString"] = state ? state.secondaryMongodbConnectionString : undefined;
            resourceInputs["secondaryReadonlyKey"] = state ? state.secondaryReadonlyKey : undefined;
            resourceInputs["secondaryReadonlyMongodbConnectionString"] = state ? state.secondaryReadonlyMongodbConnectionString : undefined;
            resourceInputs["secondaryReadonlySqlConnectionString"] = state ? state.secondaryReadonlySqlConnectionString : undefined;
            resourceInputs["secondarySqlConnectionString"] = state ? state.secondarySqlConnectionString : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["virtualNetworkRules"] = state ? state.virtualNetworkRules : undefined;
            resourceInputs["writeEndpoints"] = state ? state.writeEndpoints : undefined;
        } else {
            const args = argsOrState as CosmosdbAccountArgs | undefined;
            if ((!args || args.consistencyPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consistencyPolicy'");
            }
            if ((!args || args.geoLocations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'geoLocations'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.offerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'offerType'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["accessKeyMetadataWritesEnabled"] = args ? args.accessKeyMetadataWritesEnabled : undefined;
            resourceInputs["analyticalStorage"] = args ? args.analyticalStorage : undefined;
            resourceInputs["analyticalStorageEnabled"] = args ? args.analyticalStorageEnabled : undefined;
            resourceInputs["automaticFailoverEnabled"] = args ? args.automaticFailoverEnabled : undefined;
            resourceInputs["backup"] = args ? args.backup : undefined;
            resourceInputs["burstCapacityEnabled"] = args ? args.burstCapacityEnabled : undefined;
            resourceInputs["capabilities"] = args ? args.capabilities : undefined;
            resourceInputs["capacity"] = args ? args.capacity : undefined;
            resourceInputs["consistencyPolicy"] = args ? args.consistencyPolicy : undefined;
            resourceInputs["corsRule"] = args ? args.corsRule : undefined;
            resourceInputs["createMode"] = args ? args.createMode : undefined;
            resourceInputs["defaultIdentityType"] = args ? args.defaultIdentityType : undefined;
            resourceInputs["freeTierEnabled"] = args ? args.freeTierEnabled : undefined;
            resourceInputs["geoLocations"] = args ? args.geoLocations : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["ipRangeFilters"] = args ? args.ipRangeFilters : undefined;
            resourceInputs["isVirtualNetworkFilterEnabled"] = args ? args.isVirtualNetworkFilterEnabled : undefined;
            resourceInputs["keyVaultKeyId"] = args ? args.keyVaultKeyId : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["localAuthenticationDisabled"] = args ? args.localAuthenticationDisabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["minimalTlsVersion"] = args ? args.minimalTlsVersion : undefined;
            resourceInputs["mongoServerVersion"] = args ? args.mongoServerVersion : undefined;
            resourceInputs["multipleWriteLocationsEnabled"] = args ? args.multipleWriteLocationsEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkAclBypassForAzureServices"] = args ? args.networkAclBypassForAzureServices : undefined;
            resourceInputs["networkAclBypassIds"] = args ? args.networkAclBypassIds : undefined;
            resourceInputs["offerType"] = args ? args.offerType : undefined;
            resourceInputs["partitionMergeEnabled"] = args ? args.partitionMergeEnabled : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["restore"] = args ? args.restore : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["virtualNetworkRules"] = args ? args.virtualNetworkRules : undefined;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["primaryKey"] = undefined /*out*/;
            resourceInputs["primaryMongodbConnectionString"] = undefined /*out*/;
            resourceInputs["primaryReadonlyKey"] = undefined /*out*/;
            resourceInputs["primaryReadonlyMongodbConnectionString"] = undefined /*out*/;
            resourceInputs["primaryReadonlySqlConnectionString"] = undefined /*out*/;
            resourceInputs["primarySqlConnectionString"] = undefined /*out*/;
            resourceInputs["readEndpoints"] = undefined /*out*/;
            resourceInputs["secondaryKey"] = undefined /*out*/;
            resourceInputs["secondaryMongodbConnectionString"] = undefined /*out*/;
            resourceInputs["secondaryReadonlyKey"] = undefined /*out*/;
            resourceInputs["secondaryReadonlyMongodbConnectionString"] = undefined /*out*/;
            resourceInputs["secondaryReadonlySqlConnectionString"] = undefined /*out*/;
            resourceInputs["secondarySqlConnectionString"] = undefined /*out*/;
            resourceInputs["writeEndpoints"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["primaryKey", "primaryMongodbConnectionString", "primaryReadonlyKey", "primaryReadonlyMongodbConnectionString", "primaryReadonlySqlConnectionString", "primarySqlConnectionString", "secondaryKey", "secondaryMongodbConnectionString", "secondaryReadonlyKey", "secondaryReadonlyMongodbConnectionString", "secondaryReadonlySqlConnectionString", "secondarySqlConnectionString"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CosmosdbAccount.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CosmosdbAccount resources.
 */
export interface CosmosdbAccountState {
    accessKeyMetadataWritesEnabled?: pulumi.Input<boolean>;
    analyticalStorage?: pulumi.Input<inputs.CosmosdbAccountAnalyticalStorage>;
    analyticalStorageEnabled?: pulumi.Input<boolean>;
    automaticFailoverEnabled?: pulumi.Input<boolean>;
    backup?: pulumi.Input<inputs.CosmosdbAccountBackup>;
    burstCapacityEnabled?: pulumi.Input<boolean>;
    capabilities?: pulumi.Input<pulumi.Input<inputs.CosmosdbAccountCapability>[]>;
    capacity?: pulumi.Input<inputs.CosmosdbAccountCapacity>;
    consistencyPolicy?: pulumi.Input<inputs.CosmosdbAccountConsistencyPolicy>;
    corsRule?: pulumi.Input<inputs.CosmosdbAccountCorsRule>;
    createMode?: pulumi.Input<string>;
    defaultIdentityType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    freeTierEnabled?: pulumi.Input<boolean>;
    geoLocations?: pulumi.Input<pulumi.Input<inputs.CosmosdbAccountGeoLocation>[]>;
    identity?: pulumi.Input<inputs.CosmosdbAccountIdentity>;
    ipRangeFilters?: pulumi.Input<pulumi.Input<string>[]>;
    isVirtualNetworkFilterEnabled?: pulumi.Input<boolean>;
    keyVaultKeyId?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    localAuthenticationDisabled?: pulumi.Input<boolean>;
    location?: pulumi.Input<string>;
    minimalTlsVersion?: pulumi.Input<string>;
    mongoServerVersion?: pulumi.Input<string>;
    multipleWriteLocationsEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    networkAclBypassForAzureServices?: pulumi.Input<boolean>;
    networkAclBypassIds?: pulumi.Input<pulumi.Input<string>[]>;
    offerType?: pulumi.Input<string>;
    partitionMergeEnabled?: pulumi.Input<boolean>;
    primaryKey?: pulumi.Input<string>;
    primaryMongodbConnectionString?: pulumi.Input<string>;
    primaryReadonlyKey?: pulumi.Input<string>;
    primaryReadonlyMongodbConnectionString?: pulumi.Input<string>;
    primaryReadonlySqlConnectionString?: pulumi.Input<string>;
    primarySqlConnectionString?: pulumi.Input<string>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    readEndpoints?: pulumi.Input<pulumi.Input<string>[]>;
    resourceGroupName?: pulumi.Input<string>;
    restore?: pulumi.Input<inputs.CosmosdbAccountRestore>;
    secondaryKey?: pulumi.Input<string>;
    secondaryMongodbConnectionString?: pulumi.Input<string>;
    secondaryReadonlyKey?: pulumi.Input<string>;
    secondaryReadonlyMongodbConnectionString?: pulumi.Input<string>;
    secondaryReadonlySqlConnectionString?: pulumi.Input<string>;
    secondarySqlConnectionString?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.CosmosdbAccountTimeouts>;
    virtualNetworkRules?: pulumi.Input<pulumi.Input<inputs.CosmosdbAccountVirtualNetworkRule>[]>;
    writeEndpoints?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a CosmosdbAccount resource.
 */
export interface CosmosdbAccountArgs {
    accessKeyMetadataWritesEnabled?: pulumi.Input<boolean>;
    analyticalStorage?: pulumi.Input<inputs.CosmosdbAccountAnalyticalStorage>;
    analyticalStorageEnabled?: pulumi.Input<boolean>;
    automaticFailoverEnabled?: pulumi.Input<boolean>;
    backup?: pulumi.Input<inputs.CosmosdbAccountBackup>;
    burstCapacityEnabled?: pulumi.Input<boolean>;
    capabilities?: pulumi.Input<pulumi.Input<inputs.CosmosdbAccountCapability>[]>;
    capacity?: pulumi.Input<inputs.CosmosdbAccountCapacity>;
    consistencyPolicy: pulumi.Input<inputs.CosmosdbAccountConsistencyPolicy>;
    corsRule?: pulumi.Input<inputs.CosmosdbAccountCorsRule>;
    createMode?: pulumi.Input<string>;
    defaultIdentityType?: pulumi.Input<string>;
    freeTierEnabled?: pulumi.Input<boolean>;
    geoLocations: pulumi.Input<pulumi.Input<inputs.CosmosdbAccountGeoLocation>[]>;
    identity?: pulumi.Input<inputs.CosmosdbAccountIdentity>;
    ipRangeFilters?: pulumi.Input<pulumi.Input<string>[]>;
    isVirtualNetworkFilterEnabled?: pulumi.Input<boolean>;
    keyVaultKeyId?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    localAuthenticationDisabled?: pulumi.Input<boolean>;
    location: pulumi.Input<string>;
    minimalTlsVersion?: pulumi.Input<string>;
    mongoServerVersion?: pulumi.Input<string>;
    multipleWriteLocationsEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    networkAclBypassForAzureServices?: pulumi.Input<boolean>;
    networkAclBypassIds?: pulumi.Input<pulumi.Input<string>[]>;
    offerType: pulumi.Input<string>;
    partitionMergeEnabled?: pulumi.Input<boolean>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    resourceGroupName: pulumi.Input<string>;
    restore?: pulumi.Input<inputs.CosmosdbAccountRestore>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.CosmosdbAccountTimeouts>;
    virtualNetworkRules?: pulumi.Input<pulumi.Input<inputs.CosmosdbAccountVirtualNetworkRule>[]>;
}
