// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApiManagementIdentityProviderTwitter extends pulumi.CustomResource {
    /**
     * Get an existing ApiManagementIdentityProviderTwitter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiManagementIdentityProviderTwitterState, opts?: pulumi.CustomResourceOptions): ApiManagementIdentityProviderTwitter {
        return new ApiManagementIdentityProviderTwitter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/apiManagementIdentityProviderTwitter:ApiManagementIdentityProviderTwitter';

    /**
     * Returns true if the given object is an instance of ApiManagementIdentityProviderTwitter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiManagementIdentityProviderTwitter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiManagementIdentityProviderTwitter.__pulumiType;
    }

    public readonly apiKey!: pulumi.Output<string>;
    public readonly apiManagementName!: pulumi.Output<string>;
    public readonly apiSecretKey!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ApiManagementIdentityProviderTwitterTimeouts | undefined>;

    /**
     * Create a ApiManagementIdentityProviderTwitter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiManagementIdentityProviderTwitterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiManagementIdentityProviderTwitterArgs | ApiManagementIdentityProviderTwitterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiManagementIdentityProviderTwitterState | undefined;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["apiManagementName"] = state ? state.apiManagementName : undefined;
            resourceInputs["apiSecretKey"] = state ? state.apiSecretKey : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ApiManagementIdentityProviderTwitterArgs | undefined;
            if ((!args || args.apiKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiKey'");
            }
            if ((!args || args.apiManagementName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiManagementName'");
            }
            if ((!args || args.apiSecretKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiSecretKey'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["apiKey"] = args?.apiKey ? pulumi.secret(args.apiKey) : undefined;
            resourceInputs["apiManagementName"] = args ? args.apiManagementName : undefined;
            resourceInputs["apiSecretKey"] = args?.apiSecretKey ? pulumi.secret(args.apiSecretKey) : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiKey", "apiSecretKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ApiManagementIdentityProviderTwitter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApiManagementIdentityProviderTwitter resources.
 */
export interface ApiManagementIdentityProviderTwitterState {
    apiKey?: pulumi.Input<string>;
    apiManagementName?: pulumi.Input<string>;
    apiSecretKey?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ApiManagementIdentityProviderTwitterTimeouts>;
}

/**
 * The set of arguments for constructing a ApiManagementIdentityProviderTwitter resource.
 */
export interface ApiManagementIdentityProviderTwitterArgs {
    apiKey: pulumi.Input<string>;
    apiManagementName: pulumi.Input<string>;
    apiSecretKey: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ApiManagementIdentityProviderTwitterTimeouts>;
}
