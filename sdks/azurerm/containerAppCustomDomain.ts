// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ContainerAppCustomDomain extends pulumi.CustomResource {
    /**
     * Get an existing ContainerAppCustomDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerAppCustomDomainState, opts?: pulumi.CustomResourceOptions): ContainerAppCustomDomain {
        return new ContainerAppCustomDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/containerAppCustomDomain:ContainerAppCustomDomain';

    /**
     * Returns true if the given object is an instance of ContainerAppCustomDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerAppCustomDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerAppCustomDomain.__pulumiType;
    }

    /**
     * The Binding type. Possible values include `Disabled` and `SniEnabled`.
     */
    public readonly certificateBindingType!: pulumi.Output<string | undefined>;
    public readonly containerAppEnvironmentCertificateId!: pulumi.Output<string | undefined>;
    public readonly containerAppId!: pulumi.Output<string>;
    /**
     * The hostname of the Certificate. Must be the CN or a named SAN in the certificate.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ContainerAppCustomDomainTimeouts | undefined>;

    /**
     * Create a ContainerAppCustomDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerAppCustomDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerAppCustomDomainArgs | ContainerAppCustomDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerAppCustomDomainState | undefined;
            resourceInputs["certificateBindingType"] = state ? state.certificateBindingType : undefined;
            resourceInputs["containerAppEnvironmentCertificateId"] = state ? state.containerAppEnvironmentCertificateId : undefined;
            resourceInputs["containerAppId"] = state ? state.containerAppId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ContainerAppCustomDomainArgs | undefined;
            if ((!args || args.containerAppId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerAppId'");
            }
            resourceInputs["certificateBindingType"] = args ? args.certificateBindingType : undefined;
            resourceInputs["containerAppEnvironmentCertificateId"] = args ? args.containerAppEnvironmentCertificateId : undefined;
            resourceInputs["containerAppId"] = args ? args.containerAppId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerAppCustomDomain.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContainerAppCustomDomain resources.
 */
export interface ContainerAppCustomDomainState {
    /**
     * The Binding type. Possible values include `Disabled` and `SniEnabled`.
     */
    certificateBindingType?: pulumi.Input<string>;
    containerAppEnvironmentCertificateId?: pulumi.Input<string>;
    containerAppId?: pulumi.Input<string>;
    /**
     * The hostname of the Certificate. Must be the CN or a named SAN in the certificate.
     */
    name?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ContainerAppCustomDomainTimeouts>;
}

/**
 * The set of arguments for constructing a ContainerAppCustomDomain resource.
 */
export interface ContainerAppCustomDomainArgs {
    /**
     * The Binding type. Possible values include `Disabled` and `SniEnabled`.
     */
    certificateBindingType?: pulumi.Input<string>;
    containerAppEnvironmentCertificateId?: pulumi.Input<string>;
    containerAppId: pulumi.Input<string>;
    /**
     * The hostname of the Certificate. Must be the CN or a named SAN in the certificate.
     */
    name?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ContainerAppCustomDomainTimeouts>;
}
