// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AutomanageConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing AutomanageConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutomanageConfigurationState, opts?: pulumi.CustomResourceOptions): AutomanageConfiguration {
        return new AutomanageConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/automanageConfiguration:AutomanageConfiguration';

    /**
     * Returns true if the given object is an instance of AutomanageConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AutomanageConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutomanageConfiguration.__pulumiType;
    }

    public readonly antimalware!: pulumi.Output<outputs.AutomanageConfigurationAntimalware | undefined>;
    public readonly automationAccountEnabled!: pulumi.Output<boolean | undefined>;
    public readonly azureSecurityBaseline!: pulumi.Output<outputs.AutomanageConfigurationAzureSecurityBaseline | undefined>;
    public readonly backup!: pulumi.Output<outputs.AutomanageConfigurationBackup | undefined>;
    public readonly bootDiagnosticsEnabled!: pulumi.Output<boolean | undefined>;
    public readonly defenderForCloudEnabled!: pulumi.Output<boolean | undefined>;
    public readonly guestConfigurationEnabled!: pulumi.Output<boolean | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly logAnalyticsEnabled!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly statusChangeAlertEnabled!: pulumi.Output<boolean | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.AutomanageConfigurationTimeouts | undefined>;

    /**
     * Create a AutomanageConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutomanageConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutomanageConfigurationArgs | AutomanageConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutomanageConfigurationState | undefined;
            resourceInputs["antimalware"] = state ? state.antimalware : undefined;
            resourceInputs["automationAccountEnabled"] = state ? state.automationAccountEnabled : undefined;
            resourceInputs["azureSecurityBaseline"] = state ? state.azureSecurityBaseline : undefined;
            resourceInputs["backup"] = state ? state.backup : undefined;
            resourceInputs["bootDiagnosticsEnabled"] = state ? state.bootDiagnosticsEnabled : undefined;
            resourceInputs["defenderForCloudEnabled"] = state ? state.defenderForCloudEnabled : undefined;
            resourceInputs["guestConfigurationEnabled"] = state ? state.guestConfigurationEnabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["logAnalyticsEnabled"] = state ? state.logAnalyticsEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["statusChangeAlertEnabled"] = state ? state.statusChangeAlertEnabled : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as AutomanageConfigurationArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["antimalware"] = args ? args.antimalware : undefined;
            resourceInputs["automationAccountEnabled"] = args ? args.automationAccountEnabled : undefined;
            resourceInputs["azureSecurityBaseline"] = args ? args.azureSecurityBaseline : undefined;
            resourceInputs["backup"] = args ? args.backup : undefined;
            resourceInputs["bootDiagnosticsEnabled"] = args ? args.bootDiagnosticsEnabled : undefined;
            resourceInputs["defenderForCloudEnabled"] = args ? args.defenderForCloudEnabled : undefined;
            resourceInputs["guestConfigurationEnabled"] = args ? args.guestConfigurationEnabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["logAnalyticsEnabled"] = args ? args.logAnalyticsEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["statusChangeAlertEnabled"] = args ? args.statusChangeAlertEnabled : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AutomanageConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AutomanageConfiguration resources.
 */
export interface AutomanageConfigurationState {
    antimalware?: pulumi.Input<inputs.AutomanageConfigurationAntimalware>;
    automationAccountEnabled?: pulumi.Input<boolean>;
    azureSecurityBaseline?: pulumi.Input<inputs.AutomanageConfigurationAzureSecurityBaseline>;
    backup?: pulumi.Input<inputs.AutomanageConfigurationBackup>;
    bootDiagnosticsEnabled?: pulumi.Input<boolean>;
    defenderForCloudEnabled?: pulumi.Input<boolean>;
    guestConfigurationEnabled?: pulumi.Input<boolean>;
    location?: pulumi.Input<string>;
    logAnalyticsEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    statusChangeAlertEnabled?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.AutomanageConfigurationTimeouts>;
}

/**
 * The set of arguments for constructing a AutomanageConfiguration resource.
 */
export interface AutomanageConfigurationArgs {
    antimalware?: pulumi.Input<inputs.AutomanageConfigurationAntimalware>;
    automationAccountEnabled?: pulumi.Input<boolean>;
    azureSecurityBaseline?: pulumi.Input<inputs.AutomanageConfigurationAzureSecurityBaseline>;
    backup?: pulumi.Input<inputs.AutomanageConfigurationBackup>;
    bootDiagnosticsEnabled?: pulumi.Input<boolean>;
    defenderForCloudEnabled?: pulumi.Input<boolean>;
    guestConfigurationEnabled?: pulumi.Input<boolean>;
    location: pulumi.Input<string>;
    logAnalyticsEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    statusChangeAlertEnabled?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.AutomanageConfigurationTimeouts>;
}
