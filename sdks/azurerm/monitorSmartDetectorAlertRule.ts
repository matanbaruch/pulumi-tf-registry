// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MonitorSmartDetectorAlertRule extends pulumi.CustomResource {
    /**
     * Get an existing MonitorSmartDetectorAlertRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorSmartDetectorAlertRuleState, opts?: pulumi.CustomResourceOptions): MonitorSmartDetectorAlertRule {
        return new MonitorSmartDetectorAlertRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/monitorSmartDetectorAlertRule:MonitorSmartDetectorAlertRule';

    /**
     * Returns true if the given object is an instance of MonitorSmartDetectorAlertRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MonitorSmartDetectorAlertRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonitorSmartDetectorAlertRule.__pulumiType;
    }

    public readonly actionGroup!: pulumi.Output<outputs.MonitorSmartDetectorAlertRuleActionGroup>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly detectorType!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly frequency!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly scopeResourceIds!: pulumi.Output<string[]>;
    public readonly severity!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly throttlingDuration!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.MonitorSmartDetectorAlertRuleTimeouts | undefined>;

    /**
     * Create a MonitorSmartDetectorAlertRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorSmartDetectorAlertRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorSmartDetectorAlertRuleArgs | MonitorSmartDetectorAlertRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitorSmartDetectorAlertRuleState | undefined;
            resourceInputs["actionGroup"] = state ? state.actionGroup : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["detectorType"] = state ? state.detectorType : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["frequency"] = state ? state.frequency : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["scopeResourceIds"] = state ? state.scopeResourceIds : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["throttlingDuration"] = state ? state.throttlingDuration : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as MonitorSmartDetectorAlertRuleArgs | undefined;
            if ((!args || args.actionGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'actionGroup'");
            }
            if ((!args || args.detectorType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'detectorType'");
            }
            if ((!args || args.frequency === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frequency'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.scopeResourceIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopeResourceIds'");
            }
            if ((!args || args.severity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'severity'");
            }
            resourceInputs["actionGroup"] = args ? args.actionGroup : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["detectorType"] = args ? args.detectorType : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["frequency"] = args ? args.frequency : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["scopeResourceIds"] = args ? args.scopeResourceIds : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["throttlingDuration"] = args ? args.throttlingDuration : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MonitorSmartDetectorAlertRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MonitorSmartDetectorAlertRule resources.
 */
export interface MonitorSmartDetectorAlertRuleState {
    actionGroup?: pulumi.Input<inputs.MonitorSmartDetectorAlertRuleActionGroup>;
    description?: pulumi.Input<string>;
    detectorType?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    frequency?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    scopeResourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    severity?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    throttlingDuration?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MonitorSmartDetectorAlertRuleTimeouts>;
}

/**
 * The set of arguments for constructing a MonitorSmartDetectorAlertRule resource.
 */
export interface MonitorSmartDetectorAlertRuleArgs {
    actionGroup: pulumi.Input<inputs.MonitorSmartDetectorAlertRuleActionGroup>;
    description?: pulumi.Input<string>;
    detectorType: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    frequency: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    scopeResourceIds: pulumi.Input<pulumi.Input<string>[]>;
    severity: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    throttlingDuration?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MonitorSmartDetectorAlertRuleTimeouts>;
}
