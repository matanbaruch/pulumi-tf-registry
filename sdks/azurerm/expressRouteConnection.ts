// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ExpressRouteConnection extends pulumi.CustomResource {
    /**
     * Get an existing ExpressRouteConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExpressRouteConnectionState, opts?: pulumi.CustomResourceOptions): ExpressRouteConnection {
        return new ExpressRouteConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/expressRouteConnection:ExpressRouteConnection';

    /**
     * Returns true if the given object is an instance of ExpressRouteConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExpressRouteConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExpressRouteConnection.__pulumiType;
    }

    public readonly authorizationKey!: pulumi.Output<string | undefined>;
    public readonly enableInternetSecurity!: pulumi.Output<boolean | undefined>;
    public readonly expressRouteCircuitPeeringId!: pulumi.Output<string>;
    public readonly expressRouteGatewayBypassEnabled!: pulumi.Output<boolean | undefined>;
    public readonly expressRouteGatewayId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly privateLinkFastPathEnabled!: pulumi.Output<boolean | undefined>;
    public readonly routing!: pulumi.Output<outputs.ExpressRouteConnectionRouting | undefined>;
    public readonly routingWeight!: pulumi.Output<number | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ExpressRouteConnectionTimeouts | undefined>;

    /**
     * Create a ExpressRouteConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExpressRouteConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExpressRouteConnectionArgs | ExpressRouteConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExpressRouteConnectionState | undefined;
            resourceInputs["authorizationKey"] = state ? state.authorizationKey : undefined;
            resourceInputs["enableInternetSecurity"] = state ? state.enableInternetSecurity : undefined;
            resourceInputs["expressRouteCircuitPeeringId"] = state ? state.expressRouteCircuitPeeringId : undefined;
            resourceInputs["expressRouteGatewayBypassEnabled"] = state ? state.expressRouteGatewayBypassEnabled : undefined;
            resourceInputs["expressRouteGatewayId"] = state ? state.expressRouteGatewayId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateLinkFastPathEnabled"] = state ? state.privateLinkFastPathEnabled : undefined;
            resourceInputs["routing"] = state ? state.routing : undefined;
            resourceInputs["routingWeight"] = state ? state.routingWeight : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ExpressRouteConnectionArgs | undefined;
            if ((!args || args.expressRouteCircuitPeeringId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'expressRouteCircuitPeeringId'");
            }
            if ((!args || args.expressRouteGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'expressRouteGatewayId'");
            }
            resourceInputs["authorizationKey"] = args ? args.authorizationKey : undefined;
            resourceInputs["enableInternetSecurity"] = args ? args.enableInternetSecurity : undefined;
            resourceInputs["expressRouteCircuitPeeringId"] = args ? args.expressRouteCircuitPeeringId : undefined;
            resourceInputs["expressRouteGatewayBypassEnabled"] = args ? args.expressRouteGatewayBypassEnabled : undefined;
            resourceInputs["expressRouteGatewayId"] = args ? args.expressRouteGatewayId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privateLinkFastPathEnabled"] = args ? args.privateLinkFastPathEnabled : undefined;
            resourceInputs["routing"] = args ? args.routing : undefined;
            resourceInputs["routingWeight"] = args ? args.routingWeight : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExpressRouteConnection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ExpressRouteConnection resources.
 */
export interface ExpressRouteConnectionState {
    authorizationKey?: pulumi.Input<string>;
    enableInternetSecurity?: pulumi.Input<boolean>;
    expressRouteCircuitPeeringId?: pulumi.Input<string>;
    expressRouteGatewayBypassEnabled?: pulumi.Input<boolean>;
    expressRouteGatewayId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    privateLinkFastPathEnabled?: pulumi.Input<boolean>;
    routing?: pulumi.Input<inputs.ExpressRouteConnectionRouting>;
    routingWeight?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.ExpressRouteConnectionTimeouts>;
}

/**
 * The set of arguments for constructing a ExpressRouteConnection resource.
 */
export interface ExpressRouteConnectionArgs {
    authorizationKey?: pulumi.Input<string>;
    enableInternetSecurity?: pulumi.Input<boolean>;
    expressRouteCircuitPeeringId: pulumi.Input<string>;
    expressRouteGatewayBypassEnabled?: pulumi.Input<boolean>;
    expressRouteGatewayId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    privateLinkFastPathEnabled?: pulumi.Input<boolean>;
    routing?: pulumi.Input<inputs.ExpressRouteConnectionRouting>;
    routingWeight?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.ExpressRouteConnectionTimeouts>;
}
