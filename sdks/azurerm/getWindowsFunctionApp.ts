// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getWindowsFunctionApp(args: GetWindowsFunctionAppArgs, opts?: pulumi.InvokeOptions): Promise<GetWindowsFunctionAppResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azurerm:index/getWindowsFunctionApp:getWindowsFunctionApp", {
        "id": args.id,
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getWindowsFunctionApp.
 */
export interface GetWindowsFunctionAppArgs {
    id?: string;
    name: string;
    resourceGroupName: string;
    timeouts?: inputs.GetWindowsFunctionAppTimeouts;
}

/**
 * A collection of values returned by getWindowsFunctionApp.
 */
export interface GetWindowsFunctionAppResult {
    readonly appSettings: {[key: string]: string};
    readonly authSettings: outputs.GetWindowsFunctionAppAuthSetting[];
    readonly authSettingsV2s: outputs.GetWindowsFunctionAppAuthSettingsV2[];
    readonly backups: outputs.GetWindowsFunctionAppBackup[];
    readonly builtinLoggingEnabled: boolean;
    readonly clientCertificateEnabled: boolean;
    readonly clientCertificateExclusionPaths: string;
    readonly clientCertificateMode: string;
    readonly connectionStrings: outputs.GetWindowsFunctionAppConnectionString[];
    readonly contentShareForceDisabled: boolean;
    readonly customDomainVerificationId: string;
    readonly dailyMemoryTimeQuota: number;
    readonly defaultHostname: string;
    readonly enabled: boolean;
    readonly ftpPublishBasicAuthenticationEnabled: boolean;
    readonly functionsExtensionVersion: string;
    readonly hostingEnvironmentId: string;
    readonly httpsOnly: boolean;
    readonly id: string;
    readonly identities: outputs.GetWindowsFunctionAppIdentity[];
    readonly kind: string;
    readonly location: string;
    readonly name: string;
    readonly outboundIpAddressLists: string[];
    readonly outboundIpAddresses: string;
    readonly possibleOutboundIpAddressLists: string[];
    readonly possibleOutboundIpAddresses: string;
    readonly publicNetworkAccessEnabled: boolean;
    readonly resourceGroupName: string;
    readonly servicePlanId: string;
    readonly siteConfigs: outputs.GetWindowsFunctionAppSiteConfig[];
    readonly siteCredentials: outputs.GetWindowsFunctionAppSiteCredential[];
    readonly stickySettings: outputs.GetWindowsFunctionAppStickySetting[];
    readonly storageAccountAccessKey: string;
    readonly storageAccountName: string;
    readonly storageKeyVaultSecretId: string;
    readonly storageUsesManagedIdentity: boolean;
    readonly tags: {[key: string]: string};
    readonly timeouts?: outputs.GetWindowsFunctionAppTimeouts;
    readonly virtualNetworkSubnetId: string;
    readonly webdeployPublishBasicAuthenticationEnabled: boolean;
}
export function getWindowsFunctionAppOutput(args: GetWindowsFunctionAppOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWindowsFunctionAppResult> {
    return pulumi.output(args).apply((a: any) => getWindowsFunctionApp(a, opts))
}

/**
 * A collection of arguments for invoking getWindowsFunctionApp.
 */
export interface GetWindowsFunctionAppOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetWindowsFunctionAppTimeoutsArgs>;
}
