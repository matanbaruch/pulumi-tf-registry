// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SynapseSqlPool extends pulumi.CustomResource {
    /**
     * Get an existing SynapseSqlPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SynapseSqlPoolState, opts?: pulumi.CustomResourceOptions): SynapseSqlPool {
        return new SynapseSqlPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/synapseSqlPool:SynapseSqlPool';

    /**
     * Returns true if the given object is an instance of SynapseSqlPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SynapseSqlPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SynapseSqlPool.__pulumiType;
    }

    public readonly collation!: pulumi.Output<string>;
    public readonly createMode!: pulumi.Output<string | undefined>;
    public readonly dataEncrypted!: pulumi.Output<boolean | undefined>;
    public readonly geoBackupPolicyEnabled!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly recoveryDatabaseId!: pulumi.Output<string | undefined>;
    public readonly restore!: pulumi.Output<outputs.SynapseSqlPoolRestore | undefined>;
    public readonly skuName!: pulumi.Output<string>;
    public readonly storageAccountType!: pulumi.Output<string>;
    public readonly synapseWorkspaceId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.SynapseSqlPoolTimeouts | undefined>;

    /**
     * Create a SynapseSqlPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SynapseSqlPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SynapseSqlPoolArgs | SynapseSqlPoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SynapseSqlPoolState | undefined;
            resourceInputs["collation"] = state ? state.collation : undefined;
            resourceInputs["createMode"] = state ? state.createMode : undefined;
            resourceInputs["dataEncrypted"] = state ? state.dataEncrypted : undefined;
            resourceInputs["geoBackupPolicyEnabled"] = state ? state.geoBackupPolicyEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["recoveryDatabaseId"] = state ? state.recoveryDatabaseId : undefined;
            resourceInputs["restore"] = state ? state.restore : undefined;
            resourceInputs["skuName"] = state ? state.skuName : undefined;
            resourceInputs["storageAccountType"] = state ? state.storageAccountType : undefined;
            resourceInputs["synapseWorkspaceId"] = state ? state.synapseWorkspaceId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as SynapseSqlPoolArgs | undefined;
            if ((!args || args.skuName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'skuName'");
            }
            if ((!args || args.storageAccountType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageAccountType'");
            }
            if ((!args || args.synapseWorkspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'synapseWorkspaceId'");
            }
            resourceInputs["collation"] = args ? args.collation : undefined;
            resourceInputs["createMode"] = args ? args.createMode : undefined;
            resourceInputs["dataEncrypted"] = args ? args.dataEncrypted : undefined;
            resourceInputs["geoBackupPolicyEnabled"] = args ? args.geoBackupPolicyEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["recoveryDatabaseId"] = args ? args.recoveryDatabaseId : undefined;
            resourceInputs["restore"] = args ? args.restore : undefined;
            resourceInputs["skuName"] = args ? args.skuName : undefined;
            resourceInputs["storageAccountType"] = args ? args.storageAccountType : undefined;
            resourceInputs["synapseWorkspaceId"] = args ? args.synapseWorkspaceId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SynapseSqlPool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SynapseSqlPool resources.
 */
export interface SynapseSqlPoolState {
    collation?: pulumi.Input<string>;
    createMode?: pulumi.Input<string>;
    dataEncrypted?: pulumi.Input<boolean>;
    geoBackupPolicyEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    recoveryDatabaseId?: pulumi.Input<string>;
    restore?: pulumi.Input<inputs.SynapseSqlPoolRestore>;
    skuName?: pulumi.Input<string>;
    storageAccountType?: pulumi.Input<string>;
    synapseWorkspaceId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.SynapseSqlPoolTimeouts>;
}

/**
 * The set of arguments for constructing a SynapseSqlPool resource.
 */
export interface SynapseSqlPoolArgs {
    collation?: pulumi.Input<string>;
    createMode?: pulumi.Input<string>;
    dataEncrypted?: pulumi.Input<boolean>;
    geoBackupPolicyEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    recoveryDatabaseId?: pulumi.Input<string>;
    restore?: pulumi.Input<inputs.SynapseSqlPoolRestore>;
    skuName: pulumi.Input<string>;
    storageAccountType: pulumi.Input<string>;
    synapseWorkspaceId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.SynapseSqlPoolTimeouts>;
}
