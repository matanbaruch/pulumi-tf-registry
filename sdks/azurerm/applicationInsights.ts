// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApplicationInsights extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationInsights resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationInsightsState, opts?: pulumi.CustomResourceOptions): ApplicationInsights {
        return new ApplicationInsights(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/applicationInsights:ApplicationInsights';

    /**
     * Returns true if the given object is an instance of ApplicationInsights.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationInsights {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationInsights.__pulumiType;
    }

    public /*out*/ readonly appId!: pulumi.Output<string>;
    public readonly applicationType!: pulumi.Output<string>;
    public /*out*/ readonly connectionString!: pulumi.Output<string>;
    public readonly dailyDataCapInGb!: pulumi.Output<number | undefined>;
    public readonly dailyDataCapNotificationsDisabled!: pulumi.Output<boolean | undefined>;
    public readonly disableIpMasking!: pulumi.Output<boolean | undefined>;
    public readonly forceCustomerStorageForProfiler!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly instrumentationKey!: pulumi.Output<string>;
    public readonly internetIngestionEnabled!: pulumi.Output<boolean | undefined>;
    public readonly internetQueryEnabled!: pulumi.Output<boolean | undefined>;
    public readonly localAuthenticationDisabled!: pulumi.Output<boolean | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly retentionInDays!: pulumi.Output<number | undefined>;
    public readonly samplingPercentage!: pulumi.Output<number | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ApplicationInsightsTimeouts | undefined>;
    public readonly workspaceId!: pulumi.Output<string | undefined>;

    /**
     * Create a ApplicationInsights resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationInsightsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationInsightsArgs | ApplicationInsightsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationInsightsState | undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["applicationType"] = state ? state.applicationType : undefined;
            resourceInputs["connectionString"] = state ? state.connectionString : undefined;
            resourceInputs["dailyDataCapInGb"] = state ? state.dailyDataCapInGb : undefined;
            resourceInputs["dailyDataCapNotificationsDisabled"] = state ? state.dailyDataCapNotificationsDisabled : undefined;
            resourceInputs["disableIpMasking"] = state ? state.disableIpMasking : undefined;
            resourceInputs["forceCustomerStorageForProfiler"] = state ? state.forceCustomerStorageForProfiler : undefined;
            resourceInputs["instrumentationKey"] = state ? state.instrumentationKey : undefined;
            resourceInputs["internetIngestionEnabled"] = state ? state.internetIngestionEnabled : undefined;
            resourceInputs["internetQueryEnabled"] = state ? state.internetQueryEnabled : undefined;
            resourceInputs["localAuthenticationDisabled"] = state ? state.localAuthenticationDisabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["retentionInDays"] = state ? state.retentionInDays : undefined;
            resourceInputs["samplingPercentage"] = state ? state.samplingPercentage : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        } else {
            const args = argsOrState as ApplicationInsightsArgs | undefined;
            if ((!args || args.applicationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationType'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["applicationType"] = args ? args.applicationType : undefined;
            resourceInputs["dailyDataCapInGb"] = args ? args.dailyDataCapInGb : undefined;
            resourceInputs["dailyDataCapNotificationsDisabled"] = args ? args.dailyDataCapNotificationsDisabled : undefined;
            resourceInputs["disableIpMasking"] = args ? args.disableIpMasking : undefined;
            resourceInputs["forceCustomerStorageForProfiler"] = args ? args.forceCustomerStorageForProfiler : undefined;
            resourceInputs["internetIngestionEnabled"] = args ? args.internetIngestionEnabled : undefined;
            resourceInputs["internetQueryEnabled"] = args ? args.internetQueryEnabled : undefined;
            resourceInputs["localAuthenticationDisabled"] = args ? args.localAuthenticationDisabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["retentionInDays"] = args ? args.retentionInDays : undefined;
            resourceInputs["samplingPercentage"] = args ? args.samplingPercentage : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
            resourceInputs["appId"] = undefined /*out*/;
            resourceInputs["connectionString"] = undefined /*out*/;
            resourceInputs["instrumentationKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["connectionString", "instrumentationKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ApplicationInsights.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApplicationInsights resources.
 */
export interface ApplicationInsightsState {
    appId?: pulumi.Input<string>;
    applicationType?: pulumi.Input<string>;
    connectionString?: pulumi.Input<string>;
    dailyDataCapInGb?: pulumi.Input<number>;
    dailyDataCapNotificationsDisabled?: pulumi.Input<boolean>;
    disableIpMasking?: pulumi.Input<boolean>;
    forceCustomerStorageForProfiler?: pulumi.Input<boolean>;
    instrumentationKey?: pulumi.Input<string>;
    internetIngestionEnabled?: pulumi.Input<boolean>;
    internetQueryEnabled?: pulumi.Input<boolean>;
    localAuthenticationDisabled?: pulumi.Input<boolean>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    retentionInDays?: pulumi.Input<number>;
    samplingPercentage?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ApplicationInsightsTimeouts>;
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApplicationInsights resource.
 */
export interface ApplicationInsightsArgs {
    applicationType: pulumi.Input<string>;
    dailyDataCapInGb?: pulumi.Input<number>;
    dailyDataCapNotificationsDisabled?: pulumi.Input<boolean>;
    disableIpMasking?: pulumi.Input<boolean>;
    forceCustomerStorageForProfiler?: pulumi.Input<boolean>;
    internetIngestionEnabled?: pulumi.Input<boolean>;
    internetQueryEnabled?: pulumi.Input<boolean>;
    localAuthenticationDisabled?: pulumi.Input<boolean>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    retentionInDays?: pulumi.Input<number>;
    samplingPercentage?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ApplicationInsightsTimeouts>;
    workspaceId?: pulumi.Input<string>;
}
