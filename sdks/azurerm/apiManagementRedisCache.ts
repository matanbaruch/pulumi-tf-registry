// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApiManagementRedisCache extends pulumi.CustomResource {
    /**
     * Get an existing ApiManagementRedisCache resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiManagementRedisCacheState, opts?: pulumi.CustomResourceOptions): ApiManagementRedisCache {
        return new ApiManagementRedisCache(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/apiManagementRedisCache:ApiManagementRedisCache';

    /**
     * Returns true if the given object is an instance of ApiManagementRedisCache.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiManagementRedisCache {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiManagementRedisCache.__pulumiType;
    }

    public readonly apiManagementId!: pulumi.Output<string>;
    public readonly cacheLocation!: pulumi.Output<string | undefined>;
    public readonly connectionString!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly redisCacheId!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ApiManagementRedisCacheTimeouts | undefined>;

    /**
     * Create a ApiManagementRedisCache resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiManagementRedisCacheArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiManagementRedisCacheArgs | ApiManagementRedisCacheState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiManagementRedisCacheState | undefined;
            resourceInputs["apiManagementId"] = state ? state.apiManagementId : undefined;
            resourceInputs["cacheLocation"] = state ? state.cacheLocation : undefined;
            resourceInputs["connectionString"] = state ? state.connectionString : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["redisCacheId"] = state ? state.redisCacheId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ApiManagementRedisCacheArgs | undefined;
            if ((!args || args.apiManagementId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiManagementId'");
            }
            if ((!args || args.connectionString === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionString'");
            }
            resourceInputs["apiManagementId"] = args ? args.apiManagementId : undefined;
            resourceInputs["cacheLocation"] = args ? args.cacheLocation : undefined;
            resourceInputs["connectionString"] = args?.connectionString ? pulumi.secret(args.connectionString) : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["redisCacheId"] = args ? args.redisCacheId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["connectionString"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ApiManagementRedisCache.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApiManagementRedisCache resources.
 */
export interface ApiManagementRedisCacheState {
    apiManagementId?: pulumi.Input<string>;
    cacheLocation?: pulumi.Input<string>;
    connectionString?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    redisCacheId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ApiManagementRedisCacheTimeouts>;
}

/**
 * The set of arguments for constructing a ApiManagementRedisCache resource.
 */
export interface ApiManagementRedisCacheArgs {
    apiManagementId: pulumi.Input<string>;
    cacheLocation?: pulumi.Input<string>;
    connectionString: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    redisCacheId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ApiManagementRedisCacheTimeouts>;
}
