// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApplicationGateway extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationGatewayState, opts?: pulumi.CustomResourceOptions): ApplicationGateway {
        return new ApplicationGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/applicationGateway:ApplicationGateway';

    /**
     * Returns true if the given object is an instance of ApplicationGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationGateway.__pulumiType;
    }

    public readonly authenticationCertificates!: pulumi.Output<outputs.ApplicationGatewayAuthenticationCertificate[] | undefined>;
    public readonly autoscaleConfiguration!: pulumi.Output<outputs.ApplicationGatewayAutoscaleConfiguration | undefined>;
    public readonly backendAddressPools!: pulumi.Output<outputs.ApplicationGatewayBackendAddressPool[]>;
    public readonly backendHttpSettings!: pulumi.Output<outputs.ApplicationGatewayBackendHttpSetting[]>;
    public readonly customErrorConfigurations!: pulumi.Output<outputs.ApplicationGatewayCustomErrorConfiguration[] | undefined>;
    public readonly enableHttp2!: pulumi.Output<boolean | undefined>;
    public readonly fipsEnabled!: pulumi.Output<boolean | undefined>;
    public readonly firewallPolicyId!: pulumi.Output<string | undefined>;
    public readonly forceFirewallPolicyAssociation!: pulumi.Output<boolean | undefined>;
    public readonly frontendIpConfigurations!: pulumi.Output<outputs.ApplicationGatewayFrontendIpConfiguration[]>;
    public readonly frontendPorts!: pulumi.Output<outputs.ApplicationGatewayFrontendPort[]>;
    public readonly gatewayIpConfigurations!: pulumi.Output<outputs.ApplicationGatewayGatewayIpConfiguration[]>;
    public readonly global!: pulumi.Output<outputs.ApplicationGatewayGlobal | undefined>;
    public readonly httpListeners!: pulumi.Output<outputs.ApplicationGatewayHttpListener[]>;
    public readonly identity!: pulumi.Output<outputs.ApplicationGatewayIdentity | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly privateEndpointConnections!: pulumi.Output<outputs.ApplicationGatewayPrivateEndpointConnection[]>;
    public readonly privateLinkConfigurations!: pulumi.Output<outputs.ApplicationGatewayPrivateLinkConfiguration[] | undefined>;
    public readonly probes!: pulumi.Output<outputs.ApplicationGatewayProbe[] | undefined>;
    public readonly redirectConfigurations!: pulumi.Output<outputs.ApplicationGatewayRedirectConfiguration[] | undefined>;
    public readonly requestRoutingRules!: pulumi.Output<outputs.ApplicationGatewayRequestRoutingRule[]>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly rewriteRuleSets!: pulumi.Output<outputs.ApplicationGatewayRewriteRuleSet[] | undefined>;
    public readonly sku!: pulumi.Output<outputs.ApplicationGatewaySku>;
    public readonly sslCertificates!: pulumi.Output<outputs.ApplicationGatewaySslCertificate[] | undefined>;
    public readonly sslPolicy!: pulumi.Output<outputs.ApplicationGatewaySslPolicy | undefined>;
    public readonly sslProfiles!: pulumi.Output<outputs.ApplicationGatewaySslProfile[] | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ApplicationGatewayTimeouts | undefined>;
    public readonly trustedClientCertificates!: pulumi.Output<outputs.ApplicationGatewayTrustedClientCertificate[] | undefined>;
    public readonly trustedRootCertificates!: pulumi.Output<outputs.ApplicationGatewayTrustedRootCertificate[] | undefined>;
    public readonly urlPathMaps!: pulumi.Output<outputs.ApplicationGatewayUrlPathMap[] | undefined>;
    public readonly wafConfiguration!: pulumi.Output<outputs.ApplicationGatewayWafConfiguration | undefined>;
    public readonly zones!: pulumi.Output<string[] | undefined>;

    /**
     * Create a ApplicationGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationGatewayArgs | ApplicationGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationGatewayState | undefined;
            resourceInputs["authenticationCertificates"] = state ? state.authenticationCertificates : undefined;
            resourceInputs["autoscaleConfiguration"] = state ? state.autoscaleConfiguration : undefined;
            resourceInputs["backendAddressPools"] = state ? state.backendAddressPools : undefined;
            resourceInputs["backendHttpSettings"] = state ? state.backendHttpSettings : undefined;
            resourceInputs["customErrorConfigurations"] = state ? state.customErrorConfigurations : undefined;
            resourceInputs["enableHttp2"] = state ? state.enableHttp2 : undefined;
            resourceInputs["fipsEnabled"] = state ? state.fipsEnabled : undefined;
            resourceInputs["firewallPolicyId"] = state ? state.firewallPolicyId : undefined;
            resourceInputs["forceFirewallPolicyAssociation"] = state ? state.forceFirewallPolicyAssociation : undefined;
            resourceInputs["frontendIpConfigurations"] = state ? state.frontendIpConfigurations : undefined;
            resourceInputs["frontendPorts"] = state ? state.frontendPorts : undefined;
            resourceInputs["gatewayIpConfigurations"] = state ? state.gatewayIpConfigurations : undefined;
            resourceInputs["global"] = state ? state.global : undefined;
            resourceInputs["httpListeners"] = state ? state.httpListeners : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateEndpointConnections"] = state ? state.privateEndpointConnections : undefined;
            resourceInputs["privateLinkConfigurations"] = state ? state.privateLinkConfigurations : undefined;
            resourceInputs["probes"] = state ? state.probes : undefined;
            resourceInputs["redirectConfigurations"] = state ? state.redirectConfigurations : undefined;
            resourceInputs["requestRoutingRules"] = state ? state.requestRoutingRules : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["rewriteRuleSets"] = state ? state.rewriteRuleSets : undefined;
            resourceInputs["sku"] = state ? state.sku : undefined;
            resourceInputs["sslCertificates"] = state ? state.sslCertificates : undefined;
            resourceInputs["sslPolicy"] = state ? state.sslPolicy : undefined;
            resourceInputs["sslProfiles"] = state ? state.sslProfiles : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["trustedClientCertificates"] = state ? state.trustedClientCertificates : undefined;
            resourceInputs["trustedRootCertificates"] = state ? state.trustedRootCertificates : undefined;
            resourceInputs["urlPathMaps"] = state ? state.urlPathMaps : undefined;
            resourceInputs["wafConfiguration"] = state ? state.wafConfiguration : undefined;
            resourceInputs["zones"] = state ? state.zones : undefined;
        } else {
            const args = argsOrState as ApplicationGatewayArgs | undefined;
            if ((!args || args.backendAddressPools === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backendAddressPools'");
            }
            if ((!args || args.backendHttpSettings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backendHttpSettings'");
            }
            if ((!args || args.frontendIpConfigurations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frontendIpConfigurations'");
            }
            if ((!args || args.frontendPorts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frontendPorts'");
            }
            if ((!args || args.gatewayIpConfigurations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayIpConfigurations'");
            }
            if ((!args || args.httpListeners === undefined) && !opts.urn) {
                throw new Error("Missing required property 'httpListeners'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.requestRoutingRules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'requestRoutingRules'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.sku === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sku'");
            }
            resourceInputs["authenticationCertificates"] = args ? args.authenticationCertificates : undefined;
            resourceInputs["autoscaleConfiguration"] = args ? args.autoscaleConfiguration : undefined;
            resourceInputs["backendAddressPools"] = args ? args.backendAddressPools : undefined;
            resourceInputs["backendHttpSettings"] = args ? args.backendHttpSettings : undefined;
            resourceInputs["customErrorConfigurations"] = args ? args.customErrorConfigurations : undefined;
            resourceInputs["enableHttp2"] = args ? args.enableHttp2 : undefined;
            resourceInputs["fipsEnabled"] = args ? args.fipsEnabled : undefined;
            resourceInputs["firewallPolicyId"] = args ? args.firewallPolicyId : undefined;
            resourceInputs["forceFirewallPolicyAssociation"] = args ? args.forceFirewallPolicyAssociation : undefined;
            resourceInputs["frontendIpConfigurations"] = args ? args.frontendIpConfigurations : undefined;
            resourceInputs["frontendPorts"] = args ? args.frontendPorts : undefined;
            resourceInputs["gatewayIpConfigurations"] = args ? args.gatewayIpConfigurations : undefined;
            resourceInputs["global"] = args ? args.global : undefined;
            resourceInputs["httpListeners"] = args ? args.httpListeners : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privateLinkConfigurations"] = args ? args.privateLinkConfigurations : undefined;
            resourceInputs["probes"] = args ? args.probes : undefined;
            resourceInputs["redirectConfigurations"] = args ? args.redirectConfigurations : undefined;
            resourceInputs["requestRoutingRules"] = args ? args.requestRoutingRules : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["rewriteRuleSets"] = args ? args.rewriteRuleSets : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["sslCertificates"] = args ? args.sslCertificates : undefined;
            resourceInputs["sslPolicy"] = args ? args.sslPolicy : undefined;
            resourceInputs["sslProfiles"] = args ? args.sslProfiles : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["trustedClientCertificates"] = args ? args.trustedClientCertificates : undefined;
            resourceInputs["trustedRootCertificates"] = args ? args.trustedRootCertificates : undefined;
            resourceInputs["urlPathMaps"] = args ? args.urlPathMaps : undefined;
            resourceInputs["wafConfiguration"] = args ? args.wafConfiguration : undefined;
            resourceInputs["zones"] = args ? args.zones : undefined;
            resourceInputs["privateEndpointConnections"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplicationGateway.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApplicationGateway resources.
 */
export interface ApplicationGatewayState {
    authenticationCertificates?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayAuthenticationCertificate>[]>;
    autoscaleConfiguration?: pulumi.Input<inputs.ApplicationGatewayAutoscaleConfiguration>;
    backendAddressPools?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayBackendAddressPool>[]>;
    backendHttpSettings?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayBackendHttpSetting>[]>;
    customErrorConfigurations?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayCustomErrorConfiguration>[]>;
    enableHttp2?: pulumi.Input<boolean>;
    fipsEnabled?: pulumi.Input<boolean>;
    firewallPolicyId?: pulumi.Input<string>;
    forceFirewallPolicyAssociation?: pulumi.Input<boolean>;
    frontendIpConfigurations?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayFrontendIpConfiguration>[]>;
    frontendPorts?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayFrontendPort>[]>;
    gatewayIpConfigurations?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayGatewayIpConfiguration>[]>;
    global?: pulumi.Input<inputs.ApplicationGatewayGlobal>;
    httpListeners?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayHttpListener>[]>;
    identity?: pulumi.Input<inputs.ApplicationGatewayIdentity>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    privateEndpointConnections?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayPrivateEndpointConnection>[]>;
    privateLinkConfigurations?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayPrivateLinkConfiguration>[]>;
    probes?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayProbe>[]>;
    redirectConfigurations?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayRedirectConfiguration>[]>;
    requestRoutingRules?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayRequestRoutingRule>[]>;
    resourceGroupName?: pulumi.Input<string>;
    rewriteRuleSets?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayRewriteRuleSet>[]>;
    sku?: pulumi.Input<inputs.ApplicationGatewaySku>;
    sslCertificates?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewaySslCertificate>[]>;
    sslPolicy?: pulumi.Input<inputs.ApplicationGatewaySslPolicy>;
    sslProfiles?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewaySslProfile>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ApplicationGatewayTimeouts>;
    trustedClientCertificates?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayTrustedClientCertificate>[]>;
    trustedRootCertificates?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayTrustedRootCertificate>[]>;
    urlPathMaps?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayUrlPathMap>[]>;
    wafConfiguration?: pulumi.Input<inputs.ApplicationGatewayWafConfiguration>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ApplicationGateway resource.
 */
export interface ApplicationGatewayArgs {
    authenticationCertificates?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayAuthenticationCertificate>[]>;
    autoscaleConfiguration?: pulumi.Input<inputs.ApplicationGatewayAutoscaleConfiguration>;
    backendAddressPools: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayBackendAddressPool>[]>;
    backendHttpSettings: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayBackendHttpSetting>[]>;
    customErrorConfigurations?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayCustomErrorConfiguration>[]>;
    enableHttp2?: pulumi.Input<boolean>;
    fipsEnabled?: pulumi.Input<boolean>;
    firewallPolicyId?: pulumi.Input<string>;
    forceFirewallPolicyAssociation?: pulumi.Input<boolean>;
    frontendIpConfigurations: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayFrontendIpConfiguration>[]>;
    frontendPorts: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayFrontendPort>[]>;
    gatewayIpConfigurations: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayGatewayIpConfiguration>[]>;
    global?: pulumi.Input<inputs.ApplicationGatewayGlobal>;
    httpListeners: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayHttpListener>[]>;
    identity?: pulumi.Input<inputs.ApplicationGatewayIdentity>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    privateLinkConfigurations?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayPrivateLinkConfiguration>[]>;
    probes?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayProbe>[]>;
    redirectConfigurations?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayRedirectConfiguration>[]>;
    requestRoutingRules: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayRequestRoutingRule>[]>;
    resourceGroupName: pulumi.Input<string>;
    rewriteRuleSets?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayRewriteRuleSet>[]>;
    sku: pulumi.Input<inputs.ApplicationGatewaySku>;
    sslCertificates?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewaySslCertificate>[]>;
    sslPolicy?: pulumi.Input<inputs.ApplicationGatewaySslPolicy>;
    sslProfiles?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewaySslProfile>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ApplicationGatewayTimeouts>;
    trustedClientCertificates?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayTrustedClientCertificate>[]>;
    trustedRootCertificates?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayTrustedRootCertificate>[]>;
    urlPathMaps?: pulumi.Input<pulumi.Input<inputs.ApplicationGatewayUrlPathMap>[]>;
    wafConfiguration?: pulumi.Input<inputs.ApplicationGatewayWafConfiguration>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}
