// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CosmosdbSqlContainer extends pulumi.CustomResource {
    /**
     * Get an existing CosmosdbSqlContainer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CosmosdbSqlContainerState, opts?: pulumi.CustomResourceOptions): CosmosdbSqlContainer {
        return new CosmosdbSqlContainer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/cosmosdbSqlContainer:CosmosdbSqlContainer';

    /**
     * Returns true if the given object is an instance of CosmosdbSqlContainer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CosmosdbSqlContainer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CosmosdbSqlContainer.__pulumiType;
    }

    public readonly accountName!: pulumi.Output<string>;
    public readonly analyticalStorageTtl!: pulumi.Output<number | undefined>;
    public readonly autoscaleSettings!: pulumi.Output<outputs.CosmosdbSqlContainerAutoscaleSettings | undefined>;
    public readonly conflictResolutionPolicy!: pulumi.Output<outputs.CosmosdbSqlContainerConflictResolutionPolicy | undefined>;
    public readonly databaseName!: pulumi.Output<string>;
    public readonly defaultTtl!: pulumi.Output<number | undefined>;
    public readonly indexingPolicy!: pulumi.Output<outputs.CosmosdbSqlContainerIndexingPolicy | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly partitionKeyKind!: pulumi.Output<string | undefined>;
    public readonly partitionKeyPaths!: pulumi.Output<string[]>;
    public readonly partitionKeyVersion!: pulumi.Output<number | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly throughput!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.CosmosdbSqlContainerTimeouts | undefined>;
    public readonly uniqueKeys!: pulumi.Output<outputs.CosmosdbSqlContainerUniqueKey[] | undefined>;

    /**
     * Create a CosmosdbSqlContainer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CosmosdbSqlContainerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CosmosdbSqlContainerArgs | CosmosdbSqlContainerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CosmosdbSqlContainerState | undefined;
            resourceInputs["accountName"] = state ? state.accountName : undefined;
            resourceInputs["analyticalStorageTtl"] = state ? state.analyticalStorageTtl : undefined;
            resourceInputs["autoscaleSettings"] = state ? state.autoscaleSettings : undefined;
            resourceInputs["conflictResolutionPolicy"] = state ? state.conflictResolutionPolicy : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["defaultTtl"] = state ? state.defaultTtl : undefined;
            resourceInputs["indexingPolicy"] = state ? state.indexingPolicy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["partitionKeyKind"] = state ? state.partitionKeyKind : undefined;
            resourceInputs["partitionKeyPaths"] = state ? state.partitionKeyPaths : undefined;
            resourceInputs["partitionKeyVersion"] = state ? state.partitionKeyVersion : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["throughput"] = state ? state.throughput : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["uniqueKeys"] = state ? state.uniqueKeys : undefined;
        } else {
            const args = argsOrState as CosmosdbSqlContainerArgs | undefined;
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.databaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if ((!args || args.partitionKeyPaths === undefined) && !opts.urn) {
                throw new Error("Missing required property 'partitionKeyPaths'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["analyticalStorageTtl"] = args ? args.analyticalStorageTtl : undefined;
            resourceInputs["autoscaleSettings"] = args ? args.autoscaleSettings : undefined;
            resourceInputs["conflictResolutionPolicy"] = args ? args.conflictResolutionPolicy : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["defaultTtl"] = args ? args.defaultTtl : undefined;
            resourceInputs["indexingPolicy"] = args ? args.indexingPolicy : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["partitionKeyKind"] = args ? args.partitionKeyKind : undefined;
            resourceInputs["partitionKeyPaths"] = args ? args.partitionKeyPaths : undefined;
            resourceInputs["partitionKeyVersion"] = args ? args.partitionKeyVersion : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["throughput"] = args ? args.throughput : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["uniqueKeys"] = args ? args.uniqueKeys : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CosmosdbSqlContainer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CosmosdbSqlContainer resources.
 */
export interface CosmosdbSqlContainerState {
    accountName?: pulumi.Input<string>;
    analyticalStorageTtl?: pulumi.Input<number>;
    autoscaleSettings?: pulumi.Input<inputs.CosmosdbSqlContainerAutoscaleSettings>;
    conflictResolutionPolicy?: pulumi.Input<inputs.CosmosdbSqlContainerConflictResolutionPolicy>;
    databaseName?: pulumi.Input<string>;
    defaultTtl?: pulumi.Input<number>;
    indexingPolicy?: pulumi.Input<inputs.CosmosdbSqlContainerIndexingPolicy>;
    name?: pulumi.Input<string>;
    partitionKeyKind?: pulumi.Input<string>;
    partitionKeyPaths?: pulumi.Input<pulumi.Input<string>[]>;
    partitionKeyVersion?: pulumi.Input<number>;
    resourceGroupName?: pulumi.Input<string>;
    throughput?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.CosmosdbSqlContainerTimeouts>;
    uniqueKeys?: pulumi.Input<pulumi.Input<inputs.CosmosdbSqlContainerUniqueKey>[]>;
}

/**
 * The set of arguments for constructing a CosmosdbSqlContainer resource.
 */
export interface CosmosdbSqlContainerArgs {
    accountName: pulumi.Input<string>;
    analyticalStorageTtl?: pulumi.Input<number>;
    autoscaleSettings?: pulumi.Input<inputs.CosmosdbSqlContainerAutoscaleSettings>;
    conflictResolutionPolicy?: pulumi.Input<inputs.CosmosdbSqlContainerConflictResolutionPolicy>;
    databaseName: pulumi.Input<string>;
    defaultTtl?: pulumi.Input<number>;
    indexingPolicy?: pulumi.Input<inputs.CosmosdbSqlContainerIndexingPolicy>;
    name?: pulumi.Input<string>;
    partitionKeyKind?: pulumi.Input<string>;
    partitionKeyPaths: pulumi.Input<pulumi.Input<string>[]>;
    partitionKeyVersion?: pulumi.Input<number>;
    resourceGroupName: pulumi.Input<string>;
    throughput?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.CosmosdbSqlContainerTimeouts>;
    uniqueKeys?: pulumi.Input<pulumi.Input<inputs.CosmosdbSqlContainerUniqueKey>[]>;
}
