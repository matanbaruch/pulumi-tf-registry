// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BatchAccount extends pulumi.CustomResource {
    /**
     * Get an existing BatchAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BatchAccountState, opts?: pulumi.CustomResourceOptions): BatchAccount {
        return new BatchAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/batchAccount:BatchAccount';

    /**
     * Returns true if the given object is an instance of BatchAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BatchAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BatchAccount.__pulumiType;
    }

    public /*out*/ readonly accountEndpoint!: pulumi.Output<string>;
    public readonly allowedAuthenticationModes!: pulumi.Output<string[]>;
    public readonly encryptions!: pulumi.Output<outputs.BatchAccountEncryption[] | undefined>;
    public readonly identity!: pulumi.Output<outputs.BatchAccountIdentity | undefined>;
    public readonly keyVaultReference!: pulumi.Output<outputs.BatchAccountKeyVaultReference | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkProfile!: pulumi.Output<outputs.BatchAccountNetworkProfile | undefined>;
    public readonly poolAllocationMode!: pulumi.Output<string | undefined>;
    public /*out*/ readonly primaryAccessKey!: pulumi.Output<string>;
    public readonly publicNetworkAccessEnabled!: pulumi.Output<boolean | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public /*out*/ readonly secondaryAccessKey!: pulumi.Output<string>;
    public readonly storageAccountAuthenticationMode!: pulumi.Output<string | undefined>;
    public readonly storageAccountId!: pulumi.Output<string | undefined>;
    public readonly storageAccountNodeIdentity!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.BatchAccountTimeouts | undefined>;

    /**
     * Create a BatchAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BatchAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BatchAccountArgs | BatchAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BatchAccountState | undefined;
            resourceInputs["accountEndpoint"] = state ? state.accountEndpoint : undefined;
            resourceInputs["allowedAuthenticationModes"] = state ? state.allowedAuthenticationModes : undefined;
            resourceInputs["encryptions"] = state ? state.encryptions : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["keyVaultReference"] = state ? state.keyVaultReference : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkProfile"] = state ? state.networkProfile : undefined;
            resourceInputs["poolAllocationMode"] = state ? state.poolAllocationMode : undefined;
            resourceInputs["primaryAccessKey"] = state ? state.primaryAccessKey : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["secondaryAccessKey"] = state ? state.secondaryAccessKey : undefined;
            resourceInputs["storageAccountAuthenticationMode"] = state ? state.storageAccountAuthenticationMode : undefined;
            resourceInputs["storageAccountId"] = state ? state.storageAccountId : undefined;
            resourceInputs["storageAccountNodeIdentity"] = state ? state.storageAccountNodeIdentity : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as BatchAccountArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["allowedAuthenticationModes"] = args ? args.allowedAuthenticationModes : undefined;
            resourceInputs["encryptions"] = args ? args.encryptions : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["keyVaultReference"] = args ? args.keyVaultReference : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkProfile"] = args ? args.networkProfile : undefined;
            resourceInputs["poolAllocationMode"] = args ? args.poolAllocationMode : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["storageAccountAuthenticationMode"] = args ? args.storageAccountAuthenticationMode : undefined;
            resourceInputs["storageAccountId"] = args ? args.storageAccountId : undefined;
            resourceInputs["storageAccountNodeIdentity"] = args ? args.storageAccountNodeIdentity : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["accountEndpoint"] = undefined /*out*/;
            resourceInputs["primaryAccessKey"] = undefined /*out*/;
            resourceInputs["secondaryAccessKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["primaryAccessKey", "secondaryAccessKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(BatchAccount.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BatchAccount resources.
 */
export interface BatchAccountState {
    accountEndpoint?: pulumi.Input<string>;
    allowedAuthenticationModes?: pulumi.Input<pulumi.Input<string>[]>;
    encryptions?: pulumi.Input<pulumi.Input<inputs.BatchAccountEncryption>[]>;
    identity?: pulumi.Input<inputs.BatchAccountIdentity>;
    keyVaultReference?: pulumi.Input<inputs.BatchAccountKeyVaultReference>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkProfile?: pulumi.Input<inputs.BatchAccountNetworkProfile>;
    poolAllocationMode?: pulumi.Input<string>;
    primaryAccessKey?: pulumi.Input<string>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    resourceGroupName?: pulumi.Input<string>;
    secondaryAccessKey?: pulumi.Input<string>;
    storageAccountAuthenticationMode?: pulumi.Input<string>;
    storageAccountId?: pulumi.Input<string>;
    storageAccountNodeIdentity?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.BatchAccountTimeouts>;
}

/**
 * The set of arguments for constructing a BatchAccount resource.
 */
export interface BatchAccountArgs {
    allowedAuthenticationModes?: pulumi.Input<pulumi.Input<string>[]>;
    encryptions?: pulumi.Input<pulumi.Input<inputs.BatchAccountEncryption>[]>;
    identity?: pulumi.Input<inputs.BatchAccountIdentity>;
    keyVaultReference?: pulumi.Input<inputs.BatchAccountKeyVaultReference>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkProfile?: pulumi.Input<inputs.BatchAccountNetworkProfile>;
    poolAllocationMode?: pulumi.Input<string>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    resourceGroupName: pulumi.Input<string>;
    storageAccountAuthenticationMode?: pulumi.Input<string>;
    storageAccountId?: pulumi.Input<string>;
    storageAccountNodeIdentity?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.BatchAccountTimeouts>;
}
