// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PostgresqlFlexibleServer extends pulumi.CustomResource {
    /**
     * Get an existing PostgresqlFlexibleServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PostgresqlFlexibleServerState, opts?: pulumi.CustomResourceOptions): PostgresqlFlexibleServer {
        return new PostgresqlFlexibleServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/postgresqlFlexibleServer:PostgresqlFlexibleServer';

    /**
     * Returns true if the given object is an instance of PostgresqlFlexibleServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PostgresqlFlexibleServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PostgresqlFlexibleServer.__pulumiType;
    }

    public readonly administratorLogin!: pulumi.Output<string>;
    public readonly administratorPassword!: pulumi.Output<string | undefined>;
    public readonly authentication!: pulumi.Output<outputs.PostgresqlFlexibleServerAuthentication | undefined>;
    public readonly autoGrowEnabled!: pulumi.Output<boolean | undefined>;
    public readonly backupRetentionDays!: pulumi.Output<number>;
    public readonly createMode!: pulumi.Output<string | undefined>;
    public readonly customerManagedKey!: pulumi.Output<outputs.PostgresqlFlexibleServerCustomerManagedKey | undefined>;
    public readonly delegatedSubnetId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly fqdn!: pulumi.Output<string>;
    public readonly geoRedundantBackupEnabled!: pulumi.Output<boolean | undefined>;
    public readonly highAvailability!: pulumi.Output<outputs.PostgresqlFlexibleServerHighAvailability | undefined>;
    public readonly identity!: pulumi.Output<outputs.PostgresqlFlexibleServerIdentity | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly maintenanceWindow!: pulumi.Output<outputs.PostgresqlFlexibleServerMaintenanceWindow | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly pointInTimeRestoreTimeInUtc!: pulumi.Output<string | undefined>;
    public readonly privateDnsZoneId!: pulumi.Output<string>;
    public readonly publicNetworkAccessEnabled!: pulumi.Output<boolean | undefined>;
    public readonly replicationRole!: pulumi.Output<string | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly skuName!: pulumi.Output<string>;
    public readonly sourceServerId!: pulumi.Output<string | undefined>;
    public readonly storageMb!: pulumi.Output<number>;
    public readonly storageTier!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.PostgresqlFlexibleServerTimeouts | undefined>;
    public readonly version!: pulumi.Output<string>;
    public readonly zone!: pulumi.Output<string | undefined>;

    /**
     * Create a PostgresqlFlexibleServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PostgresqlFlexibleServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PostgresqlFlexibleServerArgs | PostgresqlFlexibleServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PostgresqlFlexibleServerState | undefined;
            resourceInputs["administratorLogin"] = state ? state.administratorLogin : undefined;
            resourceInputs["administratorPassword"] = state ? state.administratorPassword : undefined;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["autoGrowEnabled"] = state ? state.autoGrowEnabled : undefined;
            resourceInputs["backupRetentionDays"] = state ? state.backupRetentionDays : undefined;
            resourceInputs["createMode"] = state ? state.createMode : undefined;
            resourceInputs["customerManagedKey"] = state ? state.customerManagedKey : undefined;
            resourceInputs["delegatedSubnetId"] = state ? state.delegatedSubnetId : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["geoRedundantBackupEnabled"] = state ? state.geoRedundantBackupEnabled : undefined;
            resourceInputs["highAvailability"] = state ? state.highAvailability : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pointInTimeRestoreTimeInUtc"] = state ? state.pointInTimeRestoreTimeInUtc : undefined;
            resourceInputs["privateDnsZoneId"] = state ? state.privateDnsZoneId : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            resourceInputs["replicationRole"] = state ? state.replicationRole : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["skuName"] = state ? state.skuName : undefined;
            resourceInputs["sourceServerId"] = state ? state.sourceServerId : undefined;
            resourceInputs["storageMb"] = state ? state.storageMb : undefined;
            resourceInputs["storageTier"] = state ? state.storageTier : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as PostgresqlFlexibleServerArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["administratorLogin"] = args ? args.administratorLogin : undefined;
            resourceInputs["administratorPassword"] = args?.administratorPassword ? pulumi.secret(args.administratorPassword) : undefined;
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["autoGrowEnabled"] = args ? args.autoGrowEnabled : undefined;
            resourceInputs["backupRetentionDays"] = args ? args.backupRetentionDays : undefined;
            resourceInputs["createMode"] = args ? args.createMode : undefined;
            resourceInputs["customerManagedKey"] = args ? args.customerManagedKey : undefined;
            resourceInputs["delegatedSubnetId"] = args ? args.delegatedSubnetId : undefined;
            resourceInputs["geoRedundantBackupEnabled"] = args ? args.geoRedundantBackupEnabled : undefined;
            resourceInputs["highAvailability"] = args ? args.highAvailability : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pointInTimeRestoreTimeInUtc"] = args ? args.pointInTimeRestoreTimeInUtc : undefined;
            resourceInputs["privateDnsZoneId"] = args ? args.privateDnsZoneId : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            resourceInputs["replicationRole"] = args ? args.replicationRole : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["skuName"] = args ? args.skuName : undefined;
            resourceInputs["sourceServerId"] = args ? args.sourceServerId : undefined;
            resourceInputs["storageMb"] = args ? args.storageMb : undefined;
            resourceInputs["storageTier"] = args ? args.storageTier : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["fqdn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["administratorPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(PostgresqlFlexibleServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PostgresqlFlexibleServer resources.
 */
export interface PostgresqlFlexibleServerState {
    administratorLogin?: pulumi.Input<string>;
    administratorPassword?: pulumi.Input<string>;
    authentication?: pulumi.Input<inputs.PostgresqlFlexibleServerAuthentication>;
    autoGrowEnabled?: pulumi.Input<boolean>;
    backupRetentionDays?: pulumi.Input<number>;
    createMode?: pulumi.Input<string>;
    customerManagedKey?: pulumi.Input<inputs.PostgresqlFlexibleServerCustomerManagedKey>;
    delegatedSubnetId?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    geoRedundantBackupEnabled?: pulumi.Input<boolean>;
    highAvailability?: pulumi.Input<inputs.PostgresqlFlexibleServerHighAvailability>;
    identity?: pulumi.Input<inputs.PostgresqlFlexibleServerIdentity>;
    location?: pulumi.Input<string>;
    maintenanceWindow?: pulumi.Input<inputs.PostgresqlFlexibleServerMaintenanceWindow>;
    name?: pulumi.Input<string>;
    pointInTimeRestoreTimeInUtc?: pulumi.Input<string>;
    privateDnsZoneId?: pulumi.Input<string>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    replicationRole?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    skuName?: pulumi.Input<string>;
    sourceServerId?: pulumi.Input<string>;
    storageMb?: pulumi.Input<number>;
    storageTier?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.PostgresqlFlexibleServerTimeouts>;
    version?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PostgresqlFlexibleServer resource.
 */
export interface PostgresqlFlexibleServerArgs {
    administratorLogin?: pulumi.Input<string>;
    administratorPassword?: pulumi.Input<string>;
    authentication?: pulumi.Input<inputs.PostgresqlFlexibleServerAuthentication>;
    autoGrowEnabled?: pulumi.Input<boolean>;
    backupRetentionDays?: pulumi.Input<number>;
    createMode?: pulumi.Input<string>;
    customerManagedKey?: pulumi.Input<inputs.PostgresqlFlexibleServerCustomerManagedKey>;
    delegatedSubnetId?: pulumi.Input<string>;
    geoRedundantBackupEnabled?: pulumi.Input<boolean>;
    highAvailability?: pulumi.Input<inputs.PostgresqlFlexibleServerHighAvailability>;
    identity?: pulumi.Input<inputs.PostgresqlFlexibleServerIdentity>;
    location: pulumi.Input<string>;
    maintenanceWindow?: pulumi.Input<inputs.PostgresqlFlexibleServerMaintenanceWindow>;
    name?: pulumi.Input<string>;
    pointInTimeRestoreTimeInUtc?: pulumi.Input<string>;
    privateDnsZoneId?: pulumi.Input<string>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    replicationRole?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    skuName?: pulumi.Input<string>;
    sourceServerId?: pulumi.Input<string>;
    storageMb?: pulumi.Input<number>;
    storageTier?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.PostgresqlFlexibleServerTimeouts>;
    version?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}
