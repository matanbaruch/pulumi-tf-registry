// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SynapseWorkspace extends pulumi.CustomResource {
    /**
     * Get an existing SynapseWorkspace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SynapseWorkspaceState, opts?: pulumi.CustomResourceOptions): SynapseWorkspace {
        return new SynapseWorkspace(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/synapseWorkspace:SynapseWorkspace';

    /**
     * Returns true if the given object is an instance of SynapseWorkspace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SynapseWorkspace {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SynapseWorkspace.__pulumiType;
    }

    public readonly azureDevopsRepo!: pulumi.Output<outputs.SynapseWorkspaceAzureDevopsRepo | undefined>;
    public readonly azureadAuthenticationOnly!: pulumi.Output<boolean | undefined>;
    public readonly computeSubnetId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly connectivityEndpoints!: pulumi.Output<{[key: string]: string}>;
    public readonly customerManagedKey!: pulumi.Output<outputs.SynapseWorkspaceCustomerManagedKey | undefined>;
    public readonly dataExfiltrationProtectionEnabled!: pulumi.Output<boolean | undefined>;
    public readonly githubRepo!: pulumi.Output<outputs.SynapseWorkspaceGithubRepo | undefined>;
    public readonly identity!: pulumi.Output<outputs.SynapseWorkspaceIdentity | undefined>;
    public readonly linkingAllowedForAadTenantIds!: pulumi.Output<string[] | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly managedResourceGroupName!: pulumi.Output<string>;
    public readonly managedVirtualNetworkEnabled!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly publicNetworkAccessEnabled!: pulumi.Output<boolean | undefined>;
    public readonly purviewId!: pulumi.Output<string | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly sqlAdministratorLogin!: pulumi.Output<string | undefined>;
    public readonly sqlAdministratorLoginPassword!: pulumi.Output<string | undefined>;
    public readonly sqlIdentityControlEnabled!: pulumi.Output<boolean | undefined>;
    public readonly storageDataLakeGen2FilesystemId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.SynapseWorkspaceTimeouts | undefined>;

    /**
     * Create a SynapseWorkspace resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SynapseWorkspaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SynapseWorkspaceArgs | SynapseWorkspaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SynapseWorkspaceState | undefined;
            resourceInputs["azureDevopsRepo"] = state ? state.azureDevopsRepo : undefined;
            resourceInputs["azureadAuthenticationOnly"] = state ? state.azureadAuthenticationOnly : undefined;
            resourceInputs["computeSubnetId"] = state ? state.computeSubnetId : undefined;
            resourceInputs["connectivityEndpoints"] = state ? state.connectivityEndpoints : undefined;
            resourceInputs["customerManagedKey"] = state ? state.customerManagedKey : undefined;
            resourceInputs["dataExfiltrationProtectionEnabled"] = state ? state.dataExfiltrationProtectionEnabled : undefined;
            resourceInputs["githubRepo"] = state ? state.githubRepo : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["linkingAllowedForAadTenantIds"] = state ? state.linkingAllowedForAadTenantIds : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["managedResourceGroupName"] = state ? state.managedResourceGroupName : undefined;
            resourceInputs["managedVirtualNetworkEnabled"] = state ? state.managedVirtualNetworkEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            resourceInputs["purviewId"] = state ? state.purviewId : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["sqlAdministratorLogin"] = state ? state.sqlAdministratorLogin : undefined;
            resourceInputs["sqlAdministratorLoginPassword"] = state ? state.sqlAdministratorLoginPassword : undefined;
            resourceInputs["sqlIdentityControlEnabled"] = state ? state.sqlIdentityControlEnabled : undefined;
            resourceInputs["storageDataLakeGen2FilesystemId"] = state ? state.storageDataLakeGen2FilesystemId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as SynapseWorkspaceArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.storageDataLakeGen2FilesystemId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageDataLakeGen2FilesystemId'");
            }
            resourceInputs["azureDevopsRepo"] = args ? args.azureDevopsRepo : undefined;
            resourceInputs["azureadAuthenticationOnly"] = args ? args.azureadAuthenticationOnly : undefined;
            resourceInputs["computeSubnetId"] = args ? args.computeSubnetId : undefined;
            resourceInputs["customerManagedKey"] = args ? args.customerManagedKey : undefined;
            resourceInputs["dataExfiltrationProtectionEnabled"] = args ? args.dataExfiltrationProtectionEnabled : undefined;
            resourceInputs["githubRepo"] = args ? args.githubRepo : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["linkingAllowedForAadTenantIds"] = args ? args.linkingAllowedForAadTenantIds : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["managedResourceGroupName"] = args ? args.managedResourceGroupName : undefined;
            resourceInputs["managedVirtualNetworkEnabled"] = args ? args.managedVirtualNetworkEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            resourceInputs["purviewId"] = args ? args.purviewId : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["sqlAdministratorLogin"] = args ? args.sqlAdministratorLogin : undefined;
            resourceInputs["sqlAdministratorLoginPassword"] = args?.sqlAdministratorLoginPassword ? pulumi.secret(args.sqlAdministratorLoginPassword) : undefined;
            resourceInputs["sqlIdentityControlEnabled"] = args ? args.sqlIdentityControlEnabled : undefined;
            resourceInputs["storageDataLakeGen2FilesystemId"] = args ? args.storageDataLakeGen2FilesystemId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["connectivityEndpoints"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sqlAdministratorLoginPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SynapseWorkspace.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SynapseWorkspace resources.
 */
export interface SynapseWorkspaceState {
    azureDevopsRepo?: pulumi.Input<inputs.SynapseWorkspaceAzureDevopsRepo>;
    azureadAuthenticationOnly?: pulumi.Input<boolean>;
    computeSubnetId?: pulumi.Input<string>;
    connectivityEndpoints?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    customerManagedKey?: pulumi.Input<inputs.SynapseWorkspaceCustomerManagedKey>;
    dataExfiltrationProtectionEnabled?: pulumi.Input<boolean>;
    githubRepo?: pulumi.Input<inputs.SynapseWorkspaceGithubRepo>;
    identity?: pulumi.Input<inputs.SynapseWorkspaceIdentity>;
    linkingAllowedForAadTenantIds?: pulumi.Input<pulumi.Input<string>[]>;
    location?: pulumi.Input<string>;
    managedResourceGroupName?: pulumi.Input<string>;
    managedVirtualNetworkEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    purviewId?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    sqlAdministratorLogin?: pulumi.Input<string>;
    sqlAdministratorLoginPassword?: pulumi.Input<string>;
    sqlIdentityControlEnabled?: pulumi.Input<boolean>;
    storageDataLakeGen2FilesystemId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.SynapseWorkspaceTimeouts>;
}

/**
 * The set of arguments for constructing a SynapseWorkspace resource.
 */
export interface SynapseWorkspaceArgs {
    azureDevopsRepo?: pulumi.Input<inputs.SynapseWorkspaceAzureDevopsRepo>;
    azureadAuthenticationOnly?: pulumi.Input<boolean>;
    computeSubnetId?: pulumi.Input<string>;
    customerManagedKey?: pulumi.Input<inputs.SynapseWorkspaceCustomerManagedKey>;
    dataExfiltrationProtectionEnabled?: pulumi.Input<boolean>;
    githubRepo?: pulumi.Input<inputs.SynapseWorkspaceGithubRepo>;
    identity?: pulumi.Input<inputs.SynapseWorkspaceIdentity>;
    linkingAllowedForAadTenantIds?: pulumi.Input<pulumi.Input<string>[]>;
    location: pulumi.Input<string>;
    managedResourceGroupName?: pulumi.Input<string>;
    managedVirtualNetworkEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    purviewId?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    sqlAdministratorLogin?: pulumi.Input<string>;
    sqlAdministratorLoginPassword?: pulumi.Input<string>;
    sqlIdentityControlEnabled?: pulumi.Input<boolean>;
    storageDataLakeGen2FilesystemId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.SynapseWorkspaceTimeouts>;
}
