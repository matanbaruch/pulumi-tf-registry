// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VirtualDesktopApplication extends pulumi.CustomResource {
    /**
     * Get an existing VirtualDesktopApplication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualDesktopApplicationState, opts?: pulumi.CustomResourceOptions): VirtualDesktopApplication {
        return new VirtualDesktopApplication(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/virtualDesktopApplication:VirtualDesktopApplication';

    /**
     * Returns true if the given object is an instance of VirtualDesktopApplication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualDesktopApplication {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualDesktopApplication.__pulumiType;
    }

    public readonly applicationGroupId!: pulumi.Output<string>;
    public readonly commandLineArgumentPolicy!: pulumi.Output<string>;
    public readonly commandLineArguments!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly friendlyName!: pulumi.Output<string>;
    public readonly iconIndex!: pulumi.Output<number | undefined>;
    public readonly iconPath!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly path!: pulumi.Output<string>;
    public readonly showInPortal!: pulumi.Output<boolean | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.VirtualDesktopApplicationTimeouts | undefined>;

    /**
     * Create a VirtualDesktopApplication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualDesktopApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualDesktopApplicationArgs | VirtualDesktopApplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualDesktopApplicationState | undefined;
            resourceInputs["applicationGroupId"] = state ? state.applicationGroupId : undefined;
            resourceInputs["commandLineArgumentPolicy"] = state ? state.commandLineArgumentPolicy : undefined;
            resourceInputs["commandLineArguments"] = state ? state.commandLineArguments : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["friendlyName"] = state ? state.friendlyName : undefined;
            resourceInputs["iconIndex"] = state ? state.iconIndex : undefined;
            resourceInputs["iconPath"] = state ? state.iconPath : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["showInPortal"] = state ? state.showInPortal : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as VirtualDesktopApplicationArgs | undefined;
            if ((!args || args.applicationGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationGroupId'");
            }
            if ((!args || args.commandLineArgumentPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commandLineArgumentPolicy'");
            }
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            resourceInputs["applicationGroupId"] = args ? args.applicationGroupId : undefined;
            resourceInputs["commandLineArgumentPolicy"] = args ? args.commandLineArgumentPolicy : undefined;
            resourceInputs["commandLineArguments"] = args ? args.commandLineArguments : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["friendlyName"] = args ? args.friendlyName : undefined;
            resourceInputs["iconIndex"] = args ? args.iconIndex : undefined;
            resourceInputs["iconPath"] = args ? args.iconPath : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["showInPortal"] = args ? args.showInPortal : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualDesktopApplication.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VirtualDesktopApplication resources.
 */
export interface VirtualDesktopApplicationState {
    applicationGroupId?: pulumi.Input<string>;
    commandLineArgumentPolicy?: pulumi.Input<string>;
    commandLineArguments?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    friendlyName?: pulumi.Input<string>;
    iconIndex?: pulumi.Input<number>;
    iconPath?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    showInPortal?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.VirtualDesktopApplicationTimeouts>;
}

/**
 * The set of arguments for constructing a VirtualDesktopApplication resource.
 */
export interface VirtualDesktopApplicationArgs {
    applicationGroupId: pulumi.Input<string>;
    commandLineArgumentPolicy: pulumi.Input<string>;
    commandLineArguments?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    friendlyName?: pulumi.Input<string>;
    iconIndex?: pulumi.Input<number>;
    iconPath?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    path: pulumi.Input<string>;
    showInPortal?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.VirtualDesktopApplicationTimeouts>;
}
