// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LinuxVirtualMachine extends pulumi.CustomResource {
    /**
     * Get an existing LinuxVirtualMachine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LinuxVirtualMachineState, opts?: pulumi.CustomResourceOptions): LinuxVirtualMachine {
        return new LinuxVirtualMachine(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/linuxVirtualMachine:LinuxVirtualMachine';

    /**
     * Returns true if the given object is an instance of LinuxVirtualMachine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LinuxVirtualMachine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LinuxVirtualMachine.__pulumiType;
    }

    public readonly additionalCapabilities!: pulumi.Output<outputs.LinuxVirtualMachineAdditionalCapabilities | undefined>;
    public readonly adminPassword!: pulumi.Output<string | undefined>;
    public readonly adminSshKeys!: pulumi.Output<outputs.LinuxVirtualMachineAdminSshKey[] | undefined>;
    public readonly adminUsername!: pulumi.Output<string>;
    public readonly allowExtensionOperations!: pulumi.Output<boolean | undefined>;
    public readonly availabilitySetId!: pulumi.Output<string | undefined>;
    public readonly bootDiagnostics!: pulumi.Output<outputs.LinuxVirtualMachineBootDiagnostics | undefined>;
    public readonly bypassPlatformSafetyChecksOnUserScheduleEnabled!: pulumi.Output<boolean | undefined>;
    public readonly capacityReservationGroupId!: pulumi.Output<string | undefined>;
    public readonly computerName!: pulumi.Output<string>;
    public readonly customData!: pulumi.Output<string | undefined>;
    public readonly dedicatedHostGroupId!: pulumi.Output<string | undefined>;
    public readonly dedicatedHostId!: pulumi.Output<string | undefined>;
    public readonly disablePasswordAuthentication!: pulumi.Output<boolean | undefined>;
    public readonly diskControllerType!: pulumi.Output<string>;
    public readonly edgeZone!: pulumi.Output<string | undefined>;
    public readonly encryptionAtHostEnabled!: pulumi.Output<boolean | undefined>;
    public readonly evictionPolicy!: pulumi.Output<string | undefined>;
    public readonly extensionsTimeBudget!: pulumi.Output<string | undefined>;
    public readonly galleryApplications!: pulumi.Output<outputs.LinuxVirtualMachineGalleryApplication[] | undefined>;
    public readonly identity!: pulumi.Output<outputs.LinuxVirtualMachineIdentity | undefined>;
    public readonly licenseType!: pulumi.Output<string | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly maxBidPrice!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkInterfaceIds!: pulumi.Output<string[]>;
    public readonly osDisk!: pulumi.Output<outputs.LinuxVirtualMachineOsDisk>;
    public readonly osImageNotification!: pulumi.Output<outputs.LinuxVirtualMachineOsImageNotification | undefined>;
    public readonly patchAssessmentMode!: pulumi.Output<string | undefined>;
    public readonly patchMode!: pulumi.Output<string | undefined>;
    public readonly plan!: pulumi.Output<outputs.LinuxVirtualMachinePlan | undefined>;
    public readonly platformFaultDomain!: pulumi.Output<number | undefined>;
    public readonly priority!: pulumi.Output<string | undefined>;
    public /*out*/ readonly privateIpAddress!: pulumi.Output<string>;
    public /*out*/ readonly privateIpAddresses!: pulumi.Output<string[]>;
    public readonly provisionVmAgent!: pulumi.Output<boolean | undefined>;
    public readonly proximityPlacementGroupId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly publicIpAddress!: pulumi.Output<string>;
    public /*out*/ readonly publicIpAddresses!: pulumi.Output<string[]>;
    public readonly rebootSetting!: pulumi.Output<string | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly secrets!: pulumi.Output<outputs.LinuxVirtualMachineSecret[] | undefined>;
    public readonly secureBootEnabled!: pulumi.Output<boolean | undefined>;
    public readonly size!: pulumi.Output<string>;
    public readonly sourceImageId!: pulumi.Output<string | undefined>;
    public readonly sourceImageReference!: pulumi.Output<outputs.LinuxVirtualMachineSourceImageReference | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly terminationNotification!: pulumi.Output<outputs.LinuxVirtualMachineTerminationNotification | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.LinuxVirtualMachineTimeouts | undefined>;
    public readonly userData!: pulumi.Output<string | undefined>;
    public /*out*/ readonly virtualMachineId!: pulumi.Output<string>;
    public readonly virtualMachineScaleSetId!: pulumi.Output<string | undefined>;
    public readonly vmAgentPlatformUpdatesEnabled!: pulumi.Output<boolean | undefined>;
    public readonly vtpmEnabled!: pulumi.Output<boolean | undefined>;
    public readonly zone!: pulumi.Output<string | undefined>;

    /**
     * Create a LinuxVirtualMachine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LinuxVirtualMachineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LinuxVirtualMachineArgs | LinuxVirtualMachineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LinuxVirtualMachineState | undefined;
            resourceInputs["additionalCapabilities"] = state ? state.additionalCapabilities : undefined;
            resourceInputs["adminPassword"] = state ? state.adminPassword : undefined;
            resourceInputs["adminSshKeys"] = state ? state.adminSshKeys : undefined;
            resourceInputs["adminUsername"] = state ? state.adminUsername : undefined;
            resourceInputs["allowExtensionOperations"] = state ? state.allowExtensionOperations : undefined;
            resourceInputs["availabilitySetId"] = state ? state.availabilitySetId : undefined;
            resourceInputs["bootDiagnostics"] = state ? state.bootDiagnostics : undefined;
            resourceInputs["bypassPlatformSafetyChecksOnUserScheduleEnabled"] = state ? state.bypassPlatformSafetyChecksOnUserScheduleEnabled : undefined;
            resourceInputs["capacityReservationGroupId"] = state ? state.capacityReservationGroupId : undefined;
            resourceInputs["computerName"] = state ? state.computerName : undefined;
            resourceInputs["customData"] = state ? state.customData : undefined;
            resourceInputs["dedicatedHostGroupId"] = state ? state.dedicatedHostGroupId : undefined;
            resourceInputs["dedicatedHostId"] = state ? state.dedicatedHostId : undefined;
            resourceInputs["disablePasswordAuthentication"] = state ? state.disablePasswordAuthentication : undefined;
            resourceInputs["diskControllerType"] = state ? state.diskControllerType : undefined;
            resourceInputs["edgeZone"] = state ? state.edgeZone : undefined;
            resourceInputs["encryptionAtHostEnabled"] = state ? state.encryptionAtHostEnabled : undefined;
            resourceInputs["evictionPolicy"] = state ? state.evictionPolicy : undefined;
            resourceInputs["extensionsTimeBudget"] = state ? state.extensionsTimeBudget : undefined;
            resourceInputs["galleryApplications"] = state ? state.galleryApplications : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["licenseType"] = state ? state.licenseType : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["maxBidPrice"] = state ? state.maxBidPrice : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkInterfaceIds"] = state ? state.networkInterfaceIds : undefined;
            resourceInputs["osDisk"] = state ? state.osDisk : undefined;
            resourceInputs["osImageNotification"] = state ? state.osImageNotification : undefined;
            resourceInputs["patchAssessmentMode"] = state ? state.patchAssessmentMode : undefined;
            resourceInputs["patchMode"] = state ? state.patchMode : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["platformFaultDomain"] = state ? state.platformFaultDomain : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["privateIpAddress"] = state ? state.privateIpAddress : undefined;
            resourceInputs["privateIpAddresses"] = state ? state.privateIpAddresses : undefined;
            resourceInputs["provisionVmAgent"] = state ? state.provisionVmAgent : undefined;
            resourceInputs["proximityPlacementGroupId"] = state ? state.proximityPlacementGroupId : undefined;
            resourceInputs["publicIpAddress"] = state ? state.publicIpAddress : undefined;
            resourceInputs["publicIpAddresses"] = state ? state.publicIpAddresses : undefined;
            resourceInputs["rebootSetting"] = state ? state.rebootSetting : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["secrets"] = state ? state.secrets : undefined;
            resourceInputs["secureBootEnabled"] = state ? state.secureBootEnabled : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["sourceImageId"] = state ? state.sourceImageId : undefined;
            resourceInputs["sourceImageReference"] = state ? state.sourceImageReference : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["terminationNotification"] = state ? state.terminationNotification : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["virtualMachineId"] = state ? state.virtualMachineId : undefined;
            resourceInputs["virtualMachineScaleSetId"] = state ? state.virtualMachineScaleSetId : undefined;
            resourceInputs["vmAgentPlatformUpdatesEnabled"] = state ? state.vmAgentPlatformUpdatesEnabled : undefined;
            resourceInputs["vtpmEnabled"] = state ? state.vtpmEnabled : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as LinuxVirtualMachineArgs | undefined;
            if ((!args || args.adminUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminUsername'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.networkInterfaceIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkInterfaceIds'");
            }
            if ((!args || args.osDisk === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osDisk'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["additionalCapabilities"] = args ? args.additionalCapabilities : undefined;
            resourceInputs["adminPassword"] = args?.adminPassword ? pulumi.secret(args.adminPassword) : undefined;
            resourceInputs["adminSshKeys"] = args ? args.adminSshKeys : undefined;
            resourceInputs["adminUsername"] = args ? args.adminUsername : undefined;
            resourceInputs["allowExtensionOperations"] = args ? args.allowExtensionOperations : undefined;
            resourceInputs["availabilitySetId"] = args ? args.availabilitySetId : undefined;
            resourceInputs["bootDiagnostics"] = args ? args.bootDiagnostics : undefined;
            resourceInputs["bypassPlatformSafetyChecksOnUserScheduleEnabled"] = args ? args.bypassPlatformSafetyChecksOnUserScheduleEnabled : undefined;
            resourceInputs["capacityReservationGroupId"] = args ? args.capacityReservationGroupId : undefined;
            resourceInputs["computerName"] = args ? args.computerName : undefined;
            resourceInputs["customData"] = args?.customData ? pulumi.secret(args.customData) : undefined;
            resourceInputs["dedicatedHostGroupId"] = args ? args.dedicatedHostGroupId : undefined;
            resourceInputs["dedicatedHostId"] = args ? args.dedicatedHostId : undefined;
            resourceInputs["disablePasswordAuthentication"] = args ? args.disablePasswordAuthentication : undefined;
            resourceInputs["diskControllerType"] = args ? args.diskControllerType : undefined;
            resourceInputs["edgeZone"] = args ? args.edgeZone : undefined;
            resourceInputs["encryptionAtHostEnabled"] = args ? args.encryptionAtHostEnabled : undefined;
            resourceInputs["evictionPolicy"] = args ? args.evictionPolicy : undefined;
            resourceInputs["extensionsTimeBudget"] = args ? args.extensionsTimeBudget : undefined;
            resourceInputs["galleryApplications"] = args ? args.galleryApplications : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["licenseType"] = args ? args.licenseType : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["maxBidPrice"] = args ? args.maxBidPrice : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkInterfaceIds"] = args ? args.networkInterfaceIds : undefined;
            resourceInputs["osDisk"] = args ? args.osDisk : undefined;
            resourceInputs["osImageNotification"] = args ? args.osImageNotification : undefined;
            resourceInputs["patchAssessmentMode"] = args ? args.patchAssessmentMode : undefined;
            resourceInputs["patchMode"] = args ? args.patchMode : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["platformFaultDomain"] = args ? args.platformFaultDomain : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["provisionVmAgent"] = args ? args.provisionVmAgent : undefined;
            resourceInputs["proximityPlacementGroupId"] = args ? args.proximityPlacementGroupId : undefined;
            resourceInputs["rebootSetting"] = args ? args.rebootSetting : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["secrets"] = args ? args.secrets : undefined;
            resourceInputs["secureBootEnabled"] = args ? args.secureBootEnabled : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["sourceImageId"] = args ? args.sourceImageId : undefined;
            resourceInputs["sourceImageReference"] = args ? args.sourceImageReference : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["terminationNotification"] = args ? args.terminationNotification : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["virtualMachineScaleSetId"] = args ? args.virtualMachineScaleSetId : undefined;
            resourceInputs["vmAgentPlatformUpdatesEnabled"] = args ? args.vmAgentPlatformUpdatesEnabled : undefined;
            resourceInputs["vtpmEnabled"] = args ? args.vtpmEnabled : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["privateIpAddress"] = undefined /*out*/;
            resourceInputs["privateIpAddresses"] = undefined /*out*/;
            resourceInputs["publicIpAddress"] = undefined /*out*/;
            resourceInputs["publicIpAddresses"] = undefined /*out*/;
            resourceInputs["virtualMachineId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["adminPassword", "customData"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LinuxVirtualMachine.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LinuxVirtualMachine resources.
 */
export interface LinuxVirtualMachineState {
    additionalCapabilities?: pulumi.Input<inputs.LinuxVirtualMachineAdditionalCapabilities>;
    adminPassword?: pulumi.Input<string>;
    adminSshKeys?: pulumi.Input<pulumi.Input<inputs.LinuxVirtualMachineAdminSshKey>[]>;
    adminUsername?: pulumi.Input<string>;
    allowExtensionOperations?: pulumi.Input<boolean>;
    availabilitySetId?: pulumi.Input<string>;
    bootDiagnostics?: pulumi.Input<inputs.LinuxVirtualMachineBootDiagnostics>;
    bypassPlatformSafetyChecksOnUserScheduleEnabled?: pulumi.Input<boolean>;
    capacityReservationGroupId?: pulumi.Input<string>;
    computerName?: pulumi.Input<string>;
    customData?: pulumi.Input<string>;
    dedicatedHostGroupId?: pulumi.Input<string>;
    dedicatedHostId?: pulumi.Input<string>;
    disablePasswordAuthentication?: pulumi.Input<boolean>;
    diskControllerType?: pulumi.Input<string>;
    edgeZone?: pulumi.Input<string>;
    encryptionAtHostEnabled?: pulumi.Input<boolean>;
    evictionPolicy?: pulumi.Input<string>;
    extensionsTimeBudget?: pulumi.Input<string>;
    galleryApplications?: pulumi.Input<pulumi.Input<inputs.LinuxVirtualMachineGalleryApplication>[]>;
    identity?: pulumi.Input<inputs.LinuxVirtualMachineIdentity>;
    licenseType?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    maxBidPrice?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    networkInterfaceIds?: pulumi.Input<pulumi.Input<string>[]>;
    osDisk?: pulumi.Input<inputs.LinuxVirtualMachineOsDisk>;
    osImageNotification?: pulumi.Input<inputs.LinuxVirtualMachineOsImageNotification>;
    patchAssessmentMode?: pulumi.Input<string>;
    patchMode?: pulumi.Input<string>;
    plan?: pulumi.Input<inputs.LinuxVirtualMachinePlan>;
    platformFaultDomain?: pulumi.Input<number>;
    priority?: pulumi.Input<string>;
    privateIpAddress?: pulumi.Input<string>;
    privateIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    provisionVmAgent?: pulumi.Input<boolean>;
    proximityPlacementGroupId?: pulumi.Input<string>;
    publicIpAddress?: pulumi.Input<string>;
    publicIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    rebootSetting?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    secrets?: pulumi.Input<pulumi.Input<inputs.LinuxVirtualMachineSecret>[]>;
    secureBootEnabled?: pulumi.Input<boolean>;
    size?: pulumi.Input<string>;
    sourceImageId?: pulumi.Input<string>;
    sourceImageReference?: pulumi.Input<inputs.LinuxVirtualMachineSourceImageReference>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    terminationNotification?: pulumi.Input<inputs.LinuxVirtualMachineTerminationNotification>;
    timeouts?: pulumi.Input<inputs.LinuxVirtualMachineTimeouts>;
    userData?: pulumi.Input<string>;
    virtualMachineId?: pulumi.Input<string>;
    virtualMachineScaleSetId?: pulumi.Input<string>;
    vmAgentPlatformUpdatesEnabled?: pulumi.Input<boolean>;
    vtpmEnabled?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LinuxVirtualMachine resource.
 */
export interface LinuxVirtualMachineArgs {
    additionalCapabilities?: pulumi.Input<inputs.LinuxVirtualMachineAdditionalCapabilities>;
    adminPassword?: pulumi.Input<string>;
    adminSshKeys?: pulumi.Input<pulumi.Input<inputs.LinuxVirtualMachineAdminSshKey>[]>;
    adminUsername: pulumi.Input<string>;
    allowExtensionOperations?: pulumi.Input<boolean>;
    availabilitySetId?: pulumi.Input<string>;
    bootDiagnostics?: pulumi.Input<inputs.LinuxVirtualMachineBootDiagnostics>;
    bypassPlatformSafetyChecksOnUserScheduleEnabled?: pulumi.Input<boolean>;
    capacityReservationGroupId?: pulumi.Input<string>;
    computerName?: pulumi.Input<string>;
    customData?: pulumi.Input<string>;
    dedicatedHostGroupId?: pulumi.Input<string>;
    dedicatedHostId?: pulumi.Input<string>;
    disablePasswordAuthentication?: pulumi.Input<boolean>;
    diskControllerType?: pulumi.Input<string>;
    edgeZone?: pulumi.Input<string>;
    encryptionAtHostEnabled?: pulumi.Input<boolean>;
    evictionPolicy?: pulumi.Input<string>;
    extensionsTimeBudget?: pulumi.Input<string>;
    galleryApplications?: pulumi.Input<pulumi.Input<inputs.LinuxVirtualMachineGalleryApplication>[]>;
    identity?: pulumi.Input<inputs.LinuxVirtualMachineIdentity>;
    licenseType?: pulumi.Input<string>;
    location: pulumi.Input<string>;
    maxBidPrice?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    networkInterfaceIds: pulumi.Input<pulumi.Input<string>[]>;
    osDisk: pulumi.Input<inputs.LinuxVirtualMachineOsDisk>;
    osImageNotification?: pulumi.Input<inputs.LinuxVirtualMachineOsImageNotification>;
    patchAssessmentMode?: pulumi.Input<string>;
    patchMode?: pulumi.Input<string>;
    plan?: pulumi.Input<inputs.LinuxVirtualMachinePlan>;
    platformFaultDomain?: pulumi.Input<number>;
    priority?: pulumi.Input<string>;
    provisionVmAgent?: pulumi.Input<boolean>;
    proximityPlacementGroupId?: pulumi.Input<string>;
    rebootSetting?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    secrets?: pulumi.Input<pulumi.Input<inputs.LinuxVirtualMachineSecret>[]>;
    secureBootEnabled?: pulumi.Input<boolean>;
    size: pulumi.Input<string>;
    sourceImageId?: pulumi.Input<string>;
    sourceImageReference?: pulumi.Input<inputs.LinuxVirtualMachineSourceImageReference>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    terminationNotification?: pulumi.Input<inputs.LinuxVirtualMachineTerminationNotification>;
    timeouts?: pulumi.Input<inputs.LinuxVirtualMachineTimeouts>;
    userData?: pulumi.Input<string>;
    virtualMachineScaleSetId?: pulumi.Input<string>;
    vmAgentPlatformUpdatesEnabled?: pulumi.Input<boolean>;
    vtpmEnabled?: pulumi.Input<boolean>;
    zone?: pulumi.Input<string>;
}
