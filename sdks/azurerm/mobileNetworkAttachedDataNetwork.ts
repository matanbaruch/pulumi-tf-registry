// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MobileNetworkAttachedDataNetwork extends pulumi.CustomResource {
    /**
     * Get an existing MobileNetworkAttachedDataNetwork resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MobileNetworkAttachedDataNetworkState, opts?: pulumi.CustomResourceOptions): MobileNetworkAttachedDataNetwork {
        return new MobileNetworkAttachedDataNetwork(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/mobileNetworkAttachedDataNetwork:MobileNetworkAttachedDataNetwork';

    /**
     * Returns true if the given object is an instance of MobileNetworkAttachedDataNetwork.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MobileNetworkAttachedDataNetwork {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MobileNetworkAttachedDataNetwork.__pulumiType;
    }

    public readonly dnsAddresses!: pulumi.Output<string[]>;
    public readonly location!: pulumi.Output<string>;
    public readonly mobileNetworkDataNetworkName!: pulumi.Output<string>;
    public readonly mobileNetworkPacketCoreDataPlaneId!: pulumi.Output<string>;
    public readonly networkAddressPortTranslation!: pulumi.Output<outputs.MobileNetworkAttachedDataNetworkNetworkAddressPortTranslation | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.MobileNetworkAttachedDataNetworkTimeouts | undefined>;
    public readonly userEquipmentAddressPoolPrefixes!: pulumi.Output<string[] | undefined>;
    public readonly userEquipmentStaticAddressPoolPrefixes!: pulumi.Output<string[] | undefined>;
    public readonly userPlaneAccessIpv4Address!: pulumi.Output<string | undefined>;
    public readonly userPlaneAccessIpv4Gateway!: pulumi.Output<string | undefined>;
    public readonly userPlaneAccessIpv4Subnet!: pulumi.Output<string | undefined>;
    public readonly userPlaneAccessName!: pulumi.Output<string | undefined>;

    /**
     * Create a MobileNetworkAttachedDataNetwork resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MobileNetworkAttachedDataNetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MobileNetworkAttachedDataNetworkArgs | MobileNetworkAttachedDataNetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MobileNetworkAttachedDataNetworkState | undefined;
            resourceInputs["dnsAddresses"] = state ? state.dnsAddresses : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["mobileNetworkDataNetworkName"] = state ? state.mobileNetworkDataNetworkName : undefined;
            resourceInputs["mobileNetworkPacketCoreDataPlaneId"] = state ? state.mobileNetworkPacketCoreDataPlaneId : undefined;
            resourceInputs["networkAddressPortTranslation"] = state ? state.networkAddressPortTranslation : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userEquipmentAddressPoolPrefixes"] = state ? state.userEquipmentAddressPoolPrefixes : undefined;
            resourceInputs["userEquipmentStaticAddressPoolPrefixes"] = state ? state.userEquipmentStaticAddressPoolPrefixes : undefined;
            resourceInputs["userPlaneAccessIpv4Address"] = state ? state.userPlaneAccessIpv4Address : undefined;
            resourceInputs["userPlaneAccessIpv4Gateway"] = state ? state.userPlaneAccessIpv4Gateway : undefined;
            resourceInputs["userPlaneAccessIpv4Subnet"] = state ? state.userPlaneAccessIpv4Subnet : undefined;
            resourceInputs["userPlaneAccessName"] = state ? state.userPlaneAccessName : undefined;
        } else {
            const args = argsOrState as MobileNetworkAttachedDataNetworkArgs | undefined;
            if ((!args || args.dnsAddresses === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnsAddresses'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.mobileNetworkDataNetworkName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mobileNetworkDataNetworkName'");
            }
            if ((!args || args.mobileNetworkPacketCoreDataPlaneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mobileNetworkPacketCoreDataPlaneId'");
            }
            resourceInputs["dnsAddresses"] = args ? args.dnsAddresses : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["mobileNetworkDataNetworkName"] = args ? args.mobileNetworkDataNetworkName : undefined;
            resourceInputs["mobileNetworkPacketCoreDataPlaneId"] = args ? args.mobileNetworkPacketCoreDataPlaneId : undefined;
            resourceInputs["networkAddressPortTranslation"] = args ? args.networkAddressPortTranslation : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userEquipmentAddressPoolPrefixes"] = args ? args.userEquipmentAddressPoolPrefixes : undefined;
            resourceInputs["userEquipmentStaticAddressPoolPrefixes"] = args ? args.userEquipmentStaticAddressPoolPrefixes : undefined;
            resourceInputs["userPlaneAccessIpv4Address"] = args ? args.userPlaneAccessIpv4Address : undefined;
            resourceInputs["userPlaneAccessIpv4Gateway"] = args ? args.userPlaneAccessIpv4Gateway : undefined;
            resourceInputs["userPlaneAccessIpv4Subnet"] = args ? args.userPlaneAccessIpv4Subnet : undefined;
            resourceInputs["userPlaneAccessName"] = args ? args.userPlaneAccessName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MobileNetworkAttachedDataNetwork.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MobileNetworkAttachedDataNetwork resources.
 */
export interface MobileNetworkAttachedDataNetworkState {
    dnsAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    location?: pulumi.Input<string>;
    mobileNetworkDataNetworkName?: pulumi.Input<string>;
    mobileNetworkPacketCoreDataPlaneId?: pulumi.Input<string>;
    networkAddressPortTranslation?: pulumi.Input<inputs.MobileNetworkAttachedDataNetworkNetworkAddressPortTranslation>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.MobileNetworkAttachedDataNetworkTimeouts>;
    userEquipmentAddressPoolPrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    userEquipmentStaticAddressPoolPrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    userPlaneAccessIpv4Address?: pulumi.Input<string>;
    userPlaneAccessIpv4Gateway?: pulumi.Input<string>;
    userPlaneAccessIpv4Subnet?: pulumi.Input<string>;
    userPlaneAccessName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MobileNetworkAttachedDataNetwork resource.
 */
export interface MobileNetworkAttachedDataNetworkArgs {
    dnsAddresses: pulumi.Input<pulumi.Input<string>[]>;
    location: pulumi.Input<string>;
    mobileNetworkDataNetworkName: pulumi.Input<string>;
    mobileNetworkPacketCoreDataPlaneId: pulumi.Input<string>;
    networkAddressPortTranslation?: pulumi.Input<inputs.MobileNetworkAttachedDataNetworkNetworkAddressPortTranslation>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.MobileNetworkAttachedDataNetworkTimeouts>;
    userEquipmentAddressPoolPrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    userEquipmentStaticAddressPoolPrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    userPlaneAccessIpv4Address?: pulumi.Input<string>;
    userPlaneAccessIpv4Gateway?: pulumi.Input<string>;
    userPlaneAccessIpv4Subnet?: pulumi.Input<string>;
    userPlaneAccessName?: pulumi.Input<string>;
}
