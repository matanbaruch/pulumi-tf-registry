// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KubernetesFluxConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesFluxConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesFluxConfigurationState, opts?: pulumi.CustomResourceOptions): KubernetesFluxConfiguration {
        return new KubernetesFluxConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/kubernetesFluxConfiguration:KubernetesFluxConfiguration';

    /**
     * Returns true if the given object is an instance of KubernetesFluxConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesFluxConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesFluxConfiguration.__pulumiType;
    }

    public readonly blobStorage!: pulumi.Output<outputs.KubernetesFluxConfigurationBlobStorage | undefined>;
    public readonly bucket!: pulumi.Output<outputs.KubernetesFluxConfigurationBucket | undefined>;
    public readonly clusterId!: pulumi.Output<string>;
    public readonly continuousReconciliationEnabled!: pulumi.Output<boolean | undefined>;
    public readonly gitRepository!: pulumi.Output<outputs.KubernetesFluxConfigurationGitRepository | undefined>;
    public readonly kustomizations!: pulumi.Output<outputs.KubernetesFluxConfigurationKustomization[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string>;
    public readonly scope!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.KubernetesFluxConfigurationTimeouts | undefined>;

    /**
     * Create a KubernetesFluxConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesFluxConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesFluxConfigurationArgs | KubernetesFluxConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubernetesFluxConfigurationState | undefined;
            resourceInputs["blobStorage"] = state ? state.blobStorage : undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["continuousReconciliationEnabled"] = state ? state.continuousReconciliationEnabled : undefined;
            resourceInputs["gitRepository"] = state ? state.gitRepository : undefined;
            resourceInputs["kustomizations"] = state ? state.kustomizations : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as KubernetesFluxConfigurationArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.kustomizations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kustomizations'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            resourceInputs["blobStorage"] = args ? args.blobStorage : undefined;
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["continuousReconciliationEnabled"] = args ? args.continuousReconciliationEnabled : undefined;
            resourceInputs["gitRepository"] = args ? args.gitRepository : undefined;
            resourceInputs["kustomizations"] = args ? args.kustomizations : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KubernetesFluxConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KubernetesFluxConfiguration resources.
 */
export interface KubernetesFluxConfigurationState {
    blobStorage?: pulumi.Input<inputs.KubernetesFluxConfigurationBlobStorage>;
    bucket?: pulumi.Input<inputs.KubernetesFluxConfigurationBucket>;
    clusterId?: pulumi.Input<string>;
    continuousReconciliationEnabled?: pulumi.Input<boolean>;
    gitRepository?: pulumi.Input<inputs.KubernetesFluxConfigurationGitRepository>;
    kustomizations?: pulumi.Input<pulumi.Input<inputs.KubernetesFluxConfigurationKustomization>[]>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KubernetesFluxConfigurationTimeouts>;
}

/**
 * The set of arguments for constructing a KubernetesFluxConfiguration resource.
 */
export interface KubernetesFluxConfigurationArgs {
    blobStorage?: pulumi.Input<inputs.KubernetesFluxConfigurationBlobStorage>;
    bucket?: pulumi.Input<inputs.KubernetesFluxConfigurationBucket>;
    clusterId: pulumi.Input<string>;
    continuousReconciliationEnabled?: pulumi.Input<boolean>;
    gitRepository?: pulumi.Input<inputs.KubernetesFluxConfigurationGitRepository>;
    kustomizations: pulumi.Input<pulumi.Input<inputs.KubernetesFluxConfigurationKustomization>[]>;
    name?: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KubernetesFluxConfigurationTimeouts>;
}
