// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SpringCloudGateway extends pulumi.CustomResource {
    /**
     * Get an existing SpringCloudGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SpringCloudGatewayState, opts?: pulumi.CustomResourceOptions): SpringCloudGateway {
        return new SpringCloudGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/springCloudGateway:SpringCloudGateway';

    /**
     * Returns true if the given object is an instance of SpringCloudGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SpringCloudGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SpringCloudGateway.__pulumiType;
    }

    public readonly apiMetadata!: pulumi.Output<outputs.SpringCloudGatewayApiMetadata | undefined>;
    public readonly applicationPerformanceMonitoringIds!: pulumi.Output<string[] | undefined>;
    public readonly applicationPerformanceMonitoringTypes!: pulumi.Output<string[] | undefined>;
    public readonly clientAuthorization!: pulumi.Output<outputs.SpringCloudGatewayClientAuthorization | undefined>;
    public readonly cors!: pulumi.Output<outputs.SpringCloudGatewayCors | undefined>;
    public readonly environmentVariables!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly httpsOnly!: pulumi.Output<boolean | undefined>;
    public readonly instanceCount!: pulumi.Output<number | undefined>;
    public readonly localResponseCachePerInstance!: pulumi.Output<outputs.SpringCloudGatewayLocalResponseCachePerInstance | undefined>;
    public readonly localResponseCachePerRoute!: pulumi.Output<outputs.SpringCloudGatewayLocalResponseCachePerRoute | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly publicNetworkAccessEnabled!: pulumi.Output<boolean | undefined>;
    public readonly quota!: pulumi.Output<outputs.SpringCloudGatewayQuota | undefined>;
    public readonly sensitiveEnvironmentVariables!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly springCloudServiceId!: pulumi.Output<string>;
    public readonly sso!: pulumi.Output<outputs.SpringCloudGatewaySso | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.SpringCloudGatewayTimeouts | undefined>;
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a SpringCloudGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SpringCloudGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SpringCloudGatewayArgs | SpringCloudGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SpringCloudGatewayState | undefined;
            resourceInputs["apiMetadata"] = state ? state.apiMetadata : undefined;
            resourceInputs["applicationPerformanceMonitoringIds"] = state ? state.applicationPerformanceMonitoringIds : undefined;
            resourceInputs["applicationPerformanceMonitoringTypes"] = state ? state.applicationPerformanceMonitoringTypes : undefined;
            resourceInputs["clientAuthorization"] = state ? state.clientAuthorization : undefined;
            resourceInputs["cors"] = state ? state.cors : undefined;
            resourceInputs["environmentVariables"] = state ? state.environmentVariables : undefined;
            resourceInputs["httpsOnly"] = state ? state.httpsOnly : undefined;
            resourceInputs["instanceCount"] = state ? state.instanceCount : undefined;
            resourceInputs["localResponseCachePerInstance"] = state ? state.localResponseCachePerInstance : undefined;
            resourceInputs["localResponseCachePerRoute"] = state ? state.localResponseCachePerRoute : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            resourceInputs["quota"] = state ? state.quota : undefined;
            resourceInputs["sensitiveEnvironmentVariables"] = state ? state.sensitiveEnvironmentVariables : undefined;
            resourceInputs["springCloudServiceId"] = state ? state.springCloudServiceId : undefined;
            resourceInputs["sso"] = state ? state.sso : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as SpringCloudGatewayArgs | undefined;
            if ((!args || args.springCloudServiceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'springCloudServiceId'");
            }
            resourceInputs["apiMetadata"] = args ? args.apiMetadata : undefined;
            resourceInputs["applicationPerformanceMonitoringIds"] = args ? args.applicationPerformanceMonitoringIds : undefined;
            resourceInputs["applicationPerformanceMonitoringTypes"] = args ? args.applicationPerformanceMonitoringTypes : undefined;
            resourceInputs["clientAuthorization"] = args ? args.clientAuthorization : undefined;
            resourceInputs["cors"] = args ? args.cors : undefined;
            resourceInputs["environmentVariables"] = args ? args.environmentVariables : undefined;
            resourceInputs["httpsOnly"] = args ? args.httpsOnly : undefined;
            resourceInputs["instanceCount"] = args ? args.instanceCount : undefined;
            resourceInputs["localResponseCachePerInstance"] = args ? args.localResponseCachePerInstance : undefined;
            resourceInputs["localResponseCachePerRoute"] = args ? args.localResponseCachePerRoute : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            resourceInputs["quota"] = args ? args.quota : undefined;
            resourceInputs["sensitiveEnvironmentVariables"] = args?.sensitiveEnvironmentVariables ? pulumi.secret(args.sensitiveEnvironmentVariables) : undefined;
            resourceInputs["springCloudServiceId"] = args ? args.springCloudServiceId : undefined;
            resourceInputs["sso"] = args ? args.sso : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sensitiveEnvironmentVariables"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SpringCloudGateway.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SpringCloudGateway resources.
 */
export interface SpringCloudGatewayState {
    apiMetadata?: pulumi.Input<inputs.SpringCloudGatewayApiMetadata>;
    applicationPerformanceMonitoringIds?: pulumi.Input<pulumi.Input<string>[]>;
    applicationPerformanceMonitoringTypes?: pulumi.Input<pulumi.Input<string>[]>;
    clientAuthorization?: pulumi.Input<inputs.SpringCloudGatewayClientAuthorization>;
    cors?: pulumi.Input<inputs.SpringCloudGatewayCors>;
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    httpsOnly?: pulumi.Input<boolean>;
    instanceCount?: pulumi.Input<number>;
    localResponseCachePerInstance?: pulumi.Input<inputs.SpringCloudGatewayLocalResponseCachePerInstance>;
    localResponseCachePerRoute?: pulumi.Input<inputs.SpringCloudGatewayLocalResponseCachePerRoute>;
    name?: pulumi.Input<string>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    quota?: pulumi.Input<inputs.SpringCloudGatewayQuota>;
    sensitiveEnvironmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    springCloudServiceId?: pulumi.Input<string>;
    sso?: pulumi.Input<inputs.SpringCloudGatewaySso>;
    timeouts?: pulumi.Input<inputs.SpringCloudGatewayTimeouts>;
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SpringCloudGateway resource.
 */
export interface SpringCloudGatewayArgs {
    apiMetadata?: pulumi.Input<inputs.SpringCloudGatewayApiMetadata>;
    applicationPerformanceMonitoringIds?: pulumi.Input<pulumi.Input<string>[]>;
    applicationPerformanceMonitoringTypes?: pulumi.Input<pulumi.Input<string>[]>;
    clientAuthorization?: pulumi.Input<inputs.SpringCloudGatewayClientAuthorization>;
    cors?: pulumi.Input<inputs.SpringCloudGatewayCors>;
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    httpsOnly?: pulumi.Input<boolean>;
    instanceCount?: pulumi.Input<number>;
    localResponseCachePerInstance?: pulumi.Input<inputs.SpringCloudGatewayLocalResponseCachePerInstance>;
    localResponseCachePerRoute?: pulumi.Input<inputs.SpringCloudGatewayLocalResponseCachePerRoute>;
    name?: pulumi.Input<string>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    quota?: pulumi.Input<inputs.SpringCloudGatewayQuota>;
    sensitiveEnvironmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    springCloudServiceId: pulumi.Input<string>;
    sso?: pulumi.Input<inputs.SpringCloudGatewaySso>;
    timeouts?: pulumi.Input<inputs.SpringCloudGatewayTimeouts>;
}
