// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EventhubNamespace extends pulumi.CustomResource {
    /**
     * Get an existing EventhubNamespace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EventhubNamespaceState, opts?: pulumi.CustomResourceOptions): EventhubNamespace {
        return new EventhubNamespace(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/eventhubNamespace:EventhubNamespace';

    /**
     * Returns true if the given object is an instance of EventhubNamespace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventhubNamespace {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventhubNamespace.__pulumiType;
    }

    public readonly autoInflateEnabled!: pulumi.Output<boolean | undefined>;
    public readonly capacity!: pulumi.Output<number | undefined>;
    public readonly dedicatedClusterId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly defaultPrimaryConnectionString!: pulumi.Output<string>;
    public /*out*/ readonly defaultPrimaryConnectionStringAlias!: pulumi.Output<string>;
    public /*out*/ readonly defaultPrimaryKey!: pulumi.Output<string>;
    public /*out*/ readonly defaultSecondaryConnectionString!: pulumi.Output<string>;
    public /*out*/ readonly defaultSecondaryConnectionStringAlias!: pulumi.Output<string>;
    public /*out*/ readonly defaultSecondaryKey!: pulumi.Output<string>;
    public readonly identity!: pulumi.Output<outputs.EventhubNamespaceIdentity | undefined>;
    public readonly localAuthenticationEnabled!: pulumi.Output<boolean | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly maximumThroughputUnits!: pulumi.Output<number | undefined>;
    public readonly minimumTlsVersion!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkRulesets!: pulumi.Output<outputs.EventhubNamespaceNetworkRuleset[]>;
    public readonly publicNetworkAccessEnabled!: pulumi.Output<boolean | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly sku!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.EventhubNamespaceTimeouts | undefined>;

    /**
     * Create a EventhubNamespace resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventhubNamespaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EventhubNamespaceArgs | EventhubNamespaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EventhubNamespaceState | undefined;
            resourceInputs["autoInflateEnabled"] = state ? state.autoInflateEnabled : undefined;
            resourceInputs["capacity"] = state ? state.capacity : undefined;
            resourceInputs["dedicatedClusterId"] = state ? state.dedicatedClusterId : undefined;
            resourceInputs["defaultPrimaryConnectionString"] = state ? state.defaultPrimaryConnectionString : undefined;
            resourceInputs["defaultPrimaryConnectionStringAlias"] = state ? state.defaultPrimaryConnectionStringAlias : undefined;
            resourceInputs["defaultPrimaryKey"] = state ? state.defaultPrimaryKey : undefined;
            resourceInputs["defaultSecondaryConnectionString"] = state ? state.defaultSecondaryConnectionString : undefined;
            resourceInputs["defaultSecondaryConnectionStringAlias"] = state ? state.defaultSecondaryConnectionStringAlias : undefined;
            resourceInputs["defaultSecondaryKey"] = state ? state.defaultSecondaryKey : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["localAuthenticationEnabled"] = state ? state.localAuthenticationEnabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["maximumThroughputUnits"] = state ? state.maximumThroughputUnits : undefined;
            resourceInputs["minimumTlsVersion"] = state ? state.minimumTlsVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkRulesets"] = state ? state.networkRulesets : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["sku"] = state ? state.sku : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as EventhubNamespaceArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.sku === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sku'");
            }
            resourceInputs["autoInflateEnabled"] = args ? args.autoInflateEnabled : undefined;
            resourceInputs["capacity"] = args ? args.capacity : undefined;
            resourceInputs["dedicatedClusterId"] = args ? args.dedicatedClusterId : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["localAuthenticationEnabled"] = args ? args.localAuthenticationEnabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["maximumThroughputUnits"] = args ? args.maximumThroughputUnits : undefined;
            resourceInputs["minimumTlsVersion"] = args ? args.minimumTlsVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkRulesets"] = args ? args.networkRulesets : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["defaultPrimaryConnectionString"] = undefined /*out*/;
            resourceInputs["defaultPrimaryConnectionStringAlias"] = undefined /*out*/;
            resourceInputs["defaultPrimaryKey"] = undefined /*out*/;
            resourceInputs["defaultSecondaryConnectionString"] = undefined /*out*/;
            resourceInputs["defaultSecondaryConnectionStringAlias"] = undefined /*out*/;
            resourceInputs["defaultSecondaryKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["defaultPrimaryConnectionString", "defaultPrimaryConnectionStringAlias", "defaultPrimaryKey", "defaultSecondaryConnectionString", "defaultSecondaryConnectionStringAlias", "defaultSecondaryKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(EventhubNamespace.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EventhubNamespace resources.
 */
export interface EventhubNamespaceState {
    autoInflateEnabled?: pulumi.Input<boolean>;
    capacity?: pulumi.Input<number>;
    dedicatedClusterId?: pulumi.Input<string>;
    defaultPrimaryConnectionString?: pulumi.Input<string>;
    defaultPrimaryConnectionStringAlias?: pulumi.Input<string>;
    defaultPrimaryKey?: pulumi.Input<string>;
    defaultSecondaryConnectionString?: pulumi.Input<string>;
    defaultSecondaryConnectionStringAlias?: pulumi.Input<string>;
    defaultSecondaryKey?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.EventhubNamespaceIdentity>;
    localAuthenticationEnabled?: pulumi.Input<boolean>;
    location?: pulumi.Input<string>;
    maximumThroughputUnits?: pulumi.Input<number>;
    minimumTlsVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkRulesets?: pulumi.Input<pulumi.Input<inputs.EventhubNamespaceNetworkRuleset>[]>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    resourceGroupName?: pulumi.Input<string>;
    sku?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.EventhubNamespaceTimeouts>;
}

/**
 * The set of arguments for constructing a EventhubNamespace resource.
 */
export interface EventhubNamespaceArgs {
    autoInflateEnabled?: pulumi.Input<boolean>;
    capacity?: pulumi.Input<number>;
    dedicatedClusterId?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.EventhubNamespaceIdentity>;
    localAuthenticationEnabled?: pulumi.Input<boolean>;
    location: pulumi.Input<string>;
    maximumThroughputUnits?: pulumi.Input<number>;
    minimumTlsVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkRulesets?: pulumi.Input<pulumi.Input<inputs.EventhubNamespaceNetworkRuleset>[]>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    resourceGroupName: pulumi.Input<string>;
    sku: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.EventhubNamespaceTimeouts>;
}
