// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KeyVaultCertificate extends pulumi.CustomResource {
    /**
     * Get an existing KeyVaultCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeyVaultCertificateState, opts?: pulumi.CustomResourceOptions): KeyVaultCertificate {
        return new KeyVaultCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/keyVaultCertificate:KeyVaultCertificate';

    /**
     * Returns true if the given object is an instance of KeyVaultCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KeyVaultCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeyVaultCertificate.__pulumiType;
    }

    public readonly certificate!: pulumi.Output<outputs.KeyVaultCertificateCertificate | undefined>;
    public /*out*/ readonly certificateAttributes!: pulumi.Output<outputs.KeyVaultCertificateCertificateAttribute[]>;
    public /*out*/ readonly certificateData!: pulumi.Output<string>;
    public /*out*/ readonly certificateDataBase64!: pulumi.Output<string>;
    public readonly certificatePolicy!: pulumi.Output<outputs.KeyVaultCertificateCertificatePolicy | undefined>;
    public readonly keyVaultId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly resourceManagerId!: pulumi.Output<string>;
    public /*out*/ readonly resourceManagerVersionlessId!: pulumi.Output<string>;
    public /*out*/ readonly secretId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly thumbprint!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.KeyVaultCertificateTimeouts | undefined>;
    public /*out*/ readonly version!: pulumi.Output<string>;
    public /*out*/ readonly versionlessId!: pulumi.Output<string>;
    public /*out*/ readonly versionlessSecretId!: pulumi.Output<string>;

    /**
     * Create a KeyVaultCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeyVaultCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeyVaultCertificateArgs | KeyVaultCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeyVaultCertificateState | undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["certificateAttributes"] = state ? state.certificateAttributes : undefined;
            resourceInputs["certificateData"] = state ? state.certificateData : undefined;
            resourceInputs["certificateDataBase64"] = state ? state.certificateDataBase64 : undefined;
            resourceInputs["certificatePolicy"] = state ? state.certificatePolicy : undefined;
            resourceInputs["keyVaultId"] = state ? state.keyVaultId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceManagerId"] = state ? state.resourceManagerId : undefined;
            resourceInputs["resourceManagerVersionlessId"] = state ? state.resourceManagerVersionlessId : undefined;
            resourceInputs["secretId"] = state ? state.secretId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["thumbprint"] = state ? state.thumbprint : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["versionlessId"] = state ? state.versionlessId : undefined;
            resourceInputs["versionlessSecretId"] = state ? state.versionlessSecretId : undefined;
        } else {
            const args = argsOrState as KeyVaultCertificateArgs | undefined;
            if ((!args || args.keyVaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyVaultId'");
            }
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["certificatePolicy"] = args ? args.certificatePolicy : undefined;
            resourceInputs["keyVaultId"] = args ? args.keyVaultId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["certificateAttributes"] = undefined /*out*/;
            resourceInputs["certificateData"] = undefined /*out*/;
            resourceInputs["certificateDataBase64"] = undefined /*out*/;
            resourceInputs["resourceManagerId"] = undefined /*out*/;
            resourceInputs["resourceManagerVersionlessId"] = undefined /*out*/;
            resourceInputs["secretId"] = undefined /*out*/;
            resourceInputs["thumbprint"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
            resourceInputs["versionlessId"] = undefined /*out*/;
            resourceInputs["versionlessSecretId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KeyVaultCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KeyVaultCertificate resources.
 */
export interface KeyVaultCertificateState {
    certificate?: pulumi.Input<inputs.KeyVaultCertificateCertificate>;
    certificateAttributes?: pulumi.Input<pulumi.Input<inputs.KeyVaultCertificateCertificateAttribute>[]>;
    certificateData?: pulumi.Input<string>;
    certificateDataBase64?: pulumi.Input<string>;
    certificatePolicy?: pulumi.Input<inputs.KeyVaultCertificateCertificatePolicy>;
    keyVaultId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    resourceManagerId?: pulumi.Input<string>;
    resourceManagerVersionlessId?: pulumi.Input<string>;
    secretId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    thumbprint?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KeyVaultCertificateTimeouts>;
    version?: pulumi.Input<string>;
    versionlessId?: pulumi.Input<string>;
    versionlessSecretId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KeyVaultCertificate resource.
 */
export interface KeyVaultCertificateArgs {
    certificate?: pulumi.Input<inputs.KeyVaultCertificateCertificate>;
    certificatePolicy?: pulumi.Input<inputs.KeyVaultCertificateCertificatePolicy>;
    keyVaultId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.KeyVaultCertificateTimeouts>;
}
