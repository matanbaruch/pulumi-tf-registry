// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StorageTableEntity extends pulumi.CustomResource {
    /**
     * Get an existing StorageTableEntity resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageTableEntityState, opts?: pulumi.CustomResourceOptions): StorageTableEntity {
        return new StorageTableEntity(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/storageTableEntity:StorageTableEntity';

    /**
     * Returns true if the given object is an instance of StorageTableEntity.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageTableEntity {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageTableEntity.__pulumiType;
    }

    public readonly entity!: pulumi.Output<{[key: string]: string}>;
    public readonly partitionKey!: pulumi.Output<string>;
    public readonly rowKey!: pulumi.Output<string>;
    public readonly storageTableId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.StorageTableEntityTimeouts | undefined>;

    /**
     * Create a StorageTableEntity resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageTableEntityArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageTableEntityArgs | StorageTableEntityState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageTableEntityState | undefined;
            resourceInputs["entity"] = state ? state.entity : undefined;
            resourceInputs["partitionKey"] = state ? state.partitionKey : undefined;
            resourceInputs["rowKey"] = state ? state.rowKey : undefined;
            resourceInputs["storageTableId"] = state ? state.storageTableId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as StorageTableEntityArgs | undefined;
            if ((!args || args.entity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entity'");
            }
            if ((!args || args.partitionKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'partitionKey'");
            }
            if ((!args || args.rowKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rowKey'");
            }
            if ((!args || args.storageTableId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageTableId'");
            }
            resourceInputs["entity"] = args ? args.entity : undefined;
            resourceInputs["partitionKey"] = args ? args.partitionKey : undefined;
            resourceInputs["rowKey"] = args ? args.rowKey : undefined;
            resourceInputs["storageTableId"] = args ? args.storageTableId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageTableEntity.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageTableEntity resources.
 */
export interface StorageTableEntityState {
    entity?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    partitionKey?: pulumi.Input<string>;
    rowKey?: pulumi.Input<string>;
    storageTableId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StorageTableEntityTimeouts>;
}

/**
 * The set of arguments for constructing a StorageTableEntity resource.
 */
export interface StorageTableEntityArgs {
    entity: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    partitionKey: pulumi.Input<string>;
    rowKey: pulumi.Input<string>;
    storageTableId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StorageTableEntityTimeouts>;
}
