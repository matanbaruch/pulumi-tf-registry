// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SynapseWorkspaceKey extends pulumi.CustomResource {
    /**
     * Get an existing SynapseWorkspaceKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SynapseWorkspaceKeyState, opts?: pulumi.CustomResourceOptions): SynapseWorkspaceKey {
        return new SynapseWorkspaceKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/synapseWorkspaceKey:SynapseWorkspaceKey';

    /**
     * Returns true if the given object is an instance of SynapseWorkspaceKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SynapseWorkspaceKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SynapseWorkspaceKey.__pulumiType;
    }

    public readonly active!: pulumi.Output<boolean>;
    public readonly customerManagedKeyName!: pulumi.Output<string>;
    public readonly customerManagedKeyVersionlessId!: pulumi.Output<string | undefined>;
    public readonly synapseWorkspaceId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.SynapseWorkspaceKeyTimeouts | undefined>;

    /**
     * Create a SynapseWorkspaceKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SynapseWorkspaceKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SynapseWorkspaceKeyArgs | SynapseWorkspaceKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SynapseWorkspaceKeyState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["customerManagedKeyName"] = state ? state.customerManagedKeyName : undefined;
            resourceInputs["customerManagedKeyVersionlessId"] = state ? state.customerManagedKeyVersionlessId : undefined;
            resourceInputs["synapseWorkspaceId"] = state ? state.synapseWorkspaceId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as SynapseWorkspaceKeyArgs | undefined;
            if ((!args || args.active === undefined) && !opts.urn) {
                throw new Error("Missing required property 'active'");
            }
            if ((!args || args.customerManagedKeyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'customerManagedKeyName'");
            }
            if ((!args || args.synapseWorkspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'synapseWorkspaceId'");
            }
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["customerManagedKeyName"] = args ? args.customerManagedKeyName : undefined;
            resourceInputs["customerManagedKeyVersionlessId"] = args ? args.customerManagedKeyVersionlessId : undefined;
            resourceInputs["synapseWorkspaceId"] = args ? args.synapseWorkspaceId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SynapseWorkspaceKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SynapseWorkspaceKey resources.
 */
export interface SynapseWorkspaceKeyState {
    active?: pulumi.Input<boolean>;
    customerManagedKeyName?: pulumi.Input<string>;
    customerManagedKeyVersionlessId?: pulumi.Input<string>;
    synapseWorkspaceId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SynapseWorkspaceKeyTimeouts>;
}

/**
 * The set of arguments for constructing a SynapseWorkspaceKey resource.
 */
export interface SynapseWorkspaceKeyArgs {
    active: pulumi.Input<boolean>;
    customerManagedKeyName: pulumi.Input<string>;
    customerManagedKeyVersionlessId?: pulumi.Input<string>;
    synapseWorkspaceId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SynapseWorkspaceKeyTimeouts>;
}
