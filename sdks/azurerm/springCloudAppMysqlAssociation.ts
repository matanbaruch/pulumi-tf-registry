// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SpringCloudAppMysqlAssociation extends pulumi.CustomResource {
    /**
     * Get an existing SpringCloudAppMysqlAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SpringCloudAppMysqlAssociationState, opts?: pulumi.CustomResourceOptions): SpringCloudAppMysqlAssociation {
        return new SpringCloudAppMysqlAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/springCloudAppMysqlAssociation:SpringCloudAppMysqlAssociation';

    /**
     * Returns true if the given object is an instance of SpringCloudAppMysqlAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SpringCloudAppMysqlAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SpringCloudAppMysqlAssociation.__pulumiType;
    }

    public readonly databaseName!: pulumi.Output<string>;
    public readonly mysqlServerId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string>;
    public readonly springCloudAppId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.SpringCloudAppMysqlAssociationTimeouts | undefined>;
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a SpringCloudAppMysqlAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SpringCloudAppMysqlAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SpringCloudAppMysqlAssociationArgs | SpringCloudAppMysqlAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SpringCloudAppMysqlAssociationState | undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["mysqlServerId"] = state ? state.mysqlServerId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["springCloudAppId"] = state ? state.springCloudAppId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as SpringCloudAppMysqlAssociationArgs | undefined;
            if ((!args || args.databaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if ((!args || args.mysqlServerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mysqlServerId'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.springCloudAppId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'springCloudAppId'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["mysqlServerId"] = args ? args.mysqlServerId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["springCloudAppId"] = args ? args.springCloudAppId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SpringCloudAppMysqlAssociation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SpringCloudAppMysqlAssociation resources.
 */
export interface SpringCloudAppMysqlAssociationState {
    databaseName?: pulumi.Input<string>;
    mysqlServerId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    springCloudAppId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SpringCloudAppMysqlAssociationTimeouts>;
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SpringCloudAppMysqlAssociation resource.
 */
export interface SpringCloudAppMysqlAssociationArgs {
    databaseName: pulumi.Input<string>;
    mysqlServerId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    password: pulumi.Input<string>;
    springCloudAppId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SpringCloudAppMysqlAssociationTimeouts>;
    username: pulumi.Input<string>;
}
