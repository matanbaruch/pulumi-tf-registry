// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ExpressRouteCircuitPeering extends pulumi.CustomResource {
    /**
     * Get an existing ExpressRouteCircuitPeering resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExpressRouteCircuitPeeringState, opts?: pulumi.CustomResourceOptions): ExpressRouteCircuitPeering {
        return new ExpressRouteCircuitPeering(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/expressRouteCircuitPeering:ExpressRouteCircuitPeering';

    /**
     * Returns true if the given object is an instance of ExpressRouteCircuitPeering.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExpressRouteCircuitPeering {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExpressRouteCircuitPeering.__pulumiType;
    }

    public /*out*/ readonly azureAsn!: pulumi.Output<number>;
    public readonly expressRouteCircuitName!: pulumi.Output<string>;
    public /*out*/ readonly gatewayManagerEtag!: pulumi.Output<string>;
    public readonly ipv4Enabled!: pulumi.Output<boolean | undefined>;
    public readonly ipv6!: pulumi.Output<outputs.ExpressRouteCircuitPeeringIpv6 | undefined>;
    public readonly microsoftPeeringConfig!: pulumi.Output<outputs.ExpressRouteCircuitPeeringMicrosoftPeeringConfig | undefined>;
    public readonly peerAsn!: pulumi.Output<number>;
    public readonly peeringType!: pulumi.Output<string>;
    public /*out*/ readonly primaryAzurePort!: pulumi.Output<string>;
    public readonly primaryPeerAddressPrefix!: pulumi.Output<string | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly routeFilterId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly secondaryAzurePort!: pulumi.Output<string>;
    public readonly secondaryPeerAddressPrefix!: pulumi.Output<string | undefined>;
    public readonly sharedKey!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ExpressRouteCircuitPeeringTimeouts | undefined>;
    public readonly vlanId!: pulumi.Output<number>;

    /**
     * Create a ExpressRouteCircuitPeering resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExpressRouteCircuitPeeringArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExpressRouteCircuitPeeringArgs | ExpressRouteCircuitPeeringState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExpressRouteCircuitPeeringState | undefined;
            resourceInputs["azureAsn"] = state ? state.azureAsn : undefined;
            resourceInputs["expressRouteCircuitName"] = state ? state.expressRouteCircuitName : undefined;
            resourceInputs["gatewayManagerEtag"] = state ? state.gatewayManagerEtag : undefined;
            resourceInputs["ipv4Enabled"] = state ? state.ipv4Enabled : undefined;
            resourceInputs["ipv6"] = state ? state.ipv6 : undefined;
            resourceInputs["microsoftPeeringConfig"] = state ? state.microsoftPeeringConfig : undefined;
            resourceInputs["peerAsn"] = state ? state.peerAsn : undefined;
            resourceInputs["peeringType"] = state ? state.peeringType : undefined;
            resourceInputs["primaryAzurePort"] = state ? state.primaryAzurePort : undefined;
            resourceInputs["primaryPeerAddressPrefix"] = state ? state.primaryPeerAddressPrefix : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["routeFilterId"] = state ? state.routeFilterId : undefined;
            resourceInputs["secondaryAzurePort"] = state ? state.secondaryAzurePort : undefined;
            resourceInputs["secondaryPeerAddressPrefix"] = state ? state.secondaryPeerAddressPrefix : undefined;
            resourceInputs["sharedKey"] = state ? state.sharedKey : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vlanId"] = state ? state.vlanId : undefined;
        } else {
            const args = argsOrState as ExpressRouteCircuitPeeringArgs | undefined;
            if ((!args || args.expressRouteCircuitName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'expressRouteCircuitName'");
            }
            if ((!args || args.peeringType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peeringType'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.vlanId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vlanId'");
            }
            resourceInputs["expressRouteCircuitName"] = args ? args.expressRouteCircuitName : undefined;
            resourceInputs["ipv4Enabled"] = args ? args.ipv4Enabled : undefined;
            resourceInputs["ipv6"] = args ? args.ipv6 : undefined;
            resourceInputs["microsoftPeeringConfig"] = args ? args.microsoftPeeringConfig : undefined;
            resourceInputs["peerAsn"] = args ? args.peerAsn : undefined;
            resourceInputs["peeringType"] = args ? args.peeringType : undefined;
            resourceInputs["primaryPeerAddressPrefix"] = args ? args.primaryPeerAddressPrefix : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["routeFilterId"] = args ? args.routeFilterId : undefined;
            resourceInputs["secondaryPeerAddressPrefix"] = args ? args.secondaryPeerAddressPrefix : undefined;
            resourceInputs["sharedKey"] = args?.sharedKey ? pulumi.secret(args.sharedKey) : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vlanId"] = args ? args.vlanId : undefined;
            resourceInputs["azureAsn"] = undefined /*out*/;
            resourceInputs["gatewayManagerEtag"] = undefined /*out*/;
            resourceInputs["primaryAzurePort"] = undefined /*out*/;
            resourceInputs["secondaryAzurePort"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sharedKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ExpressRouteCircuitPeering.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ExpressRouteCircuitPeering resources.
 */
export interface ExpressRouteCircuitPeeringState {
    azureAsn?: pulumi.Input<number>;
    expressRouteCircuitName?: pulumi.Input<string>;
    gatewayManagerEtag?: pulumi.Input<string>;
    ipv4Enabled?: pulumi.Input<boolean>;
    ipv6?: pulumi.Input<inputs.ExpressRouteCircuitPeeringIpv6>;
    microsoftPeeringConfig?: pulumi.Input<inputs.ExpressRouteCircuitPeeringMicrosoftPeeringConfig>;
    peerAsn?: pulumi.Input<number>;
    peeringType?: pulumi.Input<string>;
    primaryAzurePort?: pulumi.Input<string>;
    primaryPeerAddressPrefix?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    routeFilterId?: pulumi.Input<string>;
    secondaryAzurePort?: pulumi.Input<string>;
    secondaryPeerAddressPrefix?: pulumi.Input<string>;
    sharedKey?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ExpressRouteCircuitPeeringTimeouts>;
    vlanId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ExpressRouteCircuitPeering resource.
 */
export interface ExpressRouteCircuitPeeringArgs {
    expressRouteCircuitName: pulumi.Input<string>;
    ipv4Enabled?: pulumi.Input<boolean>;
    ipv6?: pulumi.Input<inputs.ExpressRouteCircuitPeeringIpv6>;
    microsoftPeeringConfig?: pulumi.Input<inputs.ExpressRouteCircuitPeeringMicrosoftPeeringConfig>;
    peerAsn?: pulumi.Input<number>;
    peeringType: pulumi.Input<string>;
    primaryPeerAddressPrefix?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    routeFilterId?: pulumi.Input<string>;
    secondaryPeerAddressPrefix?: pulumi.Input<string>;
    sharedKey?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ExpressRouteCircuitPeeringTimeouts>;
    vlanId: pulumi.Input<number>;
}
