// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNginxDeployment(args: GetNginxDeploymentArgs, opts?: pulumi.InvokeOptions): Promise<GetNginxDeploymentResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azurerm:index/getNginxDeployment:getNginxDeployment", {
        "id": args.id,
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNginxDeployment.
 */
export interface GetNginxDeploymentArgs {
    id?: string;
    name: string;
    resourceGroupName: string;
    timeouts?: inputs.GetNginxDeploymentTimeouts;
}

/**
 * A collection of values returned by getNginxDeployment.
 */
export interface GetNginxDeploymentResult {
    readonly autoScaleProfiles: outputs.GetNginxDeploymentAutoScaleProfile[];
    readonly automaticUpgradeChannel: string;
    readonly capacity: number;
    readonly diagnoseSupportEnabled: boolean;
    readonly email: string;
    readonly frontendPrivates: outputs.GetNginxDeploymentFrontendPrivate[];
    readonly frontendPublics: outputs.GetNginxDeploymentFrontendPublic[];
    readonly id: string;
    readonly identities: outputs.GetNginxDeploymentIdentity[];
    readonly ipAddress: string;
    readonly location: string;
    readonly loggingStorageAccounts: outputs.GetNginxDeploymentLoggingStorageAccount[];
    readonly managedResourceGroup: string;
    readonly name: string;
    readonly networkInterfaces: outputs.GetNginxDeploymentNetworkInterface[];
    readonly nginxVersion: string;
    readonly resourceGroupName: string;
    readonly sku: string;
    readonly tags: {[key: string]: string};
    readonly timeouts?: outputs.GetNginxDeploymentTimeouts;
}
export function getNginxDeploymentOutput(args: GetNginxDeploymentOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNginxDeploymentResult> {
    return pulumi.output(args).apply((a: any) => getNginxDeployment(a, opts))
}

/**
 * A collection of arguments for invoking getNginxDeployment.
 */
export interface GetNginxDeploymentOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetNginxDeploymentTimeoutsArgs>;
}
