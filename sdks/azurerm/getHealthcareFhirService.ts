// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getHealthcareFhirService(args: GetHealthcareFhirServiceArgs, opts?: pulumi.InvokeOptions): Promise<GetHealthcareFhirServiceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azurerm:index/getHealthcareFhirService:getHealthcareFhirService", {
        "id": args.id,
        "name": args.name,
        "tags": args.tags,
        "timeouts": args.timeouts,
        "workspaceId": args.workspaceId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getHealthcareFhirService.
 */
export interface GetHealthcareFhirServiceArgs {
    id?: string;
    name: string;
    tags?: {[key: string]: string};
    timeouts?: inputs.GetHealthcareFhirServiceTimeouts;
    workspaceId: string;
}

/**
 * A collection of values returned by getHealthcareFhirService.
 */
export interface GetHealthcareFhirServiceResult {
    readonly accessPolicyObjectIds: string[];
    readonly authentications: outputs.GetHealthcareFhirServiceAuthentication[];
    readonly configurationExportStorageAccountName: string;
    readonly containerRegistryLoginServerUrls: string[];
    readonly cors: outputs.GetHealthcareFhirServiceCor[];
    readonly id: string;
    readonly identities: outputs.GetHealthcareFhirServiceIdentity[];
    readonly kind: string;
    readonly location: string;
    readonly name: string;
    readonly tags?: {[key: string]: string};
    readonly timeouts?: outputs.GetHealthcareFhirServiceTimeouts;
    readonly workspaceId: string;
}
export function getHealthcareFhirServiceOutput(args: GetHealthcareFhirServiceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetHealthcareFhirServiceResult> {
    return pulumi.output(args).apply((a: any) => getHealthcareFhirService(a, opts))
}

/**
 * A collection of arguments for invoking getHealthcareFhirService.
 */
export interface GetHealthcareFhirServiceOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.GetHealthcareFhirServiceTimeoutsArgs>;
    workspaceId: pulumi.Input<string>;
}
