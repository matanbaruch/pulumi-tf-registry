// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BotChannelFacebook extends pulumi.CustomResource {
    /**
     * Get an existing BotChannelFacebook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BotChannelFacebookState, opts?: pulumi.CustomResourceOptions): BotChannelFacebook {
        return new BotChannelFacebook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/botChannelFacebook:BotChannelFacebook';

    /**
     * Returns true if the given object is an instance of BotChannelFacebook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BotChannelFacebook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BotChannelFacebook.__pulumiType;
    }

    public readonly botName!: pulumi.Output<string>;
    public readonly facebookApplicationId!: pulumi.Output<string>;
    public readonly facebookApplicationSecret!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    public readonly pages!: pulumi.Output<outputs.BotChannelFacebookPage[]>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.BotChannelFacebookTimeouts | undefined>;

    /**
     * Create a BotChannelFacebook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BotChannelFacebookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BotChannelFacebookArgs | BotChannelFacebookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BotChannelFacebookState | undefined;
            resourceInputs["botName"] = state ? state.botName : undefined;
            resourceInputs["facebookApplicationId"] = state ? state.facebookApplicationId : undefined;
            resourceInputs["facebookApplicationSecret"] = state ? state.facebookApplicationSecret : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["pages"] = state ? state.pages : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as BotChannelFacebookArgs | undefined;
            if ((!args || args.botName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'botName'");
            }
            if ((!args || args.facebookApplicationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'facebookApplicationId'");
            }
            if ((!args || args.facebookApplicationSecret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'facebookApplicationSecret'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.pages === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pages'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["botName"] = args ? args.botName : undefined;
            resourceInputs["facebookApplicationId"] = args ? args.facebookApplicationId : undefined;
            resourceInputs["facebookApplicationSecret"] = args?.facebookApplicationSecret ? pulumi.secret(args.facebookApplicationSecret) : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["pages"] = args ? args.pages : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["facebookApplicationSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(BotChannelFacebook.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BotChannelFacebook resources.
 */
export interface BotChannelFacebookState {
    botName?: pulumi.Input<string>;
    facebookApplicationId?: pulumi.Input<string>;
    facebookApplicationSecret?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    pages?: pulumi.Input<pulumi.Input<inputs.BotChannelFacebookPage>[]>;
    resourceGroupName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BotChannelFacebookTimeouts>;
}

/**
 * The set of arguments for constructing a BotChannelFacebook resource.
 */
export interface BotChannelFacebookArgs {
    botName: pulumi.Input<string>;
    facebookApplicationId: pulumi.Input<string>;
    facebookApplicationSecret: pulumi.Input<string>;
    location: pulumi.Input<string>;
    pages: pulumi.Input<pulumi.Input<inputs.BotChannelFacebookPage>[]>;
    resourceGroupName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BotChannelFacebookTimeouts>;
}
