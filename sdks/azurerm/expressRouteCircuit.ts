// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ExpressRouteCircuit extends pulumi.CustomResource {
    /**
     * Get an existing ExpressRouteCircuit resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExpressRouteCircuitState, opts?: pulumi.CustomResourceOptions): ExpressRouteCircuit {
        return new ExpressRouteCircuit(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/expressRouteCircuit:ExpressRouteCircuit';

    /**
     * Returns true if the given object is an instance of ExpressRouteCircuit.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExpressRouteCircuit {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExpressRouteCircuit.__pulumiType;
    }

    public readonly allowClassicOperations!: pulumi.Output<boolean | undefined>;
    public readonly authorizationKey!: pulumi.Output<string | undefined>;
    public readonly bandwidthInGbps!: pulumi.Output<number | undefined>;
    public readonly bandwidthInMbps!: pulumi.Output<number | undefined>;
    public readonly expressRoutePortId!: pulumi.Output<string | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly peeringLocation!: pulumi.Output<string | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public /*out*/ readonly serviceKey!: pulumi.Output<string>;
    public readonly serviceProviderName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly serviceProviderProvisioningState!: pulumi.Output<string>;
    public readonly sku!: pulumi.Output<outputs.ExpressRouteCircuitSku>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ExpressRouteCircuitTimeouts | undefined>;

    /**
     * Create a ExpressRouteCircuit resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExpressRouteCircuitArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExpressRouteCircuitArgs | ExpressRouteCircuitState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExpressRouteCircuitState | undefined;
            resourceInputs["allowClassicOperations"] = state ? state.allowClassicOperations : undefined;
            resourceInputs["authorizationKey"] = state ? state.authorizationKey : undefined;
            resourceInputs["bandwidthInGbps"] = state ? state.bandwidthInGbps : undefined;
            resourceInputs["bandwidthInMbps"] = state ? state.bandwidthInMbps : undefined;
            resourceInputs["expressRoutePortId"] = state ? state.expressRoutePortId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["peeringLocation"] = state ? state.peeringLocation : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["serviceKey"] = state ? state.serviceKey : undefined;
            resourceInputs["serviceProviderName"] = state ? state.serviceProviderName : undefined;
            resourceInputs["serviceProviderProvisioningState"] = state ? state.serviceProviderProvisioningState : undefined;
            resourceInputs["sku"] = state ? state.sku : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ExpressRouteCircuitArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.sku === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sku'");
            }
            resourceInputs["allowClassicOperations"] = args ? args.allowClassicOperations : undefined;
            resourceInputs["authorizationKey"] = args?.authorizationKey ? pulumi.secret(args.authorizationKey) : undefined;
            resourceInputs["bandwidthInGbps"] = args ? args.bandwidthInGbps : undefined;
            resourceInputs["bandwidthInMbps"] = args ? args.bandwidthInMbps : undefined;
            resourceInputs["expressRoutePortId"] = args ? args.expressRoutePortId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["peeringLocation"] = args ? args.peeringLocation : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["serviceProviderName"] = args ? args.serviceProviderName : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["serviceKey"] = undefined /*out*/;
            resourceInputs["serviceProviderProvisioningState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["authorizationKey", "serviceKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ExpressRouteCircuit.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ExpressRouteCircuit resources.
 */
export interface ExpressRouteCircuitState {
    allowClassicOperations?: pulumi.Input<boolean>;
    authorizationKey?: pulumi.Input<string>;
    bandwidthInGbps?: pulumi.Input<number>;
    bandwidthInMbps?: pulumi.Input<number>;
    expressRoutePortId?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    peeringLocation?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    serviceKey?: pulumi.Input<string>;
    serviceProviderName?: pulumi.Input<string>;
    serviceProviderProvisioningState?: pulumi.Input<string>;
    sku?: pulumi.Input<inputs.ExpressRouteCircuitSku>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ExpressRouteCircuitTimeouts>;
}

/**
 * The set of arguments for constructing a ExpressRouteCircuit resource.
 */
export interface ExpressRouteCircuitArgs {
    allowClassicOperations?: pulumi.Input<boolean>;
    authorizationKey?: pulumi.Input<string>;
    bandwidthInGbps?: pulumi.Input<number>;
    bandwidthInMbps?: pulumi.Input<number>;
    expressRoutePortId?: pulumi.Input<string>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    peeringLocation?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    serviceProviderName?: pulumi.Input<string>;
    sku: pulumi.Input<inputs.ExpressRouteCircuitSku>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ExpressRouteCircuitTimeouts>;
}
