// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RedisCacheAccessPolicyAssignment extends pulumi.CustomResource {
    /**
     * Get an existing RedisCacheAccessPolicyAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RedisCacheAccessPolicyAssignmentState, opts?: pulumi.CustomResourceOptions): RedisCacheAccessPolicyAssignment {
        return new RedisCacheAccessPolicyAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/redisCacheAccessPolicyAssignment:RedisCacheAccessPolicyAssignment';

    /**
     * Returns true if the given object is an instance of RedisCacheAccessPolicyAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RedisCacheAccessPolicyAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RedisCacheAccessPolicyAssignment.__pulumiType;
    }

    public readonly accessPolicyName!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly objectId!: pulumi.Output<string>;
    public readonly objectIdAlias!: pulumi.Output<string>;
    public readonly redisCacheId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.RedisCacheAccessPolicyAssignmentTimeouts | undefined>;

    /**
     * Create a RedisCacheAccessPolicyAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedisCacheAccessPolicyAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RedisCacheAccessPolicyAssignmentArgs | RedisCacheAccessPolicyAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RedisCacheAccessPolicyAssignmentState | undefined;
            resourceInputs["accessPolicyName"] = state ? state.accessPolicyName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objectId"] = state ? state.objectId : undefined;
            resourceInputs["objectIdAlias"] = state ? state.objectIdAlias : undefined;
            resourceInputs["redisCacheId"] = state ? state.redisCacheId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as RedisCacheAccessPolicyAssignmentArgs | undefined;
            if ((!args || args.accessPolicyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessPolicyName'");
            }
            if ((!args || args.objectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'objectId'");
            }
            if ((!args || args.objectIdAlias === undefined) && !opts.urn) {
                throw new Error("Missing required property 'objectIdAlias'");
            }
            if ((!args || args.redisCacheId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'redisCacheId'");
            }
            resourceInputs["accessPolicyName"] = args ? args.accessPolicyName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["objectId"] = args ? args.objectId : undefined;
            resourceInputs["objectIdAlias"] = args ? args.objectIdAlias : undefined;
            resourceInputs["redisCacheId"] = args ? args.redisCacheId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RedisCacheAccessPolicyAssignment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RedisCacheAccessPolicyAssignment resources.
 */
export interface RedisCacheAccessPolicyAssignmentState {
    accessPolicyName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectId?: pulumi.Input<string>;
    objectIdAlias?: pulumi.Input<string>;
    redisCacheId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.RedisCacheAccessPolicyAssignmentTimeouts>;
}

/**
 * The set of arguments for constructing a RedisCacheAccessPolicyAssignment resource.
 */
export interface RedisCacheAccessPolicyAssignmentArgs {
    accessPolicyName: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    objectId: pulumi.Input<string>;
    objectIdAlias: pulumi.Input<string>;
    redisCacheId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.RedisCacheAccessPolicyAssignmentTimeouts>;
}
