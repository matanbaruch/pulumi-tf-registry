// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EmailCommunicationServiceDomain extends pulumi.CustomResource {
    /**
     * Get an existing EmailCommunicationServiceDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EmailCommunicationServiceDomainState, opts?: pulumi.CustomResourceOptions): EmailCommunicationServiceDomain {
        return new EmailCommunicationServiceDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/emailCommunicationServiceDomain:EmailCommunicationServiceDomain';

    /**
     * Returns true if the given object is an instance of EmailCommunicationServiceDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EmailCommunicationServiceDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EmailCommunicationServiceDomain.__pulumiType;
    }

    public readonly domainManagement!: pulumi.Output<string>;
    public readonly emailServiceId!: pulumi.Output<string>;
    public /*out*/ readonly fromSenderDomain!: pulumi.Output<string>;
    public /*out*/ readonly mailFromSenderDomain!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.EmailCommunicationServiceDomainTimeouts | undefined>;
    public readonly userEngagementTrackingEnabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly verificationRecords!: pulumi.Output<outputs.EmailCommunicationServiceDomainVerificationRecord[]>;

    /**
     * Create a EmailCommunicationServiceDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EmailCommunicationServiceDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EmailCommunicationServiceDomainArgs | EmailCommunicationServiceDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EmailCommunicationServiceDomainState | undefined;
            resourceInputs["domainManagement"] = state ? state.domainManagement : undefined;
            resourceInputs["emailServiceId"] = state ? state.emailServiceId : undefined;
            resourceInputs["fromSenderDomain"] = state ? state.fromSenderDomain : undefined;
            resourceInputs["mailFromSenderDomain"] = state ? state.mailFromSenderDomain : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userEngagementTrackingEnabled"] = state ? state.userEngagementTrackingEnabled : undefined;
            resourceInputs["verificationRecords"] = state ? state.verificationRecords : undefined;
        } else {
            const args = argsOrState as EmailCommunicationServiceDomainArgs | undefined;
            if ((!args || args.domainManagement === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainManagement'");
            }
            if ((!args || args.emailServiceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'emailServiceId'");
            }
            resourceInputs["domainManagement"] = args ? args.domainManagement : undefined;
            resourceInputs["emailServiceId"] = args ? args.emailServiceId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userEngagementTrackingEnabled"] = args ? args.userEngagementTrackingEnabled : undefined;
            resourceInputs["fromSenderDomain"] = undefined /*out*/;
            resourceInputs["mailFromSenderDomain"] = undefined /*out*/;
            resourceInputs["verificationRecords"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EmailCommunicationServiceDomain.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EmailCommunicationServiceDomain resources.
 */
export interface EmailCommunicationServiceDomainState {
    domainManagement?: pulumi.Input<string>;
    emailServiceId?: pulumi.Input<string>;
    fromSenderDomain?: pulumi.Input<string>;
    mailFromSenderDomain?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.EmailCommunicationServiceDomainTimeouts>;
    userEngagementTrackingEnabled?: pulumi.Input<boolean>;
    verificationRecords?: pulumi.Input<pulumi.Input<inputs.EmailCommunicationServiceDomainVerificationRecord>[]>;
}

/**
 * The set of arguments for constructing a EmailCommunicationServiceDomain resource.
 */
export interface EmailCommunicationServiceDomainArgs {
    domainManagement: pulumi.Input<string>;
    emailServiceId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.EmailCommunicationServiceDomainTimeouts>;
    userEngagementTrackingEnabled?: pulumi.Input<boolean>;
}
