// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApiManagement extends pulumi.CustomResource {
    /**
     * Get an existing ApiManagement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiManagementState, opts?: pulumi.CustomResourceOptions): ApiManagement {
        return new ApiManagement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/apiManagement:ApiManagement';

    /**
     * Returns true if the given object is an instance of ApiManagement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiManagement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiManagement.__pulumiType;
    }

    public readonly additionalLocations!: pulumi.Output<outputs.ApiManagementAdditionalLocation[] | undefined>;
    public readonly certificates!: pulumi.Output<outputs.ApiManagementCertificate[] | undefined>;
    public readonly clientCertificateEnabled!: pulumi.Output<boolean | undefined>;
    public readonly delegation!: pulumi.Output<outputs.ApiManagementDelegation | undefined>;
    public /*out*/ readonly developerPortalUrl!: pulumi.Output<string>;
    public readonly gatewayDisabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly gatewayRegionalUrl!: pulumi.Output<string>;
    public /*out*/ readonly gatewayUrl!: pulumi.Output<string>;
    public readonly hostnameConfiguration!: pulumi.Output<outputs.ApiManagementHostnameConfiguration | undefined>;
    public readonly identity!: pulumi.Output<outputs.ApiManagementIdentity | undefined>;
    public readonly location!: pulumi.Output<string>;
    public /*out*/ readonly managementApiUrl!: pulumi.Output<string>;
    public readonly minApiVersion!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly notificationSenderEmail!: pulumi.Output<string>;
    public /*out*/ readonly portalUrl!: pulumi.Output<string>;
    public /*out*/ readonly privateIpAddresses!: pulumi.Output<string[]>;
    public readonly protocols!: pulumi.Output<outputs.ApiManagementProtocols | undefined>;
    public readonly publicIpAddressId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly publicIpAddresses!: pulumi.Output<string[]>;
    public readonly publicNetworkAccessEnabled!: pulumi.Output<boolean | undefined>;
    public readonly publisherEmail!: pulumi.Output<string>;
    public readonly publisherName!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public /*out*/ readonly scmUrl!: pulumi.Output<string>;
    public readonly security!: pulumi.Output<outputs.ApiManagementSecurity | undefined>;
    public readonly signIn!: pulumi.Output<outputs.ApiManagementSignIn | undefined>;
    public readonly signUp!: pulumi.Output<outputs.ApiManagementSignUp | undefined>;
    public readonly skuName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tenantAccess!: pulumi.Output<outputs.ApiManagementTenantAccess | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ApiManagementTimeouts | undefined>;
    public readonly virtualNetworkConfiguration!: pulumi.Output<outputs.ApiManagementVirtualNetworkConfiguration | undefined>;
    public readonly virtualNetworkType!: pulumi.Output<string | undefined>;
    public readonly zones!: pulumi.Output<string[] | undefined>;

    /**
     * Create a ApiManagement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiManagementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiManagementArgs | ApiManagementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiManagementState | undefined;
            resourceInputs["additionalLocations"] = state ? state.additionalLocations : undefined;
            resourceInputs["certificates"] = state ? state.certificates : undefined;
            resourceInputs["clientCertificateEnabled"] = state ? state.clientCertificateEnabled : undefined;
            resourceInputs["delegation"] = state ? state.delegation : undefined;
            resourceInputs["developerPortalUrl"] = state ? state.developerPortalUrl : undefined;
            resourceInputs["gatewayDisabled"] = state ? state.gatewayDisabled : undefined;
            resourceInputs["gatewayRegionalUrl"] = state ? state.gatewayRegionalUrl : undefined;
            resourceInputs["gatewayUrl"] = state ? state.gatewayUrl : undefined;
            resourceInputs["hostnameConfiguration"] = state ? state.hostnameConfiguration : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["managementApiUrl"] = state ? state.managementApiUrl : undefined;
            resourceInputs["minApiVersion"] = state ? state.minApiVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationSenderEmail"] = state ? state.notificationSenderEmail : undefined;
            resourceInputs["portalUrl"] = state ? state.portalUrl : undefined;
            resourceInputs["privateIpAddresses"] = state ? state.privateIpAddresses : undefined;
            resourceInputs["protocols"] = state ? state.protocols : undefined;
            resourceInputs["publicIpAddressId"] = state ? state.publicIpAddressId : undefined;
            resourceInputs["publicIpAddresses"] = state ? state.publicIpAddresses : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            resourceInputs["publisherEmail"] = state ? state.publisherEmail : undefined;
            resourceInputs["publisherName"] = state ? state.publisherName : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["scmUrl"] = state ? state.scmUrl : undefined;
            resourceInputs["security"] = state ? state.security : undefined;
            resourceInputs["signIn"] = state ? state.signIn : undefined;
            resourceInputs["signUp"] = state ? state.signUp : undefined;
            resourceInputs["skuName"] = state ? state.skuName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenantAccess"] = state ? state.tenantAccess : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["virtualNetworkConfiguration"] = state ? state.virtualNetworkConfiguration : undefined;
            resourceInputs["virtualNetworkType"] = state ? state.virtualNetworkType : undefined;
            resourceInputs["zones"] = state ? state.zones : undefined;
        } else {
            const args = argsOrState as ApiManagementArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.publisherEmail === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publisherEmail'");
            }
            if ((!args || args.publisherName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publisherName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.skuName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'skuName'");
            }
            resourceInputs["additionalLocations"] = args ? args.additionalLocations : undefined;
            resourceInputs["certificates"] = args ? args.certificates : undefined;
            resourceInputs["clientCertificateEnabled"] = args ? args.clientCertificateEnabled : undefined;
            resourceInputs["delegation"] = args ? args.delegation : undefined;
            resourceInputs["gatewayDisabled"] = args ? args.gatewayDisabled : undefined;
            resourceInputs["hostnameConfiguration"] = args ? args.hostnameConfiguration : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["minApiVersion"] = args ? args.minApiVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationSenderEmail"] = args ? args.notificationSenderEmail : undefined;
            resourceInputs["protocols"] = args ? args.protocols : undefined;
            resourceInputs["publicIpAddressId"] = args ? args.publicIpAddressId : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            resourceInputs["publisherEmail"] = args ? args.publisherEmail : undefined;
            resourceInputs["publisherName"] = args ? args.publisherName : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["security"] = args ? args.security : undefined;
            resourceInputs["signIn"] = args ? args.signIn : undefined;
            resourceInputs["signUp"] = args ? args.signUp : undefined;
            resourceInputs["skuName"] = args ? args.skuName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tenantAccess"] = args ? args.tenantAccess : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["virtualNetworkConfiguration"] = args ? args.virtualNetworkConfiguration : undefined;
            resourceInputs["virtualNetworkType"] = args ? args.virtualNetworkType : undefined;
            resourceInputs["zones"] = args ? args.zones : undefined;
            resourceInputs["developerPortalUrl"] = undefined /*out*/;
            resourceInputs["gatewayRegionalUrl"] = undefined /*out*/;
            resourceInputs["gatewayUrl"] = undefined /*out*/;
            resourceInputs["managementApiUrl"] = undefined /*out*/;
            resourceInputs["portalUrl"] = undefined /*out*/;
            resourceInputs["privateIpAddresses"] = undefined /*out*/;
            resourceInputs["publicIpAddresses"] = undefined /*out*/;
            resourceInputs["scmUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApiManagement.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApiManagement resources.
 */
export interface ApiManagementState {
    additionalLocations?: pulumi.Input<pulumi.Input<inputs.ApiManagementAdditionalLocation>[]>;
    certificates?: pulumi.Input<pulumi.Input<inputs.ApiManagementCertificate>[]>;
    clientCertificateEnabled?: pulumi.Input<boolean>;
    delegation?: pulumi.Input<inputs.ApiManagementDelegation>;
    developerPortalUrl?: pulumi.Input<string>;
    gatewayDisabled?: pulumi.Input<boolean>;
    gatewayRegionalUrl?: pulumi.Input<string>;
    gatewayUrl?: pulumi.Input<string>;
    hostnameConfiguration?: pulumi.Input<inputs.ApiManagementHostnameConfiguration>;
    identity?: pulumi.Input<inputs.ApiManagementIdentity>;
    location?: pulumi.Input<string>;
    managementApiUrl?: pulumi.Input<string>;
    minApiVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notificationSenderEmail?: pulumi.Input<string>;
    portalUrl?: pulumi.Input<string>;
    privateIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    protocols?: pulumi.Input<inputs.ApiManagementProtocols>;
    publicIpAddressId?: pulumi.Input<string>;
    publicIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    publisherEmail?: pulumi.Input<string>;
    publisherName?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    scmUrl?: pulumi.Input<string>;
    security?: pulumi.Input<inputs.ApiManagementSecurity>;
    signIn?: pulumi.Input<inputs.ApiManagementSignIn>;
    signUp?: pulumi.Input<inputs.ApiManagementSignUp>;
    skuName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tenantAccess?: pulumi.Input<inputs.ApiManagementTenantAccess>;
    timeouts?: pulumi.Input<inputs.ApiManagementTimeouts>;
    virtualNetworkConfiguration?: pulumi.Input<inputs.ApiManagementVirtualNetworkConfiguration>;
    virtualNetworkType?: pulumi.Input<string>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ApiManagement resource.
 */
export interface ApiManagementArgs {
    additionalLocations?: pulumi.Input<pulumi.Input<inputs.ApiManagementAdditionalLocation>[]>;
    certificates?: pulumi.Input<pulumi.Input<inputs.ApiManagementCertificate>[]>;
    clientCertificateEnabled?: pulumi.Input<boolean>;
    delegation?: pulumi.Input<inputs.ApiManagementDelegation>;
    gatewayDisabled?: pulumi.Input<boolean>;
    hostnameConfiguration?: pulumi.Input<inputs.ApiManagementHostnameConfiguration>;
    identity?: pulumi.Input<inputs.ApiManagementIdentity>;
    location: pulumi.Input<string>;
    minApiVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notificationSenderEmail?: pulumi.Input<string>;
    protocols?: pulumi.Input<inputs.ApiManagementProtocols>;
    publicIpAddressId?: pulumi.Input<string>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    publisherEmail: pulumi.Input<string>;
    publisherName: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    security?: pulumi.Input<inputs.ApiManagementSecurity>;
    signIn?: pulumi.Input<inputs.ApiManagementSignIn>;
    signUp?: pulumi.Input<inputs.ApiManagementSignUp>;
    skuName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tenantAccess?: pulumi.Input<inputs.ApiManagementTenantAccess>;
    timeouts?: pulumi.Input<inputs.ApiManagementTimeouts>;
    virtualNetworkConfiguration?: pulumi.Input<inputs.ApiManagementVirtualNetworkConfiguration>;
    virtualNetworkType?: pulumi.Input<string>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}
