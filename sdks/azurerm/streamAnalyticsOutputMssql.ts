// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StreamAnalyticsOutputMssql extends pulumi.CustomResource {
    /**
     * Get an existing StreamAnalyticsOutputMssql resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StreamAnalyticsOutputMssqlState, opts?: pulumi.CustomResourceOptions): StreamAnalyticsOutputMssql {
        return new StreamAnalyticsOutputMssql(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/streamAnalyticsOutputMssql:StreamAnalyticsOutputMssql';

    /**
     * Returns true if the given object is an instance of StreamAnalyticsOutputMssql.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StreamAnalyticsOutputMssql {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamAnalyticsOutputMssql.__pulumiType;
    }

    public readonly authenticationMode!: pulumi.Output<string | undefined>;
    public readonly database!: pulumi.Output<string>;
    public readonly maxBatchCount!: pulumi.Output<number | undefined>;
    public readonly maxWriterCount!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly server!: pulumi.Output<string>;
    public readonly streamAnalyticsJobName!: pulumi.Output<string>;
    public readonly table!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.StreamAnalyticsOutputMssqlTimeouts | undefined>;
    public readonly user!: pulumi.Output<string | undefined>;

    /**
     * Create a StreamAnalyticsOutputMssql resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StreamAnalyticsOutputMssqlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StreamAnalyticsOutputMssqlArgs | StreamAnalyticsOutputMssqlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StreamAnalyticsOutputMssqlState | undefined;
            resourceInputs["authenticationMode"] = state ? state.authenticationMode : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["maxBatchCount"] = state ? state.maxBatchCount : undefined;
            resourceInputs["maxWriterCount"] = state ? state.maxWriterCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["streamAnalyticsJobName"] = state ? state.streamAnalyticsJobName : undefined;
            resourceInputs["table"] = state ? state.table : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
        } else {
            const args = argsOrState as StreamAnalyticsOutputMssqlArgs | undefined;
            if ((!args || args.database === undefined) && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.server === undefined) && !opts.urn) {
                throw new Error("Missing required property 'server'");
            }
            if ((!args || args.streamAnalyticsJobName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'streamAnalyticsJobName'");
            }
            if ((!args || args.table === undefined) && !opts.urn) {
                throw new Error("Missing required property 'table'");
            }
            resourceInputs["authenticationMode"] = args ? args.authenticationMode : undefined;
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["maxBatchCount"] = args ? args.maxBatchCount : undefined;
            resourceInputs["maxWriterCount"] = args ? args.maxWriterCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["streamAnalyticsJobName"] = args ? args.streamAnalyticsJobName : undefined;
            resourceInputs["table"] = args ? args.table : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(StreamAnalyticsOutputMssql.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StreamAnalyticsOutputMssql resources.
 */
export interface StreamAnalyticsOutputMssqlState {
    authenticationMode?: pulumi.Input<string>;
    database?: pulumi.Input<string>;
    maxBatchCount?: pulumi.Input<number>;
    maxWriterCount?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
    streamAnalyticsJobName?: pulumi.Input<string>;
    table?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StreamAnalyticsOutputMssqlTimeouts>;
    user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StreamAnalyticsOutputMssql resource.
 */
export interface StreamAnalyticsOutputMssqlArgs {
    authenticationMode?: pulumi.Input<string>;
    database: pulumi.Input<string>;
    maxBatchCount?: pulumi.Input<number>;
    maxWriterCount?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    server: pulumi.Input<string>;
    streamAnalyticsJobName: pulumi.Input<string>;
    table: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StreamAnalyticsOutputMssqlTimeouts>;
    user?: pulumi.Input<string>;
}
