// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMysqlFlexibleServer(args: GetMysqlFlexibleServerArgs, opts?: pulumi.InvokeOptions): Promise<GetMysqlFlexibleServerResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azurerm:index/getMysqlFlexibleServer:getMysqlFlexibleServer", {
        "id": args.id,
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMysqlFlexibleServer.
 */
export interface GetMysqlFlexibleServerArgs {
    id?: string;
    name: string;
    resourceGroupName: string;
    timeouts?: inputs.GetMysqlFlexibleServerTimeouts;
}

/**
 * A collection of values returned by getMysqlFlexibleServer.
 */
export interface GetMysqlFlexibleServerResult {
    readonly administratorLogin: string;
    readonly backupRetentionDays: number;
    readonly delegatedSubnetId: string;
    readonly fqdn: string;
    readonly geoRedundantBackupEnabled: boolean;
    readonly highAvailabilities: outputs.GetMysqlFlexibleServerHighAvailability[];
    readonly id: string;
    readonly location: string;
    readonly maintenanceWindows: outputs.GetMysqlFlexibleServerMaintenanceWindow[];
    readonly name: string;
    readonly privateDnsZoneId: string;
    readonly publicNetworkAccessEnabled: boolean;
    readonly replicaCapacity: number;
    readonly replicationRole: string;
    readonly resourceGroupName: string;
    readonly restorePointInTime: string;
    readonly skuName: string;
    readonly storages: outputs.GetMysqlFlexibleServerStorage[];
    readonly tags: {[key: string]: string};
    readonly timeouts?: outputs.GetMysqlFlexibleServerTimeouts;
    readonly version: string;
    readonly zone: string;
}
export function getMysqlFlexibleServerOutput(args: GetMysqlFlexibleServerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMysqlFlexibleServerResult> {
    return pulumi.output(args).apply((a: any) => getMysqlFlexibleServer(a, opts))
}

/**
 * A collection of arguments for invoking getMysqlFlexibleServer.
 */
export interface GetMysqlFlexibleServerOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetMysqlFlexibleServerTimeoutsArgs>;
}
