// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IotSecuritySolution extends pulumi.CustomResource {
    /**
     * Get an existing IotSecuritySolution resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IotSecuritySolutionState, opts?: pulumi.CustomResourceOptions): IotSecuritySolution {
        return new IotSecuritySolution(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/iotSecuritySolution:IotSecuritySolution';

    /**
     * Returns true if the given object is an instance of IotSecuritySolution.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IotSecuritySolution {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IotSecuritySolution.__pulumiType;
    }

    public readonly additionalWorkspaces!: pulumi.Output<outputs.IotSecuritySolutionAdditionalWorkspace[] | undefined>;
    public readonly disabledDataSources!: pulumi.Output<string[] | undefined>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly eventsToExports!: pulumi.Output<string[] | undefined>;
    public readonly iothubIds!: pulumi.Output<string[]>;
    public readonly location!: pulumi.Output<string>;
    public readonly logAnalyticsWorkspaceId!: pulumi.Output<string | undefined>;
    public readonly logUnmaskedIpsEnabled!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly queryForResources!: pulumi.Output<string>;
    public readonly querySubscriptionIds!: pulumi.Output<string[]>;
    public readonly recommendationsEnabled!: pulumi.Output<outputs.IotSecuritySolutionRecommendationsEnabled | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.IotSecuritySolutionTimeouts | undefined>;

    /**
     * Create a IotSecuritySolution resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IotSecuritySolutionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IotSecuritySolutionArgs | IotSecuritySolutionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IotSecuritySolutionState | undefined;
            resourceInputs["additionalWorkspaces"] = state ? state.additionalWorkspaces : undefined;
            resourceInputs["disabledDataSources"] = state ? state.disabledDataSources : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["eventsToExports"] = state ? state.eventsToExports : undefined;
            resourceInputs["iothubIds"] = state ? state.iothubIds : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["logAnalyticsWorkspaceId"] = state ? state.logAnalyticsWorkspaceId : undefined;
            resourceInputs["logUnmaskedIpsEnabled"] = state ? state.logUnmaskedIpsEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["queryForResources"] = state ? state.queryForResources : undefined;
            resourceInputs["querySubscriptionIds"] = state ? state.querySubscriptionIds : undefined;
            resourceInputs["recommendationsEnabled"] = state ? state.recommendationsEnabled : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as IotSecuritySolutionArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.iothubIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'iothubIds'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["additionalWorkspaces"] = args ? args.additionalWorkspaces : undefined;
            resourceInputs["disabledDataSources"] = args ? args.disabledDataSources : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["eventsToExports"] = args ? args.eventsToExports : undefined;
            resourceInputs["iothubIds"] = args ? args.iothubIds : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["logAnalyticsWorkspaceId"] = args ? args.logAnalyticsWorkspaceId : undefined;
            resourceInputs["logUnmaskedIpsEnabled"] = args ? args.logUnmaskedIpsEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["queryForResources"] = args ? args.queryForResources : undefined;
            resourceInputs["querySubscriptionIds"] = args ? args.querySubscriptionIds : undefined;
            resourceInputs["recommendationsEnabled"] = args ? args.recommendationsEnabled : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IotSecuritySolution.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IotSecuritySolution resources.
 */
export interface IotSecuritySolutionState {
    additionalWorkspaces?: pulumi.Input<pulumi.Input<inputs.IotSecuritySolutionAdditionalWorkspace>[]>;
    disabledDataSources?: pulumi.Input<pulumi.Input<string>[]>;
    displayName?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    eventsToExports?: pulumi.Input<pulumi.Input<string>[]>;
    iothubIds?: pulumi.Input<pulumi.Input<string>[]>;
    location?: pulumi.Input<string>;
    logAnalyticsWorkspaceId?: pulumi.Input<string>;
    logUnmaskedIpsEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    queryForResources?: pulumi.Input<string>;
    querySubscriptionIds?: pulumi.Input<pulumi.Input<string>[]>;
    recommendationsEnabled?: pulumi.Input<inputs.IotSecuritySolutionRecommendationsEnabled>;
    resourceGroupName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.IotSecuritySolutionTimeouts>;
}

/**
 * The set of arguments for constructing a IotSecuritySolution resource.
 */
export interface IotSecuritySolutionArgs {
    additionalWorkspaces?: pulumi.Input<pulumi.Input<inputs.IotSecuritySolutionAdditionalWorkspace>[]>;
    disabledDataSources?: pulumi.Input<pulumi.Input<string>[]>;
    displayName: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    eventsToExports?: pulumi.Input<pulumi.Input<string>[]>;
    iothubIds: pulumi.Input<pulumi.Input<string>[]>;
    location: pulumi.Input<string>;
    logAnalyticsWorkspaceId?: pulumi.Input<string>;
    logUnmaskedIpsEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    queryForResources?: pulumi.Input<string>;
    querySubscriptionIds?: pulumi.Input<pulumi.Input<string>[]>;
    recommendationsEnabled?: pulumi.Input<inputs.IotSecuritySolutionRecommendationsEnabled>;
    resourceGroupName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.IotSecuritySolutionTimeouts>;
}
