// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DataFactoryFlowletDataFlow extends pulumi.CustomResource {
    /**
     * Get an existing DataFactoryFlowletDataFlow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataFactoryFlowletDataFlowState, opts?: pulumi.CustomResourceOptions): DataFactoryFlowletDataFlow {
        return new DataFactoryFlowletDataFlow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/dataFactoryFlowletDataFlow:DataFactoryFlowletDataFlow';

    /**
     * Returns true if the given object is an instance of DataFactoryFlowletDataFlow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataFactoryFlowletDataFlow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataFactoryFlowletDataFlow.__pulumiType;
    }

    public readonly annotations!: pulumi.Output<string[] | undefined>;
    public readonly dataFactoryId!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly folder!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly script!: pulumi.Output<string | undefined>;
    public readonly scriptLines!: pulumi.Output<string[] | undefined>;
    public readonly sinks!: pulumi.Output<outputs.DataFactoryFlowletDataFlowSink[] | undefined>;
    public readonly sources!: pulumi.Output<outputs.DataFactoryFlowletDataFlowSource[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.DataFactoryFlowletDataFlowTimeouts | undefined>;
    public readonly transformations!: pulumi.Output<outputs.DataFactoryFlowletDataFlowTransformation[] | undefined>;

    /**
     * Create a DataFactoryFlowletDataFlow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataFactoryFlowletDataFlowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataFactoryFlowletDataFlowArgs | DataFactoryFlowletDataFlowState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataFactoryFlowletDataFlowState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["dataFactoryId"] = state ? state.dataFactoryId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["folder"] = state ? state.folder : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["script"] = state ? state.script : undefined;
            resourceInputs["scriptLines"] = state ? state.scriptLines : undefined;
            resourceInputs["sinks"] = state ? state.sinks : undefined;
            resourceInputs["sources"] = state ? state.sources : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["transformations"] = state ? state.transformations : undefined;
        } else {
            const args = argsOrState as DataFactoryFlowletDataFlowArgs | undefined;
            if ((!args || args.dataFactoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataFactoryId'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["dataFactoryId"] = args ? args.dataFactoryId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["folder"] = args ? args.folder : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["script"] = args ? args.script : undefined;
            resourceInputs["scriptLines"] = args ? args.scriptLines : undefined;
            resourceInputs["sinks"] = args ? args.sinks : undefined;
            resourceInputs["sources"] = args ? args.sources : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["transformations"] = args ? args.transformations : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataFactoryFlowletDataFlow.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DataFactoryFlowletDataFlow resources.
 */
export interface DataFactoryFlowletDataFlowState {
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    dataFactoryId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    folder?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    script?: pulumi.Input<string>;
    scriptLines?: pulumi.Input<pulumi.Input<string>[]>;
    sinks?: pulumi.Input<pulumi.Input<inputs.DataFactoryFlowletDataFlowSink>[]>;
    sources?: pulumi.Input<pulumi.Input<inputs.DataFactoryFlowletDataFlowSource>[]>;
    timeouts?: pulumi.Input<inputs.DataFactoryFlowletDataFlowTimeouts>;
    transformations?: pulumi.Input<pulumi.Input<inputs.DataFactoryFlowletDataFlowTransformation>[]>;
}

/**
 * The set of arguments for constructing a DataFactoryFlowletDataFlow resource.
 */
export interface DataFactoryFlowletDataFlowArgs {
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    dataFactoryId: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    folder?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    script?: pulumi.Input<string>;
    scriptLines?: pulumi.Input<pulumi.Input<string>[]>;
    sinks?: pulumi.Input<pulumi.Input<inputs.DataFactoryFlowletDataFlowSink>[]>;
    sources?: pulumi.Input<pulumi.Input<inputs.DataFactoryFlowletDataFlowSource>[]>;
    timeouts?: pulumi.Input<inputs.DataFactoryFlowletDataFlowTimeouts>;
    transformations?: pulumi.Input<pulumi.Input<inputs.DataFactoryFlowletDataFlowTransformation>[]>;
}
