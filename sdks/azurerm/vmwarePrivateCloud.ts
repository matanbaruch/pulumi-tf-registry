// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VmwarePrivateCloud extends pulumi.CustomResource {
    /**
     * Get an existing VmwarePrivateCloud resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmwarePrivateCloudState, opts?: pulumi.CustomResourceOptions): VmwarePrivateCloud {
        return new VmwarePrivateCloud(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/vmwarePrivateCloud:VmwarePrivateCloud';

    /**
     * Returns true if the given object is an instance of VmwarePrivateCloud.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VmwarePrivateCloud {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VmwarePrivateCloud.__pulumiType;
    }

    public /*out*/ readonly circuits!: pulumi.Output<outputs.VmwarePrivateCloudCircuit[]>;
    public /*out*/ readonly hcxCloudManagerEndpoint!: pulumi.Output<string>;
    public readonly internetConnectionEnabled!: pulumi.Output<boolean | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly managementCluster!: pulumi.Output<outputs.VmwarePrivateCloudManagementCluster>;
    public /*out*/ readonly managementSubnetCidr!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkSubnetCidr!: pulumi.Output<string>;
    public /*out*/ readonly nsxtCertificateThumbprint!: pulumi.Output<string>;
    public /*out*/ readonly nsxtManagerEndpoint!: pulumi.Output<string>;
    public readonly nsxtPassword!: pulumi.Output<string | undefined>;
    public /*out*/ readonly provisioningSubnetCidr!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly skuName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.VmwarePrivateCloudTimeouts | undefined>;
    public /*out*/ readonly vcenterCertificateThumbprint!: pulumi.Output<string>;
    public readonly vcenterPassword!: pulumi.Output<string | undefined>;
    public /*out*/ readonly vcsaEndpoint!: pulumi.Output<string>;
    public /*out*/ readonly vmotionSubnetCidr!: pulumi.Output<string>;

    /**
     * Create a VmwarePrivateCloud resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmwarePrivateCloudArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmwarePrivateCloudArgs | VmwarePrivateCloudState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmwarePrivateCloudState | undefined;
            resourceInputs["circuits"] = state ? state.circuits : undefined;
            resourceInputs["hcxCloudManagerEndpoint"] = state ? state.hcxCloudManagerEndpoint : undefined;
            resourceInputs["internetConnectionEnabled"] = state ? state.internetConnectionEnabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["managementCluster"] = state ? state.managementCluster : undefined;
            resourceInputs["managementSubnetCidr"] = state ? state.managementSubnetCidr : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkSubnetCidr"] = state ? state.networkSubnetCidr : undefined;
            resourceInputs["nsxtCertificateThumbprint"] = state ? state.nsxtCertificateThumbprint : undefined;
            resourceInputs["nsxtManagerEndpoint"] = state ? state.nsxtManagerEndpoint : undefined;
            resourceInputs["nsxtPassword"] = state ? state.nsxtPassword : undefined;
            resourceInputs["provisioningSubnetCidr"] = state ? state.provisioningSubnetCidr : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["skuName"] = state ? state.skuName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vcenterCertificateThumbprint"] = state ? state.vcenterCertificateThumbprint : undefined;
            resourceInputs["vcenterPassword"] = state ? state.vcenterPassword : undefined;
            resourceInputs["vcsaEndpoint"] = state ? state.vcsaEndpoint : undefined;
            resourceInputs["vmotionSubnetCidr"] = state ? state.vmotionSubnetCidr : undefined;
        } else {
            const args = argsOrState as VmwarePrivateCloudArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.managementCluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managementCluster'");
            }
            if ((!args || args.networkSubnetCidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkSubnetCidr'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.skuName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'skuName'");
            }
            resourceInputs["internetConnectionEnabled"] = args ? args.internetConnectionEnabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["managementCluster"] = args ? args.managementCluster : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkSubnetCidr"] = args ? args.networkSubnetCidr : undefined;
            resourceInputs["nsxtPassword"] = args?.nsxtPassword ? pulumi.secret(args.nsxtPassword) : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["skuName"] = args ? args.skuName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vcenterPassword"] = args?.vcenterPassword ? pulumi.secret(args.vcenterPassword) : undefined;
            resourceInputs["circuits"] = undefined /*out*/;
            resourceInputs["hcxCloudManagerEndpoint"] = undefined /*out*/;
            resourceInputs["managementSubnetCidr"] = undefined /*out*/;
            resourceInputs["nsxtCertificateThumbprint"] = undefined /*out*/;
            resourceInputs["nsxtManagerEndpoint"] = undefined /*out*/;
            resourceInputs["provisioningSubnetCidr"] = undefined /*out*/;
            resourceInputs["vcenterCertificateThumbprint"] = undefined /*out*/;
            resourceInputs["vcsaEndpoint"] = undefined /*out*/;
            resourceInputs["vmotionSubnetCidr"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["nsxtPassword", "vcenterPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(VmwarePrivateCloud.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VmwarePrivateCloud resources.
 */
export interface VmwarePrivateCloudState {
    circuits?: pulumi.Input<pulumi.Input<inputs.VmwarePrivateCloudCircuit>[]>;
    hcxCloudManagerEndpoint?: pulumi.Input<string>;
    internetConnectionEnabled?: pulumi.Input<boolean>;
    location?: pulumi.Input<string>;
    managementCluster?: pulumi.Input<inputs.VmwarePrivateCloudManagementCluster>;
    managementSubnetCidr?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkSubnetCidr?: pulumi.Input<string>;
    nsxtCertificateThumbprint?: pulumi.Input<string>;
    nsxtManagerEndpoint?: pulumi.Input<string>;
    nsxtPassword?: pulumi.Input<string>;
    provisioningSubnetCidr?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    skuName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VmwarePrivateCloudTimeouts>;
    vcenterCertificateThumbprint?: pulumi.Input<string>;
    vcenterPassword?: pulumi.Input<string>;
    vcsaEndpoint?: pulumi.Input<string>;
    vmotionSubnetCidr?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VmwarePrivateCloud resource.
 */
export interface VmwarePrivateCloudArgs {
    internetConnectionEnabled?: pulumi.Input<boolean>;
    location: pulumi.Input<string>;
    managementCluster: pulumi.Input<inputs.VmwarePrivateCloudManagementCluster>;
    name?: pulumi.Input<string>;
    networkSubnetCidr: pulumi.Input<string>;
    nsxtPassword?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    skuName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VmwarePrivateCloudTimeouts>;
    vcenterPassword?: pulumi.Input<string>;
}
