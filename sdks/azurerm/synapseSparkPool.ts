// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SynapseSparkPool extends pulumi.CustomResource {
    /**
     * Get an existing SynapseSparkPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SynapseSparkPoolState, opts?: pulumi.CustomResourceOptions): SynapseSparkPool {
        return new SynapseSparkPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/synapseSparkPool:SynapseSparkPool';

    /**
     * Returns true if the given object is an instance of SynapseSparkPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SynapseSparkPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SynapseSparkPool.__pulumiType;
    }

    public readonly autoPause!: pulumi.Output<outputs.SynapseSparkPoolAutoPause | undefined>;
    public readonly autoScale!: pulumi.Output<outputs.SynapseSparkPoolAutoScale | undefined>;
    public readonly cacheSize!: pulumi.Output<number | undefined>;
    public readonly computeIsolationEnabled!: pulumi.Output<boolean | undefined>;
    public readonly dynamicExecutorAllocationEnabled!: pulumi.Output<boolean | undefined>;
    public readonly libraryRequirement!: pulumi.Output<outputs.SynapseSparkPoolLibraryRequirement | undefined>;
    public readonly maxExecutors!: pulumi.Output<number | undefined>;
    public readonly minExecutors!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nodeCount!: pulumi.Output<number>;
    public readonly nodeSize!: pulumi.Output<string>;
    public readonly nodeSizeFamily!: pulumi.Output<string>;
    public readonly sessionLevelPackagesEnabled!: pulumi.Output<boolean | undefined>;
    public readonly sparkConfig!: pulumi.Output<outputs.SynapseSparkPoolSparkConfig | undefined>;
    public readonly sparkEventsFolder!: pulumi.Output<string | undefined>;
    public readonly sparkLogFolder!: pulumi.Output<string | undefined>;
    public readonly sparkVersion!: pulumi.Output<string>;
    public readonly synapseWorkspaceId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.SynapseSparkPoolTimeouts | undefined>;

    /**
     * Create a SynapseSparkPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SynapseSparkPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SynapseSparkPoolArgs | SynapseSparkPoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SynapseSparkPoolState | undefined;
            resourceInputs["autoPause"] = state ? state.autoPause : undefined;
            resourceInputs["autoScale"] = state ? state.autoScale : undefined;
            resourceInputs["cacheSize"] = state ? state.cacheSize : undefined;
            resourceInputs["computeIsolationEnabled"] = state ? state.computeIsolationEnabled : undefined;
            resourceInputs["dynamicExecutorAllocationEnabled"] = state ? state.dynamicExecutorAllocationEnabled : undefined;
            resourceInputs["libraryRequirement"] = state ? state.libraryRequirement : undefined;
            resourceInputs["maxExecutors"] = state ? state.maxExecutors : undefined;
            resourceInputs["minExecutors"] = state ? state.minExecutors : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeCount"] = state ? state.nodeCount : undefined;
            resourceInputs["nodeSize"] = state ? state.nodeSize : undefined;
            resourceInputs["nodeSizeFamily"] = state ? state.nodeSizeFamily : undefined;
            resourceInputs["sessionLevelPackagesEnabled"] = state ? state.sessionLevelPackagesEnabled : undefined;
            resourceInputs["sparkConfig"] = state ? state.sparkConfig : undefined;
            resourceInputs["sparkEventsFolder"] = state ? state.sparkEventsFolder : undefined;
            resourceInputs["sparkLogFolder"] = state ? state.sparkLogFolder : undefined;
            resourceInputs["sparkVersion"] = state ? state.sparkVersion : undefined;
            resourceInputs["synapseWorkspaceId"] = state ? state.synapseWorkspaceId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as SynapseSparkPoolArgs | undefined;
            if ((!args || args.nodeSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeSize'");
            }
            if ((!args || args.nodeSizeFamily === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeSizeFamily'");
            }
            if ((!args || args.sparkVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sparkVersion'");
            }
            if ((!args || args.synapseWorkspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'synapseWorkspaceId'");
            }
            resourceInputs["autoPause"] = args ? args.autoPause : undefined;
            resourceInputs["autoScale"] = args ? args.autoScale : undefined;
            resourceInputs["cacheSize"] = args ? args.cacheSize : undefined;
            resourceInputs["computeIsolationEnabled"] = args ? args.computeIsolationEnabled : undefined;
            resourceInputs["dynamicExecutorAllocationEnabled"] = args ? args.dynamicExecutorAllocationEnabled : undefined;
            resourceInputs["libraryRequirement"] = args ? args.libraryRequirement : undefined;
            resourceInputs["maxExecutors"] = args ? args.maxExecutors : undefined;
            resourceInputs["minExecutors"] = args ? args.minExecutors : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeCount"] = args ? args.nodeCount : undefined;
            resourceInputs["nodeSize"] = args ? args.nodeSize : undefined;
            resourceInputs["nodeSizeFamily"] = args ? args.nodeSizeFamily : undefined;
            resourceInputs["sessionLevelPackagesEnabled"] = args ? args.sessionLevelPackagesEnabled : undefined;
            resourceInputs["sparkConfig"] = args ? args.sparkConfig : undefined;
            resourceInputs["sparkEventsFolder"] = args ? args.sparkEventsFolder : undefined;
            resourceInputs["sparkLogFolder"] = args ? args.sparkLogFolder : undefined;
            resourceInputs["sparkVersion"] = args ? args.sparkVersion : undefined;
            resourceInputs["synapseWorkspaceId"] = args ? args.synapseWorkspaceId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SynapseSparkPool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SynapseSparkPool resources.
 */
export interface SynapseSparkPoolState {
    autoPause?: pulumi.Input<inputs.SynapseSparkPoolAutoPause>;
    autoScale?: pulumi.Input<inputs.SynapseSparkPoolAutoScale>;
    cacheSize?: pulumi.Input<number>;
    computeIsolationEnabled?: pulumi.Input<boolean>;
    dynamicExecutorAllocationEnabled?: pulumi.Input<boolean>;
    libraryRequirement?: pulumi.Input<inputs.SynapseSparkPoolLibraryRequirement>;
    maxExecutors?: pulumi.Input<number>;
    minExecutors?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    nodeCount?: pulumi.Input<number>;
    nodeSize?: pulumi.Input<string>;
    nodeSizeFamily?: pulumi.Input<string>;
    sessionLevelPackagesEnabled?: pulumi.Input<boolean>;
    sparkConfig?: pulumi.Input<inputs.SynapseSparkPoolSparkConfig>;
    sparkEventsFolder?: pulumi.Input<string>;
    sparkLogFolder?: pulumi.Input<string>;
    sparkVersion?: pulumi.Input<string>;
    synapseWorkspaceId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.SynapseSparkPoolTimeouts>;
}

/**
 * The set of arguments for constructing a SynapseSparkPool resource.
 */
export interface SynapseSparkPoolArgs {
    autoPause?: pulumi.Input<inputs.SynapseSparkPoolAutoPause>;
    autoScale?: pulumi.Input<inputs.SynapseSparkPoolAutoScale>;
    cacheSize?: pulumi.Input<number>;
    computeIsolationEnabled?: pulumi.Input<boolean>;
    dynamicExecutorAllocationEnabled?: pulumi.Input<boolean>;
    libraryRequirement?: pulumi.Input<inputs.SynapseSparkPoolLibraryRequirement>;
    maxExecutors?: pulumi.Input<number>;
    minExecutors?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    nodeCount?: pulumi.Input<number>;
    nodeSize: pulumi.Input<string>;
    nodeSizeFamily: pulumi.Input<string>;
    sessionLevelPackagesEnabled?: pulumi.Input<boolean>;
    sparkConfig?: pulumi.Input<inputs.SynapseSparkPoolSparkConfig>;
    sparkEventsFolder?: pulumi.Input<string>;
    sparkLogFolder?: pulumi.Input<string>;
    sparkVersion: pulumi.Input<string>;
    synapseWorkspaceId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.SynapseSparkPoolTimeouts>;
}
