// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StorageShareFile extends pulumi.CustomResource {
    /**
     * Get an existing StorageShareFile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageShareFileState, opts?: pulumi.CustomResourceOptions): StorageShareFile {
        return new StorageShareFile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/storageShareFile:StorageShareFile';

    /**
     * Returns true if the given object is an instance of StorageShareFile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageShareFile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageShareFile.__pulumiType;
    }

    public readonly contentDisposition!: pulumi.Output<string | undefined>;
    public readonly contentEncoding!: pulumi.Output<string | undefined>;
    public /*out*/ readonly contentLength!: pulumi.Output<number>;
    public readonly contentMd5!: pulumi.Output<string | undefined>;
    public readonly contentType!: pulumi.Output<string | undefined>;
    public readonly metadata!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly path!: pulumi.Output<string | undefined>;
    public readonly source!: pulumi.Output<string | undefined>;
    public readonly storageShareId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.StorageShareFileTimeouts | undefined>;

    /**
     * Create a StorageShareFile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageShareFileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageShareFileArgs | StorageShareFileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageShareFileState | undefined;
            resourceInputs["contentDisposition"] = state ? state.contentDisposition : undefined;
            resourceInputs["contentEncoding"] = state ? state.contentEncoding : undefined;
            resourceInputs["contentLength"] = state ? state.contentLength : undefined;
            resourceInputs["contentMd5"] = state ? state.contentMd5 : undefined;
            resourceInputs["contentType"] = state ? state.contentType : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["storageShareId"] = state ? state.storageShareId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as StorageShareFileArgs | undefined;
            if ((!args || args.storageShareId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageShareId'");
            }
            resourceInputs["contentDisposition"] = args ? args.contentDisposition : undefined;
            resourceInputs["contentEncoding"] = args ? args.contentEncoding : undefined;
            resourceInputs["contentMd5"] = args ? args.contentMd5 : undefined;
            resourceInputs["contentType"] = args ? args.contentType : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["storageShareId"] = args ? args.storageShareId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["contentLength"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageShareFile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageShareFile resources.
 */
export interface StorageShareFileState {
    contentDisposition?: pulumi.Input<string>;
    contentEncoding?: pulumi.Input<string>;
    contentLength?: pulumi.Input<number>;
    contentMd5?: pulumi.Input<string>;
    contentType?: pulumi.Input<string>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    storageShareId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StorageShareFileTimeouts>;
}

/**
 * The set of arguments for constructing a StorageShareFile resource.
 */
export interface StorageShareFileArgs {
    contentDisposition?: pulumi.Input<string>;
    contentEncoding?: pulumi.Input<string>;
    contentMd5?: pulumi.Input<string>;
    contentType?: pulumi.Input<string>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    storageShareId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StorageShareFileTimeouts>;
}
