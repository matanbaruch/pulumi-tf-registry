// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StreamAnalyticsStreamInputIothub extends pulumi.CustomResource {
    /**
     * Get an existing StreamAnalyticsStreamInputIothub resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StreamAnalyticsStreamInputIothubState, opts?: pulumi.CustomResourceOptions): StreamAnalyticsStreamInputIothub {
        return new StreamAnalyticsStreamInputIothub(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/streamAnalyticsStreamInputIothub:StreamAnalyticsStreamInputIothub';

    /**
     * Returns true if the given object is an instance of StreamAnalyticsStreamInputIothub.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StreamAnalyticsStreamInputIothub {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamAnalyticsStreamInputIothub.__pulumiType;
    }

    public readonly endpoint!: pulumi.Output<string>;
    public readonly eventhubConsumerGroupName!: pulumi.Output<string>;
    public readonly iothubNamespace!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly serialization!: pulumi.Output<outputs.StreamAnalyticsStreamInputIothubSerialization>;
    public readonly sharedAccessPolicyKey!: pulumi.Output<string>;
    public readonly sharedAccessPolicyName!: pulumi.Output<string>;
    public readonly streamAnalyticsJobName!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.StreamAnalyticsStreamInputIothubTimeouts | undefined>;

    /**
     * Create a StreamAnalyticsStreamInputIothub resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StreamAnalyticsStreamInputIothubArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StreamAnalyticsStreamInputIothubArgs | StreamAnalyticsStreamInputIothubState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StreamAnalyticsStreamInputIothubState | undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["eventhubConsumerGroupName"] = state ? state.eventhubConsumerGroupName : undefined;
            resourceInputs["iothubNamespace"] = state ? state.iothubNamespace : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["serialization"] = state ? state.serialization : undefined;
            resourceInputs["sharedAccessPolicyKey"] = state ? state.sharedAccessPolicyKey : undefined;
            resourceInputs["sharedAccessPolicyName"] = state ? state.sharedAccessPolicyName : undefined;
            resourceInputs["streamAnalyticsJobName"] = state ? state.streamAnalyticsJobName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as StreamAnalyticsStreamInputIothubArgs | undefined;
            if ((!args || args.endpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpoint'");
            }
            if ((!args || args.eventhubConsumerGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventhubConsumerGroupName'");
            }
            if ((!args || args.iothubNamespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'iothubNamespace'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.serialization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serialization'");
            }
            if ((!args || args.sharedAccessPolicyKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sharedAccessPolicyKey'");
            }
            if ((!args || args.sharedAccessPolicyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sharedAccessPolicyName'");
            }
            if ((!args || args.streamAnalyticsJobName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'streamAnalyticsJobName'");
            }
            resourceInputs["endpoint"] = args ? args.endpoint : undefined;
            resourceInputs["eventhubConsumerGroupName"] = args ? args.eventhubConsumerGroupName : undefined;
            resourceInputs["iothubNamespace"] = args ? args.iothubNamespace : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["serialization"] = args ? args.serialization : undefined;
            resourceInputs["sharedAccessPolicyKey"] = args?.sharedAccessPolicyKey ? pulumi.secret(args.sharedAccessPolicyKey) : undefined;
            resourceInputs["sharedAccessPolicyName"] = args ? args.sharedAccessPolicyName : undefined;
            resourceInputs["streamAnalyticsJobName"] = args ? args.streamAnalyticsJobName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sharedAccessPolicyKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(StreamAnalyticsStreamInputIothub.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StreamAnalyticsStreamInputIothub resources.
 */
export interface StreamAnalyticsStreamInputIothubState {
    endpoint?: pulumi.Input<string>;
    eventhubConsumerGroupName?: pulumi.Input<string>;
    iothubNamespace?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    serialization?: pulumi.Input<inputs.StreamAnalyticsStreamInputIothubSerialization>;
    sharedAccessPolicyKey?: pulumi.Input<string>;
    sharedAccessPolicyName?: pulumi.Input<string>;
    streamAnalyticsJobName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StreamAnalyticsStreamInputIothubTimeouts>;
}

/**
 * The set of arguments for constructing a StreamAnalyticsStreamInputIothub resource.
 */
export interface StreamAnalyticsStreamInputIothubArgs {
    endpoint: pulumi.Input<string>;
    eventhubConsumerGroupName: pulumi.Input<string>;
    iothubNamespace: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    serialization: pulumi.Input<inputs.StreamAnalyticsStreamInputIothubSerialization>;
    sharedAccessPolicyKey: pulumi.Input<string>;
    sharedAccessPolicyName: pulumi.Input<string>;
    streamAnalyticsJobName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StreamAnalyticsStreamInputIothubTimeouts>;
}
