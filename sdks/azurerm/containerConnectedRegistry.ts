// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ContainerConnectedRegistry extends pulumi.CustomResource {
    /**
     * Get an existing ContainerConnectedRegistry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerConnectedRegistryState, opts?: pulumi.CustomResourceOptions): ContainerConnectedRegistry {
        return new ContainerConnectedRegistry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/containerConnectedRegistry:ContainerConnectedRegistry';

    /**
     * Returns true if the given object is an instance of ContainerConnectedRegistry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerConnectedRegistry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerConnectedRegistry.__pulumiType;
    }

    public readonly auditLogEnabled!: pulumi.Output<boolean | undefined>;
    public readonly clientTokenIds!: pulumi.Output<string[] | undefined>;
    public readonly containerRegistryId!: pulumi.Output<string>;
    public readonly logLevel!: pulumi.Output<string | undefined>;
    public readonly mode!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly notifications!: pulumi.Output<outputs.ContainerConnectedRegistryNotification[] | undefined>;
    public readonly parentRegistryId!: pulumi.Output<string | undefined>;
    public readonly syncMessageTtl!: pulumi.Output<string | undefined>;
    public readonly syncSchedule!: pulumi.Output<string | undefined>;
    public readonly syncTokenId!: pulumi.Output<string>;
    public readonly syncWindow!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ContainerConnectedRegistryTimeouts | undefined>;

    /**
     * Create a ContainerConnectedRegistry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerConnectedRegistryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerConnectedRegistryArgs | ContainerConnectedRegistryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerConnectedRegistryState | undefined;
            resourceInputs["auditLogEnabled"] = state ? state.auditLogEnabled : undefined;
            resourceInputs["clientTokenIds"] = state ? state.clientTokenIds : undefined;
            resourceInputs["containerRegistryId"] = state ? state.containerRegistryId : undefined;
            resourceInputs["logLevel"] = state ? state.logLevel : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["parentRegistryId"] = state ? state.parentRegistryId : undefined;
            resourceInputs["syncMessageTtl"] = state ? state.syncMessageTtl : undefined;
            resourceInputs["syncSchedule"] = state ? state.syncSchedule : undefined;
            resourceInputs["syncTokenId"] = state ? state.syncTokenId : undefined;
            resourceInputs["syncWindow"] = state ? state.syncWindow : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ContainerConnectedRegistryArgs | undefined;
            if ((!args || args.containerRegistryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerRegistryId'");
            }
            if ((!args || args.syncTokenId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'syncTokenId'");
            }
            resourceInputs["auditLogEnabled"] = args ? args.auditLogEnabled : undefined;
            resourceInputs["clientTokenIds"] = args ? args.clientTokenIds : undefined;
            resourceInputs["containerRegistryId"] = args ? args.containerRegistryId : undefined;
            resourceInputs["logLevel"] = args ? args.logLevel : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notifications"] = args ? args.notifications : undefined;
            resourceInputs["parentRegistryId"] = args ? args.parentRegistryId : undefined;
            resourceInputs["syncMessageTtl"] = args ? args.syncMessageTtl : undefined;
            resourceInputs["syncSchedule"] = args ? args.syncSchedule : undefined;
            resourceInputs["syncTokenId"] = args ? args.syncTokenId : undefined;
            resourceInputs["syncWindow"] = args ? args.syncWindow : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerConnectedRegistry.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContainerConnectedRegistry resources.
 */
export interface ContainerConnectedRegistryState {
    auditLogEnabled?: pulumi.Input<boolean>;
    clientTokenIds?: pulumi.Input<pulumi.Input<string>[]>;
    containerRegistryId?: pulumi.Input<string>;
    logLevel?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notifications?: pulumi.Input<pulumi.Input<inputs.ContainerConnectedRegistryNotification>[]>;
    parentRegistryId?: pulumi.Input<string>;
    syncMessageTtl?: pulumi.Input<string>;
    syncSchedule?: pulumi.Input<string>;
    syncTokenId?: pulumi.Input<string>;
    syncWindow?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ContainerConnectedRegistryTimeouts>;
}

/**
 * The set of arguments for constructing a ContainerConnectedRegistry resource.
 */
export interface ContainerConnectedRegistryArgs {
    auditLogEnabled?: pulumi.Input<boolean>;
    clientTokenIds?: pulumi.Input<pulumi.Input<string>[]>;
    containerRegistryId: pulumi.Input<string>;
    logLevel?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notifications?: pulumi.Input<pulumi.Input<inputs.ContainerConnectedRegistryNotification>[]>;
    parentRegistryId?: pulumi.Input<string>;
    syncMessageTtl?: pulumi.Input<string>;
    syncSchedule?: pulumi.Input<string>;
    syncTokenId: pulumi.Input<string>;
    syncWindow?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ContainerConnectedRegistryTimeouts>;
}
