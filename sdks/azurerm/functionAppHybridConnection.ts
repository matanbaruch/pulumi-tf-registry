// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FunctionAppHybridConnection extends pulumi.CustomResource {
    /**
     * Get an existing FunctionAppHybridConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FunctionAppHybridConnectionState, opts?: pulumi.CustomResourceOptions): FunctionAppHybridConnection {
        return new FunctionAppHybridConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/functionAppHybridConnection:FunctionAppHybridConnection';

    /**
     * Returns true if the given object is an instance of FunctionAppHybridConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FunctionAppHybridConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FunctionAppHybridConnection.__pulumiType;
    }

    /**
     * The ID of the Function App for this Hybrid Connection.
     */
    public readonly functionAppId!: pulumi.Output<string>;
    /**
     * The hostname of the endpoint.
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * The name of the Relay Namespace.
     */
    public /*out*/ readonly namespaceName!: pulumi.Output<string>;
    /**
     * The port to use for the endpoint
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * The ID of the Relay Hybrid Connection to use.
     */
    public readonly relayId!: pulumi.Output<string>;
    /**
     * The name of the Relay in use.
     */
    public /*out*/ readonly relayName!: pulumi.Output<string>;
    /**
     * The name of the Relay key with `Send` permission to use. Defaults to `RootManageSharedAccessKey`
     */
    public readonly sendKeyName!: pulumi.Output<string | undefined>;
    /**
     * The Primary Access Key for the `send_key_name`
     */
    public /*out*/ readonly sendKeyValue!: pulumi.Output<string>;
    /**
     * The Service Bus Namespace.
     */
    public /*out*/ readonly serviceBusNamespace!: pulumi.Output<string>;
    /**
     * The suffix for the endpoint.
     */
    public /*out*/ readonly serviceBusSuffix!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.FunctionAppHybridConnectionTimeouts | undefined>;

    /**
     * Create a FunctionAppHybridConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FunctionAppHybridConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FunctionAppHybridConnectionArgs | FunctionAppHybridConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FunctionAppHybridConnectionState | undefined;
            resourceInputs["functionAppId"] = state ? state.functionAppId : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["namespaceName"] = state ? state.namespaceName : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["relayId"] = state ? state.relayId : undefined;
            resourceInputs["relayName"] = state ? state.relayName : undefined;
            resourceInputs["sendKeyName"] = state ? state.sendKeyName : undefined;
            resourceInputs["sendKeyValue"] = state ? state.sendKeyValue : undefined;
            resourceInputs["serviceBusNamespace"] = state ? state.serviceBusNamespace : undefined;
            resourceInputs["serviceBusSuffix"] = state ? state.serviceBusSuffix : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as FunctionAppHybridConnectionArgs | undefined;
            if ((!args || args.functionAppId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionAppId'");
            }
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.relayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'relayId'");
            }
            resourceInputs["functionAppId"] = args ? args.functionAppId : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["relayId"] = args ? args.relayId : undefined;
            resourceInputs["sendKeyName"] = args ? args.sendKeyName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["namespaceName"] = undefined /*out*/;
            resourceInputs["relayName"] = undefined /*out*/;
            resourceInputs["sendKeyValue"] = undefined /*out*/;
            resourceInputs["serviceBusNamespace"] = undefined /*out*/;
            resourceInputs["serviceBusSuffix"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sendKeyValue"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(FunctionAppHybridConnection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FunctionAppHybridConnection resources.
 */
export interface FunctionAppHybridConnectionState {
    /**
     * The ID of the Function App for this Hybrid Connection.
     */
    functionAppId?: pulumi.Input<string>;
    /**
     * The hostname of the endpoint.
     */
    hostname?: pulumi.Input<string>;
    /**
     * The name of the Relay Namespace.
     */
    namespaceName?: pulumi.Input<string>;
    /**
     * The port to use for the endpoint
     */
    port?: pulumi.Input<number>;
    /**
     * The ID of the Relay Hybrid Connection to use.
     */
    relayId?: pulumi.Input<string>;
    /**
     * The name of the Relay in use.
     */
    relayName?: pulumi.Input<string>;
    /**
     * The name of the Relay key with `Send` permission to use. Defaults to `RootManageSharedAccessKey`
     */
    sendKeyName?: pulumi.Input<string>;
    /**
     * The Primary Access Key for the `send_key_name`
     */
    sendKeyValue?: pulumi.Input<string>;
    /**
     * The Service Bus Namespace.
     */
    serviceBusNamespace?: pulumi.Input<string>;
    /**
     * The suffix for the endpoint.
     */
    serviceBusSuffix?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FunctionAppHybridConnectionTimeouts>;
}

/**
 * The set of arguments for constructing a FunctionAppHybridConnection resource.
 */
export interface FunctionAppHybridConnectionArgs {
    /**
     * The ID of the Function App for this Hybrid Connection.
     */
    functionAppId: pulumi.Input<string>;
    /**
     * The hostname of the endpoint.
     */
    hostname: pulumi.Input<string>;
    /**
     * The port to use for the endpoint
     */
    port: pulumi.Input<number>;
    /**
     * The ID of the Relay Hybrid Connection to use.
     */
    relayId: pulumi.Input<string>;
    /**
     * The name of the Relay key with `Send` permission to use. Defaults to `RootManageSharedAccessKey`
     */
    sendKeyName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FunctionAppHybridConnectionTimeouts>;
}
