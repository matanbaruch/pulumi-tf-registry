// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StreamAnalyticsOutputFunction extends pulumi.CustomResource {
    /**
     * Get an existing StreamAnalyticsOutputFunction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StreamAnalyticsOutputFunctionState, opts?: pulumi.CustomResourceOptions): StreamAnalyticsOutputFunction {
        return new StreamAnalyticsOutputFunction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/streamAnalyticsOutputFunction:StreamAnalyticsOutputFunction';

    /**
     * Returns true if the given object is an instance of StreamAnalyticsOutputFunction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StreamAnalyticsOutputFunction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamAnalyticsOutputFunction.__pulumiType;
    }

    public readonly apiKey!: pulumi.Output<string>;
    public readonly batchMaxCount!: pulumi.Output<number | undefined>;
    public readonly batchMaxInBytes!: pulumi.Output<number | undefined>;
    public readonly functionApp!: pulumi.Output<string>;
    public readonly functionName!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly streamAnalyticsJobName!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.StreamAnalyticsOutputFunctionTimeouts | undefined>;

    /**
     * Create a StreamAnalyticsOutputFunction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StreamAnalyticsOutputFunctionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StreamAnalyticsOutputFunctionArgs | StreamAnalyticsOutputFunctionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StreamAnalyticsOutputFunctionState | undefined;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["batchMaxCount"] = state ? state.batchMaxCount : undefined;
            resourceInputs["batchMaxInBytes"] = state ? state.batchMaxInBytes : undefined;
            resourceInputs["functionApp"] = state ? state.functionApp : undefined;
            resourceInputs["functionName"] = state ? state.functionName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["streamAnalyticsJobName"] = state ? state.streamAnalyticsJobName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as StreamAnalyticsOutputFunctionArgs | undefined;
            if ((!args || args.apiKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiKey'");
            }
            if ((!args || args.functionApp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionApp'");
            }
            if ((!args || args.functionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.streamAnalyticsJobName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'streamAnalyticsJobName'");
            }
            resourceInputs["apiKey"] = args?.apiKey ? pulumi.secret(args.apiKey) : undefined;
            resourceInputs["batchMaxCount"] = args ? args.batchMaxCount : undefined;
            resourceInputs["batchMaxInBytes"] = args ? args.batchMaxInBytes : undefined;
            resourceInputs["functionApp"] = args ? args.functionApp : undefined;
            resourceInputs["functionName"] = args ? args.functionName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["streamAnalyticsJobName"] = args ? args.streamAnalyticsJobName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(StreamAnalyticsOutputFunction.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StreamAnalyticsOutputFunction resources.
 */
export interface StreamAnalyticsOutputFunctionState {
    apiKey?: pulumi.Input<string>;
    batchMaxCount?: pulumi.Input<number>;
    batchMaxInBytes?: pulumi.Input<number>;
    functionApp?: pulumi.Input<string>;
    functionName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    streamAnalyticsJobName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StreamAnalyticsOutputFunctionTimeouts>;
}

/**
 * The set of arguments for constructing a StreamAnalyticsOutputFunction resource.
 */
export interface StreamAnalyticsOutputFunctionArgs {
    apiKey: pulumi.Input<string>;
    batchMaxCount?: pulumi.Input<number>;
    batchMaxInBytes?: pulumi.Input<number>;
    functionApp: pulumi.Input<string>;
    functionName: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    streamAnalyticsJobName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StreamAnalyticsOutputFunctionTimeouts>;
}
