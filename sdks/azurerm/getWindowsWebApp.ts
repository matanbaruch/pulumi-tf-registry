// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getWindowsWebApp(args: GetWindowsWebAppArgs, opts?: pulumi.InvokeOptions): Promise<GetWindowsWebAppResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azurerm:index/getWindowsWebApp:getWindowsWebApp", {
        "id": args.id,
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getWindowsWebApp.
 */
export interface GetWindowsWebAppArgs {
    id?: string;
    name: string;
    resourceGroupName: string;
    timeouts?: inputs.GetWindowsWebAppTimeouts;
}

/**
 * A collection of values returned by getWindowsWebApp.
 */
export interface GetWindowsWebAppResult {
    readonly appSettings: {[key: string]: string};
    readonly authSettings: outputs.GetWindowsWebAppAuthSetting[];
    readonly authSettingsV2s: outputs.GetWindowsWebAppAuthSettingsV2[];
    readonly backups: outputs.GetWindowsWebAppBackup[];
    readonly clientAffinityEnabled: boolean;
    readonly clientCertificateEnabled: boolean;
    readonly clientCertificateExclusionPaths: string;
    readonly clientCertificateMode: string;
    readonly connectionStrings: outputs.GetWindowsWebAppConnectionString[];
    readonly customDomainVerificationId: string;
    readonly defaultHostname: string;
    readonly enabled: boolean;
    readonly ftpPublishBasicAuthenticationEnabled: boolean;
    readonly hostingEnvironmentId: string;
    readonly httpsOnly: boolean;
    readonly id: string;
    readonly identities: outputs.GetWindowsWebAppIdentity[];
    readonly kind: string;
    readonly location: string;
    readonly logs: outputs.GetWindowsWebAppLog[];
    readonly name: string;
    readonly outboundIpAddressLists: string[];
    readonly outboundIpAddresses: string;
    readonly possibleOutboundIpAddressLists: string[];
    readonly possibleOutboundIpAddresses: string;
    readonly publicNetworkAccessEnabled: boolean;
    readonly resourceGroupName: string;
    readonly servicePlanId: string;
    readonly siteConfigs: outputs.GetWindowsWebAppSiteConfig[];
    readonly siteCredentials: outputs.GetWindowsWebAppSiteCredential[];
    readonly stickySettings: outputs.GetWindowsWebAppStickySetting[];
    readonly storageAccounts: outputs.GetWindowsWebAppStorageAccount[];
    readonly tags: {[key: string]: string};
    readonly timeouts?: outputs.GetWindowsWebAppTimeouts;
    readonly virtualNetworkSubnetId: string;
    readonly webdeployPublishBasicAuthenticationEnabled: boolean;
}
export function getWindowsWebAppOutput(args: GetWindowsWebAppOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWindowsWebAppResult> {
    return pulumi.output(args).apply((a: any) => getWindowsWebApp(a, opts))
}

/**
 * A collection of arguments for invoking getWindowsWebApp.
 */
export interface GetWindowsWebAppOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetWindowsWebAppTimeoutsArgs>;
}
