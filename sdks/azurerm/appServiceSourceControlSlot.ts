// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AppServiceSourceControlSlot extends pulumi.CustomResource {
    /**
     * Get an existing AppServiceSourceControlSlot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppServiceSourceControlSlotState, opts?: pulumi.CustomResourceOptions): AppServiceSourceControlSlot {
        return new AppServiceSourceControlSlot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/appServiceSourceControlSlot:AppServiceSourceControlSlot';

    /**
     * Returns true if the given object is an instance of AppServiceSourceControlSlot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppServiceSourceControlSlot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppServiceSourceControlSlot.__pulumiType;
    }

    /**
     * The URL for the repository
     */
    public readonly branch!: pulumi.Output<string>;
    public readonly githubActionConfiguration!: pulumi.Output<outputs.AppServiceSourceControlSlotGithubActionConfiguration | undefined>;
    /**
     * The branch name to use for deployments.
     */
    public readonly repoUrl!: pulumi.Output<string>;
    /**
     * Should the Deployment Rollback be enabled? Defaults to `false`
     */
    public readonly rollbackEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The SCM Type in use. This value is decoded by the service from the repository information supplied.
     */
    public /*out*/ readonly scmType!: pulumi.Output<string>;
    /**
     * The ID of the Linux or Windows Web App Slot.
     */
    public readonly slotId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.AppServiceSourceControlSlotTimeouts | undefined>;
    /**
     * Should the Slot use local Git configuration.
     */
    public readonly useLocalGit!: pulumi.Output<boolean | undefined>;
    /**
     * Should code be deployed manually. Set to `true` to disable continuous integration, such as webhooks into online repos
     * such as GitHub. Defaults to `false`
     */
    public readonly useManualIntegration!: pulumi.Output<boolean | undefined>;
    /**
     * The repository specified is Mercurial. Defaults to `false`.
     */
    public readonly useMercurial!: pulumi.Output<boolean | undefined>;
    /**
     * Indicates if the Slot uses a GitHub action for deployment. This value is decoded by the service from the repository
     * information supplied.
     */
    public /*out*/ readonly usesGithubAction!: pulumi.Output<boolean>;

    /**
     * Create a AppServiceSourceControlSlot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppServiceSourceControlSlotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppServiceSourceControlSlotArgs | AppServiceSourceControlSlotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppServiceSourceControlSlotState | undefined;
            resourceInputs["branch"] = state ? state.branch : undefined;
            resourceInputs["githubActionConfiguration"] = state ? state.githubActionConfiguration : undefined;
            resourceInputs["repoUrl"] = state ? state.repoUrl : undefined;
            resourceInputs["rollbackEnabled"] = state ? state.rollbackEnabled : undefined;
            resourceInputs["scmType"] = state ? state.scmType : undefined;
            resourceInputs["slotId"] = state ? state.slotId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["useLocalGit"] = state ? state.useLocalGit : undefined;
            resourceInputs["useManualIntegration"] = state ? state.useManualIntegration : undefined;
            resourceInputs["useMercurial"] = state ? state.useMercurial : undefined;
            resourceInputs["usesGithubAction"] = state ? state.usesGithubAction : undefined;
        } else {
            const args = argsOrState as AppServiceSourceControlSlotArgs | undefined;
            if ((!args || args.slotId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slotId'");
            }
            resourceInputs["branch"] = args ? args.branch : undefined;
            resourceInputs["githubActionConfiguration"] = args ? args.githubActionConfiguration : undefined;
            resourceInputs["repoUrl"] = args ? args.repoUrl : undefined;
            resourceInputs["rollbackEnabled"] = args ? args.rollbackEnabled : undefined;
            resourceInputs["slotId"] = args ? args.slotId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["useLocalGit"] = args ? args.useLocalGit : undefined;
            resourceInputs["useManualIntegration"] = args ? args.useManualIntegration : undefined;
            resourceInputs["useMercurial"] = args ? args.useMercurial : undefined;
            resourceInputs["scmType"] = undefined /*out*/;
            resourceInputs["usesGithubAction"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppServiceSourceControlSlot.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AppServiceSourceControlSlot resources.
 */
export interface AppServiceSourceControlSlotState {
    /**
     * The URL for the repository
     */
    branch?: pulumi.Input<string>;
    githubActionConfiguration?: pulumi.Input<inputs.AppServiceSourceControlSlotGithubActionConfiguration>;
    /**
     * The branch name to use for deployments.
     */
    repoUrl?: pulumi.Input<string>;
    /**
     * Should the Deployment Rollback be enabled? Defaults to `false`
     */
    rollbackEnabled?: pulumi.Input<boolean>;
    /**
     * The SCM Type in use. This value is decoded by the service from the repository information supplied.
     */
    scmType?: pulumi.Input<string>;
    /**
     * The ID of the Linux or Windows Web App Slot.
     */
    slotId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.AppServiceSourceControlSlotTimeouts>;
    /**
     * Should the Slot use local Git configuration.
     */
    useLocalGit?: pulumi.Input<boolean>;
    /**
     * Should code be deployed manually. Set to `true` to disable continuous integration, such as webhooks into online repos
     * such as GitHub. Defaults to `false`
     */
    useManualIntegration?: pulumi.Input<boolean>;
    /**
     * The repository specified is Mercurial. Defaults to `false`.
     */
    useMercurial?: pulumi.Input<boolean>;
    /**
     * Indicates if the Slot uses a GitHub action for deployment. This value is decoded by the service from the repository
     * information supplied.
     */
    usesGithubAction?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AppServiceSourceControlSlot resource.
 */
export interface AppServiceSourceControlSlotArgs {
    /**
     * The URL for the repository
     */
    branch?: pulumi.Input<string>;
    githubActionConfiguration?: pulumi.Input<inputs.AppServiceSourceControlSlotGithubActionConfiguration>;
    /**
     * The branch name to use for deployments.
     */
    repoUrl?: pulumi.Input<string>;
    /**
     * Should the Deployment Rollback be enabled? Defaults to `false`
     */
    rollbackEnabled?: pulumi.Input<boolean>;
    /**
     * The ID of the Linux or Windows Web App Slot.
     */
    slotId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.AppServiceSourceControlSlotTimeouts>;
    /**
     * Should the Slot use local Git configuration.
     */
    useLocalGit?: pulumi.Input<boolean>;
    /**
     * Should code be deployed manually. Set to `true` to disable continuous integration, such as webhooks into online repos
     * such as GitHub. Defaults to `false`
     */
    useManualIntegration?: pulumi.Input<boolean>;
    /**
     * The repository specified is Mercurial. Defaults to `false`.
     */
    useMercurial?: pulumi.Input<boolean>;
}
