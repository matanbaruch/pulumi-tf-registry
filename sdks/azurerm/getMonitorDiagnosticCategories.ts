// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMonitorDiagnosticCategories(args: GetMonitorDiagnosticCategoriesArgs, opts?: pulumi.InvokeOptions): Promise<GetMonitorDiagnosticCategoriesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azurerm:index/getMonitorDiagnosticCategories:getMonitorDiagnosticCategories", {
        "id": args.id,
        "resourceId": args.resourceId,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMonitorDiagnosticCategories.
 */
export interface GetMonitorDiagnosticCategoriesArgs {
    id?: string;
    resourceId: string;
    timeouts?: inputs.GetMonitorDiagnosticCategoriesTimeouts;
}

/**
 * A collection of values returned by getMonitorDiagnosticCategories.
 */
export interface GetMonitorDiagnosticCategoriesResult {
    readonly id: string;
    readonly logCategoryGroups: string[];
    readonly logCategoryTypes: string[];
    readonly metrics: string[];
    readonly resourceId: string;
    readonly timeouts?: outputs.GetMonitorDiagnosticCategoriesTimeouts;
}
export function getMonitorDiagnosticCategoriesOutput(args: GetMonitorDiagnosticCategoriesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMonitorDiagnosticCategoriesResult> {
    return pulumi.output(args).apply((a: any) => getMonitorDiagnosticCategories(a, opts))
}

/**
 * A collection of arguments for invoking getMonitorDiagnosticCategories.
 */
export interface GetMonitorDiagnosticCategoriesOutputArgs {
    id?: pulumi.Input<string>;
    resourceId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetMonitorDiagnosticCategoriesTimeoutsArgs>;
}
