// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ArcKubernetesCluster extends pulumi.CustomResource {
    /**
     * Get an existing ArcKubernetesCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ArcKubernetesClusterState, opts?: pulumi.CustomResourceOptions): ArcKubernetesCluster {
        return new ArcKubernetesCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/arcKubernetesCluster:ArcKubernetesCluster';

    /**
     * Returns true if the given object is an instance of ArcKubernetesCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ArcKubernetesCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ArcKubernetesCluster.__pulumiType;
    }

    public readonly agentPublicKeyCertificate!: pulumi.Output<string>;
    public /*out*/ readonly agentVersion!: pulumi.Output<string>;
    public /*out*/ readonly distribution!: pulumi.Output<string>;
    public readonly identity!: pulumi.Output<outputs.ArcKubernetesClusterIdentity>;
    public /*out*/ readonly infrastructure!: pulumi.Output<string>;
    public /*out*/ readonly kubernetesVersion!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly offering!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ArcKubernetesClusterTimeouts | undefined>;
    public /*out*/ readonly totalCoreCount!: pulumi.Output<number>;
    public /*out*/ readonly totalNodeCount!: pulumi.Output<number>;

    /**
     * Create a ArcKubernetesCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ArcKubernetesClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ArcKubernetesClusterArgs | ArcKubernetesClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ArcKubernetesClusterState | undefined;
            resourceInputs["agentPublicKeyCertificate"] = state ? state.agentPublicKeyCertificate : undefined;
            resourceInputs["agentVersion"] = state ? state.agentVersion : undefined;
            resourceInputs["distribution"] = state ? state.distribution : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["infrastructure"] = state ? state.infrastructure : undefined;
            resourceInputs["kubernetesVersion"] = state ? state.kubernetesVersion : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["offering"] = state ? state.offering : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["totalCoreCount"] = state ? state.totalCoreCount : undefined;
            resourceInputs["totalNodeCount"] = state ? state.totalNodeCount : undefined;
        } else {
            const args = argsOrState as ArcKubernetesClusterArgs | undefined;
            if ((!args || args.agentPublicKeyCertificate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agentPublicKeyCertificate'");
            }
            if ((!args || args.identity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identity'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["agentPublicKeyCertificate"] = args ? args.agentPublicKeyCertificate : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["agentVersion"] = undefined /*out*/;
            resourceInputs["distribution"] = undefined /*out*/;
            resourceInputs["infrastructure"] = undefined /*out*/;
            resourceInputs["kubernetesVersion"] = undefined /*out*/;
            resourceInputs["offering"] = undefined /*out*/;
            resourceInputs["totalCoreCount"] = undefined /*out*/;
            resourceInputs["totalNodeCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ArcKubernetesCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ArcKubernetesCluster resources.
 */
export interface ArcKubernetesClusterState {
    agentPublicKeyCertificate?: pulumi.Input<string>;
    agentVersion?: pulumi.Input<string>;
    distribution?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.ArcKubernetesClusterIdentity>;
    infrastructure?: pulumi.Input<string>;
    kubernetesVersion?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    offering?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ArcKubernetesClusterTimeouts>;
    totalCoreCount?: pulumi.Input<number>;
    totalNodeCount?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ArcKubernetesCluster resource.
 */
export interface ArcKubernetesClusterArgs {
    agentPublicKeyCertificate: pulumi.Input<string>;
    identity: pulumi.Input<inputs.ArcKubernetesClusterIdentity>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ArcKubernetesClusterTimeouts>;
}
