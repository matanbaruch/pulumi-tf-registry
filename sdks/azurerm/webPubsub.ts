// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WebPubsub extends pulumi.CustomResource {
    /**
     * Get an existing WebPubsub resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebPubsubState, opts?: pulumi.CustomResourceOptions): WebPubsub {
        return new WebPubsub(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/webPubsub:WebPubsub';

    /**
     * Returns true if the given object is an instance of WebPubsub.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WebPubsub {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WebPubsub.__pulumiType;
    }

    public readonly aadAuthEnabled!: pulumi.Output<boolean | undefined>;
    public readonly capacity!: pulumi.Output<number | undefined>;
    public /*out*/ readonly externalIp!: pulumi.Output<string>;
    public /*out*/ readonly hostname!: pulumi.Output<string>;
    public readonly identity!: pulumi.Output<outputs.WebPubsubIdentity | undefined>;
    public readonly liveTrace!: pulumi.Output<outputs.WebPubsubLiveTrace | undefined>;
    public readonly localAuthEnabled!: pulumi.Output<boolean | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly primaryAccessKey!: pulumi.Output<string>;
    public /*out*/ readonly primaryConnectionString!: pulumi.Output<string>;
    public readonly publicNetworkAccessEnabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly publicPort!: pulumi.Output<number>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public /*out*/ readonly secondaryAccessKey!: pulumi.Output<string>;
    public /*out*/ readonly secondaryConnectionString!: pulumi.Output<string>;
    public /*out*/ readonly serverPort!: pulumi.Output<number>;
    public readonly sku!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.WebPubsubTimeouts | undefined>;
    public readonly tlsClientCertEnabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a WebPubsub resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebPubsubArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebPubsubArgs | WebPubsubState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebPubsubState | undefined;
            resourceInputs["aadAuthEnabled"] = state ? state.aadAuthEnabled : undefined;
            resourceInputs["capacity"] = state ? state.capacity : undefined;
            resourceInputs["externalIp"] = state ? state.externalIp : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["liveTrace"] = state ? state.liveTrace : undefined;
            resourceInputs["localAuthEnabled"] = state ? state.localAuthEnabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["primaryAccessKey"] = state ? state.primaryAccessKey : undefined;
            resourceInputs["primaryConnectionString"] = state ? state.primaryConnectionString : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            resourceInputs["publicPort"] = state ? state.publicPort : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["secondaryAccessKey"] = state ? state.secondaryAccessKey : undefined;
            resourceInputs["secondaryConnectionString"] = state ? state.secondaryConnectionString : undefined;
            resourceInputs["serverPort"] = state ? state.serverPort : undefined;
            resourceInputs["sku"] = state ? state.sku : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["tlsClientCertEnabled"] = state ? state.tlsClientCertEnabled : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as WebPubsubArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.sku === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sku'");
            }
            resourceInputs["aadAuthEnabled"] = args ? args.aadAuthEnabled : undefined;
            resourceInputs["capacity"] = args ? args.capacity : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["liveTrace"] = args ? args.liveTrace : undefined;
            resourceInputs["localAuthEnabled"] = args ? args.localAuthEnabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["tlsClientCertEnabled"] = args ? args.tlsClientCertEnabled : undefined;
            resourceInputs["externalIp"] = undefined /*out*/;
            resourceInputs["hostname"] = undefined /*out*/;
            resourceInputs["primaryAccessKey"] = undefined /*out*/;
            resourceInputs["primaryConnectionString"] = undefined /*out*/;
            resourceInputs["publicPort"] = undefined /*out*/;
            resourceInputs["secondaryAccessKey"] = undefined /*out*/;
            resourceInputs["secondaryConnectionString"] = undefined /*out*/;
            resourceInputs["serverPort"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["primaryAccessKey", "primaryConnectionString", "secondaryAccessKey", "secondaryConnectionString"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(WebPubsub.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WebPubsub resources.
 */
export interface WebPubsubState {
    aadAuthEnabled?: pulumi.Input<boolean>;
    capacity?: pulumi.Input<number>;
    externalIp?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.WebPubsubIdentity>;
    liveTrace?: pulumi.Input<inputs.WebPubsubLiveTrace>;
    localAuthEnabled?: pulumi.Input<boolean>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    primaryAccessKey?: pulumi.Input<string>;
    primaryConnectionString?: pulumi.Input<string>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    publicPort?: pulumi.Input<number>;
    resourceGroupName?: pulumi.Input<string>;
    secondaryAccessKey?: pulumi.Input<string>;
    secondaryConnectionString?: pulumi.Input<string>;
    serverPort?: pulumi.Input<number>;
    sku?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.WebPubsubTimeouts>;
    tlsClientCertEnabled?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WebPubsub resource.
 */
export interface WebPubsubArgs {
    aadAuthEnabled?: pulumi.Input<boolean>;
    capacity?: pulumi.Input<number>;
    identity?: pulumi.Input<inputs.WebPubsubIdentity>;
    liveTrace?: pulumi.Input<inputs.WebPubsubLiveTrace>;
    localAuthEnabled?: pulumi.Input<boolean>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    resourceGroupName: pulumi.Input<string>;
    sku: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.WebPubsubTimeouts>;
    tlsClientCertEnabled?: pulumi.Input<boolean>;
}
