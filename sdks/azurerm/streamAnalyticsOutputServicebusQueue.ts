// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StreamAnalyticsOutputServicebusQueue extends pulumi.CustomResource {
    /**
     * Get an existing StreamAnalyticsOutputServicebusQueue resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StreamAnalyticsOutputServicebusQueueState, opts?: pulumi.CustomResourceOptions): StreamAnalyticsOutputServicebusQueue {
        return new StreamAnalyticsOutputServicebusQueue(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/streamAnalyticsOutputServicebusQueue:StreamAnalyticsOutputServicebusQueue';

    /**
     * Returns true if the given object is an instance of StreamAnalyticsOutputServicebusQueue.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StreamAnalyticsOutputServicebusQueue {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamAnalyticsOutputServicebusQueue.__pulumiType;
    }

    public readonly authenticationMode!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly propertyColumns!: pulumi.Output<string[] | undefined>;
    public readonly queueName!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly serialization!: pulumi.Output<outputs.StreamAnalyticsOutputServicebusQueueSerialization>;
    public readonly servicebusNamespace!: pulumi.Output<string>;
    public readonly sharedAccessPolicyKey!: pulumi.Output<string | undefined>;
    public readonly sharedAccessPolicyName!: pulumi.Output<string | undefined>;
    public readonly streamAnalyticsJobName!: pulumi.Output<string>;
    public readonly systemPropertyColumns!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.StreamAnalyticsOutputServicebusQueueTimeouts | undefined>;

    /**
     * Create a StreamAnalyticsOutputServicebusQueue resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StreamAnalyticsOutputServicebusQueueArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StreamAnalyticsOutputServicebusQueueArgs | StreamAnalyticsOutputServicebusQueueState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StreamAnalyticsOutputServicebusQueueState | undefined;
            resourceInputs["authenticationMode"] = state ? state.authenticationMode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["propertyColumns"] = state ? state.propertyColumns : undefined;
            resourceInputs["queueName"] = state ? state.queueName : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["serialization"] = state ? state.serialization : undefined;
            resourceInputs["servicebusNamespace"] = state ? state.servicebusNamespace : undefined;
            resourceInputs["sharedAccessPolicyKey"] = state ? state.sharedAccessPolicyKey : undefined;
            resourceInputs["sharedAccessPolicyName"] = state ? state.sharedAccessPolicyName : undefined;
            resourceInputs["streamAnalyticsJobName"] = state ? state.streamAnalyticsJobName : undefined;
            resourceInputs["systemPropertyColumns"] = state ? state.systemPropertyColumns : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as StreamAnalyticsOutputServicebusQueueArgs | undefined;
            if ((!args || args.queueName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queueName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.serialization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serialization'");
            }
            if ((!args || args.servicebusNamespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servicebusNamespace'");
            }
            if ((!args || args.streamAnalyticsJobName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'streamAnalyticsJobName'");
            }
            resourceInputs["authenticationMode"] = args ? args.authenticationMode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["propertyColumns"] = args ? args.propertyColumns : undefined;
            resourceInputs["queueName"] = args ? args.queueName : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["serialization"] = args ? args.serialization : undefined;
            resourceInputs["servicebusNamespace"] = args ? args.servicebusNamespace : undefined;
            resourceInputs["sharedAccessPolicyKey"] = args?.sharedAccessPolicyKey ? pulumi.secret(args.sharedAccessPolicyKey) : undefined;
            resourceInputs["sharedAccessPolicyName"] = args ? args.sharedAccessPolicyName : undefined;
            resourceInputs["streamAnalyticsJobName"] = args ? args.streamAnalyticsJobName : undefined;
            resourceInputs["systemPropertyColumns"] = args ? args.systemPropertyColumns : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sharedAccessPolicyKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(StreamAnalyticsOutputServicebusQueue.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StreamAnalyticsOutputServicebusQueue resources.
 */
export interface StreamAnalyticsOutputServicebusQueueState {
    authenticationMode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    propertyColumns?: pulumi.Input<pulumi.Input<string>[]>;
    queueName?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    serialization?: pulumi.Input<inputs.StreamAnalyticsOutputServicebusQueueSerialization>;
    servicebusNamespace?: pulumi.Input<string>;
    sharedAccessPolicyKey?: pulumi.Input<string>;
    sharedAccessPolicyName?: pulumi.Input<string>;
    streamAnalyticsJobName?: pulumi.Input<string>;
    systemPropertyColumns?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.StreamAnalyticsOutputServicebusQueueTimeouts>;
}

/**
 * The set of arguments for constructing a StreamAnalyticsOutputServicebusQueue resource.
 */
export interface StreamAnalyticsOutputServicebusQueueArgs {
    authenticationMode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    propertyColumns?: pulumi.Input<pulumi.Input<string>[]>;
    queueName: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    serialization: pulumi.Input<inputs.StreamAnalyticsOutputServicebusQueueSerialization>;
    servicebusNamespace: pulumi.Input<string>;
    sharedAccessPolicyKey?: pulumi.Input<string>;
    sharedAccessPolicyName?: pulumi.Input<string>;
    streamAnalyticsJobName: pulumi.Input<string>;
    systemPropertyColumns?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.StreamAnalyticsOutputServicebusQueueTimeouts>;
}
