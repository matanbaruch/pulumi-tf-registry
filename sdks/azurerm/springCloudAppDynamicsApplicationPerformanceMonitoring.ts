// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SpringCloudAppDynamicsApplicationPerformanceMonitoring extends pulumi.CustomResource {
    /**
     * Get an existing SpringCloudAppDynamicsApplicationPerformanceMonitoring resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SpringCloudAppDynamicsApplicationPerformanceMonitoringState, opts?: pulumi.CustomResourceOptions): SpringCloudAppDynamicsApplicationPerformanceMonitoring {
        return new SpringCloudAppDynamicsApplicationPerformanceMonitoring(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/springCloudAppDynamicsApplicationPerformanceMonitoring:SpringCloudAppDynamicsApplicationPerformanceMonitoring';

    /**
     * Returns true if the given object is an instance of SpringCloudAppDynamicsApplicationPerformanceMonitoring.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SpringCloudAppDynamicsApplicationPerformanceMonitoring {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SpringCloudAppDynamicsApplicationPerformanceMonitoring.__pulumiType;
    }

    public readonly agentAccountAccessKey!: pulumi.Output<string>;
    public readonly agentAccountName!: pulumi.Output<string>;
    public readonly agentApplicationName!: pulumi.Output<string | undefined>;
    public readonly agentNodeName!: pulumi.Output<string | undefined>;
    public readonly agentTierName!: pulumi.Output<string | undefined>;
    public readonly agentUniqueHostId!: pulumi.Output<string | undefined>;
    public readonly controllerHostName!: pulumi.Output<string>;
    public readonly controllerPort!: pulumi.Output<number | undefined>;
    public readonly controllerSslEnabled!: pulumi.Output<boolean | undefined>;
    public readonly globallyEnabled!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly springCloudServiceId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.SpringCloudAppDynamicsApplicationPerformanceMonitoringTimeouts | undefined>;

    /**
     * Create a SpringCloudAppDynamicsApplicationPerformanceMonitoring resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SpringCloudAppDynamicsApplicationPerformanceMonitoringArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SpringCloudAppDynamicsApplicationPerformanceMonitoringArgs | SpringCloudAppDynamicsApplicationPerformanceMonitoringState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SpringCloudAppDynamicsApplicationPerformanceMonitoringState | undefined;
            resourceInputs["agentAccountAccessKey"] = state ? state.agentAccountAccessKey : undefined;
            resourceInputs["agentAccountName"] = state ? state.agentAccountName : undefined;
            resourceInputs["agentApplicationName"] = state ? state.agentApplicationName : undefined;
            resourceInputs["agentNodeName"] = state ? state.agentNodeName : undefined;
            resourceInputs["agentTierName"] = state ? state.agentTierName : undefined;
            resourceInputs["agentUniqueHostId"] = state ? state.agentUniqueHostId : undefined;
            resourceInputs["controllerHostName"] = state ? state.controllerHostName : undefined;
            resourceInputs["controllerPort"] = state ? state.controllerPort : undefined;
            resourceInputs["controllerSslEnabled"] = state ? state.controllerSslEnabled : undefined;
            resourceInputs["globallyEnabled"] = state ? state.globallyEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["springCloudServiceId"] = state ? state.springCloudServiceId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as SpringCloudAppDynamicsApplicationPerformanceMonitoringArgs | undefined;
            if ((!args || args.agentAccountAccessKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agentAccountAccessKey'");
            }
            if ((!args || args.agentAccountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agentAccountName'");
            }
            if ((!args || args.controllerHostName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'controllerHostName'");
            }
            if ((!args || args.springCloudServiceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'springCloudServiceId'");
            }
            resourceInputs["agentAccountAccessKey"] = args?.agentAccountAccessKey ? pulumi.secret(args.agentAccountAccessKey) : undefined;
            resourceInputs["agentAccountName"] = args?.agentAccountName ? pulumi.secret(args.agentAccountName) : undefined;
            resourceInputs["agentApplicationName"] = args ? args.agentApplicationName : undefined;
            resourceInputs["agentNodeName"] = args ? args.agentNodeName : undefined;
            resourceInputs["agentTierName"] = args ? args.agentTierName : undefined;
            resourceInputs["agentUniqueHostId"] = args ? args.agentUniqueHostId : undefined;
            resourceInputs["controllerHostName"] = args ? args.controllerHostName : undefined;
            resourceInputs["controllerPort"] = args ? args.controllerPort : undefined;
            resourceInputs["controllerSslEnabled"] = args ? args.controllerSslEnabled : undefined;
            resourceInputs["globallyEnabled"] = args ? args.globallyEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["springCloudServiceId"] = args ? args.springCloudServiceId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["agentAccountAccessKey", "agentAccountName"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SpringCloudAppDynamicsApplicationPerformanceMonitoring.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SpringCloudAppDynamicsApplicationPerformanceMonitoring resources.
 */
export interface SpringCloudAppDynamicsApplicationPerformanceMonitoringState {
    agentAccountAccessKey?: pulumi.Input<string>;
    agentAccountName?: pulumi.Input<string>;
    agentApplicationName?: pulumi.Input<string>;
    agentNodeName?: pulumi.Input<string>;
    agentTierName?: pulumi.Input<string>;
    agentUniqueHostId?: pulumi.Input<string>;
    controllerHostName?: pulumi.Input<string>;
    controllerPort?: pulumi.Input<number>;
    controllerSslEnabled?: pulumi.Input<boolean>;
    globallyEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    springCloudServiceId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SpringCloudAppDynamicsApplicationPerformanceMonitoringTimeouts>;
}

/**
 * The set of arguments for constructing a SpringCloudAppDynamicsApplicationPerformanceMonitoring resource.
 */
export interface SpringCloudAppDynamicsApplicationPerformanceMonitoringArgs {
    agentAccountAccessKey: pulumi.Input<string>;
    agentAccountName: pulumi.Input<string>;
    agentApplicationName?: pulumi.Input<string>;
    agentNodeName?: pulumi.Input<string>;
    agentTierName?: pulumi.Input<string>;
    agentUniqueHostId?: pulumi.Input<string>;
    controllerHostName: pulumi.Input<string>;
    controllerPort?: pulumi.Input<number>;
    controllerSslEnabled?: pulumi.Input<boolean>;
    globallyEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    springCloudServiceId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SpringCloudAppDynamicsApplicationPerformanceMonitoringTimeouts>;
}
