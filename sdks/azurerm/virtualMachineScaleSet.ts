// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VirtualMachineScaleSet extends pulumi.CustomResource {
    /**
     * Get an existing VirtualMachineScaleSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualMachineScaleSetState, opts?: pulumi.CustomResourceOptions): VirtualMachineScaleSet {
        return new VirtualMachineScaleSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/virtualMachineScaleSet:VirtualMachineScaleSet';

    /**
     * Returns true if the given object is an instance of VirtualMachineScaleSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualMachineScaleSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualMachineScaleSet.__pulumiType;
    }

    public readonly automaticOsUpgrade!: pulumi.Output<boolean | undefined>;
    public readonly bootDiagnostics!: pulumi.Output<outputs.VirtualMachineScaleSetBootDiagnostics | undefined>;
    public readonly evictionPolicy!: pulumi.Output<string | undefined>;
    public readonly extensions!: pulumi.Output<outputs.VirtualMachineScaleSetExtension[] | undefined>;
    public readonly healthProbeId!: pulumi.Output<string | undefined>;
    public readonly identity!: pulumi.Output<outputs.VirtualMachineScaleSetIdentity | undefined>;
    public readonly licenseType!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkProfiles!: pulumi.Output<outputs.VirtualMachineScaleSetNetworkProfile[]>;
    public readonly osProfile!: pulumi.Output<outputs.VirtualMachineScaleSetOsProfile>;
    public readonly osProfileLinuxConfig!: pulumi.Output<outputs.VirtualMachineScaleSetOsProfileLinuxConfig | undefined>;
    public readonly osProfileSecrets!: pulumi.Output<outputs.VirtualMachineScaleSetOsProfileSecret[] | undefined>;
    public readonly osProfileWindowsConfig!: pulumi.Output<outputs.VirtualMachineScaleSetOsProfileWindowsConfig | undefined>;
    public readonly overprovision!: pulumi.Output<boolean | undefined>;
    public readonly plan!: pulumi.Output<outputs.VirtualMachineScaleSetPlan | undefined>;
    public readonly priority!: pulumi.Output<string | undefined>;
    public readonly proximityPlacementGroupId!: pulumi.Output<string | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly rollingUpgradePolicy!: pulumi.Output<outputs.VirtualMachineScaleSetRollingUpgradePolicy | undefined>;
    public readonly singlePlacementGroup!: pulumi.Output<boolean | undefined>;
    public readonly sku!: pulumi.Output<outputs.VirtualMachineScaleSetSku>;
    public readonly storageProfileDataDisks!: pulumi.Output<outputs.VirtualMachineScaleSetStorageProfileDataDisk[] | undefined>;
    public readonly storageProfileImageReference!: pulumi.Output<outputs.VirtualMachineScaleSetStorageProfileImageReference | undefined>;
    public readonly storageProfileOsDisk!: pulumi.Output<outputs.VirtualMachineScaleSetStorageProfileOsDisk>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.VirtualMachineScaleSetTimeouts | undefined>;
    public readonly upgradePolicyMode!: pulumi.Output<string>;
    public readonly zones!: pulumi.Output<string[] | undefined>;

    /**
     * Create a VirtualMachineScaleSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualMachineScaleSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualMachineScaleSetArgs | VirtualMachineScaleSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualMachineScaleSetState | undefined;
            resourceInputs["automaticOsUpgrade"] = state ? state.automaticOsUpgrade : undefined;
            resourceInputs["bootDiagnostics"] = state ? state.bootDiagnostics : undefined;
            resourceInputs["evictionPolicy"] = state ? state.evictionPolicy : undefined;
            resourceInputs["extensions"] = state ? state.extensions : undefined;
            resourceInputs["healthProbeId"] = state ? state.healthProbeId : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["licenseType"] = state ? state.licenseType : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkProfiles"] = state ? state.networkProfiles : undefined;
            resourceInputs["osProfile"] = state ? state.osProfile : undefined;
            resourceInputs["osProfileLinuxConfig"] = state ? state.osProfileLinuxConfig : undefined;
            resourceInputs["osProfileSecrets"] = state ? state.osProfileSecrets : undefined;
            resourceInputs["osProfileWindowsConfig"] = state ? state.osProfileWindowsConfig : undefined;
            resourceInputs["overprovision"] = state ? state.overprovision : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["proximityPlacementGroupId"] = state ? state.proximityPlacementGroupId : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["rollingUpgradePolicy"] = state ? state.rollingUpgradePolicy : undefined;
            resourceInputs["singlePlacementGroup"] = state ? state.singlePlacementGroup : undefined;
            resourceInputs["sku"] = state ? state.sku : undefined;
            resourceInputs["storageProfileDataDisks"] = state ? state.storageProfileDataDisks : undefined;
            resourceInputs["storageProfileImageReference"] = state ? state.storageProfileImageReference : undefined;
            resourceInputs["storageProfileOsDisk"] = state ? state.storageProfileOsDisk : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["upgradePolicyMode"] = state ? state.upgradePolicyMode : undefined;
            resourceInputs["zones"] = state ? state.zones : undefined;
        } else {
            const args = argsOrState as VirtualMachineScaleSetArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.networkProfiles === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkProfiles'");
            }
            if ((!args || args.osProfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osProfile'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.sku === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sku'");
            }
            if ((!args || args.storageProfileOsDisk === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageProfileOsDisk'");
            }
            if ((!args || args.upgradePolicyMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'upgradePolicyMode'");
            }
            resourceInputs["automaticOsUpgrade"] = args ? args.automaticOsUpgrade : undefined;
            resourceInputs["bootDiagnostics"] = args ? args.bootDiagnostics : undefined;
            resourceInputs["evictionPolicy"] = args ? args.evictionPolicy : undefined;
            resourceInputs["extensions"] = args ? args.extensions : undefined;
            resourceInputs["healthProbeId"] = args ? args.healthProbeId : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["licenseType"] = args ? args.licenseType : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkProfiles"] = args ? args.networkProfiles : undefined;
            resourceInputs["osProfile"] = args ? args.osProfile : undefined;
            resourceInputs["osProfileLinuxConfig"] = args ? args.osProfileLinuxConfig : undefined;
            resourceInputs["osProfileSecrets"] = args ? args.osProfileSecrets : undefined;
            resourceInputs["osProfileWindowsConfig"] = args ? args.osProfileWindowsConfig : undefined;
            resourceInputs["overprovision"] = args ? args.overprovision : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["proximityPlacementGroupId"] = args ? args.proximityPlacementGroupId : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["rollingUpgradePolicy"] = args ? args.rollingUpgradePolicy : undefined;
            resourceInputs["singlePlacementGroup"] = args ? args.singlePlacementGroup : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["storageProfileDataDisks"] = args ? args.storageProfileDataDisks : undefined;
            resourceInputs["storageProfileImageReference"] = args ? args.storageProfileImageReference : undefined;
            resourceInputs["storageProfileOsDisk"] = args ? args.storageProfileOsDisk : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["upgradePolicyMode"] = args ? args.upgradePolicyMode : undefined;
            resourceInputs["zones"] = args ? args.zones : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualMachineScaleSet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VirtualMachineScaleSet resources.
 */
export interface VirtualMachineScaleSetState {
    automaticOsUpgrade?: pulumi.Input<boolean>;
    bootDiagnostics?: pulumi.Input<inputs.VirtualMachineScaleSetBootDiagnostics>;
    evictionPolicy?: pulumi.Input<string>;
    extensions?: pulumi.Input<pulumi.Input<inputs.VirtualMachineScaleSetExtension>[]>;
    healthProbeId?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.VirtualMachineScaleSetIdentity>;
    licenseType?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkProfiles?: pulumi.Input<pulumi.Input<inputs.VirtualMachineScaleSetNetworkProfile>[]>;
    osProfile?: pulumi.Input<inputs.VirtualMachineScaleSetOsProfile>;
    osProfileLinuxConfig?: pulumi.Input<inputs.VirtualMachineScaleSetOsProfileLinuxConfig>;
    osProfileSecrets?: pulumi.Input<pulumi.Input<inputs.VirtualMachineScaleSetOsProfileSecret>[]>;
    osProfileWindowsConfig?: pulumi.Input<inputs.VirtualMachineScaleSetOsProfileWindowsConfig>;
    overprovision?: pulumi.Input<boolean>;
    plan?: pulumi.Input<inputs.VirtualMachineScaleSetPlan>;
    priority?: pulumi.Input<string>;
    proximityPlacementGroupId?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    rollingUpgradePolicy?: pulumi.Input<inputs.VirtualMachineScaleSetRollingUpgradePolicy>;
    singlePlacementGroup?: pulumi.Input<boolean>;
    sku?: pulumi.Input<inputs.VirtualMachineScaleSetSku>;
    storageProfileDataDisks?: pulumi.Input<pulumi.Input<inputs.VirtualMachineScaleSetStorageProfileDataDisk>[]>;
    storageProfileImageReference?: pulumi.Input<inputs.VirtualMachineScaleSetStorageProfileImageReference>;
    storageProfileOsDisk?: pulumi.Input<inputs.VirtualMachineScaleSetStorageProfileOsDisk>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VirtualMachineScaleSetTimeouts>;
    upgradePolicyMode?: pulumi.Input<string>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a VirtualMachineScaleSet resource.
 */
export interface VirtualMachineScaleSetArgs {
    automaticOsUpgrade?: pulumi.Input<boolean>;
    bootDiagnostics?: pulumi.Input<inputs.VirtualMachineScaleSetBootDiagnostics>;
    evictionPolicy?: pulumi.Input<string>;
    extensions?: pulumi.Input<pulumi.Input<inputs.VirtualMachineScaleSetExtension>[]>;
    healthProbeId?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.VirtualMachineScaleSetIdentity>;
    licenseType?: pulumi.Input<string>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkProfiles: pulumi.Input<pulumi.Input<inputs.VirtualMachineScaleSetNetworkProfile>[]>;
    osProfile: pulumi.Input<inputs.VirtualMachineScaleSetOsProfile>;
    osProfileLinuxConfig?: pulumi.Input<inputs.VirtualMachineScaleSetOsProfileLinuxConfig>;
    osProfileSecrets?: pulumi.Input<pulumi.Input<inputs.VirtualMachineScaleSetOsProfileSecret>[]>;
    osProfileWindowsConfig?: pulumi.Input<inputs.VirtualMachineScaleSetOsProfileWindowsConfig>;
    overprovision?: pulumi.Input<boolean>;
    plan?: pulumi.Input<inputs.VirtualMachineScaleSetPlan>;
    priority?: pulumi.Input<string>;
    proximityPlacementGroupId?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    rollingUpgradePolicy?: pulumi.Input<inputs.VirtualMachineScaleSetRollingUpgradePolicy>;
    singlePlacementGroup?: pulumi.Input<boolean>;
    sku: pulumi.Input<inputs.VirtualMachineScaleSetSku>;
    storageProfileDataDisks?: pulumi.Input<pulumi.Input<inputs.VirtualMachineScaleSetStorageProfileDataDisk>[]>;
    storageProfileImageReference?: pulumi.Input<inputs.VirtualMachineScaleSetStorageProfileImageReference>;
    storageProfileOsDisk: pulumi.Input<inputs.VirtualMachineScaleSetStorageProfileOsDisk>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VirtualMachineScaleSetTimeouts>;
    upgradePolicyMode: pulumi.Input<string>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}
