// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RecoveryServicesVault extends pulumi.CustomResource {
    /**
     * Get an existing RecoveryServicesVault resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RecoveryServicesVaultState, opts?: pulumi.CustomResourceOptions): RecoveryServicesVault {
        return new RecoveryServicesVault(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/recoveryServicesVault:RecoveryServicesVault';

    /**
     * Returns true if the given object is an instance of RecoveryServicesVault.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RecoveryServicesVault {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RecoveryServicesVault.__pulumiType;
    }

    public readonly classicVmwareReplicationEnabled!: pulumi.Output<boolean | undefined>;
    public readonly crossRegionRestoreEnabled!: pulumi.Output<boolean | undefined>;
    public readonly encryption!: pulumi.Output<outputs.RecoveryServicesVaultEncryption | undefined>;
    public readonly identity!: pulumi.Output<outputs.RecoveryServicesVaultIdentity | undefined>;
    public readonly immutability!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    public readonly monitoring!: pulumi.Output<outputs.RecoveryServicesVaultMonitoring | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly publicNetworkAccessEnabled!: pulumi.Output<boolean | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly sku!: pulumi.Output<string>;
    public readonly softDeleteEnabled!: pulumi.Output<boolean | undefined>;
    public readonly storageModeType!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.RecoveryServicesVaultTimeouts | undefined>;

    /**
     * Create a RecoveryServicesVault resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RecoveryServicesVaultArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RecoveryServicesVaultArgs | RecoveryServicesVaultState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RecoveryServicesVaultState | undefined;
            resourceInputs["classicVmwareReplicationEnabled"] = state ? state.classicVmwareReplicationEnabled : undefined;
            resourceInputs["crossRegionRestoreEnabled"] = state ? state.crossRegionRestoreEnabled : undefined;
            resourceInputs["encryption"] = state ? state.encryption : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["immutability"] = state ? state.immutability : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["monitoring"] = state ? state.monitoring : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["sku"] = state ? state.sku : undefined;
            resourceInputs["softDeleteEnabled"] = state ? state.softDeleteEnabled : undefined;
            resourceInputs["storageModeType"] = state ? state.storageModeType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as RecoveryServicesVaultArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.sku === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sku'");
            }
            resourceInputs["classicVmwareReplicationEnabled"] = args ? args.classicVmwareReplicationEnabled : undefined;
            resourceInputs["crossRegionRestoreEnabled"] = args ? args.crossRegionRestoreEnabled : undefined;
            resourceInputs["encryption"] = args ? args.encryption : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["immutability"] = args ? args.immutability : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["monitoring"] = args ? args.monitoring : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["softDeleteEnabled"] = args ? args.softDeleteEnabled : undefined;
            resourceInputs["storageModeType"] = args ? args.storageModeType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RecoveryServicesVault.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RecoveryServicesVault resources.
 */
export interface RecoveryServicesVaultState {
    classicVmwareReplicationEnabled?: pulumi.Input<boolean>;
    crossRegionRestoreEnabled?: pulumi.Input<boolean>;
    encryption?: pulumi.Input<inputs.RecoveryServicesVaultEncryption>;
    identity?: pulumi.Input<inputs.RecoveryServicesVaultIdentity>;
    immutability?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    monitoring?: pulumi.Input<inputs.RecoveryServicesVaultMonitoring>;
    name?: pulumi.Input<string>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    resourceGroupName?: pulumi.Input<string>;
    sku?: pulumi.Input<string>;
    softDeleteEnabled?: pulumi.Input<boolean>;
    storageModeType?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.RecoveryServicesVaultTimeouts>;
}

/**
 * The set of arguments for constructing a RecoveryServicesVault resource.
 */
export interface RecoveryServicesVaultArgs {
    classicVmwareReplicationEnabled?: pulumi.Input<boolean>;
    crossRegionRestoreEnabled?: pulumi.Input<boolean>;
    encryption?: pulumi.Input<inputs.RecoveryServicesVaultEncryption>;
    identity?: pulumi.Input<inputs.RecoveryServicesVaultIdentity>;
    immutability?: pulumi.Input<string>;
    location: pulumi.Input<string>;
    monitoring?: pulumi.Input<inputs.RecoveryServicesVaultMonitoring>;
    name?: pulumi.Input<string>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    resourceGroupName: pulumi.Input<string>;
    sku: pulumi.Input<string>;
    softDeleteEnabled?: pulumi.Input<boolean>;
    storageModeType?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.RecoveryServicesVaultTimeouts>;
}
