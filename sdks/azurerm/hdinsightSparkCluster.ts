// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HdinsightSparkCluster extends pulumi.CustomResource {
    /**
     * Get an existing HdinsightSparkCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HdinsightSparkClusterState, opts?: pulumi.CustomResourceOptions): HdinsightSparkCluster {
        return new HdinsightSparkCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/hdinsightSparkCluster:HdinsightSparkCluster';

    /**
     * Returns true if the given object is an instance of HdinsightSparkCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HdinsightSparkCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HdinsightSparkCluster.__pulumiType;
    }

    public readonly clusterVersion!: pulumi.Output<string>;
    public readonly componentVersion!: pulumi.Output<outputs.HdinsightSparkClusterComponentVersion>;
    public readonly computeIsolation!: pulumi.Output<outputs.HdinsightSparkClusterComputeIsolation | undefined>;
    public readonly diskEncryptions!: pulumi.Output<outputs.HdinsightSparkClusterDiskEncryption[] | undefined>;
    public readonly encryptionInTransitEnabled!: pulumi.Output<boolean | undefined>;
    public readonly extension!: pulumi.Output<outputs.HdinsightSparkClusterExtension | undefined>;
    public readonly gateway!: pulumi.Output<outputs.HdinsightSparkClusterGateway>;
    public /*out*/ readonly httpsEndpoint!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    public readonly metastores!: pulumi.Output<outputs.HdinsightSparkClusterMetastores | undefined>;
    public readonly monitor!: pulumi.Output<outputs.HdinsightSparkClusterMonitor | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly network!: pulumi.Output<outputs.HdinsightSparkClusterNetwork | undefined>;
    public readonly privateLinkConfiguration!: pulumi.Output<outputs.HdinsightSparkClusterPrivateLinkConfiguration | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly roles!: pulumi.Output<outputs.HdinsightSparkClusterRoles>;
    public readonly securityProfile!: pulumi.Output<outputs.HdinsightSparkClusterSecurityProfile | undefined>;
    public /*out*/ readonly sshEndpoint!: pulumi.Output<string>;
    public readonly storageAccountGen2!: pulumi.Output<outputs.HdinsightSparkClusterStorageAccountGen2 | undefined>;
    public readonly storageAccounts!: pulumi.Output<outputs.HdinsightSparkClusterStorageAccount[] | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tier!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.HdinsightSparkClusterTimeouts | undefined>;
    public readonly tlsMinVersion!: pulumi.Output<string | undefined>;

    /**
     * Create a HdinsightSparkCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HdinsightSparkClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HdinsightSparkClusterArgs | HdinsightSparkClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HdinsightSparkClusterState | undefined;
            resourceInputs["clusterVersion"] = state ? state.clusterVersion : undefined;
            resourceInputs["componentVersion"] = state ? state.componentVersion : undefined;
            resourceInputs["computeIsolation"] = state ? state.computeIsolation : undefined;
            resourceInputs["diskEncryptions"] = state ? state.diskEncryptions : undefined;
            resourceInputs["encryptionInTransitEnabled"] = state ? state.encryptionInTransitEnabled : undefined;
            resourceInputs["extension"] = state ? state.extension : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["httpsEndpoint"] = state ? state.httpsEndpoint : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["metastores"] = state ? state.metastores : undefined;
            resourceInputs["monitor"] = state ? state.monitor : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["privateLinkConfiguration"] = state ? state.privateLinkConfiguration : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["securityProfile"] = state ? state.securityProfile : undefined;
            resourceInputs["sshEndpoint"] = state ? state.sshEndpoint : undefined;
            resourceInputs["storageAccountGen2"] = state ? state.storageAccountGen2 : undefined;
            resourceInputs["storageAccounts"] = state ? state.storageAccounts : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tier"] = state ? state.tier : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["tlsMinVersion"] = state ? state.tlsMinVersion : undefined;
        } else {
            const args = argsOrState as HdinsightSparkClusterArgs | undefined;
            if ((!args || args.clusterVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterVersion'");
            }
            if ((!args || args.componentVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'componentVersion'");
            }
            if ((!args || args.gateway === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gateway'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.roles === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roles'");
            }
            if ((!args || args.tier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tier'");
            }
            resourceInputs["clusterVersion"] = args ? args.clusterVersion : undefined;
            resourceInputs["componentVersion"] = args ? args.componentVersion : undefined;
            resourceInputs["computeIsolation"] = args ? args.computeIsolation : undefined;
            resourceInputs["diskEncryptions"] = args ? args.diskEncryptions : undefined;
            resourceInputs["encryptionInTransitEnabled"] = args ? args.encryptionInTransitEnabled : undefined;
            resourceInputs["extension"] = args ? args.extension : undefined;
            resourceInputs["gateway"] = args ? args.gateway : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["metastores"] = args ? args.metastores : undefined;
            resourceInputs["monitor"] = args ? args.monitor : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["privateLinkConfiguration"] = args ? args.privateLinkConfiguration : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["securityProfile"] = args ? args.securityProfile : undefined;
            resourceInputs["storageAccountGen2"] = args ? args.storageAccountGen2 : undefined;
            resourceInputs["storageAccounts"] = args ? args.storageAccounts : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tier"] = args ? args.tier : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["tlsMinVersion"] = args ? args.tlsMinVersion : undefined;
            resourceInputs["httpsEndpoint"] = undefined /*out*/;
            resourceInputs["sshEndpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HdinsightSparkCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HdinsightSparkCluster resources.
 */
export interface HdinsightSparkClusterState {
    clusterVersion?: pulumi.Input<string>;
    componentVersion?: pulumi.Input<inputs.HdinsightSparkClusterComponentVersion>;
    computeIsolation?: pulumi.Input<inputs.HdinsightSparkClusterComputeIsolation>;
    diskEncryptions?: pulumi.Input<pulumi.Input<inputs.HdinsightSparkClusterDiskEncryption>[]>;
    encryptionInTransitEnabled?: pulumi.Input<boolean>;
    extension?: pulumi.Input<inputs.HdinsightSparkClusterExtension>;
    gateway?: pulumi.Input<inputs.HdinsightSparkClusterGateway>;
    httpsEndpoint?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    metastores?: pulumi.Input<inputs.HdinsightSparkClusterMetastores>;
    monitor?: pulumi.Input<inputs.HdinsightSparkClusterMonitor>;
    name?: pulumi.Input<string>;
    network?: pulumi.Input<inputs.HdinsightSparkClusterNetwork>;
    privateLinkConfiguration?: pulumi.Input<inputs.HdinsightSparkClusterPrivateLinkConfiguration>;
    resourceGroupName?: pulumi.Input<string>;
    roles?: pulumi.Input<inputs.HdinsightSparkClusterRoles>;
    securityProfile?: pulumi.Input<inputs.HdinsightSparkClusterSecurityProfile>;
    sshEndpoint?: pulumi.Input<string>;
    storageAccountGen2?: pulumi.Input<inputs.HdinsightSparkClusterStorageAccountGen2>;
    storageAccounts?: pulumi.Input<pulumi.Input<inputs.HdinsightSparkClusterStorageAccount>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tier?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.HdinsightSparkClusterTimeouts>;
    tlsMinVersion?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HdinsightSparkCluster resource.
 */
export interface HdinsightSparkClusterArgs {
    clusterVersion: pulumi.Input<string>;
    componentVersion: pulumi.Input<inputs.HdinsightSparkClusterComponentVersion>;
    computeIsolation?: pulumi.Input<inputs.HdinsightSparkClusterComputeIsolation>;
    diskEncryptions?: pulumi.Input<pulumi.Input<inputs.HdinsightSparkClusterDiskEncryption>[]>;
    encryptionInTransitEnabled?: pulumi.Input<boolean>;
    extension?: pulumi.Input<inputs.HdinsightSparkClusterExtension>;
    gateway: pulumi.Input<inputs.HdinsightSparkClusterGateway>;
    location: pulumi.Input<string>;
    metastores?: pulumi.Input<inputs.HdinsightSparkClusterMetastores>;
    monitor?: pulumi.Input<inputs.HdinsightSparkClusterMonitor>;
    name?: pulumi.Input<string>;
    network?: pulumi.Input<inputs.HdinsightSparkClusterNetwork>;
    privateLinkConfiguration?: pulumi.Input<inputs.HdinsightSparkClusterPrivateLinkConfiguration>;
    resourceGroupName: pulumi.Input<string>;
    roles: pulumi.Input<inputs.HdinsightSparkClusterRoles>;
    securityProfile?: pulumi.Input<inputs.HdinsightSparkClusterSecurityProfile>;
    storageAccountGen2?: pulumi.Input<inputs.HdinsightSparkClusterStorageAccountGen2>;
    storageAccounts?: pulumi.Input<pulumi.Input<inputs.HdinsightSparkClusterStorageAccount>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tier: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.HdinsightSparkClusterTimeouts>;
    tlsMinVersion?: pulumi.Input<string>;
}
