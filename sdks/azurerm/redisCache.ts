// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RedisCache extends pulumi.CustomResource {
    /**
     * Get an existing RedisCache resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RedisCacheState, opts?: pulumi.CustomResourceOptions): RedisCache {
        return new RedisCache(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/redisCache:RedisCache';

    /**
     * Returns true if the given object is an instance of RedisCache.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RedisCache {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RedisCache.__pulumiType;
    }

    public readonly accessKeysAuthenticationEnabled!: pulumi.Output<boolean | undefined>;
    public readonly capacity!: pulumi.Output<number>;
    public readonly family!: pulumi.Output<string>;
    public /*out*/ readonly hostname!: pulumi.Output<string>;
    public readonly identity!: pulumi.Output<outputs.RedisCacheIdentity | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly minimumTlsVersion!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nonSslPortEnabled!: pulumi.Output<boolean | undefined>;
    public readonly patchSchedules!: pulumi.Output<outputs.RedisCachePatchSchedule[] | undefined>;
    public /*out*/ readonly port!: pulumi.Output<number>;
    public /*out*/ readonly primaryAccessKey!: pulumi.Output<string>;
    public /*out*/ readonly primaryConnectionString!: pulumi.Output<string>;
    public readonly privateStaticIpAddress!: pulumi.Output<string>;
    public readonly publicNetworkAccessEnabled!: pulumi.Output<boolean | undefined>;
    public readonly redisConfiguration!: pulumi.Output<outputs.RedisCacheRedisConfiguration | undefined>;
    public readonly redisVersion!: pulumi.Output<string | undefined>;
    public readonly replicasPerMaster!: pulumi.Output<number>;
    public readonly replicasPerPrimary!: pulumi.Output<number>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public /*out*/ readonly secondaryAccessKey!: pulumi.Output<string>;
    public /*out*/ readonly secondaryConnectionString!: pulumi.Output<string>;
    public readonly shardCount!: pulumi.Output<number | undefined>;
    public readonly skuName!: pulumi.Output<string>;
    public /*out*/ readonly sslPort!: pulumi.Output<number>;
    public readonly subnetId!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tenantSettings!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.RedisCacheTimeouts | undefined>;
    public readonly zones!: pulumi.Output<string[] | undefined>;

    /**
     * Create a RedisCache resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedisCacheArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RedisCacheArgs | RedisCacheState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RedisCacheState | undefined;
            resourceInputs["accessKeysAuthenticationEnabled"] = state ? state.accessKeysAuthenticationEnabled : undefined;
            resourceInputs["capacity"] = state ? state.capacity : undefined;
            resourceInputs["family"] = state ? state.family : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["minimumTlsVersion"] = state ? state.minimumTlsVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nonSslPortEnabled"] = state ? state.nonSslPortEnabled : undefined;
            resourceInputs["patchSchedules"] = state ? state.patchSchedules : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["primaryAccessKey"] = state ? state.primaryAccessKey : undefined;
            resourceInputs["primaryConnectionString"] = state ? state.primaryConnectionString : undefined;
            resourceInputs["privateStaticIpAddress"] = state ? state.privateStaticIpAddress : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            resourceInputs["redisConfiguration"] = state ? state.redisConfiguration : undefined;
            resourceInputs["redisVersion"] = state ? state.redisVersion : undefined;
            resourceInputs["replicasPerMaster"] = state ? state.replicasPerMaster : undefined;
            resourceInputs["replicasPerPrimary"] = state ? state.replicasPerPrimary : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["secondaryAccessKey"] = state ? state.secondaryAccessKey : undefined;
            resourceInputs["secondaryConnectionString"] = state ? state.secondaryConnectionString : undefined;
            resourceInputs["shardCount"] = state ? state.shardCount : undefined;
            resourceInputs["skuName"] = state ? state.skuName : undefined;
            resourceInputs["sslPort"] = state ? state.sslPort : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenantSettings"] = state ? state.tenantSettings : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["zones"] = state ? state.zones : undefined;
        } else {
            const args = argsOrState as RedisCacheArgs | undefined;
            if ((!args || args.capacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'capacity'");
            }
            if ((!args || args.family === undefined) && !opts.urn) {
                throw new Error("Missing required property 'family'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.skuName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'skuName'");
            }
            resourceInputs["accessKeysAuthenticationEnabled"] = args ? args.accessKeysAuthenticationEnabled : undefined;
            resourceInputs["capacity"] = args ? args.capacity : undefined;
            resourceInputs["family"] = args ? args.family : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["minimumTlsVersion"] = args ? args.minimumTlsVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nonSslPortEnabled"] = args ? args.nonSslPortEnabled : undefined;
            resourceInputs["patchSchedules"] = args ? args.patchSchedules : undefined;
            resourceInputs["privateStaticIpAddress"] = args ? args.privateStaticIpAddress : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            resourceInputs["redisConfiguration"] = args ? args.redisConfiguration : undefined;
            resourceInputs["redisVersion"] = args ? args.redisVersion : undefined;
            resourceInputs["replicasPerMaster"] = args ? args.replicasPerMaster : undefined;
            resourceInputs["replicasPerPrimary"] = args ? args.replicasPerPrimary : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["shardCount"] = args ? args.shardCount : undefined;
            resourceInputs["skuName"] = args ? args.skuName : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tenantSettings"] = args ? args.tenantSettings : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["zones"] = args ? args.zones : undefined;
            resourceInputs["hostname"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["primaryAccessKey"] = undefined /*out*/;
            resourceInputs["primaryConnectionString"] = undefined /*out*/;
            resourceInputs["secondaryAccessKey"] = undefined /*out*/;
            resourceInputs["secondaryConnectionString"] = undefined /*out*/;
            resourceInputs["sslPort"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["primaryAccessKey", "primaryConnectionString", "secondaryAccessKey", "secondaryConnectionString"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RedisCache.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RedisCache resources.
 */
export interface RedisCacheState {
    accessKeysAuthenticationEnabled?: pulumi.Input<boolean>;
    capacity?: pulumi.Input<number>;
    family?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.RedisCacheIdentity>;
    location?: pulumi.Input<string>;
    minimumTlsVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nonSslPortEnabled?: pulumi.Input<boolean>;
    patchSchedules?: pulumi.Input<pulumi.Input<inputs.RedisCachePatchSchedule>[]>;
    port?: pulumi.Input<number>;
    primaryAccessKey?: pulumi.Input<string>;
    primaryConnectionString?: pulumi.Input<string>;
    privateStaticIpAddress?: pulumi.Input<string>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    redisConfiguration?: pulumi.Input<inputs.RedisCacheRedisConfiguration>;
    redisVersion?: pulumi.Input<string>;
    replicasPerMaster?: pulumi.Input<number>;
    replicasPerPrimary?: pulumi.Input<number>;
    resourceGroupName?: pulumi.Input<string>;
    secondaryAccessKey?: pulumi.Input<string>;
    secondaryConnectionString?: pulumi.Input<string>;
    shardCount?: pulumi.Input<number>;
    skuName?: pulumi.Input<string>;
    sslPort?: pulumi.Input<number>;
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tenantSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.RedisCacheTimeouts>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a RedisCache resource.
 */
export interface RedisCacheArgs {
    accessKeysAuthenticationEnabled?: pulumi.Input<boolean>;
    capacity: pulumi.Input<number>;
    family: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.RedisCacheIdentity>;
    location: pulumi.Input<string>;
    minimumTlsVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nonSslPortEnabled?: pulumi.Input<boolean>;
    patchSchedules?: pulumi.Input<pulumi.Input<inputs.RedisCachePatchSchedule>[]>;
    privateStaticIpAddress?: pulumi.Input<string>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    redisConfiguration?: pulumi.Input<inputs.RedisCacheRedisConfiguration>;
    redisVersion?: pulumi.Input<string>;
    replicasPerMaster?: pulumi.Input<number>;
    replicasPerPrimary?: pulumi.Input<number>;
    resourceGroupName: pulumi.Input<string>;
    shardCount?: pulumi.Input<number>;
    skuName: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tenantSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.RedisCacheTimeouts>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}
