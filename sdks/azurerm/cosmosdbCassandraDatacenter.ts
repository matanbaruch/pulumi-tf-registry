// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CosmosdbCassandraDatacenter extends pulumi.CustomResource {
    /**
     * Get an existing CosmosdbCassandraDatacenter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CosmosdbCassandraDatacenterState, opts?: pulumi.CustomResourceOptions): CosmosdbCassandraDatacenter {
        return new CosmosdbCassandraDatacenter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/cosmosdbCassandraDatacenter:CosmosdbCassandraDatacenter';

    /**
     * Returns true if the given object is an instance of CosmosdbCassandraDatacenter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CosmosdbCassandraDatacenter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CosmosdbCassandraDatacenter.__pulumiType;
    }

    public readonly availabilityZonesEnabled!: pulumi.Output<boolean | undefined>;
    public readonly backupStorageCustomerKeyUri!: pulumi.Output<string | undefined>;
    public readonly base64EncodedYamlFragment!: pulumi.Output<string | undefined>;
    public readonly cassandraClusterId!: pulumi.Output<string>;
    public readonly delegatedManagementSubnetId!: pulumi.Output<string>;
    public readonly diskCount!: pulumi.Output<number | undefined>;
    public readonly diskSku!: pulumi.Output<string | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly managedDiskCustomerKeyUri!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nodeCount!: pulumi.Output<number | undefined>;
    public /*out*/ readonly seedNodeIpAddresses!: pulumi.Output<string[]>;
    public readonly skuName!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.CosmosdbCassandraDatacenterTimeouts | undefined>;

    /**
     * Create a CosmosdbCassandraDatacenter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CosmosdbCassandraDatacenterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CosmosdbCassandraDatacenterArgs | CosmosdbCassandraDatacenterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CosmosdbCassandraDatacenterState | undefined;
            resourceInputs["availabilityZonesEnabled"] = state ? state.availabilityZonesEnabled : undefined;
            resourceInputs["backupStorageCustomerKeyUri"] = state ? state.backupStorageCustomerKeyUri : undefined;
            resourceInputs["base64EncodedYamlFragment"] = state ? state.base64EncodedYamlFragment : undefined;
            resourceInputs["cassandraClusterId"] = state ? state.cassandraClusterId : undefined;
            resourceInputs["delegatedManagementSubnetId"] = state ? state.delegatedManagementSubnetId : undefined;
            resourceInputs["diskCount"] = state ? state.diskCount : undefined;
            resourceInputs["diskSku"] = state ? state.diskSku : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["managedDiskCustomerKeyUri"] = state ? state.managedDiskCustomerKeyUri : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeCount"] = state ? state.nodeCount : undefined;
            resourceInputs["seedNodeIpAddresses"] = state ? state.seedNodeIpAddresses : undefined;
            resourceInputs["skuName"] = state ? state.skuName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as CosmosdbCassandraDatacenterArgs | undefined;
            if ((!args || args.cassandraClusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cassandraClusterId'");
            }
            if ((!args || args.delegatedManagementSubnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'delegatedManagementSubnetId'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["availabilityZonesEnabled"] = args ? args.availabilityZonesEnabled : undefined;
            resourceInputs["backupStorageCustomerKeyUri"] = args ? args.backupStorageCustomerKeyUri : undefined;
            resourceInputs["base64EncodedYamlFragment"] = args ? args.base64EncodedYamlFragment : undefined;
            resourceInputs["cassandraClusterId"] = args ? args.cassandraClusterId : undefined;
            resourceInputs["delegatedManagementSubnetId"] = args ? args.delegatedManagementSubnetId : undefined;
            resourceInputs["diskCount"] = args ? args.diskCount : undefined;
            resourceInputs["diskSku"] = args ? args.diskSku : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["managedDiskCustomerKeyUri"] = args ? args.managedDiskCustomerKeyUri : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeCount"] = args ? args.nodeCount : undefined;
            resourceInputs["skuName"] = args ? args.skuName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["seedNodeIpAddresses"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CosmosdbCassandraDatacenter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CosmosdbCassandraDatacenter resources.
 */
export interface CosmosdbCassandraDatacenterState {
    availabilityZonesEnabled?: pulumi.Input<boolean>;
    backupStorageCustomerKeyUri?: pulumi.Input<string>;
    base64EncodedYamlFragment?: pulumi.Input<string>;
    cassandraClusterId?: pulumi.Input<string>;
    delegatedManagementSubnetId?: pulumi.Input<string>;
    diskCount?: pulumi.Input<number>;
    diskSku?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    managedDiskCustomerKeyUri?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nodeCount?: pulumi.Input<number>;
    seedNodeIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    skuName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CosmosdbCassandraDatacenterTimeouts>;
}

/**
 * The set of arguments for constructing a CosmosdbCassandraDatacenter resource.
 */
export interface CosmosdbCassandraDatacenterArgs {
    availabilityZonesEnabled?: pulumi.Input<boolean>;
    backupStorageCustomerKeyUri?: pulumi.Input<string>;
    base64EncodedYamlFragment?: pulumi.Input<string>;
    cassandraClusterId: pulumi.Input<string>;
    delegatedManagementSubnetId: pulumi.Input<string>;
    diskCount?: pulumi.Input<number>;
    diskSku?: pulumi.Input<string>;
    location: pulumi.Input<string>;
    managedDiskCustomerKeyUri?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nodeCount?: pulumi.Input<number>;
    skuName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CosmosdbCassandraDatacenterTimeouts>;
}
