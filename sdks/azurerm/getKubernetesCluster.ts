// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getKubernetesCluster(args: GetKubernetesClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetKubernetesClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azurerm:index/getKubernetesCluster:getKubernetesCluster", {
        "id": args.id,
        "name": args.name,
        "resourceGroupName": args.resourceGroupName,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getKubernetesCluster.
 */
export interface GetKubernetesClusterArgs {
    id?: string;
    name: string;
    resourceGroupName: string;
    timeouts?: inputs.GetKubernetesClusterTimeouts;
}

/**
 * A collection of values returned by getKubernetesCluster.
 */
export interface GetKubernetesClusterResult {
    readonly aciConnectorLinuxes: outputs.GetKubernetesClusterAciConnectorLinux[];
    readonly agentPoolProfiles: outputs.GetKubernetesClusterAgentPoolProfile[];
    readonly apiServerAuthorizedIpRanges: string[];
    readonly azureActiveDirectoryRoleBasedAccessControls: outputs.GetKubernetesClusterAzureActiveDirectoryRoleBasedAccessControl[];
    readonly azurePolicyEnabled: boolean;
    readonly currentKubernetesVersion: string;
    readonly diskEncryptionSetId: string;
    readonly dnsPrefix: string;
    readonly fqdn: string;
    readonly httpApplicationRoutingEnabled: boolean;
    readonly httpApplicationRoutingZoneName: string;
    readonly id: string;
    readonly identities: outputs.GetKubernetesClusterIdentity[];
    readonly ingressApplicationGateways: outputs.GetKubernetesClusterIngressApplicationGateway[];
    readonly keyManagementServices: outputs.GetKubernetesClusterKeyManagementService[];
    readonly keyVaultSecretsProviders: outputs.GetKubernetesClusterKeyVaultSecretsProvider[];
    readonly kubeAdminConfigRaw: string;
    readonly kubeAdminConfigs: outputs.GetKubernetesClusterKubeAdminConfig[];
    readonly kubeConfigRaw: string;
    readonly kubeConfigs: outputs.GetKubernetesClusterKubeConfig[];
    readonly kubeletIdentities: outputs.GetKubernetesClusterKubeletIdentity[];
    readonly kubernetesVersion: string;
    readonly linuxProfiles: outputs.GetKubernetesClusterLinuxProfile[];
    readonly location: string;
    readonly microsoftDefenders: outputs.GetKubernetesClusterMicrosoftDefender[];
    readonly name: string;
    readonly networkProfiles: outputs.GetKubernetesClusterNetworkProfile[];
    readonly nodeResourceGroup: string;
    readonly nodeResourceGroupId: string;
    readonly oidcIssuerEnabled: boolean;
    readonly oidcIssuerUrl: string;
    readonly omsAgents: outputs.GetKubernetesClusterOmsAgent[];
    readonly openServiceMeshEnabled: boolean;
    readonly privateClusterEnabled: boolean;
    readonly privateFqdn: string;
    readonly resourceGroupName: string;
    readonly roleBasedAccessControlEnabled: boolean;
    readonly serviceMeshProfiles: outputs.GetKubernetesClusterServiceMeshProfile[];
    readonly servicePrincipals: outputs.GetKubernetesClusterServicePrincipal[];
    readonly storageProfiles: outputs.GetKubernetesClusterStorageProfile[];
    readonly tags: {[key: string]: string};
    readonly timeouts?: outputs.GetKubernetesClusterTimeouts;
    readonly windowsProfiles: outputs.GetKubernetesClusterWindowsProfile[];
}
export function getKubernetesClusterOutput(args: GetKubernetesClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKubernetesClusterResult> {
    return pulumi.output(args).apply((a: any) => getKubernetesCluster(a, opts))
}

/**
 * A collection of arguments for invoking getKubernetesCluster.
 */
export interface GetKubernetesClusterOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetKubernetesClusterTimeoutsArgs>;
}
