// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getPolicyAssignment(args: GetPolicyAssignmentArgs, opts?: pulumi.InvokeOptions): Promise<GetPolicyAssignmentResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azurerm:index/getPolicyAssignment:getPolicyAssignment", {
        "id": args.id,
        "name": args.name,
        "scopeId": args.scopeId,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPolicyAssignment.
 */
export interface GetPolicyAssignmentArgs {
    id?: string;
    name: string;
    scopeId: string;
    timeouts?: inputs.GetPolicyAssignmentTimeouts;
}

/**
 * A collection of values returned by getPolicyAssignment.
 */
export interface GetPolicyAssignmentResult {
    readonly description: string;
    readonly displayName: string;
    readonly enforce: boolean;
    readonly id: string;
    readonly identities: outputs.GetPolicyAssignmentIdentity[];
    readonly location: string;
    readonly metadata: string;
    readonly name: string;
    readonly nonComplianceMessages: outputs.GetPolicyAssignmentNonComplianceMessage[];
    readonly notScopes: string[];
    readonly parameters: string;
    readonly policyDefinitionId: string;
    readonly scopeId: string;
    readonly timeouts?: outputs.GetPolicyAssignmentTimeouts;
}
export function getPolicyAssignmentOutput(args: GetPolicyAssignmentOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPolicyAssignmentResult> {
    return pulumi.output(args).apply((a: any) => getPolicyAssignment(a, opts))
}

/**
 * A collection of arguments for invoking getPolicyAssignment.
 */
export interface GetPolicyAssignmentOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    scopeId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetPolicyAssignmentTimeoutsArgs>;
}
