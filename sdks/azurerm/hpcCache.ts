// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HpcCache extends pulumi.CustomResource {
    /**
     * Get an existing HpcCache resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HpcCacheState, opts?: pulumi.CustomResourceOptions): HpcCache {
        return new HpcCache(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/hpcCache:HpcCache';

    /**
     * Returns true if the given object is an instance of HpcCache.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HpcCache {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HpcCache.__pulumiType;
    }

    public readonly automaticallyRotateKeyToLatestEnabled!: pulumi.Output<boolean | undefined>;
    public readonly cacheSizeInGb!: pulumi.Output<number>;
    public readonly defaultAccessPolicy!: pulumi.Output<outputs.HpcCacheDefaultAccessPolicy | undefined>;
    public readonly directoryActiveDirectory!: pulumi.Output<outputs.HpcCacheDirectoryActiveDirectory | undefined>;
    public readonly directoryFlatFile!: pulumi.Output<outputs.HpcCacheDirectoryFlatFile | undefined>;
    public readonly directoryLdap!: pulumi.Output<outputs.HpcCacheDirectoryLdap | undefined>;
    public readonly dns!: pulumi.Output<outputs.HpcCacheDns | undefined>;
    public readonly identity!: pulumi.Output<outputs.HpcCacheIdentity | undefined>;
    public readonly keyVaultKeyId!: pulumi.Output<string | undefined>;
    public readonly location!: pulumi.Output<string>;
    public /*out*/ readonly mountAddresses!: pulumi.Output<string[]>;
    public readonly mtu!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly ntpServer!: pulumi.Output<string | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly skuName!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.HpcCacheTimeouts | undefined>;

    /**
     * Create a HpcCache resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HpcCacheArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HpcCacheArgs | HpcCacheState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HpcCacheState | undefined;
            resourceInputs["automaticallyRotateKeyToLatestEnabled"] = state ? state.automaticallyRotateKeyToLatestEnabled : undefined;
            resourceInputs["cacheSizeInGb"] = state ? state.cacheSizeInGb : undefined;
            resourceInputs["defaultAccessPolicy"] = state ? state.defaultAccessPolicy : undefined;
            resourceInputs["directoryActiveDirectory"] = state ? state.directoryActiveDirectory : undefined;
            resourceInputs["directoryFlatFile"] = state ? state.directoryFlatFile : undefined;
            resourceInputs["directoryLdap"] = state ? state.directoryLdap : undefined;
            resourceInputs["dns"] = state ? state.dns : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["keyVaultKeyId"] = state ? state.keyVaultKeyId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["mountAddresses"] = state ? state.mountAddresses : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ntpServer"] = state ? state.ntpServer : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["skuName"] = state ? state.skuName : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as HpcCacheArgs | undefined;
            if ((!args || args.cacheSizeInGb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cacheSizeInGb'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.skuName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'skuName'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["automaticallyRotateKeyToLatestEnabled"] = args ? args.automaticallyRotateKeyToLatestEnabled : undefined;
            resourceInputs["cacheSizeInGb"] = args ? args.cacheSizeInGb : undefined;
            resourceInputs["defaultAccessPolicy"] = args ? args.defaultAccessPolicy : undefined;
            resourceInputs["directoryActiveDirectory"] = args ? args.directoryActiveDirectory : undefined;
            resourceInputs["directoryFlatFile"] = args ? args.directoryFlatFile : undefined;
            resourceInputs["directoryLdap"] = args ? args.directoryLdap : undefined;
            resourceInputs["dns"] = args ? args.dns : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["keyVaultKeyId"] = args ? args.keyVaultKeyId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ntpServer"] = args ? args.ntpServer : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["skuName"] = args ? args.skuName : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["mountAddresses"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HpcCache.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HpcCache resources.
 */
export interface HpcCacheState {
    automaticallyRotateKeyToLatestEnabled?: pulumi.Input<boolean>;
    cacheSizeInGb?: pulumi.Input<number>;
    defaultAccessPolicy?: pulumi.Input<inputs.HpcCacheDefaultAccessPolicy>;
    directoryActiveDirectory?: pulumi.Input<inputs.HpcCacheDirectoryActiveDirectory>;
    directoryFlatFile?: pulumi.Input<inputs.HpcCacheDirectoryFlatFile>;
    directoryLdap?: pulumi.Input<inputs.HpcCacheDirectoryLdap>;
    dns?: pulumi.Input<inputs.HpcCacheDns>;
    identity?: pulumi.Input<inputs.HpcCacheIdentity>;
    keyVaultKeyId?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    mountAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    mtu?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    ntpServer?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    skuName?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.HpcCacheTimeouts>;
}

/**
 * The set of arguments for constructing a HpcCache resource.
 */
export interface HpcCacheArgs {
    automaticallyRotateKeyToLatestEnabled?: pulumi.Input<boolean>;
    cacheSizeInGb: pulumi.Input<number>;
    defaultAccessPolicy?: pulumi.Input<inputs.HpcCacheDefaultAccessPolicy>;
    directoryActiveDirectory?: pulumi.Input<inputs.HpcCacheDirectoryActiveDirectory>;
    directoryFlatFile?: pulumi.Input<inputs.HpcCacheDirectoryFlatFile>;
    directoryLdap?: pulumi.Input<inputs.HpcCacheDirectoryLdap>;
    dns?: pulumi.Input<inputs.HpcCacheDns>;
    identity?: pulumi.Input<inputs.HpcCacheIdentity>;
    keyVaultKeyId?: pulumi.Input<string>;
    location: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    ntpServer?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    skuName: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.HpcCacheTimeouts>;
}
