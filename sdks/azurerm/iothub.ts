// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Iothub extends pulumi.CustomResource {
    /**
     * Get an existing Iothub resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IothubState, opts?: pulumi.CustomResourceOptions): Iothub {
        return new Iothub(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/iothub:Iothub';

    /**
     * Returns true if the given object is an instance of Iothub.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Iothub {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Iothub.__pulumiType;
    }

    public readonly cloudToDevice!: pulumi.Output<outputs.IothubCloudToDevice | undefined>;
    public readonly endpoints!: pulumi.Output<outputs.IothubEndpoint[]>;
    public readonly enrichments!: pulumi.Output<outputs.IothubEnrichment[]>;
    public /*out*/ readonly eventHubEventsEndpoint!: pulumi.Output<string>;
    public /*out*/ readonly eventHubEventsNamespace!: pulumi.Output<string>;
    public /*out*/ readonly eventHubEventsPath!: pulumi.Output<string>;
    public /*out*/ readonly eventHubOperationsEndpoint!: pulumi.Output<string>;
    public /*out*/ readonly eventHubOperationsPath!: pulumi.Output<string>;
    public readonly eventHubPartitionCount!: pulumi.Output<number | undefined>;
    public readonly eventHubRetentionInDays!: pulumi.Output<number | undefined>;
    public readonly fallbackRoute!: pulumi.Output<outputs.IothubFallbackRoute | undefined>;
    public readonly fileUpload!: pulumi.Output<outputs.IothubFileUpload | undefined>;
    public /*out*/ readonly hostname!: pulumi.Output<string>;
    public readonly identity!: pulumi.Output<outputs.IothubIdentity | undefined>;
    public readonly localAuthenticationEnabled!: pulumi.Output<boolean | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly minTlsVersion!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkRuleSets!: pulumi.Output<outputs.IothubNetworkRuleSet[] | undefined>;
    public readonly publicNetworkAccessEnabled!: pulumi.Output<boolean | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly routes!: pulumi.Output<outputs.IothubRoute[]>;
    public /*out*/ readonly sharedAccessPolicies!: pulumi.Output<outputs.IothubSharedAccessPolicy[]>;
    public readonly sku!: pulumi.Output<outputs.IothubSku>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.IothubTimeouts | undefined>;
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a Iothub resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IothubArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IothubArgs | IothubState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IothubState | undefined;
            resourceInputs["cloudToDevice"] = state ? state.cloudToDevice : undefined;
            resourceInputs["endpoints"] = state ? state.endpoints : undefined;
            resourceInputs["enrichments"] = state ? state.enrichments : undefined;
            resourceInputs["eventHubEventsEndpoint"] = state ? state.eventHubEventsEndpoint : undefined;
            resourceInputs["eventHubEventsNamespace"] = state ? state.eventHubEventsNamespace : undefined;
            resourceInputs["eventHubEventsPath"] = state ? state.eventHubEventsPath : undefined;
            resourceInputs["eventHubOperationsEndpoint"] = state ? state.eventHubOperationsEndpoint : undefined;
            resourceInputs["eventHubOperationsPath"] = state ? state.eventHubOperationsPath : undefined;
            resourceInputs["eventHubPartitionCount"] = state ? state.eventHubPartitionCount : undefined;
            resourceInputs["eventHubRetentionInDays"] = state ? state.eventHubRetentionInDays : undefined;
            resourceInputs["fallbackRoute"] = state ? state.fallbackRoute : undefined;
            resourceInputs["fileUpload"] = state ? state.fileUpload : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["localAuthenticationEnabled"] = state ? state.localAuthenticationEnabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["minTlsVersion"] = state ? state.minTlsVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkRuleSets"] = state ? state.networkRuleSets : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["routes"] = state ? state.routes : undefined;
            resourceInputs["sharedAccessPolicies"] = state ? state.sharedAccessPolicies : undefined;
            resourceInputs["sku"] = state ? state.sku : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as IothubArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.sku === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sku'");
            }
            resourceInputs["cloudToDevice"] = args ? args.cloudToDevice : undefined;
            resourceInputs["endpoints"] = args ? args.endpoints : undefined;
            resourceInputs["enrichments"] = args ? args.enrichments : undefined;
            resourceInputs["eventHubPartitionCount"] = args ? args.eventHubPartitionCount : undefined;
            resourceInputs["eventHubRetentionInDays"] = args ? args.eventHubRetentionInDays : undefined;
            resourceInputs["fallbackRoute"] = args ? args.fallbackRoute : undefined;
            resourceInputs["fileUpload"] = args ? args.fileUpload : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["localAuthenticationEnabled"] = args ? args.localAuthenticationEnabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["minTlsVersion"] = args ? args.minTlsVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkRuleSets"] = args ? args.networkRuleSets : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["routes"] = args ? args.routes : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["eventHubEventsEndpoint"] = undefined /*out*/;
            resourceInputs["eventHubEventsNamespace"] = undefined /*out*/;
            resourceInputs["eventHubEventsPath"] = undefined /*out*/;
            resourceInputs["eventHubOperationsEndpoint"] = undefined /*out*/;
            resourceInputs["eventHubOperationsPath"] = undefined /*out*/;
            resourceInputs["hostname"] = undefined /*out*/;
            resourceInputs["sharedAccessPolicies"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Iothub.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Iothub resources.
 */
export interface IothubState {
    cloudToDevice?: pulumi.Input<inputs.IothubCloudToDevice>;
    endpoints?: pulumi.Input<pulumi.Input<inputs.IothubEndpoint>[]>;
    enrichments?: pulumi.Input<pulumi.Input<inputs.IothubEnrichment>[]>;
    eventHubEventsEndpoint?: pulumi.Input<string>;
    eventHubEventsNamespace?: pulumi.Input<string>;
    eventHubEventsPath?: pulumi.Input<string>;
    eventHubOperationsEndpoint?: pulumi.Input<string>;
    eventHubOperationsPath?: pulumi.Input<string>;
    eventHubPartitionCount?: pulumi.Input<number>;
    eventHubRetentionInDays?: pulumi.Input<number>;
    fallbackRoute?: pulumi.Input<inputs.IothubFallbackRoute>;
    fileUpload?: pulumi.Input<inputs.IothubFileUpload>;
    hostname?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.IothubIdentity>;
    localAuthenticationEnabled?: pulumi.Input<boolean>;
    location?: pulumi.Input<string>;
    minTlsVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkRuleSets?: pulumi.Input<pulumi.Input<inputs.IothubNetworkRuleSet>[]>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    resourceGroupName?: pulumi.Input<string>;
    routes?: pulumi.Input<pulumi.Input<inputs.IothubRoute>[]>;
    sharedAccessPolicies?: pulumi.Input<pulumi.Input<inputs.IothubSharedAccessPolicy>[]>;
    sku?: pulumi.Input<inputs.IothubSku>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.IothubTimeouts>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Iothub resource.
 */
export interface IothubArgs {
    cloudToDevice?: pulumi.Input<inputs.IothubCloudToDevice>;
    endpoints?: pulumi.Input<pulumi.Input<inputs.IothubEndpoint>[]>;
    enrichments?: pulumi.Input<pulumi.Input<inputs.IothubEnrichment>[]>;
    eventHubPartitionCount?: pulumi.Input<number>;
    eventHubRetentionInDays?: pulumi.Input<number>;
    fallbackRoute?: pulumi.Input<inputs.IothubFallbackRoute>;
    fileUpload?: pulumi.Input<inputs.IothubFileUpload>;
    identity?: pulumi.Input<inputs.IothubIdentity>;
    localAuthenticationEnabled?: pulumi.Input<boolean>;
    location: pulumi.Input<string>;
    minTlsVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkRuleSets?: pulumi.Input<pulumi.Input<inputs.IothubNetworkRuleSet>[]>;
    publicNetworkAccessEnabled?: pulumi.Input<boolean>;
    resourceGroupName: pulumi.Input<string>;
    routes?: pulumi.Input<pulumi.Input<inputs.IothubRoute>[]>;
    sku: pulumi.Input<inputs.IothubSku>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.IothubTimeouts>;
}
