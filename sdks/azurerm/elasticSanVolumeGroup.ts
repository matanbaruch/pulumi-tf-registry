// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ElasticSanVolumeGroup extends pulumi.CustomResource {
    /**
     * Get an existing ElasticSanVolumeGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ElasticSanVolumeGroupState, opts?: pulumi.CustomResourceOptions): ElasticSanVolumeGroup {
        return new ElasticSanVolumeGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/elasticSanVolumeGroup:ElasticSanVolumeGroup';

    /**
     * Returns true if the given object is an instance of ElasticSanVolumeGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ElasticSanVolumeGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ElasticSanVolumeGroup.__pulumiType;
    }

    public readonly elasticSanId!: pulumi.Output<string>;
    public readonly encryption!: pulumi.Output<outputs.ElasticSanVolumeGroupEncryption | undefined>;
    public readonly encryptionType!: pulumi.Output<string | undefined>;
    public readonly identity!: pulumi.Output<outputs.ElasticSanVolumeGroupIdentity | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkRules!: pulumi.Output<outputs.ElasticSanVolumeGroupNetworkRule[] | undefined>;
    public readonly protocolType!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ElasticSanVolumeGroupTimeouts | undefined>;

    /**
     * Create a ElasticSanVolumeGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ElasticSanVolumeGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ElasticSanVolumeGroupArgs | ElasticSanVolumeGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ElasticSanVolumeGroupState | undefined;
            resourceInputs["elasticSanId"] = state ? state.elasticSanId : undefined;
            resourceInputs["encryption"] = state ? state.encryption : undefined;
            resourceInputs["encryptionType"] = state ? state.encryptionType : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkRules"] = state ? state.networkRules : undefined;
            resourceInputs["protocolType"] = state ? state.protocolType : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ElasticSanVolumeGroupArgs | undefined;
            if ((!args || args.elasticSanId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'elasticSanId'");
            }
            resourceInputs["elasticSanId"] = args ? args.elasticSanId : undefined;
            resourceInputs["encryption"] = args ? args.encryption : undefined;
            resourceInputs["encryptionType"] = args ? args.encryptionType : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkRules"] = args ? args.networkRules : undefined;
            resourceInputs["protocolType"] = args ? args.protocolType : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ElasticSanVolumeGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ElasticSanVolumeGroup resources.
 */
export interface ElasticSanVolumeGroupState {
    elasticSanId?: pulumi.Input<string>;
    encryption?: pulumi.Input<inputs.ElasticSanVolumeGroupEncryption>;
    encryptionType?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.ElasticSanVolumeGroupIdentity>;
    name?: pulumi.Input<string>;
    networkRules?: pulumi.Input<pulumi.Input<inputs.ElasticSanVolumeGroupNetworkRule>[]>;
    protocolType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ElasticSanVolumeGroupTimeouts>;
}

/**
 * The set of arguments for constructing a ElasticSanVolumeGroup resource.
 */
export interface ElasticSanVolumeGroupArgs {
    elasticSanId: pulumi.Input<string>;
    encryption?: pulumi.Input<inputs.ElasticSanVolumeGroupEncryption>;
    encryptionType?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.ElasticSanVolumeGroupIdentity>;
    name?: pulumi.Input<string>;
    networkRules?: pulumi.Input<pulumi.Input<inputs.ElasticSanVolumeGroupNetworkRule>[]>;
    protocolType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ElasticSanVolumeGroupTimeouts>;
}
