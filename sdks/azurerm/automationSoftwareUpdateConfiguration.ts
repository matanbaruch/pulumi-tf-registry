// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AutomationSoftwareUpdateConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing AutomationSoftwareUpdateConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutomationSoftwareUpdateConfigurationState, opts?: pulumi.CustomResourceOptions): AutomationSoftwareUpdateConfiguration {
        return new AutomationSoftwareUpdateConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/automationSoftwareUpdateConfiguration:AutomationSoftwareUpdateConfiguration';

    /**
     * Returns true if the given object is an instance of AutomationSoftwareUpdateConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AutomationSoftwareUpdateConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutomationSoftwareUpdateConfiguration.__pulumiType;
    }

    public readonly automationAccountId!: pulumi.Output<string>;
    public readonly duration!: pulumi.Output<string | undefined>;
    public /*out*/ readonly errorCode!: pulumi.Output<string>;
    public /*out*/ readonly errorMessage!: pulumi.Output<string>;
    public readonly linux!: pulumi.Output<outputs.AutomationSoftwareUpdateConfigurationLinux | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nonAzureComputerNames!: pulumi.Output<string[] | undefined>;
    public readonly postTask!: pulumi.Output<outputs.AutomationSoftwareUpdateConfigurationPostTask | undefined>;
    public readonly preTask!: pulumi.Output<outputs.AutomationSoftwareUpdateConfigurationPreTask | undefined>;
    public readonly schedule!: pulumi.Output<outputs.AutomationSoftwareUpdateConfigurationSchedule>;
    public readonly target!: pulumi.Output<outputs.AutomationSoftwareUpdateConfigurationTarget | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.AutomationSoftwareUpdateConfigurationTimeouts | undefined>;
    public readonly virtualMachineIds!: pulumi.Output<string[] | undefined>;
    public readonly windows!: pulumi.Output<outputs.AutomationSoftwareUpdateConfigurationWindows | undefined>;

    /**
     * Create a AutomationSoftwareUpdateConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutomationSoftwareUpdateConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutomationSoftwareUpdateConfigurationArgs | AutomationSoftwareUpdateConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutomationSoftwareUpdateConfigurationState | undefined;
            resourceInputs["automationAccountId"] = state ? state.automationAccountId : undefined;
            resourceInputs["duration"] = state ? state.duration : undefined;
            resourceInputs["errorCode"] = state ? state.errorCode : undefined;
            resourceInputs["errorMessage"] = state ? state.errorMessage : undefined;
            resourceInputs["linux"] = state ? state.linux : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nonAzureComputerNames"] = state ? state.nonAzureComputerNames : undefined;
            resourceInputs["postTask"] = state ? state.postTask : undefined;
            resourceInputs["preTask"] = state ? state.preTask : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["virtualMachineIds"] = state ? state.virtualMachineIds : undefined;
            resourceInputs["windows"] = state ? state.windows : undefined;
        } else {
            const args = argsOrState as AutomationSoftwareUpdateConfigurationArgs | undefined;
            if ((!args || args.automationAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'automationAccountId'");
            }
            if ((!args || args.schedule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schedule'");
            }
            resourceInputs["automationAccountId"] = args ? args.automationAccountId : undefined;
            resourceInputs["duration"] = args ? args.duration : undefined;
            resourceInputs["linux"] = args ? args.linux : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nonAzureComputerNames"] = args ? args.nonAzureComputerNames : undefined;
            resourceInputs["postTask"] = args ? args.postTask : undefined;
            resourceInputs["preTask"] = args ? args.preTask : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["virtualMachineIds"] = args ? args.virtualMachineIds : undefined;
            resourceInputs["windows"] = args ? args.windows : undefined;
            resourceInputs["errorCode"] = undefined /*out*/;
            resourceInputs["errorMessage"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AutomationSoftwareUpdateConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AutomationSoftwareUpdateConfiguration resources.
 */
export interface AutomationSoftwareUpdateConfigurationState {
    automationAccountId?: pulumi.Input<string>;
    duration?: pulumi.Input<string>;
    errorCode?: pulumi.Input<string>;
    errorMessage?: pulumi.Input<string>;
    linux?: pulumi.Input<inputs.AutomationSoftwareUpdateConfigurationLinux>;
    name?: pulumi.Input<string>;
    nonAzureComputerNames?: pulumi.Input<pulumi.Input<string>[]>;
    postTask?: pulumi.Input<inputs.AutomationSoftwareUpdateConfigurationPostTask>;
    preTask?: pulumi.Input<inputs.AutomationSoftwareUpdateConfigurationPreTask>;
    schedule?: pulumi.Input<inputs.AutomationSoftwareUpdateConfigurationSchedule>;
    target?: pulumi.Input<inputs.AutomationSoftwareUpdateConfigurationTarget>;
    timeouts?: pulumi.Input<inputs.AutomationSoftwareUpdateConfigurationTimeouts>;
    virtualMachineIds?: pulumi.Input<pulumi.Input<string>[]>;
    windows?: pulumi.Input<inputs.AutomationSoftwareUpdateConfigurationWindows>;
}

/**
 * The set of arguments for constructing a AutomationSoftwareUpdateConfiguration resource.
 */
export interface AutomationSoftwareUpdateConfigurationArgs {
    automationAccountId: pulumi.Input<string>;
    duration?: pulumi.Input<string>;
    linux?: pulumi.Input<inputs.AutomationSoftwareUpdateConfigurationLinux>;
    name?: pulumi.Input<string>;
    nonAzureComputerNames?: pulumi.Input<pulumi.Input<string>[]>;
    postTask?: pulumi.Input<inputs.AutomationSoftwareUpdateConfigurationPostTask>;
    preTask?: pulumi.Input<inputs.AutomationSoftwareUpdateConfigurationPreTask>;
    schedule: pulumi.Input<inputs.AutomationSoftwareUpdateConfigurationSchedule>;
    target?: pulumi.Input<inputs.AutomationSoftwareUpdateConfigurationTarget>;
    timeouts?: pulumi.Input<inputs.AutomationSoftwareUpdateConfigurationTimeouts>;
    virtualMachineIds?: pulumi.Input<pulumi.Input<string>[]>;
    windows?: pulumi.Input<inputs.AutomationSoftwareUpdateConfigurationWindows>;
}
