// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CdnEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing CdnEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CdnEndpointState, opts?: pulumi.CustomResourceOptions): CdnEndpoint {
        return new CdnEndpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/cdnEndpoint:CdnEndpoint';

    /**
     * Returns true if the given object is an instance of CdnEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CdnEndpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CdnEndpoint.__pulumiType;
    }

    public readonly contentTypesToCompresses!: pulumi.Output<string[] | undefined>;
    public readonly deliveryRules!: pulumi.Output<outputs.CdnEndpointDeliveryRule[] | undefined>;
    public /*out*/ readonly fqdn!: pulumi.Output<string>;
    public readonly geoFilters!: pulumi.Output<outputs.CdnEndpointGeoFilter[] | undefined>;
    public readonly globalDeliveryRule!: pulumi.Output<outputs.CdnEndpointGlobalDeliveryRule | undefined>;
    public readonly isCompressionEnabled!: pulumi.Output<boolean | undefined>;
    public readonly isHttpAllowed!: pulumi.Output<boolean | undefined>;
    public readonly isHttpsAllowed!: pulumi.Output<boolean | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly optimizationType!: pulumi.Output<string | undefined>;
    public readonly originHostHeader!: pulumi.Output<string | undefined>;
    public readonly originPath!: pulumi.Output<string | undefined>;
    public readonly origins!: pulumi.Output<outputs.CdnEndpointOrigin[]>;
    public readonly probePath!: pulumi.Output<string | undefined>;
    public readonly profileName!: pulumi.Output<string>;
    public readonly querystringCachingBehaviour!: pulumi.Output<string | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.CdnEndpointTimeouts | undefined>;

    /**
     * Create a CdnEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CdnEndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CdnEndpointArgs | CdnEndpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CdnEndpointState | undefined;
            resourceInputs["contentTypesToCompresses"] = state ? state.contentTypesToCompresses : undefined;
            resourceInputs["deliveryRules"] = state ? state.deliveryRules : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["geoFilters"] = state ? state.geoFilters : undefined;
            resourceInputs["globalDeliveryRule"] = state ? state.globalDeliveryRule : undefined;
            resourceInputs["isCompressionEnabled"] = state ? state.isCompressionEnabled : undefined;
            resourceInputs["isHttpAllowed"] = state ? state.isHttpAllowed : undefined;
            resourceInputs["isHttpsAllowed"] = state ? state.isHttpsAllowed : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["optimizationType"] = state ? state.optimizationType : undefined;
            resourceInputs["originHostHeader"] = state ? state.originHostHeader : undefined;
            resourceInputs["originPath"] = state ? state.originPath : undefined;
            resourceInputs["origins"] = state ? state.origins : undefined;
            resourceInputs["probePath"] = state ? state.probePath : undefined;
            resourceInputs["profileName"] = state ? state.profileName : undefined;
            resourceInputs["querystringCachingBehaviour"] = state ? state.querystringCachingBehaviour : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as CdnEndpointArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.origins === undefined) && !opts.urn) {
                throw new Error("Missing required property 'origins'");
            }
            if ((!args || args.profileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profileName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["contentTypesToCompresses"] = args ? args.contentTypesToCompresses : undefined;
            resourceInputs["deliveryRules"] = args ? args.deliveryRules : undefined;
            resourceInputs["geoFilters"] = args ? args.geoFilters : undefined;
            resourceInputs["globalDeliveryRule"] = args ? args.globalDeliveryRule : undefined;
            resourceInputs["isCompressionEnabled"] = args ? args.isCompressionEnabled : undefined;
            resourceInputs["isHttpAllowed"] = args ? args.isHttpAllowed : undefined;
            resourceInputs["isHttpsAllowed"] = args ? args.isHttpsAllowed : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["optimizationType"] = args ? args.optimizationType : undefined;
            resourceInputs["originHostHeader"] = args ? args.originHostHeader : undefined;
            resourceInputs["originPath"] = args ? args.originPath : undefined;
            resourceInputs["origins"] = args ? args.origins : undefined;
            resourceInputs["probePath"] = args ? args.probePath : undefined;
            resourceInputs["profileName"] = args ? args.profileName : undefined;
            resourceInputs["querystringCachingBehaviour"] = args ? args.querystringCachingBehaviour : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["fqdn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CdnEndpoint.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CdnEndpoint resources.
 */
export interface CdnEndpointState {
    contentTypesToCompresses?: pulumi.Input<pulumi.Input<string>[]>;
    deliveryRules?: pulumi.Input<pulumi.Input<inputs.CdnEndpointDeliveryRule>[]>;
    fqdn?: pulumi.Input<string>;
    geoFilters?: pulumi.Input<pulumi.Input<inputs.CdnEndpointGeoFilter>[]>;
    globalDeliveryRule?: pulumi.Input<inputs.CdnEndpointGlobalDeliveryRule>;
    isCompressionEnabled?: pulumi.Input<boolean>;
    isHttpAllowed?: pulumi.Input<boolean>;
    isHttpsAllowed?: pulumi.Input<boolean>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    optimizationType?: pulumi.Input<string>;
    originHostHeader?: pulumi.Input<string>;
    originPath?: pulumi.Input<string>;
    origins?: pulumi.Input<pulumi.Input<inputs.CdnEndpointOrigin>[]>;
    probePath?: pulumi.Input<string>;
    profileName?: pulumi.Input<string>;
    querystringCachingBehaviour?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.CdnEndpointTimeouts>;
}

/**
 * The set of arguments for constructing a CdnEndpoint resource.
 */
export interface CdnEndpointArgs {
    contentTypesToCompresses?: pulumi.Input<pulumi.Input<string>[]>;
    deliveryRules?: pulumi.Input<pulumi.Input<inputs.CdnEndpointDeliveryRule>[]>;
    geoFilters?: pulumi.Input<pulumi.Input<inputs.CdnEndpointGeoFilter>[]>;
    globalDeliveryRule?: pulumi.Input<inputs.CdnEndpointGlobalDeliveryRule>;
    isCompressionEnabled?: pulumi.Input<boolean>;
    isHttpAllowed?: pulumi.Input<boolean>;
    isHttpsAllowed?: pulumi.Input<boolean>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    optimizationType?: pulumi.Input<string>;
    originHostHeader?: pulumi.Input<string>;
    originPath?: pulumi.Input<string>;
    origins: pulumi.Input<pulumi.Input<inputs.CdnEndpointOrigin>[]>;
    probePath?: pulumi.Input<string>;
    profileName: pulumi.Input<string>;
    querystringCachingBehaviour?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.CdnEndpointTimeouts>;
}
