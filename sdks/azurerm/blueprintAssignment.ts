// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BlueprintAssignment extends pulumi.CustomResource {
    /**
     * Get an existing BlueprintAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BlueprintAssignmentState, opts?: pulumi.CustomResourceOptions): BlueprintAssignment {
        return new BlueprintAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:index/blueprintAssignment:BlueprintAssignment';

    /**
     * Returns true if the given object is an instance of BlueprintAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BlueprintAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BlueprintAssignment.__pulumiType;
    }

    public /*out*/ readonly blueprintName!: pulumi.Output<string>;
    public /*out*/ readonly description!: pulumi.Output<string>;
    public /*out*/ readonly displayName!: pulumi.Output<string>;
    public readonly identity!: pulumi.Output<outputs.BlueprintAssignmentIdentity>;
    public readonly location!: pulumi.Output<string>;
    public readonly lockExcludeActions!: pulumi.Output<string[] | undefined>;
    public readonly lockExcludePrincipals!: pulumi.Output<string[] | undefined>;
    public readonly lockMode!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly parameterValues!: pulumi.Output<string | undefined>;
    public readonly resourceGroups!: pulumi.Output<string | undefined>;
    public readonly targetSubscriptionId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.BlueprintAssignmentTimeouts | undefined>;
    public /*out*/ readonly type!: pulumi.Output<string>;
    public readonly versionId!: pulumi.Output<string>;

    /**
     * Create a BlueprintAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BlueprintAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BlueprintAssignmentArgs | BlueprintAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BlueprintAssignmentState | undefined;
            resourceInputs["blueprintName"] = state ? state.blueprintName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["lockExcludeActions"] = state ? state.lockExcludeActions : undefined;
            resourceInputs["lockExcludePrincipals"] = state ? state.lockExcludePrincipals : undefined;
            resourceInputs["lockMode"] = state ? state.lockMode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parameterValues"] = state ? state.parameterValues : undefined;
            resourceInputs["resourceGroups"] = state ? state.resourceGroups : undefined;
            resourceInputs["targetSubscriptionId"] = state ? state.targetSubscriptionId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["versionId"] = state ? state.versionId : undefined;
        } else {
            const args = argsOrState as BlueprintAssignmentArgs | undefined;
            if ((!args || args.identity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identity'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.targetSubscriptionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetSubscriptionId'");
            }
            if ((!args || args.versionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'versionId'");
            }
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["lockExcludeActions"] = args ? args.lockExcludeActions : undefined;
            resourceInputs["lockExcludePrincipals"] = args ? args.lockExcludePrincipals : undefined;
            resourceInputs["lockMode"] = args ? args.lockMode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parameterValues"] = args ? args.parameterValues : undefined;
            resourceInputs["resourceGroups"] = args ? args.resourceGroups : undefined;
            resourceInputs["targetSubscriptionId"] = args ? args.targetSubscriptionId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["versionId"] = args ? args.versionId : undefined;
            resourceInputs["blueprintName"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BlueprintAssignment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BlueprintAssignment resources.
 */
export interface BlueprintAssignmentState {
    blueprintName?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    identity?: pulumi.Input<inputs.BlueprintAssignmentIdentity>;
    location?: pulumi.Input<string>;
    lockExcludeActions?: pulumi.Input<pulumi.Input<string>[]>;
    lockExcludePrincipals?: pulumi.Input<pulumi.Input<string>[]>;
    lockMode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parameterValues?: pulumi.Input<string>;
    resourceGroups?: pulumi.Input<string>;
    targetSubscriptionId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BlueprintAssignmentTimeouts>;
    type?: pulumi.Input<string>;
    versionId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BlueprintAssignment resource.
 */
export interface BlueprintAssignmentArgs {
    identity: pulumi.Input<inputs.BlueprintAssignmentIdentity>;
    location: pulumi.Input<string>;
    lockExcludeActions?: pulumi.Input<pulumi.Input<string>[]>;
    lockExcludePrincipals?: pulumi.Input<pulumi.Input<string>[]>;
    lockMode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parameterValues?: pulumi.Input<string>;
    resourceGroups?: pulumi.Input<string>;
    targetSubscriptionId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BlueprintAssignmentTimeouts>;
    versionId: pulumi.Input<string>;
}
